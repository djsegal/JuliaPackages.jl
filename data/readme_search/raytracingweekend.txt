raytracingweekend adapted ray tracing weekend peter shirley run options pluto notebook suited learning alongside julia beginner quick interactive experimentation self contained version matches book raytracing adapting tips start differs module src proto short script runs various tests records historical timings ryzen benchmarking interactively vscode repl activate press shift enter lines plots implementation details code complicated required optimized execution speed simplicity plan support running gpu match simd cuda rocm performance finally refrained implementing level optimizations bvhs smarter sampling fair comparison using parameterized floating types thanks woclass allows switch float calculations makes somewhat complex vec color tried minimize memory allocations allocation stack instead heap staticarrays pre allocate rays tensors parallelism exhausted intrusive low doesn extent please participate discussion git history comments changes occasionally merge competitive targets gpsnoopy ispc vulkan implementations perf overclocked ubuntu gcc modified compiled std wall wextra ffast math march znver main cpp lpthread notice haven optimize specifically zen cpu architecture physical threads reports temperature hovered degrees celsius warm alarming examined looks algorithms bvh checked threaded model similar idea tries vectorize result time iiuc customized specialized gpgpu build linux stable compiler fans pushed max feel safer liquid cooled heat sink brief look guess explained layout course language focused impressive method uncomment render scene random spheres elem type cam project mode fast target notes following arguments didn noticeable difference add fastmath try loopvectorization compared versions currently slower profiler probably hanging fruits left don require algorithmic change bit mersenne faster compute sota xoroshiro plus results equivalent detailed starting original super slow optimization hours tib image looked weird blurry removing remaining replacing svector gib convert myfloat specify return value option hitrecord hit initialize unnecessary elements worse writing lot replace lots including inline stuff hour rand avoid expected provide alias struct const hittablelist vector hittable single thread minutes bounces fine except negatively scaled sphere switching decreased inbounds functions note due randomness adapt christ foster base getproperty expect eliminate half pixel offset fixed rngs seeds expecting bound useful installation usage web interface file mins download packages evaluate cells coding conventions aren respected easier follow consult references unicode character help cut paste particular typed pressing tab unlike implement chapter separately able examples minimal duplication bother ppm format display images directly saving disk row column inverted loops iterate columns variable names final pixels coordinate system matrices supports defined arbitrary wasn practical especially moving cell normalize direction optionally reason extra cost marginal indicate bad chrisrackauckhas awesome mit parallel computing scientific machine watched lessons learnt highly recommend raytracers cshenton developed roughly sophisticated raytracer based excellent physically rendering theory example books special recommended major clean ups chris suggestions steps term investigate degradation doubled update share twitter etc break multiple files distance check independent read libraries figure approach welcome suggestion save png continue watching rest integrate materials concrete tight inner appear expensive batches called litterature simplify scatter operate entire tensor efficiently parallelizable fieldvector structofarrays port failed attempts meant convenient function caused call huge bottleneck todo lens import sym symbol dictionary maps symbols indices dict elseif else getfield previously path black halo inside increasing bounce count resolved issue