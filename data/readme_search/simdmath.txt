simdmath lightweight module explicit vectorization simple math functions focus mainly vectorizing polynomial evaluation main evaluating polynomials similar length single primary bessel function bessels statically coefficients unrolled size tuples compilation advanced simd loopvectorization simdpoly package utilizing experimental support complex provided requires julia special compute example structure look const ntuple rand test evalpoly return muladd advantageous independent require evaluations relying auto vectorizer happens fragile depending values reliable check architectures using code llvm native benchmark compare time btime setup allocations bytes happening sequentially vectorize pack poly inline horner data value improving performance larger degree scheme latency bound total runtime straight base library schemes times packed val push round minimum digits plots plot label xlabel ylabel relative speedup legend topleft mentioned sequential multiply add instructions performed parallel estrin method won discuss improve break odd powers fourth eighth allow computing simultaneously regard rearranging additional arithmetic considered fastmath approach rearranges floating actually increasing amount operations happen increased advantages straightforward superior associative approaches slightly results adding multiplying differnet asymptotically increase respecitively degrees advanges encouraged individual course depends knowing allows packing efficient depend evaluate fastest faster standard preferred run desired computer measured static chebyshev basis particularly comparison following define scalar version clenshaw benchmarktools trial samples range min max median mean histogram frequency memory estimate allocs vecelement float log efficiently leads speed associativity neccessarily accurate tested