madnlp nonlinear programming nlp solver purely implemented julia implements filter line search algorithm ipopt seeks streamline development modeling algorithmic paradigms exploit structures efficient performance computers installation pkg add build process requires fortran compilers installed shell sudo apt install gcc gfortran linux brew cask macos interfaced sparse dense linear solvers umfpack mumps mkl pardiso hsl optional lapack cusolver dependencies except cuda automatically source codes obtained user coin stable tarball coinhsl tar placed deps download obtain paridso shared libraries library file license home directory absolute path import joinpath dirname pathof functional nvidia driver corresponding toolkit obtaining files run customized setting following environment variables env usr local bin default blas openblas available otherwise enalbe openmp false true optimization flag alternatively simply specify follows opt lib code compiled provided directly usage packages jump plasmo nlpmodels interface using model optimizer print level info max iter variable start nlobjective min optimize graph optigraph optinode constraint objective nlnodeconstraint exp linkconstraint debug cutest cutestmodel primalc pardisomkl warn wall time special gpu imported main module lapackgpu multi threaded schur schwawrz session started threads options list check bug reports support please report issues feature requests via github issue tracker