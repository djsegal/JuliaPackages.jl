monadfunctions experimental package functions following types monads maybe result list usage fmap function map monad none input wrapped object output automatically singleton constant unlike implementations ordinary values apply usual return elevated else switch useful value encountered cata execute left extend implementing maybetypetrait note isnone trait default type capture create simply extract check discrimination special exception handling constructor subtypes errorexception considered julia monadresult argumenterror bad error convenient true methoderror method matching essentially dimensional array elements flatten nested element int examples using handle contains sometimes returns throwing indicate negative condition example match hello bit unfortunate test matched world notion functional style concat happen composable single arguments base regex fix regexmatch string don piracy define convince core developers addition library fine close doesn abc help getting little hard read compose process look data flow pipeline conditional statement track scenarios party sick monadeither play badminton weekend convention stay normal conditions encounter ignore computation captured tell wrong errors simple run database query establish connection obtain cursor trouble throw api calls try conn url sql select somehwere catch unable due rethrow nice flows anonymous handler err lefteither set dataframe job sometable returned calling respectively dispatch based resulteither erroreither