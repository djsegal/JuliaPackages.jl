lispsyntax clojure lisp syntax julia package provides translator convenience macros defn fib test implemented expression ast compiler jit multiple dispatch infrastructure code generation execution meaningful semantics entirely based similar scheme net result alternative implemention special forms def symbol init quote form param expr defmacro lambda binding global import notable differences names naming restrictions maintained reference variables function scopes requires declaration symbols referenced scope functions declare via awesome destructuring binds requiring bindings parameter lists etc currently lack loop recur support tco macro implementation tail call rewriting appropriate optional typing named methods efficiency defined translated normal expressions means act lambdas local method definition probably sophisticated system look standard objects returned require translation step generate trees directly called hygiene follows approach hygenic default explicit escaping using esc opposite specially string supported str repl mode alleviating type top level simply initialize initialized press enter backspace exit ready reduce generic return prompt ctrl access fuctions create customized todo exceptions straight forward structs aggregate types modules include confusingly matches varargs arguments