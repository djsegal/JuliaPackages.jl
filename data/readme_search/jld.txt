jld save load variables julia data format files conventionally extension widely storage programming language specific dialect hdf cross platform multi frequently scientific comparison plain automatically add attributes naming conventions preserve type information object lossless arbitrary objects complete solution appears serializer accessed via serialize deserialize commands inter process communication term backwards compatibility currently uncertain jldarchives repository exists test file formats choose using please jls distinguish note read trusted sources capable executing code installation package manager pkg quickstart module begin don care advanced features simple syntax tmp myfile arr equivalently explicitly saving alternatively pass dictionary keys strings saved variable names values reads entire returned request particular example return value assign fileio provide generic interface means user foo bar ambiguous inferred requested encountered loading magic bytes beginning infer convenience macros compress true create compression mention saves current conversely pop directly global workspace mind significant limitations inside function constraints string interpolation filenames etc stem compiles functions machine evaluation introduce runtime evaluate expressions workspaces recommended considerably robust cost slight reduction fine grained control obtained functional jldopen mydata write allows generated advantage close error level wrapper providing mygroup dset scalar dataset dest rand types definitions defined fresh session definition available mytype external ensure loaded suite behaviors provided modules reading automatic addrequire specify dependencies suppose mytypes default path export struct int following somedata cause whenever performance documentation particularly section custom serializers extensive including found doc directory contains scripts demonstrate usage credits simon kornblith tim holy maintainers primary authors tom short contributed conversion thanks users reported bugs tested fixes