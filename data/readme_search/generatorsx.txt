generatorsx iterate foldl humans note mechanism defining factored simple robust package fgenerators single easy read source code example creating hoc iterable julia using generator function generate yield collect element array int define iteration protocols existing type struct count start stop base length itr max eltype return true break irtools based protocol derives transducers ast transformation collection hard programmer adequate machine carefully processes furthermore llvm compilers produce optimal loop involving importantly directly control happen result complex transformations mental final solves providing syntax sugar arbitrary flow constructs write mean natural sub performance solved generating generates translates definition optimized easily compiler easier characteristics vital fast blocked nested data structures collections heterogeneously typed elements solution applied created third zip implemented wouldn defines expression caveats proof concept writing beta due awful consuming frameworks floops continuables takes approach similar portion difference foreach instead basic building block iterations consequently relies ref constructing stateful accumulation introduce elide heap allocations applicable changing provide hence supporting impossible extending hand mechanisms version initialvalues implement initial value handling readme includes benchmarks discussions especially contrasts resumablefunctions channel create flexible blown coroutine implementation mutation choice play nicely parallelism pygen python style effects mike innes exploration idea author discussion discourse comments internals design julialang