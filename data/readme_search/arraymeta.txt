arraymeta rationale abstractness lack thereof fallback implementations array operations base julia left unsatisfied methods assume presence efficient elementwise access getindex operation indexlinear indexcartesian hard reconcile abstraction distributed blocked arrays resulting darray wrap abstractarray wrapping trivial map reduce reducedim broadcast wrappers constantly updated sync set features versions involve similar boiler plate code dimensionality checks reflection output type dimensions optimized memory locality leading complex strictly exist package aims evolve means available express level currently basic idea arrayop fall section learn macro arrrays implement efficiently hypothetically moved implemented using delete lot replace simpler expressions types example wouldn defined dagger implementation optimizations multi threading speed ecosystem denoting input interact produce notation einstein equivalent tensoroperations comparison added support described examples collect reshape ones transpose arg sin args constant default note returns dimensional dimension lhs expression reduced einsten reducer user specified function defaults squeeze apl style prod matmul generate loops perform required hence noted comments overwriting notice instead abstractarrays specialized efficiency trivially generalizes aids genericness potentially define generated dim val idx symbol ndims copy allowing iteration tilediteration cache demo consider permutedims rand btime allocations mib presumably doesn efforts block inputs misses version opportunities syntactically rewrite faster allocates temporaries permutedimsarray step lowering intermediate form expr simply translates lower goal assign contains rhs consisting combination indexing indexsym indexconst int reduction identity eltype creates allocvar named allocated iterated try lowered representing parameterized arguments functions steps dispatch tailored specific calling entry world object passed calls based able pick normal special tries allocate allocarray generating loop task act perofm src impl abstract acheive interestingly rewriting chunks handled practical blas gemm reordering improvements communication computation time tensor contraction engine researchy formalize interface sparse matrices indexedtable axisarrays autodifferentiation explore mapslices stencils differences jutho inspired codebase specifically tensors real transposition conjugation multiplication scalars cover framework notable additions combining reducing constants opposed scalar offsets supports finally system