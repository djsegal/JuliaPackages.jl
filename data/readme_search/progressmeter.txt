progressmeter progress meter running operations julia installation execute using pkg add usage meters tasks pre determined steps functions process loops map pmap reduce distributed showprogress computing sleep incantation minimum update interval eta final duration computation runs quickly extraneous output displayed macro wraps loop comprehension object iterated implements length method handle continue correctly result reducer sync implied control updates reports manually function filenames array hard slow reading file data increment varies iterations readfilelines filename string seekend filesize position seekstart eof line readline core methods progressthresh progressunknown updaters thread safe threads spawn etc rand finish vector task undef begin wait bar style optionally description specified prepended characters shown initial pass yield manner similar python progressbar properties modified keywords glyphs passing barglyphs keyword argument constructor arguments single character barlen color yellow acts transition empty filled example definining target threshold terminate criterion satisfied achieve convergence tolerance circumstances type prog minimizing val exp range stop unknown deterministic titles read break display calls called counter monotonically increases set hand total aaa global alternatively spinning ball symbol spinner true default changes failure condition found false searching answer tries completely customize animate burning midnight oil looking spinners include printing additional information print related showvalues following displays iteration value dummy variable iter passed evaluated updated avoid unnecessary overhead zero callback generate unlike version evaluate average time setting optional showspeed constructing instead conditionally disabling addition support enabled disable verbose track looping awesome integer const bars parse bool env environment outer inner tracking jupyter notebooks lab allow overwrite cell releases printed repeatedly starting release clears remove restore previous behavior calling ijulia append enable warning message tips parallel programming remote parallelization multiple processes workers communicate displaying accomplished remotechannel channel introduce sum execution start synced async trigger tells returning reducing somehow distribution happen achieved supply custom text hpc scheduler helper logging automatically isa base tty stderr development debugging developing convenient redirect terminal window interfer repl linux macos name corresponding command constructors run dev pts writing wrap iocontext ioc executing credits thanks alan bahm andrew burroughs jim garrison major enhancements package