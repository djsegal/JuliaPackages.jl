devectorize julia framework vectorized evaluation provides macros functions vectorize vector expression users write computations level time enjoying run performance loops automatically translates expressions faster tight results gain programming languages including immediately evaluated construction simple strategy optimal behaviors example include creation unnecessary temporaries repeated memory round trips consider following immediate respectively storing array traversed twice moreover computation arrays bound depends times scan formula efficient evaluate expressed using follows length zeros piece code pass creating temporary low difficult read maintain combine elegance answer look examples hold assignment happens integrated loop emitted compute powerful meta makes achieve goal incredibly syntax taking advantage macro devec statement exactly except performs magic translating scenes remaining organized section basic usage introduces improve design brief overview structures install package official manager pkg add updated switch master branch git pull commits ordinary remember putting assignments translate exp sum inspect generated prints codes prior evaluating benchmark table typical vec hand coded ewise complex shift dot colwise rowwise eucdist result obtained commit mac script test bench comes baseline report gains takes sec tagged typically comparable sometimes slightly note recognizes subset commonly listed element wise map sin log list operators currently supported max min clamp blend sqrt cbrt sqr rcp floor ceil trunc expm cos tan asin acos atan sinh cosh tanh asinh acosh atanh erf erfc gamma lgamma digamma notes operator entail semantics depending arguments express multiplication division perfectly base module provided extensions easier references reference means forms integer symbol refers variable appear left support flexible planned future releases emit creates store process entails overhead inferring type shape created eliminate runtime overheads writing directly written reduction maximum mean five minimum hybrid seemingly actually requires computing top situations correct perform break ones tmp breaks tries generate traversals block begin current implementation simply vectorizes version sophisticated algorithm identify opportunities sharing goes stages typed enriched semantic information texpr compile steps decompose sequence compose via factory integrate return front parses input instance expr contains syntatic understand meaning transformation establishes hierarchy src briefly summarized tewise serve argument tscalar scalar tnum numerical literals tscalarsym trefscalar tsym tref trefcol trefrow tmap treduc tcolwisereduc column trowwisereduc row tassign asssignment tblock function defined analyzes recognized returns otherwise raises error specific throws exception deerror analysis performed relies fun traits tell mapping promote eltype bool contexts extensible notion context setting cpu simd cuda opencl etc abstract evalcontext super class namely scalarcontext mapped introduced providing options choose compilation driver delegates generation init generating initialization main reduce complexity preprocessing includes blocks identifies trivial emits bounds name object referred involve real precautions prevent potential alias statements gensym avoid collision names processing implemented simpler account intricacies backend composition routines recursive kernel kernels generates value terminals overloaded ensure behavior combines likewise body