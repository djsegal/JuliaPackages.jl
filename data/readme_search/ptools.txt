ptools collection utilities parallel computation julia currently following available workerset ability logically pool set workers specific tasks pfork parallelism using unix fork system call servertasks running simply processes incoming requests loop useful situations maintained function calls retrieved task local storage methods sharedmemory event procesing single multi core machine avoids overhead associated sending recieving data sets queuedtasks schedule executed remote worker change priorities control execution platforms tested ubuntu osx windows implementation array process ids created integer mode enables round robin fashion tracks busy sends request free queues remotecall functions extended support args fetch wait behaviour except belonging follow model specified execute nforks forks times executes child parameter forked index returns size nth element value returned passing huge amounts issue parent shared memory segment children visibility modify don bother returning nprocs incompatible unpredictable behavior yield concurrently active compute bound usage server typical pattern start stasks optionally mappings series multiple invocations pmap somefunction someotherfunction stop required user store retrieve information example understand specify configuration shmcfg svar int uint line ntasks count started symbols segments added handle mapped current note prepare arguments offset list resp begin refernces arrays mypid myid true access view changes println values updated finally causes stopped unmapped exported false shmpfx optional name symbol type dims lsts similar length identical stops frees partition job distinct string sharing users self concurrent jobs shm create creates maps global unlink run passed linux dev abnormal program termination called manually delete allocated form