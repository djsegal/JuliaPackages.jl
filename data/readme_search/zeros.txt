zeros module provides singular datatype named zero instances identical represent value subtype integer common operations etc defined propagate type return values correct real ieee inf nan example reduces compile time effect behaviour sometimes referred strong complier able optimisations functions called arguments julia literal constants propagated similar hard control literals trying convert nonzero throw inexacterror attempting divide divideerror returning denominator usually sign piece code written optimally testzero function change variable equal foo call instead complied specifically input result speed ups outweigh cost branching create complex imaginary typically faster execution advanced usage course writing handle makes special types classes nine methods combination binary operator times define constructors using abstract myabstractcomplex struct mycomplex myreal myimaginary disambiguation worth noting require storage half fields multiplication base defines combinations try multiplying purely int magic inference figured equals computed efficiently hand coded found doubledoubles double field separate single requires existing modifications particular assertions restrictive