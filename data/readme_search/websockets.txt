websockets server client protocol julia overhead message layered tcp http establishing connections upgrading required due instabilities minor public api changes advise using function except experimenting example tries typical code errors replacement serve writeguarded readguarded wslog response serverws logger websocketlogger begin handler req wshandler websocket connection hello servetask async port task info listening runnable cbd earlier versions test browser wrote repl requests favicon site wrong stacktraces try revise match requirements requires reload page verify updated data success println stderr received string loglevel connected upgraded simply modifing constructors closed exiting close running closing access inline documentation look examples folder testing files demonstrate variety benchmarks servers separate processes oposed asyncronous tasks package originally remained unchanged depends ambitious development functionality implemented directly downstream lag version avoid borderline bugs tests import methods rely imported listen instead possibly previous release capped issues released aim replace similar reducing wrapper ideally top level continue pass change read write entities program svg file web containing javascript connecting adding interaction graphics enjoy low latency speed minimum edge coding implement send subprotocols typically subprotocol sensor input text display registered remote controlled hardware relay user backend simulations build network including clients convenience functions gatekeeping suited interactions via cross platform applications electron workload time moved resources error checking reduced preferably passing arguments compiled security advantages evaluation tips putting handlers coroutines process advantage practice modify responses include limited tokens address wsuri readguared blocking easily reading indefinitely timeout compression currenlty adaptable local probably gain worry milliseconds quirks warm transmission pause avoided heartbeats performance missing garbage collection increases semi random intervals visible benchmark plots memory allocating prefixes accurate accurately track sequences logging messages debugging servews run directed channel docs logged debug statements set count prefer coroutine approach sent serving pages internet nice developing locally comments source help features section planning contributions welcome makes limits current immutable removes ratelimiter integrates closely resembles consolelogger standard library additional closer integration core introduce receiving ping pong return boolean indicate failure reason contain currently pending facilities alternative packages dandelionwebsockets direct implementation updating dependency dropped compatibility stated project toml kept claiming compatible restraints graph defaultoptions changed default options behaviour considered bug result don call etc syntax removed wrap requesthandlerfunction accepts called handle replaces request accepting consider taking keyword option values minimal keywords cert key accepted mbedtls sslconf sslconfig upgrade bevaviour overrule list type serveroptions corresponding fields reside optional tcpisvalid ratelimiting performed outside rate limit supported redirecting logs ratelimit counter intuitive slowed provided sereroptions past able notice tiny improvement issue additionaly exports driven restructuring types main interface intentionally origin qualified introduction require field generate unique counters bencmark browsers countbrowser handling examine websocketsclosederror save wsserver websockethandler httphandler handlerfunction target orgin recurse center