loopvectorization installation using pkg add supported julia tested nightly usage library provides avx macro prefix loop broadcast statement tries vectorize improve runtime performance assumes iterations reordered currently supports simple nested loops bounds inner constant outer single level noop lest limitations removed future version benchmarks please documentation versus base clang polly icc ifort gfortran eigen believe code compiler flags improved submit regressions semi regular basis feel file issue sample examples dot product example benchmarktools function mydot inbounds simd eachindex generic method mydotavx rand btime allocations bytes recent cpus bounded speed load data perform aligned loads fused multiply adds fma clock cycle requires self otherhand myselfdot myselfdotavx reason roughly twice fast runs carried dependencies finished calculating instructions initiated cycles complete unroll operation run independent instances concurrently models cost try pick optimal factor matrix fancier familiar dive mygemm fastmath size cmn zero eltype mygemmavx float undef randn similar benchmark trial memory estimate allocs minimum time median mean maximum samples evals linearalgebra test passed blas set num threads vendor mkl mul produce decent kernel model movement cache generate following low degrade rapidly compared matrices increase advantage vectors broadcasting straightforward expressed via typed lazy multiplication operator buf length escapes broadcasts fuses easy write avoids intermediates recomend checking splitting pieces isolating increases especially separate leverage optimizations dealing structs key gains leveraging knowledge exactly int handled cpu strightforward generalize arrays containing complex instead recommended users wishing apply packages structarrays transform array element struct gemm const matrixfint union structmatrixcomplexfint structarray complexf accept efficiently collect approaches kernels variety numeric types dual doublefloats etc gaius free adding list