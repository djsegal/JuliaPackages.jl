overseer entity component system package supplies lightweight performant julian implementation ecs paradigm applications game development imho programming benefit broad range results clean flexible gradually build separated blocks remaining inherently due data structured accessed api performance thoroughly tested practice glimpse mid level rendering toolkit trading comprehensive realtime backtesting framework romeodft robust global dft based energy optimizer basics main idea separation logic free components systems perform set care usually iterating entities particular combination tend specific allows ideal packed arrays allowing degree flexibility attaching fly implemented lot slightly behaviors introduction specifics understand effectively purely identifier index componentdata attached subtype stored contiguously retrieve store creation accessing stage empty struct except maybe holding settings info subtypes overloads functions update abstractledger requested latter added cares pair symbol vector allow updating desired stages takes creating runs example understanding action simulate oscillation rotation define using geometrytypes spatial position float velocity vec spring center constant omega axis oscillator function rotator theta nnd dot cos cross sin mover spat cause inwards towards causes rotational updates positions iterates rules form ledger comp iterate simulation construct basic generate creates makes created acted following change doesn ocillator act changes move origin forever ready look evolved notice updated sequentially inside associated accesses deleted completely scheduled deletion delete instantly deletes slow check schedule batch executes assigned removed pop examples please documentation originally inspired entt modified sparseintsets track hold