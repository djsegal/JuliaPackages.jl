introduction lerche german lark partial port grammar processor python julia grammars unchanged installation repl using pkg add documentation quick start notes users reads ebnf produce parser provided text conforming produces parse tree visited transformed rules rule function named production arguments called argument object subtype visitor transformer data structure follows define subtypes instances passed appropriate instance hold information transformation wish concrete type visit tokens mynewtype false processing token values faster leaving default true process write identical name prefixed macro array containing inline following refer identically method precede terminal instead string variable mygrammar parsed mytext mytransformer commands lalr lexer contextual create transform real world example usage file citation publishing useful please consider citing paper issues raise github issue tracker contributions types welcome examples include improvements speed improved links projects commenting triaging straightforward contribution fork repository changes pull request read converting programs written outlined classes class calls replacing self preceded methods desired backslash double quote sequences fixed denote byte value inconsistencies earley cyk implemented dynamic errors messages attached bottom exception hierarchy contents unexpectedinput unexpectedcharacter message included puppetparser invoked error functional correctly interpreting import paths imported happens choice regex engine choices available sense implementation hints currently based priority maintaining fidelity global flags integers means look changed julian approach future macros func multiple dispatch select runtime similarly defines parsing suggest times cpython generation slower optimisation techniques applied calculating storing const top level package allow precompiled avoid analysis time loaded