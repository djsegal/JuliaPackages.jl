introduction lerche german lark partial port grammar processor python julia grammars unchanged installation repl using pkg add documentation quick start notes users reads ebnf produce parser provided text conforming produces parse tree visited transformed rules rule function named production arguments called argument object subtype visitor transformer data structure follows define subtypes instances passed appropriate instance hold information transformation wish concrete type visit tokens mynewtype false currently magnitude faster leaving default true process write identical name prefixed macro array containing inline following refer string variable mygrammar parsed mytext mytransformer commands lalr lexer contextual create transform real world example usage file please read converting programs written changes outlined classes types class method calls replacing self preceded desired backslash double quote sequences fixed denote byte value inconsistencies earley cyk implemented dynamic errors messages attached bottom exception hierarchy contents unexpectedinput unexpectedcharacter message included puppetparser invoked error functional issues correctly interpreting import paths imported raise issue happens choice regex engine choices available sense implementation hints based priority maintaining fidelity global flags integers means look values changed julian approach future macros methods func multiple dispatch select runtime parsing suggest times generation slower optimisation techniques applied calculating storing const top level package allow precompiled avoid analysis time loaded