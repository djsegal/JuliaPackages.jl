julog julia package prolog style logic programming features syntax interpolation expressions custom function support built predicates logical connectives examples terms horn clauses expressed using macro creates term teacher bodhidharma huike asserted true definite clause grandteacher applied list create knowledge base traditional zen lineage chart example ancestor sakyamuni sengcan daoxin hongren huineng query via sld resolution dharma goals prove sat subst resolve grandteachers element array found test folder similar particular users note argument free initial capitals parsed variables whereas lowercase constants typeof person var const operators shown meaning human socrates mortal gaia live die words replaces turnstile stating negation special operator cut bodies preferred parse functions convert strings directly constructs write converts string conversion presently handle nested infix comparison caution expression interpolate constructing supports forms form constant ordinary converted exp irrational dump compound name symbol args float pre constructed interpolated surrounding allows easily generate bases programatically code people avery bailey casey darcy heights height rand addition standard arithmetic evaluation proof search allowing leverage power precompiled providing dictionary calling accept store numeric valued fluents lookup tables funcs dict sin cos square foo hello bar world assert provides control flow convenience iso share exact behavior cend reserved lists equivalent false operate expect body proven failure unifies exists cond act binding forall bindings beware infinite loops imply fail causes current goal succeed suppresses effects breadth unlike implementations depth builtins usage acknowledgements implementation reference chris meyer python interpreter unification algorithms introduction pierre nugues