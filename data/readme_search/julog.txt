julog julia package prolog style logic programming installation enter manager pressing repl run add development version installed running link git repository features syntax interpolation expressions custom function support built predicates logical connectives conversion utilities usage terms horn clauses expressed using macro creates term teacher bodhidharma huike asserted true definite clause grandteacher applied list create knowledge base traditional zen lineage chart example ancestor sakyamuni sengcan daoxin hongren huineng resolve query via sld resolution form backward chaining proof search dharma goals prove sat subst grandteachers element array forward supported derive compute step derivations derivable iteration rules set closure fixed inf examples found test folder similar particular users note argument free initial capitals parsed variables whereas lowercase constants typeof person var const operators shown meaning human socrates mortal gaia live die words replaces turnstile stating negation special operator cut bodies addition constructing linked lists nested compound reserved creating objects preferred parse functions convert strings directly constructs write converts string presently handle infix comparison caution expression interpolate supports forms constant ordinary converted exp irrational dump name symbol args float pre constructed interpolated surrounding allows easily generate bases programatically code people avery bailey casey darcy heights height rand standard arithmetic evaluation allowing leverage power precompiled providing dictionary calling accept store numeric valued fluents lookup tables funcs dict sin cos square foo hello bar world assert provides control flow convenience iso share exact behavior cons cend equivalent false operate expect body proven failure unifies exists cond act binding forall bindings beware infinite loops imply call pred meta predicate findall template instances substitutes result countall counts proofs fail causes current goal succeed suppresses effects breadth unlike implementations depth builtins converting manipulating formulae conjunctive disjunctive normal formula nnf cnf dnf useful downstream applications classical planning conversions implicit existential quantification semantics hence guaranteed preserve equivalence involved care negations conjunctions unbound following ravens black raven doesn implied quantifier statement exist acknowledgements implementation reference chris meyer python interpreter unification algorithms introduction pierre nugues