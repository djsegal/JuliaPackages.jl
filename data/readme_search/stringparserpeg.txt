stringparserpeg string parsing library expression grammars peg julia separated pegparser written mainly abe schneider inspired pyparsing parsimonious boost spirit separation followed rework design undertaken henry schurkus base mechanism strings instead macros based allows disentangle functionality internal macro makes robust changes code discussion leading packages found redesign change api easier error prone describe takes grammar declarations form multiline super quick tutorial busy parser specification former computable structure parse abstract syntax tree ast transforming required transform function defining defined rule following rules references theotherrule terminals match literally matches wins matched stronger optional counts anyways negation consumes zero regular expressions whatever regex suppression yields node semantic action expr create default information argument line semicoli separate start starting specify desire example note examples folder creating simple calculator operator result define calc plus minus space composed allow digit spaces appear front pegs don handle automatically construction according continued run input pos err resulting output andrule regexrule terminal transformation finally transforms desired datastructure accordingly overloaded actuator calling recursively actually fold directly final dispatches name nodes names parsed toresult children matchrule value int apply obtain correct actions basic type operate specified anonymous explicit arguments firstpos lastpos childnodes return shorthand specifying results normal set naming liftchild child returns current level whichever returned explicitly myorrule single token preceding applies joining building named means resulted wish outside definition call scope using eval begin foo stuff source grammarparsing specifications user live consistency happens ensured test suite look wonder specifics subject easily misunderstood matching isn doesn consume assume understand consider char errors initial including solution depth guide entry course file handles import export ing includes files defines subtypes typically consist constructed constructor simply specific dictionary mapping symbols comparison functions check standardactions utility mentioned read nique manually stacking constructors top recursive generic newcachekey subtype additionally build manual process discussed principle available direct consistent grammargrammar exponentially difficult features standardrules consisting commonly float etc time join constructing