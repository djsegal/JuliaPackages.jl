triangularmatrices package julia dramatically faster test computer clean interface add basic lapack type functions probably thorough tests currently loop lot matrix operations time run compile subjectively doesn bad multiplication improved randomly segfault filling methods table cull amount parametrically typed getindex regarding functionality intend cholesky decompositions triangular inversions symm trmm origin original name library change gemm optimized fairly multiple rows using benchmarktools randmat mul benchmark code llvm native underlying data layout recursive visualize via recursivematrix float function set ind inbounds length term plan plenty smoke mirror convenience abstract memory iteration easy mix normal arrays differences shouldn issue major printing cartesian style sizes hangs sub fine switching generated help option generating staticarrays note api improve front welcome implement srandmat smatrix btime allocations bytes staticrecursivematrix sarray tuple wont promise performance push testing beyond ryzen invite feel free included reason haven immediately pushed creating verbose performs transposes supported particular computational kernel larger matrices recurse statically sized ones column unsafe convert pointer load perform store helps locality successively blocks cutoff calculate product fit reasonably cache submatrices apply cpu contiguous loading block typical row means stride apart square dividing dimension couple updates unsquare didn recursion pattern aren subdividing pieces pretty fast hold disclaimer tested versioninfo version alpha commit utc platform info linux gnu amd threadripper core processor word size libm libopenlibm libllvm orcjit znver results architectures vary range compat linearalgebra blas num threads trial estimate allocs minimum median mean maximum samples evals sample array divisible hit substantial moment print randn opinion holding complicated figure someday course threading openblas increasingly starting reworked worth handing