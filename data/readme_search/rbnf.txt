restructured bnf rbnf aims generating parsers requiring redundant coding programmers designed maintainability unlike regex readability makes sense syntax level conciseness avoid self repeating parser generators efficiency specifies semantics customizable parsing algorithms extensibility mix julia meta programming notations define lexers taking advantage source block generated data type definitions representing tokenizers asts modern facilities introduced dedicated escaping super convenient implement nested comments string literals str quote grammar macros easy achieve code reuse join separator rule generates parse implementation rudimentary combinator direct left recursions supported implicitly plus indirect note currently lack analyses optimizations lead expressiveness performance severe concerned real time applications figure solid compile bottom wouldn capability processing context sensitive check following projects achieved researching https github com thautwarm rbnfrbnf basic usage rules mutually referenced structures defining language firstly immutable object denote using struct yourlang begin ignore tokenizer names ignored mystring mychar reserved identifiers strings symbols bool allowed regarded keywords true else statement defines node structure named defined combination alias token corresponding abc myregex myquote tokens runlexer ast ctx runparser section talking rust provides rich information lineno int colno offset span parameter class belongs instance denotes handled lexer identifier sequence parses outputs list fields custom types global scope current module tuple optional respectively repeat alternative keyword cond exp don aware hereafter matching won produce typed rewrite produces parsed successfully paramterised polymorphisms function inside lang write expression expressions separated recur todo tests directory examples