sourcecodemccormick package experimental approach source code transformation apply mccormick relaxations symbolic functions deterministic global optimization packages set valued objects utilize relaxation rules overload standard math operations scmc aims interpret expressions generalized create computes natural interval extension input compile return pointwise values convex concave functionality designed algebraic dynamic development systems equation system equations provide transformations represent lower upper bounds provided notably generate evaluation expression using symbolics variables expr exp eval evaluators outputs marked bound underestimator overestimator inputs described vector representing branch scheme variable node value original desired benefit multiple dispatch speed evaluated overhead associated finding correct call overloaded operation generated eliminate creating static applied flexible quickly evaluating selected front calculated example benchmarktools xmc ymc btime allocations bytes allocation note entirely fair comparison type simultaneously calculates following extensions corresponding subgradients compatibility cuda broadcastable cuarray depending gpu evaluations complexity function dramatically decrease time compute numerical array rand zeros ones int kib broadcast cpu xcc xcv copy xhi xlo ycc ycv yhi ylo sync assumes differential inequalities derivatives advance resulting larger explicit definitions solved main product follows idea stops representations modelingtoolkit odesystem factorable expanded parameters tspan dict start eqns named syst defaults merge transform mccormickintervaltransform takes ode generates addition shown appear expansive available created ready trajectories parameter ensembleproblem sciml ecosystem hardware solves diffeqgpu limitations ongoing research effort seeks address calculate bounding routines optimizers complicated cause significant compilation manually avoided combining results user defined currently compatible elementary arithmetic univariate intrinsic diverse added future accept arrays unique split factored accommodated due floating calculations required based highly recommended double precision including gpus single forcing result performance hit scientific computing proportion capable cores optimal branching factor possibility warp divergence gap optimizations covering positive domains mixed additionally structure changes frequently respect domain perform worse consistent references wilhelm gottlieb stuber psorlab url besard foket sutter effective extensible programming unleashing julia ieee transactions parallel distributed gowda anantharaman laughman shah rackauckas composable graph modeling arxiv preprint doi