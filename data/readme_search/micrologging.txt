micrologging prototype implementation logging frontend interface ported base julia brought features documentation overview ecosystem start contains bits pieces backends somewhat dormant maintaining following list libraries hope eventually mature composable system log routing storage pretty printing standard library provides default logger consolelogger basic filtering records terminal combines convenient single type extensions progresslogging macros including progress makes easy emit tracking looping constructs transformation loggingextras generic functionality mutate messages chain duplicate stream multiple streams discard based predicate etc sinks terminalloggers advanced fancy bars markdown formatting tensorboardlogger structured numeric data tensorboard backend logroller rotating files hit size limit simple filelogger sink install pkg add quickstart example using info debug message debugging filtered information normal program operation warn potential detected error definitely wrong support key value pairs asdf global stderr sleep algorithm record begin executed unless level configure min enabled suppression iteration maxlog module logtest function set task dispatch dynamic scoping dispatches current logstream iobuffer simplelogger redirected logs captured separately block logstring strip string crash application blah intentional choices cheap users feel free leave available commenting otherwise disabling compile time achieve filter entire metadata determined design challenge allow constructed achieved represents verbosity severity warning verbose currently minimum effective efficient pass naturally occur controlled configures efficiency disable globally loggers dictate decision specific user code run implies macro insert test branch creation passed closure gather lexical scope look create considerations indicate nice effect visually expands shouldlog logmsg context various types associated include static location local variables line file caller stack trace visible consider femtolisp bindings construct created structures appropriate handler enrich processes choose chooses dynamically scoped bound understand choice audiences package authors caring dispatched care complete built packages control don programmers tend calling functions overall handlers mylogger foo bar baz notably approach matter deeply nested call tree called author entry python community settled contexts todo double check automatically included useful generated unique symbol invocation cost fast complex calculation det fixme write