bitpermutations efficient routines repeated bit permutations introduction bits performed log operations reshuffle individual parallel reshuffling layer chosen sets cpu precomputing slighly trivial package useful compute application permutation words installation julia language install please interactive session repl press key mode type following command pkg add usage define construct bitpermutation example uint lsb msb using apply bitstring bitpermute functional approach jam equivalently call directly idem inspect result defined basically faster bitvector base size fixed mutable neat underlying network inverse computed cost invbitpermute calling adjoint invperm internally vector masks shifts stored applied sequentially array data syntax rand regular element wise broadcasted loop slices stage leads significant performance increase usual original step version saves allocations benchmarks functionalities mentioned summarized plot results obtained intel caskadelake processor running single thread accurately measure repeatedly perform times similarly fashion choose divide median execution time considering bene networks consistently factor approximately discussed types choosing grpnetwork lead speedups processors support bmi instructions indeed speedup compared exploits advanced intrinsincs fallback implementation primitive slow avoided benchmark random somewhat worst scenario typically stages completely structure achieve larger dramatic benesnetwork permute bitstrings couple nanoseconds yielding magnitude respectively rearranged layers sequence string globally allows operation potentially avx observed apple silicon unclear investigate exceed word slower depend choice mileage vary especially depending fits cache routine found script plotting details depth explanation wonderful worth reading performing implemented grp latter cpus instruction set hence constructed unless union supported intrinsics disabled setting env false loading export launching series butterfly delta swap node swapped corresponding shifted amount arranged pairs nested powers nodes innermost fused remarkably arbitrary relatively cycles modern construction swaps explained donald knuth art computer programming vol fascicle addison wesley stanford available pre idea view pair repartition graph edge corresponds constraint partitions input output color route partition fortunately bipartite easy iterate assign alternating colors visit wish optimize unfortunately exhaustively checking arrangements passing keyword argument rearrage constructor similar except sheeps goats taocp shallower specific hardware pext pdep starting haswell architecture released amd zen architectures microcode reportedly machines experiment method possibly disable calls follows algorithm lee shi yang fast software cryptography ieee micro enhancements improvements list ones top head arm nice improve exploiting specifically sve equivalent don possibilities described preconditioning simple reducing try cheap bitreverse bitshift save lookup tables benefit sub precomputed table extract look elements join scales linearly space pshufb sse byte reshufflings compress bunch combined promising rearrangement finding arrangement currently exhaustive search constructing aware fallbacks exist anyway code refactoring transformations preserving inference allow generic algorithms extensions compatibility compatible