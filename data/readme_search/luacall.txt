luacall julia package interoperability lua functionality calling function sharing object accessing data resuming coroutines showcase call initializes global variables represents module main access functions value involved shared opaque userdata example linear algebra using luastate guard whatever scope luascope begin inv lualoadstring return code hello coroutine create yield table thread multiret true resume api overview session contained sessions share affect internal concern stack stores execution context hide implimentation details users pointers objects instead reference specific index substantial impact design transfer pop push duplicates poped elements removed located potentially leaking memory resets top remove pushed block luareturn leave returned wrapped popstack automatically unwrapped appear hand assignment manually unwrap key returns manage array unmodified type mapping nil integer luaint int abstractint floating luafloat float abstractfloat string abstractstring luatable luafunction luauserdata luathread retrive getstack default conversion values construct mutable check cfunction