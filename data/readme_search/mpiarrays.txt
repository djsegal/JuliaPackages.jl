mpiarrays package provides distributed arrays based mpi sided communication primitives currently proof concept functionality described readme implemented following simple example multiply matrix vector using init rank comm world size create uninitialized mpiarray float set random values forlocalpart rand process finished initializing coefficients sync print slow element screen println matvec result clean free finalize construction constructors basic form array argument int distribute dimension processes communicator specify partitions direction automatically total elements uniform manually partition rows processor finally constructed predefined local produce containing manipulation interface including normal indexing operations note lock unlock window call expensive advantage defined mainly convenient access utility functions supported base linearalgebra mul product filter tuple locally owned index range obtained localindices optional current calling destroy underlying guarantee garbage collection happen time dangerous collective finalizer wait calls barrier accessing data accessed function executes compatible block syntax fill sum localsum zero eltype return redistributing redistributed follows initial tiled distribution redistribution column rest redistribute restore equal columns examples redist blocks type helps individual created operators arguments ablock contain refers global track involved actually read allocating storage amat getblock allocate separate step modifying entries associated sent putblock regular julia linked indices globalblock ghost nodes ghostedblock allows periodic reading arbitrary locations push method adds sort ensures fetching happens minimal getglobal value ghosted fetch ghosts entry benchmark test timings recorded blas threads compared distributedarrays performance effect distributing code tests matmul results square machines intel cpus cores machine tcp gbit ethernet openblas num yields single threaded compare library elemental unmodified gemv parameter observations darray perform level indicating overhead parallel structures ultimately wrap negligible reassuring won serial threading scaling breaks multiple play severe breakdown attempts communicate pooling communications tolerate hybrid parallelism native faster ideal erratic dense completes version suggests improvement implementation hand memory bottleneck compares favorably mature apparent starting taking investigate cause tweaking settings