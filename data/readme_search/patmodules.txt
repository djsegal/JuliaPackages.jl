look fromfile probably patmodules writing modular reusable code julia harder languages access particular file include otherwise definitions evaluated multiple times possibly contexts bad start happening hard previous practice master global else implicitly assume whatever ing included little tracking actually depends maintain scale projects larger files solution documentation installation add example quick notice subpackage explicitly depend utils errors due redefining module create modules name clashing folder specifying descend subsubpackages run stand implicit assumptions context remind import using briefly copy pastes contents note considered move stackoverflow post meanwhile objects defined available means usable forced visible afterwards besides step process bit ugly issues mentioned introduction introduces macros mainmodule auxmodule write single denoted main equivalent init python auxiliary syntax begin amazing function functionality top level argument tuple strings names subfolders associated correct manner automatically prefer instead subsubfolder subsubsubfolder etc importing subfolder dotted try subsub directly behaviour dangerous result mutually unintelligible copies compiled recall sought fix globally installed outside project usual block normal nonlocal mypackage guaranteed happen provided relevant imported advanced notes lower interface makes macro called definition created outer won save rely worry mirrors converted implemented sensible alternative creating sorts systems emulate store sys route calls build tree linearise topological sort relative specified root entry advantage approach expansion looks doesn involve magic metaprogramming involved approaches able introduced incrementally surprises future couple nice option rename enclosing scopes mymodule guarantee