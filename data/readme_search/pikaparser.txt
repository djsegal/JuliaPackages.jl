pikaparser parser library julia build status documentation simple straightforward implementation pure following specification luke hutchison pika parsers pretty fast easy specify carry ability unambiguously match peg grammars including left recursive ones provide mechanisms parsing error recovery example import building grammar clauses subtype clause types indexed labels rules symbols natural choice free integers strings else dict sequence characters satisfies isdigit digits digit satisfy expression parentheses parens seq token name nested contexts expr plusexpr minusexpr random operators top level rule flatten char process single specialize crunching chars prepared text executed simply running indexable input using parse notably pikaparsers require frequent indexing inputs incremental streams complicated improve performance advisable lex vector complex tokens matched position returns index table found look matches return renumbered starting means option rest structure internal values organize tree submatches recovering parsed asts traverse recursively walk trees produce translate interpret evaluate expressions default runs transcodes ast pipe output juliaformatter var method evaluating parses supplying matchtree folding functions follows fold subvals int view expectable result acknowledgements developed luxembourg centre systems biomedicine university development supported european union horizon programme permedcoe project agreement