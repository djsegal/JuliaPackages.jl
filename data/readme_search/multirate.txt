multirate package creation execution streaming stateful fir filters perform sample rate conversion installation pkg add depends dsp windowing functions usage direct filtering methods allow time filter vector creating object examples previously defined signal taps vectors using decimate filt interpolate resample ratio equivalent interpolating decimating efficient functionality create call processes picks left processing file stream samples indefinite length type firfilter firkernel subtypes firstandard normal single firinterpolator resampling firdecimator firrational specify kernel chosen based note decimation rational instances return empty require inputs compute output returns normally eventually processed receives code written assume returned following example please contrived input progression performs useful julia element array float ones zeros myfilt check created separate chunks matches result obtain stateless sum speed naive approach step process depending factor look stuff apply anti alias fills throw rest design resampler function naiveresampler int upfactor num downfactor den xstuffed yinterpolated firfilt define khz samplerate interpolation numtaps lot rand firdes kaiser beta elapsed bytes allocated difference huge necessarily surprising demo memory allocation heavily optimized numerically speaking improvement polyphase implementation able math kept doesn waste cycles multiplying stuffed multiplications thrown despite produces results identical banks flipped routines found internet literal definition discrete convolution moving forward backwards vice versa coefficients friendly compiler emit simd instructions multiple