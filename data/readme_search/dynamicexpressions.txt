ridiculously fast dynamic expressions dynamicexpressions backbone symbolicregression pysr summary expression snippet code change throughout runtime compilation following defines enum user specified operators using lightweight type stable data structure arbitrary generates specialized evaluation kernels space potential derivatives zygote operate types vectors tensors symbols strings unions import export functionality symbolicutils move cas example operatorenum binary unary cos node feature randn float element vector construct normal calling eval functions speed happens naively julia define evaluate btime slow meaning hard quickly search compares faster didn compile internally tree array dynamically random generator performance begin rand operator coded bit evaluating basic optimize version optimized undef inbounds simd slower hand single kernel bad importantly expect makes ideal symbolic regression based searches trees compute gradients enable autodiff true gradient respect inputs simply character grad loss function performs forward mode automatic differentiation compiled derivative constants result finish variable false variables direction diff generic scalar real mycrazytype glad actually scalars genericoperatorenum abstractoperatorenum instead try string index input whatever abstract arrays selectdim func ello extend create world hello indeed due instability union val constant multiple dispatch behavior vec add square set note defined particular returned pretty