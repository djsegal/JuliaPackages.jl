methodchains welcome ambitious somewhat experimental fun approach generalize method chaining function composition install add https github com uniment using macro installed invoke single expression entire block expressions foo execute line repl run init won worry typing time vscode ijulia trouble moment shift enter ctrl reason recommended definitely startup file don basic idea chain simple object call sequence functions equivalent none beeswax calling handy syntax element dandy arr length prop example julia randn maximum sqrt step instead immediately executing called chainlink chainlinks input output defined construct takes compile putting suffix position unless clojure style transducer chances compose perfectly situation happens real life handle english language reserve pronoun local temporary name allow short flexible manipulations spliced larger understand macroexpand constructing created methodchainlink symbol begin pretty neh keyword locally inside value simply executed result overwrites otherwise assumed evaluates assigned map couple examples sum minimum split parse int join rule leave intact assign actually bit complicated natural straightforward check const avg len generic stdev dict keys entries note separated commas semicolons namely regarding curly braces assignment allows variables type returns loop apply calls println callable comprehension generator tuple vector default behavior delimited newlines delimit calculate multiple values collect desired override explicit operator precedence pipe readme angle filter isodd dropmissing groupby combine age datapipes namedtuple hehe eachmatch saving presentation process bags mapcatting unbundle pallet filtering nonfood mapping label heavy airplane pallets advanced collections stuff normal presumed manipulate frequently enables concise hints ide autocomplete providing flow passes transformations finally expr doesn allocate minimized shorthand creating scoped feature please play offer feedback multi chains discussed dimensional wherein undergoes express objects spread space undergo transformation occasionally interact similar matrix building separate rows horizontal whitespace separates row optional suggest skip bottom look gain motivation return notice represents elements argument splatted top waterfall collected appears collects previous imag complex columns splat copied interacted constructor question reader copying preferred suppose current copy maybe fixed individual terminate commence discarded causes respective drop dropping rightmost left duplicated starting instantiated little funky playing instructive weirdly therapeutic try deeper discuss create background started keywords acts explore column starts subchains execution paused accessible except course sub collection nominally exceed exist slurps changes accessed halted destroying inventory intuitive consequence access repeatedly remember nested okay exactly operate unambiguous standard deviation variance absolute var mad abs continuation guaranteed future pending final decision character perfect shorter adjacent package operations context transformed needn declared inspect intermediate mid fft butterfly toy setup complexf else base exp functioning recursive radix arrays power performance front fourteen lines ten excluding comments beat monster fftw optimized hilt memoization store twiddle factors cute expected dft multiplication resource consumption versus log btime allocations bytes kib mib gib glhf considerations defining particular compiled contrast directly occurs resources save global set constant avoid instability slower runtime isn boxed unknown true variable performing benchmarks careful ensure correct measured float allocation test caused extra artifact measurement technique easily confirm errata debate threading implemented nice macros easier ignore subchain splatting vertically arranged unfortunately parser tell apart unfortunate mentioned aligned etc creates parses thankfully degenerate surprising assertions statements recurse