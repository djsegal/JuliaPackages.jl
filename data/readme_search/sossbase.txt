soss library probabilistic programming jump simple linear model using begin normal iid size eachrow models class function applying arguments joint distribution sample forward condition subset parameters arbitrary julia values inputs outputs build predictive assigning particular fake data import random seed randn array float truth rand pairs namedtuple entries element pretend don figure easier terms particles built montecarlomeasurements post dynamichmc diagnostics prediction pred requires posterior check ppc play role similar residuals bayesian approach plenty detail time minor modifications form allows symbolic simplification yhat symlogpdf hat redundant computation sums helps expand expandsums foldconstants speed computations benchmarktools btime logpdf allocations kib codegen bytes happening hood specify running dist finally outputting seen steps program instead accumulates log density begins initializing step returning note interprets generate specialized code inference primitive type idea complex weightedsample sort hybrid provided increments unknown sampled proposal runtime compiled called future calls fast functions tight loops lift family jointdistribution sometimes usable value args means fine primitives include methods union missing pymc compile return available result little fiddly respected ignored depend modify monad likelihood weighting example lots method call iterator combine results tools itertools resumablefunctions transducers situation described generating sequence samples single distributions observed mix haskell iteratem carefully specifics merge look intersection interact turing gen ideas outside embed black box stargazers