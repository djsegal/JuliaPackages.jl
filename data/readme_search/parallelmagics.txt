parallelmagics safe parallelism using compiler analysis aiming providing julia programmers brainer code parallelized guarantees safety wishlist static dynamic detection programs worth parallelizing diagnosis mechanisms understanding fixing parallelizability program package incomplete party trick usable library demo provides apis sum auto parallelize invocation macro importall equivalent reduce map supported functions current lexical scope repl session version etc true enable remark calling automagically function sin info sinceparallelmagics user defined iterator comprehensions isodd refuses api prove computing result accessing objects provided effect free example writing global variable considered effectful call updates parallel evil failed bug note computation tree sequential implementations moment exports magicex executor various juliafolds packages floops floop return bad acknowledgements approach heavily relies improvements keno fischer ref julialang shuhei kadowaki