astarsearch algorithm julia module exports astar function provides generic implementation type totally unrestricted provide functions neighbour heuristic path ease definition complex usually search start parameters instance abstractastarsearch introduced define concrete signature goal installation pkg repl add usage isgoal getneighbours cost defaultcost timeout inf hashfn defaulthash maxcost maxdepth execute reach condition arguments mandatory optional result returns structure status field symbol success found timed partial returned nopath didn fields array closedsetsize tested size closed set opensetsize starting completely evaluate satisfies takes iterable estimate optimistic notice expensive guaranteed optimal multiply constant faster current transition default transitions stops returning lowest please wil run specified time compact representation dictionary key uint int string identity directly composite avoid duplications maximum bound accumulated exists depth allowed expanding considerations parameter apply abstract subtyped structures represent parametrizable subtype neighbours yourastarsearchstruct yourstatetype optionally redefine bool aastarsearch documented examples solve shortest paths mazes sorts puzzles puzzle maze example solver test folder using manhattan following directions seen cartesian indexes added position cartesianindex left distance positions matrix sum abs check filter moves walls getmazeneighbours free cell wall mazeheuristic res subtyping abstractastar defined design solution import struct mazesolver bitarray results breaking changes release introduces strict checking requiring uniformity types heuristics improve performance errors probably provided float cast