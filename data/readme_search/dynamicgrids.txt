dynamicgrids generalised framework building performance grid based spatial simulations including cellular automata allowing wider range behaviours random jumps interactions multiple grids extended dispersal modelling organism processes dynamicgridsgtk provides simple live interface dynamicgridsinteract control model parameters simulation runs real time visual feedback manual parametrisation exploration run rules single cpus threaded cuda gpus usually measured fractions quarantine using custom gtkouput note indicative frame rate laptop script running included game life crayons init rand bool output reploutput tspan fps color crayon foreground red background black bold true sim define scratch actually implementation const sum false neighbors moore hood displayed directly terminal concepts highly customisable central ideas outputs derived abstractarray namedtuple griddata types array source destination arrays maintain independence cell reads writes required padded otherwise altered specific optimisations broadcasted getindex operations guaranteed regular useful manually step contain values sarray fieldvector structs updated rule timestep whatever initialisation data start type size element providing initial conditions float attached arrayoutput passed preference ruleset equal sized matching names predator prey handling passing correct automated cost abstraction specify require dimensional dimensionaldata geodata propagate return explicit dimensions plot correctly map plots shape files observation easily added containing caveats base zero bitstype tuple staticarrays contents defne multi method rgb returns argb imageoutput isless definition multiplication scalar addition convolution kernels hold applied applyrule called active cells flavours outlined docs allow assumptions greatly improve collected additional arguments opt sparseopt proc cugpu combined simply sequence appropriate depending parent day threadedcpu storing viewing interchangeably storage structure initialised requires frames preallocate shown graphicoutput checking ssh complex class colorschemes display composites layouts interfaces juno jupyter web pages electron apps interactive modelparameters graphical gtk packages kept separate avoid dependencies easy write applications benefit writing reduce memory transformedouput dominated cache reducing positive effects example implements classic stochastic forest fire benchmarks algorithm sets current burning neighbor dead living spontaneously catch colors benchmarktools alive prob combustion regrowth neighborhood else elseif set window fill gifoutput filename forestfire gif minval maxval imagegen image scheme rainbow zerocolor save completes timing steps particular cpu six cores speedup indicates scaling bench resultoutput julia btime allocations mib invert setting setneighbors pos positions add instead value risks errors currently doesn matter happens times result fairly sparse faster machine lot slightly rewrite gpu available kernel call entire setgrid cudakernels randomiser randgrid version benchmark gtx despite overhead reading zeros billion timings improved maybe int stop alternatives agents style design iterate list broadcasting approach suited track movement details individual throughout models don individuals magnitude code low density magnitudes activity randomised increasing probably tool try