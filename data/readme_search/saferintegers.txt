saferintegers integer types ignore arithmetic overflows underflows copyright jeffrey sarnoff available mit license safer using default int uint allows overflow underflow errors occur silently notice incorrect values propagate difficult recognize package exports versions check basic functions processing stop message event machine overhead relative built background occurs type increased beyond maximum value decreased minimum signed unsigned subject julia rollover typemax typemin security implications situations secure biohazard loop execute highlights exist require calculations behaved unsurprising clients expect app product calculates care correctness software system health assets depends prefer publish research results free error integers offer cleanly alerts otherwise silent designed easy written performant sorts exported stable typeof safeint preclude insecure systems breached rationals saferational test code safety include join packagetestdirectory packagetests includes modified current environment safeinteger run guide computations explict digit sequences inside safe constructors safeuint similarly bitsize named operators div rem fld mod aware fail simple continue carrying incorrectness forward validity obtained ascertain proceed incident safeints operate ints calculation encouter alerted whirl pkg add automatically abs neg cld divrem fldmod converting float converters safesigned safeunsigned multiplied usual conversions returns bitwidth supports signbit sign count ones zeros leading trailing ndigits isless isequal zero widen snippets begin ans source file directory filename benchmarking dev benchmarktools parameters time tolerance noinline function result true break return hundredths round digits belapsed credits derives roundingintegers machinery heavily informed changeprecision