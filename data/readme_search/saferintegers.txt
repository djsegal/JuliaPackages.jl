saferintegers integer types ignore arithmetic overflows underflows copyright jeffrey sarnoff available mit license safer using default int uint allows overflow underflow errors occur silently notice incorrect values propagate difficult recognize package exports versions check basic functions processing stop message event machine overhead relative built background occurs type increased beyond maximum value decreased minimum signed unsigned subject julia rollover typemax typemin security implications situations secure biohazard loop execute highlights exist require calculations behaved unsurprising clients expect app product calculates care correctness software system health assets depends prefer publish research results free error integers offer cleanly alerts otherwise silent designed easy written performant sorts exported stable typeof safeint preclude insecure systems breached test code safety include joinpath packagetestdirectory packagetests includes modified current environment safeinteger run guide computations explict digit sequences inside safe constructors safeuint similarly bitsize named operators div rem fld mod aware fail simple continue carrying incorrectness forward validity obtained ascertain proceed incident safeints operate ints calculation encouter alerted whirl pkg add automatically abs neg cld divrem fldmod converters safesigned safeunsigned saferational multiplied usual definitions abstract const union thanks mark kittisopikul timholy design ratios conversions returns bitwidth matches supports signbit sign count ones zeros leading trailing ndigits isless isequal zero widen snippets begin ans source file directory filename benchmarking dev benchmarktools parameters time tolerance noinline function result true break return hundredths round digits belapsed technical notes updated ago defined originally intended advancement active pursuit consistant abstractions clean approach holds concrete real deal evaluate appropriateness protect interpolations innocent looking linear interpolation warning compelling encouraging wider application requires merely extra minute pull details formal distinction creation inheritance hierarchy pervades cleaner makes reasoning shallow extension paths simpler announcement earlier internal limitations patterning embedded developed implemented forced defining precluded natural pattern abstraction formed instantiation logic additional changes bugs limited substantive subdomains found careful users fixed float mirror cross support implementation improvements credits derives roundingintegers macro machinery heavily informed changeprecision