cartesian fast multidimensional algorithms julia language package provides macros currently appear performant implement numerous news base backwards compatibility using pre release version recommend access documentation purpose provide compatible implementation implemented unfortunately changed features including naming convention variables directly names break code sorry pin changes legacy following applies series recent caution practice effectively introduces separate dialect reason hope main eventually support functionality happens obsolete meantime appears powerful write efficient installation install manager pkg add principles usage nloops begin nref generates size basic syntax follows argument integer variable specifying loops symbol prefix iterator generated third specifies range dim flexibly anonymous function expression described body loop additional similar pattern generating read left expr whereas array comes developing debugging easier via unexported underscore variants escape similarly supplying dimensionality functions writing intend multiple dimensions hard fortunately straightforward eval construct laplacian generate versions somewhat awkward truly arbitrary dimension wrapper track compiled dimensionalities data types mysum defined dict bool global stridedarray def typeof false quote zero current module true addition performance price checking dictionary expressions macro arguments single feature ability supply consider implementing mentioned discrete dimensional calculated lap obvious issue formula handle edges exist illustration easy avoid dealing properly note omits index written supplied key evaluated runs whatever looped inlined hence exactly extra runtime overhead bit associated translated suppose sets indices offset notation mimics subscript latex curly braces sub example complete imfilter machinery simple computes correlation convolution filtering kernel kern require odd valued sizes padarray pads width edge boundary conditions user desires boundaryargs div error apad compute filtered value tmp store result line assignment requires parenthesis otherwise passed final wasteful don corners grid center consequently considerably faster algorithm advantage grow rapidly illustrate flexibility nexprs replicating gracefully terms unaltered shifts documented shift subtract reductions broadcasting makes post maximum maxoverdims max allow choose arbitrarily arrays hand abstractmatrix region szout output unit chosen fill typemin infer inbounds abstractarray nextract slightly concerned conditional inside inner influence impact modest author tests percent execution branches resolves cpu learn predict accuracy branch computation time dominated cache misses traversing reference core itersym rangeexpr bodyexpr preexpr postexpr nested iteration var optionally executed respectively min semicolons multi statement indexexpr nexpr esym isym tuple vector length thereby extracting element nall convenient bounds nlinear subarray linear equivalent indexing particularly useful compile images iterate pixel perform calculation color particular rgb img ndims colordim determine represents separately strd stride rgbval difficult ntuple nrefshift accepted nlookup easily achieved indexedvariable forcartesian collection outlier println block isempty prod ones int isdone idim direct approach shouldn matter improvements subarrays lacks generic address elements sum boosted immensely boost scale fold