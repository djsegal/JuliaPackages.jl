seal julia package wraps microsoft library homomorphic encryption supports brakerski fan vercauteren bfv cheon kim song ckks heaan literature schemes exposes capabilitites intuitive julian published permissive mit license currently operations examples includes encoding addition multiplication rotation relinearization modulus switching installation install start repl hit enter pkg mode execute add alternatively using directly running depends binary distribution available jll automatically installed dependency note windows linux macos freebsd bit systems getting started usage load minimal example encrypting array integers scheme squaring decrypting looks follows info precompiling bac dbc parms encryptionparameters schemetype ptr poly degree set coeff default plain batching context sealcontext keygen keygenerator public key publickey create secret secretkey cec encryptor evaluator bdd decryptor batch encoder batchencoder pod matrix collect uint slot count int vcat element plaintext encode encrypted ciphertext encrypt inplace result decrypt decode involved pick provide sensible parameters raw data perform arithmetic starting applications highly recommended look directory otherwise secure produce unexpected results crashes included follow line provided snippet based function encoders list description cpp runner application basics modular complex objects levels introduces concept prerequisite real performing cyclic rotations vectors serialization serializing performance tests run shown clone repository git include executing project interactive prompt version following executed reading comments associated files source test total allocation memory pool exit modify feel free implementation strategy progress subset capabilities supported prs welcome makes bindings tries mimic api close file names variable arguments etc code reason provides excellent inline documentation understanding immediately able reproduce details translate community strong conventions violated unnecessarily difficult experienced users correctly trying recreate written watch functions input suffixed modified rest remains translating owning object passed argument size returns scalar length value expected return tuple items practice multiply translated trailing authors initiated michael schlottke lakemper university cologne germany principal developer contributing licensed happy accept contributions please refer acknowledgements developers quality plus entire functionality developing breeze