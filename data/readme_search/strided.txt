strided julia package efficiently arrays dense memory layout fixed stride dimension assumptions strides monotonously increasing provides multithreaded cache friendly implementations mapping reducing broadcasting taking views reshaping permuting dimensions simply accessible annotating block standard code involving array operations macro spawn threading infrastructure futhermore multithreading customizable via function set num threads integer base nthreads allows spend additional tasks default enabled convenience functions enable disable furthermore experimental feature disabled apply matrix multiplication using divide conquer strategy threaded mul similarly revert setting matrices linearalgebra blasfloat element type float complexf typically blas beneficial implement run distributed scheduler hence combination performance par percent margin strategies openblas mkl note latter call disables lapack eigen svd help examples running single thread benchmarktools randn similar btime allocations bytes exp sin permutedims mib export kib design principles stridedview centered view parent densearray resulting associated getindex offset assumed identity conj transpose adjoint equivalent former eltype inverse corresponding setindex definition enables lazy returns data application indexing union colon abstractrange slicing structure retained reshape split subsequent joined size instead overloading separate sreshape throws runtime error impossible map reduce whenever expression contains objects scalars overloaded methods mapreduce exploit evaluate result efficient sufficiently overhead extra preparatory negligible particular involves choosing blocking loop aims avoid misses matters involved applied acts lazily whereas creates copy potentially provide speedup optimized implemented support boosted plain strictly sequential provided broadcast operation compute bound sufficienlty complex annotation manually wrapping wrap appearing behave ranges contract user ensures manipulations following expressions preserve replaced sview respectively mentioned throw requested shape incompatible preserving defined index arguments int indexed else versus stridedarray compatibility denote abstract types recognized unfortunate dispatching routines based consequence fall currently gemm attempt factorizations context todo list inspired axpy axpby scalar rmul lmul relying generic implementation created certainty subarray reshapedarray instances constructor act underlying try mimic limited counterparts guarantee respect approach succeed creating wrappers combinations recognised example stridedarrray indeed statically inferred knowing argument looking yield reinterpretarray supported unlike produce regular unsafestridedview unsafe unsafearrays references pointer stack allocated struct isbitstype true behaves respects subtypes abstractstridedview except reference visible garbage collector return value explicit kept alive abstractarray identified explicitly translated planned features wish gpuarray dedicated gpu kernels