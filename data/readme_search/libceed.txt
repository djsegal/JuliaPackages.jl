libceed ceed library code efficient extensible discretization repository contains initial low level api methods developed ecp design center exascale discretizations focus finite elements approach algebraic applicable factored form explained user manual implementation portion documentation challenges global sparse matrix representation linear operator respect flops evaluation memory transfer matvec require format represents goal propose supporting implementations data structures enable variety computational device types cpus gpus etc description based algebraically easy incorporate wide applications significant refactoring infrastructure software suite collection benchmarks miniapps libraries apis element spectral information source availability research supported computing project collaborative effort department energy organizations office science national nuclear security administration responsible planning preparation capable ecosystem including hardware advanced system engineering testbed platforms support nation imperative details building required dependencies fortran python julia rust interfaces built using optimization flags opt march skylake avx ffp contract fast languages makefile variable set testing examples attempts automatically detect instruction gcc style compiler options host manually specified via cross compiling cuda add dir appropriate directory invocation hip rocm store arguments defaults future invocations configure usr local znver stores variables additional language interface alongside users install pip clone pkg package manager lib path press enter env build include cargo toml git branch main test produces tap output run prove tool distributed perl recommended backends multiple selected runtime resource backend deterministic cpu native self ref serial reference blocked optimized valgrind memcheck undefined value checks libxsmm xsmm gpu pure kernels shared gen generation magma det occa selects available modes openmp process time intended meshes batches eight interlaced written provide basic functionality partial vectors improve performance rely instructions vectorized help verify qfunctions values development debugging version headers mode running linking mkl desired detecting mklroot forced setting environment strictly top located default installation elsewhere create link parent proper location currently corresponding found specify adding name example platform additionally pass specific properties bit reproducibility operations atomicadd increased generating reproducible results compilation highlighted list comes usage ranging standalone codes external packages mfem petsc nek volume surface vis bps bpsraw bpssphere cube degree sphere refine fluids navierstokes solids elasticity mesh exo file forcing mms shown sample assumes machine enabled depending specifiers provided option command line sequence stored inside viewed commands requires matplotlib txt target runs comprehensive subsets scripts folder prefix creating destdir packaging usual cflags likes static setuptools config addition header provides easily compile standard libs myapp installed directories systems contact reach team emailing llnl gov leaving comment issue tracker cite utilize please misc author abdelfattah ahmad barra valeria beams natalie brown jed camier jean sylvain dobrev veselin dudouit yohann ghaffari leila kolev tzanio medina david rathnayake thilina thompson jeremy tomov stanimire title month sep publisher zenodo doi url inproceedings paper proc scipy aleria arra rown eremy hompson ohann udouit igh evaluations ease ython booktitle roceedings cience onference pages editor eghann garwal hris alloway illon iederhut avid hupe majora bibtex entries references doc bib copyright following applies unless otherwise stated lawrence livermore llc produced laboratory rights reserved files license notice