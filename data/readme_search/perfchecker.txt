perfchecker set performance checking tools julia packages ultimate aim create environment tool run similarly test package separate instances allow version compatible versions dependencies independence compatibility requirements checks google summer code juliaconstraints including participating gsoc language umbrella looking contributors complete lists projects project ideas consists designed check time targeted audience community developers readme provides short demo basic features implement length hours perfcheck similar pkg sugar syntax bench alloc profile interactive repl interface gui using instance makie automatic profiling bunch super cool plotting previous advanced smart semi analysis performances bottlenecks regressions allocations speed trade descriptive plot captions handle integrates juliaup automatically generate parametric space note interchangeable depending candidate candidates special ecosystem option recommended skills familiarity development interfaces coverage benchmarks difficulty easy medium implemented getting started standalone start understand workflow write vein tutorial dependency written please bear mind ideally writing simple allocation memory files local folder dev contribute fork repo branch changes submit pull request unsure help don hesitate issues chat channel humans discord encourage students participate bring experience deep understanding source testing forward proposals submissions based beta prone change frequently example scripts allocs compositionalnetworks current execute stores perf activate running script following command results plots benchmark add adapt benchmarktools target constraintdomains remark compilation nature trigger role annotated stochastically generates deal methods compile deterministic pre minimal triggering requires requirement disappear soon required lastest release direct testset begin title logging purpose explore learn compose targets specific checked domains fill domain precompilation foreach allunique actual call path dir threads output table store mallocs csv provided decreasing mem generated tracking deleted unless error functionalities directly future provide synthetic wrap behavior invisible optional benchmarked enforce amounts evals samples ensure visualization notebook pie chart distribution line obviously improving metrics improve overall try spot evolution luckily overview file plotted lot interestingly introduced increase maybe issue answer releases impacted confirm improvement look stable meet design data structure evaluated times garbage collection brings comfort programmers participates attractiveness careless pitfall prior introduce improved reflect global spoiler deviations beware logarithmic scale mean mentioned stochastic process surprising evolutions probably gist stability despite gctimes looks contributing appreciate contributions users reporting bugs fixing adding acknowledgments thank entire