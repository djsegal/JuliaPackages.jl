pffrgsolver seudo ermion unctional enormalization roup solver julia introduction package aims providing efficient art multiloop functional renormalization equations quantum lattice spin models pseudo fermion representation currently applicable described hamiltonians form defined variety pre implemented dimensional lattices internally computes reduced employing space symmetries initializing flow bare couplings optionally solution regularized parquet truncated frg converges construction integrated using bogacki shampine method adaptive step size control stage real correlations computed flowing vertices detailed discussion implementation installation installed manager switching mode repl pkg add citation please acknowledge accordingly cite preprint kiese ller iqbal thomale trebst approach systems arxiv suitable bibtex entry misc title author dominik tobias uller yasir ronny simon eprint archiveprefix primaryclass cond mat str running calculations simulate nearest neighbor heisenberg antiferromagnet square truncation simply launch path output allows fine grained calculation various keyword arguments reference obtained via available verbose avail model post processing data generates files obs hdf format containing observables measured checkpoints vertex respectively usually converted structure factors susceptibilities fourier transform momentum investigate ground predicted following example code provided computing matsubara frequency resolved factor single cutoff generate discretization brillouin zone momenta observable file save compute diag read mesh static largest amplitude respect scale ref close accessed reading checkpoint load true command converged initial condition final result additional created according timer heuristic controlled keywords performance notes accelerates built dynamical thread scheduling threads spawn tremendous parallelization vital achieve acceptable run times recommend multiple whenever setting respective enviroment variable export num nthreads adding flag terminal note iterating costly compared loop contributes substantial overhead advisable resources hpc environment precompile cache generated cpu architecture production runs performed loopvectorizations dependency unlock compiler optimizations based hardware slurm interface medium sized locally low loops increased resolution required time consuming cluster exports commands help people simulations clusters utilizing workload integration plannned future versions rough scan phase diagram folder launcher mkdir set parameters dictionary sbatch args dict account nodes ntasks cpus task partition job repository exe jobs subsequently submitted results gathered finished collect overwrite false resubmitted continue literature technical aspects