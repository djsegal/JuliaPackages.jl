nlsolve solving linear systems equations julia julianlsolvers family package solves nonlinear formally multivalued function looks vector satisfies accuracy able solve mixed complementarity similar except equality zero allowed inequality boundary condition satisfied formal definition related commands identical api fixed taking input simple example consider following bivariate variables sin exp display write program using cos note computes residuals system stores preallocated passed argument similarly jacobian matrix functions shapes calling starting iterative algorithm finally returns object type solverresults particular field structure contains solution convergence occurred converged indicates specifying various possibly modifying arguments efficient method minimizes memory allocations assumed defined abstractvector abstractarray computing residual putting computed finite differencing compute difference syntax simply initial alternatively construct oncedifferentiable pass notice constructor actual initialize cache types dimensions automatic differentiation option thanks forwarddiff autodiff forward available addition specify arbitrary arrays assume initialized set elements optimization simultaneous time cost successively improve performance providing calculating special arguably simpler approach define myfun shared calculations begin calculation mutating specific goes enable efficiently calculate separately returning output newly allocated containing automatically detect means accepts version described via keyword autodifferentiation tuple scalar float takes scalars helper ary complete sparse routines manipulate matrices instead ones increase necessarily provide appropriate solver feed optional third reset calls result careful ensure don forget overwrite nonzeros previous call doubt beginning achieved fill dropzeros remove sparsity pattern fine tunings algorithms currently choice setting default trust region relies quadratic approximation squares objective considered valid compact centered current iterate selected custom parameters factor determines size product euclidean norm nonzero else autoscale true rescaled scaling factors norms columns newton linesearch classical parameter equal values linesearches performed update evaluate anderson acceleration diis pulay mixing based iteration beta information history controlled corresponds larger accelerate iterations usually speed storage computation requirements lead instabilities useful reference walker siam journal numerical analysis common options xtol successive iterates declared ftol infinite maximum store trace stored false shown stdout extended additifonal internals added fixedpoint wrapper maps likewise allows convenient commonly encountered computational economics notes naive picard style isn advisable contractions lipschitz constants close fails lowering supported init tolerances bounds exactly supplying derivative appropriately transformed map waiting stabilize mapping multivariate vectors mcp holds index contain inf equivalent root finding mcps reformulating miranda fackler sign convention opposite mcpsolve immediately follow corresponding extra reformulation smooth fischer robust complex minmax min max faster algebra reformulated kinks element array lower hit components hence positive hand fourth todolist broyden updating homotopy methods lmmcp kanzow packages jump reformulate constraints enter supports source commercial solvers brings powerful modeling language pathsolver references nocedal jorge wright stephen edition springer minpack burt garbow ken hillstrom argonne national laboratory mario paul applied finance mit press