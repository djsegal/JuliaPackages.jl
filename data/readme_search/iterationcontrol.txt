iterationcontrol linux coverage lightweight package controlling iterative algorithms view training optimizing machine learning models builds earlystopping inspired learningstrategies related software dynamiciterators installation using pkg add basic idea suppose object squarerooter iteratively computing approximations square root model julia train iterations iteration replace integer argument sophisticated controls lifting method defined definitiion lifted functionality original step numberlimit info stop triggered stopping criterion control repeatedly applied sequence triggers times signalling current cycle third logs value function evaluated example terminate admits returning loss difference lift enable based criteria threshold demonstation include callback losses float push element array appliations sample computed additionally generates user inspectable similarly appropriate access enables prechelt progress modified generalization table otherwise enabled overloaded reference lutz neural networks tricks trade orr springer interface described sufficient conventional parameter tree boosting online incremental ingesting data ingest datum iterator generating items ingested application default passive exhausted details wrapper dealing wrapping implement ingestion simple particle tracking verbose logging inspecting reports keyword verbosity defaulting larger noisier return tuple report tuples generated final accessed withlossdo println false log provided type detailed doc string sbelow short summary advanced options omitted description trigger notation identity warn predicate holds error call timelimit hours applications numbersincebest occurred ago withnumberdo complete cycles withtraininglossesdo batch invalidvalue nan inf encountered alpha exceeds patience consecutive increases item iterable atomic option following returns true specified constructor wrappers modify behavior skip apply louder increase level negative values lower debug composite hood wrapped note functions ordinarily instead expose appropriately implementing abstract behaviour implemented functional style methods compulsory takedown fallbacks namedtuple respectively update initialization bool human readable named count completed cylcles calls int flat event counts finished subsequent events finalization