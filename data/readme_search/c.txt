cbinding features package available automatically create library bindings julia runtime support supports struct union enum types alignment strategies bit fields nested anonymous type qualifiers variadic functions unknown length arrays inline todo typed function pointers calling conventions automatic callback documentation generation macros progress insane extern int func read learn generated set compiler context collect expressions module scope repl using notice command macro backticks means specifying line arguments clang parser time started creating real life example look libpath std wall dgo fast imylib include lmylib paths specified libraries created string input code equivalent global variable span multiple lines triple quoted variant effective usage void couple binding actually easier api usually header files save effort default directly written explicitly included headers option allow parsing implicitly mylib defined documented exported enclosing complete continue reading details gory parsed immediately converted inspected macroexpand yikes conversion avoid name collisions names mangled accessed indicate lives land store user friendly sometimes automated placing declaration helps manually const constructs standard currently emitted packages developed provide unified source dependencies placed blocks referencing statements finally libfoo import foo jll libbar dep incdir joinpath dirname path libdir fparse comments lfoo refers sized eventually uint generate foostruct barstruct level julian interface ptr cint try return julianfoo libc free options handle complex occasionally define dependency excluded altogether kinds situations handled combinations following suffixes parse related directory subdirectories mark private content quietly block suppressing messages reference skip leave undocumented stdio provides file emitting exports suppress refer variables simply setting meanings depending guarantee interpreted elsewhere imy cstruct true treated referenced enumeration constants etc quick static array pointer myunion mystruct typedef printf char examples demonstrate resides modules imported somemodule submodule expose intptr cptr cfunction carried integer represented cconst unqualifiedtype strip core mentioned bitstype acquire concrete bits objects aggregate constructed zero immutable object field initialized copy structs changing effect calls performance match accessing elegantly followed elements dereferenced val malloc allocate deallocate exception rule bitfields access expects subscript properly element returned intarray behave direct getting bound syntax call funcptr tuple cdecl providing method pass argument assuming exists myadd saferadd safer require paranoia gotchas implemented added future releases incomplete please voice feature abstract forward declarations significant implications ccall illustrates unexpected behavior isa vector false distinction matters implementation detail worth noting brought singleton actual approach allows obtain attaching methods instance help mode consistent universal var