scalarradau solve scalar differential equation accuracy efficiency stability using benchmarktools plots cos radau plot legend false xlabel ylabel linrange zeros length btime allocations kib module contains lightweight implementation classic iia method ordinary ode julia algorithm famously effective solving priority stiffly accurate stable follows description chapter equations ernst hairer gerhard wanner basic step size adaptive initial chosen automatically functions implemented type flexible dependent variable yout restricted real probably return isn dense output continuous solutions cubic hermite interpolation approximate jacobian evaluation performed simple finite difference costs function attempted stages matrix static arrays efficient quasi newton iterations designed scenario solved repeatedly solver originally written schwarzschild radiative transfer clearsky properties crucial prevent physical overshoots specialize directly provided slightly differentialequations system defining stiff odes instead look specifically vector called radauiia nice mathematical overview methods check install package manager add define pass param snippet solves starting returns spaced solution interval callable object arguments control xout rtol atol facmax facmin maxnewt maxstep maxfail mandatory sorted values sampled form value integration optional argument default meant scenarios extra information accessible passed whenever coordinates ascending checked integrity integrating backward added overwritten means nans zero calling result pre fill keyword relative error tolerance absolute maximum fraction increase compared previous minimum decrease kappa stopping epsilon current approximation reduction steps stops throws convergence failures integers set inf effectively disable described available options convenient version internally example definition nout kwargs specify vectors returned compute identical