juliafem source solver industrial academia usage organization web page http www org project develops software reliable scalable distributed finite element method library framework allows processing models clusters computers using simple programming designed scale single servers thousands machines offering local computation storage basic design principle nonlinear physics linearization special moment users perform following analyses elasticity thermal eigenvalue contact mechanics quasi static solutions typical examples applications include linear solid strains fluid structure interaction visualization paraview prefers xdmf file format xml store light data hdf sets standard vision hand includes opportunity massive parallelization multiple mpi threading cloud computing resources amazon azure google services company internal server real application complexity including simulation model geometric forget reuse existing material considered crucial features package recreating wheel definitely goal try embrace practices formats implemented abaqus calculix input support maybe future extend fem modern development environments encourages user towards fast time productivity developing creating ideas tutorials jupyter notebooks easy handouts interface notebook julia language makes bigger solution cycle example mining automatic geometry modifications mesh generation post enabling efficient optimization loops installing inside repl type pkg add initial road map current status planning version degree freedom cores strongly believe test driven building top previous code tested people wisdom style zen python beautiful ugly explicit implicit complex complicated flat nested sparse dense readability counts errors pass silently citing please consider article frondelius title volume url https rakenteidenmekaniikka journal view doi rakenteiden mekaniikka author tero aho jukka pages contributing starting unit testing larger functions continuing integration platforms participating start reading