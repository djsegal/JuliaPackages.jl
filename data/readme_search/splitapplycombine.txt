split apply combine strategies nested data julia splitapplycombine provides level generic tools manipulating particularly focussing containers emphasis placed ensuring easy reliably arbitrary iterables optimized structures included standard library form functions operate iterable indexable intuitive simple extending built map reduce filter commands wider range operations base invert innerjoin able overloaded users maintainers packages custom goal provide sufficient functionality satisfy manipulate relational meaning tables dataframes basic vector namedtuple style pay particular family effectively allows switch struct arrays array structs interpretation exploring idea using named tuples fast table package development called minimumviabletables adds acceleration indexes otherwise attempts native interface quick start install typing pkg add repl examples select subset complete api reference readme return element input splitdims create int combinedims flatten nesting iseven elements dictionary bool false true groupreduce performing reduction tuple datasets related sql inner join leftgroupjoin efficient groupings dict entries tabular primary algebra relation typically defined unordered collection unique relations collections rows viewed suggest iterate entire row getindex bit occur project rename columns zip product complex discuss useful iterates prototype mind consider abstractvector model strongly typed dataframe specialized convenient macro based dsls implementations focus core distributed computing flexible indexing etc considering bare bones extended notes recently switched dictionaries currently implements exports splitdimsview combinedimsview mapmany groupinds groupview expect list grow iter returns single contains zero error thrown example argumenterror exactly empty stacktrace home ferris sac src contained dims multidimensional splitting specified dimensions outer leaving remaining dimension default except creating lazy view struture inverse operation sub flattened container reversed implemented combinations abstractarray planned abstractdict future types float mutating version stores result mapview wrapped lazily computed output attempting preserve immutable performed eagerly mappedarray typeof iters values insert note semantically special takes containing subcollecitons equivalent identity cartesian evaluates pairings vectors matrix keys differs slightly iterators assumed productview evaluated corresponding productarray help according function maps key labeled transforming implementation creates course extend suitable structure method exists multiple length provided names andrew smith john alice baker robert jane jason bourne string substring groupfind indices associated renamed similar original construct appropriate groupdictionary subarray eltype init applies mapreduce passing designed transformations elementwise export groupcount groupsum groupprod determine sum respectively joining lkey rkey comparison isequal left performs returning labelled rae matches created shares similarities linq groupjoin