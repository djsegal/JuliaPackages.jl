peg define parsing expression grammar via macro abuse julia syntax rules rule name choice infix sequence positive lookahead prefix negative option zero time postfix note won julialang times exactly integer inclusive terminals regex string extra flags punctuation eats whitespace match word implies makes boundaries modifies eat horizontal values passed semantics functions exclude eaten unary function parsercombinator nary interpolate args returning special singleton value failure causes attached fail return instead tuple signature using nonterminal seq item counted single count range parens terminal himpswx left exercise defines following input cache abstractstring union substring abstract tree remaining parsed portion fails returned defined directly convenient parse false documentation information call setdebug debugging printed versus simpler featureful backtrack except regexen try repetition greedy possessive pcre terminology empty str discard dot eos streams read include parsers random languages nicer operator precedence sense tight loose operators whatever brackets plus star actual plusses stars equal pattern unneccessary bare strings require mutual recursion loops broken delayed types matchers trampoline interpret plain migrating differences required changes minor syntactic grammars written change don lambda expressions outside stream previously suggested readstring void parseerror meta immutable type struct shouldn matter fields technically visible isbits true