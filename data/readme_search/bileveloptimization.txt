bileveloptimization package julia toolbox based jump solving bilevel optimization encountered various applications including power grids security games market equilibria chemical reaction generic linear blp written min arg integer represents upper level decision variable lower solution parametric sub depending value required data describing feasibility domains coefficients objective functions regrouped bilevellp type formulation remain approachable plain mixed solvers cbc glpk scip gurobi cplex simple user set zero matrix appropriate dimension complex solver support constraints usage main function build model modify signature comp method builds scratch return tuple vector dual slack called built add optimality returns willing describe using following constraint kkt conditions added installation installed pkg tool running testing tests performed test api documentation repl help prompt identifier import form note variables allowed resolution hard reduction complementarity handled directly methods developed literature implemented standard algorithm args complementaritymethod special sets sos default option pass primal bounds common technique linearization fortuny amat mccarl boundcomplementarity scalar bound abstract custom users create creating typing optional helps clarity implement toll setting application module bilevelflowproblems offers acting leader stackelberg game chooses taxes arcs directed graph follower makes minimum cost flow amount source sink arc invariant base tax decided investigated include initial edges taxed options edge capacities example init taxable false true zeros minflow bilevelflowproblem bfp optimizer attributes loglevel optimize size sum questions issues contributions explained github ideally minimal pull requests welcome please read detailed information related packages bileveljump flexible input designed mathoptinterface beginning merged class techniques mibs includes branching cutting plane leveraged yalmip roughly features bit citing citation bib prefer paper published journal software