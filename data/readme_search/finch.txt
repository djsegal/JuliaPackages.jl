finch documentation build status try online adaptable julia compiler loop nests sparse structured multidimensional arrays addition supporting handle custom operators fill values zero runs repeated special structures clustered nonzeros triangular patterns allows write loops dense compile takes care applying rules avoid redundant computation supports statements user types functions users add rewrite inform defined properties optimizations modify indexing expressions express convolution describe windows example program calculates minimum maximum sum variance vector reading nonzero using fiber fsprand scalar min inf max var begin array formats described recursively mode semantically understood tree level corresponds dimension edge index constructs float csc format matrix dcsc hypersparse column major multiply rand heart powered domain specific language coiteration breaking iterators control flow units call looplets lowered progressively stages rewriting simplification technologies enabling manuscript installation repl install stable version running pkg