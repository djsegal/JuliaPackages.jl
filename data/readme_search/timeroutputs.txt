timeroutputs julia package generate formatted output timings sections program main functionality timeit macro similar time base except assigns label code section timed multiple calls scope accumulate data executed print nicely table allocations customized useful please star stars helps development spent example finite element simulation shown tot measured gib ncalls avg alloc assemble mib inner kib linear solve create sparse matrix export line total wall passed start timer percentage totals inside following lines followed finally elapsed average call usage easiest examples timing using timeroutput type track const sleep named function rands rand returns value evaluated vals randoms nested name accumulated parents test nest begin level exception safe throw throwing error fine nope disable selectively enable recorded notimeit afterwards enabled previously accumulates annotate definitions funcdef instrument existing foo default printing created averages information available settings stdout kwargs takes keyword arguments change listed title string bool allocation columns true sortby symbol sort according firstexec linechars unicode ascii draw horizontal compact hide column false flattening displayed flatten identical labels merging timers merged merge outer facilitate coverage throughout simple multi threaded setups instance thread local objects custom via tree arg vector strings navigate lock threads spawn resetting reset calling remove current values indexing indexed root percentages relative querying unexported functions allocated returned units nano bytes object furthermore request tottime totallocated convenience version macros global defined note shared users prints retrieved defaulttimer measuring consumed outside blocks operations consider consuming relevant adding additional timming initializations annoying complement modify add result simply sometimes desirable purpose maintains collection retrieves creating none exists module usetimer called top getting precompiled recommended extensively libraries namespace collisions happen serialization converted set dictionaries todict serialize json dict entries write overhead means suitable finish quickly proper benchmarking tool benchmarktools desireable able wish deal normal operation provide debug wraps conditional checking portions instrumented codebases basis disabled optimized allowing truly zero user method redefined causing dependent methods recompiled hence intended debugging thereafter author kristoffer carlsson kristofferc acknowledgments inspired class