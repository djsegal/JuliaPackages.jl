package provides generic simple fast implementation deepmind alphazero algorithm core lines pure hackable julia code interfaces easy add support games learning frameworks magnitude faster competing alternatives written python solve nontrivial standard desktop computer gpu agent trained cluster machines easily single modifying line care beyond publicized success attaining superhuman level chess illustrates methodology combining search explore combinatorial spaces effectively believe exciting applications research resource hungry successful source implementations leela zero low languages optimized highly distributed computing environments makes hardly accessible students researchers hackers motivation project provide widely sufficiently powerful enable meaningful experiments limited resources found language instrumental achieving goal training connect download start run export gkswstype avoid occasional bug git clone import pkg instantiate using scripts train iteration takes hour intel processor nvidia rtx plot evolution win rate baselines vanilla mcts baseline minmax plans depth handcrafted heuristic note exposed learns purely self play form supervision prior knowledge evaluate performances neural network instead plugging action assigned probability unsurprisingly initially unable game significantly stronger despite able perform information tutorial juliacon talk documentation home introduction overview solving hyperparameters contributors jonathan laurent main developer pavel dimens logo design marek kaluba tuning grid world example micha ukomski mancala openspiel wrapper johannes fischer improvements contributions welcome contribution ideas available guide please hesitate github issue share idea feedback suggestion supporting citing help gain visibility consider starring repository metrics secure academic funding future software appreciate include following citation paper related projects alphagpu inspired scaling laws board happens including logic trades genericity flexibility exchange unbeatable networks batch simulation reinforcementlearning reinforcement framework leverages multiple dispatch offer composable algorithms components releases build gains multithreaded pomdps elegant designed partially observable markov decisions processes acknowledgements material based supported united air force darpa contract opinions findings conclusions recommendations expressed author necessarily reflect views