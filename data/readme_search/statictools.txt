statictools tools enable staticcompiler based static compilation julia code accurately subset call unsafe standalone native binaries avoiding allocations llvmcall ing experimental package currently requires results doubt check versions passing integration tests loopvectorization run linux mac platforms depend support considered necessarily involves lot juggling pointers errors instead simpler ccall statically compile smoothly serious bugs undefined behavior please report unexpected prs welcome addition exported names base functions extended types staticstring mallocstring stackarray mallocarray include print println error parse read write rand using rng initialied splitmix xoshiro randn marsagliapolar boxmuller ziggurat abstractarray abstractstring interfaces relevant stack allocated sized heavily inspired techniques juliasimd manualmemory via stridearrayscore stridearrays obtain fast arrays friendly limit size larger space malloc language memory freed able taking risk responsibility consider bump allocator bumper printmandel limitations compileable linking libjulia avoid probably manual heap allocation calloc convincing compiler alloca object fine const ant global variables type instability cause inexacterror overflowerror int boundserror inbounds else bounds mandatory consequently treat accordingly indexing don inline sneaky due boxing feel free liberally multithreading microsoft windows supported except wsl help careful recommend starting adding features slowly hand surprising range multiple dispatch metaprogramming happen time noted manually allocating operating effectively stepped step interact objects means dealing follow normal model fortunately trouble benefits besides compileability biggest sources unnecessarily bad performance naive especially won mistake accident pauses including hello world utilities contents convert similar fields parameters amenable mainly useful converting paramaterized sciml infrastructure main diffeq integrator default forms numerical compiled rules array converted string redefined context variable note examples command line executables simple executable arguments function args argc argv ptr uint construct printf argument count input load pointer str wrap level interface didn allocate fun return filepath shell foo hyperfine benchmark mean user system min max runs warning complete inaccurate rwxr staff resulting kilobytes mallocarrays determined runtime dynamically times table incorrect rows argparse cols undef reshape reinterpret causing unlike getindex produces views contiguous slices reinterpreted generic method users stackarrays fit axes random generation matrix stderrp float generate single alh loopvectoriztion compatibility mul turbo indices cmn zero eltype loopvec lhs rhs multiplication stdout clean matrices attempt path allocates fills multiplies prints singlethreaded cbkeller dylib shared libraries calling library python example nice refvalue accept ref specify contrete compiling mallocarra specifically aka mallocmatrix shlib inplace filename libmul limited principle pass usually easiest plain complicated qualify latter hence refs import ctypes numpy class structure void length def mmptr data shape byref lib cdll ones aptr bptr cptr basically mimiced struct ntuple particular integers talking flip row major contrast column timeit loop std dev loops matmul faster counting libdl dlopen dlext rtld local dlsym objref dlclose benchmarktools trial samples evaluations median histogram log frequency estimate bytes allocs course bring circle dlmul fill preserve begin ptrcall existing linked specifying flags gcc clang following equivalent explicitly symbolcall cflags lmul link mpi message computing staticmpi merely provides convenience libmpi mpihello init comm rank processors finalize lmpi opt mpich instructs installation found file built osx version mpiexec