nodal provides tools implementing parallel distributed program autotuners julia package optimization algorithms stochastic local search methods simulated annealing tabu ongoing project implement optimize user defined functions basic composed building blocks provided distributes evaluations technique executions workers multiple instances techniques running installing runs nightly repl run pkg add version unstable instead clone documentation please refer information examples example rosenbrock function following simple source code github repository cost define configuration represents arguments tuned create configure tuning import addprocs begin using parameters dict symbol return value note means autotuning objetive tool help familiar api performs worse look page fitting applications default processing core application statement loads current worker macro defines module available accept input autotuner space parameter dictionary store data configurations simply ignores received calculate restriction names floatparameter float values constrained interval intervals start name config type won details starting stopping criterion elapsed time report reporting duration iterative improvement iterated randomized greedy construction array respective instance implemented tells stop iterating criteria iterations results implementations dive deeper ready spawn computing check docs call method receives background write remotechannel stored result channel neighboring perturbation process print loop final complete color found iteration initialize calls numberparameter min max minimum