dagger framework core parallel computing scheduler heavily inspired dask run computations represented directed acyclic graphs dags efficiently julia worker processes installation install typing add usage installed package using main function delayed options returns called creates thunk object representing call arguments thunks input form graph nodes output result don pass keyword argument kwargs passed control behavior bool return actual instead chunk objects explicitly constructs value reduce meta contained master process persist released unused dag cache evaluated reuse cached removed recompute creation interface simple example combine sum assert collect connections dependency final obvious consequence operation compute fetch computation alternatively references executed evaluation happen chunks communication key node provided regular polytree polytrees easily supported head act top sometimes exert fine grained allocates mechanisms achieve sch scheduleroptions thunkoptions structs contain difference operate globally entire basis constructed similarly myfunc arg opts check docstring available processors resource default cpu typically single threaded cluster allows access wider range hardware software acceleration techniques multithreading gpus advanced performant accelerators disabled enabled proctypes field empty processor types gpu daggergpu imported enable nvidia amd via usual rough level description scheduling picks leaf distributes workers task time preferred finishes returned usually immediately finished issues release commands required computed free memory prevented passing acknowledgements thank darpa intel nih supporting mit