defer provides simplified resource cleanup julia programs interface external resources wrapping libraries arrange freed closed cleaned otherwise disposed package golang inspired macro easier users free correct time meant pathfinder eventual language feature meantime usable current form adopting convention ready future help shape determining forms useful corner cause friction basic usage create scope execute code schedule execution terminates begin println world hello prints shortcut deferring call close type string base closing using module development authors allocated init function global top level exists user pending actions calling pop reinitialized modules finalizer instead add method easily adding constructor called example include libfoo context library const foo ref foocontext null initialize loaded foocreatecontext don atexit action foodestroycontext object available immutable ptr foothing wrapper foocreatething destroyed extend control foodestroything sometimes inconvenient equivalent applied definition wraps body statement wrap automatically variables dev exceptions deferred propagate caller multiple wrapped compositeexception try throw exception catch offered clean experiment maintainers follow lessons learned implementing similar additional questions resolved adopt following dispose chose purpose extension unlikely conflict extending finalize interferes finalizers scheduled options destroy etc suitable commonly packages community export executed requires specify run declaring scopes built rule currently executing block particular lines repl ijulia cells terminate initialized initialization special suggested exist life alternately corresponding uninit effect author destruction returned practice scheduling convenient directly usually worry performance sensitive option handle manually single addressing competing desires