cxxwrap package aims provide boost python wrapping types functions julia idea write code wrapper liner wrapped library available mechanism registered compiled dynamic loaded data provided interface generate accessible passed raw function pointers regular don argument return type conversion std lambda expressions automatic arguments wraps methods automatically difference cxx directly access using macro facing task authors options ccall completely line load latter approach translating existing bindings based easier features support lambdas classes single inheritance abstract base trivial converted isbits immutable template map parametric instantiations listed default copy constructor mapped deepcopy defined class facilitate calling installation pkg mode repl add depends libcxxwrap jll manage binaries readme information build force version hello world example try reproduce tutorial suppose expose following module called cpphello string greet exposed follows include jlcxx hpp define mod method shared wrapmodule joinpath path built lib libhello init initcxx call result found cpp examples directory project test note precompilation compiling recommended compile cmake discover libraries testlib sequence commands mkdir dcmake release prefix sourcedirectory config obtained windows msvc installed cross gcc incompatible visual studio easy check git source details entry multiple modules appropriate stuff name specified explicitly specific specify dlopen flags rtld global supplied third optional cxxwrapcore stl libdl extensive performance including arrays includes measurements overhead require extra appears expected exposing consider struct const message msg void set cout destroying endl defining cpptypes adds taking finally calls pointer free object manually added creates finalizer disabled adding false actually builds related mutable allocated boxed structure worldallocated ptr cvoid attached deletes held means variable concrete letting scope trigger delete responsibility caller lifetime resulting generation considering fpointer worldref thunk cconvert creating warning matters info immutables bits checking null values returned checked isnull setting override revert behavior current unset deprecated getindex setindex convert internal change overridden abstractfloat double float val encapsulate inherit static cast virtual mydata supertype datatype looks associated variant useful inheriting teuchos parameterlist abstractdict value auto multi vector typevar multivectorbase vectorbase reference bref aref allow figure correct hierarchy time namespace typedef enum strongly typed myenum enumvala enumvalb cppenum constants accept natural equivalent mapping complicated parameter advance requiring deviation syntax typename templatetype apply decltype wrappedt generic placeholder created exist fulfill requirements functor takes instantiated actual shown import parametrictypes combination applying combinations parameters shorter constructors destructors create memory returns garbage collected arg operator overload supports overloading wrap omitting calloperator int course logical overloaded signatures generated half yields desired basis strictlytypednumber strict yield accessed customization customized passing uint normally overloads integer due imposed size platform fixed equivalents named cxxlong implementation alias otherwise table overview aliases bool cxxbool char cxxchar wchar cxxwchar signed cxxsignedchar unsigned cxxuchar short cxxshort cxxushort cxxint cxxuint cxxulong cxxlonglong cxxulonglong references simple treated allows changing referred writepointerref ptrref ptrmodif ref modifies mydataallocated modification smart currently unique weak supported transparently returning smartpointer factory swf explicit dereferencing custom mysmartpointer specializing issmartpointertype true constructorpointertype marks enabling referenced indicates constructed relation writing operate tricky objects additional cxxbaseref signature cumbersome enter cxxdereference declaring makes changes union dereference calculated resolves exceptions exception abort program avoid intercept thrown intercepted tuples containers tuple header libcontainers export native arrayref conveniently array provides basic functionality iterators read accessor push appending elements primitive sometimes determined elsewhere api translate mymodule larger blob heap sense constarray implements exposes safely natively dimensional sizes matrix definition skipped column major convention reversed display replacing owned direct convenient boxing juliafunction invoked max internally slower safe cfunction checks throw runtime error incorrect callback testf func incurs applied times stored safecfunction inside appropriately extendedtypes libextended extendedworld matches exports macros replace readmodule separately wraptypes wrapfunctions introduces standard mappings stdvector stdstring vectors contains collections complete specializations getsecondaryworldvector getsecondaries linking wrappers requires target link command cmakelists txt breaking begin exists instead expects chosen removed file foo symbols corresponding declared statement maps abstractstring ismirroredtype isimmutable layout unexpected mirrored marked disable mirroring box introduction transparent except casting previous wrong cxxptr nullptr packages reorganized