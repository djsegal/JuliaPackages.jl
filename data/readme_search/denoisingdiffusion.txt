denoisingdiffusion pure julia implementation denoising diffusion probabilistic models popularised jonathan ajay jain pieter abbeel detailed examples please notebooks corresponding project originally repository removed using git filter repo lightweight explanation process code blog posts overview unconditioned sampling reverse left final image estimate coincide time step starts noise gradually removes steps resulting natural looking model predicts reach current allows created updated trained generation conditioned classifier free guidance direct outcome introduced tim salimans mode label timestep passed candidates generated generic target weighted combination uncond scale cond difference represents rough gradient original paper baseline instead cancelled skipped special module main export gaussiandiffusion struct associated functions various building blocks included includes flexible conditionalchain based flux chain handle multiple inputs input priority versions unets convolutional autoencoder available unet unetfixed specifications equivalent arbitrary downsample upsample pairs five advisable nested skip connections linear middle layers total default configuration approximately parameters layer attention doubling channels quadruple convolution size proportional square dimension chet lenet distances fld frechet inception distance fid cumbersome million overkill simpler proposed calculation except output values opposed pretrained weights easily cpu results standardised example notes training data unetconditioned gamma samples ddim tau eta random loss mean squared error epochs installation download github registered repl enter package pkg dev path revise dynamic edits optionally tests run test fastai nbdev manage jupyter requires python avoid follow gitconfig train images threads auto start interactively spiral pokemon times possibly satisfying achieved pok mon exist billion parameter task list self efficient faster guided