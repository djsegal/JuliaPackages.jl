pardiso package provides interface using intel mkl julia language valid license library installed available free charge replaces alters functionality linked libraries installation pkg add follow instructions install default automatically suitable platform self set mklroot environment variable getting started manual thorough guide correctly typically executing source opt bin mklvars running program files intelswtools compilers windows bat run build log additional information note whenever libpardiso win dll gnuxxx macos dylib folder example create entry env users config startup file download perform specific steps weird errors observed enabled problematic disable paridso setting rerunning linux version gfortran corresponding openmp fast blas lapack preferably single threaded handles threading openblas basic usage section explain solve equations settings advanced creating pardisosolver created solving mklpardisosolver object hold solver passed functions following sections instance referred signatures solves returns stores symbols added extra argument transposed conjugate system respectively real hand sparse rand zeros happened result array float schur complement partitioned matrix found function submatrix size defined nonzero rows sparsevector sparsematrix finding rng mersennetwister sprand inv check validity comparing explicity form norm instability computation complex matrices threads nprocs sets creation looking omp num loaded changed runtime retrieved discusses terminology please refer calls instead directly ensure properties overwritten return depending type parameter symbol representing normal conjugated represented ease enums options exported explicitly imported qualified module name enum input key integer manuals matrixtype meaning sym structurally symmetric posdef positive definite indef indefinite struct herm hermitian nonsym nonsymmetric supports direct iterative solvers multi recursive phase mentioned execution analysis numerical factorization refine refinement selected inversion forward substitution diag diagonal backward release mnum internal memory iparm dparm retrieve parameters getters setters iparms dparms values call pardisoinit depend message level print timings statistics msglvl printed vector checkers comes consistency integrity data called printstats checkmatrix checkvec calling maxfct perm int syntax compute compelement described answer pardisogetschur low api custom block analyze factorize dummy length shares element potential gotchas csc expects csr seen transposes transpose flag iparam stored structure happens recommends adding eps suspect elements unless ignored upper triangular means pass tril managed format contributions suggestions idea improving issue