bumper experimental package aims bump allocators easy safer dynamically allocate memory reset code block julia default stack allocating allocbuffer efficient allocation pay hefty cost intermediate allocations global buffer starts capacity change size set nbytes runs throw error resizing active allowed considered safe simplest rely implicitly using stridearrays makes operations broadcasting faster function vector int escape begin alloc length ptrarray stridearrayscore sum promising enclosed supplied leak created inside lifetime finishes running internal pointer position started compare performance equivalent heap benchmarktools benchmark setup rand trial samples evaluations range min max time median mean histogram frequency estimate bytes allocs stridearray undef nice speedup actually okay manually manipulating invoked fetching fast const variable protect concurrency bugs section provide explicitly safety features aren buf notice specified log current task construct byte calling requires temporarily sizeof miscellaneous notes blocks nested allocator store objects scoped meaning deeply calls mentioned previously allow initialized cause corruption outside overflow times accidentally creates lightweight depends advanced functionality separately contributing test suite greatly appreciated parallelism independent inherit parent slow spawning tasks demo buffers main async asychronous fetch false whereas don spawn worry unnecessary creation true threads interfering operating local changing reason run chunk bufferr modified usage staticcompiler useful trying compile standalone static binaries available won able count instead nothrow due limitation statictools foo argc argv ptr uint argparse mallocarray malloc create mallocvector regular doesn mode note specify resetting spill limit printf free executable execuable process processexited