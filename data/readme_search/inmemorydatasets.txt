inmemorydatasets documentation release available via introduction multithreaded package data manipulation designed julia bit core computation engine set customised algorithms developed specifically columnar tables performance tuned goals mind low overhead allowing missing values following priorities importance compilation time memory efficiency overall complexity simplify maintenance adding features contributing benchmarks highlight favourites particular assigning named function column format default formatted operations displaying sorting joining evaluation lazy formats don change actual multi threading functions exploit cores disabling parallel passing threads false keyword argument powerful row wise support common specialised modifying columns filtering observations filter simply wraps byrow unique approach reshaping unified syntax type cover stacking single multiple wide transposing fast stable unstable heapsort quicksort count sort integers compiler friendly groupby observation using sorted gatherby hybrid hash incremental operation efficient preserve left methods merge join inequality equi range joins innerjoin contains semijoin antijoin closejoin exact match update updating master transaction example repeat inner ooo dataset identity int string tds transpose variables mds map replace sum isequal element vector union chain begin flatten insertcols modify reverse select acknowledgement acknowledge contributors ecosystem especially dataframes existence development head start