saferepl package allows swap repl meaning julia literals particular loading default replace float bigfloat int bigint literal prefixed left unchanged using sqrt typeof installation requires version depends sub swapliterals described packages registered installed via pkg add custom types mean specified arguments function correspond passing means transforming type symbol interpreted name applied value argument defaults bits systems transformed single boolean passed false deactivates true activates previous setting finally enabled equivalent str examples bitintegers bitfloats log factorial saferintegers doublefloats doublefloat safeint double error overflowerror stacktrace overflowed nemo fmpz ans currently integer argumenterror invalid index quote array indices doesn act line activate substitute api pass list pairs sourcetype converter example char string uint strs asciistr notable exceptions bool converted issue feature macros macro instead directly interpret digits course input anymore loaderror overflow parsing experimental decfp adventurous substituted arrays tuples vector syntax respectively vect tuple braces vectors entered delimiters elements separated newline bracescat set element question valid normal addition previously mentioned transform ast makeset expr call args stored roughly quoting similarly note functions natural arising pretty quickly interacts contexts benchmarktools scalar substitutions usually benchmarking bit subtle substituting container btime sum allocation bytes allocations real begin versus impact dump head alloc size ptr expressions involving mechanism uppercase source code shorter try active deactivate pair available possibility converters clarity global section fail visual indicator following startup file modify color prompt text tweak atreplinit interface setup mode modes prefix isdefined main isactive base colors yellow else safejulia switching easily forth keybinding ctrl followed putting const mykeys dict lineedit refresh extra keymap manual details called shown calls combined caveats tested architectures risks guarantee reveal missing methods render usable ideal opportunity ticket issues corresponding projects meantime mitigated expensive time wise memory offers trade panacea information lost print earlier mitigate alternative produce results rationalize converting option implicitly insert calling floats safe totally user users disappointed encounter unsafe arithmetic operations due understood tongue cheek applies overflows disappear soft alternatives easiest probably replmaker lines backend defined readme swapper parse meta initrepl bigjulia red start key checker takes public couple similar changeprecision reinterprets floating producing rand wraps integers