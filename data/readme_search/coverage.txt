coverage julia code memory allocation results useful track times line run measuring base tests actually test reveal tested hiding bug summarize tracking send service allocated type instability operations cheap terms aren accidental copying comparison packages package allows submit online web services coveragetools core functionality processing users locally step collect data using default suite pkg mypkg true alternatively manually terminal navigate whatever directory start option user comprehensively getting standard libraries tracefile available add options project repl starts execute commands wish quit written files exits summary statistics optional top level restart special flags analyze process cov folder defaults src supply name argument append deps info collected merge counts filter prefixes joinpath pwd startswith filename lcov readfolder total covered lines single file fraction equal identify uncovered discover functions lack testing browse look starting mark executed larger respective note blank comments statements etc marked count aware limitations branches branch currently internal interpreter exclude specific sections blocks surround section excl stop foo comment const ensure compiled compilation allocates call profile malloc finally holding source command dirnames current return vector mallocinfo objects specifying bytes sorted increasing size export tools format generated geninfo tool generate writefile cleaning time lot accumulate provides clean methods subdirectories associated integrates continuous integration servers travisci http posts computer home enable repository public github travis circleci appveyor sign codecov identity otherwise define token environment variable upload settings runtests configure language simply yml following downloads collects bundles submits assumes changes don forget replace success projects bin running machine bash script local solution secure called coveralls repo found neither please issue adding additional activate advanced perfect scenarios emitted treated counted arbitrarily inflate scores extreme result contains overcome applies workaround ensures properly resolves reporting unfortunately negative consequences lead reason compiles inlining optimizations happen correspond won argue normally fine except chance able improve deal future unclear care instances improved information produces par compilers gcc clang produce added expert module owners disable setting amend achieved env global pull requests welcome argparse astrolib audioio augur bootstrap cairs climatetools dassl dataframes decimals distributions dsp extractmacro fastaio finitestatemachine fourierflows gadfly geometricalpredicates glob gradientboost graphcentrality graphlayout homebrew httpparser intervaltrees ipnets jointmoments jump libgit lightgraphs linearexpressions orchestra ode onlinestats opencl openstreetmap pvalueadjust quantecon quantileregression rationalsimplex rdf restful robotics roulettewheels saslib simjulia siunits statsbase taylorintegration taylorseries textwrap timedata typecheck unitful uriparser uritemplate voting wav weave weightedstats yaml