<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-shadeyourdatajl" class="anchor" aria-hidden="true" href="#shadeyourdatajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ShadeYourData.jl</h1>
<p dir="auto"><strong>ShadeYourData.jl</strong> <em>n.</em></p>
<ol dir="auto">
<li>A cheap clone of <a href="https://datashader.org" rel="nofollow">datashader.org</a> for Julia.</li>
<li>Interactive plotting of millions of data points.</li>
</ol>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Install like so: <code>] add https://github.com/cjdoris/ShadeYourData.jl</code>.</p>
<p dir="auto">See the example below, or read the docstring for <code>datashade!</code>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">In this example, we plot all 2.6M UK postcodes from <a href="https://www.doogal.co.uk/PostcodeDownloads.php" rel="nofollow">this dataset</a>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/cjdoris/ShadeYourData.jl/master/example.png"><img src="https://raw.githubusercontent.com/cjdoris/ShadeYourData.jl/master/example.png" alt="ShadeYourData.jl example" style="max-width: 100%;"></a></p>
<p dir="auto">You can watch it in action <a href="http://www.youtube.com/watch?v=svG6fCjVbEg" title="ShadeYourData.jl demo" rel="nofollow">here</a>. Notice that when zoomed out, the density of points is shown via a colormap, but as we zoom in and the points get separated, we plot them bigger so you can see them individually.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ShadeYourData works best with MakieLayout
using CSV, DataFrames, Makie, MakieLayout, ShadeYourData

# load the dataset
df = CSV.read(&quot;/path/to/postcodes.csv&quot;, copycols=true)
dropmissing!(df, [:Easting, :Northing])

# set up a new scene
scene, layout = layoutscene()
ax = layout[1,1] = LAxis(scene)

# `datashade!` is the main plotting routine we provide
ds = datashade!(ax, df.Easting, df.Northing, colormap=:dense)

# post-process the aggregated image by applying an autospread (makes points bigger when they are spread out) and rescaling by `log1p` to lessen the extremal values
ds.post = x -&gt; log1p.(ShadeYourData.autospread(x))

# force the data aspect ratio to be 1
# you can achieve the same with just `ax.autolimitaspect = true`, but currently zooming doesn't work well when you do this
ax.aspect = DataAspect()
xlims!(ax, -300_000, 900_000)
ylims!(ax, -100_000, 1_100_000)

# take a look
display(scene)"><pre><span class="pl-c"><span class="pl-c">#</span> ShadeYourData works best with MakieLayout</span>
<span class="pl-k">using</span> CSV, DataFrames, Makie, MakieLayout, ShadeYourData

<span class="pl-c"><span class="pl-c">#</span> load the dataset</span>
df <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/postcodes.csv<span class="pl-pds">"</span></span>, copycols<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">dropmissing!</span>(df, [<span class="pl-c1">:Easting</span>, <span class="pl-c1">:Northing</span>])

<span class="pl-c"><span class="pl-c">#</span> set up a new scene</span>
scene, layout <span class="pl-k">=</span> <span class="pl-c1">layoutscene</span>()
ax <span class="pl-k">=</span> layout[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">LAxis</span>(scene)

<span class="pl-c"><span class="pl-c">#</span> `datashade!` is the main plotting routine we provide</span>
ds <span class="pl-k">=</span> <span class="pl-c1">datashade!</span>(ax, df<span class="pl-k">.</span>Easting, df<span class="pl-k">.</span>Northing, colormap<span class="pl-k">=</span><span class="pl-c1">:dense</span>)

<span class="pl-c"><span class="pl-c">#</span> post-process the aggregated image by applying an autospread (makes points bigger when they are spread out) and rescaling by `log1p` to lessen the extremal values</span>
ds<span class="pl-k">.</span>post <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">log1p</span>.(ShadeYourData<span class="pl-k">.</span><span class="pl-c1">autospread</span>(x))

<span class="pl-c"><span class="pl-c">#</span> force the data aspect ratio to be 1</span>
<span class="pl-c"><span class="pl-c">#</span> you can achieve the same with just `ax.autolimitaspect = true`, but currently zooming doesn't work well when you do this</span>
ax<span class="pl-k">.</span>aspect <span class="pl-k">=</span> <span class="pl-c1">DataAspect</span>()
<span class="pl-c1">xlims!</span>(ax, <span class="pl-k">-</span><span class="pl-c1">300_000</span>, <span class="pl-c1">900_000</span>)
<span class="pl-c1">ylims!</span>(ax, <span class="pl-k">-</span><span class="pl-c1">100_000</span>, <span class="pl-c1">1_100_000</span>)

<span class="pl-c"><span class="pl-c">#</span> take a look</span>
<span class="pl-c1">display</span>(scene)</pre></div>
</article></div>