<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-medyansimrunnerjl" class="anchor" aria-hidden="true" href="#medyansimrunnerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MEDYANSimRunner.jl</h1>
<p dir="auto"><a href="https://github.com/medyan-dev/MEDYANSimRunner.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/medyan-dev/MEDYANSimRunner.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Manage long running restartable MEDYAN.jl simulations.</p>
<p dir="auto">Simulations run using code stored in an <code>input</code> directory and write outputs to an <code>output</code> directory.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">First install and run Julia <a href="https://julialang.org/downloads/" rel="nofollow">https://julialang.org/downloads/</a></p>
<p dir="auto">Then in Julia install this repo as a regular Julia package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg

Pkg.add(&quot;https://github.com/medyan-dev/MEDYANSimRunner.jl&quot;)"><pre><span class="pl-k">import</span> Pkg

Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/medyan-dev/MEDYANSimRunner.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This will add a <code>medyansimrunner</code> to <code>~/.julia/bin</code>, so add <code>~/.julia/bin</code> to your PATH.</p>
<p dir="auto">Run:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="medyansimrunner -h"><pre>medyansimrunner -h</pre></div>
<p dir="auto">To see the help.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Run the following in the root of this project.</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cd test/examples/good
medyansimrunner run input output 1"><pre><span class="pl-c1">cd</span> test/examples/good
medyansimrunner run input output 1</pre></div>
<p dir="auto">This will run the example simulation in <code>test/examples/good/input</code> with job index <code>"1"</code> and store the output in <code>test/examples/good/output/1</code>.</p>
<p dir="auto">The <code>job_idx</code> string gets passed to the <code>setup</code> function in <code>main.jl</code>.</p>
<p dir="auto">The <code>job_idx</code> is hashed and set as the default RNG seed right before <code>setup</code> is called.</p>
<p dir="auto">Any backslash in the job index will be replaced with a "/".</p>
<p dir="auto">The job index must be valid utf-8.</p>
<p dir="auto">Job index must not be empty.</p>
<p dir="auto">Each part of job index when split by "/" must not contain any of the following characters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="[ ',', '\r', '\n', '\0', '*', '|', ':', '&lt;', '&gt;', '?', '&quot;',]"><pre>[ <span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\r</span><span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\0</span><span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>*<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>:<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>&lt;<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>&gt;<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>?<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>"<span class="pl-pds">'</span></span>,]</pre></div>
<p dir="auto">Each part must not end or start in a period or dot.</p>
<p dir="auto">The output directory will be created if it doesn't already exist.</p>
<p dir="auto">The job index string can be loaded from a line of a file.</p>
<p dir="auto">For example, to run a job with a index in the third line of file <code>jobnames.txt</code> use:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="medyansimrunner run input output jobnames.txt 3"><pre>medyansimrunner run input output jobnames.txt 3</pre></div>
<h2 dir="auto"><a id="user-content-input-kwargs" class="anchor" aria-hidden="true" href="#input-kwargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>input kwargs</h2>
<ul dir="auto">
<li>
<p dir="auto"><code>step-timeout</code>: the maximum amount of time in seconds each step is allowed to take before the job is killed, defaults to infinity.</p>
</li>
<li>
<p dir="auto"><code>max-steps</code>: the maximum number of steps a job is allowed to take before the job is killed.</p>
</li>
<li>
<p dir="auto"><code>startup-timeout</code>: the maximum amount of time in seconds to load everything and run the first loop, defaults to infinity.</p>
</li>
<li>
<p dir="auto"><code>max-snapshot-MB</code>: the maximum amount of hard drive space each snapshot is allowed to use in megabytes.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-input-directory" class="anchor" aria-hidden="true" href="#input-directory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>input</code> directory</h2>
<p dir="auto">The input directory must contain a <code>main.jl</code> file, a <code>Manifest.toml</code>, and a <code>Project.toml</code>.</p>
<p dir="auto">The input directory will be the working directory of the simulation and can include other data needed for the simulation, including an <code>Artifacts.toml</code></p>
<p dir="auto">The input directory should not be mutated during or after a simulation.</p>
<h3 dir="auto"><a id="user-content-mainjl-file" class="anchor" aria-hidden="true" href="#mainjl-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>main.jl</code> file</h3>
<p dir="auto">This file contains the julia functions used when running the simulation.
These functions can modify any input state variables, but in general should return the state.
These functions can also use the default random number generator, this will automatically saved and loaded.</p>
<h4 dir="auto"><a id="user-content-standard-input-parameters" class="anchor" aria-hidden="true" href="#standard-input-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Standard input parameters.</h4>
<ul dir="auto">
<li><code>step::Int</code>: starts out at 0 after setup and is auto incremented right after every <code>loop</code>.</li>
</ul>
<h4 dir="auto"><a id="user-content-setupjob_idxstring-kwargs---header_dict-state" class="anchor" aria-hidden="true" href="#setupjob_idxstring-kwargs---header_dict-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>setup(job_idx::String; kwargs...) -&gt; header_dict, state</code></h4>
<p dir="auto">Return the header dictionary to be written as the <code>header.json</code> file in output.
Also return the state that gets passed on to <code>loop</code> and the state that gets passed to <code>save_snapshot</code> and <code>load_snapshot</code>.</p>
<p dir="auto"><code>job_idx::String</code>: The job index. This is used for multi job simulations.</p>
<h4 dir="auto"><a id="user-content-save_snapshotstepint-state-kwargssmallzarrgroupszgroup" class="anchor" aria-hidden="true" href="#save_snapshotstepint-state-kwargssmallzarrgroupszgroup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>save_snapshot(step::Int, state; kwargs...)::SmallZarrGroups.ZGroup</code></h4>
<p dir="auto">Return the state of the system as a <code>SmallZarrGroups.ZGroup</code>
This function should not mutate <code>state</code></p>
<h4 dir="auto"><a id="user-content-load_snapshotstepint-groupsmallzarrgroupszgroup-state-kwargs---state" class="anchor" aria-hidden="true" href="#load_snapshotstepint-groupsmallzarrgroupszgroup-state-kwargs---state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>load_snapshot(step::Int, group::SmallZarrGroups.ZGroup, state; kwargs...) -&gt; state</code></h4>
<p dir="auto">Load the state saved by <code>save_snapshot</code>
This function can mutate <code>state</code>.
<code>state</code> may be the state returned from <code>setup</code> or the <code>state</code> returned by <code>loop</code>.
This function should return the same output if <code>state</code> is the state returned by <code>loop</code> or the
state returned by <code>setup</code>.</p>
<h4 dir="auto"><a id="user-content-donestepint-state-kwargs---donebool-expected_final_stepint" class="anchor" aria-hidden="true" href="#donestepint-state-kwargs---donebool-expected_final_stepint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>done(step::Int, state; kwargs...) -&gt; done::Bool, expected_final_step::Int</code></h4>
<p dir="auto">Return true if the simulation is done, or false if <code>loop</code> should be called again.</p>
<p dir="auto">Also return the expected value of step when done will first be true, used for displaying the simulation progress.</p>
<p dir="auto">This function should not mutate <code>state</code></p>
<h4 dir="auto"><a id="user-content-loopstepint-state-kwargs---state" class="anchor" aria-hidden="true" href="#loopstepint-state-kwargs---state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>loop(step::Int, state; kwargs...) -&gt; state</code></h4>
<p dir="auto">Return the state that gets passed to <code>save_snapshot</code></p>
<h3 dir="auto"><a id="user-content-manifesttoml-and-projecttoml" class="anchor" aria-hidden="true" href="#manifesttoml-and-projecttoml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Manifest.toml</code> and <code>Project.toml</code></h3>
<p dir="auto">These contain the julia environment used when running the simulation.
These must contain SmallZarrGroups, JSON3, and LoggingExtras, because these are required for saving data.</p>
<h3 dir="auto"><a id="user-content-main-loop-pseudo-code" class="anchor" aria-hidden="true" href="#main-loop-pseudo-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main loop pseudo code</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="activate and instantiate the environment
include(&quot;main.jl&quot;)
create output directory based on job_idx if it doesn't exist
Random.seed!(collect(reinterpret(UInt64, sha256(job_idx))))
job_header, state =  setup(job_idx)
save job_header
step = 0
SmallZarrGroups.save_dir(snapshot_zip_file, save_snapshot(step, state))
state = load_snapshot(step, SmallZarrGroups.load_dir(snapshot_zip_file), state)
while true
    state = loop(step, state)
    step = step + 1
    SmallZarrGroups.save_dir(snapshot_zip_file, save_snapshot(step, state))
    state = load_snapshot(step, SmallZarrGroups.load_dir(snapshot_zip_file), state)
    if done(step::Int, state)[1]
        break
    end
end"><pre class="notranslate"><code>activate and instantiate the environment
include("main.jl")
create output directory based on job_idx if it doesn't exist
Random.seed!(collect(reinterpret(UInt64, sha256(job_idx))))
job_header, state =  setup(job_idx)
save job_header
step = 0
SmallZarrGroups.save_dir(snapshot_zip_file, save_snapshot(step, state))
state = load_snapshot(step, SmallZarrGroups.load_dir(snapshot_zip_file), state)
while true
    state = loop(step, state)
    step = step + 1
    SmallZarrGroups.save_dir(snapshot_zip_file, save_snapshot(step, state))
    state = load_snapshot(step, SmallZarrGroups.load_dir(snapshot_zip_file), state)
    if done(step::Int, state)[1]
        break
    end
end
</code></pre></div>
<h2 dir="auto"><a id="user-content-output-directory" class="anchor" aria-hidden="true" href="#output-directory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>output</code> directory</h2>
<p dir="auto">The output directory has an <code>out$job_idx</code> subdirectory for job <code>job_idx</code>'s output.</p>
<p dir="auto">Each out subdirectory has the following files.</p>
<h3 dir="auto"><a id="user-content-infolog" class="anchor" aria-hidden="true" href="#infolog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>info.log</code></h3>
<p dir="auto">Any logs, warnings, and errors generated by the simulation are saved in this file.</p>
<h3 dir="auto"><a id="user-content-warnlog" class="anchor" aria-hidden="true" href="#warnlog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>warn.log</code></h3>
<p dir="auto">Any warnings, and errors generated by the simulation are saved in this file.</p>
<h3 dir="auto"><a id="user-content-errorlog" class="anchor" aria-hidden="true" href="#errorlog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>error.log</code></h3>
<p dir="auto">Any errors generated by the simulation are saved in this file.</p>
<h3 dir="auto"><a id="user-content-headerjson" class="anchor" aria-hidden="true" href="#headerjson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>header.json</code></h3>
<p dir="auto">A description of the system.</p>
<h3 dir="auto"><a id="user-content-listtxt" class="anchor" aria-hidden="true" href="#listtxt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>list.txt</code></h3>
<p dir="auto">Data describing the saved snapshots, and if the simulation is done or errored, or needs to be continued.</p>
<p dir="auto">The last element in each line is the sha256 of the line, not including the last comma space, and hash value.</p>
<p dir="auto">The first line is.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="version = 1, job_idx = 1, input_tree_hash = 5a936e..., 54bf8d69288..."><pre class="notranslate"><code>version = 1, job_idx = 1, input_tree_hash = 5a936e..., 54bf8d69288...
</code></pre></div>
<ul dir="auto">
<li><code>version</code>: version of the info.txt format.</li>
<li><code>job_idx</code>: index of the job.</li>
<li><code>input_tree_hash</code>: hash of input directory calculated with <a href="src/treehash.jl"><code>my_tree_hash</code></a></li>
</ul>
<p dir="auto">The second line is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="header_sha256 = 2cf934..., 312f788..."><pre class="notranslate"><code>header_sha256 = 2cf934..., 312f788...
</code></pre></div>
<ul dir="auto">
<li><code>header_sha256</code>: hash of header.json.
Or:</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error starting job, 8d69288..."><pre class="notranslate"><code>Error starting job, 8d69288...
</code></pre></div>
<p dir="auto">After these lines each of the next lines correspond to a saved snapshot.</p>
<p dir="auto">These have the format:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="yyyy-mm-dd HH:MM:SS, step number, nthreads, julia versioninfo, rng state, snapshot sha256, line sha256"><pre class="notranslate"><code>yyyy-mm-dd HH:MM:SS, step number, nthreads, julia versioninfo, rng state, snapshot sha256, line sha256
</code></pre></div>
<p dir="auto"><code>snapshot sha256</code> is the sha256 of the snapshot zip file.</p>
<p dir="auto">The final line explains how the simulation ended it can be one of the following:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error starting job, line sha256"><pre class="notranslate"><code>Error starting job, line sha256
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error running job, line sha256"><pre class="notranslate"><code>Error running job, line sha256
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error startup_timeout of $startup_timeout seconds reached, line sha256"><pre class="notranslate"><code>Error startup_timeout of $startup_timeout seconds reached, line sha256
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error step_timeout of $step_timeout seconds reached, line sha256"><pre class="notranslate"><code>Error step_timeout of $step_timeout seconds reached, line sha256
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error max_steps of $max_steps steps reached, line sha256"><pre class="notranslate"><code>Error max_steps of $max_steps steps reached, line sha256
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Error max_snapshot_MB of $max_snapshot_MB MB reached, line sha256"><pre class="notranslate"><code>Error max_snapshot_MB of $max_snapshot_MB MB reached, line sha256
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Done, line sha256"><pre class="notranslate"><code>Done, line sha256
</code></pre></div>
<p dir="auto">See the log files for more details and error messages.</p>
<h3 dir="auto"><a id="user-content-snapshots-subdirectory" class="anchor" aria-hidden="true" href="#snapshots-subdirectory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>snapshots</code> subdirectory</h3>
<p dir="auto">Contains <code>snapshot$i.zarr.zip</code> files where <code>i</code> is the step of the simulation.
The state returned by <code>setup</code> is stored in <code>snapshot0.zarr.zip</code></p>
</article></div>