<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-randommatricesjl" class="anchor" aria-hidden="true" href="#randommatricesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RandomMatrices.jl</h1>
<p dir="auto">Random matrix package for <a href="http://julialang.org" rel="nofollow">Julia</a>.</p>
<p dir="auto"><a href="http://pkg.julialang.org/?pkg=RandomMatrices" rel="nofollow"><img src="https://camo.githubusercontent.com/b260dae2439d82b30f2a38eba603674600afa0b29dd73647f0df557b44901cd3/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f52616e646f6d4d617472696365735f302e362e737667" alt="RandomMatrices" data-canonical-src="http://pkg.julialang.org/badges/RandomMatrices_0.6.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/JuliaMath/RandomMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/77b10a33d89acb70f304d01fd878acd9594972e24105ad11523f3a1646483684/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f52616e646f6d4d617472696365732e6a6c2e706e673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/RandomMatrices.jl.png?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaMath/RandomMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cdf1b36e13f186fd7d52c95a946c620e0e8fa0baf91fffba224352d424d3cc3e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614d6174682f52616e646f6d4d617472696365732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaMath/RandomMatrices.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/JuliaMath/RandomMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f74ea1ede3748f9eee80ef3129b49287087cfd602c05471fb57ad4eb7476b246/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69614d6174682f52616e646f6d4d617472696365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaMath/RandomMatrices.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/5087/jiahao/RandomMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/878381778ed85e1daae05e03c9c7fd728ef2ed5b437c666fcbae16c1823651ad/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f353038372f6a696168616f2f52616e646f6d4d617472696365732e6a6c2e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/5087/jiahao/RandomMatrices.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This extends the <a href="https://github.com/JuliaStats/Distributions.jl">Distributions</a>
package to provide methods for working with matrix-valued random variables,
a.k.a. random matrices. State of the art methods for computing random matrix
samples and their associated distributions are provided.</p>
<p dir="auto">The names of the various ensembles can vary widely across disciplines. Where possible,
synonyms are listed.</p>
<p dir="auto">Additional functionality is provided when these optional packages are installed:</p>
<ul dir="auto">
<li>Symbolic manipulation of Haar matrices with <a href="https://github.com/jiahao/GSL.jl">GSL.jl</a></li>
</ul>
<h1 dir="auto"><a id="user-content-gaussian-matrix-ensembles" class="anchor" aria-hidden="true" href="#gaussian-matrix-ensembles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gaussian matrix ensembles</h1>
<p dir="auto">Much of classical random matrix theory has focused on matrices with matrix elements comprised of
independently and identically distributed (iid) real, complex or quaternionic Gaussians.
(Traditionally, these are associated with a parameter <code>beta</code> tracking the number of independent
real random variables per matrix element, i.e. <code>beta=1,2,4</code> respectively. This is also referred
to as the Dyson 3-fold way.)
Methods are provided for calculating random variates (samples) and various properties of these
random matrices.</p>
<p dir="auto">The hierarchy of dense matrices provided are</p>
<ul dir="auto">
<li>Ginibre ensemble - all matrix elements are iid with no global symmetry</li>
<li>Hermite ensemble - one global symmetry
<ul dir="auto">
<li>Gaussian orthogonal ensemble (GOE, <code>beta=1</code>) - real and symmetric</li>
<li>Gaussian unitary ensemble (GUE, <code>beta=2</code>) - complex and Hermitian</li>
<li>Gaussian symplectic ensemble (GSE, <code>beta=4</code>) - quaternionic and self-dual</li>
</ul>
</li>
<li>Circular ensemble - uniformly distributed with <code>|det|=1</code>
<ul dir="auto">
<li>Circular orthogonal ensemble (COE, <code>beta=1</code>)</li>
<li>Circular unitary ensemble (CUE, <code>beta=2</code>)</li>
<li>Circular symplectic ensemble (CSE, <code>beta=4</code>)</li>
</ul>
</li>
<li>Laguerre matrices = white Wishart matrices</li>
<li>Jacobi matrices = MANOVA matrices</li>
</ul>
<p dir="auto">Unless otherwise specified, <code>beta=1,2,4</code> are supported. For the symplectic matrices <code>beta=4</code>,
the 2x2 outer block-diagonal complex representation <code>USp(2N)</code> is used.</p>
<h2 dir="auto"><a id="user-content-joint-probability-density-functions-jpdfs" class="anchor" aria-hidden="true" href="#joint-probability-density-functions-jpdfs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Joint probability density functions (jpdfs)</h2>
<p dir="auto">Given eigenvalues <code>lambda</code> and the <code>beta</code> parameter of the random matrix distribution:</p>
<ul dir="auto">
<li><code>VandermondeDeterminant(lambda, beta)</code> computes the Vandermonde determinant</li>
<li><code>HermiteJPDF(lambda, beta)</code> computes the jpdf for the Hermite ensemble</li>
<li><code>LaguerreJPDF(lambda, n, beta)</code> computes the jpdf for the Laguerre(n) ensemble</li>
<li><code>JacobiJPDF(lambda, n1, n2, beta)</code> computes the jpdf for the Jacobi(n1, n2) ensemble</li>
</ul>
<h2 dir="auto"><a id="user-content-matrix-samples" class="anchor" aria-hidden="true" href="#matrix-samples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Matrix samples</h2>
<p dir="auto">Constructs samples of random matrices corresponding to the classical Gaussian
Hermite, Laguerre(m) and Jacobi(m1, m2) ensembles.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>GaussianHermiteMatrix(n, beta)</code>, <code>GaussianLaguerreMatrix(n, m, beta)</code>,
<code>GaussianJacobiMatrix(n, m1, m2, beta)</code>
each construct a sample dense <code>n</code>x<code>n</code> matrix for the corresponding matrix
ensemble with <code>beta=1,2,4</code></p>
</li>
<li>
<p dir="auto"><code>GaussianHermiteTridiagonalMatrix(n, beta)</code>,
<code>GaussianLaguerreTridiagonalMatrix(n, m, beta)</code>,
<code>GaussianJacobiSparseMatrix(n, m1, m2, beta)</code>
each construct a sparse <code>n</code>x<code>n</code> matrix for the corresponding matrix ensemble
for arbitrary positive finite <code>beta</code>.
<code>GaussianHermiteTridiagonalMatrix(n, Inf)</code> is also allowed.
These sampled matrices have the same eigenvalues as above but are much faster
to diagonalize oweing to their sparsity. They also extend Dyson's threefold
way to arbitrary <code>beta</code>.</p>
</li>
<li>
<p dir="auto"><code>GaussianHermiteSamples(n, beta)</code>,
<code>GaussianLaguerreSamples(n, m, beta)</code>,
<code>GaussianJacobiSamples(n, m1, m2, beta)</code>
return a set of <code>n</code> eigenvalues from the sparse random matrix samples</p>
</li>
<li>
<p dir="auto"><code>HaarMatrix(n, beta)</code>
Generates a random matrix from the <code>beta</code>-circular ensemble.</p>
</li>
<li>
<p dir="auto"><code>HaarMatrix(n, beta, correction)</code> provides fine-grained control of what kind of correction
is applied to the raw QR decomposition. By default, <code>correction=1</code> (Edelman's correction) is
used. Other valid values are <code>0</code> (no correction) and <code>2</code> (Mezzadri's correction).</p>
</li>
<li>
<p dir="auto"><code>NeedsPiecewiseCorrection()</code> implements a simple test to see if a correction is necessary.</p>
</li>
</ul>
<p dir="auto">The parameters <code>m</code>, <code>m1</code>, <code>m2</code> refer to the number to independent "data" degrees of freedom.
For the dense samples these must be <code>Integer</code>s but can be <code>Real</code>s for the rest.</p>
<h1 dir="auto"><a id="user-content-formal-power-series" class="anchor" aria-hidden="true" href="#formal-power-series"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Formal power series</h1>
<p dir="auto">Allows for manipulations of formal power series (fps) and formal Laurent series
(fLs), which come in handy for the computation of free cumulants.</p>
<h2 dir="auto"><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types</h2>
<ul dir="auto">
<li><code>FormalPowerSeries</code>: power series with coefficients allowed only for
non-negative integer powers</li>
<li><code>FormalLaurentSeries</code>: power series with coefficients allowed for all
integer powers</li>
</ul>
<h2 dir="auto"><a id="user-content-formalpowerseries-methods" class="anchor" aria-hidden="true" href="#formalpowerseries-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FormalPowerSeries methods</h2>
<h3 dir="auto"><a id="user-content-elementary-operations" class="anchor" aria-hidden="true" href="#elementary-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Elementary operations</h3>
<ul dir="auto">
<li>basic arithmetic operations <code>==</code>, <code>+</code>, <code>-</code>, <code>^</code></li>
<li><code>*</code> computes the Cauchy product (discrete convolution)</li>
<li><code>.*</code> computes the Hadamard product (elementwise multiplication)</li>
<li><code>compose(P,Q)</code> computes the series composition P.Q</li>
<li><code>derivative</code> computes the series derivative</li>
<li><code>reciprocal</code> computes the series reciprocal</li>
</ul>
<h3 dir="auto"><a id="user-content-utility-methods" class="anchor" aria-hidden="true" href="#utility-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utility methods</h3>
<ul dir="auto">
<li><code>trim(P)</code> removes extraneous zeroes in the internal representation of <code>P</code></li>
<li><code>isalmostunit(P)</code> determines if <code>P</code> is an almost unit series</li>
<li><code>isconstant(P)</code> determines if <code>P</code> is a constant series</li>
<li><code>isnonunit(P)</code> determines if <code>P</code> is a non-unit series</li>
<li><code>isunit(P)</code> determines if <code>P</code> is a unit series</li>
<li><code>MatrixForm(P)</code> returns a matrix representation of <code>P</code> as an upper triangular
Toeplitz matrix</li>
<li><code>tovector</code> returns the series coefficients</li>
</ul>
<h1 dir="auto"><a id="user-content-densities" class="anchor" aria-hidden="true" href="#densities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Densities</h1>
<p dir="auto">Famous distributions in random matrix theory</p>
<ul dir="auto">
<li><code>Semicircle</code> provides the semicircle distribution</li>
<li><code>TracyWidom</code> computes the Tracy-Widom density distribution
by brute-force integration of the Painlevé II equation</li>
</ul>
<h1 dir="auto"><a id="user-content-utility-functions" class="anchor" aria-hidden="true" href="#utility-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Utility functions</h1>
<ul dir="auto">
<li><code>hist_eig</code> computes the histogram of eigenvalues of a matrix using the
method of Sturm sequences.
This is recommended for <code>SymTridiagonal</code> matrices as it is significantly
faster than <code>hist(eigvals())</code>
This is also implemented for dense matrices, but it is pretty slow and
not really practical.</li>
</ul>
<h1 dir="auto"><a id="user-content-stochastic-processes" class="anchor" aria-hidden="true" href="#stochastic-processes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stochastic processes</h1>
<p dir="auto">Julia iterators for stochastic operators.</p>
<p dir="auto">All subtypes of <code>StochasticProcess</code> contain at least one field, <code>dt</code>,
representing the time interval being discretized over.</p>
<p dir="auto">The available <code>StochasticProcess</code>es are</p>
<ul dir="auto">
<li><code>BrownianProcess(dt)</code>: Brownian random walk.
The state of the iterator is the cumulative displacement of the random walk.</li>
<li><code>WhiteNoiseProcess(dt)</code> : White noise.
The value of this iterator is <code>randn()*dt</code>.
The state associated with this iterator is <code>nothing</code>.</li>
<li><code>StochasticAiryProcess(dt, beta)</code>: stochastic Airy process with real positive <code>beta</code>.
The value of this iterator in the limit of an infinite number of iterations
is known to follow the <code>beta</code>-Tracy-Widom law.
The state associated with this iteratior is a <code>SymTridiagonal</code> matrix whose
largest eigenvalue is the value of this process.</li>
</ul>
<h1 dir="auto"><a id="user-content-invariant-ensembles" class="anchor" aria-hidden="true" href="#invariant-ensembles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Invariant ensembles</h1>
<p dir="auto"><code>InvariantEnsemble(str,n)</code> supports n x n unitary invariant ensemble
with distribution. This has been moved to separate package <a href="https://github.com/dlfivefifty/InvariantEnsembles.jl">InvariantEnsembles.jl</a></p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<ul dir="auto">
<li>
<p dir="auto">James Albrecht, Cy Chan, and Alan Edelman,
"Sturm Sequences and Random Eigenvalue Distributions",
<em>Foundations of Computational Mathematics</em>,
vol. 9 iss. 4 (2009), pp 461-483.
<a href="www-math.mit.edu/~edelman/homepage/papers/sturm.pdf">[pdf]</a>
<a href="http://dx.doi.org/10.1007/s10208-008-9037-x" rel="nofollow">[doi]</a></p>
</li>
<li>
<p dir="auto">Ioana Dumitriu and Alan Edelman,
"Matrix Models for Beta Ensembles",
<em>Journal of Mathematical Physics</em>,
vol. 43 no. 11 (2002), pp. 5830-5547
[[doi]](<a href="http://dx.doi.org/doi" rel="nofollow">http://dx.doi.org/doi</a>: 10.1063/1.1507823)
<a href="http://arxiv.org/abs/math-ph/0206043" rel="nofollow">arXiv:math-ph/0206043</a></p>
</li>
<li>
<p dir="auto">Alan Edelman, Per-Olof Persson and Brian D Sutton,
"The fourfold way",
<em>Journal of Mathematical Physics</em>,
submitted (2013).
<a href="http://www-math.mit.edu/~edelman/homepage/papers/ffw.pdf" rel="nofollow">[pdf]</a></p>
</li>
<li>
<p dir="auto">Alan Edelman and Brian D. Sutton,
"The beta-Jacobi matrix model, the CS decomposition,
and generalized singular value problems",
<em>Foundations of Computational Mathematics</em>,
vol. 8 iss. 2 (2008), pp 259-285.
<a href="http://www-math.mit.edu/~edelman/homepage/papers/betajacobi.pdf" rel="nofollow">[pdf]</a>
<a href="http://dx.doi.org/10.1007/s10208-006-0215-9" rel="nofollow">[doi]</a></p>
</li>
<li>
<p dir="auto">Peter Henrici,
<em>Applied and Computational Complex Analysis,
Volume I: Power Series---Integration---Conformal Mapping---Location of Zeros</em>,
Wiley-Interscience: New York, 1974
<a href="http://www.worldcat.org/oclc/746035" rel="nofollow">[worldcat]</a></p>
</li>
<li>
<p dir="auto">Frank Mezzadri,
"How to generate random matrices from the classical compact groups",
Notices of the AMS, vol. 54 (2007), pp592-604
<a href="http://arxiv.org/abs/math-ph/0609050" rel="nofollow">[arXiv]</a></p>
</li>
</ul>
</article></div>