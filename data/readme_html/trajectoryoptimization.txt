<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-trajectoryoptimization" class="anchor" aria-hidden="true" href="#trajectoryoptimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TrajectoryOptimization</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0a3b73667ff08d1d6d030c68f4bddc3a5ef98c19/68747470733a2f2f7472617669732d63692e6f72672f526f626f7469634578706c6f726174696f6e4c61622f5472616a6563746f72794f7074696d697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/0a3b73667ff08d1d6d030c68f4bddc3a5ef98c19/68747470733a2f2f7472617669732d63692e6f72672f526f626f7469634578706c6f726174696f6e4c61622f5472616a6563746f72794f7074696d697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/RoboticExplorationLab/TrajectoryOptimization.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/RoboticExplorationLab/TrajectoryOptimization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8dcb0c08437c3bb6bcd8075ab075a08f7b969148/68747470733a2f2f636f6465636f762e696f2f67682f526f626f7469634578706c6f726174696f6e4c61622f5472616a6563746f72794f7074696d697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/RoboticExplorationLab/TrajectoryOptimization.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://RoboticExplorationLab.github.io/TrajectoryOptimization.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>A library of solvers for trajectory optimization problems written in Julia. Currently, the following methods are implemented with a common interface:</p>
<p><a href="https://rexlab.stanford.edu/papers/altro-iros.pdf" rel="nofollow">ALTRO (Augmented Lagrangian TRajectory Optimizer)</a>: A fast solver for constrained trajectory optimization problems formulated as MDPs that features:</p>
<ul>
<li>General nonlinear cost functions, including minimum time problems</li>
<li>General nonlinear state and input constraints</li>
<li>Infeasible state initialization</li>
<li>Square-root methods for improved numerical conditioning</li>
<li>Active-set projection method for solution polishing</li>
</ul>
<p>Direct Collocation (DIRCOL)</p>
<ul>
<li>Interfaces to Nonlinear Programming solvers (e.g., <a href="https://github.com/coin-or/Ipopt">Ipopt</a>, <a href="https://ccom.ucsd.edu/~optimizers/solvers/snopt/" rel="nofollow">SNOPT</a>) via <a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a></li>
</ul>
<p>All methods utilize Julia's extensive autodifferentiation capabilities via <a href="http://www.juliadiff.org/ForwardDiff.jl/" rel="nofollow">ForwardDiff.jl</a> so that the user does not need to specify derivatives of dynamics, cost, or constraint functions.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install TrajectoryOptimization.jl, run the following from the Julia REPL:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TrajectoryOptimization<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-whats-new" class="anchor" aria-hidden="true" href="#whats-new"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What's New</h1>
<p><code>TrajectoryOptimization.jl</code> underwent significant changes between versions <code>v0.1</code> and <code>v0.2</code>. The new code is significantly faster (up to 100x faster). The core part of the ALTRO solver (everything except the projected newton phase) is completely allocation-free once the solver has been initialized. Most of the API has changed significantly. See the documentation for more information on the new API.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<p>To run a simple example of a constrained 1D block move (see script in <code>/examples/quickstart.jl</code>):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TrajectoryOptimization
<span class="pl-k">using</span> StaticArrays
<span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">const</span> TO <span class="pl-k">=</span> TrajectoryOptimization

<span class="pl-k">struct</span> DoubleIntegrator{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractModel</span>
    mass<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> TO<span class="pl-k">.</span><span class="pl-en">dynamics</span>(model<span class="pl-k">::</span><span class="pl-c1">DoubleIntegrator</span>, x, u)
    SA[x[<span class="pl-c1">2</span>], u[<span class="pl-c1">1</span>] <span class="pl-k">/</span> model<span class="pl-k">.</span>mass]
<span class="pl-k">end</span>

Base<span class="pl-k">.</span><span class="pl-en">size</span>(<span class="pl-k">::</span><span class="pl-c1">DoubleIntegrator</span>) <span class="pl-k">=</span> <span class="pl-c1">2</span>,<span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> Model and discretization</span>
model <span class="pl-k">=</span> <span class="pl-c1">DoubleIntegrator</span>(<span class="pl-c1">1.0</span>)
n,m <span class="pl-k">=</span> <span class="pl-c1">size</span>(model)
tf <span class="pl-k">=</span> <span class="pl-c1">3.0</span>  <span class="pl-c"><span class="pl-c">#</span> sec</span>
N <span class="pl-k">=</span> <span class="pl-c1">21</span>    <span class="pl-c"><span class="pl-c">#</span> number of knot points</span>

<span class="pl-c"><span class="pl-c">#</span> Objective</span>
x0 <span class="pl-k">=</span> SA[<span class="pl-c1">0</span>,<span class="pl-c1">0.</span>]  <span class="pl-c"><span class="pl-c">#</span> initial state</span>
xf <span class="pl-k">=</span> SA[<span class="pl-c1">1</span>,<span class="pl-c1">0.</span>]  <span class="pl-c"><span class="pl-c">#</span> final state</span>

Q <span class="pl-k">=</span> <span class="pl-c1">Diagonal</span>(<span class="pl-c1">@SVector</span> <span class="pl-c1">ones</span>(n))
R <span class="pl-k">=</span> <span class="pl-c1">Diagonal</span>(<span class="pl-c1">@SVector</span> <span class="pl-c1">ones</span>(m))
obj <span class="pl-k">=</span> <span class="pl-c1">LQRObjective</span>(Q, R, N<span class="pl-k">*</span>Q, xf, N)

<span class="pl-c"><span class="pl-c">#</span> Constraints</span>
cons <span class="pl-k">=</span> TO<span class="pl-k">.</span><span class="pl-c1">ConstraintSet</span>(n,m,N)
<span class="pl-c1">add_constraint!</span>(cons, <span class="pl-c1">GoalConstraint</span>(xf), N<span class="pl-k">:</span>N)
<span class="pl-c1">add_constraint!</span>(cons, <span class="pl-c1">BoundConstraint</span>(n,m, u_min<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">10</span>, u_max<span class="pl-k">=</span><span class="pl-c1">10</span>), <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Create and solve problem</span>
prob <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(model, obj, xf, tf, x0<span class="pl-k">=</span>x0, constraints<span class="pl-k">=</span>cons)
solver <span class="pl-k">=</span> <span class="pl-c1">ALTROSolver</span>(prob)
<span class="pl-c1">cost</span>(solver)           <span class="pl-c"><span class="pl-c">#</span> initial cost</span>
<span class="pl-c1">solve!</span>(solver)         <span class="pl-c"><span class="pl-c">#</span> solve with ALTRO</span>
<span class="pl-c1">max_violation</span>(solver)  <span class="pl-c"><span class="pl-c">#</span> max constraint violation</span>
<span class="pl-c1">cost</span>(solver)           <span class="pl-c"><span class="pl-c">#</span> final cost</span>
<span class="pl-c1">iterations</span>(solver)     <span class="pl-c"><span class="pl-c">#</span> total number of iterations</span>

<span class="pl-c"><span class="pl-c">#</span> Get the state and control trajectories</span>
X <span class="pl-k">=</span> <span class="pl-c1">states</span>(solver)
U <span class="pl-k">=</span> <span class="pl-c1">controls</span>(solver)</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Notebooks with more detailed examples can be found <a href="https://github.com/RoboticExplorationLab/TrajectoryOptimization.jl/tree/master/examples">here</a>, including all the examples from our <a href="https://rexlab.stanford.edu/papers/altro-iros.pdf" rel="nofollow">IROS 2019 paper</a>.</p>
</article></div>