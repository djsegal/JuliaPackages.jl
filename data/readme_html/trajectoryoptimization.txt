<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-trajectoryoptimization" class="anchor" aria-hidden="true" href="#trajectoryoptimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TrajectoryOptimization</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0a3b73667ff08d1d6d030c68f4bddc3a5ef98c19/68747470733a2f2f7472617669732d63692e6f72672f526f626f7469634578706c6f726174696f6e4c61622f5472616a6563746f72794f7074696d697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/0a3b73667ff08d1d6d030c68f4bddc3a5ef98c19/68747470733a2f2f7472617669732d63692e6f72672f526f626f7469634578706c6f726174696f6e4c61622f5472616a6563746f72794f7074696d697a6174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/RoboticExplorationLab/TrajectoryOptimization.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/RoboticExplorationLab/TrajectoryOptimization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8dcb0c08437c3bb6bcd8075ab075a08f7b969148/68747470733a2f2f636f6465636f762e696f2f67682f526f626f7469634578706c6f726174696f6e4c61622f5472616a6563746f72794f7074696d697a6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/RoboticExplorationLab/TrajectoryOptimization.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://RoboticExplorationLab.github.io/TrajectoryOptimization.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>A library of solvers for trajectory optimization problems written in Julia. Currently, the following methods are implemented with a common interface:</p>
<p><a href="https://rexlab.stanford.edu/papers/altro-iros.pdf" rel="nofollow">ALTRO (Augmented Lagrangian TRajectory Optimizer)</a>: A fast solver for constrained trajectory optimization problems formulated as MDPs that features:</p>
<ul>
<li>General nonlinear cost functions, including minimum time problems</li>
<li>General nonlinear state and input constraints</li>
<li>Infeasible state initialization</li>
<li>Square-root methods for improved numerical conditioning</li>
<li>Active-set projection method for solution polishing</li>
</ul>
<p>Direct Collocation (DIRCOL)</p>
<ul>
<li>Interfaces to Nonlinear Programming solvers (e.g., <a href="https://github.com/coin-or/Ipopt">Ipopt</a>, <a href="https://ccom.ucsd.edu/~optimizers/solvers/snopt/" rel="nofollow">SNOPT</a>) via <a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a></li>
</ul>
<p>All methods utilize Julia's extensive autodifferentiation capabilities via <a href="http://www.juliadiff.org/ForwardDiff.jl/" rel="nofollow">ForwardDiff.jl</a> so that the user does not need to specify derivatives of dynamics, cost, or constraint functions. Dynamics can be computed directly from a URDF file via <a href="https://github.com/JuliaRobotics/RigidBodyDynamics.jl">RigidBodyDynamics.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install TrajectoryOptimization.jl, run the following from the Julia REPL:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TrajectoryOptimization<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quick Start</h2>
<p>To run a simple example of a constrained 1D block move:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> TrajectoryOptimization, LinearAlgebra

<span class="pl-k">function</span> <span class="pl-en">dynamics!</span>(ẋ,x,u) <span class="pl-c"><span class="pl-c">#</span> inplace dynamics</span>
    ẋ[<span class="pl-c1">1</span>] <span class="pl-k">=</span> x[<span class="pl-c1">2</span>]
    ẋ[<span class="pl-c1">2</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]
<span class="pl-k">end</span>

n <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> number of states</span>
m <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> number of controls</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(dynamics!,n,m) <span class="pl-c"><span class="pl-c">#</span> create model</span>
model_d <span class="pl-k">=</span> <span class="pl-c1">rk3</span>(model) <span class="pl-c"><span class="pl-c">#</span> create discrete model w/ rk3 integration</span>

x0 <span class="pl-k">=</span> [<span class="pl-c1">0.</span>; <span class="pl-c1">0.</span>] <span class="pl-c"><span class="pl-c">#</span> initial state</span>
xf <span class="pl-k">=</span> [<span class="pl-c1">1.</span>; <span class="pl-c1">0.</span>] <span class="pl-c"><span class="pl-c">#</span> goal state</span>

N <span class="pl-k">=</span> <span class="pl-c1">21</span> <span class="pl-c"><span class="pl-c">#</span> number of knot points</span>
dt <span class="pl-k">=</span> <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> time step</span>

U0 <span class="pl-k">=</span> [<span class="pl-c1">0.01</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(m) <span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>]; <span class="pl-c"><span class="pl-c">#</span> initial control trajectory</span>

Q <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-k">*</span><span class="pl-c1">Diagonal</span>(I,n)
Qf <span class="pl-k">=</span> <span class="pl-c1">1.0</span><span class="pl-k">*</span><span class="pl-c1">Diagonal</span>(I,n)
R <span class="pl-k">=</span> <span class="pl-c1">1.0e-1</span><span class="pl-k">*</span><span class="pl-c1">Diagonal</span>(I,m)
obj <span class="pl-k">=</span> <span class="pl-c1">LQRObjective</span>(Q,R,Qf,xf,N) <span class="pl-c"><span class="pl-c">#</span> objective</span>

bnd <span class="pl-k">=</span> <span class="pl-c1">BoundConstraint</span>(n,m,u_max<span class="pl-k">=</span><span class="pl-c1">1.5</span>, u_min<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> control limits</span>
goal <span class="pl-k">=</span> <span class="pl-c1">goal_constraint</span>(xf) <span class="pl-c"><span class="pl-c">#</span> terminal constraint</span>

constraints <span class="pl-k">=</span> <span class="pl-c1">Constraints</span>(N) <span class="pl-c"><span class="pl-c">#</span> define constraints at each time step</span>
<span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>
    constraints[k] <span class="pl-k">+=</span> bnd
<span class="pl-k">end</span>
constraints[N] <span class="pl-k">+=</span> goal

prob <span class="pl-k">=</span> <span class="pl-c1">Problem</span>(model_d, obj, constraints<span class="pl-k">=</span>constraints, x0<span class="pl-k">=</span>x0, xf<span class="pl-k">=</span>xf, N<span class="pl-k">=</span>N, dt<span class="pl-k">=</span>dt) <span class="pl-c"><span class="pl-c">#</span> construct problem</span>
<span class="pl-c1">initial_controls!</span>(prob,U0) <span class="pl-c"><span class="pl-c">#</span> initialize problem with controls</span>

solver <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(prob, <span class="pl-c1">ALTROSolverOptions</span><span class="pl-c1">{Float64}</span>())</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>Notebooks with more detailed examples can be found <a href="https://github.com/RoboticExplorationLab/TrajectoryOptimization.jl/tree/master/examples">here</a>, including all the examples from our <a href="https://github.com/RoboticExplorationLab/TrajectoryOptimization.jl/tree/master/examples/IROS_2019">IROS 2019 paper</a>.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>Detailed documentation for getting started with the package can be found <a href="https://roboticexplorationlab.github.io/TrajectoryOptimization.jl/dev/" rel="nofollow">here</a>.</p>
</article></div>