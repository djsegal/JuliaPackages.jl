<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-utimejl" class="anchor" aria-hidden="true" href="#utimejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UTime.jl</h1>
<p>Universal Time using local system timezone</p>
<p>#####<em>Experimental:  passes initial tests</em></p>
<p>This module lets you have whatever it is that your local system believes is Universal Time relative to the local time zone, present, past and future. And it lets you use the things that come with Base.Dates (for the most part .. not exaustively).</p>
<p>If you find errors, omissions, better ways, please raise an issue here.</p>
<p>####Asks:</p>
<ol>
<li>
<p><strong>Do Not</strong> store UT typed values in a jld file
-- store their strings, they will be rereadable.</p>
</li>
<li>
<p>This is transitional -- working in multiple timezones is different.</p>
</li>
<li>
<p>The module requires the local system provides a Standard C compliant maketm_r().</p>
</li>
<li>
<p>Try UTime.ok() (not exported), if it is false is module should not be used.</p>
</li>
<li>
<p>This is transitional -- working in multiple timezones is different.</p>
</li>
</ol>
<p>####Offers:</p>
<table>
<thead>
<tr>
<th>function</th>
<th>action</th>
</tr>
</thead>
<tbody>
<tr>
<td>ut()</td>
<td>get the current date&amp;time as it is in UT</td>
</tr>
<tr>
<td>ut(dtm::DateTime)</td>
<td>convert the local date&amp;time dtm to UT</td>
</tr>
<tr>
<td>localtime()</td>
<td>get the current date&amp;time as it is in local time</td>
</tr>
<tr>
<td>localtime(utm::UT)</td>
<td>convert the UT date&amp;time to local time</td>
</tr>
<tr>
<td>UT(...)</td>
<td>like DateTime(...)</td>
</tr>
<tr>
<td>year(utm::UT)..</td>
<td>like year,month...</td>
</tr>
<tr>
<td>Year(utm::UT)..</td>
<td>like Year,Month...</td>
</tr>
<tr>
<td>format(utm,DateFormat)</td>
<td>like format(dt::DateTime, DateFormat)</td>
</tr>
<tr>
<td>much other stuff</td>
<td>used as with DateTime</td>
</tr>
</tbody>
</table>
<p><code>importall UTime</code></p>
<div class="highlight highlight-source-julia"><pre>exports
gmt, ut, localtime, UT <span class="pl-c"><span class="pl-c">#</span> gmt is an alias for ut</span>

exports (imported from Base<span class="pl-k">.</span>Dates)
Year, Month, Week, Day, Hour, Minute, Second, Millisecond,
year, month, week, day, hour, minute, second, millisecond, 
dayofyear, dayofmonth, dayofweek, yearmonthday, yearmonth, monthday, 
dayofweekofmonth, daysofweekinmonth, quarterofyear, dayofquarter,
firstdayofyear, lastdayofyear, firstdayofquarter, lastdayofquarter,
firstdayofmonth, lastdayofmonth, firstdayofweek, lastdayofweek, 
daysinmonth, daysinyear, monthname, monthabbr, dayname, dayabbr,
isleapyear, format, ISOUniversalTimeFormat, 
adjust, tonext, toprev, tofirst, tolast, recur,
(<span class="pl-k">+</span>), (<span class="pl-k">-</span>), (<span class="pl-k">.+</span>), (<span class="pl-k">.-</span>)</pre></div>
</article></div>