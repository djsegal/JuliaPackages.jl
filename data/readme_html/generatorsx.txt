<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-generatorsx-iterate-and-foldl-for-humans" class="anchor" aria-hidden="true" href="#generatorsx-iterate-and-foldl-for-humans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeneratorsX: <code>iterate</code> and <code>foldl</code> for humans™</h1>
<p><a href="https://github.com/JuliaFolds/GeneratorsX.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/JuliaFolds/GeneratorsX.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>GeneratorsX.jl is a package for defining <code>iterate</code> and <code>foldl</code> with a
single easy-to-read source code.  An example for creating an ad-hoc
iterable:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeneratorsX

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@generator</span> <span class="pl-k">function</span> <span class="pl-en">generate123</span>()
           <span class="pl-c1">@yield</span> <span class="pl-c1">1</span>
           <span class="pl-c1">@yield</span> <span class="pl-c1">2</span>
           <span class="pl-c1">@yield</span> <span class="pl-c1">3</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">generate123</span>())
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span></pre></div>
<p>It is also possible to use it to define the iteration protocols for
existing type:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Count
           start<span class="pl-k">::</span><span class="pl-c1">Int</span>
           stop<span class="pl-k">::</span><span class="pl-c1">Int</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">length</span>(itr<span class="pl-k">::</span><span class="pl-c1">Count</span>) <span class="pl-k">=</span> <span class="pl-c1">max</span>(<span class="pl-c1">0</span>, itr<span class="pl-k">.</span>stop <span class="pl-k">-</span> itr<span class="pl-k">.</span>start <span class="pl-k">+</span> <span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">eltype</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:Count}</span>) <span class="pl-k">=</span> Int;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@generator</span> <span class="pl-k">function</span> (itr<span class="pl-k">::</span><span class="pl-c1">Count</span>)
           i <span class="pl-k">=</span> itr<span class="pl-k">.</span>start
           i <span class="pl-k">&gt;</span> itr<span class="pl-k">.</span>stop <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span>
           <span class="pl-k">while</span> <span class="pl-c1">true</span>
               <span class="pl-c1">@yield</span> i
               i <span class="pl-k">==</span> itr<span class="pl-k">.</span>stop <span class="pl-k">&amp;&amp;</span> <span class="pl-k">break</span>
               i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">Count</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span></pre></div>
<p>GeneratorsX.jl uses
<a href="https://github.com/MikeInnes/IRTools.jl">IRTools.jl</a> to define
Julia's <code>iterate</code>-based iteration protocol.  It also derives
<code>foldl</code>-based iteration protocol for
<a href="https://github.com/tkf/Transducers.jl">Transducers.jl</a> using a simple
AST transformation.</p>
<h2><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why?</h2>
<p>Defining <code>iterate</code> for a collection is hard because the programmer has
to come up with an adequate state machine and code it carefully.  Both
of these processes are hard.  Furthermore, the <code>julia</code> and LLVM
compilers do not produce optimal machine code from the loop involving
<code>iterate</code>.  More importantly, it is hard for the programmer to
directly control what would happen in the end result by using
<code>iterate</code> since there are many complex transformations from their
mental of the collection and the final machine code.</p>
<p>GeneratorsX.jl solves the first problem by providing a syntax sugar
for defining <code>iterate</code>.  Since this can use arbitrary Julia control
flow constructs, the programmer can write down what they mean by using
the natural Julia syntax.</p>
<p>The second problem (sub-optimal performance) is solved by generating
<code>foldl</code> from the same syntax sugar that generates <code>iterate</code>.  Since
the syntax sugar used by GeneratorsX.jl directly translates to the
<code>foldl</code> definition, it can be optimized much easily by the compiler
and it is much easier for the programmer to control the performance
characteristics.  This is vital for defining fast iteration over
blocked/nested data structures as well as collections with
heterogeneously typed elements.</p>
<p>However, this <code>foldl</code>-based solution applied alone without generating
<code>iterate</code> would have created the third problem: <code>zip</code> can be
implemented by <code>iterate</code> but not with <code>foldl</code>.  More in general, the
new collection wouldn't work with <code>iterate</code>-based existing code.  This
is why GeneratorsX.jl defines <code>iterate</code> and <code>foldl</code> from the same
expression.</p>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h2>
<p>GeneratorsX.jl is still a proof-of-concept.  As of writing, it works
only with Julia 1.5 beta due to
<a href="https://github.com/MikeInnes/IRTools.jl/issues/55">IRTools.jl#55</a>.
Furthermore, the performance is likely to be awful when consuming the
collection without <code>foldl</code>-based frameworks such as
<a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a> and
<a href="https://github.com/JuliaFolds/FLoops.jl">FLoops.jl</a>.</p>
<h2><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>See also</h2>
<ul>
<li><a href="https://github.com/BenLauwens/ResumableFunctions.jl">ResumableFunctions.jl</a>
can be used to create more flexible full-blown coroutine.  However,
since its implementation is based on mutation, it's not the best
choice for performance, especially for type-changing state.  The
mutation-based mechanism also does not play nicely with parallelism.</li>
<li><a href="https://discourse.julialang.org/t/pygen-python-style-generators/3451" rel="nofollow">PyGen</a>
is a Python style generator that has a similar syntax.  However, its
implementation is based on <code>Channel</code> and thus not adequate for
high-performance iteration.</li>
<li><a href="http://mikeinnes.github.io/2020/06/12/transducers.html" rel="nofollow">Transducers &amp; Effects – Mike Innes</a>:
Exploration of a similar idea by the author of IRTools.jl.</li>
</ul>
</article></div>