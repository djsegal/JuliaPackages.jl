<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/JuliaIO/HDF5.jl/master/docs/src/assets/logo.svg"><img alt="HDF5.jl" src="https://raw.githubusercontent.com/JuliaIO/HDF5.jl/master/docs/src/assets/logo.svg" width="300" height="74" style="max-width:100%;"></a></h1>
<p><em>HDF5 interface for the Julia language</em></p>
<p><a href="https://JuliaIO.github.io/HDF5.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/59e36b5a5201fb0f937bb6b8c0844df8841e78199432584751f8c30f0081fea6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63756d656e746174696f6e2d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/documentation-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaIO/HDF5.jl/actions"><img src="https://github.com/JuliaIO/HDF5.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/HDF5.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5bd69a299dbbf694dde229572b2d04fdca8de39aa944fd435216c0e025a13cc3/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f484446352e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaIO/HDF5.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>

<p><a href="https://www.hdfgroup.org/solutions/hdf5/" rel="nofollow">HDF5</a> is a file format and library for storing and
accessing data, commonly used for scientific data. HDF5 files can be created and read by numerous
<a href="https://en.wikipedia.org/wiki/Hierarchical_Data_Format#Interfaces" rel="nofollow">programming languages</a>. This
package provides an interface to the HDF5 library for the Julia language.</p>
<h3><a id="user-content-changelog" class="anchor" aria-hidden="true" href="#changelog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changelog</h3>
<p>Please see <a href="HISTORY.md">HISTORY.md</a>. Most changes have deprecation warnings and thus may not be listed in the changelog.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt;]
pkg&gt; add HDF5
"><pre>julia<span class="pl-k">&gt;</span>]
pkg<span class="pl-k">&gt;</span> add HDF5</pre></div>
<p>For custom build instructions please refer to the <a href="https://JuliaIO.github.io/HDF5.jl/stable" rel="nofollow">documentation</a>.</p>
<h3><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HDF5
"><pre><span class="pl-k">using</span> HDF5</pre></div>
<p>To read and write a variable to a file, one approach is to use the filename:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = collect(reshape(1:120, 15, 8))
h5write(&quot;/tmp/test2.h5&quot;, &quot;mygroup2/A&quot;, A)
data = h5read(&quot;/tmp/test2.h5&quot;, &quot;mygroup2/A&quot;, (2:3:15, 3:5))
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">120</span>, <span class="pl-c1">15</span>, <span class="pl-c1">8</span>))
<span class="pl-c1">h5write</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test2.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mygroup2/A<span class="pl-pds">"</span></span>, A)
data <span class="pl-k">=</span> <span class="pl-c1">h5read</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test2.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mygroup2/A<span class="pl-pds">"</span></span>, (<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">15</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>))</pre></div>
<p>where the last line reads back just <code>A[2:3:15, 3:5]</code> from the dataset.</p>
<p>More fine-grained control can be obtained using functional syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="h5open(&quot;mydata.h5&quot;, &quot;w&quot;) do file
    write(file, &quot;A&quot;, A)  # alternatively, say &quot;@write file A&quot;
end

c = h5open(&quot;mydata.h5&quot;, &quot;r&quot;) do file
    read(file, &quot;A&quot;)
end
"><pre><span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">write</span>(file, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, A)  <span class="pl-c"><span class="pl-c">#</span> alternatively, say "@write file A"</span>
<span class="pl-k">end</span>

c <span class="pl-k">=</span> <span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">read</span>(file, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>This allows you to add variables as they are generated to an open HDF5 file.
You don't have to use the <code>do</code> syntax (<code>file = h5open("mydata.h5", "w")</code> works
just fine), but an advantage is that it will automatically close the file (<code>close(file)</code>)
for you, even in cases of error.</p>
<p>Julia's high-level wrapper, providing a dictionary-like interface, may
also be of interest:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using HDF5

h5open(&quot;test.h5&quot;, &quot;w&quot;) do file
    g = create_group(file, &quot;mygroup&quot;) # create a group
    g[&quot;dset1&quot;] = 3.2                  # create a scalar dataset inside the group
    attributes(g)[&quot;Description&quot;] = &quot;This group contains only a single dataset&quot; # an attribute
end
"><pre><span class="pl-k">using</span> HDF5

<span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>test.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    g <span class="pl-k">=</span> <span class="pl-c1">create_group</span>(file, <span class="pl-s"><span class="pl-pds">"</span>mygroup<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> create a group</span>
    g[<span class="pl-s"><span class="pl-pds">"</span>dset1<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">3.2</span>                  <span class="pl-c"><span class="pl-c">#</span> create a scalar dataset inside the group</span>
    <span class="pl-c1">attributes</span>(g)[<span class="pl-s"><span class="pl-pds">"</span>Description<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>This group contains only a single dataset<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> an attribute</span>
<span class="pl-k">end</span></pre></div>
<p>Convenience functions for attributes attached to datasets are also provided:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = Vector{Int}(1:10)
h5write(&quot;bar.h5&quot;, &quot;foo&quot;, A)
h5writeattr(&quot;bar.h5&quot;, &quot;foo&quot;, Dict(&quot;c&quot;=&gt;&quot;value for metadata parameter c&quot;,&quot;d&quot;=&gt;&quot;metadata d&quot;))
h5readattr(&quot;bar.h5&quot;, &quot;foo&quot;)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">h5write</span>(<span class="pl-s"><span class="pl-pds">"</span>bar.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, A)
<span class="pl-c1">h5writeattr</span>(<span class="pl-s"><span class="pl-pds">"</span>bar.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>value for metadata parameter c<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>metadata d<span class="pl-pds">"</span></span>))
<span class="pl-c1">h5readattr</span>(<span class="pl-s"><span class="pl-pds">"</span>bar.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>)</pre></div>
</article></div>