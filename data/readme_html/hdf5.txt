<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-hdf5-interface-for-the-julia-language" class="anchor" aria-hidden="true" href="#hdf5-interface-for-the-julia-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HDF5 interface for the Julia language</h1>
<p><a href="https://travis-ci.org/JuliaIO/HDF5.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0ff9c2fa9d7d13de9691954483134ff98376936d/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f484446352e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/HDF5.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/musm/hdf5-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/70d21ab3b3c18155f64b952349ea1bcbd6064873/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f3469616771716971716f333673696b612f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/4iagqqiqqo36sika/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaIO/HDF5.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/63267f37f07cf590b91565cdb3e7c930833c2584/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961494f2f484446352e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaIO/HDF5.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/HDF5.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99ff55bc0e5db949b63c4c50aaf34ce4b07342da/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f484446352e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaIO/HDF5.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="http://www.hdfgroup.org/HDF5/" title="HDF5" rel="nofollow">HDF5</a> is a file format and library for storing and accessing
data, commonly used for scientific data. HDF5 files can be created and
read by numerous <a href="https://en.wikipedia.org/wiki/Hierarchical_Data_Format#Interfaces" rel="nofollow">programming
languages</a>.  This package
provides an interface to the HDF5 library for the
<a href="http://julialang.org" title="Julia" rel="nofollow">Julia</a> language.</p>
<h2><a id="user-content-julia-data-jld-and-matlab-mat-files" class="anchor" aria-hidden="true" href="#julia-data-jld-and-matlab-mat-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Julia data (*.jld) and Matlab (*.mat) files</h2>
<p>The core HDF5 functionality is the foundation for two special-purpose
packages, used to read and write HDF5 files with specific formatting
conventions. The first is the
<a href="https://github.com/JuliaIO/JLD.jl">JLD</a> ("Julia data") package,
which implements a generic mechanism for reading and writing Julia
variables. While one can use "plain" HDF5 for this purpose, the
advantage of the JLD package is that it preserves the exact type
information of each variable.</p>
<p>The other functionality provided through HDF5 is the ability to read
and write Matlab *.mat files saved as "-v7.3". The Matlab-specific
portions have been moved to Simon Kornblith's
<a href="https://github.com/simonster/MAT.jl">MAT.jl</a> package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span>]
pkg<span class="pl-k">&gt;</span> add HDF5</pre></div>
<p>Starting from Julia 1.3, the HDF5 binaries are by default downloaded using the
<a href="https://github.com/JuliaBinaryWrappers/HDF5_jll.jl">HDF5_jll</a> package.
To use system-provided HDF5 binaries instead, set the environment variable
<code>JULIA_HDF5_LIBRARY_PATH</code> to the HDF5 library path and then run
<code>Pkg.build("HDF5")</code>.
This is in particular needed for parallel HDF5 support, which is not provided
by the <code>HDF5_jll</code> binaries.</p>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickstart</h2>
<p>Begin your code with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> HDF5</pre></div>
<p>To read and write a variable to a file, one approach is to use the filename:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">120</span>, <span class="pl-c1">15</span>, <span class="pl-c1">8</span>))
<span class="pl-c1">h5write</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test2.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mygroup2/A<span class="pl-pds">"</span></span>, A)
data <span class="pl-k">=</span> <span class="pl-c1">h5read</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/test2.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mygroup2/A<span class="pl-pds">"</span></span>, (<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">15</span>, <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>))</pre></div>
<p>where the last line reads back just <code>A[2:3:15, 3:5]</code> from the dataset.</p>
<p>More fine-grained control can be obtained using functional syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">write</span>(file, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, A)  <span class="pl-c"><span class="pl-c">#</span> alternatively, say "@write file A"</span>
<span class="pl-k">end</span>

c <span class="pl-k">=</span> <span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">read</span>(file, <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>This allows you to add variables as they are generated to an open HDF5 file.
You don't have to use the <code>do</code> syntax (<code>file = h5open("mydata.h5", "w")</code> works
just fine), but an advantage is that it will automatically close the file (<code>close(file)</code>)
for you, even in cases of error.</p>
<p>Julia's high-level wrapper, providing a dictionary-like interface, may
also be of interest:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> HDF5

<span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>test.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    g <span class="pl-k">=</span> <span class="pl-c1">g_create</span>(file, <span class="pl-s"><span class="pl-pds">"</span>mygroup<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> create a group</span>
    g[<span class="pl-s"><span class="pl-pds">"</span>dset1<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">3.2</span>              <span class="pl-c"><span class="pl-c">#</span> create a scalar dataset inside the group</span>
    <span class="pl-c1">attrs</span>(g)[<span class="pl-s"><span class="pl-pds">"</span>Description<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>This group contains only a single dataset<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> an attribute</span>
<span class="pl-k">end</span></pre></div>
<p>Convenience functions for attributes attached to datasets are also provided:</p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">h5write</span>(<span class="pl-s"><span class="pl-pds">"</span>bar.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, A)
<span class="pl-c1">h5writeattr</span>(<span class="pl-s"><span class="pl-pds">"</span>bar.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>value for metadata parameter c<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>metadata d<span class="pl-pds">"</span></span>))
<span class="pl-c1">h5readattr</span>(<span class="pl-s"><span class="pl-pds">"</span>bar.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-specific-file-formats" class="anchor" aria-hidden="true" href="#specific-file-formats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Specific file formats</h2>
<p>There is no conflict in having multiple modules (HDF5, <a href="https://github.com/JuliaIO/JLD.jl">JLD</a>, and
<a href="https://github.com/simonster/MAT.jl">MAT</a>) available simultaneously;
the formatting of the file is determined by the open command.</p>
<h2><a id="user-content-complete-documentation" class="anchor" aria-hidden="true" href="#complete-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Complete documentation</h2>
<p>The HDF5 API is much more extensive than suggested by this brief
introduction.  More complete documentation is found in the
<a href="doc/"><code>doc</code></a> directory.</p>
<p>The <a href="test/"><code>test</code></a> directory contains a number of test scripts that also
demonstrate usage.</p>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credits</h2>
<ul>
<li>
<p>Konrad Hinsen initiated Julia's support for HDF5</p>
</li>
<li>
<p>Tim Holy and Simon Kornblith (co-maintainers and primary authors)</p>
</li>
<li>
<p>Tom Short contributed code and ideas to the dictionary-like
interface</p>
</li>
<li>
<p>Blake Johnson made several improvements, such as support for
iterating over attributes</p>
</li>
<li>
<p>Isaiah Norton and Elliot Saba improved installation on Windows and OSX</p>
</li>
<li>
<p>Steve Johnson contributed the <code>do</code> syntax and Blosc compression</p>
</li>
<li>
<p>Mike Nolta and Jameson Nash contributed code or suggestions for
improving the handling of HDF5's constants</p>
</li>
<li>
<p>Thanks also to the users who have reported bugs and tested fixes</p>
</li>
</ul>
</article></div>