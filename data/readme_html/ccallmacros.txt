<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-macros-related-to-ccall" class="anchor" aria-hidden="true" href="#macros-related-to-ccall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Macros related to <code>ccall</code></h1>
<h2><a id="user-content-ccall-macro" class="anchor" aria-hidden="true" href="#ccall-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@ccall macro</h2>
<p><code>@ccall</code> allows you to use more natural Julia syntax for calling C,
leaving the semantics of <code>ccall</code> unaltered.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> fmt <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Hello Julia %.1f!<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> version <span class="pl-k">=</span> <span class="pl-c1">1.1</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@ccall</span> <span class="pl-c1">printf</span>(fmt<span class="pl-k">::</span><span class="pl-c1">Cstring</span>, version<span class="pl-k">::</span><span class="pl-c1">Cdouble</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>
Hello Julia <span class="pl-c1">1.1</span>!
<span class="pl-c1">17</span></pre></div>
<p>What's it do?</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">@macroexpand</span> <span class="pl-c1">@ccall</span> <span class="pl-c1">printf</span>(fmt<span class="pl-k">::</span><span class="pl-c1">Cstring</span>, version<span class="pl-k">::</span><span class="pl-c1">Cdouble</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>)
<span class="pl-c1">ccall</span>(<span class="pl-c1">:printf</span>, Cint, (Cstring, Cdouble), fmt, version)</pre></div>
<p>Nothing revolutionary, just some syntactic sugar to improve
readability.</p>
<p>To work with libraries besides <code>libc</code>, you should declare the name of the
library elsewhere in the source as a constant:</p>
<div class="highlight highlight-source-julia"><pre>julia <span class="pl-k">&gt;</span> <span class="pl-k">const</span> glib <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>libglib-2.0<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> uri <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>http://example.com/have a nice day<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unsafe_string</span>(<span class="pl-c1">@ccall</span> glib<span class="pl-k">.</span><span class="pl-c1">g_uri_escape_string</span>(
           uri<span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-s"><span class="pl-pds">"</span>:/<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-c1">true</span><span class="pl-k">::</span><span class="pl-c1">Cint</span>
       )<span class="pl-k">::</span><span class="pl-c1">Cstring</span>)

<span class="pl-s"><span class="pl-pds">"</span>http://example.com/have%20a%20nice%20day<span class="pl-pds">"</span></span></pre></div>
<p>This is simply translated into:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">@macroexpand</span> <span class="pl-c1">@ccall</span> glib<span class="pl-k">.</span><span class="pl-c1">g_uri_escape_string</span>(
           uri<span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-s"><span class="pl-pds">"</span>:/<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-c1">true</span><span class="pl-k">::</span><span class="pl-c1">Cint</span>
       )<span class="pl-k">::</span><span class="pl-c1">Cstring</span>)
<span class="pl-c1">ccall</span>((<span class="pl-c1">:g_uri_escape_string</span>, glib), Cstring, (Cstring, Cstring, Cint), uri, <span class="pl-s"><span class="pl-pds">"</span>:/<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)</pre></div>
<p>It is technically also possible to write <code>@ccall "libglib-2.0".g_uri_escape_string( ... )</code>, but that's just nasty.</p>
<h2><a id="user-content-cdef-macro" class="anchor" aria-hidden="true" href="#cdef-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@cdef macro</h2>
<p>There has been some talk that <code>@ccall</code> should be in the <code>Base</code> module.
(this repository is mostly just for polishing it up.) <code>@cdef</code> has not
been discussed in the community at all. It was just something I wanted
and it happens to share a lot of code with <code>@ccall</code>, so it's in this
repo, but I'm not necessarily saying it should be in <code>Base</code>. It has
the same syntax as ccall, but it makes a <em>very</em> minimal wrapper
function over the called code, so it can be used again later without
type annotations. It's still a work-in progress, but at the moment, it
works like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cdef</span> <span class="pl-c1">puts</span>(str<span class="pl-k">::</span><span class="pl-c1">Cstring</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>
puts (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">puts</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>)
foo
<span class="pl-c1">4</span></pre></div>
<p>and again with the generated code:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">@macroexpand</span> <span class="pl-c1">@cdef</span> <span class="pl-c1">puts</span>(str<span class="pl-k">::</span><span class="pl-c1">Cstring</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>)
<span class="pl-en">puts</span>(str) <span class="pl-k">=</span> <span class="pl-c1">ccall</span>(<span class="pl-c1">:puts</span>, Cint, (Cstring,), str)</pre></div>
<p>In the case of a third-party library, only the function name becomes
the wrapper name.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">@macroexpand</span> <span class="pl-c1">@cdef</span> glib<span class="pl-k">.</span><span class="pl-c1">foo</span>(bar<span class="pl-k">::</span><span class="pl-c1">Baz</span>)<span class="pl-k">::</span><span class="pl-c1">Cvoid</span>)
<span class="pl-en">foo</span>(bar) <span class="pl-k">=</span> <span class="pl-c1">ccall</span>((<span class="pl-c1">:foo</span>, glib), Cvoid, (Baz,), bar)</pre></div>
<p>This is to reduce the amount of repetitive typing when wrapping a
library. It is probably helpful to define additional dispatches with
additional wrapping in most cases.</p>
<h2><a id="user-content-disable_sigint-macro" class="anchor" aria-hidden="true" href="#disable_sigint-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@disable_sigint macro</h2>
<p>Disables SIGINT while expr is being executed. Mostly useful for calling
C functions that call back into Julia in a concurrent context because
memory corruption can occur and crash the whole program. I'm frankly
not entirely sure how necessary this is as a separate macro, but some
other people thought it was a good idea, and it was easy to implement.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@disable_sigint</span> <span class="pl-c1">ccall</span>( <span class="pl-k">...</span> )

<span class="pl-c"><span class="pl-c">#</span> same as:</span>
<span class="pl-c1">disable_sigint</span>() <span class="pl-k">do</span>
    <span class="pl-c1">ccall</span>( <span class="pl-k">...</span> )
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-check_syserr" class="anchor" aria-hidden="true" href="#check_syserr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>@check_syserr</h2>
<p>Throws a system error for a non-zero exit.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">touch</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@check_syserr</span> <span class="pl-c1">@ccall</span> <span class="pl-c1">mkfifo</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-c1">0o666</span><span class="pl-k">::</span><span class="pl-c1">Cuint</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>
ERROR<span class="pl-k">:</span> SystemError<span class="pl-k">:</span> <span class="pl-c1">@ccall</span> <span class="pl-c1">mkfifo</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-c1">0x01b6</span><span class="pl-k">::</span><span class="pl-c1">Cuint</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span><span class="pl-k">:</span> File exists

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">@macroexpand</span> <span class="pl-c1">@check_syserr</span> <span class="pl-c1">@ccall</span> <span class="pl-c1">mkfifo</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span><span class="pl-k">::</span><span class="pl-c1">Cstring</span>, <span class="pl-c1">0o666</span><span class="pl-k">::</span><span class="pl-c1">Cuint</span>)<span class="pl-k">::</span><span class="pl-c1">Cint</span>)
<span class="pl-c"><span class="pl-c">#</span> LineNumberNodes have been removed for your viewing pleasure.</span>
<span class="pl-k">begin</span>
    err <span class="pl-k">=</span> <span class="pl-c1">ccall</span>(<span class="pl-c1">:mkfifo</span>, Cint, (Cstring, Cuint), <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, <span class="pl-c1">0x01b6</span>)
    <span class="pl-c1">systemerror</span>(<span class="pl-s"><span class="pl-pds">"</span>@ccall mkfifo(<span class="pl-cce">\"</span>foo<span class="pl-cce">\"</span>::Cstring, 0x01b6::Cuint)::Cint<span class="pl-pds">"</span></span>, err <span class="pl-k">!=</span> <span class="pl-c1">0</span>)
    err
<span class="pl-k">end</span></pre></div>
<p>Kinda iffy on this one, too, but I guess can see the appeal.</p>
</article></div>