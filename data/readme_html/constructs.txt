<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-constructs" class="anchor" aria-hidden="true" href="#constructs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructs</h1>
<p dir="auto"><a href="https://miRoox.github.io/Constructs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://miRoox.github.io/Constructs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/miRoox/Constructs.jl/actions"><img src="https://github.com/miRoox/Constructs.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/miRoox/Constructs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed2fbab2570cab5c1a45a1e5f525aed2201e1ca00ef54df2761311f5fffb9e8e/68747470733a2f2f636f6465636f762e696f2f67682f6d69526f6f782f436f6e737472756374732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/miRoox/Constructs.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A declarative deserialization-serialization for binary data.
Inspired by <a href="https://construct.readthedocs.io/" rel="nofollow">Construct</a>.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<p dir="auto"><code>@construct</code> defines the <code>struct</code> type and the corresponding deserialize/serialize methods.
The following <code>Bitmap</code> has a <code>BMP</code> header, width and height in <code>UInt16</code> little-endian format,
and pixel which is a 2-dimensional byte array with the specified width and height.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@construct struct Bitmap
    ::Const(b&quot;BMP&quot;)
    width::UInt16le
    height::UInt16le
    pixel::SizedArray(UInt8, this.height, this.width) # Julia arrays are column major
end"><pre><span class="pl-c1">@construct</span> <span class="pl-k">struct</span> Bitmap
    <span class="pl-k">::</span><span class="pl-c1">Const</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">b</span>"</span>BMP<span class="pl-pds">"</span></span>)
    width<span class="pl-k">::</span><span class="pl-c1">UInt16le</span>
    height<span class="pl-k">::</span><span class="pl-c1">UInt16le</span>
    pixel<span class="pl-k">::</span><span class="pl-c1">SizedArray</span>(UInt8, this<span class="pl-k">.</span>height, this<span class="pl-k">.</span>width) <span class="pl-c"><span class="pl-c">#</span> Julia arrays are column major</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; deserialize(Bitmap, b&quot;BMP\x02\x00\x03\x00\x01\x02\x03\x04\x05\x06&quot;)
Bitmap(0x0002, 0x0003, UInt8[0x01 0x04; 0x02 0x05; 0x03 0x06])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">deserialize</span>(Bitmap, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">b</span>"</span>BMP<span class="pl-cce">\x</span>02<span class="pl-cce">\x</span>00<span class="pl-cce">\x</span>03<span class="pl-cce">\x</span>00<span class="pl-cce">\x</span>01<span class="pl-cce">\x</span>02<span class="pl-cce">\x</span>03<span class="pl-cce">\x</span>04<span class="pl-cce">\x</span>05<span class="pl-cce">\x</span>06<span class="pl-pds">"</span></span>)
<span class="pl-c1">Bitmap</span>(<span class="pl-c1">0x0002</span>, <span class="pl-c1">0x0003</span>, UInt8[<span class="pl-c1">0x01</span> <span class="pl-c1">0x04</span>; <span class="pl-c1">0x02</span> <span class="pl-c1">0x05</span>; <span class="pl-c1">0x03</span> <span class="pl-c1">0x06</span>])</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; serialize(Bitmap(3, 2, UInt8[1 2 3; 7 8 9]))
13-element Vector{UInt8}:
 0x42
 0x4d
 0x50
 0x03
 0x00
 0x02
 0x00
 0x01
 0x07
 0x02
 0x08
 0x03
 0x09"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">serialize</span>(<span class="pl-c1">Bitmap</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, UInt8[<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">7</span> <span class="pl-c1">8</span> <span class="pl-c1">9</span>]))
<span class="pl-c1">13</span><span class="pl-k">-</span>element Vector{UInt8}<span class="pl-k">:</span>
 <span class="pl-c1">0x42</span>
 <span class="pl-c1">0x4d</span>
 <span class="pl-c1">0x50</span>
 <span class="pl-c1">0x03</span>
 <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x02</span>
 <span class="pl-c1">0x00</span>
 <span class="pl-c1">0x01</span>
 <span class="pl-c1">0x07</span>
 <span class="pl-c1">0x02</span>
 <span class="pl-c1">0x08</span>
 <span class="pl-c1">0x03</span>
 <span class="pl-c1">0x09</span></pre></div>
</article></div>