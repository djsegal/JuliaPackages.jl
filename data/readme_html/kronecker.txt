<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kroneckerjl" class="anchor" aria-hidden="true" href="#kroneckerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kronecker.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="logo.png"><img src="logo.png" alt="" style="max-width:100%;"></a></p>
<p>This is a Julia package to efficiently work with Kronecker products. It combines lazy evaluation and algebraic tricks such that it can implicitely work with huge matrices. It allows to work with large Kronecker systems both much faster and using much less memory than the naive implementation of the Kronecker product.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<p>Given two matrices (subtype of <code>AbstractArray</code>) <code>A</code> and <code>B</code>, one can construct an instance of the <code>KroneckerProduct</code> type as <code>K = A ⊗ B</code> (typed using <code>\otimes TAB</code>). Equivalently, the function <code>kronecker</code> function can be used as well. Several functions are implemented.</p>
<ul>
<li><code>collect(K)</code> computes the Kronecker product (<strong>not</strong> recommended!)</li>
<li><code>tr</code>, <code>det</code>, <code>size</code>, <code>eltype</code>, <code>inv</code>, ... are efficient functions to work with Kronecker products. Either the result is a numeric value or a new <code>KroneckerProduct</code> type is returned</li>
<li>Multiplying with a vector <code>v</code> is efficient using the <a href="https://en.wikipedia.org/wiki/Kronecker_product#Matrix_equations" rel="nofollow">vec trick</a>: <code>K * v</code></li>
<li>Solving systems of the form <code>A ⊗ B + cI</code></li>
<li>Working with incomplete systems using the <a href="https://arxiv.org/pdf/1601.01507.pdf" rel="nofollow">sampled vec trick</a></li>
<li>Basic compatibility with higher-order Kronecker systems, e.g. <code>A ⊗ B ⊗ C</code> or <code>kronecker(A, 4)</code> which is equivalent with <code>A ⊗ A ⊗ A ⊗ A</code></li>
<li>A <code>KroneckerSum</code> can be constructed with <code>A ⊕ B</code> (typed using <code>\oplus TAB</code>) or <code>kroneckersum(A,B)</code>
<ul>
<li>Multiplication with vectors uses  a specialized version of the vec trick</li>
<li>Higher-order sums are supported, e.g. <code>A ⊕ B ⊕ C</code> or <code>kroneckersum(A,4)</code></li>
</ul>
</li>
<li>[in progress] GPU compatibility!</li>
<li>[in progress] Autodiff for machine learning models!</li>
</ul>
<p>Read the <a href="https://michielstock.github.io/Kronecker.jl/latest/" rel="nofollow">documentation</a> to get the specifics.</p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>Below is a <a href="scrips/benchmarks.jl">comparision</a> between the native <code>kron</code> function and <code>Kronecker.jl</code> for several operations.</p>
<p><a target="_blank" rel="noopener noreferrer" href="benchmark.svg"><img src="benchmark.svg" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Kronecker

A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>, <span class="pl-c1">100</span>);
B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>, <span class="pl-c1">50</span>);

v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5000</span>);

K <span class="pl-k">=</span> A ⊗ B

<span class="pl-c1">collect</span>(K)  <span class="pl-c"><span class="pl-c">#</span> equivalent with kron(A, B)</span>

K[<span class="pl-c1">78</span>, <span class="pl-c1">43</span>]

<span class="pl-c1">tr</span>(K)
<span class="pl-c1">inv</span>(K)  <span class="pl-c"><span class="pl-c">#</span> yields another lazy Kronecker instance</span>

K <span class="pl-k">*</span> v  <span class="pl-c"><span class="pl-c">#</span> equivalent with vec(B * reshape(v, 50, 100) * A')</span></pre></div>
<p>See the notebook for some more advanced use.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Directly available via the Julia package manager:</p>
<pre lang="julialang"><code>] add Kronecker
</code></pre>
<h2><a id="user-content-issues" class="anchor" aria-hidden="true" href="#issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Issues</h2>
<p>This is very much a work in progress! Please start an issue for bugs or requests to improve functionality. Any feedback is appreciated!</p>
<h2><a id="user-content-status-master-branch" class="anchor" aria-hidden="true" href="#status-master-branch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status <code>master</code> branch</h2>
<p><a href="https://michielstock.github.io/Kronecker.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a><a href="https://travis-ci.com/MichielStock/Kronecker.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00aa71693244269ab9ddfeefdf7efc3c4877e85c/68747470733a2f2f7472617669732d63692e636f6d2f4d69636869656c53746f636b2f4b726f6e65636b65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/MichielStock/Kronecker.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/MichielStock/Kronecker.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/44848ce74d85d7c22f75e54b9e1c82200e6da578/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4d69636869656c53746f636b2f4b726f6e65636b65722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/MichielStock/Kronecker.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="https://zenodo.org/badge/latestdoi/160198570" rel="nofollow"><img src="https://camo.githubusercontent.com/711b8bf3aa3d0a1792261cc4f0677a2376d89a05/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3136303139383537302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/160198570.svg" style="max-width:100%;"></a></p>
</article></div>