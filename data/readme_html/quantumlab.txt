<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-uantumlab" class="anchor" aria-hidden="true" href="#uantumlab"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/eb28185197807fdd6666067e00bbac9f1cfb0ab14dbd58890fa1fcf9e5504602/687474703a2f2f73636875726b75732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f31302f5175616e74756d4c61622e706e67"><img src="https://camo.githubusercontent.com/eb28185197807fdd6666067e00bbac9f1cfb0ab14dbd58890fa1fcf9e5504602/687474703a2f2f73636875726b75732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f31302f5175616e74756d4c61622e706e67" alt="Q" width="55" data-canonical-src="http://schurkus.com/wp-content/uploads/2015/10/QuantumLab.png" style="max-width:100%;"></a>uantumLab</h1>
<p><a href="https://travis-ci.org/vonDonnerstein/QuantumLab.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a65f6b85962b6949a003bb7daf26a4bb56f27d0446c7ad9a90f3a76d44ebed70/68747470733a2f2f7472617669732d63692e6f72672f766f6e446f6e6e6572737465696e2f5175616e74756d4c61622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/vonDonnerstein/QuantumLab.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/vonDonnerstein/QuantumLab.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b76eb1f65db3a7d344fb5500dcb2b149ba0cfbcd1eec81c119aae5be23fc8964/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f766f6e446f6e6e6572737465696e2f5175616e74756d4c61622e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/vonDonnerstein/QuantumLab.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>A Quantum Chemistry Package based on the Julia language.</p>
<h2><a id="user-content-what-it-is-a-narrative-introduction" class="anchor" aria-hidden="true" href="#what-it-is-a-narrative-introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What it is: A narrative introduction</h2>
<p>Think about real world chemistry: Huge reactors are needed to produce massive amounts of material. However, in order to develop the reactions it would be a terrible overhead if the chemists would have to tweak with the complex reactors all the time. That's the point of laboratories. Places, where everything one needs to conduct the experiments can be quickly and easily taken out of the drawer and flexibly combined.</p>
<p>Classical quantum codes (Gaussian, QChem, Turbomole, ...) are like reactors - highly performant but inflexible. QuantumLab on the other hand provides the "lab theoretician" - the ladies and gentlemen designing the theories and algorithms of quantum theory - with a laboratory full of tools. By making everything accessible from a simple but flexible julia input one can test theoretical and algorithmic ideas quickly and easily.</p>
<p>The interactively tested and developed input can also be written to text files and later <code>include</code>d for reuse.  We call these simple text files "experiment protocols" and they typically end in '.jl'.  Elaboration on and perfectioning of these protocols allows the development of new tools which can be easily added back to the bench drawer (possibly after publishing in a journal) - just commit them in the src/ folder of QuantumLab and send a pull request. QuantumLab is designed with the scientific spirit of collaboration and making ones results accessible to the community in mind. That's why we made this code open-source under the MIT licence: To make it easy to enable the lab community with your protocols.</p>
<h2><a id="user-content-why-julia" class="anchor" aria-hidden="true" href="#why-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why Julia?</h2>
<p>Julia walks like Python, runs like C.</p>
<p>Meaning: Julia is an emerging language that allows for ease-of-use like e.g. Python in contrast to Fortran and still resembles Fortran and C (the classical HPC languages) rather well in performance. Furthermore, as it runs on top of the Julia just-in-time (JIT) compiler it gets cross-plattform capabilities for free.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>One of the most essential theories in quantum chemistry is Hartree-Fock (HF). So let's get started by considering how to compute the HF energy with QuantumLab. First, we'll need to bring QuantumLab up.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using QuantumLab
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> QuantumLab</pre></div>
<p>Almost all functions in QuantumLab follow a naming convention: verbNoun1Noun2... where the Nouns become more specific left-to-right. This allows for easy tab-completion and also allows to search for functions rather easily.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="?&gt; Hartree
"><pre>?<span class="pl-k">&gt;</span> Hartree</pre></div>
<p>gives us the name of a function that seems to be just what we are looking for: <code>evaluateHartreeFock</code>. The help shows that it's an alias for evaluateSCF and tells us how to use it: <code>evaluateSCF(basis, geometry, initialGuess, electronNumber)</code>. We are also informed about the choices for types of the arguments. Let's start by choosing the molecule for which to compute the ground-state energy, say, the water molecule. Handily enough, we find the corresponding geometry file in .xyz format in the test folder of QuantumLab, but you can choose any other geometry for which you have the geometry file at hand. How can we read the Geometry in? Again tab-completion and <code>?&gt;</code> are our friends.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; h2o = Geometry(&quot;test/h2o.xyz&quot;)
"><pre>julia<span class="pl-k">&gt;</span> h2o <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>(<span class="pl-s"><span class="pl-pds">"</span>test/h2o.xyz<span class="pl-pds">"</span></span>)</pre></div>
<p>Next, we need to choose the basis set. If we don't have a corresponding specification file at hand, QuantumLab will obtain one from basis set exchange (please make sure to comply with their terms of use if you use this feature).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; sto3g = BasisSet(&quot;sto-3g&quot;)
"><pre>julia<span class="pl-k">&gt;</span> sto3g <span class="pl-k">=</span> <span class="pl-c1">BasisSet</span>(<span class="pl-s"><span class="pl-pds">"</span>sto-3g<span class="pl-pds">"</span></span>)</pre></div>
<p>For the initial guess we can simply take the ZeroGuess and the "number of closed shell orbitals" of water is 5. So now we can</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; evaluateSCF(sto3g, h2o, ZeroGuess, 5)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluateSCF</span>(sto3g, h2o, ZeroGuess, <span class="pl-c1">5</span>)</pre></div>
<h2><a id="user-content-where-to-go-from-here" class="anchor" aria-hidden="true" href="#where-to-go-from-here"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Where to go from here?</h2>
<p>Documentation has a tendency to get out of sync with the codebase quickly. Deprecated documentation is, however, not only useless, but can even be misleading and thereby harmful. Consequently, all documentation must be part of the continuous integration cycle and kept consistent if it exists in several places. To avoid these problems, this readme is kept to the bare minimum. The actual full documentation happens in the form of docstrings and can be accessed by julia's help functionality, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="?&gt; LaplaceModule
"><pre>?<span class="pl-k">&gt;</span> LaplaceModule</pre></div>
<p>The long-term plan is to combine those docstrings into a full-blown documentation here with the help of the Documenter.jl package. Also, all documentation will at some point contain example cases that are automatically checked with jldoctests. Until then, please refer to test/runtests.jl for an inspiring, however chaotic, collection of usage examples. As the aim is to test for almost all lines of code during continuous integration, you should be able to find an example case for pretty much all functionality there. If this temporary solution frustrates you as much as me and you want to help with the long term solution, your pull request is more than welcome.</p>
</article></div>