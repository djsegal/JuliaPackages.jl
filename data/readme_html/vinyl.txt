<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-vinyl" class="anchor" aria-hidden="true" href="#vinyl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vinyl</h1>
<p><a href="https://travis-ci.org/MikeInnes/Vinyl.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/79911f8ca48d0eb74c24abfb4a964be677915d3f/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f56696e796c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/Vinyl.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Before <a href="https://github.com/jrevels/Cassette.jl/">Cassette</a> was invented, we had to go without fancy tapes and put up with scratches and skips. Some would say it makes for a warmer sound.</p>
<p>This package (approximately) implements Cassette's API using interpretation rather than compilation. While very slow, it works on current Julia and has low compiler overhead, so is suitable for code-tracing and debugging use cases.</p>
<p>Hook functions before they run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Vinyl<span class="pl-k">:</span> <span class="pl-c1">@overdub</span>, <span class="pl-c1">@hook</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> TraceCtx <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@hook</span> TraceCtx (f<span class="pl-k">::</span><span class="pl-c1">Any</span>)(xs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Called <span class="pl-v">$(:(<span class="pl-k">$</span><span class="pl-c1">f</span>(<span class="pl-k">$</span>(xs<span class="pl-k">...</span>)))</span>)<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@overdub</span> <span class="pl-c1">TraceCtx</span>() <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">1.0</span>
Called (<span class="pl-k">+</span>)(<span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>)
Called (promote)(<span class="pl-c1">1</span>, <span class="pl-c1">1.0</span>)
Called (promote_type)(Int64, Float64)
Called (promote_rule)(Int64, Float64)
Called (promote_rule)(Float64, Int64)
Called (Base<span class="pl-k">.</span>promote_result)(Int64, Float64, Union{}, Float64)
Called (promote_type)(Union{}, Float64)
Called (convert)(Float64, <span class="pl-c1">1</span>)
Called (sitofp)(Float64, <span class="pl-c1">1</span>)
Called (promote_type)(Int64, Float64)
Called (promote_rule)(Int64, Float64)
Called (promote_rule)(Float64, Int64)
Called (Base<span class="pl-k">.</span>promote_result)(Int64, Float64, Union{}, Float64)
Called (promote_type)(Union{}, Float64)
Called (convert)(Float64, <span class="pl-c1">1.0</span>)
Called (tuple)(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)
Called (Core<span class="pl-k">.</span>_apply)(<span class="pl-k">+</span>, (<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>))
Called (add_float)(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">2.0</span></pre></div>
<p>Alter the behaviour of a function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Vinyl<span class="pl-k">:</span> <span class="pl-c1">@overdub</span>, <span class="pl-c1">@primitive</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prod</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])
<span class="pl-c1">120</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])
<span class="pl-c1">15</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> MulCtx <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@primitive</span> MulCtx a <span class="pl-k">*</span> b <span class="pl-k">=</span> a <span class="pl-k">+</span> b

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@overdub</span> <span class="pl-c1">MulCtx</span>() <span class="pl-c1">prod</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>])
<span class="pl-c1">15</span></pre></div>
<p>This package also includes an implementation of <a href="https://en.wikipedia.org/wiki/Delimited_continuation" rel="nofollow">delimited continuations</a>, because why not.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Vinyl<span class="pl-k">:</span> <span class="pl-c1">@reset</span>, shift

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@reset</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">shift</span>(k <span class="pl-k">-&gt;</span> <span class="pl-c1">k</span>(<span class="pl-c1">k</span>(<span class="pl-c1">4</span>)))
<span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@reset</span> <span class="pl-k">begin</span>
         <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>
           _ <span class="pl-k">=</span> <span class="pl-c1">shift</span>(k <span class="pl-k">-&gt;</span> (i,<span class="pl-c1">k</span>(<span class="pl-c1">nothing</span>)))
         <span class="pl-k">end</span>
         ()
       <span class="pl-k">end</span>
(<span class="pl-c1">1</span>, (<span class="pl-c1">2</span>, (<span class="pl-c1">3</span>, (<span class="pl-c1">4</span>, (<span class="pl-c1">5</span>, ())))))

<span class="pl-c"><span class="pl-c">#</span> Hijack control flow and explore multiple branches</span>
julia<span class="pl-k">&gt;</span> <span class="pl-en">quantum_predicate</span>(x) <span class="pl-k">=</span> <span class="pl-c1">shift</span>(k <span class="pl-k">-&gt;</span> (<span class="pl-c1">k</span>(<span class="pl-c1">true</span>), <span class="pl-c1">k</span>(<span class="pl-c1">false</span>)))

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(x)
         <span class="pl-c1">quantum_predicate</span>(x) <span class="pl-k">&amp;&amp;</span> (x <span class="pl-k">=</span> x <span class="pl-k">.+</span> <span class="pl-c1">2</span>)
         <span class="pl-c1">2.</span><span class="pl-k">*</span>x
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> k <span class="pl-k">=</span> <span class="pl-c1">@reset</span> <span class="pl-c1">foo</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
([<span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>])</pre></div>
</article></div>