<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jackaudio" class="anchor" aria-hidden="true" href="#jackaudio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JACKAudio</h1>
<p><strong>This Package is currently unmaintained. For streaming audio input and output see <a href="https://github.com/juliaaudio/portaudio.jl">PortAudio.jl</a>.</strong></p>
<p>As of May 1, 2020 PortAudio.jl doesn't support JACK, but adding JACK support to it is probably a better path forward than maintaining JACKAudio.jl separately. See <a href="https://github.com/JuliaAudio/PortAudio.jl/issues/49">this issue on adding JACK support to PortAudio.jl</a> for more details.</p>
<p><a href="https://travis-ci.org/JuliaAudio/JACKAudio.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3401b9b3b561ead6456de0a7b18c644115fe97d2/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417564696f2f4a41434b417564696f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaAudio/JACKAudio.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaAudio/JACKAudio.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8a66d4372d64a0023cb18022c2eefb4c8023d538/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961417564696f2f4a41434b417564696f2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaAudio/JACKAudio.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package allows Julia software to read and write audio through the <a href="http://www.jackaudio.org/" rel="nofollow">JACK Audio Connection Kit</a>, a cross-platform, low-latency audio system. The goal is to be able to easily interface with JACK using the <code>SampleSink</code>/<code>SampleSource</code> API defined in <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals.jl</a>, not necessarily to create a full-featured JACK library (though PRs are welcome to wrap more of libjack).</p>
<p>The package is tested against both JACK1 and JACK2, and on OSX and Linux.</p>
<h2><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prerequisites</h2>
<p>To use this package you must have a working JACK installation. For linux this is most likely available through your distribution. On OSX you can download <a href="http://jackaudio.org/downloads/" rel="nofollow">JACKOSX binaries</a>. JACKAudio.jl is mostly tested with JACK2, but should also work with JACK1. We also recommend that you have some sort of JACK routing tool such as <a href="http://qjackctl.sourceforge.net/" rel="nofollow">QjackCtl</a> to configure and start the JACK server and connect your applications to each other. JACKAudio.jl can start up a jack server in the background if there isn't one already running, but does not expose more advanced configuration, so you're better off using a separate tool to manage your JACK server process.</p>
<h2><a id="user-content-terminology" class="anchor" aria-hidden="true" href="#terminology"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Terminology</h2>
<p>A <code>JACKClient</code> represents a connection to the JACK server, and serves as a container for some number of <code>JACKSource</code>s and <code>JACKSink</code>s. Each <code>JACKSource</code> represents a logically-distinct multi-channel stream. It is a "Source" from the perspective of your Julia code, and acts as an input to your <code>JACKClient</code>. Likewise <code>JACKSink</code> is an output.</p>
<p>In JACK the channels of a <code>JACKSource</code> called "out" would be given the names "out_1", and "out_2". As an example, a <code>JACKClient</code> implementing a stereo reverb might have a single 2-channel <code>JACKSource</code> input, whereas a mono compressor with a side-chain input might have two mono <code>JACKSource</code>s. <code>JACKSource</code> is a subtype of the <code>AudioSource</code> abstract type defined in <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals.jl</a>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-instantiation" class="anchor" aria-hidden="true" href="#instantiation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Instantiation</h3>
<p>The default <code>JACKClient</code> is named "Julia" and has one stereo input source and one stereo output sink. You can instantiate it like so:</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">JACKClient</span>()</pre></div>
<p>or give it a different name</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">JACKClient</span>(<span class="pl-s"><span class="pl-pds">"</span>Verberator2000<span class="pl-pds">"</span></span>)</pre></div>
<p>You can specify the number of channels for the default source and sink:</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">JACKClient</span>(<span class="pl-s"><span class="pl-pds">"</span>QuadIO<span class="pl-pds">"</span></span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> also works without specifying the name</span></pre></div>
<p>The full constructor call allows you to create multiple sources/sinks with different names and channel counts:</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">JACKClient</span>(<span class="pl-s"><span class="pl-pds">"</span>Kompressor<span class="pl-pds">"</span></span>, [(<span class="pl-s"><span class="pl-pds">"</span>Input<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>), (<span class="pl-s"><span class="pl-pds">"</span>Sidechain<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)], [(<span class="pl-s"><span class="pl-pds">"</span>Output<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)])</pre></div>
<p>After wiring up the inputs and outputs in QjackCtl, you would end up with this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a05fd563c4a4aded5187d9a67fc607f96a277758/687474703a2f2f6a756c6961617564696f2e6769746875622e696f2f4a41434b417564696f2e6a6c2f696d672f716a61636b63746c2d6b6f6d70726573736f722e706e67"><img src="https://camo.githubusercontent.com/a05fd563c4a4aded5187d9a67fc607f96a277758/687474703a2f2f6a756c6961617564696f2e6769746875622e696f2f4a41434b417564696f2e6a6c2f696d672f716a61636b63746c2d6b6f6d70726573736f722e706e67" alt="Kompressor in QjackCtl" data-canonical-src="http://juliaaudio.github.io/JACKAudio.jl/img/qjackctl-kompressor.png" style="max-width:100%;"></a></p>
<h3><a id="user-content-reading-and-writing" class="anchor" aria-hidden="true" href="#reading-and-writing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading and Writing</h3>
<p>You can access the sources and sinks of a <code>JACKClient</code> with the <code>sources</code> and <code>sinks</code> methods:</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">JACKClient</span>()
source <span class="pl-k">=</span> <span class="pl-c1">sources</span>(c)[<span class="pl-c1">1</span>]
sink <span class="pl-k">=</span> <span class="pl-c1">sinks</span>(c)[<span class="pl-c1">1</span>]</pre></div>
<p>Interfacing with JACK sources and sinks is best done with SampleBufs, from the <a href="https://github.com/JuliaAudio/SampledSignals.jl">SampledSignals.jl</a> package, which handles type and samplerate conversions, as well as convenience features like indexing by time. For instance, to read 5 seconds of audio and play it back, you can write:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SampledSignals

buf <span class="pl-k">=</span> <span class="pl-c1">read</span>(source, <span class="pl-c1">5</span>s)
<span class="pl-c1">write</span>(sink, buf)</pre></div>
<p>Because the common case is to have a JACKClient with exactly one source and one sink, JACKAudio implements wrapper functions for <code>read!</code>, <code>read</code>, and <code>write</code> that pass any arguments through to the first sink or source, so the above example could become:</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">JACKClient</span>()
buf <span class="pl-k">=</span> <span class="pl-c1">read</span>(c, <span class="pl-c1">5</span>s)
<span class="pl-c1">write</span>(c, buf)</pre></div>
</article></div>