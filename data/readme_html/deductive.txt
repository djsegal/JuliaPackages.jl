<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-deductivejl" class="anchor" aria-hidden="true" href="#deductivejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deductive.jl</h1>
<p dir="auto"><a href="https://ctrekker.github.io/Deductive.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/ctrekker/Deductive.jl/actions/workflows/Test.yml?query=branch%3Amain"><img src="https://github.com/ctrekker/Deductive.jl/actions/workflows/Test.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/ctrekker/Deductive.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/0c0e9289d0a22552eb69093242d6b5d37ffb99f5cfb756e6325b5cbcc64dd9f7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f637472656b6b65722f4465647563746976652e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ctrekker/Deductive.jl/badge.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/logo.png"><img src="assets/logo.png" width="250" style="max-width: 100%;"></a></p>
<p dir="auto">Deductive is a package for expressing and proving <a href="https://en.wikipedia.org/wiki/Propositional_calculus" rel="nofollow">zeroth order</a> and <a href="https://en.wikipedia.org/wiki/First-order_logic" rel="nofollow">first order</a> logical statements and theorems symbolically in Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Currently this package is unregistered in Julia's general registry. Instead install through this repository directly.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.7) pkg&gt; add https://github.com/ctrekker/PropositionalLogic.jl"><pre lang="julia-repl" class="notranslate"><code>(@v1.7) pkg&gt; add https://github.com/ctrekker/PropositionalLogic.jl
</code></pre></div>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<h3 dir="auto"><a id="user-content-propositional-logic-zeroth-order" class="anchor" aria-hidden="true" href="#propositional-logic-zeroth-order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Propositional Logic (zeroth order)</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Deductive

@symbols a b

tableau(a ∧ b)      # true
tableau(a ∧ b, ¬a)  # false, because contradiction

println(truthtable(a ∧ b))
#= Outputs:
 Row │ a      b      a ∧ b 
     │ Bool   Bool   Bool  
─────┼─────────────────────
   1 │ false  false  false
   2 │  true  false  false
   3 │ false   true  false
   4 │  true   true   true
=#"><pre><span class="pl-k">using</span> Deductive

<span class="pl-c1">@symbols</span> a b

<span class="pl-c1">tableau</span>(a ∧ b)      <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">tableau</span>(a ∧ b, ¬a)  <span class="pl-c"><span class="pl-c">#</span> false, because contradiction</span>

<span class="pl-c1">println</span>(<span class="pl-c1">truthtable</span>(a ∧ b))
<span class="pl-c"><span class="pl-c">#=</span> Outputs:</span>
<span class="pl-c"> Row │ a      b      a ∧ b </span>
<span class="pl-c">     │ Bool   Bool   Bool  </span>
<span class="pl-c">─────┼─────────────────────</span>
<span class="pl-c">   1 │ false  false  false</span>
<span class="pl-c">   2 │  true  false  false</span>
<span class="pl-c">   3 │ false   true  false</span>
<span class="pl-c">   4 │  true   true   true</span>
<span class="pl-c"><span class="pl-c">=#</span></span></pre></div>
<p dir="auto">Several operators are exported and their use is required in defining statements.</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Completion Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>¬</td>
<td>\neg</td>
<td><a href="https://en.wikipedia.org/wiki/Negation" rel="nofollow">Negation</a></td>
</tr>
<tr>
<td>∧</td>
<td>\wedge</td>
<td><a href="https://en.wikipedia.org/wiki/Logical_conjunction" rel="nofollow">Logical Conjunction</a></td>
</tr>
<tr>
<td>∨</td>
<td>\vee</td>
<td><a href="https://en.wikipedia.org/wiki/Logical_disjunction" rel="nofollow">Logical Disjunction</a></td>
</tr>
<tr>
<td>→</td>
<td>\rightarrow</td>
<td><a href="https://en.wikipedia.org/wiki/Material_conditional" rel="nofollow">Material Implication</a></td>
</tr>
<tr>
<td>⟷</td>
<td>\leftrightarrow</td>
<td><a href="https://en.wikipedia.org/wiki/If_and_only_if" rel="nofollow">Material Equivalence</a></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-outdated-predicate-logic-first-order" class="anchor" aria-hidden="true" href="#outdated-predicate-logic-first-order"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>OUTDATED</strong> Predicate Logic (first order)</h3>
<p dir="auto">With predicates, statements like "for all x, P(x) is true" can be written. Due to some Julia parser issues, defining a function with the symbols for universal (∀) and existential (∃) quantification isn't possible. Instead we settle for the symbols Ā (typed A\bar) and Ē (typed (E\bar)). Here's an example of their use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Deductive

x = FreeVariable(:x)
P = Proposition(:P)

Ā(x, P(x))  # like saying &quot;for all x, P(x) is true&quot;
Ē(x, P(x))  # like saying &quot;for some x, P(x) is true&quot;
¬Ē(x, ¬P(x))  # like saying &quot;there does not exist x such that P(x) is false&quot;, which is equivalent to Ā(x, P(x))"><pre><span class="pl-k">using</span> Deductive

x <span class="pl-k">=</span> <span class="pl-c1">FreeVariable</span>(<span class="pl-c1">:x</span>)
P <span class="pl-k">=</span> <span class="pl-c1">Proposition</span>(<span class="pl-c1">:P</span>)

<span class="pl-c1">Ā</span>(x, <span class="pl-c1">P</span>(x))  <span class="pl-c"><span class="pl-c">#</span> like saying "for all x, P(x) is true"</span>
<span class="pl-c1">Ē</span>(x, <span class="pl-c1">P</span>(x))  <span class="pl-c"><span class="pl-c">#</span> like saying "for some x, P(x) is true"</span>
¬<span class="pl-c1">Ē</span>(x, ¬<span class="pl-c1">P</span>(x))  <span class="pl-c"><span class="pl-c">#</span> like saying "there does not exist x such that P(x) is false", which is equivalent to Ā(x, P(x))</span></pre></div>
<p dir="auto">As an interesting example, the equivalence between Ā(x, P(x)) and ¬Ē(x, ¬P(x)) can be proven as a tautology within this package using the <code>tableau</code> function. This logical equivalence can be expressed as a statement Ā(x, P(x)) ⟷ ¬Ē(x, ¬P(x)), or "for all x, P(x) is true if and only if there does not exist any x such that P(x) is false".</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Deductive

x = FreeVariable(:x)
P = Proposition(:P)

my_statement = Ā(x, P(x)) ⟷ ¬(Ē(x, ¬P(x)))
# prove by contradiction
tableau(¬my_statement)  # returns false, since the contradiction of a tautology is always false"><pre><span class="pl-k">using</span> Deductive

x <span class="pl-k">=</span> <span class="pl-c1">FreeVariable</span>(<span class="pl-c1">:x</span>)
P <span class="pl-k">=</span> <span class="pl-c1">Proposition</span>(<span class="pl-c1">:P</span>)

my_statement <span class="pl-k">=</span> <span class="pl-c1">Ā</span>(x, <span class="pl-c1">P</span>(x)) ⟷ ¬(<span class="pl-c1">Ē</span>(x, ¬<span class="pl-c1">P</span>(x)))
<span class="pl-c"><span class="pl-c">#</span> prove by contradiction</span>
<span class="pl-c1">tableau</span>(¬my_statement)  <span class="pl-c"><span class="pl-c">#</span> returns false, since the contradiction of a tautology is always false</span></pre></div>
<h3 dir="auto"><a id="user-content-generating-human-readable-proofs-wip" class="anchor" aria-hidden="true" href="#generating-human-readable-proofs-wip"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating Human-Readable Proofs (WIP)</h3>
<p dir="auto">The method of analytic tableaux is a complete method for proving zeroth and first order logic problems. To export these proofs in human-readable form the <code>prove</code> function is exported. Instead of simply yielding a <code>true</code> or <code>false</code>, this function will return a full proof containing the steps taken to determine whether a set of propositions are consistent.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Deductive

@symbols a b c d

# basic example from above
prove(a ∧ b, ¬a)
#= Output:
┌─────────────┬───────────┬────────────────┬────────────┐
│ Line Number │ Statement │       Argument │ References │
│       Int64 │    String │         String │     String │
├─────────────┼───────────┼────────────────┼────────────┤
│           1 │     a ∧ b │     Assumption │            │
│           2 │      ¬(a) │     Assumption │            │
│           3 │         a │ Simplification │          1 │
│           4 │         b │ Simplification │          1 │
│           5 │  a ∧ ¬(a) │  Contradiction │       3, 2 │
└─────────────┴───────────┴────────────────┴────────────┘
=#

# a far more fun example :)
prove(a → b, b → c, c → d, a, ¬d)
#= Output:
┌─────────────┬──────────────────────────┬─────────────────────────┬────────────┐
│ Line Number │                Statement │                Argument │ References │
│       Int64 │                   String │                  String │     String │
├─────────────┼──────────────────────────┼─────────────────────────┼────────────┤
│           1 │                    a → b │              Assumption │            │
│           2 │                    b → c │              Assumption │            │
│           3 │                    c → d │              Assumption │            │
│           4 │                        a │              Assumption │            │
│           5 │                     ¬(d) │              Assumption │            │
│           6 │                 ¬(c) ∨ d │ Replacement Rule &lt;TODO&gt; │            │
│           7 │                 ¬(a) ∨ b │ Replacement Rule &lt;TODO&gt; │            │
│           8 │                 ¬(b) ∨ c │ Replacement Rule &lt;TODO&gt; │            │
│           9 │                     ¬(c) │                  Case 1 │          6 │
│          10 │                        d │                  Case 2 │          6 │
│          11 │                     ¬(a) │                  Case 1 │          7 │
│          12 │                        b │                  Case 2 │          7 │
│          13 │                 a ∧ ¬(a) │           Contradiction │      4, 11 │
│          14 │                     ¬(b) │                  Case 1 │          8 │
│          15 │                        c │                  Case 2 │          8 │
│          16 │                 b ∧ ¬(b) │           Contradiction │     12, 14 │
│          17 │                 c ∧ ¬(c) │           Contradiction │      15, 9 │
│          18 │ ¬(¬(b) ∨ c) ∧ (¬(b) ∨ c) │           Contradiction │     14, 15 │
│          19 │ ¬(¬(a) ∨ b) ∧ (¬(a) ∨ b) │           Contradiction │     11, 12 │
│          20 │                 d ∧ ¬(d) │           Contradiction │      10, 5 │
│          21 │ ¬(¬(c) ∨ d) ∧ (¬(c) ∨ d) │           Contradiction │      9, 10 │
└─────────────┴──────────────────────────┴─────────────────────────┴────────────┘
=#"><pre><span class="pl-k">using</span> Deductive

<span class="pl-c1">@symbols</span> a b c d

<span class="pl-c"><span class="pl-c">#</span> basic example from above</span>
<span class="pl-c1">prove</span>(a ∧ b, ¬a)
<span class="pl-c"><span class="pl-c">#=</span> Output:</span>
<span class="pl-c">┌─────────────┬───────────┬────────────────┬────────────┐</span>
<span class="pl-c">│ Line Number │ Statement │       Argument │ References │</span>
<span class="pl-c">│       Int64 │    String │         String │     String │</span>
<span class="pl-c">├─────────────┼───────────┼────────────────┼────────────┤</span>
<span class="pl-c">│           1 │     a ∧ b │     Assumption │            │</span>
<span class="pl-c">│           2 │      ¬(a) │     Assumption │            │</span>
<span class="pl-c">│           3 │         a │ Simplification │          1 │</span>
<span class="pl-c">│           4 │         b │ Simplification │          1 │</span>
<span class="pl-c">│           5 │  a ∧ ¬(a) │  Contradiction │       3, 2 │</span>
<span class="pl-c">└─────────────┴───────────┴────────────────┴────────────┘</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

<span class="pl-c"><span class="pl-c">#</span> a far more fun example :)</span>
<span class="pl-c1">prove</span>(a → b, b → c, c → d, a, ¬d)
<span class="pl-c"><span class="pl-c">#=</span> Output:</span>
<span class="pl-c">┌─────────────┬──────────────────────────┬─────────────────────────┬────────────┐</span>
<span class="pl-c">│ Line Number │                Statement │                Argument │ References │</span>
<span class="pl-c">│       Int64 │                   String │                  String │     String │</span>
<span class="pl-c">├─────────────┼──────────────────────────┼─────────────────────────┼────────────┤</span>
<span class="pl-c">│           1 │                    a → b │              Assumption │            │</span>
<span class="pl-c">│           2 │                    b → c │              Assumption │            │</span>
<span class="pl-c">│           3 │                    c → d │              Assumption │            │</span>
<span class="pl-c">│           4 │                        a │              Assumption │            │</span>
<span class="pl-c">│           5 │                     ¬(d) │              Assumption │            │</span>
<span class="pl-c">│           6 │                 ¬(c) ∨ d │ Replacement Rule &lt;TODO&gt; │            │</span>
<span class="pl-c">│           7 │                 ¬(a) ∨ b │ Replacement Rule &lt;TODO&gt; │            │</span>
<span class="pl-c">│           8 │                 ¬(b) ∨ c │ Replacement Rule &lt;TODO&gt; │            │</span>
<span class="pl-c">│           9 │                     ¬(c) │                  Case 1 │          6 │</span>
<span class="pl-c">│          10 │                        d │                  Case 2 │          6 │</span>
<span class="pl-c">│          11 │                     ¬(a) │                  Case 1 │          7 │</span>
<span class="pl-c">│          12 │                        b │                  Case 2 │          7 │</span>
<span class="pl-c">│          13 │                 a ∧ ¬(a) │           Contradiction │      4, 11 │</span>
<span class="pl-c">│          14 │                     ¬(b) │                  Case 1 │          8 │</span>
<span class="pl-c">│          15 │                        c │                  Case 2 │          8 │</span>
<span class="pl-c">│          16 │                 b ∧ ¬(b) │           Contradiction │     12, 14 │</span>
<span class="pl-c">│          17 │                 c ∧ ¬(c) │           Contradiction │      15, 9 │</span>
<span class="pl-c">│          18 │ ¬(¬(b) ∨ c) ∧ (¬(b) ∨ c) │           Contradiction │     14, 15 │</span>
<span class="pl-c">│          19 │ ¬(¬(a) ∨ b) ∧ (¬(a) ∨ b) │           Contradiction │     11, 12 │</span>
<span class="pl-c">│          20 │                 d ∧ ¬(d) │           Contradiction │      10, 5 │</span>
<span class="pl-c">│          21 │ ¬(¬(c) ∨ d) ∧ (¬(c) ∨ d) │           Contradiction │      9, 10 │</span>
<span class="pl-c">└─────────────┴──────────────────────────┴─────────────────────────┴────────────┘</span>
<span class="pl-c"><span class="pl-c">=#</span></span></pre></div>
<p dir="auto">As is clear from the second example, several arguments are missing regarding replacement rules, and the organization is rather poor. This feature is very much work in progress right now.</p>
</article></div>