<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p>Copyright for portions of project CombineML.jl are held by Samuel Jenkins, 2014
as part of project Orchestra.jl. All other copyright for project CombineML.jl
are held by Paulito Palmes, 2016.</p>
<p>The CombineML.jl package is licensed under the MIT "Expat" License:</p>
<p>You may also be interested to <a href="https://github.com/IBM/TSML.jl">TSML (Time Series Machine Learning)</a> package.</p>
<h1><a id="user-content-combineml" class="anchor" aria-hidden="true" href="#combineml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CombineML</h1>
<p><a href="https://zenodo.org/badge/latestdoi/83453995" rel="nofollow"><img src="https://camo.githubusercontent.com/44ab991a8eb3bbb5e21846b7525f9a313b71e6ce9ac4e7c2e9c4d8a6588c6c04/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f38333435333939352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/83453995.svg" style="max-width:100%;"></a>  <a href="https://gitter.im/CombineML-jl/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/f547e6055af40542856973c84ba886bc7199c162debac7e7a63c626957cd8b22/68747470733a2f2f6261646765732e6769747465722e696d2f436f6d62696e654d4c2d6a6c2f4c6f6262792e737667" alt="Join the chat at https://gitter.im/CombineML-jl/Lobby" data-canonical-src="https://badges.gitter.im/CombineML-jl/Lobby.svg" style="max-width:100%;"></a></p>
<p>Julia 1.0/Linux/OSX: <a href="https://travis-ci.org/ppalmes/CombineML.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4be974e3551813795ecdea0c733b8d68bf53b7dc0d9c55469d2d10b99e899e96/68747470733a2f2f7472617669732d63692e6f72672f7070616c6d65732f436f6d62696e654d4c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ppalmes/CombineML.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ppalmes/CombineML.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a7f8d8041212dc207eb366e5c5bff312610a9c0017d98ccaa4f67967e3c6d88e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7070616c6d65732f436f6d62696e654d4c2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ppalmes/CombineML.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>CombineML is a heterogeneous ensemble learning package for the Julia programming
language. It is driven by a uniform machine learner API designed for learner
composition.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>See the notebook for demo: <a href="https://github.com/ppalmes/CombineML.jl/blob/master/MetaModeling.ipynb">MetaModeling.ipnyb</a></p>
<p>We will cover how to predict on a dataset using CombineML.</p>
<h3><a id="user-content-obtain-data" class="anchor" aria-hidden="true" href="#obtain-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Obtain Data</h3>
<p>A tabular dataset will be used to obtain our features and labels.</p>
<p>This will be split it into a training and test set using holdout method.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import CombineML
using CombineML.Util
using CombineML.Transformers

try
  import RDatasets
catch
  using Pkg
  Pkg.add(&quot;RDatasets&quot;)
  import RDatasets
end

# use shorter module names
CU=CombineML.Util
CT=CombineML.Transformers
RD=RDatasets

# Obtain features and labels
dataset = RD.dataset(&quot;datasets&quot;, &quot;iris&quot;)
features = convert(Matrix,dataset[:, 1:(end-1)])
labels = convert(Array,dataset[:, end])

# Split into training and test sets
(train_ind, test_ind) = CU.holdout(size(features, 1), 0.3)
"><pre><span class="pl-k">import</span> CombineML
<span class="pl-k">using</span> CombineML<span class="pl-k">.</span>Util
<span class="pl-k">using</span> CombineML<span class="pl-k">.</span>Transformers

<span class="pl-k">try</span>
  <span class="pl-k">import</span> RDatasets
<span class="pl-k">catch</span>
  <span class="pl-k">using</span> Pkg
  Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>RDatasets<span class="pl-pds">"</span></span>)
  <span class="pl-k">import</span> RDatasets
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> use shorter module names</span>
CU<span class="pl-k">=</span>CombineML<span class="pl-k">.</span>Util
CT<span class="pl-k">=</span>CombineML<span class="pl-k">.</span>Transformers
RD<span class="pl-k">=</span>RDatasets

<span class="pl-c"><span class="pl-c">#</span> Obtain features and labels</span>
dataset <span class="pl-k">=</span> RD<span class="pl-k">.</span><span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)
features <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Matrix,dataset[:, <span class="pl-c1">1</span><span class="pl-k">:</span>(<span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>)])
labels <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array,dataset[:, <span class="pl-c1">end</span>])

<span class="pl-c"><span class="pl-c">#</span> Split into training and test sets</span>
(train_ind, test_ind) <span class="pl-k">=</span> CU<span class="pl-k">.</span><span class="pl-c1">holdout</span>(<span class="pl-c1">size</span>(features, <span class="pl-c1">1</span>), <span class="pl-c1">0.3</span>)</pre></div>
<h3><a id="user-content-create-a-learner" class="anchor" aria-hidden="true" href="#create-a-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a Learner</h3>
<p>A transformer processes features in some form. Coincidentally, a learner is a subtype of transformer.</p>
<p>A transformer can be created by instantiating it, taking an options dictionary as an optional argument.</p>
<p>All transformers, including learners are called in the same way.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Learner with default settings
learner = CT.PrunedTree()

# Learner with some of the default settings overriden
learner = CT.PrunedTree(Dict(
  :impl_options =&gt; Dict(
    :purity_threshold =&gt; 1.0
  )
))

# All learners are called in the same way.
learner = CT.StackEnsemble(Dict(
  :learners =&gt; [
    CT.PrunedTree(), 
    CT.RandomForest(),
    CT.DecisionStumpAdaboost()
  ], 
  :stacker =&gt; CT.RandomForest()
))
"><pre><span class="pl-c"><span class="pl-c">#</span> Learner with default settings</span>
learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>()

<span class="pl-c"><span class="pl-c">#</span> Learner with some of the default settings overriden</span>
learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:purity_threshold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>
  )
))

<span class="pl-c"><span class="pl-c">#</span> All learners are called in the same way.</span>
learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">StackEnsemble</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [
    CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>(), 
    CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>(),
    CT<span class="pl-k">.</span><span class="pl-c1">DecisionStumpAdaboost</span>()
  ], 
  <span class="pl-c1">:stacker</span> <span class="pl-k">=&gt;</span> CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>()
))</pre></div>
<h3><a id="user-content-create-a-pipeline" class="anchor" aria-hidden="true" href="#create-a-pipeline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a Pipeline</h3>
<p>Normally we may require the use of data pre-processing before the features are passed to the learner.</p>
<p>We shall use a pipeline transformer to chain many transformers in sequence.</p>
<p>In this case we shall one hot encode categorical features, impute NA values and numerically standardize before we call the learner.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Create pipeline
pipeline = CT.Pipeline(Dict(
  :transformers =&gt; [
    CT.OneHotEncoder(), # Encodes nominal features into numeric
    CT.Imputer(), # Imputes NA values
    CT.StandardScaler(), # Standardizes features 
    learner # Predicts labels on features
  ]
))
"><pre><span class="pl-c"><span class="pl-c">#</span> Create pipeline</span>
pipeline <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">Pipeline</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c1">:transformers</span> <span class="pl-k">=&gt;</span> [
    CT<span class="pl-k">.</span><span class="pl-c1">OneHotEncoder</span>(), <span class="pl-c"><span class="pl-c">#</span> Encodes nominal features into numeric</span>
    CT<span class="pl-k">.</span><span class="pl-c1">Imputer</span>(), <span class="pl-c"><span class="pl-c">#</span> Imputes NA values</span>
    CT<span class="pl-k">.</span><span class="pl-c1">StandardScaler</span>(), <span class="pl-c"><span class="pl-c">#</span> Standardizes features </span>
    learner <span class="pl-c"><span class="pl-c">#</span> Predicts labels on features</span>
  ]
))</pre></div>
<h3><a id="user-content-train-and-predict" class="anchor" aria-hidden="true" href="#train-and-predict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Train and Predict</h3>
<p>Training is done via the <code>fit!</code> function, predicton via <code>transform!</code>.</p>
<p>All transformers, provide these two functions. They are always called the same way.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Train
CT.fit!(pipeline, features[train_ind, :], labels[train_ind])

# Predict
predictions = CT.transform!(pipeline, features[test_ind, :])
"><pre><span class="pl-c"><span class="pl-c">#</span> Train</span>
CT<span class="pl-k">.</span><span class="pl-c1">fit!</span>(pipeline, features[train_ind, :], labels[train_ind])

<span class="pl-c"><span class="pl-c">#</span> Predict</span>
predictions <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">transform!</span>(pipeline, features[test_ind, :])</pre></div>
<h3><a id="user-content-assess" class="anchor" aria-hidden="true" href="#assess"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Assess</h3>
<p>Finally we assess how well our learner performed.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Assess predictions
result = CU.score(:accuracy, labels[test_ind], predictions)
"><pre><span class="pl-c"><span class="pl-c">#</span> Assess predictions</span>
result <span class="pl-k">=</span> CU<span class="pl-k">.</span><span class="pl-c1">score</span>(<span class="pl-c1">:accuracy</span>, labels[test_ind], predictions)</pre></div>
<h2><a id="user-content-available-transformers" class="anchor" aria-hidden="true" href="#available-transformers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Available Transformers</h2>
<p>Outlined are all the transformers currently available via CombineML.</p>
<h3><a id="user-content-combineml-1" class="anchor" aria-hidden="true" href="#combineml-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CombineML</h3>
<h4><a id="user-content-baseline-combinemljl-learner" class="anchor" aria-hidden="true" href="#baseline-combinemljl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Baseline (CombineML.jl Learner)</h4>
<p>Baseline learner that by default assigns the most frequent label.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
try
  import StatsBase
catch
  using Pkg
  Pkg.add(&quot;StatsBase&quot;)
  import StatsBase
end

learner = CT.Baseline(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Label assignment strategy.
  # Function that takes a label vector and returns the required output.
  :strategy =&gt; StatsBase.mode
))
"><pre><span class="pl-k">try</span>
  <span class="pl-k">import</span> StatsBase
<span class="pl-k">catch</span>
  <span class="pl-k">using</span> Pkg
  Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>StatsBase<span class="pl-pds">"</span></span>)
  <span class="pl-k">import</span> StatsBase
<span class="pl-k">end</span>

learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">Baseline</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Label assignment strategy.</span>
  <span class="pl-c"><span class="pl-c">#</span> Function that takes a label vector and returns the required output.</span>
  <span class="pl-c1">:strategy</span> <span class="pl-k">=&gt;</span> StatsBase<span class="pl-k">.</span>mode
))</pre></div>
<h4><a id="user-content-identity-combinemljl-transformer" class="anchor" aria-hidden="true" href="#identity-combinemljl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Identity (CombineML.jl Transformer)</h4>
<p>Identity transformer passes the features as is.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = CT.Identity()
"><pre>transformer <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">Identity</span>()</pre></div>
<h4><a id="user-content-voteensemble-combinemljl-learner" class="anchor" aria-hidden="true" href="#voteensemble-combinemljl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VoteEnsemble (CombineML.jl Learner)</h4>
<p>Set of machine learners that majority vote to decide prediction.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.VoteEnsemble(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Learners in voting committee.
  :learners =&gt; [CT.PrunedTree(), CT.DecisionStumpAdaboost(), CT.RandomForest()]
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">VoteEnsemble</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Learners in voting committee.</span>
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>(), CT<span class="pl-k">.</span><span class="pl-c1">DecisionStumpAdaboost</span>(), CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>()]
))</pre></div>
<h4><a id="user-content-stackensemble-combinemljl-learner" class="anchor" aria-hidden="true" href="#stackensemble-combinemljl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StackEnsemble (CombineML.jl Learner)</h4>
<p>Ensemble where a 'stack' learner learns on a set of learners' predictions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.StackEnsemble(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Set of learners that produce feature space for stacker.
  :learners =&gt; [CT.PrunedTree(), CT.DecisionStumpAdaboost(), CT.RandomForest()],
  # Machine learner that trains on set of learners' outputs.
  :stacker =&gt; CT.RandomForest(),
  # Proportion of training set left to train stacker itself.
  :stacker_training_proportion =&gt; 0.3,
  # Provide original features on top of learner outputs to stacker.
  :keep_original_features =&gt; false
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">StackEnsemble</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Set of learners that produce feature space for stacker.</span>
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>(), CT<span class="pl-k">.</span><span class="pl-c1">DecisionStumpAdaboost</span>(), CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>()],
  <span class="pl-c"><span class="pl-c">#</span> Machine learner that trains on set of learners' outputs.</span>
  <span class="pl-c1">:stacker</span> <span class="pl-k">=&gt;</span> CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>(),
  <span class="pl-c"><span class="pl-c">#</span> Proportion of training set left to train stacker itself.</span>
  <span class="pl-c1">:stacker_training_proportion</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.3</span>,
  <span class="pl-c"><span class="pl-c">#</span> Provide original features on top of learner outputs to stacker.</span>
  <span class="pl-c1">:keep_original_features</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>
))</pre></div>
<h4><a id="user-content-bestlearner-combinemljl-learner" class="anchor" aria-hidden="true" href="#bestlearner-combinemljl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BestLearner (CombineML.jl Learner)</h4>
<p>Selects best learner out of set.
Will perform a grid search on learners if options grid is provided.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.BestLearner(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Function to return partitions of instance indices.
  :partition_generator =&gt; (features, labels) -&gt; kfold(size(features, 1), 5),
  # Function that selects the best learner by index.
  # Arg learner_partition_scores is a (learner, partition) score matrix.
  :selection_function =&gt; (learner_partition_scores) -&gt; findmax(mean(learner_partition_scores, 2))[2],      
  # Score type returned by score() using respective output.
  :score_type =&gt; Real,
  # Candidate learners.
  :learners =&gt; [CT.PrunedTree(), CT.DecisionStumpAdaboost(), CT.RandomForest()],
  # Options grid for learners, to search through by BestLearner.
  # Format is [learner_1_options, learner_2_options, ...]
  # where learner_options is same as a learner's options but
  # with a list of values instead of scalar.
  :learner_options_grid =&gt; nothing
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">BestLearner</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Function to return partitions of instance indices.</span>
  <span class="pl-c1">:partition_generator</span> <span class="pl-k">=&gt;</span> (features, labels) <span class="pl-k">-&gt;</span> <span class="pl-c1">kfold</span>(<span class="pl-c1">size</span>(features, <span class="pl-c1">1</span>), <span class="pl-c1">5</span>),
  <span class="pl-c"><span class="pl-c">#</span> Function that selects the best learner by index.</span>
  <span class="pl-c"><span class="pl-c">#</span> Arg learner_partition_scores is a (learner, partition) score matrix.</span>
  <span class="pl-c1">:selection_function</span> <span class="pl-k">=&gt;</span> (learner_partition_scores) <span class="pl-k">-&gt;</span> <span class="pl-c1">findmax</span>(<span class="pl-c1">mean</span>(learner_partition_scores, <span class="pl-c1">2</span>))[<span class="pl-c1">2</span>],      
  <span class="pl-c"><span class="pl-c">#</span> Score type returned by score() using respective output.</span>
  <span class="pl-c1">:score_type</span> <span class="pl-k">=&gt;</span> Real,
  <span class="pl-c"><span class="pl-c">#</span> Candidate learners.</span>
  <span class="pl-c1">:learners</span> <span class="pl-k">=&gt;</span> [CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>(), CT<span class="pl-k">.</span><span class="pl-c1">DecisionStumpAdaboost</span>(), CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>()],
  <span class="pl-c"><span class="pl-c">#</span> Options grid for learners, to search through by BestLearner.</span>
  <span class="pl-c"><span class="pl-c">#</span> Format is [learner_1_options, learner_2_options, ...]</span>
  <span class="pl-c"><span class="pl-c">#</span> where learner_options is same as a learner's options but</span>
  <span class="pl-c"><span class="pl-c">#</span> with a list of values instead of scalar.</span>
  <span class="pl-c1">:learner_options_grid</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
))</pre></div>
<h4><a id="user-content-onehotencoder-combinemljl-transformer" class="anchor" aria-hidden="true" href="#onehotencoder-combinemljl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OneHotEncoder (CombineML.jl Transformer)</h4>
<p>Transforms nominal features into one-hot form
and coerces the instance matrix to be of element type Float64.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = CT.OneHotEncoder(Dict(
  # Nominal columns
  :nominal_columns =&gt; nothing,
  # Nominal column values map. Key is column index, value is list of
  # possible values for that column.
  :nominal_column_values_map =&gt; nothing
))
"><pre>transformer <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">OneHotEncoder</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Nominal columns</span>
  <span class="pl-c1">:nominal_columns</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>,
  <span class="pl-c"><span class="pl-c">#</span> Nominal column values map. Key is column index, value is list of</span>
  <span class="pl-c"><span class="pl-c">#</span> possible values for that column.</span>
  <span class="pl-c1">:nominal_column_values_map</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
))</pre></div>
<h4><a id="user-content-imputer-combinemljl-transformer" class="anchor" aria-hidden="true" href="#imputer-combinemljl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Imputer (CombineML.jl Transformer)</h4>
<p>Imputes NaN values from Float64 features.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = CT.Imputer(Dict(
  # Imputation strategy.
  # Statistic that takes a vector such as mean or median.
  :strategy =&gt; mean
))
"><pre>transformer <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">Imputer</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Imputation strategy.</span>
  <span class="pl-c"><span class="pl-c">#</span> Statistic that takes a vector such as mean or median.</span>
  <span class="pl-c1">:strategy</span> <span class="pl-k">=&gt;</span> mean
))</pre></div>
<h4><a id="user-content-pipeline-combinemljl-transformer" class="anchor" aria-hidden="true" href="#pipeline-combinemljl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pipeline (CombineML.jl Transformer)</h4>
<p>Chains multiple transformers in sequence.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = CT.Pipeline(Dict(
  # Transformers as list to chain in sequence.
  :transformers =&gt; [CT.OneHotEncoder(), CT.Imputer()],
  # Transformer options as list applied to same index transformer.
  :transformer_options =&gt; nothing
))
"><pre>transformer <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">Pipeline</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Transformers as list to chain in sequence.</span>
  <span class="pl-c1">:transformers</span> <span class="pl-k">=&gt;</span> [CT<span class="pl-k">.</span><span class="pl-c1">OneHotEncoder</span>(), CT<span class="pl-k">.</span><span class="pl-c1">Imputer</span>()],
  <span class="pl-c"><span class="pl-c">#</span> Transformer options as list applied to same index transformer.</span>
  <span class="pl-c1">:transformer_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
))</pre></div>
<h4><a id="user-content-wrapper-combinemljl-transformer" class="anchor" aria-hidden="true" href="#wrapper-combinemljl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wrapper (CombineML.jl Transformer)</h4>
<p>Wraps around an CombineML transformer.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = Wrapper(Dict(
  # Transformer to call.
  :transformer =&gt; CT.OneHotEncoder(),
  # Transformer options.
  :transformer_options =&gt; nothing
))
"><pre>transformer <span class="pl-k">=</span> <span class="pl-c1">Wrapper</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Transformer to call.</span>
  <span class="pl-c1">:transformer</span> <span class="pl-k">=&gt;</span> CT<span class="pl-k">.</span><span class="pl-c1">OneHotEncoder</span>(),
  <span class="pl-c"><span class="pl-c">#</span> Transformer options.</span>
  <span class="pl-c1">:transformer_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
))</pre></div>
<h3><a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia</h3>
<h4><a id="user-content-prunedtree-decisiontreejl-learner" class="anchor" aria-hidden="true" href="#prunedtree-decisiontreejl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PrunedTree (DecisionTree.jl Learner)</h4>
<p>Pruned CART decision tree.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.PrunedTree(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Options specific to this implementation.
  :impl_options =&gt; Dict(
    # Merge leaves having &gt;= purity_threshold combined purity.
    :purity_threshold =&gt; 1.0,
    # Maximum depth of the decision tree (default: no maximum).
    :max_depth =&gt; -1,
    # Minimum number of samples each leaf needs to have.
    :min_samples_leaf =&gt; 1,
    # Minimum number of samples in needed for a split.
    :min_samples_split =&gt; 2,
    # Minimum purity increase needed for a split.
    :min_purity_increase =&gt; 0.0
  ) 
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">PrunedTree</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c"><span class="pl-c">#</span> Merge leaves having &gt;= purity_threshold combined purity.</span>
    <span class="pl-c1">:purity_threshold</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>,
    <span class="pl-c"><span class="pl-c">#</span> Maximum depth of the decision tree (default: no maximum).</span>
    <span class="pl-c1">:max_depth</span> <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1</span>,
    <span class="pl-c"><span class="pl-c">#</span> Minimum number of samples each leaf needs to have.</span>
    <span class="pl-c1">:min_samples_leaf</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>,
    <span class="pl-c"><span class="pl-c">#</span> Minimum number of samples in needed for a split.</span>
    <span class="pl-c1">:min_samples_split</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>,
    <span class="pl-c"><span class="pl-c">#</span> Minimum purity increase needed for a split.</span>
    <span class="pl-c1">:min_purity_increase</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.0</span>
  ) 
))</pre></div>
<h4><a id="user-content-randomforest-decisiontreejl-learner" class="anchor" aria-hidden="true" href="#randomforest-decisiontreejl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RandomForest (DecisionTree.jl Learner)</h4>
<p>Random forest (CART).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.RandomForest(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Options specific to this implementation.
  :impl_options =&gt; Dict(
    # Number of features to train on with trees (default: 0, keep all).
    # Good values are square root or log2 of total number of features, rounded.
    # Number of trees in forest.
    :num_trees =&gt; 10,
    # Proportion of trainingset to be used for trees.
    :partial_sampling =&gt; 0.7,
    # Maximum depth of each decision tree (default: no maximum).
    :max_depth =&gt; -1
  )
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">RandomForest</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c"><span class="pl-c">#</span> Number of features to train on with trees (default: 0, keep all).</span>
    <span class="pl-c"><span class="pl-c">#</span> Good values are square root or log2 of total number of features, rounded.</span>
    <span class="pl-c"><span class="pl-c">#</span> Number of trees in forest.</span>
    <span class="pl-c1">:num_trees</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>,
    <span class="pl-c"><span class="pl-c">#</span> Proportion of trainingset to be used for trees.</span>
    <span class="pl-c1">:partial_sampling</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.7</span>,
    <span class="pl-c"><span class="pl-c">#</span> Maximum depth of each decision tree (default: no maximum).</span>
    <span class="pl-c1">:max_depth</span> <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
  )
))</pre></div>
<h4><a id="user-content-decisionstumpadaboost-decisiontreejl-learner" class="anchor" aria-hidden="true" href="#decisionstumpadaboost-decisiontreejl-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DecisionStumpAdaboost (DecisionTree.jl Learner)</h4>
<p>Adaboosted decision stumps.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.DecisionStumpAdaboost(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  # Options specific to this implementation.
  :impl_options =&gt; Dict(
    # Number of boosting iterations.
    :num_iterations =&gt; 7
  )
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">DecisionStumpAdaboost</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c"><span class="pl-c">#</span> Number of boosting iterations.</span>
    <span class="pl-c1">:num_iterations</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">7</span>
  )
))</pre></div>
<h4><a id="user-content-pca-dimensionalityreductionjl-transformer" class="anchor" aria-hidden="true" href="#pca-dimensionalityreductionjl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PCA (DimensionalityReduction.jl Transformer)</h4>
<p>Principal Component Analysis rotation
on features.
Features ordered by maximal variance descending.</p>
<p>Fails if zero-variance feature exists. Based on MultivariateStats PCA</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = CT.PCA(Dict(
  :pratio =&gt; 1.0,
  :maxoutdim =&gt; 5
))
"><pre>transformer <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">PCA</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c1">:pratio</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>,
  <span class="pl-c1">:maxoutdim</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>
))</pre></div>
<h4><a id="user-content-standardscaler-mlbasejl-transformer" class="anchor" aria-hidden="true" href="#standardscaler-mlbasejl-transformer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StandardScaler (MLBase.jl Transformer)</h4>
<p>Standardizes each feature using (X - mean) / stddev.
Will produce NaN if standard deviation is zero.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="transformer = CT.StandardScaler(Dict(
  # Center features
  :center =&gt; true,
  # Scale features
  :scale =&gt; true
))
"><pre>transformer <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">StandardScaler</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Center features</span>
  <span class="pl-c1">:center</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
  <span class="pl-c"><span class="pl-c">#</span> Scale features</span>
  <span class="pl-c1">:scale</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>
))</pre></div>
<h3><a id="user-content-python" class="anchor" aria-hidden="true" href="#python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Python</h3>
<p>See the scikit-learn <a href="http://scikit-learn.org/stable/modules/classes.html" rel="nofollow">API</a> for what options are available per learner.</p>
<h4><a id="user-content-skllearner-scikit-learn-015-learner" class="anchor" aria-hidden="true" href="#skllearner-scikit-learn-015-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SKLLearner (scikit-learn 0.15 Learner)</h4>
<p>Wrapper for scikit-learn that provides access to most learners.</p>
<p>Options for the specific scikit-learn learner is to be passed
in <code>options[:impl_options]</code> dictionary.</p>
<p>Available Classifiers:</p>
<ul>
<li>AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier, GradientBoostingClassifier, RandomForestClassifier, LDA, LogisticRegression, PassiveAggressiveClassifier, RidgeClassifier, RidgeClassifierCV, SGDClassifier, KNeighborsClassifier, RadiusNeighborsClassifier, NearestCentroid, QDA, SVC, LinearSVC, NuSVC, DecisionTreeClassifier, GaussianNB, MultinomialNB, ComplementNB, BernoulliNB</li>
</ul>
<p>Available Regressors:</p>
<ul>
<li>SVR, Ridge, RidgeCV, Lasso, ElasticNet, Lars, LassoLars, OrthogonalMatchingPursuit, BayesianRidge, ARDRegression, SGDRegressor, PassiveAggressiveRegressor, KernelRidge, KNeighborsRegressor, RadiusNeighborsRegressor, GaussianProcessRegressor, DecisionTreeRegressor, RandomForestRegressor, ExtraTreesRegressor, AdaBoostRegressor, GradientBoostingRegressor, IsotonicRegression, MLPRegressor</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# classifier example
learner = CT.SKLLearner(Dict(
  # Output to train against
  # (classification).
  :output =&gt; :class,
  :learner =&gt; &quot;LinearSVC&quot;,
  # Options specific to this implementation.
  :impl_options =&gt; Dict()
))

# regression example
learner = CT.SKLLearner(Dict(
  # Output to train against
  # (regression).
  :output =&gt; :reg,
  :learner =&gt; &quot;GradientBoostingRegressor&quot;,
  # Options specific to this implementation.
  :impl_options =&gt; Dict()
))
"><pre><span class="pl-c"><span class="pl-c">#</span> classifier example</span>
learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">SKLLearner</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (classification).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c1">:learner</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>LinearSVC<span class="pl-pds">"</span></span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>()
))

<span class="pl-c"><span class="pl-c">#</span> regression example</span>
learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">SKLLearner</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (regression).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:reg</span>,
  <span class="pl-c1">:learner</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>GradientBoostingRegressor<span class="pl-pds">"</span></span>,
  <span class="pl-c"><span class="pl-c">#</span> Options specific to this implementation.</span>
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>()
))</pre></div>
<h3><a id="user-content-r" class="anchor" aria-hidden="true" href="#r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>R</h3>
<p>RCall is used to interface with caret learners.</p>
<p>R 'caret' library offers more than 100 learners.
See <a href="http://caret.r-forge.r-project.org/modelList.html" rel="nofollow">here</a> for more details.</p>
<h4><a id="user-content-crtlearner-caret-60-learner" class="anchor" aria-hidden="true" href="#crtlearner-caret-60-learner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CRTLearner (caret 6.0 Learner)</h4>
<p>CARET wrapper that provides access to all learners.</p>
<p>Options for the specific CARET learner is to be passed
in <code>options[:impl_options]</code> dictionary.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="learner = CT.CRTLearner(Dict(
  # Output to train against
  # (:class).
  :output =&gt; :class,
  :learner =&gt; &quot;svmLinear&quot;,
  :impl_options =&gt; Dict()
))
"><pre>learner <span class="pl-k">=</span> CT<span class="pl-k">.</span><span class="pl-c1">CRTLearner</span>(<span class="pl-c1">Dict</span>(
  <span class="pl-c"><span class="pl-c">#</span> Output to train against</span>
  <span class="pl-c"><span class="pl-c">#</span> (:class).</span>
  <span class="pl-c1">:output</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:class</span>,
  <span class="pl-c1">:learner</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>svmLinear<span class="pl-pds">"</span></span>,
  <span class="pl-c1">:impl_options</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>()
))</pre></div>
<h2><a id="user-content-known-limitations" class="anchor" aria-hidden="true" href="#known-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Known Limitations</h2>
<p>Learners have only been tested on numeric features.</p>
<p>Inconsistencies may result in using nominal features directly without a numeric transformation (i.e. OneHotEncoder).</p>
<h2><a id="user-content-misc" class="anchor" aria-hidden="true" href="#misc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Misc</h2>
<p>The links provided below will only work if you are viewing this in the GitHub repository.</p>
<h3><a id="user-content-changes" class="anchor" aria-hidden="true" href="#changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changes</h3>
<p>See <a href="CHANGELOG.yml">CHANGELOG.yml</a>.</p>
<h3><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h3>
<p>MIT "Expat" License. See <a href="LICENSE.md">LICENSE.md</a>.</p>
</article></div>