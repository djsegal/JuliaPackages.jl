<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-extxyzjl" class="anchor" aria-hidden="true" href="#extxyzjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExtXYZ.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fff0a6ec76a5c5b7567cb0d4278723fa1a51a9084c03dd627587858546cd5185/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f6c696241746f6d732f45787458595a2e6a6c2f43492e796d6c3f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/fff0a6ec76a5c5b7567cb0d4278723fa1a51a9084c03dd627587858546cd5185/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f6c696241746f6d732f45787458595a2e6a6c2f43492e796d6c3f6272616e63683d6d6173746572" alt="GitHub Workflow Status" data-canonical-src="https://img.shields.io/github/actions/workflow/status/libAtoms/ExtXYZ.jl/CI.yml?branch=master" style="max-width: 100%;"></a> <a href="https://libAtoms.github.io/ExtXYZ.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://libatoms.github.io/ExtXYZ.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides Julia bindings for the <a href="https://github.com/libAtoms/extxyz">extxyz</a> C library which implements a parser and writer for the extended XYZ file format used in materials and molecular modelling, following the <a href="https://github.com/libAtoms/extxyz#extended-xyz-specification-and-parsing-tools">specification</a> set out in the extxyz repo. Moreover the <code>ExtXYZ.Atoms</code> object directly adheres to the <a href="https://github.com/JuliaMolSim/AtomsBase.jl">AtomsBase</a> common interface for atomistic structures.</p>
<p dir="auto"><strong>Maintainer:</strong> James Kermode (<a href="https://github.com/jameskermode">@jameskermode</a>).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is registered in the General registry, so installation of the latest stable release is as simple as pressing <code>]</code> to enter <code>pkg&gt;</code> mode in the Julia REPL, and then entering:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add ExtXYZ"><pre>pkg<span class="pl-k">&gt;</span> add ExtXYZ</pre></div>
<p dir="auto">or for the development version:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; dev https://github.com/libAtoms/ExtXYZ.jl"><pre>pkg<span class="pl-k">&gt;</span> dev https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>libAtoms<span class="pl-k">/</span>ExtXYZ<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li>The <a href="https://github.com/JuliaMolSim/JuLIP.jl">JuLIP.jl</a> package is an optional - but recommended - companion. JuLIP can use <code>ExtXYZ.jl</code> to read and write extended XYZ files to/from <code>JuLIP.Atoms</code> instances, using the functions <code>JuLIP.read_extxyz()</code> and <code>JuLIP.write_extxyz()</code>.</li>
<li>The package is integrated with <a href="https://github.com/mfherbst/AtomsIO.jl">AtomsIO.jl</a> to provide a uniform interface (based on <a href="https://github.com/JuliaMolSim/AtomsBase.jl">AtomsBase</a>) for reading and writing a large range of atomistic structure files.</li>
</ul>
<p dir="auto">Please open issues/PRs here with suggestions of other packages it would be useful to provide interfaces to.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<p dir="auto">Four key functions are exported: <code>read_frame()</code> and <code>write_frame()</code> for reading and writing single configurations (snapshots), respectively, and <code>read_frames()</code> and <code>write_frames()</code> for reading and writing trajectories. Moreover <code>ExtXYZ.Atoms</code> provides a datastructure to expose the read configurations in an <a href="https://github.com/JuliaMolSim/AtomsBase.jl">AtomsBase</a>-compatible manner.
All read and write functions can work with string filenames, an open <code>Base.IO</code> instance or (intended primarily for internal use) a C <code>FILE*</code> pointer, stored as a <code>Ptr{Cvoid}</code> type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ExtXYZ

frame = read_frame(&quot;input.xyz&quot;)  # single atomic configuration, represented as a Dict{String}{Any}
write_frame(&quot;output.xyz&quot;, frame) # write a single frame to `output.xyz`. 

frame10 = read_frame(&quot;input.xyz&quot;, 10) # read a specific frame, counting from 1 for first frame in file

all_frames = read_frames(&quot;seq.xyz&quot;)  # read all frames, returns Vector{Dict{String}{Any}}
frames = read_frames(&quot;seq.xyz&quot;, 1:4) # specific range of frames

write_frames(&quot;output.xyz&quot;, frames, append=true) # append four frames to output

# Get a frame as AtomsBase-compatible ExtXYZ.Atoms object:
Atoms(read_frame(&quot;input.xyz&quot;))

# Get list of frames as AtomsBase-compatible ExtXYZ.Atoms object:
Atoms.(read_frames(&quot;seq.xyz&quot;, 1:4)"><pre><span class="pl-k">using</span> ExtXYZ

frame <span class="pl-k">=</span> <span class="pl-c1">read_frame</span>(<span class="pl-s"><span class="pl-pds">"</span>input.xyz<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> single atomic configuration, represented as a Dict{String}{Any}</span>
<span class="pl-c1">write_frame</span>(<span class="pl-s"><span class="pl-pds">"</span>output.xyz<span class="pl-pds">"</span></span>, frame) <span class="pl-c"><span class="pl-c">#</span> write a single frame to `output.xyz`. </span>

frame10 <span class="pl-k">=</span> <span class="pl-c1">read_frame</span>(<span class="pl-s"><span class="pl-pds">"</span>input.xyz<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>) <span class="pl-c"><span class="pl-c">#</span> read a specific frame, counting from 1 for first frame in file</span>

all_frames <span class="pl-k">=</span> <span class="pl-c1">read_frames</span>(<span class="pl-s"><span class="pl-pds">"</span>seq.xyz<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> read all frames, returns Vector{Dict{String}{Any}}</span>
frames <span class="pl-k">=</span> <span class="pl-c1">read_frames</span>(<span class="pl-s"><span class="pl-pds">"</span>seq.xyz<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> specific range of frames</span>

<span class="pl-c1">write_frames</span>(<span class="pl-s"><span class="pl-pds">"</span>output.xyz<span class="pl-pds">"</span></span>, frames, append<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> append four frames to output</span>

<span class="pl-c"><span class="pl-c">#</span> Get a frame as AtomsBase-compatible ExtXYZ.Atoms object:</span>
<span class="pl-c1">Atoms</span>(<span class="pl-c1">read_frame</span>(<span class="pl-s"><span class="pl-pds">"</span>input.xyz<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Get list of frames as AtomsBase-compatible ExtXYZ.Atoms object:</span>
<span class="pl-c1">Atoms</span>.(<span class="pl-c1">read_frames</span>(<span class="pl-s"><span class="pl-pds">"</span>seq.xyz<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>)</pre></div>
<p dir="auto">The function <code>iread_frames()</code> provides lazy file-reading using a <code>Channel</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for frame in iread_frames(&quot;input.xyz&quot;)
    process(frame) # do something with each frame
do"><pre><span class="pl-k">for</span> frame <span class="pl-k">in</span> <span class="pl-c1">iread_frames</span>(<span class="pl-s"><span class="pl-pds">"</span>input.xyz<span class="pl-pds">"</span></span>)
    <span class="pl-c1">process</span>(frame) <span class="pl-c"><span class="pl-c">#</span> do something with each frame</span>
<span class="pl-k">do</span></pre></div>
<p dir="auto"><code>write_frames()</code> can also be used for asynchronous writing by passing in a <code>Channel</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Channel() do ch
    @async write_frames(outfile, ch)
    
    for frame in frames
        put!(ch, frame)
    end
end"><pre><span class="pl-c1">Channel</span>() <span class="pl-k">do</span> ch
    <span class="pl-c1">@async</span> <span class="pl-c1">write_frames</span>(outfile, ch)
    
    <span class="pl-k">for</span> frame <span class="pl-k">in</span> frames
        <span class="pl-c1">put!</span>(ch, frame)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-atoms-data-structure" class="anchor" aria-hidden="true" href="#atoms-data-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Atoms data structure</h2>
<p dir="auto">In lieu of a package-independent data structure for representing atomic structures (i.e. an equivalent to ASE's <code>Atoms</code> class in the Python ecosystem), this package uses a <code>Dict{String}{Any}</code>. For the extended XYZ file:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="8
Lattice=&quot;5.44 0.0 0.0 0.0 5.44 0.0 0.0 0.0 5.44&quot; Properties=species:S:1:pos:R:3 Time=0.0
Si        0.00000000      0.00000000      0.00000000
Si        1.36000000      1.36000000      1.36000000
Si        2.72000000      2.72000000      0.00000000
Si        4.08000000      4.08000000      1.36000000
Si        2.72000000      0.00000000      2.72000000
Si        4.08000000      1.36000000      4.08000000
Si        0.00000000      2.72000000      2.72000000
Si        1.36000000      4.08000000      4.08000000"><pre class="notranslate"><code>8
Lattice="5.44 0.0 0.0 0.0 5.44 0.0 0.0 0.0 5.44" Properties=species:S:1:pos:R:3 Time=0.0
Si        0.00000000      0.00000000      0.00000000
Si        1.36000000      1.36000000      1.36000000
Si        2.72000000      2.72000000      0.00000000
Si        4.08000000      4.08000000      1.36000000
Si        2.72000000      0.00000000      2.72000000
Si        4.08000000      1.36000000      4.08000000
Si        0.00000000      2.72000000      2.72000000
Si        1.36000000      4.08000000      4.08000000
</code></pre></div>
<p dir="auto">The internal representation, shown in JSON format for readability, is as follows:</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{
   &quot;N_atoms&quot;: 8,
   &quot;arrays&quot;: {
      &quot;pos&quot;: [
         [
            0.0,
            0.0,
            0.0
         ],
         [
            1.36,
            1.36,
            1.36
         ],
         [
            2.72,
            2.72,
            0.0
         ],
         [
            4.08,
            4.08,
            1.36
         ],
         [
            2.72,
            0.0,
            2.72
         ],
         [
            4.08,
            1.36,
            4.08
         ],
         [
            0.0,
            2.72,
            2.72
         ],
         [
            1.36,
            4.08,
            4.08
         ]
      ],
      &quot;species&quot;: [
         &quot;Si&quot;,
         &quot;Si&quot;,
         &quot;Si&quot;,
         &quot;Si&quot;,
         &quot;Si&quot;,
         &quot;Si&quot;,
         &quot;Si&quot;,
         &quot;Si&quot;
      ]
   },
   &quot;info&quot;: {
      &quot;Time&quot;: 0.0
   },
   &quot;cell&quot;: [
      [
         5.44,
         0.0,
         0.0
      ],
      [
         0.0,
         5.44,
         0.0
      ],
      [
         0.0,
         0.0,
         5.44
      ]
   ]
}"><pre>{
   <span class="pl-ent">"N_atoms"</span>: <span class="pl-c1">8</span>,
   <span class="pl-ent">"arrays"</span>: {
      <span class="pl-ent">"pos"</span>: [
         [
            <span class="pl-c1">0.0</span>,
            <span class="pl-c1">0.0</span>,
            <span class="pl-c1">0.0</span>
         ],
         [
            <span class="pl-c1">1.36</span>,
            <span class="pl-c1">1.36</span>,
            <span class="pl-c1">1.36</span>
         ],
         [
            <span class="pl-c1">2.72</span>,
            <span class="pl-c1">2.72</span>,
            <span class="pl-c1">0.0</span>
         ],
         [
            <span class="pl-c1">4.08</span>,
            <span class="pl-c1">4.08</span>,
            <span class="pl-c1">1.36</span>
         ],
         [
            <span class="pl-c1">2.72</span>,
            <span class="pl-c1">0.0</span>,
            <span class="pl-c1">2.72</span>
         ],
         [
            <span class="pl-c1">4.08</span>,
            <span class="pl-c1">1.36</span>,
            <span class="pl-c1">4.08</span>
         ],
         [
            <span class="pl-c1">0.0</span>,
            <span class="pl-c1">2.72</span>,
            <span class="pl-c1">2.72</span>
         ],
         [
            <span class="pl-c1">1.36</span>,
            <span class="pl-c1">4.08</span>,
            <span class="pl-c1">4.08</span>
         ]
      ],
      <span class="pl-ent">"species"</span>: [
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>Si<span class="pl-pds">"</span></span>
      ]
   },
   <span class="pl-ent">"info"</span>: {
      <span class="pl-ent">"Time"</span>: <span class="pl-c1">0.0</span>
   },
   <span class="pl-ent">"cell"</span>: [
      [
         <span class="pl-c1">5.44</span>,
         <span class="pl-c1">0.0</span>,
         <span class="pl-c1">0.0</span>
      ],
      [
         <span class="pl-c1">0.0</span>,
         <span class="pl-c1">5.44</span>,
         <span class="pl-c1">0.0</span>
      ],
      [
         <span class="pl-c1">0.0</span>,
         <span class="pl-c1">0.0</span>,
         <span class="pl-c1">5.44</span>
      ]
   ]
}</pre></div>
<p dir="auto">Important dictionary keys include:</p>
<ul dir="auto">
<li><code>N_atoms</code> - the number of atoms (mandatory)</li>
<li><code>cell</code> - the unit cell, a 3x3 matrix of floats containing the cell vectors as rows, i.e. the same as <a href="https://wiki.fysik.dtu.dk/ase/ase/cell.html#ase.cell.Cell" rel="nofollow">ASE</a> (mandatory)</li>
<li><code>pbc</code> - periodic boundary conditions, <code>Vector{Bool}</code> of length 3 (optional)</li>
<li><code>info</code> - dictionary containing per-configuration key/value pairs parsed from the comment (line #2 in each frame). These can include scalars, vectors and matrices of integer, real, bool and string scalars or vectors. (mandatory, can be empty)</li>
<li><code>arrays</code> - dictionary containing per-atom properties as a <code>N_component x N_atoms</code> matrix, reduced to a vector for the case <code>N_component = 1</code>. These represent scalar (<code>N_component = 1</code>) or vector (<code>N_component &gt; 1</code>) per-atom properties, of integer (<code>I</code>), real (<code>R</code>), bool, (<code>L</code>) or string (<code>S</code>, scalars only) type. The set of properties is extracted from the special <code>Properties</code> key in the comment line. (mandatory, and must contain at least a string property <code>"species"</code> containing atomic symbols and a 3-column vector property</li>
</ul>
</article></div>