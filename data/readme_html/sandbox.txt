<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sandboxjl" class="anchor" aria-hidden="true" href="#sandboxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sandbox.jl</h1>
<p dir="auto"><a href="https://staticfloat.github.io/Sandbox.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://staticfloat.github.io/Sandbox.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/staticfloat/Sandbox.jl/actions/workflows/ci.yml"><img src="https://github.com/staticfloat/Sandbox.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/staticfloat/Sandbox.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/501d6298694b2a40b5ff91df48b6a073aec20d87aaceceb1d4fe9a93689f403c/68747470733a2f2f636f6465636f762e696f2f67682f737461746963666c6f61742f53616e64626f782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/staticfloat/Sandbox.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">The cultured host's toolkit for ill-mannered Linux guests.</p>
</blockquote>
<p dir="auto">This package provides basic containerization tools for running Linux guests on a variety of platforms.
As of the time of writing, it supports two execution backends:</p>
<ul dir="auto">
<li>
<p dir="auto">A Linux User Namespaces executor, which is very fast and lightweight</p>
</li>
<li>
<p dir="auto">A Docker executor which is slower, but more compatible (it works on macOS, and may work on Windows)</p>
</li>
</ul>
<p dir="auto">The executors are responsible for running/virtualizing a given <code>Cmd</code> within a root filesystem that is defined by the user, along with various paths that can be mounted within the sandbox.
These capabilities were originally built for <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl">BinaryBuilder.jl</a>, however this functionality is now mature enough that it may be useful elsewhere.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<p dir="auto">To make use of this toolkit, you will need to have a root filesystem image that you want to use.
This package comes with a minimal Debian rootfs that can be used for quick tests, to launch <code>/bin/bash</code> in an interactive shell, run the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Sandbox

config = SandboxConfig(
    Dict(&quot;/&quot; =&gt; Sandbox.debian_rootfs());
    stdin, stdout, stderr,
)
with_executor() do exe
    run(exe, config, `/bin/bash -l`)
end"><pre><span class="pl-k">using</span> Sandbox

config <span class="pl-k">=</span> <span class="pl-c1">SandboxConfig</span>(
    <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> Sandbox<span class="pl-k">.</span><span class="pl-c1">debian_rootfs</span>());
    <span class="pl-c1">stdin</span>, <span class="pl-c1">stdout</span>, <span class="pl-c1">stderr</span>,
)
<span class="pl-c1">with_executor</span>() <span class="pl-k">do</span> exe
    <span class="pl-c1">run</span>(exe, config, <span class="pl-s"><span class="pl-pds">`</span>/bin/bash -l<span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">While this launches an interactive session due to hooking up <code>stdout</code>/<code>stdin</code>, one can easily capture output by setting <code>stdout</code> to an <code>IOBuffer</code>, or even a <code>PipeBuffer</code> to chain together multiple processes from different sandboxes.</p>
<h2 dir="auto"><a id="user-content-getting-more-rootfs-images" class="anchor" aria-hidden="true" href="#getting-more-rootfs-images"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting more rootfs images</h2>
<p dir="auto">To use more interesting rootfs images, you can either create your own using tools such as <a href="https://wiki.debian.org/Debootstrap" rel="nofollow"><code>debootstrap</code></a> or you can pull one from docker by using the <code>pull_docker_image()</code> function defined within this package.  See the <a href="contrib/"><code>contrib</code></a> directory for examples of both.</p>
<p dir="auto">You can also check out the latest releases of the <a href="https://github.com/JuliaCI/rootfs-images/"><code>JuliaCI/rootfs-images</code> repository</a>, which curates a collection of rootfs images for use in CI workloads.</p>
</article></div>