<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-openmdaojl" class="anchor" aria-hidden="true" href="#openmdaojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OpenMDAO.jl</h1>
<p dir="auto"><a href="https://github.com/byuflowlab/OpenMDAO.jl/actions/workflows/CI.yaml"><img src="https://github.com/byuflowlab/OpenMDAO.jl/actions/workflows/CI.yaml/badge.svg?branch=master" alt="Tests" style="max-width: 100%;"></a>
<a href="https://byuflowlab.github.io/OpenMDAO.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-what" class="anchor" aria-hidden="true" href="#what"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What?</h2>
<p dir="auto">Use Julia with <a href="https://openmdao.org/" rel="nofollow">OpenMDAO</a>!
OpenMDAO.jl is a Julia package that allows a user to:</p>
<ul dir="auto">
<li>Write OpenMDAO <code>Component</code>s in Julia, and incorporate these components into a OpenMDAO model.</li>
<li>Create and run optimizations in Julia, using OpenMDAO as a library.</li>
</ul>
<p dir="auto">OpenMDAO.jl consists of three pieces of software:</p>
<ul dir="auto">
<li>OpenMDAOCore.jl: A small, pure-Julia package that allows users to define Julia code that will eventually be used in an OpenMDAO <code>Problem</code>. OpenMDAOCore.jl defines two Julia abstract types (<code>AbstractExplicitComponent</code> and <code>AbstractImplicitComponent</code>) and methods that mimic OpenMDAO's ExplicitComponent and ImplicitComponent classes.</li>
<li><code>omjlcomps</code>: A Python package (actually, a <a href="https://openmdao.org/newdocs/versions/latest/features/experimental/plugins.html" rel="nofollow">OpenMDAO Plugin</a>) that defines two classes, <code>JuliaExplicitComp</code> and <code>JuliaImplicitComp</code>, which inherit from OpenMDAO's <code>ExplicitComponent</code> and <code>ImplicitComponent</code>, respectively.
These components takes instances of concrete subtypes of <code>OpenMDAOCore.ExplicitComponent</code> and <code>OpenMDAOCore.ImplicitComponent</code> and turn them into instances of <code>JuliaExplicitComp</code> and <code>JuliaImplicitComp</code>.
Like any other OpenMDAO <code>ExplicitComponent</code> or <code>ImplicitComponent</code> objects, <code>JuliaExplicitComp</code> and <code>JuliaImplicitComp</code> instances can be used in an OpenMDAO model, but call Julia code in their methods (<code>compute</code>, <code>apply_nonlinear</code>, etc.).</li>
<li>OpenMDAO.jl: A Julia package that has the openmdao and <code>omjlcomps</code> Python packages as dependencies.
Users can install <code>OpenMDAO.jl</code> and have the full power of the OpenMDAO framework at their disposal in Julia.</li>
</ul>
<h2 dir="auto"><a id="user-content-how-installation-instructions" class="anchor" aria-hidden="true" href="#how-installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How (Installation Instructions)?</h2>
<p dir="auto">There are two approaches to getting OpenMDAO working with Julia: the <a href="#python-centric-approach">Python-Centric Approach</a> and the <a href="#julia-centric-approach">Julia-Centric Approach</a>.
If you like Python and just want to have a little (or a lot) of Julia buried in your OpenMDAO <code>System</code>, then you'll probably prefer the Python-centric approach.
If you're a huge fan of Julia and would like to pretend that OpenMDAO is a Julia library, you'll want the Julia-centric approach.
Either way, pick one or the other: you don't need to follow both installation instructions.</p>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span>
At the moment OpenMDAO.jl is not registered in the Julia General registry, so installing it from the Pkg prompt with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add OpenMDAO"><pre class="notranslate"><code>] add OpenMDAO
</code></pre></div>
<p dir="auto">will fail on a vanilla Julia installation.
It is registered in the official™ DanielIngrahamRegistry, however, so if you'd like an automatic installation process, just do this from the Julia Pkg prompt:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; registry add git@github.com:dingraha/DanielIngrahamRegistry.git"><pre class="notranslate"><code>pkg&gt; registry add git@github.com:dingraha/DanielIngrahamRegistry.git
</code></pre></div>
</blockquote>
<h3 dir="auto"><a id="user-content-python-centric-installation" class="anchor" aria-hidden="true" href="#python-centric-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python-Centric Installation</h3>
<p dir="auto">The first (and only!) step is to install <code>omjlcomps</code>, which is in the Python Package Index, so a simple</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pip install omjlcomps"><pre>pip install omjlcomps</pre></div>
<p dir="auto">should be all you need.
<code>omjlcomps</code> uses <a href="https://github.com/cjdoris/PyJuliaPkg"><code>JuliaPkg</code></a> to manage Julia dependencies, so all the Julia packages needed by <code>omjlcomps</code> (and even Julia itself, if necessary) will be installed automatically.</p>
<h3 dir="auto"><a id="user-content-julia-centric-installation" class="anchor" aria-hidden="true" href="#julia-centric-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia-Centric Installation</h3>
<p dir="auto">The OpenMDAOCore.jl and OpenMDAO.jl Julia packages are the official™ <code>DanielIngrahamRegistry</code>, so if you have access to that, installation should be as simple as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add OpenMDAOCore OpenMDAO"><pre class="notranslate"><code>] add OpenMDAOCore OpenMDAO
</code></pre></div>
<p dir="auto">in the Julia REPL.
OpenMDAOCore.jl is a fairly small package without any Python dependencies, but OpenMDAO.jl depends on <code>omjlcomps</code> and <code>openmdao</code> itself.
OpenMDAO.jl's Python dependencies are managed by <a href="https://github.com/cjdoris/CondaPkg.jl"><code>CondaPkg</code></a>, and should be automatically installed into a separate Conda environment specific to your current Julia environment.</p>
<h2 dir="auto"><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Next Steps</h2>
<p dir="auto">Check out the <a href="https://dingraha.github.io/OpenMDAO.jl/dev" rel="nofollow">documentation</a> for usage, examples, etc..</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<ul dir="auto">
<li>An early version of OpenMDAO.jl was written by Daniel Ingraham, Justin Gray, and Andrew Ning while visiting Prof. Ning at Brigham Young University.</li>
<li>OpenMDAO.jl depends heavily on <a href="https://github.com/cjdoris/PythonCall.jl">PythonCall and related packages</a>, developed by Christopher Rowley.</li>
</ul>
</article></div>