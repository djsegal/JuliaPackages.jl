<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unityjl" class="anchor" aria-hidden="true" href="#unityjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unity.jl</h1>
<h2 dir="auto"><a id="user-content-a-scientific-visualization-interface-for-unity" class="anchor" aria-hidden="true" href="#a-scientific-visualization-interface-for-unity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A scientific visualization interface for Unity</h2>
<p dir="auto">This library provides a TCP-Interface for the transmission of 3d mesh-data between Julia and Unity. The Unity part of this interface cleary could be used with any other programming language, like Matlab or the-like, without much effort.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto">You need Unity to be installed with the UnityTCP project running, which is free for non-profit use. I got Version 2017.4.1f1 (9231f953d9d3) Personal installed on a MacBook with macOS 10.13.3.</p>
<p dir="auto">Please run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/StreetLevel/Unity.jl&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/StreetLevel/Unity.jl<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-agenda" class="anchor" aria-hidden="true" href="#agenda"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Agenda</h3>
<p dir="auto">In numeric simulation we operate mostly on mesh-data, so we need easy-to-use but efficient tools for visualization for fast development cycles. The "de-facto-standard" MATLAB covers this with its patch-routine. Here, Unity is used for visualization, which is a great and actively developed platform. Once you've got your data imported into Unity, you can take advantage of a huge community and tons of add-ons for high-quality custom plots. Furthermore Unity runs on various platforms, so, with little effort, you could use your tablet or even mobile phone for displaying the output.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">This package is in a very early development stage but to my knowledge it should work.</p>
<ol dir="auto">
<li><em>Unity:</em> Start Unity and load the Unity Project <em>Unity_TCPInterface</em>.</li>
<li><em>Unity:</em> Load <em>Scene1</em></li>
<li><em>Unity:</em> Press Play</li>
<li><em>Julia:</em></li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Unity: UnityMesh, UnityText
using ColorTypes, GeometryTypes

#define vertices
verts = [Point3f0(0,0,0),Point3f0(1,0,0),Point3f0(1,1,0),Point3f0(0,1,0)]
#define indices for surface mesh
surf_inds = Int32[0,2,1,0,3,2]
#define indices for line mesh
line_inds = Int32[0,1,1,2,2,3,3,0]
#define indices for vertex mesh
vert_inds = Int32[0,1,2,3]
#define colors
colors = rand(RGBA{Float32},length(verts))
#colors = [RGBA{Float32}(1,1,1,.001) for vert in verts]

#define optons
options = [&quot;surface_shader = flat&quot;]
transparent = [&quot;surface_shader = transparent&quot;]
point_size = [&quot;point_size = 0.05&quot;]

#define text
unity_text = UnityText(&quot;Hello World!&quot;, Point3f0(1.5,2,0), Point3f0(0.1,0.1,.15), Point3f0(1,1,1))

#create meshes
surface_mesh = UnityMesh(&quot;Mesh 1&quot;, verts, Int32[], Int32[], surf_inds, colors, options, UnityText[unity_text])
line_mesh = UnityMesh(&quot;Mesh 2&quot;, map(x-&gt;Point3f0(x[1]+3,x[2],x[3]),verts), Int32[], line_inds, Int32[], colors, String[])
point_mesh = UnityMesh(&quot;Mesh 3&quot;, map(x-&gt;Point3f0(x[1],x[2]+3,x[3]),verts), vert_inds, Int32[], Int32[], colors, point_size)
mesh = UnityMesh(&quot;Mesh 4&quot;, map(x-&gt;Point3f0(x[1]+3,x[2]+3,x[3]),verts), vert_inds, line_inds, surf_inds, colors, vcat(point_size,transparent))

#send meshes to unity
socket = connect(8052)
write(socket, surface_mesh)
write(socket, line_mesh)
write(socket, point_mesh)
write(socket, mesh)
close(socket)"><pre><span class="pl-k">import</span> Unity<span class="pl-k">:</span> UnityMesh, UnityText
<span class="pl-k">using</span> ColorTypes, GeometryTypes

<span class="pl-c"><span class="pl-c">#</span>define vertices</span>
verts <span class="pl-k">=</span> [<span class="pl-c1">Point3f0</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">Point3f0</span>(<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),<span class="pl-c1">Point3f0</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>),<span class="pl-c1">Point3f0</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>)]
<span class="pl-c"><span class="pl-c">#</span>define indices for surface mesh</span>
surf_inds <span class="pl-k">=</span> Int32[<span class="pl-c1">0</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>]
<span class="pl-c"><span class="pl-c">#</span>define indices for line mesh</span>
line_inds <span class="pl-k">=</span> Int32[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>,<span class="pl-c1">0</span>]
<span class="pl-c"><span class="pl-c">#</span>define indices for vertex mesh</span>
vert_inds <span class="pl-k">=</span> Int32[<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
<span class="pl-c"><span class="pl-c">#</span>define colors</span>
colors <span class="pl-k">=</span> <span class="pl-c1">rand</span>(RGBA{Float32},<span class="pl-c1">length</span>(verts))
<span class="pl-c"><span class="pl-c">#</span>colors = [RGBA{Float32}(1,1,1,.001) for vert in verts]</span>

<span class="pl-c"><span class="pl-c">#</span>define optons</span>
options <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>surface_shader = flat<span class="pl-pds">"</span></span>]
transparent <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>surface_shader = transparent<span class="pl-pds">"</span></span>]
point_size <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>point_size = 0.05<span class="pl-pds">"</span></span>]

<span class="pl-c"><span class="pl-c">#</span>define text</span>
unity_text <span class="pl-k">=</span> <span class="pl-c1">UnityText</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello World!<span class="pl-pds">"</span></span>, <span class="pl-c1">Point3f0</span>(<span class="pl-c1">1.5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">0</span>), <span class="pl-c1">Point3f0</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.1</span>,.<span class="pl-c1">15</span>), <span class="pl-c1">Point3f0</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>))

<span class="pl-c"><span class="pl-c">#</span>create meshes</span>
surface_mesh <span class="pl-k">=</span> <span class="pl-c1">UnityMesh</span>(<span class="pl-s"><span class="pl-pds">"</span>Mesh 1<span class="pl-pds">"</span></span>, verts, Int32[], Int32[], surf_inds, colors, options, UnityText[unity_text])
line_mesh <span class="pl-k">=</span> <span class="pl-c1">UnityMesh</span>(<span class="pl-s"><span class="pl-pds">"</span>Mesh 2<span class="pl-pds">"</span></span>, <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">Point3f0</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">3</span>,x[<span class="pl-c1">2</span>],x[<span class="pl-c1">3</span>]),verts), Int32[], line_inds, Int32[], colors, String[])
point_mesh <span class="pl-k">=</span> <span class="pl-c1">UnityMesh</span>(<span class="pl-s"><span class="pl-pds">"</span>Mesh 3<span class="pl-pds">"</span></span>, <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">Point3f0</span>(x[<span class="pl-c1">1</span>],x[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">3</span>,x[<span class="pl-c1">3</span>]),verts), vert_inds, Int32[], Int32[], colors, point_size)
mesh <span class="pl-k">=</span> <span class="pl-c1">UnityMesh</span>(<span class="pl-s"><span class="pl-pds">"</span>Mesh 4<span class="pl-pds">"</span></span>, <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">Point3f0</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">+</span><span class="pl-c1">3</span>,x[<span class="pl-c1">2</span>]<span class="pl-k">+</span><span class="pl-c1">3</span>,x[<span class="pl-c1">3</span>]),verts), vert_inds, line_inds, surf_inds, colors, <span class="pl-c1">vcat</span>(point_size,transparent))

<span class="pl-c"><span class="pl-c">#</span>send meshes to unity</span>
socket <span class="pl-k">=</span> <span class="pl-c1">connect</span>(<span class="pl-c1">8052</span>)
<span class="pl-c1">write</span>(socket, surface_mesh)
<span class="pl-c1">write</span>(socket, line_mesh)
<span class="pl-c1">write</span>(socket, point_mesh)
<span class="pl-c1">write</span>(socket, mesh)
<span class="pl-c1">close</span>(socket)</pre></div>
<p dir="auto">You should see something like this:
<a target="_blank" rel="noopener noreferrer" href="https://github.com/StreetLevel/Unity.jl/blob/master/images/meshes01.png"><img src="https://github.com/StreetLevel/Unity.jl/raw/master/images/meshes01.png" alt="Unity Mesh" title="meshes01.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-different-shader-for-surface-meshes" class="anchor" aria-hidden="true" href="#different-shader-for-surface-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Different shader for surface meshes</h2>
<table>
<thead>
<tr>
<th align="center">wireframe</th>
<th align="center">flat</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/StreetLevel/Unity.jl/blob/master/images/bone_wireframe_shader.png"><img src="https://github.com/StreetLevel/Unity.jl/raw/master/images/bone_wireframe_shader.png" alt="img_bone" title="wireframe shader" style="max-width: 100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/StreetLevel/Unity.jl/blob/master/images/bone_flat_shader.png"><img src="https://github.com/StreetLevel/Unity.jl/raw/master/images/bone_flat_shader.png" alt="img_bone" title="flat_shader" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center">smooth</td>
<td align="center">transparent</td>
</tr>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/StreetLevel/Unity.jl/blob/master/images/bone_smooth_shader.png"><img src="https://github.com/StreetLevel/Unity.jl/raw/master/images/bone_smooth_shader.png" alt="img_bone" title="smooth shader" style="max-width: 100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://github.com/StreetLevel/Unity.jl/blob/master/images/bone_transparent_shader.png"><img src="https://github.com/StreetLevel/Unity.jl/raw/master/images/bone_transparent_shader.png" alt="img_bone" title="transparent shader" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h2>
<ul dir="auto">
<li>face colors (could be already done by duplicating the vertices for each connected face)</li>
<li>auto setup of tcp connection</li>
<li>simple gui for ip address etc.</li>
<li>partial transmission of meshes (e.g. only update the vertices or colors)</li>
<li>colorbar (partly done)</li>
<li>coordinate axes</li>
<li>nicer transparency shader</li>
<li>nicer shader for line mesh</li>
<li>nicer shader and primitive for point mesh</li>
<li>point size</li>
</ul>
</article></div>