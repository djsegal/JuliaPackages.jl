<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-partedarraysjl" class="anchor" aria-hidden="true" href="#partedarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PartedArrays.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/24b2d663d8883c7bf3c970fe0698dded6067b4df/68747470733a2f2f7472617669732d63692e6f72672f626a61636b3230352f5061727465644172726179732e6a6c2e7376673f6272616e63683d6d6173746572"><img src="https://camo.githubusercontent.com/24b2d663d8883c7bf3c970fe0698dded6067b4df/68747470733a2f2f7472617669732d63692e6f72672f626a61636b3230352f5061727465644172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bjack205/PartedArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/bjack205/PartedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/333e251e608dd8ed3594fa8b03c73279d3dfe048/68747470733a2f2f636f6465636f762e696f2f67682f626a61636b3230352f5061727465644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/bjack205/PartedArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>PartedArrays was written to make it easier to work with arrays that are naturally partitioned into sub-arrays. PartedArrays keeps the memory together in one block and simply stores fixed views into the arrays rather that storing the sub-arrays as separate entities, like <a href="https://github.com/JuliaArrays/BlockArrays.jl">BlockArrays.jl</a>.</p>
<p>For example, say we have a function, <code>f(x,u)</code> with vector-valued input <code>x</code> and <code>u</code> of size <code>n</code> and <code>m</code>, respectively. The Hessian of the function, <code>H</code>, is a symmetric matrix of size <code>(n+m,n+m)</code>. It is naturally partitioned into the partial second derivatives of f: A = df/dxdx, B = df/dudu, C = df/dxdu. <code>H</code> is then equivalent to <code>[A C; C' B]</code>. However, we don't really want to break up <code>H</code> (since we may want to invert it) but may want to extract/modify particular partial derivatives, which we could do by indexing, but that can get tedious to write and even more difficult to read. PartedArrays simplifies this by making it easy to store views into the partial derivatives along with the matrix itself.</p>
<p>PartedArrays was written to avoid repetitive indexing and clean up complicated indexing expressions, especially when they have a regular structure.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>A <code>PartedArray</code> is basically just a normal Julia array with a list of convenient views attached. This list of views can either be of type <code>Dict{Symbol,&lt;:Any}</code> or a <code>NamedTuple</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PartedArrays

<span class="pl-c"><span class="pl-c">#</span> Vector</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
z <span class="pl-k">=</span> [x; y]
parts <span class="pl-k">=</span> (x<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, y<span class="pl-k">=</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>)
Z <span class="pl-k">=</span> <span class="pl-c1">PartedArray</span>(z, parts)
Z<span class="pl-k">.</span>x <span class="pl-k">==</span> x  <span class="pl-c"><span class="pl-c">#</span> true</span>
Z<span class="pl-k">.</span>y <span class="pl-k">==</span> y  <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-c"><span class="pl-c">#</span> Matrix</span>
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
C <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">3</span>)
H<span class="pl-k">=</span> [A C; C<span class="pl-k">'</span> B]
parts <span class="pl-k">=</span> (xx<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>), xy<span class="pl-k">=</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>), yx<span class="pl-k">=</span>(<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>), yy<span class="pl-k">=</span>(<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>))
Z <span class="pl-k">=</span> <span class="pl-c1">PartedArray</span>(H, parts)
Z<span class="pl-k">.</span>xx <span class="pl-k">==</span> A  <span class="pl-c"><span class="pl-c">#</span> true</span>

parts2 <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:xx</span><span class="pl-k">=&gt;</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>), <span class="pl-c1">:yy</span><span class="pl-k">=&gt;</span>(<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>,<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">7</span>), <span class="pl-c1">:top</span><span class="pl-k">=&gt;</span>(<span class="pl-c1">1</span>,:))
Z2 <span class="pl-k">=</span> <span class="pl-c1">PartedArray</span>(H, parts2)
Z2<span class="pl-k">.</span>top <span class="pl-k">==</span> H[<span class="pl-c1">1</span>,:]  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p>Since <code>PartedArray</code> uses the <code>AbstractArray</code> interface, most array-like operations are preserved</p>
<div class="highlight highlight-source-julia"><pre>Z[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>] <span class="pl-k">==</span> A  <span class="pl-c"><span class="pl-c">#</span> true</span>
Z <span class="pl-k">+</span> Z2 <span class="pl-k">==</span> <span class="pl-c1">2</span>Z     <span class="pl-c"><span class="pl-c">#</span> true</span>

Z[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10</span>
Z<span class="pl-k">.</span>xx[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">10</span>  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h2><a id="user-content-partitioning" class="anchor" aria-hidden="true" href="#partitioning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Partitioning</h2>
<p>For many cases, the partitioning of the array is non-overlapping and includes the whole array. It can be cumbersome to create these partitions by hand, so some convenient constructors are provided for vectors and matrices.</p>
<div class="highlight highlight-source-julia"><pre>part <span class="pl-k">=</span> <span class="pl-c1">create_partition</span>((<span class="pl-c1">4</span>,<span class="pl-c1">3</span>), (<span class="pl-c1">:x</span>,<span class="pl-c1">:u</span>))
Z <span class="pl-k">=</span> <span class="pl-c1">PartedArray</span>(z, part)
Z<span class="pl-k">.</span>x <span class="pl-k">==</span> x  <span class="pl-c"><span class="pl-c">#</span> true</span>

part2 <span class="pl-k">=</span> <span class="pl-c1">create_partition2</span>((<span class="pl-c1">4</span>,<span class="pl-c1">3</span>), (<span class="pl-c1">4</span>,<span class="pl-c1">3</span>), <span class="pl-c1">Val</span>((<span class="pl-c1">:xx</span>,<span class="pl-c1">:xu</span>,<span class="pl-c1">:ux</span>,<span class="pl-c1">:uu</span>)))
Z <span class="pl-k">=</span> <span class="pl-c1">PartedMatrix</span>(H, part2)
Z<span class="pl-k">.</span>xx <span class="pl-k">==</span> A  <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p>The names of the partitions need to be passed in as Value Types for type stability (still need to make this change for 1D partitioning).</p>
</article></div>