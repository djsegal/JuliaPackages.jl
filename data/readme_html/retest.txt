<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-retest" class="anchor" aria-hidden="true" href="#retest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ReTest</h1>
<p><a href="https://github.com/JuliaTesting/ReTest.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaTesting/ReTest.jl/workflows/CI/badge.svg" alt="Tests Status" style="max-width:100%;"></a>
<a href="https://JuliaTesting.github.io/ReTest.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaTesting.github.io/ReTest.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><code>ReTest</code> is a testing framework for Julia allowing:</p>
<ol>
<li>
<p>Defining tests in source files, whose execution is deferred and triggered
on demand.</p>
<p>This is useful when one likes to have definitions of methods and
corresponding tests close to each other. This is also useful for code which
is not (yet) organized as a package, and where one doesn't want to maintain
a separate set of files for tests.</p>
</li>
<li>
<p>Filtering run testsets with a <code>Regex</code>, which is matched against the
descriptions of testsets.</p>
<p>This is useful for running only part of the test suite of a package. For
example, if you made a change related to addition, and included "addition"
in the description of the corresponding testsets, you can easily run only
these tests.</p>
<p>Note that a <a href="https://github.com/JuliaLang/julia/pull/33672">pull request</a>
exists in the Julia repository to implement regex-filtering for
<code>Test.@testset</code>.</p>
</li>
</ol>
<p>A couple more features are also enabled, like shuffling the order in which
the testsets are run, or running testsets in parallel (via <code>Distributed</code>).</p>
<p><code>ReTest</code> is mostly backward-compatible with <code>Test</code>, i.e. minimal change to
test files is necessary in order to switch to <code>ReTest</code>; it's often even
possible to use <code>ReTest</code> features without changing a line, e.g. on Julia's
<code>Base</code>/stdlib tests.</p>
</article></div>