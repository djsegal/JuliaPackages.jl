<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-implicitgraphs" class="anchor" aria-hidden="true" href="#implicitgraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ImplicitGraphs</h1>
<p><a href="https://travis-ci.com/scheinerman/ImplicitGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/24bd8390cb7258bd4586fc90b1c52b66ce56b7990871975eed9a62c2cb076c0f/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f496d706c696369744772617068732e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/ImplicitGraphs.jl.svg?branch=main" style="max-width:100%;"></a></p>
<p>An <code>ImplicitGraph</code> is a graph in which the vertices and edges are implicitly defined by two functions: one that tests for vertex membership and one that returns a list of the (out) neighbors of a vertex.</p>
<p>The vertex set of an <code>ImplicitGraph</code> may be finite or (implicitly) infinite. The (out) degrees, however, must be finite.</p>
<h2><a id="user-content-creating-graphs" class="anchor" aria-hidden="true" href="#creating-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating Graphs</h2>
<p>An <code>ImplicitGraph</code> is defined as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ImplicitGraph{T}(has_vertex, out_neighbors)
"><pre><span class="pl-c1">ImplicitGraph</span><span class="pl-c1">{T}</span>(has_vertex, out_neighbors)</pre></div>
<p>where</p>
<ul>
<li><code>T</code> is the data type of the vertices.</li>
<li><code>has_vertex(v::T)::Bool</code> is a function that takes objects of type <code>T</code> as input and returns <code>true</code> if <code>v</code> is a vertex of the graph.</li>
<li><code>out_neighbors(v::T)::Vector{T}</code> is a function that takes objects of type <code>T</code> as input and returns a list of the (out) neighbors of <code>v</code>.</li>
</ul>
<p>For example, the following creates an (essentially) infinite path whose vertices are integers (see the <code>iPath</code> function):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="yes(v::Int)::Bool = true 
N(v::Int)::Vector{Int} = [v-1, v+1]
G = ImplicitGraph{Int}(yes, N)
"><pre><span class="pl-en">yes</span>(v<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span> 
<span class="pl-en">N</span>(v<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span> <span class="pl-k">=</span> [v<span class="pl-k">-</span><span class="pl-c1">1</span>, v<span class="pl-k">+</span><span class="pl-c1">1</span>]
G <span class="pl-k">=</span> <span class="pl-c1">ImplicitGraph</span><span class="pl-c1">{Int}</span>(yes, N)</pre></div>
<p>The <code>yes</code> function always returns <code>true</code> for any <code>Int</code>. The <code>N</code> function returns the two neighbors of a vertex <code>v</code>. (For a truly infinite path, use <code>BigInt</code> in place of <code>Int</code>.)</p>
<p>Note that if <code>v</code> is an element of its own neighbor set, that represents a loop at vertex <code>v</code>.</p>
<h3><a id="user-content-undirected-and-directed-graphs" class="anchor" aria-hidden="true" href="#undirected-and-directed-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Undirected and directed graphs</h3>
<p>The user-supplied <code>out_neighbors</code> function can be used to create both undirected and directed graphs. If an undirected graph is intended, be sure that if <code>{v,w}</code> is an edge of the graph, then <code>w</code> will be in the list returned by <code>out_neighbors(v)</code> and <code>v</code> will be in the list returned by <code>out_neighbors(w)</code>.</p>
<p>To create an infinite <em>directed</em> path, the earlier example can be modified like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="yes(v::Int)::Bool = true 
N(v::Int)::Vector{Int} = [v+1]
G = ImplicitGraph{Int}(yes, N)
"><pre><span class="pl-en">yes</span>(v<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span> 
<span class="pl-en">N</span>(v<span class="pl-k">::</span><span class="pl-c1">Int</span>)<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span> <span class="pl-k">=</span> [v<span class="pl-k">+</span><span class="pl-c1">1</span>]
G <span class="pl-k">=</span> <span class="pl-c1">ImplicitGraph</span><span class="pl-c1">{Int}</span>(yes, N)</pre></div>
<h2><a id="user-content-predefined-graphs" class="anchor" aria-hidden="true" href="#predefined-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Predefined Graphs</h2>
<p>We provide a few basic graphs that can be created using the following methods:</p>
<ul>
<li>
<p><code>iCycle(n::Int)</code> creates an undirected cycle with vertex set <code>{1,2,...,n}</code>;
<code>iCycle(n,false)</code> creates a directed <code>n</code>-cycle.</p>
</li>
<li>
<p><code>iPath()</code> creates an (essentially) infinite undirected path whose vertex set contains all integers (objects of type <code>Int</code>);
<code>iPath(false)</code> creates a one-way infinite path <code>⋯ → -2 → -1 → 0 → 1 → 2 → ⋯</code>.</p>
</li>
<li>
<p><code>iGrid()</code> creates an (essentially) infinite grid whose vertices are ordered pairs of integers (objects of type <code>Int</code>).</p>
</li>
<li>
<p><code>iCube(d::Int)</code> creates a <code>d</code>-dimensional cube graph. The vertices are all <code>d</code>-long strings of <code>0</code>s and <code>1</code>s. Two vertices are adjacent iff they differ in exactly one bit.</p>
</li>
<li>
<p><code>iKnight()</code> creates the Knight's move graph on an (essentially) infinite chessboard. The vertices are pairs of integers (objects of type <code>Int</code>).</p>
</li>
<li>
<p><code>iShift(alphabet, n::Int)</code> creates the shift digraph whose vertices are <code>n</code>-tuples of elements of <code>alphabet</code>.</p>
</li>
</ul>
<h2><a id="user-content-inspection" class="anchor" aria-hidden="true" href="#inspection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inspection</h2>
<ul>
<li>
<p>To test if <code>v</code> is a vertex of an <code>ImplicitGraph</code> <code>G</code>, use <code>has(G)</code>. Note that the data type of <code>v</code> must match the element type of <code>G</code>. (The function <code>eltype</code> returns the data type of the vertices of the <code>ImplicitGraph</code>.)</p>
</li>
<li>
<p>To test if <code>{v,w}</code> is an edge of <code>G</code> use <code>G[v,w]</code> or <code>has(G,v,w)</code>. Note that <code>v</code> and <code>w</code> must both be vertices of <code>G</code> or an error is thrown.</p>
</li>
<li>
<p>To get a list of the (out) neighbors of a vertex <code>v</code>, use <code>G[v]</code>.</p>
</li>
<li>
<p>To get the degree of a vertex in a graph, use <code>deg(G,v)</code>.</p>
</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; G = iGrid()
ImplicitGraph{Tuple{Int64,Int64}}

julia&gt; has_vertex(G,(1,2))
true

julia&gt; G[(1,2)]
4-element Array{Tuple{Int64,Int64},1}:
 (1, 1)
 (1, 3)
 (0, 2)
 (2, 2)

julia&gt; G[(1,2),(1,3)]
true

julia&gt; deg(G,(5,0))
4
"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">iGrid</span>()
ImplicitGraph{Tuple{Int64,Int64}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">has_vertex</span>(G,(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> G[(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> G[(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>),(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>)]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">deg</span>(G,(<span class="pl-c1">5</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">4</span></pre></div>
<h2><a id="user-content-path-finding" class="anchor" aria-hidden="true" href="#path-finding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Path Finding</h2>
<h3><a id="user-content-shortest-path" class="anchor" aria-hidden="true" href="#shortest-path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Shortest path</h3>
<p>The function <code>find_path</code> finds a shortest path between vertices of a graph. This function may run without returning if the graph is infinite and disconnected.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; G = iGrid()
ImplicitGraph{Tuple{Int64,Int64}}

julia&gt; find_path(G,(0,0), (3,5))
9-element Array{Tuple{Int64,Int64},1}:
 (0, 0)
 (0, 1)
 (0, 2)
 (0, 3)
 (0, 4)
 (0, 5)
 (1, 5)
 (2, 5)
 (3, 5)
"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">iGrid</span>()
ImplicitGraph{Tuple{Int64,Int64}}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">find_path</span>(G,(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>), (<span class="pl-c1">3</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">9</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">4</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">1</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>)</pre></div>
<p>The function <code>dist</code> returns the length of a shortest path between vertices in the graph.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; dist(G,(0,0),(3,5))
8
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">dist</span>(G,(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>),(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">8</span></pre></div>
<h3><a id="user-content-guided-path-finding" class="anchor" aria-hidden="true" href="#guided-path-finding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Guided path finding</h3>
<p>The function <code>guided_path_finder</code> employs a score function to try to find a
path between vertices. It may be faster than <code>find_path</code>, but might not give a shortest path.</p>
<p>This function is called as follows: <code>guided_path_finder(G,s,t,score=sc, depth=d, verbose=0)</code> where</p>
<ul>
<li><code>G</code> is an <code>ImplicitGraph</code>,</li>
<li><code>s</code> is the starting vertex of the desired path,</li>
<li><code>t</code> is the ending vertex of the desired path,</li>
<li><code>sc</code> is a score function that mapping vertices to integers and should get smaller as vertices get closer to <code>t</code> (and should minimize at <code>t</code>),</li>
<li><code>d</code> controls amount of look ahead (default is <code>1</code>), and</li>
<li><code>verbose</code> sets how often to print progess information (or <code>0</code> for no diagnostics).</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; G = iKnight();

julia&gt; s = (9,9); t = (0,0);

julia&gt; sc(v) = sum(abs.(v));  # score of (a,b) is |a| + |b|

julia&gt; guided_path_finder(G,s,t,score=sc,depth=1)
9-element Vector{Tuple{Int64, Int64}}:
 (9, 9)
 (8, 7)
 (7, 5)
 (6, 3)
 (5, 1)
 (3, 0)
 (1, -1)
 (-1, -2)
 (0, 0)

# With better look-ahead we find a shorter path

julia&gt; guided_path_finder(G,s,t,score=sc,depth=3)
7-element Vector{Tuple{Int64, Int64}}:
 (9, 9)
 (8, 7)
 (7, 5)
 (6, 3)
 (4, 2)
 (2, 1)
 (0, 0)
"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">iKnight</span>();

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> (<span class="pl-c1">9</span>,<span class="pl-c1">9</span>); t <span class="pl-k">=</span> (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">sc</span>(v) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">abs</span>.(v));  <span class="pl-c"><span class="pl-c">#</span> score of (a,b) is |a| + |b|</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">guided_path_finder</span>(G,s,t,score<span class="pl-k">=</span>sc,depth<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">9</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">9</span>, <span class="pl-c1">9</span>)
 (<span class="pl-c1">8</span>, <span class="pl-c1">7</span>)
 (<span class="pl-c1">7</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">6</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">5</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">3</span>, <span class="pl-c1">0</span>)
 (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
 (<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> With better look-ahead we find a shorter path</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">guided_path_finder</span>(G,s,t,score<span class="pl-k">=</span>sc,depth<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">7</span><span class="pl-k">-</span>element Vector{Tuple{Int64, Int64}}<span class="pl-k">:</span>
 (<span class="pl-c1">9</span>, <span class="pl-c1">9</span>)
 (<span class="pl-c1">8</span>, <span class="pl-c1">7</span>)
 (<span class="pl-c1">7</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">6</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>)
 (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)</pre></div>
<p>Greater depth can find a shorter path, but that comes at a cost:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using BenchmarkTools

julia&gt; @btime guided_path_finder(G,s,t,score=sc,depth=1);
  52.361 μs (1308 allocations: 81.05 KiB)

julia&gt; @btime guided_path_finder(G,s,t,score=sc,depth=3);
  407.546 μs (8691 allocations: 696.47 KiB)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">guided_path_finder</span>(G,s,t,score<span class="pl-k">=</span>sc,depth<span class="pl-k">=</span><span class="pl-c1">1</span>);
  <span class="pl-c1">52.361</span> μs (<span class="pl-c1">1308</span> allocations<span class="pl-k">:</span> <span class="pl-c1">81.05</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">guided_path_finder</span>(G,s,t,score<span class="pl-k">=</span>sc,depth<span class="pl-k">=</span><span class="pl-c1">3</span>);
  <span class="pl-c1">407.546</span> μs (<span class="pl-c1">8691</span> allocations<span class="pl-k">:</span> <span class="pl-c1">696.47</span> KiB)</pre></div>
<h2><a id="user-content-extras" class="anchor" aria-hidden="true" href="#extras"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extras</h2>
<p>The <code>extras</code> directory contains additional code and examples that may be
useful in conjunction with the <code>ImplicitGraph</code> type. See the <code>README</code>
in that directory.</p>
</article></div>