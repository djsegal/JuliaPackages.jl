<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-trajectoryindexingutilsjl" class="anchor" aria-hidden="true" href="#trajectoryindexingutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TrajectoryIndexingUtils.jl</h1>
<p dir="auto"><a href="https://aarontrowbridge.github.io/TrajectoryIndexingUtils.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://aarontrowbridge.github.io/TrajectoryIndexingUtils.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/aarontrowbridge/TrajectoryIndexingUtils.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/aarontrowbridge/TrajectoryIndexingUtils.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/aarontrowbridge/TrajectoryIndexingUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/59a15660e05dc5de589733699334a991783d5e421b84c3b4e18bd6f0dfd38bee/68747470733a2f2f636f6465636f762e696f2f67682f6161726f6e74726f776272696467652f5472616a6563746f7279496e646578696e675574696c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/aarontrowbridge/TrajectoryIndexingUtils.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a super lightweight package that exports two functions: <code>index</code> and <code>slice</code>.  These functions have helped to ease the burden of handling messy indexing into trajectory data vectors of the form</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$$\vec Z = \text{vec}\left(z_1, z_2, \ldots, z_T\right) \in \mathbf{R}^{T \cdot d}$$</math-renderer>
<p dir="auto">where each element <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$z_t$</math-renderer> is referred to as a <em>knot point</em> and normally contains <em>state</em> variables and <em>control</em> variables. In a simple situation we might have <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$z_t = \text{vec} (x_t, u_t) \in \mathbf{R}^{d = n+m}$</math-renderer>, for the state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$x_t \in \mathbf{R}^n$</math-renderer> and control <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$u_t \in \mathbf{R}^m$</math-renderer>.  In this case, with  <code>dim = n + m</code>, we can use <code>slice</code> and <code>index</code>, to extract what we want from <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$\vec Z$</math-renderer> in the following way:</p>
<ul dir="auto">
<li>extract <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$z_t$</math-renderer>:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="zₜ = Z⃗[slice(t, dim)]"><pre lang="julia" class="notranslate"><code>zₜ = Z⃗[slice(t, dim)]
</code></pre></div>
</li>
<li>extract <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$x_t$</math-renderer>:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="xₜ = Z⃗[slice(t, 1:n, dim)]"><pre lang="julia" class="notranslate"><code>xₜ = Z⃗[slice(t, 1:n, dim)]
</code></pre></div>
</li>
<li>extract <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$u_t$</math-renderer>:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="uₜ = Z⃗[slice(t, (1:m) .+ n, dim)]"><pre lang="julia" class="notranslate"><code>uₜ = Z⃗[slice(t, (1:m) .+ n, dim)]
</code></pre></div>
</li>
<li>extract <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$i$</math-renderer>-th component of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$x_t$</math-renderer>:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="xₜⁱ = Z⃗[index(t, i, dim)]"><pre lang="julia" class="notranslate"><code>xₜⁱ = Z⃗[index(t, i, dim)]
</code></pre></div>
</li>
<li>extract <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$j$</math-renderer>-th component of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$u_t$</math-renderer>:
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="uₜʲ = Z⃗[index(t, j + n, dim)]"><pre lang="julia" class="notranslate"><code>uₜʲ = Z⃗[index(t, j + n, dim)]
</code></pre></div>
</li>
</ul>
<p dir="auto">With this, the user is still responsible for keeping track of the component indices for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$x$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="dba5c1d52f9f666370bbe32051585484">$u$</math-renderer>, and possibly other variables. To alleviate this nuisance, the package <a href="https://github.com/aarontrowbridge/NamedTrajectories.jl">NamedTrajectories.jl</a> provides a richer alternative for handling trajectory data with arbitrarily named components, please check it out!</p>
<h2 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package is not yet registered.  To install, use the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/aarontrowbridge/TrajectoryIndexingUtils.jl&quot;, rev=&quot;main&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/aarontrowbridge/TrajectoryIndexingUtils.jl<span class="pl-pds">"</span></span>, rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>main<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto">
<a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods</h2>
<h3 dir="auto">
<a id="user-content-the-index-function" class="anchor" aria-hidden="true" href="#the-index-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>index</code> function</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="index(t::Int, dim::Int) -&gt; zₜ[dim]
index(t::Int, pos::Int, dim::Int) -&gt; zₜ[pos]"><pre><span class="pl-c1">index</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> zₜ[dim]
<span class="pl-c1">index</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, pos<span class="pl-k">::</span><span class="pl-c1">Int</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> zₜ[pos]</pre></div>
<h3 dir="auto">
<a id="user-content-the-slice-function" class="anchor" aria-hidden="true" href="#the-slice-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>slice</code> function</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="slice(t::Int, dim::Int; stretch=0) -&gt; zₜ[1:dim + stretch] # can be used to extract, e.g., [xₜ; xₜ₊₁], with stretch = dim
slice(t::Int, pos::Int, dim::Int) -&gt; zₜ[1:pos]
slice(t::Int, pos1::Int, pos2::Int, dim::Int) -&gt; zₜ[pos1:pos2]
slice(t::Int, indices::AbstractVector{Int}, dim::Int) -&gt; zₜ[indices]
slice(ts::UnitRange{Int}, dim::Int) -&gt; vec(zₜ for t ∈ ts)"><pre><span class="pl-c1">slice</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>; stretch<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-k">-&gt;</span> zₜ[<span class="pl-c1">1</span><span class="pl-k">:</span>dim <span class="pl-k">+</span> stretch] <span class="pl-c"><span class="pl-c">#</span> can be used to extract, e.g., [xₜ; xₜ₊₁], with stretch = dim</span>
<span class="pl-c1">slice</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, pos<span class="pl-k">::</span><span class="pl-c1">Int</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> zₜ[<span class="pl-c1">1</span><span class="pl-k">:</span>pos]
<span class="pl-c1">slice</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, pos1<span class="pl-k">::</span><span class="pl-c1">Int</span>, pos2<span class="pl-k">::</span><span class="pl-c1">Int</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> zₜ[pos1<span class="pl-k">:</span>pos2]
<span class="pl-c1">slice</span>(t<span class="pl-k">::</span><span class="pl-c1">Int</span>, indices<span class="pl-k">::</span><span class="pl-c1">AbstractVector{Int}</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> zₜ[indices]
<span class="pl-c1">slice</span>(ts<span class="pl-k">::</span><span class="pl-c1">UnitRange{Int}</span>, dim<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">vec</span>(zₜ <span class="pl-k">for</span> t <span class="pl-k">∈</span> ts)</pre></div>
<h2 dir="auto">
<a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add tests</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add examples</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add documentation</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add methods that take in trajectory vector as the first argument</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add <code>block</code> function for accessing blocks of matrices with trajectory structure, e.g. jacobians &amp; hessians</li>
</ul>
</article></div>