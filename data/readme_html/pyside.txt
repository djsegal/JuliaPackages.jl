<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-pyside" class="anchor" aria-hidden="true" href="#pyside"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PySide</h2>
<blockquote>
<p dir="auto"><strong>NOTE</strong> This package does not seem to have any user base. Please use the issue tracker for bug reports.</p>
</blockquote>
<p dir="auto">A <code>julia</code> package connecting <code>julia</code> to the <code>Qt</code> UI framework via
Steven G. Johnson's PyCall connection to <code>Python</code>
(<a href="https://github.com/stevengj/PyCall.jl">https://github.com/stevengj/PyCall.jl</a>) and the <code>PySide</code> libraries of
the Qt Project (<a href="http://qt-project.org/wiki/PySide" rel="nofollow">http://qt-project.org/wiki/PySide</a>).</p>
<p dir="auto">(An alternative could be to use <code>PyQt</code>, but <code>PySide</code> proved easy to
install and does a better job with the seamless conversion of <code>python</code>
objects into <code>julia</code> objects.)</p>
<p dir="auto">This package doesn't provide much beyond:</p>
<ul dir="auto">
<li>
<p dir="auto">configures <code>PyCall</code>'s event loop integration</p>
</li>
<li>
<p dir="auto">a few convenience functions</p>
</li>
<li>
<p dir="auto">some examples illustrating the basic usage.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<ul dir="auto">
<li>Download and install <a href="http://qt-project.org/wiki/Get-PySide" rel="nofollow">PySide</a></li>
<li>For some examples, install SciPy (Ubuntu: <code>apt-get install python-scipy</code>)</li>
<li>For some examples, download and install <a href="http://www.pyqtgraph.org/" rel="nofollow">PyQtGraph</a></li>
</ul>
<h3 dir="auto"><a id="user-content-a-basic-hello-world-example" class="anchor" aria-hidden="true" href="#a-basic-hello-world-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A basic "hello world" example</h3>
<p dir="auto">This example illustrates how to use the <code>PyCall</code> interface to produce a basic GUI with a
parent container, layout, button, callback and dialog:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using PySide			# imports Qt, QtCore (Qt is QtGui)

w = Qt.QWidget()		# constructors
w[:setWindowTitle](&quot;Hello world example&quot;) # w.setWindowTitle() is w[:setWindowTitle] in PyCall
lyt = Qt.QVBoxLayout(w)
w[:setLayout](lyt)

btn = Qt.QPushButton(&quot;Click me&quot;, w)
lyt[:addWidget](btn)

qconnect(btn, :clicked) do	# qconnect convenience to connect to a signal
  msg = Qt.QMessageBox(btn)
  msg[:setWindowTitle](&quot;A message for you...&quot;)
  msg[:setText](&quot;Hello world!&quot;)
  msg[:setInformativeText](&quot;Thanks for clicking.&quot;)
  msg[:setIcon](Qt.QMessageBox()[:Information])   # how to pick out Qt::QMessageBox::Information enumeration
  convert(Function, msg[:exec])()       # Sometimes, one must must convert to a function (or call qexec(msg))
end

raise(w)			# show and raise widget"><pre class="notranslate"><code>using PySide			# imports Qt, QtCore (Qt is QtGui)

w = Qt.QWidget()		# constructors
w[:setWindowTitle]("Hello world example") # w.setWindowTitle() is w[:setWindowTitle] in PyCall
lyt = Qt.QVBoxLayout(w)
w[:setLayout](lyt)

btn = Qt.QPushButton("Click me", w)
lyt[:addWidget](btn)

qconnect(btn, :clicked) do	# qconnect convenience to connect to a signal
  msg = Qt.QMessageBox(btn)
  msg[:setWindowTitle]("A message for you...")
  msg[:setText]("Hello world!")
  msg[:setInformativeText]("Thanks for clicking.")
  msg[:setIcon](Qt.QMessageBox()[:Information])   # how to pick out Qt::QMessageBox::Information enumeration
  convert(Function, msg[:exec])()       # Sometimes, one must must convert to a function (or call qexec(msg))
end

raise(w)			# show and raise widget
</code></pre></div>
<p dir="auto"><code>PyCall</code> objects have many methods accessible through <code>.</code>, but not all. The <code>[:symbol'</code> notation can access the remainder. This allows access to most of the functionality of <code>PySide</code>.</p>
<h3 dir="auto"><a id="user-content-a-slightly-more-convenient-interface" class="anchor" aria-hidden="true" href="#a-slightly-more-convenient-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A (slightly) more convenient interface</h3>
<p dir="auto">We also provide a slightly more convenient interface for common tasks. For example, the "hello world" example could be written as:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="
using PySide			# imports Qt, QtCore (Qt is QtGui)

w = Widget()
setWindowTitle(w, &quot;Hello world example (redux)&quot;) # methodName(object, args...)
lyt = VBoxLayout(w)		# we require a parent for all but Widget, MainWindow
setLayout(w, lyt)

btn = Button(w)
setText(btn, &quot;Click me&quot;)
push!(lyt, btn)			# alternative to addWidget(lyt, btn)

qconnect(btn, :clicked) do	# also change_slot(btn, () -&gt; MessageBox(...))
  MessageBox(btn, &quot;Hi there&quot;, :Information)
end

raise(w)"><pre class="notranslate"><code>
using PySide			# imports Qt, QtCore (Qt is QtGui)

w = Widget()
setWindowTitle(w, "Hello world example (redux)") # methodName(object, args...)
lyt = VBoxLayout(w)		# we require a parent for all but Widget, MainWindow
setLayout(w, lyt)

btn = Button(w)
setText(btn, "Click me")
push!(lyt, btn)			# alternative to addWidget(lyt, btn)

qconnect(btn, :clicked) do	# also change_slot(btn, () -&gt; MessageBox(...))
  MessageBox(btn, "Hi there", :Information)
end

raise(w)
</code></pre></div>
<p dir="auto">The constructors have some conveniences. As un-parented objects can go
out of scope, we require a parent to be passed in to all but the
top-level objects (<code>Widget</code> or <code>MainWindow</code>).</p>
<p dir="auto">The methods have the basic signature <code>methodName(object, args...)</code>. Alternatively, one can call as
<code>object[:methodName](args...)</code>. The latter is possible even if a
convenience method is not created.</p>
<p dir="auto">The main point of this is to simplify some tasks, but also to give
each widget a type so we can write some generic methods, these being:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>get_value</code> and <code>set_value</code> to retrieve the main value for selection</p>
</li>
<li>
<p dir="auto"><code>get_items</code> and <code>set_items</code> to get/set the items to select from</p>
</li>
<li>
<p dir="auto"><code>change_slot</code> to connect a slot to the most typical event.</p>
</li>
</ul>
<p dir="auto">There are other examples in the <em>examples</em> directory.</p>
</article></div>