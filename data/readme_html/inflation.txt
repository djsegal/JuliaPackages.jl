<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-inflationjl" class="anchor" aria-hidden="true" href="#inflationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inflation.jl</h1>
<p><a href="https://travis-ci.com/rjrosati/Inflation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36920928776e0f8701515f09af126158fd29742b4879fad538550018bf0c52be/68747470733a2f2f7472617669732d63692e636f6d2f726a726f736174692f496e666c6174696f6e2e6a6c2e7376673f746f6b656e3d7a4d445833476d435a6264426366394a574d6470266272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/rjrosati/Inflation.jl.svg?token=zMDX3GmCZbdBcf9JWMdp&amp;branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rjrosati/Inflation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ab0a20b017185a0ff8c3fd3e878d902dee8627e29c32ad9df12d8d0441a789d3/68747470733a2f2f636f6465636f762e696f2f67682f726a726f736174692f496e666c6174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4a494a4855383955384a" alt="codecov" data-canonical-src="https://codecov.io/gh/rjrosati/Inflation.jl/branch/master/graph/badge.svg?token=JIJHU89U8J" style="max-width:100%;"></a></p>
<p>A Julia package for numerical evaluation of cosmic inflation models. Perturbations are evolved with the transport method. It supports symbolic calculation of the equations of motion, and remains efficient at a high number of fields, even with non-canonical kinetic terms.</p>
<p><code>Inflation.jl</code>automatically applies the <a href="https://arxiv.org/pdf/1303.3611.pdf" rel="nofollow">horizon-crossing approximation</a>, if the potential is detected to be sum-separable. Support is planned for automatic application of other approximations when they are valid as well.</p>
<p>Watch the talk given about this package at JuliaCon 2020: <a href="https://www.youtube.com/watch?v=gvUZiPPB3nI" rel="nofollow">https://www.youtube.com/watch?v=gvUZiPPB3nI</a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/rjrosati/Inflation.jl/raw/master/inflationjl.png"><img src="https://github.com/rjrosati/Inflation.jl/raw/master/inflationjl.png" alt="logo" title="Logo" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>For now, Inflation.jl is an unregistered Julia package. It can be installed with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(&quot;https://github.com/rjrosati/Inflation.jl&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/rjrosati/Inflation.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-an-example" class="anchor" aria-hidden="true" href="#an-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>an example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Inflation
using SymPy

# this is a quadratic inflation model with 10 fields and randomly selected masses

# set the field space dimension
d = 10

# set the model parameters, and their values
params = [symbols(&quot;m$i&quot;) for i in 1:d]
pvalues = rand(d)*1e-9

function G(Phi,p)
    d = length(Phi)
    g = Matrix{eltype(Phi)}(I,d,d)
    return g
end

function V(Phi,p)
    m = p
    return sum([ m[i]*Phi[i]^2)/2 for i in 1:d])
end

# set the initial conditions
Pi0 = zeros(d) # zero initial velocity

# pick a position randomly over the sphere, with radius to give ~N0 e-folds
N0 = 100
Phi0 = randn(d)
Phi0 ./= norm(Phi0)
Phi0 .*= sqrt(4*N0)

# symbolically construct the equations of motion
# because this potential is sum-separable, the horizon-crossing approximation will automatically be calculated
funcs = inflation_setup(d,V,G,params)

# solve the background equations of motion
sol = background_evolve(Phi0,Pi0,pvalues,funcs,verbose=true)

# solve the 2-pt correlation function equations of motion
# by default, use 7 k-values centered at a pivot scale of 0.002 Mpc^-1
tsol = transport_perturbations(sol,pvalues,funcs,verbose=true)

println(tsol)
"><pre><span class="pl-k">using</span> Inflation
<span class="pl-k">using</span> SymPy

<span class="pl-c"><span class="pl-c">#</span> this is a quadratic inflation model with 10 fields and randomly selected masses</span>

<span class="pl-c"><span class="pl-c">#</span> set the field space dimension</span>
d <span class="pl-k">=</span> <span class="pl-c1">10</span>

<span class="pl-c"><span class="pl-c">#</span> set the model parameters, and their values</span>
params <span class="pl-k">=</span> [<span class="pl-c1">symbols</span>(<span class="pl-s"><span class="pl-pds">"</span>m<span class="pl-v">$i</span><span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d]
pvalues <span class="pl-k">=</span> <span class="pl-c1">rand</span>(d)<span class="pl-k">*</span><span class="pl-c1">1e-9</span>

<span class="pl-k">function</span> <span class="pl-en">G</span>(Phi,p)
    d <span class="pl-k">=</span> <span class="pl-c1">length</span>(Phi)
    g <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{eltype(Phi)}</span>(I,d,d)
    <span class="pl-k">return</span> g
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">V</span>(Phi,p)
    m <span class="pl-k">=</span> p
    <span class="pl-k">return</span> <span class="pl-c1">sum</span>([ m[i]<span class="pl-k">*</span>Phi[i]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">/</span><span class="pl-c1">2</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>d])
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> set the initial conditions</span>
Pi0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(d) <span class="pl-c"><span class="pl-c">#</span> zero initial velocity</span>

<span class="pl-c"><span class="pl-c">#</span> pick a position randomly over the sphere, with radius to give ~N0 e-folds</span>
N0 <span class="pl-k">=</span> <span class="pl-c1">100</span>
Phi0 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(d)
Phi0 <span class="pl-k">./=</span> <span class="pl-c1">norm</span>(Phi0)
Phi0 <span class="pl-k">.*=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">4</span><span class="pl-k">*</span>N0)

<span class="pl-c"><span class="pl-c">#</span> symbolically construct the equations of motion</span>
<span class="pl-c"><span class="pl-c">#</span> because this potential is sum-separable, the horizon-crossing approximation will automatically be calculated</span>
funcs <span class="pl-k">=</span> <span class="pl-c1">inflation_setup</span>(d,V,G,params)

<span class="pl-c"><span class="pl-c">#</span> solve the background equations of motion</span>
sol <span class="pl-k">=</span> <span class="pl-c1">background_evolve</span>(Phi0,Pi0,pvalues,funcs,verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> solve the 2-pt correlation function equations of motion</span>
<span class="pl-c"><span class="pl-c">#</span> by default, use 7 k-values centered at a pivot scale of 0.002 Mpc^-1</span>
tsol <span class="pl-k">=</span> <span class="pl-c1">transport_perturbations</span>(sol,pvalues,funcs,verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c1">println</span>(tsol)</pre></div>
<p>see the <code>examples</code> directory for more complicated potentials and metrics, how to scan parameter space, evaluate several simulations in parallel, output and analyze data.</p>
<p>At the moment, <code>Inflation.jl</code> can only solve the 2-pt correlation function equations of motion. Solving for higher-point correlation functions is possible with <a href="https://github.com/jronayne/PyTransport">PyTransport</a>/<a href="https://github.com/ds283/CppTransport">CppTransport</a>.</p>
</article></div>