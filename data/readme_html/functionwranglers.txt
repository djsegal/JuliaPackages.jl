<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-functionwranglersjl" class="anchor" aria-hidden="true" href="#functionwranglersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FunctionWranglers.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1d9c7edc699d8c4866419c3e2159210a2b1952a2f7d06ccaf9659158f51274b2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d677265656e2e737667"><img src="https://camo.githubusercontent.com/1d9c7edc699d8c4866419c3e2159210a2b1952a2f7d06ccaf9659158f51274b2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d677265656e2e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-green.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/tisztamo/FunctionWranglers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/257f488fbebfbe6b23cd8953b08e0632d1d2550bac896d5dc182cbd71b79e43b/68747470733a2f2f7472617669732d63692e636f6d2f7469737a74616d6f2f46756e6374696f6e5772616e676c6572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tisztamo/FunctionWranglers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tisztamo/FunctionWranglers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8ce29ca6a4cd2abc1829d58db44a037783c061f2f2b9a2e78eac3344ba49ff77/687474703a2f2f636f6465636f762e696f2f6769746875622f7469737a74616d6f2f46756e6374696f6e5772616e676c6572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tisztamo/FunctionWranglers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package allows fast, inlined execution of functions provided in an array. It can be used to speed up some calculations directly, or as the base of high-performance programming primitives.</p>
<p>The following operations are supported currently:</p>
<ul>
<li><code>smap!</code> maps a single set of arguments using all the functions into a preallocated array.</li>
<li><code>sfindfirst</code> looks for the first function which returns <code>true</code> for the given arguments, and returns its index.</li>
<li><code>sindex</code> select and call a function from the wrangler. This is not constant time, but for small indexes faster than indexing to the original array directly.</li>
<li><code>sreduce</code> transforms a single value with the composite of the functions, and also allows providing extra "context" arguments to the functions</li>
</ul>
<p>Please note that merging the method bodies at the first call have some compilation overhead, which may be significant if the array contains more than a few dozen functions. Tests run with 200 functions.</p>
<h4><a id="user-content-smap" class="anchor" aria-hidden="true" href="#smap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>smap!</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="smap!(outputs, wrangler::FunctionWrangler, args...)
"><pre><code>smap!(outputs, wrangler::FunctionWrangler, args...)
</code></pre></div>
<p>Map a single set of arguments using all the functions into a preallocated array.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="  | | |_| | | | (_| |  |  Version 1.5.2 (2020-09-23)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/ 

julia&gt; using FunctionWranglers

julia&gt; create_adder(value) = (x) -&gt; x + value
create_adder (generic function with 1 method)

julia&gt; adders = Function[create_adder(i) for i = 1:5]
5-element Array{Function,1}:
 #3 (generic function with 1 method)
 #3 (generic function with 1 method)
 #3 (generic function with 1 method)
 #3 (generic function with 1 method)
 #3 (generic function with 1 method)

julia&gt; w = FunctionWrangler(adders)
FunctionWrangler with 5 items: #3, #3, #3, #3, #3, 

julia&gt; result = zeros(Float64, length(adders))
5-element Array{Float64,1}:
 0.0
 0.0
 0.0
 0.0
 0.0

julia&gt; smap!(result, w, 10.0) # If your functions accept more arguments, you can also provide them here

julia&gt; result
5-element Array{Float64,1}:
 11.0
 12.0
 13.0
 14.0
 15.0

julia&gt; @btime smap!($result, $w, d) setup = (d = rand())
  3.934 ns (0 allocations: 0 bytes)
"><pre>  <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span>_<span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span> (_<span class="pl-k">|</span> <span class="pl-k">|</span>  <span class="pl-k">|</span>  Version <span class="pl-c1">1.5</span>.<span class="pl-c1">2</span> (<span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">09</span><span class="pl-k">-</span><span class="pl-c1">23</span>)
 _<span class="pl-k">/</span> <span class="pl-k">|</span><span class="pl-k">\</span>__<span class="pl-k">'</span>_<span class="pl-k">|</span>_<span class="pl-k">|</span>_<span class="pl-k">|</span><span class="pl-k">\</span>__<span class="pl-k">'</span>_<span class="pl-k">|</span>  <span class="pl-k">|</span>  Official https<span class="pl-k">:</span><span class="pl-k">//</span>julialang<span class="pl-k">.</span>org<span class="pl-k">/</span> release
<span class="pl-k">|</span>__<span class="pl-k">/</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FunctionWranglers

julia<span class="pl-k">&gt;</span> <span class="pl-en">create_adder</span>(value) <span class="pl-k">=</span> (x) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> value
create_adder (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> adders <span class="pl-k">=</span> Function[<span class="pl-c1">create_adder</span>(i) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>]
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Function,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c"><span class="pl-c">#</span>3 (generic function with 1 method)</span>
 <span class="pl-c"><span class="pl-c">#</span>3 (generic function with 1 method)</span>
 <span class="pl-c"><span class="pl-c">#</span>3 (generic function with 1 method)</span>
 <span class="pl-c"><span class="pl-c">#</span>3 (generic function with 1 method)</span>
 <span class="pl-c"><span class="pl-c">#</span>3 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FunctionWrangler</span>(adders)
FunctionWrangler with <span class="pl-c1">5</span> items<span class="pl-k">:</span> <span class="pl-c"><span class="pl-c">#</span>3, #3, #3, #3, #3, </span>

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float64, <span class="pl-c1">length</span>(adders))
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">smap!</span>(result, w, <span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> If your functions accept more arguments, you can also provide them here</span>

julia<span class="pl-k">&gt;</span> result
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">11.0</span>
 <span class="pl-c1">12.0</span>
 <span class="pl-c1">13.0</span>
 <span class="pl-c1">14.0</span>
 <span class="pl-c1">15.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">smap!</span>(<span class="pl-k">$</span>result, <span class="pl-k">$</span>w, d) setup <span class="pl-k">=</span> (d <span class="pl-k">=</span> <span class="pl-c1">rand</span>())
  <span class="pl-c1">3.934</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h4><a id="user-content-sfindfirst" class="anchor" aria-hidden="true" href="#sfindfirst"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sfindfirst</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sfindfirst(wrangler::FunctionWrangler, args...)
"><pre><code>sfindfirst(wrangler::FunctionWrangler, args...)
</code></pre></div>
<p>Look for the first function which returns <code>true</code> for the given arguments, and return its index. Return <code>nothing</code> if no function resulted in <code>true</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
julia&gt; using FunctionWranglers, BenchmarkTools

julia&gt; predicates = Function[(x) -&gt; x &lt; i for i=1:5]
5-element Array{Function,1}:
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)

julia&gt; fw = FunctionWrangler(predicates)
FunctionWrangler with 5 items: #1, #1, #1, #1, #1, 

julia&gt; sfindfirst(fw, 4)
5

julia&gt; sfindfirst(fw, 5)

julia&gt; @btime sfindfirst($fw, 4)
  1.699 ns (0 allocations: 0 bytes)
5
"><pre><code>
julia&gt; using FunctionWranglers, BenchmarkTools

julia&gt; predicates = Function[(x) -&gt; x &lt; i for i=1:5]
5-element Array{Function,1}:
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)
 #1 (generic function with 1 method)

julia&gt; fw = FunctionWrangler(predicates)
FunctionWrangler with 5 items: #1, #1, #1, #1, #1, 

julia&gt; sfindfirst(fw, 4)
5

julia&gt; sfindfirst(fw, 5)

julia&gt; @btime sfindfirst($fw, 4)
  1.699 ns (0 allocations: 0 bytes)
5
</code></pre></div>
<h4><a id="user-content-sindex" class="anchor" aria-hidden="true" href="#sindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sindex</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sindex(wrangler::FunctionWrangler, idx, args...)
"><pre><code>sindex(wrangler::FunctionWrangler, idx, args...)
</code></pre></div>
<p>Call the <code>idx</code>-th function with args.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; adders = Function[create_adder(i) for i = 1:50]
50-element Vector{Function}:
 #1 (generic function with 1 method)
 ⋮
 #1 (generic function with 1 method)
 
julia&gt; w = FunctionWrangler(adders)
FunctionWrangler with 50 items: #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, 

julia&gt; sindex(w, 3, 10)
13

julia&gt; sindex(w, 30, 10)
40
"><pre>julia<span class="pl-k">&gt;</span> adders <span class="pl-k">=</span> Function[<span class="pl-c1">create_adder</span>(i) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">50</span>]
<span class="pl-c1">50</span><span class="pl-k">-</span>element Vector{Function}<span class="pl-k">:</span>
 <span class="pl-c"><span class="pl-c">#</span>1 (generic function with 1 method)</span>
 ⋮
 <span class="pl-c"><span class="pl-c">#</span>1 (generic function with 1 method)</span>
 
julia<span class="pl-k">&gt;</span> w <span class="pl-k">=</span> <span class="pl-c1">FunctionWrangler</span>(adders)
FunctionWrangler with <span class="pl-c1">50</span> items<span class="pl-k">:</span> <span class="pl-c"><span class="pl-c">#</span>1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, #1, </span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sindex</span>(w, <span class="pl-c1">3</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">13</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sindex</span>(w, <span class="pl-c1">30</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">40</span></pre></div>
<p>Note that this call iterates the wrangler from 1 to <code>idx</code>. Try to
put the frequently called functions at the beginning to minimize overhead:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @btime sindex($w, i, i) setup=(i=rand(1:10))
  2.228 ns (0 allocations: 0 bytes)
8

julia&gt; @btime sindex($w, i, i) setup=(i=rand(20:30))
  3.454 ns (0 allocations: 0 bytes)
60

julia&gt; @btime sindex($w, i, i) setup=(i=rand(40:50))
  3.695 ns (0 allocations: 0 bytes)
88
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sindex</span>(<span class="pl-k">$</span>w, i, i) setup<span class="pl-k">=</span>(i<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>))
  <span class="pl-c1">2.228</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sindex</span>(<span class="pl-k">$</span>w, i, i) setup<span class="pl-k">=</span>(i<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">30</span>))
  <span class="pl-c1">3.454</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">60</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">sindex</span>(<span class="pl-k">$</span>w, i, i) setup<span class="pl-k">=</span>(i<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">50</span>))
  <span class="pl-c1">3.695</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">88</span></pre></div>
<h4><a id="user-content-sreduce" class="anchor" aria-hidden="true" href="#sreduce"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sreduce</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sreduce(wrangler::FunctionWrangler, args...; init = nothing)
"><pre><code>sreduce(wrangler::FunctionWrangler, args...; init = nothing)
</code></pre></div>
<p>Transform a single <code>init</code> value with the composite of the functions in <code>wrangler</code>.</p>
<p>The functions will be applied in their order in <code>wrangler</code>. If you provide extra args, they will be passed to the functions after the current value of the computation:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using FunctionWranglers, BenchmarkTools

julia&gt; pluses = Function[(+) for i = 1:5]
5-element Array{Function,1}:
 + (generic function with 184 methods)
 + (generic function with 184 methods)
 + (generic function with 184 methods)
 + (generic function with 184 methods)
 + (generic function with 184 methods)

julia&gt; fw = FunctionWrangler(pluses)
FunctionWrangler with 5 items: +, +, +, +, +, 

julia&gt; sreduce(fw, 1; init = 10)
15

julia&gt; @btime sreduce($fw, 1; init = 10)
  1.099 ns (0 allocations: 0 bytes)
15
"><pre><code>julia&gt; using FunctionWranglers, BenchmarkTools

julia&gt; pluses = Function[(+) for i = 1:5]
5-element Array{Function,1}:
 + (generic function with 184 methods)
 + (generic function with 184 methods)
 + (generic function with 184 methods)
 + (generic function with 184 methods)
 + (generic function with 184 methods)

julia&gt; fw = FunctionWrangler(pluses)
FunctionWrangler with 5 items: +, +, +, +, +, 

julia&gt; sreduce(fw, 1; init = 10)
15

julia&gt; @btime sreduce($fw, 1; init = 10)
  1.099 ns (0 allocations: 0 bytes)
15
</code></pre></div>
</article></div>