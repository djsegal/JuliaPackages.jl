<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-hemirealfactorizations" class="anchor" aria-hidden="true" href="#hemirealfactorizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HemirealFactorizations</h1>
<p><a href="https://travis-ci.org/timholy/HemirealFactorizations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0cd42b48b0d7d7c232ec0f17c3e7e80ffdbafbd/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f48656d697265616c466163746f72697a6174696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/HemirealFactorizations.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/timholy/HemirealFactorizations.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b9c098f25dab2135693ce617ddada6872ab52d15/68747470733a2f2f636f6465636f762e696f2f6769746875622f74696d686f6c792f48656d697265616c466163746f72697a6174696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/timholy/HemirealFactorizations.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h1>
<p>Cholesky factorizations over the hemireals can be computed for
arbitrary symmetric matrices, including singular and indefinite
matrices.  For singular matrices, the behavior is reminiscent of the
singular value decomposition, but the performance is much better.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>After creating a symmetric matrix <code>A</code>, compute its Cholesky
factorization over the hemireal numbers like this:</p>
<div class="highlight highlight-source-julia"><pre>F <span class="pl-k">=</span> <span class="pl-c1">cholfact</span>(PureHemi, A)</pre></div>
<p>Then you can use <code>F</code> to solve equations, e.g.,</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> F<span class="pl-k">\</span>b</pre></div>
<p>If <code>A</code> is singular, this should be the least-squares solution.</p>
<h2><a id="user-content-supported-operations" class="anchor" aria-hidden="true" href="#supported-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported operations</h2>
<p>You can compute <code>F*F'</code> or say <code>rank(F)</code>.  You can also convert <code>F</code>
into matrix form with <code>convert(Matrix, F)</code>.</p>
<p>To support all operations, you need to be running at least a version
of julia-0.5-dev that is current with master as of 2015-12-11.
However, many operations also work on julia-0.4.</p>
<h2><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Options</h2>
<div class="highlight highlight-source-julia"><pre>F <span class="pl-k">=</span> <span class="pl-c1">cholfact</span>(PureHemi, A, δ; blocksize<span class="pl-k">=</span>default)</pre></div>
<p>where:</p>
<ul>
<li><code>δ</code> is the tolerance on the diagonal values of <code>A</code> during factorization; any with magnitudes smaller than <code>δ</code> will be treated as if they are 0.</li>
<li><code>blocksize</code> controls the performance of the factorization algorithm.</li>
</ul>
</article></div>