<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-collisiondetection" class="anchor" aria-hidden="true" href="#collisiondetection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CollisionDetection</h1>
<p>A package for the log(N) retrieval of colliding objects</p>
<p><a href="https://travis-ci.org/krcools/CollisionDetection" rel="nofollow"><img src="https://camo.githubusercontent.com/657617fa1194bbd411b67ec0a9a12b9396a0b680/68747470733a2f2f7472617669732d63692e6f72672f6b72636f6f6c732f436f6c6c6973696f6e446574656374696f6e2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/krcools/CollisionDetection.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/krcools/WiltonInts84.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5b1fb46f1979bce2aef05a7ef6ffa5b8bda71d17/68747470733a2f2f636f6465636f762e696f2f67682f6b72636f6f6c732f57696c746f6e496e747338342e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/krcools/WiltonInts84.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Contains an nd-tree data structure for the storage of objects of finite extent (i.e. not just points). Objects
inserted in the tree will only descend as long as they fit the box they are assigned too. The main purpose of
this tree is to enable logarithmic complexity collision detection. Applications are e.g. the implementation of
graph algorithms, testing if a point is inside a boundary.</p>
<p>Usage</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CollisionDetection
<span class="pl-k">using</span> StaticArrays

n <span class="pl-k">=</span> <span class="pl-c1">100</span>
centers <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">.*</span> [<span class="pl-c1">rand</span>(SVector{<span class="pl-c1">3</span>,Float64}) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n] <span class="pl-k">.-</span> <span class="pl-c1">1</span>
radii <span class="pl-k">=</span> [<span class="pl-c1">0.1</span><span class="pl-k">*</span><span class="pl-c1">rand</span>() <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n]

tree <span class="pl-k">=</span> <span class="pl-c1">Octree</span>(centers, radii)</pre></div>
<p>To detect colliding objects in a tree, both a bounding box and a collision predicate are required. The bounding box is given by a centre and half the size of the side of the box. The predicate takes an index and returns true or false depending on whether the i-th object stored in the tree collides with the target.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Given an index, is the corresponding ball eligible?</span>
<span class="pl-en">pred</span>(i) <span class="pl-k">=</span> <span class="pl-c1">all</span>(centers[i]<span class="pl-k">.</span><span class="pl-k">+</span>radii[i] <span class="pl-k">.&gt;</span> <span class="pl-c1">0</span>)
<span class="pl-c"><span class="pl-c">#</span> Bounding box in the (center,halfside) format supplied for effiency</span>
bb <span class="pl-k">=</span> <span class="pl-c1">@SVector</span>[<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>], <span class="pl-c1">0.5</span>
<span class="pl-c"><span class="pl-c">#</span> collect the iterator of admissible indices</span>
ids <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">searchtree</span>(pred, tree, bb))</pre></div>
<p>In this example <code>ids</code> will contain the indices of objects touching the (+,+,+) octant.</p>
</article></div>