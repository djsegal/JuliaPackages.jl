<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-typevars" class="anchor" aria-hidden="true" href="#typevars"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TypeVars</h1>
<p><a href="https://github.com/KlausC/TypeVars.jl/actions?query=workflow%3ACI"><img src="https://github.com/KlausC/TypeVars.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>     <a href="https://codecov.io/gh/KlausC/TypeVars.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/85252791a361edaf67aabe2ac14faa23bd3da3cb1a65b07aca1242b3183f9498/68747470733a2f2f636f6465636f762e696f2f67682f4b6c617573432f54797065566172732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/KlausC/TypeVars.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>Sometimes it is useful to associate a data object with a parameterized type.
For example, the type <code>Zmod{m}</code> would represent integer calculations modulo <code>m</code>
where <code>m</code> is a samll integer.</p>
<p>This tiny package provides a way to extend this if type parameters are not
feasible to keep the data.</p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<p>There are 2 functions that make the user interface:</p>
<p><code>settypevar(::Type, object)</code> is called once per type variant to define the association.</p>
<p><code>typevar(::Type)</code> makes the object available in an efficient way.</p>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
using TypeVars

struct Zmod{M,T&lt;:Integer&gt;}
    val::T
end

m = big&quot;2&quot;^512 - 1
M = Symbol(hash(m))
settypevar(Zmod{M,BigInt}, m)

add(a::Z, b::Z) where Z&lt;:Zmod = Zmod(mod(a.val + b.val, typevar(Z)))
"><pre><span class="pl-k">using</span> TypeVars

<span class="pl-k">struct</span> Zmod{M,T<span class="pl-k">&lt;:</span><span class="pl-c1">Integer</span><span class="pl-k">&gt;</span>}
    val<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>

m <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">big</span>"</span>2<span class="pl-pds">"</span></span><span class="pl-k">^</span><span class="pl-c1">512</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>
M <span class="pl-k">=</span> <span class="pl-c1">Symbol</span>(<span class="pl-c1">hash</span>(m))
<span class="pl-c1">settypevar</span>(Zmod{M,BigInt}, m)

<span class="pl-en">add</span>(a<span class="pl-k">::</span><span class="pl-c1">Z</span>, b<span class="pl-k">::</span><span class="pl-c1">Z</span>) <span class="pl-k">where</span> Z<span class="pl-k">&lt;:</span><span class="pl-c1">Zmod</span> <span class="pl-k">=</span> <span class="pl-c1">Zmod</span>(<span class="pl-c1">mod</span>(a<span class="pl-k">.</span>val <span class="pl-k">+</span> b<span class="pl-k">.</span>val, <span class="pl-c1">typevar</span>(Z)))</pre></div>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h2>
<p>The obvious idea of using a global <code>Dict</code> suffers from access time overhead.
We make <code>typevar</code> a generated function to levearge this access.</p>
</article></div>