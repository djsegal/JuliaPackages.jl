<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/RenatoGeh/BDD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/63429889657aa25e72fc864c8eefa81f85ab0f4f47829339ed80a75fa0d7256c/68747470733a2f2f7472617669732d63692e636f6d2f52656e61746f4765682f4244442e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/RenatoGeh/BDD.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/RenatoGeh/BDD.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/befafe46c99d446dcc14cd488c86b8421b4cf4be72c7eb45e7b4edcb5aa62160/68747470733a2f2f636f6465636f762e696f2f67682f52656e61746f4765682f4244442e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/RenatoGeh/BDD.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://renatogeh.github.io/BDD.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://renatogeh.github.io/BDD.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-binarydecisiondiagramsjl-bddjl" class="anchor" aria-hidden="true" href="#binarydecisiondiagramsjl-bddjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BinaryDecisionDiagrams.jl (BDD.jl)</h1>
<p>BDD.jl is a Julia library for manipulating Binary Decision Diagrams (BDDs).</p>
<p>It started as a partial port of <code>pyddlib</code> (see <a href="https://github.com/thiagopbueno/pyddlib/">https://github.com/thiagopbueno/pyddlib/</a>) but now
has many more features compared to the original package, such as</p>
<ul>
<li>Iterating over all possible worlds;</li>
<li>Functions for easily constructing conjunctions and disjunctions;</li>
<li>BDD iterators and collection functions;</li>
<li>Full support for equivalent formulae as keys in a dictionary;</li>
<li>Shannon's decomposition;</li>
<li>Variable elimination (aka the <code>forget</code> operation);</li>
<li>Marginalization of a formula given some binary operator (generalization of <code>forget</code>);</li>
<li>Functions for identifying a BDD's scope and verifying a variable's membership;</li>
<li>Extracting conjunctions as bit arrays;</li>
<li>Constructors for cardinality constraint formulae (at least, at most and exactly);</li>
<li>Thread safe;</li>
<li>I/O functions for saving and loading BDDs;</li>
<li>Convert BDDs to CNF and DNF file formats;</li>
<li>Print BDD as a CNF or DNF.</li>
</ul>
<p>The following are references used in this package and the original library.</p>
<p>[1] Bryant, Randal E. <strong>Graph-based algorithms for boolean function
manipulation</strong>. Computers, IEEE Transactions on 100, no. 8 (1986):
677-691.</p>
<p>[2] Brace, Karl S., Richard L. Rudell, and Randal E. Bryant. <strong>Efficient
implementation of a BDD package</strong>. In Proceedings of the 27th ACM/IEEE
design automation conference, pp. 40-45. ACM, 1991.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<p>It is required to have Julia installed.</p>
<p>This package is available on the Julia General Registries.</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="  $ julia -e 'using Pkg; Pkg.add(&quot;BinaryDecisionDiagrams&quot;)'
"><pre>  $ julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.add("BinaryDecisionDiagrams")<span class="pl-pds">'</span></span></pre></div>
<p>Alternatively, you may add this repository manualy and receive nightly updates.</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="  $ julia -e 'using Pkg; Pkg.add(&quot;https://github.com/RenatoGeh/BDD.jl&quot;)'
"><pre>  $ julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.add("https://github.com/RenatoGeh/BDD.jl")<span class="pl-pds">'</span></span></pre></div>
<h2><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h2>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="  $ julia -e 'using Pkg; Pkg.test(&quot;BinaryDecisionDiagrams&quot;)'
"><pre>  $ julia -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.test("BinaryDecisionDiagrams")<span class="pl-pds">'</span></span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>You create BDDs from constants and variables by composing boolean
functions with logical operations AND (∧), OR (∨), XOR (⊻) and
negation (¬).</p>
<p>See <code>test/runtests.jl</code> for a comprehensive collection of examples on each feature. It is highly
recommended you check the <a href="https://renatogeh.github.io/BDD.jl/stable" rel="nofollow">docs</a>, since the snippet
below does not cover all features.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="  using BinaryDecisionDiagrams

  println(&quot;== True ==&quot;)
  println(⊤)
  println(&quot;== False ==&quot;)
  println(⊥)

  x1 = variable(1)
  x2 = variable(2)
  x3 = variable(3)
  println(&quot;=== x1 ===&quot;)
  println(x1)

  println(&quot;=== ¬x1 ===&quot;)
  println(¬x1)

  println(&quot;=== x1 ∧ x2 ===&quot;)
  println(x1 ∧ x2)

  println(&quot;=== x1 ∨ x2 ===&quot;)
  println(x1 ∨ x2)

  println(&quot;=== x1 ⊻ x2 ===&quot;)
  println(x1 ⊻ x2)

  bdd1 = ¬x1 ∨ (x2 ∧ ¬x3)
  if bdd1 ∧ ⊤ == bdd1
    println(&quot;True is the neutral element for AND operation&quot;)
  end

  bdd2 = ¬(¬x2) ∧ ¬(x1 ∨ x3)
  if bdd2 ∨ zero == bdd2
    println(&quot;False is the neutral element for OR operation&quot;)
  end

  bdd3 = x1 ∧ ¬x1
  if is_⊥(bdd3)
    println(&quot;You can check contradiction with is_⊥&quot;)
  end

  bdd4 = x1 ∨ ¬x1
  if is_⊤(bdd4):
    println(&quot;You can check tautology with is_⊤&quot;)
  end

  bdd5 = ¬(x1 ∨ ¬(x2 ∧ ¬x3))
  if is_⊥(bdd5 ⊻ bdd5)
    println(&quot;You can check equivalence with XOR&quot;)
  end

  if (x1 ∧ x2) == (x2 ∧ x1)
    println(&quot;Commutative law works for boolean functions&quot;)
  end

  if x1 ∧ (x2 ∧ x3) == (x1 ∧ x2) ∧ x3
    println(&quot;Associative law works for boolean functions&quot;)
  end

  if (x1 ∧ (x2 ∨ x3)) == ((x1 ∧ x2) ∨ (x1 ∧ x3))
    println(&quot;Distributivity law works: AND distributes over OR&quot;)
  end

  if (x1 ∨ (x2 ∧ x3)) == ((x1 ∨ x2) ∧ (x1 ∨ x3))
    println(&quot;Distributivity law works: OR distributes over AND&quot;)
  end

  bdd6 = ¬(x1 ∧ ¬(¬x2 ∨ x3))
  valuation1 = Dict{Int, Bool}(1 =&gt; true, 2 =&gt; true, 3 =&gt; false)

  if is_⊥(bdd6|valuation1)
    println(&quot;You can evaluate the function either with | or function restrict!&quot;)
  end

  valuation2 = Dict{Int, Bool}(1 =&gt; True)
  if bdd6|valuation2 == ¬x2 ∨ x3:
    println(&quot;You can also partially evaluate the function with restrict&quot;)
  end
"><pre>  <span class="pl-k">using</span> BinaryDecisionDiagrams

  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>== True ==<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(⊤)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>== False ==<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(⊥)

  x1 <span class="pl-k">=</span> <span class="pl-c1">variable</span>(<span class="pl-c1">1</span>)
  x2 <span class="pl-k">=</span> <span class="pl-c1">variable</span>(<span class="pl-c1">2</span>)
  x3 <span class="pl-k">=</span> <span class="pl-c1">variable</span>(<span class="pl-c1">3</span>)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>=== x1 ===<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(x1)

  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>=== ¬x1 ===<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(¬x1)

  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>=== x1 ∧ x2 ===<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(x1 ∧ x2)

  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>=== x1 ∨ x2 ===<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(x1 ∨ x2)

  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>=== x1 ⊻ x2 ===<span class="pl-pds">"</span></span>)
  <span class="pl-c1">println</span>(x1 <span class="pl-k">⊻</span> x2)

  bdd1 <span class="pl-k">=</span> ¬x1 ∨ (x2 ∧ ¬x3)
  <span class="pl-k">if</span> bdd1 ∧ ⊤ <span class="pl-k">==</span> bdd1
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>True is the neutral element for AND operation<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  bdd2 <span class="pl-k">=</span> ¬(¬x2) ∧ ¬(x1 ∨ x3)
  <span class="pl-k">if</span> bdd2 ∨ zero <span class="pl-k">==</span> bdd2
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>False is the neutral element for OR operation<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  bdd3 <span class="pl-k">=</span> x1 ∧ ¬x1
  <span class="pl-k">if</span> <span class="pl-c1">is_⊥</span>(bdd3)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>You can check contradiction with is_⊥<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  bdd4 <span class="pl-k">=</span> x1 ∨ ¬x1
  <span class="pl-k">if</span> <span class="pl-c1">is_⊤</span>(bdd4)<span class="pl-k">:</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>You can check tautology with is_⊤<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  bdd5 <span class="pl-k">=</span> ¬(x1 ∨ ¬(x2 ∧ ¬x3))
  <span class="pl-k">if</span> <span class="pl-c1">is_⊥</span>(bdd5 <span class="pl-k">⊻</span> bdd5)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>You can check equivalence with XOR<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  <span class="pl-k">if</span> (x1 ∧ x2) <span class="pl-k">==</span> (x2 ∧ x1)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Commutative law works for boolean functions<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  <span class="pl-k">if</span> x1 ∧ (x2 ∧ x3) <span class="pl-k">==</span> (x1 ∧ x2) ∧ x3
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Associative law works for boolean functions<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  <span class="pl-k">if</span> (x1 ∧ (x2 ∨ x3)) <span class="pl-k">==</span> ((x1 ∧ x2) ∨ (x1 ∧ x3))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Distributivity law works: AND distributes over OR<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  <span class="pl-k">if</span> (x1 ∨ (x2 ∧ x3)) <span class="pl-k">==</span> ((x1 ∨ x2) ∧ (x1 ∨ x3))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Distributivity law works: OR distributes over AND<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  bdd6 <span class="pl-k">=</span> ¬(x1 ∧ ¬(¬x2 ∨ x3))
  valuation1 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Int, Bool}</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>, <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>, <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>)

  <span class="pl-k">if</span> <span class="pl-c1">is_⊥</span>(bdd6<span class="pl-k">|</span>valuation1)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>You can evaluate the function either with | or function restrict!<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  valuation2 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Int, Bool}</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> True)
  <span class="pl-k">if</span> bdd6<span class="pl-k">|</span>valuation2 <span class="pl-k">==</span> ¬x2 ∨ x3<span class="pl-k">:</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>You can also partially evaluate the function with restrict<span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span></pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LICENSE</h2>
<p>See <a href="https://github.com/thiagopbueno/pyddlib/">https://github.com/thiagopbueno/pyddlib/</a> for the original license.
A copy is added to this repository.</p>
</article></div>