<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text">
<h1 dir="auto"><a id="user-content-unicodeplots" class="anchor" aria-hidden="true" href="#unicodeplots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnicodePlots</h1>
<p dir="auto"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/U/UnicodePlots.html" rel="nofollow"><img src="https://camo.githubusercontent.com/89f7fc87941a8101d8bf5c443bf0b32a533f4c22fae4a76201b462706e98b187/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f552f556e69636f6465506c6f74732e6e616d65642e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/U/UnicodePlots.named.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaPlots/UnicodePlots.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://app.codecov.io/gh/JuliaPlots/UnicodePlots.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b699680b18ef5a6ade110cbafa25e08560eaa56f7e98f67576d378c233cd61d1/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961506c6f74732f556e69636f6465506c6f74732e6a6c2f6272616e63682f6d61737465722f6772617068732f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://codecov.io/gh/JuliaPlots/UnicodePlots.jl/branch/master/graphs/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/UnicodePlots/Ctj9q?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/e4eaf1642997cd02ab74cb0278446073b3df3eea14ed9779246e1dd5e66c2053/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f556e69636f6465506c6f74732f646570732e737667" alt="JuliaHub deps" data-canonical-src="https://juliahub.com/docs/UnicodePlots/deps.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=UnicodePlots" rel="nofollow"><img src="https://camo.githubusercontent.com/8af2e19de8020dc08041b22c7b18de8646c8d902df1b0d75ad0b825efdd17789/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f556e69636f6465506c6f7473" alt="UnicodePlots Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/UnicodePlots" style="max-width: 100%;"></a></p>
<p dir="auto">Advanced <a href="https://en.wikipedia.org/wiki/Unicode" rel="nofollow"><code>Unicode</code></a> plotting library designed for use in <code>Julia</code>'s <code>REPL</code>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/banner.jpg"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/banner.jpg" width="900" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-high-level-interface" class="anchor" aria-hidden="true" href="#high-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>High-level Interface</h2>
<p dir="auto">Here is a list of the main high-level functions for common scenarios:</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#lineplot"><code>lineplot</code></a> (Line Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#scatterplot"><code>scatterplot</code></a> (Scatter Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#staircase-plot"><code>stairs</code></a> (Staircase Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#barplot"><code>barplot</code></a> (Bar Plot - horizontal)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#histogram"><code>histogram</code></a> (Histogram - horizontal / vertical)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#boxplot"><code>boxplot</code></a> (Box Plot - horizontal)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#sparsity-pattern"><code>spy</code></a> (Sparsity Pattern)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#density-plot"><code>densityplot</code></a> (Density Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#contour-plot"><code>contourplot</code></a> (Contour Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#polar-plot"><code>polarplot</code></a> (Polar Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#heatmap-plot"><code>heatmap</code></a> (Heatmap Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#image-plot"><code>imageplot</code></a> (Image Plot)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#surface-plot"><code>surfaceplot</code></a> (Surface Plot - 3D)</li>
<li><a href="https://github.com/JuliaPlots/UnicodePlots.jl#isosurface-plot"><code>isosurface</code></a> (Isosurface Plot - 3D)</li>
</ul>
<details open="">
  <summary><a name="user-content-introduction"></a><b>Introduction</b></summary><br>
<p dir="auto">Here is a quick hello world example of a typical use-case:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnicodePlots
lineplot([-1, 2, 3, 7], [-1, 2, 9, 4], title=&quot;Example&quot;, name=&quot;my line&quot;, xlabel=&quot;x&quot;, ylabel=&quot;y&quot;)"><pre><span class="pl-k">using</span> UnicodePlots
<span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Example<span class="pl-pds">"</span></span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>my line<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">There are other types of <code>Canvas</code> available (see section <a href="https://github.com/JuliaPlots/UnicodePlots.jl#low-level-interface">Low-level Interface</a>).</p>
<p dir="auto">In some situations, such as printing to a file, using <code>AsciiCanvas</code>, <code>DotCanvas</code> or <code>BlockCanvas</code> might lead to better results:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plt = lineplot([-1, 2, 3, 7], [-1, 2, 9, 4], title=&quot;Example&quot;, name=&quot;my line&quot;,
               xlabel=&quot;x&quot;, ylabel=&quot;y&quot;, canvas=DotCanvas, border=:ascii)"><pre>plt <span class="pl-k">=</span> <span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Example<span class="pl-pds">"</span></span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>my line<span class="pl-pds">"</span></span>,
               xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>, canvas<span class="pl-k">=</span>DotCanvas, border<span class="pl-k">=</span><span class="pl-c1">:ascii</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot2.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Some plot methods have a mutating variant that ends with an exclamation mark:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot!(plt, [0, 4, 8], [10, 1, 10], color=:cyan, name=&quot;other line&quot;)"><pre><span class="pl-c1">lineplot!</span>(plt, [<span class="pl-c1">0</span>, <span class="pl-c1">4</span>, <span class="pl-c1">8</span>], [<span class="pl-c1">10</span>, <span class="pl-c1">1</span>, <span class="pl-c1">10</span>], color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>other line<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot3.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot3.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">One can adjust the plot <code>height</code> and <code>width</code> to the current terminal size by using <code>height=:auto</code> and/or <code>width=:auto</code>.</p>
<p dir="auto">You can reverse/flip the <code>Plot</code> axes by setting <code>xflip=true</code> and/or <code>yflip=true</code> on plot creation.</p>
</details>
<details open="">
  <summary><a name="user-content-lineplot"></a><b>Lineplot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot([1, 2, 7], [9, -6, 8], title=&quot;My Lineplot&quot;)"><pre><span class="pl-c1">lineplot</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">9</span>, <span class="pl-k">-</span><span class="pl-c1">6</span>, <span class="pl-c1">8</span>], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>My Lineplot<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot4.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot4.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">It's also possible to specify a function and a range:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plt = lineplot(-π/2, 2π, [cos, sin])"><pre>plt <span class="pl-k">=</span> <span class="pl-c1">lineplot</span>(<span class="pl-k">-</span>π<span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>π, [cos, sin])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot5.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot5.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">You can also plot lines by specifying an intercept and slope:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot!(plt, -.5, .2, name=&quot;line&quot;)"><pre><span class="pl-c1">lineplot!</span>(plt, <span class="pl-k">-</span>.<span class="pl-c1">5</span>, .<span class="pl-c1">2</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>line<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot6.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot6.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Plotting multiple series is supported by providing a <code>Matrix</code> (<code>&lt;: AbstractMatrix</code>) for the <code>y</code> argument, with the individual series corresponding to its columns. Auto-labeling is by default, but you can also label each series by providing a <code>Vector</code> or a <code>1xn</code> <code>Matrix</code> such as <code>["series 1" "series2" ...]</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot(1:10, [0:9 3:12 reverse(5:14) fill(4, 10)], color=[:green :red :yellow :cyan])"><pre><span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, [<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">9</span> <span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">12</span> <span class="pl-c1">reverse</span>(<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">14</span>) <span class="pl-c1">fill</span>(<span class="pl-c1">4</span>, <span class="pl-c1">10</span>)], color<span class="pl-k">=</span>[<span class="pl-c1">:green</span> <span class="pl-c1">:red</span> <span class="pl-c1">:yellow</span> <span class="pl-c1">:cyan</span>])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot7.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot7.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Physical quantities of <a href="https://github.com/PainterQubits/Unitful.jl"><code>Unitful.jl</code></a> are supported through <a href="https://pkgdocs.julialang.org/dev/creating-packages/#Conditional-loading-of-code-in-packages-(Extensions)" rel="nofollow">package extensions - weak dependencies</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Unitful
a, t = 1u&quot;m/s^2&quot;, (0:100) * u&quot;s&quot;
lineplot(a / 2 * t .^ 2, a * t, xlabel=&quot;position&quot;, ylabel=&quot;speed&quot;, height=10)"><pre><span class="pl-k">using</span> Unitful
a, t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m/s^2<span class="pl-pds">"</span></span>, (<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">100</span>) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>
<span class="pl-c1">lineplot</span>(a <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> t <span class="pl-k">.^</span> <span class="pl-c1">2</span>, a <span class="pl-k">*</span> t, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>position<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>speed<span class="pl-pds">"</span></span>, height<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot8.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot8.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Intervals from <a href="https://github.com/JuliaMath/IntervalSets.jl"><code>IntervalSets.jl</code></a> are supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IntervalSets
lineplot(-1..3, x -&gt; x^5 - 5x^4 + 5x^3 + 5x^2 - 6x - 1; name=&quot;quintic&quot;)"><pre><span class="pl-k">using</span> IntervalSets
<span class="pl-c1">lineplot</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">..</span><span class="pl-c1">3</span>, x <span class="pl-k">-&gt;</span> x<span class="pl-k">^</span><span class="pl-c1">5</span> <span class="pl-k">-</span> <span class="pl-c1">5</span>x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> <span class="pl-c1">6</span>x <span class="pl-k">-</span> <span class="pl-c1">1</span>; name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>quintic<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot9.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot9.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Use <code>head_tail</code> to mimic plotting arrows (<code>:head</code>, <code>:tail</code> or <code>:both</code>) where the length of the "arrow" head or tail is controlled using <code>head_tail_frac</code> where e.g. giving a value of <code>0.1</code> means <code>10%</code> of the segment length:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot(1:10, 1:10, head_tail=:head, head_tail_frac=.1, height=4)"><pre><span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, head_tail<span class="pl-k">=</span><span class="pl-c1">:head</span>, head_tail_frac<span class="pl-k">=</span>.<span class="pl-c1">1</span>, height<span class="pl-k">=</span><span class="pl-c1">4</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot10.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot10.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto"><code>UnicodePlots</code> exports <code>hline!</code> and <code>vline!</code> for drawing vertical and horizontal lines on a plot:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Plot([NaN], [NaN]; xlim=(0, 8), ylim=(0, 8))
vline!(p, [2, 6], [2, 6], color=:red)
hline!(p, [2, 6], [2, 6], color=:white)
hline!(p, 7, color=:cyan)
vline!(p, 1, color=:yellow)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Plot</span>([<span class="pl-c1">NaN</span>], [<span class="pl-c1">NaN</span>]; xlim<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">8</span>), ylim<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">8</span>))
<span class="pl-c1">vline!</span>(p, [<span class="pl-c1">2</span>, <span class="pl-c1">6</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">6</span>], color<span class="pl-k">=</span><span class="pl-c1">:red</span>)
<span class="pl-c1">hline!</span>(p, [<span class="pl-c1">2</span>, <span class="pl-c1">6</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">6</span>], color<span class="pl-k">=</span><span class="pl-c1">:white</span>)
<span class="pl-c1">hline!</span>(p, <span class="pl-c1">7</span>, color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>)
<span class="pl-c1">vline!</span>(p, <span class="pl-c1">1</span>, color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot11.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/lineplot11.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-scatterplot"></a><b>Scatterplot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="scatterplot(randn(50), randn(50), title=&quot;My Scatterplot&quot;)"><pre><span class="pl-c1">scatterplot</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">50</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">50</span>), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>My Scatterplot<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Axis scaling (<code>xscale</code> and/or <code>yscale</code>) is supported: choose from (<code>:identity</code>, <code>:ln</code>, <code>:log2</code>, <code>:log10</code>) or use an arbitrary scale function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="scatterplot(1:10, 1:10, xscale=:log10, yscale=:log10)"><pre><span class="pl-c1">scatterplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, xscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>, yscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot2.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">For the axis scale exponent, one can revert to using <code>ASCII</code> characters instead of <code>Unicode</code> ones using the keyword <code>unicode_exponent=false</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="scatterplot(1:4, 1:4, xscale=:log10, yscale=:ln, unicode_exponent=false, height=6)"><pre><span class="pl-c1">scatterplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, xscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>, yscale<span class="pl-k">=</span><span class="pl-c1">:ln</span>, unicode_exponent<span class="pl-k">=</span><span class="pl-c1">false</span>, height<span class="pl-k">=</span><span class="pl-c1">6</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot3.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot3.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Using a <code>marker</code> is supported, choose a <code>Char</code>, a unit length <code>String</code> or a symbol name such as <code>:circle</code> (more from <code>keys(UnicodePlots.MARKERS)</code>).
One can also provide a vector of <code>marker</code>s and/or <code>color</code>s as in the following example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="scatterplot([1, 2, 3], [3, 4, 1], marker=[:circle, '', &quot;∫&quot;],
            color=[:cyan, nothing, :yellow], height=2)"><pre><span class="pl-c1">scatterplot</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">1</span>], marker<span class="pl-k">=</span>[<span class="pl-c1">:circle</span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">"</span>∫<span class="pl-pds">"</span></span>],
            color<span class="pl-k">=</span>[<span class="pl-c1">:cyan</span>, <span class="pl-c1">nothing</span>, <span class="pl-c1">:yellow</span>], height<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot4.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/scatterplot4.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">As with <code>lineplot</code>, <code>scatterplot</code> supports plotting physical <code>Unitful</code> quantities, or plotting multiple series (<code>Matrix</code> argument).</p>
</details>
<details open="">
  <summary><a name="user-content-staircase-plot"></a><b>Staircase plot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="stairs([1, 2, 4, 7, 8], [1, 3, 4, 2, 7],
       color=:yellow, style=:post, height=6, title=&quot;Staircase&quot;)"><pre><span class="pl-c1">stairs</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>],
       color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>, style<span class="pl-k">=</span><span class="pl-c1">:post</span>, height<span class="pl-k">=</span><span class="pl-c1">6</span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Staircase<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/stairs1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/stairs1.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-barplot"></a><b>Barplot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="barplot([&quot;Paris&quot;, &quot;New York&quot;, &quot;Madrid&quot;], [2.244, 8.406, 3.165], title=&quot;Population&quot;)"><pre><span class="pl-c1">barplot</span>([<span class="pl-s"><span class="pl-pds">"</span>Paris<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>New York<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Madrid<span class="pl-pds">"</span></span>], [<span class="pl-c1">2.244</span>, <span class="pl-c1">8.406</span>, <span class="pl-c1">3.165</span>], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Population<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/barplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/barplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto"><em>Note</em>: You can use the keyword argument <code>symbols</code> to specify the characters that should be used to plot the bars (e.g. <code>symbols=['#']</code>).</p>
</details>
<details open="">
  <summary><a name="user-content-histogram"></a><b>Histogram</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="histogram(randn(1_000) .* .1, nbins=15, closed=:left)"><pre><span class="pl-c1">histogram</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1_000</span>) <span class="pl-k">.*</span> .<span class="pl-c1">1</span>, nbins<span class="pl-k">=</span><span class="pl-c1">15</span>, closed<span class="pl-k">=</span><span class="pl-c1">:left</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/histogram1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/histogram1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">The <code>histogram</code> function also supports axis scaling using the parameter <code>xscale</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="histogram(randn(1_000) .* .1, nbins=15, closed=:right, xscale=:log10)"><pre><span class="pl-c1">histogram</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1_000</span>) <span class="pl-k">.*</span> .<span class="pl-c1">1</span>, nbins<span class="pl-k">=</span><span class="pl-c1">15</span>, closed<span class="pl-k">=</span><span class="pl-c1">:right</span>, xscale<span class="pl-k">=</span><span class="pl-c1">:log10</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/histogram2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/histogram2.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Vertical histograms are supported:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="histogram(randn(100_000) .* .1, nbins=60, vertical=true, height=10)"><pre><span class="pl-c1">histogram</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">100_000</span>) <span class="pl-k">.*</span> .<span class="pl-c1">1</span>, nbins<span class="pl-k">=</span><span class="pl-c1">60</span>, vertical<span class="pl-k">=</span><span class="pl-c1">true</span>, height<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/histogram3.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/histogram3.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-boxplot"></a><b>Boxplot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="boxplot([1, 3, 3, 4, 6, 10])"><pre><span class="pl-c1">boxplot</span>([<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">10</span>])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/boxplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/boxplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="boxplot([&quot;one&quot;, &quot;two&quot;],
        [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]],
        title=&quot;Grouped Boxplot&quot;, xlabel=&quot;x&quot;)"><pre><span class="pl-c1">boxplot</span>([<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>],
        [[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>]],
        title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Grouped Boxplot<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/boxplot2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/boxplot2.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-sparsity-pattern"></a><b>Sparsity Pattern</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays
spy(sprandn(50, 120, .05))"><pre><span class="pl-k">using</span> SparseArrays
<span class="pl-c1">spy</span>(<span class="pl-c1">sprandn</span>(<span class="pl-c1">50</span>, <span class="pl-c1">120</span>, .<span class="pl-c1">05</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/spy1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/spy1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Plotting the zeros pattern is also possible using <code>show_zeros=true</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays
spy(sprandn(50, 120, .9), show_zeros=true)"><pre><span class="pl-k">using</span> SparseArrays
<span class="pl-c1">spy</span>(<span class="pl-c1">sprandn</span>(<span class="pl-c1">50</span>, <span class="pl-c1">120</span>, .<span class="pl-c1">9</span>), show_zeros<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/spy2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/spy2.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-density-plot"></a><b>Density Plot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plt = densityplot(randn(10_000), randn(10_000))
densityplot!(plt, randn(10_000) .+ 2, randn(10_000) .+ 2)"><pre>plt <span class="pl-k">=</span> <span class="pl-c1">densityplot</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>))
<span class="pl-c1">densityplot!</span>(plt, <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>) <span class="pl-k">.+</span> <span class="pl-c1">2</span>, <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>) <span class="pl-k">.+</span> <span class="pl-c1">2</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/densityplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/densityplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Using a scale function (e.g. damping peaks) is supported using the <code>dscale</code> keyword:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = randn(10_000); x[1_000:6_000] .= 2
densityplot(x, randn(10_000); dscale=x -&gt; log(1 + x))"><pre>x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>); x[<span class="pl-c1">1_000</span><span class="pl-k">:</span><span class="pl-c1">6_000</span>] <span class="pl-k">.=</span> <span class="pl-c1">2</span>
<span class="pl-c1">densityplot</span>(x, <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>); dscale<span class="pl-k">=</span>x <span class="pl-k">-&gt;</span> <span class="pl-c1">log</span>(<span class="pl-c1">1</span> <span class="pl-k">+</span> x))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/densityplot2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/densityplot2.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-contour-plot"></a><b>Contour Plot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="contourplot(-3:.01:3, -7:.01:3, (x, y) -&gt; exp(-(x / 2)^2 - ((y + 2) / 4)^2))"><pre><span class="pl-c1">contourplot</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span>.<span class="pl-c1">01</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-k">-</span><span class="pl-c1">7</span><span class="pl-k">:</span>.<span class="pl-c1">01</span><span class="pl-k">:</span><span class="pl-c1">3</span>, (x, y) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>(x <span class="pl-k">/</span> <span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> ((y <span class="pl-k">+</span> <span class="pl-c1">2</span>) <span class="pl-k">/</span> <span class="pl-c1">4</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/contourplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/contourplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">The keyword <code>levels</code> controls the number of contour levels. One can also choose a <code>colormap</code> as with <code>heatmap</code>, and disable the colorbar using <code>colorbar=false</code>.</p>
</details>
<details open="">
  <summary><a name="user-content-polar-plot"></a><b>Polar Plot</b></summary><br>
<p dir="auto">Plots data in polar coordinates with <code>θ</code> the angles in radians.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="polarplot(range(0, 2π, length=20), range(0, 2, length=20))"><pre><span class="pl-c1">polarplot</span>(<span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>π, length<span class="pl-k">=</span><span class="pl-c1">20</span>), <span class="pl-c1">range</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>, length<span class="pl-k">=</span><span class="pl-c1">20</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/polarplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/polarplot1.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-heatmap-plot"></a><b>Heatmap Plot</b></summary><br>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="heatmap(repeat(collect(0:10)', outer=(11, 1)), zlabel=&quot;z&quot;)"><pre><span class="pl-c1">heatmap</span>(<span class="pl-c1">repeat</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">10</span>)<span class="pl-k">'</span>, outer<span class="pl-k">=</span>(<span class="pl-c1">11</span>, <span class="pl-c1">1</span>)), zlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/heatmap1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/heatmap1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">The <code>heatmap</code> function also supports axis scaling using the parameters <code>xfact</code>, <code>yfact</code> and axis offsets after scaling using <code>xoffset</code> and <code>yoffset</code>.</p>
<p dir="auto">The <code>colormap</code> parameter may be used to specify a named or custom colormap. See the <code>heatmap</code> function documentation for more details.</p>
<p dir="auto">In addition, the <code>colorbar</code> and <code>colorbar_border</code> options may be used to toggle the colorbar and configure its border.</p>
<p dir="auto">The <code>zlabel</code> option and <code>zlabel!</code> method may be used to set the <code>z</code> axis (colorbar) label.</p>
<p dir="auto">Use the <code>array</code> keyword in order to display the matrix in the array convention (as in the repl).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="heatmap(collect(0:30) * collect(0:30)', xfact=.1, yfact=.1, xoffset=-1.5, colormap=:inferno)"><pre><span class="pl-c1">heatmap</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">30</span>) <span class="pl-k">*</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">30</span>)<span class="pl-k">'</span>, xfact<span class="pl-k">=</span>.<span class="pl-c1">1</span>, yfact<span class="pl-k">=</span>.<span class="pl-c1">1</span>, xoffset<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">1.5</span>, colormap<span class="pl-k">=</span><span class="pl-c1">:inferno</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/heatmap2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/heatmap2.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-image-plot"></a><b>Image Plot</b></summary><br>
<p dir="auto">Draws an image, surround it with decorations. <code>Sixel</code> are supported (experimental) under a compatible terminal through <a href="https://github.com/JuliaImages/ImageInTerminal.jl"><code>ImageInTerminal</code></a> (which must be imported before <code>UnicodePlots</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import ImageInTerminal  # mandatory (triggers glue code loading)
using TestImages
imageplot(testimage(&quot;monarch_color_256&quot;), title=&quot;monarch&quot;)"><pre><span class="pl-k">import</span> ImageInTerminal  <span class="pl-c"><span class="pl-c">#</span> mandatory (triggers glue code loading)</span>
<span class="pl-k">using</span> TestImages
<span class="pl-c1">imageplot</span>(<span class="pl-c1">testimage</span>(<span class="pl-s"><span class="pl-pds">"</span>monarch_color_256<span class="pl-pds">"</span></span>), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>monarch<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/imageplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/imageplot1.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-surface-plot"></a><b>Surface Plot</b></summary><br>
<p dir="auto">Plots a colored surface using height values <code>z</code> above a <code>x-y</code> plane, in three dimensions (masking values using <code>NaN</code>s is supported).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sombrero(x, y) = 15sinc(√(x^2 + y^2) / π)
surfaceplot(-8:.5:8, -8:.5:8, sombrero, colormap=:jet)"><pre><span class="pl-en">sombrero</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">15</span><span class="pl-c1">sinc</span>(<span class="pl-k">√</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> π)
<span class="pl-c1">surfaceplot</span>(<span class="pl-k">-</span><span class="pl-c1">8</span><span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">8</span>, <span class="pl-k">-</span><span class="pl-c1">8</span><span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">8</span>, sombrero, colormap<span class="pl-k">=</span><span class="pl-c1">:jet</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/surfaceplot1.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/surfaceplot1.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">Use <code>lines=true</code> to increase the density (underlying call to <code>lineplot</code> instead of <code>scatterplot</code>, with color interpolation).
By default, <code>surfaceplot</code> scales heights to adjust aspect the other axes with <code>zscale=:aspect</code>.
To plot a slice in 3D, use an anonymous function which maps to a constant value: <code>zscale=z -&gt; a_constant</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="surfaceplot(
  -2:2, -2:2, (x, y) -&gt; 15sinc(√(x^2 + y^2) / π),
  zscale=z -&gt; 0, lines=true, colormap=:jet
)"><pre><span class="pl-c1">surfaceplot</span>(
  <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>, (x, y) <span class="pl-k">-&gt;</span> <span class="pl-c1">15</span><span class="pl-c1">sinc</span>(<span class="pl-k">√</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">/</span> π),
  zscale<span class="pl-k">=</span>z <span class="pl-k">-&gt;</span> <span class="pl-c1">0</span>, lines<span class="pl-k">=</span><span class="pl-c1">true</span>, colormap<span class="pl-k">=</span><span class="pl-c1">:jet</span>
)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/surfaceplot2.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/surfaceplot2.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<details open="">
  <summary><a name="user-content-isosurface-plot"></a><b>Isosurface Plot</b></summary><br>
<p dir="auto">Uses <a href="https://github.com/JuliaGeometry/MarchingCubes.jl"><code>MarchingCubes.jl</code></a> to extract an isosurface, where <code>isovalue</code> controls the surface isovalue.
Using <code>centroid</code> enables plotting the triangulation centroids instead of the triangle vertices (better for small plots).
Back face culling (hide not visible facets) can be activated using <code>cull=true</code>.
One can use the legacy 'Marching Cubes' algorithm using <code>legacy=true</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="torus(x, y, z, r=0.2, R=0.5) = (√(x^2 + y^2) - R)^2 + z^2 - r^2
isosurface(-1:.1:1, -1:.1:1, -1:.1:1, torus, cull=true, zoom=2, elevation=50)"><pre><span class="pl-en">torus</span>(x, y, z, r<span class="pl-k">=</span><span class="pl-c1">0.2</span>, R<span class="pl-k">=</span><span class="pl-c1">0.5</span>) <span class="pl-k">=</span> (<span class="pl-k">√</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">-</span> R)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> z<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> r<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">isosurface</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, torus, cull<span class="pl-k">=</span><span class="pl-c1">true</span>, zoom<span class="pl-k">=</span><span class="pl-c1">2</span>, elevation<span class="pl-k">=</span><span class="pl-c1">50</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/isosurface.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/isosurface.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<h5 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">To install UnicodePlots, start up <code>Julia</code> and type the following code snippet into the <code>REPL</code> (makes use of the native <code>Julia</code> package manager <code>Pkg</code>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;UnicodePlots&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>UnicodePlots<span class="pl-pds">"</span></span>)</pre></div>
</details>
<h5 dir="auto"><a id="user-content-saving-figures" class="anchor" aria-hidden="true" href="#saving-figures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Saving figures</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">Saving plots as <code>png</code> or <code>txt</code> files using the <code>savefig</code> command is supported (saving as <code>png</code> is experimental and requires <code>import FreeType, FileIO</code> before loading <code>UnicodePlots</code>).</p>
<p dir="auto">To recover the plot as a string with ansi color codes use <code>string(p; color=true)</code>.</p>
</details>
<h5 dir="auto"><a id="user-content-color-mode" class="anchor" aria-hidden="true" href="#color-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Color mode</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">When the <code>COLORTERM</code> environment variable is set to either <code>24bit</code> or <code>truecolor</code>, <code>UnicodePlots</code> will use <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit" rel="nofollow">24bit colors</a> as opposed to <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit" rel="nofollow">8bit colors</a> or even <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit" rel="nofollow">4bit colors</a> for named colors.</p>
<p dir="auto">One can force a specific colormode using either <code>UnicodePlots.truecolors!()</code> or <code>UnicodePlots.colors256!()</code>.</p>
<p dir="auto">Named colors such as <code>:red</code> or <code>:light_red</code> will use <code>256</code> color values (rendering will be terminal dependent). In order to force named colors to use true colors instead, use <code>UnicodePlots.USE_LUT[]=true</code>.</p>
<p dir="auto">The default color cycle can be changed to bright (high intensity) colors using <code>UnicodePlots.brightcolors!()</code> instead of the default <code>UnicodePlots.faintcolors!()</code>.</p>
</details>
<h5 dir="auto"><a id="user-content-3d-plots" class="anchor" aria-hidden="true" href="#3d-plots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>3D plots</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">3d plots use a so-called "Model-View-Projection" transformation matrix <code>MVP</code> on input data to project 3D plots to a 2D screen.</p>
<p dir="auto">Use keywords<code>elevation</code>, <code>azimuth</code>, <code>up</code> or <code>zoom</code> to control the view matrix, a.k.a. camera.</p>
<p dir="auto">The <code>projection</code> type for <code>MVP</code> can be set to either <code>:persp(ective)</code> or <code>:ortho(graphic)</code>.</p>
<p dir="auto">Displaying the <code>x</code>, <code>y</code>, and <code>z</code> axes can be controlled using the <code>axes3d</code> keyword.</p>
<p dir="auto">For enhanced resolution, use a wider and/or taller <code>Plot</code> (this can be achieved using <code>default_size!(width=60)</code> for all future plots).</p>
</details>
<h5 dir="auto"><a id="user-content-layout" class="anchor" aria-hidden="true" href="#layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Layout</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto"><code>UnicodePlots</code> is integrated in <a href="https://github.com/JuliaPlots/Plots.jl"><code>Plots</code></a> as a backend, with support for <a href="https://docs.juliaplots.org/stable/gallery/unicodeplots/generated/unicodeplots-ref17" rel="nofollow">basic layout</a>.</p>
<p dir="auto">For a more complex layout, use the <a href="https://fedeclaudi.github.io/Term.jl/dev/layout/grid" rel="nofollow"><code>grid</code></a> function from <a href="https://github.com/FedeClaudi/Term.jl"><code>Term</code></a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UnicodePlots, Term
panel(p; kw...) = begin
  p.margin[] = p.padding[] = 0  # make plots more compact
  Panel(string(p; color=true); style=&quot;hidden&quot;, fit=true, kw...)
end

(
  panel(lineplot(1:2)) *
  panel(scatterplot(rand(100)))
) / (
  panel(lineplot(2:-1:1)) * 
  panel(densityplot(randn(1_000), randn(1_000)))
) |&gt; print

grid(map(i -&gt; panel(lineplot(-i:i)), 1:5); show_placeholder=true) |&gt; print
grid(map(i -&gt; panel(lineplot(-i:i)), 1:3); layout=(2, nothing)) |&gt; print
grid(map(i -&gt; panel(lineplot(-i:i)), 1:3); layout=(nothing, 1)) |&gt; print"><pre><span class="pl-k">using</span> UnicodePlots, Term
<span class="pl-en">panel</span>(p; kw<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
  p<span class="pl-k">.</span>margin[] <span class="pl-k">=</span> p<span class="pl-k">.</span>padding[] <span class="pl-k">=</span> <span class="pl-c1">0</span>  <span class="pl-c"><span class="pl-c">#</span> make plots more compact</span>
  <span class="pl-c1">Panel</span>(<span class="pl-c1">string</span>(p; color<span class="pl-k">=</span><span class="pl-c1">true</span>); style<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>hidden<span class="pl-pds">"</span></span>, fit<span class="pl-k">=</span><span class="pl-c1">true</span>, kw<span class="pl-k">...</span>)
<span class="pl-k">end</span>

(
  <span class="pl-c1">panel</span>(<span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>)) <span class="pl-k">*</span>
  <span class="pl-c1">panel</span>(<span class="pl-c1">scatterplot</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)))
) <span class="pl-k">/</span> (
  <span class="pl-c1">panel</span>(<span class="pl-c1">lineplot</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)) <span class="pl-k">*</span> 
  <span class="pl-c1">panel</span>(<span class="pl-c1">densityplot</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">1_000</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">1_000</span>)))
) <span class="pl-k">|&gt;</span> print

<span class="pl-c1">grid</span>(<span class="pl-c1">map</span>(i <span class="pl-k">-&gt;</span> <span class="pl-c1">panel</span>(<span class="pl-c1">lineplot</span>(<span class="pl-k">-</span>i<span class="pl-k">:</span>i)), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>); show_placeholder<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">|&gt;</span> print
<span class="pl-c1">grid</span>(<span class="pl-c1">map</span>(i <span class="pl-k">-&gt;</span> <span class="pl-c1">panel</span>(<span class="pl-c1">lineplot</span>(<span class="pl-k">-</span>i<span class="pl-k">:</span>i)), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>); layout<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">nothing</span>)) <span class="pl-k">|&gt;</span> print
<span class="pl-c1">grid</span>(<span class="pl-c1">map</span>(i <span class="pl-k">-&gt;</span> <span class="pl-c1">panel</span>(<span class="pl-c1">lineplot</span>(<span class="pl-k">-</span>i<span class="pl-k">:</span>i)), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>); layout<span class="pl-k">=</span>(<span class="pl-c1">nothing</span>, <span class="pl-c1">1</span>)) <span class="pl-k">|&gt;</span> print</pre></div>
</details>
<h5 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known issues</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">Using a non <code>true monospace font</code> can lead to visual problems on a <code>BrailleCanvas</code> (border versus canvas).</p>
<p dir="auto">Either change the font to e.g. <a href="https://juliamono.netlify.app/" rel="nofollow">JuliaMono</a> or use <code>border=:dotted</code> keyword argument in the plots.</p>
<p dir="auto">For a <code>Jupyter</code> notebook with the <code>IJulia</code> kernel see <a href="https://juliamono.netlify.app/faq/#can_i_use_this_font_in_a_jupyter_notebook_and_how_do_i_do_it" rel="nofollow">here</a>.</p>
<p dir="auto">(Experimental) Terminals seem to respect a standard aspect ratio of <code>4:3</code>, hence a square matrix does not often look square in the terminal.</p>
<p dir="auto">You can pass the experimental keyword <code>fix_ar=true</code> to <code>spy</code> or <code>heatmap</code> in order to recover a unit aspect ratio.</p>
</details>
<h5 dir="auto"><a id="user-content-methods-api" class="anchor" aria-hidden="true" href="#methods-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods (API)</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">Non-exhaustive methods description:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>title!(plot::Plot, title::String)</code></p>
<ul dir="auto">
<li><code>title</code> the string to write in the top center of the plot window. If the title is empty the whole line of the title will not be drawn</li>
</ul>
</li>
<li>
<p dir="auto"><code>xlabel!(plot::Plot, xlabel::String)</code></p>
<ul dir="auto">
<li><code>xlabel</code> the string to display on the bottom of the plot window. If the title is empty the whole line of the label will not be drawn</li>
</ul>
</li>
<li>
<p dir="auto"><code>ylabel!(plot::Plot, xlabel::String)</code></p>
<ul dir="auto">
<li><code>ylabel</code> the string to display on the far left of the plot window.</li>
</ul>
</li>
</ul>
<p dir="auto">The method <code>label!</code> is responsible for the setting all the textual decorations of a plot. It has two functions:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>label!(plot::Plot, where::Symbol, value::String)</code></p>
<ul dir="auto">
<li><code>where</code> can be any of: <code>:tl</code> (top-left), <code>:t</code> (top-center), <code>:tr</code> (top-right), <code>:bl</code> (bottom-left), <code>:b</code> (bottom-center), <code>:br</code> (bottom-right), <code>:l</code> (left), <code>:r</code> (right)</li>
</ul>
</li>
<li>
<p dir="auto"><code>label!(plot::Plot, where::Symbol, row::Int, value::String)</code></p>
<ul dir="auto">
<li>
<p dir="auto"><code>where</code> can be any of: <code>:l</code> (left), <code>:r</code> (right)</p>
</li>
<li>
<p dir="auto"><code>row</code> can be between 1 and the number of character rows of the canvas</p>
</li>
</ul>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = y = collect(1:10)
plt = lineplot(x, y, canvas=DotCanvas, height=10, width=30)
lineplot!(plt, x, reverse(y))
title!(plt, &quot;Plot Title&quot;)
for loc in (:tl, :t, :tr, :bl, :b, :br)
  label!(plt, loc, string(':', loc))
end
label!(plt, :l, &quot;:l&quot;)
label!(plt, :r, &quot;:r&quot;)
for i in 1:10
  label!(plt, :l, i, string(i))
  label!(plt, :r, i, string(i))
end
plt"><pre>x <span class="pl-k">=</span> y <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
plt <span class="pl-k">=</span> <span class="pl-c1">lineplot</span>(x, y, canvas<span class="pl-k">=</span>DotCanvas, height<span class="pl-k">=</span><span class="pl-c1">10</span>, width<span class="pl-k">=</span><span class="pl-c1">30</span>)
<span class="pl-c1">lineplot!</span>(plt, x, <span class="pl-c1">reverse</span>(y))
<span class="pl-c1">title!</span>(plt, <span class="pl-s"><span class="pl-pds">"</span>Plot Title<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> loc <span class="pl-k">in</span> (<span class="pl-c1">:tl</span>, <span class="pl-c1">:t</span>, <span class="pl-c1">:tr</span>, <span class="pl-c1">:bl</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:br</span>)
  <span class="pl-c1">label!</span>(plt, loc, <span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">'</span>:<span class="pl-pds">'</span></span>, loc))
<span class="pl-k">end</span>
<span class="pl-c1">label!</span>(plt, <span class="pl-c1">:l</span>, <span class="pl-s"><span class="pl-pds">"</span>:l<span class="pl-pds">"</span></span>)
<span class="pl-c1">label!</span>(plt, <span class="pl-c1">:r</span>, <span class="pl-s"><span class="pl-pds">"</span>:r<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
  <span class="pl-c1">label!</span>(plt, <span class="pl-c1">:l</span>, i, <span class="pl-c1">string</span>(i))
  <span class="pl-c1">label!</span>(plt, <span class="pl-c1">:r</span>, i, <span class="pl-c1">string</span>(i))
<span class="pl-k">end</span>
plt</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/decorate.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/decorate.png" width="450" style="max-width: 100%;"></a><br></p>
<ul dir="auto">
<li><code>annotate!(plot::Plot, x::Number, y::Number, text::AbstractString; kw...)</code>
<ul dir="auto">
<li><code>text</code> arbitrary annotation at position (x, y)</li>
</ul>
</li>
</ul>
</details>
<h5 dir="auto"><a id="user-content-keywords-description-api" class="anchor" aria-hidden="true" href="#keywords-description-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keywords description (API)</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">All plots support the set (or a subset) of the following named parameters:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>symbols::Array = ['■']</code>: collection of characters used to render the bars.</p>
</li>
<li>
<p dir="auto"><code>title::String = ""</code>: text displayed on top of the plot.</p>
</li>
<li>
<p dir="auto"><code>name::String = ""</code>: current drawing annotation displayed on the right.</p>
</li>
<li>
<p dir="auto"><code>xlabel::String = ""</code>: text displayed on the <code>x</code> axis of the plot.</p>
</li>
<li>
<p dir="auto"><code>ylabel::String = ""</code>: text displayed on the <code>y</code> axis of the plot.</p>
</li>
<li>
<p dir="auto"><code>zlabel::String = ""</code>: text displayed on the <code>z</code> axis (colorbar) of the plot.</p>
</li>
<li>
<p dir="auto"><code>xscale::Symbol = :identity</code>: <code>x</code>-axis scale (<code>:identity</code>, <code>:ln</code>, <code>:log2</code>, <code>:log10</code>), or scale function e.g. <code>x -&gt; log10(x)</code>.</p>
</li>
<li>
<p dir="auto"><code>yscale::Symbol = :identity</code>: <code>y</code>-axis scale.</p>
</li>
<li>
<p dir="auto"><code>labels::Bool = true</code>: show plot labels.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot(1:.5:20, sin, labels=false)"><pre><span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">20</span>, sin, labels<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/labels.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/labels.png" width="450" style="max-width: 100%;"></a><br></p>
</li>
<li>
<p dir="auto"><code>border::Symbol = :solid</code>: plot bounding box style (<code>:corners</code>, <code>:solid</code>, <code>:bold</code>, <code>:dashed</code>, <code>:dotted</code>, <code>:ascii</code>, <code>:none</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot([-1., 2, 3, 7], [1.,2, 9, 4], canvas=DotCanvas, border=:dashed)"><pre><span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], canvas<span class="pl-k">=</span>DotCanvas, border<span class="pl-k">=</span><span class="pl-c1">:dashed</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_dashed.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_dashed.png" width="450" style="max-width: 100%;"></a><br></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot([-1., 2, 3, 7], [1.,2, 9, 4], canvas=DotCanvas, border=:ascii)"><pre><span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], canvas<span class="pl-k">=</span>DotCanvas, border<span class="pl-k">=</span><span class="pl-c1">:ascii</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_ascii.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_ascii.png" width="450" style="max-width: 100%;"></a><br></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot([-1., 2, 3, 7], [1.,2, 9, 4], canvas=DotCanvas, border=:bold)"><pre><span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], canvas<span class="pl-k">=</span>DotCanvas, border<span class="pl-k">=</span><span class="pl-c1">:bold</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_bold.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_bold.png" width="450" style="max-width: 100%;"></a><br></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot([-1., 2, 3, 7], [1.,2, 9, 4], border=:dotted)"><pre><span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], border<span class="pl-k">=</span><span class="pl-c1">:dotted</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_dotted.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_dotted.png" width="450" style="max-width: 100%;"></a><br></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot([-1., 2, 3, 7], [1.,2, 9, 4], border=:none)"><pre><span class="pl-c1">lineplot</span>([<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">2</span>, <span class="pl-c1">9</span>, <span class="pl-c1">4</span>], border<span class="pl-k">=</span><span class="pl-c1">:none</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_none.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/border_none.png" width="450" style="max-width: 100%;"></a><br></p>
</li>
<li>
<p dir="auto"><code>margin::Int = 3</code>: number of empty characters to the left of the whole plot.</p>
</li>
<li>
<p dir="auto"><code>padding::Int = 1</code>: left and right space between the labels and the canvas.</p>
</li>
<li>
<p dir="auto"><code>color::Symbol = :auto</code>: choose from (<code>:green</code>, <code>:blue</code>, <code>:red</code>, <code>:yellow</code>, <code>:cyan</code>, <code>:magenta</code>, <code>:white</code>, <code>:normal</code>, <code>:auto</code>), use an integer in <code>[0-255]</code>, or provide <code>3</code> integers as <code>RGB</code> components.</p>
</li>
<li>
<p dir="auto"><code>height::Int = 15</code>: number of canvas rows, or <code>:auto</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot(1:.5:20, sin, height=18)"><pre><span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">20</span>, sin, height<span class="pl-k">=</span><span class="pl-c1">18</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/height.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/height.png" width="450" style="max-width: 100%;"></a><br></p>
</li>
<li>
<p dir="auto"><code>width::Int = 40</code>: number of characters per canvas row, or <code>:auto</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lineplot(1:.5:20, sin, width=60)"><pre><span class="pl-c1">lineplot</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>.<span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">20</span>, sin, width<span class="pl-k">=</span><span class="pl-c1">60</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/width.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/width.png" width="450" style="max-width: 100%;"></a><br></p>
</li>
<li>
<p dir="auto"><code>xlim::Tuple = (0, 0)</code>: plotting range for the <code>x</code> axis (<code>(0, 0)</code> stands for automatic).</p>
</li>
<li>
<p dir="auto"><code>ylim::Tuple = (0, 0)</code>: plotting range for the <code>y</code> axis.</p>
</li>
<li>
<p dir="auto"><code>zlim::Tuple = (0, 0)</code>: colormap scaled data range.</p>
</li>
<li>
<p dir="auto"><code>xticks::Bool = true</code>: set <code>false</code> to disable ticks (labels) on <code>x</code>-axis.</p>
</li>
<li>
<p dir="auto"><code>yticks::Bool = true</code>: set <code>false</code> to disable ticks (labels) on <code>y</code>-axis.</p>
</li>
<li>
<p dir="auto"><code>xflip::Bool = false</code>: set <code>true</code> to flip the <code>x</code> axis.</p>
</li>
<li>
<p dir="auto"><code>yflip::Bool = false</code>: set <code>true</code> to flip the <code>y</code> axis.</p>
</li>
<li>
<p dir="auto"><code>colorbar::Bool = false</code>: toggle the colorbar.</p>
</li>
<li>
<p dir="auto"><code>colormap::Symbol = :viridis</code>: choose a symbol from <code>ColorSchemes.jl</code> e.g. <code>:viridis</code>, or supply a function <code>f: (z, zmin, zmax) -&gt; Int(0-255)</code>, or a vector of RGB tuples.</p>
</li>
<li>
<p dir="auto"><code>colorbar_lim::Tuple = (0, 1)</code>: colorbar limit.</p>
</li>
<li>
<p dir="auto"><code>colorbar_border::Symbol = :solid</code>: color bar bounding box style (<code>:solid</code>, <code>:bold</code>, <code>:dashed</code>, <code>:dotted</code>, <code>:ascii</code>, <code>:none</code>).</p>
</li>
<li>
<p dir="auto"><code>canvas::UnionAll = BrailleCanvas</code>: type of canvas used for drawing.</p>
</li>
<li>
<p dir="auto"><code>grid::Bool = true</code>: draws grid-lines at the origin.</p>
</li>
<li>
<p dir="auto"><code>compact::Bool = false</code>: compact plot labels.</p>
</li>
<li>
<p dir="auto"><code>unicode_exponent::Bool = true</code>: use <code>Unicode</code> symbols for exponents: e.g. <code>10²⸱¹</code> instead of <code>10^2.1</code>.</p>
</li>
<li>
<p dir="auto"><code>thousands_separator::Char = ' '</code>: thousands separator character (use <code>Char(0)</code> to disable grouping digits).</p>
</li>
<li>
<p dir="auto"><code>projection::Symbol = :orthographic</code>: projection for 3D plots (<code>:ortho(graphic)</code>, <code>:persp(ective)</code>, or <code>Model-View-Projection</code> (MVP) matrix).</p>
</li>
<li>
<p dir="auto"><code>axes3d::Bool = true</code>: draw 3d axes (<code>x -&gt; :red</code>, <code>y -&gt; :green</code>, <code>z -&gt; :blue</code>).</p>
</li>
<li>
<p dir="auto"><code>elevation::Float = 35.26</code>: elevation angle above or below the <code>floor</code> plane (<code>-90 ≤ θ ≤ 90</code>).</p>
</li>
<li>
<p dir="auto"><code>azimuth::Float = 45.0</code>: azimutal angle around the <code>up</code> vector (<code>-180° ≤ φ ≤ 180°</code>).</p>
</li>
<li>
<p dir="auto"><code>zoom::Float = 1.0</code>: zooming factor in 3D.</p>
</li>
<li>
<p dir="auto"><code>up::Symbol = :z</code>: up vector (<code>:x</code>, <code>:y</code> or <code>:z</code>), prefix with <code>m -&gt; -</code> or <code>p -&gt; +</code> to change the sign e.g. <code>:mz</code> for <code>-z</code> axis pointing upwards.</p>
</li>
<li>
<p dir="auto"><code>near::Float = 1.0</code>: distance to the near clipping plane (<code>:perspective</code> projection only).</p>
</li>
<li>
<p dir="auto"><code>far::Float = 100.0</code>: distance to the far clipping plane (<code>:perspective</code> projection only).</p>
</li>
<li>
<p dir="auto"><code>canvas_kw::NamedTuple = NamedTuple()</code>: extra canvas keywords.</p>
</li>
<li>
<p dir="auto"><code>blend::Bool = true</code>: blend colors on the underlying canvas.</p>
</li>
<li>
<p dir="auto"><code>fix_ar::Bool = false</code>: fix terminal aspect ratio (experimental).</p>
</li>
<li>
<p dir="auto"><code>visible::Bool = true</code>: visible canvas.</p>
</li>
</ul>
<p dir="auto"><em>Note</em>: If you want to print the plot into a file but have monospace issues with your font, you should probably try setting <code>border=:ascii</code> and <code>canvas=AsciiCanvas</code> (or <code>canvas=DotCanvas</code> for scatterplots).</p>
</details>
<h5 dir="auto"><a id="user-content-low-level-interface" class="anchor" aria-hidden="true" href="#low-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Low-level interface</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">The primary structures that do all the heavy lifting behind the curtain are subtypes of <code>Canvas</code>. A canvas is a graphics object for rasterized plotting. Basically, it uses Unicode characters to represent pixel.</p>
<p dir="auto">Here is a simple example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import UnicodePlots: lines!, points!, pixel!
canvas = BrailleCanvas(15, 40,                    # number of rows and columns (characters)
                       origin_y=0., origin_x=0.,  # position in virtual space
                       height=1., width=1.)       # size of the virtual space
lines!(canvas, 0., 0., 1., 1.; color=:cyan)       # virtual space
points!(canvas, rand(50), rand(50); color=:red)   # virtual space
lines!(canvas, 0., 1., .5, 0.; color=:yellow)     # virtual space
pixel!(canvas, 5, 8; color=:red)                  # pixel space
Plot(canvas)"><pre><span class="pl-k">import</span> UnicodePlots<span class="pl-k">:</span> lines!, points!, pixel!
canvas <span class="pl-k">=</span> <span class="pl-c1">BrailleCanvas</span>(<span class="pl-c1">15</span>, <span class="pl-c1">40</span>,                    <span class="pl-c"><span class="pl-c">#</span> number of rows and columns (characters)</span>
                       origin_y<span class="pl-k">=</span><span class="pl-c1">0.</span>, origin_x<span class="pl-k">=</span><span class="pl-c1">0.</span>,  <span class="pl-c"><span class="pl-c">#</span> position in virtual space</span>
                       height<span class="pl-k">=</span><span class="pl-c1">1.</span>, width<span class="pl-k">=</span><span class="pl-c1">1.</span>)       <span class="pl-c"><span class="pl-c">#</span> size of the virtual space</span>
<span class="pl-c1">lines!</span>(canvas, <span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>; color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>)       <span class="pl-c"><span class="pl-c">#</span> virtual space</span>
<span class="pl-c1">points!</span>(canvas, <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">50</span>); color<span class="pl-k">=</span><span class="pl-c1">:red</span>)   <span class="pl-c"><span class="pl-c">#</span> virtual space</span>
<span class="pl-c1">lines!</span>(canvas, <span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>, .<span class="pl-c1">5</span>, <span class="pl-c1">0.</span>; color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)     <span class="pl-c"><span class="pl-c">#</span> virtual space</span>
<span class="pl-c1">pixel!</span>(canvas, <span class="pl-c1">5</span>, <span class="pl-c1">8</span>; color<span class="pl-k">=</span><span class="pl-c1">:red</span>)                  <span class="pl-c"><span class="pl-c">#</span> pixel space</span>
<span class="pl-c1">Plot</span>(canvas)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/canvas.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/canvas.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">You can access the height and width of the canvas (in characters) with <code>nrows(canvas)</code> and <code>ncols(canvas)</code> respectively. You can use those functions in combination with <code>print_row</code> to embed the canvas anywhere you wish. For example, <code>print_row(STDOUT, canvas, 3)</code> writes the third character row of the canvas to the standard output.</p>
<p dir="auto">As you can see, one issue that arises when multiple pixel are represented by one character is that it is hard to assign color. That is because each of the "pixel" of a character could belong to a different color group (each character can only have a single color). This package deals with this using a color-blend for the whole group. You can disable canvas color blending / mixing by passing <code>blend=false</code> to any function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import UnicodePlots: lines!
canvas = BrailleCanvas(15, 40; origin_y=0., origin_x=0., height=1., width=1.)
lines!(canvas, 0., 0., 1., 1.; color=:cyan)
lines!(canvas, .25, 1., .5, 0.; color=:yellow)
lines!(canvas, .2, .8, 1., 0.; color=:red)
Plot(canvas)"><pre><span class="pl-k">import</span> UnicodePlots<span class="pl-k">:</span> lines!
canvas <span class="pl-k">=</span> <span class="pl-c1">BrailleCanvas</span>(<span class="pl-c1">15</span>, <span class="pl-c1">40</span>; origin_y<span class="pl-k">=</span><span class="pl-c1">0.</span>, origin_x<span class="pl-k">=</span><span class="pl-c1">0.</span>, height<span class="pl-k">=</span><span class="pl-c1">1.</span>, width<span class="pl-k">=</span><span class="pl-c1">1.</span>)
<span class="pl-c1">lines!</span>(canvas, <span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">1.</span>; color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>)
<span class="pl-c1">lines!</span>(canvas, .<span class="pl-c1">25</span>, <span class="pl-c1">1.</span>, .<span class="pl-c1">5</span>, <span class="pl-c1">0.</span>; color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)
<span class="pl-c1">lines!</span>(canvas, .<span class="pl-c1">2</span>, .<span class="pl-c1">8</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>; color<span class="pl-k">=</span><span class="pl-c1">:red</span>)
<span class="pl-c1">Plot</span>(canvas)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/blending.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/blending.png" width="450" style="max-width: 100%;"></a><br></p>
<p dir="auto">The following types of <code>Canvas</code> are implemented:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>BrailleCanvas</strong>:
This type of canvas is probably the one with the highest resolution for <code>Unicode</code> plotting. It essentially uses the Unicode characters of the <a href="https://en.wikipedia.org/wiki/Braille" rel="nofollow">Braille</a> symbols as pixels. This effectively turns every character into eight pixels that can individually be manipulated using binary operations.</p>
</li>
<li>
<p dir="auto"><strong>BlockCanvas</strong>:
This canvas is also <code>Unicode</code> based. It has half the resolution of the BrailleCanvas. In contrast to <code>BrailleCanvas</code>, the pixels don't have visible spacing between them. This canvas effectively turns every character into four pixels that can individually be manipulated using binary operations.</p>
</li>
<li>
<p dir="auto"><strong>HeatmapCanvas</strong>:
This canvas is also <code>Unicode</code> based. It has half the resolution of the <code>BlockCanvas</code>. This canvas effectively turns every character into two color pixels, using the foreground and background terminal colors. As such, the number of rows of the canvas is half the number of <code>y</code> coordinates being displayed.</p>
</li>
<li>
<p dir="auto"><strong>AsciiCanvas</strong> and <strong>DotCanvas</strong>:
These two canvas utilizes only standard <code>ASCII</code> character for drawing. Naturally, it doesn't look quite as nice as the Unicode-based ones. However, in some situations it might yield better results. Printing plots to a file is one of those situations.</p>
</li>
<li>
<p dir="auto"><strong>DensityCanvas</strong>:
Unlike the <code>BrailleCanvas</code>, the density canvas does not simply mark a "pixel" as set. Instead it increments a counter per character that keeps track of the frequency of pixels drawn in that character. Together with a variable that keeps track of the maximum frequency, the canvas can thus draw the density of datapoints.</p>
</li>
<li>
<p dir="auto"><strong>BarplotGraphics</strong>:
This graphics area is special in that it does not support any pixel manipulation. It is essentially the barplot without decorations but the numbers. It does only support one method <code>addrow!</code> which allows the user to add additional bars to the graphics object.</p>
</li>
</ul>
</details>
<h5 dir="auto"><a id="user-content-developer-notes" class="anchor" aria-hidden="true" href="#developer-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Developer notes</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">Because Julia uses column-major indexing order for an array type, and because displaying data on a terminal is row based, we need an internal buffer compatible with efficient columns based iteration. We solve this by using the transpose of a (<code>width</code>, <code>height</code>) array for indexing into an internal buffer like <code>buf[row, col]</code> or <code>buf[y, x]</code>.
Common users of UnicodePlots don't need to be aware of this axis difference if sticking to public interface.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="p = Plot([NaN], [NaN]; xlim=(1, 10), ylim=(1, 10), title=&quot;internal buffer conventions&quot;)

# plot axes
vline!(p, 1, head_tail=:head, color=:green, name=&quot;y-axis (rows)&quot;)
hline!(p, 1, head_tail=:head, color=:red, name=&quot;x-axis (cols)&quot;)

# square
vline!(p, 2, [2, 9], color=:cyan, name=&quot;buf[y, x] - buf[row, col]&quot;)
vline!(p, [2, 9], [2, 9], color=:cyan)
hline!(p, [2, 9], [2, 9], color=:cyan)

# internal axes
vline!(p, 3, range(3, 8; length=20), head_tail=:tail, color=:light_green, name=&quot;y-buffer (rows)&quot;)
hline!(p, 8, range(3, 8; length=20), head_tail=:head, color=:light_red, name=&quot;x-buffer (cols)&quot;)

# mem layout
vline!(p, 4, [4, 7]; color=:yellow, name=&quot;memory layout&quot;)
vline!(p, 7, [4, 7]; color=:yellow)
hline!(p, [4, 7], [4, 7]; color=:yellow)
hline!(p, [4.5, 5, 5.5, 6], [4.5, 6.5]; color=:yellow)"><pre>p <span class="pl-k">=</span> <span class="pl-c1">Plot</span>([<span class="pl-c1">NaN</span>], [<span class="pl-c1">NaN</span>]; xlim<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span>), ylim<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span>), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>internal buffer conventions<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> plot axes</span>
<span class="pl-c1">vline!</span>(p, <span class="pl-c1">1</span>, head_tail<span class="pl-k">=</span><span class="pl-c1">:head</span>, color<span class="pl-k">=</span><span class="pl-c1">:green</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>y-axis (rows)<span class="pl-pds">"</span></span>)
<span class="pl-c1">hline!</span>(p, <span class="pl-c1">1</span>, head_tail<span class="pl-k">=</span><span class="pl-c1">:head</span>, color<span class="pl-k">=</span><span class="pl-c1">:red</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x-axis (cols)<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> square</span>
<span class="pl-c1">vline!</span>(p, <span class="pl-c1">2</span>, [<span class="pl-c1">2</span>, <span class="pl-c1">9</span>], color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>buf[y, x] - buf[row, col]<span class="pl-pds">"</span></span>)
<span class="pl-c1">vline!</span>(p, [<span class="pl-c1">2</span>, <span class="pl-c1">9</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">9</span>], color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>)
<span class="pl-c1">hline!</span>(p, [<span class="pl-c1">2</span>, <span class="pl-c1">9</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">9</span>], color<span class="pl-k">=</span><span class="pl-c1">:cyan</span>)

<span class="pl-c"><span class="pl-c">#</span> internal axes</span>
<span class="pl-c1">vline!</span>(p, <span class="pl-c1">3</span>, <span class="pl-c1">range</span>(<span class="pl-c1">3</span>, <span class="pl-c1">8</span>; length<span class="pl-k">=</span><span class="pl-c1">20</span>), head_tail<span class="pl-k">=</span><span class="pl-c1">:tail</span>, color<span class="pl-k">=</span><span class="pl-c1">:light_green</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>y-buffer (rows)<span class="pl-pds">"</span></span>)
<span class="pl-c1">hline!</span>(p, <span class="pl-c1">8</span>, <span class="pl-c1">range</span>(<span class="pl-c1">3</span>, <span class="pl-c1">8</span>; length<span class="pl-k">=</span><span class="pl-c1">20</span>), head_tail<span class="pl-k">=</span><span class="pl-c1">:head</span>, color<span class="pl-k">=</span><span class="pl-c1">:light_red</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x-buffer (cols)<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> mem layout</span>
<span class="pl-c1">vline!</span>(p, <span class="pl-c1">4</span>, [<span class="pl-c1">4</span>, <span class="pl-c1">7</span>]; color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>memory layout<span class="pl-pds">"</span></span>)
<span class="pl-c1">vline!</span>(p, <span class="pl-c1">7</span>, [<span class="pl-c1">4</span>, <span class="pl-c1">7</span>]; color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)
<span class="pl-c1">hline!</span>(p, [<span class="pl-c1">4</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">4</span>, <span class="pl-c1">7</span>]; color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)
<span class="pl-c1">hline!</span>(p, [<span class="pl-c1">4.5</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5.5</span>, <span class="pl-c1">6</span>], [<span class="pl-c1">4.5</span>, <span class="pl-c1">6.5</span>]; color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/buffer_convention.png"><img src="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs/3.x/buffer_convention.png" width="450" style="max-width: 100%;"></a><br></p>
</details>
<h5 dir="auto"><a id="user-content-invalidations-check" class="anchor" aria-hidden="true" href="#invalidations-check"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Invalidations check</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">Run the folowing snippet to analyze invalidations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SnoopCompileCore

invalidations = @snoopr using UnicodePlots
tinf = @snoopi_deep UnicodePlots.precompile_workload()

using SnoopCompile, AbstractTrees, PrettyTables  # must occur after `invalidations`

print_tree(tinf; maxdepth = typemax(Int))

trees = invalidation_trees(invalidations)
trees = filtermod(UnicodePlots, trees; recursive = true)

@show length(uinvalidated(invalidations))  # all invalidations

# only from `UnicodePlots`
@show length(staleinstances(tinf))
@show length(trees)

SnoopCompile.report_invalidations(;
   invalidations,
   process_filename = x -&gt; last(split(x, &quot;.julia/packages/&quot;)),
   n_rows = 0,
)"><pre><span class="pl-k">using</span> SnoopCompileCore

invalidations <span class="pl-k">=</span> <span class="pl-c1">@snoopr</span> <span class="pl-k">using</span> UnicodePlots
tinf <span class="pl-k">=</span> <span class="pl-c1">@snoopi_deep</span> UnicodePlots<span class="pl-k">.</span><span class="pl-c1">precompile_workload</span>()

<span class="pl-k">using</span> SnoopCompile, AbstractTrees, PrettyTables  <span class="pl-c"><span class="pl-c">#</span> must occur after `invalidations`</span>

<span class="pl-c1">print_tree</span>(tinf; maxdepth <span class="pl-k">=</span> <span class="pl-c1">typemax</span>(Int))

trees <span class="pl-k">=</span> <span class="pl-c1">invalidation_trees</span>(invalidations)
trees <span class="pl-k">=</span> <span class="pl-c1">filtermod</span>(UnicodePlots, trees; recursive <span class="pl-k">=</span> <span class="pl-c1">true</span>)

<span class="pl-c1">@show</span> <span class="pl-c1">length</span>(<span class="pl-c1">uinvalidated</span>(invalidations))  <span class="pl-c"><span class="pl-c">#</span> all invalidations</span>

<span class="pl-c"><span class="pl-c">#</span> only from `UnicodePlots`</span>
<span class="pl-c1">@show</span> <span class="pl-c1">length</span>(<span class="pl-c1">staleinstances</span>(tinf))
<span class="pl-c1">@show</span> <span class="pl-c1">length</span>(trees)

SnoopCompile<span class="pl-k">.</span><span class="pl-c1">report_invalidations</span>(;
   invalidations,
   process_filename <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">last</span>(<span class="pl-c1">split</span>(x, <span class="pl-s"><span class="pl-pds">"</span>.julia/packages/<span class="pl-pds">"</span></span>)),
   n_rows <span class="pl-k">=</span> <span class="pl-c1">0</span>,
)</pre></div>
</details>
<h5 dir="auto"><a id="user-content-documentation-update" class="anchor" aria-hidden="true" href="#documentation-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation update</h5>
<details>
  <summary><b>...</b></summary><br>
<p dir="auto">The following snippet:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cd docs
$ julia gen_docs.jl
$ (cd imgs; julia gen_imgs.jl)"><pre>$ <span class="pl-c1">cd</span> docs
$ julia gen_docs.jl
$ (cd imgs<span class="pl-k">;</span> julia gen_imgs.jl)</pre></div>
<p dir="auto">will regenerate <code>README.md</code> and the example images with root (prefix) url <a href="https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs">https://github.com/JuliaPlots/UnicodePlots.jl/raw/unicodeplots-docs</a>.</p>
</details>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">This code is free to use under the terms of the MIT license.</p>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">Inspired by <a href="https://github.com/sunetos/TextPlots.jl">TextPlots.jl</a>, which in turn was inspired by <a href="https://github.com/asciimoo/drawille">Drawille</a>.</p>
</article></div>