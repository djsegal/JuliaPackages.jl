<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mcmcchainsjl" class="anchor" aria-hidden="true" href="#mcmcchainsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MCMCChains.jl</h1>
<p><a href="https://travis-ci.org/TuringLang/MCMCChains.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/66a0d6d256c770321d1cbea23987f819c2b7dce5/68747470733a2f2f7472617669732d63692e6f72672f547572696e674c616e672f4d434d43436861696e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/TuringLang/MCMCChains.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/trappmartin/mcmcchain-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/7470c107238068cf5eb0023d5609b720ba8437b2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f316176386f7376303039396e7177386d2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/1av8osv0099nqw8m/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/TuringLang/MCMCChains.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ea49b65174599ea64c0d5d846adb70a10c2a6de0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f547572696e674c616e672f4d434d43436861696e732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/TuringLang/MCMCChains.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Implementation of Julia types for summarizing MCMC simulations and utility functions for diagnostics and visualizations.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>The following simple example illustrates how to use Chain to visually summarize a MCMC simulation:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MCMCChains
<span class="pl-k">using</span> StatsPlots

<span class="pl-c1">theme</span>(<span class="pl-c1">:ggplot2</span>)

<span class="pl-c"><span class="pl-c">#</span> Define the experiment</span>
n_iter <span class="pl-k">=</span> <span class="pl-c1">500</span>
n_name <span class="pl-k">=</span> <span class="pl-c1">3</span>
n_chain <span class="pl-k">=</span> <span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> experiment results</span>
val <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n_iter, n_name, n_chain) <span class="pl-k">.+</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]'
val <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(val, <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, n_iter, <span class="pl-c1">1</span>, n_chain))

<span class="pl-c"><span class="pl-c">#</span> construct a Chains object</span>
chn <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(val)

<span class="pl-c"><span class="pl-c">#</span> visualize the MCMC simulation results</span>
p1 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(chn)
p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(chn, colordim <span class="pl-k">=</span> <span class="pl-c1">:parameter</span>)</pre></div>
<p>This code results in the visualizations shown below. Note that the plot function takes the additional arguments described in the <a href="https://github.com/JuliaPlots/Plots.jl">Plots.jl</a> package.</p>
<table>
<thead>
<tr>
<th align="center">Summarize parameters</th>
<th align="center">Â Summarize chains</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>plot(chn; colordim = :chain)</code></td>
<td align="center"><code>plot(chn; colordim = :parameter)</code></td>
</tr>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/7974003/45822242-f0009180-bce2-11e8-8fa0-a97c8732400f.png"><img src="https://user-images.githubusercontent.com/7974003/45822242-f0009180-bce2-11e8-8fa0-a97c8732400f.png" alt="p1" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/7974003/45822249-f131be80-bce2-11e8-8dd3-42db7d58abd9.png"><img src="https://user-images.githubusercontent.com/7974003/45822249-f131be80-bce2-11e8-8dd3-42db7d58abd9.png" alt="p2" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Manual</h2>
<h3><a id="user-content-chains-type" class="anchor" aria-hidden="true" href="#chains-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Chains type</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> construction of a Chains object with no names</span>
<span class="pl-c1">Chains</span>(
    val<span class="pl-k">::</span><span class="pl-c1">AbstractArray{A,3}</span>;
    start<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>,
    thin<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>,
    evidence <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    info<span class="pl-k">=</span><span class="pl-c1">NamedTuple</span>(),
)

<span class="pl-c1">Chains</span>(
    val<span class="pl-k">::</span><span class="pl-c1">AbstractArray{A,3}</span>,
    parameter_names<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>,
    name_map <span class="pl-k">=</span> (parameters <span class="pl-k">=</span> parameter_names,);
    start<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>,
    thin<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>,
    evidence <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    info<span class="pl-k">=</span><span class="pl-c1">NamedTuple</span>(),
)

<span class="pl-c"><span class="pl-c">#</span> Indexing a Chains object</span>
chn <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(<span class="pl-k">...</span>)
chn_param1 <span class="pl-k">=</span> chn[:,<span class="pl-c1">2</span>,:] <span class="pl-c"><span class="pl-c">#</span> returns a new Chains object for parameter 2</span>
chn[:,<span class="pl-c1">2</span>,:] <span class="pl-k">=</span> <span class="pl-k">...</span> <span class="pl-c"><span class="pl-c">#</span> set values for parameter 2</span></pre></div>
<h3><a id="user-content-parameter-names" class="anchor" aria-hidden="true" href="#parameter-names"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parameter Names</h3>
<p>Chains can be constructed with parameter names, like so:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> 500 samples, 5 parameters, two chains.</span>
val <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">500</span>,<span class="pl-c1">5</span>, <span class="pl-c1">2</span>)

chn <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(val, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>])</pre></div>
<p>By default, parameters will be given the name <code>:param_i</code>, where <code>i</code> is the parameter
number.</p>
<h3><a id="user-content-rename-parameters" class="anchor" aria-hidden="true" href="#rename-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rename Parameters</h3>
<p>Parameter names can be changed with the function <code>replacenames</code>, which accepts a <code>Chains</code>
object and pairs of old and new parameter names. Note that <code>replacenames</code> creates a new
<code>Chains</code> object that shares the same underlying data.</p>
<div class="highlight highlight-source-julia"><pre>chn <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(
	<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">5</span>, <span class="pl-c1">5</span>),
	[<span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>four<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>five<span class="pl-pds">"</span></span>],
	<span class="pl-c1">Dict</span>(<span class="pl-c1">:internals</span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>four<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>five<span class="pl-pds">"</span></span>])
)

<span class="pl-c"><span class="pl-c">#</span> Set "one" and "five" to uppercase.</span>
chn2 <span class="pl-k">=</span> <span class="pl-c1">replacenames</span>(chn,  <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>ONE<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>five<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>FIVE<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Alternatively you can provide a dictionary.</span>
chn3 <span class="pl-k">=</span> <span class="pl-c1">replacenames</span>(chn, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>TWO<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>four<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>FOUR<span class="pl-pds">"</span></span>))</pre></div>
<h3><a id="user-content-sections" class="anchor" aria-hidden="true" href="#sections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sections</h3>
<p>Chains parameters are sorted into sections that represent groups of parameters. By default,
every chain contains a <code>:parameters</code> section, to which all unassigned parameters are
assigned to. Chains can be assigned a named map during construction:</p>
<div class="highlight highlight-source-julia"><pre>chn <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(val,
  [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>],
  <span class="pl-c1">Dict</span>(<span class="pl-c1">:internals</span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>]))</pre></div>
<p>The <code>set_section</code> function returns a new <code>Chains</code> object:</p>
<div class="highlight highlight-source-julia"><pre>chn2 <span class="pl-k">=</span> <span class="pl-c1">set_section</span>(chn, <span class="pl-c1">Dict</span>(<span class="pl-c1">:internals</span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>]))</pre></div>
<p>Any parameters not assigned will be placed into <code>:parameters</code>.</p>
<p>Calling <code>show(chn)</code> provides the following output:</p>
<div class="highlight highlight-source-julia"><pre>Log evidence      <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
Iterations        <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">500</span>
Thinning interval <span class="pl-k">=</span> <span class="pl-c1">1</span>
Chains            <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>
Samples per chain <span class="pl-k">=</span> <span class="pl-c1">500</span>
parameters        <span class="pl-k">=</span> c, b, a

Empirical Posterior Estimates
ââââââââââââââââââââââââââââââââââââ
parameters
   Mean    SD   Naive SE  MCSE  ESS
a <span class="pl-c1">0.5169</span> <span class="pl-c1">0.2920</span>   <span class="pl-c1">0.0075</span> <span class="pl-c1">0.0066</span> <span class="pl-c1">500</span>
b <span class="pl-c1">0.4891</span> <span class="pl-c1">0.2929</span>   <span class="pl-c1">0.0076</span> <span class="pl-c1">0.0070</span> <span class="pl-c1">500</span>
c <span class="pl-c1">0.5102</span> <span class="pl-c1">0.2840</span>   <span class="pl-c1">0.0073</span> <span class="pl-c1">0.0068</span> <span class="pl-c1">500</span>

Quantiles
ââââââââââââââââââââââââââââââââââââ
parameters
   <span class="pl-c1">2.5</span><span class="pl-k">%</span>   <span class="pl-c1">25.0</span><span class="pl-k">%</span>  <span class="pl-c1">50.0</span><span class="pl-k">%</span>  <span class="pl-c1">75.0</span><span class="pl-k">%</span>  <span class="pl-c1">97.5</span><span class="pl-k">%</span>
a <span class="pl-c1">0.0001</span> <span class="pl-c1">0.2620</span> <span class="pl-c1">0.5314</span> <span class="pl-c1">0.7774</span> <span class="pl-c1">0.9978</span>
b <span class="pl-c1">0.0001</span> <span class="pl-c1">0.2290</span> <span class="pl-c1">0.4972</span> <span class="pl-c1">0.7365</span> <span class="pl-c1">0.9998</span>
c <span class="pl-c1">0.0004</span> <span class="pl-c1">0.2739</span> <span class="pl-c1">0.5137</span> <span class="pl-c1">0.7498</span> <span class="pl-c1">0.9997</span></pre></div>
<p>Note that only <code>a</code>, <code>b</code>, and <code>c</code> are being shown. You can explicity show the <code>:internals</code>
section by calling <code>describe(chn; sections = :internals)</code> or all variables with
<code>describe(chn; sections = nothing)</code>. Many functions such as <code>plot</code> or <code>gelmandiag</code>
support the <code>sections</code> keyword argument.</p>
<h3><a id="user-content-groups-of-parameters" class="anchor" aria-hidden="true" href="#groups-of-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Groups of parameters</h3>
<p>By convention, MCMCChains assumes that parameters with names of the form <code>"name[index]"</code>
belong to one group of parameters called <code>:name</code>. You can access the names of all
parameters in a <code>chain</code> that belong to the group <code>:name</code> by running</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">namesingroup</span>(chain, <span class="pl-c1">:name</span>)</pre></div>
<p>If the chain contains a parameter of name <code>:name</code> it will be returned as well.</p>
<p>The function <code>group(chain, :name)</code> returns a subset of the chain <code>chain</code> with all
parameters in the group <code>:name</code>.</p>
<h3><a id="user-content-the-get-function" class="anchor" aria-hidden="true" href="#the-get-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>get</code> Function</h3>
<p>MCMCChains provides a <code>get</code> function designed to make it easier to access parameters <code>get(chn, :P)</code> returns a <code>NamedTuple</code> which can be easy to work with.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>val <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">500</span>, <span class="pl-c1">5</span>, <span class="pl-c1">1</span>)
chn <span class="pl-k">=</span> <span class="pl-c1">Chains</span>(val, [<span class="pl-s"><span class="pl-pds">"</span>P[1]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>P[2]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>P[3]<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>D<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span>]);

x <span class="pl-k">=</span> <span class="pl-c1">get</span>(chn, <span class="pl-c1">:P</span>)</pre></div>
<p>Here's what <code>x</code> looks like:</p>
<div class="highlight highlight-source-julia"><pre>(P <span class="pl-k">=</span> (Union{Missing, Float64}[<span class="pl-c1">0.349592</span>; <span class="pl-c1">0.671365</span>; â¦ ; <span class="pl-c1">0.319421</span>; <span class="pl-c1">0.298899</span>], Union{Missing, Float64}[<span class="pl-c1">0.757884</span>; <span class="pl-c1">0.720212</span>; â¦ ; <span class="pl-c1">0.471339</span>; <span class="pl-c1">0.5381</span>], Union{Missing, Float64}[<span class="pl-c1">0.240626</span>; <span class="pl-c1">0.987814</span>; â¦ ; <span class="pl-c1">0.980652</span>; <span class="pl-c1">0.149805</span>]),)</pre></div>
<p>You can access each of the <code>P[. . .]</code> variables by indexing, using <code>x.P[1]</code>, <code>x.P[2]</code>, or <code>x.P[3]</code>.</p>
<p><code>get</code> also accepts vectors of things to retrieve, so you can call <code>x = get(chn, [:P, :D])</code>. This looks like</p>
<div class="highlight highlight-source-julia"><pre>(P <span class="pl-k">=</span> (Union{Missing, Float64}[<span class="pl-c1">0.349592</span>; <span class="pl-c1">0.671365</span>; â¦ ; <span class="pl-c1">0.319421</span>; <span class="pl-c1">0.298899</span>], Union{Missing, Float64}[<span class="pl-c1">0.757884</span>; <span class="pl-c1">0.720212</span>; â¦ ; <span class="pl-c1">0.471339</span>; <span class="pl-c1">0.5381</span>], Union{Missing, Float64}[<span class="pl-c1">0.240626</span>; <span class="pl-c1">0.987814</span>; â¦ ; <span class="pl-c1">0.980652</span>; <span class="pl-c1">0.149805</span>]),
 D <span class="pl-k">=</span> Union{Missing, Float64}[<span class="pl-c1">0.648963</span>; <span class="pl-c1">0.0419232</span>; â¦ ; <span class="pl-c1">0.54666</span>; <span class="pl-c1">0.746028</span>])</pre></div>
<p>Note that <code>x.P</code> is a tuple which has to be indexed by the relevant index, while <code>x.D</code> is just a vector.</p>
<h3><a id="user-content-convergence-diagnostics-functions" class="anchor" aria-hidden="true" href="#convergence-diagnostics-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Convergence Diagnostics functions</h3>
<h4><a id="user-content-discrete-diagnostic" class="anchor" aria-hidden="true" href="#discrete-diagnostic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Discrete Diagnostic</h4>
<p>Options for method are  <code>[:weiss, :hangartner, :DARBOOT, MCBOOT, :billinsgley, :billingsleyBOOT]</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">discretediag</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>; frac<span class="pl-k">=</span><span class="pl-c1">0.3</span>, method<span class="pl-k">=</span><span class="pl-c1">:weiss</span>, nsim<span class="pl-k">=</span><span class="pl-c1">1000</span>)</pre></div>
<h4><a id="user-content-gelman-rubin-and-brooks-diagnostics" class="anchor" aria-hidden="true" href="#gelman-rubin-and-brooks-diagnostics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gelman, Rubin, and Brooks Diagnostics</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">gelmandiag</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>; alpha<span class="pl-k">=</span><span class="pl-c1">0.05</span>, mpsrf<span class="pl-k">=</span><span class="pl-c1">false</span>, transform<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<h4><a id="user-content-geweke-diagnostic" class="anchor" aria-hidden="true" href="#geweke-diagnostic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Geweke Diagnostic</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">gewekediag</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>; first<span class="pl-k">=</span><span class="pl-c1">0.1</span>, last<span class="pl-k">=</span><span class="pl-c1">0.5</span>, etype<span class="pl-k">=</span><span class="pl-c1">:imse</span>)</pre></div>
<h4><a id="user-content-heidelberger-and-welch-diagnostics" class="anchor" aria-hidden="true" href="#heidelberger-and-welch-diagnostics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Heidelberger and Welch Diagnostics</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">heideldiag</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>; alpha<span class="pl-k">=</span><span class="pl-c1">0.05</span>, eps<span class="pl-k">=</span><span class="pl-c1">0.1</span>, etype<span class="pl-k">=</span><span class="pl-c1">:imse</span>)</pre></div>
<h4><a id="user-content-raftery-and-lewis-diagnostic" class="anchor" aria-hidden="true" href="#raftery-and-lewis-diagnostic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Raftery and Lewis Diagnostic</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">rafterydiag</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>; q<span class="pl-k">=</span><span class="pl-c1">0.025</span>, r<span class="pl-k">=</span><span class="pl-c1">0.005</span>, s<span class="pl-k">=</span><span class="pl-c1">0.95</span>, eps<span class="pl-k">=</span><span class="pl-c1">0.001</span>)</pre></div>
<h3><a id="user-content-model-selection" class="anchor" aria-hidden="true" href="#model-selection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Model Selection</h3>
<h4><a id="user-content-deviance-information-criterion-dic" class="anchor" aria-hidden="true" href="#deviance-information-criterion-dic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deviance Information Criterion (DIC)</h4>
<div class="highlight highlight-source-julia"><pre>chn <span class="pl-k">...</span> <span class="pl-c"><span class="pl-c">#</span> sampling results</span>
lpfun <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(chain<span class="pl-k">::</span><span class="pl-c1">Chains</span>) <span class="pl-c"><span class="pl-c">#</span> function to compute the logpdf values</span>
    niter, nparams, nchains <span class="pl-k">=</span> <span class="pl-c1">size</span>(chain)
    lp <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(niter <span class="pl-k">+</span> nchains) <span class="pl-c"><span class="pl-c">#</span> resulting logpdf values</span>
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nparams
        lp <span class="pl-k">+=</span> <span class="pl-c1">map</span>(p <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>( <span class="pl-k">...</span> , x), <span class="pl-c1">Array</span>(chain[:,i,:]))
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> lp
<span class="pl-k">end</span>
DIC, pD <span class="pl-k">=</span> <span class="pl-c1">dic</span>(chn, lpfun)</pre></div>
<h3><a id="user-content-plotting" class="anchor" aria-hidden="true" href="#plotting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Plotting</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> construct a plot</span>
<span class="pl-c1">plot</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>, seriestype <span class="pl-k">=</span> (<span class="pl-c1">:traceplot</span>, <span class="pl-c1">:mixeddensity</span>))

<span class="pl-c"><span class="pl-c">#</span> construct trace plots</span>
<span class="pl-c1">plot</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>, seriestype <span class="pl-k">=</span> <span class="pl-c1">:traceplot</span>)

<span class="pl-c"><span class="pl-c">#</span> or for all seriestypes use the alternative shorthand syntax</span>
<span class="pl-c1">traceplot</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>)

<span class="pl-c"><span class="pl-c">#</span> construct running average plots</span>
<span class="pl-c1">meanplot</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>)

<span class="pl-c"><span class="pl-c">#</span> construct density plots</span>
<span class="pl-c1">density</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>)

<span class="pl-c"><span class="pl-c">#</span> construct histogram plots</span>
<span class="pl-c1">histogram</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>)

<span class="pl-c"><span class="pl-c">#</span> construct mixed density plots</span>
<span class="pl-c1">mixeddensity</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>)

<span class="pl-c"><span class="pl-c">#</span> construct autocorrelation plots</span>
<span class="pl-c1">autocorplot</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>)

<span class="pl-c"><span class="pl-c">#</span> make a cornerplot (requires StatPlots) of parameters in a Chain:</span>
<span class="pl-c1">corner</span>(c<span class="pl-k">::</span><span class="pl-c1">Chains</span>, [<span class="pl-c1">:A</span>, <span class="pl-c1">:B</span>])</pre></div>
<h3><a id="user-content-saving-and-loading-chains" class="anchor" aria-hidden="true" href="#saving-and-loading-chains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Saving and Loading Chains</h3>
<p>Chains objects can be serialized and deserialized using <code>read</code> and <code>write</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Save a chain.</span>
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>chain-file.jls<span class="pl-pds">"</span></span>, chn)

<span class="pl-c"><span class="pl-c">#</span> Read a chain.</span>
chn2 <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>chain-file.jls<span class="pl-pds">"</span></span>, Chains)</pre></div>
<h3><a id="user-content-exporting-chains" class="anchor" aria-hidden="true" href="#exporting-chains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exporting Chains</h3>
<p>A few utility export functions have been provided to convers <code>Chains</code> objects to either an Array or a DataFrame:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Several examples of creating an Array object:</span>
<span class="pl-c1">Array</span>(chns)
<span class="pl-c1">Array</span>(chns[<span class="pl-c1">:s</span>])
<span class="pl-c1">Array</span>(chns, [<span class="pl-c1">:parameters</span>])
<span class="pl-c1">Array</span>(chns, [<span class="pl-c1">:parameters</span>, <span class="pl-c1">:internals</span>])

<span class="pl-c"><span class="pl-c">#</span> By default chains are appended. This can be disabled</span>
<span class="pl-c"><span class="pl-c">#</span> using the append_chains keyword argument:</span>
<span class="pl-c1">Array</span>(chns, append_chains<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> This will return an `Array{Array, 1}` object containing</span>
<span class="pl-c"><span class="pl-c">#</span> an Array for each chain.</span>

<span class="pl-c"><span class="pl-c">#</span> A final option is:</span>
<span class="pl-c1">Array</span>(chns, remove_missing_union<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> This will not convert the Array columns from a</span>
<span class="pl-c"><span class="pl-c">#</span> `Union{Missing, Real}` to a `Vector{Real}`.</span></pre></div>
<p>Similarly, for DataFrames:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">DataFrame</span>(chns)
<span class="pl-c1">DataFrame</span>(chns[<span class="pl-c1">:s</span>])
<span class="pl-c1">DataFrame</span>(chns, [<span class="pl-c1">:parameters</span>])
<span class="pl-c1">DataFrame</span>(chns, [<span class="pl-c1">:parameters</span>, <span class="pl-c1">:internals</span>])
<span class="pl-c1">DataFrame</span>(chns, append_chains<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">DataFrame</span>(chns, remove_missing_union<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p>See also <code>?DataFrame</code> and <code>?Array</code> for more help.</p>
<h3><a id="user-content-sampling-chains" class="anchor" aria-hidden="true" href="#sampling-chains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sampling Chains</h3>
<p>MCMCChains overloads several <code>sample</code> methods as defined in StatsBase:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Sampling `n` samples from the chain `a`. Optionally</span>
<span class="pl-c"><span class="pl-c">#</span> weighting the samples using `wv`.</span>
<span class="pl-c1">sample</span>([rng], a, [wv<span class="pl-k">::</span><span class="pl-c1">AbstractWeights</span>], n<span class="pl-k">::</span><span class="pl-c1">Integer</span>)

<span class="pl-c"><span class="pl-c">#</span> As above, but supports replacing and ordering.</span>
<span class="pl-c1">sample</span>([rng], a, [wv<span class="pl-k">::</span><span class="pl-c1">AbstractWeights</span>], n<span class="pl-k">::</span><span class="pl-c1">Integer</span>; replace<span class="pl-k">=</span><span class="pl-c1">true</span>,
  ordered<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p>See also <code>?sample</code> for additional help. Alternatively, you can construct
and sample from a kernel density estimator using the KernelDensity package:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> KernelDensity

<span class="pl-c"><span class="pl-c">#</span> Construct a kernel density estimator</span>
c <span class="pl-k">=</span> <span class="pl-c1">kde</span>(<span class="pl-c1">Array</span>(chn[<span class="pl-c1">:s</span>]))

<span class="pl-c"><span class="pl-c">#</span> Generate 10000 weighted samples from the grid points</span>
chn_weighted_sample <span class="pl-k">=</span> <span class="pl-c1">sample</span>(c<span class="pl-k">.</span>x, <span class="pl-c1">Weights</span>(c<span class="pl-k">.</span>density), <span class="pl-c1">100000</span>)</pre></div>
<h2><a id="user-content-license-notice" class="anchor" aria-hidden="true" href="#license-notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License Notice</h2>
<p>Note that this package heavily uses and adapts code from the Mamba.jl package licensed under MIT License, see License.md.</p>
</article></div>