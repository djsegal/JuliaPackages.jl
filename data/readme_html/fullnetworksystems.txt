<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fullnetworksystems" class="anchor" aria-hidden="true" href="#fullnetworksystems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FullNetworkSystems</h1>
<p dir="auto"><a href="https://invenia.github.io/FullNetworkSystems.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://invenia.github.io/FullNetworkSystems.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/FullNetworkSystems.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/invenia/FullNetworkSystems.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/invenia/FullNetworkSystems.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fbdd5092b2e41c6dbccc50d3ab02a0e0ed8597f92f38013bc5e27b333090a094/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f46756c6c4e6574776f726b53797374656d732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/invenia/FullNetworkSystems.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">This package defines a set of types and data structures to represent an energy grid and the components within it.
The types defined can be used to build Optimal Power Flow (OPF) and associated optimisation problems e.g. unit commitment and economic dispatch.
The data structures are designed so that the relevant data can be easily accessed and used to formulate these optimisation problems.</p>
<h2 dir="auto"><a id="user-content-features-of-the-system" class="anchor" aria-hidden="true" href="#features-of-the-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features of the System</h2>
<p dir="auto">The <code>System</code> subtypes (<code>SystemDA</code> and <code>SystemRT</code>) both contain fields which represent static components of an energy grid.
Firstly, the <code>Generator</code> type has a <code>unit_code</code> field identifying the generator and fields for attributes that do not change over time e.g. ramps rates, minimum up- and down-time, and technology.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="generator = Generator(
    unit_code=111,
    zone=1,
    startup_cost=0.0,
    shutdown_cost=1.0,
    no_load_cost=1.0,
    min_uptime=24.0,
    min_downtime=24.0,
    ramp_up=2.0,
    ramp_down=2.0,
    technology=:steam_turbine
)"><pre>generator <span class="pl-k">=</span> <span class="pl-c1">Generator</span>(
    unit_code<span class="pl-k">=</span><span class="pl-c1">111</span>,
    zone<span class="pl-k">=</span><span class="pl-c1">1</span>,
    startup_cost<span class="pl-k">=</span><span class="pl-c1">0.0</span>,
    shutdown_cost<span class="pl-k">=</span><span class="pl-c1">1.0</span>,
    no_load_cost<span class="pl-k">=</span><span class="pl-c1">1.0</span>,
    min_uptime<span class="pl-k">=</span><span class="pl-c1">24.0</span>,
    min_downtime<span class="pl-k">=</span><span class="pl-c1">24.0</span>,
    ramp_up<span class="pl-k">=</span><span class="pl-c1">2.0</span>,
    ramp_down<span class="pl-k">=</span><span class="pl-c1">2.0</span>,
    technology<span class="pl-k">=</span><span class="pl-c1">:steam_turbine</span>
)</pre></div>
<p dir="auto">The <code>Bus</code> and <code>Branch</code> types can be used to model bus injection and branch flow constraints (see this <a href="https://invenia.github.io/blog/2021/06/18/opf-intro/" rel="nofollow">blog post</a> introducing these OPF modelling concepts).
These types store attributes of buses and branches that do not change over time.
The <code>to_bus</code> and <code>from_bus</code> fields in the <code>Branch</code> type can be used to create a network map of which branches connect which buses.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bus_a = Bus(name=&quot;A&quot;, base_voltage=100.0)
bus_c = Bus(name=&quot;C&quot;, base_voltage=100.0)

branch = Branch(
    name=&quot;1&quot;,
    to_bus=&quot;A&quot;,
    from_bus=&quot;C&quot;,
    rate_a=10.0,
    rate_b=10.0,
    is_monitored=true,
    break_points=(100.0, 102.0),
    penalties=(5.0, 6.0),
    resistance=1.0,
    reactance=1.0
)"><pre>bus_a <span class="pl-k">=</span> <span class="pl-c1">Bus</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, base_voltage<span class="pl-k">=</span><span class="pl-c1">100.0</span>)
bus_c <span class="pl-k">=</span> <span class="pl-c1">Bus</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>, base_voltage<span class="pl-k">=</span><span class="pl-c1">100.0</span>)

branch <span class="pl-k">=</span> <span class="pl-c1">Branch</span>(
    name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,
    to_bus<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>,
    from_bus<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>,
    rate_a<span class="pl-k">=</span><span class="pl-c1">10.0</span>,
    rate_b<span class="pl-k">=</span><span class="pl-c1">10.0</span>,
    is_monitored<span class="pl-k">=</span><span class="pl-c1">true</span>,
    break_points<span class="pl-k">=</span>(<span class="pl-c1">100.0</span>, <span class="pl-c1">102.0</span>),
    penalties<span class="pl-k">=</span>(<span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>),
    resistance<span class="pl-k">=</span><span class="pl-c1">1.0</span>,
    reactance<span class="pl-k">=</span><span class="pl-c1">1.0</span>
)</pre></div>
<p dir="auto">The fields <code>gens_per_bus</code>, <code>loads_per_bus</code> etc. provide topological information about the energy grid by mapping which buses components in the system are located at.
Each mapping is in the form of a <code>Dictionary</code> where the keys are bus names and the values are vectors of component identifiers (e.g. <code>Generator</code> <code>unit_code</code>s).</p>
<p dir="auto">Along with the static attributes and topology information the <code>System</code> types include fields for time series data.
Firstly there are the time series associated with generators defined in a <code>GeneratorTimeSeries</code>.
One particular time series to note is the <code>offer_curve</code>, which represents the offers of generation submitted by each generator for each hour.
This time series is expected to be a <code>KeyedArray</code> where the dimensions are <code>generator ids x datetimes</code> and the fields are vectors of (price, volume) pairs.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="generator_ids = [111, 222, 333]
datetimes = DateTime(2017, 12, 15):Hour(1):DateTime(2017, 12, 15, 23)
gen_time_series = GeneratorTimeSeries(;
    initial_generation = KeyedArray(fill(100.0, length(generator_ids)); generator_ids),
    offer_curve = KeyedArray(fill([(1.0, 100.0)], length(generator_ids), length(datetimes)); generator_ids, datetimes)
    ...
)"><pre>generator_ids <span class="pl-k">=</span> [<span class="pl-c1">111</span>, <span class="pl-c1">222</span>, <span class="pl-c1">333</span>]
datetimes <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2017</span>, <span class="pl-c1">12</span>, <span class="pl-c1">15</span>)<span class="pl-k">:</span><span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2017</span>, <span class="pl-c1">12</span>, <span class="pl-c1">15</span>, <span class="pl-c1">23</span>)
gen_time_series <span class="pl-k">=</span> <span class="pl-c1">GeneratorTimeSeries</span>(;
    initial_generation <span class="pl-k">=</span> <span class="pl-c1">KeyedArray</span>(<span class="pl-c1">fill</span>(<span class="pl-c1">100.0</span>, <span class="pl-c1">length</span>(generator_ids)); generator_ids),
    offer_curve <span class="pl-k">=</span> <span class="pl-c1">KeyedArray</span>(<span class="pl-c1">fill</span>([(<span class="pl-c1">1.0</span>, <span class="pl-c1">100.0</span>)], <span class="pl-c1">length</span>(generator_ids), <span class="pl-c1">length</span>(datetimes)); generator_ids, datetimes)
    <span class="pl-k">...</span>
)</pre></div>
<p dir="auto">The <code>GeneratorTimeSeries</code> type includes fields for additional time series such as generation limits, ramp limits and ancillary service offers, which means these features can be included in an optimisation problem (see <a href="https://invenia.github.io/FullNetworkSystems.jl/stable/#FullNetworkSystems.GeneratorTimeSeries" rel="nofollow"><code>GeneratorTimeSeries</code></a> for details of all the time series fields).
<code>GeneratorStatus</code> types also contain time series data, specifically associated with the status of the generator (e.g. whether it is on or off, how long it has been on or off).
This is useful for including factors such as ramp rates in an optimisation problem, as the status of a generator limits how much it can ramp up or down in a given hour.</p>
<p dir="auto">The <code>SystemDA</code> type includes fields for additional supply (<code>increment</code>) and demand (<code>decrement</code>, <code>price_sensitive_loads</code>) bids for the purpose of modelling virtual participation in electricity markets (<a href="https://hepg.hks.harvard.edu/publications/virtual-bidding-and-electricity-market-design" rel="nofollow">introduction to virtual bidding</a>).
The bid data is expected to be a <code>KeyedArray</code> where the dimensions are <code>ids x datetimes</code> and the fields are vectors of price-volume pairs, as in the offer curves.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bid_ids = [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;] # unique identifers
datetimes = DateTime(2017, 12, 15):Hour(1):DateTime(2017, 12, 15, 23)
increments = KeyedArray(
    fill([(0.1, 10.0)], length(generator_ids), length(datetimes)); bid_ids, datetimes
)"><pre>bid_ids <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>456<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>789<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> unique identifers</span>
datetimes <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2017</span>, <span class="pl-c1">12</span>, <span class="pl-c1">15</span>)<span class="pl-k">:</span><span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2017</span>, <span class="pl-c1">12</span>, <span class="pl-c1">15</span>, <span class="pl-c1">23</span>)
increments <span class="pl-k">=</span> <span class="pl-c1">KeyedArray</span>(
    <span class="pl-c1">fill</span>([(<span class="pl-c1">0.1</span>, <span class="pl-c1">10.0</span>)], <span class="pl-c1">length</span>(generator_ids), <span class="pl-c1">length</span>(datetimes)); bid_ids, datetimes
)</pre></div>
<h2 dir="auto"><a id="user-content-grid-matrices" class="anchor" aria-hidden="true" href="#grid-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Grid Matrices</h2>
<p dir="auto">This package also provides functions to calculate the Power Transfer Distribution Factor (PTDF) and Line Outage Distribution Factor (LODF) matrices for a <code>System</code> of branches and buses.
These matrices are useful for modelling branch flow constraints under different contingency scenarios.
The <code>System</code> types have fields to store these matrices.</p>
<h2 dir="auto"><a id="user-content-example-modelling-problem" class="anchor" aria-hidden="true" href="#example-modelling-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Modelling Problem</h2>
<p dir="auto">The following is an example of how the data stored in a <code>SystemRT</code> object can be used to build a JuMP model.
The objective of the model is to solve a simple energy balance problem, where a set of loads (demands) need to be met by generation (supply), for the minimum possible cost.
Assume we have built all the components of the system described in the previous sections so that we can construct an instance of a system (see <a href="https://invenia.github.io/FullNetworkSystems.jl/stable/#FullNetworkSystems.SystemRT" rel="nofollow"><code>SystemRT</code></a> for specific details of the components in a <code>SystemRT</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AxisKeys
using FullNetworkSystems
using HiGHS
using JuMP

# Here we model a simple system where demands (loads) need to be met by supply for minimum cost
# We assume all components are colocated, so do not model branch constraints or nodal injections
system = SystemRT(
    gens_per_bus,
    loads_per_bus,
    zones,
    buses,
    generators,
    branches,
    lodfs,
    ptdf,
    generator_time_series,
    generator_status,
    loads
)

model = Model()
units = keys(get_generators(system))
datetimes = get_datetimes(system)

@variable(model, generation[u in units, t in datetimes] &gt;= 0)

load = get_loads(system)
@constraint(
    model,
    energy_balance[t in datetimes],
    sum(model[:generation][u, t] for u in units) == sum(load(l, t) for l in axiskeys(load, 1))
)

# For simplicity, use a fixed price per MW, rather than a variable price offer curve
offer_curves = get_offer_curve(system)
prices = map(curve -&gt; only(first.(curve)), offer_curves)
cost = AffExpr()
for u in units, t in datetimes
    add_to_expression!(cost, prices(u, t), model[:generation][u, t])
end

@objective(model, Min, cost)

set_optimizer(model, HiGHS.Optimizer)
optimize!(model)"><pre><span class="pl-k">using</span> AxisKeys
<span class="pl-k">using</span> FullNetworkSystems
<span class="pl-k">using</span> HiGHS
<span class="pl-k">using</span> JuMP

<span class="pl-c"><span class="pl-c">#</span> Here we model a simple system where demands (loads) need to be met by supply for minimum cost</span>
<span class="pl-c"><span class="pl-c">#</span> We assume all components are colocated, so do not model branch constraints or nodal injections</span>
system <span class="pl-k">=</span> <span class="pl-c1">SystemRT</span>(
    gens_per_bus,
    loads_per_bus,
    zones,
    buses,
    generators,
    branches,
    lodfs,
    ptdf,
    generator_time_series,
    generator_status,
    loads
)

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
units <span class="pl-k">=</span> <span class="pl-c1">keys</span>(<span class="pl-c1">get_generators</span>(system))
datetimes <span class="pl-k">=</span> <span class="pl-c1">get_datetimes</span>(system)

<span class="pl-c1">@variable</span>(model, generation[u <span class="pl-k">in</span> units, t <span class="pl-k">in</span> datetimes] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)

load <span class="pl-k">=</span> <span class="pl-c1">get_loads</span>(system)
<span class="pl-c1">@constraint</span>(
    model,
    energy_balance[t <span class="pl-k">in</span> datetimes],
    <span class="pl-c1">sum</span>(model[<span class="pl-c1">:generation</span>][u, t] <span class="pl-k">for</span> u <span class="pl-k">in</span> units) <span class="pl-k">==</span> <span class="pl-c1">sum</span>(<span class="pl-c1">load</span>(l, t) <span class="pl-k">for</span> l <span class="pl-k">in</span> <span class="pl-c1">axiskeys</span>(load, <span class="pl-c1">1</span>))
)

<span class="pl-c"><span class="pl-c">#</span> For simplicity, use a fixed price per MW, rather than a variable price offer curve</span>
offer_curves <span class="pl-k">=</span> <span class="pl-c1">get_offer_curve</span>(system)
prices <span class="pl-k">=</span> <span class="pl-c1">map</span>(curve <span class="pl-k">-&gt;</span> <span class="pl-c1">only</span>(<span class="pl-c1">first</span>.(curve)), offer_curves)
cost <span class="pl-k">=</span> <span class="pl-c1">AffExpr</span>()
<span class="pl-k">for</span> u <span class="pl-k">in</span> units, t <span class="pl-k">in</span> datetimes
    <span class="pl-c1">add_to_expression!</span>(cost, <span class="pl-c1">prices</span>(u, t), model[<span class="pl-c1">:generation</span>][u, t])
<span class="pl-k">end</span>

<span class="pl-c1">@objective</span>(model, Min, cost)

<span class="pl-c1">set_optimizer</span>(model, HiGHS<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">optimize!</span>(model)</pre></div>
</article></div>