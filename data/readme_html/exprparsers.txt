<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-exprparsersjl" class="anchor" aria-hidden="true" href="#exprparsersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExprParsers.jl</h1>
<p dir="auto"><a href="https://jolin-io.github.io/ExprParsers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jolin-io.github.io/ExprParsers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jolin-io/ExprParsers.jl/actions"><img src="https://github.com/jolin-io/ExprParsers.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jolin-io/ExprParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bdbe4239a3ee76f5894c3874b9b1da9860527bc9b76c772e303b20c2f74ebf30/68747470733a2f2f636f6465636f762e696f2f67682f6a6f6c696e2d696f2f45787072506172736572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jolin-io/ExprParsers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>ExprParsers</code> is a library made to simplify development of elaborate macros.</p>
<p dir="auto">What <code>ExprParsers</code> offers is a set of curated parsers for common <code>Expr</code> patterns. For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="parse_expr(ExprParsers.Function(), :(f(a) = 2a))"><pre><span class="pl-en">parse_expr</span>(ExprParsers<span class="pl-k">.</span><span class="pl-en">Function</span>(), :(<span class="pl-en">f</span>(a) <span class="pl-k">=</span> <span class="pl-c1">2</span>a))</pre></div>
<p dir="auto">will give you an <code>ExprParsers.Function_Parsed</code> object where you can inspect and change <code>name</code>, <code>args</code>, <code>kwargs</code>, <code>curlies</code>, <code>wheres</code>, and the function <code>body</code>. It just works and you don't have to bother any longer that you can also write the same function as <code>function f(a); 2a; end</code> - the parser handles this for you.</p>
<p dir="auto">In macros you often not only want to inspect the given <code>Expr</code> in efficient and stable manners, but also may want to change parts and return a respectively adapted <code>Expr</code>. For this purpose, all Parsed objects are mutable and can be converted back to <code>Expr</code> by using the <code>to_expr(parsed_value)</code> method.</p>
<p dir="auto">We guarantee that <code>parse_expr</code> and <code>to_expr</code> are working nicely together, i.e. the following always holds for arbitrary expressions and parsers</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ExprParsers

julia&gt; # comes with a shorthand EP for ExprParsers

julia&gt; parser = EP.Function()
EP.Function(
  name    = ExprParsers.Isa{Any}()
  curlies = ExprParsers.Isa{Any}()
  args    = ExprParsers.Isa{Any}()
  kwargs  = ExprParsers.Isa{Any}()
  wheres  = ExprParsers.Isa{Any}()
  body    = ExprParsers.Isa{Any}()
)

julia&gt; expr = :(f(a) = 2a)
:(f(a) = begin
          #= REPL[8]:1 =#
          2a
      end)

julia&gt; parsed = parse_expr(parser, expr)
EP.Function_Parsed(
  name    = :f
  curlies = Any[]
  args    = Any[:a]
  kwargs  = Any[]
  wheres  = Any[]
  body    = quote
    #= REPL[8]:1 =#
    2a
end
)

julia&gt; # applying the parser &quot;twice&quot; returns always the same parsed result

julia&gt; parse_expr(parser, to_expr(parsed)) == parsed
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ExprParsers

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> comes with a shorthand EP for ExprParsers</span>

julia<span class="pl-k">&gt;</span> parser <span class="pl-k">=</span> EP<span class="pl-k">.</span><span class="pl-c1">Function</span>()
EP<span class="pl-k">.</span><span class="pl-c1">Function</span>(
  name    <span class="pl-k">=</span> ExprParsers<span class="pl-k">.</span><span class="pl-c1">Isa</span><span class="pl-c1">{Any}</span>()
  curlies <span class="pl-k">=</span> ExprParsers<span class="pl-k">.</span><span class="pl-c1">Isa</span><span class="pl-c1">{Any}</span>()
  args    <span class="pl-k">=</span> ExprParsers<span class="pl-k">.</span><span class="pl-c1">Isa</span><span class="pl-c1">{Any}</span>()
  kwargs  <span class="pl-k">=</span> ExprParsers<span class="pl-k">.</span><span class="pl-c1">Isa</span><span class="pl-c1">{Any}</span>()
  wheres  <span class="pl-k">=</span> ExprParsers<span class="pl-k">.</span><span class="pl-c1">Isa</span><span class="pl-c1">{Any}</span>()
  body    <span class="pl-k">=</span> ExprParsers<span class="pl-k">.</span><span class="pl-c1">Isa</span><span class="pl-c1">{Any}</span>()
)

julia<span class="pl-k">&gt;</span> expr <span class="pl-k">=</span> :(<span class="pl-en">f</span>(a) <span class="pl-k">=</span> <span class="pl-c1">2</span>a)
:(<span class="pl-en">f</span>(a) <span class="pl-k">=</span> <span class="pl-k">begin</span>
          <span class="pl-c"><span class="pl-c">#=</span> REPL[8]:1 <span class="pl-c">=#</span></span>
          <span class="pl-c1">2</span>a
      <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> parsed <span class="pl-k">=</span> <span class="pl-c1">parse_expr</span>(parser, expr)
EP<span class="pl-k">.</span><span class="pl-c1">Function_Parsed</span>(
  name    <span class="pl-k">=</span> <span class="pl-c1">:f</span>
  curlies <span class="pl-k">=</span> Any[]
  args    <span class="pl-k">=</span> Any[<span class="pl-c1">:a</span>]
  kwargs  <span class="pl-k">=</span> Any[]
  wheres  <span class="pl-k">=</span> Any[]
  body    <span class="pl-k">=</span> <span class="pl-k">quote</span>
    <span class="pl-c"><span class="pl-c">#=</span> REPL[8]:1 <span class="pl-c">=#</span></span>
    <span class="pl-c1">2</span>a
<span class="pl-k">end</span>
)

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> applying the parser "twice" returns always the same parsed result</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parse_expr</span>(parser, <span class="pl-c1">to_expr</span>(parsed)) <span class="pl-k">==</span> parsed
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Note that <code>ExprParsers</code> exports a constant <code>EP</code> which is an alias for the package <code>ExprParsers</code> itself. This comes in very handy when you use the custom parsers a lot.</p>
<p dir="auto">Checkout the <code>test/</code> directory for seeing more examples, especially <a href="test/expr_parsers_with_parsed.jl">test/expr_parsers_with_parsed.jl</a> where for each common <code>Expr</code> pattern a parser is put into action.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">install by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add ExprParsers&quot;"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add ExprParsers<span class="pl-pds">"</span></span></pre></div>
</article></div>