<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-exprparsersjl" class="anchor" aria-hidden="true" href="#exprparsersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExprParsers.jl</h1>
<p><a href="https://schlichtanders.github.io/ExprParsers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://schlichtanders.github.io/ExprParsers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/schlichtanders/ExprParsers.jl/actions"><img src="https://github.com/schlichtanders/ExprParsers.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/schlichtanders/ExprParsers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e3d6e43afdc27bcf4e5238fd9336381751405a73f9f94b90ee7007684f34f447/68747470733a2f2f636f6465636f762e696f2f67682f7363686c69636874616e646572732f45787072506172736572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/schlichtanders/ExprParsers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>ExprParsers</code> is a library made to simplify development of elaborate macros.</p>
<p>What <code>ExprParsers</code> offers is a set of curated parsers for common <code>Expr</code> patterns. For example</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="parse_expr(ExprParsers.Function(), :(f(a) = 2a))
"><pre><span class="pl-en">parse_expr</span>(ExprParsers<span class="pl-k">.</span><span class="pl-en">Function</span>(), :(<span class="pl-en">f</span>(a) <span class="pl-k">=</span> <span class="pl-c1">2</span>a))</pre></div>
<p>will give you an <code>ExprParsers.Function_Parsed</code> object where you can inspect and change <code>name</code>, <code>args</code>, <code>kwargs</code>, <code>curlies</code>, <code>wheres</code>, and the function <code>body</code>. It just works and you don't have to bother any longer that you can also write the same function as <code>function f(a); 2a; end</code> - the parser handles this for you.</p>
<p>In macros you often not only want to inspect the given <code>Expr</code> in efficient and stable manners, but also may want to change parts and return a respectively adapted <code>Expr</code>. For this purpose, all Parsed objects are mutable and can be converted back to <code>Expr</code> by using the <code>to_expr(parsed_value)</code> method.</p>
<p>We guarantee that <code>parse_expr</code> and <code>to_expr</code> are working nicely together, i.e. the following always holds for arbitrary expressions and parsers</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExprParsers  # comes with a shorthand EP for ExprParsers
parser = EP.Function()
expr = :(f(a) = 2a))
parsed = parse_expr(parser, expr)

# applying the parser &quot;twice&quot; returns always the same parsed result
parse_expr(parser, to_expr(parsed)) == parsed
"><pre><span class="pl-k">using</span> ExprParsers  <span class="pl-c"><span class="pl-c">#</span> comes with a shorthand EP for ExprParsers</span>
parser <span class="pl-k">=</span> EP<span class="pl-k">.</span><span class="pl-c1">Function</span>()
expr <span class="pl-k">=</span> :(<span class="pl-en">f</span>(a) <span class="pl-k">=</span> <span class="pl-c1">2</span>a))
parsed <span class="pl-k">=</span> <span class="pl-c1">parse_expr</span>(parser, expr)

<span class="pl-c"><span class="pl-c">#</span> applying the parser "twice" returns always the same parsed result</span>
<span class="pl-c1">parse_expr</span>(parser, <span class="pl-c1">to_expr</span>(parsed)) <span class="pl-k">==</span> parsed</pre></div>
<p>Note that <code>ExprParsers</code> exports a constant <code>EP</code> which is an alias for the package <code>ExprParsers</code> itself. This comes in very handy when you use the custom parsers a lot.</p>
<p>Checkout the <code>test/</code> directory for seeing more examples, especially <a href="test/expr_parsers_with_parsed.jl">test/expr_parsers_with_parsed.jl</a> where for each common <code>Expr</code> pattern a parser is put into action.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is soon going to be registered at General, until then you can use it by adding a custom registry.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;registry add https://github.com/JuliaRegistries/General&quot;  # central julia registry
pkg&quot;registry add https://github.com/schlichtanders/SchlichtandersJuliaRegistry.jl&quot;  # custom registry
pkg&quot;add ExprParsers&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>registry add https://github.com/JuliaRegistries/General<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> central julia registry</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>registry add https://github.com/schlichtanders/SchlichtandersJuliaRegistry.jl<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> custom registry</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add ExprParsers<span class="pl-pds">"</span></span></pre></div>
<p>Use it like</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ExprParsers
"><pre><span class="pl-k">using</span> ExprParsers</pre></div>
</article></div>