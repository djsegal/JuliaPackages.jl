<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graphqlclientjl" class="anchor" aria-hidden="true" href="#graphqlclientjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GraphQLClient.jl</h1>
<p dir="auto"><em>A Julia GraphQL client for seamless integration with a server</em></p>
<p dir="auto"><a href="https://deloitteoptimalreality.github.io/GraphQLClient.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://deloitteoptimalreality.github.io/GraphQLClient.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/DeloitteDigitalAPAC/GraphQLClient.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/DeloitteDigitalAPAC/GraphQLClient.jl/workflows/CI/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/DeloitteDigitalAPAC/GraphQLClient.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/426106d306e0bb8587a9fda3a16571fc5665d87d4f91125c0f3eca688f106725/68747470733a2f2f636f6465636f762e696f2f67682f44656c6f697474654469676974616c415041432f4772617068514c436c69656e742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/DeloitteDigitalAPAC/GraphQLClient.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">This package is intended to make connecting to and communicating with GraphQL servers easy whilst integrating easily with the wider Julia ecosystem.</p>
<h2 dir="auto"><a id="user-content-key-features" class="anchor" aria-hidden="true" href="#key-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Key Features</h2>
<ul dir="auto">
<li><strong>Querying</strong>, <strong>mutating</strong> and <strong>subscribing</strong> without manual writing of query strings</li>
<li><code>@gql_str</code> non-standard string literal which which <strong>validates a query string at compile time</strong></li>
<li>Deserializing responses directly using <strong>StructTypes</strong></li>
<li>Type stable querying</li>
<li><strong>Construction of Julia types</strong> from GraphQL objects</li>
<li>Using <strong>introspection</strong> to help with querying</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with Julia's package manager,
either by using the Pkg REPL mode (press <code>]</code> to enter):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add GraphQLClient"><pre class="notranslate"><code>pkg&gt; add GraphQLClient
</code></pre></div>
<p dir="auto">or by using Pkg functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;GraphQLClient&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>GraphQLClient<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h2>
<h3 dir="auto"><a id="user-content-connecting-to-a-server" class="anchor" aria-hidden="true" href="#connecting-to-a-server"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Connecting to a server</h3>
<p dir="auto">A client can be instantiated by using the <code>Client</code> type</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GraphQLClient

client = Client(&quot;https://countries.trevorblades.com&quot;)"><pre><span class="pl-k">using</span> GraphQLClient

client <span class="pl-k">=</span> <span class="pl-c1">Client</span>(<span class="pl-s"><span class="pl-pds">"</span>https://countries.trevorblades.com<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This will, by default, use a query to introspect the server schema.</p>
<p dir="auto">We can also set a global client to be user by queries, mutations, subscriptions and introspection functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="global_graphql_client(Client(&quot;https://countries.trevorblades.com&quot;))"><pre><span class="pl-c1">global_graphql_client</span>(<span class="pl-c1">Client</span>(<span class="pl-s"><span class="pl-pds">"</span>https://countries.trevorblades.com<span class="pl-pds">"</span></span>))</pre></div>
<h3 dir="auto"><a id="user-content-querying" class="anchor" aria-hidden="true" href="#querying"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Querying</h3>
<p dir="auto">We can query a <code>client</code> without having to type a full GraphQL query by hand, with the response containing fields obtained by introspection</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="response = query(client, &quot;countries&quot;)"><pre>response <span class="pl-k">=</span> <span class="pl-c1">query</span>(client, <span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Or we can query the global client</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="response = query(&quot;countries&quot;)"><pre>response <span class="pl-k">=</span> <span class="pl-c1">query</span>(<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">We can add arguments and specify fields in the response</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="query_args = Dict(&quot;filter&quot; =&gt; Dict(&quot;code&quot; =&gt; Dict(&quot;eq&quot; =&gt; &quot;AU&quot;)))
response = query(&quot;countries&quot;; query_args=query_args, output_fields=&quot;name&quot;);
response.data[&quot;countries&quot;]
# 1-element Vector{Any}:
#  Dict{String, Any}(&quot;name&quot; =&gt; &quot;Australia&quot;)"><pre>query_args <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>filter<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>eq<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>AU<span class="pl-pds">"</span></span>)))
response <span class="pl-k">=</span> <span class="pl-c1">query</span>(<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>; query_args<span class="pl-k">=</span>query_args, output_fields<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>);
response<span class="pl-k">.</span>data[<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>]
<span class="pl-c"><span class="pl-c">#</span> 1-element Vector{Any}:</span>
<span class="pl-c"><span class="pl-c">#</span>  Dict{String, Any}("name" =&gt; "Australia")</span></pre></div>
<p dir="auto">Or we can query with the query string directly using either a normal <code>String</code> or the <code>gql</code> <a href="https://docs.julialang.org/en/v1/manual/strings/#non-standard-string-literals" rel="nofollow">non-standard string literal</a> which also performs some validation of the string:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="query_string = gql&quot;&quot;&quot;
    query(
      $eq: String
    ){
    countries(
        filter:{
            code:{
                eq:$eq
            }
        }
    ){
        name
    }
}
&quot;&quot;&quot;

variables = Dict(&quot;eq&quot; =&gt; &quot;AU&quot;)

response = GraphQLClient.execute(query_string, variables=variables)"><pre>query_string <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">gql</span>"""</span></span>
<span class="pl-s">    query(</span>
<span class="pl-s">      $eq: String</span>
<span class="pl-s">    ){</span>
<span class="pl-s">    countries(</span>
<span class="pl-s">        filter:{</span>
<span class="pl-s">            code:{</span>
<span class="pl-s">                eq:$eq</span>
<span class="pl-s">            }</span>
<span class="pl-s">        }</span>
<span class="pl-s">    ){</span>
<span class="pl-s">        name</span>
<span class="pl-s">    }</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

variables <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>eq<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>AU<span class="pl-pds">"</span></span>)

response <span class="pl-k">=</span> GraphQLClient<span class="pl-k">.</span><span class="pl-c1">execute</span>(query_string, variables<span class="pl-k">=</span>variables)</pre></div>
<p dir="auto">We can define a <code>StructType</code> to deserialise the result into</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructTypes

struct CountryName
    name::String
end
StructTypes.StructType(::Type{CountryName}) = StructTypes.OrderedStruct()

response = query(&quot;countries&quot;, Vector{CountryName}, query_args=query_args, output_fields=&quot;name&quot;)

response.data[&quot;countries&quot;][1]
# CountryName(&quot;Australia&quot;)"><pre><span class="pl-k">using</span> StructTypes

<span class="pl-k">struct</span> CountryName
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span>
StructTypes<span class="pl-k">.</span><span class="pl-en">StructType</span>(<span class="pl-k">::</span><span class="pl-c1">Type{CountryName}</span>) <span class="pl-k">=</span> StructTypes<span class="pl-k">.</span><span class="pl-c1">OrderedStruct</span>()

response <span class="pl-k">=</span> <span class="pl-c1">query</span>(<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>, Vector{CountryName}, query_args<span class="pl-k">=</span>query_args, output_fields<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>)

response<span class="pl-k">.</span>data[<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>]
<span class="pl-c"><span class="pl-c">#</span> CountryName("Australia")</span></pre></div>
<p dir="auto">Or we can use introspection to build the type automatically</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Country = GraphQLClient.introspect_object(&quot;Country&quot;)

response = query(&quot;countries&quot;, Vector{Country}, query_args=query_args, output_fields=&quot;name&quot;)

response.data[&quot;countries&quot;][1]
# Country
#   name : Australia"><pre>Country <span class="pl-k">=</span> GraphQLClient<span class="pl-k">.</span><span class="pl-c1">introspect_object</span>(<span class="pl-s"><span class="pl-pds">"</span>Country<span class="pl-pds">"</span></span>)

response <span class="pl-k">=</span> <span class="pl-c1">query</span>(<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>, Vector{Country}, query_args<span class="pl-k">=</span>query_args, output_fields<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>)

response<span class="pl-k">.</span>data[<span class="pl-s"><span class="pl-pds">"</span>countries<span class="pl-pds">"</span></span>][<span class="pl-c1">1</span>]
<span class="pl-c"><span class="pl-c">#</span> Country</span>
<span class="pl-c"><span class="pl-c">#</span>   name : Australia</span></pre></div>
<h3 dir="auto"><a id="user-content-mutations" class="anchor" aria-hidden="true" href="#mutations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mutations</h3>
<p dir="auto">Mutations can be constructed in a similar way, except the arguments are not a keyword argument as typically
a mutation is doing something with an input. For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="response = mutate(client, &quot;mutation_name&quot;, Dict(&quot;new_id&quot; =&gt; 1))
response = mutate(&quot;mutation_name&quot;, Dict(&quot;new_id&quot; =&gt; 1)) # Use global client"><pre>response <span class="pl-k">=</span> <span class="pl-c1">mutate</span>(client, <span class="pl-s"><span class="pl-pds">"</span>mutation_name<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>new_id<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>))
response <span class="pl-k">=</span> <span class="pl-c1">mutate</span>(<span class="pl-s"><span class="pl-pds">"</span>mutation_name<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>new_id<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> Use global client</span></pre></div>
<h3 dir="auto"><a id="user-content-subscriptions" class="anchor" aria-hidden="true" href="#subscriptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subscriptions</h3>
<p dir="auto">The subscriptions syntax is similar, except that we use Julia's <code>do</code> notation</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="open_subscription(
    client,
    &quot;subscription_name&quot;,
    sub_args=(&quot;id&quot; =&gt; 1),
    output_fields=&quot;val&quot;
) do response
    val = response.data[&quot;subscription_name&quot;][&quot;val&quot;]
    stop_sub = val == 2
    return stop_sub # If this is true, the subscription ends
end"><pre><span class="pl-c1">open_subscription</span>(
    client,
    <span class="pl-s"><span class="pl-pds">"</span>subscription_name<span class="pl-pds">"</span></span>,
    sub_args<span class="pl-k">=</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>),
    output_fields<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>val<span class="pl-pds">"</span></span>
) <span class="pl-k">do</span> response
    val <span class="pl-k">=</span> response<span class="pl-k">.</span>data[<span class="pl-s"><span class="pl-pds">"</span>subscription_name<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>val<span class="pl-pds">"</span></span>]
    stop_sub <span class="pl-k">=</span> val <span class="pl-k">==</span> <span class="pl-c1">2</span>
    <span class="pl-k">return</span> stop_sub <span class="pl-c"><span class="pl-c">#</span> If this is true, the subscription ends</span>
<span class="pl-k">end</span></pre></div>
</article></div>