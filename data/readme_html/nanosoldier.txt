<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nanosoldierjl" class="anchor" aria-hidden="true" href="#nanosoldierjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nanosoldier.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaCI/Nanosoldier.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a8b6fc5c8e34d8e691a12229e052c7217237a586098044b16431d8d2e306875d/68747470733a2f2f7472617669732d63692e6f72672f4a756c696143492f4e616e6f736f6c646965722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaCI/Nanosoldier.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package contains the infrastructure powering the @nanosoldier CI bot used by the Julia language.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">If you're a collaborator in the JuliaLang/julia repository, you can submit CI jobs by
commenting on commits or pull requests. The @nanosoldier bot looks for a special "trigger
phrase" in your comment, and if the trigger phrase is found, it is parsed by the bot to
configure and submit a CI job.</p>
<p dir="auto">The trigger phrase syntax is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `command(args..., kwargs...)`"><pre class="notranslate"><code>@nanosoldier `command(args..., kwargs...)`
</code></pre></div>
<p dir="auto">Backticks are mandatory. If the job is accepted, a status update will be pushed to the
commit you commented on (look for a yellow dot, green check or red cross). Once the job
finishes, @nanosoldier will reply with a comment, and upload results to the
<a href="https://github.com/JuliaCI/NanosoldierReports">NanosoldierReports</a> repository.</p>
<p dir="auto">There are two kinds of jobs you can invoke: <strong>benchmark jobs</strong>, which run the
<a href="https://github.com/JuliaCI/BaseBenchmarks.jl">BaseBenchmarks.jl</a> suite, and <strong>package test
jobs</strong> which rely on <a href="https://github.com/JuliaCI/PkgEval.jl">PkgEval.jl</a> to run the test
suite of all registered packages.</p>
<p dir="auto"><strong>Note that only one job can be triggered per comment.</strong></p>
<p dir="auto">One of the most common invocations runs all benchmarks on your PR, comparing against the
current Julia master branch:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runbenchmarks()`"><pre class="notranslate"><code>@nanosoldier `runbenchmarks()`
</code></pre></div>
<p dir="auto">Similarly, you can run all package tests, e.g. if you suspect your PR might be breaking:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runtests()`"><pre class="notranslate"><code>@nanosoldier `runtests()`
</code></pre></div>
<p dir="auto">Both operations take a long time, so it might be wise to restrict which benchmarks you want
to run, or which packages you want to test:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runbenchmarks(&quot;linalg&quot;)`

@nanosoldier `runtests([&quot;JSON&quot;, &quot;Crayons&quot;])`"><pre class="notranslate"><code>@nanosoldier `runbenchmarks("linalg")`

@nanosoldier `runtests(["JSON", "Crayons"])`
</code></pre></div>
<p dir="auto">When a job is completed, @nanosoldier will reply to your comment to tell you how the job
went and link you to any relevant results.</p>
<h2 dir="auto"><a id="user-content-available-job-types" class="anchor" aria-hidden="true" href="#available-job-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available job types</h2>
<p dir="auto">CI jobs are implemented in this package as subtypes of <code>Nanosoldier.AbstractJob</code>. See
<a href="https://github.com/JuliaCI/Nanosoldier.jl/blob/master/src/jobs/jobs.jl">here</a> for a
description of the interface new job types need to implement.</p>
<h3 dir="auto"><a id="user-content-benchmarkjob" class="anchor" aria-hidden="true" href="#benchmarkjob"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>BenchmarkJob</code></h3>
<h4 dir="auto"><a id="user-content-execution-cycle" class="anchor" aria-hidden="true" href="#execution-cycle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Execution Cycle</h4>
<p dir="auto">A <code>BenchmarkJob</code> has the following execution cycle:</p>
<ol dir="auto">
<li>Pull in the JuliaLang/julia repository and build the commit specified by the context of
the trigger phrase.</li>
<li>Using the new Julia build, fetch the <code>nanosoldier</code> branch of the
<a href="https://github.com/JuliaCI/BaseBenchmarks.jl">BaseBenchmarks</a> repository and run the
benchmarks specified by the trigger phrase.</li>
<li>If the trigger phrase specifies a commit to compare against, build that version of Julia
and perform step 2 using the comparison build.</li>
<li>Upload a markdown report to the
<a href="https://github.com/JuliaCI/NanosoldierReports">NanosoldierReports</a> repository.</li>
</ol>
<h4 dir="auto"><a id="user-content-trigger-syntax" class="anchor" aria-hidden="true" href="#trigger-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Trigger Syntax</h4>
<p dir="auto">A <code>BenchmarkJob</code> is triggered with the following syntax:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runbenchmarks(tag_predicate, vs = &quot;ref&quot;)`"><pre class="notranslate"><code>@nanosoldier `runbenchmarks(tag_predicate, vs = "ref")`
</code></pre></div>
<p dir="auto">The <code>vs</code> keyword argument is optional; if invoked from a pull request, it will be derived
automatically from the merge base. In other cases, the comparison step (step 3 above) will
be skipped.</p>
<p dir="auto">The tag predicate is used to decide which benchmarks to run, and supports the syntax defined
by the <a href="https://github.com/JuliaCI/BenchmarkTools.jl/blob/master/doc/manual.md#indexing-into-a-benchmarkgroup-using-tagged">tagging
system</a>
implemented in the <a href="https://github.com/JuliaCI/BenchmarkTools.jl">BenchmarkTools</a> package.
Additionally, you can run all benchmarks by using the keyword <code>ALL</code>, e.g.
<code>runbenchmarks(ALL)</code>, which is the same as specifying no predicate at all.</p>
<p dir="auto">The <code>vs</code> keyword argument takes a reference string which can points to a Julia commit to
compare against. The following syntax is supported for reference string:</p>
<ul dir="auto">
<li><code>":branch"</code>: the head commit of the branch named <code>branch</code> in the current repository (<code>JuliaLang/julia</code>)</li>
<li><code>"@sha"</code>: the commit specified by <code>sha</code> in the current repository (<code>JuliaLang/julia</code>)</li>
<li><code>"#tag"</code>: the commit pointed to by the tag named <code>tag</code> in the current repository (<code>JuliaLang/julia</code>)</li>
<li><code>"%self"</code>: to use the same commit for both parts of the comparison</li>
<li><code>"owner/repo:branch"</code>: the head commit of the branch named <code>branch</code> in the repository <code>owner/repo</code></li>
<li><code>"owner/repo@sha"</code>: the commit specified by <code>sha</code> in the repository <code>owner/repo</code></li>
<li><code>"owner/repo#tag"</code>: the commit pointed to by the tag named <code>tag</code> in the repository <code>owner/repo</code></li>
</ul>
<h4 dir="auto"><a id="user-content-benchmark-results" class="anchor" aria-hidden="true" href="#benchmark-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark Results</h4>
<p dir="auto">Once a <code>BenchmarkJob</code> is complete, the results are uploaded to the
<a href="https://github.com/JuliaCI/NanosoldierReports">NanosoldierReports</a> repository. Each job
has its own directory for results. This directory contains the following items:</p>
<ul dir="auto">
<li><code>report.md</code> is a markdown report that summarizes the job results</li>
<li><code>data.tar.gz</code> contains raw timing data in JSON format. To untar this file, run
<code>tar -xzvf data.tar.gz</code>. You can analyze this data using the
<a href="https://github.com/JuliaCI/NanosoldierReports">BenchmarkTools</a> package.</li>
<li><code>logs</code> is a directory containing the build logs and benchmark execution logs for the job.</li>
</ul>
<h4 dir="auto"><a id="user-content-comment-examples" class="anchor" aria-hidden="true" href="#comment-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comment Examples</h4>
<p dir="auto">Here are some examples of comments that trigger a <code>BenchmarkJob</code> in various contexts:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="I want to run benchmarks tagged &quot;array&quot; on the current commit.

@nanosoldier `runbenchmarks(&quot;array&quot;)`

If this comment is on a specific commit, benchmarks will run on that commit. If
it's in a PR, they will run on the head/merge commit of the PR. If it's on a diff,
they will run on the commit associated with the diff."><pre class="notranslate"><code>I want to run benchmarks tagged "array" on the current commit.

@nanosoldier `runbenchmarks("array")`

If this comment is on a specific commit, benchmarks will run on that commit. If
it's in a PR, they will run on the head/merge commit of the PR. If it's on a diff,
they will run on the commit associated with the diff.
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="I want to run benchmarks tagged &quot;array&quot; on the current commit, and compare the results
with the results of running benchmarks on commit 858dee2b09d6a01cb5a2e4fb2444dd6bed469b7f.

@nanosoldier `runbenchmarks(&quot;array&quot;, vs = &quot;@858dee2b09d6a01cb5a2e4fb2444dd6bed469b7f&quot;)`"><pre class="notranslate"><code>I want to run benchmarks tagged "array" on the current commit, and compare the results
with the results of running benchmarks on commit 858dee2b09d6a01cb5a2e4fb2444dd6bed469b7f.

@nanosoldier `runbenchmarks("array", vs = "@858dee2b09d6a01cb5a2e4fb2444dd6bed469b7f")`
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="I want to run benchmarks tagged &quot;array&quot;, but not &quot;simd&quot; or &quot;linalg&quot;, on the
current commit. I want to compare the results against those of the release-0.4
branch.

@nanosoldier `runbenchmarks(&quot;array&quot; &amp;&amp; !(&quot;simd&quot; || &quot;linalg&quot;), vs = &quot;:release-0.4&quot;)`"><pre class="notranslate"><code>I want to run benchmarks tagged "array", but not "simd" or "linalg", on the
current commit. I want to compare the results against those of the release-0.4
branch.

@nanosoldier `runbenchmarks("array" &amp;&amp; !("simd" || "linalg"), vs = ":release-0.4")`
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="I want to run all benchmarks on the current commit. I want to compare the results
against a commit on my fork.

@nanosoldier `runbenchmarks(vs = &quot;christopher-dG/julia@c70ab26bb677c92f0d8e0ae41c3035217a4b111f&quot;)`"><pre class="notranslate"><code>I want to run all benchmarks on the current commit. I want to compare the results
against a commit on my fork.

@nanosoldier `runbenchmarks(vs = "christopher-dG/julia@c70ab26bb677c92f0d8e0ae41c3035217a4b111f")`
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="I want to run all benchmarks on the current commit. I want to compare the results
against the head commit of my fork's branch.

@nanosoldier `runbenchmarks(vs = &quot;christopher-dG/julia:mybranch&quot;)`"><pre class="notranslate"><code>I want to run all benchmarks on the current commit. I want to compare the results
against the head commit of my fork's branch.

@nanosoldier `runbenchmarks(vs = "christopher-dG/julia:mybranch")`
</code></pre></div>
<h3 dir="auto"><a id="user-content-pkgevaljob" class="anchor" aria-hidden="true" href="#pkgevaljob"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>PkgEvalJob</code></h3>
<h4 dir="auto"><a id="user-content-execution-cycle-1" class="anchor" aria-hidden="true" href="#execution-cycle-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Execution Cycle</h4>
<p dir="auto">A <code>PkgEvalJob</code> has the following execution cycle:</p>
<ol dir="auto">
<li>Pull in the JuliaLang/julia repository and build the commit specified by the context of
the trigger phrase.</li>
<li>Using the new Julia build, test the packages from the
<a href="https://github.com/JuliaRegistries/General">General</a> registry as specified by the
trigger phrase.</li>
<li>If the trigger phrase specifies a commit to compare against, build that version of Julia
and perform step 2 using the comparison build.</li>
<li>Upload a markdown report to the
<a href="https://github.com/JuliaCI/NanosoldierReports">NanosoldierReports</a> repository.</li>
</ol>
<h4 dir="auto"><a id="user-content-trigger-syntax-1" class="anchor" aria-hidden="true" href="#trigger-syntax-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Trigger Syntax</h4>
<p dir="auto">A <code>PkgEvalJob</code> is triggered with the following syntax:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runtests(package_selection, vs = &quot;ref&quot;)`"><pre class="notranslate"><code>@nanosoldier `runtests(package_selection, vs = "ref")`
</code></pre></div>
<p dir="auto">The package selection argument is used to decide which packages to test. It should be a list
of package names, e.g. <code>["Example"]</code>, that will be looked up in the registry. Additionally,
you can test all packages in the registry by using the keyword <code>ALL</code>, e.g. <code>runtests(ALL)</code>,
which is the same as not providing a package selection argument at all.</p>
<p dir="auto">The <code>vs</code> keyword argument is again optional. Its syntax and behavior is identical to the
<code>BenchmarkJob</code> <code>vs</code> keyword argument.</p>
<p dir="auto">Both sides of the comparison can be further configured by using respectively the
<code>configuration</code> and <code>vs_configuration</code> arguments. These options expect a named tuple where
the elements correspond to fields of the <code>PkgEval.Configuration</code> type.</p>
<p dir="auto">For example, a common configuration is to include buildflags that enable assertions:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runtests(vs = &quot;%self&quot;, configuration = (buildflags=[&quot;LLVM_ASSERTIONS=1&quot;, &quot;FORCE_ASSERTIONS=1&quot;],))`"><pre class="notranslate"><code>@nanosoldier `runtests(vs = "%self", configuration = (buildflags=["LLVM_ASSERTIONS=1", "FORCE_ASSERTIONS=1"],))`
</code></pre></div>
<p dir="auto">Another useful example makes PkgEval run under rr and use a Julia debug build for a better debugging experience:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@nanosoldier `runtests(configuration = (buildflags=[&quot;JULIA_BUILD_MODE=debug&quot;], julia_binary=&quot;julia-debug&quot;, rr=true))`"><pre class="notranslate"><code>@nanosoldier `runtests(configuration = (buildflags=["JULIA_BUILD_MODE=debug"], julia_binary="julia-debug", rr=true))`
</code></pre></div>
<p dir="auto">If no configuration arguments are specified, the defaults as specified by the
<code>PkgEval.Configuration</code> constructor are used.</p>
<h4 dir="auto"><a id="user-content-reverse-ci-for-packages" class="anchor" aria-hidden="true" href="#reverse-ci-for-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reverse-CI for packages</h4>
<p dir="auto">Nanosoldier.jl also supports testing for regression introduced by <em>package changes</em>. This
feature is currently only enabled on select repositories (contact @maleadt if you think this
is valuable for your package).</p>
<p dir="auto">The interface for testing package changes is identical to testing Julia changes: just invoke
Nanosoldier by commenting with an appropriate trigger phrase on a commit, issue or pull
request on a package repository. The execution cycle is slightly different:</p>
<ul dir="auto">
<li>The Julia version will be the same for both sides of the comparison, defaulting to
<code>stable</code> (which can be customized by setting the <code>julia</code> argument of the respective
<code>configuration</code>, e.g., to <code>"1.8"</code>)</li>
<li>If no package selection is made, or the set of <code>ALL</code> packages is requested, Nanosoldier
will look up the direct dependents of the package and test those.</li>
<li>Tests will be run after registering the current state of the package in a temporary
registry (implying that your <code>Project.toml</code> should contain a version bump). The <code>vs</code> side
of the comparison will use an unmodified version of the registry.</li>
</ul>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">The development of the Nanosoldier benchmarking platform was supported in part by the US
Army Research Office through the Institute for Soldier Nanotechnologies under Contract
No. W911NF-07-D0004.</p>
</article></div>