<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dynamic-polynomials" class="anchor" aria-hidden="true" href="#dynamic-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dynamic Polynomials</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>References to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/JuliaAlgebra/DynamicPolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cdd432889e5a783e1479fa00e32892c8412d9aa3/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961416c67656272612f44796e616d6963506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaAlgebra/DynamicPolynomials.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/blegat/dynamicpolynomials-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5790189f36b9808ee5fefec2a2b895a7c5dfee22/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f777535646e6f713478336a766a6674383f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wu5dnoq4x3jvjft8?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.1203245" rel="nofollow"><img src="https://camo.githubusercontent.com/548d80b3fe9cfa65e34c5fd3ba734294739f31f0/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e313230333234352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.1203245.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://coveralls.io/github/JuliaAlgebra/DynamicPolynomials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/daf77cbc22439b5c99086d7442ad19500be01d11/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961416c67656272612f44796e616d6963506f6c796e6f6d69616c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls branch" data-canonical-src="https://coveralls.io/repos/github/JuliaAlgebra/DynamicPolynomials.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/JuliaAlgebra/DynamicPolynomials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8b2a1fe602e047873a9978cf3aba62ca03254a7b/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961416c67656272612f44796e616d6963506f6c796e6f6d69616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaAlgebra/DynamicPolynomials.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p>Sparse dynamic representation of multivariate polynomials that can be used with <a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl">MultivariatePolynomials</a> (see the documentation there for more information).
Both commutative and non-commutative variables are supported.
The following types are defined:</p>
<ul>
<li><code>PolyVar{C}</code>: A variable which is commutative with <code>*</code> when <code>C</code> is <code>true</code>. Commutative variables are created using the <code>@polyvar</code> macro, e.g. <code>@polyvar x y</code>, <code>@polyvar x[1:8]</code> and non-commutative variables are created likewise using the <code>@ncpolyvar</code> macro.</li>
<li><code>Monomial{C}</code>: A product of variables: e.g. <code>x*y^2</code>.</li>
<li><code>Term{C, T}</code>: A product between an element of type <code>T</code> and a <code>Monomial{C}</code>, e.g <code>2x</code>, <code>3.0x*y^2</code>.</li>
<li><code>Polynomial{C, T}</code>: A sum of <code>Term{C, T}</code>, e.g. <code>2x + 3.0x*y^2 + y</code>.</li>
</ul>
<p>All common algebraic operations between those types are designed to be as efficient as possible without doing any assumption on <code>T</code>.
Typically, one imagine <code>T</code> to be a subtype of <code>Number</code> but it can be anything.
This is useful for example in the package <a href="https://github.com/JuliaOpt/PolyJuMP.jl">PolyJuMP</a> where <code>T</code> is often an affine expression of <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> decision variables.
The commutativity of <code>T</code> with <code>*</code> is not assumed, even if it is the coefficient of a monomial of commutative variables.
However, commutativity of <code>T</code> and of the variables <code>+</code> is always assumed.
This allows to keep the terms sorted (Graded Lexicographic order is used) in polynomial and measure which enables more efficient operations.</p>
<p>Below is a simple usage example</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@polyvar</span> x y <span class="pl-c"><span class="pl-c">#</span> assigns x (resp. y) to a variable of name x (resp. y)</span>
p <span class="pl-k">=</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3.0</span>x<span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y
<span class="pl-c1">@test</span> <span class="pl-c1">differentiate</span>(p, x) <span class="pl-c"><span class="pl-c">#</span> compute the derivative of p with respect to x</span>
<span class="pl-c1">@test</span> <span class="pl-c1">differentiate</span>.(p, (x, y)) <span class="pl-c"><span class="pl-c">#</span> compute the gradient of p</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>((x, y)<span class="pl-k">=&gt;</span>(y, x)) <span class="pl-c"><span class="pl-c">#</span> replace any x by y and y by x</span>
<span class="pl-c1">@test</span> <span class="pl-c1">subs</span>(p, y<span class="pl-k">=&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> replace any occurence of y by x^2</span>
<span class="pl-c1">@test</span> <span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, y<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> evaluate p at [1, 2]</span></pre></div>
<p>Below is an example with <code>@polyvar x[1:n]</code></p>
<div class="highlight highlight-source-julia"><pre>n <span class="pl-k">=</span> <span class="pl-c1">3</span>
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n, n)
<span class="pl-c1">@polyvar</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span>n] <span class="pl-c"><span class="pl-c">#</span> assign x to a tuple of variables x1, x2, x3</span>
p <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x <span class="pl-k">.*</span> x) <span class="pl-c"><span class="pl-c">#</span> x_1^2 + x_2^2 + x_3^2</span>
<span class="pl-c1">subs</span>(p, x[<span class="pl-c1">1</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, x[<span class="pl-c1">3</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> x_2^2 + 13</span>
<span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span>A<span class="pl-k">*</span><span class="pl-c1">vec</span>(x)) <span class="pl-c"><span class="pl-c">#</span> corresponds to dot(A*x, A*x), need vec to convert the tuple to a vector</span></pre></div>
<p>Note that, when doing substitution, it is required to give the <code>PolyVar</code> ordering that is meant.
Indeed, the ordering between the <code>PolyVar</code> is not alphabetical but rather by order of creation
which can be undeterministic with parallel computing.
Therefore, this order cannot be used for substitution, even as a default (see <a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl/issues/3">here</a> for a discussion about this).</p>
</article></div>