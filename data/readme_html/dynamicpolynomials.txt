<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dynamic-polynomials" class="anchor" aria-hidden="true" href="#dynamic-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dynamic Polynomials</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>References to cite</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaAlgebra/DynamicPolynomials.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaAlgebra/DynamicPolynomials.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.1203245" rel="nofollow"><img src="https://camo.githubusercontent.com/7ec3e1f573102a4020a914f08ad30882958a3ef262c798569a3f6c42cd189c42/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e313230333234352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.1203245.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="http://codecov.io/github/JuliaAlgebra/DynamicPolynomials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8e1c297c83bb63d1f05f7f8e1181f6375ccdc2f9623d3da8310934591c2b5fea/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961416c67656272612f44796e616d6963506f6c796e6f6d69616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaAlgebra/DynamicPolynomials.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"></td>
</tr>
</tbody>
</table>
<p dir="auto">Sparse dynamic representation of multivariate polynomials that can be used with <a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl">MultivariatePolynomials</a> (see the documentation there for more information).
Both commutative and non-commutative variables are supported.
The following types are defined:</p>
<ul dir="auto">
<li><code>PolyVar{C}</code>: A variable which is commutative with <code>*</code> when <code>C</code> is <code>true</code>. Commutative variables are created using the <code>@polyvar</code> macro, e.g. <code>@polyvar x y</code>, <code>@polyvar x[1:8]</code> and non-commutative variables are created likewise using the <code>@ncpolyvar</code> macro.</li>
<li><code>Monomial{C}</code>: A product of variables: e.g. <code>x*y^2</code>.</li>
<li><code>Term{C, T}</code>: A product between an element of type <code>T</code> and a <code>Monomial{C}</code>, e.g <code>2x</code>, <code>3.0x*y^2</code>.</li>
<li><code>Polynomial{C, T}</code>: A sum of <code>Term{C, T}</code>, e.g. <code>2x + 3.0x*y^2 + y</code>.</li>
</ul>
<p dir="auto">All common algebraic operations between those types are designed to be as efficient as possible without doing any assumption on <code>T</code>.
Typically, one imagine <code>T</code> to be a subtype of <code>Number</code> but it can be anything.
This is useful for example in the package <a href="https://github.com/JuliaOpt/PolyJuMP.jl">PolyJuMP</a> where <code>T</code> is often an affine expression of <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> decision variables.
The commutativity of <code>T</code> with <code>*</code> is not assumed, even if it is the coefficient of a monomial of commutative variables.
However, commutativity of <code>T</code> and of the variables <code>+</code> is always assumed.
This allows to keep the terms sorted (Graded Lexicographic order is used) in polynomial and measure which enables more efficient operations.</p>
<p dir="auto">Below is a simple usage example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using DynamicPolynomials

julia&gt; @polyvar x y # assigns x (resp. y) to a variable of name x (resp. y)
(x, y)

julia&gt; p = 2x + 3.0x*y^2 + y # define a polynomial in variables x and y
3.0xy² + 2.0x + y

julia&gt; differentiate(p, x) # compute the derivative of p with respect to x
3.0y² + 2.0

julia&gt; differentiate.(p, (x, y)) # compute the gradient of p
(3.0y² + 2.0, 6.0xy + 1.0)

julia&gt; p((x, y)=&gt;(y, x)) # replace any x by y and y by x
3.0x²y + x + 2.0y

julia&gt; subs(p, y=&gt;x^2) # replace any occurence of y by x^2
3.0x⁵ + x² + 2.0x

julia&gt; p(x=&gt;1, y=&gt;2) # evaluate p at [1, 2]
16.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DynamicPolynomials

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@polyvar</span> x y <span class="pl-c"><span class="pl-c">#</span> assigns x (resp. y) to a variable of name x (resp. y)</span>
(x, y)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">2</span>x <span class="pl-k">+</span> <span class="pl-c1">3.0</span>x<span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y <span class="pl-c"><span class="pl-c">#</span> define a polynomial in variables x and y</span>
<span class="pl-c1">3.0</span>xy² <span class="pl-k">+</span> <span class="pl-c1">2.0</span>x <span class="pl-k">+</span> y

julia<span class="pl-k">&gt;</span> <span class="pl-c1">differentiate</span>(p, x) <span class="pl-c"><span class="pl-c">#</span> compute the derivative of p with respect to x</span>
<span class="pl-c1">3.0</span>y² <span class="pl-k">+</span> <span class="pl-c1">2.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">differentiate</span>.(p, (x, y)) <span class="pl-c"><span class="pl-c">#</span> compute the gradient of p</span>
(<span class="pl-c1">3.0</span>y² <span class="pl-k">+</span> <span class="pl-c1">2.0</span>, <span class="pl-c1">6.0</span>xy <span class="pl-k">+</span> <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>((x, y)<span class="pl-k">=&gt;</span>(y, x)) <span class="pl-c"><span class="pl-c">#</span> replace any x by y and y by x</span>
<span class="pl-c1">3.0</span>x²y <span class="pl-k">+</span> x <span class="pl-k">+</span> <span class="pl-c1">2.0</span>y

julia<span class="pl-k">&gt;</span> <span class="pl-c1">subs</span>(p, y<span class="pl-k">=&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> replace any occurence of y by x^2</span>
<span class="pl-c1">3.0</span>x⁵ <span class="pl-k">+</span> x² <span class="pl-k">+</span> <span class="pl-c1">2.0</span>x

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(x<span class="pl-k">=&gt;</span><span class="pl-c1">1</span>, y<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> evaluate p at [1, 2]</span>
<span class="pl-c1">16.0</span></pre></div>
<p dir="auto">Below is an example with <code>@polyvar x[1:n]</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n = 3;

julia&gt; @polyvar x[1:n] # assign x to a tuple of variables x1, x2, x3
(PolyVar{true}[x₁, x₂, x₃],)

julia&gt; p = sum(x .* x) # compute the sum of squares
x₁² + x₂² + x₃²

julia&gt; subs(p, x[1]=&gt;2, x[3]=&gt;3) # make a partial substitution
x₂² + 13

julia&gt; A = reshape(1:9, 3, 3);

julia&gt; p(x =&gt; A * vec(x))  # corresponds to dot(A*x, A*x), need vec to convert the tuple to a vector
14x₁² + 64x₁x₂ + 100x₁x₃ + 77x₂² + 244x₂x₃ + 194x₃²"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">3</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@polyvar</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span>n] <span class="pl-c"><span class="pl-c">#</span> assign x to a tuple of variables x1, x2, x3</span>
(PolyVar{<span class="pl-c1">true</span>}[x₁, x₂, x₃],)

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x <span class="pl-k">.*</span> x) <span class="pl-c"><span class="pl-c">#</span> compute the sum of squares</span>
x₁² <span class="pl-k">+</span> x₂² <span class="pl-k">+</span> x₃²

julia<span class="pl-k">&gt;</span> <span class="pl-c1">subs</span>(p, x[<span class="pl-c1">1</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, x[<span class="pl-c1">3</span>]<span class="pl-k">=&gt;</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> make a partial substitution</span>
x₂² <span class="pl-k">+</span> <span class="pl-c1">13</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">p</span>(x <span class="pl-k">=&gt;</span> A <span class="pl-k">*</span> <span class="pl-c1">vec</span>(x))  <span class="pl-c"><span class="pl-c">#</span> corresponds to dot(A*x, A*x), need vec to convert the tuple to a vector</span>
<span class="pl-c1">14</span>x₁² <span class="pl-k">+</span> <span class="pl-c1">64</span>x₁x₂ <span class="pl-k">+</span> <span class="pl-c1">100</span>x₁x₃ <span class="pl-k">+</span> <span class="pl-c1">77</span>x₂² <span class="pl-k">+</span> <span class="pl-c1">244</span>x₂x₃ <span class="pl-k">+</span> <span class="pl-c1">194</span>x₃²</pre></div>
<p dir="auto">Note that, when doing substitution, it is required to give the <code>PolyVar</code> ordering that is meant.
Indeed, the ordering between the <code>PolyVar</code> is not alphabetical but rather by order of creation
which can be undeterministic with parallel computing.
Therefore, this order cannot be used for substitution, even as a default (see <a href="https://github.com/JuliaAlgebra/MultivariatePolynomials.jl/issues/3" data-hovercard-type="issue" data-hovercard-url="/JuliaAlgebra/MultivariatePolynomials.jl/issues/3/hovercard">here</a> for a discussion about this).</p>
</article></div>