<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-thunksjl" class="anchor" aria-hidden="true" href="#thunksjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Thunks.jl</h1>
<p dir="auto"><a href="https://tbenst.github.io/Thunks.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/4fbf1a0e9af715d83da2c6cb134932756a9f0a25d715cecf4c83b1437b7996eb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6d61737465722d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-master-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tbenst/Thunks.jl/actions"><img src="https://github.com/tbenst/Thunk.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tbenst/Thunks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/390561cba419f0d3efd2e6e0f72f1de072bed53c8a90d573a38c0d8644fdca17/68747470733a2f2f636f6465636f762e696f2f67682f7462656e73742f5468756e6b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tbenst/Thunk.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Thunks.jl provides a simple implementation of a
<a href="https://en.wikipedia.org/wiki/Thunk" rel="nofollow">Thunk</a> for lazy computation, and a
sophisticated macro <code>@lazy</code> that rewrites arbitrary Julia expressions for
a lazy evaluation strategy.</p>
<p dir="auto">A thunk represents a computation that is not run until we <code>reify</code> it,
meaning make "real". Once reified, the thunk caches the value of the
computation. The <a href="src/core.jl">core implementation</a> is only 30 LOC, so
consider taking a peak. Most of the complexity lies in the <code>@lazy</code> macro,
which supports lazy evaluation of nearly any Julia expression, including
dot broadcasting, indexing, keyword arguments, if blocks, comprehensions, and
more. Thunks can be composed, meaning that you can transform existing julia
code for lazy evaluation just by prepending <code>@lazy</code>.</p>
<p dir="auto">The implementation approximates laziness in pure functional languages
like Haskell: a memoizing <a href="https://en.wikipedia.org/wiki/Lazy_evaluation" rel="nofollow">call-by-need</a>.
This means that a computation captured in a thunk is run 0 or 1 times,
with subsequent calls re-using ("sharing") the result of the previous
evaluation.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; ] add Thunks"><pre class="notranslate"><code>julia&gt; ] add Thunks
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Note that the below example will execute nearly instantly due to laziness,
whereas the eager equivalent would take a minute.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="w = thunk(sleep)(60)
x = thunk(identity)(2)
# equivalent to line above
y = @lazy identity(2)
# also equivalent
@lazy yy = identity(2)
z = thunk(+)(x, y)
@assert z.evaluated == false
@assert reify(z) == 4
@assert z.evaluated == true
@assert w.evaluated == false"><pre>w <span class="pl-k">=</span> <span class="pl-c1">thunk</span>(sleep)(<span class="pl-c1">60</span>)
x <span class="pl-k">=</span> <span class="pl-c1">thunk</span>(identity)(<span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> equivalent to line above</span>
y <span class="pl-k">=</span> <span class="pl-c1">@lazy</span> <span class="pl-c1">identity</span>(<span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> also equivalent</span>
<span class="pl-c1">@lazy</span> yy <span class="pl-k">=</span> <span class="pl-c1">identity</span>(<span class="pl-c1">2</span>)
z <span class="pl-k">=</span> <span class="pl-c1">thunk</span>(<span class="pl-k">+</span>)(x, y)
<span class="pl-c1">@assert</span> z<span class="pl-k">.</span>evaluated <span class="pl-k">==</span> <span class="pl-c1">false</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">reify</span>(z) <span class="pl-k">==</span> <span class="pl-c1">4</span>
<span class="pl-c1">@assert</span> z<span class="pl-k">.</span>evaluated <span class="pl-k">==</span> <span class="pl-c1">true</span>
<span class="pl-c1">@assert</span> w<span class="pl-k">.</span>evaluated <span class="pl-k">==</span> <span class="pl-c1">false</span></pre></div>
<p dir="auto">The <code>@lazy</code> macro also supports code blocks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@lazy begin
    w = sleep(60)
    a = 2
    b = 3
    c = 1
    abc = sum([a,b,c])
end
@assert typeof(w) == Thunk
@assert typeof(a) == Int
@assert typeof(abc) == Thunk
@assert reify(abc) == 6"><pre><span class="pl-c1">@lazy</span> <span class="pl-k">begin</span>
    w <span class="pl-k">=</span> <span class="pl-c1">sleep</span>(<span class="pl-c1">60</span>)
    a <span class="pl-k">=</span> <span class="pl-c1">2</span>
    b <span class="pl-k">=</span> <span class="pl-c1">3</span>
    c <span class="pl-k">=</span> <span class="pl-c1">1</span>
    abc <span class="pl-k">=</span> <span class="pl-c1">sum</span>([a,b,c])
<span class="pl-k">end</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(w) <span class="pl-k">==</span> Thunk
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(a) <span class="pl-k">==</span> Int
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(abc) <span class="pl-k">==</span> Thunk
<span class="pl-c1">@assert</span> <span class="pl-c1">reify</span>(abc) <span class="pl-k">==</span> <span class="pl-c1">6</span></pre></div>
<p dir="auto"><code>@lazy</code> aims to support arbitrary Julia expressions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="test() = (1,2,3)
@lazy begin
    a = true ? (()-&gt; ones(5))() : zeros(5)
    b = a .+ a
    c = collect(1:b[3]*5)[7:end]
    d = identity(6)
    e = [x[1:2] for x in repeat([repeat([d], 3)],3)]
end
@assert reify(c) == [7,8,9,10]
@assert e.evaluated == false
@assert all(sum(reify(e)) .== [18, 18])
@assert e.evaluated == true"><pre><span class="pl-en">test</span>() <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">@lazy</span> <span class="pl-k">begin</span>
    a <span class="pl-k">=</span> <span class="pl-c1">true</span> <span class="pl-k">?</span> (()<span class="pl-k">-&gt;</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>))() <span class="pl-k">:</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">5</span>)
    b <span class="pl-k">=</span> a <span class="pl-k">.+</span> a
    c <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>b[<span class="pl-c1">3</span>]<span class="pl-k">*</span><span class="pl-c1">5</span>)[<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">end</span>]
    d <span class="pl-k">=</span> <span class="pl-c1">identity</span>(<span class="pl-c1">6</span>)
    e <span class="pl-k">=</span> [x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">repeat</span>([<span class="pl-c1">repeat</span>([d], <span class="pl-c1">3</span>)],<span class="pl-c1">3</span>)]
<span class="pl-k">end</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">reify</span>(c) <span class="pl-k">==</span> [<span class="pl-c1">7</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>]
<span class="pl-c1">@assert</span> e<span class="pl-k">.</span>evaluated <span class="pl-k">==</span> <span class="pl-c1">false</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">all</span>(<span class="pl-c1">sum</span>(<span class="pl-c1">reify</span>(e)) <span class="pl-k">.==</span> [<span class="pl-c1">18</span>, <span class="pl-c1">18</span>])
<span class="pl-c1">@assert</span> e<span class="pl-k">.</span>evaluated <span class="pl-k">==</span> <span class="pl-c1">true</span></pre></div>
<p dir="auto">More usage examples can be seen in the <a href="test/runtests.jl">tests</a>.</p>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<p dir="auto">Currently, using <code>@lazy</code> on nested blocks is not supported.</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">Thunks.jl is inspired by the Thunk implementation of the fantastic
<a href="https://github.com/JuliaParallel/Dagger.jl">Dagger.jl</a>
and is intended as a lightweight, more performant alternative
without the scheduling capabilities.</p>
</article></div>