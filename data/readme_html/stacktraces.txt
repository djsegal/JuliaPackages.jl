<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stacktracesjl" class="anchor" aria-hidden="true" href="#stacktracesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StackTraces.jl</h1>
<p><a href="https://travis-ci.org/invenia/StackTraces.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/655a1aead493192a1810aaa9d1b58c77d18d0719cb4a150b65f3012406fda9b6/68747470733a2f2f7472617669732d63692e6f72672f696e76656e69612f537461636b5472616365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/invenia/StackTraces.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/spurll/stacktraces-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bd6150daa369cdefb3d58f7c7f1484345b2a3a3578aa22612894ddcce878f4de/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f32346c703134366e38626b38343865363f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/24lp146n8bk848e6?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/github/invenia/StackTraces.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e5394e46e37b13499810d3a8d69e4fe033749b861d9f14df5285337fc414a823/68747470733a2f2f636f6465636f762e696f2f6769746875622f696e76656e69612f537461636b5472616365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/invenia/StackTraces.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>StackTraces.jl</code> provides simple stack traces that are both human readable and easy to use programmatically.</p>
<h4><a id="user-content-stacktraces-functionality-has-been-merged-into-the-julia-standard-library-as-of-v05" class="anchor" aria-hidden="true" href="#stacktraces-functionality-has-been-merged-into-the-julia-standard-library-as-of-v05"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StackTraces functionality has been merged into the Julia standard library as of v0.5.</h4>
<h5><a id="user-content-moving-forward-please-use-basestacktrace-and-basecatch_stacktrace-instead" class="anchor" aria-hidden="true" href="#moving-forward-please-use-basestacktrace-and-basecatch_stacktrace-instead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Moving forward, please use <a href="http://docs.julialang.org/en/latest/stdlib/stacktraces/#Base.stacktrace" rel="nofollow"><code>Base.stacktrace()</code></a> and <a href="http://docs.julialang.org/en/latest/stdlib/stacktraces/#Base.catch_stacktrace" rel="nofollow"><code>Base.catch_stacktrace()</code></a> instead.</h5>
<h5><a id="user-content-documentation-is-available-here" class="anchor" aria-hidden="true" href="#documentation-is-available-here"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation is available <a href="http://docs.julialang.org/en/latest/manual/stacktraces/" rel="nofollow">here</a>.</h5>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;StackTraces&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>StackTraces<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-viewing-a-stack-trace" class="anchor" aria-hidden="true" href="#viewing-a-stack-trace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Viewing a Stack Trace</h3>
<p>The primary function used to obtain a stack trace is <code>stacktrace</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using StackTraces

julia&gt; stacktrace()
2-element Array{StackTraces.StackFrame,1}:
 StackTraces.StackFrame(:eval_user_input,symbol(&quot;REPL.jl&quot;),62,symbol(&quot;&quot;),-1,false,13041465684)
 StackTraces.StackFrame(:anonymous,symbol(&quot;REPL.jl&quot;),92,symbol(&quot;task.jl&quot;),63,false,1304140086)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StackTraces

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stacktrace</span>()
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{StackTraces<span class="pl-k">.</span>StackFrame,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval_user_input</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">62</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13041465684</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:anonymous</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">92</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>task.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">63</span>,<span class="pl-c1">false</span>,<span class="pl-c1">1304140086</span>)</pre></div>
<p>Calling <code>stacktrace</code> returns a vector of <code>StackFrame</code>s. For ease of use, the alias <code>StackTrace</code> can be used in place of <code>Vector{StackFrame}</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; example() = stacktrace()
example (generic function with 1 method)

julia&gt; example()
3-element Array{StackTraces.StackFrame,1}:
 StackTraces.StackFrame(:example,:none,1,symbol(&quot;&quot;),-1,false,13041535346)
 StackTraces.StackFrame(:eval_user_input,symbol(&quot;REPL.jl&quot;),62,symbol(&quot;&quot;),-1,false,13041465684)
 StackTraces.StackFrame(:anonymous,symbol(&quot;REPL.jl&quot;),92,symbol(&quot;task.jl&quot;),63,false,13041400866)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">example</span>() <span class="pl-k">=</span> <span class="pl-c1">stacktrace</span>()
example (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">example</span>()
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{StackTraces<span class="pl-k">.</span>StackFrame,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:example</span>,<span class="pl-c1">:none</span>,<span class="pl-c1">1</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13041535346</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval_user_input</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">62</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13041465684</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:anonymous</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">92</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>task.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">63</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13041400866</span>)</pre></div>
<p>If you'd like the output to be a little more human-readable, replace calls to <code>stacktrace</code> (which returns a vector of <code>StackFrame</code>s) with <code>show_stacktrace</code> (which prints the stacktrace to an IO stream).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; example() = show_stacktrace()
example (generic function with 1 method)

julia&gt; example()
StackTrace with 3 StackFrames:
  example at none:1
  eval_user_input at REPL.jl:62
  [inlined code from REPL.jl:92] anonymous at task.jl:63
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">example</span>() <span class="pl-k">=</span> <span class="pl-c1">show_stacktrace</span>()
example (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">example</span>()
StackTrace with <span class="pl-c1">3</span> StackFrames<span class="pl-k">:</span>
  example at none<span class="pl-k">:</span><span class="pl-c1">1</span>
  eval_user_input at REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
  [inlined code from REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">92</span>] anonymous at task<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">63</span></pre></div>
<p>Note that when calling <code>stacktrace</code> from the REPL you'll always have those last two frames in the stack from <code>REPL.jl</code> (including the anonymous function from <code>task.jl</code>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @noinline child() = show_stacktrace()
child (generic function with 1 method)

julia&gt; @noinline parent() = child()
parent (generic function with 1 method)

julia&gt; grandparent() = parent()
grandparent (generic function with 1 method)

julia&gt; grandparent()
StackTrace with 5 StackFrames:
  child at none:1
  parent at none:1
  grandparent at none:1
  eval_user_input at REPL.jl:62
  [inlined code from REPL.jl:92] anonymous at task.jl:63
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@noinline</span> <span class="pl-en">child</span>() <span class="pl-k">=</span> <span class="pl-c1">show_stacktrace</span>()
child (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@noinline</span> <span class="pl-en">parent</span>() <span class="pl-k">=</span> <span class="pl-c1">child</span>()
parent (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">grandparent</span>() <span class="pl-k">=</span> <span class="pl-c1">parent</span>()
grandparent (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grandparent</span>()
StackTrace with <span class="pl-c1">5</span> StackFrames<span class="pl-k">:</span>
  child at none<span class="pl-k">:</span><span class="pl-c1">1</span>
  parent at none<span class="pl-k">:</span><span class="pl-c1">1</span>
  grandparent at none<span class="pl-k">:</span><span class="pl-c1">1</span>
  eval_user_input at REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
  [inlined code from REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">92</span>] anonymous at task<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">63</span></pre></div>
<h3><a id="user-content-extracting-useful-information" class="anchor" aria-hidden="true" href="#extracting-useful-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extracting Useful Information</h3>
<p>Each <code>StackFrame</code> contains the function name, file name, line number, file and line information for inlined functions, a flag indicating whether it is a C function (by default C functions do not appear in the stack trace), and an integer representation of the pointer returned by <code>backtrace</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; top_frame = stacktrace()[1]
StackTraces.StackFrame(:eval_user_input,symbol(&quot;REPL.jl&quot;),62,symbol(&quot;&quot;),-1,false, 13203085684)

julia&gt; top_frame.func
:eval_user_input

julia&gt; top_frame.file
symbol(&quot;REPL.jl&quot;)

julia&gt; top_frame.line
62

julia&gt; top_frame.inlined_file
symbol(&quot;&quot;)

julia&gt; top_frame.inlined_line
-1

julia&gt; top_frame.from_c
false

julia&gt; top_frame.pointer
13203085684
"><pre>julia<span class="pl-k">&gt;</span> top_frame <span class="pl-k">=</span> <span class="pl-c1">stacktrace</span>()[<span class="pl-c1">1</span>]
StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval_user_input</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">62</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>, <span class="pl-c1">13203085684</span>)

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>func
<span class="pl-c1">:eval_user_input</span>

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>file
<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>line
<span class="pl-c1">62</span>

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>inlined_file
<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>inlined_line
<span class="pl-k">-</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>from_c
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> top_frame<span class="pl-k">.</span>pointer
<span class="pl-c1">13203085684</span></pre></div>
<p>This makes stack trace information available programmatically without having to capture and parse the output from something like <code>Base.show_backtrace(io, backtrace())</code>.</p>
<h3><a id="user-content-error-handling" class="anchor" aria-hidden="true" href="#error-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Error Handling</h3>
<p>While having easy access to information about the current state of the callstack can be helpful in many places, the most obvious application is in error handling and debugging.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; example() = try
           error(&quot;Oh no!&quot;)
       catch
           show_stacktrace()
       end
example (generic function with 1 method)

julia&gt; example()
StackTrace with 3 StackFrames:
  example at none:4
  eval_user_input at REPL.jl:62
  [inlined code from REPL.jl:92] anonymous at task.jl:63
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">example</span>() <span class="pl-k">=</span> <span class="pl-k">try</span>
           <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Oh no!<span class="pl-pds">"</span></span>)
       <span class="pl-k">catch</span>
           <span class="pl-c1">show_stacktrace</span>()
       <span class="pl-k">end</span>
example (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">example</span>()
StackTrace with <span class="pl-c1">3</span> StackFrames<span class="pl-k">:</span>
  example at none<span class="pl-k">:</span><span class="pl-c1">4</span>
  eval_user_input at REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
  [inlined code from REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">92</span>] anonymous at task<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">63</span></pre></div>
<p>You may notice that in the example above the first stack frame points points at line 4, where <code>stacktrace</code> is called, rather than line 2, where the error occurred. While in this example it's trivial to track down the actual source of the error, things can get misleading pretty quickly if the stack trace doesn't even point to the right function.</p>
<p>This can be remedied by calling <code>catch_stacktrace</code> instead of <code>stacktrace</code>. Instead of returning callstack information for the current context, <code>catch_stacktrace</code> returns stack information for the context of the most recent error:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; example() = try
           error(&quot;Oh no!&quot;)
       catch
           show_stacktrace(catch_stacktrace())
       end
example (generic function with 1 method)

julia&gt; example()
StackTrace with 3 StackFrames:
  example at none:2
  eval_user_input at REPL.jl:62
  [inlined code from REPL.jl:92] anonymous at task.jl:63
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">example</span>() <span class="pl-k">=</span> <span class="pl-k">try</span>
           <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Oh no!<span class="pl-pds">"</span></span>)
       <span class="pl-k">catch</span>
           <span class="pl-c1">show_stacktrace</span>(<span class="pl-c1">catch_stacktrace</span>())
       <span class="pl-k">end</span>
example (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">example</span>()
StackTrace with <span class="pl-c1">3</span> StackFrames<span class="pl-k">:</span>
  example at none<span class="pl-k">:</span><span class="pl-c1">2</span>
  eval_user_input at REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
  [inlined code from REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">92</span>] anonymous at task<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">63</span></pre></div>
<p>Notice that the stack trace now indicates the appropriate line number.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @noinline child() = error(&quot;Whoops!&quot;)
child (generic function with 1 method)

julia&gt; @noinline parent() = child()
parent (generic function with 1 method)

julia&gt; function grandparent()
           try
               parent()
           catch err
               println(&quot;ERROR: &quot;, err.msg)
               show_stacktrace(catch_stacktrace())
           end
       end
grandparent (generic function with 1 method)

julia&gt; grandparent()
ERROR: Whoops!
StackTrace with 5 StackFrames:
  child at none:1
  parent at none:1
  grandparent at none:3
  eval_user_input at REPL.jl:62
  [inlined code from REPL.jl:92] anonymous at task.jl:63
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@noinline</span> <span class="pl-en">child</span>() <span class="pl-k">=</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Whoops!<span class="pl-pds">"</span></span>)
child (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@noinline</span> <span class="pl-en">parent</span>() <span class="pl-k">=</span> <span class="pl-c1">child</span>()
parent (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">grandparent</span>()
           <span class="pl-k">try</span>
               <span class="pl-c1">parent</span>()
           <span class="pl-k">catch</span> err
               <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>ERROR: <span class="pl-pds">"</span></span>, err<span class="pl-k">.</span>msg)
               <span class="pl-c1">show_stacktrace</span>(<span class="pl-c1">catch_stacktrace</span>())
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
grandparent (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grandparent</span>()
ERROR<span class="pl-k">:</span> Whoops!
StackTrace with <span class="pl-c1">5</span> StackFrames<span class="pl-k">:</span>
  child at none<span class="pl-k">:</span><span class="pl-c1">1</span>
  parent at none<span class="pl-k">:</span><span class="pl-c1">1</span>
  grandparent at none<span class="pl-k">:</span><span class="pl-c1">3</span>
  eval_user_input at REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
  [inlined code from REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">92</span>] anonymous at task<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">63</span></pre></div>
<h2><a id="user-content-architecture-and-api" class="anchor" aria-hidden="true" href="#architecture-and-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Architecture and API</h2>
<h3><a id="user-content-types" class="anchor" aria-hidden="true" href="#types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Types</h3>
<p><code>StackFrame</code> is an immutable type with the following fields:</p>
<ul>
<li><code>func::Symbol</code>: the name of the function containing the execution context</li>
<li><code>file::Symbol</code>: the path to the file containing the execution context</li>
<li><code>line::Integer</code>: the line number in the file containing the execution context</li>
<li><code>inlined_file::Symbol</code>: the path to the file containing the context for inlined code</li>
<li><code>inlined_line::Integer</code>: the line number in the file containing the context for inlined code</li>
<li><code>from_c::Bool</code>: true if the function is from C</li>
<li><code>pointer::Int64</code>: a representation of the pointer to the stack context as returned by <code>backtrace</code></li>
</ul>
<p><code>StackTrace</code> is an alias for <code>Vector{StackFrame}</code> (or <code>Array{StackFrame, 1}</code>), provided for convenience. Calls to <code>stacktrace</code> return <code>StackTrace</code>s.</p>
<p>Neither <code>StackTrace</code> nor <code>StackFrame</code> are exported.</p>
<h3><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h3>
<h4><a id="user-content-stacktrace" class="anchor" aria-hidden="true" href="#stacktrace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>stacktrace</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="stacktrace(trace::Vector{Ptr{Void}}, c_funcs::Bool)
"><pre><span class="pl-c1">stacktrace</span>(trace<span class="pl-k">::</span><span class="pl-c1">Vector{Ptr{Void}}</span>, c_funcs<span class="pl-k">::</span><span class="pl-c1">Bool</span>)</pre></div>
<p>Returns a <code>StackTrace</code> (vector of <code>StackFrame</code>s) representing either the current context or a context provided by output from a previous call to <code>backtrace</code>.</p>
<ul>
<li><code>trace</code> (optional): output from a call to <code>backtrace</code> to be turned into a vector of <code>StackFrame</code>s</li>
<li><code>c_funcs</code> (optional): true to include C calls in the resulting vector of <code>StackFrame</code>s (by default, C calls are removed)</li>
</ul>
<h4><a id="user-content-catch_stacktrace" class="anchor" aria-hidden="true" href="#catch_stacktrace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>catch_stacktrace</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="catch_stacktrace(c_funcs::Bool)
"><pre><span class="pl-c1">catch_stacktrace</span>(c_funcs<span class="pl-k">::</span><span class="pl-c1">Bool</span>)</pre></div>
<p>Returns a <code>StackTrace</code> representing context of the current (most recent) exception.</p>
<h4><a id="user-content-show_stacktrace" class="anchor" aria-hidden="true" href="#show_stacktrace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>show_stacktrace</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="show_stacktrace(io::IO, stack::StackTrace; full_path::Bool)
"><pre><span class="pl-c1">show_stacktrace</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>, stack<span class="pl-k">::</span><span class="pl-c1">StackTrace</span>; full_path<span class="pl-k">::</span><span class="pl-c1">Bool</span>)</pre></div>
<p>For those accustomed to calling <code>Base.show_backtrace</code>, <code>StackTraces.jl</code> also includes a <code>show_stacktrace</code> function that provides handy formatted output.</p>
<ul>
<li><code>io</code> (optional): the I/O stream to use for output (defaults to <code>STDOUT</code>)</li>
<li><code>stack</code> (optional): the stack trace to output (defaults to <code>stacktrace()</code>)</li>
<li><code>full_path</code> (optional kwarg): true to include full path information for files in the trace (defaults to <code>false</code>)</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; show_stacktrace()
StackTrace with 2 StackFrames:
  eval_user_input at REPL.jl:62
  [inlined code from REPL.jl:92] anonymous at task.jl:63
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">show_stacktrace</span>()
StackTrace with <span class="pl-c1">2</span> StackFrames<span class="pl-k">:</span>
  eval_user_input at REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span>
  [inlined code from REPL<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">92</span>] anonymous at task<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">63</span></pre></div>
<h4><a id="user-content-format_stacktrace" class="anchor" aria-hidden="true" href="#format_stacktrace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>format_stacktrace</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="format_stacktrace(stack::StackTrace, separator::AbstractString, start::AbstractString, finish::AbstractString; full_path::Bool)
"><pre><span class="pl-c1">format_stacktrace</span>(stack<span class="pl-k">::</span><span class="pl-c1">StackTrace</span>, separator<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, start<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, finish<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>; full_path<span class="pl-k">::</span><span class="pl-c1">Bool</span>)</pre></div>
<p>Returns a human-readable string representing a formatted <code>StackTrace</code>.</p>
<ul>
<li><code>stack</code>: the stack trace to format</li>
<li><code>separator</code>: a string to use to separate each stack frame</li>
<li><code>start</code> (optional): a string with which to prepend the formatted stack trace</li>
<li><code>finish</code> (optional): a string to append to the formatted stack trace</li>
<li><code>full_path</code> (optional kwarg): true to include full path information for files in the trace (defaults to <code>false</code>)</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; format_stacktrace(stacktrace(), &quot;, &quot;, &quot;{&quot;, &quot;}&quot;)
&quot;{eval_user_input at REPL.jl:62, [inlined code from REPL.jl:92] anonymous at task.jl:63}&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">format_stacktrace</span>(<span class="pl-c1">stacktrace</span>(), <span class="pl-s"><span class="pl-pds">"</span>, <span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>}<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>{eval_user_input at REPL.jl:62, [inlined code from REPL.jl:92] anonymous at task.jl:63}<span class="pl-pds">"</span></span></pre></div>
<p>You can, of course, format <code>StackTrace</code>s yourself by looping through (or <code>map</code>ing) the elements.</p>
<h4><a id="user-content-format_stackframe" class="anchor" aria-hidden="true" href="#format_stackframe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>format_stackframe</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="format_stackframe(frame::StackFrame; full_path::Bool)
"><pre><span class="pl-c1">format_stackframe</span>(frame<span class="pl-k">::</span><span class="pl-c1">StackFrame</span>; full_path<span class="pl-k">::</span><span class="pl-c1">Bool</span>)</pre></div>
<p>Returns a human-readable string representing a formatted <code>StackFrame</code>.</p>
<ul>
<li><code>frame</code>: the stack frame to format</li>
<li><code>full_path</code> (optional kwarg): true to include full path information for files in the frame (defaults to <code>false</code>)</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; format_stackframe(stacktrace()[1])
&quot;eval_user_input at REPL.jl:62&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">format_stackframe</span>(<span class="pl-c1">stacktrace</span>()[<span class="pl-c1">1</span>])
<span class="pl-s"><span class="pl-pds">"</span>eval_user_input at REPL.jl:62<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-comparison-with-backtrace" class="anchor" aria-hidden="true" href="#comparison-with-backtrace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparison with <code>backtrace</code></h2>
<p>Developers familiar with Julia's <code>backtrace</code> function, which returns a vector of <code>Ptr{Void}</code>, may be interested to know that you can pass that vector into <code>stacktrace</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; stack = backtrace()
15-element Array{Ptr{Void},1}:
 Ptr{Void} @0x000000010e9562ed
 Ptr{Void} @0x0000000312f95f20
 Ptr{Void} @0x0000000312f95ea0
 Ptr{Void} @0x000000010e8e5776
 Ptr{Void} @0x000000010e950c04
 Ptr{Void} @0x000000010e94f2a8
 Ptr{Void} @0x000000010e94f137
 Ptr{Void} @0x000000010e95070d
 Ptr{Void} @0x000000010e95053f
 Ptr{Void} @0x000000010e963348
 Ptr{Void} @0x000000010e8edd67
 Ptr{Void} @0x0000000312f71974
 Ptr{Void} @0x0000000312f715c7
 Ptr{Void} @0x0000000312f65c22
 Ptr{Void} @0x000000010e95708f

julia&gt; stacktrace(stack)
3-element Array{StackTraces.StackFrame,1}:
 StackTraces.StackFrame(:backtrace,symbol(&quot;error.jl&quot;),26,symbol(&quot;&quot;),-1,false,13203234592)
 StackTraces.StackFrame(:eval_user_input,symbol(&quot;REPL.jl&quot;),62,symbol(&quot;&quot;),-1,false,13203085684)
 StackTraces.StackFrame(:anonymous,symbol(&quot;REPL.jl&quot;),92,symbol(&quot;task.jl&quot;),63,false,13203037218)
"><pre>julia<span class="pl-k">&gt;</span> stack <span class="pl-k">=</span> <span class="pl-c1">backtrace</span>()
<span class="pl-c1">15</span><span class="pl-k">-</span>element Array{Ptr{Void},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e9562ed</span>
 Ptr{Void} @<span class="pl-c1">0x0000000312f95f20</span>
 Ptr{Void} @<span class="pl-c1">0x0000000312f95ea0</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e8e5776</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e950c04</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e94f2a8</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e94f137</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e95070d</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e95053f</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e963348</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e8edd67</span>
 Ptr{Void} @<span class="pl-c1">0x0000000312f71974</span>
 Ptr{Void} @<span class="pl-c1">0x0000000312f715c7</span>
 Ptr{Void} @<span class="pl-c1">0x0000000312f65c22</span>
 Ptr{Void} @<span class="pl-c1">0x000000010e95708f</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stacktrace</span>(stack)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{StackTraces<span class="pl-k">.</span>StackFrame,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:backtrace</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>error.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">26</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13203234592</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval_user_input</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">62</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13203085684</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:anonymous</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">92</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>task.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">63</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13203037218</span>)</pre></div>
<p>You may notice that the vector returned by <code>backtrace</code> had 15 pointers, but the vector returned by <code>stacktrace</code> only had 3. This is because, by default, <code>stacktrace</code> removes any lower-level C functions from the stack. If you want to include stack frames from C calls, you can do it like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; stacktrace(stack, true)
15-element Array{StackTraces.StackFrame,1}:
 StackTraces.StackFrame(:rec_backtrace,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/task.c&quot;),644,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/task.c&quot;),703,true,4539638509)
 StackTraces.StackFrame(:backtrace,symbol(&quot;error.jl&quot;),26,symbol(&quot;&quot;),-1,false,13203234592)
 StackTraces.StackFrame(:jlcall_backtrace_21483,symbol(&quot;&quot;),-1,symbol(&quot;&quot;),-1,true,13203234464)
 StackTraces.StackFrame(:jl_apply,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/gf.c&quot;),1691,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/gf.c&quot;),1708,true,4539176822)
 StackTraces.StackFrame(:jl_apply,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c&quot;),55,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c&quot;),65,true,4539616260
 StackTraces.StackFrame(:eval,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c&quot;),213,symbol(&quot;&quot;),-1,true,4539609768)
 StackTraces.StackFrame(:eval,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c&quot;),219,symbol(&quot;&quot;),-1,true,4539609399)
 StackTraces.StackFrame(:eval_body,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c&quot;),592,symbol(&quot;&quot;),-1,true,4539614989)
 StackTraces.StackFrame(:jl_toplevel_eval_body,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c&quot;),527,symbol(&quot;&quot;),-1,true,4539614527)
 StackTraces.StackFrame(:jl_toplevel_eval_flex,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/toplevel.c&quot;),521,symbol(&quot;&quot;),-1,true,4539691848)
 StackTraces.StackFrame(:jl_toplevel_eval_in,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/builtins.c&quot;),579,symbol(&quot;&quot;),-1,true,4539211111)
 StackTraces.StackFrame(:eval_user_input,symbol(&quot;REPL.jl&quot;),62,symbol(&quot;&quot;),-1,false,13203085684)
 StackTraces.StackFrame(:jlcall_eval_user_input_21232,symbol(&quot;&quot;),-1,symbol(&quot;&quot;),-1,true,13203084743)
 StackTraces.StackFrame(:anonymous,symbol(&quot;REPL.jl&quot;),92,symbol(&quot;task.jl&quot;),63,false,13203037218)
 StackTraces.StackFrame(:jl_apply,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/task.c&quot;),241,symbol(&quot;/private/tmp/julia20151107-44794-o1d6wy/src/task.c&quot;),240,true,4539641999)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">stacktrace</span>(stack, <span class="pl-c1">true</span>)
<span class="pl-c1">15</span><span class="pl-k">-</span>element Array{StackTraces<span class="pl-k">.</span>StackFrame,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:rec_backtrace</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/task.c<span class="pl-pds">"</span></span>),<span class="pl-c1">644</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/task.c<span class="pl-pds">"</span></span>),<span class="pl-c1">703</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539638509</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:backtrace</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>error.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">26</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13203234592</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jlcall_backtrace_21483</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">13203234464</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jl_apply</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/gf.c<span class="pl-pds">"</span></span>),<span class="pl-c1">1691</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/gf.c<span class="pl-pds">"</span></span>),<span class="pl-c1">1708</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539176822</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jl_apply</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c<span class="pl-pds">"</span></span>),<span class="pl-c1">55</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c<span class="pl-pds">"</span></span>),<span class="pl-c1">65</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539616260</span>
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c<span class="pl-pds">"</span></span>),<span class="pl-c1">213</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539609768</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c<span class="pl-pds">"</span></span>),<span class="pl-c1">219</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539609399</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval_body</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c<span class="pl-pds">"</span></span>),<span class="pl-c1">592</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539614989</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jl_toplevel_eval_body</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/interpreter.c<span class="pl-pds">"</span></span>),<span class="pl-c1">527</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539614527</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jl_toplevel_eval_flex</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/toplevel.c<span class="pl-pds">"</span></span>),<span class="pl-c1">521</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539691848</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jl_toplevel_eval_in</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/builtins.c<span class="pl-pds">"</span></span>),<span class="pl-c1">579</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539211111</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:eval_user_input</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">62</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13203085684</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jlcall_eval_user_input_21232</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>),<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">true</span>,<span class="pl-c1">13203084743</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:anonymous</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>REPL.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">92</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>task.jl<span class="pl-pds">"</span></span>),<span class="pl-c1">63</span>,<span class="pl-c1">false</span>,<span class="pl-c1">13203037218</span>)
 StackTraces<span class="pl-k">.</span><span class="pl-c1">StackFrame</span>(<span class="pl-c1">:jl_apply</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/task.c<span class="pl-pds">"</span></span>),<span class="pl-c1">241</span>,<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>/private/tmp/julia20151107-44794-o1d6wy/src/task.c<span class="pl-pds">"</span></span>),<span class="pl-c1">240</span>,<span class="pl-c1">true</span>,<span class="pl-c1">4539641999</span>)</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>StackTraces.jl is provided under the MIT "Expat" License. See <code>LICENSE.md</code> for details.</p>
</article></div>