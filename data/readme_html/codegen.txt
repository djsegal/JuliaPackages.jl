<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-codegen" class="anchor" aria-hidden="true" href="#codegen"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CodeGen</h1>
<p><strong>This package is experimental and a work in progress.</strong></p>
<p>The main purpose of this package is to generate LLVM IR from Julia code. It is targeted (for now) at static code. The resulting IR can be save to a bitcode (.bc) file that can be compiled with Clang. It requires Julia dev-0.7.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">myfun</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sum</span>((x, x, <span class="pl-c1">1.0</span>))

llvm_module <span class="pl-k">=</span> <span class="pl-c1">codegen</span>(myfun, Tuple{Float64})
<span class="pl-c1">write</span>(llvm_module, <span class="pl-s"><span class="pl-pds">"</span>myfun.bc<span class="pl-pds">"</span></span>)</pre></div>
<p>For some code, you can also test it in Julia. It generates code but uses LLVM's JIT compiler to compile and run it. Here is an example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@jitrun</span>(myfun, <span class="pl-c1">2.3</span>) <span class="pl-k">==</span> <span class="pl-c1">myfun</span>(<span class="pl-c1">2.3</span>)</pre></div>
<p>This package uses the awesome <a href="https://github.com/maleadt/LLVM.jl">LLVM.jl package</a>. LLVM.jl requires special installation instructions--it requires a source build of Julia (see their site for more info).</p>
<p>The approach here is much simpler than the codegen in base Julia. Here, the main language constructs and intrinsics are converted to LLVM IR. Generic functions and other constructs are coded using the C API.</p>
</article></div>