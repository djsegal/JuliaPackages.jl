<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-thefixjl" class="anchor" aria-hidden="true" href="#thefixjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TheFix.jl</h1>
<p dir="auto"><a href="https://github.com/MikaelSlevinsky/TheFix.jl/actions?query=workflow%3ACI"><img src="https://github.com/MikaelSlevinsky/TheFix.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/MikaelSlevinsky/TheFix.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c485a56cf7a999ecd3a877fda95f4eab02fac7ec2f38de05f322e0f55dbd8439/68747470733a2f2f636f6465636f762e696f2f67682f4d696b61656c536c6576696e736b792f5468654669782e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/MikaelSlevinsky/TheFix.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Congratulations! You've found the fix for the most common errors made in the REPL. Add the package, choose a safe word, and you're back in the game.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add TheFix

julia&gt; using TheFix; TheFix.@safeword fix true; TheFix.@safeword FIX false

julia&gt; z = logarithm(sine(4))
ERROR: UndefVarError: sine not defined
Stacktrace:
 [1] top-level scope at REPL[2]:1

julia&gt; fix
[ Info: Couldn't find logarithm. Did you mean log?
y
[ Info: Fixing UndefVarError(:logarithm) with log.
[ Info: Couldn't find sine. Did you mean sin?
yes
[ Info: Fixing UndefVarError(:sine) with sin.
[ Info: Fixing DomainError(-0.7568024953079282, &quot;log will only return a complex result if called with a complex argument. Try log(Complex(x)).&quot;) with log(Complex(sin(4))).

julia&gt; z = log(Complex(sin(4)))
-0.2786529640671238 + 3.141592653589793im

julia&gt; n = factorrial(factorreal(4))
ERROR: UndefVarError: factorreal not defined
Stacktrace:
 [1] top-level scope at REPL[5]:1

julia&gt; FIX
[ Info: Fixing UndefVarError(:factorrial) with factorial.
[ Info: Fixing UndefVarError(:factorreal) with factorial.
[ Info: Fixing OverflowError(&quot;24 is too large to look up in the table; consider using `factorial(big(24))` instead&quot;) with factorial(big(factorial(4))).

julia&gt; n = factorial(big(factorial(4)))
620448401733239439360000

julia&gt; divide(n, 0)
ERROR: UndefVarError: divide not defined
Stacktrace:
 [1] top-level scope at REPL[8]:1

julia&gt; fix
[ Info: Couldn't find divide. Did you mean div?
n
[ Info: Did you mean divrem?
no
[ Info: Did you mean digits?
n
[ Info: Couldn't find a fix. What did you mean?
fld
[ Info: Fixing UndefVarError(:divide) with fld.
[ Info: Fixing DivideError() with n / 0.

julia&gt; n / 0
Inf

julia&gt; A = -ones(2, 3)
2×3 Array{Float64,2}:
 -1.0  -1.0  -1.0
 -1.0  -1.0  -1.0

julia&gt; B = square_root.(B[-3:5, 2:4])
ERROR: UndefVarError: B not defined
Stacktrace:
 [1] top-level scope at REPL[12]:1

julia&gt; fix
[ Info: Couldn't find square_root. Did you mean sqrt?

[ Info: Fixing UndefVarError(:square_root) with sqrt.
[ Info: Couldn't find B. Did you mean A?

[ Info: Fixing UndefVarError(:B) with A.
[ Info: Fixing BoundsError([-1.0 -1.0 -1.0; -1.0 -1.0 -1.0], (-3:5, 2:4)) with A[intersect(-3:5, axes(A, 1)), intersect(2:4, axes(A, 2))].
[ Info: Fixing DomainError(-1.0, &quot;sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).&quot;) with sqrt.(Complex.(A[intersect(-3:5, axes(A, 1)), intersect(2:4, axes(A, 2))])).

julia&gt; B = sqrt.(Complex.(A[intersect(-3:5, axes(A, 1)), intersect(2:4, axes(A, 2))]))
2×2 Array{Complex{Float64},2}:
 0.0+1.0im  0.0+1.0im
 0.0+1.0im  0.0+1.0im
"><pre>pkg<span class="pl-k">&gt;</span> add TheFix

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TheFix; TheFix<span class="pl-k">.</span><span class="pl-c1">@safeword</span> fix <span class="pl-c1">true</span>; TheFix<span class="pl-k">.</span><span class="pl-c1">@safeword</span> FIX <span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">logarithm</span>(<span class="pl-c1">sine</span>(<span class="pl-c1">4</span>))
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> sine not defined
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> fix
[ Info<span class="pl-k">:</span> Couldn<span class="pl-k">'</span>t find logarithm. Did you mean log?
y
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:logarithm</span>) with log.
[ Info<span class="pl-k">:</span> Couldn<span class="pl-k">'</span>t find sine. Did you mean sin?
yes
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:sine</span>) with sin.
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">DomainError</span>(<span class="pl-k">-</span><span class="pl-c1">0.7568024953079282</span>, <span class="pl-s"><span class="pl-pds">"</span>log will only return a complex result if called with a complex argument. Try log(Complex(x)).<span class="pl-pds">"</span></span>) with <span class="pl-c1">log</span>(<span class="pl-c1">Complex</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">4</span>))).

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">log</span>(<span class="pl-c1">Complex</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">4</span>)))
<span class="pl-k">-</span><span class="pl-c1">0.2786529640671238</span> <span class="pl-k">+</span> <span class="pl-c1">3.141592653589793im</span>

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">factorrial</span>(<span class="pl-c1">factorreal</span>(<span class="pl-c1">4</span>))
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> factorreal not defined
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">5</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> FIX
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:factorrial</span>) with factorial.
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:factorreal</span>) with factorial.
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">OverflowError</span>(<span class="pl-s"><span class="pl-pds">"</span>24 is too large to look up in the table; consider using `factorial(big(24))` instead<span class="pl-pds">"</span></span>) with <span class="pl-c1">factorial</span>(<span class="pl-c1">big</span>(<span class="pl-c1">factorial</span>(<span class="pl-c1">4</span>))).

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">big</span>(<span class="pl-c1">factorial</span>(<span class="pl-c1">4</span>)))
<span class="pl-c1">620448401733239439360000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">divide</span>(n, <span class="pl-c1">0</span>)
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> divide not defined
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">8</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> fix
[ Info<span class="pl-k">:</span> Couldn<span class="pl-k">'</span>t find divide. Did you mean div?
n
[ Info<span class="pl-k">:</span> Did you mean divrem?
no
[ Info<span class="pl-k">:</span> Did you mean digits?
n
[ Info<span class="pl-k">:</span> Couldn<span class="pl-k">'</span>t find a fix. What did you mean?
fld
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:divide</span>) with fld.
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">DivideError</span>() with n <span class="pl-k">/</span> <span class="pl-c1">0.</span>

julia<span class="pl-k">&gt;</span> n <span class="pl-k">/</span> <span class="pl-c1">0</span>
<span class="pl-c1">Inf</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">square_root</span>.(B[<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>])
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> B not defined
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">12</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> fix
[ Info<span class="pl-k">:</span> Couldn<span class="pl-k">'</span>t find square_root. Did you mean sqrt?

[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:square_root</span>) with sqrt.
[ Info<span class="pl-k">:</span> Couldn<span class="pl-k">'</span>t find B. Did you mean A?

[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">UndefVarError</span>(<span class="pl-c1">:B</span>) with A.
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">BoundsError</span>([<span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>; <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>], (<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>)) with A[<span class="pl-c1">intersect</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">axes</span>(A, <span class="pl-c1">1</span>)), <span class="pl-c1">intersect</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">axes</span>(A, <span class="pl-c1">2</span>))]<span class="pl-k">.</span>
[ Info<span class="pl-k">:</span> Fixing <span class="pl-c1">DomainError</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-s"><span class="pl-pds">"</span>sqrt will only return a complex result if called with a complex argument. Try sqrt(Complex(x)).<span class="pl-pds">"</span></span>) with <span class="pl-c1">sqrt</span>.(<span class="pl-c1">Complex</span>.(A[<span class="pl-c1">intersect</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">axes</span>(A, <span class="pl-c1">1</span>)), <span class="pl-c1">intersect</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">axes</span>(A, <span class="pl-c1">2</span>))])).

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>.(<span class="pl-c1">Complex</span>.(A[<span class="pl-c1">intersect</span>(<span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">axes</span>(A, <span class="pl-c1">1</span>)), <span class="pl-c1">intersect</span>(<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4</span>, <span class="pl-c1">axes</span>(A, <span class="pl-c1">2</span>))]))
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Complex{Float64},<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span><span class="pl-k">+</span><span class="pl-c1">1.0im</span>  <span class="pl-c1">0.0</span><span class="pl-k">+</span><span class="pl-c1">1.0im</span>
 <span class="pl-c1">0.0</span><span class="pl-k">+</span><span class="pl-c1">1.0im</span>  <span class="pl-c1">0.0</span><span class="pl-k">+</span><span class="pl-c1">1.0im</span>
</pre></div>
<h2 dir="auto"><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How it works</h2>
<p dir="auto">The code recursively and deterministically cleanses an expression of the most recent code executed at the REPL, found in <code>REPL.find_hist_file()</code>. For <code>UndefVarError</code>s, the code sorts all accessible names by Levenshtein distance and replaces any undefined variable with the closest match. Fixing code this way is an ill-posed problem, so this package may have unintended consequences. The fixed prompt colour is orange because to me it's kind of spooky!</p>
</article></div>