<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-multilayergraphsjl" class="anchor" aria-hidden="true" href="#multilayergraphsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MultilayerGraphs.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/blob/main/LICENSE"><img src="https://camo.githubusercontent.com/fd551ba4b042d89480347a0e74e31af63b356b2cac1116c7b80038f41b04a581/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e2e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-green.svg" style="max-width: 100%;"></a>
<a href="https://juliagraphs.org/MultilayerGraphs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/2ec1d0b801a29bbd342c1e9c6902bd0de8dc392be0100b99716c138e34a4bf0c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d537461626c652d626c75652e737667" alt="Docs: Stable" data-canonical-src="https://img.shields.io/badge/Docs-Stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliagraphs.org/MultilayerGraphs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/20dca56548bc25b23380187f49f2162f04b623b8f466e9728c582183c0d3bcf5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d4465762d6c69676874626c75652e737667" alt="Docs: Dev" data-canonical-src="https://img.shields.io/badge/Docs-Dev-lightblue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/actions/workflows/CI.yml"><img src="https://github.com/JuliaGraphs/MultilayerGraphs.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/actions/workflows/CompatHelper.yml"><img src="https://github.com/JuliaGraphs/MultilayerGraphs.jl/actions/workflows/CompatHelper.yml/badge.svg" alt="Compat Helper" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/actions/workflows/FormatCheck.yml"><img src="https://github.com/JuliaGraphs/MultilayerGraphs.jl/actions/workflows/FormatCheck.yml/badge.svg" alt="Format Check" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGraphs/MultilayerGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/681b75bcc7227ebae2290245b8097f9a522805152786e2cb7952b859aadf5248/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614772617068732f4d756c74696c617965724772617068732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d5a3735384a7578444a58" alt="Coverage: Codecov" data-canonical-src="https://codecov.io/gh/JuliaGraphs/MultilayerGraphs.jl/branch/main/graph/badge.svg?token=Z758JuxDJX" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/JuliaGraphs/MultilayerGraphs.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/ec4a14680d688e7ac735f84078072e02e0e21ad35e8d478f65cf9a099121ed8a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614772617068732f4d756c74696c617965724772617068732e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="Coverage: Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaGraphs/MultilayerGraphs.jl/badge.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/8372d6d33303ac6efba24a799271f13658d8264876edad8ae4c3b5668d3df573/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f64652532305374796c652d426c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/Code%20Style-Blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=MultilayerGraphs" rel="nofollow"><img src="https://camo.githubusercontent.com/a4c0550170c009fc4681e5f6ae19c4b1abec3c9245d8c9f8a7d9eafc3b3f7c60/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f4d756c74696c61796572477261706873266c6162656c3d446f776e6c6f616473" alt="Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/MultilayerGraphs&amp;label=Downloads" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/490352002" rel="nofollow"><img src="https://camo.githubusercontent.com/ec6b48d863bbc2723eab35dbdad1b3c2c39ed71474ce8d60b9a4e0fe8c31f34a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3439303335323030322e737667" alt="DOI: Zenodo" data-canonical-src="https://zenodo.org/badge/490352002.svg" style="max-width: 100%;"></a>
<a href="https://joss.theoj.org/papers/7d1b94ff7a1a2ebd5e86075e86fc62fb" rel="nofollow"><img src="https://camo.githubusercontent.com/a59a943efb4387a56c0f36bb97573312d95127198c28491ea343b5eae0b9e98e/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f37643162393466663761316132656264356538363037356538366663363266622f7374617475732e737667" alt="JOSS" data-canonical-src="https://joss.theoj.org/papers/7d1b94ff7a1a2ebd5e86075e86fc62fb/status.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/blob/main/docs/src/assets/logo.png?raw=true"><img align="right" width="220" height="220" src="https://github.com/JuliaGraphs/MultilayerGraphs.jl/raw/main/docs/src/assets/logo.png?raw=true" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>MultilayerGraphs.jl</strong> is a Julia package for the creation, manipulation and analysis of the structure, dynamics and functions of multilayer graphs.</p>
<h2 dir="auto"><a id="user-content--overview" class="anchor" aria-hidden="true" href="#-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="globe_with_meridians" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png">üåê</g-emoji> Overview</h2>
<p dir="auto">A multilayer graph is a graph consisting of multiple standard subgraphs called <em>layers</em> which can be interconnected through <a href="https://en.wikipedia.org/wiki/Bipartite_graph" rel="nofollow">bipartite graphs</a> called <em>interlayers</em> composed of the vertex sets of two different layers and the edges between them. The vertices in each layer represent a single set of nodes, although not all nodes have to be represented in every layer.</p>
<p dir="auto">Formally, a multilayer graph can be defined as a triple <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$G=(V,E,L)$</math-renderer>, where:</p>
<ul dir="auto">
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$V$</math-renderer> is the set of vertices;</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$E$</math-renderer> is the set of edges, pairs of nodes <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$(u, v)$</math-renderer> representing a connection, relationship or interaction between the nodes <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$u$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$v$</math-renderer>;</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$L$</math-renderer> is a set of layers, which are subsets of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$V$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$E$</math-renderer> encoding the nodes and edges within each layer.</li>
</ul>
<p dir="auto">Each layer <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$\ell$</math-renderer> in <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$L$</math-renderer> is a tuple <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$(V_\ell, E_\ell)$</math-renderer>, where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$V_\ell$</math-renderer> is a subset of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$V$</math-renderer> that represents the vertices within that layer, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$E_\ell$</math-renderer> is a subset of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="9d56e4dbc1a17bc75ddccae04b7c269a">$E$</math-renderer> that represents the edges within that layer.</p>
<p dir="auto">Multiple theoretical frameworks have been proposed to formally subsume all instances of multilayer graphs (<a href="https://doi.org/10.1103/physrevx.3.041022" rel="nofollow">De Domenico  et al. (2013)</a>; <a href="https://doi.org/10.1093/comnet/cnu016" rel="nofollow">Kivel√§ et al. (2014)</a>; <a href="https://doi.org/10.1016/j.physrep.2014.07.001" rel="nofollow">Boccaletti et al. (2014)</a>; <a href="https://doi.org/10.1140/epjb/e2015-50742-1" rel="nofollow">Lee et al. (2015)</a>; <a href="https://doi.org/10.1146/annurev-conmatphys-031218-013259" rel="nofollow">Aleta and Moreno (2019)</a>; <a href="https://doi.org/10.1093/oso/9780198753919.001.0001" rel="nofollow">Bianconi (2018)</a>; <a href="https://doi.org/10.1007/978-3-319-92255-3" rel="nofollow">Cozzo et al. (2018)</a>; <a href="https://doi.org/10.1017/9781009085809" rel="nofollow">Artime et al. (2022)</a>; <a href="https://doi.org/10.1007/978-3-030-75718-2" rel="nofollow">De Domenico (2022)</a>).</p>
<p dir="auto">Multilayer graphs have been adopted to model the structure and dynamics of a wide spectrum of high-dimensional, non-linear, multi-scale, time-dependent complex systems including physical, chemical, biological, neuronal, socio-technical, epidemiological, ecological and economic networks (<a href="https://doi.org/10.1103/physreve.88.050801" rel="nofollow">Cozzo et al. (2013)</a>; <a href="https://doi.org/10.1103/physrevlett.111.128701" rel="nofollow">Granell et al. (2013)</a>; <a href="https://doi.org/10.1103/physreve.90.052817" rel="nofollow">Massaro and Bagnoli (2014)</a>; <a href="https://doi.org/10.1103/physreve.89.042819" rel="nofollow">Estrada and Gomez-Gardenes (2014)</a>; <a href="https://doi.org/10.1103/physreve.93.042303" rel="nofollow">Azimi-Tafreshi (2016)</a>; <a href="https://doi.org/10.1073/pnas.1604401113" rel="nofollow">Baggio et al. (2016)</a>; <a href="https://doi.org/10.1038/nphys3865" rel="nofollow">DeDomenico et al. (2016)</a>; <a href="https://doi.org/10.1038/s41598-017-06933-2" rel="nofollow">Amato et al. (2017)</a>; <a href="https://doi.org/10.1093/gigascience/gix004" rel="nofollow">DeDomenico (2017)</a>; <a href="https://doi.org/10.1038/s41559-017-0101" rel="nofollow">Pilosof et al. (2017)</a>; <a href="https://doi.org/10.1103/physrevx.7.011014" rel="nofollow">de Arruda et al. (2017)</a>; <a href="https://doi.org/10.1016/j.plrev.2017.11.003" rel="nofollow">Gosak et al. (2018)</a>; <a href="https://doi.org/10.1103/physrevx.8.031039" rel="nofollow">Soriano-Panos et al. (2018)</a>; <a href="https://doi.org/10.1038/s41467-017-02658-y" rel="nofollow">Timteo et al. (2018)</a>; <a href="https://doi.org/10.1162/netn_a_00033" rel="nofollow">Buld√∫ et al. (2018)</a>; <a href="https://doi.org/10.1038/s41598-019-39243-w" rel="nofollow">Lim et al. (2019)</a>; <a href="https://doi.org/10.1109/tnse.2018.2871726" rel="nofollow">Mangioni et al. (2020)</a>; <a href="https://doi.org/10.1038/s41562-020-0931-9" rel="nofollow">Aleta et al. (2020)</a>; <a href="https://doi.org/10.1073/pnas.2112182119" rel="nofollow">Aleta et al. (2022)</a>).</p>
<p dir="auto">MultilayerGraphs.jl is an integral part of the <a href="https://github.com/JuliaGraphs">JuliaGraphs</a> ecosystem extending <a href="https://github.com/JuliaGraphs/Graphs.jl">Graphs.jl</a> so all the methods and metrics exported by Graphs.jl work for multilayer graphs, but due to the special nature of multilayer graphs the package features a peculiar implementation that maps a standard integer-labelled vertex representation to a more user-friendly framework exporting all the objects an experienced practitioner would expect such as nodes (<code>Node</code>), vertices (<code>MultilayerVertex</code>), layers (<code>Layer</code>), interlayers (<code>Interlayer</code>), etc.</p>
<p dir="auto">MultilayerGraphs.jl features multilayer-specific methods and metrics including the global clustering coefficient, the overlay clustering coefficient, the multilayer eigenvector centrality, the multilayer modularity and the Von Neumann entropy.</p>
<p dir="auto">Finally, MultilayerGraphs.jl has been integrated within the <a href="https://github.com/JuliaDynamics">JuliaDynamics</a> ecosystem so that any <code>Multilayer(Di)Graph</code> can be utilised as an argument to the <code>GraphSpace</code> constructor in <a href="https://github.com/JuliaDynamics/Agents.jl">Agents.jl</a>.</p>
<h2 dir="auto">
<a id="user-content--installation" class="anchor" aria-hidden="true" href="#-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="beginner" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f530.png">üî∞</g-emoji> Installation</h2>
<p dir="auto">To install the latest stable release of MultilayerGraphs.jl, make sure you have <a href="https://julialang.org/downloads/" rel="nofollow">installed</a> Julia v1.8 or later and run the following command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;MultilayerGraphs&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MultilayerGraphs<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The development version can be installed as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/JuliaGraphs/MultilayerGraphs.jl&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaGraphs/MultilayerGraphs.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto">
<a id="user-content--usage" class="anchor" aria-hidden="true" href="#-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="mag" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png">üîç</g-emoji> Usage</h2>
<p dir="auto">Let's begin by importing the necessary dependencies and setting the relevant constants.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Import necessary dependencies
using Distributions, Graphs, SimpleValueGraphs
using MultilayerGraphs
# Set the number of nodes
const n_nodes = 100 
# Create a list of nodes
const node_list = [Node(&quot;node_$i&quot;) for i in 1:n_nodes]"><pre><span class="pl-c"><span class="pl-c">#</span> Import necessary dependencies</span>
<span class="pl-k">using</span> Distributions, Graphs, SimpleValueGraphs
<span class="pl-k">using</span> MultilayerGraphs
<span class="pl-c"><span class="pl-c">#</span> Set the number of nodes</span>
<span class="pl-k">const</span> n_nodes <span class="pl-k">=</span> <span class="pl-c1">100</span> 
<span class="pl-c"><span class="pl-c">#</span> Create a list of nodes</span>
<span class="pl-k">const</span> node_list <span class="pl-k">=</span> [<span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>node_<span class="pl-v">$i</span><span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_nodes]</pre></div>
<h3 dir="auto">
<a id="user-content-layers-and-interlayers" class="anchor" aria-hidden="true" href="#layers-and-interlayers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Layers and Interlayers</h3>
<p dir="auto">We will instantiate layers and interlayers with randomly-selected edges and vertices adopting a variety of techniques. Layers and Interlayers are not immutable, and mostly behave like normal graphs. The user is invited to consult the <a href="https://juliagraphs.org/MultilayerGraphs.jl/stable/API/" rel="nofollow">API</a> for further details.</p>
<p dir="auto">Here we define a layer with an underlying simple directed graph using a graph generator-like (or "configuration model"-like) constructor which allows us to specify both the <strong>indegree</strong> and the <strong>outdegree sequences</strong>. Before instantiating each layer we sample the number of its vertices and, optionally, of its edges.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a simple directed layer
n_vertices = rand(1:100)                          # Number of vertices 
layer_simple_directed = layer_simpledigraph(      # Layer constructor 
    :layer_simple_directed,                       # Layer name
    sample(node_list, n_vertices; replace=false), # Nodes represented in the layer
    Truncated(Normal(5, 5), 0, 20), # Indegree sequence distribution 
    Truncated(Normal(5, 5), 0, 20)  # Outdegree sequence distribution
)"><pre><span class="pl-c"><span class="pl-c">#</span> Create a simple directed layer</span>
n_vertices <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>)                          <span class="pl-c"><span class="pl-c">#</span> Number of vertices </span>
layer_simple_directed <span class="pl-k">=</span> <span class="pl-c1">layer_simpledigraph</span>(      <span class="pl-c"><span class="pl-c">#</span> Layer constructor </span>
    <span class="pl-c1">:layer_simple_directed</span>,                       <span class="pl-c"><span class="pl-c">#</span> Layer name</span>
    <span class="pl-c1">sample</span>(node_list, n_vertices; replace<span class="pl-k">=</span><span class="pl-c1">false</span>), <span class="pl-c"><span class="pl-c">#</span> Nodes represented in the layer</span>
    <span class="pl-c1">Truncated</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>), <span class="pl-c1">0</span>, <span class="pl-c1">20</span>), <span class="pl-c"><span class="pl-c">#</span> Indegree sequence distribution </span>
    <span class="pl-c1">Truncated</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>), <span class="pl-c1">0</span>, <span class="pl-c1">20</span>)  <span class="pl-c"><span class="pl-c">#</span> Outdegree sequence distribution</span>
)</pre></div>
<p dir="auto">Then we define a layer with an underlying simple weighted directed graph. This is another kind of constructor that allows the user to specify the number of edges to be randomly distributed among vertices.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a simple directed weighted layer
n_vertices = rand(1:n_nodes)                                   # Number of vertices 
n_edges = rand(n_vertices:(n_vertices * (n_vertices - 1) - 1)) # Number of edges 
layer_simple_directed_weighted = layer_simpleweighteddigraph(  # Layer constructor 
    :layer_simple_directed_weighted,                           # Layer name
    sample(node_list, n_vertices; replace=false), # Nodes represented in the layer
    n_edges;                                 # Number of randomly distributed edges
    default_edge_weight=(src, dst) -&gt; rand() # Function assigning weights to edges 
)"><pre><span class="pl-c"><span class="pl-c">#</span> Create a simple directed weighted layer</span>
n_vertices <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n_nodes)                                   <span class="pl-c"><span class="pl-c">#</span> Number of vertices </span>
n_edges <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_vertices<span class="pl-k">:</span>(n_vertices <span class="pl-k">*</span> (n_vertices <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> Number of edges </span>
layer_simple_directed_weighted <span class="pl-k">=</span> <span class="pl-c1">layer_simpleweighteddigraph</span>(  <span class="pl-c"><span class="pl-c">#</span> Layer constructor </span>
    <span class="pl-c1">:layer_simple_directed_weighted</span>,                           <span class="pl-c"><span class="pl-c">#</span> Layer name</span>
    <span class="pl-c1">sample</span>(node_list, n_vertices; replace<span class="pl-k">=</span><span class="pl-c1">false</span>), <span class="pl-c"><span class="pl-c">#</span> Nodes represented in the layer</span>
    n_edges;                                 <span class="pl-c"><span class="pl-c">#</span> Number of randomly distributed edges</span>
    default_edge_weight<span class="pl-k">=</span>(src, dst) <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>() <span class="pl-c"><span class="pl-c">#</span> Function assigning weights to edges </span>
)</pre></div>
<p dir="auto">Similar constructors, more flexible at the cost of ease of use, enable a finer tuning. The constructor we use below should be necessary only in rare circumstances, e.g. if the equivalent simplified constructor <code>layer_simplevaldigraph</code> is not able to infer the correct return types of <code>default_vertex_metadata</code> or <code>default_edge_metadata</code>, or to use and underlying graph structure that isn't currently supported.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a simple directed value layer
n_vertices = rand(1:n_nodes)                                   # Number of vertices 
n_edges = rand(n_vertices:(n_vertices * (n_vertices - 1) - 1)) # Number of edges 
default_vertex_metadata = v -&gt; (&quot;vertex_$(v)_metadata&quot;,)       # Vertex metadata 
default_edge_metadata = (s, d) -&gt; (rand(),)                    # Edge metadata 
layer_simple_directed_value = Layer(                           # Layer constructor
    :layer_simple_directed_value,                              # Layer name
    sample(node_list, n_vertices; replace=false), # Nodes represented in the layer
    n_edges,                                      # Number of randomly distributed edges
    ValDiGraph(                                                
        SimpleDiGraph{Int64}(); 
        vertexval_types=(String,),
        vertexval_init=default_vertex_metadata,
        edgeval_types=(Float64,),
        edgeval_init=default_edge_metadata,
    ),
    Float64;
    default_vertex_metadata=default_vertex_metadata, # Vertex metadata 
    default_edge_metadata=default_edge_metadata      # Edge metadata 
)

# Create a list of layers 
layers = [layer_simple_directed, layer_simple_directed_weighted, layer_simple_directed_value]"><pre><span class="pl-c"><span class="pl-c">#</span> Create a simple directed value layer</span>
n_vertices <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n_nodes)                                   <span class="pl-c"><span class="pl-c">#</span> Number of vertices </span>
n_edges <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_vertices<span class="pl-k">:</span>(n_vertices <span class="pl-k">*</span> (n_vertices <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> Number of edges </span>
default_vertex_metadata <span class="pl-k">=</span> v <span class="pl-k">-&gt;</span> (<span class="pl-s"><span class="pl-pds">"</span>vertex_<span class="pl-v">$(v)</span>_metadata<span class="pl-pds">"</span></span>,)       <span class="pl-c"><span class="pl-c">#</span> Vertex metadata </span>
default_edge_metadata <span class="pl-k">=</span> (s, d) <span class="pl-k">-&gt;</span> (<span class="pl-c1">rand</span>(),)                    <span class="pl-c"><span class="pl-c">#</span> Edge metadata </span>
layer_simple_directed_value <span class="pl-k">=</span> <span class="pl-c1">Layer</span>(                           <span class="pl-c"><span class="pl-c">#</span> Layer constructor</span>
    <span class="pl-c1">:layer_simple_directed_value</span>,                              <span class="pl-c"><span class="pl-c">#</span> Layer name</span>
    <span class="pl-c1">sample</span>(node_list, n_vertices; replace<span class="pl-k">=</span><span class="pl-c1">false</span>), <span class="pl-c"><span class="pl-c">#</span> Nodes represented in the layer</span>
    n_edges,                                      <span class="pl-c"><span class="pl-c">#</span> Number of randomly distributed edges</span>
    <span class="pl-c1">ValDiGraph</span>(                                                
        <span class="pl-c1">SimpleDiGraph</span><span class="pl-c1">{Int64}</span>(); 
        vertexval_types<span class="pl-k">=</span>(String,),
        vertexval_init<span class="pl-k">=</span>default_vertex_metadata,
        edgeval_types<span class="pl-k">=</span>(Float64,),
        edgeval_init<span class="pl-k">=</span>default_edge_metadata,
    ),
    Float64;
    default_vertex_metadata<span class="pl-k">=</span>default_vertex_metadata, <span class="pl-c"><span class="pl-c">#</span> Vertex metadata </span>
    default_edge_metadata<span class="pl-k">=</span>default_edge_metadata      <span class="pl-c"><span class="pl-c">#</span> Edge metadata </span>
)

<span class="pl-c"><span class="pl-c">#</span> Create a list of layers </span>
layers <span class="pl-k">=</span> [layer_simple_directed, layer_simple_directed_weighted, layer_simple_directed_value]</pre></div>
<p dir="auto">There are many more constructors the user is encouraged to explore in the package <a href="https://juliagraphs.org/MultilayerGraphs.jl" rel="nofollow">documentation</a>.</p>
<p dir="auto">The interface of interlayers is very similar to that of layers. It is very important to notice that, in order to define a <code>Multilayer(Di)Graph</code>, interlayers don't need to be explicitly constructed by the user since they are automatically identified by the <code>Multilayer(Di)Graph</code> constructor, but for more complex interlayers the manual instantiation is required.</p>
<p dir="auto">Here we define an interlayer with an underlying simple directed graph.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a simple directed interlayer
n_vertices_1 = nv(layer_simple_directed)               # Number of vertices of layer 1
n_vertices_2 = nv(layer_simple_directed_weighted)      # Number of vertices of layer 2
n_edges = rand(1:(n_vertices_1 * n_vertices_2 - 1))    # Number of interlayer edges 
interlayer_simple_directed = interlayer_simpledigraph( # Interlayer constructor 
    layer_simple_directed,                             # Layer 1 
    layer_simple_directed_weighted,                    # Layer 2 
    n_edges                                            # Number of edges 
)"><pre><span class="pl-c"><span class="pl-c">#</span> Create a simple directed interlayer</span>
n_vertices_1 <span class="pl-k">=</span> <span class="pl-c1">nv</span>(layer_simple_directed)               <span class="pl-c"><span class="pl-c">#</span> Number of vertices of layer 1</span>
n_vertices_2 <span class="pl-k">=</span> <span class="pl-c1">nv</span>(layer_simple_directed_weighted)      <span class="pl-c"><span class="pl-c">#</span> Number of vertices of layer 2</span>
n_edges <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>(n_vertices_1 <span class="pl-k">*</span> n_vertices_2 <span class="pl-k">-</span> <span class="pl-c1">1</span>))    <span class="pl-c"><span class="pl-c">#</span> Number of interlayer edges </span>
interlayer_simple_directed <span class="pl-k">=</span> <span class="pl-c1">interlayer_simpledigraph</span>( <span class="pl-c"><span class="pl-c">#</span> Interlayer constructor </span>
    layer_simple_directed,                             <span class="pl-c"><span class="pl-c">#</span> Layer 1 </span>
    layer_simple_directed_weighted,                    <span class="pl-c"><span class="pl-c">#</span> Layer 2 </span>
    n_edges                                            <span class="pl-c"><span class="pl-c">#</span> Number of edges </span>
)</pre></div>
<p dir="auto">The interlayer exports a more flexible constructor too.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a simple directed meta interlayer 
n_vertices_1 = nv(layer_simple_directed_weighted)   # Number of vertices of layer 1
n_vertices_2 = nv(layer_simple_directed_value)      # Number of vertices of layer 2
n_edges = rand(1:(n_vertices_1 * n_vertices_2 - 1)) # Number of interlayer edges 
interlayer_simple_directed_meta = interlayer_metadigraph( # Interlayer constructor
    layer_simple_directed_weighted,                       # Layer 1 
    layer_simple_directed_value,                          # Layer 2
    n_edges;                                              # Number of edges
    default_edge_metadata=(src, dst) -&gt;                   # Edge metadata 
        (edge_metadata=&quot;metadata_of_edge_from_$(src)_to_$(dst)&quot;,),
    transfer_vertex_metadata=true # Boolean deciding layer vertex metadata inheritance
)

# Create a list of interlayers 
interlayers = [interlayer_simple_directed, interlayer_simple_directed_meta]"><pre><span class="pl-c"><span class="pl-c">#</span> Create a simple directed meta interlayer </span>
n_vertices_1 <span class="pl-k">=</span> <span class="pl-c1">nv</span>(layer_simple_directed_weighted)   <span class="pl-c"><span class="pl-c">#</span> Number of vertices of layer 1</span>
n_vertices_2 <span class="pl-k">=</span> <span class="pl-c1">nv</span>(layer_simple_directed_value)      <span class="pl-c"><span class="pl-c">#</span> Number of vertices of layer 2</span>
n_edges <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>(n_vertices_1 <span class="pl-k">*</span> n_vertices_2 <span class="pl-k">-</span> <span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> Number of interlayer edges </span>
interlayer_simple_directed_meta <span class="pl-k">=</span> <span class="pl-c1">interlayer_metadigraph</span>( <span class="pl-c"><span class="pl-c">#</span> Interlayer constructor</span>
    layer_simple_directed_weighted,                       <span class="pl-c"><span class="pl-c">#</span> Layer 1 </span>
    layer_simple_directed_value,                          <span class="pl-c"><span class="pl-c">#</span> Layer 2</span>
    n_edges;                                              <span class="pl-c"><span class="pl-c">#</span> Number of edges</span>
    default_edge_metadata<span class="pl-k">=</span>(src, dst) <span class="pl-k">-&gt;</span>                   <span class="pl-c"><span class="pl-c">#</span> Edge metadata </span>
        (edge_metadata<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>metadata_of_edge_from_<span class="pl-v">$(src)</span>_to_<span class="pl-v">$(dst)</span><span class="pl-pds">"</span></span>,),
    transfer_vertex_metadata<span class="pl-k">=</span><span class="pl-c1">true</span> <span class="pl-c"><span class="pl-c">#</span> Boolean deciding layer vertex metadata inheritance</span>
)

<span class="pl-c"><span class="pl-c">#</span> Create a list of interlayers </span>
interlayers <span class="pl-k">=</span> [interlayer_simple_directed, interlayer_simple_directed_meta]</pre></div>
<h3 dir="auto">
<a id="user-content-multilayer-graphs" class="anchor" aria-hidden="true" href="#multilayer-graphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multilayer Graphs</h3>
<p dir="auto">Let's construct a directed multilayer graph (<code>MultilayerDiGraph</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a simple directed multilayer graph
multilayerdigraph = MultilayerDiGraph( # Constructor 
    layers,                     # The (ordered) collection of layers
    interlayers;                # The manually specified interlayers
                                # The interlayers that are left unspecified 
                                # will be automatically inserted according 
                                # to the keyword argument below
    default_interlayers_structure=&quot;multiplex&quot; 
    # The automatically specified interlayers will have only diagonal couplings
)

# Layers and interlayer can be accessed as properties using their names
multilayerdigraph.layer_simple_directed_value"><pre><span class="pl-c"><span class="pl-c">#</span> Create a simple directed multilayer graph</span>
multilayerdigraph <span class="pl-k">=</span> <span class="pl-c1">MultilayerDiGraph</span>( <span class="pl-c"><span class="pl-c">#</span> Constructor </span>
    layers,                     <span class="pl-c"><span class="pl-c">#</span> The (ordered) collection of layers</span>
    interlayers;                <span class="pl-c"><span class="pl-c">#</span> The manually specified interlayers</span>
                                <span class="pl-c"><span class="pl-c">#</span> The interlayers that are left unspecified </span>
                                <span class="pl-c"><span class="pl-c">#</span> will be automatically inserted according </span>
                                <span class="pl-c"><span class="pl-c">#</span> to the keyword argument below</span>
    default_interlayers_structure<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>multiplex<span class="pl-pds">"</span></span> 
    <span class="pl-c"><span class="pl-c">#</span> The automatically specified interlayers will have only diagonal couplings</span>
)

<span class="pl-c"><span class="pl-c">#</span> Layers and interlayer can be accessed as properties using their names</span>
multilayerdigraph<span class="pl-k">.</span>layer_simple_directed_value</pre></div>
<p dir="auto">Then we proceed by showing how to add nodes, vertices and edges to a directed multilayer graph. The user may add vertices that do or do not represent nodes which are already present in the multilayer graph. In the latter case, we have to create a node first and then add the vertex representing such node to the multilayer graph. The vertex-level metadata are effectively considered only if the graph underlying the relevant layer or interlayer supports them, otherwise they are discarded. The same holds for edge-level metadata and/or weight.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a node 
new_node_1 = Node(&quot;new_node_1&quot;)
# Add the node to the multilayer graph 
add_node!(multilayerdigraph, new_node_1)
# Create a vertex representing the node 
new_vertex_1 = MV(                # Constructor (alias for &quot;MultilayerVertex&quot;)
    new_node_1,                   # Node represented by the vertex
    :layer_simple_directed_value, # Layer containing the vertex 
    (&quot;new_metadata&quot;,)             # Vertex metadata 
)
# Add the vertex 
add_vertex!(
    multilayerdigraph, # MultilayerDiGraph the vertex will be added to
    new_vertex_1       # MultilayerVertex to add
)

# Create another node in another layer 
new_node_2 = Node(&quot;new_node_2&quot;)
# Create another vertex representing the new node
new_vertex_2 = MV(new_node_2, :layer_simple_directed_value)
# Add the new vertex
add_vertex!(
    multilayerdigraph,
    new_vertex_2;
    add_node=true # Add the associated node before adding the vertex
)
# Create an edge 
new_edge = MultilayerEdge(  # Constructor 
    new_vertex_1,           # Source vertex
    new_vertex_2,           # Destination vertex 
    (&quot;some_edge_metadata&quot;,) # Edge metadata 
)
# Add the edge 
add_edge!(
    multilayerdigraph, # MultilayerDiGraph the edge will be added to
    new_edge           # MultilayerVertex to add
)"><pre><span class="pl-c"><span class="pl-c">#</span> Create a node </span>
new_node_1 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>new_node_1<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Add the node to the multilayer graph </span>
<span class="pl-c1">add_node!</span>(multilayerdigraph, new_node_1)
<span class="pl-c"><span class="pl-c">#</span> Create a vertex representing the node </span>
new_vertex_1 <span class="pl-k">=</span> <span class="pl-c1">MV</span>(                <span class="pl-c"><span class="pl-c">#</span> Constructor (alias for "MultilayerVertex")</span>
    new_node_1,                   <span class="pl-c"><span class="pl-c">#</span> Node represented by the vertex</span>
    <span class="pl-c1">:layer_simple_directed_value</span>, <span class="pl-c"><span class="pl-c">#</span> Layer containing the vertex </span>
    (<span class="pl-s"><span class="pl-pds">"</span>new_metadata<span class="pl-pds">"</span></span>,)             <span class="pl-c"><span class="pl-c">#</span> Vertex metadata </span>
)
<span class="pl-c"><span class="pl-c">#</span> Add the vertex </span>
<span class="pl-c1">add_vertex!</span>(
    multilayerdigraph, <span class="pl-c"><span class="pl-c">#</span> MultilayerDiGraph the vertex will be added to</span>
    new_vertex_1       <span class="pl-c"><span class="pl-c">#</span> MultilayerVertex to add</span>
)

<span class="pl-c"><span class="pl-c">#</span> Create another node in another layer </span>
new_node_2 <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>new_node_2<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Create another vertex representing the new node</span>
new_vertex_2 <span class="pl-k">=</span> <span class="pl-c1">MV</span>(new_node_2, <span class="pl-c1">:layer_simple_directed_value</span>)
<span class="pl-c"><span class="pl-c">#</span> Add the new vertex</span>
<span class="pl-c1">add_vertex!</span>(
    multilayerdigraph,
    new_vertex_2;
    add_node<span class="pl-k">=</span><span class="pl-c1">true</span> <span class="pl-c"><span class="pl-c">#</span> Add the associated node before adding the vertex</span>
)
<span class="pl-c"><span class="pl-c">#</span> Create an edge </span>
new_edge <span class="pl-k">=</span> <span class="pl-c1">MultilayerEdge</span>(  <span class="pl-c"><span class="pl-c">#</span> Constructor </span>
    new_vertex_1,           <span class="pl-c"><span class="pl-c">#</span> Source vertex</span>
    new_vertex_2,           <span class="pl-c"><span class="pl-c">#</span> Destination vertex </span>
    (<span class="pl-s"><span class="pl-pds">"</span>some_edge_metadata<span class="pl-pds">"</span></span>,) <span class="pl-c"><span class="pl-c">#</span> Edge metadata </span>
)
<span class="pl-c"><span class="pl-c">#</span> Add the edge </span>
<span class="pl-c1">add_edge!</span>(
    multilayerdigraph, <span class="pl-c"><span class="pl-c">#</span> MultilayerDiGraph the edge will be added to</span>
    new_edge           <span class="pl-c"><span class="pl-c">#</span> MultilayerVertex to add</span>
)</pre></div>
<p dir="auto">Finally we illustrate how to compute a few multilayer metrics such as the global clustering coefficient, the overlay clustering coefficient, the multilayer eigenvector centrality, and the multilayer modularity as defined in <a href="https://doi.org/10.1103/physrevx.3.041022" rel="nofollow">De Domenico  et al. (2013)</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Compute the global clustering coefficient
multilayer_global_clustering_coefficient(multilayerdigraph) 
# Compute the overlay clustering coefficient
overlay_clustering_coefficient(multilayerdigraph)
# Compute the multilayer eigenvector centrality 
eigenvector_centrality(multilayerdigraph)
# Compute the multilayer modularity 
modularity(
    multilayerdigraph,
    rand([1, 2, 3, 4], length(nodes(multilayerdigraph)), length(multilayerdigraph.layers))
)"><pre><span class="pl-c"><span class="pl-c">#</span> Compute the global clustering coefficient</span>
<span class="pl-c1">multilayer_global_clustering_coefficient</span>(multilayerdigraph) 
<span class="pl-c"><span class="pl-c">#</span> Compute the overlay clustering coefficient</span>
<span class="pl-c1">overlay_clustering_coefficient</span>(multilayerdigraph)
<span class="pl-c"><span class="pl-c">#</span> Compute the multilayer eigenvector centrality </span>
<span class="pl-c1">eigenvector_centrality</span>(multilayerdigraph)
<span class="pl-c"><span class="pl-c">#</span> Compute the multilayer modularity </span>
<span class="pl-c1">modularity</span>(
    multilayerdigraph,
    <span class="pl-c1">rand</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], <span class="pl-c1">length</span>(<span class="pl-c1">nodes</span>(multilayerdigraph)), <span class="pl-c1">length</span>(multilayerdigraph<span class="pl-k">.</span>layers))
)</pre></div>
<h2 dir="auto">
<a id="user-content--future-developments" class="anchor" aria-hidden="true" href="#-future-developments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="dart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png">üéØ</g-emoji> Future Developments</h2>
<p dir="auto">All the information regarding the future developments of MultilayerGraphs.jl can be found in the <a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/issues">issues</a>.</p>
<h2 dir="auto">
<a id="user-content--how-to-contribute" class="anchor" aria-hidden="true" href="#-how-to-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="hammer_and_wrench" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6e0.png">üõ†</g-emoji> How to Contribute</h2>
<p dir="auto">The ongoing development of this package would greatly benefit from the valuable feedback of the esteemed members of the <a href="https://github.com/orgs/JuliaGraphs/people">JuliaGraph</a> community, as well as from graph theorists, network scientists, and any users who may have general questions or suggestions.</p>
<p dir="auto">We therefore encourage you to participate in <a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/discussions">discussions</a>, raise <a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/issues">issues</a>, or submit <a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/pulls">pull requests</a>. Your contributions are welcome!</p>
<h2 dir="auto">
<a id="user-content--how-to-cite" class="anchor" aria-hidden="true" href="#-how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="mortar_board" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png">üéì</g-emoji> How to Cite</h2>
<p dir="auto">If you utilize this package in your project, please consider citing this repository using the citation information provided in <a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/blob/main/CITATION.bib"><code>CITATION.bib</code></a>.</p>
<p dir="auto">This will help to give appropriate credit to the <a href="https://github.com/JuliaGraphs/MultilayerGraphs.jl/graphs/contributors">contributors</a> and support the continued development of the package.</p>
<h2 dir="auto">
<a id="user-content--announcements" class="anchor" aria-hidden="true" href="#-announcements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="loudspeaker" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png">üì¢</g-emoji> Announcements</h2>
<h3 dir="auto">
<a id="user-content-v01" class="anchor" aria-hidden="true" href="#v01"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>v0.1</h3>
<p dir="auto">MultilayerGraphs.jl (v0.1) and its features were announced on the following platforms:</p>
<ul dir="auto">
<li>
<a href="https://discourse.julialang.org/t/ann-multilayergraphs-jl-a-package-to-construct-handle-and-analyse-multilayer-graphs/85988" rel="nofollow">Discourse</a>;</li>
<li>
<a href="https://forem.julialang.org/inphyt/ann-multilayergraphsjl-a-package-to-construct-handle-and-analyse-multilayer-graphs-3k22" rel="nofollow">Forem</a>;</li>
<li>
<a href="https://twitter.com/In_Phy_T/status/1560594513189638146" rel="nofollow">Twitter</a>.</li>
</ul>
<h3 dir="auto">
<a id="user-content-v11" class="anchor" aria-hidden="true" href="#v11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>v1.1</h3>
<p dir="auto">MultilayerGraphs.jl (v1.1) and its features were announced on the following platforms:</p>
<ul dir="auto">
<li>
<a href="https://discourse.julialang.org/t/ann-multilayergraphs-jl-v1-1-multilayer-network-science-in-julia/92680" rel="nofollow">Discourse</a>;</li>
<li>
<a href="https://forem.julialang.org/inphyt/ann-multilayergraphsjl-v11-multilayer-network-science-in-julia-2oa3" rel="nofollow">Forem</a>;</li>
<li>
<a href="https://twitter.com/In_Phy_T/status/1612460371939581955" rel="nofollow">Twitter</a>.</li>
</ul>
<h2 dir="auto">
<a id="user-content--related-packages" class="anchor" aria-hidden="true" href="#-related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="package" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png">üì¶</g-emoji> Related Packages</h2>
<h3 dir="auto">
<a id="user-content-r" class="anchor" aria-hidden="true" href="#r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>R</h3>
<p dir="auto">Here is a list of software packages for the creation, manipulation, analysis and visualisation of multilayer graphs implemented in the <a href="https://www.r-project.org" rel="nofollow">R language</a>:</p>
<ul dir="auto">
<li>
<a href="https://github.com/manlius/muxViz"><code>muxViz</code></a> implements functions to perform multilayer correlation analysis, multilayer centrality analysis, multilayer community structure detection, multilayer structural reducibility, multilayer motifs analysis and utilities to statically and dynamically visualise multilayer graphs;</li>
<li>
<a href="https://github.com/cran/multinet"><code>multinet</code></a> implements functions to import, export, create and manipulate multilayer graphs, several state-of-the-art multiplex graph analysis algorithms for centrality measures, layer comparison, community detection and visualization;</li>
<li>
<a href="https://github.com/frankkramer-lab/mully"><code>mully</code></a> implements functions to import, export, create, manipulate and merge multilayer graphs and utilities to visualise multilayer graphs in 2D and 3D;</li>
<li>
<a href="https://github.com/neylsoncrepalde/multinets"><code>multinets</code></a> implements functions to import, export, create, manipulate multilayer graphs and utilities to visualise multilayer graphs.</li>
</ul>
<h3 dir="auto">
<a id="user-content-python" class="anchor" aria-hidden="true" href="#python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Python</h3>
<p dir="auto">Here is a list of software packages for the creation, manipulation, analysis and visualisation of multilayer graphs implemented in the <a href="https://www.python.org" rel="nofollow">Python language</a>:</p>
<ul dir="auto">
<li>
<a href="https://github.com/nkoub/multinetx"><code>MultiNetX</code></a> implements methods to create undirected networks with weighted or unweighted links, to analyse the spectral properties of adjacency or Laplacian matrices and to visualise multilayer graphs and dynamical processes by coloring the nodes and links accordingly;</li>
<li>
<a href="https://github.com/bolozna/Multilayer-networks-library"><code>PyMNet</code></a> implements data structures for multilayer graphs and multiplex graphs, methods to import, export, create, manipulate multilayer graphs and for the rule-based generation and lazy-evaluation of coupling edges and utilities to visualise multilayer graphs.</li>
</ul>
<h3 dir="auto">
<a id="user-content-julia" class="anchor" aria-hidden="true" href="#julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia</h3>
<p dir="auto">At the best of our knowledge there are currently no software packages dedicated to the creation, manipulation and analysis of multilayer graphs implemented in the <a href="https://julialang.org" rel="nofollow">Julia language</a> apart from MultilayerGraphs.jl itself.</p>
<h2 dir="auto">
<a id="user-content--references" class="anchor" aria-hidden="true" href="#-references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png">üìö</g-emoji> References</h2>
<ol dir="auto">
<li>De Domenico et al. (2013) <a href="https://doi.org/10.1103/PhysRevX.3.041022" rel="nofollow">Mathematical Formulation of Multilayer Networks</a>. <em>Physical Review X</em>;</li>
<li>Kivel√§ et al. (2014) <a href="https://doi.org/10.1093/comnet/cnu016" rel="nofollow">Multilayer networks</a>. <em>Journal of Complex Networks</em>;</li>
<li>Boccaletti et al. (2014) <a href="https://doi.org/10.1016/j.physrep.2014.07.001" rel="nofollow">The structure and dynamics of multilayer networks</a>. <em>Physics Reports</em>;</li>
<li>Lee et al. (2015) <a href="https://doi.org/10.1140/epjb/e2015-50742-1" rel="nofollow">Towards real-world complexity: an introduction to multiplex networks</a>. <em>The European Physical Journal B</em>;</li>
<li>Bianconi (2018) <a href="https://global.oup.com/academic/product/multilayer-networks-9780192865540" rel="nofollow">Multilayer Networks: Structure and Function</a>. <em>Oxford University Press</em>;</li>
<li>Cozzo et al. (2018) <a href="https://doi.org/10.1007/978-3-319-92255-3" rel="nofollow">Multiplex Networks: Basic Formalism and Structural Properties</a>. <em>SpringerBriefs in Complexity</em>;</li>
<li>Aleta and Moreno (2019) <a href="https://doi.org/10.1146/annurev-conmatphys-031218-013259" rel="nofollow">Multilayer Networks in a Nutshell</a>. <em>Annual Review of Condensed Matter Physics</em>;</li>
<li>Artime et al. (2022) <a href="https://doi.org/10.1017/9781009085809" rel="nofollow">Multilayer Network Science: From Cells to Societies</a>. <em>Cambridge University Press</em>;</li>
<li>De Domenico (2022) <a href="https://doi.org/10.1007/978-3-030-75718-2" rel="nofollow">Multilayer Networks: Analysis and Visualization</a>. <em>Springer Cham</em>.</li>
</ol>
</article></div>