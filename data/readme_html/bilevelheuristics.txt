<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bilevelheuristicsjl" class="anchor" aria-hidden="true" href="#bilevelheuristicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BilevelHeuristics.jl</h1>
<p dir="auto">This package implements different heuristic and metaheuristic algorithms for
Bilevel Optimization (BO).</p>
<p dir="auto"><a href="https://app.travis-ci.com/jmejia8/BilevelHeuristics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5e8359b836193259442806f8f55bf5d1e45cf5e5dfbe3234d58158a7749defa1/68747470733a2f2f6170702e7472617669732d63692e636f6d2f6a6d656a6961382f42696c6576656c486575726973746963732e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://app.travis-ci.com/jmejia8/BilevelHeuristics.jl.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>BilevelHeuristics.jl is still in early development so please send feedback or open issues.</strong></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Open the Julia REPL (Julia 1.6 or later) and press <code>]</code> to open the Pkg prompt. To add this
package, use the <code>add</code> command:</p>
<p dir="auto">Type <code>]</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add BilevelHeuristics"><pre lang="julia-repl" class="notranslate"><code>pkg&gt; add BilevelHeuristics
</code></pre></div>
<p dir="auto">Or, equivalently, via the <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;BilevelHeuristics&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BilevelHeuristics<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-algorithms" class="anchor" aria-hidden="true" href="#algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithms</h2>
<p dir="auto">Current implemented Bilevel Metaheuristics include:</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <a href="https://doi.org/10.1109/ROPEC.2018.8661368" rel="nofollow">BCA</a>: Bilevel Centers Algorithm</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <a href="https://doi.org/10.1109/CEC.2019.8790097" rel="nofollow">QBCA</a>: BCA with a lower-level Quasi-Newton optimization method.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <a href="https://doi.org/10.1016/j.amc.2021.126577" rel="nofollow">QBCA2</a>: Improved QBCA (implements conditions to avoid pseudo-feasible solutions)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> <a href="https://doi.org/10.1145/3377930.3390236" rel="nofollow">SABO</a>: Surrogate-assisted Bilevel Optimization.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked="">  SMS-MOBO: S-metic-selection-based Multi-objective Bilevel Optimization.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked="">  BLEMO: Bilevel Evolutionary Multi-objective Optimization</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">The following example illustrates the usage of <code>BilevelHeuristics.jl</code>. Here, <code>BCA</code> is used,
but this example works for the other optimizers.</p>
<p dir="auto">Defining objective functions corresponding to the BO problem.</p>
<p dir="auto"><strong>Upper level (leader problem):</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BilevelHeuristics

F(x, y) = sum(x.^2) + sum(y.^2)
bounds_ul = [-ones(5) ones(5)] "><pre><span class="pl-k">using</span> BilevelHeuristics

<span class="pl-en">F</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> <span class="pl-c1">sum</span>(y<span class="pl-k">.^</span><span class="pl-c1">2</span>)
bounds_ul <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">ones</span>(<span class="pl-c1">5</span>) <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>)] </pre></div>
<p dir="auto"><strong>Lower level (follower problem):</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x, y) = sum((x - y).^2) + y[1]^2
bounds_ll = [-ones(5) ones(5)];"><pre><span class="pl-en">f</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">sum</span>((x <span class="pl-k">-</span> y)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> y[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>
bounds_ll <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">ones</span>(<span class="pl-c1">5</span>) <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>)];</pre></div>
<p dir="auto"><strong>Approximate solution:</strong></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="res = optimize(F, f, bounds_ul, bounds_ll, BCA())"><pre>res <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(F, f, bounds_ul, bounds_ll, <span class="pl-c1">BCA</span>())</pre></div>
<p dir="auto"><strong>Output:</strong></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="+=========== RESULT ==========+
  iteration: 108
    minimum: 
          F: 4.03387e-10
          f: 2.94824e-10
  minimizer: 
          x: [-1.1460768817533927e-5, 7.231706879604178e-6, 3.818596951258517e-6, 2.294324313691869e-6, 1.8770952450067828e-6]
          y: [1.998748659975197e-6, 9.479307908087866e-6, 6.180041276047425e-6, -7.642051857319683e-6, 2.434166021682429e-6]
    F calls: 2503
    f calls: 5062617
    Message: Stopped due UL function evaluations limitations. 
 total time: 26.8142 s
+============================+"><pre class="notranslate"><code>+=========== RESULT ==========+
  iteration: 108
    minimum: 
          F: 4.03387e-10
          f: 2.94824e-10
  minimizer: 
          x: [-1.1460768817533927e-5, 7.231706879604178e-6, 3.818596951258517e-6, 2.294324313691869e-6, 1.8770952450067828e-6]
          y: [1.998748659975197e-6, 9.479307908087866e-6, 6.180041276047425e-6, -7.642051857319683e-6, 2.434166021682429e-6]
    F calls: 2503
    f calls: 5062617
    Message: Stopped due UL function evaluations limitations. 
 total time: 26.8142 s
+============================+
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x, y = minimizer(res) # upper (x) and lower (y) level decision vectors
Fmin, fmin = minimum(res) # upper and lower objective values."><pre>x, y <span class="pl-k">=</span> <span class="pl-c1">minimizer</span>(res) <span class="pl-c"><span class="pl-c">#</span> upper (x) and lower (y) level decision vectors</span>
Fmin, fmin <span class="pl-k">=</span> <span class="pl-c1">minimum</span>(res) <span class="pl-c"><span class="pl-c">#</span> upper and lower objective values.</span></pre></div>
</article></div>