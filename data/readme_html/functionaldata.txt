<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-functionaldata" class="anchor" aria-hidden="true" href="#functionaldata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionalData</h2>
<p dir="auto"><a href="https://travis-ci.org/rened/FunctionalData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d4ff2e036bf18a6e0a74c0448633172c1394bf661d6a714276c38925bc30229d/68747470733a2f2f7472617669732d63692e6f72672f72656e65642f46756e6374696f6e616c446174612e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/rened/FunctionalData.jl.png" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FunctionalData&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/13d55d2eb2b6d5d622790d98a512cfde2235e84582eaf7d09b8eae9e50b6554a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46756e6374696f6e616c446174615f302e342e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/FunctionalData_0.4.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FunctionalData&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/9cba38bfa9bee9decf5c10694f5f7a56e31c5c97c35109f3acdfdafafdb11e46/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46756e6374696f6e616c446174615f302e352e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/FunctionalData_0.5.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FunctionalData&amp;ver=0.6" rel="nofollow"><img src="https://camo.githubusercontent.com/bd6f1c27ac769ddf6cec56f145c153baa58c3b8d5036938a166dc3acf8c3fbbc/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46756e6374696f6e616c446174615f302e362e737667" alt="Build Status" data-canonical-src="http://pkg.julialang.org/badges/FunctionalData_0.6.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>FunctionalData</code> is a package for fast and expressive data modification.</p>
<p dir="auto">Built around a simple memory layout convention, it provides a small set of general purpose <a href="doc/dataflow.md">functional constructs</a> as well as routines for <a href="doc/computing.md">efficient computation</a> with dense numerical arrays.</p>
<p dir="auto">Optionally, it supplies a <a href="doc/pipeline.md">syntax</a> for clean, concise code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="wordcount(filename) = @p read filename String | lines | map split | flatten | length"><pre><span class="pl-en">wordcount</span>(filename) <span class="pl-k">=</span> <span class="pl-c1">@p</span> read filename String <span class="pl-k">|</span> lines <span class="pl-k">|</span> map split <span class="pl-k">|</span> flatten <span class="pl-k">|</span> length</pre></div>
<h4 dir="auto"><a id="user-content-memory-layout" class="anchor" aria-hidden="true" href="#memory-layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Memory Layout</h4>
<p dir="auto">Indexing is simplified for dense n-dimensional arrays, which are viewed as collections of (n-1)-dimensional items.</p>
<p dir="auto">For example, this allows to use the exact same code for 2D patches and 3D blocks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = [1 2 3; 4 5 6]
b = ones(2, 2, 10)          #  10 2D patches
c = ones(2, 2, 2, 10)       #  10 3D blocks

len(a)       =&gt;   3
len(b)       =&gt;  10
len(c)       =&gt;  10

at(a,2)      =&gt;  [2 5]'
part(a,2:3)  =&gt;  [2 3; 5 6]

normsum(x) = x/sum(x)

map(b, normsum)   =&gt;  [0.25 ...  ] of size 2 x 2 x 10
map(c, normsum)   =&gt;  [0.125 ... ] of size 2 x 2 x 2 x 10

#  Result shape may change:
map(b, sum)       =&gt;  [4 ... ]     of size 1 x 10
map(c, sum)       =&gt;  [8 ... ]     of size 1 x 10"><pre>a <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>]
b <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>)          <span class="pl-c"><span class="pl-c">#</span>  10 2D patches</span>
c <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>)       <span class="pl-c"><span class="pl-c">#</span>  10 3D blocks</span>

<span class="pl-c1">len</span>(a)       <span class="pl-k">=&gt;</span>   <span class="pl-c1">3</span>
<span class="pl-c1">len</span>(b)       <span class="pl-k">=&gt;</span>  <span class="pl-c1">10</span>
<span class="pl-c1">len</span>(c)       <span class="pl-k">=&gt;</span>  <span class="pl-c1">10</span>

<span class="pl-c1">at</span>(a,<span class="pl-c1">2</span>)      <span class="pl-k">=&gt;</span>  [<span class="pl-c1">2</span> <span class="pl-c1">5</span>]<span class="pl-k">'</span>
<span class="pl-c1">part</span>(a,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>)  <span class="pl-k">=&gt;</span>  [<span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">5</span> <span class="pl-c1">6</span>]

<span class="pl-en">normsum</span>(x) <span class="pl-k">=</span> x<span class="pl-k">/</span><span class="pl-c1">sum</span>(x)

<span class="pl-c1">map</span>(b, normsum)   <span class="pl-k">=&gt;</span>  [<span class="pl-c1">0.25</span> <span class="pl-k">...</span>  ] of size <span class="pl-c1">2</span> x <span class="pl-c1">2</span> x <span class="pl-c1">10</span>
<span class="pl-c1">map</span>(c, normsum)   <span class="pl-k">=&gt;</span>  [<span class="pl-c1">0.125</span> <span class="pl-k">...</span> ] of size <span class="pl-c1">2</span> x <span class="pl-c1">2</span> x <span class="pl-c1">2</span> x <span class="pl-c1">10</span>

<span class="pl-c"><span class="pl-c">#</span>  Result shape may change:</span>
<span class="pl-c1">map</span>(b, sum)       <span class="pl-k">=&gt;</span>  [<span class="pl-c1">4</span> <span class="pl-k">...</span> ]     of size <span class="pl-c1">1</span> x <span class="pl-c1">10</span>
<span class="pl-c1">map</span>(c, sum)       <span class="pl-k">=&gt;</span>  [<span class="pl-c1">8</span> <span class="pl-k">...</span> ]     of size <span class="pl-c1">1</span> x <span class="pl-c1">10</span></pre></div>
<h4 dir="auto"><a id="user-content-efficiency" class="anchor" aria-hidden="true" href="#efficiency"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Efficiency</h4>
<p dir="auto">Using a custom <code>View</code> type based on this memory layout assumption, the provided <code>map</code> operations can be considerably faster than built-ins. Given our data and desired operation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = rand(10, 1000000)   #  =&gt;  80 MB

csum!(x) = for i = 2:length(x) x[i] += x[i-1] end
csumoncopy(x) = (for i = 2:length(x) x[i] += x[i-1] end; x)"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">1000000</span>)   <span class="pl-c"><span class="pl-c">#</span>  =&gt;  80 MB</span>

<span class="pl-en">csum!</span>(x) <span class="pl-k">=</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x) x[i] <span class="pl-k">+=</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">end</span>
<span class="pl-en">csumoncopy</span>(x) <span class="pl-k">=</span> (<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x) x[i] <span class="pl-k">+=</span> x[i<span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">end</span>; x)</pre></div>
<p dir="auto">we can use the following simple, general and efficient statement:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="map!(a, csum!) 
#  elapsed time: 0.027491752 seconds (256 bytes allocated)"><pre><span class="pl-c1">map!</span>(a, csum!) 
<span class="pl-c"><span class="pl-c">#</span>  elapsed time: 0.027491752 seconds (256 bytes allocated)</span></pre></div>
<p dir="auto">Built-in alternatives are either slower or require manual inlining, for a specific data layout:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mapslices(csumoncopy, a, [1])
#  elapsed time: 0.85726391 seconds (404 MB allocated, 5.34% gc time)

f(a) = for i = 1:size(a,2)  a[:,i] = csumoncopy(a[:,i])  end
#  elapsed time: 0.110978216 seconds (144 MB allocated, 3.86% gc time)

f2(a) = for i = 1:size(a,2)  csum!(sub(a,:,i))  end
#  elapsed time: 0.071394038 seconds (160 MB allocated, 16.46% gc time)

function f3(a)
    for n = 1:size(a,2)
        for m = 2:size(a,1)  a[m,n] += a[m-1,n]  end
    end
end
#  elapsed time: 0.017072235 seconds (80 bytes allocated)

function f4(a)
    for n = 1:size(a,1):length(a)
        for m = 1:size(a,1)-1  a[n+m] += a[n+m-1]  end
    end
end
#  elapsed time: 0.013347679 seconds (80 bytes allocated)"><pre><span class="pl-c1">mapslices</span>(csumoncopy, a, [<span class="pl-c1">1</span>])
<span class="pl-c"><span class="pl-c">#</span>  elapsed time: 0.85726391 seconds (404 MB allocated, 5.34% gc time)</span>

<span class="pl-en">f</span>(a) <span class="pl-k">=</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(a,<span class="pl-c1">2</span>)  a[:,i] <span class="pl-k">=</span> <span class="pl-c1">csumoncopy</span>(a[:,i])  <span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span>  elapsed time: 0.110978216 seconds (144 MB allocated, 3.86% gc time)</span>

<span class="pl-en">f2</span>(a) <span class="pl-k">=</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(a,<span class="pl-c1">2</span>)  <span class="pl-c1">csum!</span>(<span class="pl-c1">sub</span>(a,:,i))  <span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span>  elapsed time: 0.071394038 seconds (160 MB allocated, 16.46% gc time)</span>

<span class="pl-k">function</span> <span class="pl-en">f3</span>(a)
    <span class="pl-k">for</span> n <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(a,<span class="pl-c1">2</span>)
        <span class="pl-k">for</span> m <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">size</span>(a,<span class="pl-c1">1</span>)  a[m,n] <span class="pl-k">+=</span> a[m<span class="pl-k">-</span><span class="pl-c1">1</span>,n]  <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span>  elapsed time: 0.017072235 seconds (80 bytes allocated)</span>

<span class="pl-k">function</span> <span class="pl-en">f4</span>(a)
    <span class="pl-k">for</span> n <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">length</span>(a)
        <span class="pl-k">for</span> m <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(a,<span class="pl-c1">1</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>  a[n<span class="pl-k">+</span>m] <span class="pl-k">+=</span> a[n<span class="pl-k">+</span>m<span class="pl-k">-</span><span class="pl-c1">1</span>]  <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span>  elapsed time: 0.013347679 seconds (80 bytes allocated)</span></pre></div>
<p dir="auto">With the exact same syntax we can easily parallelize our code using the local workers via shared memory or Julia's inter-process serialization, both on the local host or all machines:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="shmap!(a, csum!)      # local processes, shared memory
lmap!(a, csum!)       # local processes
pmap!(a, csum!)       # all available processes"><pre><span class="pl-c1">shmap!</span>(a, csum!)      <span class="pl-c"><span class="pl-c">#</span> local processes, shared memory</span>
<span class="pl-c1">lmap!</span>(a, csum!)       <span class="pl-c"><span class="pl-c">#</span> local processes</span>
<span class="pl-c1">pmap!</span>(a, csum!)       <span class="pl-c"><span class="pl-c">#</span> all available processes</span></pre></div>
<p dir="auto">For each of these variants there are optimized functions available for in-place operation on the input array, in-place operation on a new output array, or fallback options for functions which do not work in-place. For details, see the section on <a href="doc/computing.md">map and Friends</a>.</p>
<h2 dir="auto"><a id="user-content-news" class="anchor" aria-hidden="true" href="#news"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>News</h2>
<h4 dir="auto"><a id="user-content-009" class="anchor" aria-hidden="true" href="#009"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>0.0.9</h4>
<ul dir="auto">
<li>version requirement for 0.4 build</li>
<li><code>map</code> and <code>mapmap</code> for <code>Dict</code></li>
<li>fix <code>typed</code></li>
</ul>
<h4 dir="auto"><a id="user-content-007--008" class="anchor" aria-hidden="true" href="#007--008"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>0.0.7 / 0.0.8</h4>
<ul dir="auto">
<li>fixed <code>repeat</code> for numeric arrays</li>
<li>made <code>test_equal</code> more robust</li>
<li>reworked <code>map</code> and <code>view</code> for <code>Array{T,1}</code> / scalar return values</li>
<li>fix <code>partsoflen</code>, <code>concat</code></li>
<li>add <code>takelast(a)</code>, <code>unequal</code>, <code>sortpermrev</code>, <code>filter</code></li>
<li>fix <code>map</code> for <code>Dict</code></li>
</ul>
<h4 dir="auto"><a id="user-content-006" class="anchor" aria-hidden="true" href="#006"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>0.0.6</h4>
<ul dir="auto">
<li>added <code>localworkers</code> and <code>hostpids</code></li>
<li>added <code>hmap</code> and variants, which map tasks to the first pid of each machine</li>
<li>removed <code>makeliteral</code>, as the built-in <code>repr</code> does the same</li>
<li>sped up <code>matrix</code></li>
<li>added map2, map3, map4, map5</li>
<li>fixed unzip</li>
<li>added flip, flipdims</li>
<li>added extract, removed @getfield</li>
</ul>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Please see the <a href="doc/overview.md">overview</a> below for one-line descriptions of each function. More details and examples can then be found in the following sections (work in progress)</p>
<ul dir="auto">
<li><a href="doc/lensize.md">Length and size</a></li>
<li><a href="doc/accessors.md">Data access</a></li>
<li><a href="doc/dataflow.md">Data Layout</a></li>
<li><a href="doc/pipeline.md">Pipeline syntax</a></li>
<li><a href="doc/computing.md#views">Efficient views</a></li>
<li><a href="doc/computing.md#computing">Computing: map and friends</a></li>
<li><a href="doc/output.md">Output</a></li>
<li><a href="doc/io.md">I/O</a></li>
<li><a href="doc/helpers.md">Helpers</a></li>
<li><a href="doc/testmacros.md">Unit tests</a></li>
</ul>
<h3 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a name="user-content-overview"></a>Overview</h3>
<h6 dir="auto"><a id="user-content-length-and-size-details" class="anchor" aria-hidden="true" href="#length-and-size-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Length and Size <a href="doc/lensize.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="len(a)                              # length
siz(a)                              # lsize, ndims x 1
siz3(a)                             # lsize, 3 x 1"><pre><span class="pl-c1">len</span>(a)                              <span class="pl-c"><span class="pl-c">#</span> length</span>
<span class="pl-c1">siz</span>(a)                              <span class="pl-c"><span class="pl-c">#</span> lsize, ndims x 1</span>
<span class="pl-c1">siz3</span>(a)                             <span class="pl-c"><span class="pl-c">#</span> lsize, 3 x 1</span></pre></div>
<h6 dir="auto"><a id="user-content-data-access-details" class="anchor" aria-hidden="true" href="#data-access-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Access <a href="doc/accessors.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="at(a, i)                            # item i
setat!(a, i, value)                 # set item i to value
fst(a)                              # first item
snd(a)                              # second item
third(a)                            # third item
last(a)                             # last item
part(a, ind)                        # items at indices ind
trimmedpart(a, ind)                 # items at ind, no error if a is too short
take(a, n)                          # the first up to n elements
takelast(a,n=1)                     # the last up to elements
drop(a,n)                           # a, except for the first n elements
droplast(a,n=1)                     # a, except for the last n elements
partition(a, n)                     # partition into n parts
partsoflen(a, n)                    # partition into parts of length n
extract(a, field, default)          # get key x of dict or field x of composite type instance"><pre><span class="pl-c1">at</span>(a, i)                            <span class="pl-c"><span class="pl-c">#</span> item i</span>
<span class="pl-c1">setat!</span>(a, i, value)                 <span class="pl-c"><span class="pl-c">#</span> set item i to value</span>
<span class="pl-c1">fst</span>(a)                              <span class="pl-c"><span class="pl-c">#</span> first item</span>
<span class="pl-c1">snd</span>(a)                              <span class="pl-c"><span class="pl-c">#</span> second item</span>
<span class="pl-c1">third</span>(a)                            <span class="pl-c"><span class="pl-c">#</span> third item</span>
<span class="pl-c1">last</span>(a)                             <span class="pl-c"><span class="pl-c">#</span> last item</span>
<span class="pl-c1">part</span>(a, ind)                        <span class="pl-c"><span class="pl-c">#</span> items at indices ind</span>
<span class="pl-c1">trimmedpart</span>(a, ind)                 <span class="pl-c"><span class="pl-c">#</span> items at ind, no error if a is too short</span>
<span class="pl-c1">take</span>(a, n)                          <span class="pl-c"><span class="pl-c">#</span> the first up to n elements</span>
<span class="pl-c1">takelast</span>(a,n<span class="pl-k">=</span><span class="pl-c1">1</span>)                     <span class="pl-c"><span class="pl-c">#</span> the last up to elements</span>
<span class="pl-c1">drop</span>(a,n)                           <span class="pl-c"><span class="pl-c">#</span> a, except for the first n elements</span>
<span class="pl-c1">droplast</span>(a,n<span class="pl-k">=</span><span class="pl-c1">1</span>)                     <span class="pl-c"><span class="pl-c">#</span> a, except for the last n elements</span>
<span class="pl-c1">partition</span>(a, n)                     <span class="pl-c"><span class="pl-c">#</span> partition into n parts</span>
<span class="pl-c1">partsoflen</span>(a, n)                    <span class="pl-c"><span class="pl-c">#</span> partition into parts of length n</span>
<span class="pl-c1">extract</span>(a, field, default)          <span class="pl-c"><span class="pl-c">#</span> get key x of dict or field x of composite type instance</span></pre></div>
<h6 dir="auto"><a id="user-content-data-layout-details" class="anchor" aria-hidden="true" href="#data-layout-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data Layout <a href="doc/dataflow.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="row(a)                              # reshape into row vector
col(a)                              # reshape into column vector
reshape(a, siz)                     # reshape into size in ndim x 1 vector siz
split(a, x or f)                    # split a where item == x or f(item) == true                         
concat(a...)                        # same as flatten([a...])
subtoind(sub, a)                    # transform ndims x npoints sub to linear ind for a
indtosub(ind, a)                    # transform linear ind to ndims x len(ind) sub for a
stack(a)                            # concat along the n + 1st dim of the items in a
flatten(a)                          # reduce the nestedness of a
unstack(a)                          # split the dense array a into array of items
riffle(a, x)                        # insert x between the items of a
matrix(a)                           # reshape items of a to column vectors
unmatrix(a, example)                # reshape the column vector items in a according to example
lines(a)                            # split the text a into array of lines
unlines(a)                          # concat a with newlines 
unzip(a)                            # unzip items
findsub(a)                          # return sub for the non-zero entries
randsample(a, n)                    # draw n items from a with repetition
randperm(a)                         # randomly permute order of items
flip(a)                             # reverse the order of items
flipdims(a,d1,d2)                   # flip dims d1 and d2"><pre><span class="pl-c1">row</span>(a)                              <span class="pl-c"><span class="pl-c">#</span> reshape into row vector</span>
<span class="pl-c1">col</span>(a)                              <span class="pl-c"><span class="pl-c">#</span> reshape into column vector</span>
<span class="pl-c1">reshape</span>(a, siz)                     <span class="pl-c"><span class="pl-c">#</span> reshape into size in ndim x 1 vector siz</span>
<span class="pl-c1">split</span>(a, x or f)                    <span class="pl-c"><span class="pl-c">#</span> split a where item == x or f(item) == true                         </span>
<span class="pl-c1">concat</span>(a<span class="pl-k">...</span>)                        <span class="pl-c"><span class="pl-c">#</span> same as flatten([a...])</span>
<span class="pl-c1">subtoind</span>(sub, a)                    <span class="pl-c"><span class="pl-c">#</span> transform ndims x npoints sub to linear ind for a</span>
<span class="pl-c1">indtosub</span>(ind, a)                    <span class="pl-c"><span class="pl-c">#</span> transform linear ind to ndims x len(ind) sub for a</span>
<span class="pl-c1">stack</span>(a)                            <span class="pl-c"><span class="pl-c">#</span> concat along the n + 1st dim of the items in a</span>
<span class="pl-c1">flatten</span>(a)                          <span class="pl-c"><span class="pl-c">#</span> reduce the nestedness of a</span>
<span class="pl-c1">unstack</span>(a)                          <span class="pl-c"><span class="pl-c">#</span> split the dense array a into array of items</span>
<span class="pl-c1">riffle</span>(a, x)                        <span class="pl-c"><span class="pl-c">#</span> insert x between the items of a</span>
<span class="pl-c1">matrix</span>(a)                           <span class="pl-c"><span class="pl-c">#</span> reshape items of a to column vectors</span>
<span class="pl-c1">unmatrix</span>(a, example)                <span class="pl-c"><span class="pl-c">#</span> reshape the column vector items in a according to example</span>
<span class="pl-c1">lines</span>(a)                            <span class="pl-c"><span class="pl-c">#</span> split the text a into array of lines</span>
<span class="pl-c1">unlines</span>(a)                          <span class="pl-c"><span class="pl-c">#</span> concat a with newlines </span>
<span class="pl-c1">unzip</span>(a)                            <span class="pl-c"><span class="pl-c">#</span> unzip items</span>
<span class="pl-c1">findsub</span>(a)                          <span class="pl-c"><span class="pl-c">#</span> return sub for the non-zero entries</span>
<span class="pl-c1">randsample</span>(a, n)                    <span class="pl-c"><span class="pl-c">#</span> draw n items from a with repetition</span>
<span class="pl-c1">randperm</span>(a)                         <span class="pl-c"><span class="pl-c">#</span> randomly permute order of items</span>
<span class="pl-c1">flip</span>(a)                             <span class="pl-c"><span class="pl-c">#</span> reverse the order of items</span>
<span class="pl-c1">flipdims</span>(a,d1,d2)                   <span class="pl-c"><span class="pl-c">#</span> flip dims d1 and d2</span></pre></div>
<h6 dir="auto"><a id="user-content-pipeline-syntax-details" class="anchor" aria-hidden="true" href="#pipeline-syntax-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipeline Syntax <a href="doc/pipeline.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r = @p f1 a b | f2 | f3 c           # pipeline macro, equals f3(f2(f1(a,b)),c)
r = @p f1 a | f2 b _ | f3 e         # equals f3(f2(b,f1(a)),c)"><pre>r <span class="pl-k">=</span> <span class="pl-c1">@p</span> f1 a b <span class="pl-k">|</span> f2 <span class="pl-k">|</span> f3 c           <span class="pl-c"><span class="pl-c">#</span> pipeline macro, equals f3(f2(f1(a,b)),c)</span>
r <span class="pl-k">=</span> <span class="pl-c1">@p</span> f1 a <span class="pl-k">|</span> f2 b _ <span class="pl-k">|</span> f3 e         <span class="pl-c"><span class="pl-c">#</span> equals f3(f2(b,f1(a)),c)</span></pre></div>
<h6 dir="auto"><a id="user-content-efficient-views-details" class="anchor" aria-hidden="true" href="#efficient-views-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Efficient Views <a href="doc/computing.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="view(a,i)                           # lightweight view of item i of a
view(a,i,v)                         # lightweight view of item i of a, reusing v
next!(v)                            # make v point to the i + 1th item of a
trytoview(a,v)                      # for dense array, use view, otherwise part
trytoview(a,v,i)                    # for dense array, use view reusing v, otherwise part"><pre><span class="pl-c1">view</span>(a,i)                           <span class="pl-c"><span class="pl-c">#</span> lightweight view of item i of a</span>
<span class="pl-c1">view</span>(a,i,v)                         <span class="pl-c"><span class="pl-c">#</span> lightweight view of item i of a, reusing v</span>
<span class="pl-c1">next!</span>(v)                            <span class="pl-c"><span class="pl-c">#</span> make v point to the i + 1th item of a</span>
<span class="pl-c1">trytoview</span>(a,v)                      <span class="pl-c"><span class="pl-c">#</span> for dense array, use view, otherwise part</span>
<span class="pl-c1">trytoview</span>(a,v,i)                    <span class="pl-c"><span class="pl-c">#</span> for dense array, use view reusing v, otherwise part</span></pre></div>
<h6 dir="auto"><a id="user-content-computing-map-and-friends-details" class="anchor" aria-hidden="true" href="#computing-map-and-friends-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computing: map and Friends <a href="doc/computing.md#computing">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="map(a, f)                           # apply f to each item
map!(a, f!)                         # apply f! to each item in-place
map!r(a, f)                         # apply f to each item, overwriting a                         
map2!(a, f, f!)                     # apply f to fst(a), f! to other items
map2!(a, r, f!)                     # apply f!(resultitem, item) to each item
shmap(a, f)                         # parallel map f to shared array a, accross procs(a)
shmap!(a, f!)                       # inplace shmap f!, overwriting a, accross procs(a)
shmap!r(a, f)                       # apply f to each item, overwriting a, accross procs(a)                         
shmap2!(a, f, f!)                   # apply f to fst(a), f! to other items, accross procs(a)
shmap2!(a, r, f!)                   # apply f!(resultitem, item), accross procs(a)
pmap(a, f)                          # parallel map of f accross all workers
lmap(a, f)                          # parallel map of f accross local workers
mapmap(a, f)                        # shorthand for map(a, x-&gt;map(x,f))
map2(a,b,f), map3, map4, map5       # map over a and b invoking f(x,y)
work(a, f)                          # apply f to each item, no result value
pwork, lwork, shwork, workwork      # like the corresponding map variants
any(a, f)                           # is any f(item) true
anyequal(a, x)                      # is any item == x
all(a, f)                           # are all f(item) true
allequal(a, x)                      # are all items == x
unequal(a,b)                        # shortcut for !isequal(a,b)
sort(a, f; kargs...)                # sort a accorting to f(item)
uniq(a[, f])                        # unique elements of a or uniq(a,map(a,f))
table(f, a...)                      # like [f(m,n) for m in a[1], n in a[2]], for any length of a
ptable, ltable                      # parallel table using all workers, local workes
tableany, ptableany, ltableany      # like table, but does not flatten result"><pre><span class="pl-c1">map</span>(a, f)                           <span class="pl-c"><span class="pl-c">#</span> apply f to each item</span>
<span class="pl-c1">map!</span>(a, f!)                         <span class="pl-c"><span class="pl-c">#</span> apply f! to each item in-place</span>
<span class="pl-c1">map!r</span>(a, f)                         <span class="pl-c"><span class="pl-c">#</span> apply f to each item, overwriting a                         </span>
<span class="pl-c1">map2!</span>(a, f, f!)                     <span class="pl-c"><span class="pl-c">#</span> apply f to fst(a), f! to other items</span>
<span class="pl-c1">map2!</span>(a, r, f!)                     <span class="pl-c"><span class="pl-c">#</span> apply f!(resultitem, item) to each item</span>
<span class="pl-c1">shmap</span>(a, f)                         <span class="pl-c"><span class="pl-c">#</span> parallel map f to shared array a, accross procs(a)</span>
<span class="pl-c1">shmap!</span>(a, f!)                       <span class="pl-c"><span class="pl-c">#</span> inplace shmap f!, overwriting a, accross procs(a)</span>
<span class="pl-c1">shmap!r</span>(a, f)                       <span class="pl-c"><span class="pl-c">#</span> apply f to each item, overwriting a, accross procs(a)                         </span>
<span class="pl-c1">shmap2!</span>(a, f, f!)                   <span class="pl-c"><span class="pl-c">#</span> apply f to fst(a), f! to other items, accross procs(a)</span>
<span class="pl-c1">shmap2!</span>(a, r, f!)                   <span class="pl-c"><span class="pl-c">#</span> apply f!(resultitem, item), accross procs(a)</span>
<span class="pl-c1">pmap</span>(a, f)                          <span class="pl-c"><span class="pl-c">#</span> parallel map of f accross all workers</span>
<span class="pl-c1">lmap</span>(a, f)                          <span class="pl-c"><span class="pl-c">#</span> parallel map of f accross local workers</span>
<span class="pl-c1">mapmap</span>(a, f)                        <span class="pl-c"><span class="pl-c">#</span> shorthand for map(a, x-&gt;map(x,f))</span>
<span class="pl-c1">map2</span>(a,b,f), map3, map4, map5       <span class="pl-c"><span class="pl-c">#</span> map over a and b invoking f(x,y)</span>
<span class="pl-c1">work</span>(a, f)                          <span class="pl-c"><span class="pl-c">#</span> apply f to each item, no result value</span>
pwork, lwork, shwork, workwork      <span class="pl-c"><span class="pl-c">#</span> like the corresponding map variants</span>
<span class="pl-c1">any</span>(a, f)                           <span class="pl-c"><span class="pl-c">#</span> is any f(item) true</span>
<span class="pl-c1">anyequal</span>(a, x)                      <span class="pl-c"><span class="pl-c">#</span> is any item == x</span>
<span class="pl-c1">all</span>(a, f)                           <span class="pl-c"><span class="pl-c">#</span> are all f(item) true</span>
<span class="pl-c1">allequal</span>(a, x)                      <span class="pl-c"><span class="pl-c">#</span> are all items == x</span>
<span class="pl-c1">unequal</span>(a,b)                        <span class="pl-c"><span class="pl-c">#</span> shortcut for !isequal(a,b)</span>
<span class="pl-c1">sort</span>(a, f; kargs<span class="pl-k">...</span>)                <span class="pl-c"><span class="pl-c">#</span> sort a accorting to f(item)</span>
<span class="pl-c1">uniq</span>(a[, f])                        <span class="pl-c"><span class="pl-c">#</span> unique elements of a or uniq(a,map(a,f))</span>
<span class="pl-c1">table</span>(f, a<span class="pl-k">...</span>)                      <span class="pl-c"><span class="pl-c">#</span> like [f(m,n) for m in a[1], n in a[2]], for any length of a</span>
ptable, ltable                      <span class="pl-c"><span class="pl-c">#</span> parallel table using all workers, local workes</span>
tableany, ptableany, ltableany      <span class="pl-c"><span class="pl-c">#</span> like table, but does not flatten result</span></pre></div>
<h6 dir="auto"><a id="user-content-output-details" class="anchor" aria-hidden="true" href="#output-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Output <a href="doc/output.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="showinfo
tee"><pre>showinfo
tee</pre></div>
<h6 dir="auto"><a id="user-content-io-details" class="anchor" aria-hidden="true" href="#io-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>I/O <a href="doc/io.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="read
write
existsfile
mkdir 
filenames
filepaths
dirnames
dirpaths
readmat
writemat"><pre>read
write
existsfile
mkdir 
filenames
filepaths
dirnames
dirpaths
readmat
writemat</pre></div>
<h6 dir="auto"><a id="user-content-helpers-details" class="anchor" aria-hidden="true" href="#helpers-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Helpers <a href="doc/helpers.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="zerossiz(s, typ)                    # zeros(s...), default typ is Float64
shzerossiz(s, typ)                  # shared zerossiz
shzeros([typ,] s...)                # shared zeros
onessiz(s, typ)                     # ones(s...), default typ is Float64
shonessiz(s, typ)                   # shared onessiz
shones([typ,] s...)                 # shared ones
randsiz(s, typ)                     # rand(s...), default typ is Float64
shrandnsiz(s, typ)                  # shared randsiz
shrand([typ,] s...)                 # shared rand
randnsiz(s, typ)                    # randn(s...), default typ is Float64
shrandnsiz(s, typ)                  # shared randnsiz
shrandn([typ,] s...)                # shared randn
zeroel(a)                           # zero(eltype(a))
oneel                               # one(eltype(a))
@dict a b c ...                     # Dict(&quot;a&quot; =&gt; a, &quot;b&quot; =&gt; b, &quot;c&quot; =&gt; c, ...)
+
* 
repeat(a, n)                        # repeat a n times
nop()                               # no-op
id(a...)                            # returns a...
istrue(a or f)                      # is a or result of f true
isfalse(a or f)                     # !istrue
not                                 # alias for !
or                                  # alias for ||
and                                 # alias for &amp;&amp;
plus                                # alias for .+
minus                               # alias for .-
times                               # alias for .*
divby                               # alias for ./"><pre><span class="pl-c1">zerossiz</span>(s, typ)                    <span class="pl-c"><span class="pl-c">#</span> zeros(s...), default typ is Float64</span>
<span class="pl-c1">shzerossiz</span>(s, typ)                  <span class="pl-c"><span class="pl-c">#</span> shared zerossiz</span>
<span class="pl-c1">shzeros</span>([typ,] s<span class="pl-k">...</span>)                <span class="pl-c"><span class="pl-c">#</span> shared zeros</span>
<span class="pl-c1">onessiz</span>(s, typ)                     <span class="pl-c"><span class="pl-c">#</span> ones(s...), default typ is Float64</span>
<span class="pl-c1">shonessiz</span>(s, typ)                   <span class="pl-c"><span class="pl-c">#</span> shared onessiz</span>
<span class="pl-c1">shones</span>([typ,] s<span class="pl-k">...</span>)                 <span class="pl-c"><span class="pl-c">#</span> shared ones</span>
<span class="pl-c1">randsiz</span>(s, typ)                     <span class="pl-c"><span class="pl-c">#</span> rand(s...), default typ is Float64</span>
<span class="pl-c1">shrandnsiz</span>(s, typ)                  <span class="pl-c"><span class="pl-c">#</span> shared randsiz</span>
<span class="pl-c1">shrand</span>([typ,] s<span class="pl-k">...</span>)                 <span class="pl-c"><span class="pl-c">#</span> shared rand</span>
<span class="pl-c1">randnsiz</span>(s, typ)                    <span class="pl-c"><span class="pl-c">#</span> randn(s...), default typ is Float64</span>
<span class="pl-c1">shrandnsiz</span>(s, typ)                  <span class="pl-c"><span class="pl-c">#</span> shared randnsiz</span>
<span class="pl-c1">shrandn</span>([typ,] s<span class="pl-k">...</span>)                <span class="pl-c"><span class="pl-c">#</span> shared randn</span>
<span class="pl-c1">zeroel</span>(a)                           <span class="pl-c"><span class="pl-c">#</span> zero(eltype(a))</span>
oneel                               <span class="pl-c"><span class="pl-c">#</span> one(eltype(a))</span>
<span class="pl-c1">@dict</span> a b c <span class="pl-k">...</span>                     <span class="pl-c"><span class="pl-c">#</span> Dict("a" =&gt; a, "b" =&gt; b, "c" =&gt; c, ...)</span>
<span class="pl-k">+</span>
<span class="pl-k">*</span> 
<span class="pl-c1">repeat</span>(a, n)                        <span class="pl-c"><span class="pl-c">#</span> repeat a n times</span>
<span class="pl-c1">nop</span>()                               <span class="pl-c"><span class="pl-c">#</span> no-op</span>
<span class="pl-c1">id</span>(a<span class="pl-k">...</span>)                            <span class="pl-c"><span class="pl-c">#</span> returns a...</span>
<span class="pl-c1">istrue</span>(a or f)                      <span class="pl-c"><span class="pl-c">#</span> is a or result of f true</span>
<span class="pl-c1">isfalse</span>(a or f)                     <span class="pl-c"><span class="pl-c">#</span> !istrue</span>
not                                 <span class="pl-c"><span class="pl-c">#</span> alias for !</span>
or                                  <span class="pl-c"><span class="pl-c">#</span> alias for ||</span>
and                                 <span class="pl-c"><span class="pl-c">#</span> alias for &amp;&amp;</span>
plus                                <span class="pl-c"><span class="pl-c">#</span> alias for .+</span>
minus                               <span class="pl-c"><span class="pl-c">#</span> alias for .-</span>
times                               <span class="pl-c"><span class="pl-c">#</span> alias for .*</span>
divby                               <span class="pl-c"><span class="pl-c">#</span> alias for ./</span></pre></div>
<h6 dir="auto"><a id="user-content-unit-tests-details" class="anchor" aria-hidden="true" href="#unit-tests-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unit Tests <a href="doc/testmacros.md">[details]</a></h6>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@test_equal a b                     # test a and b for equality, show detailed info if not
@assert_equal a b                   # like test_equal, then throws error
@test_almostequal a b maxdiff       # like test_equal, but allows up to maxdiff difference"><pre><span class="pl-c1">@test_equal</span> a b                     <span class="pl-c"><span class="pl-c">#</span> test a and b for equality, show detailed info if not</span>
<span class="pl-c1">@assert_equal</span> a b                   <span class="pl-c"><span class="pl-c">#</span> like test_equal, then throws error</span>
<span class="pl-c1">@test_almostequal</span> a b maxdiff       <span class="pl-c"><span class="pl-c">#</span> like test_equal, but allows up to maxdiff difference</span></pre></div>
</article></div>