<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bonsai" class="anchor" aria-hidden="true" href="#bonsai"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bonsai</h1>
<p><a href="https://travis-ci.com/onetonfoot/Bonsai.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c53d134cdd048c7c8b48d68b0eb975cfbd15b211e70db1ab067ceead9d40c745/68747470733a2f2f7472617669732d63692e636f6d2f6f6e65746f6e666f6f742f426f6e7361692e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/onetonfoot/Bonsai.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/onetonfoot/Bonsai.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8e97feeb304ac2347dc6e696680ca34b362be45c2f71522981ab4d57d95cc851/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6f6e65746f6e666f6f742f426f6e7361692e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/onetonfoot/Bonsai.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h1>
<p>It's as simple as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app = App()

app(&quot;/path&quot;; method = GET) do request
    reponse = &quot;hello&quot;
    return response
end

start(app)
"><pre>app <span class="pl-k">=</span> <span class="pl-c1">App</span>()

<span class="pl-c1">app</span>(<span class="pl-s"><span class="pl-pds">"</span>/path<span class="pl-pds">"</span></span>; method <span class="pl-k">=</span> GET) <span class="pl-k">do</span> request
    reponse <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>
    <span class="pl-k">return</span> response
<span class="pl-k">end</span>

<span class="pl-c1">start</span>(app)</pre></div>
<p>Now visit <code>localhost:8081</code>.</p>
<p>The handler function takes a <code>HTTP.Request</code> and returns a <code>HTTP.Response</code>.</p>
<p>After your handler is called if it's return type isn't a <code>Response</code> it will be made into one by
calling <code>create_response</code>. You can overload <code>create_reponse</code> for your specific type to have more control.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="create_response(t::Mytype)::HTTP.Response
"><pre><span class="pl-c1">create_response</span>(t<span class="pl-k">::</span><span class="pl-c1">Mytype</span>)<span class="pl-k">::</span><span class="pl-c1">HTTP.Response</span></pre></div>
<p>This is already defined for <code>AbstractString</code> and <code>AbstractDict</code>, were the Content-Type header is set as <code>text/plain</code> and <code>application/json</code> respectively.</p>
<h1><a id="user-content-routing-and-query-parameters" class="anchor" aria-hidden="true" href="#routing-and-query-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Routing and Query Parameters</h1>
<p>Routes can be defined for multiple methods by passing an array</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app(handler, &quot;/path&quot;; method = [GET, POST])
"><pre><span class="pl-c1">app</span>(handler, <span class="pl-s"><span class="pl-pds">"</span>/path<span class="pl-pds">"</span></span>; method <span class="pl-k">=</span> [GET, POST])</pre></div>
<p>They can be parametrized by using the syntax <code>/:x</code>. You can then access
the parameters in the handler with.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app(&quot;/route/:id&quot;, method = [GET, POST]) do request
    params = path_params(request)
    # Dict(:id =&gt; value)
end
"><pre><span class="pl-c1">app</span>(<span class="pl-s"><span class="pl-pds">"</span>/route/:id<span class="pl-pds">"</span></span>, method <span class="pl-k">=</span> [GET, POST]) <span class="pl-k">do</span> request
    params <span class="pl-k">=</span> <span class="pl-c1">path_params</span>(request)
    <span class="pl-c"><span class="pl-c">#</span> Dict(:id =&gt; value)</span>
<span class="pl-k">end</span></pre></div>
<p>Specific routes take priority over variable routes, in other words <code>"/route/1"</code> will be matched before <code>"/route/:id"</code>.</p>
<p>Query parameters can be accessed in a similar way.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="query = query_params(request)
"><pre>query <span class="pl-k">=</span> <span class="pl-c1">query_params</span>(request)</pre></div>
<h1><a id="user-content-files" class="anchor" aria-hidden="true" href="#files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Files</h1>
<p>To serve a file pass the route and a <a href="https://github.com/rofinn/FilePaths.jl">file path</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app(&quot;/&quot;,  p&quot;index.html&quot;)
"><pre><span class="pl-c1">app</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>,  <span class="pl-s"><span class="pl-pds"><span class="pl-c1">p</span>"</span>index.html<span class="pl-pds">"</span></span>)</pre></div>
<p>The MIME type will be inferred from the extension, the supported MIME types can be found <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types" rel="nofollow">here</a>. If the MIME-type is unsupported it can be added to the global <code>MIME_TYPES</code>.</p>
<h1><a id="user-content-folders" class="anchor" aria-hidden="true" href="#folders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Folders</h1>
<p>You can server folders using the following syntax</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app(&quot;/img&quot;, p&quot;images&quot;; recursive=true, filter_fn=filepath-&gt;true)
"><pre><span class="pl-c1">app</span>(<span class="pl-s"><span class="pl-pds">"</span>/img<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">p</span>"</span>images<span class="pl-pds">"</span></span>; recursive<span class="pl-k">=</span><span class="pl-c1">true</span>, filter_fn<span class="pl-k">=</span>filepath<span class="pl-k">-&gt;</span><span class="pl-c1">true</span>)</pre></div>
<p><code>filter_fn</code> can be used to remove files you don't want to be served, it
should return a boolean.</p>
<p>If given a folder of the following structure.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="images/
├── cat.jpeg
└── dog.jpeg
"><pre><code>images/
├── cat.jpeg
└── dog.jpeg
</code></pre></div>
<p>The routes generated would be <code>img/cat.jpeg</code> and <code>img/dog.jpeg</code>.</p>
<h1><a id="user-content-sessions" class="anchor" aria-hidden="true" href="#sessions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sessions</h1>
<p>When instantiating the app you can pass data structure you want to use for the session, by default this will be a <code>Dict</code>.  But could be anything you want to use to store state e.g</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app = App(session = ReidsSession()) 
"><pre>app <span class="pl-k">=</span> <span class="pl-c1">App</span>(session <span class="pl-k">=</span> <span class="pl-c1">ReidsSession</span>()) </pre></div>
<p>The session can then be accessed in the handler.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app(&quot;/path&quot;) do req
    session = app.session
end
"><pre><span class="pl-c1">app</span>(<span class="pl-s"><span class="pl-pds">"</span>/path<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> req
    session <span class="pl-k">=</span> app<span class="pl-k">.</span>session
<span class="pl-k">end</span></pre></div>
<p>Since a <code>Dict</code> isn't thread-safe so this will likey change in the future to a different data structure, once parallelism is addressed.</p>
<h1><a id="user-content-websockets" class="anchor" aria-hidden="true" href="#websockets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>WebSockets</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="app(ws&quot;/chat_room&quot;) do ws
    while isopen(ws)
        # do stuff
    end
end
"><pre><span class="pl-c1">app</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">ws</span>"</span>/chat_room<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> ws
    <span class="pl-k">while</span> <span class="pl-c1">isopen</span>(ws)
        <span class="pl-c"><span class="pl-c">#</span> do stuff</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-middleware" class="anchor" aria-hidden="true" href="#middleware"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Middleware</h1>
<p>Still thinking about the nicest way to implement this suggesting are welcome!</p>
<h1><a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Docker</h1>
<p>Yet todo but will probably add a CLI using <a href="https://github.com/Roger-luo/Comonicon.jl">Comonicon</a>, that
can take a Julia project and generate a Dockerfile with <a href="https://github.com/bcbi/SimpleContainerGenerator.jl">SimpleContainerGenerator</a>.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<p>For more examples see the <code>examples</code> folder.</p>
<h1><a id="user-content-useful-packages" class="anchor" aria-hidden="true" href="#useful-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Useful Packages</h1>
<p>Some packages that you may find useful to pair with <code>Bonsai</code>.</p>
<ul>
<li><a href="https://github.com/wookay/Octo.jl">Octo.jl</a> - a SQL Query DSL</li>
</ul>
</article></div>