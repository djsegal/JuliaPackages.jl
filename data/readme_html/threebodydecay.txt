<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-threebodydecay" class="anchor" aria-hidden="true" href="#threebodydecay"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreeBodyDecay</h1>
<p dir="auto"><a href="https://travis-ci.com/mmikhasenko/ThreeBodyDecay.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/31c7b224f65fd4c86d39a4f4df1ea5cdada427f3a854985ad4f571c3e4cd8b37/68747470733a2f2f7472617669732d63692e636f6d2f6d6d696b686173656e6b6f2f5468726565426f647944656361792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mmikhasenko/ThreeBodyDecay.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/mmikhasenko/ThreeBodyDecay-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1c591ab68355f877630cba9682d6e1bd93c277f2a2e38d8f832b7c5f1d4fab12/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6d696b686173656e6b6f2f5468726565426f647944656361792e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mmikhasenko/ThreeBodyDecay.jl?svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mmikhasenko/ThreeBodyDecay.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02601098634ac61d76b0767949e875bc00f55fbd4d3253b7e0f60b4a7572f70f/68747470733a2f2f636f6465636f762e696f2f67682f6d6d696b686173656e6b6f2f5468726565426f647944656361792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mmikhasenko/ThreeBodyDecay.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/1910.04566" rel="nofollow"><img src="https://camo.githubusercontent.com/678c43111840bc02085e6acc34a13e1e1dee561ca98caf06148dd69276e3710c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61727469636c652d5052442532303130312532432532303033343033332d79656c6c6f77677265656e" alt="arXiv article" data-canonical-src="https://img.shields.io/badge/article-PRD%20101%2C%20034033-yellowgreen" style="max-width: 100%;"></a></p>

<p dir="auto">A framework for the amplitude analysis of multibody decay chains.
The main focus of the project is the three-body decay and reactions required the Dalitz Plot analysis.
The latter includes reactions with more then three particles, which however can be factorized to a product
of sequential decays with <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="ed119597b47ab67ba13178705056e693">$≤3$</math-renderer> products due to the lifetime of the long-lived particles.
All particles can have arbitrary spin.</p>
<p dir="auto">The framework is based on the publication, "Dalitz-plot decomposition for three-body decays" by JPAC Collaboration (M Mikhasenko at al.) <a href="http://inspirehep.net/record/1758460" rel="nofollow">(arxiv)</a>.
The code inherits notations of the paper:</p>
<ul dir="auto">
<li>Particles are numbered 1,2,3, and 0 for the decay products and the mother particle, respectively.</li>
<li>
<code>s</code> is a total invariant mass of three particles,</li>
<li>
<code>σ</code> is a two-particle invariant mass squared, <code>σₖ = (pᵢ+pⱼ)²</code>,</li>
<li>
<code>θᵢⱼ</code> is a scattering angle, an angle between <code>vec pᵢ</code> and <code>- vec pₖ</code>.</li>
<li>
<code>hat θₖ₍ⱼ₎</code> is a isobar angle (the Wigner angle of the 0-particle), an angle of <code>vec pⱼ+pⱼ</code> with respect the the chain <code>j</code>.</li>
<li>
<code>ζᵏᵢ₍₀₎</code> is the Wigner angle for the final-state particle (see the paper for the definition).</li>
</ul>
<h2 dir="auto">
<a id="user-content-api-for-describing-the-decay" class="anchor" aria-hidden="true" href="#api-for-describing-the-decay"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API for describing the decay</h2>
<p dir="auto">A type <code>ThreeBodySystem</code> is used to keep information of the three-body system (masses, spins, and parities).
The <code>DecayChain</code> structure contain information on the spin of the intermediate resonance, its lineshape
and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="ed119597b47ab67ba13178705056e693">$LS$</math-renderer> Clebsch-Gordan coefficient in the production and decay vertices.</p>
<p dir="auto">Here is an example for amplitude description for Λb ⟶ Jψ p K,
the reaction where the pentaquarks candidates were observed for the first time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ThreeBodyDecay # import the module
#
# decay Λb ⟶ Jψ p K
ms = (Jψ = 3.09, p=0.938, K = 0.49367, Lb = 5.62) # masses of the particles
# create two-body system
tbs = ThreeBodySystem(ms.Jψ, ms.p, ms.K; m0=ms.Lb,   # masses m1,m2,m3,m0
            two_js=ThreeBodySpins(2, 1, 0; two_h0=1])) # twice spin
Concerving = ThreeBodyParities('-',  '+',  '-'; P0='+')
Violating  = ThreeBodyParities('-',  '+',  '-'; P0='-')"><pre><span class="pl-k">using</span> ThreeBodyDecay <span class="pl-c"><span class="pl-c">#</span> import the module</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c"><span class="pl-c">#</span> decay Λb ⟶ Jψ p K</span>
ms <span class="pl-k">=</span> (Jψ <span class="pl-k">=</span> <span class="pl-c1">3.09</span>, p<span class="pl-k">=</span><span class="pl-c1">0.938</span>, K <span class="pl-k">=</span> <span class="pl-c1">0.49367</span>, Lb <span class="pl-k">=</span> <span class="pl-c1">5.62</span>) <span class="pl-c"><span class="pl-c">#</span> masses of the particles</span>
<span class="pl-c"><span class="pl-c">#</span> create two-body system</span>
tbs <span class="pl-k">=</span> <span class="pl-c1">ThreeBodySystem</span>(ms<span class="pl-k">.</span>Jψ, ms<span class="pl-k">.</span>p, ms<span class="pl-k">.</span>K; m0<span class="pl-k">=</span>ms<span class="pl-k">.</span>Lb,   <span class="pl-c"><span class="pl-c">#</span> masses m1,m2,m3,m0</span>
            two_js<span class="pl-k">=</span><span class="pl-c1">ThreeBodySpins</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>; two_h0<span class="pl-k">=</span><span class="pl-c1">1</span>])) <span class="pl-c"><span class="pl-c">#</span> twice spin</span>
Concerving <span class="pl-k">=</span> <span class="pl-c1">ThreeBodyParities</span>(<span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>,  <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>,  <span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>; P0<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>)
Violating  <span class="pl-k">=</span> <span class="pl-c1">ThreeBodyParities</span>(<span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>,  <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>,  <span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>; P0<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>-<span class="pl-pds">'</span></span>)</pre></div>
<p dir="auto"><code>ThreeBodySystem</code> creates an immutable structure that describes the setup.
Two work with particles with non-integer spin, the doubled quantum numbers are stored.</p>
<p dir="auto">The following code creates six possible decay channels.
The lineshape of the isobar is specified by the second argument,
it is a simple Breit-Wigner function in the example below.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# chains-1, i.e. (2+3): Λs with the lowest ls, LS
Λ1520  = DecayChainLS(1, σ-&gt;BW(σ, 1.5195, 0.0156); two_s = 3/2|&gt;x2, parity = '+', Ps=Concerving, tbs=tbs)
Λ1690  = DecayChainLS(1, σ-&gt;BW(σ, 1.685,  0.050 ); two_s = 1/2|&gt;x2, parity = '+', Ps=Concerving, tbs=tbs)
Λ1810  = DecayChainLS(1, σ-&gt;BW(σ, 1.80,   0.090 ); two_s = 5/2|&gt;x2, parity = '+', Ps=Concerving, tbs=tbs)
Λs = (Λ1520,Λ1690,Λ1810)
#
# chains-3, i.e. (1+2): Pentaquarks with the lowest ls, LS
Pc4312 = DecayChainLS(3, σ-&gt;BW(σ, 4.312, 0.015); two_s = 1/2|&gt;x2, parity = '+', Ps=Concerving, tbs=tbs)
Pc4440 = DecayChainLS(3, σ-&gt;BW(σ, 4.440, 0.010); two_s = 1/2|&gt;x2, parity = '+', Ps=Concerving, tbs=tbs)
Pc4457 = DecayChainLS(3, σ-&gt;BW(σ, 4.457, 0.020); two_s = 3/2|&gt;x2, parity = '+', Ps=Concerving, tbs=tbs)
Pcs = (Pc4312,Pc4440,Pc4457)
#
A(σs,two_λs,cs) = sum(c*amplitude(dc,σs,two_λs) for (c, dc) in zip(cs, (Λs...,Pcs...)))"><pre><span class="pl-c"><span class="pl-c">#</span> chains-1, i.e. (2+3): Λs with the lowest ls, LS</span>
Λ1520  <span class="pl-k">=</span> <span class="pl-c1">DecayChainLS</span>(<span class="pl-c1">1</span>, σ<span class="pl-k">-&gt;</span><span class="pl-c1">BW</span>(σ, <span class="pl-c1">1.5195</span>, <span class="pl-c1">0.0156</span>); two_s <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">|&gt;</span>x2, parity <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>, Ps<span class="pl-k">=</span>Concerving, tbs<span class="pl-k">=</span>tbs)
Λ1690  <span class="pl-k">=</span> <span class="pl-c1">DecayChainLS</span>(<span class="pl-c1">1</span>, σ<span class="pl-k">-&gt;</span><span class="pl-c1">BW</span>(σ, <span class="pl-c1">1.685</span>,  <span class="pl-c1">0.050</span> ); two_s <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">|&gt;</span>x2, parity <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>, Ps<span class="pl-k">=</span>Concerving, tbs<span class="pl-k">=</span>tbs)
Λ1810  <span class="pl-k">=</span> <span class="pl-c1">DecayChainLS</span>(<span class="pl-c1">1</span>, σ<span class="pl-k">-&gt;</span><span class="pl-c1">BW</span>(σ, <span class="pl-c1">1.80</span>,   <span class="pl-c1">0.090</span> ); two_s <span class="pl-k">=</span> <span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">|&gt;</span>x2, parity <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>, Ps<span class="pl-k">=</span>Concerving, tbs<span class="pl-k">=</span>tbs)
Λs <span class="pl-k">=</span> (Λ1520,Λ1690,Λ1810)
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c"><span class="pl-c">#</span> chains-3, i.e. (1+2): Pentaquarks with the lowest ls, LS</span>
Pc4312 <span class="pl-k">=</span> <span class="pl-c1">DecayChainLS</span>(<span class="pl-c1">3</span>, σ<span class="pl-k">-&gt;</span><span class="pl-c1">BW</span>(σ, <span class="pl-c1">4.312</span>, <span class="pl-c1">0.015</span>); two_s <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">|&gt;</span>x2, parity <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>, Ps<span class="pl-k">=</span>Concerving, tbs<span class="pl-k">=</span>tbs)
Pc4440 <span class="pl-k">=</span> <span class="pl-c1">DecayChainLS</span>(<span class="pl-c1">3</span>, σ<span class="pl-k">-&gt;</span><span class="pl-c1">BW</span>(σ, <span class="pl-c1">4.440</span>, <span class="pl-c1">0.010</span>); two_s <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">|&gt;</span>x2, parity <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>, Ps<span class="pl-k">=</span>Concerving, tbs<span class="pl-k">=</span>tbs)
Pc4457 <span class="pl-k">=</span> <span class="pl-c1">DecayChainLS</span>(<span class="pl-c1">3</span>, σ<span class="pl-k">-&gt;</span><span class="pl-c1">BW</span>(σ, <span class="pl-c1">4.457</span>, <span class="pl-c1">0.020</span>); two_s <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">2</span><span class="pl-k">|&gt;</span>x2, parity <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>+<span class="pl-pds">'</span></span>, Ps<span class="pl-k">=</span>Concerving, tbs<span class="pl-k">=</span>tbs)
Pcs <span class="pl-k">=</span> (Pc4312,Pc4440,Pc4457)
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-en">A</span>(σs,two_λs,cs) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(c<span class="pl-k">*</span><span class="pl-c1">amplitude</span>(dc,σs,two_λs) <span class="pl-k">for</span> (c, dc) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(cs, (Λs<span class="pl-k">...</span>,Pcs<span class="pl-k">...</span>)))</pre></div>
<p dir="auto">Amplitudes for the decay chains are added coherently with complex constants.</p>
<ul dir="auto">
<li>the invariant variables, <code>σs = [σ₁,σ₂,σ₃]</code>,</li>
<li>helicities <code>two_λs = [λ₁,λ₂,λ₃,λ₀]</code>
</li>
<li>and complex couplings <code>cs = [c₁,c₂,...]</code>
</li>
</ul>
<p dir="auto">The intensity (and probability) is a squared amplitude summed over the summed over helicities for the case the decay particle is unpolarized.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="I(σs,cs) = sum(abs2(A(σs,two_λs,cs)) for two_λs in itr(tbs.two_js))
#
I(σs) = I(σs,[1, 1.1, 0.4im, 2.2, 2.1im, -0.3im]) # set the couplings
#
σs = randomPoint(tbs.ms) # just a random point of the Dalitz Plot
@show I(σs) # gives a real number - probability"><pre><span class="pl-en">I</span>(σs,cs) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">abs2</span>(<span class="pl-c1">A</span>(σs,two_λs,cs)) <span class="pl-k">for</span> two_λs <span class="pl-k">in</span> <span class="pl-c1">itr</span>(tbs<span class="pl-k">.</span>two_js))
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-en">I</span>(σs) <span class="pl-k">=</span> <span class="pl-c1">I</span>(σs,[<span class="pl-c1">1</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">0.4im</span>, <span class="pl-c1">2.2</span>, <span class="pl-c1">2.1im</span>, <span class="pl-k">-</span><span class="pl-c1">0.3im</span>]) <span class="pl-c"><span class="pl-c">#</span> set the couplings</span>
<span class="pl-c"><span class="pl-c">#</span></span>
σs <span class="pl-k">=</span> <span class="pl-c1">randomPoint</span>(tbs<span class="pl-k">.</span>ms) <span class="pl-c"><span class="pl-c">#</span> just a random point of the Dalitz Plot</span>
<span class="pl-c1">@show</span> <span class="pl-c1">I</span>(σs) <span class="pl-c"><span class="pl-c">#</span> gives a real number - probability</span></pre></div>
<h1 dir="auto">
<a id="user-content-plotting-api" class="anchor" aria-hidden="true" href="#plotting-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plotting API</h1>
<p dir="auto">Visualization discuss below exploits the <code>Plots.jl</code> module with <code>matplotlib</code> backend.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Plots
pyplot()"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">pyplot</span>()</pre></div>
<p dir="auto">A natural way to visualize the three-body decay with two degrees of freedom
is a correlation plot of the subchannel invariant masses squared.
Kinematic limits can visualized using the <code>border</code> function.
Plot in the σ₁σ₃ variables is obtained by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(
  plot(border31(tbs), xlab=&quot;σ₁ (GeV²)&quot;, ylab=&quot;σ₃ (GeV²)&quot;),
  plot(border12(tbs), xlab=&quot;σ₂ (GeV²)&quot;, ylab=&quot;σ₁ (GeV²)&quot;))"><pre><span class="pl-c1">plot</span>(
  <span class="pl-c1">plot</span>(<span class="pl-c1">border31</span>(tbs), xlab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>σ₁ (GeV²)<span class="pl-pds">"</span></span>, ylab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>σ₃ (GeV²)<span class="pl-pds">"</span></span>),
  <span class="pl-c1">plot</span>(<span class="pl-c1">border12</span>(tbs), xlab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>σ₂ (GeV²)<span class="pl-pds">"</span></span>, ylab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>σ₁ (GeV²)<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="example/plot/border31_12.png"><img src="example/plot/border31_12.png" alt="border31" style="max-width: 100%;"></a></p>
<p dir="auto">A phase-space sample is generated using the <code>flatDalitzPlotSample</code> function.
By weighting the sample one gets the intensity distribution.
The intensity function can also be plotted on the Dalitz plan using a grid.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TypedTables # converint inteface of selecting columns
#
σsv = Table(flatDalitzPlotSample(tbs.ms; Nev = 10_000))
weights = I.(σsv) # dot is a broadcast
#
plot(layout=(900,350), layout=grid(1,2), xlab=&quot;σ₁ (GeV²)&quot;, ylab=&quot;σ₃ (GeV²)&quot;)
histogram2d!(sp=1, σsv.σ1, σsv.σ3, weights=weights, lab=&quot;weighted phase space&quot;))
plot!(sp=2, I, tbs.ms; iσx=1, iσy=3, lab=&quot;on a grid&quot;)"><pre><span class="pl-k">using</span> TypedTables <span class="pl-c"><span class="pl-c">#</span> converint inteface of selecting columns</span>
<span class="pl-c"><span class="pl-c">#</span></span>
σsv <span class="pl-k">=</span> <span class="pl-c1">Table</span>(<span class="pl-c1">flatDalitzPlotSample</span>(tbs<span class="pl-k">.</span>ms; Nev <span class="pl-k">=</span> <span class="pl-c1">10_000</span>))
weights <span class="pl-k">=</span> <span class="pl-c1">I</span>.(σsv) <span class="pl-c"><span class="pl-c">#</span> dot is a broadcast</span>
<span class="pl-c"><span class="pl-c">#</span></span>
<span class="pl-c1">plot</span>(layout<span class="pl-k">=</span>(<span class="pl-c1">900</span>,<span class="pl-c1">350</span>), layout<span class="pl-k">=</span><span class="pl-c1">grid</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>), xlab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>σ₁ (GeV²)<span class="pl-pds">"</span></span>, ylab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>σ₃ (GeV²)<span class="pl-pds">"</span></span>)
<span class="pl-c1">histogram2d!</span>(sp<span class="pl-k">=</span><span class="pl-c1">1</span>, σsv<span class="pl-k">.</span>σ1, σsv<span class="pl-k">.</span>σ3, weights<span class="pl-k">=</span>weights, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>weighted phase space<span class="pl-pds">"</span></span>))
<span class="pl-c1">plot!</span>(sp<span class="pl-k">=</span><span class="pl-c1">2</span>, I, tbs<span class="pl-k">.</span>ms; iσx<span class="pl-k">=</span><span class="pl-c1">1</span>, iσy<span class="pl-k">=</span><span class="pl-c1">3</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>on a grid<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="example/plot/dalitz31.png"><img src="example/plot/dalitz31.png" alt="Scatter and Histogram" style="max-width: 100%;"></a></p>
</article></div>