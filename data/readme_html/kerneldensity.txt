<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kerneldensityjl" class="anchor" aria-hidden="true" href="#kerneldensityjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KernelDensity.jl</h1>
<p><a href="https://travis-ci.org/JuliaStats/KernelDensity.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/404816b0b35aeddb24506d96178601ecc00dab51/68747470733a2f2f7472617669732d63692e6f72672f4a756c696153746174732f4b65726e656c44656e736974792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaStats/KernelDensity.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaStats/KernelDensity.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9085ea5cff8a8148ecc22a382e44fe4a9cbdbc6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c696153746174732f4b65726e656c44656e736974792e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaStats/KernelDensity.jl/badge.svg" style="max-width:100%;"></a></p>
<p>Kernel density estimators for Julia.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-univariate" class="anchor" aria-hidden="true" href="#univariate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Univariate</h3>
<p>The main accessor function is <code>kde</code>:</p>
<pre><code>U = kde(data)
</code></pre>
<p>will construct a <code>UnivariateKDE</code> object from the real vector <code>data</code>. The
optional keyword arguments are</p>
<ul>
<li><code>boundary</code>: the lower and upper limits of the kde as a tuple. Due to the
fourier transforms used internally, there should be sufficient spacing to
prevent wrap-around at the boundaries.</li>
<li><code>npoints</code>: the number of interpolation points to use. The function uses
fast Fourier transforms (FFTs) internally, so for optimal efficiency this
should be a power of 2 (default = 2048).</li>
<li><code>kernel</code>: the distributional family from
<a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a> to use as
the kernel (default = <code>Normal</code>). To add your own kernel, extend the internal
<code>kernel_dist</code> function.</li>
<li><code>bandwidth</code>: the bandwidth of the kernel. Default is to use Silverman's
rule.</li>
</ul>
<p>The <code>UnivariateKDE</code> object <code>U</code> contains gridded coordinates (<code>U.x</code>) and the density
estimate (<code>U.density</code>). These are typically sufficient for plotting.
A related function</p>
<p><code>kde_lscv(data)</code></p>
<p>will construct a <code>UnivariateKDE</code> object, with the bandwidth selected by
least-squares cross validation. It accepts the above keyword arguments, except
<code>bandwidth</code>.</p>
<p>There are also some slightly more advanced interfaces:</p>
<pre><code>kde(data, midpoints::R) where R&lt;:AbstractRange
</code></pre>
<p>allows specifying the internal grid to use. Optional keyword arguments are
<code>kernel</code> and <code>bandwidth</code>.</p>
<pre><code>kde(data, dist::Distribution)
</code></pre>
<p>allows specifying the exact distribution to use as the kernel. Optional
keyword arguments are <code>boundary</code> and <code>npoints</code>.</p>
<pre><code>kde(data, midpoints::R, dist::Distribution) where R&lt;:AbstractRange
</code></pre>
<p>allows specifying both the distribution and grid.</p>
<h3><a id="user-content-bivariate" class="anchor" aria-hidden="true" href="#bivariate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bivariate</h3>
<p>The usage mirrors that of the univariate case, except that <code>data</code> is now
either a tuple of vectors</p>
<pre><code>B = kde((xdata, ydata))
</code></pre>
<p>or a matrix with two columns</p>
<pre><code>B = kde(datamatrix)
</code></pre>
<p>Similarly, the optional arguments all now take tuple arguments:
e.g. <code>boundary</code> now takes a tuple of tuples <code>((xlo,xhi),(ylo,yhi))</code>.</p>
<p>The <code>BivariateKDE</code> object <code>B</code> contains gridded coordinates (<code>B.x</code> and <code>B.y</code>) and the bivariate density
estimate (<code>B.density</code>).</p>
<h3><a id="user-content-interpolation" class="anchor" aria-hidden="true" href="#interpolation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interpolation</h3>
<p>The KDE objects are stored as gridded density values, with attached
coordinates. These are typically sufficient for plotting (see above), but
intermediate values can be interpolated using the
<a href="https://github.com/tlycken/Interpolations.jl">Interpolations.jl</a> package via the <code>pdf</code> method
(extended from Distributions.jl).</p>
<pre><code>pdf(k::UnivariateKDE, x)
pdf(k::BivariateKDE, x, y)
</code></pre>
<p>where <code>x</code> and <code>y</code> are real numbers or arrays.</p>
<p>If you are making multiple calls to <code>pdf</code>, it will be more efficient to
construct an intermediate <code>InterpKDE</code> to store the interpolation structure:</p>
<pre><code>ik = InterpKDE(k)
pdf(ik, x)
</code></pre>
<p><code>InterpKDE</code> will pass any extra arguments to <code>interpolate</code>.</p>
</article></div>