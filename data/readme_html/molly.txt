<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mollyjl" class="anchor" aria-hidden="true" href="#mollyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Molly.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaMolSim/Molly.jl/actions"><img src="https://github.com/JuliaMolSim/Molly.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaMolSim/Molly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0068b3c6206581dfac1c82dc20384612cc472f0f66dfb914933cd582dcde0700/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6f6c53696d2f4d6f6c6c792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5244395846305739304c" alt="Coverage status" data-canonical-src="https://codecov.io/gh/JuliaMolSim/Molly.jl/branch/master/graph/badge.svg?token=RD9XF0W90L" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMolSim/Molly.jl/releases/latest"><img src="https://camo.githubusercontent.com/cfb7b3dcb3432b51b5d3c32e04cb9d5c2c4f2e348eeca98b810f38a3049a9993/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c69614d6f6c53696d2f4d6f6c6c792e6a6c2e737667" alt="Latest release" data-canonical-src="https://img.shields.io/github/release/JuliaMolSim/Molly.jl.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaMolSim/Molly.jl/blob/master/LICENSE.md"><img src="https://camo.githubusercontent.com/45b4ffbd594af47fe09a3432f9f8e122c6518aa6352b4ce453a1a2563da2905c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-green.svg" style="max-width: 100%;"></a>
<a href="https://JuliaMolSim.github.io/Molly.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaMolSim.github.io/Molly.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Much of science can be explained by the movement and interaction of molecules.
Molecular dynamics (MD) is a computational technique used to explore these phenomena, from noble gases to biological macromolecules.
Molly.jl is a pure Julia package for MD, and for the simulation of physical systems more broadly.</p>
<p dir="auto">The package is described in <a href="https://youtu.be/trapn-yIv8g?t=1889" rel="nofollow">a talk</a> at the <a href="https://juliamolsim.github.io" rel="nofollow">JuliaMolSim</a> minisymposium at JuliaCon 2022, and also in <a href="https://www.youtube.com/live/NB7xUHQNox8?feature=share&amp;t=9018" rel="nofollow">a more recent talk</a> at Enzyme Conference 2023.
Implemented features include:</p>
<ul dir="auto">
<li>Non-bonded interactions - Lennard-Jones Van der Waals/repulsion force, electrostatic Coulomb potential and reaction field, gravitational potential, soft sphere potential, Mie potential, Buckingham potential, soft core variants.</li>
<li>Bonded interactions - harmonic and Morse bonds, bond angles, torsion angles, harmonic position restraints, FENE bonds.</li>
<li>Interface to allow definition of new interactions, simulators, thermostats, neighbor finders, loggers etc.</li>
<li>Read in OpenMM force field files and coordinate files supported by <a href="https://github.com/chemfiles/Chemfiles.jl">Chemfiles.jl</a>. There is also experimental support for Gromacs files.</li>
<li>Verlet, velocity Verlet, Störmer-Verlet, flexible Langevin and Nosé-Hoover integrators.</li>
<li>Andersen, Berendsen and velocity rescaling thermostats.</li>
<li>Monte Carlo barostat.</li>
<li>Steepest descent energy minimization.</li>
<li>Replica exchange molecular dynamics.</li>
<li>Monte Carlo simulation.</li>
<li>Periodic, triclinic and infinite boundary conditions.</li>
<li>Flexible loggers to track arbitrary properties throughout simulations.</li>
<li>Cutoff algorithms for non-bonded interactions.</li>
<li>Various neighbor list implementations to speed up the calculation of non-bonded forces, including the use of <a href="https://github.com/m3g/CellListMap.jl">CellListMap.jl</a>.</li>
<li>Implicit solvent GBSA methods.</li>
<li><a href="https://github.com/PainterQubits/Unitful.jl">Unitful.jl</a> compatibility so numbers have physical meaning.</li>
<li>Automatic multithreading.</li>
<li>GPU acceleration on CUDA-enabled devices.</li>
<li>Run with Float64, Float32 or other float types.</li>
<li>Some analysis functions, e.g. RDF.</li>
<li>Visualise simulations as animations with <a href="https://makie.juliaplots.org/stable" rel="nofollow">Makie.jl</a>.</li>
<li>Differentiable molecular simulation. This is a unique feature of the package and the focus of its current development.</li>
</ul>
<p dir="auto">Features not yet implemented include:</p>
<ul dir="auto">
<li>High GPU performance.</li>
<li>Ewald or particle mesh Ewald summation.</li>
<li>Constrained bonds and angles.</li>
<li>Protein preparation - solvent box, add hydrogens etc.</li>
<li>Simulators such as metadynamics.</li>
<li>Quantum mechanical modelling.</li>
<li>Domain decomposition algorithms.</li>
<li>Alchemical free energy calculations.</li>
<li>High test coverage.</li>
<li>API stability.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><a href="https://julialang.org/downloads" rel="nofollow">Julia</a> is required, with Julia v1.7 or later required to get the latest version of Molly.
It is recommended to run on the current stable Julia release for the best performance.
Install Molly from the Julia REPL.
Enter the package mode by pressing <code>]</code> and run <code>add Molly</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Some examples are given here, see <a href="https://juliamolsim.github.io/Molly.jl/stable/docs" rel="nofollow">the documentation</a> for more on how to use the package.</p>
<p dir="auto">Simulation of a Lennard-Jones fluid:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Molly

n_atoms = 100
boundary = CubicBoundary(2.0u&quot;nm&quot;)
temp = 298.0u&quot;K&quot;
atom_mass = 10.0u&quot;u&quot;

atoms = [Atom(mass=atom_mass, σ=0.3u&quot;nm&quot;, ϵ=0.2u&quot;kJ * mol^-1&quot;) for i in 1:n_atoms]
coords = place_atoms(n_atoms, boundary; min_dist=0.3u&quot;nm&quot;)
velocities = [random_velocity(atom_mass, temp) for i in 1:n_atoms]
pairwise_inters = (LennardJones(),)
simulator = VelocityVerlet(
    dt=0.002u&quot;ps&quot;,
    coupling=AndersenThermostat(temp, 1.0u&quot;ps&quot;),
)

sys = System(
    atoms=atoms,
    coords=coords,
    boundary=boundary,
    velocities=velocities,
    pairwise_inters=pairwise_inters,
    loggers=(temp=TemperatureLogger(100),),
)

simulate!(sys, simulator, 10_000)"><pre><span class="pl-k">using</span> Molly

n_atoms <span class="pl-k">=</span> <span class="pl-c1">100</span>
boundary <span class="pl-k">=</span> <span class="pl-c1">CubicBoundary</span>(<span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>nm<span class="pl-pds">"</span></span>)
temp <span class="pl-k">=</span> <span class="pl-c1">298.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>K<span class="pl-pds">"</span></span>
atom_mass <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>u<span class="pl-pds">"</span></span>

atoms <span class="pl-k">=</span> [<span class="pl-c1">Atom</span>(mass<span class="pl-k">=</span>atom_mass, σ<span class="pl-k">=</span><span class="pl-c1">0.3</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>nm<span class="pl-pds">"</span></span>, ϵ<span class="pl-k">=</span><span class="pl-c1">0.2</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kJ * mol^-1<span class="pl-pds">"</span></span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
coords <span class="pl-k">=</span> <span class="pl-c1">place_atoms</span>(n_atoms, boundary; min_dist<span class="pl-k">=</span><span class="pl-c1">0.3</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>nm<span class="pl-pds">"</span></span>)
velocities <span class="pl-k">=</span> [<span class="pl-c1">random_velocity</span>(atom_mass, temp) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
pairwise_inters <span class="pl-k">=</span> (<span class="pl-c1">LennardJones</span>(),)
simulator <span class="pl-k">=</span> <span class="pl-c1">VelocityVerlet</span>(
    dt<span class="pl-k">=</span><span class="pl-c1">0.002</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ps<span class="pl-pds">"</span></span>,
    coupling<span class="pl-k">=</span><span class="pl-c1">AndersenThermostat</span>(temp, <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ps<span class="pl-pds">"</span></span>),
)

sys <span class="pl-k">=</span> <span class="pl-c1">System</span>(
    atoms<span class="pl-k">=</span>atoms,
    coords<span class="pl-k">=</span>coords,
    boundary<span class="pl-k">=</span>boundary,
    velocities<span class="pl-k">=</span>velocities,
    pairwise_inters<span class="pl-k">=</span>pairwise_inters,
    loggers<span class="pl-k">=</span>(temp<span class="pl-k">=</span><span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">100</span>),),
)

<span class="pl-c1">simulate!</span>(sys, simulator, <span class="pl-c1">10_000</span>)</pre></div>
<p dir="auto">Simulation of a protein:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Molly

sys = System(
    joinpath(dirname(pathof(Molly)), &quot;..&quot;, &quot;data&quot;, &quot;5XER&quot;, &quot;gmx_coords.gro&quot;),
    joinpath(dirname(pathof(Molly)), &quot;..&quot;, &quot;data&quot;, &quot;5XER&quot;, &quot;gmx_top_ff.top&quot;);
    loggers=(
        temp=TemperatureLogger(10),
        writer=StructureWriter(10, &quot;traj_5XER_1ps.pdb&quot;),
    ),
)

temp = 298.0u&quot;K&quot;
random_velocities!(sys, temp)
simulator = VelocityVerlet(
    dt=0.0002u&quot;ps&quot;,
    coupling=AndersenThermostat(temp, 1.0u&quot;ps&quot;),
)

simulate!(sys, simulator, 5_000)"><pre><span class="pl-k">using</span> Molly

sys <span class="pl-k">=</span> <span class="pl-c1">System</span>(
    <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Molly)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5XER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gmx_coords.gro<span class="pl-pds">"</span></span>),
    <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Molly)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5XER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gmx_top_ff.top<span class="pl-pds">"</span></span>);
    loggers<span class="pl-k">=</span>(
        temp<span class="pl-k">=</span><span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">10</span>),
        writer<span class="pl-k">=</span><span class="pl-c1">StructureWriter</span>(<span class="pl-c1">10</span>, <span class="pl-s"><span class="pl-pds">"</span>traj_5XER_1ps.pdb<span class="pl-pds">"</span></span>),
    ),
)

temp <span class="pl-k">=</span> <span class="pl-c1">298.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>K<span class="pl-pds">"</span></span>
<span class="pl-c1">random_velocities!</span>(sys, temp)
simulator <span class="pl-k">=</span> <span class="pl-c1">VelocityVerlet</span>(
    dt<span class="pl-k">=</span><span class="pl-c1">0.0002</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ps<span class="pl-pds">"</span></span>,
    coupling<span class="pl-k">=</span><span class="pl-c1">AndersenThermostat</span>(temp, <span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>ps<span class="pl-pds">"</span></span>),
)

<span class="pl-c1">simulate!</span>(sys, simulator, <span class="pl-c1">5_000</span>)</pre></div>
<p dir="auto">The above 1 ps simulation looks something like this when you view it in <a href="https://www.ks.uiuc.edu/Research/vmd" rel="nofollow">VMD</a>:
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMolSim/Molly.jl/raw/master/data/5XER/sim_1ps.gif"><img src="https://github.com/JuliaMolSim/Molly.jl/raw/master/data/5XER/sim_1ps.gif" alt="MD simulation" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Contributions are very welcome - see the <a href="https://github.com/JuliaMolSim/Molly.jl/issues/2" data-hovercard-type="issue" data-hovercard-url="/JuliaMolSim/Molly.jl/issues/2/hovercard">roadmap issue</a> for more.</p>
<p dir="auto">Join the #molly channel on the <a href="https://juliamolsim.zulipchat.com/join/j5sqhiajbma5hw55hy6wtzv7" rel="nofollow">JuliaMolSim Zulip</a> to discuss the usage and development of Molly.jl, or post on the <a href="https://discourse.julialang.org" rel="nofollow">Julia Discourse</a>.</p>
</article></div>