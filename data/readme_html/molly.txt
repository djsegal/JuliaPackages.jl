<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mollyjl" class="anchor" aria-hidden="true" href="#mollyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Molly.jl</h1>
<p><a href="https://github.com/JuliaMolSim/Molly.jl/actions"><img src="https://github.com/JuliaMolSim/Molly.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaMolSim/Molly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0068b3c6206581dfac1c82dc20384612cc472f0f66dfb914933cd582dcde0700/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d6f6c53696d2f4d6f6c6c792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5244395846305739304c" alt="Coverage status" data-canonical-src="https://codecov.io/gh/JuliaMolSim/Molly.jl/branch/master/graph/badge.svg?token=RD9XF0W90L" style="max-width:100%;"></a>
<a href="https://github.com/JuliaMolSim/Molly.jl/releases/latest"><img src="https://camo.githubusercontent.com/cfb7b3dcb3432b51b5d3c32e04cb9d5c2c4f2e348eeca98b810f38a3049a9993/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c69614d6f6c53696d2f4d6f6c6c792e6a6c2e737667" alt="Latest release" data-canonical-src="https://img.shields.io/github/release/JuliaMolSim/Molly.jl.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaMolSim/Molly.jl/blob/master/LICENSE.md"><img src="https://camo.githubusercontent.com/45b4ffbd594af47fe09a3432f9f8e122c6518aa6352b4ce453a1a2563da2905c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-green.svg" style="max-width:100%;"></a>
<a href="https://JuliaMolSim.github.io/Molly.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaMolSim.github.io/Molly.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Much of science can be explained by the movement and interaction of molecules.
Molecular dynamics (MD) is a computational technique used to explore these phenomena, from noble gases to biological macromolecules.
Molly.jl is a pure Julia package for MD, and for the simulation of physical systems more broadly.</p>
<p>At the minute the package is a proof of concept for MD in Julia.
<strong>It is not production ready.</strong>
It can simulate a system of atoms with arbitrary interactions as defined by the user.
Implemented features include:</p>
<ul>
<li>Interface to allow definition of new forces, simulators, thermostats, neighbor finders, loggers etc.</li>
<li>Read in pre-computed Gromacs topology and coordinate files with the OPLS-AA forcefield and run MD on proteins with given parameters. In theory it can do this for any regular protein, but in practice this is untested.</li>
<li>Non-bonded interactions - Lennard-Jones Van der Waals/repulsion force, electrostatic Coulomb potential, gravitational potential, soft sphere potential, Mie potential.</li>
<li>Bonded interactions - covalent bonds, bond angles, torsion angles.</li>
<li>Andersen thermostat.</li>
<li>Velocity Verlet and velocity-free Verlet integration.</li>
<li>Explicit solvent.</li>
<li>Periodic boundary conditions in a cubic box.</li>
<li>Neighbor list to speed up calculation of non-bonded forces.</li>
<li>Automatic multithreading.</li>
<li>GPU acceleration on CUDA-enabled devices.</li>
<li>Run with Float64 or Float32.</li>
<li>Some analysis functions, e.g. RDF.</li>
<li>Physical agent-based modelling.</li>
<li>Visualise simulations as animations.</li>
<li>Differentiable molecular simulation on an experimental branch - see the <a href="https://juliamolsim.github.io/Molly.jl/dev/differentiable" rel="nofollow">relevant docs</a>.</li>
</ul>
<p>Features not yet implemented include:</p>
<ul>
<li>Protein force fields other than OPLS-AA.</li>
<li>Water models.</li>
<li>Energy minimisation.</li>
<li>Other temperature or pressure coupling methods.</li>
<li>Cell-based neighbor list.</li>
<li>Protein preparation - solvent box, add hydrogens etc.</li>
<li>Trajectory/topology file format readers/writers.</li>
<li>Quantum mechanical modelling.</li>
<li>High test coverage.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><a href="https://julialang.org/downloads" rel="nofollow">Julia</a> is required, with Julia v1.6 or later required to get the latest version of Molly.
Install Molly from the Julia REPL.
Enter the package mode by pressing <code>]</code> and run <code>add Molly</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Some examples are given here, see <a href="https://JuliaMolSim.github.io/Molly.jl/stable" rel="nofollow">the documentation</a> for more on how to use the package.</p>
<p>Simulation of a Lennard-Jones gas:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Molly

n_atoms = 100
box_size = 2.0 # nm
temp = 298 # K
mass = 10.0 # Relative atomic mass

atoms = [Atom(mass=mass, σ=0.3, ϵ=0.2) for i in 1:n_atoms]
coords = [box_size .* rand(SVector{3}) for i in 1:n_atoms]
velocities = [velocity(mass, temp) for i in 1:n_atoms]
general_inters = (LennardJones(),)

s = Simulation(
    simulator=VelocityVerlet(),
    atoms=atoms,
    general_inters=general_inters,
    coords=coords,
    velocities=velocities,
    temperature=temp,
    box_size=box_size,
    thermostat=AndersenThermostat(1.0),
    loggers=Dict(&quot;temp&quot; =&gt; TemperatureLogger(100)),
    timestep=0.002, # ps
    n_steps=10_000
)

simulate!(s)
"><pre><span class="pl-k">using</span> Molly

n_atoms <span class="pl-k">=</span> <span class="pl-c1">100</span>
box_size <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-c"><span class="pl-c">#</span> nm</span>
temp <span class="pl-k">=</span> <span class="pl-c1">298</span> <span class="pl-c"><span class="pl-c">#</span> K</span>
mass <span class="pl-k">=</span> <span class="pl-c1">10.0</span> <span class="pl-c"><span class="pl-c">#</span> Relative atomic mass</span>

atoms <span class="pl-k">=</span> [<span class="pl-c1">Atom</span>(mass<span class="pl-k">=</span>mass, σ<span class="pl-k">=</span><span class="pl-c1">0.3</span>, ϵ<span class="pl-k">=</span><span class="pl-c1">0.2</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
coords <span class="pl-k">=</span> [box_size <span class="pl-k">.*</span> <span class="pl-c1">rand</span>(SVector{<span class="pl-c1">3</span>}) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
velocities <span class="pl-k">=</span> [<span class="pl-c1">velocity</span>(mass, temp) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
general_inters <span class="pl-k">=</span> (<span class="pl-c1">LennardJones</span>(),)

s <span class="pl-k">=</span> <span class="pl-c1">Simulation</span>(
    simulator<span class="pl-k">=</span><span class="pl-c1">VelocityVerlet</span>(),
    atoms<span class="pl-k">=</span>atoms,
    general_inters<span class="pl-k">=</span>general_inters,
    coords<span class="pl-k">=</span>coords,
    velocities<span class="pl-k">=</span>velocities,
    temperature<span class="pl-k">=</span>temp,
    box_size<span class="pl-k">=</span>box_size,
    thermostat<span class="pl-k">=</span><span class="pl-c1">AndersenThermostat</span>(<span class="pl-c1">1.0</span>),
    loggers<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>temp<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">100</span>)),
    timestep<span class="pl-k">=</span><span class="pl-c1">0.002</span>, <span class="pl-c"><span class="pl-c">#</span> ps</span>
    n_steps<span class="pl-k">=</span><span class="pl-c1">10_000</span>
)

<span class="pl-c1">simulate!</span>(s)</pre></div>
<p>Simulation of a protein:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Molly

timestep = 0.0002 # ps
temp = 298 # K
n_steps = 5_000

atoms, specific_inter_lists, general_inters, nb_matrix, coords, box_size = readinputs(
            joinpath(dirname(pathof(Molly)), &quot;..&quot;, &quot;data&quot;, &quot;5XER&quot;, &quot;gmx_top_ff.top&quot;),
            joinpath(dirname(pathof(Molly)), &quot;..&quot;, &quot;data&quot;, &quot;5XER&quot;, &quot;gmx_coords.gro&quot;))

s = Simulation(
    simulator=VelocityVerlet(),
    atoms=atoms,
    specific_inter_lists=specific_inter_lists,
    general_inters=general_inters,
    coords=coords,
    velocities=[velocity(a.mass, temp) for a in atoms],
    temperature=temp,
    box_size=box_size,
    neighbor_finder=DistanceNeighborFinder(nb_matrix, 10),
    thermostat=AndersenThermostat(1.0),
    loggers=Dict(&quot;temp&quot; =&gt; TemperatureLogger(10),
                    &quot;writer&quot; =&gt; StructureWriter(10, &quot;traj_5XER_1ps.pdb&quot;)),
    timestep=timestep,
    n_steps=n_steps
)

simulate!(s)
"><pre><span class="pl-k">using</span> Molly

timestep <span class="pl-k">=</span> <span class="pl-c1">0.0002</span> <span class="pl-c"><span class="pl-c">#</span> ps</span>
temp <span class="pl-k">=</span> <span class="pl-c1">298</span> <span class="pl-c"><span class="pl-c">#</span> K</span>
n_steps <span class="pl-k">=</span> <span class="pl-c1">5_000</span>

atoms, specific_inter_lists, general_inters, nb_matrix, coords, box_size <span class="pl-k">=</span> <span class="pl-c1">readinputs</span>(
            <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Molly)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5XER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gmx_top_ff.top<span class="pl-pds">"</span></span>),
            <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Molly)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5XER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gmx_coords.gro<span class="pl-pds">"</span></span>))

s <span class="pl-k">=</span> <span class="pl-c1">Simulation</span>(
    simulator<span class="pl-k">=</span><span class="pl-c1">VelocityVerlet</span>(),
    atoms<span class="pl-k">=</span>atoms,
    specific_inter_lists<span class="pl-k">=</span>specific_inter_lists,
    general_inters<span class="pl-k">=</span>general_inters,
    coords<span class="pl-k">=</span>coords,
    velocities<span class="pl-k">=</span>[<span class="pl-c1">velocity</span>(a<span class="pl-k">.</span>mass, temp) <span class="pl-k">for</span> a <span class="pl-k">in</span> atoms],
    temperature<span class="pl-k">=</span>temp,
    box_size<span class="pl-k">=</span>box_size,
    neighbor_finder<span class="pl-k">=</span><span class="pl-c1">DistanceNeighborFinder</span>(nb_matrix, <span class="pl-c1">10</span>),
    thermostat<span class="pl-k">=</span><span class="pl-c1">AndersenThermostat</span>(<span class="pl-c1">1.0</span>),
    loggers<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>temp<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">10</span>),
                    <span class="pl-s"><span class="pl-pds">"</span>writer<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">StructureWriter</span>(<span class="pl-c1">10</span>, <span class="pl-s"><span class="pl-pds">"</span>traj_5XER_1ps.pdb<span class="pl-pds">"</span></span>)),
    timestep<span class="pl-k">=</span>timestep,
    n_steps<span class="pl-k">=</span>n_steps
)

<span class="pl-c1">simulate!</span>(s)</pre></div>
<p>The above 1 ps simulation looks something like this when you view it in <a href="https://www.ks.uiuc.edu/Research/vmd" rel="nofollow">VMD</a>:
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMolSim/Molly.jl/raw/master/data/5XER/sim_1ps.gif"><img src="https://github.com/JuliaMolSim/Molly.jl/raw/master/data/5XER/sim_1ps.gif" alt="MD simulation" style="max-width:100%;"></a></p>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p>Contributions are very welcome - see the <a href="https://github.com/JuliaMolSim/Molly.jl/issues/2">roadmap issue</a> for more.</p>
</article></div>