<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mollyjl" class="anchor" aria-hidden="true" href="#mollyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Molly.jl</h1>
<p><a href="https://travis-ci.org/jgreener64/Molly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7c60e84ff9e3576a946fd0f0326698a41c93ceec/68747470733a2f2f7472617669732d63692e6f72672f6a677265656e657236342f4d6f6c6c792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis build status" data-canonical-src="https://travis-ci.org/jgreener64/Molly.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/jgreener64/molly-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b9a4aaf7e5f18fc3f0bbdc01020603229676551d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f38646c366c7161766e687169677134703f7376673d74727565" alt="AppVeyor build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/8dl6lqavnhqigq4p?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/jgreener64/Molly.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/05b798bc082d1baa3a95462dc9ef72b84212c6ac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a677265656e657236342f4d6f6c6c792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/jgreener64/Molly.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://jgreener64.github.io/Molly.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>Much of science can be explained by the movement and interaction of molecules.
Molecular dynamics (MD) is a computational technique used to explore these phenomena, particularly for biological macromolecules.
Molly.jl is a pure Julia implementation of MD.</p>
<p>At the minute the package is a proof of concept for MD in Julia.
<strong>It is not production ready.</strong>
It can simulate a system of atoms with arbitrary interactions as defined by the user.
It can also read in pre-computed Gromacs topology and coordinate files with the OPLS-AA forcefield and run MD on proteins with given parameters.
In theory it can do this for any regular protein, but in practice this is untested.
Implemented features include:</p>
<ul>
<li>Interface to allow definition of new forces, thermostats etc.</li>
<li>Non-bonded interactions - Lennard-Jones Van der Waals/repulsion force, electrostatic Coulomb potential.</li>
<li>Bonded interactions - covalent bonds, bond angles, dihedral angles.</li>
<li>Andersen thermostat.</li>
<li>Velocity Verlet integration.</li>
<li>Explicit solvent.</li>
<li>Periodic boundary conditions in a cubic box.</li>
<li>Neighbour list to speed up calculation of non-bonded forces.</li>
</ul>
<p>Features not yet implemented include:</p>
<ul>
<li>Speed. Seriously, it's not fast yet - ~20x slower than GROMACS by some rough calculations. For reference most of the computational time in MD is spent in the force calculation, and most of that in calculation of non-bonded forces.</li>
<li>Protein force fields other than OPLS-AA.</li>
<li>Water models.</li>
<li>Energy minimisation.</li>
<li>Other temperature or pressure coupling methods.</li>
<li>Protein preparation - solvent box, add hydrogens etc.</li>
<li>Trajectory/topology file format readers/writers.</li>
<li>Trajectory analysis.</li>
<li>Parallelisation.</li>
<li>GPU compatibility.</li>
<li>Unit tests.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Julia v1.0 or later is required.
Install from the Julia REPL.
Enter the package mode by pressing <code>]</code> and run <code>add https://github.com/jgreener64/Molly.jl</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Some examples are given here, see <a href="https://jgreener64.github.io/Molly.jl/dev" rel="nofollow">the documentation</a> for more.</p>
<p>Simulation of an ideal gas:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Molly

n_atoms <span class="pl-k">=</span> <span class="pl-c1">100</span>
box_size <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-c"><span class="pl-c">#</span> nm</span>
temperature <span class="pl-k">=</span> <span class="pl-c1">298</span> <span class="pl-c"><span class="pl-c">#</span> K</span>
mass <span class="pl-k">=</span> <span class="pl-c1">10.0</span> <span class="pl-c"><span class="pl-c">#</span> Relative atomic mass</span>

atoms <span class="pl-k">=</span> [<span class="pl-c1">Atom</span>(mass<span class="pl-k">=</span>mass, σ<span class="pl-k">=</span><span class="pl-c1">0.3</span>, ϵ<span class="pl-k">=</span><span class="pl-c1">0.2</span>) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
coords <span class="pl-k">=</span> [<span class="pl-c1">Coordinates</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>) <span class="pl-k">.*</span> box_size) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
velocities <span class="pl-k">=</span> [<span class="pl-c1">Velocity</span>(mass, temperature) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_atoms]
general_inters <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>LJ<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">LennardJones</span>())

s <span class="pl-k">=</span> <span class="pl-c1">Simulation</span>(
    simulator<span class="pl-k">=</span><span class="pl-c1">VelocityVerlet</span>(),
    atoms<span class="pl-k">=</span>atoms,
    general_inters<span class="pl-k">=</span>general_inters,
    coords<span class="pl-k">=</span>coords,
    velocities<span class="pl-k">=</span>velocities,
    temperature<span class="pl-k">=</span>temperature,
    box_size<span class="pl-k">=</span>box_size,
    thermostat<span class="pl-k">=</span><span class="pl-c1">AndersenThermostat</span>(<span class="pl-c1">1.0</span>),
    loggers<span class="pl-k">=</span>[<span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">100</span>)],
    timestep<span class="pl-k">=</span><span class="pl-c1">0.002</span>, <span class="pl-c"><span class="pl-c">#</span> ps</span>
    n_steps<span class="pl-k">=</span><span class="pl-c1">100_000</span>
)

<span class="pl-c1">simulate!</span>(s)</pre></div>
<p>Simulation of a protein:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Molly

timestep <span class="pl-k">=</span> <span class="pl-c1">0.0002</span> <span class="pl-c"><span class="pl-c">#</span> ps</span>
temperature <span class="pl-k">=</span> <span class="pl-c1">298</span> <span class="pl-c"><span class="pl-c">#</span> K</span>
n_steps <span class="pl-k">=</span> <span class="pl-c1">5000</span>

atoms, specific_inter_lists, general_inters, nb_matrix, coords, box_size <span class="pl-k">=</span> <span class="pl-c1">readinputs</span>(
            <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Molly)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5XER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gmx_top_ff.top<span class="pl-pds">"</span></span>),
            <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Molly)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>5XER<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>gmx_coords.gro<span class="pl-pds">"</span></span>))

s <span class="pl-k">=</span> <span class="pl-c1">Simulation</span>(
    simulator<span class="pl-k">=</span><span class="pl-c1">VelocityVerlet</span>(),
    atoms<span class="pl-k">=</span>atoms,
    specific_inter_lists<span class="pl-k">=</span>specific_inter_lists,
    general_inters<span class="pl-k">=</span>general_inters,
    coords<span class="pl-k">=</span>coords,
    velocities<span class="pl-k">=</span>[<span class="pl-c1">Velocity</span>(a<span class="pl-k">.</span>mass, temperature) <span class="pl-k">for</span> a <span class="pl-k">in</span> atoms],
    temperature<span class="pl-k">=</span>temperature,
    box_size<span class="pl-k">=</span>box_size,
    neighbour_finder<span class="pl-k">=</span><span class="pl-c1">DistanceNeighbourFinder</span>(nb_matrix, <span class="pl-c1">10</span>),
    thermostat<span class="pl-k">=</span><span class="pl-c1">AndersenThermostat</span>(<span class="pl-c1">1.0</span>),
    loggers<span class="pl-k">=</span>[<span class="pl-c1">TemperatureLogger</span>(<span class="pl-c1">10</span>), <span class="pl-c1">StructureWriter</span>(<span class="pl-c1">10</span>, <span class="pl-s"><span class="pl-pds">"</span>traj_5XER_1ps.pdb<span class="pl-pds">"</span></span>)],
    timestep<span class="pl-k">=</span>timestep,
    n_steps<span class="pl-k">=</span>n_steps
)

<span class="pl-c1">simulate!</span>(s)</pre></div>
<p>The above 1 ps simulation looks something like this when you output view it in VMD:
<a target="_blank" rel="noopener noreferrer" href="https://github.com/jgreener64/Molly.jl/raw/master/data/5XER/sim_1ps.gif"><img src="https://github.com/jgreener64/Molly.jl/raw/master/data/5XER/sim_1ps.gif" alt="MD simulation" style="max-width:100%;"></a></p>
<h2><a id="user-content-plans" class="anchor" aria-hidden="true" href="#plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plans</h2>
<p>I plan to work on this in my spare time, but progress will be slow.
MD could provide a nice use case for Julia - I think a reasonably featured and performant MD program could be written in fewer than 1,000 lines of code for example.
Julia is also a well-suited language for trajectory analysis.</p>
<p>Contributions are very welcome - see the <a href="https://github.com/jgreener64/Molly.jl/issues/2">roadmap issue</a> for more.</p>
</article></div>