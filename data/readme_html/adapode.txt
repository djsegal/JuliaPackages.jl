<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/logo.png"><img src="./docs/src/assets/logo.png" alt="DirectSum.jl" style="max-width: 100%;"></a>
</p>
<h1 dir="auto"><a id="user-content-adapodejl" class="anchor" aria-hidden="true" href="#adapodejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adapode.jl</h1>
<p dir="auto"><em>Adaptive multistep numerical ODE solver based on <a href="https://github.com/chakravala/Grassmann.jl">Grassmann.jl</a> element assembly</em></p>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/223493781" rel="nofollow"><img src="https://camo.githubusercontent.com/71c11565eac37ef8795fe321692e36fdefd215396cd5673b9dbbe9f72c78e56e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3232333439333738312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/223493781.svg" style="max-width: 100%;"></a>
<a href="https://grassmann.crucialflow.com/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://grassmann.crucialflow.com/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://gitter.im/Grassmann-jl/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/6316ebac4340c05259f11a6888bc02b857043a3a2ffd7f108c94852b52894d91/68747470733a2f2f6261646765732e6769747465722e696d2f47726173736d616e6e2d6a6c2f636f6d6d756e6974792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Grassmann-jl/community.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/chakravala/Adapode.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/12443080a0d1a702f7e3756671253e81bb8c28acf86f248ba55ac3f5ab71dd8d/68747470733a2f2f7472617669732d63692e6f72672f6368616b726176616c612f416461706f64652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chakravala/Adapode.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/chakravala/adapode-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99afe2296815d98b5282b010dc06f2583031110af9ea5f02112d9dc435c36670/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f77707534337139326f303661666930613f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/wpu43q92o06afi0a?svg=true" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/chakravala/Adapode.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1ebb346cc53675e9def5cd3ba393e751e30cee9327fb64837c326dc79553a41e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6368616b726176616c612f416461706f64652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/chakravala/Adapode.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/chakravala/Adapode.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/36f4fa387b1a35d64c4b1a02e08045c77624d93ce94af5e930d1857c94fad8cb/68747470733a2f2f636f6465636f762e696f2f6769746875622f6368616b726176616c612f416461706f64652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/chakravala/Adapode.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This Julia project originally started as a FORTRAN 95 project called <a href="https://github.com/chakravala/adapode">adapode</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Grassmann, Adapode, Makie
basis&quot;4&quot;; x0 = 10.0v2+10.0v3+10.0v4
Lorenz(x::Chain{V}) where V = Chain{V,1}(
	1.0,
	10.0(x[3]-x[2]),
	x[2]*(28.0-x[4])-x[3],
	x[2]*x[3]-(8/3)*x[4])
lines(Point.((V(2,3,4)).(odesolve(Lorenz,x0))))"><pre><span class="pl-k">using</span> Grassmann, Adapode, Makie
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">basis</span>"</span>4<span class="pl-pds">"</span></span>; x0 <span class="pl-k">=</span> <span class="pl-c1">10.0</span>v2<span class="pl-k">+</span><span class="pl-c1">10.0</span>v3<span class="pl-k">+</span><span class="pl-c1">10.0</span>v4
<span class="pl-en">Lorenz</span>(x<span class="pl-k">::</span><span class="pl-c1">Chain{V}</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> <span class="pl-c1">Chain</span><span class="pl-c1">{V,1}</span>(
	<span class="pl-c1">1.0</span>,
	<span class="pl-c1">10.0</span>(x[<span class="pl-c1">3</span>]<span class="pl-k">-</span>x[<span class="pl-c1">2</span>]),
	x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>x[<span class="pl-c1">4</span>])<span class="pl-k">-</span>x[<span class="pl-c1">3</span>],
	x[<span class="pl-c1">2</span>]<span class="pl-k">*</span>x[<span class="pl-c1">3</span>]<span class="pl-k">-</span>(<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>x[<span class="pl-c1">4</span>])
<span class="pl-c1">lines</span>(<span class="pl-c1">Point</span>.((<span class="pl-c1">V</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))<span class="pl-k">.</span>(<span class="pl-c1">odesolve</span>(Lorenz,x0))))</pre></div>
<p dir="auto">Supported ODE solvers include:
explicit Euler,
Heun's method (improved Euler),
Midpoint 2nd order RK,
Kutta's 3rd order RK,
classical 4th order Runge-Kuta,
adaptive Heun-Euler,
adaptive Bogacki-Shampine RK23,
adaptive Fehlberg RK45,
adaptive Cash-Karp RK45,
adaptive Dormand-Prince RK45,
multistep Adams-Bashforth-Moulton 2nd,3rd,4th,5th order,
adaptive multistep ABM 2nd,3rd,4th,5th order.</p>
<p dir="auto">It is possible to work with L2 projection on a mesh with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="L2Projector(t,f;args...) = mesh(t,color=\(assemblemassfunction(t,f)...);args...)
L2Projector(initmesh(0:1/5:1)[3],x-&gt;x[2]*sin(x[2]))
L2Projector(initmesh(0:1/5:1)[3],x-&gt;2x[2]*sin(2π*x[2])+3)"><pre><span class="pl-en">L2Projector</span>(t,f;args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">mesh</span>(t,color<span class="pl-k">=</span><span class="pl-k">\</span>(<span class="pl-c1">assemblemassfunction</span>(t,f)<span class="pl-k">...</span>);args<span class="pl-k">...</span>)
<span class="pl-c1">L2Projector</span>(<span class="pl-c1">initmesh</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">1</span>)[<span class="pl-c1">3</span>],x<span class="pl-k">-&gt;</span>x[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">sin</span>(x[<span class="pl-c1">2</span>]))
<span class="pl-c1">L2Projector</span>(<span class="pl-c1">initmesh</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">1</span>)[<span class="pl-c1">3</span>],x<span class="pl-k">-&gt;</span><span class="pl-c1">2</span>x[<span class="pl-c1">2</span>]<span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">2</span>π<span class="pl-k">*</span>x[<span class="pl-c1">2</span>])<span class="pl-k">+</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">Partial differential equations can also be assembled with various additional methods:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="PoissonSolver(p,e,t,c,f,κ,gD=1,gN=0) = mesh(t,color=solvepoisson(t,e,c,f,κ,gD,gN))
function solvepoisson(t,e,c,f,κ,gD=0,gN=0)
    m = volumes(t)
    b = assemblefunction(t,f,m)
    A = assemblestiffness(t,c,m)
    R,r = assemblerobin(e,κ,gD,gN)
    return (A+R)\(b+r)
end
function solveSD(t,e,c,f,δ,κ,gD=0,gN=0)
    m = volumes(t)
    g = gradienthat(t,m)
    A = assemblestiffness(t,c,m,g)
    b = means(t,f)
    C = assembleconvection(t,b,m,g)
    Sd = assembleSD(t,sqrt(δ)*b,m,g)
    R,r = assemblerobin(e,κ,gD,gN)
    return (A+R-C'+Sd)\r
end
function solvetransport(t,e,c,ϵ=0.1)
    m = volumes(t)
    g = gradienthat(t,m)
    A = assemblestiffness(t,ϵ,m,g)
    b = assembleload(t,m)
    C = assembleconvection(t,c,m,g)
    return solvedirichlet(A+C,b,e)
end"><pre><span class="pl-en">PoissonSolver</span>(p,e,t,c,f,κ,gD<span class="pl-k">=</span><span class="pl-c1">1</span>,gN<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-k">=</span> <span class="pl-c1">mesh</span>(t,color<span class="pl-k">=</span><span class="pl-c1">solvepoisson</span>(t,e,c,f,κ,gD,gN))
<span class="pl-k">function</span> <span class="pl-en">solvepoisson</span>(t,e,c,f,κ,gD<span class="pl-k">=</span><span class="pl-c1">0</span>,gN<span class="pl-k">=</span><span class="pl-c1">0</span>)
    m <span class="pl-k">=</span> <span class="pl-c1">volumes</span>(t)
    b <span class="pl-k">=</span> <span class="pl-c1">assemblefunction</span>(t,f,m)
    A <span class="pl-k">=</span> <span class="pl-c1">assemblestiffness</span>(t,c,m)
    R,r <span class="pl-k">=</span> <span class="pl-c1">assemblerobin</span>(e,κ,gD,gN)
    <span class="pl-k">return</span> (A<span class="pl-k">+</span>R)<span class="pl-k">\</span>(b<span class="pl-k">+</span>r)
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">solveSD</span>(t,e,c,f,δ,κ,gD<span class="pl-k">=</span><span class="pl-c1">0</span>,gN<span class="pl-k">=</span><span class="pl-c1">0</span>)
    m <span class="pl-k">=</span> <span class="pl-c1">volumes</span>(t)
    g <span class="pl-k">=</span> <span class="pl-c1">gradienthat</span>(t,m)
    A <span class="pl-k">=</span> <span class="pl-c1">assemblestiffness</span>(t,c,m,g)
    b <span class="pl-k">=</span> <span class="pl-c1">means</span>(t,f)
    C <span class="pl-k">=</span> <span class="pl-c1">assembleconvection</span>(t,b,m,g)
    Sd <span class="pl-k">=</span> <span class="pl-c1">assembleSD</span>(t,<span class="pl-c1">sqrt</span>(δ)<span class="pl-k">*</span>b,m,g)
    R,r <span class="pl-k">=</span> <span class="pl-c1">assemblerobin</span>(e,κ,gD,gN)
    <span class="pl-k">return</span> (A<span class="pl-k">+</span>R<span class="pl-k">-</span>C<span class="pl-k">'</span><span class="pl-k">+</span>Sd)<span class="pl-k">\</span>r
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">solvetransport</span>(t,e,c,ϵ<span class="pl-k">=</span><span class="pl-c1">0.1</span>)
    m <span class="pl-k">=</span> <span class="pl-c1">volumes</span>(t)
    g <span class="pl-k">=</span> <span class="pl-c1">gradienthat</span>(t,m)
    A <span class="pl-k">=</span> <span class="pl-c1">assemblestiffness</span>(t,ϵ,m,g)
    b <span class="pl-k">=</span> <span class="pl-c1">assembleload</span>(t,m)
    C <span class="pl-k">=</span> <span class="pl-c1">assembleconvection</span>(t,c,m,g)
    <span class="pl-k">return</span> <span class="pl-c1">solvedirichlet</span>(A<span class="pl-k">+</span>C,b,e)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Such modular methods can work on input meshes of any dimension.
The following examples are based on trivially generated 1 dimensional domains:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function BackwardEulerHeat1D()
    x,m = 0:0.01:1,100; p,e,t = initmesh(x)
    T = range(0,0.5,length=m+1) # time grid
    ξ = 0.5.-abs.(0.5.-x) # initial condition
    A = assemblestiffness(t) # assemble(t,1,2x)
    M,b = assemblemassfunction(t,2x).+assemblerobin(e,1e6,0,0)
    h = Float64(T.step); LHS = M+h*A # time step
    for l ∈ 1:m
        ξ = LHS\(M*ξ+h*b); l%10==0 &amp;&amp; println(l*h)
    end
    mesh(t,color=ξ)
end
function PoissonAdaptive(g,p,e,t,c=1,a=0,f=1)
    ϵ = 1.0
    while ϵ &gt; 5e-5 &amp;&amp; length(t) &lt; 10000
        m = volumes(t)
        h = gradienthat(t,m)
        A,M,b = assemble(t,c,a,f,m,h)
        ξ = solvedirichlet(A+M,b,e)
        η = jumps(t,c,a,f,ξ,m,h)
        display(mesh(t,color=ξ,shading=false))
        if typeof(g)&lt;:AbstractRange
            scatter!(p,ξ,markersize=0.01)
        else
            wireframe!(t,color=(:red,0.6),linewidth=3)
        end
        ϵ = sqrt(norm(η)^2/length(η))
        println(t,&quot;, ϵ=$ϵ, α=$(ϵ/maximum(η))&quot;); sleep(0.5)
        refinemesh!(g,p,e,t,select(η,ϵ),&quot;regular&quot;)
    end
    return g,p,e,t
end
PoissonAdaptive(refinemesh(0:0.25:1)...,1,0,x-&gt;exp(-100abs2(x[2]-0.5)))"><pre><span class="pl-k">function</span> <span class="pl-en">BackwardEulerHeat1D</span>()
    x,m <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">1</span>,<span class="pl-c1">100</span>; p,e,t <span class="pl-k">=</span> <span class="pl-c1">initmesh</span>(x)
    T <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0.5</span>,length<span class="pl-k">=</span>m<span class="pl-k">+</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> time grid</span>
    ξ <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">.-</span><span class="pl-c1">abs</span>.(<span class="pl-c1">0.5</span><span class="pl-k">.-</span>x) <span class="pl-c"><span class="pl-c">#</span> initial condition</span>
    A <span class="pl-k">=</span> <span class="pl-c1">assemblestiffness</span>(t) <span class="pl-c"><span class="pl-c">#</span> assemble(t,1,2x)</span>
    M,b <span class="pl-k">=</span> <span class="pl-c1">assemblemassfunction</span>(t,<span class="pl-c1">2</span>x)<span class="pl-k">.+</span><span class="pl-c1">assemblerobin</span>(e,<span class="pl-c1">1e6</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)
    h <span class="pl-k">=</span> <span class="pl-c1">Float64</span>(T<span class="pl-k">.</span>step); LHS <span class="pl-k">=</span> M<span class="pl-k">+</span>h<span class="pl-k">*</span>A <span class="pl-c"><span class="pl-c">#</span> time step</span>
    <span class="pl-k">for</span> l <span class="pl-k">∈</span> <span class="pl-c1">1</span><span class="pl-k">:</span>m
        ξ <span class="pl-k">=</span> LHS<span class="pl-k">\</span>(M<span class="pl-k">*</span>ξ<span class="pl-k">+</span>h<span class="pl-k">*</span>b); l<span class="pl-k">%</span><span class="pl-c1">10</span><span class="pl-k">==</span><span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">println</span>(l<span class="pl-k">*</span>h)
    <span class="pl-k">end</span>
    <span class="pl-c1">mesh</span>(t,color<span class="pl-k">=</span>ξ)
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">PoissonAdaptive</span>(g,p,e,t,c<span class="pl-k">=</span><span class="pl-c1">1</span>,a<span class="pl-k">=</span><span class="pl-c1">0</span>,f<span class="pl-k">=</span><span class="pl-c1">1</span>)
    ϵ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    <span class="pl-k">while</span> ϵ <span class="pl-k">&gt;</span> <span class="pl-c1">5e-5</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">length</span>(t) <span class="pl-k">&lt;</span> <span class="pl-c1">10000</span>
        m <span class="pl-k">=</span> <span class="pl-c1">volumes</span>(t)
        h <span class="pl-k">=</span> <span class="pl-c1">gradienthat</span>(t,m)
        A,M,b <span class="pl-k">=</span> <span class="pl-c1">assemble</span>(t,c,a,f,m,h)
        ξ <span class="pl-k">=</span> <span class="pl-c1">solvedirichlet</span>(A<span class="pl-k">+</span>M,b,e)
        η <span class="pl-k">=</span> <span class="pl-c1">jumps</span>(t,c,a,f,ξ,m,h)
        <span class="pl-c1">display</span>(<span class="pl-c1">mesh</span>(t,color<span class="pl-k">=</span>ξ,shading<span class="pl-k">=</span><span class="pl-c1">false</span>))
        <span class="pl-k">if</span> <span class="pl-c1">typeof</span>(g)<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractRange</span>
            <span class="pl-c1">scatter!</span>(p,ξ,markersize<span class="pl-k">=</span><span class="pl-c1">0.01</span>)
        <span class="pl-k">else</span>
            <span class="pl-c1">wireframe!</span>(t,color<span class="pl-k">=</span>(<span class="pl-c1">:red</span>,<span class="pl-c1">0.6</span>),linewidth<span class="pl-k">=</span><span class="pl-c1">3</span>)
        <span class="pl-k">end</span>
        ϵ <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">norm</span>(η)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">length</span>(η))
        <span class="pl-c1">println</span>(t,<span class="pl-s"><span class="pl-pds">"</span>, ϵ=<span class="pl-v">$ϵ</span>, α=<span class="pl-v">$(ϵ<span class="pl-k">/</span><span class="pl-c1">maximum</span>(η))</span><span class="pl-pds">"</span></span>); <span class="pl-c1">sleep</span>(<span class="pl-c1">0.5</span>)
        <span class="pl-c1">refinemesh!</span>(g,p,e,t,<span class="pl-c1">select</span>(η,ϵ),<span class="pl-s"><span class="pl-pds">"</span>regular<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> g,p,e,t
<span class="pl-k">end</span>
<span class="pl-c1">PoissonAdaptive</span>(<span class="pl-c1">refinemesh</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.25</span><span class="pl-k">:</span><span class="pl-c1">1</span>)<span class="pl-k">...</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,x<span class="pl-k">-&gt;</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">100</span><span class="pl-c1">abs2</span>(x[<span class="pl-c1">2</span>]<span class="pl-k">-</span><span class="pl-c1">0.5</span>)))</pre></div>
<p dir="auto">More general problems for finite element boundary value problems are also enabled by mesh representations imported from external sources.
These methods can automatically generalize to higher dimensional manifolds and are compatible with discrete differential geometry.</p>
</article></div>