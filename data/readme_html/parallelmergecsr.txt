<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-parallelmergecsrjl" class="anchor" aria-hidden="true" href="#parallelmergecsrjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParallelMergeCSR.jl</h1>
<p dir="auto"><a href="https://github.com/QuEraComputing/Bloqade.jl/actions"><img src="https://github.com/QuEraComputing/Bloqade.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/QuEraComputing/ParallelMergeCSR.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02de9ce0b89c45f97e2175504d822ef470c0b9b092eaf954c7e20990326c191c/68747470733a2f2f636f6465636f762e696f2f67682f5175457261436f6d707574696e672f506172616c6c656c4d657267654353522e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d50305543433543415642" alt="codecov" data-canonical-src="https://codecov.io/gh/QuEraComputing/ParallelMergeCSR.jl/branch/main/graph/badge.svg?token=P0UCC5CAVB" style="max-width: 100%;"></a></p>
<p dir="auto">
An implementation/port of <a href="https://rd.yyrcd.com/CUDA/2022-03-14-Merge-based%20Parallel%20Sparse%20Matrix-Vector%20Multiplication.pdf" rel="nofollow"> Merrill and Garland's Merge-based Parallel Sparse Matrix-Vector Multiplication (10.1109/SC.2016.57) </a> paper in 
the  
    <a href="https://julialang.org" rel="nofollow">
        <img src="https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia.ico" width="16em" style="max-width: 100%;">
        Julia Programming Language
    </a>
     
</p>
<p dir="auto">ParallelMergeCSR allows you to perform <em>multithreaded</em> <a href="https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_.28CSC_or_CCS.29" rel="nofollow">CSC formatted sparse Matrix</a> multiplication against dense vectors and matrices as long as the sparse Matrix has had a <strong>transpose</strong> or <strong>adjoint</strong> operation applied to it via <code>LinearAlgebra</code>, built-in to Julia Base. The reason for this is the original algorithm was restricted to <a href="https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_(CSR,_CRS_or_Yale_format)" rel="nofollow">CSR formatted sparse Matrices</a> but by taking the transpose of a CSC matrix you've created a CSR representation of the same matrix.</p>
<p dir="auto">ParallelMergeCSR only has one function intended for use: <code>mul!</code>, which is used for both Sparse Matrix - Dense Vector and Sparse Matrix - Dense Matrix multiplication. The function is not exported by default to avoid conflict with <code>LinearAlgebra.mul!</code> and must be invoked through its fully qualified name <code>ParallelMergeCSR.mul!</code>.</p>
<h2 dir="auto"><a id="user-content-supported-platforms" class="anchor" aria-hidden="true" href="#supported-platforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported Platforms</h2>
<p dir="auto">ParallelMergeCSR takes advantage of the <a href="https://github.com/JuliaSIMD/Polyester.jl">Polyester.jl</a> package for multithreading support. Unfortunately, Polyester has known issues with working on Mac OS and ParallelMergeCSR should be used on Linux platforms only.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install ParallelMergeCSR through the Julia package manager interface (just hit <code>]</code> when you're in the Julia prompt) by typing the following:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add ParallelMergeCSR"><pre class="notranslate"><code>add ParallelMergeCSR
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Start Julia with the desired number of threads by launching it with the <code>-t</code>/<code>--threads</code> argument:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia --threads &lt;number_of_threads&gt;"><pre class="notranslate"><code>julia --threads &lt;number_of_threads&gt;
</code></pre></div>
<p dir="auto">or setting <code>JULIA_NUM_THREADS</code> in your environment and then running Julia.</p>
<p dir="auto">You can confirm Julia is using the specified number of threads via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Threads.nthreads()"><pre>julia<span class="pl-k">&gt;</span> Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>()</pre></div>
<p dir="auto">You can then use <code>ParallelMergeCSR</code> in a similar fashion to the example below:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ParallelMergeCSR, SparseArrays

# create a 20x20 transposed CSC-formatted Sparse matrix with a 30% chance of values appearing
julia&gt; A = transpose(sprand(20, 20, 0.3));

# dense vector (can be a matrix too)
julia&gt; B = rand(size(A, 2));

# output
julia&gt; C = rand(size(A, 2));

# coefficients
julia&gt; α = -1.0; β = 2.9;

# perform the operation C = ABα + Cβ, mutating C to store the answer
julia&gt; ParallelMergeCSR.mul!(C, A, B, α, β)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ParallelMergeCSR, SparseArrays

<span class="pl-c"><span class="pl-c">#</span> create a 20x20 transposed CSC-formatted Sparse matrix with a 30% chance of values appearing</span>
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">transpose</span>(<span class="pl-c1">sprand</span>(<span class="pl-c1">20</span>, <span class="pl-c1">20</span>, <span class="pl-c1">0.3</span>));

<span class="pl-c"><span class="pl-c">#</span> dense vector (can be a matrix too)</span>
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>));

<span class="pl-c"><span class="pl-c">#</span> output</span>
julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>));

<span class="pl-c"><span class="pl-c">#</span> coefficients</span>
julia<span class="pl-k">&gt;</span> α <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>; β <span class="pl-k">=</span> <span class="pl-c1">2.9</span>;

<span class="pl-c"><span class="pl-c">#</span> perform the operation C = ABα + Cβ, mutating C to store the answer</span>
julia<span class="pl-k">&gt;</span> ParallelMergeCSR<span class="pl-k">.</span><span class="pl-c1">mul!</span>(C, A, B, α, β)</pre></div>
</article></div>