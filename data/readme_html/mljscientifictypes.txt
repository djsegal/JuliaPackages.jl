<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mljscientifictypesjl" class="anchor" aria-hidden="true" href="#mljscientifictypesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MLJScientificTypes.jl</h1>
<table>
<thead>
<tr>
<th align="center">[MacOS/Linux]</th>
<th align="center">Coverage</th>
<th align="center">Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/alan-turing-institute/MLJScientificTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36bb25aaa7f41ab4588f9524ddcdb6f40650daab/68747470733a2f2f7472617669732d63692e6f72672f616c616e2d747572696e672d696e737469747574652f4d4c4a536369656e746966696354797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/alan-turing-institute/MLJScientificTypes.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/alan-turing-institute/MLJScientificTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4eda8e3b27a808ab408f3d64c9b482bc3eebcda5/687474703a2f2f636f6465636f762e696f2f6769746875622f616c616e2d747572696e672d696e737469747574652f4d4c4a536369656e746966696354797065732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/alan-turing-institute/MLJScientificTypes.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://alan-turing-institute.github.io/MLJScientificTypes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Implementation of the MLJ convention for <a href="https://github.com/alan-turing-institute/ScientificTypes.jl">Scientific Types</a>.
Scientific Types allow the distinction between <strong>machine type</strong> and
<strong>scientific type</strong>:</p>
<ul>
<li>the <em>machine type</em> is a Julia type the data is currently encoded as (for instance: <code>Float64</code>)</li>
<li>the <em>scientific type</em> is a type defined by this package which
encapsulates how the data should be <em>interpreted</em> (for instance:
<code>Continuous</code> or <code>Multiclass</code>)</li>
</ul>
<p>Determining what scientific type should be given to what data is determined
by a convention such as the one this package implements which is the one
in use in the <a href="https://github.com/alan-turing-institute/MLJ.jl">MLJ</a> universe.</p>
<h2><a id="user-content-very-quick-start" class="anchor" aria-hidden="true" href="#very-quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Very quick start</h2>
<p>For more information and examples please refer to <a href="https://alan-turing-institute.github.io/MLJScientificTypes.jl/dev" rel="nofollow">the
manual</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MLJScientificTypes, DataFrames
X <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(
    a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>),
    b <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">3.0</span>],
    c <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>],
    d <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>],
    e <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>M<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>, <span class="pl-c1">missing</span>, <span class="pl-s"><span class="pl-pds">'</span>M<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>],
    )
sch <span class="pl-k">=</span> <span class="pl-c1">schema</span>(X) <span class="pl-c"><span class="pl-c">#</span> schema is overloaded in ScientificTypes</span></pre></div>
<p>will print</p>
<pre><code>_.table =
┌─────────┬─────────────────────────┬────────────────────────────┐
│ _.names │ _.types                 │ _.scitypes                 │
├─────────┼─────────────────────────┼────────────────────────────┤
│ a       │ Float64                 │ Continuous                 │
│ b       │ Union{Missing, Float64} │ Union{Missing, Continuous} │
│ c       │ Int64                   │ Count                      │
│ d       │ Int64                   │ Count                      │
│ e       │ Union{Missing, Char}    │ Union{Missing, Unknown}    │
└─────────┴─────────────────────────┴────────────────────────────┘
_.nrows = 5
</code></pre>
<p>Detail is obtained in the obvious way; for example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> sch<span class="pl-k">.</span>names
(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:e</span>)</pre></div>
<p>Now you could want to specify that <code>b</code> is actually a <code>Count</code>, and that <code>d</code> and <code>e</code> are <code>Multiclass</code>; this is done with the <code>coerce</code> function:</p>
<div class="highlight highlight-source-julia"><pre>Xc <span class="pl-k">=</span> <span class="pl-c1">coerce</span>(X, <span class="pl-c1">:b</span><span class="pl-k">=&gt;</span>Count, <span class="pl-c1">:d</span><span class="pl-k">=&gt;</span>Multiclass, <span class="pl-c1">:e</span><span class="pl-k">=&gt;</span>Multiclass)
<span class="pl-c1">schema</span>(Xc)</pre></div>
<p>which prints</p>
<pre><code>_.table =
┌─────────┬──────────────────────────────────────────────┬───────────────────────────────┐
│ _.names │ _.types                                      │ _.scitypes                    │
├─────────┼──────────────────────────────────────────────┼───────────────────────────────┤
│ a       │ Float64                                      │ Continuous                    │
│ b       │ Union{Missing, Int64}                        │ Union{Missing, Count}         │
│ c       │ Int64                                        │ Count                         │
│ d       │ CategoricalValue{Int64,UInt32}                │ Multiclass{2}                 │
│ e       │ Union{Missing, CategoricalValue{Char,UInt32}} │ Union{Missing, Multiclass{2}} │
└─────────┴──────────────────────────────────────────────┴───────────────────────────────┘
_.nrows = 5

</code></pre>
<p>Note that a warning is shown as you ask to convert a <code>Union{Missing,T}</code> to a
<code>S</code> which ultimately results in a <code>Union{Missing,S}</code>. See the docs for more
details. Compare with the following call which leads to the same result but
shows no warning:</p>
<pre><code>Xc = coerce(X, :b=&gt;Union{Missing,Count}, :d=&gt;Multiclass, :e=&gt;Union{Missing,Multiclass})
</code></pre>
</article></div>