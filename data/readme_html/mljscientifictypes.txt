<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mljscientifictypesjl" class="anchor" aria-hidden="true" href="#mljscientifictypesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MLJScientificTypes.jl</h1>
<table>
<thead>
<tr>
<th align="center">Linux</th>
<th align="center">Coverage</th>
<th align="center">Documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaAI/MLJScientificTypes.jl/actions"><img src="https://github.com/JuliaAI/MLJScientificTypes.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/JuliaAI/MLJScientificTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/74a40f901735bb1ce6d5b919940237d380a13eaa732b604a57987e8061f722c6/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c696141492f4d4c4a536369656e746966696354797065732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaAI/MLJScientificTypes.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://JuliaAI.github.io/MLJScientificTypes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><strong>This repository is now deprecated.</strong> The last supported release is
MLJScientificTypes
0.4.8. <a href="https://github.com/JuliaAI/ScientificTypes.jl">ScientificTypes</a>
2.0 and higher now serves the original purpose of MLJScientificTypes,
implementing a scientific type convention called <code>DefaultConvention</code>
(but previously known as the <code>MLJ</code> convention).</p>
<p dir="auto">The scientific types themselves (on which all scientific type
conventions are based) are now defined in
<a href="https://github.com/JuliaAI/ScientificTypesBase.jl">ScientificTypesBase</a>. Previously
ScientificTypes (versions 1.1.1 and lower) defined the basic types and
API.</p>
<hr>
<p dir="auto">Implementation of a convention for <a href="https://github.com/JuliaAI/ScientificTypes.jl">scientific
types</a>,
as used in the <a href="https://github.com/JuliaAI/MLJ.jl">MLJ
universe</a>.</p>
<p dir="auto"><strong>Important note.</strong> While this document refers to the <em>MLJ convention</em>,
this convention could (and, hopefully, will) be adopted in
statistical/scientific software outside of the MLJ project. Of its
dependencies, only the tiny package
<a href="https://github.com/JuliaAI/ScientificTypes.jl">ScientificTypes.jl</a>
has any direct connection to MLJ.</p>
<p dir="auto">This package makes a distinction between <strong>machine type</strong> and
<strong>scientific type</strong> of a Julia object:</p>
<ul dir="auto">
<li>
<p dir="auto">The <em>machine type</em> refers to the Julia type being used to represent
the object (for instance, <code>Float64</code>).</p>
</li>
<li>
<p dir="auto">The <em>scientific type</em> is one of the types defined in
<a href="https://github.com/JuliaAI/ScientificTypes.jl">ScientificTypes.jl</a>
reflecting how the object should be <em>interpreted</em> (for instance,
<code>Continuous</code> or <code>Multiclass</code>).</p>
</li>
</ul>
<h4 dir="auto"><a id="user-content-contents" class="anchor" aria-hidden="true" href="#contents"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contents</h4>
<ul dir="auto">
<li><a href="#installation">Installation</a></li>
<li><a href="#who-is-this-repository-for">Who is this repository for?</a></li>
<li><a href="#what-is-provided-here">What's provided here?</a></li>
<li><a href="#very-quick-start">Very quick start</a></li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(MLJScientificTypes)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(MLJScientificTypes)</pre></div>
<h2 dir="auto"><a id="user-content-who-is-this-repository-for" class="anchor" aria-hidden="true" href="#who-is-this-repository-for"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Who is this repository for?</h2>
<p dir="auto">This repository has two kinds of users in mind:</p>
<ul dir="auto">
<li>
<p dir="auto">users of software in the <a href="https://github.com/JuliaAI/MLJ.jl">MLJ
universe</a> seeking a
deeper understanding of the use of scientific types and associated
tools; <em>these users do not need to directly install this package</em>
but may find its documentation helpful</p>
</li>
<li>
<p dir="auto">developers of statistical and scientific software who want to
articulate their data type requirements in a generic,
purpose-oriented way, and who are furthermore happy to adopt an
existing convention about what data types should be used for
what purpose (a convention that has been successfully adopted in an
existing large scale Julia project)</p>
</li>
</ul>
<p dir="auto">Developers interested in implementing a different convention will
instead import <a href="https://github.com/JuliaAI/ScientificTypes.jl">Scientific
Types.jl</a>,
following the documentation there, possibly using this repo as a
template.</p>
<h2 dir="auto"><a id="user-content-whats-provided-here" class="anchor" aria-hidden="true" href="#whats-provided-here"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What's provided here?</h2>
<p dir="auto">The module <code>MLJScientificTypes</code> defined in this repo rexports the
scientific types and associated methods defined in <a href="https://github.com/JuliaAI/ScientificTypes.jl">Scientific
Types.jl</a>
and provides:</p>
<ul dir="auto">
<li>
<p dir="auto">a collection of <code>ScientificTypes.scitype</code> definitions that
articulate the MLJ convention, importing the module automatically
activating the convention</p>
</li>
<li>
<p dir="auto">a <code>coerce</code> function, for changing machine types to reflect a specified
scientific interpretation (scientific type)</p>
</li>
<li>
<p dir="auto">an <code>autotype</code> fuction for "guessing" the intended scientific type of data</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-very-quick-start" class="anchor" aria-hidden="true" href="#very-quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Very quick start</h2>
<p dir="auto">For more information and examples please refer to <a href="https://JuliaAI.github.io/MLJScientificTypes.jl/dev" rel="nofollow">the
manual</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MLJScientificTypes, DataFrames
X = DataFrame(
    a = randn(5),
    b = [-2.0, 1.0, 2.0, missing, 3.0],
    c = [1, 2, 3, 4, 5],
    d = [0, 1, 0, 1, 0],
    e = ['M', 'F', missing, 'M', 'F'],
    )
sch = schema(X)"><pre><span class="pl-k">using</span> MLJScientificTypes, DataFrames
X <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(
    a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>),
    b <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">2.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">3.0</span>],
    c <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>],
    d <span class="pl-k">=</span> [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>],
    e <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>M<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>, <span class="pl-c1">missing</span>, <span class="pl-s"><span class="pl-pds">'</span>M<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>],
    )
sch <span class="pl-k">=</span> <span class="pl-c1">schema</span>(X)</pre></div>
<p dir="auto">will print</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="_.table =
┌─────────┬─────────────────────────┬────────────────────────────┐
│ _.names │ _.types                 │ _.scitypes                 │
├─────────┼─────────────────────────┼────────────────────────────┤
│ a       │ Float64                 │ Continuous                 │
│ b       │ Union{Missing, Float64} │ Union{Missing, Continuous} │
│ c       │ Int64                   │ Count                      │
│ d       │ Int64                   │ Count                      │
│ e       │ Union{Missing, Char}    │ Union{Missing, Unknown}    │
└─────────┴─────────────────────────┴────────────────────────────┘
_.nrows = 5"><pre class="notranslate"><code>_.table =
┌─────────┬─────────────────────────┬────────────────────────────┐
│ _.names │ _.types                 │ _.scitypes                 │
├─────────┼─────────────────────────┼────────────────────────────┤
│ a       │ Float64                 │ Continuous                 │
│ b       │ Union{Missing, Float64} │ Union{Missing, Continuous} │
│ c       │ Int64                   │ Count                      │
│ d       │ Int64                   │ Count                      │
│ e       │ Union{Missing, Char}    │ Union{Missing, Unknown}    │
└─────────┴─────────────────────────┴────────────────────────────┘
_.nrows = 5
</code></pre></div>
<p dir="auto">Detail is obtained in the obvious way; for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sch.names
(:a, :b, :c, :d, :e)"><pre>julia<span class="pl-k">&gt;</span> sch<span class="pl-k">.</span>names
(<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>, <span class="pl-c1">:d</span>, <span class="pl-c1">:e</span>)</pre></div>
<p dir="auto">To specify that instead <code>b</code> should be regared as <code>Count</code>, and that both <code>d</code> and <code>e</code> are <code>Multiclass</code>, we use the <code>coerce</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Xc = coerce(X, :b=&gt;Count, :d=&gt;Multiclass, :e=&gt;Multiclass)
schema(Xc)"><pre>Xc <span class="pl-k">=</span> <span class="pl-c1">coerce</span>(X, <span class="pl-c1">:b</span><span class="pl-k">=&gt;</span>Count, <span class="pl-c1">:d</span><span class="pl-k">=&gt;</span>Multiclass, <span class="pl-c1">:e</span><span class="pl-k">=&gt;</span>Multiclass)
<span class="pl-c1">schema</span>(Xc)</pre></div>
<p dir="auto">which prints</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="_.table =
┌─────────┬──────────────────────────────────────────────┬───────────────────────────────┐
│ _.names │ _.types                                      │ _.scitypes                    │
├─────────┼──────────────────────────────────────────────┼───────────────────────────────┤
│ a       │ Float64                                      │ Continuous                    │
│ b       │ Union{Missing, Int64}                        │ Union{Missing, Count}         │
│ c       │ Int64                                        │ Count                         │
│ d       │ CategoricalValue{Int64,UInt32}               │ Multiclass{2}                 │
│ e       │ Union{Missing, CategoricalValue{Char,UInt32}}│ Union{Missing, Multiclass{2}} │
└─────────┴──────────────────────────────────────────────┴───────────────────────────────┘
_.nrows = 5
"><pre class="notranslate"><code>_.table =
┌─────────┬──────────────────────────────────────────────┬───────────────────────────────┐
│ _.names │ _.types                                      │ _.scitypes                    │
├─────────┼──────────────────────────────────────────────┼───────────────────────────────┤
│ a       │ Float64                                      │ Continuous                    │
│ b       │ Union{Missing, Int64}                        │ Union{Missing, Count}         │
│ c       │ Int64                                        │ Count                         │
│ d       │ CategoricalValue{Int64,UInt32}               │ Multiclass{2}                 │
│ e       │ Union{Missing, CategoricalValue{Char,UInt32}}│ Union{Missing, Multiclass{2}} │
└─────────┴──────────────────────────────────────────────┴───────────────────────────────┘
_.nrows = 5

</code></pre></div>
</article></div>