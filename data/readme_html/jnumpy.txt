<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jnumpy-writing-high-performance-c-extensions-for-python-in-minutes" class="anchor" aria-hidden="true" href="#jnumpy-writing-high-performance-c-extensions-for-python-in-minutes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JNumPy: writing high-performance C extensions for Python in minutes</h1>
<h2 dir="auto"><a id="user-content-install-jnumpy" class="anchor" aria-hidden="true" href="#install-jnumpy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install JNumPy</h2>
<p dir="auto">Requirements:</p>
<ul dir="auto">
<li>Python &gt;= 3.7</li>
</ul>
<p dir="auto">You can install the Python package <code>jnumpy</code> with the following command:</p>
<p dir="auto"><code>pip install julia-numpy</code>.</p>
<p dir="auto">Note that JNumPy will install julia in <code>JNUMPY_HOME</code> for you, if there is no Julia installation available.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<ol dir="auto">
<li>
<p dir="auto">create a Python package <code>example</code>, write and export julia functions in the file <code>example/src/example.jl</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module example

using TyPython
using TyPython.CPython

@export_py function mat_mul(a::AbstractArray, b::AbstractArray)::Array
    return a * b
end

function init()
    @export_pymodule _example begin
        jl_mat_mul = Pyfunc(mat_mul)
    end
end

# the following code is optional,
# but makes Python code loading much faster since the second time.
precompile(init, ())

end"><pre><span class="pl-k">module</span> example

<span class="pl-k">using</span> TyPython
<span class="pl-k">using</span> TyPython<span class="pl-k">.</span>CPython

<span class="pl-c1">@export_py</span> <span class="pl-k">function</span> <span class="pl-en">mat_mul</span>(a<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>, b<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>)<span class="pl-k">::</span><span class="pl-c1">Array</span>
    <span class="pl-k">return</span> a <span class="pl-k">*</span> b
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">init</span>()
    <span class="pl-c1">@export_pymodule</span> _example <span class="pl-k">begin</span>
        jl_mat_mul <span class="pl-k">=</span> <span class="pl-c1">Pyfunc</span>(mat_mul)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> the following code is optional,</span>
<span class="pl-c"><span class="pl-c">#</span> but makes Python code loading much faster since the second time.</span>
<span class="pl-c1">precompile</span>(init, ())

<span class="pl-k">end</span></pre></div>
</li>
<li>
<p dir="auto">create <code>example/Project.toml</code> as follows:</p>
<div class="highlight highlight-source-toml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="name = &quot;example&quot;  # this is required to find the julia's entry module

[deps]
# specify your julia dependencies here"><pre><span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>example<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> this is required to find the julia's entry module</span>

[<span class="pl-en">deps</span>]
<span class="pl-c"><span class="pl-c">#</span> specify your julia dependencies here</span></pre></div>
</li>
<li>
<p dir="auto">initialize and import the julia functions at <code>example/__init__.py</code>:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import jnumpy as np
# you may call np.set_julia_mirror(server) to set the julia package server,
# or leave the argument server empty to automatically search the nearest mirror.
np.init_jl()
np.init_project(__file__)

from _example import jl_mat_mul

__all__ = ['jl_mat_mul']"><pre><span class="pl-k">import</span> <span class="pl-s1">jnumpy</span> <span class="pl-k">as</span> <span class="pl-s1">np</span>
<span class="pl-c"># you may call np.set_julia_mirror(server) to set the julia package server,</span>
<span class="pl-c"># or leave the argument server empty to automatically search the nearest mirror.</span>
<span class="pl-s1">np</span>.<span class="pl-en">init_jl</span>()
<span class="pl-s1">np</span>.<span class="pl-en">init_project</span>(<span class="pl-s1">__file__</span>)

<span class="pl-k">from</span> <span class="pl-s1">_example</span> <span class="pl-k">import</span> <span class="pl-s1">jl_mat_mul</span>

<span class="pl-s1">__all__</span> <span class="pl-c1">=</span> [<span class="pl-s">'jl_mat_mul'</span>]</pre></div>
</li>
<li>
<p dir="auto">enjoy your Python extension package:</p>
<p dir="auto">This is the structure of your Python extension package:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; ls -R
example/:
    __init__.py  Project.toml  src

example/src:
    example.jl"><pre><span class="pl-k">&gt;</span> ls -R
example/:
    __init__.py  Project.toml  src

example/src:
    example.jl</pre></div>
<p dir="auto">This is how you use it:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="from example import jl_mat_mul
x = np.array([[1,2],[3,4]])
y = np.array([[4,3],[2,1]])
jl_mat_mul(x, y)
# array([[ 8,  5],
#       [20, 13]])"><pre><span class="pl-k">from</span> <span class="pl-s1">example</span> <span class="pl-k">import</span> <span class="pl-s1">jl_mat_mul</span>
<span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-s1">np</span>.<span class="pl-en">array</span>([[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>],[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]])
<span class="pl-s1">y</span> <span class="pl-c1">=</span> <span class="pl-s1">np</span>.<span class="pl-en">array</span>([[<span class="pl-c1">4</span>,<span class="pl-c1">3</span>],[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]])
<span class="pl-en">jl_mat_mul</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>)
<span class="pl-c"># array([[ 8,  5],</span>
<span class="pl-c">#       [20, 13]])</span></pre></div>
</li>
</ol>
<h2 dir="auto"><a id="user-content-environment-variables" class="anchor" aria-hidden="true" href="#environment-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Environment Variables</h2>
<ul dir="auto">
<li>
<p dir="auto"><code>JNUMPY_HOME</code>:</p>
<p dir="auto">The home directory for JNumPy-specific settings. The default value is <code>~/.jnumpy</code>. In case that you don't have a julia executable, JNumPy installs julia into <code>$JNUMPY_HOME</code> using <a href="https://github.com/johnnychen94/jill.py">jill.py</a>.</p>
</li>
<li>
<p dir="auto"><code>TYPY_JL_EXE</code>:</p>
<p dir="auto">The path of the julia executable in use.</p>
</li>
<li>
<p dir="auto"><code>TYPY_JL_OPTS</code>:</p>
<p dir="auto">Command-line options when launching julia. JNumPy runs julia in a default environment (<code>path/to/package/jnumpy/JNumPyEnv</code>). If you want to use a custom environment, you could set <code>--project=&lt;dir&gt;</code>. <code>TYPY_JL_OPTS</code> is the same as those arguments passed to <code>julia</code>.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">There are several examples presented in the <code>demo</code> directory. Those examples are standalone Python packages created using JNumPy, and can be imported if you have JNumPy installed.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>demo/basic</code>: a tiny Python package to give an example of how to use JNumPy.</p>
</li>
<li>
<p dir="auto"><code>demo/kmeans</code>: a tiny Python package wrapping <a href="https://pydatablog.github.io/ParallelKMeans.jl/stable/" rel="nofollow">ParallelKMeans.jl</a>. It produces a 10x performance gain against Scikit-Learn.</p>
</li>
<li>
<p dir="auto"><code>demo/fft</code>: a tiny Python package wrapping <a href="https://github.com/JuliaMath/FFTW.jl">FFTW.jl</a>, and indirectly the GPL-licenced FFTW library. It allows users to access FFT plans for accelerating FFTs.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-contributions" class="anchor" aria-hidden="true" href="#contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributions</h2>
<p dir="auto">Open-source contributions are kindly accepted and appreciated including bug reports, documentations, pull requests, and general suggestions.</p>
</article></div>