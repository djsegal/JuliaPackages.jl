<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-jacobi-davidson" class="anchor" aria-hidden="true" href="#jacobi-davidson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Jacobi-Davidson</h1>
<p><a href="https://haampie.github.io/JacobiDavidson.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>An implementation of Jacobi-Davidson in Julia. This method can be used as an alternative to Julia's <code>eigs</code> to find a few eigenvalues and eigenvectors of a large sparse matrix.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>We generate two random complex matrices A and B and use JDQZ to find the eigenvalues λ of the generalized eigenvalue problem Ax = λBx.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JacobiDavidson, LinearAlgebra, SparseArrays, Plots

<span class="pl-k">function</span> <span class="pl-en">run</span>(n <span class="pl-k">=</span> <span class="pl-c1">1000</span>)
  A <span class="pl-k">=</span> <span class="pl-c1">2</span>I <span class="pl-k">+</span> <span class="pl-c1">sprand</span>(ComplexF64, n, n, <span class="pl-c1">1</span> <span class="pl-k">/</span> n)
  B <span class="pl-k">=</span> <span class="pl-c1">2</span>I <span class="pl-k">+</span> <span class="pl-c1">sprand</span>(ComplexF64, n, n, <span class="pl-c1">1</span> <span class="pl-k">/</span> n)

  <span class="pl-c"><span class="pl-c">#</span> Find all eigenvalues with a direct method</span>
  values <span class="pl-k">=</span> <span class="pl-c1">eigvals</span>(<span class="pl-c1">Matrix</span>(A), <span class="pl-c1">Matrix</span>(B))

  target <span class="pl-k">=</span> <span class="pl-c1">Near</span>(<span class="pl-c1">1.5</span> <span class="pl-k">-</span> <span class="pl-c1">0.7im</span>)

  pschur, residuals <span class="pl-k">=</span> <span class="pl-c1">jdqz</span>(
    A, B,
    solver <span class="pl-k">=</span> <span class="pl-c1">GMRES</span>(n, iterations <span class="pl-k">=</span> <span class="pl-c1">7</span>),
    target <span class="pl-k">=</span> target,
    pairs <span class="pl-k">=</span> <span class="pl-c1">7</span>,
    subspace_dimensions <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">15</span>,
    max_iter <span class="pl-k">=</span> <span class="pl-c1">300</span>,
    verbose <span class="pl-k">=</span> <span class="pl-c1">true</span>
  )

  <span class="pl-c"><span class="pl-c">#</span> The eigenvalues found by Jacobi-Davidson</span>
  found <span class="pl-k">=</span> pschur<span class="pl-k">.</span>alphas <span class="pl-k">./</span> pschur<span class="pl-k">.</span>betas

  <span class="pl-c"><span class="pl-c">#</span> </span>
  p1 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(<span class="pl-c1">real</span>(values), <span class="pl-c1">imag</span>(values), label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>eig<span class="pl-pds">"</span></span>)
  <span class="pl-c1">scatter!</span>(<span class="pl-c1">real</span>(found), <span class="pl-c1">imag</span>(found), marker <span class="pl-k">=</span> :<span class="pl-k">+</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>jdqz<span class="pl-pds">"</span></span>)
  <span class="pl-c1">scatter!</span>([<span class="pl-c1">real</span>(target<span class="pl-k">.</span>τ)], [<span class="pl-c1">imag</span>(target<span class="pl-k">.</span>τ)], marker <span class="pl-k">=</span> <span class="pl-c1">:star</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Target<span class="pl-pds">"</span></span>)

  p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(residuals, yscale <span class="pl-k">=</span> <span class="pl-c1">:log10</span>, marker <span class="pl-k">=</span> <span class="pl-c1">:auto</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Residual norm<span class="pl-pds">"</span></span>)

  p1, p2
<span class="pl-k">end</span></pre></div>
<p>The first plot shows the full spectrum, together with the target we have set and the seven converged eigenvalues:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d168d09426c448dd67fb8e41b3e77994830b6822/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f666f756e642e706e67"><img src="https://camo.githubusercontent.com/d168d09426c448dd67fb8e41b3e77994830b6822/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f666f756e642e706e67" alt="Eigenvalues found" data-canonical-src="https://haampie.github.io/JacobiDavidson.jl/latest/found.png" style="max-width:100%;"></a></p>
<p>The second plot shows the residual norm of Ax - λBx during the iterations:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/45c4ee786e132aa8efc270794bd3f88361dec2bd/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f726573696475616c6e6f726d2e706e67"><img src="https://camo.githubusercontent.com/45c4ee786e132aa8efc270794bd3f88361dec2bd/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f726573696475616c6e6f726d2e706e67" alt="Residual norm" data-canonical-src="https://haampie.github.io/JacobiDavidson.jl/latest/residualnorm.png" style="max-width:100%;"></a></p>
</article></div>