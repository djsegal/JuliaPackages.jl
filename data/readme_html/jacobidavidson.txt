<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jacobi-davidson" class="anchor" aria-hidden="true" href="#jacobi-davidson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jacobi-Davidson</h1>
<p dir="auto"><a href="https://haampie.github.io/JacobiDavidson.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://haampie.github.io/JacobiDavidson.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/haampie/JacobiDavidson.jl/actions"><img src="https://github.com/haampie/JacobiDavidson.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/haampie/JacobiDavidson.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9dfc107440ae5779ad25a8be9352c925ff1ee031c61e1e2518209f9ae74ba72e/68747470733a2f2f636f6465636f762e696f2f67682f6861616d7069652f4a61636f62694461766964736f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/haampie/JacobiDavidson.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">An implementation of Jacobi-Davidson in Julia. This method can be used as an alternative to Julia's <code>eigs</code> to find a few eigenvalues and eigenvectors of a large sparse matrix.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">We generate two random complex matrices A and B and use JDQZ to find the eigenvalues λ of the generalized eigenvalue problem Ax = λBx.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JacobiDavidson, LinearAlgebra, SparseArrays, Plots

function run(n = 1000)
  A = 2I + sprand(ComplexF64, n, n, 1 / n)
  B = 2I + sprand(ComplexF64, n, n, 1 / n)

  # Find all eigenvalues with a direct method
  values = eigvals(Matrix(A), Matrix(B))

  target = Near(1.5 - 0.7im)

  pschur, residuals = jdqz(
    A, B,
    solver = GMRES(n, iterations = 7),
    target = target,
    pairs = 7,
    subspace_dimensions = 10:15,
    max_iter = 300,
    verbosity = 1
  )

  # The eigenvalues found by Jacobi-Davidson
  found = pschur.alphas ./ pschur.betas

  # 
  p1 = scatter(real(values), imag(values), label = &quot;eig&quot;)
  scatter!(real(found), imag(found), marker = :+, label = &quot;jdqz&quot;)
  scatter!([real(target.τ)], [imag(target.τ)], marker = :star, label = &quot;Target&quot;)

  p2 = plot(residuals, yscale = :log10, marker = :auto, label = &quot;Residual norm&quot;)

  p1, p2
end"><pre><span class="pl-k">using</span> JacobiDavidson, LinearAlgebra, SparseArrays, Plots

<span class="pl-k">function</span> <span class="pl-en">run</span>(n <span class="pl-k">=</span> <span class="pl-c1">1000</span>)
  A <span class="pl-k">=</span> <span class="pl-c1">2</span>I <span class="pl-k">+</span> <span class="pl-c1">sprand</span>(ComplexF64, n, n, <span class="pl-c1">1</span> <span class="pl-k">/</span> n)
  B <span class="pl-k">=</span> <span class="pl-c1">2</span>I <span class="pl-k">+</span> <span class="pl-c1">sprand</span>(ComplexF64, n, n, <span class="pl-c1">1</span> <span class="pl-k">/</span> n)

  <span class="pl-c"><span class="pl-c">#</span> Find all eigenvalues with a direct method</span>
  values <span class="pl-k">=</span> <span class="pl-c1">eigvals</span>(<span class="pl-c1">Matrix</span>(A), <span class="pl-c1">Matrix</span>(B))

  target <span class="pl-k">=</span> <span class="pl-c1">Near</span>(<span class="pl-c1">1.5</span> <span class="pl-k">-</span> <span class="pl-c1">0.7im</span>)

  pschur, residuals <span class="pl-k">=</span> <span class="pl-c1">jdqz</span>(
    A, B,
    solver <span class="pl-k">=</span> <span class="pl-c1">GMRES</span>(n, iterations <span class="pl-k">=</span> <span class="pl-c1">7</span>),
    target <span class="pl-k">=</span> target,
    pairs <span class="pl-k">=</span> <span class="pl-c1">7</span>,
    subspace_dimensions <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">15</span>,
    max_iter <span class="pl-k">=</span> <span class="pl-c1">300</span>,
    verbosity <span class="pl-k">=</span> <span class="pl-c1">1</span>
  )

  <span class="pl-c"><span class="pl-c">#</span> The eigenvalues found by Jacobi-Davidson</span>
  found <span class="pl-k">=</span> pschur<span class="pl-k">.</span>alphas <span class="pl-k">./</span> pschur<span class="pl-k">.</span>betas

  <span class="pl-c"><span class="pl-c">#</span> </span>
  p1 <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(<span class="pl-c1">real</span>(values), <span class="pl-c1">imag</span>(values), label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>eig<span class="pl-pds">"</span></span>)
  <span class="pl-c1">scatter!</span>(<span class="pl-c1">real</span>(found), <span class="pl-c1">imag</span>(found), marker <span class="pl-k">=</span> :<span class="pl-k">+</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>jdqz<span class="pl-pds">"</span></span>)
  <span class="pl-c1">scatter!</span>([<span class="pl-c1">real</span>(target<span class="pl-k">.</span>τ)], [<span class="pl-c1">imag</span>(target<span class="pl-k">.</span>τ)], marker <span class="pl-k">=</span> <span class="pl-c1">:star</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Target<span class="pl-pds">"</span></span>)

  p2 <span class="pl-k">=</span> <span class="pl-c1">plot</span>(residuals, yscale <span class="pl-k">=</span> <span class="pl-c1">:log10</span>, marker <span class="pl-k">=</span> <span class="pl-c1">:auto</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Residual norm<span class="pl-pds">"</span></span>)

  p1, p2
<span class="pl-k">end</span></pre></div>
<p dir="auto">The first plot shows the full spectrum, together with the target we have set and the seven converged eigenvalues:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fb302a1f0b2dd0aa854c2e0e181325c94fe68c1b4eff79fe52e0ee25ee4afc66/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f666f756e642e706e67"><img src="https://camo.githubusercontent.com/fb302a1f0b2dd0aa854c2e0e181325c94fe68c1b4eff79fe52e0ee25ee4afc66/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f666f756e642e706e67" alt="Eigenvalues found" data-canonical-src="https://haampie.github.io/JacobiDavidson.jl/latest/found.png" style="max-width: 100%;"></a></p>
<p dir="auto">The second plot shows the residual norm of Ax - λBx during the iterations:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/833141269ffc6bbc0f7e1b047dfc0653703b085bc5f3396cad676cf5c113489a/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f726573696475616c6e6f726d2e706e67"><img src="https://camo.githubusercontent.com/833141269ffc6bbc0f7e1b047dfc0653703b085bc5f3396cad676cf5c113489a/68747470733a2f2f6861616d7069652e6769746875622e696f2f4a61636f62694461766964736f6e2e6a6c2f6c61746573742f726573696475616c6e6f726d2e706e67" alt="Residual norm" data-canonical-src="https://haampie.github.io/JacobiDavidson.jl/latest/residualnorm.png" style="max-width: 100%;"></a></p>
</article></div>