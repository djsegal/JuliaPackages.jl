<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reversedifftape" class="anchor" aria-hidden="true" href="#reversedifftape"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReverseDiffTape</h1>
<p dir="auto"><a href="https://travis-ci.org/fqiang/ReverseDiffTape.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37c13b8862c105cac66e922bfc40a75615d9d1e11f97b7541508209ef51e34b5/68747470733a2f2f7472617669732d63692e6f72672f667169616e672f5265766572736544696666546170652e6a6c2e7376673f6272616e63683d616432303136" alt="Build Status" data-canonical-src="https://travis-ci.org/fqiang/ReverseDiffTape.jl.svg?branch=ad2016" style="max-width: 100%;"></a></p>
<p dir="auto">Welcome to the ReverseDiffTape.jl, a Julia package for reverse mode differentiation on a tape.</p>
<p dir="auto">#Overview
This julia package implements reverse mode automatic/algorithmic differentiation algorithm for computing gradient and Hessian of a scalar function. The Hessian evaluation and pattern finding use a state-of-the-art reverse Hessian algorithm, named <strong>Edge_Pushing<strong>.</strong></strong></p><strong><strong>
<p dir="auto">#Interface with <a href="https://github.com/JuliaOpt/JuMP.jl/">JuMP</a> throught <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a></p>
<ul dir="auto">
<li>Delegate the AD evaluation routines to use ReverseDiffTape implementation</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="include(&quot;interface_tape.jl&quot;)               
using TapeInterface                            
m = Model(solver=TapeSolver(IpoptSolver())) #creating TapeSolver instance"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>interface_tape.jl<span class="pl-pds">"</span></span>)               
<span class="pl-k">using</span> TapeInterface                            
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">TapeSolver</span>(<span class="pl-c1">IpoptSolver</span>())) <span class="pl-c"><span class="pl-c">#</span>creating TapeSolver instance</span></pre></div>
<ul dir="auto">
<li>Rest proceeds as the same of a normal JuMP model</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@variable(m, -100&lt;=x[1:10]&lt;=100)
@NLobjective(m, Min, sum{ cos(sum{ x[i+j], j=1:3}) + sum{ (x[i] + x[j])^2, j=1:3} , i=1:7} )
status = solve(m)"><pre><span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">100</span><span class="pl-k">&lt;=</span>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]<span class="pl-k">&lt;=</span><span class="pl-c1">100</span>)
<span class="pl-c1">@NLobjective</span>(m, Min, sum{ <span class="pl-c1">cos</span>(sum{ x[i<span class="pl-k">+</span>j], j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>}) <span class="pl-k">+</span> sum{ (x[i] <span class="pl-k">+</span> x[j])<span class="pl-k">^</span><span class="pl-c1">2</span>, j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>} , i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span>} )
status <span class="pl-k">=</span> <span class="pl-c1">solve</span>(m)</pre></div>
<h1 dir="auto"><a id="user-content-benchmarking-results" class="anchor" aria-hidden="true" href="#benchmarking-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarking results</h1>
<p dir="auto">The bencharmking results are presented in The 7th International Conference on Algorithmic Differentation, titled "On efficient Hessian computation using the edge pushing algorithm in Julia".</p>
<p dir="auto">An improved performance results are submitted in the post-conference publication in Optimization Methods and Software. The results can be reproduced using scripts at <a href="https://github.com/fqiang/ReverseDiffTape.jl/tree/master/benchmark">benchmark</a> directory of this repository.</p>
<p dir="auto">#References:
R.M. Gower and M.P. Mello. "A new framework for the computation of Hessians", Optimization Methods and Software 27-2, pp. 251â€“273, 2012. <a href="http://www.ime.unicamp.br/rel_pesq/2010/rp16-10.html" rel="nofollow">paper</a></p>
</strong></strong></article></div>