<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-reversedifftape" class="anchor" aria-hidden="true" href="#reversedifftape"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReverseDiffTape</h1>
<p><a href="https://travis-ci.org/fqiang/ReverseDiffTape.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a91a4414967332f0b6d0f839f32b9614a477bac5/68747470733a2f2f7472617669732d63692e6f72672f667169616e672f5265766572736544696666546170652e6a6c2e7376673f6272616e63683d616432303136" alt="Build Status" data-canonical-src="https://travis-ci.org/fqiang/ReverseDiffTape.jl.svg?branch=ad2016" style="max-width:100%;"></a></p>
<p>Welcome to the ReverseDiffTape.jl, a Julia package for reverse mode differentiation on a tape.</p>
<p>#Overview
This julia package implements reverse mode automatic/algorithmic differentiation algorithm for computing gradient and Hessian of a scalar function. The Hessian evaluation and pattern finding use a state-of-the-art reverse Hessian algorithm, named <strong>Edge_Pushing<strong>.</strong></strong></p><strong><strong>
<p>#Interface with <a href="https://github.com/JuliaOpt/JuMP.jl/">JuMP</a> throught <a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase</a></p>
<ul>
<li>Delegate the AD evaluation routines to use ReverseDiffTape implementation</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>interface_tape.jl<span class="pl-pds">"</span></span>)               
<span class="pl-k">using</span> TapeInterface                            
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">TapeSolver</span>(<span class="pl-c1">IpoptSolver</span>())) <span class="pl-c"><span class="pl-c">#</span>creating TapeSolver instance</span></pre></div>
<ul>
<li>Rest proceeds as the same of a normal JuMP model</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@variable</span>(m, <span class="pl-k">-</span><span class="pl-c1">100</span><span class="pl-k">&lt;=</span>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>]<span class="pl-k">&lt;=</span><span class="pl-c1">100</span>)
<span class="pl-c1">@NLobjective</span>(m, Min, sum{ <span class="pl-c1">cos</span>(sum{ x[i<span class="pl-k">+</span>j], j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>}) <span class="pl-k">+</span> sum{ (x[i] <span class="pl-k">+</span> x[j])<span class="pl-k">^</span><span class="pl-c1">2</span>, j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>} , i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span>} )
status <span class="pl-k">=</span> <span class="pl-c1">solve</span>(m)</pre></div>
<h1><a id="user-content-benchmarking-results" class="anchor" aria-hidden="true" href="#benchmarking-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmarking results</h1>
<p>The bencharmking results are presented in The 7th International Conference on Algorithmic Differentation, titled "On efficient Hessian computation using the edge pushing algorithm in Julia".</p>
<p>An improved performance results are submitted in the post-conference publication in Optimization Methods and Software. The results can be reproduced using scripts at <a href="https://github.com/fqiang/ReverseDiffTape.jl/tree/master/benchmark">benchmark</a> directory of this repository.</p>
<p>#References:
R.M. Gower and M.P. Mello. "A new framework for the computation of Hessians", Optimization Methods and Software 27-2, pp. 251â€“273, 2012. <a href="http://www.ime.unicamp.br/rel_pesq/2010/rp16-10.html" rel="nofollow">paper</a></p>
</strong></strong></article></div>