<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kisssmoothingjl" class="anchor" aria-hidden="true" href="#kisssmoothingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KissSmoothing.jl</h1>
<p dir="auto">This package implements a denoising procedure, a Radial Basis Function estimation procedure and a Natural Cubic Splines estimation procedure.</p>
<h2 dir="auto"><a id="user-content-denoising" class="anchor" aria-hidden="true" href="#denoising"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Denoising</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="denoise(V::Array; factor=1.0, rtol=1e-12, dims=ndims(V), verbose = false)"><pre class="notranslate"><code>denoise(V::Array; factor=1.0, rtol=1e-12, dims=ndims(V), verbose = false)
</code></pre></div>
<p dir="auto">smooth data in <code>V</code> according to:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="`V` : data to smooth

`factor` : smoothing intensity

`rtol` : relative tolerance on how precise the smoothing intensity is determined

`dims` : array dimension being smoothed

`verbose` : enables some printing of internal info"><pre class="notranslate"><code>`V` : data to smooth

`factor` : smoothing intensity

`rtol` : relative tolerance on how precise the smoothing intensity is determined

`dims` : array dimension being smoothed

`verbose` : enables some printing of internal info
</code></pre></div>
<p dir="auto">returns a tuple (S,N) where:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="`S` : is the smoothed data

`N` : is the extracted noise"><pre class="notranslate"><code>`S` : is the smoothed data

`N` : is the extracted noise
</code></pre></div>
<p dir="auto">in particular <code>S + N</code> reconstructs the original data <code>V</code>.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KissSmoothing, Statistics, LinearAlgebra
using PyPlot
figure(figsize=(5,4))
for (i,s) in enumerate(2 .^ LinRange(-1.5,1.5,4))
    # generating a simple sinusoidal signal
    X = LinRange(0,2pi,1000)
    Y = sin.(X)
    # generate it's noise corrupted version
    TN = std(Y).*randn(length(X))./7 .*s
    raw_S = Y .+ TN
    # using this package function to extract signal S and noise N
    S, N = denoise(raw_S)

    subplot(2,2,i)
    plot(X,raw_S, color=&quot;gray&quot;,lw=0.8, label=&quot;Y noisy&quot;)
    plot(X,Y,color=&quot;red&quot;,label=&quot;Y true&quot;)
    plot(X,S,color=&quot;blue&quot;, ls =&quot;dashed&quot;,label=&quot;Y smoothed&quot;)
    xlabel(&quot;X&quot;)
    ylabel(&quot;Y&quot;)
    i==1 &amp;&amp; legend()
end
tight_layout()
savefig(&quot;test.png&quot;)"><pre><span class="pl-k">using</span> KissSmoothing, Statistics, LinearAlgebra
<span class="pl-k">using</span> PyPlot
<span class="pl-c1">figure</span>(figsize<span class="pl-k">=</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>))
<span class="pl-k">for</span> (i,s) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">2</span> <span class="pl-k">.^</span> <span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1.5</span>,<span class="pl-c1">1.5</span>,<span class="pl-c1">4</span>))
    <span class="pl-c"><span class="pl-c">#</span> generating a simple sinusoidal signal</span>
    X <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2pi</span>,<span class="pl-c1">1000</span>)
    Y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(X)
    <span class="pl-c"><span class="pl-c">#</span> generate it's noise corrupted version</span>
    TN <span class="pl-k">=</span> <span class="pl-c1">std</span>(Y)<span class="pl-k">.*</span><span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(X))<span class="pl-k">./</span><span class="pl-c1">7</span> <span class="pl-k">.*</span>s
    raw_S <span class="pl-k">=</span> Y <span class="pl-k">.+</span> TN
    <span class="pl-c"><span class="pl-c">#</span> using this package function to extract signal S and noise N</span>
    S, N <span class="pl-k">=</span> <span class="pl-c1">denoise</span>(raw_S)

    <span class="pl-c1">subplot</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,i)
    <span class="pl-c1">plot</span>(X,raw_S, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">0.8</span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Y noisy<span class="pl-pds">"</span></span>)
    <span class="pl-c1">plot</span>(X,Y,color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Y true<span class="pl-pds">"</span></span>)
    <span class="pl-c1">plot</span>(X,S,color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>, ls <span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>dashed<span class="pl-pds">"</span></span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Y smoothed<span class="pl-pds">"</span></span>)
    <span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>)
    <span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>)
    i<span class="pl-k">==</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">legend</span>()
<span class="pl-k">end</span>
<span class="pl-c1">tight_layout</span>()
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>test.png<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="test.png"><img src="test.png" alt="test.png" title="Plot of 1D signal smoothing" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-multidimensional-example" class="anchor" aria-hidden="true" href="#multidimensional-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multidimensional example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KissSmoothing, Statistics, LinearAlgebra
using PyPlot
figure(figsize=(5,4))
for (i,s) in enumerate(2 .^ LinRange(-1.5,1.5,4))
    # generating a simple circle dataset
    X = LinRange(0,10pi,1000)
    Y = sin.(X) .+ randn(length(X))./7 .*s
    Z = cos.(X) .+ randn(length(X))./7 .*s
    M = [Y Z]
    O = [sin.(X) cos.(X)]
    # using this package function to extract signal S and noise N
    S, N = denoise(M, dims=1)

    subplot(2,2,i)
    scatter(M[:,1],M[:,2], color=&quot;gray&quot;,s=2,label=&quot;noisy&quot;)
    plot(S[:,1],S[:,2], color=&quot;red&quot;,lw=1.5,label=&quot;smoothed&quot;)
    plot(O[:,1],O[:,2], color=&quot;blue&quot;,lw=1.0,label=&quot;true&quot;)
    i==1 &amp;&amp; legend()
    xlabel(&quot;X&quot;)
    ylabel(&quot;Y&quot;)
end
tight_layout()
savefig(&quot;test_multi.png&quot;)"><pre><span class="pl-k">using</span> KissSmoothing, Statistics, LinearAlgebra
<span class="pl-k">using</span> PyPlot
<span class="pl-c1">figure</span>(figsize<span class="pl-k">=</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>))
<span class="pl-k">for</span> (i,s) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">2</span> <span class="pl-k">.^</span> <span class="pl-c1">LinRange</span>(<span class="pl-k">-</span><span class="pl-c1">1.5</span>,<span class="pl-c1">1.5</span>,<span class="pl-c1">4</span>))
    <span class="pl-c"><span class="pl-c">#</span> generating a simple circle dataset</span>
    X <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">10pi</span>,<span class="pl-c1">1000</span>)
    Y <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(X) <span class="pl-k">.+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(X))<span class="pl-k">./</span><span class="pl-c1">7</span> <span class="pl-k">.*</span>s
    Z <span class="pl-k">=</span> <span class="pl-c1">cos</span>.(X) <span class="pl-k">.+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(X))<span class="pl-k">./</span><span class="pl-c1">7</span> <span class="pl-k">.*</span>s
    M <span class="pl-k">=</span> [Y Z]
    O <span class="pl-k">=</span> [<span class="pl-c1">sin</span>.(X) <span class="pl-c1">cos</span>.(X)]
    <span class="pl-c"><span class="pl-c">#</span> using this package function to extract signal S and noise N</span>
    S, N <span class="pl-k">=</span> <span class="pl-c1">denoise</span>(M, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)

    <span class="pl-c1">subplot</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,i)
    <span class="pl-c1">scatter</span>(M[:,<span class="pl-c1">1</span>],M[:,<span class="pl-c1">2</span>], color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>,s<span class="pl-k">=</span><span class="pl-c1">2</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>noisy<span class="pl-pds">"</span></span>)
    <span class="pl-c1">plot</span>(S[:,<span class="pl-c1">1</span>],S[:,<span class="pl-c1">2</span>], color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">1.5</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>smoothed<span class="pl-pds">"</span></span>)
    <span class="pl-c1">plot</span>(O[:,<span class="pl-c1">1</span>],O[:,<span class="pl-c1">2</span>], color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">1.0</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>)
    i<span class="pl-k">==</span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">legend</span>()
    <span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>)
    <span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">tight_layout</span>()
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>test_multi.png<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="test_multi.png"><img src="test_multi.png" alt="test_multi.png" title="Plot of multidim smoothing" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-rbf-estimation" class="anchor" aria-hidden="true" href="#rbf-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RBF Estimation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="fit_rbf(xv::Array, yv::Array, cp::Array)"><pre class="notranslate"><code>fit_rbf(xv::Array, yv::Array, cp::Array)
</code></pre></div>
<p dir="auto">fit thin-plate radial basis function according to:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="`xv` : array NxP, N number of training points, P number of input variables

`yv` : array NxQ, N number of training points, Q number of output variables

`cp` : array KxP, K number of control points, P number of input variables"><pre class="notranslate"><code>`xv` : array NxP, N number of training points, P number of input variables

`yv` : array NxQ, N number of training points, Q number of output variables

`cp` : array KxP, K number of control points, P number of input variables
</code></pre></div>
<p dir="auto">returns a callable RBF object.</p>
<h3 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PyPlot, KissSmoothing
t = LinRange(0,2pi,1000)
ty = sin.(t)
y = ty .+ randn(length(t)) .*0.05
fn = fit_rbf(t,y,LinRange(0,2pi,20))
scatter(t, y, color=&quot;gray&quot;,s=2,label=&quot;noisy&quot;)
plot(t, fn(t), color=&quot;red&quot;,lw=1.5,label=&quot;rbf estimate&quot;)
plot(t,ty, color=&quot;blue&quot;,lw=1.0,label=&quot;true&quot;)
xlabel(&quot;X&quot;)
ylabel(&quot;Y&quot;)
legend()
tight_layout()
savefig(&quot;rbf.png&quot;)"><pre><span class="pl-k">using</span> PyPlot, KissSmoothing
t <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2pi</span>,<span class="pl-c1">1000</span>)
ty <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(t)
y <span class="pl-k">=</span> ty <span class="pl-k">.+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(t)) <span class="pl-k">.*</span><span class="pl-c1">0.05</span>
fn <span class="pl-k">=</span> <span class="pl-c1">fit_rbf</span>(t,y,<span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2pi</span>,<span class="pl-c1">20</span>))
<span class="pl-c1">scatter</span>(t, y, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>,s<span class="pl-k">=</span><span class="pl-c1">2</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>noisy<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(t, <span class="pl-c1">fn</span>(t), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">1.5</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>rbf estimate<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(t,ty, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">1.0</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>)
<span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>)
<span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>()
<span class="pl-c1">tight_layout</span>()
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>rbf.png<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="rbf.png"><img src="rbf.png" alt="rbf.png" title="Plot of rbf estimation" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-nsplines-estimation" class="anchor" aria-hidden="true" href="#nsplines-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NSplines Estimation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="fit_nspline(xv::Vector, yv::Vector, cp::Vector)"><pre class="notranslate"><code>fit_nspline(xv::Vector, yv::Vector, cp::Vector)
</code></pre></div>
<p dir="auto">fit natural cubic splines basis function according to:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="`xv` : array N, N number of training points

`yv` : array N, N number of training points

`cp` : array K, K number of control points"><pre class="notranslate"><code>`xv` : array N, N number of training points

`yv` : array N, N number of training points

`cp` : array K, K number of control points
</code></pre></div>
<p dir="auto">returns a callable function.</p>
<h3 dir="auto"><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PyPlot, KissSmoothing
t = LinRange(0,pi,1000)
ty = sin.(t.^2)
y = ty .+ randn(length(t)) .*0.05
fn = fit_nspline(t,y,LinRange(0,2pi,20))
scatter(t, y, color=&quot;gray&quot;,s=2,label=&quot;noisy&quot;)
plot(t, fn.(t), color=&quot;red&quot;,lw=1.5,label=&quot;nspline estimate&quot;)
plot(t,ty, color=&quot;blue&quot;,lw=1.0,label=&quot;true&quot;)
xlabel(&quot;X&quot;)
ylabel(&quot;Y&quot;)
legend()
tight_layout()
savefig(&quot;nspline.png&quot;)"><pre><span class="pl-k">using</span> PyPlot, KissSmoothing
t <span class="pl-k">=</span> <span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">pi</span>,<span class="pl-c1">1000</span>)
ty <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(t<span class="pl-k">.^</span><span class="pl-c1">2</span>)
y <span class="pl-k">=</span> ty <span class="pl-k">.+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(t)) <span class="pl-k">.*</span><span class="pl-c1">0.05</span>
fn <span class="pl-k">=</span> <span class="pl-c1">fit_nspline</span>(t,y,<span class="pl-c1">LinRange</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2pi</span>,<span class="pl-c1">20</span>))
<span class="pl-c1">scatter</span>(t, y, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>gray<span class="pl-pds">"</span></span>,s<span class="pl-k">=</span><span class="pl-c1">2</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>noisy<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(t, <span class="pl-c1">fn</span>.(t), color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">1.5</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>nspline estimate<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(t,ty, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>,lw<span class="pl-k">=</span><span class="pl-c1">1.0</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>)
<span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>X<span class="pl-pds">"</span></span>)
<span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Y<span class="pl-pds">"</span></span>)
<span class="pl-c1">legend</span>()
<span class="pl-c1">tight_layout</span>()
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>nspline.png<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="nspline.png"><img src="nspline.png" alt="nspline.png" title="Plot of NSpline estimation" style="max-width: 100%;"></a></p>
</article></div>