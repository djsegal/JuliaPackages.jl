<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jwscook/NelderMead.jl/workflows/CI/badge.svg"><img src="https://github.com/jwscook/NelderMead.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jwscook/NelderMead.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e2a30145568d21e31a690b23ea8ac85c296d588a61d10047ec62446c95788a2a/68747470733a2f2f636f6465636f762e696f2f67682f6a7773636f6f6b2f4e656c6465724d6561642e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jwscook/NelderMead.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://jwscook.github.io/NelderMead.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-neldermeadjl" class="anchor" aria-hidden="true" href="#neldermeadjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NelderMead.jl</h1>
<p dir="auto">Pure Julia Nelder Mead optimisation</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NelderMead, CairoMakie

xs, ys, zs, vs = Float64[], Float64[], Float64[], Float64[]

function rosenbrock(x)
  output = (1 - x[1])^2 + 100 * (x[2] - x[1]^2)^2
  output += (1 - x[2])^2 + 100 * (x[3] - x[2]^2)^2
  push!(xs, x[1]); push!(ys, x[2]); push!(zs, x[3]); push!(vs, output)
  return output
end

result = NelderMead.optimise(rosenbrock, zeros(3), ones(3) ./ 10)
position, minvalue, returncode, iters, simplex = result

fig, ax, scat = scatter(0 .* xs .+ 1.2, ys, zs, color=:grey, alpha=0.5,
                        axis=(;type=Axis3))
scatter!(xs, 0 .* ys .+ 1.2, zs, color=:grey, alpha=0.5)
scatter!(xs, ys, 0 .* zs .- 0.2, color=:grey, alpha=0.5)
scatter!(xs, ys, zs, color=log10.(vs))
limits!(ax, -0.2, 1.2, -0.2, 1.2, -0.2, 1.2)

save(&quot;Rosenbrock3D.png&quot;, fig)"><pre><span class="pl-k">using</span> NelderMead, CairoMakie

xs, ys, zs, vs <span class="pl-k">=</span> Float64[], Float64[], Float64[], Float64[]

<span class="pl-k">function</span> <span class="pl-en">rosenbrock</span>(x)
  output <span class="pl-k">=</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> x[<span class="pl-c1">1</span>])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> (x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
  output <span class="pl-k">+=</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> x[<span class="pl-c1">2</span>])<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> (x[<span class="pl-c1">3</span>] <span class="pl-k">-</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
  <span class="pl-c1">push!</span>(xs, x[<span class="pl-c1">1</span>]); <span class="pl-c1">push!</span>(ys, x[<span class="pl-c1">2</span>]); <span class="pl-c1">push!</span>(zs, x[<span class="pl-c1">3</span>]); <span class="pl-c1">push!</span>(vs, output)
  <span class="pl-k">return</span> output
<span class="pl-k">end</span>

result <span class="pl-k">=</span> NelderMead<span class="pl-k">.</span><span class="pl-c1">optimise</span>(rosenbrock, <span class="pl-c1">zeros</span>(<span class="pl-c1">3</span>), <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>) <span class="pl-k">./</span> <span class="pl-c1">10</span>)
position, minvalue, returncode, iters, simplex <span class="pl-k">=</span> result

fig, ax, scat <span class="pl-k">=</span> <span class="pl-c1">scatter</span>(<span class="pl-c1">0</span> <span class="pl-k">.*</span> xs <span class="pl-k">.+</span> <span class="pl-c1">1.2</span>, ys, zs, color<span class="pl-k">=</span><span class="pl-c1">:grey</span>, alpha<span class="pl-k">=</span><span class="pl-c1">0.5</span>,
                        axis<span class="pl-k">=</span>(;type<span class="pl-k">=</span>Axis3))
<span class="pl-c1">scatter!</span>(xs, <span class="pl-c1">0</span> <span class="pl-k">.*</span> ys <span class="pl-k">.+</span> <span class="pl-c1">1.2</span>, zs, color<span class="pl-k">=</span><span class="pl-c1">:grey</span>, alpha<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
<span class="pl-c1">scatter!</span>(xs, ys, <span class="pl-c1">0</span> <span class="pl-k">.*</span> zs <span class="pl-k">.-</span> <span class="pl-c1">0.2</span>, color<span class="pl-k">=</span><span class="pl-c1">:grey</span>, alpha<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
<span class="pl-c1">scatter!</span>(xs, ys, zs, color<span class="pl-k">=</span><span class="pl-c1">log10</span>.(vs))
<span class="pl-c1">limits!</span>(ax, <span class="pl-k">-</span><span class="pl-c1">0.2</span>, <span class="pl-c1">1.2</span>, <span class="pl-k">-</span><span class="pl-c1">0.2</span>, <span class="pl-c1">1.2</span>, <span class="pl-k">-</span><span class="pl-c1">0.2</span>, <span class="pl-c1">1.2</span>)

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>Rosenbrock3D.png<span class="pl-pds">"</span></span>, fig)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/15519866/197048856-0f94766d-93ef-41ba-a8d8-b0b3b1e67854.png"><img src="https://user-images.githubusercontent.com/15519866/197048856-0f94766d-93ef-41ba-a8d8-b0b3b1e67854.png" alt="NelderMead jl" style="max-width: 100%;"></a></p>
</article></div>