<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="./doc/SpeechAug.png"><img src="./doc/SpeechAug.png" alt="SpeechAugment" style="max-width:100%;"></a></p>
<h1><a id="user-content-speechaugment" class="anchor" aria-hidden="true" href="#speechaugment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SpeechAugment</h1>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>AI algorithms are mostly data-driven, and the quality of the data determines the quality of the model to some extent. This leads to the inherent shortcoming of deep learning, and data augmentation is an effective way to solve this problem.</p>
<h2><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods</h2>
<p>This repo supports audio data augmentations such as :</p>
<ul>
<li>reverberation</li>
<li>background noise</li>
<li>distortion</li>
<li>packet loss simulation</li>
<li>farfield effect</li>
<li>speed perturbation</li>
</ul>
<p>After those time domain augmentations, one can apply feature extraction step.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install the released stable version, enter the REPL mode</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add SpeechAugment
"><pre>] add SpeechAugment</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;SpeechAugment&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SpeechAugment<span class="pl-pds">"</span></span>)</pre></div>
<p>To install the development version, enter the REPL mode</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add https://github.com/sonosole/SpeechAugment.jl.git
"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>sonosole<span class="pl-k">/</span>SpeechAugment<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using WAV
using SpeechAugment

# 1. read a wav file as a speech example
batchsize = 8;
data,fs = wavread(&quot;/XXPath/ASpeechExample.wav&quot;);

# 2. init all the augmentation functions you want
echo  = initAddEcho(fs, (0.05,0.4), (3.0,3.2,2.5,3.5,2.0,3.0));
noise = initAddNoise(&quot;XXPathFullOfNoiseWAVs&quot;, 2, (5,15));
clip  = initClipWav((0.5,2.0));
drop  = initDropWav(fs, (0.09,0.15));
far   = initFarfieldWav(fs, (0.4,0.9));
speed = initSpeedWav((0.8,1.2));

# 3. make a function list or array
fnlist = [echo noise clip drop far speed];

# 4. augment #batchSize audios
wavs = Vector(undef, batchsize)
for i = 1:batchsize
    wavs[i] = copy(data)
end
wavs = augmentWavs(fnlist, wavs)
for i = 1:batchsize
    wavwrite(wavs[i], &quot;A$i.wav&quot;,Fs=16000,nbits=32)
end

# there is also a function called `augmentWav`
# it augments one audio into multiple audios.
audios = augmentWav(fnlist, data, batchsize)
for i = 1:batchsize
    wavwrite(audios[i], &quot;B$i.wav&quot;,Fs=16000,nbits=32)
end
"><pre><span class="pl-k">using</span> WAV
<span class="pl-k">using</span> SpeechAugment

<span class="pl-c"><span class="pl-c">#</span> 1. read a wav file as a speech example</span>
batchsize <span class="pl-k">=</span> <span class="pl-c1">8</span>;
data,fs <span class="pl-k">=</span> <span class="pl-c1">wavread</span>(<span class="pl-s"><span class="pl-pds">"</span>/XXPath/ASpeechExample.wav<span class="pl-pds">"</span></span>);

<span class="pl-c"><span class="pl-c">#</span> 2. init all the augmentation functions you want</span>
echo  <span class="pl-k">=</span> <span class="pl-c1">initAddEcho</span>(fs, (<span class="pl-c1">0.05</span>,<span class="pl-c1">0.4</span>), (<span class="pl-c1">3.0</span>,<span class="pl-c1">3.2</span>,<span class="pl-c1">2.5</span>,<span class="pl-c1">3.5</span>,<span class="pl-c1">2.0</span>,<span class="pl-c1">3.0</span>));
noise <span class="pl-k">=</span> <span class="pl-c1">initAddNoise</span>(<span class="pl-s"><span class="pl-pds">"</span>XXPathFullOfNoiseWAVs<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span>, (<span class="pl-c1">5</span>,<span class="pl-c1">15</span>));
clip  <span class="pl-k">=</span> <span class="pl-c1">initClipWav</span>((<span class="pl-c1">0.5</span>,<span class="pl-c1">2.0</span>));
drop  <span class="pl-k">=</span> <span class="pl-c1">initDropWav</span>(fs, (<span class="pl-c1">0.09</span>,<span class="pl-c1">0.15</span>));
far   <span class="pl-k">=</span> <span class="pl-c1">initFarfieldWav</span>(fs, (<span class="pl-c1">0.4</span>,<span class="pl-c1">0.9</span>));
speed <span class="pl-k">=</span> <span class="pl-c1">initSpeedWav</span>((<span class="pl-c1">0.8</span>,<span class="pl-c1">1.2</span>));

<span class="pl-c"><span class="pl-c">#</span> 3. make a function list or array</span>
fnlist <span class="pl-k">=</span> [echo noise clip drop far speed];

<span class="pl-c"><span class="pl-c">#</span> 4. augment #batchSize audios</span>
wavs <span class="pl-k">=</span> <span class="pl-c1">Vector</span>(undef, batchsize)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>batchsize
    wavs[i] <span class="pl-k">=</span> <span class="pl-c1">copy</span>(data)
<span class="pl-k">end</span>
wavs <span class="pl-k">=</span> <span class="pl-c1">augmentWavs</span>(fnlist, wavs)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>batchsize
    <span class="pl-c1">wavwrite</span>(wavs[i], <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-v">$i</span>.wav<span class="pl-pds">"</span></span>,Fs<span class="pl-k">=</span><span class="pl-c1">16000</span>,nbits<span class="pl-k">=</span><span class="pl-c1">32</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> there is also a function called `augmentWav`</span>
<span class="pl-c"><span class="pl-c">#</span> it augments one audio into multiple audios.</span>
audios <span class="pl-k">=</span> <span class="pl-c1">augmentWav</span>(fnlist, data, batchsize)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>batchsize
    <span class="pl-c1">wavwrite</span>(audios[i], <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-v">$i</span>.wav<span class="pl-pds">"</span></span>,Fs<span class="pl-k">=</span><span class="pl-c1">16000</span>,nbits<span class="pl-k">=</span><span class="pl-c1">32</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-function-parameter-introduction" class="anchor" aria-hidden="true" href="#function-parameter-introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function Parameter Introduction</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initAddEcho(fs::Number, T₆₀Span::NTuple{2,Number}, roomSpan::NTuple{6,Number}) -&gt; addecho(wav::Array)
"><pre><span class="pl-c1">initAddEcho</span>(fs<span class="pl-k">::</span><span class="pl-c1">Number</span>, T₆₀Span<span class="pl-k">::</span><span class="pl-c1">NTuple{2,Number}</span>, roomSpan<span class="pl-k">::</span><span class="pl-c1">NTuple{6,Number}</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">addecho</span>(wav<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<ul>
<li><code>fs</code> sampling rate</li>
<li><code>T₆₀Span</code> effective reverberation time e.g. (minT60, maxT60)</li>
<li><code>roomSpan</code> room size e.g. (MinL, MaxL, MinW, MaxW, MinH, MaxH)</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/reverberate.png"><img src="./doc/reverberate.png" alt="addEcho" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initAddNoise(path::String, period::Int, dBSpan::NTuple{2,Number}) -&gt; addnoise(speech::Array)
"><pre><span class="pl-c1">initAddNoise</span>(path<span class="pl-k">::</span><span class="pl-c1">String</span>, period<span class="pl-k">::</span><span class="pl-c1">Int</span>, dBSpan<span class="pl-k">::</span><span class="pl-c1">NTuple{2,Number}</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">addnoise</span>(speech<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<ul>
<li><code>path</code> a path only full of noise WAVs</li>
<li><code>period</code> every #period it would change another noise wav.</li>
<li><code>dBSpan</code> span of SNR e.g. (mindB, maxdB)</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/noisy.png"><img src="./doc/noisy.png" alt="addNoise" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initClipWav(clipSpan::NTuple{2,Number}) -&gt; clipwav(wav::Array)
"><pre><span class="pl-c1">initClipWav</span>(clipSpan<span class="pl-k">::</span><span class="pl-c1">NTuple{2,Number}</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">clipwav</span>(wav<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<ul>
<li><code>clipSpan</code> how much it would clip a wav e.g. (0.5,2.0)</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/distortion.png"><img src="./doc/distortion.png" alt="distortion" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initDropWav(fs::Real, ratioSpan::NTuple{2,Number}) -&gt; dropwav(wav::Array)
"><pre><span class="pl-c1">initDropWav</span>(fs<span class="pl-k">::</span><span class="pl-c1">Real</span>, ratioSpan<span class="pl-k">::</span><span class="pl-c1">NTuple{2,Number}</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">dropwav</span>(wav<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<ul>
<li><code>fs</code> sampling rate</li>
<li><code>ratioSpan</code> span of droping ratio e.g. (0.02, 0.09). 1.0 is the uplimit.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/randomdrop.png"><img src="./doc/randomdrop.png" alt="randomdrop" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initFarfieldWav(fs::Real, maxvalueSpan::NTuple{2,Number}) -&gt; farfieldwav(wav::Array)
"><pre><span class="pl-c1">initFarfieldWav</span>(fs<span class="pl-k">::</span><span class="pl-c1">Real</span>, maxvalueSpan<span class="pl-k">::</span><span class="pl-c1">NTuple{2,Number}</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">farfieldwav</span>(wav<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<ul>
<li><code>fs</code> sampling rate</li>
<li><code>maxvalueSpan</code> ranges from (0.0,1.0). Smaller means farther away. (0.2, 0.9) is recommended.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/farfield.png"><img src="./doc/farfield.png" alt="farfield" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="initSpeedWav(speedSpan::NTuple{2,Number}) -&gt; speedwav(wav::Array)
"><pre><span class="pl-c1">initSpeedWav</span>(speedSpan<span class="pl-k">::</span><span class="pl-c1">NTuple{2,Number}</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">speedwav</span>(wav<span class="pl-k">::</span><span class="pl-c1">Array</span>)</pre></div>
<ul>
<li><code>speedSpan</code> range of speed perturbation. (0.85, 1.15) is recommended.</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/Tx08.png"><img src="./doc/Tx08.png" alt="fast" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="./doc/Tx12.png"><img src="./doc/Tx12.png" alt="slow" style="max-width:100%;"></a></p>
<p>All the <code>NTuple{2,Number}</code> parameters should follow the small on the left and the big on the right i.e. (minvalue, maxvalue). To precisely control the extent of augmentation, the below functions could be used:</p>
<ul>
<li>addEcho</li>
<li>addNoise</li>
<li>clipWav</li>
<li>dropWav</li>
<li>farfieldWav</li>
<li>speedWav</li>
</ul>
<p>For details, check the documentation or enter the <code>help?&gt;</code> mode.</p>
</article></div>