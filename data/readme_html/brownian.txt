<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-brownian" class="anchor" aria-hidden="true" href="#brownian"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Brownian</h2>
<p><a href="https://travis-ci.org/UniversityofWarwick/Brownian.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e1468c1ea934fa7e6bebfa3c1fd1368142331dbdca4530314b44d747c3cfca52/68747470733a2f2f7472617669732d63692e6f72672f556e69766572736974796f665761727769636b2f42726f776e69616e2e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/UniversityofWarwick/Brownian.jl.png" style="max-width:100%;"></a></p>
<p>The Julia <code>Brownian</code> package is aimed at providing a centralized repository of algorithms for simulating Brownian-based
stochastic processes. More precisely, the package currently provides routines for random sampling from</p>
<ul>
<li>one-dimensional Brownian motion via random walk,</li>
<li>one-dimensional fractional Brownian motion (FBM) and one-dimensional fractional Gaussian noise (FGN) via the Cholesky
decomposition method or the Davies-Harte method, which makes use of fast Fourier transforms,</li>
<li>one-dimensional Riemann-Liouville fractional Brownian motion (FBM) via an exact discrete method.</li>
</ul>
<p>The future roadmap would be to provide implementations for sampling from</p>
<ul>
<li>one-dimensional Brownian motion via Brownian bridge and via multivariate normals,</li>
<li>one-dimensional fractional Brownian motion using the Hosking method,</li>
<li>multidimensional Brownian and fractional Brownian motion,</li>
<li>reflected Brownian motion (RBM).</li>
</ul>
<p>Willing developers are welcome to contribute to the package.</p>
<h3><a id="user-content-short-tutorial" class="anchor" aria-hidden="true" href="#short-tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Short tutorial</h3>
<h3><a id="user-content-example-1-simulation-of-brownian-motion" class="anchor" aria-hidden="true" href="#example-1-simulation-of-brownian-motion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1: simulation of Brownian motion</h3>
<p>To simulate Brownian motion at the time points (0, 0.1, 0.5, 0.75, 1), use the following snippet:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Brownian

p = BrownianMotion([0, 0.1, 0.5, 0.75, 1])

rand(p)
"><pre><code>using Brownian

p = BrownianMotion([0, 0.1, 0.5, 0.75, 1])

rand(p)
</code></pre></div>
<h3><a id="user-content-example-2-simulation-of-fbm-and-fgn" class="anchor" aria-hidden="true" href="#example-2-simulation-of-fbm-and-fgn"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2: simulation of FBM and FGN</h3>
<p>Suppose that interest is in simulating fractional Brownian motion with Hurst index equal to 0.4 in the time interval
[0, 1] with a time step of 1/2^n for some natural n (for example n=10).</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Brownian

p = FBM(0:1/2^10:1, 0.4)

# Using the Davies-Harte algorithm, which relies on fast Fourier transforms (FFT)
rand(p)

# Using a method based on the Cholesky decomposition of the covariance matrix of FBM
rand(p, method=:chol)

# Using an exact discrete method for simulating Riemann-Liouville FBM
rand(p, method=:rl)
"><pre><code>using Brownian

p = FBM(0:1/2^10:1, 0.4)

# Using the Davies-Harte algorithm, which relies on fast Fourier transforms (FFT)
rand(p)

# Using a method based on the Cholesky decomposition of the covariance matrix of FBM
rand(p, method=:chol)

# Using an exact discrete method for simulating Riemann-Liouville FBM
rand(p, method=:rl)
</code></pre></div>
<p>To simulate fractional Gaussian noise with the same Hurst index,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# Using the Davies-Harte algorithm
rand(p, fbm=false)

# Using the Cholesky method
rand(p, fbm=false, method=:chol)
"><pre><code># Using the Davies-Harte algorithm
rand(p, fbm=false)

# Using the Cholesky method
rand(p, fbm=false, method=:chol)
</code></pre></div>
<p>Note that fractional Brownian motion is obtained from fractional Gaussian noise by taking cumulative sums (and
conversely FGN is computed from FBM by differencing).</p>
</article></div>