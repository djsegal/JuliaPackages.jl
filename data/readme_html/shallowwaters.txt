<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-shallowwatersjl---a-type-flexible-16-bit-shallow-water-model" class="anchor" aria-hidden="true" href="#shallowwatersjl---a-type-flexible-16-bit-shallow-water-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ShallowWaters.jl - A type-flexible 16-bit shallow water model</h1>
<p><a href="https://github.com/milankl/ShallowWaters.jl/actions/workflows/CI.yml"><img src="https://github.com/milankl/ShallowWaters.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/132787050" rel="nofollow"><img src="https://camo.githubusercontent.com/44a2a66956f7916040f8b588a5a3e5efdac2a35c265470fedd33dc1ebfa14e12/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3133323738373035302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/132787050.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="figs/isambard_float16.png?raw=true"><img src="figs/isambard_float16.png?raw=true" alt="sst" title="Float16 simulation with ShallowWaters.jl on Isambard's A64FX" style="max-width:100%;"></a></p>
<p>A shallow water model with a focus on type-flexibility and 16-bit number formats. ShallowWaters allows for Float64/32/16,
<a href="https://github.com/milankl/SoftPosit.jl">Posit32/16/8</a>, <a href="https://github.com/JuliaComputing/BFloat16s.jl">BFloat16</a>,
<a href="https://github.com/milankl/LogFixPoint16s.jl">LogFixPoint16</a>, <a href="https://github.com/milankl/Sonums.jl">Sonum16</a>,
<a href="https://github.com/milankl/StochasticRounding.jl">Float32/16 &amp; BFloat16 with stochastic rounding</a> and in
general every number format with arithmetics and conversions implemented. ShallowWaters also allows for
mixed-precision and reduced precision communication.</p>
<p>ShallowWaters uses an energy and enstrophy conserving advection scheme and a Smagorinsky-like biharmonic diffusion operator.
Tracer advection is implemented with a semi-Lagrangian advection scheme. Strong stability-preserving Runge-Kutta schemes of
various orders and stages are used with a semi-implicit treatment of the continuity equation. Boundary conditions are either
periodic (only in x direction) or non-periodic super-slip, free-slip, partial-slip, or no-slip.
Output via <a href="https://github.com/JuliaGeo/NetCDF.jl">NetCDF</a>.</p>
<p>Please feel free to raise an <a href="https://github.com/milankl/ShallowWaters.jl/issues">issue</a> if you discover bugs or have an idea how to improve ShallowWaters.</p>
<p>Requires: Julia 1.2 or higher</p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<p><code>RunModel</code> initialises the model, preallocates memory and starts the time integration. You find the options and default parameters in <code>src/DefaultParameters.jl</code> (or by typing <code>?Parameter</code>).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="help?&gt; Parameter
search: Parameter

  Creates a Parameter struct with following options and default values

  T::DataType=Float32                 # number format

  Tprog::DataType=T                   # number format for prognostic variables
  Tcomm::DataType=Tprog               # number format for ghost-point copies

  # DOMAIN RESOLUTION AND RATIO
  nx::Int=100                         # number of grid cells in x-direction
  Lx::Real=2000e3                     # length of the domain in x-direction [m]
  L_ratio::Real=2                     # Domain aspect ratio of Lx/Ly
  ...
"><pre>help?<span class="pl-k">&gt;</span> Parameter
search<span class="pl-k">:</span> Parameter

  Creates a Parameter <span class="pl-k">struct</span> with following options and default values

  T<span class="pl-k">::</span><span class="pl-c1">DataType</span><span class="pl-k">=</span>Float32                 <span class="pl-c"><span class="pl-c">#</span> number format</span>

  Tprog<span class="pl-k">::</span><span class="pl-c1">DataType</span><span class="pl-k">=</span>T                   <span class="pl-c"><span class="pl-c">#</span> number format for prognostic variables</span>
  Tcomm<span class="pl-k">::</span><span class="pl-c1">DataType</span><span class="pl-k">=</span>Tprog               <span class="pl-c"><span class="pl-c">#</span> number format for ghost-point copies</span>

  <span class="pl-c"><span class="pl-c">#</span> DOMAIN RESOLUTION AND RATIO</span>
  nx<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">100</span>                         <span class="pl-c"><span class="pl-c">#</span> number of grid cells in x-direction</span>
  Lx<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">2000e3</span>                     <span class="pl-c"><span class="pl-c">#</span> length of the domain in x-direction [m]</span>
  L_ratio<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">2</span>                     <span class="pl-c"><span class="pl-c">#</span> Domain aspect ratio of Lx/Ly</span>
  <span class="pl-k">...</span></pre></div>
<p>They can be changed with keyword arguments. The number format <code>T</code> is defined as the first (but optional) argument of <code>RunModel(T,...)</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Prog = run_model(Float32,Ndays=10,g=10,H=500,Fx0=0.12);
Starting ShallowWaters on Sun, 20 Oct 2019 19:58:25 without output.
100% Integration done in 4.65s.
"><pre>julia<span class="pl-k">&gt;</span> Prog <span class="pl-k">=</span> <span class="pl-c1">run_model</span>(Float32,Ndays<span class="pl-k">=</span><span class="pl-c1">10</span>,g<span class="pl-k">=</span><span class="pl-c1">10</span>,H<span class="pl-k">=</span><span class="pl-c1">500</span>,Fx0<span class="pl-k">=</span><span class="pl-c1">0.12</span>);
Starting ShallowWaters on Sun, <span class="pl-c1">20</span> Oct <span class="pl-c1">2019</span> <span class="pl-c1">19</span><span class="pl-k">:</span><span class="pl-c1">58</span><span class="pl-k">:</span><span class="pl-c1">25</span> without output.
<span class="pl-c1">100</span><span class="pl-k">%</span> Integration done <span class="pl-k">in</span> <span class="pl-c1">4.65</span>s.</pre></div>
<p>or by creating a Parameter struct</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; P = Parameter(bc=&quot;nonperiodic&quot;,wind_forcing_x=&quot;double_gyre&quot;,L_ratio=1,nx=128);
julia&gt; Prog = run_model(P);
"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Parameter</span>(bc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>nonperiodic<span class="pl-pds">"</span></span>,wind_forcing_x<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double_gyre<span class="pl-pds">"</span></span>,L_ratio<span class="pl-k">=</span><span class="pl-c1">1</span>,nx<span class="pl-k">=</span><span class="pl-c1">128</span>);
julia<span class="pl-k">&gt;</span> Prog <span class="pl-k">=</span> <span class="pl-c1">run_model</span>(P);</pre></div>
<p>The number formats can be different (aka mixed-precision) for different parts of the model. <code>Tprog</code> is the number type for the prognostic variables, <code>Tcomm</code> is used for communication of boundary values.</p>
<h2><a id="user-content-double-gyre-example" class="anchor" aria-hidden="true" href="#double-gyre-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Double-gyre example</h2>
<p>You can for example run a double gyre simulation like this</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ShallowWaters
julia&gt; P = run_model(Ndays=100,nx=100,L_ratio=1,bc=&quot;nonperiodic&quot;,wind_forcing_x=&quot;double_gyre&quot;,topography=&quot;seamount&quot;);
Starting ShallowWaters on Sat, 15 Aug 2020 11:59:21 without output.
100% Integration done in 13.7s.
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ShallowWaters
julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">run_model</span>(Ndays<span class="pl-k">=</span><span class="pl-c1">100</span>,nx<span class="pl-k">=</span><span class="pl-c1">100</span>,L_ratio<span class="pl-k">=</span><span class="pl-c1">1</span>,bc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>nonperiodic<span class="pl-pds">"</span></span>,wind_forcing_x<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double_gyre<span class="pl-pds">"</span></span>,topography<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>seamount<span class="pl-pds">"</span></span>);
Starting ShallowWaters on Sat, <span class="pl-c1">15</span> Aug <span class="pl-c1">2020</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">59</span><span class="pl-k">:</span><span class="pl-c1">21</span> without output.
<span class="pl-c1">100</span><span class="pl-k">%</span> Integration done <span class="pl-k">in</span> <span class="pl-c1">13.7</span>s.</pre></div>
<p>Sea surface height can be visualised via</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PyPlot
julia&gt; pcolormesh(P.η')
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyPlot
julia<span class="pl-k">&gt;</span> <span class="pl-c1">pcolormesh</span>(P<span class="pl-k">.</span>η<span class="pl-k">'</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/25530332/90311163-1ee40a00-def0-11ea-8911-810d7762cd3f.png"><img src="https://user-images.githubusercontent.com/25530332/90311163-1ee40a00-def0-11ea-8911-810d7762cd3f.png" alt="Figure_1" style="max-width:100%;"></a></p>
<p>Or let's calculate the speed of the currents</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; speed = sqrt.(Ix(P.u.^2)[:,2:end-1] + Iy(P.v.^2)[2:end-1,:])
"><pre>julia<span class="pl-k">&gt;</span> speed <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>.(<span class="pl-c1">Ix</span>(P<span class="pl-k">.</span>u<span class="pl-k">.^</span><span class="pl-c1">2</span>)[:,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-c1">Iy</span>(P<span class="pl-k">.</span>v<span class="pl-k">.^</span><span class="pl-c1">2</span>)[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>,:])</pre></div>
<p><code>P.u</code> and <code>P.v</code> are the u,v velocity components on the Arakawa C-grid. To add them, we need to interpolate them with <code>Ix,Iy</code> (which are exported by <code>ShallowWaters.jl</code> too), then chopping off the edges to get two arrays of the same size.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; pcolormesh(speed')
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">pcolormesh</span>(speed<span class="pl-k">'</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/25530332/90311211-88fcaf00-def0-11ea-8308-b4f438495152.png"><img src="https://user-images.githubusercontent.com/25530332/90311211-88fcaf00-def0-11ea-8308-b4f438495152.png" alt="Figure_2" style="max-width:100%;"></a></p>
<p>Such that the currents are strongest around the two eddies, as expected in this quasi-geostrophic setup.</p>
<h2><a id="user-content-some-features" class="anchor" aria-hidden="true" href="#some-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>(Some) Features</h2>
<ul>
<li>Interpolation of initial conditions from low resolution / high resolution runs.</li>
<li>Output of relative vorticity, potential vorticity and tendencies du,dv,deta</li>
<li>(Pretty accurate) duration estimate</li>
<li>Can be run in ensemble mode with ordered non-conflicting output files</li>
<li>Runs at CFL=1 (RK4), and more with the strong stability-preserving Runge-Kutta methods</li>
<li>Solving the tracer advection comes at basically no cost, thanks to semi-Lagrangian advection scheme</li>
<li>Also outputs the gradient operators ∂/∂x,∂/∂y and interpolations Ix, Iy for easier post-processing.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>ShallowWaters.jl is a registered package, so simply do</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add ShallowWaters
"><pre>julia<span class="pl-k">&gt;</span> ] add ShallowWaters</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>ShallowWaters.jl was used and is described in more detail in</p>
<p>Klöwer M, Düben PD, Palmer TN. Number formats, error mitigation and scope for 16-bit arithmetics in weather and climate modelling analysed with a shallow water model. Journal of Advances in Modeling Earth Systems. doi: <a href="https://dx.doi.org/10.1029/2020MS002246" rel="nofollow">10.1029/2020MS002246</a></p>
<p>Klöwer M, Düben PD, Palmer TN. Posits as an alternative to floats for weather and climate models. In: Proceedings of the Conference for Next Generation Arithmetic 2019. doi: <a href="https://dx.doi.org/10.1145/3316279.3316281" rel="nofollow">10.1145/3316279.3316281</a></p>
<h2><a id="user-content-the-equations" class="anchor" aria-hidden="true" href="#the-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The equations</h2>
<p>The non-linear shallow water model plus tracer equation is</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="      ∂u/∂t + (u⃗⋅∇)u - f*v = -g*∂η/∂x - c_D*|u⃗|*u + ∇⋅ν*∇(∇²u) + Fx(x,y)     (1)
      ∂v/∂t + (u⃗⋅∇)v + f*u = -g*∂η/∂y - c_D*|u⃗|*v + ∇⋅ν*∇(∇²v) + Fy(x,y)     (2)
      ∂η/∂t = -∇⋅(u⃗h) + γ*(η_ref - η) + Fηt(t)*Fη(x,y)                       (3)
      ∂ϕ/∂t = -u⃗⋅∇ϕ                                                          (4)
"><pre><code>      ∂u/∂t + (u⃗⋅∇)u - f*v = -g*∂η/∂x - c_D*|u⃗|*u + ∇⋅ν*∇(∇²u) + Fx(x,y)     (1)
      ∂v/∂t + (u⃗⋅∇)v + f*u = -g*∂η/∂y - c_D*|u⃗|*v + ∇⋅ν*∇(∇²v) + Fy(x,y)     (2)
      ∂η/∂t = -∇⋅(u⃗h) + γ*(η_ref - η) + Fηt(t)*Fη(x,y)                       (3)
      ∂ϕ/∂t = -u⃗⋅∇ϕ                                                          (4)
</code></pre></div>
<p>with the prognostic variables velocity u⃗ = (u,v) and sea surface heigth η. The layer thickness is h = η + H(x,y). The Coriolis parameter is f = f₀ + βy with beta-plane approximation. The graviational acceleration is g. Bottom friction is either quadratic with drag coefficient c_D or linear with inverse time scale r. Diffusion is realized with a biharmonic diffusion operator, with either a constant viscosity coefficient ν, or a Smagorinsky-like coefficient that scales as ν = c_Smag*|D|, with deformation rate |D| = √((∂u/∂x - ∂v/∂y)² + (∂u/∂y + ∂v/∂x)²). Wind forcing Fx is constant in time, but may vary in space.</p>
<p>The linear shallow water model equivalent is</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="      ∂u/∂t - f*v = -g*∂η/∂x - r*u + ∇⋅ν*∇(∇²u) + Fx(x,y)     (1)
      ∂v/∂t + f*u = -g*∂η/∂y - r*v + ∇⋅ν*∇(∇²v) + Fy(x,y)     (2)
      ∂η/∂t = -H*∇⋅u⃗ + γ*(η_ref - η) + Fηt(t)*Fη(x,y)         (3)
      ∂ϕ/∂t = -u⃗⋅∇ϕ                                           (4)
"><pre><code>      ∂u/∂t - f*v = -g*∂η/∂x - r*u + ∇⋅ν*∇(∇²u) + Fx(x,y)     (1)
      ∂v/∂t + f*u = -g*∂η/∂y - r*v + ∇⋅ν*∇(∇²v) + Fy(x,y)     (2)
      ∂η/∂t = -H*∇⋅u⃗ + γ*(η_ref - η) + Fηt(t)*Fη(x,y)         (3)
      ∂ϕ/∂t = -u⃗⋅∇ϕ                                           (4)
</code></pre></div>
<p>ShallowWaters.jl discretises the equation on an equi-distant Arakawa C-grid, with 2nd order finite-difference operators. Boundary conditions are implemented via a ghost-point copy and each variable has a halo of variable size to account for different stencil sizes of various operators.</p>
</article></div>