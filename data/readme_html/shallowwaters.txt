<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/8e81866efd56bc430b1925915d1793e1219b094e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f5f7374617475732d6163746976652d627269676874677265656e3f7374796c653d666c61742d737175617265" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://img.shields.io/badge/repo_status-active-brightgreen?style=flat-square" style="max-width:100%;"></a>
<a href="https://travis-ci.com/milankl/ShallowWaters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0403752639a7bd998d232e0c7b3c3e461a46584/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6d696c616e6b6c2f5368616c6c6f775761746572732e6a6c3f6c6162656c3d4c696e75782532302532362532306f7378266c6f676f3d747261766973267374796c653d666c61742d737175617265" alt="Travis" data-canonical-src="https://img.shields.io/travis/com/milankl/ShallowWaters.jl?label=Linux%20%26%20osx&amp;logo=travis&amp;style=flat-square" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/milankl/ShallowWaters-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/45224680b4052b2c367f88c389bd8dacf875f6ec/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f6d696c616e6b6c2f5368616c6c6f775761746572732d6a6c3f6c6162656c3d57696e646f7773266c6f676f3d6170707665796f72266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="AppVeyor" data-canonical-src="https://img.shields.io/appveyor/ci/milankl/ShallowWaters-jl?label=Windows&amp;logo=appveyor&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;"></a>
<a href="https://cirrus-ci.com/github/milankl/ShallowWaters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3b96351749967a96c980230b5ed4a73d014e47c0/68747470733a2f2f696d672e736869656c64732e696f2f6369727275732f6769746875622f6d696c616e6b6c2f5368616c6c6f775761746572732e6a6c3f6c6162656c3d46726565425344266c6f676f3d6369727275732d6369266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="Cirrus CI" data-canonical-src="https://img.shields.io/cirrus/github/milankl/ShallowWaters.jl?label=FreeBSD&amp;logo=cirrus-ci&amp;logoColor=white&amp;style=flat-square" style="max-width:100%;"></a></p>
<p><a href="https://zenodo.org/badge/latestdoi/132787050" rel="nofollow"><img src="https://camo.githubusercontent.com/03628c7383759c361d658f5d6246cefb11e60bc9/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3133323738373035302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/132787050.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-shallowwatersjl---a-type-flexible-16bit-shallow-water-model" class="anchor" aria-hidden="true" href="#shallowwatersjl---a-type-flexible-16bit-shallow-water-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ShallowWaters.jl - A type-flexible 16bit shallow water model</h1>
<p><a target="_blank" rel="noopener noreferrer" href="figs/sst_posit16.png?raw=true"><img src="figs/sst_posit16.png?raw=true" alt="sst" title="SST" style="max-width:100%;"></a></p>
<p>A shallow water model with a focus on type-flexibility and 16bit number formats. ShallowWaters allows for Float64/32/16, <a href="https://docs.julialang.org/en/v1/base/numbers/#BigFloats-and-BigInts-1" rel="nofollow">BigFloat</a>/<a href="https://github.com/JeffreySarnoff/ArbNumerics.jl">ArbFloat</a>/<a href="https://github.com/JuliaMath/DoubleFloats.jl">DoubleFloats</a>, <a href="https://github.com/milankl/SoftPosit.jl">Posit32/16/8</a>, <a href="https://github.com/JuliaComputing/BFloat16s.jl">BFloat16</a>, <a href="https://github.com/milankl/Sonums.jl">Sonum16</a> and in general every number format with arithmetics and conversions implemented. ShallowWaters also allows for mixed-precision and reduced precision communication.</p>
<p>ShallowWaters is fully-explicit with an energy and enstrophy conserving advection scheme and a Smagorinsky-like biharmonic diffusion operator. Tracer advection is implemented with a semi-Lagrangian advection scheme. Runge-Kutta 4th-order is used for pressure, advective and Coriolis terms and the continuity equation. Semi-implicit time stepping for diffusion and bottom friction. Boundary conditions are either periodic (only in x direction) or non-periodic super-slip, free-slip, partial-slip, or no-slip. Output via <a href="https://github.com/JuliaGeo/NetCDF.jl">NetCDF</a>.</p>
<p>Please feel free to raise an <a href="https://github.com/milankl/ShallowWaters.jl/issues">issue</a> if you discover bugs or have an idea how to improve ShallowWaters.</p>
<h3><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to use</h3>
<p><code>RunModel</code> initialises the model, preallocates memory and starts the time integration. You find the options and default parameters in <code>src/DefaultParameters.jl</code> (or by typing <code>?Parameter</code>).</p>
<div class="highlight highlight-source-julia"><pre>help?<span class="pl-k">&gt;</span> Parameter
search<span class="pl-k">:</span> Parameter

  Creates a Parameter <span class="pl-k">struct</span> with following options and default values

  T<span class="pl-k">::</span><span class="pl-c1">DataType</span><span class="pl-k">=</span>Float32                 <span class="pl-c"><span class="pl-c">#</span> number format</span>
  
  Tprog<span class="pl-k">::</span><span class="pl-c1">DataType</span><span class="pl-k">=</span>T                   <span class="pl-c"><span class="pl-c">#</span> number format for prognostic variables</span>
  Tcomm<span class="pl-k">::</span><span class="pl-c1">DataType</span><span class="pl-k">=</span>Tprog               <span class="pl-c"><span class="pl-c">#</span> number format for ghost-point copies</span>
  
  <span class="pl-c"><span class="pl-c">#</span> DOMAIN RESOLUTION AND RATIO</span>
  nx<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">100</span>                         <span class="pl-c"><span class="pl-c">#</span> number of grid cells in x-direction</span>
  Lx<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">2000e3</span>                     <span class="pl-c"><span class="pl-c">#</span> length of the domain in x-direction [m]</span>
  L_ratio<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">2</span>                     <span class="pl-c"><span class="pl-c">#</span> Domain aspect ratio of Lx/Ly</span>
  <span class="pl-k">...</span></pre></div>
<p>They can be changed with keyword arguments. The number format <code>T</code> is defined as the first (but optional) argument of <code>RunModel(T,...)</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Prog <span class="pl-k">=</span> <span class="pl-c1">RunModel</span>(Float32,Ndays<span class="pl-k">=</span><span class="pl-c1">10</span>,g<span class="pl-k">=</span><span class="pl-c1">10</span>,H<span class="pl-k">=</span><span class="pl-c1">500</span>,Fx0<span class="pl-k">=</span><span class="pl-c1">0.12</span>);
Starting ShallowWaters on Sun, <span class="pl-c1">20</span> Oct <span class="pl-c1">2019</span> <span class="pl-c1">19</span><span class="pl-k">:</span><span class="pl-c1">58</span><span class="pl-k">:</span><span class="pl-c1">25</span> without output.
<span class="pl-c1">100</span><span class="pl-k">%</span> Integration done <span class="pl-k">in</span> <span class="pl-c1">4.65</span>s.</pre></div>
<p>or by creating a Parameter struct</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">Parameter</span>(bc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>nonperiodic<span class="pl-pds">"</span></span>,wind_forcing_x<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>double_gyre<span class="pl-pds">"</span></span>,L_ratio<span class="pl-k">=</span><span class="pl-c1">1</span>,nx<span class="pl-k">=</span><span class="pl-c1">128</span>);
julia<span class="pl-k">&gt;</span> Prog <span class="pl-k">=</span> <span class="pl-c1">RunModel</span>(P);</pre></div>
<p>The number formats can be different (aka mixed-precision) for different parts of the model. <code>Tprog</code> is the number type for the prognostic variables, <code>Tcomm</code> is used for communication of boundary values.</p>
<h3><a id="user-content-some-features" class="anchor" aria-hidden="true" href="#some-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>(Some) Features</h3>
<ul>
<li>Interpolation of initial conditions from low resolution / high resolution runs.</li>
<li>Output of relative vorticity, potential vorticity and tendencies du,dv,deta</li>
<li>(Pretty accurate) duration estimate</li>
<li>Can be run in ensemble mode with ordered non-conflicting output files</li>
<li>Runs at CFL=1</li>
<li>Solving the tracer advection comes at basically no cost, thanks to semi-Lagrangian advection scheme</li>
<li>Also outputs the gradient operators âˆ‚/âˆ‚x,âˆ‚/âˆ‚y and interpolations Ix, Iy for easier post-processing.</li>
</ul>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h3>
<p>ShallowWaters.jl is a registered package, so simply do</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ] add ShallowWaters</pre></div>
<h2><a id="user-content-the-equations" class="anchor" aria-hidden="true" href="#the-equations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The equations</h2>
<p>The non-linear shallow water model plus tracer equation is</p>
<pre><code>      âˆ‚u/âˆ‚t + (uâƒ—â‹…âˆ‡)u - f*v = -g*âˆ‚Î·/âˆ‚x - c_D*|uâƒ—|*u + âˆ‡â‹…Î½*âˆ‡(âˆ‡Â²u) + Fx(x,y)     (1)
      âˆ‚v/âˆ‚t + (uâƒ—â‹…âˆ‡)v + f*u = -g*âˆ‚Î·/âˆ‚y - c_D*|uâƒ—|*v + âˆ‡â‹…Î½*âˆ‡(âˆ‡Â²v) + Fy(x,y)     (2)
      âˆ‚Î·/âˆ‚t = -âˆ‡â‹…(uâƒ—h) + Î³*(Î·_ref - Î·) + FÎ·t(t)*FÎ·(x,y)                       (3)
      âˆ‚Ï•/âˆ‚t = -uâƒ—â‹…âˆ‡Ï•                                                          (4)
</code></pre>
<p>with the prognostic variables velocity uâƒ— = (u,v) and sea surface heigth Î·. The layer thickness is h = Î· + H(x,y). The Coriolis parameter is f = fâ‚€ + Î²y with beta-plane approximation. The graviational acceleration is g. Bottom friction is either quadratic with drag coefficient c_D or linear with inverse time scale r. Diffusion is realized with a biharmonic diffusion operator, with either a constant viscosity coefficient Î½, or a Smagorinsky-like coefficient that scales as Î½ = c_Smag*|D|, with deformation rate |D| = âˆš((âˆ‚u/âˆ‚x - âˆ‚v/âˆ‚y)Â² + (âˆ‚u/âˆ‚y + âˆ‚v/âˆ‚x)Â²). Wind forcing Fx is constant in time, but may vary in space.</p>
<p>The linear shallow water model equivalent is</p>
<pre><code>      âˆ‚u/âˆ‚t - f*v = -g*âˆ‚Î·/âˆ‚x - r*u + âˆ‡â‹…Î½*âˆ‡(âˆ‡Â²u) + Fx(x,y)     (1)
      âˆ‚v/âˆ‚t + f*u = -g*âˆ‚Î·/âˆ‚y - r*v + âˆ‡â‹…Î½*âˆ‡(âˆ‡Â²v) + Fy(x,y)     (2)
      âˆ‚Î·/âˆ‚t = -H*âˆ‡â‹…uâƒ— + Î³*(Î·_ref - Î·) + FÎ·t(t)*FÎ·(x,y)         (3)
      âˆ‚Ï•/âˆ‚t = -uâƒ—â‹…âˆ‡Ï•                                           (4)
</code></pre>
<p>ShallowWaters.jl discretises the equation on an equi-distant Arakawa C-grid, with 2nd order finite-difference operators. Boundary conditions are implemented via a ghost-point copy and each variable has a halo of variable size to account for different stencil sizes of various operators.</p>
<p>ShallowWaters.jl splits the time steps for various terms: Runge Kutta 4th order scheme for the fast varying terms. The diffusive terms (bottom friction and diffusion) are solved semi-implicitly every n-th time step. The tracer equation is solved with a semi-Lagrangian scheme that uses much larger time steps.</p>
</article></div>