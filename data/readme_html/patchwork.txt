<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-patchwork" class="anchor" aria-hidden="true" href="#patchwork"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Patchwork</h1>
<p><a href="https://travis-ci.org/shashi/Patchwork.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c0f50c523d26cad28f34cfab698bd6274f8c7ad9/68747470733a2f2f7472617669732d63692e6f72672f7368617368692f5061746368776f726b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/shashi/Patchwork.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A library for representing browser <a href="http://www.w3.org/TR/WD-DOM/introduction.html" rel="nofollow">DOM</a> in Julia. It supports <a href="#creating-elements">element creation</a>, <a href="#diff-computation">diff computation</a> and <a href="#javascript-setup-and-patching">browser-side patching</a>.</p>
<h2><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setup</h2>
<p>From the REPL, run</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Patchwork<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-creating-elements" class="anchor" aria-hidden="true" href="#creating-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Elements</h2>
<p>The <code>Elem</code> constructor can be used to create an element.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> E.g.</span>
<span class="pl-k">using</span> Patchwork

<span class="pl-c1">Elem</span>(<span class="pl-c1">:h1</span>, <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>)</pre></div>
<p>creates an <code>h1</code> heading element equivalent to the HTML <code>&lt;h1&gt;Hello, World!&lt;/h1&gt;</code></p>
<p>You can attach any DOM property (e.g. <code>className</code>, <code>style</code>, <code>height</code>, <code>width</code>) that you would like the DOM node to have by passing it as a keyword argument to <code>Elem</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> E.g.</span>
<span class="pl-c1">Elem</span>(<span class="pl-c1">:h1</span>, <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, className<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>welcome<span class="pl-pds">"</span></span>, style<span class="pl-k">=</span>[<span class="pl-c1">:color</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:white</span>, <span class="pl-c1">:backgroundColor</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:black</span>])</pre></div>
<p>This creates a <code>h1</code> with white text on a black background.</p>
<p>You can of course nest elements inside another</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Elem</span>(<span class="pl-c1">:div</span>, [
    <span class="pl-c1">Elem</span>(<span class="pl-c1">:h1</span>, <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>),
    <span class="pl-c1">Elem</span>(<span class="pl-c1">:p</span>, <span class="pl-s"><span class="pl-pds">"</span>How are you doing today?<span class="pl-pds">"</span></span>)])</pre></div>
<p><code>Elem</code> objects are immutable <code>children(::Elem)</code> returns the children of the element as a <a href="https://github.com/JuliaLang/FunctionalCollections.jl#persistentvector">persistent vector</a> <code>properties(::Elem)</code> returns the dictionary of its properties. There are some infix operators defined for <code>Elem</code>.</p>
<p>The <code>&amp;</code> operator can set attributes</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> E.g.</span>
div_with_class <span class="pl-k">=</span> <span class="pl-c1">Elem</span>(<span class="pl-c1">:div</span>, <span class="pl-s"><span class="pl-pds">"</span>This div's class can change<span class="pl-pds">"</span></span>) <span class="pl-k">&amp;</span> [<span class="pl-c1">:className</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>shiny<span class="pl-pds">"</span></span>]</pre></div>
<p>The <code>&lt;&lt;</code> operator can append an element to the end of another.</p>
<div class="highlight highlight-source-julia"><pre>h1_and_p <span class="pl-k">=</span> <span class="pl-c1">Elem</span>(<span class="pl-c1">:div</span>, <span class="pl-c1">Elem</span>(<span class="pl-c1">:h1</span>, <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>)) <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">Elem</span>(<span class="pl-c1">:p</span>, <span class="pl-s"><span class="pl-pds">"</span>How are you doing today?<span class="pl-pds">"</span></span>)</pre></div>
<p>SVG graphics are DOM nodes too, and hence can be created in Patchwork.</p>
<div class="highlight highlight-source-julia"><pre>    <span class="pl-c1">Elem</span>(<span class="pl-c1">:svg</span>, <span class="pl-c1">Elem</span>(<span class="pl-c1">:circle</span>, cx<span class="pl-k">=</span><span class="pl-c1">250</span>, cy<span class="pl-k">=</span><span class="pl-c1">250</span>, r<span class="pl-k">=</span><span class="pl-c1">100</span>, fill<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>),
         width<span class="pl-k">=</span><span class="pl-c1">500</span>, height<span class="pl-k">=</span><span class="pl-c1">500</span>)</pre></div>
<p>draws a circle.</p>
<p>If you are using IJulia, you can use the <a href="https://github.com/JuliaLang/Interact.jl">Interact.jl</a>'s <code>@manipulate</code> statement to draw a circle whose position, radius and color can be changed:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Interact, Patchwork
<span class="pl-c1">@manipulate</span> <span class="pl-k">for</span> r<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, cx <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">500</span>, cy<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">400</span>, color<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>]
    <span class="pl-c1">Elem</span>(<span class="pl-c1">:svg</span>, <span class="pl-c1">Elem</span>(<span class="pl-c1">:circle</span>, cx<span class="pl-k">=</span>cx, cy<span class="pl-k">=</span>cy, r<span class="pl-k">=</span>r, fill<span class="pl-k">=</span>color),
         width<span class="pl-k">=</span><span class="pl-c1">500</span>, height<span class="pl-k">=</span><span class="pl-c1">500</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-diff-computation" class="anchor" aria-hidden="true" href="#diff-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Diff computation</h2>
<p>The <code>diff</code> function computes the difference between two elements.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> E.g.</span>
patch <span class="pl-k">=</span> <span class="pl-c1">diff</span>(left<span class="pl-k">::</span><span class="pl-c1">Elem</span>, right<span class="pl-k">::</span><span class="pl-c1">Elem</span>)</pre></div>
<p>Returns a "patch". A patch is a <code>Dict</code> which maps node indices to a list of patches on that node. The node index is a number representing the position of the node in a depth-first ordering starting at the root node (here <code>left</code>), whose index is 0.</p>
<p><code>Elem</code>s are based on immutable datastructures. <code>&amp;</code> and <code>&lt;&lt;</code> operations return new <code>Elem</code>s, which may share structure with the operands. The more structure two nodes share, the faster the diffing.</p>
<p>For example, if you have a big <code>Elem</code>, say <code>averybigelem</code>, the running time of the following diff call</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">diff</span>(averybigelem, averybigelem <span class="pl-k">&amp;</span> [<span class="pl-c1">:className</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>shiny<span class="pl-pds">"</span></span>])</pre></div>
<p>will not depend on the size and complexity of <code>averybigelem</code> because diffing gets <em>short-circuited</em> since <code>left.children === right.children</code>. It will probably be helpful to keep this in mind while building something with Patchwork.</p>
<h2><a id="user-content-javascript-setup-and-patching" class="anchor" aria-hidden="true" href="#javascript-setup-and-patching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JavaScript setup and patching</h2>
<p>Patchwork has a javascript "runtime" in <code>runtime/build.js</code> that needs to be included into a page where you would like to display Patchwork nodes.</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">script</span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">"</span>/path/to/build.js<span class="pl-pds">"</span></span>&gt;&lt;/<span class="pl-ent">script</span>&gt;</pre></div>
<p>This is automatically done for you if you are using Patchwork from IJulia.</p>
<p>Patchwork defines the <code>writemime(io::IO, ::MIME"text/html", ::Elem)</code> method which can use JavaScript to display nodes and/or apply patches to nodes that are already displayed.</p>
<p>At a lower level, the runtime exposes the <code>window.Patchwork</code> object, which can be used to render nodes from their JSON representations and also apply patches.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> E.g.</span>
node <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Patchwork.Node</span>(mountId, elemJSON)</pre></div>
<p>this renders the node represented by <code>elemJSON</code> and appends it to a DOM element with id <code>mountId</code>.</p>
<p><code>Patchwork.Node</code> instances have an <code>applyPatch</code> method which can be used to patch the node.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> E.g.</span>
<span class="pl-smi">node</span>.<span class="pl-en">applyPatch</span>(patchJSON)</pre></div>
<h2><a id="user-content-with-compose-and-gadfly" class="anchor" aria-hidden="true" href="#with-compose-and-gadfly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>With Compose and Gadfly</h2>
<p>If Patchwork is installed, interactive plots or Compose graphics automatically use Patchwork to efficiently render them into SVG Virtual DOM. Any updates to the plot get turned into patches, sent over to the browser and applied to the plot.</p>
<h2><a id="user-content-usage-in-ijulia" class="anchor" aria-hidden="true" href="#usage-in-ijulia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage in IJulia</h2>
<p>When you load Patchwork in IJulia, the runtime is setup automatically for you. If the result of executing a cell is an <code>Elem</code> object, it gets rendered in the cell's output area. <code>display(::Elem)</code> will work too.</p>
<p>When used with <a href="http://julialang.org/Reactive.jl" rel="nofollow">Reactive</a> (or Interact), any <code>Signal{Elem}</code> values (see <a href="http://julialang.org/Reactive.jl/#signals" rel="nofollow">Reactive.Signal</a>) get displayed with its initial value first. Subsequent updates are sent as patches and applied at the front-end.</p>
<h2><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Development</h2>
<p>You will need a recent <code>nodejs</code> and <code>npm</code> installed to hack on the JavaScript part of this package.</p>
<p>To build the JS files run the following from <code>runtime/</code> directory:</p>
<div class="highlight highlight-source-shell"><pre>npm install <span class="pl-c1">.</span>
npm install -g browserify
npm install -g uglifyjs
make</pre></div>
<h2><a id="user-content-thanks" class="anchor" aria-hidden="true" href="#thanks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Thanks</h2>
<ul>
<li>This package is largely based on <a href="https://github.com/Matt-Esch">Matt-Esch</a>'s excellent <a href="https://github.com/Matt-Esch/virtual-dom">virtual-dom</a> and <a href="https://github.com/Matt-Esch/vtree">vtree</a> JavaScript modules. Patchwork's JS makes use of virtual-dom and virtual-hyperscript by <a href="https://github.com/Raynos">Raynos</a>.</li>
<li>Thanks to <a href="https://github.com/evancz">Evan Czaplicki</a> for creating <a href="http://elm-lang.org/" rel="nofollow">Elm</a> which inspired me to take the FRP road.</li>
</ul>
</article></div>