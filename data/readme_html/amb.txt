<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-amb" class="anchor" aria-hidden="true" href="#amb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Amb</h1>
<p>Exploratory execution with the <a href="http://community.schemewiki.org/?amb" rel="nofollow"><code>@amb</code> operator</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-amboptions" class="anchor" aria-hidden="true" href="#amboptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@amb(options...)</code></h3>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">@amb</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>

<span class="pl-c1">f</span>(x)</pre></div>
<p>This piece of code says that <code>x</code> is either 1, 2, or 3. <code>f</code> can decide to admit a value or not using <code>require</code>. In effect you can think of this as calling <code>f</code> with a value appropriate for <code>f</code> as decided by <code>f</code>.</p>
<h3><a id="user-content-requirecondition" class="anchor" aria-hidden="true" href="#requirecondition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>require(condition)</code></h3>
<p>Require a certain condition to be true, if not, backtrack and try the next available set of assignments to <code>@amb</code> variables.</p>
<p><code>require</code> is implemented as: <code>require(cond) = !cond ? @amb() : nothing</code></p>
<p><strong>Example: Pythagorean triples</strong></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">int_between</span>(lo, hi)
           <span class="pl-c1">require</span>(lo <span class="pl-k">&lt;=</span> hi)
           <span class="pl-c1">@amb</span> lo <span class="pl-c1">int_between</span>(lo<span class="pl-k">+</span><span class="pl-c1">1</span>, hi)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">a_pythagoras_triple</span>(lo, hi)
           i <span class="pl-k">=</span> <span class="pl-c1">int_between</span>(lo, hi)
           j <span class="pl-k">=</span> <span class="pl-c1">int_between</span>(i, hi)
           k <span class="pl-k">=</span> <span class="pl-c1">int_between</span>(j, hi)

           <span class="pl-c1">require</span>(i<span class="pl-k">*</span>i <span class="pl-k">+</span> j<span class="pl-k">*</span>j <span class="pl-k">==</span> k<span class="pl-k">*</span>k)
           <span class="pl-k">return</span> (i, j, k)
       <span class="pl-k">end</span>
</pre></div>
<h3><a id="user-content-ambrunf" class="anchor" aria-hidden="true" href="#ambrunf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>ambrun(f)</code></h3>
<p>Runs a zero-argument function <code>f</code> in the amb-world, where the language knows that it needs to search for a set of assignments to <code>@amb</code> variables that runs the code till the end without rejection. If no such path is found, ambrun returns nothing.</p>
<p>In other words, <code>ambrun</code> computes one admissible return value of the function passed to it.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ambrun</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">a_pythagoras_triple</span>(<span class="pl-c1">1</span>, <span class="pl-c1">20</span>))
(<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)</pre></div>
<h3><a id="user-content-ambiterf" class="anchor" aria-hidden="true" href="#ambiterf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>ambiter(f)</code></h3>
<p>return a Channel which gives back <code>f()</code> for all admissible assignments. <code>collect</code> on gives an array of all possible answers.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">ambiter</span>(()<span class="pl-k">-&gt;</span><span class="pl-c1">a_pythagoras_triple</span>(<span class="pl-c1">1</span>, <span class="pl-c1">20</span>)))
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)
 (<span class="pl-c1">5</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>)
 (<span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">10</span>)
 (<span class="pl-c1">8</span>, <span class="pl-c1">15</span>, <span class="pl-c1">17</span>)
 (<span class="pl-c1">9</span>, <span class="pl-c1">12</span>, <span class="pl-c1">15</span>)
 (<span class="pl-c1">12</span>, <span class="pl-c1">16</span>, <span class="pl-c1">20</span>)</pre></div>
<hr>
<p>Thanks to Prof. Jerry Sussman for introducing us to <code>amb</code> in <a href="https://groups.csail.mit.edu/mac/users/gjs/6.945/" rel="nofollow">6.945</a>. Thanks to Jarrett Revels for writing Cassette!</p>
</article></div>