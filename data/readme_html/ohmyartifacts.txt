<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ohmyartifacts" class="anchor" aria-hidden="true" href="#ohmyartifacts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OhMyArtifacts</h1>
<p dir="auto"><a href="https://chengchingwen.github.io/OhMyArtifacts.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://chengchingwen.github.io/OhMyArtifacts.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/chengchingwen/OhMyArtifacts.jl/actions"><img src="https://github.com/chengchingwen/OhMyArtifacts.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chengchingwen/OhMyArtifacts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6c1efc12c7e93270157c35bc463b19c0457a2309e975015ad04fb114e076b341/68747470733a2f2f636f6465636f762e696f2f67682f6368656e676368696e6777656e2f4f684d794172746966616374732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/chengchingwen/OhMyArtifacts.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Dynamic-created artifacts stored in scratchspace with sha256 content or tree hash</p>
<h1 dir="auto"><a id="user-content-design" class="anchor" aria-hidden="true" href="#design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Design</h1>
<p dir="auto">The goal of OhMyArtifacts is to provide a caching api that entries can be added/removed during runtime.
The cache is read-only and shared accross packages, that means there won't be any duplicated cache if
they are all using OhMyArtifacts. The cache should also track the usage, so when no package is using that
cache, it will be recycled automatically. The ownership of each cache should be able to delegate to the
downstream package, so that when that package is removed, the cache can be freed.</p>
<h2 dir="auto"><a id="user-content-comparison-to-builtin-artifact-system-artifactsjl" class="anchor" aria-hidden="true" href="#comparison-to-builtin-artifact-system-artifactsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison to builtin Artifact system (Artifacts.jl)</h2>
<p dir="auto">We already have a stdlib Artifacts.jl in Julia, Why would you need another one? The main reason is,
the builtin artifacts system requires all artifacts to be known before runtime. The Artifact.toml is placed
at the folder of that package, but since the package folder is read-only now, you cannot modify the
Artifact.toml when you use the package. On the other hand, the cache of Artifacts.jl is based on directory
tree hash, so even if there are multiple duplicate files in different diectory, they cannot share the cache.</p>
<h2 dir="auto"><a id="user-content-comparison-to-scratch-space-api-scratchjl" class="anchor" aria-hidden="true" href="#comparison-to-scratch-space-api-scratchjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Comparison to Scratch Space API (Scratch.jl)</h2>
<p dir="auto">We are actually building on top of Scratch.jl. Scratch.jl provide a set of api for creating package-specific
folder to store any kind of runtime data. In the Scratch.jl README, they also mention that you can
<a href="https://github.com/JuliaPackaging/Scratch.jl#can-i-use-a-scratch-space-as-a-temporary-workspace-then-turn-it-into-an-artifact">turn the scratch space into artifact</a>. So precisely OhMyArtifacts is an implementation of that idea,
but with some modification to the artifact caching behavior. Notice that our implementation is parallel to
the builtin artifact system (Artifacts.jl), so generally it won't affect each other.</p>
<p dir="auto">For more detail, read the <a href="https://chengchingwen.github.io/OhMyArtifacts.jl/dev" rel="nofollow">document</a> or the comment in the source code</p>
<h1 dir="auto"><a id="user-content-api-overview" class="anchor" aria-hidden="true" href="#api-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API overview</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module TestMod

using OhMyArtifacts

const my_artifacts = Ref{String}()

function __init__()
    my_artifacts[] = @my_artifacts_toml!()
    return
end

function download_file(name, url)
    global my_artifacts
    hash = create_my_artifact() do artifact_dir
        download(url, joinpath(artifact_dir, basename(url)))
    end
    bind_my_artifact!(my_artifacts[], name, hash)

    path = my_artifact_path(hash)
    return path
end

function data(name)
    hash = my_artifact_hash(name, my_artifacts[])
    return !isnothing(hash) &amp;&amp; my_artifact_exists(hash) ? my_artifact_path(hash) : nothing
end

end # module"><pre><span class="pl-k">module</span> TestMod

<span class="pl-k">using</span> OhMyArtifacts

<span class="pl-k">const</span> my_artifacts <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{String}</span>()

<span class="pl-k">function</span> <span class="pl-en">__init__</span>()
    my_artifacts[] <span class="pl-k">=</span> <span class="pl-c1">@my_artifacts_toml!</span>()
    <span class="pl-k">return</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">download_file</span>(name, url)
    <span class="pl-k">global</span> my_artifacts
    hash <span class="pl-k">=</span> <span class="pl-c1">create_my_artifact</span>() <span class="pl-k">do</span> artifact_dir
        <span class="pl-c1">download</span>(url, <span class="pl-c1">joinpath</span>(artifact_dir, <span class="pl-c1">basename</span>(url)))
    <span class="pl-k">end</span>
    <span class="pl-c1">bind_my_artifact!</span>(my_artifacts[], name, hash)

    path <span class="pl-k">=</span> <span class="pl-c1">my_artifact_path</span>(hash)
    <span class="pl-k">return</span> path
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">data</span>(name)
    hash <span class="pl-k">=</span> <span class="pl-c1">my_artifact_hash</span>(name, my_artifacts[])
    <span class="pl-k">return</span> <span class="pl-k">!</span><span class="pl-c1">isnothing</span>(hash) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">my_artifact_exists</span>(hash) <span class="pl-k">?</span> <span class="pl-c1">my_artifact_path</span>(hash) <span class="pl-k">:</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> module</span></pre></div>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<p dir="auto">An OhMyArtifacts version of the iris example.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OhMyArtifacts
[ Info: Precompiling OhMyArtifacts [cf8be1f4-309d-442e-839d-29d2a0af6cb7]

# Register and get the Artifacts.toml
julia&gt; myartifacts_toml = @my_artifacts_toml!();

# Query the Artifacts.toml for the hash bound to &quot;iris&quot;
julia&gt; iris_hash = my_artifact_hash(&quot;iris&quot;, myartifacts_toml)

# If not bound
julia&gt; if isnothing(iris_hash)
           iris_hash = create_my_artifact() do working_dir
               iris_url_base = &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/iris&quot;
               download(&quot;$iris_url_base/iris.data&quot;, joinpath(working_dir, &quot;iris.csv&quot;))
               download(&quot;$iris_url_base/bezdekIris.data&quot;, joinpath(working_dir, &quot;bezdekIris.csv&quot;))
               download(&quot;$iris_url_base/iris.names&quot;, joinpath(working_dir, &quot;iris.names&quot;))
               # explicitly return the path
               return working_dir
           end
           bind_my_artifact!(myartifacts_toml, &quot;iris&quot;, iris_hash)
       end

julia&gt; iris_hash
SHA256(&quot;83c1aca5f0e9d222dee51861b3def4e789e57b17b035099570c54b51182853d4&quot;)

julia&gt; my_artifact_exists(iris_hash)
true

# Get the artifact path
julia&gt; iris_dataset_path = my_artifact_path(iris_hash);

julia&gt; readdir(iris_dataset_path)
3-element Vector{String}:
 &quot;bezdekIris.csv&quot;
 &quot;iris.csv&quot;
 &quot;iris.names&quot;

julia&gt; readline(joinpath(iris_dataset_path, &quot;iris.names&quot;))
&quot;1. Title: Iris Plants Database&quot;

# Every subfile is a symlink
julia&gt; all(islink, readdir(iris_dataset_path, join=true))
true

julia&gt; iris_name_url = &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.names&quot;;

# Helper function that combine create and bind
julia&gt; iris_name_hash = download_my_artifact!(Base.download, iris_name_url, &quot;iris.names&quot;, myartifacts_toml)
SHA256(&quot;38043f885d7c8cfb6d2cec61020b9bc6946c5856aadad493772ee212ef5ac891&quot;)

# Same value
julia&gt; readline(my_artifact_path(iris_name_hash))
&quot;1. Title: Iris Plants Database&quot;

# Same file
julia&gt; readlink(joinpath(iris_dataset_path, &quot;iris.names&quot;)) == my_artifact_path(iris_name_hash)
true

# Unbind iris dataset
julia&gt; unbind_my_artifact!(myartifacts_toml, &quot;iris&quot;)

julia&gt; using Dates

# Recycle: &quot;iris/iris.names&quot; is also used by &quot;iris.names&quot;, only
#  remove 2 file (&quot;iris/iris.csv&quot;, &quot;iris/bezdekIris.csv&quot;) and 1 folder (&quot;iris&quot;)
julia&gt; OhMyArtifacts.find_orphanages(; collect_delay=Hour(0))
[ Info: 3 MyArtifacts deleted (24.889 KiB)

# &quot;iris.names&quot; still exists
julia&gt; my_artifact_exists(iris_name_hash)
true

julia&gt; readline(my_artifact_path(iris_name_hash))
&quot;1. Title: Iris Plants Database&quot;

# Iris dataset is removed
julia&gt; my_artifact_exists(iris_hash)
false

julia&gt; isdir(iris_dataset_path)
false

# Unbind and recycle
julia&gt; unbind_my_artifact!(myartifacts_toml, &quot;iris.names&quot;)

# When `using OhMyArtifacts`, this function is called if we haven't do it for 7 days, so
#  geneally we don't need to manually call it.
julia&gt; OhMyArtifacts.find_orphanages(; collect_delay=Hour(0))
[ Info: 1 MyArtifact deleted (10.928 KiB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OhMyArtifacts
[ Info<span class="pl-k">:</span> Precompiling OhMyArtifacts [cf8be1f4<span class="pl-k">-</span><span class="pl-c1">309</span>d<span class="pl-k">-</span><span class="pl-c1">442e-839</span>d<span class="pl-k">-</span><span class="pl-c1">29</span>d2a0af6cb7]

<span class="pl-c"><span class="pl-c">#</span> Register and get the Artifacts.toml</span>
julia<span class="pl-k">&gt;</span> myartifacts_toml <span class="pl-k">=</span> <span class="pl-c1">@my_artifacts_toml!</span>();

<span class="pl-c"><span class="pl-c">#</span> Query the Artifacts.toml for the hash bound to "iris"</span>
julia<span class="pl-k">&gt;</span> iris_hash <span class="pl-k">=</span> <span class="pl-c1">my_artifact_hash</span>(<span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>, myartifacts_toml)

<span class="pl-c"><span class="pl-c">#</span> If not bound</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">if</span> <span class="pl-c1">isnothing</span>(iris_hash)
           iris_hash <span class="pl-k">=</span> <span class="pl-c1">create_my_artifact</span>() <span class="pl-k">do</span> working_dir
               iris_url_base <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://archive.ics.uci.edu/ml/machine-learning-databases/iris<span class="pl-pds">"</span></span>
               <span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$iris_url_base</span>/iris.data<span class="pl-pds">"</span></span>, <span class="pl-c1">joinpath</span>(working_dir, <span class="pl-s"><span class="pl-pds">"</span>iris.csv<span class="pl-pds">"</span></span>))
               <span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$iris_url_base</span>/bezdekIris.data<span class="pl-pds">"</span></span>, <span class="pl-c1">joinpath</span>(working_dir, <span class="pl-s"><span class="pl-pds">"</span>bezdekIris.csv<span class="pl-pds">"</span></span>))
               <span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$iris_url_base</span>/iris.names<span class="pl-pds">"</span></span>, <span class="pl-c1">joinpath</span>(working_dir, <span class="pl-s"><span class="pl-pds">"</span>iris.names<span class="pl-pds">"</span></span>))
               <span class="pl-c"><span class="pl-c">#</span> explicitly return the path</span>
               <span class="pl-k">return</span> working_dir
           <span class="pl-c1">end</span>
           <span class="pl-c1">bind_my_artifact!</span>(myartifacts_toml, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>, iris_hash)
       <span class="pl-c1">end</span>

julia<span class="pl-k">&gt;</span> iris_hash
<span class="pl-c1">SHA256</span>(<span class="pl-s"><span class="pl-pds">"</span>83c1aca5f0e9d222dee51861b3def4e789e57b17b035099570c54b51182853d4<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">my_artifact_exists</span>(iris_hash)
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> Get the artifact path</span>
julia<span class="pl-k">&gt;</span> iris_dataset_path <span class="pl-k">=</span> <span class="pl-c1">my_artifact_path</span>(iris_hash);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">readdir</span>(iris_dataset_path)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{String}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>bezdekIris.csv<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>iris.csv<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>iris.names<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">readline</span>(<span class="pl-c1">joinpath</span>(iris_dataset_path, <span class="pl-s"><span class="pl-pds">"</span>iris.names<span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>1. Title: Iris Plants Database<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Every subfile is a symlink</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">all</span>(islink, <span class="pl-c1">readdir</span>(iris_dataset_path, join<span class="pl-k">=</span><span class="pl-c1">true</span>))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> iris_name_url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.names<span class="pl-pds">"</span></span>;

<span class="pl-c"><span class="pl-c">#</span> Helper function that combine create and bind</span>
julia<span class="pl-k">&gt;</span> iris_name_hash <span class="pl-k">=</span> <span class="pl-c1">download_my_artifact!</span>(Base<span class="pl-k">.</span>download, iris_name_url, <span class="pl-s"><span class="pl-pds">"</span>iris.names<span class="pl-pds">"</span></span>, myartifacts_toml)
<span class="pl-c1">SHA256</span>(<span class="pl-s"><span class="pl-pds">"</span>38043f885d7c8cfb6d2cec61020b9bc6946c5856aadad493772ee212ef5ac891<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Same value</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">readline</span>(<span class="pl-c1">my_artifact_path</span>(iris_name_hash))
<span class="pl-s"><span class="pl-pds">"</span>1. Title: Iris Plants Database<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Same file</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">readlink</span>(<span class="pl-c1">joinpath</span>(iris_dataset_path, <span class="pl-s"><span class="pl-pds">"</span>iris.names<span class="pl-pds">"</span></span>)) <span class="pl-k">==</span> <span class="pl-c1">my_artifact_path</span>(iris_name_hash)
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> Unbind iris dataset</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">unbind_my_artifact!</span>(myartifacts_toml, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Dates

<span class="pl-c"><span class="pl-c">#</span> Recycle: "iris/iris.names" is also used by "iris.names", only</span>
<span class="pl-c"><span class="pl-c">#</span>  remove 2 file ("iris/iris.csv", "iris/bezdekIris.csv") and 1 folder ("iris")</span>
julia<span class="pl-k">&gt;</span> OhMyArtifacts<span class="pl-k">.</span><span class="pl-c1">find_orphanages</span>(; collect_delay<span class="pl-k">=</span><span class="pl-c1">Hour</span>(<span class="pl-c1">0</span>))
[ Info<span class="pl-k">:</span> <span class="pl-c1">3</span> MyArtifacts deleted (<span class="pl-c1">24.889</span> KiB)

<span class="pl-c"><span class="pl-c">#</span> "iris.names" still exists</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">my_artifact_exists</span>(iris_name_hash)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">readline</span>(<span class="pl-c1">my_artifact_path</span>(iris_name_hash))
<span class="pl-s"><span class="pl-pds">"</span>1. Title: Iris Plants Database<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Iris dataset is removed</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">my_artifact_exists</span>(iris_hash)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isdir</span>(iris_dataset_path)
<span class="pl-c1">false</span>

<span class="pl-c"><span class="pl-c">#</span> Unbind and recycle</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">unbind_my_artifact!</span>(myartifacts_toml, <span class="pl-s"><span class="pl-pds">"</span>iris.names<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> When `using OhMyArtifacts`, this function is called if we haven't do it for 7 days, so</span>
<span class="pl-c"><span class="pl-c">#</span>  geneally we don't need to manually call it.</span>
julia<span class="pl-k">&gt;</span> OhMyArtifacts<span class="pl-k">.</span><span class="pl-c1">find_orphanages</span>(; collect_delay<span class="pl-k">=</span><span class="pl-c1">Hour</span>(<span class="pl-c1">0</span>))
[ Info<span class="pl-k">:</span> <span class="pl-c1">1</span> MyArtifact deleted (<span class="pl-c1">10.928</span> KiB)</pre></div>
</article></div>