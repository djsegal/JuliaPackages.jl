<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-vuejl" class="anchor" aria-hidden="true" href="#vuejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vue.jl</h1>
<p>A Julia wrapper for <a href="https://vuejs.org" rel="nofollow">Vue.js</a>. It uses <a href="https://github.com/JuliaGizmos/WebIO.jl">WebIO</a> to load JavaScript and to do Julia to JS communication. <a href="https://github.com/JuliaGizmos/WebIO.jl/blob/master/README.md">Go here</a> to get started with WebIO.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The package exports a single <code>vue</code> function which mirrors the <a href="https://vuejs.org/v2/guide/instance.html" rel="nofollow">Vue instance constructor</a>:</p>
<h3><a id="user-content-vuetemplate-data-options" class="anchor" aria-hidden="true" href="#vuetemplate-data-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>vue(template, data; options...)</code></h3>
<ul>
<li><code>template</code> acts as the template for the vue instance. See <a href="https://vuejs.org/v2/guide/syntax.html" rel="nofollow">Vue's HTML-based syntax</a>. You can compose the template (like any HTML) <a href="https://github.com/JuliaGizmos/WebIO.jl#composing-content">using WebIO</a>.</li>
<li><code>data</code> is an iterable of <code>propertyName =&gt; value</code> pairs (e.g. a <code>Dict</code>) which populates the template.</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Vue

template <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">dom</span>"</span>p[v-if=visible]<span class="pl-pds">"</span></span>(<span class="pl-s"><span class="pl-pds">"</span>{{message}}<span class="pl-pds">"</span></span>)
<span class="pl-c1">vue</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-c1">:visible</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>])</pre></div>
<p>If a property's value is an observable, this function syncs the property and the observable. Here's how you can update the properties bound to the template from Julia.</p>
<div class="highlight highlight-source-julia"><pre>ob <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">vue</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span>ob, <span class="pl-c1">:visible</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>])</pre></div>
<p>Now if at any time you run <code>ob[] = "hey there!"</code> on Julia, you should see the contents of the message update in the UI. Try making an observable for <code>:visible</code> property and set it to true or false, you should see the message toggle in and out of view!</p>
<p>To initiate JS to Julia communication you must set an event handler on <code>scope[propertyName]</code> (by calling <code>on(f, scope[propertyName])</code>)  <em>before</em> rendering the scope.</p>
<p>Here's an example of JS to Julia communication:</p>
<div class="highlight highlight-source-julia"><pre>incoming <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">on</span>(println, incoming) <span class="pl-c"><span class="pl-c">#</span> print to console on every update</span>

template <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">dom</span>"</span>input[type=text,v-model=message]<span class="pl-pds">"</span></span>()
<span class="pl-c1">vue</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span>incoming])</pre></div>
<p>This will cause the value of the textbox to flow back to Julia, and should get printed to STDOUT since we have a listener to print it.</p>
<p>You can pass <em>any</em> other options for the <a href="https://vuejs.org/v2/guide/instance.html" rel="nofollow">Vue constructor</a> as keyword arguments to
<code>vue</code> E.g. <code>vue(...; methods=Dict(:sayhello=&gt;@js function(){ alert("hello!") }))</code> (Tip: use <a href="https://github.com/JuliaGizmos/JSExpr.jl">JSExpr.jl</a> for the <code>@js</code> macro)</p>
<p>That's it! :-)</p>
</article></div>