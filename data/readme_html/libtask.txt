<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libtask" class="anchor" aria-hidden="true" href="#libtask"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Libtask</h1>
<p><a href="https://github.com/TuringLang/Libtask.jl/actions?branch=master"><img src="https://github.com/TuringLang/Libtask.jl/workflows/Libtask%20Testing/badge.svg" alt="Libtask Testing" style="max-width:100%;"></a></p>
<p>C shim for <a href="https://github.com/JuliaLang/julia/issues/4085">task copying</a> in Turing</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>Stack allocated objects are deep copied:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Libtask

function f()
  t = 0
  while true
    produce(t)
    t = 1 + t
  end
end

ctask = CTask(f)

@show consume(ctask) # 0
@show consume(ctask) # 1

a = copy(ctask)
@show consume(a) # 2
@show consume(a) # 3

@show consume(ctask) # 2
@show consume(ctask) # 3
"><pre><span class="pl-k">using</span> Libtask

<span class="pl-k">function</span> <span class="pl-en">f</span>()
  t <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t)
    t <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

ctask <span class="pl-k">=</span> <span class="pl-c1">CTask</span>(f)

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 0</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 1</span>

a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(ctask)
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<p>Heap allocated objects are shallow copied:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Libtask

function f()
  t = [0 1 2]
  while true
    produce(t[1])
    t[1] = 1 + t[1]
  end
end

ctask = CTask(f)

@show consume(ctask) # 0
@show consume(ctask) # 1

a = copy(t)
@show consume(a) # 2
@show consume(a) # 3

@show consume(ctask) # 4
@show consume(ctask) # 5
"><pre><span class="pl-k">using</span> Libtask

<span class="pl-k">function</span> <span class="pl-en">f</span>()
  t <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span>]
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t[<span class="pl-c1">1</span>])
    t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t[<span class="pl-c1">1</span>]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

ctask <span class="pl-k">=</span> <span class="pl-c1">CTask</span>(f)

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 0</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 1</span>

a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(t)
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 4</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 5</span></pre></div>
<p><code>TArray</code> implements a copy-on-write array. This is useful for task copying.
In constrast to standard arrays, which are only shallow copied during task copying,
<code>TArray</code> are deep copied after task copying:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Libtask

function f()
  t = TArray(Int, 1)
  t[1] = 0
  while true
    produce(t[1])
    t[1] = 1 + t[1]
  end
end

ctask = CTask(f)

@show consume(ctask) # 0
@show consume(ctask) # 1

a = copy(ctask)
@show consume(a) # 2
@show consume(a) # 3

@show consume(ctask) # 2
@show consume(ctask) # 3
"><pre><span class="pl-k">using</span> Libtask

<span class="pl-k">function</span> <span class="pl-en">f</span>()
  t <span class="pl-k">=</span> <span class="pl-c1">TArray</span>(Int, <span class="pl-c1">1</span>)
  t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t[<span class="pl-c1">1</span>])
    t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t[<span class="pl-c1">1</span>]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

ctask <span class="pl-k">=</span> <span class="pl-c1">CTask</span>(f)

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 0</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 1</span>

a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(ctask)
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ctask) <span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<p>Note: The <a href="https://github.com/TuringLang/Turing.jl">Turing</a> probabilistic programming language uses this task copying feature in an efficient implementation of the <a href="https://en.wikipedia.org/wiki/Particle_filter" rel="nofollow">particle filtering</a> sampling algorithm for arbitary order <a href="https://en.wikipedia.org/wiki/Markov_model#Hidden_Markov_model" rel="nofollow">Markov processes</a>.</p>
<h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Disclaimer</h2>
<p>This feature is still experimental and should only be used with caution. Some discussions on its potential caveats can be found <a href="https://github.com/JuliaLang/julia/pull/15078">here</a>.</p>
<h2><a id="user-content-julia-nightly" class="anchor" aria-hidden="true" href="#julia-nightly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Julia nightly</h2>
<p>Libtask uses the <code>libtask_julia</code> library which is pre-built for Julia versions 1.3, 1.4, and 1.5 and
distributed via the <a href="https://github.com/JuliaBinaryWrappers/Libtask_jll.jl/">Libtask_jll</a> package.</p>
<p>Julia nightly might not be compatible with the latest version of the <code>libtask_julia</code> library and is
not officially supported. If you want to use Julia nightly, you have to add the Libtask_jll package
manually:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add https://github.com/JuliaBinaryWrappers/Libtask_jll.jl.git
"><pre>julia<span class="pl-k">&gt;</span> ] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaBinaryWrappers<span class="pl-k">/</span>Libtask_jll<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
</article></div>