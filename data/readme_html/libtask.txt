<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libtask" class="anchor" aria-hidden="true" href="#libtask"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Libtask</h1>
<p dir="auto"><a href="https://github.com/TuringLang/Libtask.jl/actions?branch=master"><img src="https://github.com/TuringLang/Libtask.jl/workflows/Libtask%20Testing/badge.svg" alt="Libtask Testing" style="max-width: 100%;"></a></p>
<p dir="auto">Tape based task copying in Turing</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h2>
<p dir="auto">Stack allocated objects are always deep copied:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Libtask

function f()
  t = 0
  for _ in 1:10
    produce(t)
    t = 1 + t
  end
end

ttask = TapedTask(f)

@show consume(ttask) # 0
@show consume(ttask) # 1

a = copy(ttask)
@show consume(a) # 2
@show consume(a) # 3

@show consume(ttask) # 2
@show consume(ttask) # 3"><pre><span class="pl-k">using</span> Libtask

<span class="pl-k">function</span> <span class="pl-en">f</span>()
  t <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">produce</span>(t)
    t <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

ttask <span class="pl-k">=</span> <span class="pl-c1">TapedTask</span>(f)

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 0</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 1</span>

a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(ttask)
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<p dir="auto">Heap-allocated Array and Ref objects are deep copied by default:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Libtask

function f()
  t = [0 1 2]
  for _ in 1:10
    produce(t[1])
    t[1] = 1 + t[1]
  end
end

ttask = TapedTask(f)

@show consume(ttask) # 0
@show consume(ttask) # 1

a = copy(ttask)
@show consume(a) # 2
@show consume(a) # 3

@show consume(ttask) # 2
@show consume(ttask) # 3"><pre><span class="pl-k">using</span> Libtask

<span class="pl-k">function</span> <span class="pl-en">f</span>()
  t <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span>]
  <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">produce</span>(t[<span class="pl-c1">1</span>])
    t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t[<span class="pl-c1">1</span>]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

ttask <span class="pl-k">=</span> <span class="pl-c1">TapedTask</span>(f)

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 0</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 1</span>

a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(ttask)
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 3</span>

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 3</span></pre></div>
<p dir="auto">Other heap-allocated objects (e.g., <code>Dict</code>) are shallow copied, by default:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Libtask

function f()
  t = Dict(1=&gt;10, 2=&gt;20)
  while true
    produce(t[1])
    t[1] = 1 + t[1]
  end
end

ttask = TapedTask(f)

@show consume(ttask) # 10
@show consume(ttask) # 11

a = copy(ttask)
@show consume(a) # 12
@show consume(a) # 13

@show consume(ttask) # 14
@show consume(ttask) # 15"><pre><span class="pl-k">using</span> Libtask

<span class="pl-k">function</span> <span class="pl-en">f</span>()
  t <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">10</span>, <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">20</span>)
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t[<span class="pl-c1">1</span>])
    t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t[<span class="pl-c1">1</span>]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

ttask <span class="pl-k">=</span> <span class="pl-c1">TapedTask</span>(f)

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 10</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 11</span>

a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(ttask)
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 12</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(a) <span class="pl-c"><span class="pl-c">#</span> 13</span>

<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 14</span>
<span class="pl-c1">@show</span> <span class="pl-c1">consume</span>(ttask) <span class="pl-c"><span class="pl-c">#</span> 15</span></pre></div>
<p dir="auto">Notes:</p>
<ul dir="auto">
<li>
<p dir="auto">The <a href="https://github.com/TuringLang/Turing.jl">Turing</a> probabilistic
programming language uses this task copying feature in an efficient
implementation of the <a href="https://en.wikipedia.org/wiki/Particle_filter" rel="nofollow">particle
filtering</a> sampling
algorithm for arbitrary order <a href="https://en.wikipedia.org/wiki/Markov_model#Hidden_Markov_model" rel="nofollow">Markov
processes</a>.</p>
</li>
<li>
<p dir="auto">From v0.6.0, Libtask is implemented by recording all the computing
to a tape and copying that tape. Before that version, it is based on
a tricky hack on the Julia internals. You can check the commit
history of this repo to see the details.</p>
</li>
</ul>
</article></div>