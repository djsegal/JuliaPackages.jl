<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-libtask" class="anchor" aria-hidden="true" href="#libtask"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Libtask</h1>
<p><a href="https://github.com/TuringLang/Libtask.jl/actions"><img src="https://github.com/TuringLang/Libtask.jl/workflows/Libtask%20Testing/badge.svg" alt="Libtask Testing" style="max-width:100%;"></a>
<a href="https://github.com/TuringLang/Libtask.jl/actions"><img src="https://github.com/TuringLang/Libtask.jl/workflows/Build%20Dylib/badge.svg" alt="Dylib Build" style="max-width:100%;"></a></p>
<p>C shim for <a href="https://github.com/JuliaLang/julia/issues/4085">task copying</a> in Turing</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Libtask

<span class="pl-c"><span class="pl-c">#</span> Stack allocated objects are deep copied.</span>
<span class="pl-k">function</span> <span class="pl-en">f_ct</span>()
  t <span class="pl-k">=</span> <span class="pl-c1">0</span>;
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t)
    t <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

t <span class="pl-k">=</span> <span class="pl-c1">CTask</span>(f_ct)

<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">0</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">1</span>
a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(t);
<span class="pl-c1">consume</span>(a) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">consume</span>(a) <span class="pl-k">==</span> <span class="pl-c1">3</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> Heap allocated objects are shallow copied.</span>

<span class="pl-k">function</span> <span class="pl-en">f_ct2</span>()
  t <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span>];
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t[<span class="pl-c1">1</span>])
    t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t[<span class="pl-c1">1</span>]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

t <span class="pl-k">=</span> <span class="pl-c1">CTask</span>(f_ct2)

<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">0</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">1</span>
a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(t);
<span class="pl-c1">consume</span>(a) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">consume</span>(a) <span class="pl-k">==</span> <span class="pl-c1">3</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">4</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">5</span>

<span class="pl-c"><span class="pl-c">#</span> `TArray` implements a copy-on-write array. This is useful for task copying.</span>
<span class="pl-c"><span class="pl-c">#</span>  In constrast to standard arrays, which are only shallow copied during task copying,</span>
<span class="pl-c"><span class="pl-c">#</span>  `TArray` are deep copied after task copying.</span>

<span class="pl-k">function</span> <span class="pl-en">f_cta</span>()
  t <span class="pl-k">=</span> <span class="pl-c1">TArray</span>(Int, <span class="pl-c1">1</span>);
  t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>;
  <span class="pl-k">while</span> <span class="pl-c1">true</span>
    <span class="pl-c1">produce</span>(t[<span class="pl-c1">1</span>])
    t[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> t[<span class="pl-c1">1</span>]
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

t <span class="pl-k">=</span> <span class="pl-c1">CTask</span>(f_cta)

<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">0</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">1</span>
a <span class="pl-k">=</span> <span class="pl-c1">copy</span>(t);
<span class="pl-c1">consume</span>(a) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">consume</span>(a) <span class="pl-k">==</span> <span class="pl-c1">3</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">consume</span>(t) <span class="pl-k">==</span> <span class="pl-c1">3</span></pre></div>
<p>Note: The <a href="https://github.com/TuringLang/Turing.jl">Turing</a> probabilistic programming language uses this task copying feature in an efficient implementation of the <a href="https://en.wikipedia.org/wiki/Particle_filter" rel="nofollow">particle filtering</a> sampling algorithm for arbitary order <a href="https://en.wikipedia.org/wiki/Markov_model#Hidden_Markov_model" rel="nofollow">Markov processes</a>.</p>
<p>Disclaimer: This feature is still experimental and should only be used with caution. Some discussions on its potential caveats can be found <a href="https://github.com/JuliaLang/julia/pull/15078">here</a>.</p>
<h2><a id="user-content-for-developer" class="anchor" aria-hidden="true" href="#for-developer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>For Developer</h2>
<h3><a id="user-content-release-a-new-version" class="anchor" aria-hidden="true" href="#release-a-new-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Release a new version</h3>
<pre><code>- If you have updates of the binary dylib (files under the `deps`
  directory), you should:
  - Update the version/commit information in [this
    file](https://github.com/JuliaPackaging/Yggdrasil/blob/master/L/Libtask/build_tarballs.jl)
    by a pull request
  - Wait for that PR being merged, then you will find a new
    release of the dylib
    [here](https://github.com/JuliaBinaryWrappers/Libtask_jll.jl/releases)
  - Then, in the root directory of the Yggdrasil project, run
    `https://github.com/JuliaBinaryWrappers/Libtask_jll.jl/releases`,
    you will get a build file like
    `build/build_Libtask.v0.3.1.jl`. Copy the binary download
    information (the variables `bin_prefix` and `download_info`)
    from that generated file to `deps/build.jl` in our repo and
    commit the changes.
- If you don't make any changes about the dylib, just ignore the
  first step and go to next one.
- Update the new version number in `Project.toml`, ping
  @JuliaRegistrator with `@JuliaRegistrator register` in a
  comment.
</code></pre>
</article></div>