<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-runnerjl" class="anchor" aria-hidden="true" href="#runnerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Runner.jl</h1>
<p><a href="https://juliahub.com/ui/Packages/Runner/cIbjU?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/1b7c2990ec1e0ce44196d3ff390a57316ff145b63cceedd8d587ee13581e0464/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f52756e6e65722f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Runner/deps.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/Runner/cIbjU" rel="nofollow"><img src="https://camo.githubusercontent.com/bbfff2e405e7c0a143b68159e731c8e7d6c4d32c89afc49c885959e40d736824/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f52756e6e65722f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Runner/version.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/Runner/cIbjU" rel="nofollow"><img src="https://camo.githubusercontent.com/5387f34c480e2cfc86b1e97a5fc45c7207dff697102356859eb78d018a0f2fca/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f52756e6e65722f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/Runner/pkgeval.svg" style="max-width:100%;"></a></p>
<p><strong>TL;DR</strong> Provides <code>@runit</code> macro for running scripts with commandline arguments from REPL.</p>
<p>Instead of</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$julia script.jl arg1 arg2 arg3
"><pre><code>$julia script.jl arg1 arg2 arg3
</code></pre></div>
<p>use, from REPL</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @runit &quot;script.jl arg1 arg2 arg3&quot;
"><pre><code>julia&gt; @runit "script.jl arg1 arg2 arg3"
</code></pre></div>
<p><strong>Advantage</strong>: Avoid the delay in package load times during development. Load it once using REPL and continue using it with commandline arguments.</p>
<h2><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why?</h2>
<p>This packages tries to solve the problem of running scripts with commandline arguments from REPL. Often we write scripts that can be called from commandline with arguments like</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$julia script.jl arg1 arg2 arg3
"><pre><code>$julia script.jl arg1 arg2 arg3
</code></pre></div>
<p>However, during development, this may become cumbersome. If we use some packages which has long load times, running the script as above will create long delays before actually executing the code. A faster approach during development is to start a REPL and use</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; include('script.jl')
"><pre><code>julia&gt; include('script.jl')
</code></pre></div>
<p>But, in this case, we will not be able to provide command line arguments. Work around is to define a function which takes in arguments and manually calling it. Not neat!</p>
<p>This package exists to overcome this difficulty. It provide a macro <code>@runit</code> which will let you run script from REPL with commandline arguments.</p>
<h2><a id="user-content-how" class="anchor" aria-hidden="true" href="#how"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How?</h2>
<h3><a id="user-content-simple-use-case" class="anchor" aria-hidden="true" href="#simple-use-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple use case</h3>
<p>If you have a script like</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# hello.jl
# Simple script for demo. Accesses ARGS
println(&quot;Hello $(ARGS[1])!&quot;)
"><pre><code># hello.jl
# Simple script for demo. Accesses ARGS
println("Hello $(ARGS[1])!")
</code></pre></div>
<p>From commadline, we can run this as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$julia hello.jl Julia
"><pre><code>$julia hello.jl Julia
</code></pre></div>
<p>To run this from REPL, use</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @runit hello.jl Julia
"><pre><code>julia&gt; @runit hello.jl Julia
</code></pre></div>
<h3><a id="user-content-use-with-argparse" class="anchor" aria-hidden="true" href="#use-with-argparse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use with <code>ArgParse</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# Script hello2.jl
using ArgParse

parser = ArgParseSettings()
@add_arg_table! parser begin
    &quot;name&quot;
	    help = &quot;Name to greet&quot;
  	    arg_type = String
    &quot;--greet&quot;
        help = &quot;Greeting sting&quot;
        arg_type = String
        default = &quot;Hello&quot;
end

parsed_args = parse_args(parser)

println(parsed_args[&quot;greet&quot;], &quot; &quot;, parsed_args[&quot;name&quot;], &quot;!&quot;)
"><pre><code># Script hello2.jl
using ArgParse

parser = ArgParseSettings()
@add_arg_table! parser begin
    "name"
	    help = "Name to greet"
  	    arg_type = String
    "--greet"
        help = "Greeting sting"
        arg_type = String
        default = "Hello"
end

parsed_args = parse_args(parser)

println(parsed_args["greet"], " ", parsed_args["name"], "!")
</code></pre></div>
<p>From commandline</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="$julia hello2.jl Julia
Hello Julia!

$julia hello2.jl Julia --greet Namaste
Namaste Julia!
"><pre><code>$julia hello2.jl Julia
Hello Julia!

$julia hello2.jl Julia --greet Namaste
Namaste Julia!
</code></pre></div>
<p>From REPL</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @runit &quot;hello2.jl Julia&quot;
Hello Julia!

julia&gt; @runit &quot;hello2.jl Julia --greet Namaste&quot;
Namaste Julia!
"><pre><code>julia&gt; @runit "hello2.jl Julia"
Hello Julia!

julia&gt; @runit "hello2.jl Julia --greet Namaste"
Namaste Julia!
</code></pre></div>
</article></div>