<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-multiplesofpi" class="anchor" aria-hidden="true" href="#multiplesofpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MultiplesOfPi</h1>
<p><a href="https://travis-ci.com/jishnub/MultiplesOfPi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b252a299a1f2672b113b11b6cdbacb932d8314ec/68747470733a2f2f7472617669732d63692e636f6d2f6a6973686e75622f4d756c7469706c65734f6650692e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jishnub/MultiplesOfPi.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/jishnub/MultiplesOfPi-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a3c4c71521fcc1cfe66eaf2ac1e8377f0a0b3209/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6a6973686e75622f4d756c7469706c65734f6650692e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/jishnub/MultiplesOfPi.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jishnub/MultiplesOfPi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1cba16ff86ad35e4603e7e6cebd5cdbfdf2019e6/68747470733a2f2f636f6465636f762e696f2f67682f6a6973686e75622f4d756c7469706c65734f6650692e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jishnub/MultiplesOfPi.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/jishnub/MultiplesOfPi.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c3fd75df9d6b6557014772b1986ec24b65ae2108/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6973686e75622f4d756c7469706c65734f6650692e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/jishnub/MultiplesOfPi.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h1>
<p>This package exports the type <code>PiExpTimes{N}</code> that behaves as a multipying factor of <code>π^N</code>, and the type <code>PiTimes</code> that is aliased to <code>PiExpTimes{1}</code>. It also provides the constant <code>Pi</code> for convenience, defined as <code>PiTimes(1)</code>, which behaves like <code>π</code> except it produces results with higher accuracy in certain trigonometric and algebraic contexts.</p>
<p>In most scenarios the numbers <code>Pi</code> and <code>pi</code> are interchangable.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pi<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">==</span> π<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">true</span></pre></div>
<p>It's usually possible, and cleaner, to express mathematical relations in terms of <code>Pi</code> instead of the more cumbersome <code>PiExpTimes</code>, and is recommended unless it's specifically necessary.</p>
<h2><a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rationale</h2>
<p>The number <code>π</code> is represented as an <code>Irrational</code> type in julia, and may be computed to an arbitrary degree of precision. In normal course of events it is converted to a float when it encounters another number, for example <code>2π</code> is computed by converting both <code>2</code> and <code>π</code> to floats and subsequently carrying out a floating-point multiplication. This is lossy, as both <code>2</code> and <code>π</code> may be represented with arbitrary precision. This package delays the conversion of the <code>π</code> to a float, treating it as a common factor in algebraic simplifications. This limits floating-point inaccuracies, especially if the terms multiplying <code>π</code> are exactly representable in binary. As an added advantage, it uses <code>sinpi</code> and <code>cospi</code> wherever possible to avoid having to convert <code>π</code> to a float altogether.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<h2><a id="user-content-arithmetic" class="anchor" aria-hidden="true" href="#arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arithmetic</h2>
<p>Delaying the conversion of <code>π</code> to a float results in satisfying mathematical expressions such as</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>)π <span class="pl-k">+</span> (<span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">3</span>)π <span class="pl-k">==</span> (<span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">3</span>)π
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>)Pi <span class="pl-k">+</span> (<span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">3</span>)Pi <span class="pl-k">==</span> (<span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">3</span>)Pi
<span class="pl-c1">true</span></pre></div>
<p>We may also simplify algebraic expressions involving powers of <code>Pi</code> as</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-c1">2</span>Pi<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3</span>) <span class="pl-k">//</span> (<span class="pl-c1">4</span>Pi<span class="pl-k">//</span><span class="pl-c1">5</span>)
(<span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">6</span>)Pi

julia<span class="pl-k">&gt;</span> Pi<span class="pl-k">^-</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">4</span>Pi<span class="pl-k">^</span><span class="pl-c1">3</span>
<span class="pl-c1">0.25</span><span class="pl-k">*</span>Pi<span class="pl-k">^-</span><span class="pl-c1">5</span></pre></div>
<p>The powers of <code>Pi</code> cancel as expected, and <code>Pi^0</code> is automatically converted to an ordinary real number wherever possible.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pi<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> Pi<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">1.0</span></pre></div>
<p>Expressions involving <code>Pi</code> are automatically promoted to <code>Complex</code> as necessary, eg.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>im)Pi<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">/</span> <span class="pl-c1">2</span>Pi<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">0.5</span><span class="pl-k">*</span>Pi <span class="pl-k">+</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span>Pi<span class="pl-k">*</span>im

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">1</span><span class="pl-k">+</span>im)Pi<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">/</span> <span class="pl-c1">2</span>Pi<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">2</span><span class="pl-k">/</span>Pi
<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span></pre></div>
<h2><a id="user-content-trigonometric-functions" class="anchor" aria-hidden="true" href="#trigonometric-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Trigonometric functions</h2>
<p>The type <code>PiTimes</code> uses <code>sinpi</code> and <code>cospi</code> under the hood when it is used as an argument to <code>sin</code> and <code>cos</code>. This results in exact results in several contexts where the inaccuracies arise from floating-point conversions.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cos</span>(<span class="pl-c1">3</span>π<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-k">-</span><span class="pl-c1">1.8369701987210297e-16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cos</span>(<span class="pl-c1">3</span>Pi<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sin</span>(<span class="pl-k">-</span>π)
<span class="pl-k">-</span><span class="pl-c1">1.2246467991473532e-16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sin</span>(<span class="pl-k">-</span>Pi)
<span class="pl-k">-</span><span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tan</span>(π<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">1.633123935319537e16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tan</span>(Pi<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">Inf</span></pre></div>
<p>We may compute complex exponential exactly:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">6.123233995736766e-17</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>Pi<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>

<span class="pl-c"><span class="pl-c">#</span> Euler's identity : exp(iπ) + 1 == 0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>π) <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.2246467991473532e-16im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">exp</span>(im<span class="pl-k">*</span>Pi) <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<p>Hyperbolic functions work as expected:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> cosh(ix) = cos(x)</span>
<span class="pl-c"><span class="pl-c">#</span> Should be exactly zero for x = π/2</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cosh</span>(im<span class="pl-k">*</span>π<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">6.123233995736766e-17</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cosh</span>(im<span class="pl-k">*</span>Pi<span class="pl-k">/</span><span class="pl-c1">2</span>)
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>Install the package using</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add MultiplesOfPi</pre></div>
<h1><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related packages</h1>
<ul>
<li><a href="https://github.com/jishnub/IrrationalExpressions.jl.git">IrrationalExpressions.jl</a></li>
<li><a href="https://github.com/JuliaMath/Tau.jl">Tau.jl</a></li>
<li><a href="https://github.com/yakir12/UnitfulAngles.jl">UnitfulAngles.jl</a></li>
</ul>
</article></div>