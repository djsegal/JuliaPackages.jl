<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lunettesjl" class="anchor" aria-hidden="true" href="#lunettesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lunettes.jl</h1>
<p dir="auto">Lunettes.jl is a small package for getting and setting fields in large nested
data structures in a safe, mutation-free, way.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In a Julia REPL, run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Lunettes&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Lunettes<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Simple as!</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The package exports one type: a <code>Lens{A,B}</code>, and two functions: <code>getr</code> and <code>setr</code>.</p>
<p dir="auto">Lenses are used to manipulate and query immutable data structures with a convenient notation.</p>
<p dir="auto">Suppose we have defined the following struct:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct MyStruct
    first_field
    second_field
end"><pre><span class="pl-k">struct</span> MyStruct
    first_field
    second_field
<span class="pl-k">end</span></pre></div>
<p dir="auto">Let's instantiate two lenses:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="first_field_lens = Lens{MyStruct,:first_field}()
second_field_lens = Lens{MyStruct,:second_field}()"><pre class="notranslate"><code>first_field_lens = Lens{MyStruct,:first_field}()
second_field_lens = Lens{MyStruct,:second_field}()
</code></pre></div>
<p dir="auto">We can then extend the function <code>getr</code> on these types in the following way</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function getr(::Lens{MyStruct,:first_field}, a)
    a.first_field
end
function getr(::Lens{MyStruct,:second_field}, a)
    a.second_field
end"><pre><span class="pl-k">function</span> <span class="pl-en">getr</span>(<span class="pl-k">::</span><span class="pl-c1">Lens{MyStruct,:first_field}</span>, a)
    a<span class="pl-k">.</span>first_field
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">getr</span>(<span class="pl-k">::</span><span class="pl-c1">Lens{MyStruct,:second_field}</span>, a)
    a<span class="pl-k">.</span>second_field
<span class="pl-k">end</span></pre></div>
<p dir="auto">and similarly for <code>setr</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function setr(::Lens{MyStruct,:first_field}, a, c)
    MyStruct(c, a.second_field)
end
function setr(::Lens{MyStruct,:second_field}, a, c)
    MyStruct(a.first_field, c)
end"><pre><span class="pl-k">function</span> <span class="pl-en">setr</span>(<span class="pl-k">::</span><span class="pl-c1">Lens{MyStruct,:first_field}</span>, a, c)
    <span class="pl-c1">MyStruct</span>(c, a<span class="pl-k">.</span>second_field)
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">setr</span>(<span class="pl-k">::</span><span class="pl-c1">Lens{MyStruct,:second_field}</span>, a, c)
    <span class="pl-c1">MyStruct</span>(a<span class="pl-k">.</span>first_field, c)
<span class="pl-k">end</span></pre></div>
<p dir="auto">We can now use our lenses in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="my_struct = MyStruct(&quot;Hello&quot;, 9.9)

getr(first_field_lens, my_struct) == &quot;Hello&quot; #true
setr(second_field_lens, my_struct, 1.0) == MyStruct(&quot;Hello&quot;, 1.0) #true"><pre>my_struct <span class="pl-k">=</span> <span class="pl-c1">MyStruct</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>, <span class="pl-c1">9.9</span>)

<span class="pl-c1">getr</span>(first_field_lens, my_struct) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span>true</span>
<span class="pl-c1">setr</span>(second_field_lens, my_struct, <span class="pl-c1">1.0</span>) <span class="pl-k">==</span> <span class="pl-c1">MyStruct</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span>true</span></pre></div>
<p dir="auto">We have gained not a lot for quite a lot of typing! We will see the power of lenses when we compose them together for manipulating deeply nested data structures.</p>
<h2 dir="auto"><a id="user-content-the-lens-macro-and-composition" class="anchor" aria-hidden="true" href="#the-lens-macro-and-composition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The <code>@lens</code> macro and composition</h2>
<p dir="auto"><code>Lunettes</code> also defines a macro: <code>@lens</code>. This macro automatically does the work for us of extending <code>getr</code> and <code>setr</code> in the obvious way.</p>
<p dir="auto">Consider the complicated nested data structure below.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@lens struct Curtain
    color::String
    state::String
end"><pre><span class="pl-c1">@lens</span> <span class="pl-k">struct</span> Curtain
    color<span class="pl-k">::</span><span class="pl-c1">String</span>
    state<span class="pl-k">::</span><span class="pl-c1">String</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@lens struct Window
    frame_color::String
    left_curtain::Curtain
    right_curtain::Curtain
end"><pre><span class="pl-c1">@lens</span> <span class="pl-k">struct</span> Window
    frame_color<span class="pl-k">::</span><span class="pl-c1">String</span>
    left_curtain<span class="pl-k">::</span><span class="pl-c1">Curtain</span>
    right_curtain<span class="pl-k">::</span><span class="pl-c1">Curtain</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Suppose we would like to manipulate this data structure, and make queries of its values.
Let us define a new <code>Lens</code> as the composition of two simpler lenses.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="left_curtain_state = Lens{Window,:left_curtain}() ○ Lens{Curtain,:state}()
left_curtain_color = Lens{Window,:left_curtain}() ○ Lens{Curtain,:color}()"><pre>left_curtain_state <span class="pl-k">=</span> <span class="pl-c1">Lens</span><span class="pl-c1">{Window,:left_curtain}</span>() ○ <span class="pl-c1">Lens</span><span class="pl-c1">{Curtain,:state}</span>()
left_curtain_color <span class="pl-k">=</span> <span class="pl-c1">Lens</span><span class="pl-c1">{Window,:left_curtain}</span>() ○ <span class="pl-c1">Lens</span><span class="pl-c1">{Curtain,:color}</span>()</pre></div>
<p dir="auto">We will be able to use <code>left_curtain_state</code> as a way to access (with <code>getr</code>) and change (with <code>setr</code>) different windows.</p>
<p dir="auto">Lets initialise a <code>Window</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="my_window = Window(&quot;White&quot;, Curtain(&quot;Purple&quot;, &quot;Open&quot;), Curtain(&quot;Orange&quot;,&quot;Shut&quot;))"><pre>my_window <span class="pl-k">=</span> <span class="pl-c1">Window</span>(<span class="pl-s"><span class="pl-pds">"</span>White<span class="pl-pds">"</span></span>, <span class="pl-c1">Curtain</span>(<span class="pl-s"><span class="pl-pds">"</span>Purple<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Open<span class="pl-pds">"</span></span>), <span class="pl-c1">Curtain</span>(<span class="pl-s"><span class="pl-pds">"</span>Orange<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Shut<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">Suppose we would like to reach into our <code>Window</code> and learn the state of the left curtain. We could write</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="my_window.left_window.state"><pre>my_window<span class="pl-k">.</span>left_window<span class="pl-k">.</span>state</pre></div>
<p dir="auto">or we could write</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="getr(left_curtain_state, my_window)"><pre><span class="pl-c1">getr</span>(left_curtain_state, my_window)</pre></div>
<p dir="auto">Better yet, suppose we would like to update the window and have the left curtain shut. We could write:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="my_new_window = Window(&quot;White&quot;, Curtain(&quot;Purple&quot;, &quot;Shut&quot;), Curtain(&quot;Orange&quot;,&quot;Shut&quot;))"><pre>my_new_window <span class="pl-k">=</span> <span class="pl-c1">Window</span>(<span class="pl-s"><span class="pl-pds">"</span>White<span class="pl-pds">"</span></span>, <span class="pl-c1">Curtain</span>(<span class="pl-s"><span class="pl-pds">"</span>Purple<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Shut<span class="pl-pds">"</span></span>), <span class="pl-c1">Curtain</span>(<span class="pl-s"><span class="pl-pds">"</span>Orange<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Shut<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">or instead</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setr(left_curtain_state, my_window, &quot;Shut&quot;)"><pre><span class="pl-c1">setr</span>(left_curtain_state, my_window, <span class="pl-s"><span class="pl-pds">"</span>Shut<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">In fact, both <code>getr</code> and <code>setr</code> are automatically curried, so we could even write</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="my_third_window = my_window |&gt;
setr(left_curtain_state, &quot;Shut&quot;) |&gt;
setr(left_curtain_color, &quot;Goldish Brown&quot;)"><pre>my_third_window <span class="pl-k">=</span> my_window <span class="pl-k">|&gt;</span>
<span class="pl-c1">setr</span>(left_curtain_state, <span class="pl-s"><span class="pl-pds">"</span>Shut<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span>
<span class="pl-c1">setr</span>(left_curtain_color, <span class="pl-s"><span class="pl-pds">"</span>Goldish Brown<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">producing a third window based off <code>my_window</code> that has its left curtain shut and a new color!</p>
<h2 dir="auto"><a id="user-content-so-whats-going-on" class="anchor" aria-hidden="true" href="#so-whats-going-on"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>So what's going on?</h2>
<p dir="auto">The <code>@lens</code> macro is doing nothing more that defining a method for the <code>getr</code> and <code>setr</code> functions for each member of the struct.</p>
<p dir="auto">For instance, after defining the <code>Curtain</code> <code>struct</code>, the function <code>getr(::Lens, a)</code> is now defined for the <code>Lens</code> of types <code>Lens{Curtain,:state}()</code> and <code>Lens{Curtain,:color}()</code>. In fact their defintions are very simple:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function getr(l::Lens{Curtain,:state}, a)
    a.state
end

function setr(l::Lens{Curtain,:state}, a, c)
    Curtain(a.color, c)
end"><pre><span class="pl-k">function</span> <span class="pl-en">getr</span>(l<span class="pl-k">::</span><span class="pl-c1">Lens{Curtain,:state}</span>, a)
    a<span class="pl-k">.</span>state
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">setr</span>(l<span class="pl-k">::</span><span class="pl-c1">Lens{Curtain,:state}</span>, a, c)
    <span class="pl-c1">Curtain</span>(a<span class="pl-k">.</span>color, c)
<span class="pl-k">end</span></pre></div>
<p dir="auto">By defining these getters and setters for these basic lenses, and then by composing lenses, we automatically obtain the correct definition of <code>getr</code> (and <code>setr</code>) for <code>Lens{Window,:left_curtain}() ○ Lens{Curtain,:state}()</code>.</p>
</article></div>