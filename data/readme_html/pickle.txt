<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-picklejl" class="anchor" aria-hidden="true" href="#picklejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pickle.jl</h1>
<p><a href="https://github.com/chengchingwen/Pickle.jl/actions"><img src="https://github.com/chengchingwen/Pickle.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chengchingwen/Pickle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d6239fe1f7f39dc8fb45fb5baa1e273b44e75577338ae896cdfaadfbb21a67e7/68747470733a2f2f636f6465636f762e696f2f67682f6368656e676368696e6777656e2f5069636b6c652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chengchingwen/Pickle.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://chengchingwen.github.io/Pickle.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>An experimental package for loading and saving object in Python Pickle and Torch Pickle format.</p>
<h2><a id="user-content-supports" class="anchor" aria-hidden="true" href="#supports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supports</h2>
<h3><a id="user-content-load" class="anchor" aria-hidden="true" href="#load"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Load</h3>
<ol>
<li>basic builtin types. e.g. `Integer`, `String`, `Tuple`, `Dict`, `Vector`, `Set` ...</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    julia&gt; Pickle.load(open(&quot;test.pkl&quot;))
    Dict{Any,Any} with 6 entries:
      &quot;int&quot;   =&gt; 0
      &quot;str&quot;   =&gt; &quot;Julia!&quot;
      &quot;bytes&quot; =&gt; UInt8[0x31, 0x32, 0x33, 0x34]
      &quot;tuple&quot; =&gt; (1, 2.0, &quot;3&quot;, UInt8[0x34])
      &quot;bool&quot;  =&gt; true
      &quot;float&quot; =&gt; 3.14159
"><pre>    julia<span class="pl-k">&gt;</span> Pickle<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>test.pkl<span class="pl-pds">"</span></span>))
    Dict{Any,Any} with <span class="pl-c1">6</span> entries<span class="pl-k">:</span>
      <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
      <span class="pl-s"><span class="pl-pds">"</span>str<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Julia!<span class="pl-pds">"</span></span>
      <span class="pl-s"><span class="pl-pds">"</span>bytes<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> UInt8[<span class="pl-c1">0x31</span>, <span class="pl-c1">0x32</span>, <span class="pl-c1">0x33</span>, <span class="pl-c1">0x34</span>]
      <span class="pl-s"><span class="pl-pds">"</span>tuple<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>, UInt8[<span class="pl-c1">0x34</span>])
      <span class="pl-s"><span class="pl-pds">"</span>bool<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>
      <span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14159</span></pre></div>
<ol start="2">
<li>framework for easily analyze and implement required translation methods. For those data which are
not able to restore directly will be stored in a <code>Defer</code> object which is similar to <code>Expr</code> but is mutable.</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; load(&quot;test/test_pkl/test-np.pkl&quot;)
Defer(:build, Defer(:reduce, Defer(:numpy.core.multiarray._reconstruct), Defer(:numpy.ndarray), (0,), UInt8[0x62]),
 (1, (3, 5), Defer(:build, Defer(:reduce, Defer(:numpy.dtype), f8, 0, 1), (3, &quot;&lt;&quot;, nothing, nothing, nothing, -1, -
1, 0)), false, UInt8[0x29, 0x0f, 0x9c, 0x3b, 0x11, 0x5a, 0xbf, 0x3f, 0x29, 0xa6  …  0xb8, 0x3f, 0x6b, 0x4a, 0x31, 0
xab, 0x2b, 0xc5, 0xf2, 0x3f]))

julia&gt; dump(ans)
Pickle.Defer
  head: Symbol build
  args: Array{Any}((2,))
    1: Pickle.Defer
      head: Symbol reduce
      args: Array{Any}((4,))
        1: Pickle.Defer
          head: Symbol numpy.core.multiarray._reconstruct
          args: Array{Any}((0,))
        2: Pickle.Defer
          head: Symbol numpy.ndarray
          args: Array{Any}((0,))
        3: Tuple{Int64}
          1: Int64 0
        4: Array{UInt8}((1,)) UInt8[0x62]
    2: Tuple{Int64,Tuple{Int64,Int64},Pickle.Defer,Bool,Array{UInt8,1}}
      1: Int64 1
      2: Tuple{Int64,Int64}
        1: Int64 3
        2: Int64 5
      3: Pickle.Defer
        head: Symbol build
        args: Array{Any}((2,))
          1: Pickle.Defer
            head: Symbol reduce
            args: Array{Any}((4,))
              1: Pickle.Defer
                head: Symbol numpy.dtype
                args: Array{Any}((0,))
              2: String &quot;f8&quot;
              3: Int64 0
              4: Int64 1
          2: Tuple{Int64,String,Nothing,Nothing,Nothing,Int64,Int64,Int64}
            1: Int64 3
            2: String &quot;&lt;&quot;
            3: Nothing nothing
            4: Nothing nothing
            5: Nothing nothing
            6: Int64 -1
            7: Int64 -1
            8: Int64 0
      4: Bool false
      5: Array{UInt8}((120,)) UInt8[0x29, 0x0f, 0x9c, 0x3b, 0x11, 0x5a, 0xbf, 0x3f, 0x29, 0xa6  …  0xb8, 0x3f, 0x6b
, 0x4a, 0x31, 0xab, 0x2b, 0xc5, 0xf2, 0x3f]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test/test_pkl/test-np.pkl<span class="pl-pds">"</span></span>)
<span class="pl-c1">Defer</span>(<span class="pl-c1">:build</span>, <span class="pl-c1">Defer</span>(<span class="pl-c1">:reduce</span>, <span class="pl-c1">Defer</span>(<span class="pl-c1">:numpy</span><span class="pl-k">.</span>core<span class="pl-k">.</span>multiarray<span class="pl-k">.</span>_reconstruct), <span class="pl-c1">Defer</span>(<span class="pl-c1">:numpy</span><span class="pl-k">.</span>ndarray), (<span class="pl-c1">0</span>,), UInt8[<span class="pl-c1">0x62</span>]),
 (<span class="pl-c1">1</span>, (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>), <span class="pl-c1">Defer</span>(<span class="pl-c1">:build</span>, <span class="pl-c1">Defer</span>(<span class="pl-c1">:reduce</span>, <span class="pl-c1">Defer</span>(<span class="pl-c1">:numpy</span><span class="pl-k">.</span>dtype), f8, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>&lt;<span class="pl-pds">"</span></span>, <span class="pl-c1">nothing</span>, <span class="pl-c1">nothing</span>, <span class="pl-c1">nothing</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span>
<span class="pl-c1">1</span>, <span class="pl-c1">0</span>)), <span class="pl-c1">false</span>, UInt8[<span class="pl-c1">0x29</span>, <span class="pl-c1">0x0f</span>, <span class="pl-c1">0x9c</span>, <span class="pl-c1">0x3b</span>, <span class="pl-c1">0x11</span>, <span class="pl-c1">0x5a</span>, <span class="pl-c1">0xbf</span>, <span class="pl-c1">0x3f</span>, <span class="pl-c1">0x29</span>, <span class="pl-c1">0xa6</span>  …  <span class="pl-c1">0xb8</span>, <span class="pl-c1">0x3f</span>, <span class="pl-c1">0x6b</span>, <span class="pl-c1">0x4a</span>, <span class="pl-c1">0x31</span>, <span class="pl-c1">0</span>
xab, <span class="pl-c1">0x2b</span>, <span class="pl-c1">0xc5</span>, <span class="pl-c1">0xf2</span>, <span class="pl-c1">0x3f</span>]))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dump</span>(ans)
Pickle<span class="pl-k">.</span>Defer
  head<span class="pl-k">:</span> Symbol build
  args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">2</span>,))
    <span class="pl-c1">1</span><span class="pl-k">:</span> Pickle<span class="pl-k">.</span>Defer
      head<span class="pl-k">:</span> Symbol reduce
      args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">4</span>,))
        <span class="pl-c1">1</span><span class="pl-k">:</span> Pickle<span class="pl-k">.</span>Defer
          head<span class="pl-k">:</span> Symbol numpy<span class="pl-k">.</span>core<span class="pl-k">.</span>multiarray<span class="pl-k">.</span>_reconstruct
          args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">0</span>,))
        <span class="pl-c1">2</span><span class="pl-k">:</span> Pickle<span class="pl-k">.</span>Defer
          head<span class="pl-k">:</span> Symbol numpy<span class="pl-k">.</span>ndarray
          args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">0</span>,))
        <span class="pl-c1">3</span><span class="pl-k">:</span> Tuple{Int64}
          <span class="pl-c1">1</span><span class="pl-k">:</span> Int64 <span class="pl-c1">0</span>
        <span class="pl-c1">4</span><span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{UInt8}</span>((<span class="pl-c1">1</span>,)) UInt8[<span class="pl-c1">0x62</span>]
    <span class="pl-c1">2</span><span class="pl-k">:</span> Tuple{Int64,Tuple{Int64,Int64},Pickle<span class="pl-k">.</span>Defer,Bool,Array{UInt8,<span class="pl-c1">1</span>}}
      <span class="pl-c1">1</span><span class="pl-k">:</span> Int64 <span class="pl-c1">1</span>
      <span class="pl-c1">2</span><span class="pl-k">:</span> Tuple{Int64,Int64}
        <span class="pl-c1">1</span><span class="pl-k">:</span> Int64 <span class="pl-c1">3</span>
        <span class="pl-c1">2</span><span class="pl-k">:</span> Int64 <span class="pl-c1">5</span>
      <span class="pl-c1">3</span><span class="pl-k">:</span> Pickle<span class="pl-k">.</span>Defer
        head<span class="pl-k">:</span> Symbol build
        args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">2</span>,))
          <span class="pl-c1">1</span><span class="pl-k">:</span> Pickle<span class="pl-k">.</span>Defer
            head<span class="pl-k">:</span> Symbol reduce
            args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">4</span>,))
              <span class="pl-c1">1</span><span class="pl-k">:</span> Pickle<span class="pl-k">.</span>Defer
                head<span class="pl-k">:</span> Symbol numpy<span class="pl-k">.</span>dtype
                args<span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{Any}</span>((<span class="pl-c1">0</span>,))
              <span class="pl-c1">2</span><span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span>f8<span class="pl-pds">"</span></span>
              <span class="pl-c1">3</span><span class="pl-k">:</span> Int64 <span class="pl-c1">0</span>
              <span class="pl-c1">4</span><span class="pl-k">:</span> Int64 <span class="pl-c1">1</span>
          <span class="pl-c1">2</span><span class="pl-k">:</span> Tuple{Int64,String,Nothing,Nothing,Nothing,Int64,Int64,Int64}
            <span class="pl-c1">1</span><span class="pl-k">:</span> Int64 <span class="pl-c1">3</span>
            <span class="pl-c1">2</span><span class="pl-k">:</span> String <span class="pl-s"><span class="pl-pds">"</span>&lt;<span class="pl-pds">"</span></span>
            <span class="pl-c1">3</span><span class="pl-k">:</span> Nothing <span class="pl-c1">nothing</span>
            <span class="pl-c1">4</span><span class="pl-k">:</span> Nothing <span class="pl-c1">nothing</span>
            <span class="pl-c1">5</span><span class="pl-k">:</span> Nothing <span class="pl-c1">nothing</span>
            <span class="pl-c1">6</span><span class="pl-k">:</span> Int64 <span class="pl-k">-</span><span class="pl-c1">1</span>
            <span class="pl-c1">7</span><span class="pl-k">:</span> Int64 <span class="pl-k">-</span><span class="pl-c1">1</span>
            <span class="pl-c1">8</span><span class="pl-k">:</span> Int64 <span class="pl-c1">0</span>
      <span class="pl-c1">4</span><span class="pl-k">:</span> Bool <span class="pl-c1">false</span>
      <span class="pl-c1">5</span><span class="pl-k">:</span> <span class="pl-c1">Array</span><span class="pl-c1">{UInt8}</span>((<span class="pl-c1">120</span>,)) UInt8[<span class="pl-c1">0x29</span>, <span class="pl-c1">0x0f</span>, <span class="pl-c1">0x9c</span>, <span class="pl-c1">0x3b</span>, <span class="pl-c1">0x11</span>, <span class="pl-c1">0x5a</span>, <span class="pl-c1">0xbf</span>, <span class="pl-c1">0x3f</span>, <span class="pl-c1">0x29</span>, <span class="pl-c1">0xa6</span>  …  <span class="pl-c1">0xb8</span>, <span class="pl-c1">0x3f</span>, <span class="pl-c1">0x6b</span>
, <span class="pl-c1">0x4a</span>, <span class="pl-c1">0x31</span>, <span class="pl-c1">0xab</span>, <span class="pl-c1">0x2b</span>, <span class="pl-c1">0xc5</span>, <span class="pl-c1">0xf2</span>, <span class="pl-c1">0x3f</span>]</pre></div>
<h3><a id="user-content-store" class="anchor" aria-hidden="true" href="#store"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Store</h3>
<ol>
<li>basic builtin types. e.g. `Integer`, `String`, `Tuple`, `Dict`, `Vector`, `Set` ...</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x
Dict{Any,Any} with 9 entries:
  &quot;int&quot;    =&gt; 42
  &quot;list&quot;   =&gt; Any[&quot;February&quot;, 14, 2012]
  &quot;str&quot;    =&gt; &quot;Julia!&quot;
  &quot;set&quot;    =&gt; Set(Any[2, 3, 21, 12, 1])
  &quot;bigint&quot; =&gt; 1234567890987654321012345678909876543210
  &quot;bytes&quot;  =&gt; UInt8[0x31, 0x32, 0x33, 0x34]
  &quot;tuple&quot;  =&gt; (1, 2.0, &quot;3&quot;, UInt8[0x34])
  &quot;bool&quot;   =&gt; Dict{Any,Any}(false=&gt;true,true=&gt;false)
  &quot;float&quot;  =&gt; 3.14159

julia&gt; store(&quot;./test.pkl&quot;, x)

julia&gt; stores(x)
&quot;\x80\x04}\x94(\x8c\x03int\x94K*\x8c\x04list\x94]\x94(\x8c\bFebruary\x94K\x0eM\xdc\ae\x8c\x03str\x94\x8c\x06Julia!\x94\x8c\x03set\x94\x8f\x94(K\x02K\x03K\x15K\fK\x01\x90\x8c\x06bigint\x94\x8a\x11\xea\x1e\xd9Z7\xff\xad9[e;\xa9\x80 ɠ\x03\x8c\x05bytes\x94C\x041234\x8c\x05tuple\x94(K\x01G@\0\0\0\0\0\0\0\x8c\x013\x94C\x014t\x94\x8c\x04bool\x94}\x94(\x89\x88\x88\x89u\x8c\x05float\x94G@\t!\xfbM\x12\xd8Ju.&quot;

julia&gt; load(&quot;./test.pkl&quot;)
Dict{Any,Any} with 9 entries:
  &quot;int&quot;    =&gt; 42
  &quot;list&quot;   =&gt; Any[&quot;February&quot;, 14, 2012]
  &quot;str&quot;    =&gt; &quot;Julia!&quot;
  &quot;set&quot;    =&gt; Set(Any[2, 3, 21, 12, 1])
  &quot;bigint&quot; =&gt; 1234567890987654321012345678909876543210
  &quot;bytes&quot;  =&gt; UInt8[0x31, 0x32, 0x33, 0x34]
  &quot;tuple&quot;  =&gt; (1, 2.0, &quot;3&quot;, UInt8[0x34])
  &quot;bool&quot;   =&gt; Dict{Any,Any}(false=&gt;true,true=&gt;false)
  &quot;float&quot;  =&gt; 3.14159

"><pre>julia<span class="pl-k">&gt;</span> x
Dict{Any,Any} with <span class="pl-c1">9</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">42</span>
  <span class="pl-s"><span class="pl-pds">"</span>list<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> Any[<span class="pl-s"><span class="pl-pds">"</span>February<span class="pl-pds">"</span></span>, <span class="pl-c1">14</span>, <span class="pl-c1">2012</span>]
  <span class="pl-s"><span class="pl-pds">"</span>str<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Julia!<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>set<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">Set</span>(Any[<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">21</span>, <span class="pl-c1">12</span>, <span class="pl-c1">1</span>])
  <span class="pl-s"><span class="pl-pds">"</span>bigint<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1234567890987654321012345678909876543210</span>
  <span class="pl-s"><span class="pl-pds">"</span>bytes<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> UInt8[<span class="pl-c1">0x31</span>, <span class="pl-c1">0x32</span>, <span class="pl-c1">0x33</span>, <span class="pl-c1">0x34</span>]
  <span class="pl-s"><span class="pl-pds">"</span>tuple<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>, UInt8[<span class="pl-c1">0x34</span>])
  <span class="pl-s"><span class="pl-pds">"</span>bool<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>(<span class="pl-c1">false</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>,<span class="pl-c1">true</span><span class="pl-k">=&gt;</span><span class="pl-c1">false</span>)
  <span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14159</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">store</span>(<span class="pl-s"><span class="pl-pds">"</span>./test.pkl<span class="pl-pds">"</span></span>, x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stores</span>(x)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\x</span>80<span class="pl-cce">\x</span>04}<span class="pl-cce">\x</span>94(<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>03int<span class="pl-cce">\x</span>94K*<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>04list<span class="pl-cce">\x</span>94]<span class="pl-cce">\x</span>94(<span class="pl-cce">\x</span>8c<span class="pl-cce">\b</span>February<span class="pl-cce">\x</span>94K<span class="pl-cce">\x</span>0eM<span class="pl-cce">\x</span>dc<span class="pl-cce">\a</span>e<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>03str<span class="pl-cce">\x</span>94<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>06Julia!<span class="pl-cce">\x</span>94<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>03set<span class="pl-cce">\x</span>94<span class="pl-cce">\x</span>8f<span class="pl-cce">\x</span>94(K<span class="pl-cce">\x</span>02K<span class="pl-cce">\x</span>03K<span class="pl-cce">\x</span>15K<span class="pl-cce">\f</span>K<span class="pl-cce">\x</span>01<span class="pl-cce">\x</span>90<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>06bigint<span class="pl-cce">\x</span>94<span class="pl-cce">\x</span>8a<span class="pl-cce">\x</span>11<span class="pl-cce">\x</span>ea<span class="pl-cce">\x</span>1e<span class="pl-cce">\x</span>d9Z7<span class="pl-cce">\x</span>ff<span class="pl-cce">\x</span>ad9[e;<span class="pl-cce">\x</span>a9<span class="pl-cce">\x</span>80 ɠ<span class="pl-cce">\x</span>03<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>05bytes<span class="pl-cce">\x</span>94C<span class="pl-cce">\x</span>041234<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>05tuple<span class="pl-cce">\x</span>94(K<span class="pl-cce">\x</span>01G@<span class="pl-cce">\0\0\0\0\0\0\0\x</span>8c<span class="pl-cce">\x</span>013<span class="pl-cce">\x</span>94C<span class="pl-cce">\x</span>014t<span class="pl-cce">\x</span>94<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>04bool<span class="pl-cce">\x</span>94}<span class="pl-cce">\x</span>94(<span class="pl-cce">\x</span>89<span class="pl-cce">\x</span>88<span class="pl-cce">\x</span>88<span class="pl-cce">\x</span>89u<span class="pl-cce">\x</span>8c<span class="pl-cce">\x</span>05float<span class="pl-cce">\x</span>94G@<span class="pl-cce">\t</span>!<span class="pl-cce">\x</span>fbM<span class="pl-cce">\x</span>12<span class="pl-cce">\x</span>d8Ju.<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>./test.pkl<span class="pl-pds">"</span></span>)
Dict{Any,Any} with <span class="pl-c1">9</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>int<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">42</span>
  <span class="pl-s"><span class="pl-pds">"</span>list<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> Any[<span class="pl-s"><span class="pl-pds">"</span>February<span class="pl-pds">"</span></span>, <span class="pl-c1">14</span>, <span class="pl-c1">2012</span>]
  <span class="pl-s"><span class="pl-pds">"</span>str<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Julia!<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>set<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">Set</span>(Any[<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">21</span>, <span class="pl-c1">12</span>, <span class="pl-c1">1</span>])
  <span class="pl-s"><span class="pl-pds">"</span>bigint<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1234567890987654321012345678909876543210</span>
  <span class="pl-s"><span class="pl-pds">"</span>bytes<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> UInt8[<span class="pl-c1">0x31</span>, <span class="pl-c1">0x32</span>, <span class="pl-c1">0x33</span>, <span class="pl-c1">0x34</span>]
  <span class="pl-s"><span class="pl-pds">"</span>tuple<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>, UInt8[<span class="pl-c1">0x34</span>])
  <span class="pl-s"><span class="pl-pds">"</span>bool<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>(<span class="pl-c1">false</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>,<span class="pl-c1">true</span><span class="pl-k">=&gt;</span><span class="pl-c1">false</span>)
  <span class="pl-s"><span class="pl-pds">"</span>float<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14159</span>
</pre></div>
<h2><a id="user-content-pickletorch" class="anchor" aria-hidden="true" href="#pickletorch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pickle.Torch</h2>
<p>We also support loading/saving the tensor data from/for pytorch.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pickle.Torch.THsave(&quot;mydata.bin&quot;, [randn(3,5), randn(5)])

julia&gt; Pickle.Torch.THload(&quot;mydata.bin&quot;)
2-element Array{Any,1}:
 [1.5106877710095366 -1.1454729135625932 … 2.06558662039955 -1.5367586535984377; 0.039481538567394656 -0.32939192495490544 … 1.3092722093574312 -2.008938993198881; -1.208358021687811 1.207098188115399 … 0.40730876859947734 1.6270781822957923]
 [-0.5909715360681883, -0.0948081699846433, -0.17734064360419854, 0.43085740457102734, -0.48091537835876497]

"><pre>julia<span class="pl-k">&gt;</span> Pickle<span class="pl-k">.</span>Torch<span class="pl-k">.</span><span class="pl-c1">THsave</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.bin<span class="pl-pds">"</span></span>, [<span class="pl-c1">randn</span>(<span class="pl-c1">3</span>,<span class="pl-c1">5</span>), <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>)])

julia<span class="pl-k">&gt;</span> Pickle<span class="pl-k">.</span>Torch<span class="pl-k">.</span><span class="pl-c1">THload</span>(<span class="pl-s"><span class="pl-pds">"</span>mydata.bin<span class="pl-pds">"</span></span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 [<span class="pl-c1">1.5106877710095366</span> <span class="pl-k">-</span><span class="pl-c1">1.1454729135625932</span> … <span class="pl-c1">2.06558662039955</span> <span class="pl-k">-</span><span class="pl-c1">1.5367586535984377</span>; <span class="pl-c1">0.039481538567394656</span> <span class="pl-k">-</span><span class="pl-c1">0.32939192495490544</span> … <span class="pl-c1">1.3092722093574312</span> <span class="pl-k">-</span><span class="pl-c1">2.008938993198881</span>; <span class="pl-k">-</span><span class="pl-c1">1.208358021687811</span> <span class="pl-c1">1.207098188115399</span> … <span class="pl-c1">0.40730876859947734</span> <span class="pl-c1">1.6270781822957923</span>]
 [<span class="pl-k">-</span><span class="pl-c1">0.5909715360681883</span>, <span class="pl-k">-</span><span class="pl-c1">0.0948081699846433</span>, <span class="pl-k">-</span><span class="pl-c1">0.17734064360419854</span>, <span class="pl-c1">0.43085740457102734</span>, <span class="pl-k">-</span><span class="pl-c1">0.48091537835876497</span>]
</pre></div>
</article></div>