<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mcintegration" class="anchor" aria-hidden="true" href="#mcintegration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MCIntegration</h1>
<p dir="auto">Robust and efficient Monte Carlo calculator for high-dimensional integral.</p>
<p dir="auto"><a href="https://numericalEFT.github.io/MCIntegration.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://numericalEFT.github.io/MCIntegration.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/numericalEFT/MCIntegration.jl/actions"><img src="https://github.com/numericalEFT/MCIntegration.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/numericalEFT/MCIntegration.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad7dc74bbbdae67cceef899279e6706a9521df6eebbbe5917c3701f8a960110b/68747470733a2f2f636f6465636f762e696f2f67682f6e756d65726963616c4546542f4d43496e746567726174696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/numericalEFT/MCIntegration.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">MCIntegration.jl provides several Monte Carlo algorithms to calculate regular/singular integrals in finite or inifinite dimensions.</p>
<h1 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h1>
<p dir="auto">The following examples demonstrate the basic usage of this package.</p>
<h2 dir="auto"><a id="user-content-example-1-one-dimensional-integral" class="anchor" aria-hidden="true" href="#example-1-one-dimensional-integral"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1. One-dimensional integral</h2>
<p dir="auto">We first demonstrate an example of highly singular integral. The following command evaluates <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="08847b3c8f43090a4594b7039c1ad091">$\int_0^1 \frac{\log (x)}{\sqrt{x}} dx = 4$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = integrate((x, c)-&gt;log(x[1])/sqrt(x[1]), solver=:vegas, print=0) 
Integral 1 = -3.997980772652019 ± 0.0013607691354676158   (chi2/dof = 1.93)

julia&gt; report(res) #print out the iteration history
====================================     Integral 1    ==========================================
  iter              integral                            wgt average                      chi2/dof
-------------------------------------------------------------------------------------------------
ignore        -3.8394711 ± 0.12101621              -3.8394711 ± 0.12101621                 0.0000
     2         -3.889894 ± 0.04161423              -3.8394711 ± 0.12101621                 0.0000
     3        -4.0258398 ± 0.016628525              -4.007122 ± 0.015441393                9.2027
     4        -4.0010193 ± 0.0097242712            -4.0027523 ± 0.0082285382               4.6573
     5         -3.990754 ± 0.0055248673            -3.9944823 ± 0.0045868638               3.5933
     6         -4.000744 ± 0.0025751679            -3.9992433 ± 0.0022454867               3.0492
     7        -4.0021542 ± 0.005940518             -3.9996072 ± 0.0021004392               2.4814
     8        -3.9979708 ± 0.0034603885            -3.9991666 ± 0.0017955468               2.0951
     9         -3.994137 ± 0.0026675679            -3.9975984 ± 0.0014895459               2.1453
    10        -3.9999099 ± 0.0033455927            -3.9979808 ± 0.0013607691               1.9269
-------------------------------------------------------------------------------------------------"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>((x, c)<span class="pl-k">-&gt;</span><span class="pl-c1">log</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">1</span>]), solver<span class="pl-k">=</span><span class="pl-c1">:vegas</span>, print<span class="pl-k">=</span><span class="pl-c1">0</span>) 
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3.997980772652019</span> ± <span class="pl-c1">0.0013607691354676158</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.93</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">report</span>(res) <span class="pl-c"><span class="pl-c">#</span>print out the iteration history</span>
<span class="pl-k">====================================</span>     Integral <span class="pl-c1">1</span>    <span class="pl-k">==========================================</span>
  iter              integral                            wgt average                      chi2<span class="pl-k">/</span>dof
<span class="pl-k">-------------------------------------------------------------------------------------------------</span>
ignore        <span class="pl-k">-</span><span class="pl-c1">3.8394711</span> ± <span class="pl-c1">0.12101621</span>              <span class="pl-k">-</span><span class="pl-c1">3.8394711</span> ± <span class="pl-c1">0.12101621</span>                 <span class="pl-c1">0.0000</span>
     <span class="pl-c1">2</span>         <span class="pl-k">-</span><span class="pl-c1">3.889894</span> ± <span class="pl-c1">0.04161423</span>              <span class="pl-k">-</span><span class="pl-c1">3.8394711</span> ± <span class="pl-c1">0.12101621</span>                 <span class="pl-c1">0.0000</span>
     <span class="pl-c1">3</span>        <span class="pl-k">-</span><span class="pl-c1">4.0258398</span> ± <span class="pl-c1">0.016628525</span>              <span class="pl-k">-</span><span class="pl-c1">4.007122</span> ± <span class="pl-c1">0.015441393</span>                <span class="pl-c1">9.2027</span>
     <span class="pl-c1">4</span>        <span class="pl-k">-</span><span class="pl-c1">4.0010193</span> ± <span class="pl-c1">0.0097242712</span>            <span class="pl-k">-</span><span class="pl-c1">4.0027523</span> ± <span class="pl-c1">0.0082285382</span>               <span class="pl-c1">4.6573</span>
     <span class="pl-c1">5</span>         <span class="pl-k">-</span><span class="pl-c1">3.990754</span> ± <span class="pl-c1">0.0055248673</span>            <span class="pl-k">-</span><span class="pl-c1">3.9944823</span> ± <span class="pl-c1">0.0045868638</span>               <span class="pl-c1">3.5933</span>
     <span class="pl-c1">6</span>         <span class="pl-k">-</span><span class="pl-c1">4.000744</span> ± <span class="pl-c1">0.0025751679</span>            <span class="pl-k">-</span><span class="pl-c1">3.9992433</span> ± <span class="pl-c1">0.0022454867</span>               <span class="pl-c1">3.0492</span>
     <span class="pl-c1">7</span>        <span class="pl-k">-</span><span class="pl-c1">4.0021542</span> ± <span class="pl-c1">0.005940518</span>             <span class="pl-k">-</span><span class="pl-c1">3.9996072</span> ± <span class="pl-c1">0.0021004392</span>               <span class="pl-c1">2.4814</span>
     <span class="pl-c1">8</span>        <span class="pl-k">-</span><span class="pl-c1">3.9979708</span> ± <span class="pl-c1">0.0034603885</span>            <span class="pl-k">-</span><span class="pl-c1">3.9991666</span> ± <span class="pl-c1">0.0017955468</span>               <span class="pl-c1">2.0951</span>
     <span class="pl-c1">9</span>         <span class="pl-k">-</span><span class="pl-c1">3.994137</span> ± <span class="pl-c1">0.0026675679</span>            <span class="pl-k">-</span><span class="pl-c1">3.9975984</span> ± <span class="pl-c1">0.0014895459</span>               <span class="pl-c1">2.1453</span>
    <span class="pl-c1">10</span>        <span class="pl-k">-</span><span class="pl-c1">3.9999099</span> ± <span class="pl-c1">0.0033455927</span>            <span class="pl-k">-</span><span class="pl-c1">3.9979808</span> ± <span class="pl-c1">0.0013607691</span>               <span class="pl-c1">1.9269</span>
<span class="pl-k">-------------------------------------------------------------------------------------------------</span></pre></div>
<ul dir="auto">
<li>
<p dir="auto">By default, the function performs 10 iterations and each iteraction costs about <code>1e4</code> evaluations. You can adjust these values using <code>niter</code> and <code>neval</code> keywords arguments.</p>
</li>
<li>
<p dir="auto">The final result is obtained through an inverse-variance-weighted average of all iterations, excluding the first one (since there is no importance sampling yet!). The results are stored in the <code>res</code>, which is a <a href="https://numericaleft.github.io/MCIntegration.jl/dev/lib/montecarlo/#Main-module" rel="nofollow"><code>Result</code></a> struct, and you can access the statistics with <code>res.mean</code>, <code>res.stdev</code>, <code>res.chi2</code>, <code>res.dof</code>, and <code>res.iterations</code>.</p>
</li>
<li>
<p dir="auto">If you want to exclude more iterations from the final estimations, such as the first three iterations, you can call <code>Result(res, 3)</code> to get a new averaged result.</p>
</li>
<li>
<p dir="auto">After each iteration, the program adjusts a distribution to mimic the integrand, improving importance sampling. Consequently, the estimated integral from each iteration generally becomes more accurate with more iterations. As long as <code>neval</code> is sufficiently large, the estimated integrals from different iterations should be statistically independent, justifying an average of different iterations weighted by the inverse variance. The assumption of statistical independence can be explicitly verified with a chi-square test, in which the <code>chi2/dof</code> value should be approximately one.</p>
</li>
<li>
<p dir="auto">The integrate function lets you choose a specific Monte Carlo (MC) algorithm by using the <code>solver</code> keyword argument. The example given employs the Vegas algorithm with <code>:vegas</code>. Additionally, this package provides two Markov-chain Monte Carlo (MCMC) algorithms for numerical integration: <code>:vegasmc</code> and <code>:mcmc</code>. Comparing these MCMC algorithms, <code>:vegasmc</code> offers better accuracy than <code>:mcmc</code> while keeping the same robustness. Although <code>:vegas</code> is generally slightly more accurate than <code>:vegasmc</code>, it is less robust. Considering the trade-off between accuracy and robustness, integrate defaults to using <code>:vegasmc</code>. For further information, consult the <a href="#Algorithm">Algorithm</a> section.</p>
</li>
<li>
<p dir="auto">When defining your own integrand evaluation function, you need to provide two arguments: <code>(x, c)</code>:</p>
<ul dir="auto">
<li>
<code>x</code> represents the integration variable, which by default falls within the range [0, 1). It should be considered as a pool of infinitely many random variables that follows the same distribution. To access the i-th random variable, use x[i]. For a better understanding, refer to Example 2 and the <a href="#Variables">Variables</a> section.</li>
<li>
<code>c</code> is a struct that holds the Monte Carlo (MC) configuration. This contains additional information that might be necessary for evaluating the integrand. For a practical example, see Example 5.</li>
</ul>
</li>
<li>
<p dir="auto">For complex-valued integral, say with the type <code>ComplexF64</code>, you need to call <code>integrate(..., dtype = ComplexF64)</code> to specify the integrand data type. The error  of the real part and the imaginary part will be estimated independently.</p>
</li>
<li>
<p dir="auto">You can suppress the output information by setting <code>print=-1</code>. If you want to see more information after the calculation, simply call <code>report(res)</code>. If you want to check the MC configuration, call <code>report(res.config)</code>.</p>
</li>
</ul>
<h2 dir="auto">
<a id="user-content-example-2-multi-dimensional-integral-symmetric-variables" class="anchor" aria-hidden="true" href="#example-2-multi-dimensional-integral-symmetric-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2. Multi-dimensional integral: Symmetric Variables</h2>
<p dir="auto">In <code>MCIntegration.jl</code>, a variable is represented as a pool of random numbers drawn from the same distribution. For instance, you can explicitly initialize a set of variables in the range [0, 1) as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x=Continuous(0.0, 1.0) #Create a pool of continuous variables. 
Adaptive continuous variable in the domain [0.0, 1.0). Max variable number = 16. Learning rate = 2.0."><pre>julia<span class="pl-k">&gt;</span> x<span class="pl-k">=</span><span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span>Create a pool of continuous variables. </span>
Adaptive continuous variable <span class="pl-k">in</span> the domain [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>). Max variable number <span class="pl-k">=</span> <span class="pl-c1">16.</span> Learning rate <span class="pl-k">=</span> <span class="pl-c1">2.0</span>.</pre></div>
<p dir="auto">This approach simplifies the evaluation of high-dimensional integrals involving multiple symmetric variables. For example, to calculate the area of a quarter unit circle (π/4 = 0.785398...):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = integrate((x, c)-&gt;(x[1]^2+x[2]^2&lt;1.0); var = x, dof = 2) 
Integral 1 = 0.7860119307731648 ± 0.002323473435947719   (chi2/dof = 2.14)"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>((x, c)<span class="pl-k">-&gt;</span>(x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">&lt;</span><span class="pl-c1">1.0</span>); var <span class="pl-k">=</span> x, dof <span class="pl-k">=</span> <span class="pl-c1">2</span>) 
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.7860119307731648</span> ± <span class="pl-c1">0.002323473435947719</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">2.14</span>)</pre></div>
<h2 dir="auto">
<a id="user-content-example-3-multi-dimensional-integral-generic-variables" class="anchor" aria-hidden="true" href="#example-3-multi-dimensional-integral-generic-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3. Multi-dimensional integral: Generic Variables</h2>
<p dir="auto">If the variables in a multi-dimensional integrand are not symmetric, it is better to define them as different types so that they can be sampled with different adaptive distributions,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x=Continuous(0.0, 1.0) #Create a pool of continuous variables. 
Adaptive continuous variable in the domain [0.0, 1.0). Max variable number = 16. Learning rate = 2.0.

julia&gt; y=Continuous(0.0, 1.0) #Create a pool of continuous variables. 
Adaptive continuous variable in the domain [0.0, 1.0). Max variable number = 16. Learning rate = 2.0.

julia&gt; res = integrate(((x, y), c)-&gt; log(x[1])/sqrt(x[1])*y[1]; var = (x, y), solver=:vegas)
Integral 1 = -2.00073745890742 ± 0.0008972661931407758   (chi2/dof = 2.63)"><pre>julia<span class="pl-k">&gt;</span> x<span class="pl-k">=</span><span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span>Create a pool of continuous variables. </span>
Adaptive continuous variable <span class="pl-k">in</span> the domain [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>). Max variable number <span class="pl-k">=</span> <span class="pl-c1">16.</span> Learning rate <span class="pl-k">=</span> <span class="pl-c1">2.0</span>.

julia<span class="pl-k">&gt;</span> y<span class="pl-k">=</span><span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>) <span class="pl-c"><span class="pl-c">#</span>Create a pool of continuous variables. </span>
Adaptive continuous variable <span class="pl-k">in</span> the domain [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>). Max variable number <span class="pl-k">=</span> <span class="pl-c1">16.</span> Learning rate <span class="pl-k">=</span> <span class="pl-c1">2.0</span>.

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(((x, y), c)<span class="pl-k">-&gt;</span> <span class="pl-c1">log</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">*</span>y[<span class="pl-c1">1</span>]; var <span class="pl-k">=</span> (x, y), solver<span class="pl-k">=</span><span class="pl-c1">:vegas</span>)
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">2.00073745890742</span> ± <span class="pl-c1">0.0008972661931407758</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">2.63</span>)</pre></div>
<p dir="auto">In the example above, using the Markov-chain Monte Carlo (MCMC) algorithm <code>:vegasmc</code> leads to a noticeable decrease in accuracy compared to the <code>:vegas</code> algorithm:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = integrate(((x, y), c)-&gt; log(x[1])/sqrt(x[1])*y[1]; var = (x, y), solver=:vegasmc)
Integral 1 = -1.9931385040549743 ± 0.0023982483367389613   (chi2/dof = 2.01)"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(((x, y), c)<span class="pl-k">-&gt;</span> <span class="pl-c1">log</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">*</span>y[<span class="pl-c1">1</span>]; var <span class="pl-k">=</span> (x, y), solver<span class="pl-k">=</span><span class="pl-c1">:vegasmc</span>)
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.9931385040549743</span> ± <span class="pl-c1">0.0023982483367389613</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">2.01</span>)</pre></div>
<p dir="auto">The decrease in accuracy is due to the Markov-chain-based algorithm selecting only one variable type to update at each MC step, resulting in strongly correlated samples and less accurate estimations. To update all variable types simultaneously in each MC step, you can combine them into a composite variable. After this modification, the integration accuracy becomes comparable to that of the <code>:vegas</code> algorithm:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cv = CompositeVar(x, y)
Adaptive Composite variable with 2 components. Max number = 16.

julia&gt; res = integrate(((x, y), c)-&gt; log(x[1])/sqrt(x[1])*y[1]; var = cv, solver=:vegasmc)
Integral 1 = -1.9984280095710727 ± 0.0011155989264483592   (chi2/dof = 1.7)"><pre>julia<span class="pl-k">&gt;</span> cv <span class="pl-k">=</span> <span class="pl-c1">CompositeVar</span>(x, y)
Adaptive Composite variable with <span class="pl-c1">2</span> components. Max number <span class="pl-k">=</span> <span class="pl-c1">16.</span>

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(((x, y), c)<span class="pl-k">-&gt;</span> <span class="pl-c1">log</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">*</span>y[<span class="pl-c1">1</span>]; var <span class="pl-k">=</span> cv, solver<span class="pl-k">=</span><span class="pl-c1">:vegasmc</span>)
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.9984280095710727</span> ± <span class="pl-c1">0.0011155989264483592</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.7</span>)</pre></div>
<h2 dir="auto">
<a id="user-content-example-4-evaluate-multiple-integrands-simultaneously" class="anchor" aria-hidden="true" href="#example-4-evaluate-multiple-integrands-simultaneously"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 4. Evaluate Multiple Integrands Simultaneously</h2>
<p dir="auto">You can calculate multiple integrals simultaneously. If the integrands are similar to each other, evaluating the integrals simultaneously sigificantly reduces cost. The following example calculate the area of a quarter circle and the volume of one-eighth sphere.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; integrate((X, c)-&gt;(X[1]^2+X[2]^2&lt;1.0, X[1]^2+X[2]^2+X[3]^2&lt;1.0); var = Continuous(0.0, 1.0), dof = [[2,],[3,]])
Integral 1 = 0.7823432452235586 ± 0.003174967010742156   (chi2/dof = 2.82)
Integral 2 = 0.5185515421806122 ± 0.003219487569949905   (chi2/dof = 1.41)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>((X, c)<span class="pl-k">-&gt;</span>(X[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>X[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">&lt;</span><span class="pl-c1">1.0</span>, X[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>X[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>X[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">&lt;</span><span class="pl-c1">1.0</span>); var <span class="pl-k">=</span> <span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), dof <span class="pl-k">=</span> [[<span class="pl-c1">2</span>,],[<span class="pl-c1">3</span>,]])
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.7823432452235586</span> ± <span class="pl-c1">0.003174967010742156</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">2.82</span>)
Integral <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">0.5185515421806122</span> ± <span class="pl-c1">0.003219487569949905</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.41</span>)</pre></div>
<p dir="auto">Here <code>dof</code> defines how many (degrees of freedom) variables of each type. For example, [[n1, n2], [m1, m2], ...] means the first integral involves n1 varibales of type 1, and n2 variables of type2, while the second integral involves m1 variables of type 1 and m2 variables of type 2. The <code>dof</code> of the integrals can be quite different, the program will figure out how to optimally padding the integrands to match the degrees of freedom.</p>
<p dir="auto">You can also use the julia do-syntax to improve the readability of the above example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; integrate(var = Continuous(0.0, 1.0), dof = [[2,], [3,]]) do X, c
           r1 = (X[1]^2 + X[2]^2 &lt; 1.0) ? 1.0 : 0.0
           r2 = (X[1]^2 + X[2]^2 + X[3]^2 &lt; 1.0) ? 1.0 : 0.0
           return (r1, r2)
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>(var <span class="pl-k">=</span> <span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), dof <span class="pl-k">=</span> [[<span class="pl-c1">2</span>,], [<span class="pl-c1">3</span>,]]) <span class="pl-k">do</span> X, c
           r1 <span class="pl-k">=</span> (X[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> X[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;</span> <span class="pl-c1">1.0</span>) <span class="pl-k">?</span> <span class="pl-c1">1.0</span> <span class="pl-k">:</span> <span class="pl-c1">0.0</span>
           r2 <span class="pl-k">=</span> (X[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> X[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> X[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;</span> <span class="pl-c1">1.0</span>) <span class="pl-k">?</span> <span class="pl-c1">1.0</span> <span class="pl-k">:</span> <span class="pl-c1">0.0</span>
           <span class="pl-k">return</span> (r1, r2)
       <span class="pl-k">end</span></pre></div>
<p dir="auto">If there are too many components of integrands, it is better to preallocate the integrand weights. The function <code>integrate</code> provide an <code>inplace</code> key argument to achieve this goal. It is turned off by default, and only applies to the solver <code>:vegas</code> and <code>:vegasmc</code>. Once <code>inplace</code> is turned on, <code>integrate</code> will call the user-defined integrand function with a preallocated vector to store the user calculated weights. The following example demonstrates its usage,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; integrate(var = Continuous(0.0, 1.0), dof = [[2,], [3,]], inplace=true) do X, f, c
           f[1] = (X[1]^2 + X[2]^2 &lt; 1.0) ? 1.0 : 0.0
           f[2] = (X[1]^2 + X[2]^2 + X[3]^2 &lt; 1.0) ? 1.0 : 0.0
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>(var <span class="pl-k">=</span> <span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), dof <span class="pl-k">=</span> [[<span class="pl-c1">2</span>,], [<span class="pl-c1">3</span>,]], inplace<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">do</span> X, f, c
           f[<span class="pl-c1">1</span>] <span class="pl-k">=</span> (X[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> X[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;</span> <span class="pl-c1">1.0</span>) <span class="pl-k">?</span> <span class="pl-c1">1.0</span> <span class="pl-k">:</span> <span class="pl-c1">0.0</span>
           f[<span class="pl-c1">2</span>] <span class="pl-k">=</span> (X[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> X[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> X[<span class="pl-c1">3</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;</span> <span class="pl-c1">1.0</span>) <span class="pl-k">?</span> <span class="pl-c1">1.0</span> <span class="pl-k">:</span> <span class="pl-c1">0.0</span>
       <span class="pl-k">end</span></pre></div>
<h2 dir="auto">
<a id="user-content-example-5-use-configuration-to-interface-with-mcintegration" class="anchor" aria-hidden="true" href="#example-5-use-configuration-to-interface-with-mcintegration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 5. Use <code>Configuration</code> to Interface with MCIntegration</h2>
<ul dir="auto">
<li>
<p dir="auto"><code>Configuration</code> in integrands: As explained in the Example 1, the user-defined integrand has the signature <code>(x, c)</code> where <code>x</code> is the variable(s), and <code>c</code> is a <a href="https://numericaleft.github.io/MCIntegration.jl/dev/lib/montecarlo/#Main-module" rel="nofollow">'Configuration'</a> struct stores the essential state information for the Monte Carlo sampling.Three particularly relavent members of <code>Configuratoin</code> include</p>
<ul dir="auto">
<li>
<code>userdata</code> : if you pass a keyword argument <code>userdata</code> to the <code>integrate</code> function, then it will be stored here, so that you can access it in your integrand evaluation function.</li>
<li>
<code>var</code> : A tuple of variable(s). If there is only one variable in the tuple, then the first argument of the integrand will be <code>x = var[1]</code>. On the other hand, if there are multiple variables in the tuple, then <code>x = var</code>.</li>
<li>
<code>obs</code> : A vector of observables. Each element is an accumulated estimator for one integrand. In other words, <code>length(obs)</code> = <code>length(dof)</code> = number of integrands.</li>
<li>
<code>normalization</code>: the estimation of integrals are given by <code>obs ./ normalization</code>.</li>
</ul>
</li>
<li>
<p dir="auto"><code>Configuration</code> in returned <code>Result</code>: The result returned by the <code>integrate</code> function contains the configuration after integration. If you want a detailed report, call <code>report(res.config)</code>. This configuration stores the optimized random variable distributions for the important sampling, which could be useful to evaluate other integrals with similar integrands. To use the optimized distributions, you can either call <code>integrate(..., config = res.config, ...)</code> to pass the entire configuration, or call <code>integrate(..., var = (res.config.var[1], ...), ...)</code> to pass one or more selected variables. In the following example, the second call is initialized with an optimized distribution, so that the first iteration is very accurate compared to the same row in the Example 1 output.</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res0 = integrate((x, c)-&gt;log(x[1])/sqrt(x[1]))
Integral 1 = -3.999299273090788 ± 0.001430447199375744   (chi2/dof = 1.46)

julia&gt; res = integrate((x, c)-&gt;log(x[1])/sqrt(x[1]), print=0, config = res0.config)
====================================     Integral 1    ================================================
  iter              integral                            wgt average                      chi2/dof
-------------------------------------------------------------------------------------------------------
ignore        -4.0022708 ± 0.0044299263            -4.0022708 ± 0.0044299263               0.0000
     2        -3.9931774 ± 0.0042087902            -4.0022708 ± 0.0044299263               0.0000
     3        -4.0003596 ± 0.0026421611            -3.9983293 ± 0.0022377558               2.0889
     4        -3.9949943 ± 0.0027683518            -3.9970113 ± 0.0017402955               1.4833
     5        -4.0028234 ± 0.0035948238            -3.9981148 ± 0.0015663954               1.6948
     6        -4.0037708 ± 0.0021567542             -4.000068 ± 0.0012674021               2.3967
     7        -3.9946345 ± 0.0040640646            -3.9995864 ± 0.0012099316               2.2431
     8        -4.0039064 ± 0.0032909285            -4.0001008 ± 0.0011356123               2.1223
     9        -3.9959395 ± 0.0036121885            -3.9997265 ± 0.0010833368               1.9916
    10        -3.9955869 ± 0.0032874678             -3.999321 ± 0.0010289098               1.9215
-------------------------------------------------------------------------------------------------------
Integral 1 = -3.9993209996786128 ± 0.0010289098118216647   (chi2/dof = 1.92)"><pre>julia<span class="pl-k">&gt;</span> res0 <span class="pl-k">=</span> <span class="pl-c1">integrate</span>((x, c)<span class="pl-k">-&gt;</span><span class="pl-c1">log</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">1</span>]))
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3.999299273090788</span> ± <span class="pl-c1">0.001430447199375744</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.46</span>)

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>((x, c)<span class="pl-k">-&gt;</span><span class="pl-c1">log</span>(x[<span class="pl-c1">1</span>])<span class="pl-k">/</span><span class="pl-c1">sqrt</span>(x[<span class="pl-c1">1</span>]), print<span class="pl-k">=</span><span class="pl-c1">0</span>, config <span class="pl-k">=</span> res0<span class="pl-k">.</span>config)
<span class="pl-k">====================================</span>     Integral <span class="pl-c1">1</span>    <span class="pl-k">================================================</span>
  iter              integral                            wgt average                      chi2<span class="pl-k">/</span>dof
<span class="pl-k">-------------------------------------------------------------------------------------------------------</span>
ignore        <span class="pl-k">-</span><span class="pl-c1">4.0022708</span> ± <span class="pl-c1">0.0044299263</span>            <span class="pl-k">-</span><span class="pl-c1">4.0022708</span> ± <span class="pl-c1">0.0044299263</span>               <span class="pl-c1">0.0000</span>
     <span class="pl-c1">2</span>        <span class="pl-k">-</span><span class="pl-c1">3.9931774</span> ± <span class="pl-c1">0.0042087902</span>            <span class="pl-k">-</span><span class="pl-c1">4.0022708</span> ± <span class="pl-c1">0.0044299263</span>               <span class="pl-c1">0.0000</span>
     <span class="pl-c1">3</span>        <span class="pl-k">-</span><span class="pl-c1">4.0003596</span> ± <span class="pl-c1">0.0026421611</span>            <span class="pl-k">-</span><span class="pl-c1">3.9983293</span> ± <span class="pl-c1">0.0022377558</span>               <span class="pl-c1">2.0889</span>
     <span class="pl-c1">4</span>        <span class="pl-k">-</span><span class="pl-c1">3.9949943</span> ± <span class="pl-c1">0.0027683518</span>            <span class="pl-k">-</span><span class="pl-c1">3.9970113</span> ± <span class="pl-c1">0.0017402955</span>               <span class="pl-c1">1.4833</span>
     <span class="pl-c1">5</span>        <span class="pl-k">-</span><span class="pl-c1">4.0028234</span> ± <span class="pl-c1">0.0035948238</span>            <span class="pl-k">-</span><span class="pl-c1">3.9981148</span> ± <span class="pl-c1">0.0015663954</span>               <span class="pl-c1">1.6948</span>
     <span class="pl-c1">6</span>        <span class="pl-k">-</span><span class="pl-c1">4.0037708</span> ± <span class="pl-c1">0.0021567542</span>             <span class="pl-k">-</span><span class="pl-c1">4.000068</span> ± <span class="pl-c1">0.0012674021</span>               <span class="pl-c1">2.3967</span>
     <span class="pl-c1">7</span>        <span class="pl-k">-</span><span class="pl-c1">3.9946345</span> ± <span class="pl-c1">0.0040640646</span>            <span class="pl-k">-</span><span class="pl-c1">3.9995864</span> ± <span class="pl-c1">0.0012099316</span>               <span class="pl-c1">2.2431</span>
     <span class="pl-c1">8</span>        <span class="pl-k">-</span><span class="pl-c1">4.0039064</span> ± <span class="pl-c1">0.0032909285</span>            <span class="pl-k">-</span><span class="pl-c1">4.0001008</span> ± <span class="pl-c1">0.0011356123</span>               <span class="pl-c1">2.1223</span>
     <span class="pl-c1">9</span>        <span class="pl-k">-</span><span class="pl-c1">3.9959395</span> ± <span class="pl-c1">0.0036121885</span>            <span class="pl-k">-</span><span class="pl-c1">3.9997265</span> ± <span class="pl-c1">0.0010833368</span>               <span class="pl-c1">1.9916</span>
    <span class="pl-c1">10</span>        <span class="pl-k">-</span><span class="pl-c1">3.9955869</span> ± <span class="pl-c1">0.0032874678</span>             <span class="pl-k">-</span><span class="pl-c1">3.999321</span> ± <span class="pl-c1">0.0010289098</span>               <span class="pl-c1">1.9215</span>
<span class="pl-k">-------------------------------------------------------------------------------------------------------</span>
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3.9993209996786128</span> ± <span class="pl-c1">0.0010289098118216647</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.92</span>)</pre></div>
<h2 dir="auto">
<a id="user-content-example-6-measure-histogram" class="anchor" aria-hidden="true" href="#example-6-measure-histogram"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 6. Measure Histogram</h2>
<p dir="auto">You may want to study how an integral changes with a tuning parameter. The following example is how to solve the histogram measurement problem.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; N = 20;

julia&gt; grid = [i / N for i in 1:N];

julia&gt; function integrand(vars, config)
            grid = config.userdata # radius
            x, bin = vars #unpack the variables
            r = grid[bin[1]] # binned variable in [0, 1)
            r1 = x[1]^2 + r^2 &lt; 1 # circle
            r2 = x[1]^2 + x[2]^2 + r^2 &lt; 1 # sphere
            return r1, r2
        end;

julia&gt; function measure(vars, obs, weights, config) 
       # obs: prototype of the observables for each integral
           x, bin = vars #unpack the variables
           obs[1][bin[1]] += weights[1] # circle
           obs[2][bin[1]] += weights[2] # sphere
       end;

julia&gt; res = integrate(integrand;
                measure = measure, # measurement function
                var = (Continuous(0.0, 1.0), Discrete(1, N)), # a continuous and a discrete variable pool 
                dof = [[1,1], [2,1]], 
                # integral-1: one continuous and one discrete variables, integral-2: two continous and one discrete variables
                obs = [zeros(N), zeros(N)], #  observable prototypes of each integral
                userdata = grid, neval = 1e5)
Integral 1 = 0.9957805541613277 ± 0.008336657854575344   (chi2/dof = 1.15)
Integral 2 = 0.7768105610812656 ± 0.006119386106596811   (chi2/dof = 1.4)"><pre>julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">20</span>;

julia<span class="pl-k">&gt;</span> grid <span class="pl-k">=</span> [i <span class="pl-k">/</span> N <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N];

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">integrand</span>(vars, config)
            grid <span class="pl-k">=</span> config<span class="pl-k">.</span>userdata <span class="pl-c"><span class="pl-c">#</span> radius</span>
            x, bin <span class="pl-k">=</span> vars <span class="pl-c"><span class="pl-c">#</span>unpack the variables</span>
            r <span class="pl-k">=</span> grid[bin[<span class="pl-c1">1</span>]] <span class="pl-c"><span class="pl-c">#</span> binned variable in [0, 1)</span>
            r1 <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> r<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> circle</span>
            r2 <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> r<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&lt;</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> sphere</span>
            <span class="pl-k">return</span> r1, r2
        <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">measure</span>(vars, obs, weights, config) 
       <span class="pl-c"><span class="pl-c">#</span> obs: prototype of the observables for each integral</span>
           x, bin <span class="pl-k">=</span> vars <span class="pl-c"><span class="pl-c">#</span>unpack the variables</span>
           obs[<span class="pl-c1">1</span>][bin[<span class="pl-c1">1</span>]] <span class="pl-k">+=</span> weights[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> circle</span>
           obs[<span class="pl-c1">2</span>][bin[<span class="pl-c1">1</span>]] <span class="pl-k">+=</span> weights[<span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> sphere</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(integrand;
                measure <span class="pl-k">=</span> measure, <span class="pl-c"><span class="pl-c">#</span> measurement function</span>
                var <span class="pl-k">=</span> (<span class="pl-c1">Continuous</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">Discrete</span>(<span class="pl-c1">1</span>, N)), <span class="pl-c"><span class="pl-c">#</span> a continuous and a discrete variable pool </span>
                dof <span class="pl-k">=</span> [[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>], [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]], 
                <span class="pl-c"><span class="pl-c">#</span> integral-1: one continuous and one discrete variables, integral-2: two continous and one discrete variables</span>
                obs <span class="pl-k">=</span> [<span class="pl-c1">zeros</span>(N), <span class="pl-c1">zeros</span>(N)], <span class="pl-c"><span class="pl-c">#</span>  observable prototypes of each integral</span>
                userdata <span class="pl-k">=</span> grid, neval <span class="pl-k">=</span> <span class="pl-c1">1e5</span>)
Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.9957805541613277</span> ± <span class="pl-c1">0.008336657854575344</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.15</span>)
Integral <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">0.7768105610812656</span> ± <span class="pl-c1">0.006119386106596811</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.4</span>)</pre></div>
<p dir="auto">You can visualize the returned result <code>res</code> with <code>Plots.jl</code>. The commands <code>res.mean[i]</code> and <code>res.stdev[i]</code> give the mean and stdev of the histogram of the <code>i</code>-th integral.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Plots

julia&gt; plt = plot(grid, res.mean[1], yerror = res.stdev[1], xlabel=&quot;R&quot;, label=&quot;circle&quot;, aspect_ratio=1.0, xlim=[0.0, 1.0])

julia&gt; plot!(plt, grid, res.mean[2], yerror = res.stdev[2], label=&quot;sphere&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots

julia<span class="pl-k">&gt;</span> plt <span class="pl-k">=</span> <span class="pl-c1">plot</span>(grid, res<span class="pl-k">.</span>mean[<span class="pl-c1">1</span>], yerror <span class="pl-k">=</span> res<span class="pl-k">.</span>stdev[<span class="pl-c1">1</span>], xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>circle<span class="pl-pds">"</span></span>, aspect_ratio<span class="pl-k">=</span><span class="pl-c1">1.0</span>, xlim<span class="pl-k">=</span>[<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot!</span>(plt, grid, res<span class="pl-k">.</span>mean[<span class="pl-c1">2</span>], yerror <span class="pl-k">=</span> res<span class="pl-k">.</span>stdev[<span class="pl-c1">2</span>], label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sphere<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/circle_sphere.png?raw=true"><img src="docs/src/assets/circle_sphere.png?raw=true" alt="histogram" title="Circle and Sphere" style="max-width: 100%;"></a></p>
<h1 dir="auto">
<a id="user-content-algorithm" class="anchor" aria-hidden="true" href="#algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithm</h1>
<p dir="auto">This package provides three solvers.</p>
<ul dir="auto">
<li>
<p dir="auto">Vegas algorithm (<code>:vegas</code>): A Monte Carlo algorithm that uses importance sampling as a variance-reduction technique. Vegas iteratively builds up a piecewise constant weight function, represented
on a rectangular grid. Each iteration consists of a sampling step followed by a refinement
of the grid. The exact details of the algorithm can be found in <strong><em>G.P. Lepage, J. Comp. Phys. 27 (1978) 192, 3</em></strong> and
<strong><em>G.P. Lepage, Report CLNS-80/447, Cornell Univ., Ithaca, N.Y., 1980</em></strong>.</p>
</li>
<li>
<p dir="auto">Vegas algorithm based on Markov-chain Monte Carlo (<code>:vegasmc</code>): A markov-chain Monte Carlo algorithm that uses the Vegas variance-reduction technique. It is as accurate as the vanilla Vegas algorithm, meanwhile tends to be more robust. For complicated high-dimensional integral, the vanilla Vegas algorithm can fail to learn the piecewise constant weight function. This algorithm uses Metropolis–Hastings algorithm to sample the integrand and improves the weight function learning.</p>
</li>
<li>
<p dir="auto">Markov-chain Monte Carlo (<code>:mcmc</code>): This algorithm is useful for calculating bundled integrands that are too many to calculate at once. Examples are the path-integral of world lines of quantum particles, which involves hundreds and thousands of nested spacetime integrals. This algorithm uses the Metropolis-Hastings algorithm to jump between different integrals so that you only need to evaluate one integrand at each Monte Carlo step. Just as <code>:vegas</code> and <code>:vegasmc</code>, this algorithm also learns a piecewise constant weight function to reduce the variance. However, because it assumes you can access one integrand at each step, it tends to be less accurate than the other two algorithms for low-dimensional integrals.</p>
</li>
</ul>
<p dir="auto">The signature of the integrand and measure functions of the <code>:mcmc</code> solver receices an additional index argument than that of the <code>:vegas</code> and <code>:vegasmc</code> solvers. As shown in the above examples, the integrand and measure functions of the latter two solvers should be like <code>integrand(vars, config)</code> and <code>measure(vars, obs, weights, config)</code>, where <code>weights</code> is a vectors carries the values of the integrands at the current MC step. On the other hand, the <code>:mcmc</code> solver requires something like <code>integrand(idx, vars, config)</code> and <code>measure(idx, vars, weight, config)</code>, where <code>idx</code> is the index of the integrand of the current step, and the argument <code>weight</code> is a scalar carries the value of the current integrand being sampled.</p>
<h1 dir="auto">
<a id="user-content-variables" class="anchor" aria-hidden="true" href="#variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variables</h1>
<p dir="auto">The package supports a couple of common types random variables. You can create them using the following constructors,</p>
<ul dir="auto">
<li>
<code>Continous(lower, upper[; adapt = true, alpha = 3.0, ...])</code>: Continuous real-valued variables on the domain [lower, upper). MC will learn the distribution using the Vegas algorithm and then perform an imporant sampling accordingly.</li>
<li>
<code>Discrete(lower::Int, upper::Int[; adapt = true, alpha = 3.0, ...])</code>: Integer variables in the closed set [lower, upper]. MC will learn the distribution and perform an imporant sampling accordingly.</li>
</ul>
<p dir="auto">After each iteration, the code will try to optimize how the variables are sampled, so that the most important regimes of the integrals will be sampled most frequently. Setting <code>alpha</code> to be true/false will turn on/off this distribution learning. The parameter <code>alpha</code> controls the learning rate.</p>
<p dir="auto">When you call the above constructor, it creates an unlimited pool of random variables of a given type. The size of the pool will be dynamically determined when you call a solver. All variables in this pool will be sampled with the same distribution. In many high-dimensional integrals, many integration variables may contribute to the integral in a similar way; then they can be sampled from the same variable pool. For example, in the above code example, the integral for the circle area and the sphere volume both involve the variable type <code>Continuous</code>. The former has dof=2, while the latter has dof=3. To evaluate a given integrand, you only need to choose some of the variables to evaluate a given integral. The rest of the variables in the pool serve as dummy ones. They will not cause any computational overhead.</p>
<p dir="auto">The variable pool trick will significantly reduce the cost of learning their distribution. It also opens the possibility of calculating integrals with infinite dimensions (for example, the path-integral of particle worldlines in quantum many-body physics).</p>
<p dir="auto">If some of the variables are paired with each other (for example, the three continuous variables (r, θ, ϕ) representing a 3D vector), then you can pack them into a joint random variable, which can be constructed with the following constructor,</p>
<ul dir="auto">
<li>
<code>CompositeVar(var1, var2, ...[; adapt = true, alpha = 3.0, ...])</code>: A product of different types of random variables. It samples <code>var1</code>, <code>var2</code>, ... with their producted distribution.</li>
</ul>
<p dir="auto">The packed variables will be sampled all together in the Markov-chain based solvers (<code>:vegasmc</code> and <code>:mcmc</code>). Such updates will generate more independent samples compared to the unpacked version. Sometimes, it could reduce the auto-correlation time of the Markov chain and make the algorithm more efficient.</p>
<p dir="auto">Moreover, packed variables usually indicate nontrivial correlations between their distributions. In the future, it will be interesting to learn such correlation so that one can sample the packed variables more efficiently.</p>
<h1 dir="auto">
<a id="user-content-parallelization" class="anchor" aria-hidden="true" href="#parallelization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parallelization</h1>
<p dir="auto">MCIntegration supports both MPI and multi-thread parallelization. You can even mix them if necessary.</p>
<h2 dir="auto">
<a id="user-content-mpi" class="anchor" aria-hidden="true" href="#mpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MPI</h2>
<p dir="auto">To run your code in MPI mode, simply use the command,</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mpiexec -n #NCPU julia ./your_script.jl"><pre>mpiexec -n <span class="pl-c"><span class="pl-c">#</span>NCPU julia ./your_script.jl</span></pre></div>
<p dir="auto">where <code>#NCPU</code> is the number of workers. Internally, the MC sampler will send the blocks (controlled by the argument <code>Nblock</code>, see above example code) to different workers, then collect the estimates in the root node.</p>
<p dir="auto">Note that you need to install the package <a href="https://github.com/JuliaParallel/MPI.jl">MPI.jl</a> to use the MPI mode. See this <a href="https://juliaparallel.github.io/MPI.jl/stable/configuration/" rel="nofollow">link</a> for the instruction on the configuration.</p>
<p dir="auto">The user essentially doesn't need to write additional code to support the parallelization. The only tricky part is the output: only the function <code>MCIntegratoin.integrate</code> of the root node returns meaningful estimates, while other workers simply returns <code>nothing</code>.</p>
<h2 dir="auto">
<a id="user-content-multi-threading" class="anchor" aria-hidden="true" href="#multi-threading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multi-threading</h2>
<p dir="auto">MCIntegration supports multi-threading with or without MPI. To run your code with multiple threads, start Julia with</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia -t #NCPU ./your_script.jl"><pre>julia -t <span class="pl-c"><span class="pl-c">#</span>NCPU ./your_script.jl</span></pre></div>
<p dir="auto">Note that all threads will share the same memory. The user-defined <code>integrand</code> and <code>measure</code> functions should be implemented thread-safe (for example, be very careful about reading any data if another thread might write to it). We recommend the user read Julia's official <a href="https://docs.julialang.org/en/v1/manual/multi-threading/" rel="nofollow">documentation</a>.</p>
<p dir="auto">There are two different ways to parallelize your code with multiple threads.</p>
<ol dir="auto">
<li>If you need to evaluate multiple integrals, each thread can call the function <code>MCIntegration.integrate</code> to do one integral. In the following example, we use three threads to evaluate three integrals altogether. Note that only three threads will be used even if you initialize Julia with more than three threads.</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Threads.@threads for i = 1:3
       println(&quot;Thread $(Threads.threadid()) returns &quot;, integrate((x, c) -&gt; x[1]^i, print=-2))
       end
Thread 2 returns Integral 1 = 0.24995156136254149 ± 6.945088534643841e-5   (chi2/dof = 2.95)
Thread 3 returns Integral 1 = 0.3334287563137184 ± 9.452648803649706e-5   (chi2/dof = 1.35)
Thread 1 returns Integral 1 = 0.5000251243601586 ± 0.00013482206569391864   (chi2/dof = 1.58)"><pre>julia<span class="pl-k">&gt;</span> Threads<span class="pl-k">.</span><span class="pl-c1">@threads</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
       <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Thread <span class="pl-v">$(Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>())</span> returns <span class="pl-pds">"</span></span>, <span class="pl-c1">integrate</span>((x, c) <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span>i, print<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span>))
       <span class="pl-k">end</span>
Thread <span class="pl-c1">2</span> returns Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.24995156136254149</span> ± <span class="pl-c1">6.945088534643841e-5</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">2.95</span>)
Thread <span class="pl-c1">3</span> returns Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.3334287563137184</span> ± <span class="pl-c1">9.452648803649706e-5</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.35</span>)
Thread <span class="pl-c1">1</span> returns Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.5000251243601586</span> ± <span class="pl-c1">0.00013482206569391864</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.58</span>)</pre></div>
<ol start="2" dir="auto">
<li>Only the main thread calls the function <code>MCIntegration.integrate</code>, then parallelize the internal blocks with multiple threads. To do that, you need to call the function <code>MCIntegration.integrate</code> with a key argument <code>parallel = :thread</code>. This approach will utilize all Julia threads.  For example,</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; for i = 1:3
       println(&quot;Thread $(Threads.threadid()) return &quot;, integrate((x, c) -&gt; x[1]^i, print=-2, parallel=:thread))
       end
Thread 1 return Integral 1 = 0.5001880440214347 ± 0.00015058935731086765   (chi2/dof = 0.397)
Thread 1 return Integral 1 = 0.33341068551139696 ± 0.00010109649819894601   (chi2/dof = 1.94)
Thread 1 return Integral 1 = 0.24983868976137244 ± 8.546009018501706e-5   (chi2/dof = 1.54)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>
       <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Thread <span class="pl-v">$(Threads<span class="pl-k">.</span><span class="pl-c1">threadid</span>())</span> return <span class="pl-pds">"</span></span>, <span class="pl-c1">integrate</span>((x, c) <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span>i, print<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">2</span>, parallel<span class="pl-k">=</span><span class="pl-c1">:thread</span>))
       <span class="pl-k">end</span>
Thread <span class="pl-c1">1</span> <span class="pl-k">return</span> Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.5001880440214347</span> ± <span class="pl-c1">0.00015058935731086765</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">0.397</span>)
Thread <span class="pl-c1">1</span> <span class="pl-k">return</span> Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.33341068551139696</span> ± <span class="pl-c1">0.00010109649819894601</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.94</span>)
Thread <span class="pl-c1">1</span> <span class="pl-k">return</span> Integral <span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">0.24983868976137244</span> ± <span class="pl-c1">8.546009018501706e-5</span>   (chi2<span class="pl-k">/</span>dof <span class="pl-k">=</span> <span class="pl-c1">1.54</span>)</pre></div>
</article></div>