<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-modelingtoolkitdesignerjl" class="anchor" aria-hidden="true" href="#modelingtoolkitdesignerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ModelingToolkitDesigner.jl</h1>
<p dir="auto">The ModelingToolkitDesigner.jl package is a helper tool for visualizing and editing ModelingToolkit.jl system connections.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Examples can be found in the "examples" folder.</p>
<h3 dir="auto"><a id="user-content-hydraulic-example" class="anchor" aria-hidden="true" href="#hydraulic-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hydraulic Example</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/hydraulic.svg"><img src="examples/hydraulic.svg" alt="example2" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-electrical-example" class="anchor" aria-hidden="true" href="#electrical-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Electrical Example</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/electrical.svg"><img src="examples/electrical.svg" alt="example2" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-mechanical-example" class="anchor" aria-hidden="true" href="#mechanical-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mechanical Example</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/mechanical.svg"><img src="examples/mechanical.svg" alt="example3" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h1>
<p dir="auto">Let's start with a simple hydraulic system with no connections defined yet...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ModelingToolkit
using ModelingToolkitDesigner
using GLMakie

import ModelingToolkitStandardLibrary.Hydraulic.IsothermalCompressible as IC
import ModelingToolkitStandardLibrary.Blocks as B


@parameters t

@component function system(; name)

    pars = []

    systems = @named begin
        stp = B.Step(;height = 10e5, start_time = 0.005)
        src = IC.InputSource(;p_int=0)
        vol = IC.FixedVolume(;p_int=0, vol=10.0)
        res = IC.Pipe(5; p_int=0, area=0.01, length=500.0)
    end
   
    eqs = Equation[]
    
    ODESystem(eqs, t, [], pars; name, systems)
end

@named sys = system()"><pre><span class="pl-k">using</span> ModelingToolkit
<span class="pl-k">using</span> ModelingToolkitDesigner
<span class="pl-k">using</span> GLMakie

<span class="pl-k">import</span> ModelingToolkitStandardLibrary<span class="pl-k">.</span>Hydraulic<span class="pl-k">.</span>IsothermalCompressible <span class="pl-k">as</span> IC
<span class="pl-k">import</span> ModelingToolkitStandardLibrary<span class="pl-k">.</span>Blocks <span class="pl-k">as</span> B


<span class="pl-c1">@parameters</span> t

<span class="pl-c1">@component</span> <span class="pl-k">function</span> <span class="pl-en">system</span>(; name)

    pars <span class="pl-k">=</span> []

    systems <span class="pl-k">=</span> <span class="pl-c1">@named</span> <span class="pl-k">begin</span>
        stp <span class="pl-k">=</span> B<span class="pl-k">.</span><span class="pl-c1">Step</span>(;height <span class="pl-k">=</span> <span class="pl-c1">10e5</span>, start_time <span class="pl-k">=</span> <span class="pl-c1">0.005</span>)
        src <span class="pl-k">=</span> IC<span class="pl-k">.</span><span class="pl-c1">InputSource</span>(;p_int<span class="pl-k">=</span><span class="pl-c1">0</span>)
        vol <span class="pl-k">=</span> IC<span class="pl-k">.</span><span class="pl-c1">FixedVolume</span>(;p_int<span class="pl-k">=</span><span class="pl-c1">0</span>, vol<span class="pl-k">=</span><span class="pl-c1">10.0</span>)
        res <span class="pl-k">=</span> IC<span class="pl-k">.</span><span class="pl-c1">Pipe</span>(<span class="pl-c1">5</span>; p_int<span class="pl-k">=</span><span class="pl-c1">0</span>, area<span class="pl-k">=</span><span class="pl-c1">0.01</span>, length<span class="pl-k">=</span><span class="pl-c1">500.0</span>)
    <span class="pl-k">end</span>
   
    eqs <span class="pl-k">=</span> Equation[]
    
    <span class="pl-c1">ODESystem</span>(eqs, t, [], pars; name, systems)
<span class="pl-k">end</span>

<span class="pl-c1">@named</span> sys <span class="pl-k">=</span> <span class="pl-c1">system</span>()</pre></div>
<p dir="auto">Then we can visualize the system using <code>ODESystemDesign()</code> and the <code>view()</code> functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="path = joinpath(@__DIR__, &quot;design&quot;) # folder where visualization info is saved and retrieved
design = ODESystemDesign(sys, path);
ModelingToolkitDesigner.view(design)"><pre>path <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>design<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> folder where visualization info is saved and retrieved</span>
design <span class="pl-k">=</span> <span class="pl-c1">ODESystemDesign</span>(sys, path);
ModelingToolkitDesigner<span class="pl-k">.</span><span class="pl-c1">view</span>(design)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/40798837/228621071-2044a422-5a5a-4a3b-89fe-7e4d297f9438.png"><img src="https://user-images.githubusercontent.com/40798837/228621071-2044a422-5a5a-4a3b-89fe-7e4d297f9438.png" alt="step 1" style="max-width: 100%;"></a></p>
<p dir="auto">Components can then be positioned in several ways:</p>
<ul dir="auto">
<li>keyboard: select component and then use up, down, left, right keys</li>
<li>mouse: click and drag (currently only 1 component at a time is supported)</li>
<li>alignment: select and align horrizontal or vertial with respective buttons</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/40798837/228626821-9e405ec3-e89b-4f30-bfff-ceb761ea6e2f.png"><img src="https://user-images.githubusercontent.com/40798837/228626821-9e405ec3-e89b-4f30-bfff-ceb761ea6e2f.png" alt="step2-3" style="max-width: 100%;"></a></p>
<p dir="auto">Nodes/Connectors can be positioned by selecting with the mouse and using the <strong>move node</strong> button.  <em>Note: Components and Nodes can be de-selected by right clicking anywhere or using the button</em> <strong>clear selection</strong></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/40798837/228626824-06f4d432-ea93-408d-ad1a-ddaa6ddc14e6.png"><img src="https://user-images.githubusercontent.com/40798837/228626824-06f4d432-ea93-408d-ad1a-ddaa6ddc14e6.png" alt="step4-5" style="max-width: 100%;"></a></p>
<p dir="auto">Connections can then be made by clicking 2 nodes and using the <strong>connect</strong> button.  One can then click the <strong>save</strong> button which will store the visualization information in the <code>path</code> location in a <code>.toml</code> format as well as the connection code in <code>.jl</code> format.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/40798837/228640663-e263a561-6549-415b-a8ff-b74e78c4bdb9.png"><img src="https://user-images.githubusercontent.com/40798837/228640663-e263a561-6549-415b-a8ff-b74e78c4bdb9.png" alt="step6-7" style="max-width: 100%;"></a></p>
<p dir="auto">The connection code can also be obtained with the <code>connection_code()</code> function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; connection_code(design)
connect(stp.output, src.input)
connect(src.port, res.port_a)
connect(vol.port, res.port_b)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">connection_code</span>(design)
<span class="pl-c1">connect</span>(stp<span class="pl-k">.</span>output, src<span class="pl-k">.</span>input)
<span class="pl-c1">connect</span>(src<span class="pl-k">.</span>port, res<span class="pl-k">.</span>port_a)
<span class="pl-c1">connect</span>(vol<span class="pl-k">.</span>port, res<span class="pl-k">.</span>port_b)</pre></div>
<p dir="auto">After the original <code>system()</code> component function is updated with the connection equations, the connections will be re-drawn automatically when using <code>ModelingToolkitDesigner.view()</code>.  <em>Note: CairoMakie vector based images can also be generated by passing <code>false</code> to the 2nd argument of <code>view()</code> (i.e. the <code>interactive</code> variable).</em></p>
<h1 dir="auto"><a id="user-content-hierarchy" class="anchor" aria-hidden="true" href="#hierarchy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hierarchy</h1>
<p dir="auto">If a component has a double lined box then it is possible to "look under the hood".  Simply select the component and click <strong>open</strong>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/40798837/228666972-14ea5032-52c6-4447-a97b-383356fbcbcf.png"><img src="https://user-images.githubusercontent.com/40798837/228666972-14ea5032-52c6-4447-a97b-383356fbcbcf.png" alt="step8-9" style="max-width: 100%;"></a></p>
<p dir="auto">Edits made to sub-components can be saved and loaded directly or indirectly.</p>
<h1 dir="auto"><a id="user-content-pass-thrus" class="anchor" aria-hidden="true" href="#pass-thrus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pass Thrus</h1>
<p dir="auto">To generate more esthetic diagrams, one can use as special kind of component called a <code>PassThru</code>, which simply defines 2 or more connected <code>connectors</code> to serve as a corner, tee, or any other junction.  Simply define a component function starting with <code>PassThru</code> and ModelingToolkitDesigner.jl will recognize it as a special component type.  For example for a corner with 2 connection points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@component function PassThru2(;name)
    @variables t
    
    systems = @named begin
        p1 = Pin()
        p2 = Pin()
    end

    eqs = [
        connect(p1, p2)
    ]

    return ODESystem(eqs, t, [], []; name, systems)
end"><pre><span class="pl-c1">@component</span> <span class="pl-k">function</span> <span class="pl-en">PassThru2</span>(;name)
    <span class="pl-c1">@variables</span> t
    
    systems <span class="pl-k">=</span> <span class="pl-c1">@named</span> <span class="pl-k">begin</span>
        p1 <span class="pl-k">=</span> <span class="pl-c1">Pin</span>()
        p2 <span class="pl-k">=</span> <span class="pl-c1">Pin</span>()
    <span class="pl-k">end</span>

    eqs <span class="pl-k">=</span> [
        <span class="pl-c1">connect</span>(p1, p2)
    ]

    <span class="pl-k">return</span> <span class="pl-c1">ODESystem</span>(eqs, t, [], []; name, systems)
<span class="pl-k">end</span></pre></div>
<p dir="auto">And for a tee with 3 connection points</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@component function PassThru3(;name)
    @variables t
    
    systems = @named begin
        p1 = Pin()
        p2 = Pin()
        p3 = Pin()
    end

    eqs = [
        connect(p1, p2, p3)
    ]

    return ODESystem(eqs, t, [], []; name, systems)
end"><pre><span class="pl-c1">@component</span> <span class="pl-k">function</span> <span class="pl-en">PassThru3</span>(;name)
    <span class="pl-c1">@variables</span> t
    
    systems <span class="pl-k">=</span> <span class="pl-c1">@named</span> <span class="pl-k">begin</span>
        p1 <span class="pl-k">=</span> <span class="pl-c1">Pin</span>()
        p2 <span class="pl-k">=</span> <span class="pl-c1">Pin</span>()
        p3 <span class="pl-k">=</span> <span class="pl-c1">Pin</span>()
    <span class="pl-k">end</span>

    eqs <span class="pl-k">=</span> [
        <span class="pl-c1">connect</span>(p1, p2, p3)
    ]

    <span class="pl-k">return</span> <span class="pl-c1">ODESystem</span>(eqs, t, [], []; name, systems)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Adding these components to your system will then allow for corners, tees, etc. to be created.  When editing is complete, use the toggle switch to hide the <code>PassThru</code> details, showing a more esthetic connection diagram.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/40798837/229201536-4444a037-18b3-4efd-bc93-d2c182abf533.png"><img src="https://user-images.githubusercontent.com/40798837/229201536-4444a037-18b3-4efd-bc93-d2c182abf533.png" alt="step10-11" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-icons" class="anchor" aria-hidden="true" href="#icons"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Icons</h1>
<p dir="auto">ModelingToolkitDesigner.jl comes with icons for the ModelingToolkitStandardLibrary.jl pre-loaded.  For custom components, icons are loaded from either the <code>path</code> variable supplied to <code>ODESystemDesign()</code> or from an <code>icons</code> folder of the package namespace.  To find the paths ModelingToolkitDesign.jl is searching, run the following on the component of interest (for example <code>sys.vol</code>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; println.(ModelingToolkitDesigner.get_icons(sys.vol, path));
...\ModelingToolkitDesigner.jl\examples\design\ModelingToolkitStandardLibrary\Hydraulic\IsothermalCompressible\FixedVolume.png
...\ModelingToolkitStandardLibrary.jl\icons\ModelingToolkitStandardLibrary\Hydraulic\IsothermalCompressible\FixedVolume.png      
...\ModelingToolkitDesigner.jl\icons\ModelingToolkitStandardLibrary\Hydraulic\IsothermalCompressible\FixedVolume.png"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>.(ModelingToolkitDesigner<span class="pl-k">.</span><span class="pl-c1">get_icons</span>(sys<span class="pl-k">.</span>vol, path));
<span class="pl-k">...</span><span class="pl-k">\</span>ModelingToolkitDesigner<span class="pl-k">.</span>jl<span class="pl-k">\</span>examples<span class="pl-k">\</span>design<span class="pl-k">\</span>ModelingToolkitStandardLibrary<span class="pl-k">\</span>Hydraulic<span class="pl-k">\</span>IsothermalCompressible<span class="pl-k">\</span>FixedVolume<span class="pl-k">.</span>png
<span class="pl-k">...</span><span class="pl-k">\</span>ModelingToolkitStandardLibrary<span class="pl-k">.</span>jl<span class="pl-k">\</span>icons<span class="pl-k">\</span>ModelingToolkitStandardLibrary<span class="pl-k">\</span>Hydraulic<span class="pl-k">\</span>IsothermalCompressible<span class="pl-k">\</span>FixedVolume<span class="pl-k">.</span>png      
<span class="pl-k">...</span><span class="pl-k">\</span>ModelingToolkitDesigner<span class="pl-k">.</span>jl<span class="pl-k">\</span>icons<span class="pl-k">\</span>ModelingToolkitStandardLibrary<span class="pl-k">\</span>Hydraulic<span class="pl-k">\</span>IsothermalCompressible<span class="pl-k">\</span>FixedVolume<span class="pl-k">.</span>png</pre></div>
<p dir="auto">The first file location comes from the <code>path</code> variable.  The second is looking for a folder <code>icons</code> in the component parent package, in this case <code>ModelingToolkitStandardLibrary</code>, and the third path is from the <code>icons</code> folder of this <code>ModelingToolkitDesigner</code> package.  The first real file is the chosen icon load path.  Feel free to contribute icons here for any other public component libraries.</p>
<h2 dir="auto"><a id="user-content-icon-rotation" class="anchor" aria-hidden="true" href="#icon-rotation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Icon Rotation</h2>
<p dir="auto">The icon rotation is controlled by the <code>wall</code> atribute in the saved <code>.toml</code> design file.  Currently this must be edited by hand.  The default direction is "E" for east.  The image direciton can change to any "N","S","E","W".  For example, to rotate the capacitor icon by -90 degrees (i.e. from "E" to "N") simply edit the design file as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[capacitor]
n = &quot;S&quot;
x = 0.51
y = 0.29
wall = &quot;N&quot;"><pre class="notranslate"><code>[capacitor]
n = "S"
x = 0.51
y = 0.29
wall = "N"
</code></pre></div>
<h1 dir="auto"><a id="user-content-colors" class="anchor" aria-hidden="true" href="#colors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Colors</h1>
<p dir="auto">ModelingToolkitDesigner.jl colors the connections based on <code>ModelingToolkitDesigner.design_colors</code>.  Colors for the ModelingToolkitStandardLibrary.jl are already loaded.  To add a custom connector color, simply use <code>add_color(system::ODESystem, color::Symbol)</code> where <code>system</code> is a reference to the connector (e.g. <code>sys.vol.port</code>) and <code>color</code> is a named color from <a href="https://juliagraphics.github.io/Colors.jl/stable/namedcolors/" rel="nofollow">Colors.jl</a>.</p>
<h1 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h1>
<ul dir="auto">
<li>Finish adding icons for the ModelingToolkitStandardLibrary.jl</li>
<li>Rotate image feature</li>
<li>Improve text positioning and fontsize</li>
<li>How to include connection equations automatically, maybe implement the <code>input</code> macro</li>
<li>Provide <code>PassThru</code>'s without requiring user to add <code>PassThru</code> components to ODESystem</li>
<li>Add documentation</li>
</ul>
<h1 dir="auto"><a id="user-content-compat" class="anchor" aria-hidden="true" href="#compat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>[compat]</h1>
<ul dir="auto">
<li>ModelingToolkit = "8.50" &gt; needed for Domain feature</li>
<li>ModelingToolkitStandardLibrary = "1.12" &gt; needed for Hydraulic components</li>
</ul>
</article></div>