<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lazystrings" class="anchor" aria-hidden="true" href="#lazystrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LazyStrings</h1>
<p dir="auto"><a href="https://gkappler.github.io/LazyStrings.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/github/gkappler/LazyStrings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1e802343a77cdbb8a30718579b825290e5f7691287338a1be612c0cb5b88d76e/68747470733a2f2f7472617669732d63692e6f72672f676b6170706c65722f4c617a79537472696e67732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gkappler/LazyStrings.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/gkappler/LazyStrings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2dcf1e1de14f89ef654ad16741f7cd92a10ab333a19f491bdd9b6dd638ac3402/68747470733a2f2f636f6465636f762e696f2f67682f676b6170706c65722f4c617a79537472696e67732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gkappler/LazyStrings.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-stringwrapper" class="anchor" aria-hidden="true" href="#stringwrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>StringWrapper</code></h2>
<p dir="auto">Provides a lazy <code>abstract type StringWrapper &lt;: AbstractString end</code> interface implementation,
delegating <code>AbstractString</code> API methods</p>
<ul dir="auto">
<li>index boundaries and sizes: <code>firstindex</code>, <code>lastindex</code>, <code>length</code>, <code>ncodeunits</code>, <code>sizeof</code></li>
<li>getting elements <code>getindex</code>, <code>iterate</code>, <code>codeunit</code></li>
<li>codeunits and indices: <code>isvalid</code>, <code>thisind</code>, <code>prevind</code>, <code>nextind</code></li>
<li><code>SubString</code>
<code>LazyStrings.jl</code> provides similar functionality for <code>AbstractString</code>s
as <a href="https://github.com/JuliaArrays/LazyArrays.jl">LazyArrays.jl</a> for <code>Vector</code>s.</li>
</ul>
<p dir="auto">These sources have been reviewed for <code>AbstractString</code> interface methods.</p>
<ul dir="auto">
<li><a href="https://docs.julialang.org/en/v1/base/strings/" rel="nofollow">https://docs.julialang.org/en/v1/base/strings/</a></li>
<li><a href="https://discourse.julialang.org/t/what-is-the-interface-of-abstractstring/8937" rel="nofollow">What is the Interface of AbstractString?</a>
I did not find any official table of API functions -- please add methods in a PR if the API is missing what you need.</li>
</ul>
<p dir="auto">Note:</p>
<ul dir="auto">
<li><code>*, ^, repeat</code> is not provided</li>
<li><a href="https://github.com/JuliaLang/julia/issues/26202" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/26202/hovercard">findnext(f, ::AbstractString, ::Int) ignores specialised nextind #26202</a>, is not tested</li>
</ul>
<p dir="auto">The package is used in <a href="https://github.com/gkappler/CombinedParsers.jl">CombinedParsers.jl</a> for lookbehind parsers and parsers on a lazyly transformed <code>String</code> (e.g. <code>lowercase</code>).
<a href="https://github.com/gkappler/ReversedStrings.jl/">ReversedStrings.jl</a> was the deprecated and moved into this package.</p>
<h2 dir="auto"><a id="user-content-custom-stringwrapper" class="anchor" aria-hidden="true" href="#custom-stringwrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom <code>StringWrapper</code></h2>
<p dir="auto">All you need is provide a <code>LazyStrings.representation</code> method.</p>
<h2 dir="auto"><a id="user-content-lazy-charmappedstring" class="anchor" aria-hidden="true" href="#lazy-charmappedstring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lazy <code>CharMappedString</code></h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyStrings

julia&gt; using BenchmarkTools

julia&gt; @btime lmap(lowercase,&quot;JuliaCon&quot;)[1]
  6.706 ns (0 allocations: 0 bytes)
'j': ASCII/Unicode U+006A (category Ll: Letter, lowercase)

julia&gt; @btime map(lowercase,&quot;JuliaCon&quot;)[1]
  93.681 ns (3 allocations: 144 bytes)
'j': ASCII/Unicode U+006A (category Ll: Letter, lowercase)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyStrings

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">lmap</span>(lowercase,<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]
  <span class="pl-c1">6.706</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-s"><span class="pl-pds">'</span>j<span class="pl-pds">'</span></span>: ASCII<span class="pl-k">/</span>Unicode U<span class="pl-k">+</span><span class="pl-c1">006</span>A (category Ll<span class="pl-k">:</span> Letter, lowercase)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">map</span>(lowercase,<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>)[<span class="pl-c1">1</span>]
  <span class="pl-c1">93.681</span> ns (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)
<span class="pl-s"><span class="pl-pds">'</span>j<span class="pl-pds">'</span></span>: ASCII<span class="pl-k">/</span>Unicode U<span class="pl-k">+</span><span class="pl-c1">006</span>A (category Ll<span class="pl-k">:</span> Letter, lowercase)</pre></div>
<h2 dir="auto"><a id="user-content-lazy-reversedstring" class="anchor" aria-hidden="true" href="#lazy-reversedstring"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lazy <code>ReversedString</code></h2>
<p dir="auto">A lazy <code>reverse</code> implementation</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LazyStrings


julia&gt; using BenchmarkTools

julia&gt; @btime reverse(&quot;JuliaCon&quot;)
  28.694 ns (1 allocation: 32 bytes)
&quot;noCailuJ&quot;

julia&gt; @btime reversed(&quot;JuliaCon&quot;)
  3.167 ns (0 allocations: 0 bytes)
&quot;noCailuJ&quot;

julia&gt; @btime reverse(reverse(&quot;JuliaCon&quot;))
  58.530 ns (2 allocations: 64 bytes)
&quot;JuliaCon&quot;

julia&gt; @btime reversed(reversed(&quot;JuliaCon&quot;))
  3.734 ns (0 allocations: 0 bytes)
&quot;JuliaCon&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazyStrings


julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">reverse</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>)
  <span class="pl-c1">28.694</span> ns (<span class="pl-c1">1</span> allocation<span class="pl-k">:</span> <span class="pl-c1">32</span> bytes)
<span class="pl-s"><span class="pl-pds">"</span>noCailuJ<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">reversed</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>)
  <span class="pl-c1">3.167</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-s"><span class="pl-pds">"</span>noCailuJ<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">reverse</span>(<span class="pl-c1">reverse</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>))
  <span class="pl-c1">58.530</span> ns (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64</span> bytes)
<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">reversed</span>(<span class="pl-c1">reversed</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span>))
  <span class="pl-c1">3.734</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-s"><span class="pl-pds">"</span>JuliaCon<span class="pl-pds">"</span></span></pre></div>
</article></div>