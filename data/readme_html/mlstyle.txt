<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mlstylejl" class="anchor" aria-hidden="true" href="#mlstylejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MLStyle.jl</h1>
<p><a href="https://travis-ci.org/thautwarm/MLStyle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c3d3f08de8ff630d6f64cb45bc23f22b9632d6db/68747470733a2f2f7472617669732d63692e6f72672f74686175747761726d2f4d4c5374796c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/thautwarm/MLStyle.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/MLStyle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d23db55e5777ffd1859a0f056776f4adf4adba1/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f4d4c5374796c652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/thautwarm/MLStyle.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/thautwarm/MLStyle.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/890acbdcb87868b382af9a4b1fac507b9659d9bf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/MLStyle.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/55e929f17bf56c2d40147472ea29913878dfc4be/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d707572706c652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-purple.svg" style="max-width:100%;"></a>
<a href="https://gitter.im/MLStyle-jl/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/96e5e243df558184cdec9daa80476f84ca1fdeae/68747470733a2f2f6261646765732e6769747465722e696d2f4d4c5374796c652d6a6c2f636f6d6d756e6974792e737667" alt="Join the chat at https://gitter.im/MLStyle-jl/community" data-canonical-src="https://badges.gitter.im/MLStyle-jl/community.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-index" class="anchor" aria-hidden="true" href="#index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Index</h2>
<ul>
<li>
<p><a href="#what-is-mlstylejl">What is MLStyle.jl</a></p>
</li>
<li>
<p><a href="#motivation">Motivation</a></p>
</li>
<li>
<p><a href="#why-use-mlstylejl">Why use MLStyle.jl</a></p>
</li>
<li>
<p><a href="#installation-documentations-and-tutorials">Installation, Documentations and Tutorials</a></p>
</li>
<li>
<p><a href="#preview">Preview</a></p>
<ul>
<li><a href="#homoiconic-pattern-matching-for-julia-asts">Homoiconic pattern matching for Julia ASTs</a></li>
<li><a href="#generalized-algebraic-data-types">Generalized Algebraic Data Types</a></li>
<li><a href="#active-patterns">Active Patterns</a></li>
</ul>
</li>
<li>
<p><a href="#benchmark">Benchmark</a></p>
<ul>
<li>
<p><a href="#prerequisite">Prerequisite</a></p>
</li>
<li>
<p><a href="#visualization">Visualization</a></p>
<ul>
<li><a href="#time-overhead">Time Overhead</a></li>
<li><a href="#allocation">Allocation</a></li>
<li><a href="#gallery">Gallery</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/thautwarm/MLStyle.jl#contributing-to-mlstyle">Contributing to MLStyle</a></p>
</li>
</ul>
<h2><a id="user-content-what-is-mlstylejl" class="anchor" aria-hidden="true" href="#what-is-mlstylejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What is MLStyle.jl?</h2>
<p>MLStyle.jl is a Julia package that provides multiple productivity tools from ML (<a href="https://en.wikipedia.org/wiki/ML_(programming_language)" rel="nofollow">Meta Language</a>) like <a href="https://en.wikipedia.org/wiki/Pattern_matching" rel="nofollow">pattern matching</a> which is statically generated and extensible, ADTs/GADTs (<a href="https://en.wikipedia.org/wiki/Algebraic_data_type" rel="nofollow">Algebraic Data Type</a>, <a href="https://en.wikipedia.org/wiki/Generalized_algebraic_data_type" rel="nofollow">Generalized Algebraic Data Type</a>) and <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/active-patterns" rel="nofollow">Active Patterns</a>.</p>
<p>Think of MLStyle.jl as a package bringing advanced functional programming idioms to Julia.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Motivation</h2>
<p>Those used to functional programming may feel limited when they don't have pattern matching and ADTs, and of course I'm one of them.</p>
<p>However, I don't want to make a trade-off here by using some available alternatives that miss features or are not well-optimized. Just like <a href="https://julialang.org/blog/2012/02/why-we-created-julia" rel="nofollow">why those greedy people created Julia</a>, I'm also so greedy that <strong>I want to integrate all those useful features into one language, and make all of them convenient, efficient and extensible</strong>.</p>
<p>On the other side, in recent years I was addicted to extending Python with metaprogramming and even internal mechanisms. Although I made something interesting like <a href="https://github.com/Xython/pattern-matching">pattern-matching</a>, <a href="https://github.com/thautwarm/Redy/blob/master/Redy/Opt/builtin_features/_goto.py">goto</a>, <a href="https://github.com/thautwarm/Redy/tree/master/Redy/ADT">ADTs</a>, <a href="https://github.com/thautwarm/Redy/blob/master/Redy/Opt/builtin_features/_constexpr.py">constexpr</a>, <a href="https://github.com/thautwarm/Redy/blob/master/Redy/Opt/builtin_features/_macro.py">macros</a>, etc., most of these implementations are also disgustingly evil. Fortunately, in Julia, all of them could be achieved straightforwardly without any black magic, at last, some of these ideas come into existence with MLStyle.jl.</p>
<p>Finally, we have such a library that provides <strong>extensible pattern matching</strong> for such an efficient language.</p>
<h2><a id="user-content-why-use-mlstylejl" class="anchor" aria-hidden="true" href="#why-use-mlstylejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why use MLStyle.jl</h2>
<ul>
<li>
<p>Straightforward</p>
<p>I think there is no need to talk about why we should use pattern matching instead of manually writing something like conditional branches and nested visitors for datatypes.</p>
</li>
<li>
<p>Performance Gain</p>
<p>When dealing with complex conditional logics and visiting nested datatypes, the codes compiled via <code>MLStyle.jl</code> is usually as fast as handwritten code. You can check the <a href="#benchmark">benchmarks</a> for details.</p>
</li>
<li>
<p>Extensibility and Hygienic Scoping</p>
<p>You can define your own patterns via the interfaces <code>def_pattern</code>, <code>def_app_pattern</code> and <code>def_gapp_pattern</code>. Almost all built-in patterns are defined at <a href="https://github.com/thautwarm/MLStyle.jl/blob/master/src/Pervasives.jl">Pervasives.jl</a>.</p>
<p>Once you define a pattern, you're tasked with giving some qualifiers to your own patterns to prevent visiting them from unexpected modules.</p>
</li>
<li>
<p>You can use MLStyle in development via <a href="https://github.com/thautwarm/MLStyle.jl/tree/master/bootstrap">Bootstrap mechanism</a>:</p>
<p>Now there's a code generation tool called <code>bootstrap</code> available at <a href="https://github.com/thautwarm/MLStyle.jl/tree/master/bootstrap">MLStyle/bootstrap</a>, which
you can take advantage of to remove MLStyle dependency when making distributions.</p>
<p>Also, MLStyle is implemented by itself now, via the bootstrap method.</p>
</li>
<li>
<p>* Modern Ways about AST Manipulations</p>
<p>MLStyle.jl is not a superset of MacroToos.jl, but it provides something useful for AST manipulations. Furthermore, in terms of extracting sub-structures from a given AST, using expr patterns and AST patterns could speed code up by orders of magnitude.</p>
</li>
</ul>
<h2><a id="user-content-installation-documentations-and-tutorials" class="anchor" aria-hidden="true" href="#installation-documentations-and-tutorials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation, Documentations and Tutorials</h2>
<p>Rich features are provided by MLStyle.jl and you can check the <a href="https://thautwarm.github.io/MLStyle.jl/latest/" rel="nofollow">documentation</a> to get started.</p>
<p>For installation, open the package manager mode in the Julia REPL and <code>add MLStyle</code>.</p>
<p>For more examples or tutorials, see <a href="https://github.com/thautwarm/MLStyle-Playground">this project</a> which will be frequently updated to present some interesting uses of MLStyle.jl.</p>
<h2><a id="user-content-preview" class="anchor" aria-hidden="true" href="#preview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Preview</h2>
<h3><a id="user-content-rock-paper-scissors" class="anchor" aria-hidden="true" href="#rock-paper-scissors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rock Paper Scissors</h3>
<p>Here's a trivial example of MLStyle.jl in action:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MLStyle
<span class="pl-c1">@data</span> Shape <span class="pl-k">begin</span> <span class="pl-c"><span class="pl-c">#</span> Define an algebraic data type Shape</span>
    <span class="pl-c1">Rock</span>()
    <span class="pl-c1">Paper</span>()
    <span class="pl-c1">Scissors</span>()
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Determine who wins a game of rock paper scissors with pattern matching</span>
<span class="pl-en">play</span>(a<span class="pl-k">::</span><span class="pl-c1">Shape</span>, b<span class="pl-k">::</span><span class="pl-c1">Shape</span>) <span class="pl-k">=</span> <span class="pl-c1">@match</span> (a,b) <span class="pl-k">begin</span>
    (<span class="pl-c1">Paper</span>(), <span class="pl-c1">Rock</span>())     <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Paper Wins!<span class="pl-pds">"</span></span>;
    (<span class="pl-c1">Rock</span>(), <span class="pl-c1">Scissors</span>())  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Rock Wins!<span class="pl-pds">"</span></span>;
    (<span class="pl-c1">Scissors</span>(), <span class="pl-c1">Paper</span>()) <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Scissors Wins!<span class="pl-pds">"</span></span>;
    (a, b)                <span class="pl-k">=&gt;</span> a <span class="pl-k">==</span> b ? <span class="pl-s"><span class="pl-pds">"</span>Tie!<span class="pl-pds">"</span></span> : <span class="pl-c1">play</span>(b, a)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-homoiconic-pattern-matching-for-julia-asts" class="anchor" aria-hidden="true" href="#homoiconic-pattern-matching-for-julia-asts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Homoiconic pattern matching for Julia ASTs</h3>
<p>Here's a less trivial use of MLStyle.jl for deconstructing and pattern matching Julia code.</p>
<div class="highlight highlight-source-julia"><pre>rmlines <span class="pl-k">=</span> @λ <span class="pl-k">begin</span>
    e <span class="pl-k">::</span> <span class="pl-c1">Expr</span>           <span class="pl-k">-&gt;</span> <span class="pl-c1">Expr</span>(e<span class="pl-k">.</span>head, <span class="pl-c1">filter</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">!==</span> <span class="pl-c1">nothing</span>, <span class="pl-c1">map</span>(rmlines, e<span class="pl-k">.</span>args))<span class="pl-k">...</span>)
      <span class="pl-k">::</span> <span class="pl-c1">LineNumberNode</span> <span class="pl-k">-&gt;</span> <span class="pl-c1">nothing</span>
    a                   <span class="pl-k">-&gt;</span> a
<span class="pl-k">end</span>
expr <span class="pl-k">=</span> <span class="pl-k">quote</span>
    <span class="pl-k">struct</span> S{T}
        a <span class="pl-k">::</span> <span class="pl-c1">Int</span>
        b <span class="pl-k">::</span> <span class="pl-c1">T</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span> <span class="pl-k">|&gt;</span> rmlines

<span class="pl-c1">@match</span> expr <span class="pl-k">begin</span>
    <span class="pl-k">quote</span>
        <span class="pl-k">struct</span> <span class="pl-k">$</span>name{<span class="pl-k">$</span>tvar}
            <span class="pl-k">$</span>f1 <span class="pl-k">::</span> <span class="pl-c1">$t1</span>
            <span class="pl-k">$</span>f2 <span class="pl-k">::</span> <span class="pl-c1">$t2</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span> <span class="pl-k">=&gt;</span>
    <span class="pl-k">quote</span>
        <span class="pl-k">struct</span> <span class="pl-k">$</span>name{<span class="pl-k">$</span>tvar}
            <span class="pl-k">$</span>f1 <span class="pl-k">::</span> <span class="pl-c1">$t1</span>
            <span class="pl-k">$</span>f2 <span class="pl-k">::</span> <span class="pl-c1">$t2</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span> <span class="pl-k">|&gt;</span> rmlines <span class="pl-k">==</span> expr
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-generalized-algebraic-data-types" class="anchor" aria-hidden="true" href="#generalized-algebraic-data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generalized Algebraic Data Types</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@use</span> GADT

<span class="pl-c1">@data</span> public Exp{T} <span class="pl-k">begin</span>
   Sym{A}    <span class="pl-k">::</span> <span class="pl-c1">Symbol</span>                        <span class="pl-k">=&gt;</span> Exp{A}
   Val{A}    <span class="pl-k">::</span> <span class="pl-c1">A</span>                             <span class="pl-k">=&gt;</span> Exp{A}
   App{A, B, A_} <span class="pl-k">::</span> <span class="pl-c1">(Exp{Fun{A, B}}, Exp{A_})</span> <span class="pl-k">=&gt;</span> Exp{B}
   Lam{A, B} <span class="pl-k">::</span> <span class="pl-c1">(Symbol, Exp{B})</span>              <span class="pl-k">=&gt;</span> Exp{Fun{A, B}}
   If{A}     <span class="pl-k">::</span> <span class="pl-c1">(Exp{Bool}, Exp{A}, Exp{A})</span>   <span class="pl-k">=&gt;</span> Exp{A}
<span class="pl-k">end</span>
</pre></div>
<p>A simple interpreter implemented via GADTs could be found at <code>test/untyped_lam.jl</code>.</p>
<h3><a id="user-content-active-patterns" class="anchor" aria-hidden="true" href="#active-patterns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Active Patterns</h3>
<p>Currently, MLStyle does not have <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/active-patterns" rel="nofollow">fully featured</a> active patterns, but the subset of parametric active patterns that are implemented are very powerful.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@active</span> <span class="pl-c1">Re</span><span class="pl-c1">{r :: Regex}</span>(x) <span class="pl-k">begin</span>
    <span class="pl-c1">match</span>(r, x)
<span class="pl-k">end</span>

<span class="pl-c1">@match</span> <span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-c1">Re</span><span class="pl-c1">{r"\d+"}</span>(x) <span class="pl-k">=&gt;</span> x
    _ <span class="pl-k">=&gt;</span> <span class="pl-c1">@error</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> RegexMatch("123")</span></pre></div>
<h2><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmark</h2>
<h3><a id="user-content-prerequisite" class="anchor" aria-hidden="true" href="#prerequisite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prerequisite</h3>
<p>Recent benchmarks have been run, showing that MLStyle.jl can be extremely fast for complicated pattern matching, but due to its advanced machinery has noticeable overhead in some very simple cases such as straightforwardly destructuring shallow tuples, arrays and datatypes without recursive invocations.</p>
<p>All benchmark scripts are provided in the directory <a href="https://github.com/thautwarm/MLStyle.jl/blob/master/matrix-benchmark">Matrix-Benchmark</a>.</p>
<p>To run these cross-implementation benchmarks, some extra dependencies should be installed:</p>
<ul>
<li>
<p><code>(v1.1) pkg&gt; add https://github.com/thautwarm/Benchmarkplotting.jl#master</code> for making cross-implementation benchmark methods and plotting.</p>
</li>
<li>
<p><code>(v1.1) pkg&gt; add Gadfly MacroTools Match BenchmarkTools StatsBase Statistics ArgParse DataFrames</code>.</p>
</li>
<li>
<p><code>(v1.1) pkg&gt; add MLStyle#base</code> for a specific version of MLStyle.jl is required.</p>
</li>
</ul>
<p>After installing dependencies, you can directly benchmark them with <code>julia matrix_benchmark.jl hw-tuple hw-array match macrotools match-datatype</code> in the root directory.</p>
<p>The benchmarks presented here are made by Julia <strong>v1.1</strong> on <strong>Fedora 28</strong>. For reports made on <strong>Win10</strong>, check <a href="https://github.com/thautwarm/MLStyle.jl/tree/master/stats/windows">stats/windows/</a> directory.</p>
<h3><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Visualization</h3>
<h4><a id="user-content-time-overhead" class="anchor" aria-hidden="true" href="#time-overhead"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Time Overhead</h4>
<p>On the x-axis, after the name of test-case is the least time-consuming run's index in units of <code>ns</code>.</p>
<p>The y-label is the ratio of the implementation's time cost to that of the least time-consuming.</p>
<h4><a id="user-content-allocation" class="anchor" aria-hidden="true" href="#allocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Allocation</h4>
<p>On the x-axis, after the name of test-case is the least allocated one's index, the unit is <code>_ -&gt; (_ + 1) bytes</code>).</p>
<p>The y-label is the ratio of the implementation's allocation cost to that of the least allocated.</p>
<h4><a id="user-content-gallery" class="anchor" aria-hidden="true" href="#gallery"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gallery</h4>
<p>The benchmark results in dataframe format are available at <a href="https://github.com/thautwarm/MLStyle.jl/tree/master/stats">this directory</a>.</p>
<ul>
<li><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/matrix-benchmark/versus-hw-array.jl">matrix-benchmark/versus-hw-array.jl</a></li>
</ul>
<p>There are still some performance issues with array patterns.</p>
<ol>
<li>Time</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-hw(array).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-hw(array)-on-time.svg?sanitize=true" alt="hw-array" style="max-width:100%;"></a></p>
<ol start="2">
<li>Allocation</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-hw(array).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-hw(array)-on-allocs.svg?sanitize=true" alt="hw-array" style="max-width:100%;"></a></p>
<ul>
<li><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/matrix-benchmark/versus-hw-tuple.jl">matrix-benchmark/versus-hw-tuple.jl</a></li>
</ul>
<ol>
<li>Time</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-hw(tuple).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-hw(tuple)-on-time.svg?sanitize=true" alt="hw-tuple" style="max-width:100%;"></a></p>
<ol start="2">
<li>Allocation</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-hw(tuple).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-hw(tuple)-on-allocs.svg?sanitize=true" alt="hw-tuple" style="max-width:100%;"></a></p>
<ul>
<li><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/matrix-benchmark/versus-macrotools.jl">matrix-benchmark/versus-macrotools.jl</a></li>
</ul>
<ol>
<li>Time</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-macrotools(ast).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-macrotools(ast)-on-time.svg?sanitize=true" alt="macrotools" style="max-width:100%;"></a></p>
<ol start="2">
<li>Allocation</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-macrotools(ast).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-macrotools(ast)-on-allocs.svg?sanitize=true" alt="macrotools" style="max-width:100%;"></a></p>
<ul>
<li><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/matrix-benchmark/versus-match.jl">matrix-benchmark/versus-match.jl</a></li>
</ul>
<ol>
<li>Time</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-match(expr).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-match(expr)-on-time.svg?sanitize=true" alt="match.jl" style="max-width:100%;"></a></p>
<ol start="2">
<li>Allocation</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-match(expr).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-match(expr)-on-allocs.svg?sanitize=true" alt="match.jl" style="max-width:100%;"></a></p>
<ul>
<li><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/matrix-benchmark/versus-match-datatype.jl">matrix-benchmark/versus-match-datatype.jl</a></li>
</ul>
<ol>
<li>Time</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-match(datatype).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-match(datatype)-on-time.svg?sanitize=true" alt="match.jl" style="max-width:100%;"></a></p>
<ol start="2">
<li>Allocation</li>
</ol>
<p><a href="https://github.com/thautwarm/MLStyle.jl/blob/base-2/stats/vs-match(datatype).txt"><img src="https://github.com/thautwarm/MLStyle.jl/raw/base-2/stats/vs-match(datatype)-on-allocs.svg?sanitize=true" alt="match.jl" style="max-width:100%;"></a></p>
<h2><a id="user-content-contributing-to-mlstyle" class="anchor" aria-hidden="true" href="#contributing-to-mlstyle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contributing to MLStyle</h2>
<p>Thanks to all individuals referred in <a href="./acknowledgements.txt">Acknowledgements</a>!</p>
<p>Feel free to ask questions about usage, development or extensions about MLStyle at <a href="https://gitter.im/MLStyle-jl/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow">Gitter Room</a>.</p>
</article></div>