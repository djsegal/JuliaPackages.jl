<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-trackerjl" class="anchor" aria-hidden="true" href="#trackerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tracker.jl</h1>
<p dir="auto"><a href="https://github.com/FluxML/Tracker.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/FluxML/Tracker.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/FluxML/Tracker.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/356ad12895409e0f6bda8ed0076ce722c42685a4fe753d700be0d270e5837cae/68747470733a2f2f636f6465636f762e696f2f67682f466c75784d4c2f547261636b65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/FluxML/Tracker.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>

<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">This was the original automatic differentiation engine for <a href="https://github.com/FluxML/Flux.jl">Flux.jl</a>, before being replaced by <a href="https://github.com/FluxML/Zygote.jl">Zygote.jl</a> in 2019. Both were written by Mike Innes.</p>
<p dir="auto">This package is solid and still in active use, but is no longer heavily maintained. PRs and issues may go unanswered.</p>
<h3 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h3>
<p dir="auto">Like <a href="https://github.com/JuliaDiff/ReverseDiff.jl">ReverseDiff.jl</a> and <a href="https://github.com/denizyuret/AutoGrad.jl">AutoGrad.jl</a>, Tracker traces through a program by wrapping arrays in a special <code>TrackedArray</code> type. The final answer contains a "tape" of the operations performed, which is reversed by <code>back!</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = param([1,2,3])  # Tracked 3-element Vector{Float64}

f(x) = sum(abs2, x) + prod(x[2:end])

y = f(x)  # TrackedReal

back!(y)  # run back-propagation

Tracker.grad(x)  # extract gradient from TrackedArray"><pre>x <span class="pl-k">=</span> <span class="pl-c1">param</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> Tracked 3-element Vector{Float64}</span>

<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(abs2, x) <span class="pl-k">+</span> <span class="pl-c1">prod</span>(x[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>])

y <span class="pl-k">=</span> <span class="pl-c1">f</span>(x)  <span class="pl-c"><span class="pl-c">#</span> TrackedReal</span>

<span class="pl-c1">back!</span>(y)  <span class="pl-c"><span class="pl-c">#</span> run back-propagation</span>

Tracker<span class="pl-k">.</span><span class="pl-c1">grad</span>(x)  <span class="pl-c"><span class="pl-c">#</span> extract gradient from TrackedArray</span></pre></div>
<p dir="auto">This is a much lower-tech approach than that of <a href="https://github.com/FluxML/Zygote.jl">Zygote</a>, <a href="https://github.com/dfdx/Yota.jl">Yota</a> and <a href="https://github.com/JuliaDiff/Diffractor.jl">Diffractor</a>. At best, those can produce fast, compiled Julia code for the reverse pass, instead of an interpreted tape. At worst, they can have extremely long compile-times and can be difficult to debug.</p>
<h3 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h3>
<p dir="auto">Instead of calling <code>back!</code> yourself, you can pass the function and the input to <code>gradient</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="gradient(f, [1,2,3])  # returns ([2.0, 7.0, 8.0],)

withgradient(f, [1,2,3])  # returns (val = 20, grad = ([2.0, 7.0, 8.0],))"><pre><span class="pl-c1">gradient</span>(f, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> returns ([2.0, 7.0, 8.0],)</span>

<span class="pl-c1">withgradient</span>(f, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> returns (val = 20, grad = ([2.0, 7.0, 8.0],))</span></pre></div>
<p dir="auto">The original interface to <a href="https://github.com/FluxML/Flux.jl">Flux.jl</a> involved a dictionary of arrays called <code>Params</code>, much like Zygote's "implicit" parameter interface. This appears not to be documented.</p>
<p dir="auto">A more modern way to use Flux relies on <code>withgradient</code>'s ability to take gradients with respect to complex nested structures. This is what <a href="https://github.com/FluxML/Optimisers.jl">Optimisers.jl</a> is designed to accept:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Flux, Tracker

julia&gt; model = Chain(Dense(2 =&gt; 1, tanh), Dense(1 =&gt; 1, bias=false));

julia&gt; withgradient(model, rand(Float32, 2)) do m, x
         sum(abs2, m(x))
       end
(val = 0.035716165f0, 
 grad = ((layers = ((weight = Float32[-0.4241869 -0.16741231], bias = Float32[-0.5529184], σ = nothing), 
                    (weight = Float32[-0.04804218;;], bias = nothing, σ = nothing)),), 
         Float32[0.12706584, -0.08858479]))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Flux, Tracker

julia<span class="pl-k">&gt;</span> model <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, tanh), <span class="pl-c1">Dense</span>(<span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, bias<span class="pl-k">=</span><span class="pl-c1">false</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">withgradient</span>(model, <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">2</span>)) <span class="pl-k">do</span> m, x
         <span class="pl-c1">sum</span>(abs2, <span class="pl-c1">m</span>(x))
       <span class="pl-k">end</span>
(val <span class="pl-k">=</span> <span class="pl-c1">0.035716165f0</span>, 
 grad <span class="pl-k">=</span> ((layers <span class="pl-k">=</span> ((weight <span class="pl-k">=</span> Float32[<span class="pl-k">-</span><span class="pl-c1">0.4241869</span> <span class="pl-k">-</span><span class="pl-c1">0.16741231</span>], bias <span class="pl-k">=</span> Float32[<span class="pl-k">-</span><span class="pl-c1">0.5529184</span>], σ <span class="pl-k">=</span> <span class="pl-c1">nothing</span>), 
                    (weight <span class="pl-k">=</span> Float32[<span class="pl-k">-</span><span class="pl-c1">0.04804218</span>;;], bias <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, σ <span class="pl-k">=</span> <span class="pl-c1">nothing</span>)),), 
         Float32[<span class="pl-c1">0.12706584</span>, <span class="pl-k">-</span><span class="pl-c1">0.08858479</span>]))</pre></div>
<h3 dir="auto"><a id="user-content-rules" class="anchor" aria-hidden="true" href="#rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rules</h3>
<p dir="auto">Tracker.jl contains rules for many common operations. It relies on <a href="https://github.com/JuliaDiff/DiffRules.jl">DiffRules.jl</a> for many definitions, and does not connect to the newer <a href="https://github.com/JuliaDiff/ChainRules.jl">ChainRules.jl</a> at all.</p>
<p dir="auto">To define more rules, use <code>track</code> and <code>@grad</code>. See the source for more examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x::TrackedArray) = track(f, x)    # entry point, via dispatch

@grad function f(x)
  y = f(data(x))                    # forward pass, withtout tracking
  back(dy) = (dy * ∂f∂x(data(x)),)  # pullback function, returns a tuple
  return y, back
end"><pre><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">TrackedArray</span>) <span class="pl-k">=</span> <span class="pl-c1">track</span>(f, x)    <span class="pl-c"><span class="pl-c">#</span> entry point, via dispatch</span>

<span class="pl-c1">@grad</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
  y <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">data</span>(x))                    <span class="pl-c"><span class="pl-c">#</span> forward pass, withtout tracking</span>
  <span class="pl-en">back</span>(dy) <span class="pl-k">=</span> (dy <span class="pl-k">*</span> <span class="pl-c1">∂f∂x</span>(<span class="pl-c1">data</span>(x)),)  <span class="pl-c"><span class="pl-c">#</span> pullback function, returns a tuple</span>
  <span class="pl-k">return</span> y, back
<span class="pl-k">end</span></pre></div>
</article></div>