<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spherical-functions-in-julia" class="anchor" aria-hidden="true" href="#spherical-functions-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Spherical Functions in Julia</h1>
<p dir="auto"><a href="https://moble.github.io/SphericalFunctions.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://moble.github.io/SphericalFunctions.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/moble/SphericalFunctions.jl/actions/workflows/tests.yml?query=branch%3Amain"><img src="https://github.com/moble/SphericalFunctions.jl/actions/workflows/tests.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/moble/SphericalFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6487665c3eadbf5adbf695861450e3f33e2e2db496ff9a2bbb4f610dc20ed8e7/68747470733a2f2f636f6465636f762e696f2f67682f6d6f626c652f53706865726963616c46756e6374696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/moble/SphericalFunctions.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg" alt="Aqua QA" style="max-width: 100%;"></a>
<a href="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/a9843d8a558b16344a0c024864c2971353e72a87a8840eedd3ff42c70b1f95da/68747470733a2f2f4a756c696143492e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f532f53706865726963616c46756e6374696f6e732e737667" alt="PkgEval" data-canonical-src="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/S/SphericalFunctions.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/381490836" rel="nofollow"><img src="https://camo.githubusercontent.com/5703f25ed0e7559b2e59830087903d54f865980f3440d48ad8f2864c102004fe/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3338313439303833362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/381490836.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia package for evaluating and transforming Wigner's 𝔇 matrices, and spin-weighted spherical
harmonics (which includes the ordinary scalar spherical harmonics).  Because <a href="https://arxiv.org/abs/1604.08140" rel="nofollow"><em>both</em> 𝔇 <em>and</em> the
harmonics are most correctly considered</a> functions on the rotation
group <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="6a2b231d3484f5f72cf7a9ce40040ceb">$𝐒𝐎(3)$</math-renderer> — or more precisely, the spin group <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="6a2b231d3484f5f72cf7a9ce40040ceb">$𝐒𝐩𝐢𝐧(3)$</math-renderer> that covers it — these functions are
evaluated directly in terms of quaternions.  Concessions are also made for more standard forms of
spherical coordinates and Euler angles.<sup><a href="#1-euler-angles-are-inadequate">1</a></sup> Among other
applications, those functions permit "synthesis" (evaluation of the spin-weighted spherical
functions) of spin-weighted spherical harmonic coefficients on regular or distorted grids.  This
package also includes functions enabling efficient "analysis" (decomposition into mode coefficients)
of functions evaluated on regular grids to high order and accuracy.</p>
<p dir="auto">These quantities are computed using recursion relations, which makes it possible to compute to fairly
high ℓ values.  Unlike direct evaluation of individual elements, which will generally cause overflow
or underflow beyond ℓ≈30 when using double precision, these recursion relations should be valid for
far higher ℓ values.  More precisely, when using <em>this</em> package, <code>Inf</code> values appear starting at
ℓ=22 for <code>Float16</code>, ℓ=183 for <code>Float32</code>, and ℓ=1474 for <code>Float64</code>.  <code>BigFloat</code> also works, and
presumably will not overflow for any ℓ value that could reasonably fit into computer memory — though
it is far slower.  Also note that <a href="https://github.com/JuliaMath/DoubleFloats.jl"><code>DoubleFloats</code></a>
will work, and achieve significantly greater accuracy but no greater ℓ range than <code>Float64</code>.  The
results are accurate to roughly ℓ times the precision of the input quaternion.</p>
<p dir="auto">The conventions for this package inherited from — and are described in detail on — its predecessors
found <a href="https://moble.github.io/spherical_functions/" rel="nofollow">here</a> and
<a href="https://moble.github.io/spherical/" rel="nofollow">here</a>.</p>
<p dir="auto">Note that the goals of this package do not include some important use cases, including some that are
common in fields such as CMB astronomy or lensing.  Numerous other packages may be better suited to
those use cases, including
<a href="https://JuliaApproximation.github.io/FastTransforms.jl/" rel="nofollow"><code>FastTransforms.jl</code></a>,
<a href="https://eschnett.github.io/FastSphericalHarmonics.jl/dev/" rel="nofollow"><code>FastSphericalHarmonics.jl</code></a>,
<a href="https://github.com/Jutho/WignerSymbols.jl"><code>WignerSymbols.jl</code></a>, and
<a href="https://github.com/xzackli/WignerFamilies.jl"><code>WignerFamilies.jl</code></a>.  However, I need support only for
relatively moderate values of ℓ, for quaternions (via
<a href="https://github.com/moble/Quaternionic.jl"><code>Quaternionic.jl</code></a>) and for higher-precision numbers — even
at the cost of a very slight decrease in speed in some cases — which are what this package provides.</p>
<h2 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;SphericalFunctions&quot;)"><pre>using Pkg
Pkg.add(<span class="pl-s"><span class="pl-pds">"</span>SphericalFunctions<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto">
<a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">The most important routine in this package is the computation of the 𝔇 matrices — or more
specifically, of terms proportional to parts of the 𝔇 matrices.  This mostly follows the treatment
of <a href="https://arxiv.org/abs/1403.7698" rel="nofollow">Gumerov and Duraiswami (2014)</a>.  To seed the recursions they
present, we also need to calculate the associated Legendre functions.  Currently, this is done using
the "modified forward row method" of <a href="https://doi.org/10.1007/s00190-002-0216-2" rel="nofollow">Holmes and Featherstone
(2002)</a>.  Note that this is apparently the source of
overflow noted above.  Two other (though more complicated) methods have appeared more recently in
the literature, which could presumably extend these limits much further.  <a href="https://doi.org/10.1007/s00190-011-0519-2" rel="nofollow">Fukushima
(2012)</a> showed that using "X-numbers" (wherein the
exponent is stored as a separate integer) in the core of the recursion could increase the range to
ℓ≈2³².  <a href="https://doi.org/10.1007/s00190-019-01331-0" rel="nofollow">Xing et al. (2020)</a> showed that Fukushima's
results exhibited increased error for certain angles, whereas their Eqs. (12)—(14) could be used
directly to obtain results with greater accuracy for those certain angles, and comparable accuracy
for other angles.</p>
<p dir="auto">It may be worthwhile simply passing <a href="https://github.com/moble/XNumbers.jl">X-numbers</a> to these
algorithms if higher orders are needed.  (Though using <code>BigFloat</code> <em>may</em> achieve a similar objective,
it would probably be far slower.)  The actual recommendation of Fukushima is more sophisticated —
just using X-numbers in the core calculation — but it looks like the simpler approach wouldn't be
<em>too</em> much slower.</p>
<p dir="auto">The other major functionality of this package is <code>map2salm</code>, which decomposes function values on
regular grids into mode weights (coefficients).  The approach used here is taken from <a href="https://dx.doi.org/10.1051/0004-6361/201321494" rel="nofollow">Reinecke and
Seljebotn</a>, with weights based on <a href="https://doi.org/10.1007/s10543-006-0045-4" rel="nofollow">Waldvogel's
method</a>.</p>
<br>
<hr>
<h6 dir="auto">
<a id="user-content-1-euler-angles-are-inadequate" class="anchor" aria-hidden="true" href="#1-euler-angles-are-inadequate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><sup>1</sup> Euler angles are inadequate</h6>
<p dir="auto">Euler angles are quite generally a very poor choice for computing with rotations.  (The only context
in which they may be preferred is when <em>analytically</em> integrating some analytically known
functions.)  Almost universally, it is best to use quaternions when computing with rotations.  All
the computations done within this package use quaternions; the user interfaces involving Euler
angles essentially convert to/from quaternions.  While the calculations needed for those conversions
would still need to be done if this package used Euler angles internally — meaning that this
approach is as efficient as any — that work can be avoided entirely if you work with quaternions
directly.</p>
</article></div>