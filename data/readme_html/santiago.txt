<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-santiagojl" class="anchor" aria-hidden="true" href="#santiagojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Santiago.jl</h1>
<p><a href="https://juliahub.com/ui/Packages/Santiago/JPJQH" rel="nofollow"><img src="https://camo.githubusercontent.com/b664d709249c657c92faabdf47ecd32d99ee5bd18efc99816c02d0e192520593/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53616e746961676f2f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Santiago/version.svg" style="max-width:100%;"></a>
<a href="https://github.com/santiago-sanitation-systems/Santiago.jl/actions"><img src="https://github.com/santiago-sanitation-systems/Santiago.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/santiago-sanitation-systems/Santiago.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5b6989eea55644cfd7a3cabd46ba3c714cdb534ec8d8e5ed22a36771eee0e1b/68747470733a2f2f636f6465636f762e696f2f67682f73616e746961676f2d73616e69746174696f6e2d73797374656d732f53616e746961676f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d47574256354d345a3133" alt="codecov" data-canonical-src="https://codecov.io/gh/santiago-sanitation-systems/Santiago.jl/branch/master/graph/badge.svg?token=GWBV5M4Z13" style="max-width:100%;"></a></p>
<p><code>Santiago</code> (SANitation sysTem Alternative GeneratOr) is a Julia package to generate appropriate sanitation system options. It is able to</p>
<ul>
<li>find all possible systems given a set of sanitation technologies;</li>
<li>assess the appropriateness of a technology in a given case (context);</li>
<li>assess the overall appropriateness of a sanitation system in a given context;</li>
<li>calculate (optionally with uncertainly quantification) the massflows for each system for
total <code>phosphor</code>, total <code>nitrogen</code>, <code>totalsolids</code>, and <code>water</code>;</li>
<li>select a meaningful subset of systems for the given case.</li>
</ul>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<ol>
<li>
<p>Install <a href="https://julialang.org/" rel="nofollow">Julia</a> version &gt;= 1.4.</p>
</li>
<li>
<p>Install the <code>Santiago</code> package from the Julia prompt:</p>
</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add Santiago
"><pre>] add Santiago</pre></div>
<ol start="3">
<li>To edit Julia files you may also want to install <a href="https://code.visualstudio.com/" rel="nofollow">Visual Studio
Code</a> and its <a href="https://www.julia-vscode.org/docs/stable/" rel="nofollow">Julia
Extension</a>. Alternatively, see the <a href="https://julialang.org/" rel="nofollow">Julia
home page</a> for support for other editors.</li>
</ol>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>The example below demonstrates the typical steps needed to identify
sanitation systems appropriate for a given case. See the references below for a
clarification of the terminology and the recommended embedding in the
strategic planning process.</p>
<p>Most functions have a documentation string attached that can be accessed with
<code>?functionname</code> on the Julia prompt.</p>
<p>For reproducibility it is a good idea to create a separate <em>Julia project</em>
(similar like <code>virtualenv</code> in Python) for
every analysis, see <a href="https://julialang.github.io/Pkg.jl/v1/environments/" rel="nofollow">here</a>.</p>
<h2><a id="user-content-minimal-example" class="anchor" aria-hidden="true" href="#minimal-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Minimal Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Santiago

# -----------
# 1) Import technologies

# we use the test data that come with the package
input_tech_file = joinpath(pkgdir(Santiago), &quot;test/example_techs.json&quot;)
input_case_file = joinpath(pkgdir(Santiago), &quot;test/example_case.json&quot;)

sources, additional_sources, techs = import_technologies(input_tech_file, input_case_file)

# -----------
# 2) Build all systems

allSys = build_systems(sources, techs);

# number of found systems
length(allSys)

# -----------
# 3) Calculate system properties

tas, tas_components = appropriateness(tech_file, case_file)

sysappscore!.(allSys)
ntechs!.(allSys)
nconnections!.(allSys)
connectivity!.(allSys)
template!.(allSys)

# see all properties of the first system
allSys[1].properties

# -----------
# 4) Mass flows

# Inputs for different sources in kg/year/person equivalent.
# See references below.
input_masses = Dict(&quot;Dry.toilet&quot; =&gt; Dict(&quot;phosphor&quot; =&gt; 0.548,
                                         &quot;nitrogen&quot; =&gt; 4.550,
                                         &quot;totalsolids&quot; =&gt; 32.12,
                                         &quot;water&quot; =&gt; 547.1),
                    &quot;Pour.flush&quot; =&gt; Dict(&quot;phosphor&quot; =&gt; 0.548,
                                         &quot;nitrogen&quot; =&gt; 4.55,
                                         &quot;totalsolids&quot; =&gt; 32.12,
                                         &quot;water&quot; =&gt; 1277.1),
                    &quot;Cistern.flush&quot; =&gt; Dict(&quot;phosphor&quot; =&gt; 0.548,
                                            &quot;nitrogen&quot; =&gt; 4.55,
                                            &quot;totalsolids&quot; =&gt; 32.12,
                                            &quot;water&quot; =&gt; 22447.1),
                    # Urine diversion dry toilet
                    &quot;Uddt&quot; =&gt; Dict(&quot;phosphor&quot; =&gt; 0.548,
                                   &quot;nitrogen&quot; =&gt; 4.55,
                                   &quot;totalsolids&quot; =&gt; 32.12,
                                   &quot;water&quot; =&gt; 547.1)
                    )


# Calculate massflows with 20 Mont Carlo iterations (probably not enough)
# for all systems and save to system properties
massflow_summary_parallel!(allSys, input_masses, n=20);

# Alternatively, the non-parallelized version can be used:
# massflow_summary!.(allSys, Ref(input_masses), n=20);

# If the flows of every technology is of interest, set 'techflows=true'.
# The default is 'false' as this produces as very large amount of additional data!
massflow_summary_parallel!(allSys, input_masses, n=20, techflows=true);

# Examples how to extract results
allSys[2].properties[&quot;massflow_stats&quot;][&quot;entered&quot;]
allSys[2].properties[&quot;massflow_stats&quot;][&quot;recovery_ratio&quot;]
allSys[2].properties[&quot;massflow_stats&quot;][&quot;recovered&quot;]

allSys[2].properties[&quot;massflow_stats&quot;][&quot;lost&quot;][:,&quot;air loss&quot;,:]
allSys[2].properties[&quot;massflow_stats&quot;][&quot;lost&quot;][:,:,&quot;mean&quot;]
allSys[2].properties[&quot;massflow_stats&quot;][&quot;lost&quot;][:,:,&quot;q_0.5&quot;]

# -----------
# 5) select a subset of systems

# For example, select eight systems for further investigation
selectedSys = select_systems(allSys, 8)

# We can also include or exclude technologies
select_systems(allSys, 8, techs_exclude=[&quot;Pour.flush&quot;, &quot;wsp_3_trans&quot;])
select_systems(allSys, 8, techs_include=[&quot;Pour.flush&quot;])

# Similar for templates
select_systems(allSys, 8, templates_exclude=[&quot;ST.3&quot;, &quot;ST.15&quot;])
select_systems(allSys, 8, templates_include=[&quot;ST.17&quot;])

# By default the systems are selected by the `&quot;sysappscore&quot;` but other
# properties can be used too. For example, here we prefer short systems:
select_systems(allSys, 8, target=&quot;ntechs&quot;, maximize=false)

# Or systems with a high phosphor recovery (run massflow calculation first):
select_systems(allSys, 8, target=&quot;phosphor&quot; =&gt; &quot;recovery_ratio&quot;)

# By default the returned systems are diverse while having a good
# target score. You can ignore the diversity requirement to get the
# systems with the best target scores by setting
# the `selection_type` to &quot;ranking&quot;.
select_systems(allSys, 10, selection_type=&quot;ranking&quot;)

# This helper function returns the systems with matching IDs:
pick_systems(allSys, [&quot;003s-QbnU-FvGB&quot;, &quot;0JLD-YQbJ-SGAu&quot;])

# Investigate how techs and templates are used
templates_per_tech(allSys)
techs_per_template(allSys)

# -----------
# 6) write some properties in a DataFrame for further analysis

df = properties_dataframe(selectedSys,
                          massflow_selection = [&quot;recovered | water | mean&quot;,
                                                &quot;recovered | water | sd&quot;,
                                                &quot;lost | water | air loss| q_0.5&quot;,
                                                &quot;entered | water&quot;])

size(df)
names(df)

# or you could simply export all properties (&gt; 400!)
df = properties_dataframe(allSys, massflow_selection = &quot;all&quot;)

# export as csv
import CSV  # the package 'CSV' needs to be installed separately
CSV.write(&quot;mysystems.csv&quot;, df)


# -----------
# 7) create a visualization of a system as pdf

# First write a dot file
dot_file(selectedSys[1], &quot;system.dot&quot;)

# Then, convert it to pdf (The program `graphviz` must be installed on the system)
run(`dot -Tpdf system.dot -o system.pdf`)


# -----------
# 8) export to JSON

# Note, the JSON export is designed to interface other applications,
# but not for serialization.

open(&quot;system_export.json&quot;, &quot;w&quot;) do f
    JSON3.write(f, selectedSys)
end
"><pre><span class="pl-k">using</span> Santiago

<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 1) Import technologies</span>

<span class="pl-c"><span class="pl-c">#</span> we use the test data that come with the package</span>
input_tech_file <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(Santiago), <span class="pl-s"><span class="pl-pds">"</span>test/example_techs.json<span class="pl-pds">"</span></span>)
input_case_file <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">pkgdir</span>(Santiago), <span class="pl-s"><span class="pl-pds">"</span>test/example_case.json<span class="pl-pds">"</span></span>)

sources, additional_sources, techs <span class="pl-k">=</span> <span class="pl-c1">import_technologies</span>(input_tech_file, input_case_file)

<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 2) Build all systems</span>

allSys <span class="pl-k">=</span> <span class="pl-c1">build_systems</span>(sources, techs);

<span class="pl-c"><span class="pl-c">#</span> number of found systems</span>
<span class="pl-c1">length</span>(allSys)

<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 3) Calculate system properties</span>

tas, tas_components <span class="pl-k">=</span> <span class="pl-c1">appropriateness</span>(tech_file, case_file)

<span class="pl-c1">sysappscore!</span>.(allSys)
<span class="pl-c1">ntechs!</span>.(allSys)
<span class="pl-c1">nconnections!</span>.(allSys)
<span class="pl-c1">connectivity!</span>.(allSys)
<span class="pl-c1">template!</span>.(allSys)

<span class="pl-c"><span class="pl-c">#</span> see all properties of the first system</span>
allSys[<span class="pl-c1">1</span>]<span class="pl-k">.</span>properties

<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 4) Mass flows</span>

<span class="pl-c"><span class="pl-c">#</span> Inputs for different sources in kg/year/person equivalent.</span>
<span class="pl-c"><span class="pl-c">#</span> See references below.</span>
input_masses <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>Dry.toilet<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>phosphor<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.548</span>,
                                         <span class="pl-s"><span class="pl-pds">"</span>nitrogen<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.550</span>,
                                         <span class="pl-s"><span class="pl-pds">"</span>totalsolids<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32.12</span>,
                                         <span class="pl-s"><span class="pl-pds">"</span>water<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">547.1</span>),
                    <span class="pl-s"><span class="pl-pds">"</span>Pour.flush<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>phosphor<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.548</span>,
                                         <span class="pl-s"><span class="pl-pds">"</span>nitrogen<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.55</span>,
                                         <span class="pl-s"><span class="pl-pds">"</span>totalsolids<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32.12</span>,
                                         <span class="pl-s"><span class="pl-pds">"</span>water<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1277.1</span>),
                    <span class="pl-s"><span class="pl-pds">"</span>Cistern.flush<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>phosphor<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.548</span>,
                                            <span class="pl-s"><span class="pl-pds">"</span>nitrogen<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.55</span>,
                                            <span class="pl-s"><span class="pl-pds">"</span>totalsolids<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32.12</span>,
                                            <span class="pl-s"><span class="pl-pds">"</span>water<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">22447.1</span>),
                    <span class="pl-c"><span class="pl-c">#</span> Urine diversion dry toilet</span>
                    <span class="pl-s"><span class="pl-pds">"</span>Uddt<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>phosphor<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.548</span>,
                                   <span class="pl-s"><span class="pl-pds">"</span>nitrogen<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4.55</span>,
                                   <span class="pl-s"><span class="pl-pds">"</span>totalsolids<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">32.12</span>,
                                   <span class="pl-s"><span class="pl-pds">"</span>water<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">547.1</span>)
                    )


<span class="pl-c"><span class="pl-c">#</span> Calculate massflows with 20 Mont Carlo iterations (probably not enough)</span>
<span class="pl-c"><span class="pl-c">#</span> for all systems and save to system properties</span>
<span class="pl-c1">massflow_summary_parallel!</span>(allSys, input_masses, n<span class="pl-k">=</span><span class="pl-c1">20</span>);

<span class="pl-c"><span class="pl-c">#</span> Alternatively, the non-parallelized version can be used:</span>
<span class="pl-c"><span class="pl-c">#</span> massflow_summary!.(allSys, Ref(input_masses), n=20);</span>

<span class="pl-c"><span class="pl-c">#</span> If the flows of every technology is of interest, set 'techflows=true'.</span>
<span class="pl-c"><span class="pl-c">#</span> The default is 'false' as this produces as very large amount of additional data!</span>
<span class="pl-c1">massflow_summary_parallel!</span>(allSys, input_masses, n<span class="pl-k">=</span><span class="pl-c1">20</span>, techflows<span class="pl-k">=</span><span class="pl-c1">true</span>);

<span class="pl-c"><span class="pl-c">#</span> Examples how to extract results</span>
allSys[<span class="pl-c1">2</span>]<span class="pl-k">.</span>properties[<span class="pl-s"><span class="pl-pds">"</span>massflow_stats<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>entered<span class="pl-pds">"</span></span>]
allSys[<span class="pl-c1">2</span>]<span class="pl-k">.</span>properties[<span class="pl-s"><span class="pl-pds">"</span>massflow_stats<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>recovery_ratio<span class="pl-pds">"</span></span>]
allSys[<span class="pl-c1">2</span>]<span class="pl-k">.</span>properties[<span class="pl-s"><span class="pl-pds">"</span>massflow_stats<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>recovered<span class="pl-pds">"</span></span>]

allSys[<span class="pl-c1">2</span>]<span class="pl-k">.</span>properties[<span class="pl-s"><span class="pl-pds">"</span>massflow_stats<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>lost<span class="pl-pds">"</span></span>][:,<span class="pl-s"><span class="pl-pds">"</span>air loss<span class="pl-pds">"</span></span>,:]
allSys[<span class="pl-c1">2</span>]<span class="pl-k">.</span>properties[<span class="pl-s"><span class="pl-pds">"</span>massflow_stats<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>lost<span class="pl-pds">"</span></span>][:,:,<span class="pl-s"><span class="pl-pds">"</span>mean<span class="pl-pds">"</span></span>]
allSys[<span class="pl-c1">2</span>]<span class="pl-k">.</span>properties[<span class="pl-s"><span class="pl-pds">"</span>massflow_stats<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>lost<span class="pl-pds">"</span></span>][:,:,<span class="pl-s"><span class="pl-pds">"</span>q_0.5<span class="pl-pds">"</span></span>]

<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 5) select a subset of systems</span>

<span class="pl-c"><span class="pl-c">#</span> For example, select eight systems for further investigation</span>
selectedSys <span class="pl-k">=</span> <span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>)

<span class="pl-c"><span class="pl-c">#</span> We can also include or exclude technologies</span>
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>, techs_exclude<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Pour.flush<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>wsp_3_trans<span class="pl-pds">"</span></span>])
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>, techs_include<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Pour.flush<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> Similar for templates</span>
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>, templates_exclude<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>ST.3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ST.15<span class="pl-pds">"</span></span>])
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>, templates_include<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>ST.17<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> By default the systems are selected by the `"sysappscore"` but other</span>
<span class="pl-c"><span class="pl-c">#</span> properties can be used too. For example, here we prefer short systems:</span>
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>, target<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ntechs<span class="pl-pds">"</span></span>, maximize<span class="pl-k">=</span><span class="pl-c1">false</span>)

<span class="pl-c"><span class="pl-c">#</span> Or systems with a high phosphor recovery (run massflow calculation first):</span>
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">8</span>, target<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>phosphor<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>recovery_ratio<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> By default the returned systems are diverse while having a good</span>
<span class="pl-c"><span class="pl-c">#</span> target score. You can ignore the diversity requirement to get the</span>
<span class="pl-c"><span class="pl-c">#</span> systems with the best target scores by setting</span>
<span class="pl-c"><span class="pl-c">#</span> the `selection_type` to "ranking".</span>
<span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">10</span>, selection_type<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ranking<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> This helper function returns the systems with matching IDs:</span>
<span class="pl-c1">pick_systems</span>(allSys, [<span class="pl-s"><span class="pl-pds">"</span>003s-QbnU-FvGB<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>0JLD-YQbJ-SGAu<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> Investigate how techs and templates are used</span>
<span class="pl-c1">templates_per_tech</span>(allSys)
<span class="pl-c1">techs_per_template</span>(allSys)

<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 6) write some properties in a DataFrame for further analysis</span>

df <span class="pl-k">=</span> <span class="pl-c1">properties_dataframe</span>(selectedSys,
                          massflow_selection <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>recovered | water | mean<span class="pl-pds">"</span></span>,
                                                <span class="pl-s"><span class="pl-pds">"</span>recovered | water | sd<span class="pl-pds">"</span></span>,
                                                <span class="pl-s"><span class="pl-pds">"</span>lost | water | air loss| q_0.5<span class="pl-pds">"</span></span>,
                                                <span class="pl-s"><span class="pl-pds">"</span>entered | water<span class="pl-pds">"</span></span>])

<span class="pl-c1">size</span>(df)
<span class="pl-c1">names</span>(df)

<span class="pl-c"><span class="pl-c">#</span> or you could simply export all properties (&gt; 400!)</span>
df <span class="pl-k">=</span> <span class="pl-c1">properties_dataframe</span>(allSys, massflow_selection <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>all<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> export as csv</span>
<span class="pl-k">import</span> CSV  <span class="pl-c"><span class="pl-c">#</span> the package 'CSV' needs to be installed separately</span>
CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>mysystems.csv<span class="pl-pds">"</span></span>, df)


<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 7) create a visualization of a system as pdf</span>

<span class="pl-c"><span class="pl-c">#</span> First write a dot file</span>
<span class="pl-c1">dot_file</span>(selectedSys[<span class="pl-c1">1</span>], <span class="pl-s"><span class="pl-pds">"</span>system.dot<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Then, convert it to pdf (The program `graphviz` must be installed on the system)</span>
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>dot -Tpdf system.dot -o system.pdf<span class="pl-pds">`</span></span>)


<span class="pl-c"><span class="pl-c">#</span> -----------</span>
<span class="pl-c"><span class="pl-c">#</span> 8) export to JSON</span>

<span class="pl-c"><span class="pl-c">#</span> Note, the JSON export is designed to interface other applications,</span>
<span class="pl-c"><span class="pl-c">#</span> but not for serialization.</span>

<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>system_export.json<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    JSON3<span class="pl-k">.</span><span class="pl-c1">write</span>(f, selectedSys)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-input-format" class="anchor" aria-hidden="true" href="#input-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Input format</h2>
<p>Typically the information on the case specification and the available
technologies are provided via files. <code>Santiago</code> can only import JSON
files. The structure must match these examples:</p>
<ul>
<li>Technologies: <a href="test/example_techs.json"><code>example_techs.json</code></a></li>
<li>Case: <a href="test/example_case.json"><code>example_case.json</code></a></li>
</ul>
<p>Many tools are available to browse and edit JSON files. For example,
Firefox renders JSON files nicely, or Visual Studio allows for editing.</p>
<h2><a id="user-content-logging" class="anchor" aria-hidden="true" href="#logging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Logging</h2>
<p>By default, <code>Santiago</code> prints only few information. This can be
adapted by the logging level. With the package <code>LoggingExtras.jl</code> (needs to
be installed extra)
different logging levels can be used for the console output and the log file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Logging
using LoggingExtras

# - on console show only infos and errors, write everything in the logfile 'mylogfile.log'
mylogger = TeeLogger(
    MinLevelLogger(FileLogger(&quot;mylogfile.log&quot;), Logging.Debug),  # logs to file
    MinLevelLogger(ConsoleLogger(), Logging.Info)                # logs to console
)
global_logger(mylogger)

... use Santiago functions ...
"><pre><span class="pl-k">using</span> Logging
<span class="pl-k">using</span> LoggingExtras

<span class="pl-c"><span class="pl-c">#</span> - on console show only infos and errors, write everything in the logfile 'mylogfile.log'</span>
mylogger <span class="pl-k">=</span> <span class="pl-c1">TeeLogger</span>(
    <span class="pl-c1">MinLevelLogger</span>(<span class="pl-c1">FileLogger</span>(<span class="pl-s"><span class="pl-pds">"</span>mylogfile.log<span class="pl-pds">"</span></span>), Logging<span class="pl-k">.</span>Debug),  <span class="pl-c"><span class="pl-c">#</span> logs to file</span>
    <span class="pl-c1">MinLevelLogger</span>(<span class="pl-c1">ConsoleLogger</span>(), Logging<span class="pl-k">.</span>Info)                <span class="pl-c"><span class="pl-c">#</span> logs to console</span>
)
<span class="pl-c1">global_logger</span>(mylogger)

<span class="pl-k">...</span> use Santiago functions <span class="pl-k">...</span></pre></div>
<h2><a id="user-content-update-systems-for-a-new-case-profile" class="anchor" aria-hidden="true" href="#update-systems-for-a-new-case-profile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Update systems for a new case profile</h2>
<p>The generation of all systems is computationally intense. The code
below demonstrates how to first generate all systems without case
information and later update the system scores with case data.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Serialization

## 1) build systems without case information and cache result

sources, additional_sources, techs = import_technologies(tech_file)

if isfile(&quot;mycachfile.jls&quot;)
    allSys = deserialize(&quot;mycachfile.jls&quot;)
else
    allSys = build_systems(sources, techs)
    ...
    massflow_summary!.(allSys, Ref(input_masses), n=100);
    ...
    serialize(&quot;mycachfile.jls&quot;, allSys)
end

sysappscore!.(allSys) # all are '-1.0' because no case profile was defined yet

## 2) read case file and update sysappscore

tas, tas_components = appropriateness(tech_file, case_file);
update_appropriateness!(sources, tas)
update_appropriateness!(additional_sources, tas)
update_appropriateness!(techs, tas)

sysappscore!.(allSys)  # now we have the updated SAS

## 3) select systems

fewSys = select_systems(allSys, 6)

## 4) scale massflows for 100 people

fewSys = scale_massflows.(fewSys, 100)

"><pre><span class="pl-k">using</span> Serialization

<span class="pl-c"><span class="pl-c">#</span># 1) build systems without case information and cache result</span>

sources, additional_sources, techs <span class="pl-k">=</span> <span class="pl-c1">import_technologies</span>(tech_file)

<span class="pl-k">if</span> <span class="pl-c1">isfile</span>(<span class="pl-s"><span class="pl-pds">"</span>mycachfile.jls<span class="pl-pds">"</span></span>)
    allSys <span class="pl-k">=</span> <span class="pl-c1">deserialize</span>(<span class="pl-s"><span class="pl-pds">"</span>mycachfile.jls<span class="pl-pds">"</span></span>)
<span class="pl-k">else</span>
    allSys <span class="pl-k">=</span> <span class="pl-c1">build_systems</span>(sources, techs)
    <span class="pl-k">...</span>
    <span class="pl-c1">massflow_summary!</span>.(allSys, <span class="pl-c1">Ref</span>(input_masses), n<span class="pl-k">=</span><span class="pl-c1">100</span>);
    <span class="pl-k">...</span>
    <span class="pl-c1">serialize</span>(<span class="pl-s"><span class="pl-pds">"</span>mycachfile.jls<span class="pl-pds">"</span></span>, allSys)
<span class="pl-k">end</span>

<span class="pl-c1">sysappscore!</span>.(allSys) <span class="pl-c"><span class="pl-c">#</span> all are '-1.0' because no case profile was defined yet</span>

<span class="pl-c"><span class="pl-c">#</span># 2) read case file and update sysappscore</span>

tas, tas_components <span class="pl-k">=</span> <span class="pl-c1">appropriateness</span>(tech_file, case_file);
<span class="pl-c1">update_appropriateness!</span>(sources, tas)
<span class="pl-c1">update_appropriateness!</span>(additional_sources, tas)
<span class="pl-c1">update_appropriateness!</span>(techs, tas)

<span class="pl-c1">sysappscore!</span>.(allSys)  <span class="pl-c"><span class="pl-c">#</span> now we have the updated SAS</span>

<span class="pl-c"><span class="pl-c">#</span># 3) select systems</span>

fewSys <span class="pl-k">=</span> <span class="pl-c1">select_systems</span>(allSys, <span class="pl-c1">6</span>)

<span class="pl-c"><span class="pl-c">#</span># 4) scale massflows for 100 people</span>

fewSys <span class="pl-k">=</span> <span class="pl-c1">scale_massflows</span>.(fewSys, <span class="pl-c1">100</span>)
</pre></div>
<p>The slowest parts are <code>build_systems</code> and
<code>massflow_summary!</code>. Therefore we could cache the output as shown in this
example. Steps 2 and 4 are fast and can be quickly adapted to new cases.</p>
<h2><a id="user-content-multi-threading" class="anchor" aria-hidden="true" href="#multi-threading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multi-threading</h2>
<p>The functions <code>build_systems</code> and especially
<code>massflow_summary_parallel!</code> benefit from multi-threading. As this may
involves some overhead, benchmarking is recommended. See the official
<a href="https://docs.julialang.org/en/v1/manual/parallel-computing/#man-multithreading-1" rel="nofollow">documentation</a>
how to control the number of threads.</p>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<p>Spuhler, D., Scheidegger, A., Maurer, M., 2018. Generation of
sanitation system options for urban planning considering novel
technologies. Water Research 145,
259–278. <a href="https://doi.org/10.1016/j.watres.2018.08.021" rel="nofollow">https://doi.org/10.1016/j.watres.2018.08.021</a></p>
<p>Spuhler, D., Scheidegger, A., Maurer, M., submitted. Ex-ante
quantification of nutrient, total solids, and water flows in
sanitation systems. Journal of Environmental Management.</p>
<p>Spuhler, D., Scheidegger, A., Maurer, M., 2020. Comparative analysis
of sanitation systems for resource recovery: influence of
configurations and single technology components. Water
Research 116281. <a href="https://doi.org/10.1016/j.watres.2020.116281" rel="nofollow">https://doi.org/10.1016/j.watres.2020.116281</a></p>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h1>
<p>The <code>Santiago.jl</code> package is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.</p>
<p>You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <a href="https://www.gnu.org/licenses/" rel="nofollow">https://www.gnu.org/licenses/</a>.</p>
<p>Copyright 2020, Eawag. Contact: Dorothee Spuhler, <a href="mailto:Dorothee.Spuhler@eawag.ch">Dorothee.Spuhler@eawag.ch</a></p>
</article></div>