<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-structwalkjl" class="anchor" aria-hidden="true" href="#structwalkjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StructWalk.jl</h1>
<p dir="auto"><a href="https://chengchingwen.github.io/StructWalk.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://chengchingwen.github.io/StructWalk.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/chengchingwen/StructWalk.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/chengchingwen/StructWalk.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chengchingwen/StructWalk.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed8774c52895d3810f75ff1fe7a12ac8744887e56b692bd160e35200bcde19a7/68747470733a2f2f636f6465636f762e696f2f67682f6368656e676368696e6777656e2f53747275637457616c6b2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/chengchingwen/StructWalk.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Transform functions for Julia struct. Can be viewed as a general version of <code>MacroTools</code>'s <code>prewalk</code>/<code>postwalk</code> or <code>Functors</code>'s <code>@functor</code>/<code>fmap</code>.</p>
<h1 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h1>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; postwalk(x -&gt; @show(x) isa Integer ? x + 1 : x, (a=2, b=(c=4, d=0)))
x = 2
x = 4
x = 0
x = (c = 5, d = 1)
x = (a = 3, b = (c = 5, d = 1))
(a = 3, b = (c = 5, d = 1))

julia&gt; postwalk(x -&gt; @show(x) isa Integer ? x + 1 : x .+ 1, (3, 5))
x = 3
x = 5
x = (4, 6)
(5, 7)

julia&gt; postwalk(x -&gt; @show(x) isa Integer ? x // 2 : x isa Tuple ? =&gt;(x .+ 1...) : x, (3, 5))
x = 3
x = 5
x = (3//2, 5//2)
5//2 =&gt; 7//2

julia&gt; prewalk(x -&gt; @show(x) isa Integer ? x + 1 : x, (a=2, b=(c=4, d=0)))
x = (a = 2, b = (c = 4, d = 0))
x = 2
x = (c = 4, d = 0)
x = 4
x = 0
(a = 3, b = (c = 5, d = 1))

julia&gt; prewalk(x -&gt; @show(x) isa Integer ? x + 1 : x .+ 1, (3, 5))
x = (3, 5)
x = 4
x = 6
(5, 7)

julia&gt; prewalk(x -&gt; @show(x) isa Integer ? StructWalk.LeafNode(x // 2) : x isa Tuple ? =&gt;(x .+ 1...) : x, (3, 5))
x = (3, 5)
x = 4
x = 6
2//1 =&gt; 3//1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">postwalk</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span>(x) <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> x, (a<span class="pl-k">=</span><span class="pl-c1">2</span>, b<span class="pl-k">=</span>(c<span class="pl-k">=</span><span class="pl-c1">4</span>, d<span class="pl-k">=</span><span class="pl-c1">0</span>)))
x <span class="pl-k">=</span> <span class="pl-c1">2</span>
x <span class="pl-k">=</span> <span class="pl-c1">4</span>
x <span class="pl-k">=</span> <span class="pl-c1">0</span>
x <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">5</span>, d <span class="pl-k">=</span> <span class="pl-c1">1</span>)
x <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">5</span>, d <span class="pl-k">=</span> <span class="pl-c1">1</span>))
(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">5</span>, d <span class="pl-k">=</span> <span class="pl-c1">1</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">postwalk</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span>(x) <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> x <span class="pl-k">.+</span> <span class="pl-c1">1</span>, (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>))
x <span class="pl-k">=</span> <span class="pl-c1">3</span>
x <span class="pl-k">=</span> <span class="pl-c1">5</span>
x <span class="pl-k">=</span> (<span class="pl-c1">4</span>, <span class="pl-c1">6</span>)
(<span class="pl-c1">5</span>, <span class="pl-c1">7</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">postwalk</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span>(x) <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> x <span class="pl-k">//</span> <span class="pl-c1">2</span> <span class="pl-k">:</span> x <span class="pl-k">isa</span> Tuple <span class="pl-k">?</span> <span class="pl-k">=&gt;</span>(x <span class="pl-k">.+</span> <span class="pl-c1">1</span><span class="pl-k">...</span>) <span class="pl-k">:</span> x, (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>))
x <span class="pl-k">=</span> <span class="pl-c1">3</span>
x <span class="pl-k">=</span> <span class="pl-c1">5</span>
x <span class="pl-k">=</span> (<span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">2</span>, <span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">2</span>)
<span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">7</span><span class="pl-k">//</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prewalk</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span>(x) <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> x, (a<span class="pl-k">=</span><span class="pl-c1">2</span>, b<span class="pl-k">=</span>(c<span class="pl-k">=</span><span class="pl-c1">4</span>, d<span class="pl-k">=</span><span class="pl-c1">0</span>)))
x <span class="pl-k">=</span> (a <span class="pl-k">=</span> <span class="pl-c1">2</span>, b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">4</span>, d <span class="pl-k">=</span> <span class="pl-c1">0</span>))
x <span class="pl-k">=</span> <span class="pl-c1">2</span>
x <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">4</span>, d <span class="pl-k">=</span> <span class="pl-c1">0</span>)
x <span class="pl-k">=</span> <span class="pl-c1">4</span>
x <span class="pl-k">=</span> <span class="pl-c1">0</span>
(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> (c <span class="pl-k">=</span> <span class="pl-c1">5</span>, d <span class="pl-k">=</span> <span class="pl-c1">1</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prewalk</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span>(x) <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> x <span class="pl-k">.+</span> <span class="pl-c1">1</span>, (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>))
x <span class="pl-k">=</span> (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>)
x <span class="pl-k">=</span> <span class="pl-c1">4</span>
x <span class="pl-k">=</span> <span class="pl-c1">6</span>
(<span class="pl-c1">5</span>, <span class="pl-c1">7</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">prewalk</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span>(x) <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> StructWalk<span class="pl-k">.</span><span class="pl-c1">LeafNode</span>(x <span class="pl-k">//</span> <span class="pl-c1">2</span>) <span class="pl-k">:</span> x <span class="pl-k">isa</span> Tuple <span class="pl-k">?</span> <span class="pl-k">=&gt;</span>(x <span class="pl-k">.+</span> <span class="pl-c1">1</span><span class="pl-k">...</span>) <span class="pl-k">:</span> x, (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>))
x <span class="pl-k">=</span> (<span class="pl-c1">3</span>, <span class="pl-c1">5</span>)
x <span class="pl-k">=</span> <span class="pl-c1">4</span>
x <span class="pl-k">=</span> <span class="pl-c1">6</span>
<span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span><span class="pl-k">//</span><span class="pl-c1">1</span>
</pre></div>
<h2 dir="auto"><a id="user-content-structural-replace" class="anchor" aria-hidden="true" href="#structural-replace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Structural replace</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = (a=3, b=(w=3, b=0))
(a = 3, b = (w = 3, b = 0))

julia&gt; postwalk(x) do x
           if x isa NamedTuple{(:w, :b)}
               return x[1]=&gt;x[2]
           end
           return x
       end
(a = 3, b = 3 =&gt; 0)
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> (a<span class="pl-k">=</span><span class="pl-c1">3</span>, b<span class="pl-k">=</span>(w<span class="pl-k">=</span><span class="pl-c1">3</span>, b<span class="pl-k">=</span><span class="pl-c1">0</span>))
(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> (w <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">0</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">postwalk</span>(x) <span class="pl-k">do</span> x
           <span class="pl-k">if</span> x <span class="pl-k">isa</span> NamedTuple{(<span class="pl-c1">:w</span>, <span class="pl-c1">:b</span>)}
               <span class="pl-k">return</span> x[<span class="pl-c1">1</span>]<span class="pl-k">=&gt;</span>x[<span class="pl-c1">2</span>]
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> x
       <span class="pl-k">end</span>
(a <span class="pl-k">=</span> <span class="pl-c1">3</span>, b <span class="pl-k">=</span> <span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)
</pre></div>
<h2 dir="auto"><a id="user-content-more-example" class="anchor" aria-hidden="true" href="#more-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StructWalk
import StructWalk: WalkStyle, walkstyle

struct FunctorStyle &lt;: WalkStyle end

StructWalk.children(::FunctorStyle, x::AbstractArray) = ()

struct Foo{X, Y}
    x::X
    y::Y
end

struct Baz
    x
    y
end

StructWalk.constructor(::FunctorStyle, b::Baz) = Base.Fix2(Baz, b.y)
StructWalk.children(::FunctorStyle, b::Baz) = (b.x,)

myfmap(f, x) = mapleaves(f, FunctorStyle(), x)

julia&gt; foo = Foo(1, [1, 2, 3])
Foo{Int64, Vector{Int64}}(1, [1, 2, 3])

julia&gt; postwalk(x-&gt; x isa Integer ? float(x) : x, FunctorStyle(), foo)
Foo{Float64, Vector{Int64}}(1.0, [1, 2, 3])

julia&gt; myfmap(float, foo)
Foo{Float64, Vector{Float64}}(1.0, [1.0, 2.0, 3.0])

julia&gt; baz = Baz(1, 2)
Baz(1, 2)

julia&gt; myfmap(float, baz)
Baz(1.0, 2)

julia&gt; using CUDA; myfmap(CUDA.cu, foo)
Foo{Int64, CuArray{Int64, 1, CUDA.Mem.DeviceBuffer}}(1, [1, 2, 3])
"><pre><span class="pl-k">using</span> StructWalk
<span class="pl-k">import</span> StructWalk<span class="pl-k">:</span> WalkStyle, walkstyle

<span class="pl-k">struct</span> FunctorStyle <span class="pl-k">&lt;:</span> <span class="pl-c1">WalkStyle</span> <span class="pl-k">end</span>

StructWalk<span class="pl-k">.</span><span class="pl-en">children</span>(<span class="pl-k">::</span><span class="pl-c1">FunctorStyle</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>) <span class="pl-k">=</span> ()

<span class="pl-k">struct</span> Foo{X, Y}
    x<span class="pl-k">::</span><span class="pl-c1">X</span>
    y<span class="pl-k">::</span><span class="pl-c1">Y</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Baz
    x
    y
<span class="pl-k">end</span>

StructWalk<span class="pl-k">.</span><span class="pl-en">constructor</span>(<span class="pl-k">::</span><span class="pl-c1">FunctorStyle</span>, b<span class="pl-k">::</span><span class="pl-c1">Baz</span>) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">Fix2</span>(Baz, b<span class="pl-k">.</span>y)
StructWalk<span class="pl-k">.</span><span class="pl-en">children</span>(<span class="pl-k">::</span><span class="pl-c1">FunctorStyle</span>, b<span class="pl-k">::</span><span class="pl-c1">Baz</span>) <span class="pl-k">=</span> (b<span class="pl-k">.</span>x,)

<span class="pl-en">myfmap</span>(f, x) <span class="pl-k">=</span> <span class="pl-c1">mapleaves</span>(f, <span class="pl-c1">FunctorStyle</span>(), x)

julia<span class="pl-k">&gt;</span> foo <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">Foo</span><span class="pl-c1">{Int64, Vector{Int64}}</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">postwalk</span>(x<span class="pl-k">-&gt;</span> x <span class="pl-k">isa</span> Integer <span class="pl-k">?</span> <span class="pl-c1">float</span>(x) <span class="pl-k">:</span> x, <span class="pl-c1">FunctorStyle</span>(), foo)
<span class="pl-c1">Foo</span><span class="pl-c1">{Float64, Vector{Int64}}</span>(<span class="pl-c1">1.0</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">myfmap</span>(float, foo)
<span class="pl-c1">Foo</span><span class="pl-c1">{Float64, Vector{Float64}}</span>(<span class="pl-c1">1.0</span>, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])

julia<span class="pl-k">&gt;</span> baz <span class="pl-k">=</span> <span class="pl-c1">Baz</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">Baz</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">myfmap</span>(float, baz)
<span class="pl-c1">Baz</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CUDA; <span class="pl-c1">myfmap</span>(CUDA<span class="pl-k">.</span>cu, foo)
<span class="pl-c1">Foo</span><span class="pl-c1">{Int64, CuArray{Int64, 1, CUDA.Mem.DeviceBuffer}}</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
</pre></div>
</article></div>