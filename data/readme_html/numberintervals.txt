<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-numberintervalsjl" class="anchor" aria-hidden="true" href="#numberintervalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NumberIntervals.jl</h1>
<p>A package for strict intervals-as-numbers.</p>
<p><a href="https://travis-ci.org/gwater/NumberIntervals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a7247ef399393e80e7f42b457a3a0829e056f018/68747470733a2f2f7472617669732d63692e6f72672f6777617465722f4e756d626572496e74657276616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gwater/NumberIntervals.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/gwater/NumberIntervals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6c98b12c171ad12ebff9208626682f1f7897eed1/68747470733a2f2f636f6465636f762e696f2f67682f6777617465722f4e756d626572496e74657276616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/gwater/NumberIntervals.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p><em>NumberIntervals.jl</em> is available from the General registry. To install enter
the <code>Pkg</code> REPL (using <code>]</code> in Julia REPL) and simply enter:</p>
<div class="highlight highlight-source-julia"><pre>add NumberIntervals</pre></div>
<h1><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h1>
<p>This package aims to provide intervals which can be safely used as drop-in replacements for numbers in <a href="https://julialang.org" rel="nofollow">Julia</a>.
It builds on the <a href="https://github.com/JuliaIntervals/IntervalArithmetic.jl">IntervalArithmetic.jl</a> implementation of the <a href="https://standards.ieee.org/standard/1788-2015.html" rel="nofollow">IEEE 1788-2015</a> standard.</p>
<p>However, our <code>NumberInterval</code> type behaves more predictably and cautious in many contexts than the <code>Interval</code> type:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NumberIntervals, IntervalArithmetic
julia<span class="pl-k">&gt;</span> <span class="pl-c1">iszero</span>(<span class="pl-c1">Interval</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
<span class="pl-c1">false</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">iszero</span>(<span class="pl-c1">NumberInterval</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
<span class="pl-c1">missing</span></pre></div>
<p>In this case, we cannot tell if the interval (-1, 1) represents zero or not; so the <code>NumberInterval</code> returns <code>missing</code>.
The <code>Interval</code> (from <code>IntervalArithmetic</code>) is more forgiving which increases the risk of silent failure in algorithms expecting <code>Number</code>-like behavior.</p>
<p>In safe cases, <code>NumberInterval</code> yields the expected result:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">iszero</span>(<span class="pl-c1">NumberInterval</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>))
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iszero</span>(<span class="pl-c1">NumberInterval</span>(<span class="pl-k">-</span><span class="pl-c1">0</span>, <span class="pl-k">+</span><span class="pl-c1">0</span>))
<span class="pl-c1">true</span></pre></div>
<p>This behavior is similar to the <a href="https://www.boost.org/doc/libs/1_70_0/libs/numeric/interval/doc/comparisons.htm" rel="nofollow">default Boost implementation</a>.</p>
<p>Through <code>try-catch</code> statements fallback algorithms can be defined when certain methods fail. A good example is <code>Base.hypot(x, y)</code>. It calculates <code>sqrt(x^2 + y^2)</code> avoiding over/underflows. Unfortunately, it is not always safe to use with intervals.
This definition uses <code>Base.hypot()</code> in safe cases and falls back to <code>sqrt(x^2 + y^2)</code> in unsafe cases:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">is_missing_exception</span>(<span class="pl-k">::</span><span class="pl-c1">Exception</span>) <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-en">is_missing_exception</span>(exc<span class="pl-k">::</span><span class="pl-c1">TypeError</span>) <span class="pl-k">=</span> <span class="pl-c1">ismissing</span>(exc<span class="pl-k">.</span>got)

<span class="pl-k">function</span> <span class="pl-en">my_hypot</span>(x, y)
    <span class="pl-k">try</span>
        <span class="pl-c1">hypot</span>(x, y)
    <span class="pl-k">catch</span> exc
        <span class="pl-k">if</span> <span class="pl-c1">is_missing_exception</span>(exc)
            <span class="pl-k">return</span> <span class="pl-c1">sqrt</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">2</span>)
        <span class="pl-k">end</span>
        <span class="pl-c1">rethrow</span>(exc)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Check our <a href="examples/DifferentialEquationsExample.ipynb">example</a> demonstrating how <code>NumberInterval</code>s can act as drop-in replacements for numbers without sacrificing numerical validity.</p>
<h2><a id="user-content-unsupported-functions" class="anchor" aria-hidden="true" href="#unsupported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unsupported functions</h2>
<p>Some functions do not support NumberIntervals, usually because they call external C or FORTRAN libraries.
For these functions, <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun.jl</a> produces a pure Julia approximation which can be used with NumberIntervals.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ApproxFun, NumberIntervals, SpecialFunctions
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj0</span>(<span class="pl-c1">NumberInterval</span>(<span class="pl-c1">1</span>))
ERROR<span class="pl-k">:</span> StackOverflowError
julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(besselj0, <span class="pl-c1">Chebyshev</span>(<span class="pl-c1">0..10</span>))
julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">NumberInterval</span>(<span class="pl-c1">1</span>))
x <span class="pl-k">âˆˆ</span> [<span class="pl-c1">0.765197</span>, <span class="pl-c1">0.765198</span>]
julia<span class="pl-k">&gt;</span> <span class="pl-c1">besselj0</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">0.7651976865579666</span></pre></div>
<h2><a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugging</h2>
<p>For debugging purposes, enable exceptions in indeterminate cases, using:</p>
<div class="highlight highlight-source-julia"><pre>    NumberIntervals<span class="pl-k">.</span><span class="pl-en">intercept_exception</span>(<span class="pl-k">::</span><span class="pl-c1">IndeterminateException</span>) <span class="pl-k">=</span> <span class="pl-c1">false</span></pre></div>
</article></div>