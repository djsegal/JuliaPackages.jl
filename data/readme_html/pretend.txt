<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pretendjl" class="anchor" aria-hidden="true" href="#pretendjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pretend.jl</h1>
<p><a href="https://github.com/tk3369/Pretend.jl/actions?query=workflow%3ACI"><img src="https://github.com/tk3369/Pretend.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tk3369/Pretend.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fc8a5d813e221b5621d47e7ff9973a2d089e56d91b632831748f7395fc725f02/687474703a2f2f636f6465636f762e696f2f6769746875622f746b333336392f50726574656e642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tk3369/Pretend.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4c2b50179be33caa38c67679a9ae6c34953d64e8ee5c4231892641a1fecc8298/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d6e65772d6f72616e6765"><img src="https://camo.githubusercontent.com/4c2b50179be33caa38c67679a9ae6c34953d64e8ee5c4231892641a1fecc8298/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d6e65772d6f72616e6765" alt="Project Status" data-canonical-src="https://img.shields.io/badge/status-new-orange" style="max-width:100%;"></a></p>
<p>Pretend.jl is a <a href="https://en.wikipedia.org/wiki/Test_double" rel="nofollow">test doubles</a> library.
The main idea is that you can annotate any functions
as <code>@mockable</code>.  Then, you can easily stub out calls to the function with your
own patch.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The following examples demonstrate the basic usage of the Pretend framework.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pretend.activate()   # Turn on the Pretend framework

# Annotate any function with @mockable macro
@mockable add(x, y) = x + y

# Apply a patch
apply(add =&gt; (x,y) -&gt; x - y) do
    @test add(1, 2) == -1
end

# Apply a patch conditionally
apply(add =&gt; (x,y) -&gt; x == y ? 0 : Fallback()) do
    @test add(1, 2) == 3
    @test add(5, 5) == 0
end

# Verification
@mockable foo() = bar(1,2)
@mockable bar(x,y) = x * y
spy() do
    foo()
    @test called_exactly_once(bar, 1, 2)
end

# Mocking thirdparty methods
@mockable Base.sin(x::Real)
fakesin(x::Real) = 10
apply(sin =&gt; fakesin) do
    @test sin(1.0) == 10
end

# Mocking anonymous functions
add_curry(n) = (x) -&gt; x + n
add1 = mocked(add_curry(1))  # function, not macro
apply(add1 =&gt; (x) -&gt; x + 10) do
    @test add1(1) == 11
end
"><pre>Pretend<span class="pl-k">.</span><span class="pl-c1">activate</span>()   <span class="pl-c"><span class="pl-c">#</span> Turn on the Pretend framework</span>

<span class="pl-c"><span class="pl-c">#</span> Annotate any function with @mockable macro</span>
<span class="pl-c1">@mockable</span> <span class="pl-en">add</span>(x, y) <span class="pl-k">=</span> x <span class="pl-k">+</span> y

<span class="pl-c"><span class="pl-c">#</span> Apply a patch</span>
<span class="pl-c1">apply</span>(add <span class="pl-k">=&gt;</span> (x,y) <span class="pl-k">-&gt;</span> x <span class="pl-k">-</span> y) <span class="pl-k">do</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">add</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Apply a patch conditionally</span>
<span class="pl-c1">apply</span>(add <span class="pl-k">=&gt;</span> (x,y) <span class="pl-k">-&gt;</span> x <span class="pl-k">==</span> y <span class="pl-k">?</span> <span class="pl-c1">0</span> <span class="pl-k">:</span> <span class="pl-c1">Fallback</span>()) <span class="pl-k">do</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">add</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">3</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">add</span>(<span class="pl-c1">5</span>, <span class="pl-c1">5</span>) <span class="pl-k">==</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Verification</span>
<span class="pl-c1">@mockable</span> <span class="pl-en">foo</span>() <span class="pl-k">=</span> <span class="pl-c1">bar</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">@mockable</span> <span class="pl-en">bar</span>(x,y) <span class="pl-k">=</span> x <span class="pl-k">*</span> y
<span class="pl-c1">spy</span>() <span class="pl-k">do</span>
    <span class="pl-c1">foo</span>()
    <span class="pl-c1">@test</span> <span class="pl-c1">called_exactly_once</span>(bar, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Mocking thirdparty methods</span>
<span class="pl-c1">@mockable</span> Base<span class="pl-k">.</span><span class="pl-c1">sin</span>(x<span class="pl-k">::</span><span class="pl-c1">Real</span>)
<span class="pl-en">fakesin</span>(x<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-c1">apply</span>(sin <span class="pl-k">=&gt;</span> fakesin) <span class="pl-k">do</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1.0</span>) <span class="pl-k">==</span> <span class="pl-c1">10</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Mocking anonymous functions</span>
<span class="pl-en">add_curry</span>(n) <span class="pl-k">=</span> (x) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> n
add1 <span class="pl-k">=</span> <span class="pl-c1">mocked</span>(<span class="pl-c1">add_curry</span>(<span class="pl-c1">1</span>))  <span class="pl-c"><span class="pl-c">#</span> function, not macro</span>
<span class="pl-c1">apply</span>(add1 <span class="pl-k">=&gt;</span> (x) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">10</span>) <span class="pl-k">do</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">add1</span>(<span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">11</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-design-notes" class="anchor" aria-hidden="true" href="#design-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Design Notes</h2>
<h3><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How does it work?</h3>
<p>The <code>@mockable</code> macro rewrites a method definition by wrapping around the logic that is
switched on when <code>Pretend.activated()</code> returns <code>true</code>.  The logic basically looks up
a patch in the "patch store" having the same method signature.  If a patch is found
then it will be called.  However, if a patch is not found or if the patch returns
the <code>Fallback()</code> singleton object, the existing method body will be executed.</p>
<p>The <code>apply</code> function sets up the "patch store" with the user-supplied patch functions before
running the body.  As it exits the current scope, the patch store is unwound to the previous
state; hence, no more patch will be applied.  This ensures a clean slate whenever patches
are applied.</p>
<p>Both <code>apply</code> and <code>spy</code> functions keep track of executions of mockable functions. The
difference is that <code>apply</code> expects a set of patches while <code>spy</code> does not take any patch.</p>
<h3><a id="user-content-mocking-third-party-methods" class="anchor" aria-hidden="true" href="#mocking-third-party-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mocking third-party methods</h3>
<p>Because the <code>@mockable</code> macro needs to be used at the function definition, it's a little tricky
if you want to mock a third party function that you do not own.  To overcome this issue, you may
define a function in your own package and delegate the call to the third party function, and then
you can annotate this function as mockable.</p>
<p>For convenience, when you put <code>@mockable</code> just in front of a third-party method signature then
it will be expanded to a delegate function having the same function name.</p>
<h3><a id="user-content-mocking-anonymous-functions" class="anchor" aria-hidden="true" href="#mocking-anonymous-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mocking anonymous functions</h3>
<p>Functions are first-class in Julia, and a function can be created at any time on-the-fly.
A common usage is high-order functions or closures. Consider the following function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="add_curry(n) = (x) -&gt; x + n
"><pre><span class="pl-en">add_curry</span>(n) <span class="pl-k">=</span> (x) <span class="pl-k">-&gt;</span> x <span class="pl-k">+</span> n</pre></div>
<p>It's easy to annotate <code>add_curry</code> with <code>@mockable</code> but perhaps I
don't want to mock <code>add_curry</code> itself but the function that it returns:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="add1 = add_curry(1)
"><pre>add1 <span class="pl-k">=</span> <span class="pl-c1">add_curry</span>(<span class="pl-c1">1</span>)</pre></div>
<p>In order to mock <code>add1</code>, I would use the <code>mocked</code> <em>function</em> as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="add1 = mocked(add_curry(1))
"><pre>add1 <span class="pl-k">=</span> <span class="pl-c1">mocked</span>(<span class="pl-c1">add_curry</span>(<span class="pl-c1">1</span>))</pre></div>
<h2><a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related projects</h2>
<p>There are several mocking libraries available. If Pretend.jl does not fit your needs, take a look
at these alternatives:</p>
<p><a href="https://github.com/invenia/Mocking.jl">Mocking.jl</a> has a different design such that the mocks are
annotated at the call site rather than at the function definition.</p>
<p><a href="https://github.com/JuliaTesting/SimpleMock.jl">SimpleMock.jl</a> is a very cool package that
implements mocking using Cassette.jl's machinery.</p>
</article></div>