<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nameddims" class="anchor" aria-hidden="true" href="#nameddims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NamedDims</h1>

<p><a href="https://github.com/Invenia/Intervals.jl/actions?query=workflow%3ACI"><img src="https://github.com/Invenia/Intervals.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/NamedDims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/86da96aeaa8a4ca8bd5ef438647b946db986173b6e77f85592db1c083b366850/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4e616d656444696d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/NamedDims.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/78f2a735a3db9258851843df2585b99670fb7e57e90b5fe0be0b7b62ff22a574/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4e2f4e616d656444696d732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NamedDims.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="code style blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p><code>NamedDimsArray</code> is a zero-cost abstraction to add names to the dimensions of an array.</p>
<h2><a id="user-content-core-functionality" class="anchor" aria-hidden="true" href="#core-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Core functionality:</h2>
<p>For <code>nda = NamedDimsArray{(:x, :y, :z)}(rand(10, 20, 30))</code>.</p>
<ul>
<li>Indexing: <code>nda[y=2]</code> is the same as <code>nda[x=:, y=2, z=:]</code> which is the same as <code>nda[:, 2, :]</code>.</li>
<li>Functions taking a <code>dims</code> keyword: <code>sum(nda; dims=:y)</code> is the same as <code>sum(nda; dims=2)</code>.</li>
<li>Accessing Names: <code>dimnames(nda)</code> returns <code>(:x, :y, :z)</code>, a tuple with the dimension names.</li>
<li>Identifying a dimension by name: <code>dim(nda, :y)</code> returns <code>2</code>, the numerical dimension named <code>:y</code>. Similarly <code>dim(nda, (:y, :z))</code> returns <code>(2, 3)</code>.</li>
<li>Unwrapping: <code>parent(nda)</code> returns the underlying <code>AbstractArray</code> that is wrapped by the <code>NamedDimsArray</code>.</li>
<li>Unnaming: <code>unname(a)</code> ensures an <code>AbstractArray</code> is <em>not</em> a <code>NamedDimsArray</code>;
if passed a <code>NamedDimsArray</code> it unwraps it, otherwise just returns the given <code>AbstractArray</code>.</li>
<li>Renaming: <code>rename(nda, new_names)</code> returns a new <code>NamedDimsArray</code> with the <code>new_names</code> but still wrapping the same data.</li>
<li>Refining Names: <code>NamedDimsArray(nda, names)</code> returns a new <code>NamedDimsArray</code> with any unnamed dimensions of <code>nda</code> getting their names from <code>names</code>. It errors if any names present in both disagree.</li>
</ul>
<h3><a id="user-content-dimensionally-safe-operations" class="anchor" aria-hidden="true" href="#dimensionally-safe-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dimensionally Safe Operations</h3>
<p>Any operation of multiple <code>NamedDimArray</code>s must have compatible dimension names.
For example trying <code>NamedDimsArray{(:time,)}(ones(5)) + NamedDimsArray{(:place,)}(ones(5))</code>
will throw an error.
If you perform an operation between another <code>AbstractArray</code> and a <code>NamedDimsArray</code>, then
the result will take its names from the <code>NamedDimsArray</code>.
You can use this to bypass the protection,
e.g. <code>NamedDimsArray{(:time,)}(ones(5)) + parent(NamedDimsArray{(:place,)}(ones(5)))</code>
is allowed.</p>
<h3><a id="user-content-partially-named-dimensions-_" class="anchor" aria-hidden="true" href="#partially-named-dimensions-_"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Partially Named Dimensions (<code>:_</code>)</h3>
<p>To allow for arrays where only some dimensions have names, the name <code>:_</code> is treated as a wildcard.
Dimensions named with <code>:_</code> will not be protected against operating between dimensions of different names; in these cases the result will take the name from the non-wildcard name, if any of the operands had such a concrete name.
For example:
<code>NamedDimsArray{(:time,:_)}(ones(5,2)) + NamedDimsArray{(:_, :place,)}(ones(5,2))</code>
is allowed. and would have a result of:
<code>NamedDimsArray{(:time,:place)}(2*ones(5,2))</code>
As such, unless you want this wildcard behaviour, you should <em>not</em> use <code>:_</code> as a dimension name.
(Also that is a terrible dimension name, and goes against the whole point of this package.)</p>
<p>When you perform matrix multiplication between a <code>AbstractArray</code> and a <code>NamedDimsArray</code>
then the new dimensions name is given as the wildcard <code>:_</code>.
Similarly, when you take the transpose of a <code>AbstractVector</code>, the new first dimension
is named <code>:_</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-writing-functions-that-accept-nameddimsarrays-or-abstractarrays" class="anchor" aria-hidden="true" href="#writing-functions-that-accept-nameddimsarrays-or-abstractarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writing functions that accept <code>NamedDimsArray</code>s or <code>AbstractArray</code>s</h3>
<p>It is a common desire to be able to write code that anyone can call,
whether they are using <code>NamedDimsArray</code>s or not.
While also being able to use <code>NamedDimsArray</code>s internally in its definition;
and also getting the assertion when a <code>NamedDimsArray</code> <em>is</em>  passed in, that it has the
expected dimensions.
The way to do this is to call the <code>NamedDimsArray</code> constructor, with the expected names
within the function.
This operation corresponds to <a href="https://pytorch.org/docs/stable/named_tensor.html#torch.Tensor.refine_names" rel="nofollow">PyTorch's <code>refine_names</code></a>.
As in the following example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function total_variance(data::AbstractMatrix)
    n_data = NamedDimsArray(data, (:times, :locations))
    location_variance = var(n_data; dims=:times)  # calculate variance at each location
    return sum(location_variance; dims=:locations)  # total them
end
"><pre><span class="pl-k">function</span> <span class="pl-en">total_variance</span>(data<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>)
    n_data <span class="pl-k">=</span> <span class="pl-c1">NamedDimsArray</span>(data, (<span class="pl-c1">:times</span>, <span class="pl-c1">:locations</span>))
    location_variance <span class="pl-k">=</span> <span class="pl-c1">var</span>(n_data; dims<span class="pl-k">=</span><span class="pl-c1">:times</span>)  <span class="pl-c"><span class="pl-c">#</span> calculate variance at each location</span>
    <span class="pl-k">return</span> <span class="pl-c1">sum</span>(location_variance; dims<span class="pl-k">=</span><span class="pl-c1">:locations</span>)  <span class="pl-c"><span class="pl-c">#</span> total them</span>
<span class="pl-k">end</span></pre></div>
<p>If this function is given (say) a <code>Matrix</code>, then it will apply the names to it in <code>n_data</code>.
Thus the function will just work on unnamed types.
If <code>data</code> is a <code>NamedDimsArray</code>, with incompatible names an error will be thrown.
For example if it <code>data</code> was mistakenly transposed and so had the dimension names:
<code>(:locations, :times)</code> instead of <code>(:times, :locations)</code>.
If <code>data</code> was partially named, e.g. <code>(:_, :locations)</code>, then that name would be allowed to be
combined with the named from the constructor; yielding <code>n_data</code> with the expected names:
<code>(:times, :locations)</code>.
This pattern allows both assertions of correctness (for named inputs),
and convenience and compatibility (for unnamed input).
And since <code>NamedDimsArray</code> is a zero-cost abstraction, this will basically compile out of existence,
most of the time.</p>
<h2><a id="user-content-extending-support-for-more-functions" class="anchor" aria-hidden="true" href="#extending-support-for-more-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extending support for more functions</h2>
<p>There are two common things to do to make a function support <code>NamedDimsArray</code>s.
These are:</p>
<ul>
<li>Adding support for referring to a dimension by name to an existing function</li>
<li>Make the operation return a <code>NamedDimsArray</code> rather than a <code>Array</code>. (Many operations fallback to dropping the names)
Often they are done together.</li>
</ul>
<p>They are illustrated by the following example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function foo(nda::NamedDimsArray, args...; dims=:)
    numerical_dims = dim(nda, dims)  # convert any form of dims into numerical dims
    raw_result = foo(parent(nda), args...; dims=numerical_dims)  # call it on the backed data
    new_names = determine_foo_names(nda, args...)  # workout what the new names will be
    return NamedDimsArray{new_names)(raw_result)  # wrap the result up
end
"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(nda<span class="pl-k">::</span><span class="pl-c1">NamedDimsArray</span>, args<span class="pl-k">...</span>; dims<span class="pl-k">=</span>:)
    numerical_dims <span class="pl-k">=</span> <span class="pl-c1">dim</span>(nda, dims)  <span class="pl-c"><span class="pl-c">#</span> convert any form of dims into numerical dims</span>
    raw_result <span class="pl-k">=</span> <span class="pl-c1">foo</span>(<span class="pl-c1">parent</span>(nda), args<span class="pl-k">...</span>; dims<span class="pl-k">=</span>numerical_dims)  <span class="pl-c"><span class="pl-c">#</span> call it on the backed data</span>
    new_names <span class="pl-k">=</span> <span class="pl-c1">determine_foo_names</span>(nda, args<span class="pl-k">...</span>)  <span class="pl-c"><span class="pl-c">#</span> workout what the new names will be</span>
    <span class="pl-k">return</span> NamedDimsArray{new_names)(raw_result)  <span class="pl-c"><span class="pl-c">#</span> wrap the result up</span>
<span class="pl-k">end</span></pre></div>
<p>You can do this to your own functions in your own packages, to add <code>NamedDimsArray</code> support.
If you implement it for any functions in a standard library, a PR would be very appreciated.</p>
<h3><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h3>
<p>If multiple dimensions have the same names, indexing by name is considered undefined behaviour and should not be relied upon.</p>
</article></div>