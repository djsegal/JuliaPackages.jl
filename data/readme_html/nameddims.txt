<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nameddims" class="anchor" aria-hidden="true" href="#nameddims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NamedDims</h1>

<p><a href="https://travis-ci.com/invenia/NamedDims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f94935cc54692e194c731c47fc05243d2e993f89/68747470733a2f2f7472617669732d63692e636f6d2f696e76656e69612f4e616d656444696d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/invenia/NamedDims.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/invenia/NamedDims-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f5653e320f7fbd8c7f54b1cf3cbe9f3c82a11bcf/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f696e76656e69612f4e616d656444696d732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/invenia/NamedDims.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/NamedDims.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/244dabc144a48ef1d3d0b535bd289387015b0a36/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4e616d656444696d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/invenia/NamedDims.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/8b94b3901ecfaf59ac88c12c8a98ff19c5c37301/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4e2f4e616d656444696d732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NamedDims.svg" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/7c36c1138b8ef31248513294318b739ddad4edbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="code style blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p><code>NamedDimsArray</code> is a zero-cost abstraction to add names to the dimensions of an array.</p>
<h2><a id="user-content-core-functionality" class="anchor" aria-hidden="true" href="#core-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Core functionality:</h2>
<p>For <code>nda = NamedDimsArray{(:x, :y, :z)}(rand(10, 20, 30))</code>.</p>
<ul>
<li>Indexing: <code>nda[y=2]</code> is the same as <code>nda[x=:, y=2, z=:]</code> which is the same as <code>nda[:, 2, :]</code>.</li>
<li>Functions taking a <code>dims</code> keyword: <code>sum(nda; dims=:y)</code> is the same as <code>sum(nda; dims=2)</code>.</li>
<li>Identifying a dimension by name: <code>dim(nda, :y)</code> returns <code>2</code>, the numerical dimension named <code>:y</code>. Similarly <code>dim(nda, (:y, :z))</code> returns <code>(2, 3)</code>.</li>
<li>Unwrapping: <code>parent(nda)</code> returns the underlying <code>AbstractArray</code> that is wrapped by the <code>NamedDimsArray</code>.</li>
<li>Unnaming: <code>unname(a)</code> ensures an <code>AbstractArray</code> is <em>not</em> a <code>NamedDimsArray</code>;
if passed a <code>NamedDimsArray</code> it unwraps it, otherwise just returns the given <code>AbstractArray</code>.</li>
<li>Renaming: <code>rename(nda, new_names)</code> returns a new <code>NamedDimsArray</code> with the <code>new_names</code> but still wrapping the same data.</li>
<li>Refining Names: <code>NamedDimsArray(nda, names)</code> returns a new <code>NamedDimsArray</code> with any unnamed dimensions of <code>nda</code> getting their names from <code>names</code>. It errors if any names present in both disagree.</li>
</ul>
<h3><a id="user-content-dimensionally-safe-operations" class="anchor" aria-hidden="true" href="#dimensionally-safe-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dimensionally Safe Operations</h3>
<p>Any operation of multiple <code>NamedDimArray</code>s must have compatible dimension names.
For example trying <code>NamedDimsArray{(:time,)}(ones(5)) + NamedDimsArray{(:place,)}(ones(5))</code>
will throw an error.
If you perform an operation between another <code>AbstractArray</code> and a <code>NamedDimsArray</code>, then
the result will take its names from the <code>NamedDimsArray</code>.
You can use this to bypass the protection,
e.g. <code>NamedDimsArray{(:time,)}(ones(5)) + parent(NamedDimsArray{(:place,)}(ones(5)))</code>
is allowed.</p>
<h3><a id="user-content-partially-named-dimensions-_" class="anchor" aria-hidden="true" href="#partially-named-dimensions-_"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Partially Named Dimensions (<code>:_</code>)</h3>
<p>To allow for arrays where only some dimensions have names, the name <code>:_</code> is treated as a wildcard.
Dimensions named with <code>:_</code> will not be protected against operating between dimensions of different names; in these cases the result will take the name from the non-wildcard name, if any of the operands had such a concrete name.
For example:
<code>NamedDimsArray{(:time,:_)}(ones(5,2)) + NamedDimsArray{(:_, :place,)}(ones(5,2))</code>
is allowed. and would have a result of:
<code>NamedDimsArray{(:time,:place)}(2*ones(5,2))</code>
As such, unless you want this wildcard behaviour, you should <em>not</em> use <code>:_</code> as a dimension name.
(Also that is a terrible dimension name, and goes against the whole point of this package.)</p>
<p>When you perform matrix multiplication between a <code>AbstractArray</code> and a <code>NamedDimsArray</code>
then the new dimensions name is given as the wildcard <code>:_</code>.
Similarly, when you take the transpose of a <code>AbstractVector</code>, the new first dimension
is named <code>:_</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-writing-functions-that-accept-nameddimsarrays-or-abstractarrays" class="anchor" aria-hidden="true" href="#writing-functions-that-accept-nameddimsarrays-or-abstractarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing functions that accept <code>NamedDimsArray</code>s or <code>AbstractArray</code>s</h3>
<p>It is a common desire to be able to write code that anyone can call,
whether they are using <code>NamedDimsArray</code>s or not.
While also being able to use <code>NamedDimsArray</code>s internally in its definition;
and also getting the assertion when a <code>NamedDimsArray</code> <em>is</em>  passed in, that it has the
expected dimensions.
The way to do this is to call the <code>NamedDimsArray</code> constructor, with the expected names
within the function.
This operation corresponds to <a href="https://pytorch.org/docs/stable/named_tensor.html#torch.Tensor.refine_names" rel="nofollow">PyTorch's <code>refine_names</code></a>.
As in the following example:</p>
<pre><code>function total_variance(data::AbstractMatrix)
    n_data = NamedDimsArray(data, (:times, :locations))
    location_variance = var(n_data; dims=:times)  # calculate variance at each location
    return sum(location_variance; dims=:locations)  # total them
end
</code></pre>
<p>If this function is given (say) a <code>Matrix</code>, then it will apply the names to it in <code>n_data</code>.
Thus the function will just work on unnamed types.
If <code>data</code> is a <code>NamedDimsArray</code>, with incompatible names an error will be thrown.
For example if it <code>data</code> was mistakenly transposed and so had the dimension names:
<code>(:locations, :times)</code> instead of <code>(:times, :locations)</code>.
If <code>data</code> was partially named, e.g. <code>(:_, :locations)</code>, then that name would be allowed to be
combined with the named from the constructor; yielding <code>n_data</code> with the expected names:
<code>(:times, :locations)</code>.
This pattern allows both assertions of correctness (for named inputs),
and convenience and compatibility (for unnamed input).
And since <code>NamedDimsArray</code> is a zero-cost abstraction, this will basically compile out of existence,
most of the time.</p>
<h2><a id="user-content-extending-support-for-more-functions" class="anchor" aria-hidden="true" href="#extending-support-for-more-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extending support for more functions</h2>
<p>There are two common things to do to make a function support <code>NamedDimsArray</code>s.
These are:</p>
<ul>
<li>Adding support for referring to a dimension by name to an existing function</li>
<li>Make the operation return a <code>NamedDimsArray</code> rather than a <code>Array</code>. (Many operations fallback to dropping the names)
Often they are done together.</li>
</ul>
<p>They are illustrated by the following example:</p>
<pre><code>function foo(nda::NamedDimsArray, args...; dims=:)
    numerical_dims = dim(nda, dims)  # convert any form of dims into numerical dims
    raw_result = foo(parent(nda), args...; dims=numerical_dims)  # call it on the backed data
    new_names = determine_foo_names(nda, args...)  # workout what the new names will be
    return NamedDimsArray{new_names)(raw_result)  # wrap the result up
end
</code></pre>
<p>You can do this to your own functions in your own packages, to add <code>NamedDimsArray</code> support.
If you implement it for any functions in a standard library, a PR would be very appreciated.</p>
<h3><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Caveats</h3>
<p>If multiple dimensions have the same names, indexing by name is considered undefined behaviour and should not be relied upon.</p>
</article></div>