<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-idl-interface-for-the-julia-language" class="anchor" aria-hidden="true" href="#idl-interface-for-the-julia-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IDL interface for the Julia language</h1>
<p><a href="https://travis-ci.org/BobPortmann/IDLCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/161adb636e1419b927fa5150a0e49ce6f4676dfe18f51255a8bf0863cd21a5ab/68747470733a2f2f7472617669732d63692e6f72672f426f62506f72746d616e6e2f49444c43616c6c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/BobPortmann/IDLCall.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>IDLCall is an interface to call IDL from the Julia language. Note that you must have a valid IDL
license to use IDL from julia.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, use the package manager:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/BobPortmann/IDLCall.jl.git&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/BobPortmann/IDLCall.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p>IDLCall should find and load the IDL library automatically on Mac and Linux. It has not been
tested on Windows so please file an issue if you use Windows and want to help make it work.</p>
<p>IDL can be called using either the <code>RPC</code> or <code>Callable</code> interface. On windows only the <code>Callable</code>
interface is available. You can set an environmental variable <code>JL_IDL_TYPE</code> to <code>RPC</code> or <code>CALLABLE</code>
to force the use of that interface.
Alternatively you can set <code>ENV["JL_IDL_TYPE]</code> within julia before starting IDLCall.
Note that by default IDLCall uses the <code>RPC</code> interface
on Mac and Linux and <code>Callable</code> on Windows. The biggest difference between these is that:</p>
<ul>
<li>
<p><code>Callable</code> IDL runs in one program space and thus arrays can be shared between julia and IDL.
In <code>RPC</code> all arrays are copied between processes. Note that I have run into issues with IDL
loading DLM's while using <code>Callable</code> (e.g., NetCDF).</p>
</li>
<li>
<p>IDL <code>RPC</code> is not supported on windows</p>
</li>
<li>
<p><code>Callable</code> is always managed by IDLCall while <code>RPC</code> can be managed by IDLCall or the user.
By managed we mean that it is opened it when you load IDLCall and closed it when you close julia.
To manage <code>RPC</code> yourself run <code>idlrpc</code> in a shell before starting IDLCall. This allows the <code>idlrpc</code>
session to persist and julia can be restarted without killing the <code>idlrpc</code> process.</p>
</li>
</ul>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quickstart</h2>
<p>I recommend you start your code with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import IDLCall
idl = IDLCall
"><pre><span class="pl-k">import</span> IDLCall
idl <span class="pl-k">=</span> IDLCall</pre></div>
<p>Then you can add a julia variable to the IDL process with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="idl.put_var(x, &quot;x&quot;)
"><pre><code>idl.put_var(x, "x")
</code></pre></div>
<p>and you can retrieve variable into julia using</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x = idl.get_var(&quot;x&quot;)
"><pre><code>x = idl.get_var("x")
</code></pre></div>
<p>You can run an arbitrary chunk of code in IDL using</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="idl.execute(&quot;any valid idl code&quot;)
"><pre><code>idl.execute("any valid idl code")
</code></pre></div>
<p>Note that only primitive data types are supported at this time (e.g., structure variables
are not supported yet).</p>
<h2><a id="user-content-repl" class="anchor" aria-hidden="true" href="#repl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>REPL</h2>
<p>You can drop into an IDL REPL by typing <code>&gt;</code> at the julia prompt. Then you can type any valid
IDL commands, including using continuation characters <code>$</code> for multi-line commands. One
experimental feature I have added is the use of <code>%var</code> will auto-magically import the julia
variable <code>var</code> into the IDL process. This works at the IDL prompt or in strings passed into the
<code>execute</code> function.</p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ToDo</h2>
<ul>
<li>
<p>Add tests</p>
</li>
<li>
<p>Make more flexible to install on all platforms</p>
</li>
<li>
<p>Add more variable types to be transferred between julia and IDL.</p>
</li>
</ul>
</article></div>