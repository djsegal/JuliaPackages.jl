<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pddlvizjl" class="anchor" aria-hidden="true" href="#pddlvizjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PDDLViz.jl</h1>
<p dir="auto">A library for visualizing, animating, and interacting with PDDL domains, built on top of <a href="https://github.com/MakieOrg/Makie.jl">Makie.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Press <code>]</code> at the Julia REPL to enter the package manager, then install this package along with <code>PDDL</code> and a <code>Makie</code> backend of your choice (e.g. <code>GLMakie</code>):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add PDDLViz
add PDDL GLMakie"><pre class="notranslate"><code>add PDDLViz
add PDDL GLMakie
</code></pre></div>
<p dir="auto">To install the development version, replace <code>PDDLViz</code> above with <code>https://github.com/JuliaPlanners/PDDLViz.jl.git</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto"><code>PDDLViz.jl</code> provides a number of built-in renderer types for certain classes of domains, such as <a href="test/gridworld/test.jl"><code>GridworldRenderer</code></a> or <a href="test/graphworld/test.jl"><code>GraphworldRenderer</code></a>. Each renderer can be customized for a specific domain by passing in options to its constructor:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PDDLViz, GLMakie

# Construct gridworld renderer
gem_colors = PDDLViz.colorschemes[:vibrant]
renderer = GridworldRenderer(
    resolution = (600, 700),
    agent_renderer = (d, s) -&gt; HumanGraphic(color=:black),
    obj_renderers = Dict(
        :key =&gt; (d, s, o) -&gt; KeyGraphic(
            visible=!s[Compound(:has, [o])]
        ),
        :door =&gt; (d, s, o) -&gt; LockedDoorGraphic(
            visible=s[Compound(:locked, [o])]
        ),
        :gem =&gt; (d, s, o) -&gt; GemGraphic(
            visible=!s[Compound(:has, [o])],
            color=gem_colors[parse(Int, string(o.name)[end])]
        )
    ),
    show_inventory = true,
    inventory_fns = [(d, s, o) -&gt; s[Compound(:has, [o])]],
    inventory_types = [:item]
)"><pre><span class="pl-k">using</span> PDDLViz, GLMakie

<span class="pl-c"><span class="pl-c">#</span> Construct gridworld renderer</span>
gem_colors <span class="pl-k">=</span> PDDLViz<span class="pl-k">.</span>colorschemes[<span class="pl-c1">:vibrant</span>]
renderer <span class="pl-k">=</span> <span class="pl-c1">GridworldRenderer</span>(
    resolution <span class="pl-k">=</span> (<span class="pl-c1">600</span>, <span class="pl-c1">700</span>),
    agent_renderer <span class="pl-k">=</span> (d, s) <span class="pl-k">-&gt;</span> <span class="pl-c1">HumanGraphic</span>(color<span class="pl-k">=</span><span class="pl-c1">:black</span>),
    obj_renderers <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
        <span class="pl-c1">:key</span> <span class="pl-k">=&gt;</span> (d, s, o) <span class="pl-k">-&gt;</span> <span class="pl-c1">KeyGraphic</span>(
            visible<span class="pl-k">=</span><span class="pl-k">!</span>s[<span class="pl-c1">Compound</span>(<span class="pl-c1">:has</span>, [o])]
        ),
        <span class="pl-c1">:door</span> <span class="pl-k">=&gt;</span> (d, s, o) <span class="pl-k">-&gt;</span> <span class="pl-c1">LockedDoorGraphic</span>(
            visible<span class="pl-k">=</span>s[<span class="pl-c1">Compound</span>(<span class="pl-c1">:locked</span>, [o])]
        ),
        <span class="pl-c1">:gem</span> <span class="pl-k">=&gt;</span> (d, s, o) <span class="pl-k">-&gt;</span> <span class="pl-c1">GemGraphic</span>(
            visible<span class="pl-k">=</span><span class="pl-k">!</span>s[<span class="pl-c1">Compound</span>(<span class="pl-c1">:has</span>, [o])],
            color<span class="pl-k">=</span>gem_colors[<span class="pl-c1">parse</span>(Int, <span class="pl-c1">string</span>(o<span class="pl-k">.</span>name)[<span class="pl-c1">end</span>])]
        )
    ),
    show_inventory <span class="pl-k">=</span> <span class="pl-c1">true</span>,
    inventory_fns <span class="pl-k">=</span> [(d, s, o) <span class="pl-k">-&gt;</span> s[<span class="pl-c1">Compound</span>(<span class="pl-c1">:has</span>, [o])]],
    inventory_types <span class="pl-k">=</span> [<span class="pl-c1">:item</span>]
)</pre></div>
<p dir="auto">A renderer can then be used to render PDDL states:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PDDL, PlanningDomains

# Load example gridworld domain and problem
domain = load_domain(:doors_keys_gems)
problem = load_problem(:doors_keys_gems, 3)

# Load array extension to PDDL
PDDL.Arrays.register!()

# Construct initial state from domain and problem
state = initstate(domain, problem)

# Render initial state
canvas = renderer(domain, state)

# Save rendered canvas to file
save(&quot;gridworld.png&quot;, canvas)"><pre><span class="pl-k">using</span> PDDL, PlanningDomains

<span class="pl-c"><span class="pl-c">#</span> Load example gridworld domain and problem</span>
domain <span class="pl-k">=</span> <span class="pl-c1">load_domain</span>(<span class="pl-c1">:doors_keys_gems</span>)
problem <span class="pl-k">=</span> <span class="pl-c1">load_problem</span>(<span class="pl-c1">:doors_keys_gems</span>, <span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> Load array extension to PDDL</span>
PDDL<span class="pl-k">.</span>Arrays<span class="pl-k">.</span><span class="pl-c1">register!</span>()

<span class="pl-c"><span class="pl-c">#</span> Construct initial state from domain and problem</span>
state <span class="pl-k">=</span> <span class="pl-c1">initstate</span>(domain, problem)

<span class="pl-c"><span class="pl-c">#</span> Render initial state</span>
canvas <span class="pl-k">=</span> <span class="pl-c1">renderer</span>(domain, state)

<span class="pl-c"><span class="pl-c">#</span> Save rendered canvas to file</span>
<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>gridworld.png<span class="pl-pds">"</span></span>, canvas)</pre></div>
<p dir="auto">The rendered image is below:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/gridworld.png"><img src="assets/gridworld.png" alt="Example gridworld rendered by PDDLViz.jl" style="max-width: 100%;"></a></p>
<p dir="auto">Renderers can also be used to create animations as well:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="assets/gridworld.gif"><img src="assets/gridworld.gif" alt="Example gridworld trajectory animated by PDDLViz.jl" data-animated-image="" style="max-width: 100%;"></a></p>
<p dir="auto">See  <a href="test/gridworld/test.jl"><code>test/gridworld/test.jl</code></a> for examples of how to render plans, trajectories and planner solutions, how to animate trajectories, and how to enable interactive controls.</p>
</article></div>