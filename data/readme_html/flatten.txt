<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-flatten" class="anchor" aria-hidden="true" href="#flatten"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Flatten</h1>
<p dir="auto"><a href="https://rafaqz.github.io/Flatten.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://rafaqz.github.io/Flatten.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/rafaqz/Flatten.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9219866d339bb95778412b5e09418cc69462c09905c2557fea4d5cc24c98dacd/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f466c617474656e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/Flatten.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/rafaqz/Flatten.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d22e727ae5c9b0d6ea49155880041466e7ebcd41a191b406e29666d830fac554/687474703a2f2f636f6465636f762e696f2f6769746875622f72616661717a2f466c617474656e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rafaqz/Flatten.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/rafaqz/Flatten.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/515ace89098a0041a86f33f32dc426f437820aba62426664551b023b7e329cf0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f72616661717a2f466c617474656e2e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/rafaqz/Flatten.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto">Flatten.jl converts data from arbitrary nested structs to tuples, using
<code>flatten()</code>, and rebuilds them using <code>reconstruct()</code>, <code>update!()</code>.
<code>modify()</code> combines <code>flatten</code> and <code>reconstruct</code> with a function application
to each element of the intermediate tuple.</p>
<p dir="auto">This facilitates building modular, composable structs that can be queries, modified and
rebuilt based on the types of their fields, without knowing field locations.</p>
<p dir="auto">It also allows access to solvers and optimisers that require flat lists of parameters.
Importantly, it's type-stable and <em>very</em> fast. It does not flatten the contents of Array
or Dict (which is a container of Arrays), where the number of values are not known at compile time.</p>
<p dir="auto">Flatten is also flexible. The types to return and ignore can be specified, and
individual fields can be ignored using field-level traits like <code>flattenable</code>
from FieldMetadata.jl. Method overrides can also be defined for custom types.</p>
<h2 dir="auto"><a id="user-content-type-queries" class="anchor" aria-hidden="true" href="#type-queries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Type queries</h2>
<p dir="auto">Flatten allows a kind of querying to extract some types and ignore others,
here using <code>flatten</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Flatten

julia&gt; struct Foo{A,B,C}
           a::A
           b::B
           c::C
       end

julia&gt; struct Bar{X}
           x::X
       end

julia&gt; obj = Foo(1, :two, Foo(Bar(3), 4.0, 5.0f0));

julia&gt; use = Union{Int, Float32}; # Return Int and Float32 fields

julia&gt; ignore = Bar;              # Dont return Bar or iterate over Bar fields

julia&gt; flatten(obj, use, ignore)  # `flatten` all Int and Float32 except fields of Bar
(1, 5.0f0)

julia&gt; modify(string, obj, Int)   # `modify`: convert all Int to String
Foo{String,Symbol,Foo{Bar{String},Float64,Float32}}(&quot;1&quot;, :two, Foo{Bar{String},Float64,Float32}(Bar{String}(&quot;3&quot;), 4.0, 5.0f0))"><pre lang="jldoctest" class="notranslate"><code>julia&gt; using Flatten

julia&gt; struct Foo{A,B,C}
           a::A
           b::B
           c::C
       end

julia&gt; struct Bar{X}
           x::X
       end

julia&gt; obj = Foo(1, :two, Foo(Bar(3), 4.0, 5.0f0));

julia&gt; use = Union{Int, Float32}; # Return Int and Float32 fields

julia&gt; ignore = Bar;              # Dont return Bar or iterate over Bar fields

julia&gt; flatten(obj, use, ignore)  # `flatten` all Int and Float32 except fields of Bar
(1, 5.0f0)

julia&gt; modify(string, obj, Int)   # `modify`: convert all Int to String
Foo{String,Symbol,Foo{Bar{String},Float64,Float32}}("1", :two, Foo{Bar{String},Float64,Float32}(Bar{String}("3"), 4.0, 5.0f0))
</code></pre></div>
<p dir="auto">The default type used is <code>Real</code>. These rules also apply in <code>reconstruct</code>,
<code>update!</code> and <code>modify</code>.</p>
<h2 dir="auto"><a id="user-content-field-removal" class="anchor" aria-hidden="true" href="#field-removal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Field removal</h2>
<p dir="auto">There are often cases where you want to ignore certain fields that have the same
type as the fields you want to extract. Flatten.jl also
<a href="https://github.com/rafaqz/FieldMetadata.jl">FieldMetadata.jl</a> to provide
<code>@flattenable</code> macro and methods, allowing you to choose fields to include and
remove from flattening. The default is <code>true</code> for all fields.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Flatten
import Flatten: flattenable

@flattenable struct Bar{X,Y}
    x::X | true
    y::Y | false
end

flatten(Bar(1, 2))

# output
(1,)"><pre lang="jldoctest" class="notranslate"><code>using Flatten
import Flatten: flattenable

@flattenable struct Bar{X,Y}
    x::X | true
    y::Y | false
end

flatten(Bar(1, 2))

# output
(1,)
</code></pre></div>
<p dir="auto">Custom <code>@metadata</code> methods from FieldMetadata can be used, if they return a Bool.
You can also use custom functions that follow the following form, returning a boolean:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(::Type, ::Type{Var{:fieldname}}) = false"><pre><span class="pl-en">f</span>(<span class="pl-k">::</span><span class="pl-c1">Type</span>, <span class="pl-k">::</span><span class="pl-c1">Type{Var{:fieldname}}</span>) <span class="pl-k">=</span> <span class="pl-c1">false</span></pre></div>
<h1 dir="auto"><a id="user-content-metatdata-flattening" class="anchor" aria-hidden="true" href="#metatdata-flattening"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Metatdata flattening</h1>
<p dir="auto">Flatten also provides <code>metaflatten()</code> to flatten any FieldMetadata.jl
metadata for the same fields <code>flatten()</code> returns. This can be useful for attaching
information like descriptions or prior probability distributions to each field.
Regular field data can also be collected with convenience versions of metaflatten:
<code>fieldnameflatten</code>, <code>parentflatten</code>, <code>fieldtypeflatten</code> and <code>parenttypeflatten</code>
functions provide lists of fieldnames and types that may be useful for building
parameter display tables.</p>
<p dir="auto">This package was started by Robin Deits (@rdeits), and its early development
owes much to discussions and ideas from Jan Weidner (@jw3126) and Robin Deits.
"""</p>
<h1 dir="auto"><a id="user-content-reconstruct-and-modify-for-staticarrays" class="anchor" aria-hidden="true" href="#reconstruct-and-modify-for-staticarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>reconstruct</code> and <code>modify</code> for StaticArrays</h1>
<p dir="auto"><code>SArray</code> and other objects from StaticArrays.jl can not be constructed from their fields.
Dealing with this in the long term will require either a dependency on ConstructionBase.jl
in StaticArrays.jl, or a glue package that provides the required <code>constructorof</code> methods,
which for now you can define manually:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StaticArrays, ConstructionBase, Flatten

struct SArrayConstructor{S,N,L} end
(::SArrayConstructor{S,N,L})(data::NTuple{L,T}) where {S,T,N,L} = SArray{S,T,N,L}(data)

ConstructionBase.constructorof(sa::Type{&lt;:SArray{S,&lt;:Any,N,L}}) where {S,N,L} = 
    SArrayConstructor{S,N,L}()"><pre><span class="pl-k">using</span> StaticArrays, ConstructionBase, Flatten

<span class="pl-k">struct</span> SArrayConstructor{S,N,L} <span class="pl-k">end</span>
(<span class="pl-k">::</span><span class="pl-c1">SArrayConstructor{S,N,L}</span>)(data<span class="pl-k">::</span><span class="pl-c1">NTuple{L,T}</span>) <span class="pl-k">where</span> {S,T,N,L} <span class="pl-k">=</span> <span class="pl-c1">SArray</span><span class="pl-c1">{S,T,N,L}</span>(data)

ConstructionBase<span class="pl-k">.</span><span class="pl-en">constructorof</span>(sa<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:SArray{S,&lt;:Any,N,L}}</span>) <span class="pl-k">where</span> {S,N,L} <span class="pl-k">=</span> 
    <span class="pl-c1">SArrayConstructor</span><span class="pl-c1">{S,N,L}</span>()</pre></div>
</article></div>