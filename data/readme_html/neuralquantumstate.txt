<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-neuralquantumstatejl" class="anchor" aria-hidden="true" href="#neuralquantumstatejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NeuralQuantumState.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/mcompen/NeuralQuantumState.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3b8efac88099dd53d6afa6115165e8f45f6f015946d39754276705036162a64c/68747470733a2f2f7472617669732d63692e636f6d2f6d636f6d70656e2f4e657572616c5175616e74756d53746174652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mcompen/NeuralQuantumState.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/mcompen/NeuralQuantumState.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bc04b124cd30b77d571b07fb7a7b9c93763498ac65af102073e5f66d21f5a2c6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d636f6d70656e2f4e657572616c5175616e74756d53746174652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/mcompen/NeuralQuantumState.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://mcompen.github.io/NeuralQuantumState.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/da3a2bba2d4cd7ed2ac87f904530d833c90936b96a792c9088e8f169ed56e128/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d7265642e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-red.svg" style="max-width: 100%;"></a>
<a href="https://mcompen.github.io/NeuralQuantumState.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">Solving quantum many-body problems with a Neural Quantum State was first proposed in [1]. This package implements parallel sampling and optimization of many-body wavefunctions of arbitrary Hamiltonians.</p>
<p dir="auto">[1] Carleo, Giuseppe, and Matthias Troyer. "Solving the quantum many-body problem with artificial neural networks." Science 355.6325 (2017): 602-606.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Press <code>]</code> in the REPL and simply add the package by typing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.X) pkg&gt; add NeuralQuantumState"><pre>(v1<span class="pl-k">.</span>X) pkg<span class="pl-k">&gt;</span> add NeuralQuantumState</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia &gt; using Distributed
julia &gt; addprocs(2)  # Add no. of desired worker processes.
julia &gt; @everywhere using Random
julia &gt; @everywhere using NeuralQuantumState
julia &gt; @sync for i in workers()
            @async remotecall_wait(Random.seed!, i, i * 99999)
        end
julia &gt; NetSettings = NETSETTINGS(
            modelname = &quot;U_afh&quot;, # Marshall transformed AFH.
            repetitions =1000,
            n = 6,
            α = 3,
            mag0 = true,
            γ_decay = 0.997,
            mc_trials = 500,
            writetofile=true,
            init_therm_steps = 100,
            therm_steps = 50,
            stat_samples = 2000)
julia &gt; energy = run_NQS(NetSettings)"><pre>julia <span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed
julia <span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>)  <span class="pl-c"><span class="pl-c">#</span> Add no. of desired worker processes.</span>
julia <span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> Random
julia <span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> NeuralQuantumState
julia <span class="pl-k">&gt;</span> <span class="pl-c1">@sync</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">workers</span>()
            <span class="pl-c1">@async</span> <span class="pl-c1">remotecall_wait</span>(Random<span class="pl-k">.</span>seed!, i, i <span class="pl-k">*</span> <span class="pl-c1">99999</span>)
        <span class="pl-k">end</span>
julia <span class="pl-k">&gt;</span> NetSettings <span class="pl-k">=</span> <span class="pl-c1">NETSETTINGS</span>(
            modelname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>U_afh<span class="pl-pds">"</span></span>, <span class="pl-c"><span class="pl-c">#</span> Marshall transformed AFH.</span>
            repetitions <span class="pl-k">=</span><span class="pl-c1">1000</span>,
            n <span class="pl-k">=</span> <span class="pl-c1">6</span>,
            α <span class="pl-k">=</span> <span class="pl-c1">3</span>,
            mag0 <span class="pl-k">=</span> <span class="pl-c1">true</span>,
            γ_decay <span class="pl-k">=</span> <span class="pl-c1">0.997</span>,
            mc_trials <span class="pl-k">=</span> <span class="pl-c1">500</span>,
            writetofile<span class="pl-k">=</span><span class="pl-c1">true</span>,
            init_therm_steps <span class="pl-k">=</span> <span class="pl-c1">100</span>,
            therm_steps <span class="pl-k">=</span> <span class="pl-c1">50</span>,
            stat_samples <span class="pl-k">=</span> <span class="pl-c1">2000</span>)
julia <span class="pl-k">&gt;</span> energy <span class="pl-k">=</span> <span class="pl-c1">run_NQS</span>(NetSettings)</pre></div>
<h2 dir="auto"><a id="user-content-info" class="anchor" aria-hidden="true" href="#info"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Info</h2>
<p dir="auto">The author of this package is not affiliated with the authors of the original publication. See <a href="https://netket.org" rel="nofollow">NetKet</a> for the official C++ implementation.</p>
</article></div>