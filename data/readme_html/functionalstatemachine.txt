<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-functionalstatemachinejl" class="anchor" aria-hidden="true" href="#functionalstatemachinejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FunctionalStateMachine.jl</h1>
<p><a href="https://travis-ci.org/JuliaRobotics/FunctionalStateMachine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2f9136f503391bb668f1648d552639561a653b7c853786da9c3f7162855aa1ce/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f46756e6374696f6e616c53746174654d616368696e652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/FunctionalStateMachine.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaRobotics/FunctionalStateMachine.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8e0217be0d08d4ed96050ce9c2224a5cd4b0b2bc6833ff690ff613f434acc16a/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f46756e6374696f6e616c53746174654d616368696e652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaRobotics/FunctionalStateMachine.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://github.com/JuliaRobotics/FunctionalStateMachine.jl/issues"><img src="https://camo.githubusercontent.com/07c5609c506d1c144c7323c425d0d013339ca5064340ee0e844a26bcd0f4a566/68747470733a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f7265736f6c7574696f6e2f4a756c6961526f626f746963732f46756e6374696f6e616c53746174654d616368696e652e6a6c2e737667" alt="Average time to resolve an issue" data-canonical-src="https://isitmaintained.com/badge/resolution/JuliaRobotics/FunctionalStateMachine.jl.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaRobotics/FunctionalStateMachine.jl/issues"><img src="https://camo.githubusercontent.com/53e6d5d86639da450cf92e8be46bbce755f9dadb28c8e825fce15dcb9b027c32/68747470733a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f6f70656e2f4a756c6961526f626f746963732f46756e6374696f6e616c53746174654d616368696e652e6a6c2e737667" alt="Percentage of issues still open" data-canonical-src="https://isitmaintained.com/badge/open/JuliaRobotics/FunctionalStateMachine.jl.svg" style="max-width:100%;"></a></p>
<p>Build a state machine in Julia based on functions along with stepping and visualization tools</p>
<h2><a id="user-content-video-animation-example" class="anchor" aria-hidden="true" href="#video-animation-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Video Animation Example</h2>
<p>Click the Vimeo image as link to a FSM generated video animation of six concurrent state machines (as used in <a href="http://www.github.com/JuliaRobotics/IncrementalInference.jl">IncrementalInference.jl</a>).</p>
<p><a href="https://vimeo.com/454616769" title="Clique State Machine Concurrent Animation - Click to Watch!" rel="nofollow"><img src="https://user-images.githubusercontent.com/6412556/92198487-87b10900-ee42-11ea-8674-4a3867a74b65.png" alt="Clique State Machine Concurrent Animation" style="max-width:100%;"></a></p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<h2><a id="user-content-optional-system-dependencies" class="anchor" aria-hidden="true" href="#optional-system-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>[OPTIONAL] System Dependencies</h2>
<p>Visualization tools require a system install of <code>graphviz</code>.  Do Ubuntu/Debian Linux equivalent of:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="sudo apt-get install graphviz
"><pre>sudo apt-get install graphviz</pre></div>
<h2><a id="user-content-install-julia-package" class="anchor" aria-hidden="true" href="#install-julia-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install Julia Package</h2>
<p>Julia â‰¥ 0.7 add package</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.5) pkg&gt; add FunctionalStateMachine
"><pre>julia<span class="pl-k">&gt;</span> ]
(v1.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add FunctionalStateMachine</pre></div>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<h2><a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FunctionalStateMachine

## User state functions
function bar!(usrdata)
  println(&quot;do bar!&quot;)
  return FunctionalStateMachine.exitStateMachine
end

function foo!(usrdata)
  println(&quot;do foo!&quot;)
  return bar!
end

# no user data struct defined, so just pass Nothing
statemachine = StateMachine{Nothing}(next=foo!)
while statemachine(nothing, verbose=true); end

# or maybe limit number of steps
statemachine = StateMachine{Nothing}(next=foo!)
while statemachine(nothing, iterlimit=1); end
"><pre><span class="pl-k">using</span> FunctionalStateMachine

<span class="pl-c"><span class="pl-c">#</span># User state functions</span>
<span class="pl-k">function</span> <span class="pl-en">bar!</span>(usrdata)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>do bar!<span class="pl-pds">"</span></span>)
  <span class="pl-k">return</span> FunctionalStateMachine<span class="pl-k">.</span>exitStateMachine
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">foo!</span>(usrdata)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>do foo!<span class="pl-pds">"</span></span>)
  <span class="pl-k">return</span> bar!
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> no user data struct defined, so just pass Nothing</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{Nothing}</span>(next<span class="pl-k">=</span>foo!)
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(<span class="pl-c1">nothing</span>, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> or maybe limit number of steps</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{Nothing}</span>(next<span class="pl-k">=</span>foo!)
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(<span class="pl-c1">nothing</span>, iterlimit<span class="pl-k">=</span><span class="pl-c1">1</span>); <span class="pl-k">end</span></pre></div>
<h3><a id="user-content-watchdog-timeout" class="anchor" aria-hidden="true" href="#watchdog-timeout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Watchdog Timeout</h3>
<p>Sometimes it is useful to know that an FSM process will exit, either as intended or by throwing an error on timeout (much like a <a href="https://en.wikipedia.org/wiki/Watchdog_timer" rel="nofollow">Watchdog Timer</a>).  FSM uses Base.<code>InterruptException()</code> as a method of stopping a task that expires a <code>timeout::Real</code> [seconds].  Note, this functionality is not included by default in order to preserve a small memory footprint.  To use the timeout feature simply call the state machine with a timeout duration:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="userdata = nothing # any user data of type T
timeout = 3.0
while statemachine(userdata, timeout, verbose=true); end
"><pre>userdata <span class="pl-k">=</span> <span class="pl-c1">nothing</span> <span class="pl-c"><span class="pl-c">#</span> any user data of type T</span>
timeout <span class="pl-k">=</span> <span class="pl-c1">3.0</span>
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(userdata, timeout, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span></pre></div>
<h3><a id="user-content-recording-verbose-output-to-file" class="anchor" aria-hidden="true" href="#recording-verbose-output-to-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Recording Verbose Output to File</h3>
<p>Experience has shown that when a state machine gets stuck, it is often useful to write the <code>verbose</code> steps out to file as a bare minimum guide of where a system might be failing.  This can be done by passing in a <code>::IOStream</code> handle into <code>verbosefid</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="fid = open(&quot;/tmp/verboseFSM_001.log&quot;,&quot;w&quot;)
while statemachine(userdata, verbose=true, verbosefid=fid); end
close(fid)
"><pre>fid <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>/tmp/verboseFSM_001.log<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(userdata, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>, verbosefid<span class="pl-k">=</span>fid); <span class="pl-k">end</span>
<span class="pl-c1">close</span>(fid)</pre></div>
<p>This particular structure is chosen so that <code>@async</code> or other multithreaded uses of FSM can still write to a common <code>fid</code> and also allow the user to <code>flush(fid)</code> and <code>close(fid)</code> regardless of whether the FSM has stalled.  Might seem "boilerplate-esque", but it's much easier for developers to snuff out bugs in highly complicted interdependent and multithreaded, multi-state-machine architectures.</p>
<h2><a id="user-content-with-user-data-and-history" class="anchor" aria-hidden="true" href="#with-user-data-and-history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>With User Data and History</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="## Passing a data structure
mutable struct ExampleUserData
  x::Vector{Float64}
end

# or maybe record the state machine history
statemachine = StateMachine{ExampleUserData}(next=foo!)
eud = ExampleUserData(randn(10))
while statemachine(eud, recordhistory=true); end

# recover recorded state transition history, `::Vector{Tuple{DateTime,Int,Function,T}}`
hist = statemachine.history

# or maybe rerun a step on the data as it was at that time -- does not overwrite previous memory
new_eud_at_1 = sandboxStateMachineStep(hist, 1)
"><pre><span class="pl-c"><span class="pl-c">#</span># Passing a data structure</span>
<span class="pl-k">mutable struct</span> ExampleUserData
  x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> or maybe record the state machine history</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{ExampleUserData}</span>(next<span class="pl-k">=</span>foo!)
eud <span class="pl-k">=</span> <span class="pl-c1">ExampleUserData</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>))
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(eud, recordhistory<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> recover recorded state transition history, `::Vector{Tuple{DateTime,Int,Function,T}}`</span>
hist <span class="pl-k">=</span> statemachine<span class="pl-k">.</span>history

<span class="pl-c"><span class="pl-c">#</span> or maybe rerun a step on the data as it was at that time -- does not overwrite previous memory</span>
new_eud_at_1 <span class="pl-k">=</span> <span class="pl-c1">sandboxStateMachineStep</span>(hist, <span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-draw-state-pictures-with-graphviz" class="anchor" aria-hidden="true" href="#draw-state-pictures-with-graphviz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Draw State Pictures with Graphviz</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# ]add Graphs # in case the dependency is not installed yet

using Graphs

# run the state machine
statemachine = StateMachine{ExampleUserData}(next=foo!)
eud = ExampleUserData(randn(10))
while statemachine(eud, recordhistory=true); end

# draw the state machine
hist = statemachine.history
drawStateMachineHistory(hist, show=true)
"><pre><span class="pl-c"><span class="pl-c">#</span> ]add Graphs # in case the dependency is not installed yet</span>

<span class="pl-k">using</span> Graphs

<span class="pl-c"><span class="pl-c">#</span> run the state machine</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{ExampleUserData}</span>(next<span class="pl-k">=</span>foo!)
eud <span class="pl-k">=</span> <span class="pl-c1">ExampleUserData</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>))
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(eud, recordhistory<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> draw the state machine</span>
hist <span class="pl-k">=</span> statemachine<span class="pl-k">.</span>history
<span class="pl-c1">drawStateMachineHistory</span>(hist, show<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-multiple-state-machines-can-be-visualized-together" class="anchor" aria-hidden="true" href="#multiple-state-machines-can-be-visualized-together"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multiple state machines can be visualized together</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Graphs, FunctionalStateMachine

#...

# start multiple concurrent FSMs (this is only one)
## they are likely interdependent
statemachine = StateMachine{Nothing}(next=foo!)
while statemachine(nothing, recordhistory=true); end

# add all histories to the `hists::Dict` as follows
## ths example has userdata of type ::Nothing
hists = Dict{Symbol,Vector{Tuple{DateTime,Int,Function,Nothing}}}(:first =&gt; statemachine.history)

# generate all the images that will make up the video
animateStateMachineHistoryIntervalCompound(hists, interval=1)

# and convert images to video with ffmpeg as shell command
fps = 5
run(`ffmpeg -r 10 -i /tmp/caesar/csmCompound/csm_%d.png -c:v libtheora -vf fps=$fps -pix_fmt yuv420p -vf &quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&quot; -q 10 /tmp/caesar/csmCompound/out.ogv`)
@async run(`totem /tmp/caesar/csmCompound/out.ogv`)
"><pre><span class="pl-k">using</span> Graphs, FunctionalStateMachine

<span class="pl-c"><span class="pl-c">#</span>...</span>

<span class="pl-c"><span class="pl-c">#</span> start multiple concurrent FSMs (this is only one)</span>
<span class="pl-c"><span class="pl-c">#</span># they are likely interdependent</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{Nothing}</span>(next<span class="pl-k">=</span>foo!)
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(<span class="pl-c1">nothing</span>, recordhistory<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> add all histories to the `hists::Dict` as follows</span>
<span class="pl-c"><span class="pl-c">#</span># ths example has userdata of type ::Nothing</span>
hists <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Vector{Tuple{DateTime,Int,Function,Nothing}}}</span>(<span class="pl-c1">:first</span> <span class="pl-k">=&gt;</span> statemachine<span class="pl-k">.</span>history)

<span class="pl-c"><span class="pl-c">#</span> generate all the images that will make up the video</span>
<span class="pl-c1">animateStateMachineHistoryIntervalCompound</span>(hists, interval<span class="pl-k">=</span><span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> and convert images to video with ffmpeg as shell command</span>
fps <span class="pl-k">=</span> <span class="pl-c1">5</span>
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>ffmpeg -r 10 -i /tmp/caesar/csmCompound/csm_%d.png -c:v libtheora -vf fps=$fps -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -q 10 /tmp/caesar/csmCompound/out.ogv<span class="pl-pds">`</span></span>)
<span class="pl-c1">@async</span> <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>totem /tmp/caesar/csmCompound/out.ogv<span class="pl-pds">`</span></span>)</pre></div>
<p>can combine multiple concurrent histories of the state machine execution into the same image frames.  See function for more details.</p>
<h1><a id="user-content-lower-level-visualization-tools" class="anchor" aria-hidden="true" href="#lower-level-visualization-tools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lower Level Visualization tools</h1>
<h2><a id="user-content-animate-asyncronous-state-machine-transitions" class="anchor" aria-hidden="true" href="#animate-asyncronous-state-machine-transitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Animate Asyncronous State Machine Transitions</h2>
<p>The following example function shows several state machines that were run asyncronously can be synchronously animated as separate frames (see below for single frame with multiple information):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Dates, DocStringExtensions

&quot;&quot;&quot;
    $SIGNATURES

Draw many images in '/tmp/?/csm_%d.png' representing time synchronized state machine
events.

Notes
- State history must have previously been recorded.
&quot;&quot;&quot;
function animateStateMachines(histories::Vector{&lt;:Tuple}; frames::Int=100)

  startT = Dates.now()
  stopT = Dates.now()

  # get start and stop times across all cliques
  first = true
  # hist = somestatemachine.history
  for hist in histories
    if hist[1][1] &lt; startT
      startT = hist[1][1]
    end
    if first
      stopT = hist[end][1]
    end
    if stopT &lt; hist[end][1]
      stopT= hist[end][1]
    end
  end

  # export all figures
  folders = String[]
  count = 0
  for hist in histories
    count += 1
    retval = animateStateMachineHistoryByTime(hist, frames=frames, folder=&quot;sm$count&quot;, title=&quot;SM-$count&quot;, startT=startT, stopT=stopT)
    push!(folders, &quot;sm$count&quot;)
  end

  return folders
end

# animate the time via many png images in `/tmp`
animateCliqStateMachines([hist1; hist2], frames=100)
"><pre><span class="pl-k">using</span> Dates, DocStringExtensions

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    <span class="pl-v">$SIGNATURES</span></span>
<span class="pl-s"></span>
<span class="pl-s">Draw many images in '/tmp/?/csm_%d.png' representing time synchronized state machine</span>
<span class="pl-s">events.</span>
<span class="pl-s"></span>
<span class="pl-s">Notes</span>
<span class="pl-s">- State history must have previously been recorded.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> <span class="pl-en">animateStateMachines</span>(histories<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:Tuple}</span>; frames<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">100</span>)

  startT <span class="pl-k">=</span> Dates<span class="pl-k">.</span><span class="pl-c1">now</span>()
  stopT <span class="pl-k">=</span> Dates<span class="pl-k">.</span><span class="pl-c1">now</span>()

  <span class="pl-c"><span class="pl-c">#</span> get start and stop times across all cliques</span>
  first <span class="pl-k">=</span> <span class="pl-c1">true</span>
  <span class="pl-c"><span class="pl-c">#</span> hist = somestatemachine.history</span>
  <span class="pl-k">for</span> hist <span class="pl-k">in</span> histories
    <span class="pl-k">if</span> hist[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>] <span class="pl-k">&lt;</span> startT
      startT <span class="pl-k">=</span> hist[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> first
      stopT <span class="pl-k">=</span> hist[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> stopT <span class="pl-k">&lt;</span> hist[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]
      stopT<span class="pl-k">=</span> hist[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>

  <span class="pl-c"><span class="pl-c">#</span> export all figures</span>
  folders <span class="pl-k">=</span> String[]
  count <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> hist <span class="pl-k">in</span> histories
    count <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    retval <span class="pl-k">=</span> <span class="pl-c1">animateStateMachineHistoryByTime</span>(hist, frames<span class="pl-k">=</span>frames, folder<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sm<span class="pl-v">$count</span><span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SM-<span class="pl-v">$count</span><span class="pl-pds">"</span></span>, startT<span class="pl-k">=</span>startT, stopT<span class="pl-k">=</span>stopT)
    <span class="pl-c1">push!</span>(folders, <span class="pl-s"><span class="pl-pds">"</span>sm<span class="pl-v">$count</span><span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  <span class="pl-k">return</span> folders
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> animate the time via many png images in `/tmp`</span>
<span class="pl-c1">animateCliqStateMachines</span>([hist1; hist2], frames<span class="pl-k">=</span><span class="pl-c1">100</span>)</pre></div>
<p>This example will result in 100 images for both <code>hist1, hist</code> state machine history. Note the timestamps are used to synchronize animations images on concurrent state traversals, and can easily be made into a video with OpenShot or ffmpeg style tools.</p>
<h2><a id="user-content-previous-linear-time-multi-fsm-animation" class="anchor" aria-hidden="true" href="#previous-linear-time-multi-fsm-animation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Previous Linear Time Multi-FSM Animation</h2>
<p>A closely related function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="animateStateMachineHistoryByTime
"><pre>animateStateMachineHistoryByTime</pre></div>
<h1><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contribute</h1>
<p>Contributions and Issues welcome.</p>
</article></div>