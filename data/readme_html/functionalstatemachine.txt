<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-functionalstatemachinejl" class="anchor" aria-hidden="true" href="#functionalstatemachinejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FunctionalStateMachine.jl</h1>
<p><a href="https://travis-ci.org/JuliaRobotics/FunctionalStateMachine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5185a8831b792149a43aa5b3e450588d1014264b/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f46756e6374696f6e616c53746174654d616368696e652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/FunctionalStateMachine.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaRobotics/FunctionalStateMachine.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37b87c45af04bc0119791a7adc1f0a73d20d1dc1/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f46756e6374696f6e616c53746174654d616368696e652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaRobotics/FunctionalStateMachine.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Build a state machine in Julia based on functions along with stepping and visualization tools</p>
<h2><a id="user-content-video-animation-example" class="anchor" aria-hidden="true" href="#video-animation-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Video Animation Example</h2>
<p>See <a href="https://vimeo.com/341658405" rel="nofollow">Vimeo here for a short video example</a> of a three state machine concurrent animation.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<h2><a id="user-content-optional-system-dependencies" class="anchor" aria-hidden="true" href="#optional-system-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>[OPTIONAL] System Dependencies</h2>
<p>Visualization tools require a system install of <code>graphviz</code>.  Do Ubuntu/Debian Linux equivalent of:</p>
<div class="highlight highlight-source-shell"><pre>sudo apt-get install graphviz</pre></div>
<h2><a id="user-content-install-julia-package" class="anchor" aria-hidden="true" href="#install-julia-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install Julia Package</h2>
<p>Julia â‰¥ 0.7 add package</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ]
(v1<span class="pl-c1">.0</span>) pkg<span class="pl-k">&gt;</span> add FunctionalStateMachine</pre></div>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<h2><a id="user-content-basic" class="anchor" aria-hidden="true" href="#basic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FunctionalStateMachine

<span class="pl-c"><span class="pl-c">#</span># User state functions</span>
<span class="pl-k">function</span> <span class="pl-en">bar!</span>(usrdata)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>do bar!<span class="pl-pds">"</span></span>)
  <span class="pl-k">return</span> FunctionalStateMachine<span class="pl-k">.</span>exitStateMachine
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">foo!</span>(usrdata)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>do foo!<span class="pl-pds">"</span></span>)
  <span class="pl-k">return</span> bar!
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> no user data struct defined, so just pass Nothing</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{Nothing}</span>(next<span class="pl-k">=</span>foo!)
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(<span class="pl-c1">nothing</span>, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> or maybe limit number of steps</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{Nothing}</span>(next<span class="pl-k">=</span>foo!)
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(<span class="pl-c1">nothing</span>, iterlimit<span class="pl-k">=</span><span class="pl-c1">1</span>); <span class="pl-k">end</span></pre></div>
<h2><a id="user-content-with-user-data-and-history" class="anchor" aria-hidden="true" href="#with-user-data-and-history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>With User Data and History</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># Passing a data structure</span>
<span class="pl-k">mutable struct</span> ExampleUserData
  x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> or maybe record the state machine history</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{ExampleUserData}</span>(next<span class="pl-k">=</span>foo!)
eud <span class="pl-k">=</span> <span class="pl-c1">ExampleUserData</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>))
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(eud, recordhistory<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> recover recorded state transition history, `::Vector{Tuple{DateTime,Int,Function,T}}`</span>
hist <span class="pl-k">=</span> statemachine<span class="pl-k">.</span>history

<span class="pl-c"><span class="pl-c">#</span> or maybe rerun a step on the data as it was at that time -- does not overwrite previous memory</span>
new_eud_at_1 <span class="pl-k">=</span> <span class="pl-c1">sandboxStateMachineStep</span>(hist, <span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-draw-state-pictures-with-graphviz" class="anchor" aria-hidden="true" href="#draw-state-pictures-with-graphviz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Draw State Pictures with Graphviz</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> ]add Graphs # in case the dependency is not installed yet</span>

<span class="pl-k">using</span> Graphs

<span class="pl-c"><span class="pl-c">#</span> run the state machine</span>
statemachine <span class="pl-k">=</span> <span class="pl-c1">StateMachine</span><span class="pl-c1">{ExampleUserData}</span>(next<span class="pl-k">=</span>foo!)
eud <span class="pl-k">=</span> <span class="pl-c1">ExampleUserData</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>))
<span class="pl-k">while</span> <span class="pl-c1">statemachine</span>(eud, recordhistory<span class="pl-k">=</span><span class="pl-c1">true</span>); <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> draw the state machine</span>
hist <span class="pl-k">=</span> statemachine<span class="pl-k">.</span>history
<span class="pl-c1">drawStateMachineHistory</span>(hist, show<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-animate-asyncronous-state-machine-transitions" class="anchor" aria-hidden="true" href="#animate-asyncronous-state-machine-transitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Animate Asyncronous State Machine Transitions</h2>
<p>The following example function shows several state machines that were run asyncronously can be synchronously animated as separate frames (see below for single frame with multiple information):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Dates, DocStringExtensions

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    <span class="pl-v">$SIGNATURES</span></span>
<span class="pl-s"></span>
<span class="pl-s">Draw many images in '/tmp/?/csm_%d.png' representing time synchronized state machine</span>
<span class="pl-s">events.</span>
<span class="pl-s"></span>
<span class="pl-s">Notes</span>
<span class="pl-s">- State history must have previously been recorded.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> <span class="pl-en">animateStateMachines</span>(histories<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:Tuple}</span>; frames<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">100</span>)

  startT <span class="pl-k">=</span> Dates<span class="pl-k">.</span><span class="pl-c1">now</span>()
  stopT <span class="pl-k">=</span> Dates<span class="pl-k">.</span><span class="pl-c1">now</span>()

  <span class="pl-c"><span class="pl-c">#</span> get start and stop times across all cliques</span>
  first <span class="pl-k">=</span> <span class="pl-c1">true</span>
  <span class="pl-c"><span class="pl-c">#</span> hist = somestatemachine.history</span>
  <span class="pl-k">for</span> hist <span class="pl-k">in</span> histories
    <span class="pl-k">if</span> hist[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>] <span class="pl-k">&lt;</span> startT
      startT <span class="pl-k">=</span> hist[<span class="pl-c1">1</span>][<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> first
      stopT <span class="pl-k">=</span> hist[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
    <span class="pl-k">if</span> stopT <span class="pl-k">&lt;</span> hist[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]
      stopT<span class="pl-k">=</span> hist[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>

  <span class="pl-c"><span class="pl-c">#</span> export all figures</span>
  folders <span class="pl-k">=</span> String[]
  count <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> hist <span class="pl-k">in</span> histories
    count <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    retval <span class="pl-k">=</span> <span class="pl-c1">animateStateMachineHistoryByTime</span>(hist, frames<span class="pl-k">=</span>frames, folder<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>sm<span class="pl-v">$count</span><span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SM-<span class="pl-v">$count</span><span class="pl-pds">"</span></span>, startT<span class="pl-k">=</span>startT, stopT<span class="pl-k">=</span>stopT)
    <span class="pl-c1">push!</span>(folders, <span class="pl-s"><span class="pl-pds">"</span>sm<span class="pl-v">$count</span><span class="pl-pds">"</span></span>)
  <span class="pl-k">end</span>

  <span class="pl-k">return</span> folders
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> animate the time via many png images in `/tmp`</span>
<span class="pl-c1">animateCliqStateMachines</span>([hist1; hist2], frames<span class="pl-k">=</span><span class="pl-c1">100</span>)</pre></div>
<p>This example will result in 100 images for both <code>hist1, hist</code> state machine history. Note the timestamps are used to synchronize animations images on concurrent state traversals, and can easily be made into a video with OpenShot or ffmpeg style tools.</p>
<h2><a id="user-content-animate-multiple-state-machines-together" class="anchor" aria-hidden="true" href="#animate-multiple-state-machines-together"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Animate Multiple State Machines Together</h2>
<p>A closely related function</p>
<div class="highlight highlight-source-julia"><pre>animateStateMachineHistoryByTime</pre></div>
<p>can combine multiple concurrent histories of the state machine execution into the same image frames.  See function for more details.</p>
<h1><a id="user-content-contribute" class="anchor" aria-hidden="true" href="#contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contribute</h1>
<p>Contributions and Issues welcome.</p>
</article></div>