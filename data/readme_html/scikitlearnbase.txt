<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-scikitlearnbasejl" class="anchor" aria-hidden="true" href="#scikitlearnbasejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ScikitLearnBase.jl</h2>
<p>This package exposes the scikit-learn interface. Packages that implement this
interface can be used in conjunction with <a href="https://github.com/cstjean/ScikitLearn.jl">ScikitLearn.jl</a> (pipelines, cross-validation, hyperparameter tuning, ...)</p>
<p>This is an intentionally slim package (~100 LOC, no dependencies). That way,
ML libraries can <code>import ScikitLearnBase</code> without dragging along all of
<code>ScikitLearn</code>'s dependencies.</p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>The docs contain <a href="http://scikitlearnjl.readthedocs.org/en/latest/api/" rel="nofollow">an overview of the API</a> and a <a href="docs/API.md">more thorough specification</a>.</p>
<p>There are two implementation strategies for an existing machine learning package:</p>
<ul>
<li><em>Create a new type that wraps the existing type</em>. The new type can usually be written entirely on top of the existing codebase (i.e. without modifying it). This gives more implementation freedom, and a more consistent interface amongst the various ScikitLearn.jl models. Here's an <a href="https://github.com/cstjean/DecisionTree.jl/blob/2722950c8f0c5e5c62204364308e28d4123383cb/src/scikitlearnAPI.jl">example</a> from DecisionTree.jl</li>
<li><em>Use the existing type</em>. This requires less code, and is usually better when the model type already contains the hyperparameters / fitting arguments.</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>For models with simple hyperparameters, it boils down to this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> ScikitLearnBase

type NaiveBayes
    <span class="pl-c"><span class="pl-c">#</span> The model hyperparameters (not learned from data)</span>
    bias<span class="pl-k">::</span><span class="pl-c1">Float64</span>

    <span class="pl-c"><span class="pl-c">#</span> The parameters learned from data</span>
    counts<span class="pl-k">::</span><span class="pl-c1">Matrix{Int}</span>
    
    <span class="pl-c"><span class="pl-c">#</span> A constructor that accepts the hyperparameters as keyword arguments</span>
    <span class="pl-c"><span class="pl-c">#</span> with sensible defaults</span>
    <span class="pl-en">NaiveBayes</span>(; bias<span class="pl-k">=</span><span class="pl-c1">0.0</span>f0) <span class="pl-k">=</span> <span class="pl-c1">new</span>(bias)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> This will define `clone`, `set_params!` and `get_params` for the model</span>
ScikitLearnBase<span class="pl-k">.</span><span class="pl-c1">@declare_hyperparameters</span>(NaiveBayes, [<span class="pl-c1">:bias</span>])

<span class="pl-c"><span class="pl-c">#</span> NaiveBayes is a classifier</span>
ScikitLearnBase<span class="pl-k">.</span><span class="pl-en">is_classifier</span>(<span class="pl-k">::</span><span class="pl-c1">NaiveBayes</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span>   <span class="pl-c"><span class="pl-c">#</span> not required for transformers</span>

<span class="pl-k">function</span> ScikitLearnBase<span class="pl-k">.</span><span class="pl-en">fit!</span>(model<span class="pl-k">::</span><span class="pl-c1">NaiveBayes</span>, X, y)
    <span class="pl-c"><span class="pl-c">#</span> X should be of size (n_sample, n_feature)</span>
    <span class="pl-k">....</span> <span class="pl-c"><span class="pl-c">#</span> modify model.counts here</span>
    <span class="pl-k">return</span> model
<span class="pl-k">end</span>

<span class="pl-k">function</span> ScikitLearnBase<span class="pl-k">.</span><span class="pl-en">predict</span>(model<span class="pl-k">::</span><span class="pl-c1">NaiveBayes</span>, X)
    <span class="pl-k">....</span> <span class="pl-c"><span class="pl-c">#</span> returns a vector of predicted classes here</span>
<span class="pl-k">end</span></pre></div>
<p>Models with more complex hyperparameter specifications should implement <code>clone</code>,
<code>get_params</code> and <code>set_params!</code> explicitly instead of using
<code>@declare_hyperparameters</code>.</p>
<p>More examples of PRs that implement the interface: <a href="https://github.com/davidavdav/GaussianMixtures.jl/pull/18/files">GaussianMixtures.jl</a>, <a href="https://github.com/STOR-i/GaussianProcesses.jl/pull/17/files">GaussianProcesses.jl</a>, <a href="https://github.com/bensadeghi/DecisionTree.jl/pull/29/files">DecisionTree.jl</a>, <a href="https://github.com/madeleineudell/LowRankModels.jl/pull/56/files">LowRankModels.jl</a></p>
<p>Note: if the model performs unsupervised learning, implement <code>transform</code>
instead of <code>predict</code>.</p>
<p>Once your library implements the API, <a href="https://github.com/cstjean/ScikitLearn.jl/issues">file an
issue/PR</a> to add it to
the <a href="http://scikitlearnjl.readthedocs.io/en/latest/models/#julia-models" rel="nofollow">list of models</a>.</p>
</article></div>