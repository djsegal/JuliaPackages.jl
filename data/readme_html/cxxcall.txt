<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cxxcall" class="anchor" aria-hidden="true" href="#cxxcall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CxxCall</h1>
<p dir="auto"><a href="https://jw3126.github.io/CxxCall.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://jw3126.github.io/CxxCall.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/jw3126/CxxCall.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/jw3126/CxxCall.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jw3126/CxxCall.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/98ad2a75f447d6f336bb1af00d2c1be2a191a4a5f498efbd667a237e8950bfb4/68747470733a2f2f636f6465636f762e696f2f67682f6a77333132362f43787843616c6c2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jw3126/CxxCall.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/jw3126/CxxCall.jl">CxxCall</a> allows calling C++ code from Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CxxCall
...
@cxx mylib function add(x::Cint, y::Cint)::Cfloat
    &quot;&quot;&quot;
    float ret = x + y;
    std::cout &lt;&lt; &quot;Welcome to libAddCxx&quot; &lt;&lt; std::endl;
    std::cout &lt;&lt; &quot;x=&quot; &lt;&lt; x &lt;&lt; &quot; y=&quot; &lt;&lt; y &lt;&lt; &quot; ret=&quot; &lt;&lt; ret &lt;&lt; std::endl;
    return ret;
    &quot;&quot;&quot;
end
..."><pre><span class="pl-k">using</span> CxxCall
<span class="pl-k">...</span>
<span class="pl-c1">@cxx</span> mylib <span class="pl-k">function</span> <span class="pl-en">add</span>(x<span class="pl-k">::</span><span class="pl-c1">Cint</span>, y<span class="pl-k">::</span><span class="pl-c1">Cint</span>)<span class="pl-k">::</span><span class="pl-c1">Cfloat</span>
    <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">    float ret = x + y;</span>
<span class="pl-s">    std::cout &lt;&lt; "Welcome to libAddCxx" &lt;&lt; std::endl;</span>
<span class="pl-s">    std::cout &lt;&lt; "x=" &lt;&lt; x &lt;&lt; " y=" &lt;&lt; y &lt;&lt; " ret=" &lt;&lt; ret &lt;&lt; std::endl;</span>
<span class="pl-s">    return ret;</span>
<span class="pl-s">    <span class="pl-pds">"""</span></span>
<span class="pl-k">end</span>
<span class="pl-k">...</span></pre></div>
<p dir="auto">For complete examples check out the tests.</p>
<h1 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h1>
<ul dir="auto">
<li><a href="https://github.com/jw3126/CxxCall.jl">CxxCall.jl</a> is just syntactic sugar on top of
<a href="https://github.com/eschnett/CxxInterface.jl">CxxInterface.jl</a>. The actual work is done by CxxInterface.jl.</li>
</ul>
<h1 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h1>
<ul dir="auto">
<li><a href="https://github.com/JuliaInterop/Cxx.jl">Cxx.jl</a> allows to mix julia and C++ code. It is an amazing proof of concept, but notoriously hard to maintain.</li>
<li><a href="https://github.com/JuliaInterop/CxxWrap.jl">CxxWrap.jl</a> is probably the most mature option.
The user specifies the wrapping on the C++ side.</li>
<li><a href="https://github.com/eschnett/CxxInterface.jl">CxxInterface.jl</a>.
Wrappers are specified on the julia side using string manipulation. Compared to the above alternatives, this approach is very simple.</li>
<li><code>Base.ccall</code>. Writing a C-API and calling it manually using <code>ccall</code> is always an option. If templates are involved the amount of code becomes unwieldy quickly however.</li>
</ul>
</article></div>