<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cmpfit" class="anchor" aria-hidden="true" href="#cmpfit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CMPFit</h1>
<h2><a id="user-content-a-julia-wrapper-for-the-mpfit-library-minpack-minimization" class="anchor" aria-hidden="true" href="#a-julia-wrapper-for-the-mpfit-library-minpack-minimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A Julia wrapper for the <code>mpfit</code> library (MINPACK minimization).</h2>
<p><a href="https://travis-ci.org/gcalderone/CMPFit.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/65b657c6d1a819cd1d04e31d889ecd0985b073134dbed7bb84c65463994251ad/68747470733a2f2f7472617669732d63692e6f72672f6763616c6465726f6e652f434d504669742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gcalderone/CMPFit.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The <code>CMPFit.jl</code> package is a wrapper for the <a href="https://www.physics.wisc.edu/~craigm/idl/cmpfit.html" rel="nofollow"><code>mpfit</code> C-library</a> by Craig Markwardt, providing access to the the <a href="http://www.netlib.org/minpack/" rel="nofollow">MINPACK</a> implementation of the
<a href="https://en.wikipedia.org/wiki/Levenberg%E2%80%93Marquardt_algorithm" rel="nofollow">Levenberg-Marquardt algorithm</a>, and allowing simple and quick solutions to Least Squares minimization problems in Julia.</p>
<p><strong>This is a wrapper for a C library, hence it uses a binary library compiled from C.</strong>
Check the <a href="https://github.com/JuliaNLSolvers/LsqFit.jl">LsqFit</a> package for a pure Julia solution.</p>
<hr>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In the Julia REPL type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add CMPFit
"><pre>] add CMPFit</pre></div>
<p>This will automaticaly download the binary <code>cmpfit</code> library (v1.4) as an artifact matching your platform.</p>
<hr>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Usage is very simple: given a set of observed data and uncertainties, define a (whatever complex) Julia function to evaluate a model to be compared with the data, and ask <code>cmpfit</code> to find the model parameter values which best fit the data.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CMPFit

# Independent variable
x = [-1.7237128E+00,1.8712276E+00,-9.6608055E-01,
    -2.8394297E-01,1.3416969E+00,1.3757038E+00,
    -1.3703436E+00,4.2581975E-02,-1.4970151E-01,
    8.2065094E-01]

# Observed data
y = [-4.4494256E-02,8.7324673E-01,7.4443483E-01,
     4.7631559E+00,1.7187297E-01,1.1639182E-01,
     1.5646480E+00,5.2322268E+00,4.2543168E+00,
     6.2792623E-01]

# Data uncertainties
e = fill(0., size(y)) .+ 0.5

# Define a model (actually a Gaussian curve)
function GaussModel(x::Vector{Float64}, p::Vector{Float64})
  sig2 = p[4] * p[4]
  xc = @. x - p[3]
  model = @. p[2] * exp(-0.5 * xc * xc / sig2) + p[1]
  return model
end

# Guess model parameters
param = [0.0, 1.0, 1.0, 1.0]

# Call `cmpfit` and print the results:
res = cmpfit(x, y, e, GaussModel, param);
println(res)
"><pre><span class="pl-k">using</span> CMPFit

<span class="pl-c"><span class="pl-c">#</span> Independent variable</span>
x <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.7237128E+00</span>,<span class="pl-c1">1.8712276E+00</span>,<span class="pl-k">-</span><span class="pl-c1">9.6608055E-01</span>,
    <span class="pl-k">-</span><span class="pl-c1">2.8394297E-01</span>,<span class="pl-c1">1.3416969E+00</span>,<span class="pl-c1">1.3757038E+00</span>,
    <span class="pl-k">-</span><span class="pl-c1">1.3703436E+00</span>,<span class="pl-c1">4.2581975E-02</span>,<span class="pl-k">-</span><span class="pl-c1">1.4970151E-01</span>,
    <span class="pl-c1">8.2065094E-01</span>]

<span class="pl-c"><span class="pl-c">#</span> Observed data</span>
y <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">4.4494256E-02</span>,<span class="pl-c1">8.7324673E-01</span>,<span class="pl-c1">7.4443483E-01</span>,
     <span class="pl-c1">4.7631559E+00</span>,<span class="pl-c1">1.7187297E-01</span>,<span class="pl-c1">1.1639182E-01</span>,
     <span class="pl-c1">1.5646480E+00</span>,<span class="pl-c1">5.2322268E+00</span>,<span class="pl-c1">4.2543168E+00</span>,
     <span class="pl-c1">6.2792623E-01</span>]

<span class="pl-c"><span class="pl-c">#</span> Data uncertainties</span>
e <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">0.</span>, <span class="pl-c1">size</span>(y)) <span class="pl-k">.+</span> <span class="pl-c1">0.5</span>

<span class="pl-c"><span class="pl-c">#</span> Define a model (actually a Gaussian curve)</span>
<span class="pl-k">function</span> <span class="pl-en">GaussModel</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, p<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)
  sig2 <span class="pl-k">=</span> p[<span class="pl-c1">4</span>] <span class="pl-k">*</span> p[<span class="pl-c1">4</span>]
  xc <span class="pl-k">=</span> <span class="pl-c1">@.</span> x <span class="pl-k">-</span> p[<span class="pl-c1">3</span>]
  model <span class="pl-k">=</span> <span class="pl-c1">@.</span> p[<span class="pl-c1">2</span>] <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">0.5</span> <span class="pl-k">*</span> xc <span class="pl-k">*</span> xc <span class="pl-k">/</span> sig2) <span class="pl-k">+</span> p[<span class="pl-c1">1</span>]
  <span class="pl-k">return</span> model
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Guess model parameters</span>
param <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]

<span class="pl-c"><span class="pl-c">#</span> Call `cmpfit` and print the results:</span>
res <span class="pl-k">=</span> <span class="pl-c1">cmpfit</span>(x, y, e, GaussModel, param);
<span class="pl-c1">println</span>(res)</pre></div>
<p>The value returned by <code>cmpfit</code> is a Julia structure.  You may look at its content with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dump(res)
"><pre><span class="pl-c1">dump</span>(res)</pre></div>
<p>Specifically, the best fit parameter values and their 1-sigma uncertainties are:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="println(res.param)
println(res.perror)
"><pre><span class="pl-c1">println</span>(res<span class="pl-k">.</span>param)
<span class="pl-c1">println</span>(res<span class="pl-k">.</span>perror)</pre></div>
<p><code>CMPFit</code> mirrors all the facilities provided by the underlying C-library, e.g. a parameter can be fixed during the fit, or its value limited to a specific range. Moreover, the whole fitting process may be customized for, e.g., limiting the maximum number of model evaluation, or change the relative chi-squared convergence criterium. E.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Set guess parameters
param = [0.5, 4.5, 1.0, 1.0]

# Create the `parinfo` structures for the 4 parameters used in the 
# example above:
pinfo = CMPFit.Parinfo(4)

# Fix the value of the 1st parameter:
pinfo[1].fixed = 1

# Set a lower (4) and upper limit (5) for the 2nd parameter
pinfo[2].limited = (1,1)
pinfo[2].limits = (4, 5)

# Create a `config` structure
config = CMPFit.Config()

# Limit the maximum function evaluation to 200
config.maxfev = 200

# Change the chi-squared convergence criterium:
config.ftol = 1.e-5

# Re-run the minimization process
res = cmpfit(x, y, e, GaussModel, param, parinfo=pinfo, config=config);
println(res)
"><pre><span class="pl-c"><span class="pl-c">#</span> Set guess parameters</span>
param <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">4.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>]

<span class="pl-c"><span class="pl-c">#</span> Create the `parinfo` structures for the 4 parameters used in the </span>
<span class="pl-c"><span class="pl-c">#</span> example above:</span>
pinfo <span class="pl-k">=</span> CMPFit<span class="pl-k">.</span><span class="pl-c1">Parinfo</span>(<span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Fix the value of the 1st parameter:</span>
pinfo[<span class="pl-c1">1</span>]<span class="pl-k">.</span>fixed <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-c"><span class="pl-c">#</span> Set a lower (4) and upper limit (5) for the 2nd parameter</span>
pinfo[<span class="pl-c1">2</span>]<span class="pl-k">.</span>limited <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
pinfo[<span class="pl-c1">2</span>]<span class="pl-k">.</span>limits <span class="pl-k">=</span> (<span class="pl-c1">4</span>, <span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> Create a `config` structure</span>
config <span class="pl-k">=</span> CMPFit<span class="pl-k">.</span><span class="pl-c1">Config</span>()

<span class="pl-c"><span class="pl-c">#</span> Limit the maximum function evaluation to 200</span>
config<span class="pl-k">.</span>maxfev <span class="pl-k">=</span> <span class="pl-c1">200</span>

<span class="pl-c"><span class="pl-c">#</span> Change the chi-squared convergence criterium:</span>
config<span class="pl-k">.</span>ftol <span class="pl-k">=</span> <span class="pl-c1">1.e-5</span>

<span class="pl-c"><span class="pl-c">#</span> Re-run the minimization process</span>
res <span class="pl-k">=</span> <span class="pl-c1">cmpfit</span>(x, y, e, GaussModel, param, parinfo<span class="pl-k">=</span>pinfo, config<span class="pl-k">=</span>config);
<span class="pl-c1">println</span>(res)</pre></div>
<p>See <a href="https://www.physics.wisc.edu/~craigm/idl/cmpfit.html" rel="nofollow">Craig's webpage</a> for further documentation on the <code>config</code> and <code>parinfo</code> structures.</p>
</article></div>