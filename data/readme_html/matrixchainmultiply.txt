<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-matrixchainmultiply" class="anchor" aria-hidden="true" href="#matrixchainmultiply"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatrixChainMultiply</h1>
<p><a href="https://travis-ci.org/AustinPrivett/MatrixChainMultiply.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4ed09e9c0381ca7d23d96cdaac88c109eb8effbc44824e04e8a6a70063b01d30/68747470733a2f2f7472617669732d63692e6f72672f41757374696e507269766574742f4d6174726978436861696e4d756c7469706c792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/AustinPrivett/MatrixChainMultiply.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/AustinPrivett/matrixchainmultiply-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9a71f4be7137184a3f41ad206f6f2b72cddac3cbe63798243fa4c31623ad9919/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f653179386c367739626a637577616d653f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/e1y8l6w9bjcuwame?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/AustinPrivett/MatrixChainMultiply.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d40cf15505407c36886d2bc497b5d8e03ae0325840f53313f1687b48900866ae/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f41757374696e507269766574742f4d6174726978436861696e4d756c7469706c792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/AustinPrivett/MatrixChainMultiply.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>The cost of multiplying a chain of matrices can vary significantly (e.g., by 1-2 orders of magnitude in real problems) depending on the order in which the multiplication steps are applied. The
<a href="https://www.wikiwand.com/en/Matrix_chain_multiplication" rel="nofollow">Matrix chain multiplication</a>
algorithm applied here (described in <em>Introduction to Algorithms, 3rd Edition</em>
by Cormen et al.) finds the optimal multiplication sequence.</p>
<p>With Julia, it is easy to allow for specialization on the matrix types.
For example, the types given in the <a href="https://github.com/JuliaComputing/ArrayFire.jl">ArrayFire.jl</a> package or matrices of matrices (block matrices) should work, too. To be clear, the <code>*(x, y)</code> that applies to a specific types of <code>x</code> and <code>y</code> is automatically used with Julia's multiple-dispatch system after the operation order is optimized.</p>
<h2><a id="user-content-installing-this-package" class="anchor" aria-hidden="true" href="#installing-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing this Package</h2>
<p>Since this package is not registered, you must install it by cloning. To add this package, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/AustinPrivett/MatrixChainMultiply.jl&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/AustinPrivett/MatrixChainMultiply.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-using-this-package" class="anchor" aria-hidden="true" href="#using-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using this Package</h2>
<p>The only function most users should need is <code>matrixchainmultiply</code>,
added to the scope by writing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MatrixChainMultiply
using BenchmarkTools

a = rand(1000,1000)
b = rand(1000,100)
c = rand(100, 500)
d = rand(500)

@benchmark result1 = matrixchainmultiply(a,b,c,d)
@benchmark result2 = *(a,b,c,d)
"><pre><span class="pl-k">using</span> MatrixChainMultiply
<span class="pl-k">using</span> BenchmarkTools

a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>)
b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">100</span>)
c <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>, <span class="pl-c1">500</span>)
d <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">500</span>)

<span class="pl-c1">@benchmark</span> result1 <span class="pl-k">=</span> <span class="pl-c1">matrixchainmultiply</span>(a,b,c,d)
<span class="pl-c1">@benchmark</span> result2 <span class="pl-k">=</span> <span class="pl-k">*</span>(a,b,c,d)</pre></div>
<p>which gives</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; @benchmark result1 = matrixchainmultiply(a,b,c,d)
BenchmarkTools.Trial:
  memory estimate:  18.45 KiB
  allocs estimate:  42
  --------------
  minimum time:     265.715 μs (0.00% GC)
  median time:      299.071 μs (0.00% GC)
  mean time:        329.042 μs (0.16% GC)
  maximum time:     4.162 ms (74.04% GC)
  --------------
  samples:          10000
  evals/sample:     1

julia&gt; @benchmark result2 = *(a,b,c,d)
BenchmarkTools.Trial:
  memory estimate:  4.59 MiB
  allocs estimate:  5
  --------------
  minimum time:     4.178 ms (0.00% GC)
  median time:      4.765 ms (0.00% GC)
  mean time:        5.281 ms (8.05% GC)
  maximum time:     11.310 ms (18.85% GC)
  --------------
  samples:          944
  evals/sample:     1
"><pre><code>julia&gt; @benchmark result1 = matrixchainmultiply(a,b,c,d)
BenchmarkTools.Trial:
  memory estimate:  18.45 KiB
  allocs estimate:  42
  --------------
  minimum time:     265.715 μs (0.00% GC)
  median time:      299.071 μs (0.00% GC)
  mean time:        329.042 μs (0.16% GC)
  maximum time:     4.162 ms (74.04% GC)
  --------------
  samples:          10000
  evals/sample:     1

julia&gt; @benchmark result2 = *(a,b,c,d)
BenchmarkTools.Trial:
  memory estimate:  4.59 MiB
  allocs estimate:  5
  --------------
  minimum time:     4.178 ms (0.00% GC)
  median time:      4.765 ms (0.00% GC)
  mean time:        5.281 ms (8.05% GC)
  maximum time:     11.310 ms (18.85% GC)
  --------------
  samples:          944
  evals/sample:     1
</code></pre></div>
<p>You can see the optimal ordering and the cost of the operation</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="matrixchainmultiply(a',b,c,d; printout=true)
"><pre><code>matrixchainmultiply(a',b,c,d; printout=true)
</code></pre></div>
<p>Note that the optional keyword argument <code>printout=true</code> prints out the
optimal multiplication order and the number of FLOPS in case you want
to investigate. It is <code>false</code> by default.</p>
<h2><a id="user-content-when-to-use-this" class="anchor" aria-hidden="true" href="#when-to-use-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>When to use this</h2>
<p>It is certainly
possible to see speedups of one or two orders of magnitude through the
use of the optimal operation order generated here.</p>
<p>If all matrices are the same size, the overhead of the optimization is
not worth the (non-existing) benefit.</p>
<h2><a id="user-content-future-improvements" class="anchor" aria-hidden="true" href="#future-improvements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future improvements</h2>
<ul>
<li>Recognize situations that don't need the analysis to eliminate the
overhead (allowing for a more ubiquitous use of <code>matrixchainmultiply(...)</code>
instead of <code>*(...)</code>).</li>
<li>For repeated uses, given some matrix size sequence (so at run time), produce
the function a single time at run time so that the analysis isn't done
unnecessarily.</li>
<li>Faster or more general algorithms (i.e., those that apply to the general
tensor problem) are certainly desirable if you would like to add them.</li>
</ul>
<h2><a id="user-content-similar-package" class="anchor" aria-hidden="true" href="#similar-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Similar Package</h2>
<p>It has come to my attention that another package implementing this
is <a href="https://github.com/LMescheder/DynMultiply.jl">DynMultiply.jl</a>.</p>
</article></div>