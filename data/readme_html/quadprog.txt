<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-quadprogjl" class="anchor" aria-hidden="true" href="#quadprogjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quadprog.jl</h1>
<p>A wrapper around Ipopt.jl to solve quadratic programming problems.
This package provides the function <code>quadprog</code> which calls the
<code>Ipopt.jl</code> library for Interior Point Nonlinear Optimization.  No
other solver is required.</p>
<p><a href="https://travis-ci.org/harmeling/Quadprog.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc5de165f8f029bdbbae842f60eace988760d57c/68747470733a2f2f7472617669732d63692e6f72672f6861726d656c696e672f5175616470726f672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/harmeling/Quadprog.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Install via the package manager,</p>
<pre><code>Pkg.add("Quadprog")
</code></pre>
<h2><a id="user-content-quadratic-programming" class="anchor" aria-hidden="true" href="#quadratic-programming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quadratic programming</h2>
<p>The provided function <code>quadprog</code> solves the problem</p>
<pre><code>min  0.5 * x' * Q * x + c' * x
s.t. A   * x &lt;= b
     Aeq * x == beq
     lb &lt;= x &lt;= ub
start optimization at x0
</code></pre>
<p>where <code>Q</code> is a symmetric matrix.</p>
<p>Only the parameters <code>Q</code> and <code>c</code> are required.  The others are keyword
arguments that could be omitted and/or given in any order.</p>
<p>The full signature of <code>quadprog</code> with its defaults is</p>
<pre><code>quadprog(Q, c;
         A   =  Array(Float64, (0, length(c))),
         b   =  Array(Float64, 0),
         Aeq =  Array(Float64, (0, length(c))),
         beq =  Array(Float64, 0),
         lb  = -Inf*ones(length(c)),
         ub  =  Inf*ones(length(c)),
         x0  =  zeros(length(c)))
</code></pre>
<h2><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 1</h2>
<p>To solve</p>
<pre><code>min 0.5 * [x1 x2]' * [3 1; 1 4] * [x1 x2] + [5 6]' * x
</code></pre>
<p>without any constraints you call</p>
<pre><code>(x, fx, status) = quadprog([3 1; 1 4], [5, 6])
</code></pre>
<p>The answer you should get is:</p>
<pre><code>([-1.27273,-1.18182],-6.7272727272727275,1)
</code></pre>
<p>That means the solution is <code>x==[-1.27273,-1.18182]</code>, the function value at the solution
is <code>fx=-6.7272727272727275</code> and the status flag is <code>1</code>.
See <a href="https://github.com/JuliaOpt/Ipopt.jl">Ipopt.jl</a> for a description of the status flags.</p>
<h2><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 2</h2>
<p>To solve the dual of a linear support vector machine (SVM), i.e.</p>
<pre><code>max    sum(alpha) - 0.5 * alpha' * diagm(y) * X * X' * diagm(y) * alpha
s.t.   0 &lt;= alpha &lt;= C
       y' * alpha == 0
</code></pre>
<p>where <code>X</code> contains the training locations as rows and <code>y</code> contains the
training labels being either <code>1.0</code> or <code>-1.0</code>, you call</p>
<pre><code>yX = diagm(y)*X
K  = yX * yX'
(alpha, val, flag) = quadprog(K, -ones(n),
                              lb=zeros(n), ub=C*ones(n),
                              Aeq=y', beq=zeros(1),
                              x0=zeros(n))
</code></pre>
</article></div>