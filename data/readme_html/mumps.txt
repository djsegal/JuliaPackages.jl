<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-a-julia-interface-to-mumps" class="anchor" aria-hidden="true" href="#a-julia-interface-to-mumps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A <a href="http://julialang.org" rel="nofollow">Julia</a> Interface to <a href="http://mumps.enseeiht.fr" rel="nofollow">MUMPS</a></h1>
<p>OSX and Linux: <a href="https://travis-ci.org/JuliaSmoothOptimizers/MUMPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/624d311ef2ecc6bf3a6166e1d9b501772abd7739/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f4d554d50532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/MUMPS.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://circleci.com/gh/JuliaSmoothOptimizers/MUMPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6d9a0fa34640234a91d5854e0f8a3c76d2ce3c34/68747470733a2f2f636972636c6563692e636f6d2f67682f4a756c6961536d6f6f74684f7074696d697a6572732f4d554d50532e6a6c2e7376673f7374796c653d737667" alt="CircleCI" data-canonical-src="https://circleci.com/gh/JuliaSmoothOptimizers/MUMPS.jl.svg?style=svg" style="max-width:100%;"></a>
<a href="https://JuliaSmoothOptimizers.github.io/MUMPS.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/a5af23352326d564443d56721673423cfa303eb5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d3366353162352e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-3f51b5.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaSmoothOptimizers/MUMPS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1fe7f8c79c5ff514caa08b7d69223f5c488efcb8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961536d6f6f74684f7074696d697a6572732f4d554d50532e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaSmoothOptimizers/MUMPS.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>MUMPS is a library for the solution of large linear systems using a
factorization. Structure can be exploited, such as symmetry, or symmetry and
definiteness. The factorization and solve phases can be performed in parallel.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to Install</h2>
<h3><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prerequisites</h3>
<p>Currently, MUMPS must be installed outside of Julia.
On macOS, we recommend using <a href="https://brew.sh" rel="nofollow">Homebrew</a>.
On Linux, we recommend using <a href="http://linuxbrew.sh" rel="nofollow">Linuxbrew</a>.
Please follow the installation instructions of each package manager.</p>
<p>In both cases, the commands to install MUMPS are the same:</p>
<div class="highlight highlight-source-shell"><pre>$ brew tap brewsci/num
$ brew install brewsci-mumps  <span class="pl-c"><span class="pl-c">#</span> use brew options brewsci-mumps for build options</span></pre></div>
<p>Note: on Linux, <code>apt-get install libmumps-dev</code> installs a version of OpenMPI that is too old for MPI.jl, and installation will fail.
See the Troubleshooting section below.</p>
<p>All examples above install OpenMPI.
If you wish to use MPICH, you will have to build MPICH, SCALAPACK and MUMPS by hand.</p>
<h3><a id="user-content-building-mumpsjl" class="anchor" aria-hidden="true" href="#building-mumpsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Building MUMPS.jl</h3>
<p>If MUMPS and SCALAPACK are not in standard locations, you can help by setting the environment variables <code>MUMPS_PREFIX</code> and <code>SCALAPACK_PREFIX</code>.</p>
<p>The Homebrew and Linuxbrew methods above install MUMPS and SCALAPACK in nonstandard locations.
You can define</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>MUMPS_PREFIX<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/usr/local/opt/brewsci-mumps<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>SCALAPACK_PREFIX<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/usr/local/opt/brewsci-scalapack<span class="pl-pds">"</span></span></pre></div>
<p>on macOS, and something of the form</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>MUMPS_PREFIX<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/home/linuxbrew/.linuxbrew/opt/brewsci-mumps<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>SCALAPACK_PREFIX<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/home/linuxbrew/.linuxbrew/opt/brewsci-scalapack<span class="pl-pds">"</span></span></pre></div>
<p>on Linux.</p>
<p>At the Julia prompt, type</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaSmoothOptimizers/MUMPS.jl.git<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>MUMPS<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>MUMPS<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Troubleshooting</h2>
<p>On macOS or Linux, if you see the error message</p>
<pre><code>[ 11%] Building Fortran object CMakeFiles/gen_constants.dir/gen_constants.f90.o
│ /home/ubuntu/.julia/packages/MPI/U5ujD/deps/gen_constants.f90:43:43:
│
│    call output("MPI_NO_OP       ", MPI_NO_OP)
│                                            1
│ Error: Symbol ‘mpi_no_op’ at (1) has no IMPLICIT type
</code></pre>
<p>your OpenMPI library is <a href="https://github.com/JuliaParallel/MPI.jl/issues/39#issuecomment-441093933">too old</a>.</p>
<p>If you are running macOS and see error messages of the form</p>
<pre><code>PMIx has detected a temporary directory name that results in a path that is too long for the Unix domain socket:

  Temp dir:
  /var/folders/rq/p5nq9tv17p5drlk49755jjz80000gn/T/openmpi-sessions-501@your_computer_name_0/44473

Try setting your TMPDIR environmental variable to point to something shorter in length
</code></pre>
<p>simply exit Julia and set the environment variable <code>TMPDIR</code> to, e.g., <code>\tmp</code>:</p>
<div class="highlight highlight-source-shell"><pre>$ <span class="pl-k">export</span> TMPDIR=/tmp</pre></div>
<p>The issue has to do with OpenMPI and is <a href="https://www.open-mpi.org/faq/?category=osx#startup-errors-with-open-mpi-2.0.x" rel="nofollow">documented in their faq</a>.</p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to Use</h2>
<p>The main data type holding information on a factorization is <code>Mumps</code>. Remember
to initialize MPI before attempting to create a <code>Mumps</code> object. A simple
session is as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MUMPS
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MPI
julia<span class="pl-k">&gt;</span> MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>, <span class="pl-c1">.2</span>) <span class="pl-k">+</span> <span class="pl-c1">speye</span>(<span class="pl-c1">10</span>); rhs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>)
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">solve</span>(A, rhs)  <span class="pl-c"><span class="pl-c">#</span> Mumps object is created and destroyed</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(x <span class="pl-k">-</span> A <span class="pl-k">\</span> rhs) <span class="pl-k">/</span> <span class="pl-c1">norm</span>(x)
<span class="pl-c1">2.640677159735313e-16</span>
julia<span class="pl-k">&gt;</span> MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()     <span class="pl-c"><span class="pl-c">#</span> if you're finished</span></pre></div>
<p>It is possible to separate the initialization, the analysis/factorization,
and the solve phases. It is also possible to access the information reported by
MUMPS after the factorization and solve phases, and to modify this information
(e.g., to perform iterative refinement).</p>
<p>When creating an instance of a <code>Mumps</code> object explicitly, it is important to
specify in advance what arithmetic should be used. Single and double precision
real (<code>Float32</code> and <code>Float64</code>) and complex (<code>Complex64</code> and <code>Complex128</code>)
arithmetics are supported.</p>
<p>For instance,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> MPI<span class="pl-k">.</span><span class="pl-c1">Init</span>()
julia<span class="pl-k">&gt;</span> mumps <span class="pl-k">=</span> <span class="pl-c1">Mumps</span><span class="pl-c1">{Float64}</span>(mumps_unsymmetric, default_icntl, default_cntl64)  <span class="pl-c"><span class="pl-c">#</span> Real, general unsymmetric</span>
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">sparse</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)); rhs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)       <span class="pl-c"><span class="pl-c">#</span> Happens on all cores</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">associate_matrix!</span>(mumps, A)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorize!</span>(mumps)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">associate_rhs!</span>(mumps, rhs)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve!</span>(mumps)
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">get_solution</span>(mumps)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">finalize</span>(mumps)
julia<span class="pl-k">&gt;</span> MPI<span class="pl-k">.</span><span class="pl-c1">Finalize</span>()</pre></div>
<p>Once the arithmetic of the <code>Mumps</code> instance has been specified, it cannot be
changed. The module is flexible in that various data types may be used to
define the matrix to be factorized and the right-hand side, and appropriate
conversions will take place. Dense matrices may be used, and they will be
converted to sparse format.</p>
<p>For intance,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> mumps <span class="pl-k">=</span> <span class="pl-c1">Mumps</span><span class="pl-c1">{Complex128}</span>(mumps_unsymmetric, default_icntl, default_cntl64)
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Int16, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>); rhs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">4</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">associate_matrix!</span>(mumps, A)  <span class="pl-c"><span class="pl-c">#</span> A is converted to a sparse Complex128 matrix</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">associate_rhs!</span>(mumps, rhs)   <span class="pl-c"><span class="pl-c">#</span> rhs is converted to a Complex128 array</span></pre></div>
<p>See <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl/tree/master/test">test</a> for more examples.</p>
<h2><a id="user-content-constants-and-methods-exposed" class="anchor" aria-hidden="true" href="#constants-and-methods-exposed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constants and Methods Exposed</h2>
<h3><a id="user-content-constants" class="anchor" aria-hidden="true" href="#constants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constants</h3>
<p>The following convenience constants may be used when initializing a <code>Mumps</code>
object:</p>
<table>
<thead>
<tr>
<th>Constant</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mumps_unsymmetric</code></td>
<td>matrix is general unsymmetric (or symmetry is unknown)</td>
</tr>
<tr>
<td><code>mumps_definite</code></td>
<td>matrix is symmetric and (positive or negative) definite</td>
</tr>
<tr>
<td><code>mumps_symmetric</code></td>
<td>matrix is symmetric but indefinite (or definiteness is unknown)</td>
</tr>
<tr>
<td><code>default_icntl</code></td>
<td>array of default integer parameters</td>
</tr>
<tr>
<td><code>default_cntl32</code></td>
<td>array of default real parameters in single precision</td>
</tr>
<tr>
<td><code>default_cntl64</code></td>
<td>array of default real parameters in double precision</td>
</tr>
</tbody>
</table>
<p>See Sections 5.1 and 5.2 of the <a href="http://mumps.enseeiht.fr/index.php?page=doc" rel="nofollow">MUMPS User's Manual</a> for a description of the integer and real control arrays.</p>
<h3><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods</h3>
<p>A <code>Mumps</code> object is created using the default constructor, which must be
supplied with:</p>
<ul>
<li>the data type for the arithmetic to be used, as a type parameter, i.e.,
<code>Mumps{Float64}(...)</code> or <code>Mumps{Complex128}(...)</code></li>
<li><code>sym</code>: one of the constants <code>mumps_unsymmetric</code>, <code>mumps_definite</code> or
<code>mumps_symmetric</code>. Note that there is no support for Hermitian complex
matrices in MUMPS. Therefore, we recommend to always use <code>mumps_unsymmetric</code>
for complex data.</li>
<li><code>icntl</code>: an integer parameters array (see the MUMPS Users's Manual)</li>
<li><code>cntl</code>: a real parameters array (see the MUMPS Users's Manual)</li>
</ul>
<p>The convenience function <code>get_icntl()</code> returns an array of integer parameters
corresponding to certain commonly-used options. Its arguments are all optional:</p>
<ul>
<li><code>det</code>: a boolean indicating whether the determinant should be computed
(default: <code>false</code>)</li>
<li><code>verbose</code>: a boolean (default: <code>false</code>)</li>
<li><code>ooc</code>: a boolean indicating whether factors should be stored out of core
(default: <code>false</code>)</li>
<li><code>itref</code>: the number of iterative refinement steps (default: 0).</li>
</ul>
<p>A <code>Mumps</code> object is destroyed by calling the <code>finalize()</code> method. Because
<code>finalize</code> still issues MPI commands, it is important to call <code>finalize()</code>
before calling <code>MPI.Finalize()</code>.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>finalize</code></td>
<td>Finalize a <code>Mumps</code> object. Must be done before calling <code>MPI.Finalize()</code></td>
</tr>
<tr>
<td><code>associate_matrix!</code></td>
<td>Register a matrix with the <code>Mumps</code> object. This function makes it possible to define the data on the host only.</td>
</tr>
<tr>
<td><code>factorize!</code></td>
<td>Factorize the matrix registered with the <code>Mumps</code> object.</td>
</tr>
<tr>
<td><code>associate_rhs!</code></td>
<td>Register right-hand sides with the <code>Mumps</code> object. This function makes it possible to define the data on the host only.</td>
</tr>
<tr>
<td><code>solve!</code></td>
<td>Solve the linear system for the given right-hand side.</td>
</tr>
<tr>
<td><code>get_solution</code></td>
<td>Retrieve the solution from the <code>Mumps</code> object. This function makes it possible for the solution to be assembled on the host only.</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-parallel-execution" class="anchor" aria-hidden="true" href="#parallel-execution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parallel Execution</h2>
<p>MPI is controled by way of <a href="https://github.com/lcw/MPI.jl">MPI.jl</a>.
Look for the lines that say <code>NUMBER OF WORKING PROCESSES</code> in the output of</p>
<pre><code>mpirun -np 4 julia examples/mumps_mpi.jl
</code></pre>
<h2><a id="user-content-to-do-pull-requests-welcome" class="anchor" aria-hidden="true" href="#to-do-pull-requests-welcome"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To Do (Pull Requests Welcome!)</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Support double precision complex arithmetic (in <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl/commit/99c23fe87e7c985fe3062d78ab7664b82a6b8dba">99c23fe</a>)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Support single precision real and complex arithmetic (in <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl/commit/654814a5e5800260011d2f26f7fb6de179609cfa">654814a</a>)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Support distributed matrices / vectors</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> User-selected permutation</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Out-of-core option (in <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl/commit/73e829b52fe3d20c70c2733607ba9820cda03ed6#diff-d41d8cd98f00b204e9800998ecf8427e">73e829b</a>)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Determinant (in <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl/commit/73e829b52fe3d20c70c2733607ba9820cda03ed6#diff-d41d8cd98f00b204e9800998ecf8427e">73e829b</a>)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Compute entries of the inverse</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Control iterative refinement (in <a href="https://github.com/JuliaSmoothOptimizers/MUMPS.jl/commit/73e829b52fe3d20c70c2733607ba9820cda03ed6#diff-d41d8cd98f00b204e9800998ecf8427e">73e829b</a>)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Obtain a Schur complement</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Solve with sparse right-hand sides</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Sequential, version with no MPI requirement</li>
</ul>
</article></div>