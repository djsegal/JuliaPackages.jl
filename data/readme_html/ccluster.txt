<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cclusterjl" class="anchor" aria-hidden="true" href="#cclusterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ccluster.jl</h1>
<p>Ccluster.jl is a Julia wrapper for Ccluster (<a href="https://github.com/rimbach/Ccluster.git">https://github.com/rimbach/Ccluster.git</a>)
that implements a clustering algorithm for univariate polynomials whose
coefficients are complex numbers.</p>
<p>Ccluster.jl also provides a clustering function for triangular systems of polynomial
equations.</p>
<p>Ccluster.jl is compatible with julia &gt;= 1.1.0.</p>
<p>The Branch compat-julia-v0.6 is compatible with julia 0.6, but is not intended to be maintained.</p>
<h2><a id="user-content-brief-description" class="anchor" aria-hidden="true" href="#brief-description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Brief description</h2>
<h3><a id="user-content-univariate-solver" class="anchor" aria-hidden="true" href="#univariate-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Univariate solver</h3>
<p>The main function provided by Ccluster.jl is <strong>ccluster</strong>.
It takes as input
a polynomial <em>P</em> in <em>C[z]</em>,
a square complex box <em>B</em>
and a precision <em>eps</em>.</p>
<p>It outputs a set of <em>natural clusters</em> of roots together with the sum of multiplicities
of the roots in each cluster.
A cluster is a complex disc <em>D</em> containing at least one root,
and it is natural when <em>3D</em> contains the same roots
than <em>D</em>.
Each root of <em>P</em> in <em>B</em> is in exactly one cluster of the output, and clusters may contain
roots of <em>P</em> in <em>2B</em>.</p>
<p>Input polynomial <em>P</em> can be given as an oracle polynomial, that is a function returning arbitrary
precision approximations of coefficients of <em>P</em>.
In case where <em>P</em> has rational coefficients, it can be given exactly.</p>
<p>To cluster all the roots of <em>P</em>, a bound on their modulus (e.g. Fujiwara bound)
to find an initial box <em>B</em> containing all the roots.
This is done in <strong>ccluster</strong> when it is called with no input box.
Notice that input oracle for <em>P</em> must have no zero leading coefficients.</p>
<p>The implemented algorithm is described here:
<a href="https://dl.acm.org/citation.cfm?id=2930939" rel="nofollow">https://dl.acm.org/citation.cfm?id=2930939</a></p>
<p>Please cite:
<a href="https://link.springer.com/chapter/10.1007/978-3-319-96418-8_28" rel="nofollow">https://link.springer.com/chapter/10.1007/978-3-319-96418-8_28</a>
if you use it in your research.</p>
<h3><a id="user-content-solver-for-triangular-systems" class="anchor" aria-hidden="true" href="#solver-for-triangular-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solver for triangular systems</h3>
<p>The notion of natural clusters is straightforwardly extended to the multivariate case.
Our function <strong>tcluster</strong> (t for triangular)
takes as input
a triangular polynomial system <em>P</em> which polynomials have rational coefficients,
a vector of square complex boxes <em>B</em>
and a precision <em>eps</em>.</p>
<p>It outputs a set of <em>natural clusters</em> of solutions of P together with the sum of multiplicities
of the solutions in each cluster.
Each solution of <em>P</em> in <em>B</em> is in exactly one cluster of the output, and clusters may contain
solutions of <em>P</em> in <em>2B</em>.</p>
<p>Let <em>z1&lt;z2&lt;...&lt;zn</em>.
Input triangular system <em>P: f1=f2=...=fn=0</em> must satisfy:</p>
<ul>
<li><em>S</em> has a finite number of solutions,</li>
<li>greatest variable in <em>fi</em> is <em>zi</em> and <em>deg(fi,zi)&gt;0</em>.</li>
</ul>
<p>Notice that we <strong>do not require</strong> simple solutions,
and we <strong>do not require</strong> that the leading coefficient of <em>fi</em>
has no common factor with the <em>fj</em>'s for <em>j&lt;i</em>.</p>
<p>In the special case where the leading coefficient of <em>fi</em>
has no common factor with the <em>fj</em>'s for <em>j&lt;i</em>
(for instance <em>P</em> is a regular chain),
<strong>tcluster</strong>
returns all solutions of <em>P</em> when no initial vector of square complex boxes <em>B</em>
is given in input.</p>
<p>The implemented algorithm is described here:
<a href="https://arxiv.org/abs/1806.10164" rel="nofollow">https://arxiv.org/abs/1806.10164</a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Enter the packages manager with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="]
"><pre><code>]
</code></pre></div>
<p>then install the last registered version with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="add Ccluster.jl
"><pre><code>add Ccluster.jl
</code></pre></div>
<p>Alternatively, install the last version with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="add https://github.com/rimbach/Ccluster.jl
"><pre><code>add https://github.com/rimbach/Ccluster.jl
</code></pre></div>
<p>Ccluster depends on Nemo that will be automatically installed.</p>
<p>For graphical outputs, install the package CclusterPlot with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="add https://github.com/rimbach/CclusterPlot.jl
"><pre><code>add https://github.com/rimbach/CclusterPlot.jl
</code></pre></div>
<p>in the packages manager.</p>
<p>CclusterPlot depends on PyCall and PyPlot, and requires that matplotlib is installed
on your system.
It is heavy both to install and to load.</p>
<h2><a id="user-content-usage-univariate-solver" class="anchor" aria-hidden="true" href="#usage-univariate-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage: univariate solver</h2>
<h3><a id="user-content-simple-example-clustering-the-roots-of-a-mignotte-like-polynomial" class="anchor" aria-hidden="true" href="#simple-example-clustering-the-roots-of-a-mignotte-like-polynomial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple example: clustering the roots of a Mignotte-like polynomial</h3>
<p>See the file examples/mignotte.jl</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Nemo

R, x = PolynomialRing(QQ, &quot;x&quot;)

d=64
a=14
P = x^d - 2*((2^a)*x-1)^2 #mignotte polynomial

using Ccluster

bInit = [fmpq(0,1),fmpq(0,1),fmpq(4,1)] #box centered in 0 + sqrt(-1)*0 with width 4
precision = 53                          #get clusters of size 2^-53

Res = ccluster(P, bInit, precision, verbosity=&quot;silent&quot;);
                                        #verbosity can take value &quot;silent&quot; (default value),
                                        #                         &quot;brief&quot; (brief report),
                                        #                         &quot;results&quot; (clusters are printed)
"><pre><code>using Nemo

R, x = PolynomialRing(QQ, "x")

d=64
a=14
P = x^d - 2*((2^a)*x-1)^2 #mignotte polynomial

using Ccluster

bInit = [fmpq(0,1),fmpq(0,1),fmpq(4,1)] #box centered in 0 + sqrt(-1)*0 with width 4
precision = 53                          #get clusters of size 2^-53

Res = ccluster(P, bInit, precision, verbosity="silent");
                                        #verbosity can take value "silent" (default value),
                                        #                         "brief" (brief report),
                                        #                         "results" (clusters are printed)
</code></pre></div>
<p>For computing all the roots of <em>P</em>, do:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Res = ccluster(P, precision, verbosity=&quot;silent&quot;);
"><pre><code>Res = ccluster(P, precision, verbosity="silent");
</code></pre></div>
<p>Res is an array of couples (sum of multiplicity, disc):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="63-element Array{Any,1}:
 Any[1, Nemo.fmpq[975//1024, 1025//1024, 15//2048]]      
 ⋮                                                      
 Any[1, Nemo.fmpq[-2995//4096, 4805//4096, 15//8192]] 
 Any[2, Nemo.fmpq[0, 0, 15//16384]]                     # the cluster with sum of multiplicity 2
 Any[1, Nemo.fmpq[6935//8192, -8955//8192, 15//16384]]
 Any[1, Nemo.fmpq[6935//8192, 8955//8192, 15//16384]]
"><pre><code>63-element Array{Any,1}:
 Any[1, Nemo.fmpq[975//1024, 1025//1024, 15//2048]]      
 ⋮                                                      
 Any[1, Nemo.fmpq[-2995//4096, 4805//4096, 15//8192]] 
 Any[2, Nemo.fmpq[0, 0, 15//16384]]                     # the cluster with sum of multiplicity 2
 Any[1, Nemo.fmpq[6935//8192, -8955//8192, 15//16384]]
 Any[1, Nemo.fmpq[6935//8192, 8955//8192, 15//16384]]
</code></pre></div>
<p>each element of Res being an array which</p>
<ul>
<li>second element is a complex disc (defined by the real and
imaginary parts of its center and its radius)</li>
<li>first element is the sum of multiplicities of the roots in the disk.</li>
</ul>
<p>If you care about geometry, so do we.
If you have installed CclusterPlot.jl, you can plot the clusters with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using CclusterPlot

plotCcluster(Res)
"><pre><code>using CclusterPlot

plotCcluster(Res)
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="plotCcluster(Res, bInit, focus=false)
"><pre><code>plotCcluster(Res, bInit, focus=false)
</code></pre></div>
<p>The last argument is a flag telling the function wether to focus
on clusters (when <em>true</em>) or not (when <em>false</em>).
You can also add <em>markers=false</em> as an optional argument
to avoid plotting approximations of the roots with markers.</p>
<h3><a id="user-content-other-example-clustering-the-roots-of-a-polynomial-whose-coefficients-are-roots-of-polynomials" class="anchor" aria-hidden="true" href="#other-example-clustering-the-roots-of-a-polynomial-whose-coefficients-are-roots-of-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other example: clustering the roots of a polynomial whose coefficients are roots of polynomials</h3>
<p>See the file examples/coeffsBernoulli.jl</p>
<h4><a id="user-content-find-the-64-roots-of-the-bernoulli-polynomial-of-degree-64" class="anchor" aria-hidden="true" href="#find-the-64-roots-of-the-bernoulli-polynomial-of-degree-64"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Find the 64 roots of the Bernoulli polynomial of degree 64</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Nemo

RR, x = PolynomialRing(Nemo.QQ, &quot;x&quot;)

n = 64 #degree
P = zero(RR)
bernoulli_cache(n)
for k = 0:n
    global P
    coefficient = (Nemo.binomial(n,k))*(bernoulli(n-k))
    P = P + coefficient*x^k
end #P is now the Bernoulli polynomial of degree 64

using Ccluster

bInit = [fmpq(0,1),fmpq(0,1),fmpq(100,1)] #box centered in 0 + sqrt(-1)*0 with width 100
precision = 53                          #get clusters of size 2^-53
Coeffs = ccluster(P, bInit, precision)
"><pre><code>using Nemo

RR, x = PolynomialRing(Nemo.QQ, "x")

n = 64 #degree
P = zero(RR)
bernoulli_cache(n)
for k = 0:n
    global P
    coefficient = (Nemo.binomial(n,k))*(bernoulli(n-k))
    P = P + coefficient*x^k
end #P is now the Bernoulli polynomial of degree 64

using Ccluster

bInit = [fmpq(0,1),fmpq(0,1),fmpq(100,1)] #box centered in 0 + sqrt(-1)*0 with width 100
precision = 53                          #get clusters of size 2^-53
Coeffs = ccluster(P, bInit, precision)
</code></pre></div>
<h4><a id="user-content-define-an-approximation-function-for-the-polynomial-whose-coefficients-are-the-found-roots" class="anchor" aria-hidden="true" href="#define-an-approximation-function-for-the-polynomial-whose-coefficients-are-the-found-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define an approximation function for the polynomial whose coefficients are the found roots</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function getApproximation( dest::Ptr{acb_poly}, preci::Int )

    function getApp(prec::Int)::Nemo.acb_poly
        eps=fmpq(1,fmpz(2)^prec)
        R = Nemo.RealField(prec)
        C = Nemo.ComplexField(prec)
        CC, y = PolynomialRing(C, &quot;y&quot;)
        res = zero(CC)
        for i=1:n
            btemp = [ Coeffs[i][2][1], Coeffs[i][2][2], 2*Coeffs[i][2][3] ]
            temp = ccluster(P, btemp, prec)
            approx::Nemo.acb = C( Nemo.ball(R(temp[1][2][1]),R(eps)), Nemo.ball(R(temp[1][2][2]),R(eps)))
            res = res + approx*y^(i-1)
        end
        return res
    end
    
    precTemp::Int = 2*preci
    poly = getApp(precTemp)
    
    while Ccluster.checkAccuracy( poly, preci ) == 0
            precTemp = 2*precTemp
            poly = getApp(precTemp)
    end
    
    Ccluster.ptr_set_acb_poly(dest, poly)
end
"><pre><code>function getApproximation( dest::Ptr{acb_poly}, preci::Int )

    function getApp(prec::Int)::Nemo.acb_poly
        eps=fmpq(1,fmpz(2)^prec)
        R = Nemo.RealField(prec)
        C = Nemo.ComplexField(prec)
        CC, y = PolynomialRing(C, "y")
        res = zero(CC)
        for i=1:n
            btemp = [ Coeffs[i][2][1], Coeffs[i][2][2], 2*Coeffs[i][2][3] ]
            temp = ccluster(P, btemp, prec)
            approx::Nemo.acb = C( Nemo.ball(R(temp[1][2][1]),R(eps)), Nemo.ball(R(temp[1][2][2]),R(eps)))
            res = res + approx*y^(i-1)
        end
        return res
    end
    
    precTemp::Int = 2*preci
    poly = getApp(precTemp)
    
    while Ccluster.checkAccuracy( poly, preci ) == 0
            precTemp = 2*precTemp
            poly = getApp(precTemp)
    end
    
    Ccluster.ptr_set_acb_poly(dest, poly)
end
</code></pre></div>
<h4><a id="user-content-cluster-the-roots" class="anchor" aria-hidden="true" href="#cluster-the-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cluster the roots</h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="bInit = [fmpq(0,1),fmpq(0,1),fmpq(100,1)] #box centered in 0 + sqrt(-1)*0 with width 100
precision = 53                          #get clusters of size 2^-53
Roots = ccluster(getApproximation, bInit, precision, verbosity=&quot;brief&quot;)
"><pre><code>bInit = [fmpq(0,1),fmpq(0,1),fmpq(100,1)] #box centered in 0 + sqrt(-1)*0 with width 100
precision = 53                          #get clusters of size 2^-53
Roots = ccluster(getApproximation, bInit, precision, verbosity="brief")
</code></pre></div>
<p>Output (total time in s on a Intel(R) Core(TM) i7-7600U CPU @ 2.80GHz):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content=" -------------------Ccluster: ----------------------------------------
 -------------------Input:    ----------------------------------------
|box: cRe: 0                cIm: 0                wid: 100            |
|eps: 1/100                                                           |
|strat: newton tstarOpt predPrec anticip                              |
 -------------------Output:   ----------------------------------------
|number of clusters:                                 63               |
|number of solutions:                                63               |
 -------------------Stats:    ----------------------------------------
|total time:                                   1.802102               |
 ---------------------------------------------------------------------
63-element Array{Any,1}:
 Any[1, Nemo.fmpq[-3125//32768, 5125//8192, 375//65536]]    
 ⋮                                                              
 Any[1, Nemo.fmpq[211625//262144, -105125//262144, 375//524288]]
"><pre><code> -------------------Ccluster: ----------------------------------------
 -------------------Input:    ----------------------------------------
|box: cRe: 0                cIm: 0                wid: 100            |
|eps: 1/100                                                           |
|strat: newton tstarOpt predPrec anticip                              |
 -------------------Output:   ----------------------------------------
|number of clusters:                                 63               |
|number of solutions:                                63               |
 -------------------Stats:    ----------------------------------------
|total time:                                   1.802102               |
 ---------------------------------------------------------------------
63-element Array{Any,1}:
 Any[1, Nemo.fmpq[-3125//32768, 5125//8192, 375//65536]]    
 ⋮                                                              
 Any[1, Nemo.fmpq[211625//262144, -105125//262144, 375//524288]]
</code></pre></div>
<h3><a id="user-content-defining-an-approximation-function" class="anchor" aria-hidden="true" href="#defining-an-approximation-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining an approximation function</h3>
<p><strong>ccluster</strong> takes as input a function prototyped as:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function getApproximation( dest::Ptr{Nemo.acb_poly}, p::Int )
"><pre><code>function getApproximation( dest::Ptr{Nemo.acb_poly}, p::Int )
</code></pre></div>
<p>Here is an example for a polynomial with complex coefficients (see also the file examples/spiral.jl)</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="degr=64
function getApproximation( dest::Ptr{acb_poly}, precision::Int )
    
    function getAppSpiral( degree::Int, prec::Int )::Nemo.acb_poly
        CC = ComplexField(prec)
        R2, y = PolynomialRing(CC, &quot;y&quot;)
        res = R2(1)
        for k=1:degree
            modu = fmpq(k,degree)
            argu = fmpq(4*k,degree)
            root = modu*Nemo.exppii(CC(argu))
            res = res * (y-root)
        end
        return res
    end
    
    precTemp::Int = 2*precision
    poly = getAppSpiral( degr, precTemp)
    
    while Ccluster.checkAccuracy( poly, precision ) == 0
            precTemp = 2*precTemp
            poly = getAppSpiral(degr, precTemp)
    end
    
    Ccluster.ptr_set_acb_poly(dest, poly)

end
"><pre><code>degr=64
function getApproximation( dest::Ptr{acb_poly}, precision::Int )
    
    function getAppSpiral( degree::Int, prec::Int )::Nemo.acb_poly
        CC = ComplexField(prec)
        R2, y = PolynomialRing(CC, "y")
        res = R2(1)
        for k=1:degree
            modu = fmpq(k,degree)
            argu = fmpq(4*k,degree)
            root = modu*Nemo.exppii(CC(argu))
            res = res * (y-root)
        end
        return res
    end
    
    precTemp::Int = 2*precision
    poly = getAppSpiral( degr, precTemp)
    
    while Ccluster.checkAccuracy( poly, precision ) == 0
            precTemp = 2*precTemp
            poly = getAppSpiral(degr, precTemp)
    end
    
    Ccluster.ptr_set_acb_poly(dest, poly)

end
</code></pre></div>
<h3><a id="user-content-defining-an-initial-box" class="anchor" aria-hidden="true" href="#defining-an-initial-box"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining an initial box</h3>
<p>The initial box is an array of three Nemo.fmpq defining respectively
the real part of the center,
the imaginary part of the center and
the width of the box.</p>
<p>The following code:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="bInit = [fmpq(0,1),fmpq(0,1),fmpq(150,1)]
"><pre><code>bInit = [fmpq(0,1),fmpq(0,1),fmpq(150,1)]
</code></pre></div>
<p>defines a box centered in 0+<em>i</em>0 with width 150.</p>
<h3><a id="user-content-the-precision" class="anchor" aria-hidden="true" href="#the-precision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The precision</h3>
<p>The precision is an integer <em>p</em>. Ccluster computes clusters of size <em>eps=2^-p</em>.</p>
<h3><a id="user-content-the-verbosity-flag" class="anchor" aria-hidden="true" href="#the-verbosity-flag"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The verbosity flag</h3>
<p>The last, optional, argument of ccluster is a verbosity flag.
When no verbosity is given, ccluster is silent.
Values can be "brief" and "results".</p>
<h2><a id="user-content-usage-solver-for-triangular-systems" class="anchor" aria-hidden="true" href="#usage-solver-for-triangular-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage: solver for triangular systems</h2>
<h3><a id="user-content-simple-example-clustering-the-roots-of-a-mignotte-like-polynomial-1" class="anchor" aria-hidden="true" href="#simple-example-clustering-the-roots-of-a-mignotte-like-polynomial-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple example: clustering the roots of a Mignotte-like polynomial</h3>
<p>See the file examples/triangularSys.jl</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Nemo
using Ccluster

Rx, x = PolynomialRing(QQ, &quot;x&quot;) #Ring of polynomials in x with rational coefficients
Syx, y = PolynomialRing(Rx, &quot;y&quot;) #Ring of polynomials in y with coefficients that are in Rx

d1=30
c = 10
delta=128
d2=10

twotodelta = fmpq(2,1)^(delta)
f  = Rx( x^d1 - (twotodelta*x-1)^(c) )
g = Syx( y^d2 - x^d2 )

precision = 53
bInitx = [fmpq(0,1),fmpq(0,1),fmpq(10,1)^40]

nbSols, clusters, ellapsedTime = tcluster( [f,g], [bInitx], precision, verbosity = &quot;silent&quot; );
"><pre><code>using Nemo
using Ccluster

Rx, x = PolynomialRing(QQ, "x") #Ring of polynomials in x with rational coefficients
Syx, y = PolynomialRing(Rx, "y") #Ring of polynomials in y with coefficients that are in Rx

d1=30
c = 10
delta=128
d2=10

twotodelta = fmpq(2,1)^(delta)
f  = Rx( x^d1 - (twotodelta*x-1)^(c) )
g = Syx( y^d2 - x^d2 )

precision = 53
bInitx = [fmpq(0,1),fmpq(0,1),fmpq(10,1)^40]

nbSols, clusters, ellapsedTime = tcluster( [f,g], [bInitx], precision, verbosity = "silent" );
</code></pre></div>
<p>Here <em>g</em> is monic and its leading coefficient has no common factor with <em>f</em>.
In general, you can check this property using Nemo.gcd:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Nemo.gcd(f,Nemo.lead(g))
"><pre><code>Nemo.gcd(f,Nemo.lead(g))
</code></pre></div>
<p>Providing this is 1, compute clusters containing all the solutions with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="nbSols, clusters, ellapsedTime = tcluster( [f,g], precision, verbosity = &quot;silent&quot; );
"><pre><code>nbSols, clusters, ellapsedTime = tcluster( [f,g], precision, verbosity = "silent" );
</code></pre></div>
<p>nbSols is the total number of solutions (counted with multiplicity),
clusters is an array of clusters of solutions and
ellapsedTime is the time spent to solve the system.</p>
<p>Each element in clusters is an array which first element is the sum of multiplicities
of the solution in the cluster and second element is a <em>precision</em>-bit approximation
of the solutions (of type Nemo::acb).</p>
<p>You can print the clusters with:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="printClusters(stdout, nbSols, clusters)
"><pre><code>printClusters(stdout, nbSols, clusters)
</code></pre></div>
</article></div>