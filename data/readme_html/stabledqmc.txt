<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://doi.org/10.5281/zenodo.3819445" rel="nofollow"><img src="https://camo.githubusercontent.com/1afdb55eb6808f9d3b8aa1465c2685ccbb719234/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333831393434352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3819445.svg" style="max-width:100%;"></a></p>
<div align="center">
  <a href="https://crstnbr.github.io/StableDQMC.jl/dev" rel="nofollow">
    <img src="https://raw.githubusercontent.com/crstnbr/StableDQMC.jl/master/docs/src/assets/logo_large.png" alt="StableDQMC.jl" width="400" style="max-width:100%;">
  </a>
</div>
<h2 align="center"><a id="user-content-stabledqmcjl" class="anchor" aria-hidden="true" href="#stabledqmcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StableDQMC.jl</h2>
<h4 align="center"><a id="user-content-nothing-brings-fear-to-my-heart-more-than-a-floating-point-number--gerald-jay-sussman" class="anchor" aria-hidden="true" href="#nothing-brings-fear-to-my-heart-more-than-a-floating-point-number--gerald-jay-sussman"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nothing brings fear to my heart more than a floating point number. â€” Gerald Jay Sussman</h4>
<br>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Community</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://crstnbr.github.io/StableDQMC.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/702961bdd3afeb2633ba0561f13f2102dc596aea/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d626c75652e737667"><img src="https://camo.githubusercontent.com/702961bdd3afeb2633ba0561f13f2102dc596aea/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/lifecycle-stable-blue.svg" style="max-width:100%;"></a> <a href="https://github.com/crstnbr/StableDQMC.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/crstnbr/StableDQMC.jl/workflows/Run%20tests/badge.svg" alt="" style="max-width:100%;"></a> <a href="http://codecov.io/github/crstnbr/StableDQMC.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5bfeed2ebb3d38173ad6a8346712a3930208eb2b/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f637273746e62722f537461626c6544514d432e6a6c2f6d61737465722e7376673f6c6162656c3d636f6465636f76" alt="" data-canonical-src="https://img.shields.io/codecov/c/github/crstnbr/StableDQMC.jl/master.svg?label=codecov" style="max-width:100%;"></a> <a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/46d7667eb0c8139a8b7f3081100d4d3258145919/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f532f537461626c6544514d432e737667" alt="" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/S/StableDQMC.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://slackinvite.julialang.org/" rel="nofollow"><img src="https://camo.githubusercontent.com/24d16c31ff9f7628be0e050b793afd8b2458029c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230736c61636b2d79656c6c6f772e737667" alt="" data-canonical-src="https://img.shields.io/badge/chat-on%20slack-yellow.svg" style="max-width:100%;"></a> <a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/8af705201b0143753136fea6d5fc0409fae21d81/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d7265642e737667" alt="" data-canonical-src="https://img.shields.io/badge/License-MIT-red.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This is a library of numerically stable linear algebra routines for performing inversions as they appear in the calculation of Green's functions in <a href="https://en.wikipedia.org/wiki/Quantum_Monte_Carlo" rel="nofollow">determinant Quantum Monte Carlo</a>.</p>
<p>For more details, check out the <a href="https://crstnbr.github.io/StableDQMC.jl/dev" rel="nofollow">documentation</a> and the accompanyig <a href="http://arxiv.org/abs/2003.05286" rel="nofollow">paper</a>, in which we describe and benchmark a few specific algorithms. The plots in this paper have been generated with the notebooks in <a href="https://github.com/crstnbr/StableDQMC.jl/tree/master/notebooks">the notebook directory</a> of this repository.</p>
<p>Feel free to give feedback, open issues, or contribute useful algorithms yourself! <g-emoji class="g-emoji" alias="slightly_smiling_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png">ðŸ™‚</g-emoji></p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>The package is registered in Julia's <a href="https://github.com/JuliaRegistries/General">General</a> registry. You can install it using</p>
<pre><code>] add StableDQMC
</code></pre>
<p>The package has only one dependency, Requires.jl.</p>
<h3><a id="user-content-why-should-i-care" class="anchor" aria-hidden="true" href="#why-should-i-care"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why should I care?</h3>
<table>
  <tbody><tr>
    <td><a target="_blank" rel="noopener noreferrer" href="paper/figures/naive_vs_stable.png"><img src="paper/figures/naive_vs_stable.png" width="500px" style="max-width:100%;"></a></td>
    <td><a target="_blank" rel="noopener noreferrer" href="paper/figures/decomp_comparison_simple.png"><img src="paper/figures/decomp_comparison_simple.png" width="500px" style="max-width:100%;"></a></td>
  </tr>
</tbody></table>
<p><strong>Left:</strong> Slice matrix product. <strong>Right:</strong> Equal-times Green's function.</p>
<p>Note that "SVD (D&amp;C)" is the algorithm used by Julia's <code>svd</code> function.</p>
<h3><a id="user-content-inversions" class="anchor" aria-hidden="true" href="#inversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inversions</h3>
<p>In DQMC, we commonly perform inversions like <code>G = [1 + B]^-1</code> to obtain the equal-times Green's function and <code>G = [A + B]^-1</code> for the time-displaced pendant. The following methods are exported to facilitate these tasks.</p>
<ul>
<li><code>inv_one_plus</code>, <code>inv_one_plus!</code></li>
<li><code>inv_sum</code>, <code>inv_sum!</code></li>
</ul>
<p>When function names are suffixed with <code>_loh</code>, i.e. <code>inv_one_plus_loh</code>, a more sophisticated method is used for numerical stabilization (see the paper linked above for more details).</p>
<h3><a id="user-content-short-example" class="anchor" aria-hidden="true" href="#short-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Short example</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearAlgebra

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(ComplexF64, <span class="pl-c1">100</span>,<span class="pl-c1">100</span>);

julia<span class="pl-k">&gt;</span> Bfact <span class="pl-k">=</span> <span class="pl-c1">udt</span>(B);

julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">inv_one_plus_loh</span>(Bfact);</pre></div>
<p>Since the matrix <code>B</code> is well-conditioned in this case, we have</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> G <span class="pl-k">â‰ˆ</span> <span class="pl-c1">inv</span>(I <span class="pl-k">+</span> B)
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-udt-qr-decomposition" class="anchor" aria-hidden="true" href="#udt-qr-decomposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UDT (QR) Decomposition</h3>
<p>Based on the QR decomposition, we introduce a <code>UDT</code> factorization, where <code>U</code> is unitary, <code>D</code> is real-valued and diagonal, and <code>T</code> is upper-triangular. To decompose a given matrix <code>M</code> the <code>udt</code> function is exported.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> M <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">udt</span>(M)
<span class="pl-c1">UDT</span><span class="pl-c1">{Float64,Float64,Array{Float64,2}}</span>([<span class="pl-k">-</span><span class="pl-c1">0.246588</span> <span class="pl-c1">0.12668</span> â€¦ <span class="pl-c1">0.582208</span> <span class="pl-c1">0.206435</span>; <span class="pl-k">-</span><span class="pl-c1">0.373953</span> <span class="pl-k">-</span><span class="pl-c1">0.300804</span> â€¦ <span class="pl-c1">0.152994</span> <span class="pl-c1">0.0523203</span>; â€¦ ; <span class="pl-k">-</span><span class="pl-c1">0.214686</span> <span class="pl-k">-</span><span class="pl-c1">0.403362</span> â€¦ <span class="pl-k">-</span><span class="pl-c1">0.124248</span> <span class="pl-k">-</span><span class="pl-c1">0.390502</span>; <span class="pl-k">-</span><span class="pl-c1">0.40412</span> <span class="pl-k">-</span><span class="pl-c1">0.147009</span> â€¦ <span class="pl-c1">0.1839</span> <span class="pl-c1">0.197964</span>], [<span class="pl-c1">2.15087</span>, <span class="pl-c1">1.47129</span>, <span class="pl-c1">1.14085</span>, <span class="pl-c1">0.911765</span>, <span class="pl-c1">0.850504</span>, <span class="pl-c1">0.620149</span>, <span class="pl-c1">0.545588</span>, <span class="pl-c1">0.412213</span>, <span class="pl-c1">0.305983</span>, <span class="pl-c1">0.148787</span>], [<span class="pl-k">-</span><span class="pl-c1">0.597235</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> â€¦ <span class="pl-k">-</span><span class="pl-c1">0.678767</span> <span class="pl-k">-</span><span class="pl-c1">0.59054</span>; <span class="pl-k">-</span><span class="pl-c1">0.385741</span> <span class="pl-c1">0.0</span> â€¦ <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span><span class="pl-c1">0.361263</span>; â€¦ ; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> â€¦ <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> â€¦ <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>])</pre></div>
<p>In our tests (see <code>paper/</code>), this decomposition turns out to be superior to <code>SVD</code> for DQMC.</p>
<h3><a id="user-content-svd-decompositions" class="anchor" aria-hidden="true" href="#svd-decompositions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SVD Decompositions</h3>
<p>The package provides convenient access to several LAPACK algorithms for calculating singular value decompositions (SVDs):</p>
<ul>
<li><code>gesdd</code>, <code>gesdd!</code>: Divide and conquer</li>
<li><code>gesvd</code>, <code>gesvd!</code>: Regular</li>
<li><code>gesvj</code>, <code>gesvj!</code>: Jacobi (based on <a href="https://github.com/RalphAS/JacobiSVD.jl">JacobiSVD.jl</a>)</li>
</ul>
<p>Furthermore, you can access a type-generic, pure Julia implementation,</p>
<ul>
<li><code>genericsvd</code>, <code>genericsvd!</code> (based on <a href="https://github.com/JuliaLinearAlgebra/GenericSVD.jl">GenericSVD.jl</a>)</li>
</ul>
<p>However, to keep the dependencies of the package minimal, only the first two are available by default and loading of the Jacobi or type-generic SVD is opt-in. We provide convenience functions <code>StableDQMC.addJacobiSVD()</code> and <code>StableDQMC.addGenericSVD()</code> to facilitate this process. See below for a quick demonstration.</p>
<h4><a id="user-content-automagically-opt-in-to-jacobisvdgenericsvd" class="anchor" aria-hidden="true" href="#automagically-opt-in-to-jacobisvdgenericsvd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Automagically opt-in to JacobiSVD/GenericSVD</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StableDQMC

julia<span class="pl-k">&gt;</span> gesvj
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> gesvj not defined

julia<span class="pl-k">&gt;</span> StableDQMC<span class="pl-k">.</span><span class="pl-c1">addJacobiSVD</span>()
  Updating registry at C<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>carsten<span class="pl-k">\</span><span class="pl-k">.</span>julia<span class="pl-k">\</span>registries<span class="pl-k">\</span>General
  Updating git<span class="pl-k">-</span>repo https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaRegistries<span class="pl-k">/</span>General<span class="pl-k">.</span>git
  Updating git<span class="pl-k">-</span>repo https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>RalphAS<span class="pl-k">/</span>JacobiSVD<span class="pl-k">.</span>jl
 Resolving package versions<span class="pl-k">...</span>
  Updating C<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>carsten<span class="pl-k">\</span>Desktop<span class="pl-k">\</span>stabledqmctest<span class="pl-k">\</span>Project<span class="pl-k">.</span>toml
  [<span class="pl-c1">2</span>ca068c6] <span class="pl-k">+</span> JacobiSVD v0<span class="pl-c1">.0.0</span> <span class="pl-c"><span class="pl-c">#</span>master (https://github.com/RalphAS/JacobiSVD.jl)</span>
  Updating C<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>carsten<span class="pl-k">\</span>Desktop<span class="pl-k">\</span>stabledqmctest<span class="pl-k">\</span>Manifest<span class="pl-k">.</span>toml
  [<span class="pl-c1">2</span>ca068c6] <span class="pl-k">+</span> JacobiSVD v0<span class="pl-c1">.0.0</span> <span class="pl-c"><span class="pl-c">#</span>master (https://github.com/RalphAS/JacobiSVD.jl)</span>
â”Œ Warning<span class="pl-k">:</span> Package StableDQMC does not have JacobiSVD <span class="pl-k">in</span> its dependencies<span class="pl-k">:</span>
â”‚ <span class="pl-k">-</span> If you have StableDQMC checked out <span class="pl-k">for</span> development and have
â”‚   added JacobiSVD as a dependency but haven<span class="pl-k">'</span>t updated your primary
â”‚   environment<span class="pl-k">'</span>s manifest file, <span class="pl-k">try</span> Pkg<span class="pl-k">.</span><span class="pl-c1">resolve</span>().
â”‚ <span class="pl-k">-</span> Otherwise you may need to report an issue with StableDQMC
â”” Loading JacobiSVD into StableDQMC from project dependency, future warnings <span class="pl-k">for</span> StableDQMC are suppressed.
[ Info<span class="pl-k">:</span> Recompiling stale cache file C<span class="pl-k">:</span><span class="pl-k">\</span>Users<span class="pl-k">\</span>carsten<span class="pl-k">.</span>julia<span class="pl-k">\</span>compiled<span class="pl-k">\</span>v1<span class="pl-c1">.1</span><span class="pl-k">\</span>JacobiSVD<span class="pl-k">\</span>Frhox<span class="pl-k">.</span>ji <span class="pl-k">for</span> JacobiSVD [<span class="pl-c1">2</span>ca068c6<span class="pl-k">-</span><span class="pl-c1">2156</span><span class="pl-k">-</span><span class="pl-c1">5</span>cf0<span class="pl-k">-</span><span class="pl-c1">8317</span><span class="pl-k">-</span>c67edf277a2c]

julia<span class="pl-k">&gt;</span> gesvj <span class="pl-c"><span class="pl-c">#</span> gesvj and gesvj! are available now</span>
gesvj (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)
</pre></div>
<h4><a id="user-content-manual-opt-in" class="anchor" aria-hidden="true" href="#manual-opt-in"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Manual opt-in</h4>
<p>Provided that you have <a href="https://github.com/RalphAS/JacobiSVD.jl">JacobiSVD.jl</a> (or <a href="https://github.com/JuliaLinearAlgebra/GenericSVD.jl">GenericSVD.jl</a>) installed, you can get the LAPACK access functions <code>gesvj</code>, <code>gesvj!</code> (or <code>genericsvd</code>, <code>genericsvd!</code>) simply by <code>import JacobiSVD</code> (<code>import GenericSVD</code>).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StableDQMC

julia<span class="pl-k">&gt;</span> gesvj
ERROR<span class="pl-k">:</span> UndefVarError<span class="pl-k">:</span> gesvj not defined

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> JacobiSVD <span class="pl-c"><span class="pl-c">#</span> using might lead to name conflicts</span>

julia<span class="pl-k">&gt;</span> gesvj <span class="pl-c"><span class="pl-c">#</span> gesvj and gesvj! are available now</span>
gesvj (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
</article></div>