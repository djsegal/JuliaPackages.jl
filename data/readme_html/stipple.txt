<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stipple" class="anchor" aria-hidden="true" href="#stipple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stipple</h1>
<p>Stipple is a reactive UI library for building interactive data applications in pure Julia.
It uses Genie.jl (on the server side) and Vue.js (on the client).</p>
<p>Stipple uses a high performance MVVM architecture, which automatically synchronizes the state two-way
(server -&gt; client and client -&gt; server) sending only JSON data over the wire.</p>
<p>The Stipple package provides the fundamental communication layer, extending <code>Genie</code>'s HTML API with a reactive component.</p>
<p>The Stipple ecosystem also includes:</p>
<ul>
<li><a href="https://github.com/GenieFramework/StippleUI.jl">StippleUI.jl</a> - the UI library for <code>Stipple.jl</code>, providing access to 30+ reactive UI elements (including forms, lists, tables, as well as layout).</li>
<li><a href="https://github.com/GenieFramework/StippleCharts.jl">StippleCharts.jl</a> - the  charts library for <code>Stipple.jl</code>, providing access to a growing collection of reactive charts.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Stipple can be added from the GitHub repo, via <code>Pkg</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Stipple
"><pre>pkg<span class="pl-k">&gt;</span> add Stipple</pre></div>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-downloadable-demos-repo-available-at-httpsgithubcomgenieframeworkstippledemos" class="anchor" aria-hidden="true" href="#downloadable-demos-repo-available-at-httpsgithubcomgenieframeworkstippledemos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Downloadable demos repo available at: <a href="https://github.com/GenieFramework/StippleDemos">https://github.com/GenieFramework/StippleDemos</a></h3>
<h3><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1</h3>
<hr>
<p>Add <code>Genie</code> and <code>Stipple</code> first:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Stipple
pkg&gt; add Genie
"><pre>pkg<span class="pl-k">&gt;</span> add Stipple
pkg<span class="pl-k">&gt;</span> add Genie</pre></div>
<p>Now we can run the following code at the Julia REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Genie, Genie.Renderer.Html, Stipple

Base.@kwdef mutable struct Name &lt;: ReactiveModel
  name::R{String} = &quot;World!&quot;
end

model = Stipple.init(Name())

function ui()
  page(
    vm(model), class=&quot;container&quot;, [
      h1([
        &quot;Hello &quot;
        span(&quot;&quot;, @text(:name))
      ])

      p([
        &quot;What is your name? &quot;
        input(&quot;&quot;, placeholder=&quot;Type your name&quot;, @bind(:name))
      ])
    ]
  ) |&gt; html
end

route(&quot;/&quot;, ui)

up() # or `up(open_browser = true)` to automatically open a browser window/tab when launching the app
"><pre><span class="pl-k">using</span> Genie, Genie<span class="pl-k">.</span>Renderer<span class="pl-k">.</span>Html, Stipple

Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">mutable struct</span> Name <span class="pl-k">&lt;:</span> <span class="pl-c1">ReactiveModel</span>
  name<span class="pl-k">::</span><span class="pl-c1">R{String}</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>World!<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

model <span class="pl-k">=</span> Stipple<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">Name</span>())

<span class="pl-k">function</span> <span class="pl-en">ui</span>()
  <span class="pl-c1">page</span>(
    <span class="pl-c1">vm</span>(model), class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>container<span class="pl-pds">"</span></span>, [
      <span class="pl-c1">h1</span>([
        <span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-pds">"</span></span>
        <span class="pl-c1">span</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-c1">@text</span>(<span class="pl-c1">:name</span>))
      ])

      <span class="pl-c1">p</span>([
        <span class="pl-s"><span class="pl-pds">"</span>What is your name? <span class="pl-pds">"</span></span>
        <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, placeholder<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Type your name<span class="pl-pds">"</span></span>, <span class="pl-c1">@bind</span>(<span class="pl-c1">:name</span>))
      ])
    ]
  ) <span class="pl-k">|&gt;</span> html
<span class="pl-k">end</span>

<span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>, ui)

<span class="pl-c1">up</span>() <span class="pl-c"><span class="pl-c">#</span> or `up(open_browser = true)` to automatically open a browser window/tab when launching the app</span></pre></div>
<p>This will start a web app on port 8000 and we'll be able to access it in the browser at <a href="http://localhost:8000" rel="nofollow">http://localhost:8000</a></p>
<p>Once the page is loaded, we'll be able to interact with the data and see how it's synced.</p>
<p>We can update the name value from Julia, and see it reflected on the page, at the REPL:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; model.name[] = &quot;Adrian&quot; # updating the property in Julia will update the values on the front
"><pre>julia<span class="pl-k">&gt;</span> model<span class="pl-k">.</span>name[] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Adrian<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> updating the property in Julia will update the values on the front</span></pre></div>
<p>On the webpage, we can change the name in the input field and confirm that it has been updated in Julia:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; model.name[] # will have the same value as what you have inputted on the web page
"><pre>julia<span class="pl-k">&gt;</span> model<span class="pl-k">.</span>name[] <span class="pl-c"><span class="pl-c">#</span> will have the same value as what you have inputted on the web page</span></pre></div>
<p>You can see a quick video demo here:
<a href="https://www.dropbox.com/s/50t5bqd2zk4ehxo/basic_stipple_3.mp4?dl=0" rel="nofollow">https://www.dropbox.com/s/50t5bqd2zk4ehxo/basic_stipple_3.mp4?dl=0</a></p>
<p>The Stipple presentation from JuliaCon 2020 is available here (8 minutes):
<a href="https://www.dropbox.com/s/6atyctgomsqwjki/stipple_exported.mp4?dl=0" rel="nofollow">https://www.dropbox.com/s/6atyctgomsqwjki/stipple_exported.mp4?dl=0</a></p>
<h3><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2</h3>
<p>This snippet illustrates how to build a UI where the button triggers a computation (function call) on the
server side, using the input provided by the user, and outputting the result of the computation back to the user.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Genie, Genie.Renderer.Html, Stipple

Base.@kwdef mutable struct Model &lt;: ReactiveModel
  process::R{Bool} = false
  output::R{String} = &quot;&quot;
  input::R{String} = &quot;&quot;
end

model = Stipple.init(Model())

on(model.process) do _
  if (model.process[])
    model.output[] = model.input[] |&gt; reverse
    model.process[] = false
  end
end

function ui()
  page(
    vm(model), class=&quot;container&quot;, [
      p([
        &quot;Input &quot;
        input(&quot;&quot;, @bind(:input), @on(&quot;keyup.enter&quot;, &quot;process = true&quot;))
      ])

      p([
        button(&quot;Action!&quot;, @click(&quot;process = true&quot;))
      ])

      p([
        &quot;Output: &quot;
        span(&quot;&quot;, @text(:output))
      ])
    ]
  ) |&gt; html
end

route(&quot;/&quot;, ui)

up()
"><pre><span class="pl-k">using</span> Genie, Genie<span class="pl-k">.</span>Renderer<span class="pl-k">.</span>Html, Stipple

Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">mutable struct</span> Model <span class="pl-k">&lt;:</span> <span class="pl-c1">ReactiveModel</span>
  process<span class="pl-k">::</span><span class="pl-c1">R{Bool}</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>
  output<span class="pl-k">::</span><span class="pl-c1">R{String}</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
  input<span class="pl-k">::</span><span class="pl-c1">R{String}</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

model <span class="pl-k">=</span> Stipple<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">Model</span>())

<span class="pl-c1">on</span>(model<span class="pl-k">.</span>process) <span class="pl-k">do</span> _
  <span class="pl-k">if</span> (model<span class="pl-k">.</span>process[])
    model<span class="pl-k">.</span>output[] <span class="pl-k">=</span> model<span class="pl-k">.</span>input[] <span class="pl-k">|&gt;</span> reverse
    model<span class="pl-k">.</span>process[] <span class="pl-k">=</span> <span class="pl-c1">false</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">ui</span>()
  <span class="pl-c1">page</span>(
    <span class="pl-c1">vm</span>(model), class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>container<span class="pl-pds">"</span></span>, [
      <span class="pl-c1">p</span>([
        <span class="pl-s"><span class="pl-pds">"</span>Input <span class="pl-pds">"</span></span>
        <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-c1">@bind</span>(<span class="pl-c1">:input</span>), <span class="pl-c1">@on</span>(<span class="pl-s"><span class="pl-pds">"</span>keyup.enter<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>process = true<span class="pl-pds">"</span></span>))
      ])

      <span class="pl-c1">p</span>([
        <span class="pl-c1">button</span>(<span class="pl-s"><span class="pl-pds">"</span>Action!<span class="pl-pds">"</span></span>, <span class="pl-c1">@click</span>(<span class="pl-s"><span class="pl-pds">"</span>process = true<span class="pl-pds">"</span></span>))
      ])

      <span class="pl-c1">p</span>([
        <span class="pl-s"><span class="pl-pds">"</span>Output: <span class="pl-pds">"</span></span>
        <span class="pl-c1">span</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-c1">@text</span>(<span class="pl-c1">:output</span>))
      ])
    ]
  ) <span class="pl-k">|&gt;</span> html
<span class="pl-k">end</span>

<span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>, ui)

<span class="pl-c1">up</span>()</pre></div>
<h2><a id="user-content-choosing-the-transport-layer-websockets-or-http" class="anchor" aria-hidden="true" href="#choosing-the-transport-layer-websockets-or-http"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Choosing the transport layer: WebSockets or HTTP</h2>
<p>By default Stipple will attempt to use WebSockets for real time data sync between backend and frontend.
However, in some cases WebSockets support might not be available on the host. In this case, Stipple can be
switched to use regular HTTP for data sync, using frontend polling with AJAX (1s polling interval by default).
Stipple can be configured to use AJAX/HTTP by passing the <code>transport</code> param to the <code>init()</code> method, ex:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Stipple.init(Name(), transport = Genie.WebThreads)
"><pre>model <span class="pl-k">=</span> Stipple<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">Name</span>(), transport <span class="pl-k">=</span> Genie<span class="pl-k">.</span>WebThreads)</pre></div>
<p>The current available options for <code>transport</code> are <code>Genie.WebChannels</code> (default, using WebSockets) and
<code>Genie.WebThreads</code> (using HTTP/AJAX).</p>
<p>Given that polling generates quite a number of extra requests, it can be desirable to disable automatic
logging of requests. This can be done using <code>Genie.config.log_requests = false</code>.</p>
<p>Support for <code>WebThreads</code> and request logging disabling has been introduced in Genie v1.14 and Stipple v0.8.</p>
<h3><a id="user-content-first-example-changed-to-use-webthreads" class="anchor" aria-hidden="true" href="#first-example-changed-to-use-webthreads"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>First example changed to use <code>WebThreads</code></h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Genie, Genie.Renderer.Html, Stipple

Genie.config.log_requests = false

Base.@kwdef mutable struct Name &lt;: ReactiveModel
  name::R{String} = &quot;World!&quot;
end

model = Stipple.init(Name(), transport = Genie.WebThreads)

function ui()
  page(
    vm(model), class=&quot;container&quot;,
    [
      h1([
        &quot;Hello &quot;
        span(&quot;&quot;, @text(:name))
      ])

      p([
        &quot;What is your name? &quot;
        input(&quot;&quot;, placeholder=&quot;Type your name&quot;, @bind(:name))
      ])
    ]
  ) |&gt; html
end

route(&quot;/&quot;, ui)

up()
"><pre><span class="pl-k">using</span> Genie, Genie<span class="pl-k">.</span>Renderer<span class="pl-k">.</span>Html, Stipple

Genie<span class="pl-k">.</span>config<span class="pl-k">.</span>log_requests <span class="pl-k">=</span> <span class="pl-c1">false</span>

Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">mutable struct</span> Name <span class="pl-k">&lt;:</span> <span class="pl-c1">ReactiveModel</span>
  name<span class="pl-k">::</span><span class="pl-c1">R{String}</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>World!<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

model <span class="pl-k">=</span> Stipple<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-c1">Name</span>(), transport <span class="pl-k">=</span> Genie<span class="pl-k">.</span>WebThreads)

<span class="pl-k">function</span> <span class="pl-en">ui</span>()
  <span class="pl-c1">page</span>(
    <span class="pl-c1">vm</span>(model), class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>container<span class="pl-pds">"</span></span>,
    [
      <span class="pl-c1">h1</span>([
        <span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-pds">"</span></span>
        <span class="pl-c1">span</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-c1">@text</span>(<span class="pl-c1">:name</span>))
      ])

      <span class="pl-c1">p</span>([
        <span class="pl-s"><span class="pl-pds">"</span>What is your name? <span class="pl-pds">"</span></span>
        <span class="pl-c1">input</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, placeholder<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Type your name<span class="pl-pds">"</span></span>, <span class="pl-c1">@bind</span>(<span class="pl-c1">:name</span>))
      ])
    ]
  ) <span class="pl-k">|&gt;</span> html
<span class="pl-k">end</span>

<span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>, ui)

<span class="pl-c1">up</span>()</pre></div>
<h2><a id="user-content-demos" class="anchor" aria-hidden="true" href="#demos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Demos</h2>
<h3><a id="user-content-german-credits-visualisation-dashboard" class="anchor" aria-hidden="true" href="#german-credits-visualisation-dashboard"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>German Credits visualisation dashboard</h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/504493915044b0aa89d3830af8e5ee87e496e9ced1d94030f6fa25cdcc460373/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f4765726d616e5f437265646974732e706e67"><img src="https://camo.githubusercontent.com/504493915044b0aa89d3830af8e5ee87e496e9ced1d94030f6fa25cdcc460373/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f4765726d616e5f437265646974732e706e67" width="800" data-canonical-src="https://genieframework.com/githubimg/Screenshot_German_Credits.png" style="max-width:100%;"></a></p>
<p>The full application is available at:
<a href="https://github.com/GenieFramework/Stipple-Demo-GermanCredits">https://github.com/GenieFramework/Stipple-Demo-GermanCredits</a></p>
<h3><a id="user-content-iris-flowers-dataset-k-means-clustering-dashboard" class="anchor" aria-hidden="true" href="#iris-flowers-dataset-k-means-clustering-dashboard"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Iris Flowers dataset k-Means clustering dashboard</h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ae312fcdebd465cde2fb2f41e21801407d6913405c0d4c32879a0c562cb372da/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f497269735f446174612e706e67"><img src="https://camo.githubusercontent.com/ae312fcdebd465cde2fb2f41e21801407d6913405c0d4c32879a0c562cb372da/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f497269735f446174612e706e67" width="800" data-canonical-src="https://genieframework.com/githubimg/Screenshot_Iris_Data.png" style="max-width:100%;"></a></p>
<p>The full application is available at:
<a href="https://github.com/GenieFramework/Stipple-Demo-IrisClustering">https://github.com/GenieFramework/Stipple-Demo-IrisClustering</a></p>
</article></div>