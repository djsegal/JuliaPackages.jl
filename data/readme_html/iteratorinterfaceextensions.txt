<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-iteratorinterfaceextensions" class="anchor" aria-hidden="true" href="#iteratorinterfaceextensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IteratorInterfaceExtensions</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/31267b3e96ca20997396b88f7c44233710fcc637/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/queryverse/IteratorInterfaceExtensions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3c5503b9e6329b610fb7413e773b79327079bdf5/68747470733a2f2f7472617669732d63692e6f72672f717565727976657273652f4974657261746f72496e74657266616365457874656e73696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/queryverse/IteratorInterfaceExtensions.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/queryverse/iteratorinterfaceextensions-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/da396a41e56afaacb833ec25acd08c9e63565c1f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f34727138736562336a317764377770702f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/4rq8seb3j1wd7wpp/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/queryverse/IteratorInterfaceExtensions.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/da11027d5ce295e56f0916941f8dc5973434b6fc/687474703a2f2f636f6465636f762e696f2f6769746875622f717565727976657273652f4974657261746f72496e74657266616365457874656e73696f6e732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/queryverse/IteratorInterfaceExtensions.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>IteratorInterfaceExtensions defines a small number of extensions to the iterator interface.</p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This package adds a couple of extensions to the standard <a href="https://docs.julialang.org/en/latest/manual/interfaces/#man-interface-iteration-1" rel="nofollow">iterator interface</a> in julia.</p>
<h3><a id="user-content-isiterable-and-getiterator" class="anchor" aria-hidden="true" href="#isiterable-and-getiterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>isiterable</code> and <code>getiterator</code></h3>
<p>The first extension is comprised of the functions <code>isiterable</code> and <code>getiterator</code>. <code>isiterable(x)</code> will return <code>true</code> or <code>false</code>, indicating whether <code>x</code> can be iterated. It is important to note that a <code>true</code> return value does <em>not</em> indicate that one can call the <code>iterate</code> method on <code>x</code>, instead a consumer <em>must</em> call <code>getiterator(x)</code> if <code>isiterable(x)</code> returned <code>true</code>, and can then call <code>iterate</code> on the instance that is returned by <code>getiterator</code>. The proper pattern for consumer code therefore looks like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">if</span> <span class="pl-c1">isiterable</span>(x)
    it <span class="pl-k">=</span> <span class="pl-c1">getiterator</span>(x)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> it
        <span class="pl-c"><span class="pl-c">#</span> Custom code</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>This consumer pattern will work with iterators that don't opt into the extensions in this package and with iterators that have opted into the extended interface defined in this package.</p>
<p>There are two scenarios when a source might participate in this extended iterator interface.</p>
<p>The first scenario is one where a source could not implement a type-stable version of <code>iterate</code> because the primary source type lacks the necessary type information. Such a source can add a method to <code>getiterator</code> that returns an instance of a different type with enough type information for a type stable implementation of the core iterator interface that iterates the elements of the original source.</p>
<p>Second, sometimes such a source might not want to implement the <code>iterate</code> method at all for its core type. If that is the case, this source can add a method to <code>isiterable</code> that returns <code>true</code>, even though the source does not have a <code>iterate</code> method. As long as this source still implements the <code>getiterator</code> function, it still complies with the extended iterator contract defined in this package.</p>
<h3><a id="user-content-iteratorsize2" class="anchor" aria-hidden="true" href="#iteratorsize2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>IteratorSize2</code></h3>
<p><code>IteratorSize2</code> extends <code>Base.IteratorSize</code> with an additional return value, namely <code>HasLengthAfterStart()</code>. An iterator consumer that can provide an optimized implementation for iterators that know their length after the first call to the <code>iterate</code> method has, can call <code>IteratorSize2</code> instead of <code>Base.IteratorSize</code>. The return value will either be one of the possible return values of <code>Base.IteratorSize</code>, or <code>HasLengthAfterStart()</code>. If the return value is <code>HasLengthAfterStart()</code>, the consumer can call <code>length(x, state)</code> to obtain the number of elements the iterator will return. Here <code>x</code> is the same value that <code>iterate</code> was called on, and <code>state</code> is the value returned by
<code>iterate(x)</code>.</p>
<p>An iterator that implements <code>IteratorSize2(x::MyType) = HasLengthAfterStart()</code> must also implement <code>Base.IteratorSize(x::MyType) = Base.SizeUnknown()</code>.</p>
</article></div>