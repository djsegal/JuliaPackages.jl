<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-penaltyfunctions" class="anchor" aria-hidden="true" href="#penaltyfunctions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PenaltyFunctions</h1>
<p><em>PenaltyFunctions.jl is a Julia package that provides generic
implementations for a diverse set of penalty functions that are
commonly used for regularization purposes in Machine Learning.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Package Status</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=PenaltyFunctions" rel="nofollow"><img src="https://camo.githubusercontent.com/3f60c461e27008a6ccb1ce860eb05bb68846b611/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f50656e616c747946756e6374696f6e735f302e362e737667" alt="Pkg Eval 0.6" data-canonical-src="http://pkg.julialang.org/badges/PenaltyFunctions_0.6.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaML/PenaltyFunctions.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0ab5920c9ce89934f165f808bab57f4615806abe/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d4c2f50656e616c747946756e6374696f6e732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaML/PenaltyFunctions.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/Evizero/penaltyfunctions-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/10b0d91b639eb05205cc049eeb14bafc3c35edb0/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f376663736374323978336d3666346e313f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/7fcsct29x3m6f4n1?svg=true" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaML/PenaltyFunctions.jl?branch=josh" rel="nofollow"><img src="https://camo.githubusercontent.com/64f17e14e74ab1e94a075b3d8a40c08bf74434a9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d4c2f50656e616c747946756e6374696f6e732e6a6c2f62616467652e7376673f6272616e63683d6a6f7368" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaML/PenaltyFunctions.jl/badge.svg?branch=josh" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>Many popular models in Machine Learning are parameterized by a
set of real-valued coefficients <code>θ</code> (theta), which is usually
stored in the form of an array. If our data set has <code>k</code> features,
then <code>θ</code> would typically be a vector of <code>k</code> or <code>k+1</code> numeric
elements. Each individual feature <code>x_i</code> of our data set is
assigned a corresponding coefficient <code>θ_i</code>, which is used to
quantify the feature's influence on the prediction. The concrete
values for the coefficient vector are learned by an optimization
algorithm, which tries to select the "best" set of coefficients
for the given data and model. Without any restriction on their
values the optimization algorithm is free to choose the
coefficients freely, which may result in overly complex
prediction functions. This freedom is known to cause the
optimization algorithm to overfit to the noise in the training
data. This is where penalties come in!</p>
<p>A penalty is a function of the coefficients and only the
coefficients. It associates the given set of coefficients with a
cost without any regard for their influence on the predictive
power of the prediction function. This cost is then is added to
the overall cost of the prediction function. This way the
optimization algorithm is encouraged to choose "simpler"
coefficients. What exactly "simpler" means depends on the chosen
penalty. In general terms: penalties help to reduce the
possibility of overfitting.</p>
<h2><a id="user-content-available-penalties" class="anchor" aria-hidden="true" href="#available-penalties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Available Penalties</h2>
<p>This package implements a number of carefully crafted penalty
functions, as well as an API to query their properties (e.g.
convexity). Furthermore, we expose methods to compute their
values and derivatives for a single value, coefficient vectors,
and even arrays of arbitrary dimensionality. The provided penalty
functions fall into one of two main families, namely <strong>Element
Penalties</strong> and <strong>Array Penalties</strong>.</p>
<h3><a id="user-content-element-penalties" class="anchor" aria-hidden="true" href="#element-penalties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Element Penalties</h3>
<p>The first family of penalty functions contains all those that
apply to to the individual elements of <code>θ</code> element-wise. The
resulting cost of a coefficient array is then the sum of the
element-wise results.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Univariate Parameter</strong></th>
<th align="center"><strong>Bivariate Parameter</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6e0b322991cdb606579e438d3868de0bdd06c7d0/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f50656e616c747946756e6374696f6e732f756e69766172696174652e737667"><img src="https://camo.githubusercontent.com/6e0b322991cdb606579e438d3868de0bdd06c7d0/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f50656e616c747946756e6374696f6e732f756e69766172696174652e737667" alt="univariate_elem" data-canonical-src="https://rawgithub.com/JuliaML/FileStorage/master/PenaltyFunctions/univariate.svg" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/930d5222183e795190a19462eac381311c8db680/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f50656e616c747946756e6374696f6e732f6269766172696174652e737667"><img src="https://camo.githubusercontent.com/930d5222183e795190a19462eac381311c8db680/68747470733a2f2f7261776769746875622e636f6d2f4a756c69614d4c2f46696c6553746f726167652f6d61737465722f50656e616c747946756e6374696f6e732f6269766172696174652e737667" alt="bivariate_elem" data-canonical-src="https://rawgithub.com/JuliaML/FileStorage/master/PenaltyFunctions/bivariate.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center">The cost-values of various penalties as a function of a single coefficient</td>
<td align="center">Cross sections of the cost-surfaces. This time for two coefficients</td>
</tr>
</tbody>
</table>
<p>Every penalty that is of this family is subtype of
<code>ElementPenalty</code>. From an implementation perspective these
penalties are defined using the element-wise functions. The
following table lists the implemented types and their
definitions.</p>
<table>
<thead>
<tr>
<th>Penalty</th>
<th>value on element</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NoPenalty()</code></td>
<td><code>g(θ) = 0</code></td>
</tr>
<tr>
<td><code>L1Penalty()</code></td>
<td><code>g(θ) = abs(θ)</code></td>
</tr>
<tr>
<td><code>L2Penalty()</code></td>
<td><code>g(θ) = 0.5 * θ ^ 2</code></td>
</tr>
<tr>
<td><code>ElasticNetPenalty(α = 0.5)</code></td>
<td><code>g(θ) = (1 - α) * abs(θ) + α * .5 * θ ^ 2</code></td>
</tr>
<tr>
<td><code>SCADPenalty(a = 3.7, γ = 1.0)</code></td>
<td><code>L1Penalty that blends to constant</code></td>
</tr>
<tr>
<td><code>MCPPenalty(γ = 2.0)</code></td>
<td><code>g(θ) = abs(θ) &lt; γ ? abs(θ) - θ ^ 2 / 2γ : γ / 2</code></td>
</tr>
<tr>
<td><code>LogPenalty(η = 1.0)</code></td>
<td><code>g(θ) = log(1 + η * abs(θ))</code></td>
</tr>
</tbody>
</table>
<p>The total cost for an array of coefficients is then defined as
<code>sum(g, θ)</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PenaltyFunctions
p <span class="pl-k">=</span> <span class="pl-c1">L1Penalty</span>()
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>)
s <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>)
buffer <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> value</span>
<span class="pl-c1">value</span>(p, x[<span class="pl-c1">1</span>])        <span class="pl-c"><span class="pl-c">#</span> evaluate on element</span>
<span class="pl-c1">value</span>(p, x)           <span class="pl-c"><span class="pl-c">#</span> evaluate on array</span>
<span class="pl-c1">value</span>.(p, x)          <span class="pl-c"><span class="pl-c">#</span> broadcast is supported as well</span>
<span class="pl-c1">value</span>(p, x[<span class="pl-c1">1</span>], s[<span class="pl-c1">1</span>])  <span class="pl-c"><span class="pl-c">#</span> evaluate on element, scaled by scalar</span>
<span class="pl-c1">value</span>(p, x, s[<span class="pl-c1">1</span>])     <span class="pl-c"><span class="pl-c">#</span> evaluate on array, scaled by scalar</span>
<span class="pl-c1">value</span>(p, x, s)        <span class="pl-c"><span class="pl-c">#</span> evaluate on array, element-wise scaling</span>

<span class="pl-c"><span class="pl-c">#</span> value via calling the Penalty object</span>
p <span class="pl-k">=</span> <span class="pl-c1">L1Penalty</span>()
<span class="pl-c1">p</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])

<span class="pl-c"><span class="pl-c">#</span> derivatives and gradients</span>
<span class="pl-c1">deriv</span>(p, x[<span class="pl-c1">1</span>])        <span class="pl-c"><span class="pl-c">#</span> derivative</span>
<span class="pl-c1">deriv</span>(p, x[<span class="pl-c1">1</span>], s[<span class="pl-c1">1</span>])  <span class="pl-c"><span class="pl-c">#</span> scaled derivative</span>
<span class="pl-c1">grad</span>(p, x)            <span class="pl-c"><span class="pl-c">#</span> gradient</span>
<span class="pl-c1">grad</span>(p, x, s[<span class="pl-c1">1</span>])      <span class="pl-c"><span class="pl-c">#</span> scaled gradient</span>
<span class="pl-c1">grad</span>(p, x, s)         <span class="pl-c"><span class="pl-c">#</span> element-wise scaled gradient</span>
<span class="pl-c1">grad!</span>(buffer, p, x)       <span class="pl-c"><span class="pl-c">#</span> overwrite buffer with gradient</span>
<span class="pl-c1">grad!</span>(buffer, p, x, s[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> overwrite buffer with scaled gradient</span>
<span class="pl-c1">grad!</span>(buffer, p, x, s)    <span class="pl-c"><span class="pl-c">#</span> overwrite buffer with element-wise scaled gradient</span>

<span class="pl-c"><span class="pl-c">#</span> prox operator</span>
<span class="pl-c1">prox</span>(p, x[<span class="pl-c1">1</span>], s[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> prox on element</span>
<span class="pl-c1">prox</span>(p, x, s[<span class="pl-c1">1</span>])    <span class="pl-c"><span class="pl-c">#</span> prox on array, scaled by scalar</span>
<span class="pl-c1">prox</span>(p, x, s)       <span class="pl-c"><span class="pl-c">#</span> prox on array, element-wise scaling</span>
<span class="pl-c1">prox!</span>(p, x, s[<span class="pl-c1">1</span>])   <span class="pl-c"><span class="pl-c">#</span> overwrite x, scaled by scalar</span>
<span class="pl-c1">prox!</span>(p, x, s)      <span class="pl-c"><span class="pl-c">#</span> overwrite x, element-wise scaling</span></pre></div>
<h3><a id="user-content-array-penalties" class="anchor" aria-hidden="true" href="#array-penalties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Array Penalties</h3>
<p>The second family of penalty functions contains all those that
that need to be evaluated on the entire coefficient array <code>θ</code> at
once. Every penalty that belongs to this family is subtype of
<code>ArrayPenalty</code>. The following table outlines the implemented
types and their definitions.</p>
<table>
<thead>
<tr>
<th>Penalty</th>
<th>value on array</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NuclearNormPenalty()</code></td>
<td><code>sum of singular values of x</code></td>
</tr>
<tr>
<td><code>MahalanobisPenalty(C)</code></td>
<td><code>g(x) = x' * C' * C * x</code></td>
</tr>
<tr>
<td><code>GroupLassoPenalty()</code></td>
<td><code>g(x) = vecnorm(x)</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in <code>METADATA.jl</code>.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PenaltyFunctions<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This code is free to use under the terms of the MIT "Expat" license.</p>
</article></div>