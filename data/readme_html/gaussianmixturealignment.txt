<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gaussianmixturealignmentjl" class="anchor" aria-hidden="true" href="#gaussianmixturealignmentjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GaussianMixtureAlignment.jl</h1>
<p dir="auto">A Julia implementation of the Globally-Optimal Gaussian Mixture Alignment (GOGMA) algorithm <a href="https://arxiv.org/abs/1603.00150" rel="nofollow">(Campbell, 2016)</a>, with modifications inspired by
<a href="https://arxiv.org/abs/1812.11307" rel="nofollow">Li et. al. (2018)</a>.</p>
<p dir="auto">The GOGMA algorithm uses a branch-and-bound procedure to return a globally optimal alignment of point sets via rigid transformation. In order to improve speed for small point sets, the alignment problem can be split to separately optimize rotational and translational alignments, while still guaranteeing global optimality, through the using of translation invariant vectors (TIVs).</p>
<p dir="auto">Becaues the runtime of the GOGMA algorithm is O(n^2), and that of the TIV-GOGMA algorithm is O(n^4), they may be unsuitable for use with large point sets without downsampling.</p>
<h2 dir="auto"><a id="user-content-construct-isotropic-gaussian-mixture-models-gmms-for-alignment" class="anchor" aria-hidden="true" href="#construct-isotropic-gaussian-mixture-models-gmms-for-alignment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construct Isotropic Gaussian Mixture Models (GMMs) for alignment</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; # These are very simple point sets that can be perfectly aligned

julia&gt; xpts = [[0.,0.,0.], [3.,0.,0.,], [0.,4.,0.]];

julia&gt; ypts = [[1.,1.,1.], [1.,-2.,1.], [1.,1.,-3.]];

julia&gt; σ = ϕ = 1.;

julia&gt; gmmx = IsotropicGMM([IsotropicGaussian(x, σ, ϕ) for x in xpts])
IsotropicGMM{3, Float64} with 3 IsotropicGaussian{3, Float64} distributions.


julia&gt; gmmy = IsotropicGMM([IsotropicGaussian(y, σ, ϕ) for y in ypts])
IsotropicGMM{3, Float64} with 3 IsotropicGaussian{3, Float64} distributions.


julia&gt; # Compute the overlap between the two GMMs

julia&gt; overlap(gmmx, gmmy)
1.1908057504684806"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> These are very simple point sets that can be perfectly aligned</span>

julia<span class="pl-k">&gt;</span> xpts <span class="pl-k">=</span> [[<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>], [<span class="pl-c1">3.</span>,<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>,], [<span class="pl-c1">0.</span>,<span class="pl-c1">4.</span>,<span class="pl-c1">0.</span>]];

julia<span class="pl-k">&gt;</span> ypts <span class="pl-k">=</span> [[<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>], [<span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">2.</span>,<span class="pl-c1">1.</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">3.</span>]];

julia<span class="pl-k">&gt;</span> σ <span class="pl-k">=</span> ϕ <span class="pl-k">=</span> <span class="pl-c1">1.</span>;

julia<span class="pl-k">&gt;</span> gmmx <span class="pl-k">=</span> <span class="pl-c1">IsotropicGMM</span>([<span class="pl-c1">IsotropicGaussian</span>(x, σ, ϕ) <span class="pl-k">for</span> x <span class="pl-k">in</span> xpts])
IsotropicGMM{<span class="pl-c1">3</span>, Float64} with <span class="pl-c1">3</span> IsotropicGaussian{<span class="pl-c1">3</span>, Float64} distributions.


julia<span class="pl-k">&gt;</span> gmmy <span class="pl-k">=</span> <span class="pl-c1">IsotropicGMM</span>([<span class="pl-c1">IsotropicGaussian</span>(y, σ, ϕ) <span class="pl-k">for</span> y <span class="pl-k">in</span> ypts])
IsotropicGMM{<span class="pl-c1">3</span>, Float64} with <span class="pl-c1">3</span> IsotropicGaussian{<span class="pl-c1">3</span>, Float64} distributions.


julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Compute the overlap between the two GMMs</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">overlap</span>(gmmx, gmmy)
<span class="pl-c1">1.1908057504684806</span></pre></div>
<h2 dir="auto"><a id="user-content-align-isotropic-gmms-with-tiv-gogma" class="anchor" aria-hidden="true" href="#align-isotropic-gmms-with-tiv-gogma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Align Isotropic GMMs with TIV-GOGMA</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = tiv_gogma_align(gmmx, gmmy);

julia&gt; # upper and lower bounds of alignmnet objective function at search termination

julia&gt; res.upperbound, res.lowerbound
(-3.2512906351736524, -3.348917632693506)

julia&gt; # rotation component of the best transformation

julia&gt; res.tform.linear
3×3 AngleAxis{Float64} with indices SOneTo(3)×SOneTo(3)(2.0944, -0.57735, 0.57735, -0.57735):
  1.63136e-10   1.90925e-10  1.0
 -1.0           2.24997e-10  1.63136e-10
 -2.24997e-10  -1.0          1.90925e-10

julia&gt; # translation component of the best transformation

julia&gt; res.tform.translation
3-element StaticArrays.SVector{3, Float64} with indices SOneTo(3):
 1.0
 1.0
 1.0

julia&gt; # repeat alignment with stricter tolerance

julia&gt; res.upperbound, res.lowerbound
(-3.2512906351736524, -3.2522904816062654)

julia&gt; # The result has not changed, but there is a tighter lower bound

julia&gt; # Compute the overlap between the GMMs after alignment

julia&gt; overlap(res.tform(gmmx), gmmy)
3.2512906351736524"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">tiv_gogma_align</span>(gmmx, gmmy);

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> upper and lower bounds of alignmnet objective function at search termination</span>

julia<span class="pl-k">&gt;</span> res<span class="pl-k">.</span>upperbound, res<span class="pl-k">.</span>lowerbound
(<span class="pl-k">-</span><span class="pl-c1">3.2512906351736524</span>, <span class="pl-k">-</span><span class="pl-c1">3.348917632693506</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> rotation component of the best transformation</span>

julia<span class="pl-k">&gt;</span> res<span class="pl-k">.</span>tform<span class="pl-k">.</span>linear
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> AngleAxis{Float64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">×</span><span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)(<span class="pl-c1">2.0944</span>, <span class="pl-k">-</span><span class="pl-c1">0.57735</span>, <span class="pl-c1">0.57735</span>, <span class="pl-k">-</span><span class="pl-c1">0.57735</span>)<span class="pl-k">:</span>
  <span class="pl-c1">1.63136e-10</span>   <span class="pl-c1">1.90925e-10</span>  <span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>           <span class="pl-c1">2.24997e-10</span>  <span class="pl-c1">1.63136e-10</span>
 <span class="pl-k">-</span><span class="pl-c1">2.24997e-10</span>  <span class="pl-k">-</span><span class="pl-c1">1.0</span>          <span class="pl-c1">1.90925e-10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> translation component of the best transformation</span>

julia<span class="pl-k">&gt;</span> res<span class="pl-k">.</span>tform<span class="pl-k">.</span>translation
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">3</span>, Float64} with indices <span class="pl-c1">SOneTo</span>(<span class="pl-c1">3</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> repeat alignment with stricter tolerance</span>

julia<span class="pl-k">&gt;</span> res<span class="pl-k">.</span>upperbound, res<span class="pl-k">.</span>lowerbound
(<span class="pl-k">-</span><span class="pl-c1">3.2512906351736524</span>, <span class="pl-k">-</span><span class="pl-c1">3.2522904816062654</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> The result has not changed, but there is a tighter lower bound</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Compute the overlap between the GMMs after alignment</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">overlap</span>(res<span class="pl-k">.</span><span class="pl-c1">tform</span>(gmmx), gmmy)
<span class="pl-c1">3.2512906351736524</span></pre></div>
<h2 dir="auto"><a id="user-content-plot-isotropic-gmms" class="anchor" aria-hidden="true" href="#plot-isotropic-gmms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plot Isotropic GMMs</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; # Draw the unaligned GMMs

julia&gt; plotdrawing(drawIsotropicGMMs([gmmx,gmmy]))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Draw the unaligned GMMs</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plotdrawing</span>(<span class="pl-c1">drawIsotropicGMMs</span>([gmmx,gmmy]))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./assets/image/example.png"><img src="./assets/image/example.png" width="400" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; # Draw the aligned GMMs

julia&gt; plotdrawing(drawIsotropicGMMs([res.tform(gmmx),gmmy]))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Draw the aligned GMMs</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plotdrawing</span>(<span class="pl-c1">drawIsotropicGMMs</span>([res<span class="pl-k">.</span><span class="pl-c1">tform</span>(gmmx),gmmy]))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./assets/image/example_aligned.png"><img src="./assets/image/example_aligned.png" width="400" style="max-width: 100%;"></a></p>
</article></div>