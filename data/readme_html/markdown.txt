<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-markdown" class="anchor" aria-hidden="true" href="#markdown"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Markdown</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Markdown.parse_file(&quot;file.md&quot;)
readme(&quot;Markdown&quot;) # or any other installed package
"><pre>Markdown<span class="pl-k">.</span><span class="pl-c1">parse_file</span>(<span class="pl-s"><span class="pl-pds">"</span>file.md<span class="pl-pds">"</span></span>)
<span class="pl-c1">readme</span>(<span class="pl-s"><span class="pl-pds">"</span>Markdown<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> or any other installed package</span></pre></div>
<p><strong>Markdown.jl</strong> is a flexible and efficient markdown parser for Julia.
It supports a preliminary implementation of CommonMark as well as GitHub,
IPython and Julia flavoured markdown.</p>
<p><em>Note that Markdown.jl lives in Base Julia form 0.4 onwards. PRs and changes should be made over there.</em></p>
<p>## Examples</p>
<p>You can construct Markdown by parsing it with <code>Markdown.parse("...")</code> or inline with the <code>md"..."</code> string macro. The created object will display itself nicely in HTML environments and the terminal.</p>
<p>You can also grab a package's readme with e.g. <code>readme("Markdown")</code>.</p>
<p>Say we have a docstring that looks like so:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="md&quot;&quot;&quot;
  # Fast Fourier Transform

      Base.fft(A[, dims])

  Performs a multidimensional FFT of the array `A`.  The optional
  `dims` argument specifies an iterable subset of dimensions (e.g.
  an integer, range, tuple, or array) to transform along.  Most
  efficient if the size of `A` along the transformed dimensions is
  a product of small primes; see `nextprod()`.  See also
  `plan_fft()` for even greater efficiency.

  A multidimensional FFT simply performs this operation along each
  transformed dimension of `A`.

  $(let x = [1:100]
      plot(x = 1:100, y = real(fft(sin(x) + sin(2x))), Geom.line)
    end)
  &quot;&quot;&quot;
"><pre><span class="pl-c1">md</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">  # Fast Fourier Transform</span>
<span class="pl-s1"></span>
<span class="pl-s1">      Base.fft(A[, dims])</span>
<span class="pl-s1"></span>
<span class="pl-s1">  Performs a multidimensional FFT of the array <span class="pl-c1">`A`</span>.  The optional</span>
<span class="pl-s1">  <span class="pl-c1">`dims`</span> argument specifies an iterable subset of dimensions (e.g.</span>
<span class="pl-s1">  an integer, range, tuple, or array) to transform along.  Most</span>
<span class="pl-s1">  efficient if the size of <span class="pl-c1">`A`</span> along the transformed dimensions is</span>
<span class="pl-s1">  a product of small primes; see <span class="pl-c1">`nextprod()`</span>.  See also</span>
<span class="pl-s1">  <span class="pl-c1">`plan_fft()`</span> for even greater efficiency.</span>
<span class="pl-s1"></span>
<span class="pl-s1">  A multidimensional FFT simply performs this operation along each</span>
<span class="pl-s1">  transformed dimension of <span class="pl-c1">`A`</span>.</span>
<span class="pl-s1"></span>
<span class="pl-s1">  <span class="pl-v">$(<span class="pl-k">let</span> x <span class="pl-k">=</span> [<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]</span></span>
<span class="pl-s1"><span class="pl-v">      <span class="pl-c1">plot</span>(x <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, y <span class="pl-k">=</span> <span class="pl-c1">real</span>(<span class="pl-c1">fft</span>(<span class="pl-c1">sin</span>(x) <span class="pl-k">+</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2</span>x))), Geom<span class="pl-k">.</span>line)</span></span>
<span class="pl-s1"><span class="pl-v">    <span class="pl-k">end</span>)</span></span>
<span class="pl-s1">  </span><span class="pl-pds">"""</span></pre></div>
<p>In the terminal this will render like so:</p>
<p><a target="_blank" rel="noopener noreferrer" href="img/term.png"><img src="img/term.png" alt="terminal" style="max-width:100%;"></a></p>
<p>In Juno (pending CSS updates), like so:</p>
<p><a target="_blank" rel="noopener noreferrer" href="img/juno.png"><img src="img/juno.png" alt="juno" style="max-width:100%;"></a></p>
<p>What's that you say? Why yes, I believe it is an interpolated Gadfly plot. Yes, it is indeed interactive. No, this probably won't actually be useful until we standardise on a plotting package in Base, but it's still pretty cool, right?</p>
<p>Incidentally, the interpolation also potentially solves the problem of growing a non-standard Markdown implementation, since anything we need can actually be interpolated as an object with appropriate <code>writemime</code> methods defined. I do plan to have Markdown syntax for tables, equations etc. anyway but until then you can always just interp. an <code>Equation</code> object of some sort.</p>
<p>So now all we need is syntax highlighting and Mathematica-style ASCII equation rendering in the terminal and we're all set.</p>
</article></div>