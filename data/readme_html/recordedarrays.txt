<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-recordedarraysjl" class="anchor" aria-hidden="true" href="#recordedarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RecordedArrays.jl</h1>
<p dir="auto"><a href="https://github.com/wangl-cc/RecordedArrays.jl/actions/workflows/ci.yml"><img src="https://github.com/wangl-cc/RecordedArrays.jl/actions/workflows/ci.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/RecordedArrays/TOzPf" rel="nofollow"><img src="https://camo.githubusercontent.com/95e7e4d890c36746f0e329f5318425960ce1e7b9fd76c6c180d2aba580c024ed/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f5265636f726465644172726179732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/RecordedArrays/pkgeval.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/wangl-cc/RecordedArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/746204dde731fb29d572e43cda8a38af44486afb31d7dcce93e738ab4477fb38/68747470733a2f2f636f6465636f762e696f2f67682f77616e676c2d63632f5265636f726465644172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/wangl-cc/RecordedArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/wangl-cc/RecordedArrays.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/771af048420522b7f822a7661e4a49fbf3168fe9933b4bec81d56a2eb1ee4eec/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77616e676c2d63632f5265636f726465644172726179732e6a6c" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/wangl-cc/RecordedArrays.jl" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/RecordedArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://wangl-cc.github.io/RecordedArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">During running a simulation, one of the most important but annoying part is
recording and processing the changing values of state.
This package provides "recorded" types,
changes of which will be recorded automatically.</p>
<p dir="auto"><strong>Note:</strong> There are huge changes between <code>v0.3</code> and <code>v0.4</code>.
You can not load and process data of <code>v0.3</code> with <code>v0.4</code>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This is a registered package, it can be installed with the <code>add</code> command in
the Pkg REPL:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add RecordedArrays"><pre class="notranslate"><code>pkg&gt; add RecordedArrays
</code></pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick Start</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RecordedArrays # load this package

julia&gt; c = ContinuousClock(3); # define a clock

julia&gt; v = recorded(DynamicEntry, c, [0, 1]) # create a recorded array with the clock
2-element recorded(::Vector{Int64}):
 0
 1

julia&gt; v + v # math operations work as normal array
2-element Vector{Int64}:
 0
 2

julia&gt; v .* v # broadcast works as normal array as well
2-element Vector{Int64}:
 0
 1

julia&gt; increase!(c, 1) # when time goes and array changes, increase the define clock firstly
1

julia&gt; v[1] += 1 # change array's element
1

julia&gt; increase!(c, 1) # when time goes and array changes, increase the define clock firstly
2

julia&gt; push!(v, 1) # push a new element
3-element recorded(::Vector{Int64}):
 1
 1
 1

julia&gt; es = getentries(v) # view recorded changes
3-element Vector{DynamicEntry{Int64, Int64}}:
 DynamicEntry{Int64, Int64}([0, 1], [0, 1])
 DynamicEntry{Int64, Int64}([1], [0])
 DynamicEntry{Int64, Int64}([1], [2])

julia&gt; es[1] # the changes of the first element of `v`, which changed to 1 at `t=1`
DynamicEntry{Int64, Int64} with timestamps:
 0
 1

julia&gt; gettime(es[1], 0:2) # get the value of the first element at time 0, 1 and 2
3-element Vector{Int64}:
 0
 1
 1

julia&gt; es[3] # the changes of the third element of `v`, which was pushed at `t=2`
DynamicEntry{Int64, Int64} with timestamps:
 2

julia&gt; gettime(es[3], 0:2) # get the value of the first element at time 0, 1 and 2
3-element Vector{Int64}:
 0
 0
 1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RecordedArrays <span class="pl-c"><span class="pl-c">#</span> load this package</span>

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">ContinuousClock</span>(<span class="pl-c1">3</span>); <span class="pl-c"><span class="pl-c">#</span> define a clock</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">recorded</span>(DynamicEntry, c, [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> create a recorded array with the clock</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">recorded</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>)<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">+</span> v <span class="pl-c"><span class="pl-c">#</span> math operations work as normal array</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> v <span class="pl-k">.*</span> v <span class="pl-c"><span class="pl-c">#</span> broadcast works as normal array as well</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">increase!</span>(c, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> when time goes and array changes, increase the define clock firstly</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> v[<span class="pl-c1">1</span>] <span class="pl-k">+=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> change array's element</span>
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">increase!</span>(c, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> when time goes and array changes, increase the define clock firstly</span>
<span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(v, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> push a new element</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">recorded</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> es <span class="pl-k">=</span> <span class="pl-c1">getentries</span>(v) <span class="pl-c"><span class="pl-c">#</span> view recorded changes</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{DynamicEntry{Int64, Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">DynamicEntry</span><span class="pl-c1">{Int64, Int64}</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>])
 <span class="pl-c1">DynamicEntry</span><span class="pl-c1">{Int64, Int64}</span>([<span class="pl-c1">1</span>], [<span class="pl-c1">0</span>])
 <span class="pl-c1">DynamicEntry</span><span class="pl-c1">{Int64, Int64}</span>([<span class="pl-c1">1</span>], [<span class="pl-c1">2</span>])

julia<span class="pl-k">&gt;</span> es[<span class="pl-c1">1</span>] <span class="pl-c"><span class="pl-c">#</span> the changes of the first element of `v`, which changed to 1 at `t=1`</span>
DynamicEntry{Int64, Int64} with timestamps<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gettime</span>(es[<span class="pl-c1">1</span>], <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> get the value of the first element at time 0, 1 and 2</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> es[<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> the changes of the third element of `v`, which was pushed at `t=2`</span>
DynamicEntry{Int64, Int64} with timestamps<span class="pl-k">:</span>
 <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">gettime</span>(es[<span class="pl-c1">3</span>], <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> get the value of the first element at time 0, 1 and 2</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>
 <span class="pl-c1">1</span></pre></div>
</article></div>