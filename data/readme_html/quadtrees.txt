<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quadtrees" class="anchor" aria-hidden="true" href="#quadtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quadtrees</h1>
<p>Implementation of <a href="https://en.wikipedia.org/wiki/Quadtree" rel="nofollow">Quadtrees</a> using the julia programming language. This package is intended to be used with the <a href="#">Alexya.jl</a> package and the <a href="#">Luxor.jl</a> package, but it can be used independently.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;Quadtrees&quot;)
"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Quadtrees<span class="pl-pds">"</span></span>)</pre></div>
<p>Or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add Quadtrees
"><pre lang="julia-REPL"><code>julia&gt; ] add Quadtrees
</code></pre></div>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<p>First, import the <code>Quadtrees</code> module:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Quadtrees

# or

import Quadtrees: Quadtree
"><pre><span class="pl-k">using</span> Quadtrees

<span class="pl-c"><span class="pl-c">#</span> or</span>

<span class="pl-k">import</span> Quadtrees<span class="pl-k">:</span> Quadtree</pre></div>
<p>Then, define the data type you need to use with the quadtree.
Remember that your type must have a 2D position.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mutable struct Particle
    x::Real
    y::Real
    radius::Real
end
"><pre><span class="pl-k">mutable struct</span> Particle
    x<span class="pl-k">::</span><span class="pl-c1">Real</span>
    y<span class="pl-k">::</span><span class="pl-c1">Real</span>
    radius<span class="pl-k">::</span><span class="pl-c1">Real</span>
<span class="pl-k">end</span></pre></div>
<p>Before constructing the <code>quadtree</code> object, you need to define
the <code>Quadtrees.position</code> method for your type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Quadtrees.position(p::Particle) = (p.x, p.y)
"><pre>Quadtrees<span class="pl-k">.</span><span class="pl-en">position</span>(p<span class="pl-k">::</span><span class="pl-c1">Particle</span>) <span class="pl-k">=</span> (p<span class="pl-k">.</span>x, p<span class="pl-k">.</span>y)</pre></div>
<blockquote>
<p>The <code>Quadtrees.position</code> method is used to determine
the position of each element in the quadtree, so it's
important to define it, otherwise your code won't work.</p>
</blockquote>
<p>Then, create your <code>quadtree</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="qt = Quadtree{Particle}((0, 0), 400, 400, 4)
"><pre>qt <span class="pl-k">=</span> <span class="pl-c1">Quadtree</span><span class="pl-c1">{Particle}</span>((<span class="pl-c1">0</span>, <span class="pl-c1">0</span>), <span class="pl-c1">400</span>, <span class="pl-c1">400</span>, <span class="pl-c1">4</span>)</pre></div>
<p>The <code>Quadtree</code> constructor accept four parameters:</p>
<ol>
<li>A tuple of two real numbers (x, y), that determines the <code>quadtree's</code> center position.</li>
<li>The <code>quadtree's</code> width.</li>
<li>The <code>quadtree's</code> height.</li>
<li>The <code>quadtree's</code> capacity (how many items it will have before dividing).</li>
</ol>
<p>Then, create your objects (<code>Particles</code> in this case), and insert then in your <code>quadtree</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="for i in 0:999
    # two random numbers between 0 and 200
    x, y = rand(Float64, 2) * 200
    # add 1 to make sure the radius is not zero
    radius = rand(Float64) * 49 + 1
    p = Particle(x, y, radius)
    # insert the particle into the quadtree.
    insert!(qt, p)
end
"><pre><span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">999</span>
    <span class="pl-c"><span class="pl-c">#</span> two random numbers between 0 and 200</span>
    x, y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64, <span class="pl-c1">2</span>) <span class="pl-k">*</span> <span class="pl-c1">200</span>
    <span class="pl-c"><span class="pl-c">#</span> add 1 to make sure the radius is not zero</span>
    radius <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64) <span class="pl-k">*</span> <span class="pl-c1">49</span> <span class="pl-k">+</span> <span class="pl-c1">1</span>
    p <span class="pl-k">=</span> <span class="pl-c1">Particle</span>(x, y, radius)
    <span class="pl-c"><span class="pl-c">#</span> insert the particle into the quadtree.</span>
    <span class="pl-c1">insert!</span>(qt, p)
<span class="pl-k">end</span></pre></div>
<p>Now you can <code>search</code> the <code>quadtree</code> for items (<code>Particles</code>, in this case), that
are located within a circular range, located at <code>(x, y)</code> with radius <code>r</code>.</p>
<p>For example, searching for particles within a range located at
<code>(5, 10)</code> with radius <code>50</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# s for search
sx, sy = 5, 10
sr = 50
result = search(qt, sx, sy, sr)
"><pre><span class="pl-c"><span class="pl-c">#</span> s for search</span>
sx, sy <span class="pl-k">=</span> <span class="pl-c1">5</span>, <span class="pl-c1">10</span>
sr <span class="pl-k">=</span> <span class="pl-c1">50</span>
result <span class="pl-k">=</span> <span class="pl-c1">search</span>(qt, sx, sy, sr)</pre></div>
<p>The return is an array of the object type that the quadtree contains.</p>
<blockquote>
<p>Note: If no object is within the range, the result will be an empty array.</p>
</blockquote>
<p>Now you can do whatever you want with the objects that the search found:</p>
<p>For example, i'll make each particle object 20% bigger:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="for particle in result
    particle.radius += particle.radius * .20
end
"><pre><span class="pl-k">for</span> particle <span class="pl-k">in</span> result
    particle<span class="pl-k">.</span>radius <span class="pl-k">+=</span> particle<span class="pl-k">.</span>radius <span class="pl-k">*</span> <span class="pl-c1">.20</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ol class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> implement the <code>clear</code> method.</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> dynamic quadtree.</li>
</ol>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>MIT License</p>
<p>Copyright (c) 2021 Jorge Pereira <a href="mailto:jorge.brito.json@gmail.com">jorge.brito.json@gmail.com</a></p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</p>
</article></div>