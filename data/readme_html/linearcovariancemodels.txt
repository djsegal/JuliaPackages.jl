<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-linearcovariancemodels" class="anchor" aria-hidden="true" href="#linearcovariancemodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LinearCovarianceModels</h1>
<p dir="auto"><a href="https://saschatimme.github.io/LinearCovarianceModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://travis-ci.com/saschatimme/LinearCovarianceModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0b80ad37fcca94683a26ffbef83f181a9134e56b2e1cb2a60ef25b23ac968ee3/68747470733a2f2f7472617669732d63692e636f6d2f73617363686174696d6d652f4c696e656172436f76617269616e63654d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/saschatimme/LinearCovarianceModels.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/saschatimme/LinearCovarianceModels"><code>LinearCovarianceModels.jl</code></a> is a package for
computing Maximum Likelihood degrees and MLEs of linear covariance models using numerical nonlinear algebra.
In particular <a href="https://www.JuliaHomotopyContinuation.org" rel="nofollow">HomotopyContinuation.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In order to use <code>LinearCovarianceModels.jl</code> you need to have at least Julia 1.1 installed. If this is not the case you can download it at <a href="https://julialang.org" rel="nofollow">julialang.org</a>. Please see the <a href="https://julialang.org/downloads/platform.html" rel="nofollow">platform specific instructions</a> if you have trouble installing Julia.</p>
<p dir="auto">The package can be installed by executing</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;LinearCovarianceModels&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LinearCovarianceModels<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">in the Julia REPL.</p>
<p dir="auto">If you are looking for a more IDE like experience take a look at <a href="https://junolab.org" rel="nofollow">Juno</a>.</p>
<h2 dir="auto"><a id="user-content-introduction-by-example" class="anchor" aria-hidden="true" href="#introduction-by-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction by Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# load package
julia&gt; using LinearCovarianceModels

# Create a linear covariance model
julia&gt; Σ = toeplitz(3)
3-dimensional LCModel:
 θ₁  θ₂  θ₃
 θ₂  θ₁  θ₂
 θ₃  θ₂  θ₁

# Compute a witness for the ML degree
julia&gt; W = ml_degree_witness(Σ)
 MLDegreeWitness:
 • ML degree → 3
 • model dimension → 3
 • dual → false

# We offer the option to numerically verify the ML Degree
julia&gt; verify(W)
 Compute additional witnesses for completeness...
 Found 10 additional witnesses
 Found 10 additional witnesses
 Compute trace...
 Norm of trace: 2.6521474798326718e-12
 true

# Consider the sample covariance matrix S
julia&gt; S = [4/5 -9/5 -1/25
            -9/5 79/16 25/24
            -1/25 25/24 17/16];

# We use the ML degree witness set W to compute all critical points of the MLE
# problem.
julia&gt; critical_points(W, S)
3-element Array{Tuple{Array{Float64,1},Float64,Symbol},1}:
 ([2.39038, -0.286009, 0.949965], -5.421751313919751, :local_maximum)
 ([2.52783, -0.215929, -1.45229], -5.346601549034418, :global_maximum)
 ([2.28596, -0.256394, 0.422321], -5.424161999175718, :saddle_point)  

# If we are just interested in the MLE, there is also a shorthand.
julia&gt; mle(W, S)
3-element Array{Float64,1}:
  2.527832268219689  
 -0.21592947057775033
 -1.4522862659134732"><pre><span class="pl-c"><span class="pl-c">#</span> load package</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LinearCovarianceModels

<span class="pl-c"><span class="pl-c">#</span> Create a linear covariance model</span>
julia<span class="pl-k">&gt;</span> Σ <span class="pl-k">=</span> <span class="pl-c1">toeplitz</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>dimensional LCModel<span class="pl-k">:</span>
 θ₁  θ₂  θ₃
 θ₂  θ₁  θ₂
 θ₃  θ₂  θ₁

<span class="pl-c"><span class="pl-c">#</span> Compute a witness for the ML degree</span>
julia<span class="pl-k">&gt;</span> W <span class="pl-k">=</span> <span class="pl-c1">ml_degree_witness</span>(Σ)
 MLDegreeWitness<span class="pl-k">:</span>
 • ML degree → <span class="pl-c1">3</span>
 • model dimension → <span class="pl-c1">3</span>
 • dual → <span class="pl-c1">false</span>

<span class="pl-c"><span class="pl-c">#</span> We offer the option to numerically verify the ML Degree</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">verify</span>(W)
 Compute additional witnesses <span class="pl-k">for</span> completeness<span class="pl-k">...</span>
 Found <span class="pl-c1">10</span> additional witnesses
 Found <span class="pl-c1">10</span> additional witnesses
 Compute trace<span class="pl-k">...</span>
 Norm of trace<span class="pl-k">:</span> <span class="pl-c1">2.6521474798326718e-12</span>
 <span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> Consider the sample covariance matrix S</span>
julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> [<span class="pl-c1">4</span><span class="pl-k">/</span><span class="pl-c1">5</span> <span class="pl-k">-</span><span class="pl-c1">9</span><span class="pl-k">/</span><span class="pl-c1">5</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">25</span>
            <span class="pl-k">-</span><span class="pl-c1">9</span><span class="pl-k">/</span><span class="pl-c1">5</span> <span class="pl-c1">79</span><span class="pl-k">/</span><span class="pl-c1">16</span> <span class="pl-c1">25</span><span class="pl-k">/</span><span class="pl-c1">24</span>
            <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">25</span> <span class="pl-c1">25</span><span class="pl-k">/</span><span class="pl-c1">24</span> <span class="pl-c1">17</span><span class="pl-k">/</span><span class="pl-c1">16</span>];

<span class="pl-c"><span class="pl-c">#</span> We use the ML degree witness set W to compute all critical points of the MLE</span>
<span class="pl-c"><span class="pl-c">#</span> problem.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">critical_points</span>(W, S)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Tuple{Array{Float64,<span class="pl-c1">1</span>},Float64,Symbol},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 ([<span class="pl-c1">2.39038</span>, <span class="pl-k">-</span><span class="pl-c1">0.286009</span>, <span class="pl-c1">0.949965</span>], <span class="pl-k">-</span><span class="pl-c1">5.421751313919751</span>, <span class="pl-c1">:local_maximum</span>)
 ([<span class="pl-c1">2.52783</span>, <span class="pl-k">-</span><span class="pl-c1">0.215929</span>, <span class="pl-k">-</span><span class="pl-c1">1.45229</span>], <span class="pl-k">-</span><span class="pl-c1">5.346601549034418</span>, <span class="pl-c1">:global_maximum</span>)
 ([<span class="pl-c1">2.28596</span>, <span class="pl-k">-</span><span class="pl-c1">0.256394</span>, <span class="pl-c1">0.422321</span>], <span class="pl-k">-</span><span class="pl-c1">5.424161999175718</span>, <span class="pl-c1">:saddle_point</span>)  

<span class="pl-c"><span class="pl-c">#</span> If we are just interested in the MLE, there is also a shorthand.</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">mle</span>(W, S)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.527832268219689</span>  
 <span class="pl-k">-</span><span class="pl-c1">0.21592947057775033</span>
 <span class="pl-k">-</span><span class="pl-c1">1.4522862659134732</span></pre></div>
<p dir="auto">For more informations take a look at the <a href="https://saschatimme.github.io/LinearCovarianceModels.jl/stable" rel="nofollow">documentation</a>.</p>
</article></div>