<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-a-one-phase-interior-point-method-for-nonconvex-optimization" class="anchor" aria-hidden="true" href="#a-one-phase-interior-point-method-for-nonconvex-optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A one-phase interior point method for nonconvex optimization</h1>
<p>This package is the implementation of a one-phase interior point method that finds KKT points of optimization problems of the form:</p>

<p><a target="_blank" rel="noopener noreferrer" href="misc/problem-statement.gif"><img src="misc/problem-statement.gif" alt="min f(x) s.t. a(x) &lt; 0" style="max-width:100%;"></a></p>
<p>where the functions <a target="_blank" rel="noopener noreferrer" href="misc/f.gif"><img src="misc/f.gif" alt="f : R^n -&gt; R" style="max-width:100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="misc/a.gif"><img src="misc/a.gif" alt="a : R^n -&gt; R^m" style="max-width:100%;"></a> are twice differentiable. The one-phase algorithm also handles bound constraints and nonlinear equalities.</p>
<p><em>Currently, the package is in development.</em> Although you are welcome to try it out. Please let me know if there are any bugs etc. Note that the code is generally significantly slower than Ipopt in terms of raw runtime, particularly on small problems (the iteration count is competitive). However, we recommend trying our one-phase IPM if: Ipopt is failing to solve, the problem is very large or might be infeasible.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/ohinder/advanced_timer.jl<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/ohinder/OnePhase.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-how-to-use-with-jump" class="anchor" aria-hidden="true" href="#how-to-use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use with JuMP</h2>
<p>Here is a simple example where a <a href="http://www.juliaopt.org/JuMP.jl/0.18/JuMP" rel="nofollow">JuMP</a> model is passed to the one-phase solver</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OnePhase, JuMP

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(solver<span class="pl-k">=</span><span class="pl-c1">OnePhaseSolver</span>())
<span class="pl-c1">@variable</span>(m, x, start<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">3</span>)
<span class="pl-c1">@objective</span>(m, Min, x)
<span class="pl-c1">@NLconstraint</span>(m, x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">&gt;=</span> <span class="pl-c1">1.0</span>)
<span class="pl-c1">@NLconstraint</span>(m, x <span class="pl-k">&gt;=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>)

status <span class="pl-k">=</span> <span class="pl-c1">solve</span>(m)</pre></div>
<h2><a id="user-content-example-using-cutest" class="anchor" aria-hidden="true" href="#example-using-cutest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example using CUTEst</h2>
<p>Install <a href="http://juliasmoothoptimizers.github.io/CUTEst.jl/latest/" rel="nofollow">CUTEst</a> then run</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OnePhase, CUTEst
nlp <span class="pl-k">=</span> <span class="pl-c1">CUTEstModel</span>(<span class="pl-s"><span class="pl-pds">"</span>CHAIN<span class="pl-pds">"</span></span>)
iter <span class="pl-k">=</span> <span class="pl-c1">one_phase_solve</span>(nlp);</pre></div>
<h2><a id="user-content-feedback" class="anchor" aria-hidden="true" href="#feedback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Feedback?</h2>
<p>If you have found some bug or think there is someway I can improve the code feel free to contact me! My webpage is <a href="https://stanford.edu/~ohinder/" rel="nofollow">https://stanford.edu/~ohinder/</a>.</p>
<h2><a id="user-content-solver-output" class="anchor" aria-hidden="true" href="#solver-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solver output</h2>
<p>it = iteration number</p>
<p>step = step type, either stabilization step (s) or aggressive step (a)</p>
<p>eta = <em>targeted</em> reduction in feasibility/barrier parameter, eta=1 for stabilization steps eta&lt;1 for aggressive steps</p>
<p>α_P = primal step size</p>
<p>α_D = dual step size</p>
<p>ls = number of points trialled during line search</p>
<p>|dx| = infinity norm of primal direction size</p>
<p>|dy| = infinity norm of dual direction size</p>
<p>N err = relative error in linear system solves.</p>
<p>mu = value of barrier parameter</p>
<p>dual = gradient of lagragian scaled by largest dual variable</p>
<p>primal = error in primal feasibility</p>
<p>cmp scaled = | Sy |/(1 + |y|)</p>
<p>inf = how close to infeasible problem is, values close to zero indicate infeasibility</p>
<p>delta = size of perturbation</p>
<p>#fac  = number of factorizations (split into two numbers -- first is how many factorization needed to ensure primal schur complement is positive definite, second number represents total number of factorizations including any increases in delta to avoid issues when direction quality is very poor)</p>
<p>|x| = infinity norm of x variables</p>
<p>|y| = infinity norm of y variables</p>
<p>∇phi = gradient of log barrier</p>
<p>phi = value of log barrier</p>
</article></div>