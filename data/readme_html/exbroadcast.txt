<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-exbroadcastjl" class="anchor" aria-hidden="true" href="#exbroadcastjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExBroadcast.jl</h1>
<ul dir="auto">
<li>Extend <code>Base.Broadcast</code> by macros:
<ul dir="auto">
<li><code>@tab</code>: Tuple of Array Broadcast --- broadcast with multiple outputs will be stored in tuple of array (instead of array of tuple).</li>
<li><code>@mtb</code>: MultiThread Broadcast --- perform broadcast with multiple threads.</li>
<li><code>@mtab</code>: <code>@mtb</code> + <code>@tab</code></li>
</ul>
</li>
<li>Add support for broadcast of <code>CuArray</code> wrapped by <code>OffsetArray</code> and <code>StructArray</code>.</li>
<li>use <code>Lazy(::Generator)</code> to avoid collect before broadcast. (i.e. sum.(Lazy(eachcol(a))))</li>
</ul>
<h2 dir="auto"><a id="user-content-macros-usage" class="anchor" aria-hidden="true" href="#macros-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Macros' Usage</h2>
<ol dir="auto">
<li><code>@tab</code> : support <code>CuArray</code>, <code>OffsetArray</code>, <code>Tuple</code></li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = randn(4000,4000);
julia&gt; @tab b,c = sincos.(a); #Unfortunately, we need a macro here
julia&gt; @tab b,c = broadcast(sincos,a);
julia&gt; b,c .= sincos.(a);
julia&gt; broadcast!(sincos,(b,c),a);"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">4000</span>,<span class="pl-c1">4000</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@tab</span> b,c <span class="pl-k">=</span> <span class="pl-c1">sincos</span>.(a); <span class="pl-c"><span class="pl-c">#</span>Unfortunately, we need a macro here</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@tab</span> b,c <span class="pl-k">=</span> <span class="pl-c1">broadcast</span>(sincos,a);
julia<span class="pl-k">&gt;</span> b,c <span class="pl-k">.=</span> <span class="pl-c1">sincos</span>.(a);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">broadcast!</span>(sincos,(b,c),a);</pre></div>
<ul dir="auto">
<li>For <code>outputs &lt;: AbstractArray</code>
<ul dir="auto">
<li>Only the default <code>copy</code> method which use <code>similar(bc,T)</code> is implemented, thus inputs like <code>StaticArrays</code> is not allowed for non-inplace caluculation.</li>
<li><code>@tab</code> could be omitted for in-place broadcast.</li>
<li><code>@tab</code> is not optimized for BitArray. The default return type is Array{Bool} for non-inplace broadcast.</li>
</ul>
</li>
<li>For <code>outputs &lt;: Tuple</code>, <code>@tab</code> first generate all results and then seperate them.</li>
<li><code>@tab</code> is not designed for too many outputs.</li>
</ul>
<ol start="2" dir="auto">
<li><code>@mtb</code> : cpu multi-threads broadcast</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; a = randn(4000,4000); b = similar(a);
julia&gt; @btime @mtb @. $b = sin(a);
  47.756 ms (22 allocations: 2.97 KiB)
julia&gt; @btime @. $b = sin(a);
  167.985 ms (2 allocations: 32 bytes)
julia&gt; Threads.nthreads()
 4"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">4000</span>,<span class="pl-c1">4000</span>); b <span class="pl-k">=</span> <span class="pl-c1">similar</span>(a);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@mtb</span> <span class="pl-c1">@.</span> <span class="pl-k">$</span>b <span class="pl-k">=</span> <span class="pl-c1">sin</span>(a);
  <span class="pl-c1">47.756</span> ms (<span class="pl-c1">22</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.97</span> KiB)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">@.</span> <span class="pl-k">$</span>b <span class="pl-k">=</span> <span class="pl-c1">sin</span>(a);
  <span class="pl-c1">167.985</span> ms (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">32</span> bytes)
julia<span class="pl-k">&gt;</span> Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>()
 <span class="pl-c1">4</span></pre></div>
<ul dir="auto">
<li><code>@mtb</code> use <code>CartesianPartition</code> to seperate the task with dimension &gt; 1</li>
<li><code>@mtb</code> will be turned off automately for <code>CuArray</code> and <code>Tuple</code></li>
<li><code>@mtb</code> assume all elements in the dest array(s) are seperated in the memory and there's no thread safety check.</li>
<li><code>@mtb</code> is not tuned for small arrays (It won't invoke the single thread version automately).</li>
<li>User can change the number of threads by :
<ul dir="auto">
<li>Call <code>ExBroadcast.set_num_threads(n)</code> for global change.</li>
<li>Use 2 inputs macro <code>@mtb n [...]</code> for local change. (thread safe)</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h2>
<ol dir="auto">
<li><code>@mtab</code> only save some compile cost.</li>
</ol>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ToDo</h2>
<p dir="auto"><del>1. use <code>MacroTools.jl</code> for macro.jl.</del> done<br>
<del>2. allow more expresions</del> done, now <code>ExBroadcast.jl</code> can handle control flow.<br>
3. add a macro to force gpu broadcast.</p>
</article></div>