<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-growthmaps" class="anchor" aria-hidden="true" href="#growthmaps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GrowthMaps</h1>
<p><a href="https://cesaraustralia.github.io/GrowthMaps.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cesaraustralia.github.io/GrowthMaps.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/cesaraustralia/GrowthMaps.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/87eb5c240fbf13eec69d8f5edf63237326f8a9e13994a602079bc97084ff651c/68747470733a2f2f7472617669732d63692e636f6d2f63657361726175737472616c69612f47726f7774684d6170732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/cesaraustralia/GrowthMaps.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/cesaraustralia/GrowthMaps.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/93ee4648e329f5655706157e58831ecf84c2e4a86a72718bc72936af05f1041d/687474703a2f2f636f6465636f762e696f2f6769746875622f63657361726175737472616c69612f47726f7774684d6170732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/cesaraustralia/GrowthMaps.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/cesaraustralia/GrowthMaps.jl/gh-pages/dev/figures/example_26_1.png"><img src="https://raw.githubusercontent.com/cesaraustralia/GrowthMaps.jl/gh-pages/dev/figures/example_26_1.png" alt="example" style="max-width:100%;"></a></p>
<p>GrowthMaps.jl produces gridded population level growth rates from environmental data,
and fitted growth and stress models, following the method outlined in Maino et
al, <em>"Forecasting the potential distribution of the invasive vegetable leafminer
using ‘top-down’ and ‘bottom-up’ models"</em>
<a href="https://www.biorxiv.org/content/10.1101/866996v1" rel="nofollow">(in press)</a>.</p>
<p>GrowthMaps.jl is an alternative to CLIMEX and similar tools. Its key point of differentiation from
other methods is that results arrays have units of growth/time. Another useful property of these models
is that growth rate layers can be added and combined arbitrarily.</p>
<p>A primary use-case for GrowthMaps layers is in for calculating growth-rates for
<a target="_blank" rel="noopener noreferrer" href="https://github.com/cesaraustralia/Dispersal.jl"><img src="https://github.com/cesaraustralia/Dispersal.jl" alt="Dispersal.jl" style="max-width:100%;"></a>. This allows heterogeneous
organism growth rates to influence dispersal patterns, simulating permanent range limits and
potential for seasonal range shift.</p>
<p>For data input, this package leverages <a href="http://github.com/rafaqz/GeoData.jl"><code>GeoData.jl</code></a>
to import datasets from many different sources. Files are loaded lazily in sequence to
minimise memory, using the <code>GeoSeries</code> abstraction, that can hold "SMAP" HDF5 files,
NetCDFs, or <code>GeoStack</code>s of <code>tif</code> or other GDAL source files, or simply memory-backed
arrays. These data sources can be used interchangeably.</p>
<p>Computations can be run on GPUs, for example with <code>arraytype=CuArray</code> to use CUDA for Nvidia GPUs.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Here we run a single growth model over SMAP data, on a Nvida GPU:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using GrowthMaps, GeoData, HDF5, CUDA, Unitful

# Define a growth model
p = 3e-01
ΔH_A = 3e4cal/mol
ΔH_L = -1e5cal/mol
ΔH_H = 3e5cal/mol
Thalf_L = 2e2K
Thalf_H = 3e2K
T_ref = K(25.0°C)
growthmodel = SchoolfieldIntrinsicGrowth(p, ΔH_A, ΔH_L, Thalf_L, ΔH_H, Thalf_H, T_ref)

# Wrap the model with a data layer with the key
# to retreive the data from, and the Unitful.jl units.
growth = Layer(:surface_temp, K, growthmodel)
"><pre><span class="pl-k">using</span> GrowthMaps, GeoData, HDF5, CUDA, Unitful

<span class="pl-c"><span class="pl-c">#</span> Define a growth model</span>
p <span class="pl-k">=</span> <span class="pl-c1">3e-01</span>
ΔH_A <span class="pl-k">=</span> <span class="pl-c1">3e4</span>cal<span class="pl-k">/</span>mol
ΔH_L <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1e5</span>cal<span class="pl-k">/</span>mol
ΔH_H <span class="pl-k">=</span> <span class="pl-c1">3e5</span>cal<span class="pl-k">/</span>mol
Thalf_L <span class="pl-k">=</span> <span class="pl-c1">2e2</span>K
Thalf_H <span class="pl-k">=</span> <span class="pl-c1">3e2</span>K
T_ref <span class="pl-k">=</span> <span class="pl-c1">K</span>(<span class="pl-c1">25.0</span>°C)
growthmodel <span class="pl-k">=</span> <span class="pl-c1">SchoolfieldIntrinsicGrowth</span>(p, ΔH_A, ΔH_L, Thalf_L, ΔH_H, Thalf_H, T_ref)

<span class="pl-c"><span class="pl-c">#</span> Wrap the model with a data layer with the key</span>
<span class="pl-c"><span class="pl-c">#</span> to retreive the data from, and the Unitful.jl units.</span>
growth <span class="pl-k">=</span> <span class="pl-c1">Layer</span>(<span class="pl-c1">:surface_temp</span>, K, growthmodel)</pre></div>
<p>Now we will use GeoData.jl to load a series of <a href="https://smap.jpl.nasa.gov/" rel="nofollow">SMAP</a>
files lazily, and GrowthMaps.jl will load them to the GPU just in time for processing:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Load 1000s of HDF5 files lazily using GeoData.jl
series = SMAPseries(&quot;your_SMAP_folder&quot;)

# Run the model
output = mapgrowth(growth;
    series=series,
    tspan=DateTime(2016, 1):Month(1):DateTime(2016, 12),
    arraytype=CuArray, # Use an Nvidia GPU for computations
)

# Plot every third month of 2016:
output[Ti(1:3:12)] |&gt; plot
"><pre><span class="pl-c"><span class="pl-c">#</span> Load 1000s of HDF5 files lazily using GeoData.jl</span>
series <span class="pl-k">=</span> <span class="pl-c1">SMAPseries</span>(<span class="pl-s"><span class="pl-pds">"</span>your_SMAP_folder<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Run the model</span>
output <span class="pl-k">=</span> <span class="pl-c1">mapgrowth</span>(growth;
    series<span class="pl-k">=</span>series,
    tspan<span class="pl-k">=</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2016</span>, <span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">Month</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2016</span>, <span class="pl-c1">12</span>),
    arraytype<span class="pl-k">=</span>CuArray, <span class="pl-c"><span class="pl-c">#</span> Use an Nvidia GPU for computations</span>
)

<span class="pl-c"><span class="pl-c">#</span> Plot every third month of 2016:</span>
output[<span class="pl-c1">Ti</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">12</span>)] <span class="pl-k">|&gt;</span> plot</pre></div>
<p>GrowthMaps.jl is fast.</p>
<p>As a rough benchmark, running a model using 3 3800*1600 layers from 3000 SMAP
files on a M.2. drive takes under 7 minutes on a desktop with a good GPU,
like a GeForce 1080. The computation time is trivial, running ten similar
models takes essentially the same time as running one model. On a CPU, model run-time
becomes more of a factor, but is still fast for a single model.</p>
<p>See the <a href="https://cesaraustralia.github.io/GrowthMaps.jl/dev/example/" rel="nofollow"><code>Examples</code></a>
section in the documentation to get started. You can also work through the
<a href="https://github.com/cesaraustralia/GrowthMaps.jl/blob/master/docs/src/example.jmd">example.jmd</a> in atom
(with the language-weave plugin) or the
<a href="https://github.com/cesaraustralia/GrowthMaps.jl/blob/gh-pages/dev/notebook/example.ipynb">notebook</a>.</p>
<h2><a id="user-content-live-interfaces" class="anchor" aria-hidden="true" href="#live-interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Live Interfaces</h2>
<p>GrowthMaps provides interfaces for manually fitting models where automated fits are not appropriate.</p>
<p>Model curves can be fitted to an <code>AbstractRange</code> of input data using <code>manualfit</code>:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/cesaraustralia/GrowthMaps.jl/blob/media/manualfit.png?raw=true"><img src="https://github.com/cesaraustralia/GrowthMaps.jl/raw/media/manualfit.png?raw=true" alt="manualfit interface" style="max-width:100%;"></a></p>
<p>Observations can be fitted to a map. Aggregated maps <code>GeoSeries</code> can be used to fit models in real-time.
See the examples for details.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/cesaraustralia/GrowthMaps.jl/blob/media/mapfit.png?raw=true"><img src="https://github.com/cesaraustralia/GrowthMaps.jl/raw/media/mapfit.png?raw=true" alt="mapfit interface" style="max-width:100%;"></a></p>
</article></div>