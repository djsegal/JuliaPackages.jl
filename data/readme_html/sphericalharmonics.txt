<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-spherical-harmonics" class="anchor" aria-hidden="true" href="#spherical-harmonics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spherical Harmonics</h1>
<p><a href="https://github.com/jishnub/SphericalHarmonics.jl/actions/workflows/ci.yml"><img src="https://github.com/jishnub/SphericalHarmonics.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jishnub/SphericalHarmonics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fc3ed0bbf988ebd85aff6df458a4ad76c3b7e8b20e6ee88504748a823f2ed3c1/68747470733a2f2f636f6465636f762e696f2f67682f6a6973686e75622f53706865726963616c4861726d6f6e6963732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jishnub/SphericalHarmonics.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://jishnub.github.io/SphericalHarmonics.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jishnub.github.io/SphericalHarmonics.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>For a full description of the code, please see:</p>
<p><a href="http://arxiv.org/abs/1410.1748" rel="nofollow"><strong>Associated Legendre Polynomials and Spherical Harmonics Computation for Chemistry Applications</strong></a> (2014). Taweetham Limpanuparb and Josh Milthorpe. arXiv: 1410.1748 [physics.chem-ph]</p>
<h1><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h1>
<p>The normalized associated Legendre polynomials for an angle <code>θ</code> for all <code>l</code> in <code>0 &lt;= l &lt;= lmax</code> and all <code>m</code> in <code>-l &lt;= m &lt;= l</code> may be generated using the signature <code>computePlm(θ; lmax)</code>, eg.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; P = computePlmcostheta(pi/2, lmax = 1)
3-element SHArray(::Vector{Float64}, (ML(0:1, 0:1),)):
  0.3989422804014327
  4.231083042742082e-17
 -0.4886025119029199
"><pre>julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">computePlmcostheta</span>(<span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">2</span>, lmax <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">SHArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, (<span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>),))<span class="pl-k">:</span>
  <span class="pl-c1">0.3989422804014327</span>
  <span class="pl-c1">4.231083042742082e-17</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4886025119029199</span></pre></div>
<p>The polynomials are ordered with <code>m</code> increasing faster than <code>l</code>, and the returned array may be indexed using <code>(l,m)</code> Tuples as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; P[(0,0)]
0.3989422804014327

julia&gt; P[(1,1)] == P[3]
true
"><pre>julia<span class="pl-k">&gt;</span> P[(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>)]
<span class="pl-c1">0.3989422804014327</span>

julia<span class="pl-k">&gt;</span> P[(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)] <span class="pl-k">==</span> P[<span class="pl-c1">3</span>]
<span class="pl-c1">true</span></pre></div>
<p>Spherical harmonics for a colatitude <code>θ</code> and azimuth <code>ϕ</code> may be generated using the signature <code>computeYlm(θ, ϕ; lmax)</code>, eg.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Y = computeYlm(pi/3, 0, lmax = 1)
4-element SHArray(::Vector{Complex{Float64}}, (ML(0:1, -1:1),)):
  0.2820947917738782 + 0.0im
  0.2992067103010745 - 0.0im
 0.24430125595146002 + 0.0im
 -0.2992067103010745 - 0.0im
"><pre>julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> <span class="pl-c1">computeYlm</span>(<span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span>, lmax <span class="pl-k">=</span> <span class="pl-c1">1</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">SHArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Complex{Float64}}</span>, (<span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>),))<span class="pl-k">:</span>
  <span class="pl-c1">0.2820947917738782</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.2992067103010745</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.24430125595146002</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.2992067103010745</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span></pre></div>
<p>The returned array may be indexed using <code>(l,m)</code> Tuples as well, as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Y[(1,-1)]
0.2992067103010745 - 0.0im

julia&gt; Y[(1,-1)] == Y[2]
true
"><pre>julia<span class="pl-k">&gt;</span> Y[(<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>)]
<span class="pl-c1">0.2992067103010745</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>

julia<span class="pl-k">&gt;</span> Y[(<span class="pl-c1">1</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>)] <span class="pl-k">==</span> Y[<span class="pl-c1">2</span>]
<span class="pl-c1">true</span></pre></div>
<p>Special angles <code>SphericalHarmonics.NorthPole()</code> and <code>SphericalHarmonics.SouthPole()</code> may be passed as <code>θ</code> to use efficient algorithms.</p>
<h2><a id="user-content-increased-precision" class="anchor" aria-hidden="true" href="#increased-precision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Increased precision</h2>
<p>Arguments of <code>BigInt</code> and <code>BigFloat</code> types would increase the precision of the result.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Y = computeYlm(big(pi)/2, big(0), lmax = 1) # Arbitrary precision
4-element SHArray(::Vector{Complex{BigFloat}}, (ML(0:1, -1:1),)):
    0.2820947917738781434740397257803862929220253146644994284220428608553212342207478 + 0.0im
    0.3454941494713354792652446460318896831393773703262433134867073548945156550201567 - 0.0im
 2.679783085063171668225419916118067917387251852939708540164955895366691604430101e-78 + 0.0im
   -0.3454941494713354792652446460318896831393773703262433134867073548945156550201567 - 0.0im
"><pre>julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> <span class="pl-c1">computeYlm</span>(<span class="pl-c1">big</span>(<span class="pl-c1">pi</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">big</span>(<span class="pl-c1">0</span>), lmax <span class="pl-k">=</span> <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> Arbitrary precision</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">SHArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Complex{BigFloat}}</span>, (<span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>),))<span class="pl-k">:</span>
    <span class="pl-c1">0.2820947917738781434740397257803862929220253146644994284220428608553212342207478</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
    <span class="pl-c1">0.3454941494713354792652446460318896831393773703262433134867073548945156550201567</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">2.679783085063171668225419916118067917387251852939708540164955895366691604430101e-78</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
   <span class="pl-k">-</span><span class="pl-c1">0.3454941494713354792652446460318896831393773703262433134867073548945156550201567</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span></pre></div>
<h2><a id="user-content-semi-positive-harmonics" class="anchor" aria-hidden="true" href="#semi-positive-harmonics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Semi-positive harmonics</h2>
<p>For real functions it might be sufficient to compute only the functions for <code>m &gt;= 0</code>. These may be computed by passing the flag <code>m_range = SphericalHarmonics.ZeroTo</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; computeYlm(pi/3, 0, lmax = 1, m_range = SphericalHarmonics.ZeroTo)
3-element SHArray(::Vector{Complex{Float64}}, (ML(0:1, 0:1),)):
  0.2820947917738782 + 0.0im
 0.24430125595146002 + 0.0im
 -0.2992067103010745 - 0.0im
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">computeYlm</span>(<span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span>, lmax <span class="pl-k">=</span> <span class="pl-c1">1</span>, m_range <span class="pl-k">=</span> SphericalHarmonics<span class="pl-k">.</span>ZeroTo)
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">SHArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Complex{Float64}}</span>, (<span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>),))<span class="pl-k">:</span>
  <span class="pl-c1">0.2820947917738782</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.24430125595146002</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-k">-</span><span class="pl-c1">0.2992067103010745</span> <span class="pl-k">-</span> <span class="pl-c1">0.0im</span></pre></div>
<h2><a id="user-content-real-harmonics" class="anchor" aria-hidden="true" href="#real-harmonics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Real harmonics</h2>
<p>It's also possible to compute real spherical harmonics by passing the flag <code>SHType = SphericalHarmonics.RealHarmonics()</code>, eg.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Y = computeYlm(pi/3, pi/3, lmax = 1, SHType = SphericalHarmonics.RealHarmonics())
4-element SHArray(::Vector{Float64}, (ML(0:1, -1:1),)):
  0.2820947917738782
 -0.3664518839271899
  0.24430125595146002
 -0.21157109383040865
"><pre>julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> <span class="pl-c1">computeYlm</span>(<span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">3</span>, <span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">3</span>, lmax <span class="pl-k">=</span> <span class="pl-c1">1</span>, SHType <span class="pl-k">=</span> SphericalHarmonics<span class="pl-k">.</span><span class="pl-c1">RealHarmonics</span>())
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">SHArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, (<span class="pl-c1">ML</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>),))<span class="pl-k">:</span>
  <span class="pl-c1">0.2820947917738782</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3664518839271899</span>
  <span class="pl-c1">0.24430125595146002</span>
 <span class="pl-k">-</span><span class="pl-c1">0.21157109383040865</span></pre></div>
<p>These are faster to evaluate and require less memory to store.</p>
<h1><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>See also</h1>
<p><a href="https://github.com/JuliaApproximation/FastTransforms.jl">FastTransforms.jl</a>: The function <code>FastTransforms.sphevaluate</code> is faster at evaluating real spherical harmonics for a single mode.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @btime FastTransforms.sphevaluate($(big(pi)/3), $(big(pi)/3), 100, 100)
  153.142 μs (1336 allocations: 72.64 KiB)
-3.801739606943941485088961175328961189010502022112528054751517912248264631529766e-07

julia&gt; @btime SphericalHarmonics.sphericalharmonic($(big(pi)/3), $(big(pi)/3), 100, 100, SphericalHarmonics.RealHarmonics())
  165.932 μs (1439 allocations: 78.01 KiB)
-3.801739606943941485088961175328961189010502022112528054751517912248264631529107e-07
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> FastTransforms<span class="pl-k">.</span><span class="pl-c1">sphevaluate</span>(<span class="pl-k">$</span>(<span class="pl-c1">big</span>(<span class="pl-c1">pi</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>), <span class="pl-k">$</span>(<span class="pl-c1">big</span>(<span class="pl-c1">pi</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>), <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
  <span class="pl-c1">153.142</span> μs (<span class="pl-c1">1336</span> allocations<span class="pl-k">:</span> <span class="pl-c1">72.64</span> KiB)
<span class="pl-k">-</span><span class="pl-c1">3.801739606943941485088961175328961189010502022112528054751517912248264631529766e-07</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> SphericalHarmonics<span class="pl-k">.</span><span class="pl-c1">sphericalharmonic</span>(<span class="pl-k">$</span>(<span class="pl-c1">big</span>(<span class="pl-c1">pi</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>), <span class="pl-k">$</span>(<span class="pl-c1">big</span>(<span class="pl-c1">pi</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>), <span class="pl-c1">100</span>, <span class="pl-c1">100</span>, SphericalHarmonics<span class="pl-k">.</span><span class="pl-c1">RealHarmonics</span>())
  <span class="pl-c1">165.932</span> μs (<span class="pl-c1">1439</span> allocations<span class="pl-k">:</span> <span class="pl-c1">78.01</span> KiB)
<span class="pl-k">-</span><span class="pl-c1">3.801739606943941485088961175328961189010502022112528054751517912248264631529107e-07</span></pre></div>
<p>This difference might reduce in the future.</p>
</article></div>