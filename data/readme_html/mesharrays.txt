<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mesharraysjl" class="anchor" aria-hidden="true" href="#mesharraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MeshArrays.jl</h1>
<p><a href="https://travis-ci.org/juliaclimate/MeshArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ad86acbe6a3faa21946f568e638bcc884c01fe8a2832cdc2d9944474c2f07975/68747470733a2f2f7472617669732d63692e6f72672f6a756c6961636c696d6174652f4d6573684172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/juliaclimate/MeshArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://juliaclimate.github.io/MeshArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliaclimate.github.io/MeshArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/juliaclimate/MeshArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/904d3399180257b5d4fc5d75bd09ccce420f280670fb7c46c1c946f781576340/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961636c696d6174652f4d6573684172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/juliaclimate/MeshArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://zenodo.org/badge/latestdoi/143987632" rel="nofollow"><img src="https://camo.githubusercontent.com/921de05cde676246b4ff5da076d2ccd4081aba96958b77ab99f403a409d8d94c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3134333938373633322e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/143987632.svg" style="max-width:100%;"></a>
<a href="https://mybinder.org/v2/gh/JuliaClimate/MeshArrays.jl/master" rel="nofollow"><img src="https://camo.githubusercontent.com/581c077bdbc6ca6899c86d0acc6145ae85e9d80e6f805a1071793dbe48917982/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="https://mybinder.org/badge_logo.svg" style="max-width:100%;"></a></p>
<p><strong>MeshArrays.jl</strong> defines the <code>MeshArray</code> data structure (or type) that can contain, and distribute, collections of inter-connected arrays as generally done in climate models. This provides a simple yet efficient and general way to e.g. analyze climate system simulations.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;MeshArrays&quot;)
Pkg.test(&quot;MeshArrays&quot;)
"><pre><code>using Pkg
Pkg.add("MeshArrays")
Pkg.test("MeshArrays")
</code></pre></div>
<h3><a id="user-content-workflow-example" class="anchor" aria-hidden="true" href="#workflow-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Workflow Example</h3>
<p>The diffusive smoother presented here as an example uses <code>MeshArrays.jl</code> to compute partial derivatives over a global domain / grid, which involves transfering data between neighboring subdomain arrays. In this workflow example, we</p>
<ol>
<li>generate a global grid decomposition</li>
<li>seed random noise across global domain</li>
<li>smooth out noise by applying diffusion globally</li>
<li>plots the <code>outer</code> array of subdomain / <code>inner</code> arrays</li>
</ol>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using MeshArrays; p=dirname(pathof(MeshArrays))
γ,Γ=GridOfOnes(&quot;PeriodicDomain&quot;,16,20)

include(joinpath(p,&quot;../examples/Demos.jl&quot;))
(xi,xo,_,_)=demo2(Γ);
show(xo)

using Plots
include(joinpath(p,&quot;../examples/Plots.jl&quot;))
heatmap(xo,clims=(-0.25,0.25),colorbar=false,tickfont = (4, :black))
"><pre><code>using MeshArrays; p=dirname(pathof(MeshArrays))
γ,Γ=GridOfOnes("PeriodicDomain",16,20)

include(joinpath(p,"../examples/Demos.jl"))
(xi,xo,_,_)=demo2(Γ);
show(xo)

using Plots
include(joinpath(p,"../examples/Plots.jl"))
heatmap(xo,clims=(-0.25,0.25),colorbar=false,tickfont = (4, :black))
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20276764/118325229-2d883d80-b4d1-11eb-953b-ddbb11bcfe1b.png"><img src="https://user-images.githubusercontent.com/20276764/118325229-2d883d80-b4d1-11eb-953b-ddbb11bcfe1b.png" width="40%" style="max-width:100%;"></a> ===&gt; <a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/20276764/118325093-f31ea080-b4d0-11eb-8c6e-8cd0cc2cc255.png"><img src="https://user-images.githubusercontent.com/20276764/118325093-f31ea080-b4d0-11eb-8c6e-8cd0cc2cc255.png" width="40%" style="max-width:100%;"></a></p>
<h3><a id="user-content-global-grids" class="anchor" aria-hidden="true" href="#global-grids"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Global Grids</h3>
<p>In the previous example we used a basic <em>doubly periodic</em>  domain with <em>16 subdomains</em> of <em>40x40 grid points</em> each. However, <code>MeshArrays.jl</code> also readily supports more elaborate global grid configurations, such as the ones shown below, which are commonly used in modeling climate.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/images/sphere_all.png"><img src="docs/images/sphere_all.png" width="40%" style="max-width:100%;"></a></p>
<p>To be able to handle such climate model grids in practical and uniform fashion, <code>MeshArrays.jl</code> introduces custom array types that are geared towards climate science applications.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="struct gcmarray{T, N} &lt;: AbstractMeshArray{T, N}
   grid::gcmgrid
   meta::varmeta
   f::Array{Array{T,2},N}
   fSize::Array{NTuple{2, Int}}
   fIndex::Array{Int,1}
   version::String
end
"><pre><code>struct gcmarray{T, N} &lt;: AbstractMeshArray{T, N}
   grid::gcmgrid
   meta::varmeta
   f::Array{Array{T,2},N}
   fSize::Array{NTuple{2, Int}}
   fIndex::Array{Int,1}
   version::String
end
</code></pre></div>
<h3><a id="user-content-jupyter-notebooks" class="anchor" aria-hidden="true" href="#jupyter-notebooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Jupyter Notebooks</h3>
<p>The <a href="https://github.com/JuliaClimate/GlobalOceanNotebooks.git">Global Ocean Notebooks</a> illustrate standard workflows that use <code>MeshArrays.jl</code> to, e.g.:</p>
<ul>
<li>accurately compute planetary scale transports on a global ocean model <a href="https://en.wikipedia.org/wiki/Arakawa_grids" rel="nofollow">C-grid</a></li>
<li>efficiently compute trajectories of ocean plastic, plankton, etc over any supported C-grid configuration using <code>MeshArrays.jl</code> along with <a href="https://github.com/JuliaClimate/IndividualDisplacements.jl">IndividualDisplacements.jl</a></li>
</ul>
<p>Additional functionalities provided via related packages include:</p>
<ul>
<li>reading and writing files in <a href="https://en.wikipedia.org/wiki/NetCDF" rel="nofollow">Netcdf</a> (<a href="http://cfconventions.org" rel="nofollow">CF-compliant</a>), CSV, or binary formats often used in climate sciences. <a href="https://gaelforget.github.io/NCTiles.jl/stable/" rel="nofollow">NCTiles.jl</a> readily supports domain decomposition and spatial interpolation when used along with <code>MeshArray.jl</code></li>
<li>support for the analysis of <a href="https://mitgcm.readthedocs.io/en/latest/" rel="nofollow">MITgcm</a> model ouput and optimized, <a href="https://doi.org/10.5194/gmd-8-3071-2015" rel="nofollow">state estimate</a> solutions are provided via <a href="https://github.com/gaelforget/MITgcmTools.jl">MITgcmTools.jl</a> and <a href="https://github.com/gaelforget/OceanStateEstimation.jl">OceanStateEstimation.jl</a>, with interfaces in <code>MeshArray.jl</code></li>
</ul>
<p><em>For information about Jupyter notebook, see <a href="https://en.wikipedia.org/wiki/Project_Jupyter" rel="nofollow">Jupyter docs</a>. Free apps like <a href="https://nbviewer.jupyter.org" rel="nofollow">https://nbviewer.jupyter.org</a> and <a href="https://mybinder.org" rel="nofollow">https://mybinder.org</a>  let you view them and try them out conveniently in the cloud.</em></p>
<p><a href="https://youtu.be/M6vAUtIsIIY" rel="nofollow"><img src="https://user-images.githubusercontent.com/20276764/84767001-b89a4400-af9f-11ea-956f-2e207f892c4f.png" width="40%" style="max-width:100%;"></a></p>
<h3><a id="user-content-juliacon-2018-video" class="anchor" aria-hidden="true" href="#juliacon-2018-video"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JuliaCon 2018 Video</h3>
<p><code>MeshArrays.jl</code> was first introduced as as <em>gcmfaces.jl</em> in <a href="https://youtu.be/RDxAy_zSUvg" rel="nofollow">this presentation</a> at JuliaCon 2018 which corresponds to <code>DataStructures</code>/<code>01_MeshArrays.ipynb</code> in the <a href="https://github.com/JuliaClimate/GlobalOceanNotebooks.git">GlobalOceanNotebooks</a></p>
<p><a href="https://youtu.be/RDxAy_zSUvg" rel="nofollow"><img src="https://user-images.githubusercontent.com/20276764/84893715-abe42180-b06d-11ea-92d3-173b678a701e.png" width="40%" style="max-width:100%;"></a></p>
</article></div>