<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mesharraysjl" class="anchor" aria-hidden="true" href="#mesharraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MeshArrays.jl</h1>
<p><a href="https://travis-ci.org/juliaclimate/MeshArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bdfee1cfa84f3d5964ba824db3faae0aa5229d4d/68747470733a2f2f7472617669732d63692e6f72672f6a756c6961636c696d6174652f4d6573684172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis Build Status" data-canonical-src="https://travis-ci.org/juliaclimate/MeshArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/juliaclimate/MeshArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb7a4121d1c631da0ff6e4a5bf353ce0ab6fbeb7/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961636c696d6174652f4d6573684172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/juliaclimate/MeshArrays.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/juliaclimate/MeshArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/384dbadb3f4e2dc137e6389a53c1ed0a9005d796/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a756c6961636c696d6174652f4d6573684172726179732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/juliaclimate/MeshArrays.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://zenodo.org/badge/latestdoi/143987632" rel="nofollow"><img src="https://camo.githubusercontent.com/3cdccb272c23981562b9aeaff5080b83f752bc5e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3134333938373633322e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/143987632.svg" style="max-width:100%;"></a>
<a href="https://juliaclimate.github.io/MeshArrays.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliaclimate.github.io/MeshArrays.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p><code>MeshArrays.jl</code> defines the <code>MeshArray</code> type that can contain / organize / distribute collections of inter-connected arrays as generally done in climate models. <code>MeshArrays.jl</code> thus provides a simple yet efficient and general way to e.g. analyze climate system simulations (<a href="https://youtu.be/RDxAy_zSUvg" rel="nofollow">JuliaCon-2018 presentation</a>).</p>
<h3><a id="user-content-installation--test" class="anchor" aria-hidden="true" href="#installation--test"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation &amp; Test</h3>
<pre><code>using Pkg
Pkg.add("MeshArrays")
Pkg.test("MeshArrays")
</code></pre>
<h3><a id="user-content-use-examples" class="anchor" aria-hidden="true" href="#use-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Use Examples</h3>
<p>The example below (1) generates a grid decomposition, (2) seeds random noise everywhere, (3) smoothes out the noise, and (4) plots the (<code>outer</code>) array of subdomain (<code>inner</code>) arrays. The diffusion-based smoother illustrates how <code>MeshArrays.jl</code> computes partial derivatives over the whole domain by transfering data between neighboring subdomains.</p>
<pre><code>using MeshArrays; p=dirname(pathof(MeshArrays))
γ,Γ=GridOfOnes("PeriodicDomain",16,20)

include(joinpath(p,"../examples/Demos.jl"))
(xi,xo,_,_)=demo2(Γ);
show(xo)

using Plots; plotlyjs()
include(joinpath(p,"../examples/Plots.jl"))
heatmap(xo,clims=(-0.25,0.25))
</code></pre>
<table>
<thead>
<tr>
<th align="center">Initial noise</th>
<th align="center">Smoothed noise</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="docs/images/noise_raw_16tiles.png"><img src="docs/images/noise_raw_16tiles.png" alt="" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="docs/images/noise_smooth_16tiles.png"><img src="docs/images/noise_smooth_16tiles.png" alt="" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Above, we used <em>16 subdomains</em>, with <em>40x40 grid points</em> each, covering a standard <em>doubly periodic domain</em>. However, <code>MeshArrays.jl</code> also readily supports elaborate grids commonly used in climate models, such as the ones shown below.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/images/sphere_all.png"><img src="docs/images/sphere_all.png" width="40%" style="max-width:100%;"></a></p>
<p>As exaplained in <a href="https://juliaclimate.github.io/MeshArrays.jl/dev" rel="nofollow">the docs</a>, the <code>MeshArray</code> type generally looks like this:</p>
<pre><code>struct gcmarray{T, N} &lt;: AbstractMeshArray{T, N}
   grid::gcmgrid
   meta::varmeta
   f::Array{Array{T,2},N}
   fSize::Array{NTuple{2, Int}}
   fIndex::Array{Int,1}
   version::String
end
</code></pre>
<h3><a id="user-content-jupyter-notebooks" class="anchor" aria-hidden="true" href="#jupyter-notebooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Jupyter Notebooks</h3>
<p>The <a href="https://youtu.be/RDxAy_zSUvg" rel="nofollow">JuliaCon-2018 presentation</a> corresponds to the first <a href="https://en.wikipedia.org/wiki/Project_Jupyter" rel="nofollow">Jupyter</a> notebook found under <code>DataStructures/</code> in the <a href="https://github.com/gaelforget/MeshArrayNotebooks.git">this repo</a>. Other included notebooks demonstrate:</p>
<ul>
<li>Using<code>MeshArrays.jl</code> to accurately compute planetary transports on a ocean model <a href="https://en.wikipedia.org/wiki/Arakawa_grids" rel="nofollow">C-grid</a>.</li>
<li>Using <a href="https://github.com/gaelforget/IndividualDisplacements.jl">IndividualDisplacements.jl</a> to efficiently and accurately compute trajectories of ocean plastic, plankton, etc over the C-grid configurations supported by <code>MeshArrays.jl</code>.</li>
<li>Support for <a href="http://cfconventions.org" rel="nofollow">CF-compliant</a> <a href="https://en.wikipedia.org/wiki/NetCDF" rel="nofollow">Netcdf</a> input / output of <code>MeshArray</code>s, with interpolation or domain decomposition, for <code>C-grid</code> variables as provided via <a href="https://gaelforget.github.io/NCTiles.jl/stable/" rel="nofollow">NCTiles.jl</a>.</li>
<li>Support for <a href="https://mitgcm.readthedocs.io/en/latest/" rel="nofollow">MITgcm</a> use cases and specificities is provided via <a href="https://github.com/gaelforget/MITgcmTools.jl">MITgcmTools.jl</a>.</li>
</ul>
</article></div>