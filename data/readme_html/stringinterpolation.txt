<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stringinterpolationjl" class="anchor" aria-hidden="true" href="#stringinterpolationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StringInterpolation.jl</h1>
<p>String interpolation is an awesome feature of Julia, but string interpolation for <a href="http://docs.julialang.org/en/latest/manual/metaprogramming/#non-standard-string-literals" rel="nofollow">non-standard string literals</a> is not automatic and requires significant boilerplate code to make it work.</p>
<p>This package simply ressurects an <a href="https://github.com/JuliaLang/julia/blob/deab8eabd7089e2699a8f3a9598177b62cbb1733/base/string.jl#L613">old Base method</a> <code>interp_parse</code> and adds a macro <code>@interpolate</code>. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.clone(&quot;https://github.com/EricForgy/StringInterpolation.jl.git&quot;)
julia&gt; using StringInterpolation
julia&gt; x = &quot;World&quot;
julia&gt; @interpolate &quot;Hello \$x&quot;
&quot;Hello World&quot;
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/EricForgy/StringInterpolation.jl.git<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StringInterpolation
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@interpolate</span> <span class="pl-s"><span class="pl-pds">"</span>Hello <span class="pl-cce">\$</span>x<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>Hello World<span class="pl-pds">"</span></span></pre></div>
<p>Note the <code>$</code> is escaped in the string we want to interpolate.</p>
<p>The intended use for this package is when building non-standard string literals. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="macro test_str(s)
    return quote
        str = @interpolate $s
        # Do what you want to do with interpolated string here.
        sprint(print,str)
    end
end
"><pre><span class="pl-k">macro</span> <span class="pl-en">test_str</span>(s)
    <span class="pl-k">return</span> <span class="pl-k">quote</span>
        str <span class="pl-k">=</span> <span class="pl-c1">@interpolate</span> <span class="pl-k">$</span>s
        <span class="pl-c"><span class="pl-c">#</span> Do what you want to do with interpolated string here.</span>
        <span class="pl-c1">sprint</span>(print,str)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>The following non-standard string literal simply makes 3 copies of the interpolated string:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="macro triple_str(s)
    return quote
        str = @interpolate $s
        sprint(print,str^3)
    end
end
"><pre><span class="pl-k">macro</span> <span class="pl-en">triple_str</span>(s)
    <span class="pl-k">return</span> <span class="pl-k">quote</span>
        str <span class="pl-k">=</span> <span class="pl-c1">@interpolate</span> <span class="pl-k">$</span>s
        <span class="pl-c1">sprint</span>(print,str<span class="pl-k">^</span><span class="pl-c1">3</span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Then, you can use the macro as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = &quot;World&quot;; println(triple&quot;Hello \$x\n&quot;)
Hello World
Hello World
Hello World
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>; <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">triple</span>"</span>Hello <span class="pl-cce">\$</span>x<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
Hello World
Hello World
Hello World</pre></div>
</article></div>