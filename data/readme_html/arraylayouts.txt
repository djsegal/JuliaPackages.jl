<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-arraylayoutsjl" class="anchor" aria-hidden="true" href="#arraylayoutsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArrayLayouts.jl</h1>
<p>A Julia package for describing array layouts and more general fast linear algebra</p>
<p><a href="https://travis-ci.org/JuliaMatrices/ArrayLayouts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b9c0ec18a430e9173fb368c7c4c6e0419b78073a/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d617472696365732f41727261794c61796f7574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaMatrices/ArrayLayouts.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaMatrices/ArrayLayouts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ec4b2ec9961ffa4fd0be268a9bdf085505b4c2ce/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d617472696365732f41727261794c61796f7574732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaMatrices/ArrayLayouts.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements a trait-based framework for describing array layouts such as column major, row major, etc. that can be dispatched
to appropriate BLAS or optimised Julia linear algebra routines. This supports a much wider class of matrix types than Julia's in-built <code>StridedArray</code>. Here is an example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ArrayLayouts

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>,<span class="pl-c1">10_000</span>); x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">10_000</span>); y <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x);

julia<span class="pl-k">&gt;</span> V <span class="pl-k">=</span> <span class="pl-c1">view</span>(<span class="pl-c1">Symmetric</span>(A),:,:)<span class="pl-k">'</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">mul!</span>(y, A, x); <span class="pl-c"><span class="pl-c">#</span> Julia does not recognize that V is symmetric</span>
  <span class="pl-c1">0.040255</span> seconds (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">160</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">muladd!</span>(<span class="pl-c1">1.0</span>, V, x, <span class="pl-c1">0.0</span>, y); <span class="pl-c"><span class="pl-c">#</span> ArrayLayouts does and is 3x faster as it calls BLAS</span>
  <span class="pl-c1">0.017677</span> seconds (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">160</span> bytes)</pre></div>
</article></div>