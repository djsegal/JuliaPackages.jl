<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h1>
<p>Lerche (German for Lark) is a partial port of the Lark grammar processor from
Python to Julia.  Lark grammars should work unchanged in Lerche.</p>
<h1><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h1>
<p>See also 'Notes for Lark users' below.</p>
<p>Lerche reads Lark EBNF grammars to produce a parser. This parser, when
provided with text conforming to the grammar, produces a parse
tree. This tree can be visited and transformed using "rules", which
are just Julia methods. The first argument of a rule is an object
which is a subtype of <code>Visitor</code> or <code>Transformer</code>. The name of a
rule is the production that it should be called on.</p>
<ol>
<li>Define one or more subtypes of <code>Transformer</code> or <code>Visitor</code> to be
used to dispatch the appropriate rule. The subtype can also be used to
hold information if you wish, and must be a concrete type at present.</li>
<li>Prefix the subtype definition with <code>@contains_rules</code></li>
<li>For every production in your grammar that you wish to transform,
write a rule with identical name to the production</li>
<li>The rule should be prefixed with <code>@rule</code> if the second argument
is an array containing all of the arguments to the grammar production</li>
<li>The rule should be prefixed with <code>@inline_rule</code> if the second
and following arguments refer to each argument in the grammar production</li>
<li>Near the top of the module containing your subtypes and rules, put
<code>@rule_holder</code> on a line by itself (may be unnecessary in the future).</li>
</ol>
<p>For a real-world example of usage, see <a href="https://github.com/jamesrhester/CIF_dREL.jl/blob/master/src/jl_transformer.jl">this file</a>.</p>
<h1><a id="user-content-notes-for-lark-users" class="anchor" aria-hidden="true" href="#notes-for-lark-users"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes for Lark users</h1>
<p>Please read the Lark documentation.  When converting from Lark
programs written in Python to Lerche programs written in Julia, the
changes outlined below are necessary. Note that before version 1.0 use
of the <code>@contains_rules</code> and <code>@rule_holder</code> macros is likely to
be simplified.</p>
<ol>
<li>All Transformer and Visitor classes become types</li>
<li>All class method calls become Julia method calls with the type as the first argument
(i.e. replacing <code>self</code>)</li>
<li>Transformers and visitors should be declared in a single module with the
macro <code>@rule_holder</code> on a line by itself before any type definitions</li>
<li>Transformers and visitors should be declared as subtypes of the appropriate
visitor/transformer type, preceded by the macro <code>@contains_rules</code></li>
<li>Transformation or visitor rules should be preceded by the <code>@rule</code> macro. Inline
rules use the <code>@inline_rule</code> macro.</li>
<li>The first argument of transformation and visitor rules is a variable of the
desired transformation/visitor type.</li>
<li>Any grammars containing backslash-double quote sequences need to be fixed (see below).</li>
<li>Any grammars containing backslash-x to denote a byte value need to be fixed (see below).</li>
</ol>
<h2><a id="user-content-grammars" class="anchor" aria-hidden="true" href="#grammars"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Grammars</h2>
<p>Lark grammars should work unchanged in Lerche, with the caveats
below.  Note that this guarantee applies only to the sequence of
characters after interpretation by the Julia/Python language parser.
In particular note the following differences:</p>
<ol>
<li>
<p>Raw strings in Julia are written <code>raw"&lt;string contents&gt;"</code> instead of
Python's <code>r"&lt;string contents&gt;"</code></p>
</li>
<li>
<p>The sequence <code>\"</code> inside a Python raw, quote-delimited string
encodes a two-character sequence.  However, it corresponds to a single
quote in the analogous Julia case. To obtain the two-character
sequence in Julia, input <code>\\"</code>. A backslash-quote sequence is
required in Lark grammars when representing a double quote as the Lark
grammar defines the sequence backslash-quote to represent a quote; so
these two characters must remain in the string after Julia has
pre-processed it.</p>
</li>
<li>
<p>While unicode escapes are recognised (<code>\uxxxx</code>), the Python
<code>\x</code> combination to insert a particular byte value in the
string is not.</p>
</li>
<li>
<p>Avoid using Julia keywords (such as <code>true</code> or <code>false</code>) as the
names of rules or aliases.  If your Lark grammar does this, you will
need to change it.</p>
</li>
</ol>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h1>
<p>The following example shows how a simple JSON parser is implemented.</p>
<p>First the grammar is written:</p>
<pre><code>json_grammar = raw"""
    ?start: value

    ?value: object
          | array
          | string
          | SIGNED_NUMBER      -&gt; number
          | "true"             -&gt; t
          | "false"            -&gt; f
          | "null"             -&gt; null

    array  : "[" [value ("," value)*] "]"
    object : "{" [pair ("," pair)*] "}"
    pair   : string ":" value

    string : ESCAPED_STRING

    %import common.ESCAPED_STRING
    %import common.SIGNED_NUMBER
    %import common.WS

    %ignore WS
"""
</code></pre>
<p>For details on the grammar syntax refer to the <a href="https://github.com/lark-parser/lark/blob/master/docs/grammar.md">Lark documentation</a>.</p>
<p>Items can be transformed as they are parsed, for example, in order to
immediately turn strings into numbers.  A subtype of <code>Transformer</code>
can be passed as an additional keyword argument when creating the
parser in order to do this.  A method whose name matches the rule
name (or alias) and whose first argument is our subtype of
<code>Transformer</code> will be called whenever that rule is matched.</p>
<p>These methods are prefixed by the <code>@rule</code> macro (if all of the
parse tree children are collected into a single array argument) or
<code>@inline_rule</code> macro (if the parse tree children have a single
argument each).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@rule_holder</span> <span class="pl-c"><span class="pl-c">#</span>needed once in the module</span>

<span class="pl-c1">@contains_rules</span> <span class="pl-k">struct</span> TreeToJson <span class="pl-k">&lt;:</span> <span class="pl-c1">Transformer</span> <span class="pl-k">end</span>

<span class="pl-c1">@inline_rule</span> <span class="pl-en">string</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>, s) <span class="pl-k">=</span> <span class="pl-c1">replace</span>(s[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>],<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\\"</span><span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)

<span class="pl-c1">@rule</span>  <span class="pl-en">array</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,a) <span class="pl-k">=</span> <span class="pl-c1">Array</span>(a)
<span class="pl-c1">@rule</span>  <span class="pl-en">pair</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,p) <span class="pl-k">=</span> <span class="pl-c1">Tuple</span>(p)
<span class="pl-c1">@rule</span>  <span class="pl-en">object</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,o) <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(o)
<span class="pl-c1">@inline_rule</span> <span class="pl-en">number</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,n) <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">parse</span>(Float64,n)

<span class="pl-c1">@rule</span>  <span class="pl-en">null</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,_) <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
<span class="pl-c1">@rule</span>  <span class="pl-en">t</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,_) <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">@rule</span>  <span class="pl-en">f</span>(t<span class="pl-k">::</span><span class="pl-c1">TreeToJson</span>,_) <span class="pl-k">=</span> <span class="pl-c1">false</span></pre></div>
<p>The above rules define a <code>TreeToJson</code> subtype, and rules whose
names match the rule or alias names in the grammar. For example,
whenever the string rule is matched, the enclosing double quotes
are dropped and any <code>\"</code> sequences replaced by a double quote.</p>
<p>Finally, we create our parser by calling the <code>Lark</code> constructor:</p>
<div class="highlight highlight-source-julia"><pre>json_parser <span class="pl-k">=</span> <span class="pl-c1">Lark</span>(json_grammar, parser<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>lalr<span class="pl-pds">"</span></span>, lexer<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>standard<span class="pl-pds">"</span></span>, transformer<span class="pl-k">=</span><span class="pl-c1">TreeToJson</span>())</pre></div>
<p>Now, we can parse JSON by calling the <code>Lerche.parse</code> method with
<code>json_parser</code> as the first argument and the text to parse as the
second argument:</p>
<pre><code>j = Lerche.parse(json_parser,test_json)
</code></pre>
<p>The above example is available in the Examples directory for
study.</p>
<h2><a id="user-content-other-examples" class="anchor" aria-hidden="true" href="#other-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other examples</h2>
<p>The <code>tests</code> directory contains many more very simple examples
of correctly-constructed grammars.</p>
<h1><a id="user-content-inconsistencies-with-lark" class="anchor" aria-hidden="true" href="#inconsistencies-with-lark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Inconsistencies with Lark</h1>
<ol>
<li>Earley and CYK grammars are not implemented.</li>
<li>Dynamic lexer is not implemented.</li>
<li>All errors with messages attached must be at the bottom of the
exception type hierarchy, as these are the only types that can have
contents. Thus an "UnexpectedInput" exception must become e.g
an UnexpectedCharacter if a message is included.</li>
</ol>
<h1><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation notes</h1>
<p>Lerche is currently noticeably slower than Lark, despite the
advantages of Julia's compilation. There is still plenty of room for
improvement as no effort has been made to use Julia efficiency tricks.
The priority has been on maintaining fidelity with Lark.</p>
<p>Python "yield" has been implemented using Julia Channels.</p>
<p>The <code>@rule_holder</code> and <code>@contains_rules</code> macros have been implemented in
order to store rule information in a dictionary local to the calling module.
So far it has not been possible to store information within Lerche data structures from outside the
<code>Lerche</code> module, and perhaps this is a good thing. Ideally Julia's multiple
dispatch mechanism would be used to select the appropriate rule, but no way
to reliably go from rule name as a string to dispatch on method name has been found.</p>
</article></div>