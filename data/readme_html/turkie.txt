<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://theogf.github.io/Turkie.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs Latest" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://theogf.github.io/Turkie.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/theogf/Turkie.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c449d4b4bb03c362e1d2c3e6c814b236993e3534f9dc9d36ed29f0aaaaa57e90/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7468656f67662f5475726b69652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/theogf/Turkie.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/theogf/Turkie.jl/actions/workflows/ci.yml"><img src="https://github.com/theogf/Turkie.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-turing--makie---turkie" class="anchor" aria-hidden="true" href="#turing--makie---turkie"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Turing + Makie -&gt; Turkie!</h1>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/Turkie-logo.png"><img width="340" height="276" src="docs/src/assets/Turkie-logo.png" style="max-width: 100%;"></a>
</p>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="docs/src/assets/Turkie-demo.gif"><img src="docs/src/assets/Turkie-demo.gif" data-animated-image="" style="max-width: 100%;"></a>
</p>
WIP for an inference visualization package.
<h3 dir="auto"><a id="user-content-to-plot-during-sampling-" class="anchor" aria-hidden="true" href="#to-plot-during-sampling-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To plot during sampling :</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Trace of the chains</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Statistics (mean and var)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Marginals (KDE/Histograms)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Autocorrelation plots</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Show multiple chains</li>
</ul>
<h3 dir="auto"><a id="user-content-additional-features-" class="anchor" aria-hidden="true" href="#additional-features-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Additional features :</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Selecting which variables are plotted</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Selecting what plots to show</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Giving a recording option</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Additional fine tuning features like
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Thinning</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Creating a buffer to limit the viewing</li>
</ul>
</li>
</ul>
<h3 dir="auto"><a id="user-content-extra-features" class="anchor" aria-hidden="true" href="#extra-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extra Features</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Using a color mapping given some statistics</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Allow to apply transformation before plotting</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage:</h2>
<p dir="auto">Small example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Turing
using Turkie
using GLMakie # You could also use CairoMakie or another backend
@model function demo(x) # Some random Turing model
    m0 ~ Normal(0, 2)
    s ~ InverseGamma(2, 3)
    m ~ Normal(m0, √s)
    for i in eachindex(x)
        x[i] ~ Normal(m, √s)
    end
end

xs = randn(100) .+ 1 # Create some random data
m = demo(xs) # Create the model
cb = TurkieCallback(m) # Create a callback function to be given to the sample
chain = sample(m, NUTS(0.65), 300; callback = cb) # Sample and plot at the same time"><pre><span class="pl-k">using</span> Turing
<span class="pl-k">using</span> Turkie
<span class="pl-k">using</span> GLMakie <span class="pl-c"><span class="pl-c">#</span> You could also use CairoMakie or another backend</span>
<span class="pl-c1">@model</span> <span class="pl-k">function</span> <span class="pl-en">demo</span>(x) <span class="pl-c"><span class="pl-c">#</span> Some random Turing model</span>
    m0 <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>)
    s <span class="pl-k">~</span> <span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
    m <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(m0, <span class="pl-k">√</span>s)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(x)
        x[i] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(m, <span class="pl-k">√</span>s)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

xs <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> Create some random data</span>
m <span class="pl-k">=</span> <span class="pl-c1">demo</span>(xs) <span class="pl-c"><span class="pl-c">#</span> Create the model</span>
cb <span class="pl-k">=</span> <span class="pl-c1">TurkieCallback</span>(m) <span class="pl-c"><span class="pl-c">#</span> Create a callback function to be given to the sample</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m, <span class="pl-c1">NUTS</span>(<span class="pl-c1">0.65</span>), <span class="pl-c1">300</span>; callback <span class="pl-k">=</span> cb) <span class="pl-c"><span class="pl-c">#</span> Sample and plot at the same time</span></pre></div>
<p dir="auto">If you want to show only some variables you can give a <code>Dict</code> to <code>TurkieCallback</code> :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cb = TurkieCallback(
            (m0 = [:trace, :mean], s = [:autocov, :var])
          )
"><pre>cb <span class="pl-k">=</span> <span class="pl-c1">TurkieCallback</span>(
            (m0 <span class="pl-k">=</span> [<span class="pl-c1">:trace</span>, <span class="pl-c1">:mean</span>], s <span class="pl-k">=</span> [<span class="pl-c1">:autocov</span>, <span class="pl-c1">:var</span>])
          )
</pre></div>
<p dir="auto">You can also directly pass <code>OnlineStats</code> object :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OnlineStats
cb = TurkieCallback(
            (v = [Mean(), AutoCov(20)],)
          )"><pre><span class="pl-k">using</span> OnlineStats
cb <span class="pl-k">=</span> <span class="pl-c1">TurkieCallback</span>(
            (v <span class="pl-k">=</span> [<span class="pl-c1">Mean</span>(), <span class="pl-c1">AutoCov</span>(<span class="pl-c1">20</span>)],)
          )</pre></div>
<p dir="auto">If you want to record the video do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Makie
record(cb.figure, joinpath(@__DIR__, &quot;video.webm&quot;)) do io
    addIO!(cb, io)
    sample(m,  NUTS(0.65), 300; callback = cb)
end"><pre><span class="pl-k">using</span> Makie
<span class="pl-c1">record</span>(cb<span class="pl-k">.</span>figure, <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>video.webm<span class="pl-pds">"</span></span>)) <span class="pl-k">do</span> io
    <span class="pl-c1">addIO!</span>(cb, io)
    <span class="pl-c1">sample</span>(m,  <span class="pl-c1">NUTS</span>(<span class="pl-c1">0.65</span>), <span class="pl-c1">300</span>; callback <span class="pl-k">=</span> cb)
<span class="pl-k">end</span></pre></div>
</article></div>