<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-unionfindjl" class="anchor" aria-hidden="true" href="#unionfindjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UnionFind.jl</h1>
<p><code>UnionFind.jl</code> is a light-weight library for identifying groups of nodes in
undirected graphs. It is written in <a href="http://julialang.org/" rel="nofollow">Julia 0.7</a>. It is
currently in version 0.1.0.</p>
<h1><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h1>
<p>This library exports two types, <code>UnionFinder</code>, and <code>CompressedFinder</code>.</p>
<h2><a id="user-content-unionfinder" class="anchor" aria-hidden="true" href="#unionfinder"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UnionFinder</h2>
<p><code>UnionFinder{T &lt;: Integer}</code> is a graph representation which allows for the
dynamic addition of edges as well as the identification of groups.</p>
<h3><a id="user-content-constructors" class="anchor" aria-hidden="true" href="#constructors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructors</h3>
<ul>
<li><code>UnionFinder{T &lt;: Integer}(nodes :: T) :: UnionFinder{T}</code> returns a
<code>UnionFinder</code> instance representing a graph of <code>nodes</code> unconnected nodes.
Each node will be indexed by a unique integer of type <code>T</code> in the inclusive
range [<code>1</code>, <code>nodes</code>]. If <code>nodes</code> is non-positive, an <code>ArgumentError</code> will
be thrown.</li>
</ul>
<h3><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods</h3>
<p>The identification of groups is handled lazily, meaning that all non-trivial
methods will modify the contents of the target <code>UnionFinder</code> instance.</p>
<ul>
<li><code>union!{T &lt;: Integer}(uf :: UnionFinder{T}, u :: T, v :: T)</code> adds an edge
to <code>uf</code> connecting node <code>u</code> to node <code>v</code>. If either <code>u</code> or <code>v</code> is
non-positive or greater than <code>nodes</code>, a <code>BoundsError</code> will be thrown.</li>
<li><code>union!{T &lt;: Integer}(uf :: UnionFinder{T}, edges :: Array{(T, T)})</code> adds
each edges within <code>edges</code> to <code>uf</code>. This method obeys the same bounds
restrictions as the single edge <code>union!</code> method.</li>
<li><code>union!{T &lt;: Integer}(uf :: UnionFinder{T}, us :: Array{T}, vs :: Array{T})</code>
adds edges of the form (<code>us[i]</code>, <code>vs[i]</code>) to <code>uf</code>. This method obeys the
same bounds restrictions as the single edge <code>union!</code> method.</li>
<li><code>find!{T &lt;: Integer}(uf :: UnionFinder{T}, node :: T) :: T</code> returns the
unique id of the node group containing <code>node</code>.</li>
<li><code>size!{T &lt;: Integer}(uf :: UnionFinder{T}, node :: T) :: T</code> returns the
number of nodes in the group containing <code>node</code>.</li>
<li><code>reset!(uf :: UnionFinder)</code> disconnects all nodes within <code>uf</code>, allowing for
a new set of edges to be analyzed without making further allocations.</li>
<li><code>length(uf :: UnionFinder) :: Int</code> returns the number of nodes within <code>uf</code>.</li>
</ul>
<h3><a id="user-content-fields" class="anchor" aria-hidden="true" href="#fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fields</h3>
<p>The fields of <code>UnionFinder</code> instances should not be accesed by user-level code.</p>
<h2><a id="user-content-compressedfinder" class="anchor" aria-hidden="true" href="#compressedfinder"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CompressedFinder</h2>
<p><code>CompressedFinder{T &lt;: Integer}</code></p>
<h3><a id="user-content-constructors-1" class="anchor" aria-hidden="true" href="#constructors-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructors</h3>
<ul>
<li><code>CompressedFinder{T &lt;: Integer}(uf :: UnionFinder) :: CompressedFinder{T}</code>
returns a <code>CompressedFinder</code> instance corresponding to the same groups
represented by</li>
</ul>
<h3><a id="user-content-methods-1" class="anchor" aria-hidden="true" href="#methods-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods</h3>
<ul>
<li><code>find{T &lt;: Integer}(cf :: CompressedFinder{T}, node :: T) :: T</code> returns the
unique id of the group containing <code>node</code>. If <code>node</code> is non-positive or
is larger than the number of nodes in <code>cf</code>, a <code>BoundsError</code> is thrown.</li>
<li><code>groups{T &lt;: Integer}(cf :: CompressedFinder{T}) :: T</code> returns the number
of groups within <code>cf</code>.</li>
</ul>
<h3><a id="user-content-fields-1" class="anchor" aria-hidden="true" href="#fields-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fields</h3>
<ul>
<li><code>ids :: Array{T}</code> is an array mapping node indices to the group which
contains them.</li>
<li><code>groups :: T</code> is the number of groups in the <code>CompressedFinder</code> instance.</li>
</ul>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<h2><a id="user-content-floodfill" class="anchor" aria-hidden="true" href="#floodfill"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Floodfill</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> UnionFind

<span class="pl-k">function</span> <span class="pl-en">floodfill</span>(grid, wrap<span class="pl-k">=</span><span class="pl-c1">false</span>)
    uf <span class="pl-k">=</span> <span class="pl-c1">UnionFinder</span>(<span class="pl-c1">length</span>(grid))

    height, width <span class="pl-k">=</span> <span class="pl-c1">size</span>(grid)
    <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>width
        <span class="pl-k">for</span> y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>height
            <span class="pl-c"><span class="pl-c">#</span> Look rightwards.</span>
            <span class="pl-k">if</span> x <span class="pl-k">!=</span> width <span class="pl-k">&amp;&amp;</span> grid[x, y] <span class="pl-k">==</span> grid[x <span class="pl-k">+</span> <span class="pl-c1">1</span>, y]
                <span class="pl-c1">union!</span>(uf, <span class="pl-c1">flatten</span>(x, y, grid), <span class="pl-c1">flatten</span>(x <span class="pl-k">+</span> <span class="pl-c1">1</span>, y, grid))
            <span class="pl-k">elseif</span> wrap <span class="pl-k">&amp;&amp;</span> grid[x, y] <span class="pl-k">==</span> grid[<span class="pl-c1">1</span>, y]
                <span class="pl-c1">union!</span>(uf, <span class="pl-c1">flatten</span>(x, y, grid), <span class="pl-c1">flatten</span>(<span class="pl-c1">1</span>, y, grid))
            <span class="pl-k">end</span>

            <span class="pl-c"><span class="pl-c">#</span> Look upwards.</span>
            <span class="pl-k">if</span> y <span class="pl-k">!=</span> height <span class="pl-k">&amp;&amp;</span> grid[x, y] <span class="pl-k">==</span> grid[x, y <span class="pl-k">+</span> <span class="pl-c1">1</span>]
                <span class="pl-c1">union!</span>(uf, <span class="pl-c1">flatten</span>(x, y, grid), <span class="pl-c1">flatten</span>(x, y <span class="pl-k">+</span> <span class="pl-c1">1</span>, grid))
            <span class="pl-k">elseif</span> wrap <span class="pl-k">&amp;&amp;</span> grid[x, y] <span class="pl-k">==</span> grid[x, <span class="pl-c1">1</span>]
                <span class="pl-c1">union!</span>(uf, <span class="pl-c1">flatten</span>(x, y, grid), <span class="pl-c1">flatten</span>(x, <span class="pl-c1">1</span>, grid))
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    cf <span class="pl-k">=</span> <span class="pl-c1">CompressedFinder</span>(uf)
    <span class="pl-k">return</span> <span class="pl-c1">reshape</span>(cf<span class="pl-k">.</span>ids, <span class="pl-c1">size</span>(grid))
<span class="pl-k">end</span>

<span class="pl-en">flatten</span>(x, y, grid) <span class="pl-k">=</span> y <span class="pl-k">+</span> (x <span class="pl-k">-</span> <span class="pl-c1">1</span>)<span class="pl-c1">size</span>(grid)[<span class="pl-c1">1</span>]</pre></div>
<h2><a id="user-content-kruskal" class="anchor" aria-hidden="true" href="#kruskal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kruskal</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> UnionFind

<span class="pl-c"><span class="pl-c">#</span> edges must be pre-sorted according to weight.</span>
<span class="pl-k">function</span> <span class="pl-en">kruskal</span><span class="pl-c1">{T &lt;: Integer}</span>(nodes <span class="pl-k">::</span> <span class="pl-c1">T</span>, edges <span class="pl-k">::</span> <span class="pl-c1">Array{(T, T)}</span>)
    uf <span class="pl-k">=</span> <span class="pl-c1">UnionFinder</span>(nodes)
    mst <span class="pl-k">=</span> Array{(T, T)}

    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(edges)
        (u, v) <span class="pl-k">=</span> edges[i]
        <span class="pl-k">if</span> <span class="pl-c1">find!</span>(uf, u) <span class="pl-k">!=</span> <span class="pl-c1">find!</span>(uf, v)
            <span class="pl-c1">union!</span>(uf, u, v)
            <span class="pl-c1">push!</span>(mst, (u, v))
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>