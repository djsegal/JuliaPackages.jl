<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-numericfuns" class="anchor" aria-hidden="true" href="#numericfuns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NumericFuns</h1>
<p>Numerical functions and functors.
<a href="https://travis-ci.org/lindahua/NumericFuns.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bdedf3fe3320c27011125558645288f5672342a2/68747470733a2f2f7472617669732d63692e6f72672f6c696e64616875612f4e756d6572696346756e732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/lindahua/NumericFuns.jl.png" style="max-width:100%;"></a></p>
<p><strong>Note:</strong> This package was originally part of the <a href="https://github.com/lindahua/NumericExtensions.jl">NumericExtensions package</a>. I realized later that the functors and the type inference machinery can be useful in other packages. Hence, I separate this part to construct a standalone package.</p>
<p>This package provides:</p>
<ul>
<li>Additional numerical functions, such as <code>sqr</code>, <code>rsqrt</code>, <code>xlogx</code>, <code>sigmoid</code>, <code>logit</code>, etc.</li>
<li>Vectorized methods of the additional numerical functions.</li>
<li>Typed functors.</li>
</ul>
<hr>
<h2><a id="user-content-new-numeric-functions" class="anchor" aria-hidden="true" href="#new-numeric-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>New Numeric Functions</h2>
<p>This package provides several commonly used numerical functions that are not in the Julia Base.</p>
<table>
<thead>
<tr>
<th><strong>function</strong></th>
<th><strong>equivalent expression</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sqr(x)</code></td>
<td><code>x * x</code></td>
</tr>
<tr>
<td><code>rcp(x)</code></td>
<td><code>1 / x</code></td>
</tr>
<tr>
<td><code>rsqrt(x)</code></td>
<td><code>1 / sqrt(x)</code></td>
</tr>
<tr>
<td><code>rcbrt(x)</code></td>
<td><code>1 / cbrt(x)</code></td>
</tr>
<tr>
<td><code>xlogx(x)</code></td>
<td><code>ifelse(x &gt; 0, x * log(x), 0)</code></td>
</tr>
<tr>
<td><code>xlogy(x, y)</code></td>
<td><code>ifelse(x &gt; 0, x * log(y), 0)</code></td>
</tr>
<tr>
<td><code>sigmoid(x)</code></td>
<td><code>1 / (1 + exp(-x))</code></td>
</tr>
<tr>
<td><code>logit(x)</code></td>
<td><code>log(x / (1 - x))</code></td>
</tr>
<tr>
<td><code>softplus(x)</code></td>
<td><code>log(1 + exp(x))</code></td>
</tr>
<tr>
<td><code>invsoftplus(x)</code></td>
<td><code>log(exp(x) - 1)</code></td>
</tr>
<tr>
<td><code>logsumexp(x, y)</code></td>
<td><code>log(exp(x) + exp(y))</code></td>
</tr>
</tbody>
</table>
<p>Note that the <em>equivalent expressions</em> above are just for the purpose to conveying the semantics. The actual implementation might be different, which would takes a more optimal route that takes care of risk of overflow, type stability, and computational efficiency.</p>
<h2><a id="user-content-functors" class="anchor" aria-hidden="true" href="#functors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functors</h2>
<p><em>Functors</em> are typed instances used in indicate a particular function. Since Julia is not able to specialize on functions (yet), functors provide an effective way that allow mutliple dispatch and functional programming to work together.</p>
<p>The package defines an abstract type <code>Functor</code> as</p>
<div class="highlight highlight-source-julia"><pre>abstract Functor{N}</pre></div>
<p>where, <code>N</code> is an integer indicating the number of arguments. All functor types are subtypes of <code>Functor</code>.</p>
<p>Each functor type comes with an <code>evaluate</code> method, which evaluates the corresponding function given arguments.</p>
<h4><a id="user-content-define-a-functor" class="anchor" aria-hidden="true" href="#define-a-functor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Define a functor</h4>
<p>Here is an example that illustrates how one can define a functor</p>
<div class="highlight highlight-source-julia"><pre>type Add <span class="pl-k">&lt;:</span> <span class="pl-c1">Functor{2}</span> <span class="pl-k">end</span>
<span class="pl-en">evaluate</span><span class="pl-c1">{T1&lt;:Number,T2&lt;:Number}</span>(<span class="pl-k">::</span><span class="pl-c1">Add</span>, x<span class="pl-k">::</span><span class="pl-c1">Number</span>, y<span class="pl-k">::</span><span class="pl-c1">Number</span>) <span class="pl-k">=</span> x <span class="pl-k">+</span> y</pre></div>
<p>Two macros <code>@functor1</code> and <code>@functor2</code> are provided for simplifying the definition of unary and binary functors:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@functor1</span>(Cbrt, cbrt, Real)
<span class="pl-c1">@functor2</span>(Add, <span class="pl-k">+</span>, Number)</pre></div>
<p>These macros accept three arguments: the functor type name, the corresponding function, and the super type of all acceptable argument types.</p>
<p><strong>Note:</strong> The packages also defines a large collection of functors for various mathematical operations (so you don't have to define them yourself).</p>
<h4><a id="user-content-functors-for-operators" class="anchor" aria-hidden="true" href="#functors-for-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functors for operators</h4>
<p>Here is a table of functor types for operators:</p>
<table>
<thead>
<tr>
<th><strong>functor type</strong></th>
<th><strong>operator</strong></th>
<th><strong>domain</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Negate</td>
<td><code>-</code></td>
<td>Number</td>
</tr>
<tr>
<td>Add</td>
<td><code>+</code></td>
<td>Number</td>
</tr>
<tr>
<td>Subtract</td>
<td><code>-</code></td>
<td>Number</td>
</tr>
<tr>
<td>Multiply</td>
<td><code>*</code></td>
<td>Number</td>
</tr>
<tr>
<td>Divide</td>
<td><code>/</code></td>
<td>Number</td>
</tr>
<tr>
<td>RDivide</td>
<td><code>\</code></td>
<td>Number</td>
</tr>
<tr>
<td>Pow</td>
<td><code>^</code></td>
<td>Number</td>
</tr>
<tr>
<td>And</td>
<td><code>&amp;</code></td>
<td>Bool</td>
</tr>
<tr>
<td>Or</td>
<td>|</td>
<td>Bool</td>
</tr>
<tr>
<td>Not</td>
<td><code>!</code></td>
<td>Bool</td>
</tr>
<tr>
<td>BitwiseAnd</td>
<td><code>&amp;</code></td>
<td>Integer</td>
</tr>
<tr>
<td>BitwiseOr</td>
<td>|</td>
<td>Integer</td>
</tr>
<tr>
<td>BitwiseNot</td>
<td><code>~</code></td>
<td>Integer</td>
</tr>
<tr>
<td>BitwiseXor</td>
<td><code>$</code></td>
<td>Integer</td>
</tr>
<tr>
<td>LT</td>
<td><code>&lt;</code></td>
<td>Real</td>
</tr>
<tr>
<td>GT</td>
<td><code>&gt;</code></td>
<td>Real</td>
</tr>
<tr>
<td>LE</td>
<td><code>&lt;=</code></td>
<td>Real</td>
</tr>
<tr>
<td>GE</td>
<td><code>&gt;=</code></td>
<td>Real</td>
</tr>
<tr>
<td>EQ</td>
<td><code>==</code></td>
<td>Number</td>
</tr>
<tr>
<td>NE</td>
<td><code>!=</code></td>
<td>Number</td>
</tr>
</tbody>
</table>
<h4><a id="user-content-functors-for-math-functions" class="anchor" aria-hidden="true" href="#functors-for-math-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functors for math functions</h4>
<p>The package also defined functors for named functions. The naming of functor types follows the <code>$(capitalize(funname))Fun</code> rule.
For example, the functor type for <code>sqrt</code> is <code>SqrtFun</code>, and that for <code>lgamma</code> is <code>LgammaFun</code>, etc.</p>
<p>In particular, the package defines functors for the following functions:</p>
<ul>
<li>
<p>arithmetic functions</p>
<pre><code>abs, abs2, real, imag, sqr, rcp,
sign, signbit, div, fld, rem, mod
</code></pre>
</li>
<li>
<p>rounding functions</p>
<pre><code>floor, ceil, trunc, round,
ifloor, iceil, itrunc, iround
</code></pre>
</li>
<li>
<p>number classification functions</p>
<p><code>isnan, isinf, isfinite</code></p>
</li>
<li>
<p>algebraic functions</p>
<p><code>sqrt, rsqrt, cbrt, rcbrt, hypot</code></p>
</li>
<li>
<p>exponential &amp; logarithm</p>
<pre><code>exp, exp2, exp10, expm1,
log, log2, log10, log1p,

sigmoid, logit, xlogx, xlogy,
softplus, invsoftplus, logsumexp
</code></pre>
</li>
<li>
<p>trigonometric functions</p>
<pre><code>sin, cos, tan, cot, sec, csc,
asin, acos, atan, acot, asec, acsc, atan2,
sinc, cosc, sinpi, cospi,
sind, cosd, tand, cotd, secd, cscd,
asind, acosd, atand, acotd, asecd, acscd
</code></pre>
</li>
<li>
<p>hyperbolic functions</p>
<pre><code>sinh, cosh, tanh, coth, sech, csch,
asinh, acosh, atanh, acoth, asech, acsch
</code></pre>
</li>
<li>
<p>special functions</p>
<pre><code>erf, erfc, erfinv, erfcinv, erfi, erfcx,
gamma, lgamma, digamma,
eta, zeta, beta, lbeta,
airy, airyprime, airyai, airyaiprime, airybi, airybiprime,
besselj0, besselj1, bessely0, bessely1
besseli, besselj, besselk, bessely,
hankelh1, hankelh2
</code></pre>
</li>
</ul>
<h2><a id="user-content-result-type-inference" class="anchor" aria-hidden="true" href="#result-type-inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Result Type Inference</h2>
<p>Each functor defined in this package comes with <code>result_type</code> methods that return the type of the result, given the argument types. These methods are thoroughly tested to ensure correctness. For example,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">result_type</span>(<span class="pl-c1">Add</span>(), Int, Float64)  <span class="pl-c"><span class="pl-c">#</span> --&gt; returns Float64</span>
<span class="pl-c1">result_type</span>(<span class="pl-c1">SqrtFun</span>(), Int)   <span class="pl-c"><span class="pl-c">#</span> --&gt; returns Float64</span></pre></div>
<p>The package also provides other convenient methods for type inference, which include <code>fptype</code> and <code>arithtype</code>. Particularly, we have</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">fptype</span><span class="pl-c1">{T&lt;:Real}</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>) <span class="pl-k">==</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">Convert</span>(AbstractFloat, <span class="pl-c1">one</span>(T)))
<span class="pl-c1">fptype</span><span class="pl-c1">{T&lt;:Real}</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Complex{T}}</span>) <span class="pl-k">==</span> Complex{<span class="pl-c1">fptype</span>(T)}

arithtype{T1<span class="pl-k">&lt;:</span><span class="pl-c1">Number</span>, T2<span class="pl-k">&lt;:</span><span class="pl-c1">Number</span>} <span class="pl-k">==</span> <span class="pl-c1">typeof</span>(<span class="pl-c1">one</span>(T1) <span class="pl-k">+</span> <span class="pl-c1">one</span>(T2))</pre></div>
<p>The internal implementation of these functions are very efficient, usually without actually evaluating the expressions.</p>
</article></div>