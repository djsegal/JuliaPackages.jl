<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-schematajl" class="anchor" aria-hidden="true" href="#schematajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Schemata.jl</h1>
<p>A <code>Schema</code> is a specification of a data set, which may contain more than 1 table.</p>
<p>It exists independently of any particular data set, and therefore can be constructed in the absence of a data set.</p>
<p>This package facilitates 3 use cases:</p>
<ol>
<li>
<p>Read/write a schema from/to a <a href="https://toml.io/en/v1.0.0" rel="nofollow">TOML</a> file.</p>
</li>
<li>
<p>Compare a data set to a schema and list the non-compliance issues.</p>
</li>
<li>
<p>Transform a data set to comply with a schema as much as possible and return a table of outstanding issues.</p>
</li>
</ol>
<p>Although a schema can be specified in code, it is more practical to specify it in a configuration file.
This has the added benefit of sharing it with non-technical data custodians and researchers,
providing a common language for discussing data-related issues.
Indeed the 3 use cases listed above can be carried out without writing any Julia code - just run the <code>compare</code> script in the <code>scripts</code> directory.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>A <code>TableSchema</code> looks like this <code>TOML</code> file:</p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="name = &quot;mytable&quot;
description = &quot;My table&quot;
primarykey = &quot;patientid&quot;  # A column name or a vector of column names
columns = [
    {name = &quot;patientid&quot;, description = &quot;Patient ID&quot;, datatype = &quot;UInt&quot;, validvalues = &quot;UInt&quot;, iscategorical = false, isrequired = true, isunique = true},
    {name = &quot;age&quot;, description = &quot;Age (years)&quot;, datatype = &quot;Int&quot;, validvalues = &quot;Int&quot;, iscategorical = false, isrequired = true, isunique = false},
    {name = &quot;dose&quot;, description = &quot;Dose size&quot;, datatype = &quot;String&quot;, validvalues = [&quot;small&quot;, &quot;medium&quot;, &quot;large&quot;], iscategorical = true, isrequired = true, isunique = false},
    {name = &quot;fever&quot;, description = &quot;Had fever&quot;, datatype = &quot;Bool&quot;, validvalues = &quot;Bool&quot;, iscategorical = true, isrequired = true, isunique = false}
]
"><pre><span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>mytable<span class="pl-pds">"</span></span>
<span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>My table<span class="pl-pds">"</span></span>
<span class="pl-smi">primarykey</span> = <span class="pl-s"><span class="pl-pds">"</span>patientid<span class="pl-pds">"</span></span>  <span class="pl-c"><span class="pl-c">#</span> A column name or a vector of column names</span>
<span class="pl-smi">columns</span> = [
    {<span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>patientid<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Patient ID<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>UInt<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = <span class="pl-s"><span class="pl-pds">"</span>UInt<span class="pl-pds">"</span></span>, <span class="pl-smi">iscategorical</span> = <span class="pl-c1">false</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">true</span>},
    {<span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>age<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Age (years)<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>Int<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = <span class="pl-s"><span class="pl-pds">"</span>Int<span class="pl-pds">"</span></span>, <span class="pl-smi">iscategorical</span> = <span class="pl-c1">false</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">false</span>},
    {<span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>dose<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Dose size<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>String<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = [<span class="pl-s"><span class="pl-pds">"</span>small<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>medium<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>large<span class="pl-pds">"</span></span>], <span class="pl-smi">iscategorical</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">false</span>},
    {<span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>fever<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Had fever<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>Bool<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = <span class="pl-s"><span class="pl-pds">"</span>Bool<span class="pl-pds">"</span></span>, <span class="pl-smi">iscategorical</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">false</span>}
]</pre></div>
<p>A <code>Schema</code> contains 1 or more <code>TableSchema</code>. For example:</p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="name = &quot;fever&quot;
description = &quot;Fever schema&quot;

[tables]
table1 = &quot;table1_schema&quot;
table2 = &quot;table2_schema&quot;
"><pre><span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>fever<span class="pl-pds">"</span></span>
<span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Fever schema<span class="pl-pds">"</span></span>

[<span class="pl-en">tables</span>]
<span class="pl-smi">table1</span> = <span class="pl-s"><span class="pl-pds">"</span>table1_schema<span class="pl-pds">"</span></span>
<span class="pl-smi">table2</span> = <span class="pl-s"><span class="pl-pds">"</span>table2_schema<span class="pl-pds">"</span></span></pre></div>
<p>For tables that fit into memory, usage is as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Read in a schema
using Schemata

schema = readschema(joinpath(dirname(pathof(Schemata)), &quot;..&quot;, &quot;test/schemata/fever.toml&quot;))
ts     = schema.tables[:mytable]  # TableSchema for mytable

# Construct/import a table (any object that satisfies the Tables.jl interface)
using DataFrames

table = DataFrame(
    patientid = [1, 2, 3, 4],
    age       = [11, 22, 33, 444],  # Note that 444 is not in the set of valid values according to the schema
    dose      = [&quot;small&quot;, &quot;medium&quot;, &quot;large&quot;, &quot;medium&quot;],
    fever     = [false, true, true, false]
)

# Transform the table to comply with the schema.
# Values that are unparseable or invalid are set to missing.
# Return the transformed data, a table of input data issues and a table of output data issues.
outdata, input_issues, output_issues = compare(ts, table)
"><pre><span class="pl-c"><span class="pl-c">#</span> Read in a schema</span>
<span class="pl-k">using</span> Schemata

schema <span class="pl-k">=</span> <span class="pl-c1">readschema</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(Schemata)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test/schemata/fever.toml<span class="pl-pds">"</span></span>))
ts     <span class="pl-k">=</span> schema<span class="pl-k">.</span>tables[<span class="pl-c1">:mytable</span>]  <span class="pl-c"><span class="pl-c">#</span> TableSchema for mytable</span>

<span class="pl-c"><span class="pl-c">#</span> Construct/import a table (any object that satisfies the Tables.jl interface)</span>
<span class="pl-k">using</span> DataFrames

table <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(
    patientid <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>],
    age       <span class="pl-k">=</span> [<span class="pl-c1">11</span>, <span class="pl-c1">22</span>, <span class="pl-c1">33</span>, <span class="pl-c1">444</span>],  <span class="pl-c"><span class="pl-c">#</span> Note that 444 is not in the set of valid values according to the schema</span>
    dose      <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>small<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>medium<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>large<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>medium<span class="pl-pds">"</span></span>],
    fever     <span class="pl-k">=</span> [<span class="pl-c1">false</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">false</span>]
)

<span class="pl-c"><span class="pl-c">#</span> Transform the table to comply with the schema.</span>
<span class="pl-c"><span class="pl-c">#</span> Values that are unparseable or invalid are set to missing.</span>
<span class="pl-c"><span class="pl-c">#</span> Return the transformed data, a table of input data issues and a table of output data issues.</span>
outdata, input_issues, output_issues <span class="pl-k">=</span> <span class="pl-c1">compare</span>(ts, table)</pre></div>
<p>For tables that are too big to fit into memory, replace the table argument with the filename of the table:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Transform the table to comply with the schema.
# Values that are unparseable or invalid are set to missing.
# Write the transformed data, a table of input data issues and a table of output data issues to disk.
input_data_file    = &quot;/path/to/mytable.tsv&quot;
output_data_file   = &quot;/path/to/transformed_table.tsv&quot;
input_issues_file  = &quot;/path/to/input_issues.tsv&quot;
output_issues_file = &quot;/path/to/output_issues.tsv&quot;
compare(ts, input_data_file; output_data_file=output_data_file, input_issues_file=input_issues_file, output_issues_file=output_issues_file)

# Or simply...
compare(ts, input_data_file)  # output_data_file, input_issues_file, output_issues_file have default values
"><pre><span class="pl-c"><span class="pl-c">#</span> Transform the table to comply with the schema.</span>
<span class="pl-c"><span class="pl-c">#</span> Values that are unparseable or invalid are set to missing.</span>
<span class="pl-c"><span class="pl-c">#</span> Write the transformed data, a table of input data issues and a table of output data issues to disk.</span>
input_data_file    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/path/to/mytable.tsv<span class="pl-pds">"</span></span>
output_data_file   <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/path/to/transformed_table.tsv<span class="pl-pds">"</span></span>
input_issues_file  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/path/to/input_issues.tsv<span class="pl-pds">"</span></span>
output_issues_file <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/path/to/output_issues.tsv<span class="pl-pds">"</span></span>
<span class="pl-c1">compare</span>(ts, input_data_file; output_data_file<span class="pl-k">=</span>output_data_file, input_issues_file<span class="pl-k">=</span>input_issues_file, output_issues_file<span class="pl-k">=</span>output_issues_file)

<span class="pl-c"><span class="pl-c">#</span> Or simply...</span>
<span class="pl-c1">compare</span>(ts, input_data_file)  <span class="pl-c"><span class="pl-c">#</span> output_data_file, input_issues_file, output_issues_file have default values</span></pre></div>
<h3><a id="user-content-a-speed-up" class="anchor" aria-hidden="true" href="#a-speed-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A speed-up</h3>
<p>If your data is sorted by its primary key, set the keyword argument <code>sorted_by_primarykey</code> to <code>true</code> (default is <code>false</code>).
That is, use <code>compare(ts, table; sorted_by_primarykey=true)</code> or <code>compare(ts, input_data_file; sorted_by_primarykey=true)</code>.
In this case the <code>compare</code> function assumes that your input data table is sorted by its primary key (as specified in the schema),
which allows for a faster comparison between the data and the schema.</p>
<h1><a id="user-content-user-defined-parsers" class="anchor" aria-hidden="true" href="#user-defined-parsers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>User-defined Parsers</h1>
<p>Users can provide custom parsers, which enable parsing of values:</p>
<ul>
<li>With types that are not in Julia's <code>Core</code> module.</li>
<li>Of <code>Core</code> types in non-standard ways, such as custom date formats.</li>
<li>Of <code>Core</code> types in standard ways with a unified interface.</li>
</ul>
<p>A user-defined parser can be specified directly or in a <code>Dict</code>, and therefore can be specified in a configuration file.
You can specify positional and/or keyword arguments as required.
For example, the following code from the test suite defines a user-defined parser for a <code>ZonedDateTime</code>.
Note the specification of a range of non-<code>Core</code> types, namely <code>(startvalue, stepsize, endvalue)</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Define user-defined parser
using TimeZones

function my_zdt_parser(s::T, tz::String) where {T &lt;: AbstractString}
    occursin(':', s) &amp;&amp; return ZonedDateTime(DateTime(s[1:16]), TimeZone(tz))  # Example: s=&quot;2020-12-31T09:30:59+10:00&quot;
    dt = Date(eval(Meta.parse(s)))  # Examples: s=&quot;today()&quot;, s=&quot;2020-11-01&quot;
    ZonedDateTime(DateTime(dt), TimeZone(tz))
end

my_zdt_parser(dttm::DateTime, tz::String) = ZonedDateTime(dttm, TimeZone(tz))

# Dict for ColumnSchema constructor, obtained after reading toml
d = Dict(&quot;name&quot;          =&gt; &quot;zdt&quot;, &quot;description&quot; =&gt; &quot;Test custom parser for TimeZones.ZonedDateTime&quot;,
         &quot;datatype&quot;      =&gt; &quot;ZonedDateTime&quot;,
         &quot;iscategorical&quot; =&gt; false, &quot;isrequired&quot; =&gt; true, &quot;isunique&quot; =&gt; true,
         &quot;validvalues&quot;   =&gt; &quot;(today()-Year(2), Hour(1), today()-Day(1))&quot;,  # Ensure that the range has sufficient resolution
         &quot;parser&quot;        =&gt; Dict(&quot;function&quot; =&gt; &quot;my_zdt_parser&quot;, &quot;args&quot;=&gt;[&quot;Australia/Melbourne&quot;]))

# Need to eval datatype and the parser function in the same scope that they were defined (and before constructing the ColumnSchema).
# Schemata.jl can't see the datatype and parser function until it receives them from the current scope.
d[&quot;datatype&quot;] = eval(Meta.parse(d[&quot;datatype&quot;]))
d[&quot;parser&quot;][&quot;function&quot;] = eval(Meta.parse(d[&quot;parser&quot;][&quot;function&quot;]))

# Now the schema constructors can be used
cs = ColumnSchema(d)
ts = TableSchema(:mytable, &quot;My table&quot;, [cs], [:zdt])

table  = DataFrame(zdt=[DateTime(today() - Day(7)) + Hour(i) for i = 1:3])
target = [ZonedDateTime(table[i, :zdt], TimeZone(&quot;Australia/Melbourne&quot;)) for i = 1:3]
outdata, issues_in, issues_out = compare(ts, table)
outdata[!, :zdt] == target

table = DataFrame(zdt=[string(DateTime(today() - Day(7)) + Hour(i)) for i = 1:3])  # String type
outdata, issues_in, issues_out = compare(ts, table)
outdata[!, :zdt] == target

table = DataFrame(zdt=[string(ZonedDateTime(DateTime(today() - Day(7)) + Hour(i), TimeZone(&quot;Australia/Melbourne&quot;))) for i = 1:3])  # String type
outdata, issues_in, issues_out = compare(ts, table)
outdata[!, :zdt] == target
"><pre><span class="pl-c"><span class="pl-c">#</span> Define user-defined parser</span>
<span class="pl-k">using</span> TimeZones

<span class="pl-k">function</span> <span class="pl-en">my_zdt_parser</span>(s<span class="pl-k">::</span><span class="pl-c1">T</span>, tz<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractString</span>}
    <span class="pl-c1">occursin</span>(<span class="pl-s"><span class="pl-pds">'</span>:<span class="pl-pds">'</span></span>, s) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> <span class="pl-c1">ZonedDateTime</span>(<span class="pl-c1">DateTime</span>(s[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">16</span>]), <span class="pl-c1">TimeZone</span>(tz))  <span class="pl-c"><span class="pl-c">#</span> Example: s="2020-12-31T09:30:59+10:00"</span>
    dt <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(s)))  <span class="pl-c"><span class="pl-c">#</span> Examples: s="today()", s="2020-11-01"</span>
    <span class="pl-c1">ZonedDateTime</span>(<span class="pl-c1">DateTime</span>(dt), <span class="pl-c1">TimeZone</span>(tz))
<span class="pl-k">end</span>

<span class="pl-en">my_zdt_parser</span>(dttm<span class="pl-k">::</span><span class="pl-c1">DateTime</span>, tz<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">ZonedDateTime</span>(dttm, <span class="pl-c1">TimeZone</span>(tz))

<span class="pl-c"><span class="pl-c">#</span> Dict for ColumnSchema constructor, obtained after reading toml</span>
d <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>          <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>zdt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Test custom parser for TimeZones.ZonedDateTime<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>datatype<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>ZonedDateTime<span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>iscategorical<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>, <span class="pl-s"><span class="pl-pds">"</span>isrequired<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>, <span class="pl-s"><span class="pl-pds">"</span>isunique<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>,
         <span class="pl-s"><span class="pl-pds">"</span>validvalues<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>(today()-Year(2), Hour(1), today()-Day(1))<span class="pl-pds">"</span></span>,  <span class="pl-c"><span class="pl-c">#</span> Ensure that the range has sufficient resolution</span>
         <span class="pl-s"><span class="pl-pds">"</span>parser<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>my_zdt_parser<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>args<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>Australia/Melbourne<span class="pl-pds">"</span></span>]))

<span class="pl-c"><span class="pl-c">#</span> Need to eval datatype and the parser function in the same scope that they were defined (and before constructing the ColumnSchema).</span>
<span class="pl-c"><span class="pl-c">#</span> Schemata.jl can't see the datatype and parser function until it receives them from the current scope.</span>
d[<span class="pl-s"><span class="pl-pds">"</span>datatype<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(d[<span class="pl-s"><span class="pl-pds">"</span>datatype<span class="pl-pds">"</span></span>]))
d[<span class="pl-s"><span class="pl-pds">"</span>parser<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">eval</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(d[<span class="pl-s"><span class="pl-pds">"</span>parser<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>function<span class="pl-pds">"</span></span>]))

<span class="pl-c"><span class="pl-c">#</span> Now the schema constructors can be used</span>
cs <span class="pl-k">=</span> <span class="pl-c1">ColumnSchema</span>(d)
ts <span class="pl-k">=</span> <span class="pl-c1">TableSchema</span>(<span class="pl-c1">:mytable</span>, <span class="pl-s"><span class="pl-pds">"</span>My table<span class="pl-pds">"</span></span>, [cs], [<span class="pl-c1">:zdt</span>])

table  <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(zdt<span class="pl-k">=</span>[<span class="pl-c1">DateTime</span>(<span class="pl-c1">today</span>() <span class="pl-k">-</span> <span class="pl-c1">Day</span>(<span class="pl-c1">7</span>)) <span class="pl-k">+</span> <span class="pl-c1">Hour</span>(i) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>])
target <span class="pl-k">=</span> [<span class="pl-c1">ZonedDateTime</span>(table[i, <span class="pl-c1">:zdt</span>], <span class="pl-c1">TimeZone</span>(<span class="pl-s"><span class="pl-pds">"</span>Australia/Melbourne<span class="pl-pds">"</span></span>)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
outdata, issues_in, issues_out <span class="pl-k">=</span> <span class="pl-c1">compare</span>(ts, table)
outdata[<span class="pl-k">!</span>, <span class="pl-c1">:zdt</span>] <span class="pl-k">==</span> target

table <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(zdt<span class="pl-k">=</span>[<span class="pl-c1">string</span>(<span class="pl-c1">DateTime</span>(<span class="pl-c1">today</span>() <span class="pl-k">-</span> <span class="pl-c1">Day</span>(<span class="pl-c1">7</span>)) <span class="pl-k">+</span> <span class="pl-c1">Hour</span>(i)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> String type</span>
outdata, issues_in, issues_out <span class="pl-k">=</span> <span class="pl-c1">compare</span>(ts, table)
outdata[<span class="pl-k">!</span>, <span class="pl-c1">:zdt</span>] <span class="pl-k">==</span> target

table <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(zdt<span class="pl-k">=</span>[<span class="pl-c1">string</span>(<span class="pl-c1">ZonedDateTime</span>(<span class="pl-c1">DateTime</span>(<span class="pl-c1">today</span>() <span class="pl-k">-</span> <span class="pl-c1">Day</span>(<span class="pl-c1">7</span>)) <span class="pl-k">+</span> <span class="pl-c1">Hour</span>(i), <span class="pl-c1">TimeZone</span>(<span class="pl-s"><span class="pl-pds">"</span>Australia/Melbourne<span class="pl-pds">"</span></span>))) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>])  <span class="pl-c"><span class="pl-c">#</span> String type</span>
outdata, issues_in, issues_out <span class="pl-k">=</span> <span class="pl-c1">compare</span>(ts, table)
outdata[<span class="pl-k">!</span>, <span class="pl-c1">:zdt</span>] <span class="pl-k">==</span> target</pre></div>
<h1><a id="user-content-intra-row-constraints" class="anchor" aria-hidden="true" href="#intra-row-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intra-Row Constraints</h1>
<p>We often want to ensure that certain relationships hold between variables within a row.
For example, we might require that a person's marriage date is after his/her birth date.
We can achieve this by specifying one or more intra-row constraints in a <code>TableSchema</code> as follows:</p>
<div class="highlight highlight-source-toml position-relative" data-snippet-clipboard-copy-content="name = &quot;intrarow_constraints_demo&quot;
description = &quot;Table with intra-row constraints&quot;
primarykey  = &quot;patientid&quot;
intrarow_constraints = {&quot;birth date before marriage date&quot; = &quot;r[:dob] &lt; r[:date_of_marriage]&quot;}
columns = [
    {name=&quot;patientid&quot;, description = &quot;Patient ID&quot;, datatype = &quot;UInt&quot;, validvalues = &quot;UInt&quot;, iscategorical = false, isrequired = true, isunique = true},
    {name=&quot;dob&quot;, description = &quot;Date of birth&quot;, datatype = &quot;Date&quot;, validvalues = &quot;Date&quot;, iscategorical = false, isrequired = true, isunique = false},
    {name=&quot;date_of_marriage&quot;, description = &quot;Date of marriage&quot;, datatype = &quot;Date&quot;, validvalues = &quot;Date&quot;, iscategorical = false, isrequired = false, isunique = false}
]
"><pre><span class="pl-smi">name</span> = <span class="pl-s"><span class="pl-pds">"</span>intrarow_constraints_demo<span class="pl-pds">"</span></span>
<span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Table with intra-row constraints<span class="pl-pds">"</span></span>
<span class="pl-smi">primarykey</span>  = <span class="pl-s"><span class="pl-pds">"</span>patientid<span class="pl-pds">"</span></span>
<span class="pl-smi">intrarow_constraints</span> = {<span class="pl-smi">"birth date before marriage date"</span> = <span class="pl-s"><span class="pl-pds">"</span>r[:dob] &lt; r[:date_of_marriage]<span class="pl-pds">"</span></span>}
<span class="pl-smi">columns</span> = [
    {<span class="pl-smi">name</span>=<span class="pl-s"><span class="pl-pds">"</span>patientid<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Patient ID<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>UInt<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = <span class="pl-s"><span class="pl-pds">"</span>UInt<span class="pl-pds">"</span></span>, <span class="pl-smi">iscategorical</span> = <span class="pl-c1">false</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">true</span>},
    {<span class="pl-smi">name</span>=<span class="pl-s"><span class="pl-pds">"</span>dob<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Date of birth<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = <span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>, <span class="pl-smi">iscategorical</span> = <span class="pl-c1">false</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">true</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">false</span>},
    {<span class="pl-smi">name</span>=<span class="pl-s"><span class="pl-pds">"</span>date_of_marriage<span class="pl-pds">"</span></span>, <span class="pl-smi">description</span> = <span class="pl-s"><span class="pl-pds">"</span>Date of marriage<span class="pl-pds">"</span></span>, <span class="pl-smi">datatype</span> = <span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>, <span class="pl-smi">validvalues</span> = <span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>, <span class="pl-smi">iscategorical</span> = <span class="pl-c1">false</span>, <span class="pl-smi">isrequired</span> = <span class="pl-c1">false</span>, <span class="pl-smi">isunique</span> = <span class="pl-c1">false</span>}
]</pre></div>
<p>Each constraint is specified as a key-value pair, where the key is a description of the constraint and
the value is the right-hand side of a function of a row <code>r</code>.
The function must return <code>true</code> or <code>false</code>.
When comparing the schema to a table, the function is executed on each row.
If the function returns <code>false</code> for one or more rows, the constraint isn't satisfied and its description is recorded in the returned issues table.</p>
</article></div>