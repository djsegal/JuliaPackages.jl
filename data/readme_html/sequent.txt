<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sequent" class="anchor" aria-hidden="true" href="#sequent"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sequent</h1>
<p><a href="https://thautwarm.github.io/Sequent.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/Sequent.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/thautwarm/Sequent.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3a948eeaa329b02f3fa7df973a51a932a854ec99dac1f5bdef8d686b695b1eb4/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f53657175656e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/Sequent.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/Sequent.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/26bfa1e49d7f3b511ae836aa1d42d95aec34d5419379814c1aa0521b52d21bd6/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f53657175656e742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/thautwarm/Sequent.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements sequent calculus in Julia programming language, which gives you the capability of easily and formally describing semantics of your system.</p>
<p>To running the whole tests, you should add an extra package</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add https://github.com/thautwarm/HMRowUnification.jl
"><pre>pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>thautwarm<span class="pl-k">/</span>HMRowUnification<span class="pl-k">.</span>jl</pre></div>
<h2><a id="user-content-example-natural-number" class="anchor" aria-hidden="true" href="#example-natural-number"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Natural Number</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@data Nat begin
    Z
    S(Nat)
end

rule_z = @sequent FOLD_Z begin
    _ ⊢ₛ Z =&gt; 0
end

rule_s = @sequent FOLD_S begin
    _ ⊢ₛ term =&gt; n
    _ ⊢ₛ S(term) =&gt; n + 1 
end

@semantics [rule_z, rule_s]

(nothing ⊢ₛ Z) == 0
(nothing ⊢ₛ S(S(Z))) == 2
"><pre><span class="pl-c1">@data</span> Nat <span class="pl-k">begin</span>
    Z
    <span class="pl-c1">S</span>(Nat)
<span class="pl-k">end</span>

rule_z <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> FOLD_Z <span class="pl-k">begin</span>
    _ ⊢ₛ Z <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span>

rule_s <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> FOLD_S <span class="pl-k">begin</span>
    _ ⊢ₛ term <span class="pl-k">=&gt;</span> n
    _ ⊢ₛ <span class="pl-c1">S</span>(term) <span class="pl-k">=&gt;</span> n <span class="pl-k">+</span> <span class="pl-c1">1</span> 
<span class="pl-k">end</span>

<span class="pl-c1">@semantics</span> [rule_z, rule_s]

(<span class="pl-c1">nothing</span> ⊢ₛ Z) <span class="pl-k">==</span> <span class="pl-c1">0</span>
(<span class="pl-c1">nothing</span> ⊢ₛ <span class="pl-c1">S</span>(<span class="pl-c1">S</span>(Z))) <span class="pl-k">==</span> <span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-example-monomorphic-type-inference" class="anchor" aria-hidden="true" href="#example-monomorphic-type-inference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: Monomorphic Type Inference</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@data ML begin
    LApp(ML, ML)
    LFun(Symbol, ML)
    LVar(Symbol)
    LVal(Int)
end


ImD = Base.ImmutableDict

struct Sigma{O}
    unbox :: ImD{Symbol, O}
end

Sigma{O}() where O = Sigma(ImD{Symbol, O}())

Base.getindex(s::Sigma{O}, x::Pair{Symbol, A}) where {O, A&lt;:O} =
    Sigma(ImD(s.unbox, x))
Base.getindex(s::Sigma{O}, x::Symbol) where O = 
    s.unbox[x]

(s::Sigma{O})(x::Pair{Symbol, A}) where {O, A&lt;:O} = ImD(s, x)

r_app = @sequent APP begin
    (Γ, σ) ⊢ʷ a =&gt; ta
    (Γ, σ) ⊢ʷ f =&gt; Arrow(ta′, tr)
    true = Γ.unify(ta, ta′)
    (Γ, σ) ⊢ʷ LApp(f, a) =&gt; tr
end

r_var = @sequent VAR begin
    (Γ, σ) ⊢ʷ LVar(s) =&gt; σ[s]
end

r_fun = @sequent FUN begin
    a′ = Γ.new_tvar()
    (Γ, σ[a =&gt; a′]) ⊢ʷ r =&gt; tr
    (Γ, σ) ⊢ʷ LFun(a, r) =&gt; Arrow(a′, tr)
end

r_val = @sequent VAL begin
    _ ⊢ʷ LVal(_) =&gt; Nom(:int)
end

@semantics [r_app, r_fun, r_val, r_var]

@testset &quot;ML&quot; begin
    tctx = HMT[]
    Γ = mk_tcstate(tctx)
    σ = Sigma{HMT}()
    int_t = Nom(:int)
    σ = σ[:add =&gt; Arrow(int_t, Arrow(int_t, int_t))]
    term = 
        LFun(:a,
            LApp(
                LApp(
                    LVar(:add),
                    LVar(:a)),
                LVar(:a)))
    infer_ty =  (Γ, σ) ⊢ʷ term
    @test Γ.prune(infer_ty) == Arrow(int_t, int_t)
end
"><pre><span class="pl-c1">@data</span> ML <span class="pl-k">begin</span>
    <span class="pl-c1">LApp</span>(ML, ML)
    <span class="pl-c1">LFun</span>(Symbol, ML)
    <span class="pl-c1">LVar</span>(Symbol)
    <span class="pl-c1">LVal</span>(Int)
<span class="pl-k">end</span>


ImD <span class="pl-k">=</span> Base<span class="pl-k">.</span>ImmutableDict

<span class="pl-k">struct</span> Sigma{O}
    unbox <span class="pl-k">::</span> <span class="pl-c1">ImD{Symbol, O}</span>
<span class="pl-k">end</span>

<span class="pl-en">Sigma</span><span class="pl-c1">{O}</span>() <span class="pl-k">where</span> O <span class="pl-k">=</span> <span class="pl-c1">Sigma</span>(<span class="pl-c1">ImD</span><span class="pl-c1">{Symbol, O}</span>())

Base<span class="pl-k">.</span><span class="pl-en">getindex</span>(s<span class="pl-k">::</span><span class="pl-c1">Sigma{O}</span>, x<span class="pl-k">::</span><span class="pl-c1">Pair{Symbol, A}</span>) <span class="pl-k">where</span> {O, A<span class="pl-k">&lt;:</span><span class="pl-c1">O</span>} <span class="pl-k">=</span>
    <span class="pl-c1">Sigma</span>(<span class="pl-c1">ImD</span>(s<span class="pl-k">.</span>unbox, x))
Base<span class="pl-k">.</span><span class="pl-en">getindex</span>(s<span class="pl-k">::</span><span class="pl-c1">Sigma{O}</span>, x<span class="pl-k">::</span><span class="pl-c1">Symbol</span>) <span class="pl-k">where</span> O <span class="pl-k">=</span> 
    s<span class="pl-k">.</span>unbox[x]

(s<span class="pl-k">::</span><span class="pl-c1">Sigma{O}</span>)(x<span class="pl-k">::</span><span class="pl-c1">Pair{Symbol, A}</span>) <span class="pl-k">where</span> {O, A<span class="pl-k">&lt;:</span><span class="pl-c1">O</span>} <span class="pl-k">=</span> <span class="pl-c1">ImD</span>(s, x)

r_app <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> APP <span class="pl-k">begin</span>
    (Γ, σ) ⊢ʷ a <span class="pl-k">=&gt;</span> ta
    (Γ, σ) ⊢ʷ f <span class="pl-k">=&gt;</span> <span class="pl-c1">Arrow</span>(ta′, tr)
    <span class="pl-c1">true</span> <span class="pl-k">=</span> Γ<span class="pl-k">.</span><span class="pl-c1">unify</span>(ta, ta′)
    (Γ, σ) ⊢ʷ <span class="pl-c1">LApp</span>(f, a) <span class="pl-k">=&gt;</span> tr
<span class="pl-k">end</span>

r_var <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> VAR <span class="pl-k">begin</span>
    (Γ, σ) ⊢ʷ <span class="pl-c1">LVar</span>(s) <span class="pl-k">=&gt;</span> σ[s]
<span class="pl-k">end</span>

r_fun <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> FUN <span class="pl-k">begin</span>
    a′ <span class="pl-k">=</span> Γ<span class="pl-k">.</span><span class="pl-c1">new_tvar</span>()
    (Γ, σ[a <span class="pl-k">=&gt;</span> a′]) ⊢ʷ r <span class="pl-k">=&gt;</span> tr
    (Γ, σ) ⊢ʷ <span class="pl-c1">LFun</span>(a, r) <span class="pl-k">=&gt;</span> <span class="pl-c1">Arrow</span>(a′, tr)
<span class="pl-k">end</span>

r_val <span class="pl-k">=</span> <span class="pl-c1">@sequent</span> VAL <span class="pl-k">begin</span>
    _ ⊢ʷ <span class="pl-c1">LVal</span>(_) <span class="pl-k">=&gt;</span> <span class="pl-c1">Nom</span>(<span class="pl-c1">:int</span>)
<span class="pl-k">end</span>

<span class="pl-c1">@semantics</span> [r_app, r_fun, r_val, r_var]

<span class="pl-c1">@testset</span> <span class="pl-s"><span class="pl-pds">"</span>ML<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    tctx <span class="pl-k">=</span> HMT[]
    Γ <span class="pl-k">=</span> <span class="pl-c1">mk_tcstate</span>(tctx)
    σ <span class="pl-k">=</span> <span class="pl-c1">Sigma</span><span class="pl-c1">{HMT}</span>()
    int_t <span class="pl-k">=</span> <span class="pl-c1">Nom</span>(<span class="pl-c1">:int</span>)
    σ <span class="pl-k">=</span> σ[<span class="pl-c1">:add</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Arrow</span>(int_t, <span class="pl-c1">Arrow</span>(int_t, int_t))]
    term <span class="pl-k">=</span> 
        <span class="pl-c1">LFun</span>(<span class="pl-c1">:a</span>,
            <span class="pl-c1">LApp</span>(
                <span class="pl-c1">LApp</span>(
                    <span class="pl-c1">LVar</span>(<span class="pl-c1">:add</span>),
                    <span class="pl-c1">LVar</span>(<span class="pl-c1">:a</span>)),
                <span class="pl-c1">LVar</span>(<span class="pl-c1">:a</span>)))
    infer_ty <span class="pl-k">=</span>  (Γ, σ) ⊢ʷ term
    <span class="pl-c1">@test</span> Γ<span class="pl-k">.</span><span class="pl-c1">prune</span>(infer_ty) <span class="pl-k">==</span> <span class="pl-c1">Arrow</span>(int_t, int_t)
<span class="pl-k">end</span></pre></div>
</article></div>