<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://deltares.github.io/PointCloudRasterizers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://deltares.github.io/PointCloudRasterizers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/Deltares/PointCloudRasterizers.jl/actions/workflows/CI.yml"><img src="https://github.com/Deltares/PointCloudRasterizers.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Deltares/PointCloudRasterizers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/887da942ce63303e1a280938ec756495abe5ff5d7d6a4b8a7adac76633445d7d/68747470733a2f2f636f6465636f762e696f2f67682f44656c74617265732f506f696e74436c6f7564526173746572697a6572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Deltares/PointCloudRasterizers.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-pointcloudrasterizersjl" class="anchor" aria-hidden="true" href="#pointcloudrasterizersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PointCloudRasterizers.jl</h1>
<p dir="auto">Rasterize larger than memory pointclouds</p>
<p dir="auto">PointCloudRasterizers is a Julia package for creating geographical raster images from larger than memory pointclouds.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Use the Julia package manager (<code>]</code> in the REPL):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.8) pkg&gt; add PointCloudRasterizers"><pre>(v1.<span class="pl-c1">8</span>) pkg<span class="pl-k">&gt;</span> add PointCloudRasterizers</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Rasterizing pointclouds requires at least two steps:</p>
<ul dir="auto">
<li><code>index(pc, cellsizes)</code> a pointcloud, returning a <code>PointCloudIndex</code>, linking each point to a <code>cellsizes</code> sized raster cell.</li>
<li><code>reduce(pc, f)</code> a <code>PointCloudIndex</code>, creating an output raster by calling <code>f</code> on all points intersecting a given raster cell. <code>f</code> should return a single value.</li>
</ul>
<p dir="auto">Optionally one can</p>
<ul dir="auto">
<li><code>filter(pci, f)</code> the <code>PointCloudIndex</code>, by removing points for which <code>f</code> is false. The function <code>f</code> receives a single point. <code>filter!</code> mutates the <code>PointCloudIndex</code>.</li>
<li><code>filter(pci, raster, f)</code> the <code>PointCloudIndex</code>, by removing points for which <code>f</code> is false. The function <code>f</code> receives a single point and the corresponding cell value of <code>raster</code>. <code>raster</code> should have the same size and extents as <code>counts(pci)</code>, like a previous result of <code>reduce</code>. <code>filter!</code> mutates the <code>PointCloudIndex</code>.</li>
</ul>
<p dir="auto">All three operators iterate once over the pointcloud.
While rasterizing thus takes at least two complete iterations, it enables rasterizing larger than memory pointclouds, especially if the provided pointcloud is a lazy iterator itself, such as provided by LazIO.</p>
<p dir="auto">In the case of a small pointcloud, it can be faster to disable this lazy iteration by calling <code>collect</code> on the LazIO pointcloud first.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using PointCloudRasterizers
using LazIO
using GeoArrays
using Statistics
using GeoFormatTypes
using Extents
using GeoInterface

# Open LAZ file, but can be any GeoInterface support MultiPoint geometry
lazfn = joinpath(dirname(pathof(LazIO)), &quot;..&quot;, &quot;test/libLAS_1.2.laz&quot;)
pointcloud = LazIO.open(lazfn)"><pre><span class="pl-k">using</span> PointCloudRasterizers
<span class="pl-k">using</span> LazIO
<span class="pl-k">using</span> GeoArrays
<span class="pl-k">using</span> Statistics
<span class="pl-k">using</span> GeoFormatTypes
<span class="pl-k">using</span> Extents
<span class="pl-k">using</span> GeoInterface

<span class="pl-c"><span class="pl-c">#</span> Open LAZ file, but can be any GeoInterface support MultiPoint geometry</span>
lazfn <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(LazIO)), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test/libLAS_1.2.laz<span class="pl-pds">"</span></span>)
pointcloud <span class="pl-k">=</span> LazIO<span class="pl-k">.</span><span class="pl-c1">open</span>(lazfn)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Index pointcloud
cellsizes = (1.,1.)  # can also use [1.,1.]
pci = index(pointcloud, cellsizes)

# By default, the bbox and crs of the pointcloud are used
pci = index(pointcloud, cellsizes; bbox=GeoInterface.extent(pointcloud),crs=GeoInterface.crs(pointcloud))

# but they can be set manually
pci = index(pointcloud, cellsizes; bbox=Extents.Extent(X=(0, 1), Y=(0, 1)), crs=GeoFormatTypes.EPSG(4326))

# or index using the cellsize and bbox of an existing GeoArray `ga`
pci = index(pointcloud, ga)

# `index` returns a PointCloudIndex
# which consists of

# the pointcloud the index was calculated from
parent(pci)

# GeoArray of point density per cell
counts(pci)

# vector of linear indices joining points to cells
index(pci)

# For example, one can find the highest recorded point density with
maximum(counts(pci))"><pre><span class="pl-c"><span class="pl-c">#</span> Index pointcloud</span>
cellsizes <span class="pl-k">=</span> (<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>)  <span class="pl-c"><span class="pl-c">#</span> can also use [1.,1.]</span>
pci <span class="pl-k">=</span> <span class="pl-c1">index</span>(pointcloud, cellsizes)

<span class="pl-c"><span class="pl-c">#</span> By default, the bbox and crs of the pointcloud are used</span>
pci <span class="pl-k">=</span> <span class="pl-c1">index</span>(pointcloud, cellsizes; bbox<span class="pl-k">=</span>GeoInterface<span class="pl-k">.</span><span class="pl-c1">extent</span>(pointcloud),crs<span class="pl-k">=</span>GeoInterface<span class="pl-k">.</span><span class="pl-c1">crs</span>(pointcloud))

<span class="pl-c"><span class="pl-c">#</span> but they can be set manually</span>
pci <span class="pl-k">=</span> <span class="pl-c1">index</span>(pointcloud, cellsizes; bbox<span class="pl-k">=</span>Extents<span class="pl-k">.</span><span class="pl-c1">Extent</span>(X<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), Y<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)), crs<span class="pl-k">=</span>GeoFormatTypes<span class="pl-k">.</span><span class="pl-c1">EPSG</span>(<span class="pl-c1">4326</span>))

<span class="pl-c"><span class="pl-c">#</span> or index using the cellsize and bbox of an existing GeoArray `ga`</span>
pci <span class="pl-k">=</span> <span class="pl-c1">index</span>(pointcloud, ga)

<span class="pl-c"><span class="pl-c">#</span> `index` returns a PointCloudIndex</span>
<span class="pl-c"><span class="pl-c">#</span> which consists of</span>

<span class="pl-c"><span class="pl-c">#</span> the pointcloud the index was calculated from</span>
<span class="pl-c1">parent</span>(pci)

<span class="pl-c"><span class="pl-c">#</span> GeoArray of point density per cell</span>
<span class="pl-c1">counts</span>(pci)

<span class="pl-c"><span class="pl-c">#</span> vector of linear indices joining points to cells</span>
<span class="pl-c1">index</span>(pci)

<span class="pl-c"><span class="pl-c">#</span> For example, one can find the highest recorded point density with</span>
<span class="pl-c1">maximum</span>(<span class="pl-c1">counts</span>(pci))</pre></div>
<p dir="auto">The <code>index(pci)</code> is created using <code>LinearIndices</code>, so the index is a single integer value per cell rather than cartesian (X,Y) syntax.</p>
<p dir="auto">Once an <code>PointCloudIndex</code> is created, users can pass it to the <code>reduce</code> function to convert to a raster.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Reduce to raster
raster = reduce(pci, reducer=median)"><pre><span class="pl-c"><span class="pl-c">#</span> Reduce to raster</span>
raster <span class="pl-k">=</span> <span class="pl-c1">reduce</span>(pci, reducer<span class="pl-k">=</span>median)</pre></div>
<p dir="auto">The reducer can be functions such as <code>mean</code>, <code>median</code>, <code>length</code> but can also take custom functions. By default the <code>GeoInterface.z</code> function is used to retrieve the values to be reduced on. You can provide your own function <code>op</code> that returns another value for your points.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# calculate raster of median height using an anonymous function
height_percentile = reduce(pci, op=GeoInterface.z, reducer = x -&gt; quantile(x,0.5))"><pre><span class="pl-c"><span class="pl-c">#</span> calculate raster of median height using an anonymous function</span>
height_percentile <span class="pl-k">=</span> <span class="pl-c1">reduce</span>(pci, op<span class="pl-k">=</span>GeoInterface<span class="pl-k">.</span>z, reducer <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">quantile</span>(x,<span class="pl-c1">0.5</span>))</pre></div>
<p dir="auto">Any reduced layer is returned as a <a href="https://github.com/evetion/GeoArrays.jl">GeoArray</a>.</p>
<p dir="auto">One can also filter points matching some condition.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Filter on last returns (inclusive)
last_return(p) = p.return_number == p.number_of_returns  # custom for LazIO Points
filter!(pci, last_return)"><pre><span class="pl-c"><span class="pl-c">#</span> Filter on last returns (inclusive)</span>
<span class="pl-en">last_return</span>(p) <span class="pl-k">=</span> p<span class="pl-k">.</span>return_number <span class="pl-k">==</span> p<span class="pl-k">.</span>number_of_returns  <span class="pl-c"><span class="pl-c">#</span> custom for LazIO Points</span>
<span class="pl-c1">filter!</span>(pci, last_return)</pre></div>
<p dir="auto">Filters are done in-place and create a new index matching the condition. It does not change the loaded dataset. You can also call <code>filter</code> which returns a new index, copying the counts and the index, but it does <strong>not</strong> copy the dataset. This helps with trying out filtering settings without re-indexing the dataset.</p>
<p dir="auto">Filtering can also be done compared to a computed surface.
For example, if we want to select all points within some tolerance of the median raster from above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="within_tol(p, raster_value) = isapprox(p.geometry[3], raster_value, atol=5.0)
filter!(pci, raster, within_tol)"><pre><span class="pl-en">within_tol</span>(p, raster_value) <span class="pl-k">=</span> <span class="pl-c1">isapprox</span>(p<span class="pl-k">.</span>geometry[<span class="pl-c1">3</span>], raster_value, atol<span class="pl-k">=</span><span class="pl-c1">5.0</span>)
<span class="pl-c1">filter!</span>(pci, raster, within_tol)</pre></div>
<p dir="auto">Finally, we can write the raster to disk.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Save raster to tiff
GeoArrays.write(&quot;last_return_median.tif&quot;, raster)

# Or set some attributes for the tiff file
GeoArrays.write(&quot;last_return_median.tif&quot;, raster; nodata=-9999, options=Dict(&quot;TILED&quot;=&gt;&quot;YES&quot;, &quot;COMPRESS&quot;=&gt;&quot;ZSTD&quot;))"><pre><span class="pl-c"><span class="pl-c">#</span> Save raster to tiff</span>
GeoArrays<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>last_return_median.tif<span class="pl-pds">"</span></span>, raster)

<span class="pl-c"><span class="pl-c">#</span> Or set some attributes for the tiff file</span>
GeoArrays<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>last_return_median.tif<span class="pl-pds">"</span></span>, raster; nodata<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">9999</span>, options<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>TILED<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>YES<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>COMPRESS<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>ZSTD<span class="pl-pds">"</span></span>))</pre></div>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto"><a href="LICENSE.md">MIT</a></p>
</article></div>