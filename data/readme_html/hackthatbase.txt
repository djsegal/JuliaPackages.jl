<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p>Rebuilding the Julia system image is time-consuming, leading
to long round-trip times when modifying code in base. This
tool aims to reduce the turn-around time for testing changes
to <code>inference.jl</code>, the most compilation-heavy part of base.</p>
<p>This package should work (but has not been tested) with other modular
parts of base, although it will almost certainly not work
with the REPL code.</p>
<h2><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternatives</h2>
<p>One can open a Julia REPL, navigate to <code>base/</code>, and then execute
<code>include("coreimg.jl")</code>. This will replace the inference machinery
in the running session. You can perform this multiple times as
you insert and remove debugging statements in <code>inference.jl</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> HackThatBase
<span class="pl-en">func</span>(x,y) <span class="pl-k">=</span> x <span class="pl-k">+</span> y
args <span class="pl-k">=</span> <span class="pl-c1">lminfo</span>(func, (Int,Float64))   <span class="pl-c"><span class="pl-c">#</span> (Int, Float64) are the types of x and y</span>
<span class="pl-c1">@hack</span> W inference
result <span class="pl-k">=</span> <span class="pl-c1">run_inference</span>(W, args)</pre></div>
<p>After modifying <code>inference.jl</code>, simply re-run these steps to
execute the modified code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@hack</span> W inference
result <span class="pl-k">=</span> <span class="pl-c1">run_inference</span>(W, args)</pre></div>
<p>To view the resulting inferred AST, use</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">showast</span>(args[<span class="pl-c1">1</span>], result[<span class="pl-c1">2</span>])</pre></div>
<p><code>lminfo</code> is a helper function to extract the method signature
and other arguments to <code>typeinf</code>.</p>
<p>(on my system, the above steps take ~15 seconds to complete,
as compared to &gt;2 minutes to rebuild the second stage of sysimg)</p>
<p>Notes:</p>
<ul>
<li>imports are limited in the test environment.
To inspect variables, push to an array in <code>Main</code>.
e.g. somewhere in <code>inference.jl</code>, do <code>push!(Main.foo, A)</code>
(where <code>foo = []</code> at the REPL before running)</li>
</ul>
<h3><a id="user-content-tips-on-usage-with-debugjl" class="anchor" aria-hidden="true" href="#tips-on-usage-with-debugjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tips on usage with Debug.jl</h3>
<p><code>HackThatBase</code> can be used in conjunction with the <a href="https://github.com/toivoh/Debug.jl">Debug</a> package.
Because inference is used during the compilation of functions (including those called by inference), it's
advised that you first complete one run through <code>showast</code> before beginning debugging. For example,
let's say you've edited <code>inference.jl</code> and inserted some breakpoints. Here's how you should proceed:</p>
<div class="highlight highlight-source-julia"><pre>shell<span class="pl-k">&gt;</span> git stash       <span class="pl-c"><span class="pl-c">#</span> temporarily go back to the unedited version of inference.jl</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HackThatBase
julia<span class="pl-k">&gt;</span> <span class="pl-en">func</span>(x,y) <span class="pl-k">=</span> x <span class="pl-k">+</span> y
julia<span class="pl-k">&gt;</span> args <span class="pl-k">=</span> <span class="pl-c1">lminfo</span>(func, (Int,Float64))   <span class="pl-c"><span class="pl-c">#</span> (Int, Float64) are the types of x and y</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@hack</span> W inference
julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">run_inference</span>(W, args)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">showast</span>(args[<span class="pl-c1">1</span>], result[<span class="pl-c1">1</span>])
shell<span class="pl-k">&gt;</span> git stash pop   <span class="pl-c"><span class="pl-c">#</span> restore your edited version of inference.jl</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@hack</span> W inference
julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">run_inference</span>(W, args)</pre></div>
<p>At this point your breakpoints will be triggered.</p>
</article></div>