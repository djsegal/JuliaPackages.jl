<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-staticpermutations" class="anchor" aria-hidden="true" href="#staticpermutations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StaticPermutations</h1>
<p><a href="https://jipolanco.github.io/StaticPermutations.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://jipolanco.github.io/StaticPermutations.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a> <a href="https://github.com/jipolanco/StaticPermutations.jl/actions"><img src="https://github.com/jipolanco/StaticPermutations.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/jipolanco/StaticPermutations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ffb9418d5047d98b80398f712b44ec6cf03fefc647032d8f7f83bcb9408af76/68747470733a2f2f636f6465636f762e696f2f67682f6a69706f6c616e636f2f5374617469635065726d75746174696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jipolanco/StaticPermutations.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Tools for dealing with compile-time dimension permutations of Julia arrays.</p>
<p>This package defines a <code>Permutation</code> type describing a permutation of dimensions.
Permutations can be composed, inverted, applied to collections and reverted, among other operations.
All these operations have zero runtime cost, since they are performed using the static information encoded in the <code>Permutation</code> type.
See the <a href="https://jipolanco.github.io/StaticPermutations.jl/dev" rel="nofollow">documentation</a> for a list of implemented methods.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using StaticPermutations

julia&gt; perm = Permutation(2, 3, 1)
Permutation(2, 3, 1)

julia&gt; typeof(perm)
Permutation{(2, 3, 1),3}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StaticPermutations

julia<span class="pl-k">&gt;</span> perm <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">Permutation</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(perm)
Permutation{(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>),<span class="pl-c1">3</span>}</pre></div>
<p>Permutations can be inverted and composed.
The resulting permutation is always fully inferred.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; inv(perm)  # same as invperm(perm)
Permutation(3, 1, 2)

julia&gt; q = Permutation(3, 2, 1);

# Composition is performed using the `*` operator.
julia&gt; perm * q
Permutation(2, 1, 3)

# Note that composition is non-commutative.
julia&gt; q * perm
Permutation(1, 3, 2)

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">inv</span>(perm)  <span class="pl-c"><span class="pl-c">#</span> same as invperm(perm)</span>
<span class="pl-c1">Permutation</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">Permutation</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>);

<span class="pl-c"><span class="pl-c">#</span> Composition is performed using the `*` operator.</span>
julia<span class="pl-k">&gt;</span> perm <span class="pl-k">*</span> q
<span class="pl-c1">Permutation</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> Note that composition is non-commutative.</span>
julia<span class="pl-k">&gt;</span> q <span class="pl-k">*</span> perm
<span class="pl-c1">Permutation</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
</pre></div>
<p>Permutations are applied to collections using the <code>*</code> operator:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = (42, 12, 32)  # these may be array indices, for instance
(42, 12, 32)

julia&gt; y = perm * x
(12, 32, 42)
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> (<span class="pl-c1">42</span>, <span class="pl-c1">12</span>, <span class="pl-c1">32</span>)  <span class="pl-c"><span class="pl-c">#</span> these may be array indices, for instance</span>
(<span class="pl-c1">42</span>, <span class="pl-c1">12</span>, <span class="pl-c1">32</span>)

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> perm <span class="pl-k">*</span> x
(<span class="pl-c1">12</span>, <span class="pl-c1">32</span>, <span class="pl-c1">42</span>)</pre></div>
<p>Permutations may be reverted using the <code>\</code> operator:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x′ = perm \ y  # same as inv(perm) * y
(42, 12, 32)

julia&gt; x′ == x
true
"><pre>julia<span class="pl-k">&gt;</span> x′ <span class="pl-k">=</span> perm <span class="pl-k">\</span> y  <span class="pl-c"><span class="pl-c">#</span> same as inv(perm) * y</span>
(<span class="pl-c1">42</span>, <span class="pl-c1">12</span>, <span class="pl-c1">32</span>)

julia<span class="pl-k">&gt;</span> x′ <span class="pl-k">==</span> x
<span class="pl-c1">true</span></pre></div>
</article></div>