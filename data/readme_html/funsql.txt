<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-funsqljl" class="anchor" aria-hidden="true" href="#funsqljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunSQL.jl</h1>
<p dir="auto"><em>FunSQL is a Julia library for compositional construction of SQL queries.</em></p>
<p dir="auto"><a href="https://mechanicalrabbit.github.io/FunSQL.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/553e88c7c3cd9035e8ec133c22bcdf30cdfa475407b847deb507eb8dd6c1ee3c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="Stable Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width: 100%;"></a>
<a href="https://mechanicalrabbit.github.io/FunSQL.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Development Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://julialang.zulipchat.com/#narrow/stream/284102-funsql.2Ejl" rel="nofollow"><img src="https://camo.githubusercontent.com/79870c182a82f89b1415d1c14a5a58425743d91949f430723d2426a36da3f6c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6a756c69612d2d7a756c69702d626c7565" alt="Zulip Chat" data-canonical-src="https://img.shields.io/badge/chat-julia--zulip-blue" style="max-width: 100%;"></a>
<a href="https://github.com/MechanicalRabbit/FunSQL.jl/issues"><img src="https://camo.githubusercontent.com/1bde943a8ebd76dfdc6d5f92cd6da875121ad95c4d3c77ff3c1bf625f0fbc184/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4d656368616e6963616c5261626269742f46756e53514c2e6a6c2e737667" alt="Open Issues" data-canonical-src="https://img.shields.io/github/issues/MechanicalRabbit/FunSQL.jl.svg" style="max-width: 100%;"></a>
<a href="https://github.com/MechanicalRabbit/FunSQL.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/MechanicalRabbit/FunSQL.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/MechanicalRabbit/FunSQL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/16ea700cc4cd8e84989761350b1fa36c1fb55e32e931381e2851b718e7c8c655/68747470733a2f2f636f6465636f762e696f2f67682f4d656368616e6963616c5261626269742f46756e53514c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Code Coverage Status" data-canonical-src="https://codecov.io/gh/MechanicalRabbit/FunSQL.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://raw.githubusercontent.com/MechanicalRabbit/FunSQL.jl/master/LICENSE.md" rel="nofollow"><img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-blue.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/352933573" rel="nofollow"><img src="https://camo.githubusercontent.com/a7ca3b81670ff3c1a32fc54d25f085c823fa3663ee03484504bafe75a91d4dc2/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3335323933333537332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/352933573.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">Julia programmers sometimes need to interrogate data with the Structured Query
Language (SQL).  But SQL is notoriously hard to write in a modular fashion.</p>
<p dir="auto">FunSQL exposes full expressive power of SQL with a compositional semantics.
FunSQL allows you to build queries incrementally from small independent
fragments.  This approach is particularly useful for building applications that
programmatically construct SQL queries.</p>
<p dir="auto">If you want to learn more about FunSQL, read about <a href="https://mechanicalrabbit.github.io/FunSQL.jl/stable/two-kinds-of-sql-query-builders/" rel="nofollow">Two Kinds of SQL Query
Builders</a>, watch the <a href="https://www.youtube.com/watch?v=rGWwmuvRUYk" rel="nofollow">JuliaCon 2021 presentation</a>
(<a href="https://github.com/MechanicalRabbit/FunSQL.jl/files/7465997/FunSQL-JuliaCon2021.pdf">slides</a>), explore the <a href="https://mechanicalrabbit.github.io/FunSQL.jl/stable/examples/" rel="nofollow">Examples</a>, or go
straight to the <a href="https://mechanicalrabbit.github.io/FunSQL.jl/stable/guide/" rel="nofollow">Usage Guide</a>.</p>
<p dir="auto"><a href="https://www.youtube.com/watch?v=rGWwmuvRUYk" rel="nofollow"><img src="https://camo.githubusercontent.com/44ea7eca8ee7e0aa5eabb2b8ead28ec6c4304564b9d8ce6b4df17d4bc4014397/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f724757776d75765255596b2f6d617872657364656661756c742e6a7067" alt="FunSQL | JuliaCon 2021" data-canonical-src="https://img.youtube.com/vi/rGWwmuvRUYk/maxresdefault.jpg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto"><em>When was the last time each person born between 1930 and 1940 and living in
Illinois was seen by a healthcare provider?</em></p>
<details><summary>Database Schema</summary>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./example-schema.drawio.svg"><img src="./example-schema.drawio.svg" alt="" style="max-width: 100%;"></a></p>
</details>
<details><summary>Pipeline Diagram</summary>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./example-pipeline.drawio.svg"><img src="./example-pipeline.drawio.svg" alt="" style="max-width: 100%;"></a></p>
</details>
<details open=""><summary>Julia Code</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="From(:person) |&gt;
Where(Fun.between(Get.year_of_birth, 1930, 1940)) |&gt;
Join(From(:location) |&gt; Where(Get.state .== &quot;IL&quot;) |&gt; As(:location),
     on = Get.location_id .== Get.location.location_id) |&gt;
LeftJoin(From(:visit_occurrence) |&gt; Group(Get.person_id) |&gt; As(:visit_group),
         on = Get.person_id .== Get.visit_group.person_id) |&gt;
Select(Get.person_id,
       Get.visit_group |&gt; Agg.max(Get.visit_start_date) |&gt; As(:latest_visit_date))"><pre><span class="pl-c1">From</span>(<span class="pl-c1">:person</span>) <span class="pl-k">|&gt;</span>
<span class="pl-c1">Where</span>(Fun<span class="pl-k">.</span><span class="pl-c1">between</span>(Get<span class="pl-k">.</span>year_of_birth, <span class="pl-c1">1930</span>, <span class="pl-c1">1940</span>)) <span class="pl-k">|&gt;</span>
<span class="pl-c1">Join</span>(<span class="pl-c1">From</span>(<span class="pl-c1">:location</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Where</span>(Get<span class="pl-k">.</span>state <span class="pl-k">.==</span> <span class="pl-s"><span class="pl-pds">"</span>IL<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">As</span>(<span class="pl-c1">:location</span>),
     on <span class="pl-k">=</span> Get<span class="pl-k">.</span>location_id <span class="pl-k">.==</span> Get<span class="pl-k">.</span>location<span class="pl-k">.</span>location_id) <span class="pl-k">|&gt;</span>
<span class="pl-c1">LeftJoin</span>(<span class="pl-c1">From</span>(<span class="pl-c1">:visit_occurrence</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Group</span>(Get<span class="pl-k">.</span>person_id) <span class="pl-k">|&gt;</span> <span class="pl-c1">As</span>(<span class="pl-c1">:visit_group</span>),
         on <span class="pl-k">=</span> Get<span class="pl-k">.</span>person_id <span class="pl-k">.==</span> Get<span class="pl-k">.</span>visit_group<span class="pl-k">.</span>person_id) <span class="pl-k">|&gt;</span>
<span class="pl-c1">Select</span>(Get<span class="pl-k">.</span>person_id,
       Get<span class="pl-k">.</span>visit_group <span class="pl-k">|&gt;</span> Agg<span class="pl-k">.</span><span class="pl-c1">max</span>(Get<span class="pl-k">.</span>visit_start_date) <span class="pl-k">|&gt;</span> <span class="pl-c1">As</span>(<span class="pl-c1">:latest_visit_date</span>))</pre></div>
</details>
<details><summary>Generated SQL</summary>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SELECT
  &quot;person_2&quot;.&quot;person_id&quot;,
  &quot;visit_group_1&quot;.&quot;max&quot; AS &quot;latest_visit_date&quot;
FROM (
  SELECT
    &quot;person_1&quot;.&quot;person_id&quot;,
    &quot;person_1&quot;.&quot;location_id&quot;
  FROM &quot;person&quot; AS &quot;person_1&quot;
  WHERE (&quot;person_1&quot;.&quot;year_of_birth&quot; BETWEEN 1930 AND 1940)
) AS &quot;person_2&quot;
JOIN (
  SELECT &quot;location_1&quot;.&quot;location_id&quot;
  FROM &quot;location&quot; AS &quot;location_1&quot;
  WHERE (&quot;location_1&quot;.&quot;state&quot; = 'IL')
) AS &quot;location_2&quot; ON (&quot;person_2&quot;.&quot;location_id&quot; = &quot;location_2&quot;.&quot;location_id&quot;)
LEFT JOIN (
  SELECT
    max(&quot;visit_occurrence_1&quot;.&quot;visit_start_date&quot;) AS &quot;max&quot;,
    &quot;visit_occurrence_1&quot;.&quot;person_id&quot;
  FROM &quot;visit_occurrence&quot; AS &quot;visit_occurrence_1&quot;
  GROUP BY &quot;visit_occurrence_1&quot;.&quot;person_id&quot;
) AS &quot;visit_group_1&quot; ON (&quot;person_2&quot;.&quot;person_id&quot; = &quot;visit_group_1&quot;.&quot;person_id&quot;)"><pre><span class="pl-k">SELECT</span>
  <span class="pl-s"><span class="pl-pds">"</span>person_2<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>person_id<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>visit_group_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>max<span class="pl-pds">"</span></span> <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>latest_visit_date<span class="pl-pds">"</span></span>
<span class="pl-k">FROM</span> (
  <span class="pl-k">SELECT</span>
    <span class="pl-s"><span class="pl-pds">"</span>person_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>person_id<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>person_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>location_id<span class="pl-pds">"</span></span>
  <span class="pl-k">FROM</span> <span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span> <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>person_1<span class="pl-pds">"</span></span>
  <span class="pl-k">WHERE</span> (<span class="pl-s"><span class="pl-pds">"</span>person_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>year_of_birth<span class="pl-pds">"</span></span> BETWEEN <span class="pl-c1">1930</span> <span class="pl-k">AND</span> <span class="pl-c1">1940</span>)
) <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>person_2<span class="pl-pds">"</span></span>
<span class="pl-k">JOIN</span> (
  <span class="pl-k">SELECT</span> <span class="pl-s"><span class="pl-pds">"</span>location_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>location_id<span class="pl-pds">"</span></span>
  <span class="pl-k">FROM</span> <span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span> <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>location_1<span class="pl-pds">"</span></span>
  <span class="pl-k">WHERE</span> (<span class="pl-s"><span class="pl-pds">"</span>location_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>IL<span class="pl-pds">'</span></span>)
) <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>location_2<span class="pl-pds">"</span></span> <span class="pl-k">ON</span> (<span class="pl-s"><span class="pl-pds">"</span>person_2<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>location_id<span class="pl-pds">"</span></span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>location_2<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>location_id<span class="pl-pds">"</span></span>)
<span class="pl-k">LEFT JOIN</span> (
  <span class="pl-k">SELECT</span>
    <span class="pl-c1">max</span>(<span class="pl-s"><span class="pl-pds">"</span>visit_occurrence_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>visit_start_date<span class="pl-pds">"</span></span>) <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>max<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>visit_occurrence_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>person_id<span class="pl-pds">"</span></span>
  <span class="pl-k">FROM</span> <span class="pl-s"><span class="pl-pds">"</span>visit_occurrence<span class="pl-pds">"</span></span> <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>visit_occurrence_1<span class="pl-pds">"</span></span>
  <span class="pl-k">GROUP BY</span> <span class="pl-s"><span class="pl-pds">"</span>visit_occurrence_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>person_id<span class="pl-pds">"</span></span>
) <span class="pl-k">AS</span> <span class="pl-s"><span class="pl-pds">"</span>visit_group_1<span class="pl-pds">"</span></span> <span class="pl-k">ON</span> (<span class="pl-s"><span class="pl-pds">"</span>person_2<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>person_id<span class="pl-pds">"</span></span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>visit_group_1<span class="pl-pds">"</span></span>.<span class="pl-s"><span class="pl-pds">"</span>person_id<span class="pl-pds">"</span></span>)</pre></div>
</details>
<p dir="auto">With FunSQL, SQL clauses such as <code>FROM</code>, <code>WHERE</code>, and <code>JOIN</code> are represented by
invocations of <code>From</code>, <code>Where</code>, and <code>Join</code> connected together using the pipe
(<code>|&gt;</code>) operator.  Note the absence of a FunSQL counterpart to nested <code>SELECT</code>
clauses; when necessary, FunSQL automatically adds nested subqueries and
threads through them column references and aggregate expressions.</p>
<p dir="auto">Scalar expressions are straightforward: <code>Fun.between</code> and <code>.==</code> is how FunSQL
represents SQL functions and operators; <code>Agg.max</code> is a notation for aggregate
functions; <code>Get.person_id</code> is a reference to a column; <code>Get.location.person_id</code>
refers to a column fenced by <code>As(:location)</code>.</p>
<p dir="auto">Notably, FunSQL notation does not rely on macros or anonymous functions as they
hinder modular query construction.  FunSQL queries and their intermediate
components are first-class objects that could be constructed independently,
passed around as values, and freely composed together.</p>
</article></div>