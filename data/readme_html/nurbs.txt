<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nurbs" class="anchor" aria-hidden="true" href="#nurbs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NURBS</h1>
<p><a href="https://travis-ci.org/TheBB/NURBS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9e49ca9fd22321c11818f07962372da55e749737/68747470733a2f2f7472617669732d63692e6f72672f54686542422f4e555242532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/TheBB/NURBS.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>This package does not support the latest Julia release version (0.3).  You need to use the 0.4
development version.</strong></p>
<p><em>NURBS.jl</em> is a Julia package for manipulating NURBS objects (curves, surfaces, volumes, etc.)  This
includes B-Splines, as a special case.  It involves no external dependencies.</p>
<p>This is written mostly as a way to teach myself Julia.  Other packages provide similar functionality:</p>
<ul>
<li><a href="https://github.com/gusl/BSplines.jl">BSplines</a> by gusl. Failing tests as of the time of writing.</li>
<li><a href="https://github.com/kbarbary/Dierckx.jl">Dierckx</a> by kbarbary. Has external dependencies.</li>
<li><a href="https://github.com/timholy/Grid.jl">Grid</a> by timholy. Only deals with uniformly spaced splines.</li>
<li><a href="https://github.com/tlycken/Interpolations.jl">Interpolations</a> by tlycken. A continuation of <em>Grid</em>.</li>
</ul>
<p><em>NURBS.jl</em> intends to provide a common framework objects of both spline and NURBS types, with no
external dependencies.</p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Status</h2>
<p>The package is currently very early in development.  See below for what is implemented.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-creating-basis-objects" class="anchor" aria-hidden="true" href="#creating-basis-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating basis objects</h3>
<p>Import <code>NURBS.Bases</code>.  The two bases currently implemented are <code>BSplineBasis</code> and <code>NURBSBasis</code>, both
subtypes of <code>Basis1D</code>.</p>
<p>Instantiate a <code>BSplineBasis</code> with a knot vector and a given order:</p>
<div class="highlight highlight-source-julia"><pre>basis <span class="pl-k">=</span> <span class="pl-c1">BSplineBasis</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>], <span class="pl-c1">4</span>)</pre></div>
<p>Note that the order is one higher than the polynomial degree of the basis functions.  An order 4
basis is cubic.  The constructor will create repeated knots at the endpoints automatically.  Pass
<code>extend=false</code> as a keyword argument if you don't want this.</p>
<p>You can also create a uniform basis more easily.</p>
<div class="highlight highlight-source-julia"><pre>basis <span class="pl-k">=</span> <span class="pl-c1">BSplineBasis</span>(lower, upper, nelements, order)
    <span class="pl-c"><span class="pl-c">#</span> Equivalent to</span>
    <span class="pl-c"><span class="pl-c">#</span> basis = BSplineBasis(linspace(lower, upper, nelements+1), order)</span></pre></div>
<p>Note that, unlike <code>linspace</code>, this constructor expects the number of <em>elements</em> (intervals), not the
number of <em>points</em>.</p>
<p>A NURBS basis is instantiated from a B-Spline basis and a vector of weights, one for each basis
function.</p>
<div class="highlight highlight-source-julia"><pre>nbasis <span class="pl-k">=</span> <span class="pl-c1">NURBSBasis</span>(bbasis, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-k">...</span>])</pre></div>
<h3><a id="user-content-using-basis-objects" class="anchor" aria-hidden="true" href="#using-basis-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using basis objects</h3>
<ul>
<li><code>length</code> and <code>size</code> give the basis dimensions, much like how they work with arrays.  Note that
since only one-dimensional bases are implemented currently, you will always have <code>size(basis) == (length(basis),)</code>.</li>
<li><code>domain</code> gives the interval on which a basis is supported as an <code>Interval</code> object which supports
the operators <code>in</code>, <code>==</code>, ⊆, ⊈ and ⊊, but <em>not</em> iteration.</li>
<li><code>degree</code> gives the polynomial degree of basis functions.</li>
<li><code>nderivs</code> gives the number of supported derivatives for a basis (this should be equal to the
degree for B-Splines).</li>
<li><code>deriv</code> returns a <em>new</em> basis object whose functions are the derivatives of those in the original,
provided the original object supports differentiation (<code>nderivs()</code> &gt; 0).  Differentiate by
multiple orders with <code>deriv(basis, n)</code>.</li>
<li>You can also index a basis object to obtain a basis function.  Basis functions support the
<code>domain</code>, <code>degree</code> and <code>deriv</code> operations.</li>
</ul>
<h3><a id="user-content-evaluating-basis-functions" class="anchor" aria-hidden="true" href="#evaluating-basis-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Evaluating basis functions</h3>
<p><em>NURBS.jl</em> basis and basis function objects make use of Julia's call overloading, which is present
in 0.4 but not in earlier version.  For this reason, <em>NURBS.jl</em> will not work on Julia 0.3.</p>
<p>Evaluation at a single point (e.g. <code>basis(1)</code>) will return a tuple <code>(vals, idxs)</code>, where <code>vals</code> is a
vector of basis function values at that point, and <code>idxs</code> is a range denoting which basis functions
are supported there.  Only the supported basis functions are actually evaluated, although this
doesn't mean they cannot be zero there!</p>
<p>You can evaluate a single basis function at a single point, which will return a <code>Float64</code>.</p>
<p>Evaluation at multiple points will return, for a basis, an array of tuples, or for a basis function,
an array of floats.</p>
<p>You can also evaluate a basis with coefficients.  Coefficients are stored either in a vector of size
<code>length(basis)</code> or a matrix of size <code>length(basis)</code> × <em>d</em>, where <em>d</em> is the dimension of the
surrounding space.  Calls to <code>basis(pt, coeffs)</code> will return a float or a 1×_d_-dimensional matrix,
while calls to <code>basis(pts, coeffs)</code> will return a vector or a matrix.</p>
<p>(This may change when I decide it is more convenient to do something else.)</p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<p>The unit circle in NURBS form.  See the
<a href="http://en.wikipedia.org/wiki/Non-uniform_rational_B-spline#Example:_a_circle" rel="nofollow">Wikipedia article</a>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NURBS<span class="pl-k">.</span>Bases

julia<span class="pl-k">&gt;</span> knots <span class="pl-k">=</span> [<span class="pl-c1">0</span>, pi<span class="pl-k">/</span><span class="pl-c1">2</span>, pi<span class="pl-k">/</span><span class="pl-c1">2</span>, pi, pi, <span class="pl-c1">3</span>pi<span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">3</span>pi<span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>pi];

julia<span class="pl-k">&gt;</span> bsplines <span class="pl-k">=</span> <span class="pl-c1">BSplineBasis</span>(knots, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>) <span class="pl-k">/</span> <span class="pl-c1">2</span>;

julia<span class="pl-k">&gt;</span> weights <span class="pl-k">=</span> [<span class="pl-c1">1</span>, t, <span class="pl-c1">1</span>, t, <span class="pl-c1">1</span>, t, <span class="pl-c1">1</span>, t, <span class="pl-c1">1</span>];

julia<span class="pl-k">&gt;</span> nurbs <span class="pl-k">=</span> <span class="pl-c1">NURBSBasis</span>(bsplines, weights);

julia<span class="pl-k">&gt;</span> coeffs <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-c1">1</span> <span class="pl-c1">0</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> p <span class="pl-k">in</span> <span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>pi, <span class="pl-c1">9</span>) <span class="pl-c1">@show</span> <span class="pl-c1">nurbs</span>(p, coeffs) <span class="pl-k">end</span>
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-c1">0.7071067811865476</span> <span class="pl-c1">0.7071067811865476</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.7071067811865476</span> <span class="pl-c1">0.7071067811865476</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.7071067811865476</span> <span class="pl-k">-</span><span class="pl-c1">0.7071067811865476</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-c1">0.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-c1">0.7071067811865476</span> <span class="pl-k">-</span><span class="pl-c1">0.7071067811865476</span>]
<span class="pl-en">nurbs</span>(p,coeffs) <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>]

julia<span class="pl-k">&gt;</span> points <span class="pl-k">=</span> <span class="pl-c1">nurbs</span>(<span class="pl-c1">linspace</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>pi, <span class="pl-c1">1000</span>), coeffs);

julia<span class="pl-k">&gt;</span> (min, max) <span class="pl-k">=</span> <span class="pl-c1">extrema</span>(<span class="pl-c1">sum</span>(points <span class="pl-k">.^</span> <span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
(<span class="pl-c1">0.9999999999999997</span>,<span class="pl-c1">1.0000000000000004</span>)</pre></div>
</article></div>