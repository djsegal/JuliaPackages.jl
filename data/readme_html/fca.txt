<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fcajl" class="anchor" aria-hidden="true" href="#fcajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FCA.jl</h1>
<p><a href="https://doi.org/10.5281/zenodo.2655935" rel="nofollow"><img src="https://camo.githubusercontent.com/e10a317740d4ae90082e53079c512cee9dc9c0a1e095183d6b3dfa0260037fe4/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e323635353933352e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.2655935.svg" style="max-width:100%;"></a></p>
<p>FCA.jl is a package for <a href="https://julialang.org/" rel="nofollow">julia</a> implementing <a href="https://ieeexplore.ieee.org/document/7868999" rel="nofollow">free component analysis</a>, which separates freely-independent random matrices out of their additive mixture.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package has not been registered in <code>METADATA.jl</code> and can be installed with <code>Pkg.clone</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Pkg.clone(&quot;https://github.com/lingluanwh/FCA.jl&quot;)
"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/lingluanwh/FCA.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>A typical example of the usage of fca.jl is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# separate freely independent rectangular random matrices out of their additive mixture
using FCA, LinearAlgebra

# generate freely two freely independent rectangular random matrices X1 and X2
N, M = 300, 500
X1 = randn(N, M) / sqrt(M)
U, V = Matrix(qr(randn(N,N)).Q), Matrix(qr(randn(M,M)).Q)
D = [Diagonal((collect(range(1,stop = 0,length = N)) .- 1).^4) zeros(N, M - N)]
X2 = U*D*V'
X = [X1, X2];

# mix X1, X2 linearly
A = randn(2,2) # mixing matrix
Z = A*X

# use freecf to recover mixing matrix and free components (up to permutation and rescaling)
Aest, Xest = freecf(Z; mat = &quot;rec&quot;) # &quot;rec&quot; tells the function that we are dealing with the rectangular matrices

# Aest recover A upto column permutation and column rescaling.
@show pinv(Aest)*A # their product should approximate a diagonal matrix
"><pre><span class="pl-c"><span class="pl-c">#</span> separate freely independent rectangular random matrices out of their additive mixture</span>
<span class="pl-k">using</span> FCA, LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> generate freely two freely independent rectangular random matrices X1 and X2</span>
N, M <span class="pl-k">=</span> <span class="pl-c1">300</span>, <span class="pl-c1">500</span>
X1 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N, M) <span class="pl-k">/</span> <span class="pl-c1">sqrt</span>(M)
U, V <span class="pl-k">=</span> <span class="pl-c1">Matrix</span>(<span class="pl-c1">qr</span>(<span class="pl-c1">randn</span>(N,N))<span class="pl-k">.</span>Q), <span class="pl-c1">Matrix</span>(<span class="pl-c1">qr</span>(<span class="pl-c1">randn</span>(M,M))<span class="pl-k">.</span>Q)
D <span class="pl-k">=</span> [<span class="pl-c1">Diagonal</span>((<span class="pl-c1">collect</span>(<span class="pl-c1">range</span>(<span class="pl-c1">1</span>,stop <span class="pl-k">=</span> <span class="pl-c1">0</span>,length <span class="pl-k">=</span> N)) <span class="pl-k">.-</span> <span class="pl-c1">1</span>)<span class="pl-k">.^</span><span class="pl-c1">4</span>) <span class="pl-c1">zeros</span>(N, M <span class="pl-k">-</span> N)]
X2 <span class="pl-k">=</span> U<span class="pl-k">*</span>D<span class="pl-k">*</span>V<span class="pl-k">'</span>
X <span class="pl-k">=</span> [X1, X2];

<span class="pl-c"><span class="pl-c">#</span> mix X1, X2 linearly</span>
A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> mixing matrix</span>
Z <span class="pl-k">=</span> A<span class="pl-k">*</span>X

<span class="pl-c"><span class="pl-c">#</span> use freecf to recover mixing matrix and free components (up to permutation and rescaling)</span>
Aest, Xest <span class="pl-k">=</span> <span class="pl-c1">freecf</span>(Z; mat <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>rec<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> "rec" tells the function that we are dealing with the rectangular matrices</span>

<span class="pl-c"><span class="pl-c">#</span> Aest recover A upto column permutation and column rescaling.</span>
<span class="pl-c1">@show</span> <span class="pl-c1">pinv</span>(Aest)<span class="pl-k">*</span>A <span class="pl-c"><span class="pl-c">#</span> their product should approximate a diagonal matrix</span></pre></div>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>This package is provided as is under the MIT License.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>Hao Wu</p>
<p><a href="mailto:lingluan@umich.edu">lingluan@umich.edu</a></p>
<p>University of Michigan, Department of Mathematics</p>
</article></div>