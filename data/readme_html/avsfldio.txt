<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-avsfldio" class="anchor" aria-hidden="true" href="#avsfldio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AVSfldIO</h1>
<p dir="auto"><a href="https://github.com/JuliaIO/AVSfldIO.jl/actions"><img src="https://github.com/JuliaIO/AVSfldIO.jl/workflows/Unit%20test/badge.svg" alt="action status" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/A/AVSfldIO.html" rel="nofollow"><img src="https://camo.githubusercontent.com/a9eb17aceb07a1d91f7f3464b7934ad4e7f6d2ed4c24ffee0939fbab679e3970/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f412f415653666c64494f2e737667" alt="pkgeval status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/A/AVSfldIO.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/JuliaIO/AVSfldIO.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/8c85b61a18bdd56db3ab15e1b74d0f99c9a4ed3e546fddc9b5250ab7cedc5282/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961494f2f415653666c64494f2e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov" data-canonical-src="https://codecov.io/github/JuliaIO/AVSfldIO.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a href="LICENSE"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="license" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://JuliaIO.github.io/AVSfldIO.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaIO.github.io/AVSfldIO.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/JuliaIO/AVSfldIO.jl.git">https://github.com/JuliaIO/AVSfldIO.jl.git</a></p>
<p dir="auto">File IO for AVS format "field" data files
with extension <code>.fld</code>
for the
<a href="https://julialang.org" rel="nofollow">Julia language</a>,
in conjunction with the
<a href="https://github.com/JuliaIO/FileIO.jl">FileIO package</a>.
This data format supports N-dimensional arrays of real numbers.</p>
<h2 dir="auto"><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods</h2>
<p dir="auto">Following the
<a href="https://juliaio.github.io/FileIO.jl/stable/implementing" rel="nofollow">FileIO API</a>,
this package provides (but does not export) methods</p>
<ul dir="auto">
<li><code>AVSfldIO.load(filename)</code></li>
<li><code>AVSfldIO.save(filename, data)</code></li>
</ul>
<p dir="auto">It does export the following methods:</p>
<ul dir="auto">
<li><code>header, is_external_file, fid = fld_open(file ; dir="", chat=false)</code></li>
<li><code>header = fld_header(file::String ; dir="", chat=false)</code></li>
<li><code>data = fld_read(file::String ; dir="", chat=false)</code></li>
<li><code>fld_write(file, data ; kwargs...)</code></li>
</ul>
<p dir="auto">Use <code>chat=true</code> for verbose debugging output.
Use <code>dir=somepath</code> to prepend a path to <code>file</code>.
See docstrings for more details.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Most users will simply use the <code>FileIO</code> <code>load</code> and <code>save</code> methods
as follows.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FileIO # need version ≥ 1.9
data1 = rand(6,7,8) # random 3D data
file = &quot;test.fld&quot;
save(file, data1) # will throw error if the file exists already
data2 = load(file)
@assert data1 == data2"><pre><span class="pl-k">using</span> FileIO <span class="pl-c"><span class="pl-c">#</span> need version ≥ 1.9</span>
data1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>) <span class="pl-c"><span class="pl-c">#</span> random 3D data</span>
file <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test.fld<span class="pl-pds">"</span></span>
<span class="pl-c1">save</span>(file, data1) <span class="pl-c"><span class="pl-c">#</span> will throw error if the file exists already</span>
data2 <span class="pl-k">=</span> <span class="pl-c1">load</span>(file)
<span class="pl-c1">@assert</span> data1 <span class="pl-k">==</span> data2</pre></div>
<h2 dir="auto"><a id="user-content-file-format-overview" class="anchor" aria-hidden="true" href="#file-format-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>File format overview</h2>
<p dir="auto">The AVS <code>.fld</code> data format
comes in two flavors.</p>
<p dir="auto">In the AVS "internal" format:</p>
<ul dir="auto">
<li>an ASCII header is at the top of the file,</li>
<li>the header is followed by two "form-feed" (<code>^L</code>) characters,</li>
<li>which are then followed by the data in binary format.</li>
</ul>
<p dir="auto">In the AVS "external" format,
the header and the data are in separate files,
and the ASCII header file includes the name of the data file.
The data file can contain either ASCII or binary data.</p>
<h3 dir="auto"><a id="user-content-avs-internal-format" class="anchor" aria-hidden="true" href="#avs-internal-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AVS internal format</h3>
<p dir="auto">For a <code>128 × 64</code> array
(first dimension varies fastest)
consisting of short integers
(<code>Int16</code> in Julia),
the format of the AVS internal header would be:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# AVS field file
ndim=2
dim1=128
dim2=64
nspace=2
veclen=1
data=short
field=uniform"><pre class="notranslate"><code># AVS field file
ndim=2
dim1=128
dim2=64
nspace=2
veclen=1
data=short
field=uniform
</code></pre></div>
<p dir="auto">followed by the two form feeds,
and then the <code>128 × 64</code> short integers
in binary format.</p>
<p dir="auto">For a 3D array of size <code>128 × 64 × 20</code>
of 32-bit floating point numbers
with the host CPU endianness,
the header is</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# AVS field file
ndim=3
dim1=128
dim2=64
dim3=20
nspace=3
veclen=1
data=float
field=uniform"><pre class="notranslate"><code># AVS field file
ndim=3
dim1=128
dim2=64
dim3=20
nspace=3
veclen=1
data=float
field=uniform
</code></pre></div>
<p dir="auto">The <code>save</code> method in this library
writes to the AVS internal format by default,
and the filename must end with the extension <code>.fld</code>.</p>
<h3 dir="auto"><a id="user-content-avs-external-format" class="anchor" aria-hidden="true" href="#avs-external-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AVS external format</h3>
<p dir="auto">Now suppose you have stored the above array data
in a binary file named, say, <code>sino.dat</code>
with some home-brew header in it that consists
of, say, 1999 bytes.
And suppose you do not want to convert from home-brew format
to AVS internal format.
Then you can use the AVS external format
by creating an ASCII file named, say,
<code>sino.fld</code>
containing:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# AVS field file
ndim=2
dim1=128
dim2=64
nspace=2
veclen=1
data=short
field=uniform
variable 1 file=sino.dat filetype=binary skip=1999"><pre class="notranslate"><code># AVS field file
ndim=2
dim1=128
dim2=64
nspace=2
veclen=1
data=short
field=uniform
variable 1 file=sino.dat filetype=binary skip=1999
</code></pre></div>
<p dir="auto">You can add additional comments
to these headers
using lines that begin with <code>#</code>.
The <code>skip=1999</code> option
indicates that there is a <code>1999</code> byte header to be skipped
before reading the binary data.</p>
<p dir="auto">This format does not allow for additional headers buried within the data.</p>
<p dir="auto">If there is no binary header,
then you can omit the <code>skip=0</code> line altogether.
If your data is in ASCII format (hopefully not),
then replace
<code>filetype=binary</code>
with
<code>filetype=ascii</code>.
However,
for ASCII data,
the <code>skip=</code> option
refers to ASCII entries, not bytes.</p>
<p dir="auto">See table below
for supported types in the
<code>data=...</code>
line.</p>
<p dir="auto">The complete AVS <code>.fld</code> format
includes other features
that almost certainly are not supported
by this IO library.</p>
<p dir="auto">This library supports
some extensions that are not standard AVS
but are very handy,
like a single 3D header file
that points to multiple 2D files
that get treated as a single entity.
More documentation coming on request.</p>
<h2 dir="auto"><a id="user-content-magic-bytes" class="anchor" aria-hidden="true" href="#magic-bytes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Magic bytes</h2>
<p dir="auto">It is convention that an AVS <code>.fld</code> file begins with
<code># AVS</code> in the first line,
as illustrated in the examples above,
so the interface to this library
in
<a href="https://github.com/JuliaIO/FileIO.jl">FileIO.jl</a>
uses that 5-byte string
as the
<a href="https://en.wikipedia.org/wiki/List_of_file_signatures" rel="nofollow">"magic bytes"</a>
or
<a href="https://en.wikipedia.org/wiki/File_format#Magic_number" rel="nofollow">"magic number"</a>
for this file type.
If you have a file that does not have that string as the start of its header,
then simply add it with an editor
(including a newline at the end).</p>
<h2 dir="auto"><a id="user-content-data-types" class="anchor" aria-hidden="true" href="#data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Data types</h2>
<p dir="auto">The following table shows the supported options
for the <code>data=</code> field in the header.
The options that end in <code>_le</code> or <code>_be</code> or <code>_sun</code> are "extensions"
designed for portability, because options like <code>int</code>
are not portable between hosts with different
<a href="https://en.wikipedia.org/wiki/Endianness" rel="nofollow">endianness</a>.</p>
<table>
<thead>
<tr>
<th align="left">format</th>
<th align="left">Julia type</th>
<th align="center">endian</th>
<th align="center">bytes</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>byte</code></td>
<td align="left"><code>UInt8</code></td>
<td align="center">n/a</td>
<td align="center"><code>1</code></td>
</tr>
<tr>
<td align="left"><code>short_be</code></td>
<td align="left"><code>UInt16</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>2</code></td>
</tr>
<tr>
<td align="left"><code>short_sun</code></td>
<td align="left"><code>UInt16</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>2</code></td>
</tr>
<tr>
<td align="left"><code>xdr_short</code></td>
<td align="left"><code>UInt16</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>2</code></td>
</tr>
<tr>
<td align="left"><code>short_le</code></td>
<td align="left"><code>UInt16</code></td>
<td align="center"><code>le</code></td>
<td align="center"><code>2</code></td>
</tr>
<tr>
<td align="left"><code>int</code></td>
<td align="left"><code>Int32</code></td>
<td align="center"><code>?</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>int_le</code></td>
<td align="left"><code>Int32</code></td>
<td align="center"><code>le</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>int_be</code></td>
<td align="left"><code>Int32</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>xdr_int</code></td>
<td align="left"><code>Int32</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>float</code></td>
<td align="left"><code>Float32</code></td>
<td align="center"><code>?</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>float_le</code></td>
<td align="left"><code>Float32</code></td>
<td align="center"><code>le</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>float_be</code></td>
<td align="left"><code>Float32</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>xdr_float</code></td>
<td align="left"><code>Float32</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>4</code></td>
</tr>
<tr>
<td align="left"><code>double</code></td>
<td align="left"><code>Float64</code></td>
<td align="center"><code>?</code></td>
<td align="center"><code>8</code></td>
</tr>
<tr>
<td align="left"><code>double_le</code></td>
<td align="left"><code>Float64</code></td>
<td align="center"><code>le</code></td>
<td align="center"><code>8</code></td>
</tr>
<tr>
<td align="left"><code>double_be</code></td>
<td align="left"><code>Float64</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>8</code></td>
</tr>
<tr>
<td align="left"><code>xdr_double</code></td>
<td align="left"><code>Float64</code></td>
<td align="center"><code>be</code></td>
<td align="center"><code>8</code></td>
</tr>
</tbody>
</table>
<p dir="auto">Entries with <code>?</code> are native to the host CPU and thus not portable.
The <code>byte</code> format is unsigned 8 bits.</p>
<p dir="auto">The following table shows the saved output <code>data=</code> field
for various input Julia data fields,
assuming little endian (<code>:le</code>) default
to <code>AVSfldIO.fld_write</code>.</p>
<table>
<thead>
<tr>
<th align="left">Julia type</th>
<th align="left"><code>data</code></th>
<th align="left">note</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>Bool</code></td>
<td align="left"><code>byte</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>UInt8</code></td>
<td align="left"><code>byte</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Int16</code></td>
<td align="left"><code>short_le</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Int32</code></td>
<td align="left"><code>int_le</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Int64</code></td>
<td align="left"><code>int_le</code></td>
<td align="left">(downgraded)</td>
</tr>
<tr>
<td align="left"><code>Float16</code></td>
<td align="left"><code>float_le</code></td>
<td align="left">(upgraded)</td>
</tr>
<tr>
<td align="left"><code>Float32</code></td>
<td align="left"><code>float_le</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Float64</code></td>
<td align="left"><code>double_le</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>BigFloat</code></td>
<td align="left"><code>double_le</code></td>
<td align="left">(downgraded)</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-history" class="anchor" aria-hidden="true" href="#history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>History</h2>
<p dir="auto">The "application visualization system" (AVS)
<a href="https://www.avs.com" rel="nofollow">https://www.avs.com</a>
was an interactive graphics and computation framework
developed in the early 1990s
and used widely in the medical imaging community.
See the article at <a href="https://doi.org/10.1109/38.31462" rel="nofollow">https://doi.org/10.1109/38.31462</a> for an overview.</p>
<p dir="auto">AVS data files have the extension <code>.fld</code>
and many software frameworks provide file IO support
for this format.</p>
<ul dir="auto">
<li><a href="https://doi.org/10.1109/38.31462" rel="nofollow">https://doi.org/10.1109/38.31462</a></li>
<li><a href="https://www.ks.uiuc.edu/Research/vmd/plugins/molfile/avsplugin.html" rel="nofollow">https://www.ks.uiuc.edu/Research/vmd/plugins/molfile/avsplugin.html</a></li>
<li><a href="https://dav.lbl.gov/archive/NERSC/Software/express/help6.1/help/reference/dvmac/Field_Fi.htm" rel="nofollow">https://dav.lbl.gov/archive/NERSC/Software/express/help6.1/help/reference/dvmac/Field_Fi.htm</a></li>
<li><a href="http://paulbourke.net/dataformats/field/" rel="nofollow">http://paulbourke.net/dataformats/field/</a></li>
<li><a href="http://surferhelp.goldensoftware.com/subsys/subsys_avs_field_file_desc.htm" rel="nofollow">http://surferhelp.goldensoftware.com/subsys/subsys_avs_field_file_desc.htm</a></li>
<li><a href="https://lanl.github.io/LaGriT/pages/docs/read_avs.html" rel="nofollow">https://lanl.github.io/LaGriT/pages/docs/read_avs.html</a></li>
</ul>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<p dir="auto"><a href="https://web.eecs.umich.edu/~fessler" rel="nofollow">Jeff Fessler</a>
and his group at the University of Michigan,
and contributors</p>


</article></div>