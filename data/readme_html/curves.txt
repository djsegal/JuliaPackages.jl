<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/lungben/Curves.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/70584fb4e44dcf86048e72331366edad8e76f13fe440e60d5a5a6b4826fd504b/68747470733a2f2f7472617669732d63692e636f6d2f6c756e6762656e2f4375727665732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/lungben/Curves.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/lungben/Curves.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b7113631bd0d230a9b4d921bea06eae1891c4ae96a00c56a31fbbf76884c8ab6/68747470733a2f2f636f6465636f762e696f2f67682f6c756e6762656e2f4375727665732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lungben/Curves.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-curves" class="anchor" aria-hidden="true" href="#curves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Curves</h1>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add Curves&quot;
"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add Curves<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>A <code>Curve</code> in this package is essentially a collection of points <code>(x, y)</code>, together with an interpolation and extrapolation method.</p>
<p><code>Curve</code> objects have a number of standard calculation function defined (like addition, multiplication, logarithm), thus they can be used in algebraic expressions analogue to scalars.</p>
<h3><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it Works</h3>
<p>Operations on Curves alone (e.g. <code>exp(c)</code>, <code>log(c)</code>) or with scalars (e.g. <code>c+1</code> or <code>2c</code>) are defined point-wise on the y-values of the Curve.</p>
<p>Operations between 2 Curve objects (noted as <code>c1</code> and <code>c2</code>) are defined as follows:</p>
<ol>
<li>Interpolate <code>c1</code> to the x-values of <code>c2</code>.</li>
<li>Do the operation (e.g. adding) on the y-values of <code>c2</code> and the interpolated y-values of c1.</li>
<li>Repeat steps 1. and 2., but interpolate <code>c2</code> to the x-values of <code>c1</code>.</li>
<li>Combine the results of both interpolations and create a new Curve object for the result.</li>
</ol>
<p>Technically, this package is based on <a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a>.
Support of log-interpolation on both axis is added by this package.</p>
<p><code>Curve</code> objects are defined to be immutable, thus every operation creates a new <code>Curve</code> object as output.</p>
<h2><a id="user-content-tenors" class="anchor" aria-hidden="true" href="#tenors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tenors</h2>
<p>In financial use cases, the x-axis of curves is often given in maturity tenors, e.g. 1W or 3M.
The <code>Tenor</code> type is introduced to support such a notation for the x-axis of curves.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = Tenor.((&quot;1D&quot;, &quot;3W&quot;, &quot;1M&quot;, &quot;10y&quot;, &quot;12m&quot;))
@assert t == (Tenor(Curves.TDays, 1), Tenor(Curves.TWeeks, 3), Tenor(Curves.TMonths, 1),
    Tenor(Curves.TYears, 10), Tenor(Curves.TYears, 1))
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">Tenor</span>.((<span class="pl-s"><span class="pl-pds">"</span>1D<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>3W<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>1M<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>10y<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>12m<span class="pl-pds">"</span></span>))
<span class="pl-c1">@assert</span> t <span class="pl-k">==</span> (<span class="pl-c1">Tenor</span>(Curves<span class="pl-k">.</span>TDays, <span class="pl-c1">1</span>), <span class="pl-c1">Tenor</span>(Curves<span class="pl-k">.</span>TWeeks, <span class="pl-c1">3</span>), <span class="pl-c1">Tenor</span>(Curves<span class="pl-k">.</span>TMonths, <span class="pl-c1">1</span>),
    <span class="pl-c1">Tenor</span>(Curves<span class="pl-k">.</span>TYears, <span class="pl-c1">10</span>), <span class="pl-c1">Tenor</span>(Curves<span class="pl-k">.</span>TYears, <span class="pl-c1">1</span>))</pre></div>
<p>Note that the tenor <code>12M</code> is automatically converted to <code>1Y</code> to avoid ambiguities.</p>
<p>Tenors can be directly used in Curves:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="curve_from_tenors = Curve([&quot;1D&quot;, &quot;3W&quot;, &quot;1M&quot;, &quot;10y&quot;], [0.5, 0.7, 0.75, 0.83])
val = interpolate(&quot;1W&quot;, curve_from_tenors)
"><pre>curve_from_tenors <span class="pl-k">=</span> <span class="pl-c1">Curve</span>([<span class="pl-s"><span class="pl-pds">"</span>1D<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>3W<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>1M<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>10y<span class="pl-pds">"</span></span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">0.75</span>, <span class="pl-c1">0.83</span>])
val <span class="pl-k">=</span> <span class="pl-c1">interpolate</span>(<span class="pl-s"><span class="pl-pds">"</span>1W<span class="pl-pds">"</span></span>, curve_from_tenors)</pre></div>
<p>As a shortcut for creating tenor objects, a string macro is provided:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert t&quot;1W&quot; == Tenor(&quot;1W&quot;)
"><pre><span class="pl-c1">@assert</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">t</span>"</span>1W<span class="pl-pds">"</span></span> <span class="pl-k">==</span> <span class="pl-c1">Tenor</span>(<span class="pl-s"><span class="pl-pds">"</span>1W<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-use-case" class="anchor" aria-hidden="true" href="#use-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use Case</h3>
<p>The use case I had in mind was interest rate / FX curves for mathematical finance applications.
The <code>Curve</code> objects make it easier to shift market data, e.g. for sensitivity or scenario P&amp;L calculation, or to calculate such shift sizes based on market data time series.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Curves
using Plots

# construct zero interest rate curve
c_zero_base = Curve([&quot;2D&quot;, &quot;1w&quot;, &quot;1M&quot;, &quot;3M&quot;, &quot;6M&quot;, &quot;12M&quot;], [0.5, 0.7, 0.75, 0.83, 1.1, 1.5])

# plotting - package Plots required
plot(c_zero_base.x, c_zero_base.y)

# define zero rate shifts (e.g. for stress testing or sensitivities)
c_shifts = Curve([2, 185, 360], [0.1, -0.1, 0.2])

# shift curve
c_shifted = c_zero_base + c_shifts

# calculate discount factors for the unshifted and shifted curves
c_base_df=apply((x,y) -&gt; exp(-x*y/100/365), c_zero_base, logy=true)
c_shifted_df = apply((x,y) -&gt; exp(-x*y/100/365), c_shifted, logy=true)

# calculate log-returns of discount factors
log_ret = log(c_shifted_df/c_base_df)

# apply log returns to the base curve - this should give the shifted curve back
curve_scenario = *(c_base_df, exp(log_ret), logy=true)
@assert curve_scenario ≈ c_shifted_df

plot(curve_scenario.x, curve_scenario.y)
"><pre><span class="pl-k">using</span> Curves
<span class="pl-k">using</span> Plots

<span class="pl-c"><span class="pl-c">#</span> construct zero interest rate curve</span>
c_zero_base <span class="pl-k">=</span> <span class="pl-c1">Curve</span>([<span class="pl-s"><span class="pl-pds">"</span>2D<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>1w<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>1M<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>3M<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>6M<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>12M<span class="pl-pds">"</span></span>], [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.7</span>, <span class="pl-c1">0.75</span>, <span class="pl-c1">0.83</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">1.5</span>])

<span class="pl-c"><span class="pl-c">#</span> plotting - package Plots required</span>
<span class="pl-c1">plot</span>(c_zero_base<span class="pl-k">.</span>x, c_zero_base<span class="pl-k">.</span>y)

<span class="pl-c"><span class="pl-c">#</span> define zero rate shifts (e.g. for stress testing or sensitivities)</span>
c_shifts <span class="pl-k">=</span> <span class="pl-c1">Curve</span>([<span class="pl-c1">2</span>, <span class="pl-c1">185</span>, <span class="pl-c1">360</span>], [<span class="pl-c1">0.1</span>, <span class="pl-k">-</span><span class="pl-c1">0.1</span>, <span class="pl-c1">0.2</span>])

<span class="pl-c"><span class="pl-c">#</span> shift curve</span>
c_shifted <span class="pl-k">=</span> c_zero_base <span class="pl-k">+</span> c_shifts

<span class="pl-c"><span class="pl-c">#</span> calculate discount factors for the unshifted and shifted curves</span>
c_base_df<span class="pl-k">=</span><span class="pl-c1">apply</span>((x,y) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x<span class="pl-k">*</span>y<span class="pl-k">/</span><span class="pl-c1">100</span><span class="pl-k">/</span><span class="pl-c1">365</span>), c_zero_base, logy<span class="pl-k">=</span><span class="pl-c1">true</span>)
c_shifted_df <span class="pl-k">=</span> <span class="pl-c1">apply</span>((x,y) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>x<span class="pl-k">*</span>y<span class="pl-k">/</span><span class="pl-c1">100</span><span class="pl-k">/</span><span class="pl-c1">365</span>), c_shifted, logy<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> calculate log-returns of discount factors</span>
log_ret <span class="pl-k">=</span> <span class="pl-c1">log</span>(c_shifted_df<span class="pl-k">/</span>c_base_df)

<span class="pl-c"><span class="pl-c">#</span> apply log returns to the base curve - this should give the shifted curve back</span>
curve_scenario <span class="pl-k">=</span> <span class="pl-k">*</span>(c_base_df, <span class="pl-c1">exp</span>(log_ret), logy<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">@assert</span> curve_scenario <span class="pl-k">≈</span> c_shifted_df

<span class="pl-c1">plot</span>(curve_scenario<span class="pl-k">.</span>x, curve_scenario<span class="pl-k">.</span>y)</pre></div>
<h2><a id="user-content-ideas-for-further-improvements" class="anchor" aria-hidden="true" href="#ideas-for-further-improvements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ideas for Further Improvements</h2>
<ul>
<li>Support of more operations</li>
<li>Interactions with <a href="https://github.com/pazzo83/QuantLib.jl">QuantLib.jl</a> curve objects</li>
<li>Multi-dimensional structures (especially 2d, e.g. for Volatility surfaces)</li>
</ul>
</article></div>