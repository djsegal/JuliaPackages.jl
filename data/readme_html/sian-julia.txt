<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sian-julia" class="anchor" aria-hidden="true" href="#sian-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SIAN-Julia</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/iliailmer/SIAN-Julia/workflows/SIAN%20Tests%20for%20Julia/badge.svg"><img src="https://github.com/iliailmer/SIAN-Julia/workflows/SIAN%20Tests%20for%20Julia/badge.svg" alt="SIAN Tests for Julia" style="max-width:100%;"></a></p>
<h2><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h2>
<p>The current stable version of SIAN.jl can be installed via the following command:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="&gt;] add &quot;SIAN&quot;
&gt; using SIAN
"><pre><span class="pl-k">&gt;</span>] add <span class="pl-s"><span class="pl-pds">"</span>SIAN<span class="pl-pds">"</span></span>
<span class="pl-k">&gt;</span> using SIAN</pre></div>
<p>The installation from source is possible via GitHub and SSH or HTTPS:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="&gt; ]add https://github.com/alexeyovchinnikov/SIAN-Julia.git
"><pre><span class="pl-k">&gt;</span> ]add https://github.com/alexeyovchinnikov/SIAN-Julia.git</pre></div>
<p>or</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="&gt; ]add git@github.com:alexeyovchinnikov/SIAN-Julia.git
"><pre><span class="pl-k">&gt;</span> ]add git@github.com:alexeyovchinnikov/SIAN-Julia.git</pre></div>
<h2><a id="user-content-example-getting-started" class="anchor" aria-hidden="true" href="#example-getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example: getting started</h2>
<p>In this example we would like to consider the following simple non-linear ODE system:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x1'(t) = r1 * x1(t) * (1 - x1(t) / k1 + x2(t) / k2),
x2'(t) = r2 * x2(t) * (1 - x1(t) / k1 + x2(t) / k2),
y(t) = x1(t)
"><pre><code>x1'(t) = r1 * x1(t) * (1 - x1(t) / k1 + x2(t) / k2),
x2'(t) = r2 * x2(t) * (1 - x1(t) / k1 + x2(t) / k2),
y(t) = x1(t)
</code></pre></div>
<p>To this end, we can run:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SIAN

ode = @ODEmodel(
    x1'(t) = r1 * x1(t) * (1 - x1(t) / k1 + x2(t) / k2),
    x2'(t) = r2 * x2(t) * (1 - x1(t) / k1 + x2(t) / k2),
    y(t) = x1(t)
);

output = identifiability_ode(ode, get_parameters(ode));
"><pre><span class="pl-k">using</span> SIAN

ode <span class="pl-k">=</span> <span class="pl-c1">@ODEmodel</span>(
    x1<span class="pl-k">'</span>(t) <span class="pl-k">=</span> r1 <span class="pl-k">*</span> <span class="pl-c1">x1</span>(t) <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">x1</span>(t) <span class="pl-k">/</span> k1 <span class="pl-k">+</span> <span class="pl-c1">x2</span>(t) <span class="pl-k">/</span> k2),
    x2<span class="pl-k">'</span>(t) <span class="pl-k">=</span> r2 <span class="pl-k">*</span> <span class="pl-c1">x2</span>(t) <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">x1</span>(t) <span class="pl-k">/</span> k1 <span class="pl-k">+</span> <span class="pl-c1">x2</span>(t) <span class="pl-k">/</span> k2),
    <span class="pl-en">y</span>(t) <span class="pl-k">=</span> <span class="pl-c1">x1</span>(t)
);

output <span class="pl-k">=</span> <span class="pl-c1">identifiability_ode</span>(ode, <span class="pl-c1">get_parameters</span>(ode));</pre></div>
<p>The last command prints the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Solving the problem
Constructing the maximal system
Truncating
Assessing local identifiability
Locally identifiable parameters: [r1, k1, r2, x1]
Not identifiable parameters:     [k2, x2]
Randomizing
GB computation
Remainder computation

=== Summary ===
Globally identifiable parameters:                 [x1, k1, r1, r2]
Locally but not globally identifiable parameters: []
Not identifiable parameters:                      [k2, x2]
===============
"><pre><code>Solving the problem
Constructing the maximal system
Truncating
Assessing local identifiability
Locally identifiable parameters: [r1, k1, r2, x1]
Not identifiable parameters:     [k2, x2]
Randomizing
GB computation
Remainder computation

=== Summary ===
Globally identifiable parameters:                 [x1, k1, r1, r2]
Locally but not globally identifiable parameters: []
Not identifiable parameters:                      [k2, x2]
===============
</code></pre></div>
<h2><a id="user-content-scoping" class="anchor" aria-hidden="true" href="#scoping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Scoping</h2>
<p>Once the module is imported via <code>using SIAN</code>, the following functions are available immediately via the <code>export</code> of the module: <code>@ODEmodel, identifiability_ode, get_parameters</code>.</p>
<p>Other SIAN functions are available via prefix call, such as <code>SIAN.&lt;any_function_name&gt;</code>.</p>
<h3><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h3>
<p>We recommend checking the <code>examples</code> folder to get started with using SIAN, see <a href="./examples/README.md">this readme file</a>.</p>
<h2><a id="user-content-implementation-of-sian-in-julia" class="anchor" aria-hidden="true" href="#implementation-of-sian-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation of SIAN in Julia</h2>
<p>The algorithm is based on the following papers:</p>
<ul>
<li><a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/cpa.21921" rel="nofollow">Global Identifiability of Differential Models</a> (Communications on Pure and Applied Mathematics, Volume 73, Issue 9, Pages 1831-1879, 2020.)</li>
<li><a href="https://doi.org/10.1093/bioinformatics/bty1069" rel="nofollow">SIAN: software for structural identifiability analysis of ODE models</a> (Bioinformatics, Volume 35, Issue 16, Pages 2873â€“2874, 2019)</li>
</ul>
<p>The original Maple implementation is located <a href="https://github.com/pogudingleb/SIAN">here</a>.</p>
<p>The main function "identifiability_ode" has two required arguments:</p>
<ol>
<li>an ODE model (created by the <code>@ODEmodel</code> macros)</li>
<li>array of parameters for which the identifiability analysis is requested</li>
</ol>
<p>and three optional keys:</p>
<ol>
<li><code>p</code>, which is the probability of correctness, with the default value <code>p = 0.99</code>,</li>
<li><code>p_mod</code>, which is a prime number and is the characteristic of the field over which the computation of Groebner basis will occur. If <code>p = 0</code> (the default value), the computation will be over the rational numbers. If <code>p &gt; 0</code>, then the computation will be over <code>Z/pZ</code>. The current limit for Groebner basis modular arithmetic implementation suggests that prime numbers bigger than <code>2^29 - 3</code> are not to be used. When using <code>p_mod&gt;0</code>, the same probability of correctness is <em>no longer guaranteed</em> and the program will raise a warning message in that case.</li>
<li><code>nthrds</code> is the maximal number of threads for the Groebner basis computation. The default value is 1.</li>
</ol>
<p>The function <code>get_parameters</code> has one required argument, an ODE model (created by the <code>@ODEmodel</code> macros), and one optional key, <code>initial_conditions</code>. If the key is set to <code>true</code> (the default value), then the function will return the set of all parameters and state variables. If the key is not set to <code>true</code>, then the function will return the set of all parameters.</p>
<p>The function "generate_replica" has two required arguments:</p>
<ol>
<li>an ODE model (created by the <code>@ODEmodel</code> macros)</li>
<li>an integer <code>r</code></li>
</ol>
<p>and returns the <code>r</code>-fold replica of the ODE model (the state, output, and input variables are replicated and the parameters are not replicated). This function can be used to check the <code>r</code>-experiment identifiability of the parameters.</p>
<p>The folder <code>examples/</code> contains examples of using this.</p>
<p>The folder <code>without-macros/</code> contains an earlier version on this implementation that did not use the macros.</p>
<p>If an ODE model has been entered with parameters for some of which it is desirable to further specify their values, this can be done using the <code>SetParameterValues</code> function, which accepts:</p>
<ol>
<li>an ODE model (created by the <code>@ODEmodel</code> macros)</li>
<li>a dictionary (or ordered dictionary) of values such as (taken from the <code>NFkB.jl</code> example)</li>
</ol>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="OrderedDict(

    a1 =&gt; Nemo.QQ(1, 2),   
    
    a2 =&gt; Nemo.QQ(1, 5),
    
    a3 =&gt; Nemo.QQ(1),
    
    c_1a =&gt; Nemo.QQ(5, 10^(7)),
    
    c_2a =&gt; Nemo.QQ(0),
    
    c_5a =&gt; Nemo.QQ(1, 10^(4)),
    
    c_6a =&gt; Nemo.QQ(2, 10^(5)),
    
    c1 =&gt; Nemo.QQ(5, 10^(7)),
    
    c2 =&gt; Nemo.QQ(0),
    
    c3 =&gt; Nemo.QQ(4, 10^(4)),
    
    c4 =&gt; Nemo.QQ(1, 2),
    
    kv =&gt; Nemo.QQ(5),
    
    e_1a =&gt; Nemo.QQ(5, 10^(4)),
    
    c_1c =&gt; Nemo.QQ(5, 10^(7)),
    
    c_2c =&gt; Nemo.QQ(0),
    
    c_3c =&gt; Nemo.QQ(4, 10^(4))

)
"><pre><span class="pl-c1">OrderedDict</span>(

    a1 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>),   
    
    a2 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>),
    
    a3 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>),
    
    c_1a <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">5</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">7</span>)),
    
    c_2a <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">0</span>),
    
    c_5a <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">4</span>)),
    
    c_6a <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">2</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">5</span>)),
    
    c1 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">5</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">7</span>)),
    
    c2 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">0</span>),
    
    c3 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">4</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">4</span>)),
    
    c4 <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>),
    
    kv <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">5</span>),
    
    e_1a <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">5</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">4</span>)),
    
    c_1c <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">5</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">7</span>)),
    
    c_2c <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">0</span>),
    
    c_3c <span class="pl-k">=&gt;</span> Nemo<span class="pl-k">.</span><span class="pl-c1">QQ</span>(<span class="pl-c1">4</span>, <span class="pl-c1">10</span><span class="pl-k">^</span>(<span class="pl-c1">4</span>))

)</pre></div>
<p>for instance, to specify that a1 is 1/2, etc.</p>
</article></div>