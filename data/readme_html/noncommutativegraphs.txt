<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-noncommitativegraphsjl---non-commutative-graphs-in-julia" class="anchor" aria-hidden="true" href="#noncommitativegraphsjl---non-commutative-graphs-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NoncommitativeGraphs.jl - Non-commutative graphs in Julia</h1>
<p dir="auto">This package provides support for non-commutative graphs, a quantum analogue
of graphs, as defined in Duan, Severini, Winter,
<em>Zero-error communication via quantum channels, non-commutative graphs and a quantum
Lovasz theta function</em>, <a href="https://arxiv.org/abs/1002.2514" rel="nofollow">arXiv:1002.2514</a>.</p>
<p dir="auto">Aside from a data structure for holding such graphs, we provide functions for
computing the weighted Lovasz theta function as defined in
Stahlke, <em>Weighted theta functions for non-commutative graphs</em>,
<a href="https://arxiv.org/abs/2101.00162" rel="nofollow">arXiv:2101.00162</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using NoncommutativeGraphs, Random

julia&gt; Random.seed!(0);

julia&gt; sig = [3 2; 2 3]; # S₀ algebra is M₃⊗I₂ ⊕ M₂⊗I₃

julia&gt; S = random_S0Graph(sig)
S0Graph{S0=[3 2; 2 3] S=Subspace{ComplexF64} size (12, 12) dim 83}

julia&gt; S.S0 # vertex C*-algebra
Subspace{ComplexF64} size (12, 12) dim 13

julia&gt; T = complement(S) # T = perp(S) + S₀
S0Graph{S0=[3 2; 2 3] S=Subspace{ComplexF64} size (12, 12) dim 74}

julia&gt; W = randn(ComplexF64, S.n, S.n); W = W' * W; # random weight operator

julia&gt; opt1 = dsw(S, W, eps=1e-7).λ # compute weighted theta
133.57806623525727

julia&gt; opt2 = dsw_via_complement(complement(S), W, eps=1e-7).λ # compute weighted θ via the complement graph, using theorem 29 of arxiv:2101.00162.
133.57806730600717

julia&gt; abs(opt1 - opt2) / abs(opt1 + opt2) &lt; 1e-6
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NoncommutativeGraphs, Random

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> sig <span class="pl-k">=</span> [<span class="pl-c1">3</span> <span class="pl-c1">2</span>; <span class="pl-c1">2</span> <span class="pl-c1">3</span>]; <span class="pl-c"><span class="pl-c">#</span> S₀ algebra is M₃⊗I₂ ⊕ M₂⊗I₃</span>

julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> <span class="pl-c1">random_S0Graph</span>(sig)
S0Graph{S0<span class="pl-k">=</span>[<span class="pl-c1">3</span> <span class="pl-c1">2</span>; <span class="pl-c1">2</span> <span class="pl-c1">3</span>] S<span class="pl-k">=</span>Subspace{ComplexF64} size (<span class="pl-c1">12</span>, <span class="pl-c1">12</span>) dim <span class="pl-c1">83</span>}

julia<span class="pl-k">&gt;</span> S<span class="pl-k">.</span>S0 <span class="pl-c"><span class="pl-c">#</span> vertex C*-algebra</span>
Subspace{ComplexF64} size (<span class="pl-c1">12</span>, <span class="pl-c1">12</span>) dim <span class="pl-c1">13</span>

julia<span class="pl-k">&gt;</span> T <span class="pl-k">=</span> <span class="pl-c1">complement</span>(S) <span class="pl-c"><span class="pl-c">#</span> T = perp(S) + S₀</span>
S0Graph{S0<span class="pl-k">=</span>[<span class="pl-c1">3</span> <span class="pl-c1">2</span>; <span class="pl-c1">2</span> <span class="pl-c1">3</span>] S<span class="pl-k">=</span>Subspace{ComplexF64} size (<span class="pl-c1">12</span>, <span class="pl-c1">12</span>) dim <span class="pl-c1">74</span>}

julia<span class="pl-k">&gt;</span> W <span class="pl-k">=</span> <span class="pl-c1">randn</span>(ComplexF64, S<span class="pl-k">.</span>n, S<span class="pl-k">.</span>n); W <span class="pl-k">=</span> W<span class="pl-k">'</span> <span class="pl-k">*</span> W; <span class="pl-c"><span class="pl-c">#</span> random weight operator</span>

julia<span class="pl-k">&gt;</span> opt1 <span class="pl-k">=</span> <span class="pl-c1">dsw</span>(S, W, eps<span class="pl-k">=</span><span class="pl-c1">1e-7</span>)<span class="pl-k">.</span>λ <span class="pl-c"><span class="pl-c">#</span> compute weighted theta</span>
<span class="pl-c1">133.57806623525727</span>

julia<span class="pl-k">&gt;</span> opt2 <span class="pl-k">=</span> <span class="pl-c1">dsw_via_complement</span>(<span class="pl-c1">complement</span>(S), W, eps<span class="pl-k">=</span><span class="pl-c1">1e-7</span>)<span class="pl-k">.</span>λ <span class="pl-c"><span class="pl-c">#</span> compute weighted θ via the complement graph, using theorem 29 of arxiv:2101.00162.</span>
<span class="pl-c1">133.57806730600717</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">abs</span>(opt1 <span class="pl-k">-</span> opt2) <span class="pl-k">/</span> <span class="pl-c1">abs</span>(opt1 <span class="pl-k">+</span> opt2) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-6</span>
<span class="pl-c1">true</span></pre></div>
</article></div>