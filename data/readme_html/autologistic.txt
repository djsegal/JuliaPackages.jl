<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-autologistic" class="anchor" aria-hidden="true" href="#autologistic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Autologistic</h1>
<p><a href="https://kramsretlow.github.io/Autologistic.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://kramsretlow.github.io/Autologistic.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/kramsretlow/Autologistic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/436733d5310c5be7559f4006b276b4b5d3a562c3/68747470733a2f2f7472617669732d63692e636f6d2f6b72616d737265746c6f772f4175746f6c6f6769737469632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/kramsretlow/Autologistic.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/kramsretlow/Autologistic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/80319172d1aa32cb0ccc7f38ca99ab401efbdc9e/68747470733a2f2f636f6465636f762e696f2f67682f6b72616d737265746c6f772f4175746f6c6f6769737469632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/kramsretlow/Autologistic.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia package for computing with the autologistic (Ising) probability model
and performing autologistic regression.</p>
<p>Autologistic regression is like an extension of logistic regression that allows the binary
responses to be correlated.  An undirected graph is used to encode the association structure
among the responses.</p>
<p>The package follows the treatment of this model given in the paper
<a href="https://doi.org/10.3389/fams.2017.00024" rel="nofollow">Better Autologistic Regression</a>.  As described in
that paper, different variants of "the" autologistic regression model are actually different
probability models. One reason this package was created was to allow researchers to compare
the performance of the different model variants.  You can create different variants of
the model easily and fit them using either maximum likelihood (for small-n cases) or maximum
pseudolikelihood (for large-n cases).</p>
<p>At present only the most common "simple" form of the model--with a single parameter
controlling the association strength everywhere in graph--is implemented.  But the
package is designed to be extensible. In future different ways of parametrizing
the association could be added.</p>
<p>Much more detail is provided in the <a href="https://kramsretlow.github.io/Autologistic.jl/stable" rel="nofollow">documentation</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> To get a feeling for the package facilities.</span>
<span class="pl-c"><span class="pl-c">#</span> The package uses LightGraphs.jl for graphs.</span>
<span class="pl-k">using</span> Autologistic, LightGraphs
g <span class="pl-k">=</span> <span class="pl-c1">Graph</span>(<span class="pl-c1">100</span>, <span class="pl-c1">400</span>)            <span class="pl-c"><span class="pl-c">#</span>-Create a random graph (100 vertices, 400 edges)</span>
X <span class="pl-k">=</span> [<span class="pl-c1">ones</span>(<span class="pl-c1">100</span>) <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>,<span class="pl-c1">3</span>)]    <span class="pl-c"><span class="pl-c">#</span>-A matrix of predictors.</span>
Y <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">0</span>, <span class="pl-c1">1</span>], <span class="pl-c1">100</span>)          <span class="pl-c"><span class="pl-c">#</span>-A vector of binary responses.</span>
model <span class="pl-k">=</span> <span class="pl-c1">ALRsimple</span>(g, X, Y<span class="pl-k">=</span>Y)   <span class="pl-c"><span class="pl-c">#</span>-Create autologistic regression model</span>

<span class="pl-c"><span class="pl-c">#</span> Estimate parameters using pseudolikelihood. Do parametric bootstrap</span>
<span class="pl-c"><span class="pl-c">#</span> for error estimation.  Draw bootstrap samples using perfect sampling.</span>
fit <span class="pl-k">=</span> <span class="pl-c1">fit_pl!</span>(model, nboot<span class="pl-k">=</span><span class="pl-c1">2000</span>, method<span class="pl-k">=</span>perfect_read_once)

<span class="pl-c"><span class="pl-c">#</span> Draw samples from the fitted model and get the average to estimate</span>
<span class="pl-c"><span class="pl-c">#</span> the marginal probability distribution. Use a different perfect sampling</span>
<span class="pl-c"><span class="pl-c">#</span> algorithm.</span>
marginal <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, <span class="pl-c1">1000</span>, method<span class="pl-k">=</span>perfect_bounding_chain, average<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
</article></div>