<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-acuteml" class="anchor" aria-hidden="true" href="#acuteml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AcuteML</h1>
<h2 dir="auto"><a id="user-content-acute-markup-language" class="anchor" aria-hidden="true" href="#acute-markup-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acute Markup Language</h2>
<p dir="auto"><a href="https://aminya.github.io/AcuteML.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/aminya/AcuteML.jl/workflows/CI/badge.svg"><img src="https://github.com/aminya/AcuteML.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/aminya/AcuteML.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1e3b64445e6af3c74dae86c91b6e4a7115a8ec93987433254c1fbd82d0aa7e1f/68747470733a2f2f636f6465636f762e696f2f67682f616d696e79612f41637574654d4c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Test Coverage" data-canonical-src="https://codecov.io/gh/aminya/AcuteML.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/aminya/AcuteML.jl/workflows/SnoopCompile/badge.svg"><img src="https://github.com/aminya/AcuteML.jl/workflows/SnoopCompile/badge.svg" alt="SnoopCompile" style="max-width: 100%;"></a></p>
<p dir="auto">AcuteML is an Acute Markup Language (AML) for Web/XML development in Julia.</p>
<ul dir="auto">
<li>
<p dir="auto">It automatically creates or extracts HTML/XML files from Julia types!</p>
</li>
<li>
<p dir="auto">It also has a general templating engine, which can be used for any type of documents.</p>
</li>
</ul>
<h1 dir="auto"><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation and Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;AcuteML&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AcuteML<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AcuteML"><pre><span class="pl-k">using</span> AcuteML</pre></div>
<h1 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h1>
<p dir="auto">Click on the badge: <a href="https://aminya.github.io/AcuteML.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">See <a href="https://aminya.github.io/AcuteML.jl/dev/#Main-macro-and-I/O-1" rel="nofollow">Type Definition</a> for a comprehensive introduction to syntax. You can use <code>@aml</code> macro to define a Julia type, and then the package automatically creates a xml or html associated with the defined type.</p>
<h1 dir="auto"><a id="user-content-readme-content" class="anchor" aria-hidden="true" href="#readme-content"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Readme Content</h1>
<ul dir="auto">
<li><a href="#installation-and-usage">Installation and Usage</a></li>
<li><a href="#documentation">Documentation</a></li>
<li><a href="#example---simple">Example - Simple</a></li>
<li><a href="#example---struct-definition">Example - Struct Definition</a></li>
<li><a href="#example---creator">Example - Creator</a></li>
<li><a href="#example---extractor">Example - Extractor</a></li>
<li><a href="#templating">Templating</a></li>
<li><a href="#example---template-rendering-using-functions">Example - Template Rendering using Functions</a></li>
<li><a href="#example---template-rendering-using-files">Example - Template Rendering using Files</a></li>
</ul>
<h1 dir="auto"><a id="user-content-example---simple" class="anchor" aria-hidden="true" href="#example---simple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example - Simple</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AcuteML

# the xml/html name of each property is written in front of it (e.g. &quot;body&quot;)
# `~` means that the struct property name is the same as xml/html name

@aml mutable struct Body &quot;body&quot;
    h1, &quot;~&quot;
    p::Vector{String}, &quot;~&quot;
end

@aml mutable struct Page doc&quot;html&quot;
    body::Body, &quot;~&quot;
end

b = Body(h1 = &quot;My heading&quot;, p = [&quot;Paragraph1&quot;, &quot;Paragraph2&quot;])
d = Page(body = b)
pprint(d)"><pre><span class="pl-k">using</span> AcuteML

<span class="pl-c"><span class="pl-c">#</span> the xml/html name of each property is written in front of it (e.g. "body")</span>
<span class="pl-c"><span class="pl-c">#</span> `~` means that the struct property name is the same as xml/html name</span>

<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> Body <span class="pl-s"><span class="pl-pds">"</span>body<span class="pl-pds">"</span></span>
    h1, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
    p<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> Page <span class="pl-s"><span class="pl-pds"><span class="pl-c1">doc</span>"</span>html<span class="pl-pds">"</span></span>
    body<span class="pl-k">::</span><span class="pl-c1">Body</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

b <span class="pl-k">=</span> <span class="pl-c1">Body</span>(h1 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>My heading<span class="pl-pds">"</span></span>, p <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Paragraph1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Paragraph2<span class="pl-pds">"</span></span>])
d <span class="pl-k">=</span> <span class="pl-c1">Page</span>(body <span class="pl-k">=</span> b)
<span class="pl-c1">pprint</span>(d)</pre></div>
<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pprint(d)
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;My heading&lt;/h1&gt;
    &lt;p&gt;Paragraph1&lt;/p&gt;
    &lt;p&gt;Paragraph2&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;"><pre>julia<span class="pl-kos">&gt;</span> pprint(d)
<span class="pl-kos">&lt;</span>?xml version="1.0" encoding="UTF-8" standalone="yes"?<span class="pl-kos">&gt;</span>
<span class="pl-c1">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"<span class="pl-kos">&gt;</span></span>
<span class="pl-kos">&lt;</span><span class="pl-ent">html</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">body</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">h1</span><span class="pl-kos">&gt;</span>My heading<span class="pl-kos">&lt;/</span><span class="pl-ent">h1</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">p</span><span class="pl-kos">&gt;</span>Paragraph1<span class="pl-kos">&lt;/</span><span class="pl-ent">p</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">p</span><span class="pl-kos">&gt;</span>Paragraph2<span class="pl-kos">&lt;/</span><span class="pl-ent">p</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;/</span><span class="pl-ent">body</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">html</span><span class="pl-kos">&gt;</span></pre></div>
<hr>
<p dir="auto">More advanced Examples are given in the following:</p>
<h1 dir="auto"><a id="user-content-example---struct-definition" class="anchor" aria-hidden="true" href="#example---struct-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example - Struct Definition</h1>
<p dir="auto">First, we define the structs using <code>@aml</code> to store the data in:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AcuteML

# Types definition

# Person Type
@aml mutable struct Person &quot;person&quot;, check_course
    age::UInt64, &quot;~&quot;
    field, &quot;study-field&quot;
    GPA::Float64 = 4.5, &quot;~&quot;, GPAcheck
    courses::Vector{String}, &quot;taken-courses&quot;
    professors::UN{DataFrame} = nothing, &quot;table&quot;
    id::Int64, att&quot;~&quot;
    comment::UN{String} = nothing, txt&quot;end&quot;
end

@aml mutable struct University doc&quot;university&quot;
    name, att&quot;university-name&quot;
    people::Vector{Person}, &quot;person&quot;
end

"><pre><span class="pl-k">using</span> AcuteML

<span class="pl-c"><span class="pl-c">#</span> Types definition</span>

<span class="pl-c"><span class="pl-c">#</span> Person Type</span>
<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> Person <span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>, check_course
    age<span class="pl-k">::</span><span class="pl-c1">UInt64</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
    field, <span class="pl-s"><span class="pl-pds">"</span>study-field<span class="pl-pds">"</span></span>
    GPA<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">4.5</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>, GPAcheck
    courses<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>, <span class="pl-s"><span class="pl-pds">"</span>taken-courses<span class="pl-pds">"</span></span>
    professors<span class="pl-k">::</span><span class="pl-c1">UN{DataFrame}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, <span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>
    id<span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">att</span>"</span>~<span class="pl-pds">"</span></span>
    comment<span class="pl-k">::</span><span class="pl-c1">UN{String}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">txt</span>"</span>end<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> University <span class="pl-s"><span class="pl-pds"><span class="pl-c1">doc</span>"</span>university<span class="pl-pds">"</span></span>
    name, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">att</span>"</span>university-name<span class="pl-pds">"</span></span>
    people<span class="pl-k">::</span><span class="pl-c1">Vector{Person}</span>, <span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Value Checking Functions
GPAcheck(x) = x &lt;= 4.5 &amp;&amp; x &gt;= 0

function check_course(age, field, GPA, courses, professors, id, comment)

    if field == &quot;Mechanical Engineering&quot;
        relevant = [&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;, &quot;Machine Design&quot;]
    elseif field == &quot;Computer Engineering&quot;
        relevant = [&quot;Julia&quot;, &quot;Algorithms&quot;]
    else
        error(&quot;study field is not known&quot;)
    end

    return any(in.(courses, Ref(relevant)))
end"><pre><span class="pl-c"><span class="pl-c">#</span> Value Checking Functions</span>
<span class="pl-en">GPAcheck</span>(x) <span class="pl-k">=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">4.5</span> <span class="pl-k">&amp;&amp;</span> x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>

<span class="pl-k">function</span> <span class="pl-en">check_course</span>(age, field, GPA, courses, professors, id, comment)

    <span class="pl-k">if</span> field <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>
        relevant <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Machine Design<span class="pl-pds">"</span></span>]
    <span class="pl-k">elseif</span> field <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Computer Engineering<span class="pl-pds">"</span></span>
        relevant <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Algorithms<span class="pl-pds">"</span></span>]
    <span class="pl-k">else</span>
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>study field is not known<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">return</span> <span class="pl-c1">any</span>(<span class="pl-c1">in</span>.(courses, <span class="pl-c1">Ref</span>(relevant)))
<span class="pl-k">end</span></pre></div>
<hr>
<h1 dir="auto"><a id="user-content-example---creator" class="anchor" aria-hidden="true" href="#example---creator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example - Creator</h1>
<p dir="auto">After we defined the structs, we can create instances of them by passing our data to the fields:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
P1 = Person(age=24, field=&quot;Mechanical Engineering&quot;, courses = [&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;], id = 1, comment = &quot;He is a genius&quot;)
P2 = Person(age=18, field=&quot;Computer Engineering&quot;, GPA=4, courses=[&quot;Julia&quot;], id = 2)

U = University(name=&quot;Julia University&quot;, people=[P1, P2])

U.people[2].GPA=4.2 # mutability support after Doc creation
"><pre>P1 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">24</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>, courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>], id <span class="pl-k">=</span> <span class="pl-c1">1</span>, comment <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>He is a genius<span class="pl-pds">"</span></span>)
P2 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">18</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Computer Engineering<span class="pl-pds">"</span></span>, GPA<span class="pl-k">=</span><span class="pl-c1">4</span>, courses<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>], id <span class="pl-k">=</span> <span class="pl-c1">2</span>)

U <span class="pl-k">=</span> <span class="pl-c1">University</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Julia University<span class="pl-pds">"</span></span>, people<span class="pl-k">=</span>[P1, P2])

U<span class="pl-k">.</span>people[<span class="pl-c1">2</span>]<span class="pl-k">.</span>GPA<span class="pl-k">=</span><span class="pl-c1">4.2</span> <span class="pl-c"><span class="pl-c">#</span> mutability support after Doc creation</span>
</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# An example that doesn't meet the criteria function for GPA because GPA is more than 4.5
P3 = Person(age=99, field=&quot;Macro Wizard&quot;, GPA=10, courses=[&quot;Julia Magic&quot;], id = 3)
julia&gt;
GPA doesn't meet criteria function"><pre><span class="pl-c"><span class="pl-c">#</span> An example that doesn't meet the criteria function for GPA because GPA is more than 4.5</span>
P3 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">99</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Macro Wizard<span class="pl-pds">"</span></span>, GPA<span class="pl-k">=</span><span class="pl-c1">10</span>, courses<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Julia Magic<span class="pl-pds">"</span></span>], id <span class="pl-k">=</span> <span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span>
GPA doesn<span class="pl-k">'</span>t meet criteria <span class="pl-k">function</span></pre></div>
<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pprint(P1) # or print(P1.aml)
&lt;person id=&quot;1&quot;&gt;
  &lt;age&gt;24&lt;/age&gt;
  &lt;study-field&gt;Mechanical Engineering&lt;/study-field&gt;
  &lt;GPA&gt;4.5&lt;/GPA&gt;
  &lt;taken-courses&gt;Artificial Intelligence&lt;/taken-courses&gt;
  &lt;taken-courses&gt;Robotics&lt;/taken-courses&gt;
  He is a genius
&lt;/person&gt;

julia&gt; pprint(U) # or print(U.aml)
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;university university-name=&quot;Julia University&quot;&gt;
  &lt;person id=&quot;1&quot;&gt;
    &lt;age&gt;24&lt;/age&gt;
    &lt;study-field&gt;Mechanical Engineering&lt;/study-field&gt;
    &lt;GPA&gt;4.5&lt;/GPA&gt;
    &lt;taken-courses&gt;Artificial Intelligence&lt;/taken-courses&gt;
    &lt;taken-courses&gt;Robotics&lt;/taken-courses&gt;
    He is a genius
  &lt;/person&gt;
  &lt;person id=&quot;2&quot;&gt;
    &lt;age&gt;18&lt;/age&gt;
    &lt;study-field&gt;Computer Engineering&lt;/study-field&gt;
    &lt;GPA&gt;4.2&lt;/GPA&gt;
    &lt;taken-courses&gt;Julia&lt;/taken-courses&gt;
  &lt;/person&gt;
&lt;/university&gt;"><pre>julia<span class="pl-kos">&gt;</span> pprint(P1) # or print(P1.aml)
<span class="pl-kos">&lt;</span><span class="pl-ent">person</span> <span class="pl-c1">id</span>="<span class="pl-s">1</span>"<span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>24<span class="pl-kos">&lt;/</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>Mechanical Engineering<span class="pl-kos">&lt;/</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>4.5<span class="pl-kos">&lt;/</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Artificial Intelligence<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Robotics<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
  He is a genius
<span class="pl-kos">&lt;/</span><span class="pl-ent">person</span><span class="pl-kos">&gt;</span>

julia<span class="pl-kos">&gt;</span> pprint(U) # or print(U.aml)
<span class="pl-kos">&lt;</span>?xml version="1.0" encoding="UTF-8"?<span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">university</span> <span class="pl-c1">university-name</span>="<span class="pl-s">Julia University</span>"<span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">person</span> <span class="pl-c1">id</span>="<span class="pl-s">1</span>"<span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>24<span class="pl-kos">&lt;/</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>Mechanical Engineering<span class="pl-kos">&lt;/</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>4.5<span class="pl-kos">&lt;/</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Artificial Intelligence<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Robotics<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
    He is a genius
  <span class="pl-kos">&lt;/</span><span class="pl-ent">person</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">person</span> <span class="pl-c1">id</span>="<span class="pl-s">2</span>"<span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>18<span class="pl-kos">&lt;/</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>Computer Engineering<span class="pl-kos">&lt;/</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>4.2<span class="pl-kos">&lt;/</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Julia<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;/</span><span class="pl-ent">person</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">university</span><span class="pl-kos">&gt;</span></pre></div>
<p dir="auto">P3 with Tables.jl type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Profs1 = DataFrame(course = [&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;], professor = [&quot;Prof. A&quot;, &quot;Prof. B&quot;] )

P3 = Person(age=24, field=&quot;Mechanical Engineering&quot;, courses = [&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;], professors= Profs1, id = 1)"><pre>Profs1 <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(course <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>], professor <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Prof. A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Prof. B<span class="pl-pds">"</span></span>] )

P3 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">24</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>, courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>], professors<span class="pl-k">=</span> Profs1, id <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pprint(P3)

&lt;person id=&quot;1&quot;&gt;
&lt;age&gt;24&lt;/age&gt;
&lt;study-field&gt;Mechanical Engineering&lt;/study-field&gt;
&lt;GPA&gt;4.5&lt;/GPA&gt;
&lt;taken-courses&gt;Artificial Intelligence&lt;/taken-courses&gt;
&lt;taken-courses&gt;Robotics&lt;/taken-courses&gt;
&lt;table&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: right; &quot;&gt;course&lt;/th&gt;
&lt;th style=&quot;text-align: right; &quot;&gt;professor&lt;/th&gt;
&lt;/tr&gt;
&lt;tr class=&quot;subheader headerLastRow&quot;&gt;
&lt;th style=&quot;text-align: right; &quot;&gt;String&lt;/th&gt;
&lt;th style=&quot;text-align: right; &quot;&gt;String&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: right; &quot;&gt;Artificial Intelligence&lt;/td&gt;
&lt;td style=&quot;text-align: right; &quot;&gt;Prof. A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: right; &quot;&gt;Robotics&lt;/td&gt;
&lt;td style=&quot;text-align: right; &quot;&gt;Prof. B&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/person&gt;"><pre>julia<span class="pl-kos">&gt;</span> pprint(P3)

<span class="pl-kos">&lt;</span><span class="pl-ent">person</span> <span class="pl-c1">id</span>="<span class="pl-s">1</span>"<span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>24<span class="pl-kos">&lt;/</span><span class="pl-ent">age</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>Mechanical Engineering<span class="pl-kos">&lt;/</span><span class="pl-ent">study-field</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>4.5<span class="pl-kos">&lt;/</span><span class="pl-ent">GPA</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Artificial Intelligence<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>Robotics<span class="pl-kos">&lt;/</span><span class="pl-ent">taken-courses</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">table</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">tr</span> <span class="pl-c1">class</span>="<span class="pl-s">header</span>"<span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">th</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>course<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">th</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>professor<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">tr</span> <span class="pl-c1">class</span>="<span class="pl-s">subheader headerLastRow</span>"<span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">th</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>String<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">th</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>String<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>Artificial Intelligence<span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>Prof. A<span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>Robotics<span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">style</span>="<span class="pl-s">text-align: right; </span>"<span class="pl-kos">&gt;</span>Prof. B<span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">table</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">person</span><span class="pl-kos">&gt;</span></pre></div>
<hr>
<h1 dir="auto"><a id="user-content-example---extractor" class="anchor" aria-hidden="true" href="#example---extractor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example - Extractor</h1>
<p dir="auto">After we defined the structs, we can automatically extract and store the data in their fields:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using AcuteML

xml = parsexml(&quot;&quot;&quot;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;university university-name=&quot;Julia University&quot;&gt;
  &lt;person id=&quot;1&quot;&gt;
    &lt;age&gt;24&lt;/age&gt;
    &lt;study-field&gt;Mechanical Engineering&lt;/study-field&gt;
    &lt;GPA&gt;4.5&lt;/GPA&gt;
    &lt;taken-courses&gt;Artificial Intelligence&lt;/taken-courses&gt;
    &lt;taken-courses&gt;Robotics&lt;/taken-courses&gt;
    He is a genius
  &lt;/person&gt;
  &lt;person id=&quot;2&quot;&gt;
    &lt;age&gt;18&lt;/age&gt;
    &lt;study-field&gt;Computer Engineering&lt;/study-field&gt;
    &lt;GPA&gt;4.2&lt;/GPA&gt;
    &lt;taken-courses&gt;Julia&lt;/taken-courses&gt;
  &lt;/person&gt;
&lt;/university&gt;
&quot;&quot;&quot;)

# extract University
U = University(xml) # StructName(xml) extracts the data and stores them in proper format

# Now you can access all of the data by calling the fieldnames

julia&gt;U.name
&quot;Julia University&quot;

# extract Person
P1 = U.people[1]

julia&gt;P1.age
24

julia&gt;P1.field
Mechanical Engineering

julia&gt;P1.GPA
4.5

julia&gt;P1.courses
[&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;]

julia&gt;P1.id
1

julia&gt; P1.comment
&quot;He is a genius&quot;"><pre><span class="pl-k">using</span> AcuteML

xml <span class="pl-k">=</span> <span class="pl-c1">parsexml</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="pl-s">&lt;university university-name="Julia University"&gt;</span>
<span class="pl-s">  &lt;person id="1"&gt;</span>
<span class="pl-s">    &lt;age&gt;24&lt;/age&gt;</span>
<span class="pl-s">    &lt;study-field&gt;Mechanical Engineering&lt;/study-field&gt;</span>
<span class="pl-s">    &lt;GPA&gt;4.5&lt;/GPA&gt;</span>
<span class="pl-s">    &lt;taken-courses&gt;Artificial Intelligence&lt;/taken-courses&gt;</span>
<span class="pl-s">    &lt;taken-courses&gt;Robotics&lt;/taken-courses&gt;</span>
<span class="pl-s">    He is a genius</span>
<span class="pl-s">  &lt;/person&gt;</span>
<span class="pl-s">  &lt;person id="2"&gt;</span>
<span class="pl-s">    &lt;age&gt;18&lt;/age&gt;</span>
<span class="pl-s">    &lt;study-field&gt;Computer Engineering&lt;/study-field&gt;</span>
<span class="pl-s">    &lt;GPA&gt;4.2&lt;/GPA&gt;</span>
<span class="pl-s">    &lt;taken-courses&gt;Julia&lt;/taken-courses&gt;</span>
<span class="pl-s">  &lt;/person&gt;</span>
<span class="pl-s">&lt;/university&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)

<span class="pl-c"><span class="pl-c">#</span> extract University</span>
U <span class="pl-k">=</span> <span class="pl-c1">University</span>(xml) <span class="pl-c"><span class="pl-c">#</span> StructName(xml) extracts the data and stores them in proper format</span>

<span class="pl-c"><span class="pl-c">#</span> Now you can access all of the data by calling the fieldnames</span>

julia<span class="pl-k">&gt;</span>U<span class="pl-k">.</span>name
<span class="pl-s"><span class="pl-pds">"</span>Julia University<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> extract Person</span>
P1 <span class="pl-k">=</span> U<span class="pl-k">.</span>people[<span class="pl-c1">1</span>]

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>age
<span class="pl-c1">24</span>

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>field
Mechanical Engineering

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>GPA
<span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>courses
[<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>id
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> P1<span class="pl-k">.</span>comment
<span class="pl-s"><span class="pl-pds">"</span>He is a genius<span class="pl-pds">"</span></span></pre></div>
<hr>
<h1 dir="auto"><a id="user-content-templating" class="anchor" aria-hidden="true" href="#templating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Templating</h1>
<p dir="auto">AcuteML also provides a templating engine if you want to use templates instead of creating the types.</p>
<hr>
<h1 dir="auto"><a id="user-content-example---template-rendering-using-functions" class="anchor" aria-hidden="true" href="#example---template-rendering-using-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example - Template Rendering using Functions</h1>
<p dir="auto">This method only uses functions that return string. You can build your desired string and call the function for rendering.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## create person function to store out html template
newTemplate(&quot;person&quot;, :function)


function person(;id, age, field, GPA, courses)

  # Build the taken courses section
  loopOut=&quot;&quot;
  for course in courses
    loopOut = loopOut * &quot;&quot;&quot; &lt;taken-courses&gt;$(course)&lt;/taken-courses&gt;   &quot;&quot;&quot;
  end

  # Append all the sections and variables together
  out = &quot;&quot;&quot;
  &lt;person id=$(id)&gt;
    &lt;age&gt;$(age)&lt;/age&gt;
    &lt;study-field&gt;$(field)&lt;/study-field&gt;
    &lt;GPA&gt;$(GPA)&lt;/GPA&gt;
    $loopOut
  &lt;/person&gt;
  &quot;&quot;&quot;

  return out
end

# Call the function for rendering
out = person(
  id = &quot;1&quot;,
  age = &quot;24&quot;,
  field = &quot;Mechanical Engineering&quot;,
  GPA = &quot;4.5&quot;,
  courses = [&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;]
)

print(out)

# you can also write the output to a file:
Base.write(filePath, out)"><pre><span class="pl-c"><span class="pl-c">#</span># create person function to store out html template</span>
<span class="pl-c1">newTemplate</span>(<span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>, <span class="pl-c1">:function</span>)


<span class="pl-k">function</span> <span class="pl-en">person</span>(;id, age, field, GPA, courses)

  <span class="pl-c"><span class="pl-c">#</span> Build the taken courses section</span>
  loopOut<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
  <span class="pl-k">for</span> course <span class="pl-k">in</span> courses
    loopOut <span class="pl-k">=</span> loopOut <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"""</span> &lt;taken-courses&gt;<span class="pl-v">$(course)</span>&lt;/taken-courses&gt;   <span class="pl-pds">"""</span></span>
  <span class="pl-k">end</span>

  <span class="pl-c"><span class="pl-c">#</span> Append all the sections and variables together</span>
  out <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  &lt;person id=<span class="pl-v">$(id)</span>&gt;</span>
<span class="pl-s">    &lt;age&gt;<span class="pl-v">$(age)</span>&lt;/age&gt;</span>
<span class="pl-s">    &lt;study-field&gt;<span class="pl-v">$(field)</span>&lt;/study-field&gt;</span>
<span class="pl-s">    &lt;GPA&gt;<span class="pl-v">$(GPA)</span>&lt;/GPA&gt;</span>
<span class="pl-s">    <span class="pl-v">$loopOut</span></span>
<span class="pl-s">  &lt;/person&gt;</span>
<span class="pl-s">  <span class="pl-pds">"""</span></span>

  <span class="pl-k">return</span> out
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Call the function for rendering</span>
out <span class="pl-k">=</span> <span class="pl-c1">person</span>(
  id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,
  age <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>24<span class="pl-pds">"</span></span>,
  field <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>,
  GPA <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>4.5<span class="pl-pds">"</span></span>,
  courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>]
)

<span class="pl-c1">print</span>(out)

<span class="pl-c"><span class="pl-c">#</span> you can also write the output to a file:</span>
Base<span class="pl-k">.</span><span class="pl-c1">write</span>(filePath, out)</pre></div>
<hr>
<h1 dir="auto"><a id="user-content-example---template-rendering-using-files" class="anchor" aria-hidden="true" href="#example---template-rendering-using-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example - Template Rendering using Files</h1>
<p dir="auto">You can render variables into html/xml files. However, you can't have multiline control flow Julia code in this method.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# you can create a file and edit the file directly by using
newTemplate(&quot;person&quot;)

# Add the following html code to the generated html file
#=
&lt;person id=$(id)&gt;
  &lt;age&gt;$(age)&lt;/age&gt;
  &lt;study-field&gt;$(field)&lt;/study-field&gt;
  &lt;GPA&gt;$(GPA)&lt;/GPA&gt;
  &lt;taken-courses&gt;$(courses[1])&lt;/taken-courses&gt;
  &lt;taken-courses&gt;$(courses[2])&lt;/taken-courses&gt;
&lt;/person&gt;
=#

# Specify the template (or its path), and also the variables for rendering
out =render2file(&quot;person&quot;, false,
  id = 1,
  age = 24,
  field = &quot;Mechanical Engineering&quot;,
  GPA = 4.5,
  courses = [&quot;Artificial Intelligence&quot;, &quot;Robotics&quot;])

# you pass `true` as the 2nd argument to overwrite person.html statically."><pre><span class="pl-c"><span class="pl-c">#</span> you can create a file and edit the file directly by using</span>
<span class="pl-c1">newTemplate</span>(<span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Add the following html code to the generated html file</span>
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">&lt;person id=$(id)&gt;</span>
<span class="pl-c">  &lt;age&gt;$(age)&lt;/age&gt;</span>
<span class="pl-c">  &lt;study-field&gt;$(field)&lt;/study-field&gt;</span>
<span class="pl-c">  &lt;GPA&gt;$(GPA)&lt;/GPA&gt;</span>
<span class="pl-c">  &lt;taken-courses&gt;$(courses[1])&lt;/taken-courses&gt;</span>
<span class="pl-c">  &lt;taken-courses&gt;$(courses[2])&lt;/taken-courses&gt;</span>
<span class="pl-c">&lt;/person&gt;</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

<span class="pl-c"><span class="pl-c">#</span> Specify the template (or its path), and also the variables for rendering</span>
out <span class="pl-k">=</span><span class="pl-c1">render2file</span>(<span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>,
  id <span class="pl-k">=</span> <span class="pl-c1">1</span>,
  age <span class="pl-k">=</span> <span class="pl-c1">24</span>,
  field <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>,
  GPA <span class="pl-k">=</span> <span class="pl-c1">4.5</span>,
  courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> you pass `true` as the 2nd argument to overwrite person.html statically.</span></pre></div>
</article></div>