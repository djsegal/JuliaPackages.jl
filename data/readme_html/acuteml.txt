<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-acuteml" class="anchor" aria-hidden="true" href="#acuteml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AcuteML</h1>
<h2><a id="user-content-acute-markup-language" class="anchor" aria-hidden="true" href="#acute-markup-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acute Markup Language</h2>
<p><a href="https://aminya.github.io/AcuteML.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/aminya/AcuteML.jl/workflows/CI/badge.svg"><img src="https://github.com/aminya/AcuteML.jl/workflows/CI/badge.svg" alt="Build Status (Github Actions)" style="max-width:100%;"></a></p>
<p>AcuteML is an Acute Markup Language (AML) for Web/XML development in Julia.</p>
<ul>
<li>
<p>It automatically creates or extracts HTML/XML files from Julia types!</p>
</li>
<li>
<p>It also has a general templating engine, which can be used for any type of documents.</p>
</li>
</ul>
<h1><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation and Usage</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AcuteML<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AcuteML</pre></div>
<h1><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h1>
<p>Click on the badge: <a href="https://aminya.github.io/AcuteML.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>See <a href="https://aminya.github.io/AcuteML.jl/dev/#Main-macro-and-I/O-1" rel="nofollow">Type Definition</a> for a comprehensive introduction to syntax. You can use <code>@aml</code> macro to define a Julia type, and then the package automatically creates a xml or html associated with the defined type.</p>
<h1><a id="user-content-readme-content" class="anchor" aria-hidden="true" href="#readme-content"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Readme Content</h1>
<ul>
<li><a href="#installation-and-usage">Installation and Usage</a></li>
<li><a href="#documentation">Documentation</a></li>
<li><a href="#example---simple">Example - Simple</a></li>
<li><a href="#example---struct-definition">Example - Struct Definition</a></li>
<li><a href="#example---creator">Example - Creator</a></li>
<li><a href="#example---extractor">Example - Extractor</a></li>
<li><a href="#templating">Templating</a></li>
<li><a href="#example---template-rendering-using-functions">Example - Template Rendering using Functions</a></li>
<li><a href="#example---template-rendering-using-files">Example - Template Rendering using Files</a></li>
</ul>
<h1><a id="user-content-example---simple" class="anchor" aria-hidden="true" href="#example---simple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example - Simple</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AcuteML

<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> body <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
    h1, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
    p<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> html <span class="pl-s"><span class="pl-pds"><span class="pl-c1">doc</span>"</span>html<span class="pl-pds">"</span></span>
    body<span class="pl-k">::</span><span class="pl-c1">body</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

b <span class="pl-k">=</span> <span class="pl-c1">body</span>(h1 <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>My heading<span class="pl-pds">"</span></span>, p <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Paragraph1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Paragraph2<span class="pl-pds">"</span></span>])
d <span class="pl-k">=</span> <span class="pl-c1">html</span>(body <span class="pl-k">=</span> b)</pre></div>
<div class="highlight highlight-text-html-basic"><pre>julia&gt; pprint(d)
&lt;?<span class="pl-ent">xml</span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span> <span class="pl-e">encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span> <span class="pl-e">standalone</span>=<span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>?&gt;
&lt;!DOCTYPE html PUBLIC <span class="pl-s">"-//W3C//DTD HTML 4.0 Transitional//EN"</span> <span class="pl-s">"http://www.w3.org/TR/REC-html40/loose.dtd"</span>&gt;
&lt;<span class="pl-ent">html</span>&gt;
  &lt;<span class="pl-ent">body</span>&gt;
    &lt;<span class="pl-ent">h1</span>&gt;My heading&lt;/<span class="pl-ent">h1</span>&gt;
    &lt;<span class="pl-ent">p</span>&gt;Paragraph1&lt;/<span class="pl-ent">p</span>&gt;
    &lt;<span class="pl-ent">p</span>&gt;Paragraph2&lt;/<span class="pl-ent">p</span>&gt;
  &lt;/<span class="pl-ent">body</span>&gt;
&lt;/<span class="pl-ent">html</span>&gt;</pre></div>
<hr>
<p>More advanced Examples are given in the following:</p>
<h1><a id="user-content-example---struct-definition" class="anchor" aria-hidden="true" href="#example---struct-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example - Struct Definition</h1>
<p>First, we define the structs using <code>@aml</code> to store the data in:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AcuteML

<span class="pl-c"><span class="pl-c">#</span> Types definition</span>

<span class="pl-c"><span class="pl-c">#</span> Person Type</span>
<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> Person <span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>, check_course
    age<span class="pl-k">::</span><span class="pl-c1">UInt64</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>
    field, <span class="pl-s"><span class="pl-pds">"</span>study-field<span class="pl-pds">"</span></span>
    GPA<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">4.5</span>, <span class="pl-s"><span class="pl-pds">"</span>~<span class="pl-pds">"</span></span>, GPAcheck
    courses<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>, <span class="pl-s"><span class="pl-pds">"</span>taken-courses<span class="pl-pds">"</span></span>
    professors<span class="pl-k">::</span><span class="pl-c1">UN{DataFrame}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, <span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>
    id<span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">att</span>"</span>~<span class="pl-pds">"</span></span>
    comment<span class="pl-k">::</span><span class="pl-c1">UN{String}</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">txt</span>"</span>end<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@aml</span> <span class="pl-k">mutable struct</span> University <span class="pl-s"><span class="pl-pds"><span class="pl-c1">doc</span>"</span>university<span class="pl-pds">"</span></span>
    name, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">att</span>"</span>university-name<span class="pl-pds">"</span></span>
    people<span class="pl-k">::</span><span class="pl-c1">Vector{Person}</span>, <span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Value Checking Functions</span>
<span class="pl-en">GPAcheck</span>(x) <span class="pl-k">=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">4.5</span> <span class="pl-k">&amp;&amp;</span> x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>

<span class="pl-k">function</span> <span class="pl-en">check_course</span>(age, field, GPA, courses, professors, id, comment)

    <span class="pl-k">if</span> field <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>
        relevant <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Machine Design<span class="pl-pds">"</span></span>]
    <span class="pl-k">elseif</span> field <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Computer Engineering<span class="pl-pds">"</span></span>
        relevant <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Algorithms<span class="pl-pds">"</span></span>]
    <span class="pl-k">else</span>
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>study field is not known<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>

    <span class="pl-k">return</span> <span class="pl-c1">any</span>(<span class="pl-c1">in</span>.(courses, <span class="pl-c1">Ref</span>(relevant)))
<span class="pl-k">end</span></pre></div>
<hr>
<h1><a id="user-content-example---creator" class="anchor" aria-hidden="true" href="#example---creator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example - Creator</h1>
<p>After we defined the structs, we can create instances of them by passing our data to the fields:</p>
<div class="highlight highlight-source-julia"><pre>P1 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">24</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>, courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>], id <span class="pl-k">=</span> <span class="pl-c1">1</span>, comment <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>He is a genius<span class="pl-pds">"</span></span>)
P2 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">18</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Computer Engineering<span class="pl-pds">"</span></span>, GPA<span class="pl-k">=</span><span class="pl-c1">4</span>, courses<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Julia<span class="pl-pds">"</span></span>], id <span class="pl-k">=</span> <span class="pl-c1">2</span>)

U <span class="pl-k">=</span> <span class="pl-c1">University</span>(name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Julia University<span class="pl-pds">"</span></span>, people<span class="pl-k">=</span>[P1, P2])

U<span class="pl-k">.</span>people[<span class="pl-c1">2</span>]<span class="pl-k">.</span>GPA<span class="pl-k">=</span><span class="pl-c1">4.2</span> <span class="pl-c"><span class="pl-c">#</span> mutability support after Doc creation</span>
</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> An example that doesn't meet the criteria function for GPA because GPA is more than 4.5</span>
P3 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">99</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Macro Wizard<span class="pl-pds">"</span></span>, GPA<span class="pl-k">=</span><span class="pl-c1">10</span>, courses<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Julia Magic<span class="pl-pds">"</span></span>], id <span class="pl-k">=</span> <span class="pl-c1">3</span>)
julia<span class="pl-k">&gt;</span>
GPA doesn<span class="pl-k">'</span>t meet criteria <span class="pl-k">function</span></pre></div>
<div class="highlight highlight-text-html-basic"><pre>julia&gt; pprint(P1) # or print(P1.aml)
&lt;<span class="pl-ent">person</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>&gt;
  &lt;<span class="pl-ent">age</span>&gt;24&lt;/<span class="pl-ent">age</span>&gt;
  &lt;<span class="pl-ent">study-field</span>&gt;Mechanical Engineering&lt;/<span class="pl-ent">study-field</span>&gt;
  &lt;<span class="pl-ent">GPA</span>&gt;4.5&lt;/<span class="pl-ent">GPA</span>&gt;
  &lt;<span class="pl-ent">taken-courses</span>&gt;Artificial Intelligence&lt;/<span class="pl-ent">taken-courses</span>&gt;
  &lt;<span class="pl-ent">taken-courses</span>&gt;Robotics&lt;/<span class="pl-ent">taken-courses</span>&gt;
  He is a genius
&lt;/<span class="pl-ent">person</span>&gt;

julia&gt; pprint(U) # or print(U.aml)
&lt;?<span class="pl-ent">xml</span> <span class="pl-e">version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span> <span class="pl-e">encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">university</span> <span class="pl-e">university-name</span>=<span class="pl-s"><span class="pl-pds">"</span>Julia University<span class="pl-pds">"</span></span>&gt;
  &lt;<span class="pl-ent">person</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">age</span>&gt;24&lt;/<span class="pl-ent">age</span>&gt;
    &lt;<span class="pl-ent">study-field</span>&gt;Mechanical Engineering&lt;/<span class="pl-ent">study-field</span>&gt;
    &lt;<span class="pl-ent">GPA</span>&gt;4.5&lt;/<span class="pl-ent">GPA</span>&gt;
    &lt;<span class="pl-ent">taken-courses</span>&gt;Artificial Intelligence&lt;/<span class="pl-ent">taken-courses</span>&gt;
    &lt;<span class="pl-ent">taken-courses</span>&gt;Robotics&lt;/<span class="pl-ent">taken-courses</span>&gt;
    He is a genius
  &lt;/<span class="pl-ent">person</span>&gt;
  &lt;<span class="pl-ent">person</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">age</span>&gt;18&lt;/<span class="pl-ent">age</span>&gt;
    &lt;<span class="pl-ent">study-field</span>&gt;Computer Engineering&lt;/<span class="pl-ent">study-field</span>&gt;
    &lt;<span class="pl-ent">GPA</span>&gt;4.2&lt;/<span class="pl-ent">GPA</span>&gt;
    &lt;<span class="pl-ent">taken-courses</span>&gt;Julia&lt;/<span class="pl-ent">taken-courses</span>&gt;
  &lt;/<span class="pl-ent">person</span>&gt;
&lt;/<span class="pl-ent">university</span>&gt;</pre></div>
<p>P3 with Tables.jl type:</p>
<div class="highlight highlight-source-julia"><pre>Profs1 <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(course <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>], professor <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Prof. A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Prof. B<span class="pl-pds">"</span></span>] )

P3 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(age<span class="pl-k">=</span><span class="pl-c1">24</span>, field<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>, courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>], professors<span class="pl-k">=</span> Profs1, id <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<div class="highlight highlight-text-html-basic"><pre>julia&gt; pprint(P3)

&lt;<span class="pl-ent">person</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>&gt;
&lt;<span class="pl-ent">age</span>&gt;24&lt;/<span class="pl-ent">age</span>&gt;
&lt;<span class="pl-ent">study-field</span>&gt;Mechanical Engineering&lt;/<span class="pl-ent">study-field</span>&gt;
&lt;<span class="pl-ent">GPA</span>&gt;4.5&lt;/<span class="pl-ent">GPA</span>&gt;
&lt;<span class="pl-ent">taken-courses</span>&gt;Artificial Intelligence&lt;/<span class="pl-ent">taken-courses</span>&gt;
&lt;<span class="pl-ent">taken-courses</span>&gt;Robotics&lt;/<span class="pl-ent">taken-courses</span>&gt;
&lt;<span class="pl-ent">table</span>&gt;
&lt;<span class="pl-ent">tr</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>header<span class="pl-pds">"</span></span>&gt;
&lt;<span class="pl-ent">th</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;course&lt;/<span class="pl-ent">th</span>&gt;
&lt;<span class="pl-ent">th</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;professor&lt;/<span class="pl-ent">th</span>&gt;
&lt;/<span class="pl-ent">tr</span>&gt;
&lt;<span class="pl-ent">tr</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>subheader headerLastRow<span class="pl-pds">"</span></span>&gt;
&lt;<span class="pl-ent">th</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;String&lt;/<span class="pl-ent">th</span>&gt;
&lt;<span class="pl-ent">th</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;String&lt;/<span class="pl-ent">th</span>&gt;
&lt;/<span class="pl-ent">tr</span>&gt;
&lt;<span class="pl-ent">tr</span>&gt;
&lt;<span class="pl-ent">td</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;Artificial Intelligence&lt;/<span class="pl-ent">td</span>&gt;
&lt;<span class="pl-ent">td</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;Prof. A&lt;/<span class="pl-ent">td</span>&gt;
&lt;/<span class="pl-ent">tr</span>&gt;
&lt;<span class="pl-ent">tr</span>&gt;
&lt;<span class="pl-ent">td</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;Robotics&lt;/<span class="pl-ent">td</span>&gt;
&lt;<span class="pl-ent">td</span> <span class="pl-e">style</span>=<span class="pl-s"><span class="pl-pds">"</span><span class="pl-s1"><span class="pl-c1"><span class="pl-c1">text-align</span></span>: <span class="pl-c1">right</span>; </span><span class="pl-pds">"</span></span>&gt;Prof. B&lt;/<span class="pl-ent">td</span>&gt;
&lt;/<span class="pl-ent">tr</span>&gt;
&lt;/<span class="pl-ent">table</span>&gt;
&lt;/<span class="pl-ent">person</span>&gt;</pre></div>
<hr>
<h1><a id="user-content-example---extractor" class="anchor" aria-hidden="true" href="#example---extractor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example - Extractor</h1>
<p>After we defined the structs, we can automatically extract and store the data in their fields:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AcuteML

xml <span class="pl-k">=</span> <span class="pl-c1">parsexml</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="pl-s">&lt;university university-name="Julia University"&gt;</span>
<span class="pl-s">  &lt;person id="1"&gt;</span>
<span class="pl-s">    &lt;age&gt;24&lt;/age&gt;</span>
<span class="pl-s">    &lt;study-field&gt;Mechanical Engineering&lt;/study-field&gt;</span>
<span class="pl-s">    &lt;GPA&gt;4.5&lt;/GPA&gt;</span>
<span class="pl-s">    &lt;taken-courses&gt;Artificial Intelligence&lt;/taken-courses&gt;</span>
<span class="pl-s">    &lt;taken-courses&gt;Robotics&lt;/taken-courses&gt;</span>
<span class="pl-s">    He is a genius</span>
<span class="pl-s">  &lt;/person&gt;</span>
<span class="pl-s">  &lt;person id="2"&gt;</span>
<span class="pl-s">    &lt;age&gt;18&lt;/age&gt;</span>
<span class="pl-s">    &lt;study-field&gt;Computer Engineering&lt;/study-field&gt;</span>
<span class="pl-s">    &lt;GPA&gt;4.2&lt;/GPA&gt;</span>
<span class="pl-s">    &lt;taken-courses&gt;Julia&lt;/taken-courses&gt;</span>
<span class="pl-s">  &lt;/person&gt;</span>
<span class="pl-s">&lt;/university&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>)

<span class="pl-c"><span class="pl-c">#</span> extract University</span>
U <span class="pl-k">=</span> <span class="pl-c1">University</span>(xml) <span class="pl-c"><span class="pl-c">#</span> StructName(xml) extracts the data and stores them in proper format</span>

<span class="pl-c"><span class="pl-c">#</span> Now you can access all of the data by calling the fieldnames</span>

julia<span class="pl-k">&gt;</span>U<span class="pl-k">.</span>name
<span class="pl-s"><span class="pl-pds">"</span>Julia University<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> extract Person</span>
P1 <span class="pl-k">=</span> U<span class="pl-k">.</span>people[<span class="pl-c1">1</span>]

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>age
<span class="pl-c1">24</span>

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>field
Mechanical Engineering

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>GPA
<span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>courses
[<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span>P1<span class="pl-k">.</span>id
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> P1<span class="pl-k">.</span>comment
<span class="pl-s"><span class="pl-pds">"</span>He is a genius<span class="pl-pds">"</span></span></pre></div>
<hr>
<h1><a id="user-content-templating" class="anchor" aria-hidden="true" href="#templating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Templating</h1>
<p>AcuteML also provides a templating engine if you want to use templates instead of creating the types.</p>
<hr>
<h1><a id="user-content-example---template-rendering-using-functions" class="anchor" aria-hidden="true" href="#example---template-rendering-using-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example - Template Rendering using Functions</h1>
<p>This method only uses functions that return string. You can build your desired string and call the function for rendering.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># create person function to store out html template</span>
<span class="pl-c1">newTemplate</span>(<span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>, <span class="pl-c1">:function</span>)


<span class="pl-k">function</span> <span class="pl-en">person</span>(;id, age, field, GPA, courses)

  <span class="pl-c"><span class="pl-c">#</span> Build the taken courses section</span>
  loopOut<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
  <span class="pl-k">for</span> course <span class="pl-k">in</span> courses
    loopOut <span class="pl-k">=</span> loopOut <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"""</span> &lt;taken-courses&gt;<span class="pl-v">$(course)</span>&lt;/taken-courses&gt;   <span class="pl-pds">"""</span></span>
  <span class="pl-k">end</span>

  <span class="pl-c"><span class="pl-c">#</span> Append all the sections and variables together</span>
  out <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  &lt;person id=<span class="pl-v">$(id)</span>&gt;</span>
<span class="pl-s">    &lt;age&gt;<span class="pl-v">$(age)</span>&lt;/age&gt;</span>
<span class="pl-s">    &lt;study-field&gt;<span class="pl-v">$(field)</span>&lt;/study-field&gt;</span>
<span class="pl-s">    &lt;GPA&gt;<span class="pl-v">$(GPA)</span>&lt;/GPA&gt;</span>
<span class="pl-s">    <span class="pl-v">$loopOut</span></span>
<span class="pl-s">  &lt;/person&gt;</span>
<span class="pl-s">  <span class="pl-pds">"""</span></span>

  <span class="pl-k">return</span> out
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Call the function for rendering</span>
out <span class="pl-k">=</span> <span class="pl-c1">person</span>(
  id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>,
  age <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>24<span class="pl-pds">"</span></span>,
  field <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>,
  GPA <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>4.5<span class="pl-pds">"</span></span>,
  courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>]
)

<span class="pl-c1">print</span>(out)

<span class="pl-c"><span class="pl-c">#</span> you can also write the output to a file:</span>
file <span class="pl-k">=</span> <span class="pl-c1">open</span>(filePath, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>); <span class="pl-c1">print</span>(file, out); <span class="pl-c1">close</span>(file)</pre></div>
<hr>
<h1><a id="user-content-example---template-rendering-using-files" class="anchor" aria-hidden="true" href="#example---template-rendering-using-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example - Template Rendering using Files</h1>
<p>You can render variables into html/xml files. However, you can't have multiline control flow Julia code in this method.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> only to set path to current file</span>
<span class="pl-c1">cd</span>(<span class="pl-c1">@__DIR__</span>)



<span class="pl-c"><span class="pl-c">#</span> you can create a file and edit the file directly by using</span>
<span class="pl-c1">newTemplate</span>(<span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Add the following html code to the generated html file</span>
<span class="pl-c"><span class="pl-c">#=</span></span>
<span class="pl-c">&lt;person id=$(id)&gt;</span>
<span class="pl-c">  &lt;age&gt;$(age)&lt;/age&gt;</span>
<span class="pl-c">  &lt;study-field&gt;$(field)&lt;/study-field&gt;</span>
<span class="pl-c">  &lt;GPA&gt;$(GPA)&lt;/GPA&gt;</span>
<span class="pl-c">  &lt;taken-courses&gt;$(courses[1])&lt;/taken-courses&gt;</span>
<span class="pl-c">  &lt;taken-courses&gt;$(courses[2])&lt;/taken-courses&gt;</span>
<span class="pl-c">&lt;/person&gt;</span>
<span class="pl-c"><span class="pl-c">=#</span></span>

<span class="pl-c"><span class="pl-c">#</span> Specify the template (or its path), and also the variables for rendering</span>
out <span class="pl-k">=</span><span class="pl-c1">render2file</span>(<span class="pl-s"><span class="pl-pds">"</span>person<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>,
  id <span class="pl-k">=</span> <span class="pl-c1">1</span>,
  age <span class="pl-k">=</span> <span class="pl-c1">24</span>,
  field <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Mechanical Engineering<span class="pl-pds">"</span></span>,
  GPA <span class="pl-k">=</span> <span class="pl-c1">4.5</span>,
  courses <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Artificial Intelligence<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Robotics<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> you pass `true` as the 2nd argument to overwrite person.html statically.</span></pre></div>
</article></div>