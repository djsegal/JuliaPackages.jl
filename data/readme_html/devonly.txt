<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-devonlyjl" class="anchor" aria-hidden="true" href="#devonlyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DevOnly.jl</h1>
<p dir="auto">Introduce package dependencies that are only used for development, eliminating "runtime-free" macro packages such as MLStyle.jl.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Suppose we have such a module:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyMod

using DevOnly
@devonly using MLStyle

f(x) = @match x begin
    1 =&gt; :one
    2 =&gt; :two
    _ =&gt; :other
end

end"><pre><span class="pl-k">module</span> MyMod

<span class="pl-k">using</span> DevOnly
<span class="pl-c1">@devonly</span> <span class="pl-k">using</span> MLStyle

<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">@match</span> x <span class="pl-k">begin</span>
    <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:one</span>
    <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">:two</span>
    _ <span class="pl-k">=&gt;</span> <span class="pl-c1">:other</span>
<span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">Then we create a script by copying <code>regenerate.jl</code> to the root directory of the package, and run it:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt; julia regenerate.jl"><pre><span class="pl-k">&gt;</span> julia regenerate.jl</pre></div>
<p dir="auto">Then we can use <code>MyMod</code> without including MLStyle.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.activate(&quot;.&quot;)
using MyMod

# MLStyle is not loaded!
isdefined(MyMod, :MLStyle) # =&gt; false

# but the macro works!

f(1) # :one
f(2) # :two
f(3) # :other"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> MyMod

<span class="pl-c"><span class="pl-c">#</span> MLStyle is not loaded!</span>
<span class="pl-c1">isdefined</span>(MyMod, <span class="pl-c1">:MLStyle</span>) <span class="pl-c"><span class="pl-c">#</span> =&gt; false</span>

<span class="pl-c"><span class="pl-c">#</span> but the macro works!</span>

<span class="pl-c1">f</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> :one</span>
<span class="pl-c1">f</span>(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> :two</span>
<span class="pl-c1">f</span>(<span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> :other</span></pre></div>
<h1 dir="auto"><a id="user-content-generate-compiled-files-compatible-to-early-julia-versions" class="anchor" aria-hidden="true" href="#generate-compiled-files-compatible-to-early-julia-versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generate Compiled Files Compatible to Early Julia Versions?</h1>
<p dir="auto">Change <code>regenerate.jl</code>, set <code>julia_compiler</code> to a path to an early Julia version.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia_compiler = &quot;/path/to/julia-1.5&quot;"><pre class="notranslate"><code>julia_compiler = "/path/to/julia-1.5"
</code></pre></div>
<p dir="auto">Then run <code>regenerate.jl</code> again.</p>
</article></div>