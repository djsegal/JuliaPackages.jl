<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sixelterm" class="anchor" aria-hidden="true" href="#sixelterm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SixelTerm</h1>
<p>This is a quick-and-dirty Julia package to display graphics inline on
terminals that support <a href="https://en.wikipedia.org/wiki/Sixel" rel="nofollow">Sixel</a> graphics.
This is like <a href="https://github.com/Keno/TerminalExtensions.jl">TerminalExtensions</a>
but works with more terminals.</p>
<p>The main advantage of this approach is having usable graphics on remote
connections without having to mess with X or other remote display
connections. This works for Julia running on many remote platforms,
including the Windows Subsystem for Linux (WSL). I've mainly been using
<a href="https://github.com/mintty/wsltty">WSLtty</a>.</p>
<p>Terminals with Sixel support are available for Windows, Linux, MacOS, and Android.
See <a href="https://github.com/saitoha/libsixel/blob/master/README.md#terminal-requirements">here</a>
for one list.</p>
<p>Here is an example using Plots with the default GR backend:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;GKSwstype&quot;] = &quot;nul&quot;    # needed for the GR backend on headless servers
using Plots
using SixelTerm             
scatter(rand(100))
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>GKSwstype<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>nul<span class="pl-pds">"</span></span>    <span class="pl-c"><span class="pl-c">#</span> needed for the GR backend on headless servers</span>
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> SixelTerm             
<span class="pl-c1">scatter</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>))</pre></div>
<p>Note that when using it with Plots, you have to do <code>using SixelTerm</code> after <code>using Plots</code>.
For some reason, Plots.jl adds its own display to the stack, so we need the SixelTerm
display added last.</p>
<p><a href="https://github.com/m-j-w/TerminalGraphics.jl">TerminalGraphics</a> is another package that
provides similar functionality. The main difference is that TerminalGraphics includes an
interface to libsixel, and this package relies of ImageMagick for conversion to the Sixel
format.</p>
</article></div>