<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stringutils" class="anchor" aria-hidden="true" href="#stringutils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StringUtils</h1>
<p><a href="https://travis-ci.org/ScottPJones/StringUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3585619a537140f89045d56c7f1b9cfff940412e/68747470733a2f2f7472617669732d63692e6f72672f53636f7474504a6f6e65732f537472696e675574696c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ScottPJones/StringUtils.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>The StringUtils package in a work-in-progress, where I am placing various improvements on the
String functionality in Julia language.</p>
<p>Currently, it adds a Swift style string macro, <code>u"..."</code>, which uses the Swift syntax for
interpolation, i.e. <code>\(expression)</code>.  This means that you never have to worry about strings with
the $ character in them, which is rather frequent in some applications.
Also, Unicode sequences are represented as in Swift, i.e. as <code>\u{hexdigits}</code>, where there
can be from 1 to 6 hex digits. This syntax eliminates having to worry about always outputting
4 or 8 hex digits, to prevent problems with 0-9,A-F,a-f characters immediately following.
Finally, I have added four ways of representing characters in the literal string,
<code>\:emojiname:</code>, <code>\&lt;latexname&gt;</code>, <code>\&amp;htmlname;</code> and <code>\N{UnicodeName}</code>.
This makes life a lot easier when you want to keep the text of a program in ASCII, and
also to be able to write programs using those characters that might not even display
correctly in their editor.</p>
<p>This now has some initial formatting capability, based on Tom Breloff's wonderful PR #10 to the
<a href="https://github.com/JuliaIO/Formatting.jl">JuliaIO/Formatting.jl</a> package (by Dahua Lin and other contributors).</p>
<p><code>\%(arguments)</code> is interpolated as a call to fmt(arguments).
This is especially useful when defaults have been set for the type of the first argument.</p>
<p><code>fmt_default!{T}(::Type{T}, syms::Symbol...; kwargs...)</code> sets the defaults for a particular type.
<code>fmt_default!(syms::Symbol...; kwargs...)</code> sets the defaults for all types.
Symbols that can currently be used are: <code>:ljust</code> or <code>:left</code>, <code>:rjust</code> or <code>:right</code>, <code>:commas</code>,
<code>:zpad</code> or <code>:zeropad</code>, and <code>:ipre</code> or <code>:prefix</code>.
<code>reset!{T}(::Type{T})</code> resets the defaults for a particular type.
<code>defaultSpec(x)</code> will return the defaults for the type of x, and
<code>defaultSpec{T}(::Type{T})</code> will return the defaults for the given type.</p>
<p>This also adds support for <code>\%ccc(arguments)</code>, where ccc is one or more characters of a
single C style format specification, which is interpolated as a call to cfmt("ccc", arguments).</p>
<p>I'm also experimenting with adding Python style syntax (as much as possible), as
u"{pythonformat}"</p>
</article></div>