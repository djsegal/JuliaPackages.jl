<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://avatars.githubusercontent.com/u/58918144?s=200&amp;v=4"><img align="right" width="180px" src="https://avatars.githubusercontent.com/u/58918144?s=200&amp;v=4" style="max-width:100%;"></a></p>

<h1><a id="user-content-probabilisticcircuitsjl" class="anchor" aria-hidden="true" href="#probabilisticcircuitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ProbabilisticCircuits.jl</h1>
<p><a href="https://github.com/Juice-jl/ProbabilisticCircuits.jl/actions?query=workflow%3A%22Unit+Tests%22+branch%3Amaster"><img src="https://github.com/Juice-jl/ProbabilisticCircuits.jl/workflows/Unit%20Tests/badge.svg" alt="Unit Tests" style="max-width:100%;"></a>  <a href="https://codecov.io/gh/Juice-jl/ProbabilisticCircuits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c04386375a658ef6eb9e8f02905aefd0f215c17c93d9bde5924df77ea9f70c6a/68747470733a2f2f636f6465636f762e696f2f67682f4a756963652d6a6c2f50726f626162696c697374696343697263756974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Juice-jl/ProbabilisticCircuits.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a> <a href="https://juice-jl.github.io/ProbabilisticCircuits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/553e88c7c3cd9035e8ec133c22bcdf30cdfa475407b847deb507eb8dd6c1ee3c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width:100%;"></a> <a href="https://juice-jl.github.io/ProbabilisticCircuits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>This package provides functionalities for learning/constructing probabilistic circuits and using them to compute various probabilistic queries. It is part of the <a href="https://github.com/Juice-jl">Juice package</a> (Julia Circuit Empanada).</p>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h2>
<p>Assuming that the ProbabilisticCircuits Julia package has been installed with <code>julia -e 'using Pkg; Pkg.add("ProbabilisticCircuits")'</code>, we can start using it as follows.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ProbabilisticCircuits
"><pre><span class="pl-k">using</span> ProbabilisticCircuits</pre></div>
<h3><a id="user-content-reasoning-with-manually-constructed-circuits" class="anchor" aria-hidden="true" href="#reasoning-with-manually-constructed-circuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reasoning with manually constructed circuits</h3>
<p>We begin by creating three positive literals (boolean variables) and manually construct a probabilistic circuit that encodes a Naive Bayes (NB) distribution with the following form: <code>Pr(rain, rainbow, wet) = Pr(rain) * Pr(rainbow|rain) * Pr(wet|rain)</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="rain, rainbow, wet = pos_literals(ProbCircuit, 3)
rain_pos = (0.7 * rainbow + 0.3 * (-rainbow)) * (0.9 * wet + 0.1 * (-wet)) # Pr(rainbow|rain=1) * Pr(wet|rain=1)
rain_neg = (0.2 * rainbow + 0.8 * (-rainbow)) * (0.3 * wet + 0.7 * (-wet)) # Pr(rainbow|rain=0) * Pr(wet|rain=0)
circuit = 0.4 * (rain * rain_pos) + 0.6 * ((-rain) * rain_neg); # Pr(rain, rainbow, wet)
"><pre>rain, rainbow, wet <span class="pl-k">=</span> <span class="pl-c1">pos_literals</span>(ProbCircuit, <span class="pl-c1">3</span>)
rain_pos <span class="pl-k">=</span> (<span class="pl-c1">0.7</span> <span class="pl-k">*</span> rainbow <span class="pl-k">+</span> <span class="pl-c1">0.3</span> <span class="pl-k">*</span> (<span class="pl-k">-</span>rainbow)) <span class="pl-k">*</span> (<span class="pl-c1">0.9</span> <span class="pl-k">*</span> wet <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> (<span class="pl-k">-</span>wet)) <span class="pl-c"><span class="pl-c">#</span> Pr(rainbow|rain=1) * Pr(wet|rain=1)</span>
rain_neg <span class="pl-k">=</span> (<span class="pl-c1">0.2</span> <span class="pl-k">*</span> rainbow <span class="pl-k">+</span> <span class="pl-c1">0.8</span> <span class="pl-k">*</span> (<span class="pl-k">-</span>rainbow)) <span class="pl-k">*</span> (<span class="pl-c1">0.3</span> <span class="pl-k">*</span> wet <span class="pl-k">+</span> <span class="pl-c1">0.7</span> <span class="pl-k">*</span> (<span class="pl-k">-</span>wet)) <span class="pl-c"><span class="pl-c">#</span> Pr(rainbow|rain=0) * Pr(wet|rain=0)</span>
circuit <span class="pl-k">=</span> <span class="pl-c1">0.4</span> <span class="pl-k">*</span> (rain <span class="pl-k">*</span> rain_pos) <span class="pl-k">+</span> <span class="pl-c1">0.6</span> <span class="pl-k">*</span> ((<span class="pl-k">-</span>rain) <span class="pl-k">*</span> rain_neg); <span class="pl-c"><span class="pl-c">#</span> Pr(rain, rainbow, wet)</span></pre></div>
<p>Just like any probability distribution, we can evaluate the probabilistic circuit on various inputs. Note that since log probabilities are used in probabilistic circuits for numerical stability, we need to take exponent of the evaluation output to get the probabilities.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="exp(circuit(true, true, true)) # Pr(rain=1, rainbow=1, wet=1)
"><pre><span class="pl-c1">exp</span>(<span class="pl-c1">circuit</span>(<span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>)) <span class="pl-c"><span class="pl-c">#</span> Pr(rain=1, rainbow=1, wet=1)</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="0.252f0
"><pre><code>0.252f0
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="exp(circuit(true, false, false)) # Pr(rain=1, rainbow=0, wet=0)
"><pre><span class="pl-c1">exp</span>(<span class="pl-c1">circuit</span>(<span class="pl-c1">true</span>, <span class="pl-c1">false</span>, <span class="pl-c1">false</span>)) <span class="pl-c"><span class="pl-c">#</span> Pr(rain=1, rainbow=0, wet=0)</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="0.011999999f0
"><pre><code>0.011999999f0
</code></pre></div>
<p>From the above examples, we see that it is less likely to rain if we do not see rainbows and the streets are not wet.</p>
<p>The purpose of this package is to offer a unified tool for efficient learning and inference (i.e., answering probabilistic queries such as marginals and MAP) over probabilistic circuits, which subsume a large class of tractable probabilistic models. We first use the above manually constructed circuit to demonstrate several queries that can be answered efficiently. Similar to <a href="https://github.com/Juice-jl/LogicCircuits.jl">logic circuits</a>, answering the following queries require <em>decomposability</em> and <em>determinism</em>, which is already satisfied by construction:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="isdecomposable(circuit) &amp;&amp; isdeterministic(circuit)
"><pre><span class="pl-c1">isdecomposable</span>(circuit) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">isdeterministic</span>(circuit)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="true
"><pre><code>true
</code></pre></div>
<p>Decomposability allows us to compute marginal probabilities given partial evidence efficiently (linear time w.r.t. the circuit size). For example, we want to ask the probability of observing rainbows. That is, we want to marginalize out the variables rain and wet. This can be done by evaluating the circuit with partial evidence:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="exp(circuit(missing, true, missing)) # Pr(rainbow=1)
"><pre><span class="pl-c1">exp</span>(<span class="pl-c1">circuit</span>(<span class="pl-c1">missing</span>, <span class="pl-c1">true</span>, <span class="pl-c1">missing</span>)) <span class="pl-c"><span class="pl-c">#</span> Pr(rainbow=1)</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="0.39999998f0
"><pre><code>0.39999998f0
</code></pre></div>
<p>Being able to compute marginals immediately offers the ability to compute conditional probabilities. For example, to compute the probability of raining given rainbow=1 and wet=1, we simply take the quotient of Pr(rain=1, rainbow=1, wet=1) and Pr(rainbow=1, wet=1):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="exp(circuit(true, true, true) - circuit(missing, true, true)) # Pr(rain=1|rainbow=1, wet=1)
"><pre><span class="pl-c1">exp</span>(<span class="pl-c1">circuit</span>(<span class="pl-c1">true</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>) <span class="pl-k">-</span> <span class="pl-c1">circuit</span>(<span class="pl-c1">missing</span>, <span class="pl-c1">true</span>, <span class="pl-c1">true</span>)) <span class="pl-c"><span class="pl-c">#</span> Pr(rain=1|rainbow=1, wet=1)</span></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="0.87500006f0
"><pre><code>0.87500006f0
</code></pre></div>
<p>If we are additionally supplied with the structural property <em>determinism</em>, we can answer some more advanced queries. For example, we can to compute the maximum a posteriori (MAP) query of the distribution:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="assignments, log_prob = MAP(circuit, [missing, missing, missing])
print(&quot;The MAP assignment of the circuit is (rain=$(assignments[1]), rainbow=$(assignments[2]), wet=$(assignments[3])), with probability $(exp(log_prob)).&quot;)
"><pre>assignments, log_prob <span class="pl-k">=</span> <span class="pl-c1">MAP</span>(circuit, [<span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>, <span class="pl-c1">missing</span>])
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>The MAP assignment of the circuit is (rain=<span class="pl-v">$(assignments[<span class="pl-c1">1</span>])</span>, rainbow=<span class="pl-v">$(assignments[<span class="pl-c1">2</span>])</span>, wet=<span class="pl-v">$(assignments[<span class="pl-c1">3</span>])</span>), with probability <span class="pl-v">$(<span class="pl-c1">exp</span>(log_prob))</span>.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="The MAP assignment of the circuit is (rain=false, rainbow=false, wet=false), with probability 0.336.
"><pre><code>The MAP assignment of the circuit is (rain=false, rainbow=false, wet=false), with probability 0.336.
</code></pre></div>
<p>Besides the above examples, ProbabilisticCircuits.jl provides functionalities for a wide variety of queries, which are detailed in <a href="https://juice-jl.github.io/ProbabilisticCircuits.jl/stable/manual/queries/" rel="nofollow">this manual</a>.</p>
<h3><a id="user-content-building-complex-circuit-structures" class="anchor" aria-hidden="true" href="#building-complex-circuit-structures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Building complex circuit structures</h3>
<p>ProbabilisticCircuits.jl provides tools to compile classic Probabilistic Graphical Models (PGMs) and Tractable Probabilistic Models (TPMs) into probabilistic circuits efficiently. For example, we can compile a factor graph (FG) into a probabilistic circuit with one line of code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="fg = fromUAI(zoo_fg_file(&quot;asia.uai&quot;)) # Load example factor graph
fg_circuit = ProbCircuit(compile_factor_graph(fg)[1]) # Compile the FG to a PC
print(&quot;`fg_circuit` contains $(num_edges(fg_circuit)) edges and $(num_parameters(fg_circuit)) parameters.&quot;)
"><pre>fg <span class="pl-k">=</span> <span class="pl-c1">fromUAI</span>(<span class="pl-c1">zoo_fg_file</span>(<span class="pl-s"><span class="pl-pds">"</span>asia.uai<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> Load example factor graph</span>
fg_circuit <span class="pl-k">=</span> <span class="pl-c1">ProbCircuit</span>(<span class="pl-c1">compile_factor_graph</span>(fg)[<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> Compile the FG to a PC</span>
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>`fg_circuit` contains <span class="pl-v">$(<span class="pl-c1">num_edges</span>(fg_circuit))</span> edges and <span class="pl-v">$(<span class="pl-c1">num_parameters</span>(fg_circuit))</span> parameters.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="`fg_circuit` contains 2554 edges and 320 parameters.
"><pre><code>`fg_circuit` contains 2554 edges and 320 parameters.
</code></pre></div>
<h3><a id="user-content-learning-probabilistic-circuits-from-data" class="anchor" aria-hidden="true" href="#learning-probabilistic-circuits-from-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Learning probabilistic circuits from data</h3>
<p>ProbabilisticCircuits.jl offers various parameter learning and structure learning algorithms. It further support mini-batch learning on both CPUs and GPUs, which makes learning large models from large datasets very efficient.</p>
<p>We use the binarized MNIST dataset to demonstrate example probabilistic circuit learning functionalities.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="train_data, valid_data, test_data = twenty_datasets(&quot;binarized_mnist&quot;);
"><pre>train_data, valid_data, test_data <span class="pl-k">=</span> <span class="pl-c1">twenty_datasets</span>(<span class="pl-s"><span class="pl-pds">"</span>binarized_mnist<span class="pl-pds">"</span></span>);</pre></div>
<p>We start with learning the parameters of a <em>decomposable</em> and <em>deterministic</em> probabilistic circuit. We first load the structure of the circuit from file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="circuit = zoo_psdd(&quot;mnist.psdd&quot;)
print(&quot;The loaded circuit contains $(num_edges(circuit)) edges and $(num_parameters(circuit)) parameters.&quot;)
"><pre>circuit <span class="pl-k">=</span> <span class="pl-c1">zoo_psdd</span>(<span class="pl-s"><span class="pl-pds">"</span>mnist.psdd<span class="pl-pds">"</span></span>)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>The loaded circuit contains <span class="pl-v">$(<span class="pl-c1">num_edges</span>(circuit))</span> edges and <span class="pl-v">$(<span class="pl-c1">num_parameters</span>(circuit))</span> parameters.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="The loaded circuit contains 11280 edges and 5364 parameters.
"><pre><code>The loaded circuit contains 11280 edges and 5364 parameters.
</code></pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="print(&quot;Structural properties of the circuit: decomposability: $(isdecomposable(circuit)), determinism: $(isdeterministic(circuit)).&quot;)
"><pre><span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Structural properties of the circuit: decomposability: <span class="pl-v">$(<span class="pl-c1">isdecomposable</span>(circuit))</span>, determinism: <span class="pl-v">$(<span class="pl-c1">isdeterministic</span>(circuit))</span>.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Structural properties of the circuit: decomposability: true, determinism: true.
"><pre><code>Structural properties of the circuit: decomposability: true, determinism: true.
</code></pre></div>
<p>Given that the circuit is decomposable and deterministic, the maximum likelihood estimation (MLE) of its parameters is in closed-form. That is, we can learn the MLE parameters deterministically:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = @elapsed estimate_parameters(circuit, train_data; pseudocount = 0.1)
print(&quot;Learning the parameters on a CPU took $(t) seconds.&quot;)
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">estimate_parameters</span>(circuit, train_data; pseudocount <span class="pl-k">=</span> <span class="pl-c1">0.1</span>)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Learning the parameters on a CPU took <span class="pl-v">$(t)</span> seconds.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Learning the parameters on a CPU took 0.243524592 seconds.
"><pre><code>Learning the parameters on a CPU took 0.243524592 seconds.
</code></pre></div>
<p>Optionally, we can use GPUs to speedup the learning process:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t = @elapsed estimate_parameters(circuit, train_data; pseudocount = 0.1, use_gpu = true)
print(&quot;Learning the parameters on a GPU took $(t) seconds.&quot;)
"><pre>t <span class="pl-k">=</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">estimate_parameters</span>(circuit, train_data; pseudocount <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, use_gpu <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Learning the parameters on a GPU took <span class="pl-v">$(t)</span> seconds.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Learning the parameters on a GPU took 0.032219275 seconds.
"><pre><code>Learning the parameters on a GPU took 0.032219275 seconds.
</code></pre></div>
<p>Note that the insignificant speedup is due to the fact that the circuit is too small to make full use of the GPU. For large circuits the speedup could be at least ~10x.</p>
<p>After the learning process, we can evaluate the model on the validation/test dataset. Here we use average log-likelihood per sample as the metric (we again utilize GPUs for efficiency):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="avg_ll = log_likelihood_avg(circuit, test_data)
print(&quot;The average test data log-likelihood is $(avg_ll).&quot;)
"><pre>avg_ll <span class="pl-k">=</span> <span class="pl-c1">log_likelihood_avg</span>(circuit, test_data)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>The average test data log-likelihood is <span class="pl-v">$(avg_ll)</span>.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="The average test data log-likelihood is -137.59309172113964.
"><pre><code>The average test data log-likelihood is -137.59309172113964.
</code></pre></div>
<p>Besides <code>estimate_parameters</code>, ProbabilisticCircuits.jl offers iterative parameter learning algorithms such as Expectation-Maximization (EM) (i.e., <code>estimate_parameters_em</code>) and Stochastic Gradient Descent (SGD) (i.e., <code>sgd_parameter_learning</code>).</p>
<p>ProbabilisticCircuits.jl also offers functionalities for learning the circuit structure and parameters simultaneously. For example, the Strudel structure learning algorithm is implemented natively in the package, and can be used with a few lines of code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="circuit_strudel = learn_circuit(train_data; maxiter = 100, verbose = false)
avg_ll = log_likelihood_avg(circuit_strudel, test_data)
print(&quot;The learned circuit contains $(num_edges(circuit)) edges and $(num_parameters(circuit)) parameters.\n&quot;)
print(&quot;The average test data log-likelihood is $(avg_ll).&quot;)
"><pre>circuit_strudel <span class="pl-k">=</span> <span class="pl-c1">learn_circuit</span>(train_data; maxiter <span class="pl-k">=</span> <span class="pl-c1">100</span>, verbose <span class="pl-k">=</span> <span class="pl-c1">false</span>)
avg_ll <span class="pl-k">=</span> <span class="pl-c1">log_likelihood_avg</span>(circuit_strudel, test_data)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>The learned circuit contains <span class="pl-v">$(<span class="pl-c1">num_edges</span>(circuit))</span> edges and <span class="pl-v">$(<span class="pl-c1">num_parameters</span>(circuit))</span> parameters.<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>The average test data log-likelihood is <span class="pl-v">$(avg_ll)</span>.<span class="pl-pds">"</span></span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="The learned circuit contains 11280 edges and 5364 parameters.
The average test data log-likelihood is -134.9860031603151.
"><pre><code>The learned circuit contains 11280 edges and 5364 parameters.
The average test data log-likelihood is -134.9860031603151.
</code></pre></div>
<h2><a id="user-content-testing" class="anchor" aria-hidden="true" href="#testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testing</h2>
<p>To make sure everything is working correctly, you can run our test suite as follows. The first time you run the tests will trigger a few slow downloads of various test resources.</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia --color=yes -e 'using Pkg; Pkg.test(&quot;ProbabilisticCircuits&quot;)'
"><pre>julia --color=yes -e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.test("ProbabilisticCircuits")<span class="pl-pds">'</span></span></pre></div>
</article></div>