<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="https://github.com/Wikunia/ConstraintSolver.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/Wikunia/ConstraintSolver.jl/workflows/Run%20tests/badge.svg" alt="Build status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/Wikunia/ConstraintSolver.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4b8d44f2cb34524a0a773cdf2913ebfe973f25d90d4ba858509bd8b319320ad2/68747470733a2f2f636f6465636f762e696f2f67682f57696b756e69612f436f6e73747261696e74536f6c7665722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Wikunia/ConstraintSolver.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://wikunia.github.io/ConstraintSolver.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://wikunia.github.io/ConstraintSolver.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-constraintsolverjl" class="anchor" aria-hidden="true" href="#constraintsolverjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ConstraintSolver.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/4931746/83681097-2c247480-a5e2-11ea-9301-0c46726dea25.png"><img src="https://user-images.githubusercontent.com/4931746/83681097-2c247480-a5e2-11ea-9301-0c46726dea25.png" alt="Logo" style="max-width:100%;"></a></p>
<p>This package aims to be a constraint solver completely written in Julia. The concepts are more or less fully described on my blog <a href="https://opensourc.es/blog/constraint-solver-1" rel="nofollow">OpenSourc.es</a>.
There is of course also the general user manual <a href="https://wikunia.github.io/ConstraintSolver.jl/stable" rel="nofollow">here</a> which explains how to solve your model.</p>
<h2><a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Goals</h2>
<ul>
<li>Easily extendable</li>
<li>Teaching/Learning about constraint programming</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You can install this julia package using
<code>] add ConstraintSolver</code> or if you want to change code you might want to use
<code>] dev ConstraintSolver</code>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>You can easily use this package with the same modeling package as you might be used to for solving (non)linear problems in Julia: <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a>.</p>
<h3><a id="user-content-sudoku" class="anchor" aria-hidden="true" href="#sudoku"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sudoku</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JuMP

grid = [6 0 2 0 5 0 0 0 0;
        0 0 0 0 0 3 0 4 0;
        0 0 0 0 0 0 0 0 0;
        4 3 0 0 0 8 0 0 0;
        0 1 0 0 0 0 2 0 0;
        0 0 0 0 0 0 7 0 0;
        5 0 0 2 7 0 0 0 0;
        0 0 0 0 0 0 0 8 1;
        0 0 0 6 0 0 0 0 0]

using ConstraintSolver
# define a shorter name ;)
const CS = ConstraintSolver

# creating a constraint solver model and setting ConstraintSolver as the optimizer.
m = Model(CS.Optimizer) 
# define the 81 variables
@variable(m, 1 &lt;= x[1:9,1:9] &lt;= 9, Int)
# set variables if fixed
for r=1:9, c=1:9
    if grid[r,c] != 0
        @constraint(m, x[r,c] == grid[r,c])
    end
end

for rc = 1:9
    @constraint(m, x[rc,:] in CS.AllDifferentSet())
    @constraint(m, x[:,rc] in CS.AllDifferentSet())
end

for br=0:2
    for bc=0:2
        @constraint(m, vec(x[br*3+1:(br+1)*3,bc*3+1:(bc+1)*3]) in CS.AllDifferentSet())
    end
end

optimize!(m)

# retrieve grid
grid = convert.(Int, JuMP.value.(x))
"><pre><span class="pl-k">using</span> JuMP

grid <span class="pl-k">=</span> [<span class="pl-c1">6</span> <span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">5</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">3</span> <span class="pl-c1">0</span> <span class="pl-c1">4</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">4</span> <span class="pl-c1">3</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">8</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">7</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">5</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">7</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">8</span> <span class="pl-c1">1</span>;
        <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">6</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">0</span>]

<span class="pl-k">using</span> ConstraintSolver
<span class="pl-c"><span class="pl-c">#</span> define a shorter name ;)</span>
<span class="pl-k">const</span> CS <span class="pl-k">=</span> ConstraintSolver

<span class="pl-c"><span class="pl-c">#</span> creating a constraint solver model and setting ConstraintSolver as the optimizer.</span>
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(CS<span class="pl-k">.</span>Optimizer) 
<span class="pl-c"><span class="pl-c">#</span> define the 81 variables</span>
<span class="pl-c1">@variable</span>(m, <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">9</span>, Int)
<span class="pl-c"><span class="pl-c">#</span> set variables if fixed</span>
<span class="pl-k">for</span> r<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>, c<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>
    <span class="pl-k">if</span> grid[r,c] <span class="pl-k">!=</span> <span class="pl-c1">0</span>
        <span class="pl-c1">@constraint</span>(m, x[r,c] <span class="pl-k">==</span> grid[r,c])
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">for</span> rc <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">9</span>
    <span class="pl-c1">@constraint</span>(m, x[rc,:] <span class="pl-k">in</span> CS<span class="pl-k">.</span><span class="pl-c1">AllDifferentSet</span>())
    <span class="pl-c1">@constraint</span>(m, x[:,rc] <span class="pl-k">in</span> CS<span class="pl-k">.</span><span class="pl-c1">AllDifferentSet</span>())
<span class="pl-k">end</span>

<span class="pl-k">for</span> br<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>
    <span class="pl-k">for</span> bc<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>
        <span class="pl-c1">@constraint</span>(m, <span class="pl-c1">vec</span>(x[br<span class="pl-k">*</span><span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>(br<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">3</span>,bc<span class="pl-k">*</span><span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">1</span><span class="pl-k">:</span>(bc<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span><span class="pl-c1">3</span>]) <span class="pl-k">in</span> CS<span class="pl-k">.</span><span class="pl-c1">AllDifferentSet</span>())
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">optimize!</span>(m)

<span class="pl-c"><span class="pl-c">#</span> retrieve grid</span>
grid <span class="pl-k">=</span> <span class="pl-c1">convert</span>.(Int, JuMP<span class="pl-k">.</span><span class="pl-c1">value</span>.(x))</pre></div>
<h2><a id="user-content-supported-variables-and-constraints" class="anchor" aria-hidden="true" href="#supported-variables-and-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported variables and constraints</h2>
<p>You can see a list of currently supported constraints <a href="https://wikunia.github.io/ConstraintSolver.jl/stable/supported/" rel="nofollow">in the docs</a>.
In general the solver works only with bounded discrete variables and supports these constraints</p>
<ul>
<li>linear constraints</li>
<li>all different</li>
<li>table</li>
<li>indictoar</li>
<li>reified</li>
<li>boolean</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>A list of example problems can be found on the website by <a href="http://hakank.org/julia/constraints/" rel="nofollow">Håkan Kjellerstrand</a>.</p>
<h2><a id="user-content-blog-posts" class="anchor" aria-hidden="true" href="#blog-posts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Blog posts</h2>
<p>If you're interested in how the solver works you can checkout my blog <a href="https://opensourc.es" rel="nofollow">opensourc.es</a>. There are currently around 30 blog posts about the constraint solver and a new one is added about once per month.</p>
<h2><a id="user-content-notice" class="anchor" aria-hidden="true" href="#notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notice</h2>
<p>I'm a MSc student in computer science so I don't have much knowledge on how constraint programming works but I'm keen to find out ;)</p>
<h2><a id="user-content-support" class="anchor" aria-hidden="true" href="#support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Support</h2>
<p>If you find a bug or improvement please open an issue or make a pull request.
Additionally if you use the solver regularly or are interested in further development please checkout my <a href="https://www.patreon.com/opensources" rel="nofollow">Patreon</a> page or click on the support button at the top of this website. ;)</p>
</article></div>