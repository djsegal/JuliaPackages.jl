<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dataknotsjl" class="anchor" aria-hidden="true" href="#dataknotsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DataKnots.jl</h1>
<p><em>DataKnots is a Julia library for querying data with
an extensible, practical and coherent algebra of query
combinators.</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Process</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://mechanicalrabbit.github.io/DataKnots.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/553e88c7c3cd9035e8ec133c22bcdf30cdfa475407b847deb507eb8dd6c1ee3c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="Stable Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width:100%;"></a> <a href="https://mechanicalrabbit.github.io/DataKnots.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Development Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/MechanicalRabbit/DataKnots.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/MechanicalRabbit/DataKnots.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/MechanicalRabbit/DataKnots.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/456fd851d032c269564771799eaccd30b2b89afab67c4ebee38893f70ed3bde9/68747470733a2f2f636f6465636f762e696f2f67682f4d656368616e6963616c5261626269742f446174614b6e6f74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Code Coverage Status" data-canonical-src="https://codecov.io/gh/MechanicalRabbit/DataKnots.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://julialang.zulipchat.com/#narrow/stream/247484-dataknots.2Ejl" rel="nofollow"><img src="https://camo.githubusercontent.com/79870c182a82f89b1415d1c14a5a58425743d91949f430723d2426a36da3f6c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6a756c69612d2d7a756c69702d626c7565" alt="Chat on Zulip" data-canonical-src="https://img.shields.io/badge/chat-julia--zulip-blue" style="max-width:100%;"></a> <a href="https://github.com/MechanicalRabbit/DataKnots.jl/issues"><img src="https://camo.githubusercontent.com/41251c99ca2afd5651f66fd1691bf7679b1ed1f9b4cfa1d80e70671947fc0d1c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4d656368616e6963616c5261626269742f446174614b6e6f74732e6a6c2e737667" alt="Open Issues" data-canonical-src="https://img.shields.io/github/issues/MechanicalRabbit/DataKnots.jl.svg" style="max-width:100%;"></a> <a href="https://raw.githubusercontent.com/MechanicalRabbit/DataKnots.jl/master/LICENSE.md" rel="nofollow"><img src="https://camo.githubusercontent.com/992daabc2aa4463339825f8333233ba330dd08c57068f6faf4bb598ab5a3df2e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667" alt="MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>DataKnots is designed to let data analysts and other
accidental programmers query and analyze complex
structured data.</p>
<h2><a id="user-content-showcase" class="anchor" aria-hidden="true" href="#showcase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Showcase</h2>
<p>Let's take some Chicago public data and convert it
into a <code>DataKnot</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using DataKnots, CSV

employee_csv_file = &quot;&quot;&quot;
    name,department,position,salary
    &quot;JEFFERY A&quot;,&quot;POLICE&quot;,&quot;SERGEANT&quot;,101442
    &quot;NANCY A&quot;,&quot;POLICE&quot;,&quot;POLICE OFFICER&quot;,80016
    &quot;JAMES A&quot;,&quot;FIRE&quot;,&quot;FIRE ENGINEER-EMT&quot;,103350
    &quot;DANIEL A&quot;,&quot;FIRE&quot;,&quot;FIRE FIGHTER-EMT&quot;,95484
    &quot;BRENDA B&quot;,&quot;OEMC&quot;,&quot;TRAFFIC CONTROL AIDE&quot;,64392
    &quot;&quot;&quot; |&gt; IOBuffer |&gt; CSV.File

chicago = DataKnot(:employee =&gt; employee_csv_file)
"><pre><code>using DataKnots, CSV

employee_csv_file = """
    name,department,position,salary
    "JEFFERY A","POLICE","SERGEANT",101442
    "NANCY A","POLICE","POLICE OFFICER",80016
    "JAMES A","FIRE","FIRE ENGINEER-EMT",103350
    "DANIEL A","FIRE","FIRE FIGHTER-EMT",95484
    "BRENDA B","OEMC","TRAFFIC CONTROL AIDE",64392
    """ |&gt; IOBuffer |&gt; CSV.File

chicago = DataKnot(:employee =&gt; employee_csv_file)
</code></pre></div>
<p>We could then query this data to return employees with
salaries greater than their department's average.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Statistics: mean

@query chicago begin
    employee
    group(department)
    keep(avg_salary =&gt; mean(employee.salary))
    employee
    filter(salary &gt; avg_salary)
end
#=&gt;
  │ employee                                         │
  │ name       department  position           salary │
──┼──────────────────────────────────────────────────┼
1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
2 │ JEFFERY A  POLICE      SERGEANT           101442 │
=#
"><pre><code>using Statistics: mean

@query chicago begin
    employee
    group(department)
    keep(avg_salary =&gt; mean(employee.salary))
    employee
    filter(salary &gt; avg_salary)
end
#=&gt;
  │ employee                                         │
  │ name       department  position           salary │
──┼──────────────────────────────────────────────────┼
1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
2 │ JEFFERY A  POLICE      SERGEANT           101442 │
=#
</code></pre></div>
<p>In this example, nouns, such as <code>employee</code>, <code>department</code> and
<code>salary</code>, are <em>query primitives</em>. The verbs, such as <code>group</code>,
<code>keep</code>, <code>mean</code> and <code>filter</code> are <em>query combinators</em>. Query
expressions, such as <code>group(department)</code>, are built from
existing queries by applying these combinators.</p>
<p>Queries could also be constructed with pure Julia code,
without using macros. The query above could be
equivalently written:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Statistics: mean

chicago[It.employee &gt;&gt;
        Group(It.department) &gt;&gt;
        Keep(:avg_salary =&gt; mean.(It.employee.salary)) &gt;&gt;
        It.employee &gt;&gt;
        Filter(It.salary .&gt; It.avg_salary)]
#=&gt;
  │ employee                                         │
  │ name       department  position           salary │
──┼──────────────────────────────────────────────────┼
1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
2 │ JEFFERY A  POLICE      SERGEANT           101442 │
=#
"><pre><code>using Statistics: mean

chicago[It.employee &gt;&gt;
        Group(It.department) &gt;&gt;
        Keep(:avg_salary =&gt; mean.(It.employee.salary)) &gt;&gt;
        It.employee &gt;&gt;
        Filter(It.salary .&gt; It.avg_salary)]
#=&gt;
  │ employee                                         │
  │ name       department  position           salary │
──┼──────────────────────────────────────────────────┼
1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
2 │ JEFFERY A  POLICE      SERGEANT           101442 │
=#
</code></pre></div>
<h2><a id="user-content-objectives" class="anchor" aria-hidden="true" href="#objectives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Objectives</h2>
<p>DataKnots implements an algebraic query interface of
<a href="https://arxiv.org/abs/1702.08409" rel="nofollow">Query Combinators</a>. This algebra’s elements, or queries,
represent relationships among class entities and data
types. This algebra’s operations, or combinators, are
applied to construct query expressions.</p>
<p>We seek to prove that this query algebra has
significant advantages over the state of the art:</p>
<ul>
<li>
<p>DataKnots is a practical alternative to SQL with
a declarative syntax; this makes it suitable for
use by domain experts.</p>
</li>
<li>
<p>DataKnots' data model handles nested and recursive
structures (unlike DataFrames or SQL); this makes
it suitable for working with CSV, JSON, XML, and
SQL databases.</p>
</li>
<li>
<p>DataKnots has a formal semantic model based upon
monadic composition; this makes it easy to reason
about the structure and interpretation of queries.</p>
</li>
<li>
<p>DataKnots is a combinator algebra (like XPath but
unlike LINQ or SQL); this makes it easier to assemble
queries dynamically.</p>
</li>
<li>
<p>DataKnots is fully extensible with Julia; this makes
it possible to specialize it into various domain
specific query languages.</p>
</li>
</ul>
<h2><a id="user-content-support" class="anchor" aria-hidden="true" href="#support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Support</h2>
<p>At this time, while we welcome feedback and contributions,
DataKnots is not yet usable for general audiences.</p>
<p>Our development chat is currently hosted on Zulip:
<a href="https://julialang.zulipchat.com/#narrow/stream/247484-dataknots.2Ejl" rel="nofollow">https://julialang.zulipchat.com/#narrow/stream/247484-dataknots.2Ejl</a></p>
<p>Current documentation could be found at:
<a href="https://mechanicalrabbit.github.io/DataKnots.jl/stable/" rel="nofollow">https://mechanicalrabbit.github.io/DataKnots.jl/stable/</a></p>
</article></div>