<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gofish" class="anchor" aria-hidden="true" href="#gofish"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GoFish</h1>
<p dir="auto">GoFish.jl is a Julia package for playing and simulating the card game Go Fish.</p>
<h1 dir="auto"><a id="user-content-installing-gofishjl" class="anchor" aria-hidden="true" href="#installing-gofishjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing GoFish.jl</h1>
<p dir="auto">To install GoFish.jl, enter the following into the REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add https://github.com/itsdfish/GoFish.jl"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>itsdfish<span class="pl-k">/</span>GoFish<span class="pl-k">.</span>jl</pre></div>
<h1 dir="auto"><a id="user-content-playing-go-fish" class="anchor" aria-hidden="true" href="#playing-go-fish"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Playing Go Fish</h1>
<p dir="auto">You can play Go Fish interactively within the Julia REPL using the keyboard. Interactive play requires creating a dictionary of players, a game object, and passing both to the play function. The human player must be a <code>Human</code>, but the other players can be any subtype of <code>AbstractPlayer</code>. The following example shows how to play interactively through the REPL. In this example, your opponents are <a href="https://youtu.be/X2CzeRaZrYc?t=4" rel="nofollow">Bernice and Joy</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GoFish
ids = (:you, :Bernice,:Joy)
types = (Human,Player,Player)
players = Dict(id =&gt; t(;id) for (t,id) in zip(types,ids))
game = PlayGame(;ids = ids)
play(game, players)"><pre><span class="pl-k">using</span> GoFish
ids <span class="pl-k">=</span> (<span class="pl-c1">:you</span>, <span class="pl-c1">:Bernice</span>,<span class="pl-c1">:Joy</span>)
types <span class="pl-k">=</span> (Human,Player,Player)
players <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(id <span class="pl-k">=&gt;</span> <span class="pl-c1">t</span>(;id) <span class="pl-k">for</span> (t,id) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(types,ids))
game <span class="pl-k">=</span> <span class="pl-c1">PlayGame</span>(;ids <span class="pl-k">=</span> ids)
<span class="pl-c1">play</span>(game, players)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="resources/GoFish.gif"><img src="resources/GoFish.gif" data-animated-image="" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-running-a-simulation" class="anchor" aria-hidden="true" href="#running-a-simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running a Simulation</h1>
<p dir="auto">Simulating Go Fish requires a dictionary of players, and a game object. Players must be a subtype of <code>AbstractPlayer</code>. If using heterogenous types, use a dictionary of type <code>Dict{I,Union{T1,..}}</code> to improve performance. The following code is a minimum working example of a simulation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GoFish
ids = (:Penelope,:Manuel,:Beelzebub)
players = Dict(id =&gt; Player(;id) for id in ids)
game = Game(ids)
deal!(game, players)
simulate!(game, players)"><pre><span class="pl-k">using</span> GoFish
ids <span class="pl-k">=</span> (<span class="pl-c1">:Penelope</span>,<span class="pl-c1">:Manuel</span>,<span class="pl-c1">:Beelzebub</span>)
players <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(id <span class="pl-k">=&gt;</span> <span class="pl-c1">Player</span>(;id) <span class="pl-k">for</span> id <span class="pl-k">in</span> ids)
game <span class="pl-k">=</span> <span class="pl-c1">Game</span>(ids)
<span class="pl-c1">deal!</span>(game, players)
<span class="pl-c1">simulate!</span>(game, players)</pre></div>
<p dir="auto">The outcome of the simulation can be found with <code>game.books</code>.</p>
<h1 dir="auto"><a id="user-content-creating-a-custom-player" class="anchor" aria-hidden="true" href="#creating-a-custom-player"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating a Custom Player</h1>
<p dir="auto">GoFish.jl allows you to create a player with custom behavior. The process involves creating a new subtype of <code>AbstractPlayer</code> and defining a decision method and four optional methods for setup and tracking the exchange of cards.</p>
<p dir="auto">At minimum the custom subtype requires a field <code>id</code> and <code>cards</code>. Additional fields can be included as needed.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct MyPlayer{T} &lt;: AbstractPlayer
    id::T
    cards::Vector{Card}
end"><pre><span class="pl-k">mutable struct</span> MyPlayer{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractPlayer</span>
    id<span class="pl-k">::</span><span class="pl-c1">T</span>
    cards<span class="pl-k">::</span><span class="pl-c1">Vector{Card}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The decision logic of the player is written in the method <code>decide</code>. This method receives the player object, and a set of player ids. <code>decide</code> must return a player id and a card value.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function decide(player::MyPlayer, ids)
    # awesomeness goes here
    return player_id,card_value
end"><pre><span class="pl-k">function</span> <span class="pl-en">decide</span>(player<span class="pl-k">::</span><span class="pl-c1">MyPlayer</span>, ids)
    <span class="pl-c"><span class="pl-c">#</span> awesomeness goes here</span>
    <span class="pl-k">return</span> player_id,card_value
<span class="pl-k">end</span></pre></div>
<p dir="auto">After the cards are delt, initial setup of the player can be optionally performed in the function <code>setup!</code>, which is called once prior to the game begining. The arguments for <code>setup</code> are the player and player ids.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function setup!(player::MyPlayer, ids)
    # awesomeness goes here
    return nothing
end"><pre><span class="pl-k">function</span> <span class="pl-en">setup!</span>(player<span class="pl-k">::</span><span class="pl-c1">MyPlayer</span>, ids)
    <span class="pl-c"><span class="pl-c">#</span> awesomeness goes here</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The player's representation of the game is optionally updated through three methods: <code>process_exchange!</code>, <code>process_go_fish!</code>, and <code>process_books!</code>. The method <code>process_exchange!</code> allows the player to observe and process an exchange of cards between the inquirer and the opponent.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function process_exchange!(player::MyPlayer, inquirer_id, opponent_id, value, cards)
    # awesomeness goes here
    return nothing
end"><pre><span class="pl-k">function</span> <span class="pl-en">process_exchange!</span>(player<span class="pl-k">::</span><span class="pl-c1">MyPlayer</span>, inquirer_id, opponent_id, value, cards)
    <span class="pl-c"><span class="pl-c">#</span> awesomeness goes here</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>process_go_fish!</code> allows the player to observe and that a player received an unknown card after going fish. <code>process_go_fish!</code> is also called when a player runs replinishes an empty hand.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function process_go_fish!(player::MyPlayer, inquirer_id, n_cards)
    # awesomeness goes here
    return nothing
end"><pre><span class="pl-k">function</span> <span class="pl-en">process_go_fish!</span>(player<span class="pl-k">::</span><span class="pl-c1">MyPlayer</span>, inquirer_id, n_cards)
    <span class="pl-c"><span class="pl-c">#</span> awesomeness goes here</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Finally, <code>process_books!</code> allows the player to track which cards are no longer in play. The argument <code>book_map</code> is a dictionary that maps player id to a vector of cards</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function process_books!(player::AbstractPlayer, book_map)
    # awesomeness goes here
    return nothing
end"><pre><span class="pl-k">function</span> <span class="pl-en">process_books!</span>(player<span class="pl-k">::</span><span class="pl-c1">AbstractPlayer</span>, book_map)
    <span class="pl-c"><span class="pl-c">#</span> awesomeness goes here</span>
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
<h1 dir="auto"><a id="user-content-help" class="anchor" aria-hidden="true" href="#help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Help</h1>
<p dir="auto">Additional documentation for functions exported through the API can be called through the REPL with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="? function_name"><pre>? function_name</pre></div>
</article></div>