<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-the-sobol-module-for-julia" class="anchor" aria-hidden="true" href="#the-sobol-module-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Sobol module for Julia</h1>
<p><a href="https://travis-ci.org/stevengj/Sobol.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/339ae219e69d30ed21398729f3a534a5b81b6eb6/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f536f626f6c2e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/Sobol.jl.png" style="max-width:100%;"></a></p>
<p>This module provides a free <a href="http://julialang.org/" rel="nofollow">Julia-language</a>
<a href="https://en.wikipedia.org/wiki/Sobol_sequence" rel="nofollow">Sobol low-discrepancy-sequence
(LDS)</a> implementation.  This
generates "quasi-random" sequences of points in N dimensions which are
equally distributed over an N-dimensional hypercube.</p>
<p>The advantage of an LDS over truly random (or pseudo-random) numbers is
that an LDS (which is <em>not</em> random) tends to be more evenly
distributed for finite numbers of points.  This is used in
<a href="https://en.wikipedia.org/wiki/Quasi-Monte_Carlo_method" rel="nofollow">quasi-Monte Carlo
methods</a> in
order to accelerate convergence compared to traditional <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method" rel="nofollow">Monte Carlo
methods</a> employing
random sequences.</p>
<p>It can be installed using the Julia package manager via <code>Pkg.add("Sobol")</code>.</p>
<h2><a id="user-content-algorithm" class="anchor" aria-hidden="true" href="#algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Algorithm</h2>
<p>This is an independent implementation, originally by Steven G. Johnson, of the
algorithm for generation of Sobol sequences in up to 21201 dimensions
described in:</p>
<ul>
<li>P. Bratley and B. L. Fox, <a href="https://dl.acm.org/citation.cfm?id=214372" rel="nofollow">Algorithm 659: Implementing Sobol's quasirandom sequence generator</a>,
<em>ACM Trans. Math. Soft.</em> <strong>14</strong> (1), pp. 88-100 (1988), <a href="https://dl.acm.org/citation.cfm?id=214372" rel="nofollow">doi:10.1145/42288.214372</a>.</li>
<li>S. Joe and F. Y. Kuo, <a href="https://dl.acm.org/citation.cfm?id=641879" rel="nofollow">Remark on algorithm 659: Implementing Sobol's quasirandom sequence generator</a>,
<em>ACM Trans. Math. Soft</em> <strong>29</strong> (1), 49-57 (2003), <a href="https://dl.acm.org/citation.cfm?id=641879" rel="nofollow">doi:10.1145/641876.641879</a>.</li>
</ul>
<p>Originally implemented in C in 2007 as
<a href="https://github.com/stevengj/nlopt/blob/master/util/sobolseq.c">part of</a> the
<a href="http://ab-initio.mit.edu/nlopt" rel="nofollow">NLopt library</a> for nonlinear optimization, the
code was subsequently converted by <a href="https://github.com/Ken-B">Ken-B</a> into pure Julia with roughly the same performance.</p>
<p>It is important to emphasize that SGJ's implementation was based on the
mathematical description of the algorithms only, and was done without
reference to the Fortran code from the <em>Trans. Math. Soft.</em> (<em>TOMS</em>)
papers.  The reason is that <em>TOMS</em> code is not free/open-source
software (it falls under <a href="http://www.acm.org/publications/policies/softwarecrnotice" rel="nofollow">restrictive ACM copyright
terms</a>).
(SGJ did re-use a table of primitive polynomials and coefficients from
the <em>TOMS</em> code, but since this is merely a tabulation of mathematical
facts it is not copyrightable.)  SGJ's implementation in NLopt, along
with this Julia translation, is free/open-source software under the <a href="http://opensource.org/licenses/MIT" rel="nofollow">MIT
("expat") license</a>.</p>
<p>Direction numbers used were derived from the file
<a href="http://web.maths.unsw.edu.au/~fkuo/sobol/new-joe-kuo-6.21201" rel="nofollow">http://web.maths.unsw.edu.au/~fkuo/sobol/new-joe-kuo-6.21201</a></p>
<p>Technically, we implement a 32-bit Sobol sequence.  After
2<sup>32</sup>-1 points, the sequence terminates, and subsequently
our implementation returns pseudo-random numbers generated by the
<a href="https://en.wikipedia.org/wiki/Mersenne_twister" rel="nofollow">Mersenne Twister</a> algorithm.
In practical applications, however, this point is rarely reached.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>To initialize a Sobol sequence <code>s</code> in <code>N</code> dimensions (<code>0 &lt; N &lt; 21201</code>), use
the <code>SobolSeq</code> constructor:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Sobol
s <span class="pl-k">=</span> <span class="pl-c1">SobolSeq</span>(N)</pre></div>
<p>Then</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">next!</span>(s)</pre></div>
<p>returns the next point (a <code>Vector{Float64}</code>) in the sequence; each point
lies in the hypercube [0,1]<sup>N</sup>.   You can also compute the next
point in-place with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">next!</span>(s, x)</pre></div>
<p>where <code>x</code> should be a <code>Vector</code> of length <code>N</code> of some floating-point type (e.g. <code>Float64</code>, <code>Float32</code>, or <code>BigFloat</code>).</p>
<p>You can also use a <code>SobolSeq</code> as an iterator in Julia:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">SobolSeq</span>(N)
   <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p>Note, however, that the loop will <em>never terminate</em> unless you explicitly
call <code>break</code> (or similar) in the loop body at some point of your choosing.</p>
<p>We also provide a different <code>SobolSeq</code> constructor to provide
an <code>N</code>-dimensional Sobol sequence rescaled to an arbitrary hypercube:</p>
<div class="highlight highlight-source-julia"><pre>s <span class="pl-k">=</span> <span class="pl-c1">SobolSeq</span>(lb, ub)</pre></div>
<p>where <code>lb</code> and <code>ub</code> are arrays (or other iterables) of length <code>N</code>, giving
the lower and upper bounds of the hypercube, respectively.   For example,
<code>SobolSeq([-1,0,0],[1,3,2])</code> generates points in the box [-1,1]×[0,3]×[0,2].  (Although the generated points are <code>Float64</code> by default, in general the precision is determined by that of <code>lb</code> and <code>ub</code>.)</p>
<p>If you know in advance the number <code>n</code> of points that you plan to
generate, some authors suggest that better uniformity can be attained
by first skipping the initial portion of the LDS (and in particular,
the first power of two smaller than <code>n</code>; see <a href="https://dl.acm.org/citation.cfm?id=641879" rel="nofollow">Joe and Kuo, 2003</a>).  This
facility is provided by:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">skip</span>(s, n)</pre></div>
<p>Skipping exactly <code>n</code> elements is also possible:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">skip</span>(s, n, exact<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>Here is a simple example, generating 1024 points in two dimensions and
plotting them with the <a href="https://github.com/stevengj/PyPlot.jl">PyPlot</a>
package.  Note the highly uniform, nonrandom distribution of points in
the [0,1]×[0,1] unit square!</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Sobol
<span class="pl-k">using</span> PyPlot
s <span class="pl-k">=</span> <span class="pl-c1">SobolSeq</span>(<span class="pl-c1">2</span>)
p <span class="pl-k">=</span> <span class="pl-c1">hcat</span>([<span class="pl-c1">next!</span>(s) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1024</span>]<span class="pl-k">.</span><span class="pl-k">..</span>)<span class="pl-k">'</span>
<span class="pl-c1">subplot</span>(<span class="pl-c1">111</span>, aspect<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>equal<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot</span>(p[:,<span class="pl-c1">1</span>], p[:,<span class="pl-c1">2</span>], <span class="pl-s"><span class="pl-pds">"</span>r.<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="sobol1024.png"><img src="sobol1024.png" alt="plot of 1024 points of a 2d Sobol sequence" title="1024 points of a 2d Sobol sequence" style="max-width:100%;"></a></p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>This module was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven G. Johnson</a>.</p>
</article></div>