<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/thowell/CALIPSO.jl/actions/workflows/CI.yml"><img src="https://github.com/thowell/CALIPSO.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thowell/CALIPSO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3274469c8a5d8ec8052a09b7e11a8dca4986ec59bdcadcc4c687860ae96edf4c/68747470733a2f2f636f6465636f762e696f2f67682f74686f77656c6c2f43414c4950534f2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d524e5834393433533730" alt="codecov" data-canonical-src="https://codecov.io/gh/thowell/CALIPSO.jl/branch/main/graph/badge.svg?token=RNX4943S70" style="max-width: 100%;"></a>
<a href="https://thowell.github.io/CALIPSO.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-calipsojl" class="anchor" aria-hidden="true" href="#calipsojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CALIPSO.jl</h1>
<p dir="auto">Conic Augmented Lagrangian Interior-Point SOlver: A solver for contact-implicit trajectory optimization</p>
<p dir="auto">The CALIPSO algorithm is an infeasible-start, primal-dual augmented-Lagrangian interior-point solver for non-convex optimization problems.
An augmented Lagrangian is employed for equality constraints and cones are handled by interior-point methods.</p>
<p dir="auto">For more details, see our paper on <a href="https://arxiv.org/pdf/2205.09255.pdf" rel="nofollow">arXiv</a>.</p>
<h2 dir="auto"><a id="user-content-standard-form" class="anchor" aria-hidden="true" href="#standard-form"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Standard form</h2>
<p dir="auto">Problems of the following form:</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$$
\begin{align*}
\underset{x}{\text{minimize}} &amp; \quad c(x; \theta) \\
\text{subject to} &amp; \quad  g(x; \theta) = 0, \\
&amp; \quad  h(x; \theta) \in \mathcal{K},
\end{align*}
$$</math-renderer></p>
<p dir="auto">can be optimized for</p>
<ul dir="auto">
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$x$</math-renderer>: decision variables</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$\theta$</math-renderer>: problem data</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$\mathcal{K}$</math-renderer>: Cartesian product of convex cones; nonnegative orthant <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$\mathbf{R}_+$</math-renderer> and second-order cones <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$\mathcal{Q}$</math-renderer> are currently implemented</li>
</ul>
<h2 dir="auto">
<a id="user-content-trajectory-optimization" class="anchor" aria-hidden="true" href="#trajectory-optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Trajectory optimization</h2>
<p dir="auto">Additionally, problems with temporal structure of the form:</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$$
\begin{align*}
\underset{X_{1:T}, \phantom{,} U_{1:T-1}}{\text{minimize }} &amp; C_T(X_T; \theta_T) + \sum \limits_{t = 1}^{T-1} C_t(X_t, U_t; \theta_t)\\
\text{subject to } &amp; F_t(X_t, U_t; \theta_t) = X_{t+1}, \quad t = 1,\dots,T-1,\\
&amp; E_t(X_t, U_t; \theta_t) = 0, \phantom{, _{t+1}} \quad t = 1, \dots, T,\\
&amp; H_t(X_t, U_t; \theta_t) \in \mathcal{K}_t, \phantom{X} \quad t = 1, \dots, T,
\end{align*}
$$</math-renderer></p>
<p dir="auto">with</p>
<ul dir="auto">
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$X_{1:T}$</math-renderer>: state trajectory</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$U_{1:T-1}$</math-renderer>: action trajectory</li>
<li>
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$\Theta_{1:T}$</math-renderer>: problem-data trajectory</li>
</ul>
<p dir="auto">are automatically formulated, and fast gradients generated, for CALIPSO.</p>
<h2 dir="auto">
<a id="user-content-solution-gradients" class="anchor" aria-hidden="true" href="#solution-gradients"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solution gradients</h2>
<p dir="auto">The solver is differentiable, and gradients of the solution, including internal solver variables, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$w = (x, y, z, r, s, t)$</math-renderer> :</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="00d473ddae94be8d4fcc183f9f6accea">$$
\partial w^*(\theta) / \partial \theta,
$$</math-renderer></p>
<p dir="auto">with respect to the problem data are efficiently computed.</p>
<h2 dir="auto">
<a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto">
<a id="user-content-ball-in-cup" class="anchor" aria-hidden="true" href="#ball-in-cup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ball-in-cup</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/animations/ball_in_cup.gif"><img src="examples/animations/ball_in_cup.gif" alt="drawing" width="150" data-animated-image="" style="max-width: 100%;"></a></p> 
<h3 dir="auto">
<a id="user-content-bunny-hop" class="anchor" aria-hidden="true" href="#bunny-hop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>bunny hop</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/animations/atlas_bunnyhop.gif"><img src="examples/animations/atlas_bunnyhop.gif" alt="drawing" width="400" data-animated-image="" style="max-width: 100%;"></a></p> 
<h3 dir="auto">
<a id="user-content-quadruped-gait" class="anchor" aria-hidden="true" href="#quadruped-gait"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>quadruped gait</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/animations/quadruped_gait.gif"><img src="examples/animations/quadruped_gait.gif" alt="drawing" width="250" data-animated-image="" style="max-width: 100%;"></a></p> 
<h3 dir="auto">
<a id="user-content-cyberdrift" class="anchor" aria-hidden="true" href="#cyberdrift"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>cyberdrift</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/animations/cyberdrift.gif"><img src="examples/animations/cyberdrift.gif" alt="drawing" width="250" data-animated-image="" style="max-width: 100%;"></a></p> 
<h3 dir="auto">
<a id="user-content-rocket-landing-with-state-triggered-constraints" class="anchor" aria-hidden="true" href="#rocket-landing-with-state-triggered-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>rocket landing with state-triggered constraints</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/figures/stc_rocket.jpg"><img src="docs/src/assets/figures/stc_rocket.jpg" width="200" style="max-width: 100%;"></a></p>
<h3 dir="auto">
<a id="user-content-cart-pole-auto-tuning-open-loop-left-tuned-mpc-right" class="anchor" aria-hidden="true" href="#cart-pole-auto-tuning-open-loop-left-tuned-mpc-right"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>cart-pole auto-tuning {open-loop (left) tuned MPC (right)}</h3>
<p dir="auto">
<a target="_blank" rel="noopener noreferrer" href="examples/animations/cartpole_openloop.gif"><img src="examples/animations/cartpole_openloop.gif" width="200" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="examples/animations/cartpole_tuned.gif"><img src="examples/animations/cartpole_tuned.gif" width="200" style="max-width: 100%;"></a>
</p>
<h3 dir="auto">
<a id="user-content-acrobot-auto-tuning-open-loop-left-tuned-mpc-right" class="anchor" aria-hidden="true" href="#acrobot-auto-tuning-open-loop-left-tuned-mpc-right"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>acrobot auto-tuning {open-loop (left) tuned MPC (right)}</h3>
<p dir="auto">
<a target="_blank" rel="noopener noreferrer" href="examples/animations/acrobot_openloop.gif"><img src="examples/animations/acrobot_openloop.gif" width="200" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="examples/animations/acrobot_tuned.gif"><img src="examples/animations/acrobot_tuned.gif" width="200" style="max-width: 100%;"></a>
</p>
<h2 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">CALIPSO can be installed using the Julia package manager for Julia <code>v1.7</code> and higher. Inside the Julia REPL, type <code>]</code> to enter the Pkg REPL mode then run:</p>
<p dir="auto"><code>pkg&gt; add CALIPSO</code></p>
<p dir="auto">If you want to install the latest version from Github run:</p>
<p dir="auto"><code>pkg&gt; add CALIPSO#main</code></p>
<h2 dir="auto">
<a id="user-content-quick-start-non-convex-problem" class="anchor" aria-hidden="true" href="#quick-start-non-convex-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start (non-convex problem)</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CALIPSO

# problem
objective(x) = x[1]
equality(x) = [x[1]^2 - x[2] - 1.0; x[1] - x[3] - 0.5]
cone(x) = x[2:3]

# variables 
num_variables = 3

# solver
solver = Solver(objective, equality, cone, num_variables);

# initialize
x0 = [-2.0, 3.0, 1.0]
initialize!(solver, x0)

# solve 
solve!(solver)

# solution 
solver.solution.variables # x* = [1.0, 0.0, 0.5]"><pre><span class="pl-k">using</span> CALIPSO

<span class="pl-c"><span class="pl-c">#</span> problem</span>
<span class="pl-en">objective</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]
<span class="pl-en">equality</span>(x) <span class="pl-k">=</span> [x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> x[<span class="pl-c1">2</span>] <span class="pl-k">-</span> <span class="pl-c1">1.0</span>; x[<span class="pl-c1">1</span>] <span class="pl-k">-</span> x[<span class="pl-c1">3</span>] <span class="pl-k">-</span> <span class="pl-c1">0.5</span>]
<span class="pl-en">cone</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>]

<span class="pl-c"><span class="pl-c">#</span> variables </span>
num_variables <span class="pl-k">=</span> <span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> solver</span>
solver <span class="pl-k">=</span> <span class="pl-c1">Solver</span>(objective, equality, cone, num_variables);

<span class="pl-c"><span class="pl-c">#</span> initialize</span>
x0 <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">1.0</span>]
<span class="pl-c1">initialize!</span>(solver, x0)

<span class="pl-c"><span class="pl-c">#</span> solve </span>
<span class="pl-c1">solve!</span>(solver)

<span class="pl-c"><span class="pl-c">#</span> solution </span>
solver<span class="pl-k">.</span>solution<span class="pl-k">.</span>variables <span class="pl-c"><span class="pl-c">#</span> x* = [1.0, 0.0, 0.5]</span></pre></div>
<h2 dir="auto">
<a id="user-content-quick-start-pendulum-swing-up" class="anchor" aria-hidden="true" href="#quick-start-pendulum-swing-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start (pendulum swing-up)</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CALIPSO 
using LinearAlgebra 

# horizon 
horizon = 11 

# dimensions 
num_states = [2 for t = 1:horizon]
num_actions = [1 for t = 1:horizon-1] 

# dynamics
function pendulum_continuous(x, u)
   mass = 1.0
   length_com = 0.5
   gravity = 9.81
   damping = 0.1

   [
      x[2],
      (u[1] / ((mass * length_com * length_com))
            - gravity * sin(x[1]) / length_com
            - damping * x[2] / (mass * length_com * length_com))
   ]
end

function pendulum_discrete(y, x, u)
   h = 0.05 # timestep 
   y - (x + h * pendulum_continuous(0.5 * (x + y), u))
end

dynamics = [pendulum_discrete for t = 1:horizon-1] 

# states
state_initial = [0.0; 0.0] 
state_goal = [π; 0.0] 

# objective 
objective = [
   [(x, u) -&gt; 0.1 * dot(x[1:2], x[1:2]) + 0.1 * dot(u, u) for t = 1:horizon-1]..., 
   (x, u) -&gt; 0.1 * dot(x[1:2], x[1:2]),
];

# constraints 
equality = [
      (x, u) -&gt; x - state_initial, 
      [empty_constraint for t = 2:horizon-1]..., 
      (x, u) -&gt; x - state_goal,
];

# solver 
solver = Solver(objective, dynamics, num_states, num_actions; 
   equality=equality);

# initialize
state_guess = linear_interpolation(state_initial, state_goal, horizon)
action_guess = [1.0 * randn(num_actions[t]) for t = 1:horizon-1]
initialize_states!(solver, state_guess) 
initialize_actions!(solver, action_guess)

# solve 
solve!(solver)

# solution
state_solution, action_solution = get_trajectory(solver);"><pre><span class="pl-k">using</span> CALIPSO 
<span class="pl-k">using</span> LinearAlgebra 

<span class="pl-c"><span class="pl-c">#</span> horizon </span>
horizon <span class="pl-k">=</span> <span class="pl-c1">11</span> 

<span class="pl-c"><span class="pl-c">#</span> dimensions </span>
num_states <span class="pl-k">=</span> [<span class="pl-c1">2</span> <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>horizon]
num_actions <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>horizon<span class="pl-k">-</span><span class="pl-c1">1</span>] 

<span class="pl-c"><span class="pl-c">#</span> dynamics</span>
<span class="pl-k">function</span> <span class="pl-en">pendulum_continuous</span>(x, u)
   mass <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
   length_com <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
   gravity <span class="pl-k">=</span> <span class="pl-c1">9.81</span>
   damping <span class="pl-k">=</span> <span class="pl-c1">0.1</span>

   [
      x[<span class="pl-c1">2</span>],
      (u[<span class="pl-c1">1</span>] <span class="pl-k">/</span> ((mass <span class="pl-k">*</span> length_com <span class="pl-k">*</span> length_com))
            <span class="pl-k">-</span> gravity <span class="pl-k">*</span> <span class="pl-c1">sin</span>(x[<span class="pl-c1">1</span>]) <span class="pl-k">/</span> length_com
            <span class="pl-k">-</span> damping <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">/</span> (mass <span class="pl-k">*</span> length_com <span class="pl-k">*</span> length_com))
   ]
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">pendulum_discrete</span>(y, x, u)
   h <span class="pl-k">=</span> <span class="pl-c1">0.05</span> <span class="pl-c"><span class="pl-c">#</span> timestep </span>
   y <span class="pl-k">-</span> (x <span class="pl-k">+</span> h <span class="pl-k">*</span> <span class="pl-c1">pendulum_continuous</span>(<span class="pl-c1">0.5</span> <span class="pl-k">*</span> (x <span class="pl-k">+</span> y), u))
<span class="pl-k">end</span>

dynamics <span class="pl-k">=</span> [pendulum_discrete <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>horizon<span class="pl-k">-</span><span class="pl-c1">1</span>] 

<span class="pl-c"><span class="pl-c">#</span> states</span>
state_initial <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span>] 
state_goal <span class="pl-k">=</span> [π; <span class="pl-c1">0.0</span>] 

<span class="pl-c"><span class="pl-c">#</span> objective </span>
objective <span class="pl-k">=</span> [
   [(x, u) <span class="pl-k">-&gt;</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]) <span class="pl-k">+</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(u, u) <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>horizon<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">.</span><span class="pl-k">..</span>, 
   (x, u) <span class="pl-k">-&gt;</span> <span class="pl-c1">0.1</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>], x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]),
];

<span class="pl-c"><span class="pl-c">#</span> constraints </span>
equality <span class="pl-k">=</span> [
      (x, u) <span class="pl-k">-&gt;</span> x <span class="pl-k">-</span> state_initial, 
      [empty_constraint <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">:</span>horizon<span class="pl-k">-</span><span class="pl-c1">1</span>]<span class="pl-k">.</span><span class="pl-k">..</span>, 
      (x, u) <span class="pl-k">-&gt;</span> x <span class="pl-k">-</span> state_goal,
];

<span class="pl-c"><span class="pl-c">#</span> solver </span>
solver <span class="pl-k">=</span> <span class="pl-c1">Solver</span>(objective, dynamics, num_states, num_actions; 
   equality<span class="pl-k">=</span>equality);

<span class="pl-c"><span class="pl-c">#</span> initialize</span>
state_guess <span class="pl-k">=</span> <span class="pl-c1">linear_interpolation</span>(state_initial, state_goal, horizon)
action_guess <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-k">*</span> <span class="pl-c1">randn</span>(num_actions[t]) <span class="pl-k">for</span> t <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>horizon<span class="pl-k">-</span><span class="pl-c1">1</span>]
<span class="pl-c1">initialize_states!</span>(solver, state_guess) 
<span class="pl-c1">initialize_actions!</span>(solver, action_guess)

<span class="pl-c"><span class="pl-c">#</span> solve </span>
<span class="pl-c1">solve!</span>(solver)

<span class="pl-c"><span class="pl-c">#</span> solution</span>
state_solution, action_solution <span class="pl-k">=</span> <span class="pl-c1">get_trajectory</span>(solver);</pre></div>
</article></div>