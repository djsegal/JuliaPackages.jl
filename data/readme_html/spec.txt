<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-specjl" class="anchor" aria-hidden="true" href="#specjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Spec.jl</h1>
<p><a href="https://travis-ci.org/zenna/Spec.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a7121b94feebd3c92532525f67d81eaa642f3e5/68747470733a2f2f7472617669732d63692e6f72672f7a656e6e612f537065632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/zenna/Spec.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/zenna/Spec.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5d41036f176dcae18fb479c8a35ee4dfa3cb543f/687474703a2f2f636f6465636f762e696f2f6769746875622f7a656e6e612f537065632e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/zenna/Spec.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package for expressing specifications.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>Spec.jl is (very small) library for specfiying correctness properties of programs.
Currently these serve both as functional tests (like asserts which can be disabled globally), or just a non-executable documentation.
The long term goal is to replicate much of the functionality of Spec in clojure, as well as formal verification methods.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>()
  <span class="pl-c1">@pre</span> x <span class="pl-k">+</span> y <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operations</h2>
<p>Preconditions are defined using <code>@pre</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> (<span class="pl-c1">@pre</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>; <span class="pl-c1">sqrt</span>(x) <span class="pl-k">+</span> <span class="pl-c1">5</span>)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-k">-</span><span class="pl-c1">3</span>)
ERROR<span class="pl-k">:</span> DomainError<span class="pl-k">:</span>
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>REPL[<span class="pl-c1">2</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with_pre</span> <span class="pl-k">begin</span>
               <span class="pl-c1">f</span>(<span class="pl-k">-</span><span class="pl-c1">3</span>)
             <span class="pl-k">end</span>
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
Stacktrace<span class="pl-k">:</span></pre></div>
</article></div>