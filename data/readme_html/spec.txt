<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-specjl" class="anchor" aria-hidden="true" href="#specjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spec.jl</h1>
<p><a href="https://travis-ci.org/zenna/Spec.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d907ad80cc67b105b6a0f420483dd519082549b6147d93f40e5a6d0dd6912d74/68747470733a2f2f7472617669732d63692e6f72672f7a656e6e612f537065632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/zenna/Spec.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/zenna/Spec.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/37143c92b27d987086970e4c4585bfe86b31772f2ac081060443cb8b9c4865d0/687474703a2f2f636f6465636f762e696f2f6769746875622f7a656e6e612f537065632e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/zenna/Spec.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package for expressing specifications.</p>
<p>Spec.jl is small library for specfiying correctness properties of programs.
These specifications can be used as documentation, for testing, and for debugging.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>Toadd:</p>
<ul>
<li>other meta dontcheck, e.g. existential propositions (example?)</li>
</ul>
<h3><a id="user-content-pre-conditions" class="anchor" aria-hidden="true" href="#pre-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pre Conditions</h3>
<p>Preconditions are statements (also known as propositions or conditions) that must be true about the input before the function is executed.
One purpose of using preconditions is for documentation -- by specifying precise constraints on the function's behaviour we are communicating more clearly what we expect it to do.</p>
<p>Preconditions are specified using the <code>@pre</code> macro, for example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(x::Float64) = x * sqrt(x)
@pre f(::Float64) x &gt;= 0
"><pre><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> x <span class="pl-k">*</span> <span class="pl-c1">sqrt</span>(x)
<span class="pl-c1">@pre</span> <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Float64</span>) x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span></pre></div>
<p>This should be interpreted as defining a precondition for the method <code>f(::Int)</code> that specifies that the input <code>x</code> should be non-negative.</p>
<p>If we are feeling lazy we can avoid writing the signature twice, and instead write:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(x::Float64) = x * sqrt(x)
@pre f x &gt; 0
"><pre><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">=</span> x <span class="pl-k">*</span> <span class="pl-c1">sqrt</span>(x)
<span class="pl-c1">@pre</span> f x <span class="pl-k">&gt;</span> <span class="pl-c1">0</span></pre></div>
<p>This will define the precondition <code>x &gt; 0</code> for the most recently defined method for the generic function <code>f</code>.</p>
<p>Multiple specifications can be expressed by simply adding additional lines.  For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;Body mass index&quot;
bmi(height, weight) = height / weight 
@pre bmi(height, weight) = height &gt; 0 &quot;height must be positive&quot;
@pre bmi(height, weight) = weight &gt; 0 &quot;weight must be positive&quot;
"><pre><span class="pl-s"><span class="pl-pds">"</span>Body mass index<span class="pl-pds">"</span></span>
<span class="pl-en">bmi</span>(height, weight) <span class="pl-k">=</span> height <span class="pl-k">/</span> weight 
<span class="pl-c1">@pre</span> <span class="pl-en">bmi</span>(height, weight) <span class="pl-k">=</span> height <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-s"><span class="pl-pds">"</span>height must be positive<span class="pl-pds">"</span></span>
<span class="pl-c1">@pre</span> <span class="pl-en">bmi</span>(height, weight) <span class="pl-k">=</span> weight <span class="pl-k">&gt;</span> <span class="pl-c1">0</span> <span class="pl-s"><span class="pl-pds">"</span>weight must be positive<span class="pl-pds">"</span></span></pre></div>
<p>The semantics of this is conjuctive: <strong>all</strong> the different specs should be true.
This example also shows us that we can attach a description to any specification.</p>
<p>There is a many-to-one relationship between methods and generic functions in Julia.
One precondition can be applied to many methods of a generic function.</p>
<p>The following example adds specification for a <code>divide</code> function, which works on Strings as well as numbers.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;is x a number?&quot;
isnumstring(x::String) = occursin(r&quot;^\d+$&quot;, x)
divide(x::String, y::String) = parse(Int64, x) / parse(Int64, y)
@pre divide(x::String, y::String) = isnumstring(x) &amp;&amp; isnumstring(y) &quot;String should be a number&quot;

specapply(divide, &quot;123&quot;, &quot;114&quot;)
specapply(divide, &quot;123&quot;, &quot;aa4&quot;)

divide(x::Int, y::Int) = x / y

&quot;Convert `x` to number if string&quot;
asnum(x::String) = parse(Int64, x)
asnum(x) = x

# This precondition Applies to both methods
@pre divide(x, y) = asnum(y) != 0 &quot;Denominator cannot be zero&quot;

specapply(divide, 100, 0)
specapply(divide, &quot;100&quot;, &quot;0&quot;)
"><pre><span class="pl-s"><span class="pl-pds">"</span>is x a number?<span class="pl-pds">"</span></span>
<span class="pl-en">isnumstring</span>(x<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">occursin</span>(<span class="pl-sr"><span class="pl-pds">r"</span>^<span class="pl-cce">\d</span>+$<span class="pl-pds">"</span></span>, x)
<span class="pl-en">divide</span>(x<span class="pl-k">::</span><span class="pl-c1">String</span>, y<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int64, x) <span class="pl-k">/</span> <span class="pl-c1">parse</span>(Int64, y)
<span class="pl-c1">@pre</span> <span class="pl-en">divide</span>(x<span class="pl-k">::</span><span class="pl-c1">String</span>, y<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">isnumstring</span>(x) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">isnumstring</span>(y) <span class="pl-s"><span class="pl-pds">"</span>String should be a number<span class="pl-pds">"</span></span>

<span class="pl-c1">specapply</span>(divide, <span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>114<span class="pl-pds">"</span></span>)
<span class="pl-c1">specapply</span>(divide, <span class="pl-s"><span class="pl-pds">"</span>123<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>aa4<span class="pl-pds">"</span></span>)

<span class="pl-en">divide</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>, y<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> x <span class="pl-k">/</span> y

<span class="pl-s"><span class="pl-pds">"</span>Convert `x` to number if string<span class="pl-pds">"</span></span>
<span class="pl-en">asnum</span>(x<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int64, x)
<span class="pl-en">asnum</span>(x) <span class="pl-k">=</span> x

<span class="pl-c"><span class="pl-c">#</span> This precondition Applies to both methods</span>
<span class="pl-c1">@pre</span> <span class="pl-en">divide</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">asnum</span>(y) <span class="pl-k">!=</span> <span class="pl-c1">0</span> <span class="pl-s"><span class="pl-pds">"</span>Denominator cannot be zero<span class="pl-pds">"</span></span>

<span class="pl-c1">specapply</span>(divide, <span class="pl-c1">100</span>, <span class="pl-c1">0</span>)
<span class="pl-c1">specapply</span>(divide, <span class="pl-s"><span class="pl-pds">"</span>100<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>)</pre></div>
<p>In this example the first precondition only applies to the string based method, whereas the second precondition applies to both.</p>
<h2><a id="user-content-post-conditions" class="anchor" aria-hidden="true" href="#post-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Post Conditions</h2>
<p>The second kind of specification is a <strong>post condition</strong> which is a statement about the output and input of a proecdure after it has executed.
A canonical example of a post-condition is that of a sorted list, which states that a list is sorted if for every element <code>i</code> and every element <code>j</code>, if <code>i &lt; j</code> then the position of <code>i</code> should be less than the position of <code>j</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;p implies q&quot;
p → q = !(p &amp;&amp; !q)

&quot;is `xs`  sorted&quot;
issorted(xs) = 
  all((xs[i] &lt; xs[j] → i &lt; j for i = 1:length(xs) for j = 1:length(xs) if i != j))

&quot;Is `y` sorted version of `x`&quot;
isysortedx(xs, ys) = 
  length(ys) == length(xs) &amp;&amp; all((y in xs for y in ys)) &amp;&amp; issorted(y)

mysort(x) = sort(x)
@post mysort(x) = isysortedx(x, @ret) &quot;Result is sorted version of input&quot;
"><pre><span class="pl-s"><span class="pl-pds">"</span>p implies q<span class="pl-pds">"</span></span>
p → q <span class="pl-k">=</span> <span class="pl-k">!</span>(p <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span>q)

<span class="pl-s"><span class="pl-pds">"</span>is `xs`  sorted<span class="pl-pds">"</span></span>
<span class="pl-en">issorted</span>(xs) <span class="pl-k">=</span> 
  <span class="pl-c1">all</span>((xs[i] <span class="pl-k">&lt;</span> xs[j] → i <span class="pl-k">&lt;</span> j <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(xs) <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(xs) <span class="pl-k">if</span> i <span class="pl-k">!=</span> j))

<span class="pl-s"><span class="pl-pds">"</span>Is `y` sorted version of `x`<span class="pl-pds">"</span></span>
<span class="pl-en">isysortedx</span>(xs, ys) <span class="pl-k">=</span> 
  <span class="pl-c1">length</span>(ys) <span class="pl-k">==</span> <span class="pl-c1">length</span>(xs) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">all</span>((y <span class="pl-k">in</span> xs <span class="pl-k">for</span> y <span class="pl-k">in</span> ys)) <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">issorted</span>(y)

<span class="pl-en">mysort</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sort</span>(x)
<span class="pl-c1">@post</span> <span class="pl-en">mysort</span>(x) <span class="pl-k">=</span> <span class="pl-c1">isysortedx</span>(x, <span class="pl-c1">@ret</span>) <span class="pl-s"><span class="pl-pds">"</span>Result is sorted version of input<span class="pl-pds">"</span></span></pre></div>
<h4><a id="user-content-capturing" class="anchor" aria-hidden="true" href="#capturing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Capturing</h4>
<p>As we have seen, a post-condition can also see values to a function.  So why bother have two constructs at all?
The main reason is that Julia procedures can have side-effects.</p>
<p>In the mutating sort function <code>sort!(xs)</code> the input is mutated.
Therefore if we want to check that the result is a sorted version of the input we have a problem, because we have lost information about the input.
The solution is to use <code>@cap</code> to capture variables in the input</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@post sort! isysortedx(@cap(x), @ret) &quot;Result is sorted version of input&quot;
"><pre><span class="pl-c1">@post</span> sort! <span class="pl-c1">isysortedx</span>(<span class="pl-c1">@cap</span>(x), <span class="pl-c1">@ret</span>) <span class="pl-s"><span class="pl-pds">"</span>Result is sorted version of input<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-using-specifications" class="anchor" aria-hidden="true" href="#using-specifications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using Specifications</h2>
<p>By default, pre and post conditions will not affect the behaviour of your program at all, and incur no runtime cost.
To actually check specificatiosn we use <code>specapply</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="specapply(f, args...)
"><pre><span class="pl-c1">specapply</span>(f, args<span class="pl-k">...</span>)</pre></div>
<p>This will evaluate <code>f(args)</code>, but for all function applications encountered in the execution of <code>f(args...)</code>, each and every associated spec will be checked.</p>
<p>For example, given the specs above for <code>sort</code> and <code>divide</code>, the following snippeet will check the pre and post conditions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function f(n)
  x = rand(n)
  y = sort(x)
  z = map(divide, y)
end

specapply(f, n)
"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(n)
  x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n)
  y <span class="pl-k">=</span> <span class="pl-c1">sort</span>(x)
  z <span class="pl-k">=</span> <span class="pl-c1">map</span>(divide, y)
<span class="pl-k">end</span>

<span class="pl-c1">specapply</span>(f, n)</pre></div>
<p>A convenient macro alternative to specapply is  <code>@specapply</code>, e.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@specapply f(n)
"><pre><span class="pl-c1">@specapply</span> <span class="pl-c1">f</span>(n)</pre></div>
<h3><a id="user-content-for-debugging" class="anchor" aria-hidden="true" href="#for-debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>For Debugging</h3>
<p>One of the best uses of <code>specapply</code> is debugging.  Often a runtime error is the ressult of a pre-condition much further up the stack being violated.
For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function f()
  x = rand(4, 4)
  x[3,4]
end
"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>()
  x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)
  x[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]
<span class="pl-k">end</span></pre></div>
<p>Evaluating <code>f()</code> gives us this horribly uninfomrative stack trace.</p>
<p>If instead we run this function with <code>specapply</code></p>
<h2><a id="user-content-quickcheck" class="anchor" aria-hidden="true" href="#quickcheck"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuickCheck</h2>
<p>Testing using Spec can be as simple as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="spectest(some_generic_function)
"><pre><span class="pl-c1">spectest</span>(some_generic_function)</pre></div>
<p>Spec will try to generate inputs that are consistent with the input, then evaluate the function with those input using <code>specapply</code>.</p>
<p>If there are multiple methods for <code>some_generic_function</code>, <code>spectest</code> will test all those which have associated specs.
To spectest a specific method, simply pass a tuple of types as the second argument to <code>spectest</code> to apply to only methods matching those types.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="spectest(sort, (Vector{Int},))
"><pre><span class="pl-c1">spectest</span>(sort, (Vector{Int},))</pre></div>
<p>Sometimes it will be too difficult for Spec to generative valid inputs.
Othertimes you might want to test a function with a particular input distribution.
In this case,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="gen = rng -&gt; rand(rng, Int, 10)
spectest(sort, (Vector{Int},); gen = gen)
"><pre>gen <span class="pl-k">=</span> rng <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(rng, Int, <span class="pl-c1">10</span>)
<span class="pl-c1">spectest</span>(sort, (Vector{Int},); gen <span class="pl-k">=</span> gen)</pre></div>
<h2><a id="user-content-typical-setup" class="anchor" aria-hidden="true" href="#typical-setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Typical setup</h2>
<p>Spec</p>
<h1><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h1>
<ul>
<li>The concept of testing all the nested specs within a function call f(x) is orthogonal to pretty much everything else (that follows)</li>
<li>For a given method, I may want to test all, some or none of the specs</li>
<li>For a given method and given spec, I may want to test it on (i) one input, (ii) samples from a distribution of inputs, (iii) all inputs, finitely enumerable, (iv) all inputs abstractly.</li>
</ul>
</article></div>