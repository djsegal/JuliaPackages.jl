<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-exprtools" class="anchor" aria-hidden="true" href="#exprtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ExprTools</h1>
<p><a href="https://invenia.github.io/ExprTools.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://invenia.github.io/ExprTools.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/invenia/ExprTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8045355dfefc96da88a0c06b3c3f8c43746e8a3d/68747470733a2f2f7472617669732d63692e636f6d2f696e76656e69612f45787072546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/invenia/ExprTools.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/ExprTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/71d7071ff16fa5f2bc13d71eb6a3fe75265a070e/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f45787072546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/invenia/ExprTools.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>ExprTools provides tooling for working with Julia expressions during <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/" rel="nofollow">metaprogramming</a>.
This package aims to provide light-weight performant tooling without requiring additional package dependencies.</p>
<p>Alternatively see the <a href="https://github.com/MikeInnes/MacroTools.jl">MacroTools</a> package for a more powerful set of tools.</p>
<p>Currently, this package provides the <code>splitdef</code>, <code>signature</code> and <code>combinedef</code> functions which are useful for inspecting and manipulating function definition expressions.</p>
<ul>
<li><code>splitdef</code> works on a function definition expression and returns a <code>Dict</code> of its parts.</li>
<li><code>combinedef</code> takes a <code>Dict</code> from <code>splitdef</code> and builds it into an expression.</li>
<li><code>signature</code> works on a <code>Method</code> returning a similar <code>Dict</code> that holds the parts of the expressions that would form its signature.</li>
</ul>
<p>e.g.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ExprTools

julia<span class="pl-k">&gt;</span> ex <span class="pl-k">=</span> :(
           <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T
               x <span class="pl-k">+</span> y
           <span class="pl-k">end</span>
       )
:(<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T
      <span class="pl-c"><span class="pl-c">#=</span> none:3 <span class="pl-c">=#</span></span>
      x <span class="pl-k">+</span> y
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> def <span class="pl-k">=</span> <span class="pl-c1">splitdef</span>(ex)
Dict{Symbol,Any} with <span class="pl-c1">5</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:args</span>        <span class="pl-k">=&gt;</span> Any[:(x<span class="pl-k">::</span><span class="pl-c1">T</span>), :(y<span class="pl-k">::</span><span class="pl-c1">T</span>)]
  <span class="pl-c1">:body</span>        <span class="pl-k">=&gt;</span> <span class="pl-k">quote</span>â€¦
  <span class="pl-c1">:name</span>        <span class="pl-k">=&gt;</span> :(Base<span class="pl-k">.</span>f)
  <span class="pl-c1">:head</span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">:function</span>
  <span class="pl-c1">:whereparams</span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">:T</span>]

julia<span class="pl-k">&gt;</span> def[<span class="pl-c1">:name</span>] <span class="pl-k">=</span> <span class="pl-c1">:g</span>;

julia<span class="pl-k">&gt;</span> def[<span class="pl-c1">:head</span>] <span class="pl-k">=</span> :(<span class="pl-k">=</span>);

julia<span class="pl-k">&gt;</span> def[<span class="pl-c1">:body</span>] <span class="pl-k">=</span> :(x <span class="pl-k">*</span> y);

julia<span class="pl-k">&gt;</span> g_expr <span class="pl-k">=</span> <span class="pl-c1">combinedef</span>(def)
:((<span class="pl-en">g</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T) <span class="pl-k">=</span> x <span class="pl-k">*</span> y)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eval</span>(g_expr)
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> g_method <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">methods</span>(g))
<span class="pl-c1">g</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">in</span> Main

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signature</span>(g_method)
Dict{Symbol,Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:name</span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">:g</span>
  <span class="pl-c1">:args</span>        <span class="pl-k">=&gt;</span> Expr[:(x<span class="pl-k">::</span><span class="pl-c1">T</span>), :(y<span class="pl-k">::</span><span class="pl-c1">T</span>)]
  <span class="pl-c1">:whereparams</span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">:T</span>]</pre></div>
</article></div>