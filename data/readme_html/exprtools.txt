<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-exprtools" class="anchor" aria-hidden="true" href="#exprtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ExprTools</h1>
<p dir="auto"><a href="https://invenia.github.io/ExprTools.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://invenia.github.io/ExprTools.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/Invenia/ExprTools.jl/actions?query=workflow%3ACI"><img src="https://github.com/Invenia/ExprTools.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/invenia/ExprTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af0f8687e46878b740f244c2a39362898a3c40571cf2f68af77cbf406479ffd5/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f45787072546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/invenia/ExprTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">ExprTools provides tooling for working with Julia expressions during <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/" rel="nofollow">metaprogramming</a>.
This package aims to provide light-weight performant tooling without requiring additional package dependencies.</p>
<p dir="auto">Alternatively see the <a href="https://github.com/MikeInnes/MacroTools.jl">MacroTools</a> package for a more powerful set of tools.</p>
<p dir="auto">Currently, this package provides the <code>splitdef</code>, <code>signature</code> and <code>combinedef</code> functions which are useful for inspecting and manipulating function definition expressions.</p>
<ul dir="auto">
<li><code>splitdef</code> works on a function definition expression and returns a <code>Dict</code> of its parts.</li>
<li><code>combinedef</code> takes a <code>Dict</code> from <code>splitdef</code> and builds it into an expression.</li>
<li><code>signature</code> works on a <code>Method</code>, or the type-tuple <code>sig</code> field of a method, returning a similar <code>Dict</code> that holds the parts of the expressions that would form its signature.</li>
</ul>
<p dir="auto">As well as several helpers that are useful in combination with them.</p>
<ul dir="auto">
<li><code>args_tuple_expr</code> applies to a <code>Dict</code> from <code>splitdef</code> or <code>signature</code> to generate an expression for a tuple of its arguments.</li>
<li><code>parameters</code> which return the type-parameters of a type, and so is useful for working with the type-tuple that comes out of the <code>sig</code> field of a <code>Method</code></li>
</ul>
<p dir="auto">e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ExprTools

julia&gt; ex = :(
           function Base.f(x::T, y::T) where T
               x + y
           end
       )
:(function Base.f(x::T, y::T) where T
      #= none:3 =#
      x + y
  end)

julia&gt; def = splitdef(ex)
Dict{Symbol,Any} with 5 entries:
  :args        =&gt; Any[:(x::T), :(y::T)]
  :body        =&gt; quote…
  :name        =&gt; :(Base.f)
  :head        =&gt; :function
  :whereparams =&gt; Any[:T]


julia&gt; def[:name] = :g;

julia&gt; def[:head] = :(=);

julia&gt; args_tuple_expr(def)
:((x, y))

julia&gt; def[:body] = :(*($(args_tuple_expr(def))...));

julia&gt; g_expr = combinedef(def)
:((g(x::T, y::T) where T) = (*)((x, y)...))

julia&gt; eval(g_expr)
g (generic function with 1 method)

julia&gt; g_method = first(methods(g))
g(x::T, y::T) where T in Main

julia&gt; parameters(g_method.sig)
svec(typeof(g), T, T)

julia&gt; signature(g_method)
Dict{Symbol, Any} with 3 entries:
  :name        =&gt; :g
  :args        =&gt; Expr[:(x::T), :(y::T)]
  :whereparams =&gt; Any[:T]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ExprTools

julia<span class="pl-k">&gt;</span> ex <span class="pl-k">=</span> :(
           <span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T
               x <span class="pl-k">+</span> y
           <span class="pl-k">end</span>
       )
:(<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T
      <span class="pl-c"><span class="pl-c">#=</span> none:3 <span class="pl-c">=#</span></span>
      x <span class="pl-k">+</span> y
  <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> def <span class="pl-k">=</span> <span class="pl-c1">splitdef</span>(ex)
Dict{Symbol,Any} with <span class="pl-c1">5</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:args</span>        <span class="pl-k">=&gt;</span> Any[:(x<span class="pl-k">::</span><span class="pl-c1">T</span>), :(y<span class="pl-k">::</span><span class="pl-c1">T</span>)]
  <span class="pl-c1">:body</span>        <span class="pl-k">=&gt;</span> <span class="pl-k">quote</span>…
  <span class="pl-c1">:name</span>        <span class="pl-k">=&gt;</span> :(Base<span class="pl-k">.</span>f)
  <span class="pl-c1">:head</span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">:function</span>
  <span class="pl-c1">:whereparams</span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">:T</span>]


julia<span class="pl-k">&gt;</span> def[<span class="pl-c1">:name</span>] <span class="pl-k">=</span> <span class="pl-c1">:g</span>;

julia<span class="pl-k">&gt;</span> def[<span class="pl-c1">:head</span>] <span class="pl-k">=</span> :(<span class="pl-k">=</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">args_tuple_expr</span>(def)
:((x, y))

julia<span class="pl-k">&gt;</span> def[<span class="pl-c1">:body</span>] <span class="pl-k">=</span> :(<span class="pl-k">*</span>(<span class="pl-k">$</span>(<span class="pl-c1">args_tuple_expr</span>(def))<span class="pl-k">.</span><span class="pl-k">..</span>));

julia<span class="pl-k">&gt;</span> g_expr <span class="pl-k">=</span> <span class="pl-c1">combinedef</span>(def)
:((<span class="pl-en">g</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T) <span class="pl-k">=</span> (<span class="pl-k">*</span>)((x, y)<span class="pl-k">.</span><span class="pl-k">..</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">eval</span>(g_expr)
g (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> g_method <span class="pl-k">=</span> <span class="pl-c1">first</span>(<span class="pl-c1">methods</span>(g))
<span class="pl-c1">g</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>, y<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">in</span> Main

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parameters</span>(g_method<span class="pl-k">.</span>sig)
<span class="pl-c1">svec</span>(<span class="pl-c1">typeof</span>(g), T, T)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signature</span>(g_method)
Dict{Symbol, Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:name</span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">:g</span>
  <span class="pl-c1">:args</span>        <span class="pl-k">=&gt;</span> Expr[:(x<span class="pl-k">::</span><span class="pl-c1">T</span>), :(y<span class="pl-k">::</span><span class="pl-c1">T</span>)]
  <span class="pl-c1">:whereparams</span> <span class="pl-k">=&gt;</span> Any[<span class="pl-c1">:T</span>]</pre></div>
<h3 dir="auto"><a id="user-content-juliacon-2021-video" class="anchor" aria-hidden="true" href="#juliacon-2021-video"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaCon 2021 Video</h3>
<p dir="auto">"ExprTools: Metaprogramming from reflection" by Lyndon White</p>
<p dir="auto"><a href="https://www.youtube.com/watch?v=CREWoLxpDMo" rel="nofollow"><img src="https://camo.githubusercontent.com/bb9be2dceea9f8c43db17b16791c6cef8384abe4bad22de7734ce83e4dfc39d3/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f435245576f4c7870444d6f2f302e6a7067" alt="YouTube Video" data-canonical-src="https://img.youtube.com/vi/CREWoLxpDMo/0.jpg" style="max-width: 100%;"></a></p>
</article></div>