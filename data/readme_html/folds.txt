<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-folds-sequential-threaded-and-distributed-fold-interface-for-julia" class="anchor" aria-hidden="true" href="#folds-sequential-threaded-and-distributed-fold-interface-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Folds: sequential, threaded, and distributed fold interface for Julia</h1>
<p><a href="https://juliafolds.github.io/Folds.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliafolds.github.io/Folds.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFolds/Folds.jl/actions?query=workflow%3A%22Run+tests%22"><img src="https://github.com/JuliaFolds/Folds.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>Folds.jl provides a unified interface for sequential, threaded, and
distributed folds.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Folds

julia&gt; Folds.sum(1:10)
55

julia&gt; Folds.sum(1:10, ThreadedEx())  # equivalent to above
55

julia&gt; Folds.sum(1:10, DistributedEx())
55
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Folds

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">55</span>

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">ThreadedEx</span>())  <span class="pl-c"><span class="pl-c">#</span> equivalent to above</span>
<span class="pl-c1">55</span>

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">DistributedEx</span>())
<span class="pl-c1">55</span></pre></div>
<p>Most of the functions can be used with iterator comprehensions:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Folds.sum(y for x in 1:10 if isodd(x) for y in 1:x^2)
4917
"><pre>julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(y <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-k">if</span> <span class="pl-c1">isodd</span>(x) <span class="pl-k">for</span> y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c1">4917</span></pre></div>
<p>and <a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Transducers

julia&gt; 1:10 |&gt; Filter(isodd) |&gt; MapCat(x -&gt; 1:x^2) |&gt; Folds.sum
4917
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Transducers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-k">|&gt;</span> <span class="pl-c1">Filter</span>(isodd) <span class="pl-k">|&gt;</span> <span class="pl-c1">MapCat</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> Folds<span class="pl-k">.</span>sum
<span class="pl-c1">4917</span></pre></div>
<p>Folds.jl decouples the implementation and the execution mechanism
("executor"). Additional executors can be installed from
<a href="https://github.com/JuliaFolds/FoldsThreads.jl">FoldsThreads.jl</a>,
<a href="https://github.com/JuliaFolds/FoldsCUDA.jl">FoldsCUDA.jl</a> (rather WIP), and
<a href="https://github.com/JuliaFolds/FoldsDagger.jl">FoldsDagger.jl</a> (very WIP).</p>
</article></div>