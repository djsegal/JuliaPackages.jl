<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-folds-sequential-threaded-and-distributed-fold-interface-for-julia" class="anchor" aria-hidden="true" href="#folds-sequential-threaded-and-distributed-fold-interface-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Folds: sequential, threaded, and distributed fold interface for Julia</h1>
<p dir="auto"><a href="https://juliafolds.github.io/Folds.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://juliafolds.github.io/Folds.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFolds/Folds.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaFolds/Folds.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Folds.jl provides a unified interface for sequential, threaded, and
distributed folds.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Folds

julia&gt; Folds.sum(1:10)
55

julia&gt; Folds.sum(1:10, ThreadedEx())  # equivalent to above
55

julia&gt; Folds.sum(1:10, DistributedEx())
55"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Folds

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">55</span>

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">ThreadedEx</span>())  <span class="pl-c"><span class="pl-c">#</span> equivalent to above</span>
<span class="pl-c1">55</span>

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, <span class="pl-c1">DistributedEx</span>())
<span class="pl-c1">55</span></pre></div>
<h3 dir="auto"><a id="user-content-iterator-transforms-and-transducers" class="anchor" aria-hidden="true" href="#iterator-transforms-and-transducers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iterator transforms and transducers</h3>
<p dir="auto">Most of the functions can be used with iterator comprehensions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Folds.sum(y for x in 1:10 if isodd(x) for y in 1:x^2)
4917"><pre>julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">sum</span>(y <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-k">if</span> <span class="pl-c1">isodd</span>(x) <span class="pl-k">for</span> y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c1">4917</span></pre></div>
<p dir="auto">and <a href="https://github.com/JuliaFolds/Transducers.jl">Transducers.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Transducers

julia&gt; 1:10 |&gt; Filter(isodd) |&gt; MapCat(x -&gt; 1:x^2) |&gt; Folds.sum
4917"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Transducers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-k">|&gt;</span> <span class="pl-c1">Filter</span>(isodd) <span class="pl-k">|&gt;</span> <span class="pl-c1">MapCat</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">:</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> Folds<span class="pl-k">.</span>sum
<span class="pl-c1">4917</span></pre></div>
<h3 dir="auto"><a id="user-content-package-interop" class="anchor" aria-hidden="true" href="#package-interop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package interop</h3>
<p dir="auto">Folds.jl interoperates with various packages. For example,
<a href="https://github.com/JuliaArrays/StructArrays.jl">StructArrays.jl</a> can be used as
an input and/or output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StructArrays

julia&gt; table = StructVector(
           x = [:a, :a, :b, :a, :b],
           y = [1, 2, 3, 4, 5],
       );

julia&gt; Folds.copy(StructVector, (row for row in table if row.x === :a))
3-element StructArray(::Vector{Symbol}, ::Vector{Int64}) with eltype NamedTuple{(:x, :y), Tuple{Symbol, Int64}}:
 (x = :a, y = 1)
 (x = :a, y = 2)
 (x = :a, y = 4)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StructArrays

julia<span class="pl-k">&gt;</span> table <span class="pl-k">=</span> <span class="pl-c1">StructVector</span>(
           x <span class="pl-k">=</span> [<span class="pl-c1">:a</span>, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>],
           y <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>],
       );

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">copy</span>(StructVector, (row <span class="pl-k">for</span> row <span class="pl-k">in</span> table <span class="pl-k">if</span> row<span class="pl-k">.</span>x <span class="pl-k">===</span> <span class="pl-c1">:a</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element <span class="pl-c1">StructArray</span>(<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>, <span class="pl-k">::</span><span class="pl-c1">Vector{Int64}</span>) with eltype NamedTuple{(<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>), Tuple{Symbol, Int64}}<span class="pl-k">:</span>
 (x <span class="pl-k">=</span> <span class="pl-c1">:a</span>, y <span class="pl-k">=</span> <span class="pl-c1">1</span>)
 (x <span class="pl-k">=</span> <span class="pl-c1">:a</span>, y <span class="pl-k">=</span> <span class="pl-c1">2</span>)
 (x <span class="pl-k">=</span> <span class="pl-c1">:a</span>, y <span class="pl-k">=</span> <span class="pl-c1">4</span>)</pre></div>
<p dir="auto">It also works with <a href="https://github.com/joshday/OnlineStats.jl">OnlineStats.jl</a>
by treating it as a reducing function (or more precisely a monoid):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OnlineStats

julia&gt; Folds.reduce(Mean(), 1:10)
Mean: n=10 | value=5.5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OnlineStats

julia<span class="pl-k">&gt;</span> Folds<span class="pl-k">.</span><span class="pl-c1">reduce</span>(<span class="pl-c1">Mean</span>(), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
Mean<span class="pl-k">:</span> n<span class="pl-k">=</span><span class="pl-c1">10</span> <span class="pl-k">|</span> value<span class="pl-k">=</span><span class="pl-c1">5.5</span></pre></div>
<h3 dir="auto"><a id="user-content-extensible-execution-mechanism" class="anchor" aria-hidden="true" href="#extensible-execution-mechanism"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extensible execution mechanism</h3>
<p dir="auto">Folds.jl decouples the implementation and the execution mechanism
("executor"). Additional executors can be installed from
<a href="https://github.com/JuliaFolds/FoldsThreads.jl">FoldsThreads.jl</a>,
<a href="https://github.com/JuliaFolds/FoldsCUDA.jl">FoldsCUDA.jl</a> (rather WIP), and
<a href="https://github.com/JuliaFolds/FoldsDagger.jl">FoldsDagger.jl</a> (very WIP).</p>
</article></div>