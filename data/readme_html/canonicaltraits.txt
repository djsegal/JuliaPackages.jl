<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-canonicaltraits" class="anchor" aria-hidden="true" href="#canonicaltraits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CanonicalTraits</h1>
<p dir="auto"><a href="https://thautwarm.github.io/CanonicalTraits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://thautwarm.github.io/CanonicalTraits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/ef2963f072da1a61a3df68686ccef86709fad9d7007c9ae6d734e85ef0a6ba7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d707572706c652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-purple.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/thautwarm/CanonicalTraits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e3fa2ffa4647b261d1159befd4ef9995db4dbfe2e6d457c5859fd3a77d9c4d94/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f43616e6f6e6963616c5472616974732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/CanonicalTraits.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thautwarm/CanonicalTraits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8f0c249aabdebe31c9903ba2663c28eb923e9a65ff597a10a76c077e6fb36031/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f43616e6f6e6963616c5472616974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/CanonicalTraits.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Check documentations for more details.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ol dir="auto">
<li><a href="https://thautwarm.github.io/CanonicalTraits.jl/dev/#Zero-Cost-1" rel="nofollow">Zero-cost</a> abstractions(via <code>@implement!</code>)</li>
<li>Multiple-param traits</li>
<li>Functional dependencies</li>
<li>Implemented via dictionay passing algorithm</li>
<li>Elegant notations</li>
<li>Flexible Instances &amp; Flexible Classes</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&quot;&quot;&quot;vector space to scalar space&quot;&quot;&quot;
function V2F end

@trait VecSpace{F, V} where
  {F = V2F(V)} begin
   vec_add    :: [V, V] =&gt; V
   scalar_mul :: [F, V] =&gt; V
end

@trait VecSpace{F, V} &gt;: InnerProd{F, V} where
  {F = V2F(V)} begin
  dot :: [V, V] =&gt; F
end

@trait InnerProd{F, V} &gt;: Ortho{F, V} where
  {F = V2F(V)} begin
  gram_schmidt! :: [V, Vector{V}] =&gt; V

  gram_schmidt!(v :: V, vs :: Vector{V}) where V = begin
    for other in vs
        coef = dot(v, other) / dot(other, other)
        incr = scalar_mul(-coef, other)
        v = vec_add(v, incr)
    end
    magnitude = sqrt(dot(v, v))
    scalar_mul(1/magnitude, v)
  end
end"><pre><span class="pl-s"><span class="pl-pds">"""</span>vector space to scalar space<span class="pl-pds">"""</span></span>
<span class="pl-k">function</span> V2F <span class="pl-k">end</span>

<span class="pl-c1">@trait</span> VecSpace{F, V} <span class="pl-k">where</span>
  {F <span class="pl-k">=</span> <span class="pl-c1">V2F</span>(V)} <span class="pl-k">begin</span>
   vec_add    <span class="pl-k">::</span> [V, V] <span class="pl-k">=&gt;</span> V
   scalar_mul <span class="pl-k">::</span> [F, V] <span class="pl-k">=&gt;</span> V
<span class="pl-k">end</span>

<span class="pl-c1">@trait</span> VecSpace{F, V} <span class="pl-k">&gt;:</span> <span class="pl-c1">InnerProd{F, V}</span> <span class="pl-k">where</span>
  {F <span class="pl-k">=</span> <span class="pl-c1">V2F</span>(V)} <span class="pl-k">begin</span>
  dot <span class="pl-k">::</span> [V, V] <span class="pl-k">=&gt;</span> F
<span class="pl-k">end</span>

<span class="pl-c1">@trait</span> InnerProd{F, V} <span class="pl-k">&gt;:</span> <span class="pl-c1">Ortho{F, V}</span> <span class="pl-k">where</span>
  {F <span class="pl-k">=</span> <span class="pl-c1">V2F</span>(V)} <span class="pl-k">begin</span>
  gram_schmidt! <span class="pl-k">::</span> [V, Vector{V}] <span class="pl-k">=&gt;</span> V

  <span class="pl-en">gram_schmidt!</span>(v <span class="pl-k">::</span> <span class="pl-c1">V</span>, vs <span class="pl-k">::</span> <span class="pl-c1">Vector{V}</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> <span class="pl-k">begin</span>
    <span class="pl-k">for</span> other <span class="pl-k">in</span> vs
        coef <span class="pl-k">=</span> <span class="pl-c1">dot</span>(v, other) <span class="pl-k">/</span> <span class="pl-c1">dot</span>(other, other)
        incr <span class="pl-k">=</span> <span class="pl-c1">scalar_mul</span>(<span class="pl-k">-</span>coef, other)
        v <span class="pl-k">=</span> <span class="pl-c1">vec_add</span>(v, incr)
    <span class="pl-k">end</span>
    magnitude <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">dot</span>(v, v))
    <span class="pl-c1">scalar_mul</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>magnitude, v)
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>