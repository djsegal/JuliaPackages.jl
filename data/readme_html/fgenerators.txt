<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fgenerators-foldl-for-humans" class="anchor" aria-hidden="true" href="#fgenerators-foldl-for-humans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FGenerators: <code>foldl</code> for humansâ„¢</h1>
<p><a href="https://juliafolds.github.io//FGenerators.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaFolds//FGenerators.jl/actions?query=workflow%3ARun+tests"><img src="https://github.com/JuliaFolds//FGenerators.jl/workflows/Run%20tests/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a></p>
<p>FGenerators.jl is a package for defining Transducers.jl-compatible
extended <code>foldl</code> with a simple <code>@yield</code>-based syntax.  Here are a few
examples for creating ad-hoc "generators":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FGenerators

julia&gt; @fgenerator function generate123()
           @yield 1
           @yield 2
           @yield 3
       end;

julia&gt; collect(generate123())
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; sum(generate123())
6

julia&gt; @fgenerator function organpipe(n::Integer)
           i = 0
           while i != n
               i += 1
               @yield i
           end
           while true
               i -= 1
               i == 0 &amp;&amp; return
               @yield i
           end
       end;

julia&gt; collect(organpipe(3))
5-element Array{Int64,1}:
 1
 2
 3
 2
 1

julia&gt; @fgenerator function organpipe2(n)
           @yieldfrom 1:n
           @yieldfrom n-1:-1:1
       end;

julia&gt; collect(organpipe2(2))
3-element Array{Int64,1}:
 1
 2
 1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FGenerators

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@fgenerator</span> <span class="pl-k">function</span> <span class="pl-en">generate123</span>()
           <span class="pl-c1">@yield</span> <span class="pl-c1">1</span>
           <span class="pl-c1">@yield</span> <span class="pl-c1">2</span>
           <span class="pl-c1">@yield</span> <span class="pl-c1">3</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">generate123</span>())
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(<span class="pl-c1">generate123</span>())
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@fgenerator</span> <span class="pl-k">function</span> <span class="pl-en">organpipe</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
           i <span class="pl-k">=</span> <span class="pl-c1">0</span>
           <span class="pl-k">while</span> i <span class="pl-k">!=</span> n
               i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
               <span class="pl-c1">@yield</span> i
           <span class="pl-k">end</span>
           <span class="pl-k">while</span> <span class="pl-c1">true</span>
               i <span class="pl-k">-=</span> <span class="pl-c1">1</span>
               i <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span>
               <span class="pl-c1">@yield</span> i
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">organpipe</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@fgenerator</span> <span class="pl-k">function</span> <span class="pl-en">organpipe2</span>(n)
           <span class="pl-c1">@yieldfrom</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
           <span class="pl-c1">@yieldfrom</span> n<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">organpipe2</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span></pre></div>
<p>FGenerators.jl is a spin-off of
<a href="https://github.com/JuliaFolds/GeneratorsX.jl">GeneratorsX.jl</a>.</p>
<p>Use <a href="https://github.com/JuliaFolds/FLoops.jl">FLoops.jl</a> to iterate
over the items yielded from the generator:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using FLoops

julia&gt; @floop for x in generate123()
           @show x
       end
x = 1
x = 2
x = 3
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FLoops

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@floop</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">generate123</span>()
           <span class="pl-c1">@show</span> x
       <span class="pl-k">end</span>
x <span class="pl-k">=</span> <span class="pl-c1">1</span>
x <span class="pl-k">=</span> <span class="pl-c1">2</span>
x <span class="pl-k">=</span> <span class="pl-c1">3</span></pre></div>
<h2><a id="user-content-adding-fold-protocol-to-existing-type" class="anchor" aria-hidden="true" href="#adding-fold-protocol-to-existing-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding fold protocol to existing type</h2>
<p>The <code>foldl</code> protocol can be implemented for an existing type <code>T</code>, by
using the syntax <code>@fgenerator(foldable::T) do .. end</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct OrganPipe &lt;: Foldable
           n::Int
       end

julia&gt; @fgenerator(foldable::OrganPipe) do
           n = foldable.n
           @yieldfrom 1:n
           @yieldfrom n-1:-1:1
       end;

julia&gt; collect(OrganPipe(2))
3-element Array{Int64,1}:
 1
 2
 1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> OrganPipe <span class="pl-k">&lt;:</span> <span class="pl-c1">Foldable</span>
           n<span class="pl-k">::</span><span class="pl-c1">Int</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@fgenerator</span>(foldable<span class="pl-k">::</span><span class="pl-c1">OrganPipe</span>) <span class="pl-k">do</span>
           n <span class="pl-k">=</span> foldable<span class="pl-k">.</span>n
           <span class="pl-c1">@yieldfrom</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
           <span class="pl-c1">@yieldfrom</span> n<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">OrganPipe</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span></pre></div>
<p>Note that inheriting <code>Foldable</code> is necessary only if using <code>Base</code> API
such as <code>collect</code>.  It is not necessary when using just Transducers.jl
API (including <code>FLoops.@floop</code>).</p>
<h2><a id="user-content-defining-parallelizable-collection" class="anchor" aria-hidden="true" href="#defining-parallelizable-collection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining parallelizable collection</h2>
<p><code>@fgenerator</code> alone is not enough for using parallel loops on the
collection.  However it can be easily supported by defining
<a href="https://github.com/JuliaFolds/SplittablesBase.jl"><code>SplittablesBase.halve</code></a>
and <code>length</code> (or <code>SplittablesBase.amount</code> if <code>length</code> is hard to
define).  Since <code>halve</code> and <code>length</code> has to be implemented on the same
existing type, <code>@fgenerator(...) do</code> notation as above should be used.
Extending <code>OrganPipe</code> example above:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SplittablesBase

julia&gt; function SplittablesBase.halve(foldable::OrganPipe)
           n = foldable.n
           return (1:n, n-1:-1:1)
       end;

julia&gt; Base.length(foldable::OrganPipe) = 2 * foldable.n - 1;

julia&gt; @floop for x in OrganPipe(2)
           @reduce(s += x)
       end
       s
4
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SplittablesBase

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> SplittablesBase<span class="pl-k">.</span><span class="pl-en">halve</span>(foldable<span class="pl-k">::</span><span class="pl-c1">OrganPipe</span>)
           n <span class="pl-k">=</span> foldable<span class="pl-k">.</span>n
           <span class="pl-k">return</span> (<span class="pl-c1">1</span><span class="pl-k">:</span>n, n<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> Base<span class="pl-k">.</span><span class="pl-en">length</span>(foldable<span class="pl-k">::</span><span class="pl-c1">OrganPipe</span>) <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> foldable<span class="pl-k">.</span>n <span class="pl-k">-</span> <span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@floop</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">OrganPipe</span>(<span class="pl-c1">2</span>)
           <span class="pl-c1">@reduce</span>(s <span class="pl-k">+=</span> x)
       <span class="pl-k">end</span>
       s
<span class="pl-c1">4</span></pre></div>
<h2><a id="user-content-using-floop-in-fgenerator" class="anchor" aria-hidden="true" href="#using-floop-in-fgenerator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using <code>@floop</code> in <code>@fgenerator</code></h2>
<p><code>@floop</code> can be used inside <code>@fgenerator</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @fgenerator function ffilter(f, xs)
           @floop for x in xs
               if f(x)
                   @yield x
               end
           end
       end;

julia&gt; collect(ffilter(isodd, generate123()))
2-element Array{Int64,1}:
 1
 3

julia&gt; collect(ffilter(isodd, organpipe(3)))
3-element Array{Int64,1}:
 1
 3
 1

julia&gt; collect(ffilter(isodd, 1:5))  # fallback to `Base.iterate`
3-element Array{Int64,1}:
 1
 3
 5
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@fgenerator</span> <span class="pl-k">function</span> <span class="pl-en">ffilter</span>(f, xs)
           <span class="pl-c1">@floop</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> xs
               <span class="pl-k">if</span> <span class="pl-c1">f</span>(x)
                   <span class="pl-c1">@yield</span> x
               <span class="pl-k">end</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">ffilter</span>(isodd, <span class="pl-c1">generate123</span>()))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">ffilter</span>(isodd, <span class="pl-c1">organpipe</span>(<span class="pl-c1">3</span>)))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">ffilter</span>(isodd, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>))  <span class="pl-c"><span class="pl-c">#</span> fallback to `Base.iterate`</span>
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">5</span></pre></div>
</article></div>