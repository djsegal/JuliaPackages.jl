<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-overseer-entity-component-system" class="anchor" aria-hidden="true" href="#overseer-entity-component-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overseer (Entity Component System)</h1>
<p><a href="https://travis-ci.org/louisponet/Overseer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8b1e3a0e79ecb6111257835c587eb28e5f726a5d/68747470733a2f2f7472617669732d63692e6f72672f6c6f756973706f6e65742f4f766572736565722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/louisponet/Overseer.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/louisponet/Overseer.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/320c7d3653f2d41cd98543373d6e1d1f054c97b1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c6f756973706f6e65742f4f766572736565722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/louisponet/Overseer.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package supplies a lightweight, performant and friction-free implementation of the <a href="https://en.wikipedia.org/wiki/Entity_component_system" rel="nofollow">Entity component system</a>(ECS) paradigm. It has been used mostly in game development, however I think that it's concept, way of programming and thinking can be applied and used in more broad applications. It offers a very clean and flexible way to gradually build up an application in well separated blocks, while remaining very performant due to the way data is generally structured and used.</p>
<p>The API and performance of this package has been evolving as I used it during development of <a href="https://github.com/louisponet/Glimpse.jl">Glimpse</a>.</p>
<h2><a id="user-content-ecs-basics" class="anchor" aria-hidden="true" href="#ecs-basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ECS Basics</h2>
<p>The main idea of an ECS is to have a very clear separation between data and logic, grouping data in logic-free <code>Components</code> and logic in data-free <code>Systems</code>. Systems will perform their logic on a set of Components they care about, usually iterating through all the entities that have a particular combination of the components, systems tend to not care about specific entities, only groups of them. This allows for ideal performance since data is accessed through iterating over packed arrays, while allowing a high degree of flexibility by attaching different components to entities on the fly.</p>
<p>ECS can be implemented in a lot of ways, each with slightly different behaviors. This is a small introduction to the specifics of this implementation, since it's important to understand it to be used effectively.</p>
<h3><a id="user-content-entity" class="anchor" aria-hidden="true" href="#entity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Entity</h3>
<p>Purely an identifier, used as an index.</p>
<h3><a id="user-content-component--componentdata" class="anchor" aria-hidden="true" href="#component--componentdata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component &amp; ComponentData</h3>
<p>The data that can be attached to Entities is a subtype of <code>ComponentData</code> and is stored contiguously in a <code>Component</code>. An <code>Entity</code> can be used as an index into the <code>Component</code> to retrieve its data.
Each <code>ComponentData</code> should be purely a store for data, with no more logic attached to it than for creation and accessing.</p>
<h3><a id="user-content-system--stage" class="anchor" aria-hidden="true" href="#system--stage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>System &amp; Stage</h3>
<p>This where all the logic should take place. Each system should be an empty struct <a href="https://github.com/louisponet/Glimpse.jl/blob/43d9e0d6f116343324b4a083d3cb80943225ac4e/src/systems/rendering/depthpeeling.jl#L18">(except for maybe holding settings info)</a> that subtypes <code>System</code> and overloads 2 functions:
- <code>Overseer.update(::System, m::AbstractLedger)</code>
- <code>Overseer.requested_components(::System)</code></p>
<p>The first one will be used to perform each update, i.e. perform the system's main logic, while the latter is used when the system is added to an <code>AbstractLedger</code> to make sure that all <code>Component</code>s that the system cares for are present.</p>
<p>Systems are then grouped together into a <code>Stage</code> which is really just a <code>Pair{Symbol, Vector{System}}</code>, which is just to allow for updating specific groups of systems together if desired.</p>
<h3><a id="user-content-abstractledger" class="anchor" aria-hidden="true" href="#abstractledger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AbstractLedger</h3>
<p>All Entities, Components and Stages are grouped in an <code>AbstractLedger</code> which takes care of creating new entities, accessing components, updating systems and generally making sure that everything runs.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<p>To get a better understanding of how all of this works, it's best to see it in action in an example.
Here we will simulate oscillation and rotation of entities.</p>
<p>First we define the components that will be used.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Overseer
<span class="pl-k">using</span> GeometryTypes

<span class="pl-c1">@component</span> <span class="pl-k">struct</span> Spatial
    position<span class="pl-k">::</span><span class="pl-c1">Point3{Float64}</span>
    velocity<span class="pl-k">::</span><span class="pl-c1">Vec3{Float64}</span>
<span class="pl-k">end</span>

<span class="pl-c1">@component</span> <span class="pl-k">struct</span> Spring
    center<span class="pl-k">::</span><span class="pl-c1">Point3{Float64}</span>
    spring_constant<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span>
   
<span class="pl-c1">@component</span> <span class="pl-k">struct</span> Rotation
	omega<span class="pl-k">::</span><span class="pl-c1">Float64</span>
	center<span class="pl-k">::</span><span class="pl-c1">Point3{Float64}</span>
	axis<span class="pl-k">::</span><span class="pl-c1">Vec3{Float64}</span>
<span class="pl-k">end</span></pre></div>
<p>One thing to remember is that for now components can not have type parameters.
Next we define our systems.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Oscillator <span class="pl-k">&lt;:</span> <span class="pl-c1">System</span> <span class="pl-k">end</span>

Overseer<span class="pl-k">.</span><span class="pl-en">requested_components</span>(<span class="pl-k">::</span><span class="pl-c1">Oscillator</span>) <span class="pl-k">=</span> (Spatial, Spring)

<span class="pl-k">function</span> Overseer<span class="pl-k">.</span><span class="pl-en">update</span>(<span class="pl-k">::</span><span class="pl-c1">Oscillator</span>, m<span class="pl-k">::</span><span class="pl-c1">AbstractLedger</span>)
	spatial <span class="pl-k">=</span> m[Spatial]
	spring <span class="pl-k">=</span> m[Spring]
	<span class="pl-k">for</span> e <span class="pl-k">in</span> <span class="pl-c1">@entities_in</span>(spatial <span class="pl-k">&amp;&amp;</span> spring)
		e_spat  <span class="pl-k">=</span> spatial[e]
		spr     <span class="pl-k">=</span> spring[e]
		v_prev  <span class="pl-k">=</span> e_spat<span class="pl-k">.</span>velocity 
		new_v   <span class="pl-k">=</span> v_prev <span class="pl-k">-</span> (e_spat<span class="pl-k">.</span>position <span class="pl-k">-</span> spr<span class="pl-k">.</span>center) <span class="pl-k">*</span> spr<span class="pl-k">.</span>spring_constant
		spatial[e] <span class="pl-k">=</span> <span class="pl-c1">Spatial</span>(e_spat<span class="pl-k">.</span>position, new_v)
	<span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Rotator <span class="pl-k">&lt;:</span> <span class="pl-c1">System</span>  <span class="pl-k">end</span>
Overseer<span class="pl-k">.</span><span class="pl-en">requested_components</span>(<span class="pl-k">::</span><span class="pl-c1">Rotator</span>) <span class="pl-k">=</span> (Spatial, Rotation)

<span class="pl-k">function</span> Overseer<span class="pl-k">.</span><span class="pl-en">update</span>(<span class="pl-k">::</span><span class="pl-c1">Rotator</span>, dio<span class="pl-k">::</span><span class="pl-c1">AbstractLedger</span>)
	rotation  <span class="pl-k">=</span> dio[Rotation]
	spatial   <span class="pl-k">=</span> dio[Spatial]
	dt <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
	<span class="pl-k">for</span> e <span class="pl-k">in</span> <span class="pl-c1">@entities_in</span>(rotation <span class="pl-k">&amp;&amp;</span> spatial) 
    	e_rotation <span class="pl-k">=</span> rotation[e]
    	e_spatial  <span class="pl-k">=</span> spatial[e]
		n          <span class="pl-k">=</span> e_rotation<span class="pl-k">.</span>axis
		r          <span class="pl-k">=</span> <span class="pl-k">-</span> e_rotation<span class="pl-k">.</span>center <span class="pl-k">+</span> e_spatial<span class="pl-k">.</span>position
		theta      <span class="pl-k">=</span> e_rotation<span class="pl-k">.</span>omega <span class="pl-k">*</span> dt
		nnd        <span class="pl-k">=</span> n <span class="pl-k">*</span> <span class="pl-c1">dot</span>(n, r)
		spatial[e] <span class="pl-k">=</span> <span class="pl-c1">Spatial</span>(<span class="pl-c1">Point3f0</span>(e_rotation<span class="pl-k">.</span>center <span class="pl-k">+</span> nnd <span class="pl-k">+</span> (r <span class="pl-k">-</span> nnd) <span class="pl-k">*</span> <span class="pl-c1">cos</span>(theta) <span class="pl-k">+</span> <span class="pl-c1">cross</span>(r, n) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(theta)), e_spatial<span class="pl-k">.</span>velocity)
	<span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> Mover <span class="pl-k">&lt;:</span> <span class="pl-c1">System</span> <span class="pl-k">end</span>

Overseer<span class="pl-k">.</span><span class="pl-en">requested_components</span>(<span class="pl-k">::</span><span class="pl-c1">Mover</span>) <span class="pl-k">=</span> (Spatial, )

<span class="pl-k">function</span> Overseer<span class="pl-k">.</span><span class="pl-en">update</span>(<span class="pl-k">::</span><span class="pl-c1">Mover</span>, m<span class="pl-k">::</span><span class="pl-c1">AbstractLedger</span>)
    dt <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
    spat <span class="pl-k">=</span> m[Spatial]
    <span class="pl-k">for</span> e <span class="pl-k">in</span> <span class="pl-c1">@entities_in</span>(spat)
        e_spat <span class="pl-k">=</span> spat[e]
        spat[e] <span class="pl-k">=</span> <span class="pl-c1">Spatial</span>(e_spat<span class="pl-k">.</span>position <span class="pl-k">+</span> e_spat<span class="pl-k">.</span>velocity<span class="pl-k">*</span>dt, e_spat<span class="pl-k">.</span>velocity)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>As we can see the oscillator will cause the velocity to be inwards towards the center of the spring,
the rotator causes just a rotation around an axis with a given rotational velocity, and the mover updates the positions
given the velocity.</p>
<p>Each system iterates over the entities that have the components like given to the rules for <code>@entities_in</code>. For example
<code>@entities_in(a &amp;&amp; b || c &amp;&amp; !d)</code> will iterate through all the entities that are in component <code>a</code> and <code>b</code> or <code>c</code> but not in <code>d</code>.</p>
<p>Now we group these systems in a <code>:simulation</code> stage, construct a <code>Ledger</code> which is a basic <code>AbstractLedger</code> and generate some entities.</p>
<div class="highlight highlight-source-julia"><pre>stage <span class="pl-k">=</span> <span class="pl-c1">Stage</span>(<span class="pl-c1">:simulation</span>, [<span class="pl-c1">Oscillator</span>(), <span class="pl-c1">Rotator</span>(), <span class="pl-c1">Mover</span>()])
m <span class="pl-k">=</span> <span class="pl-c1">Ledger</span>(stage) <span class="pl-c"><span class="pl-c">#</span>this creates the Overseer with the system stage, and also makes sure all requested components are added.</span>

e1 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(m, 
            <span class="pl-c1">Spatial</span>(<span class="pl-c1">Point3</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>), <span class="pl-c1">Vec3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)), 
            <span class="pl-c1">Spring</span>(<span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">0.01</span>))
            
e2 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(m, 
            <span class="pl-c1">Spatial</span>(<span class="pl-c1">Point3</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Vec3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)), 
            <span class="pl-c1">Rotation</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Vec3</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)))

e3 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(m, 
            <span class="pl-c1">Spatial</span>(<span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>), <span class="pl-c1">Vec3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)), 
            <span class="pl-c1">Rotation</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Vec3</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)), 
            <span class="pl-c1">Spring</span>(<span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">0.01</span>))
e4 <span class="pl-k">=</span> <span class="pl-c1">Entity</span>(m, 
            <span class="pl-c1">Spatial</span>(<span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">Vec3</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)))</pre></div>
<p>So here we created 4 entities that will be acted upon by the systems in the following way:
- e1: <code>Oscillator</code> will update the velocity and <code>Mover</code> will change it's position
- e2: <code>Rotator</code> will update the position, <code>Mover</code> would too, but doesn't do anything since the <code>velocity</code> is 0.
- e3: both <code>Ocillator</code> and <code>Rotator</code>, and <code>Mover</code> will act on it.
- e4: only <code>Mover</code> will act on it and since nothing changes it's velocity it will move away from the origin forever.</p>
<p>Now we are ready to do an update and look at how the entities evolved.
Notice that stages are updated sequentially, and systems inside the stage too.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">update</span>(m)
m[e1] <span class="pl-c"><span class="pl-c">#</span>this groups all the componentdata that is associated with e1 </span>
m[e2]
m[e3]
m[e4]
m[Spring][e3] <span class="pl-c"><span class="pl-c">#</span>accesses Spring data for entity e3</span></pre></div>
<p>Entities can be deleted completely, or scheduled for later deletion:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">delete!</span>(m, e1) <span class="pl-c"><span class="pl-c">#</span>instantly deletes, but is quite slow since has to check all components for whether is has e1</span>
<span class="pl-c1">schedule_delete!</span>(m, e2) <span class="pl-c"><span class="pl-c">#</span>will schedule e2 for later batch deletion</span>
<span class="pl-c1">delete_scheduled!</span>(m) <span class="pl-c"><span class="pl-c">#</span>executes the batch deletion</span></pre></div>
<p>New data can be assigned to entities through.</p>
<div class="highlight highlight-source-julia"><pre>m[e2] <span class="pl-k">=</span> <span class="pl-c1">Spring</span>(<span class="pl-c1">Point3</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), <span class="pl-c1">0.01</span>)</pre></div>
<p>Entities can be removed from a specific component through</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">pop!</span>(m[Spring], e2)</pre></div>
<p>For more examples please have a look for now in <a href="https://github.com/louisponet/Glimpse.jl">Glimpse.jl</a>.</p>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation</h2>
<p>The implementation is heavily inspired by <a href="https://github.com/skypjack/entt">EnTT</a>, using slightly modified <a href="https://juliacollections.github.io/DataStructures.jl/latest/sparse_int_set/#DataStructures.SparseIntSet-1" rel="nofollow">SparseIntSets</a> to track which entities hold which components.</p>
</article></div>