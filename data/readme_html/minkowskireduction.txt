<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-minkowskireductionjl" class="anchor" aria-hidden="true" href="#minkowskireductionjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MinkowskiReduction.jl</h1>
<p dir="auto"><a href="https://glwhart.github.io/MinkowskiReduction.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/glwhart/MinkowskiReduction.jl/actions/workflows/Runtests.yml"><img src="https://github.com/glwhart/MinkowskiReduction.jl/actions/workflows/Runtests.yml/badge.svg" alt="Runtests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/glwhart/MinkowskiReduction.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f8c7f8c1b1825d8e73df0eeba98d84c1f1c63b4b0a08d79ca21c74bf6330f9f8/68747470733a2f2f636f6465636f762e696f2f67682f676c77686172742f4d696e6b6f77736b69526564756374696f6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d325347395a584b433257" alt="codecov" data-canonical-src="https://codecov.io/gh/glwhart/MinkowskiReduction.jl/branch/main/graph/badge.svg?token=2SG9ZXKC2W" style="max-width: 100%;"></a></p>
<p dir="auto">Reduces a basis for a three-dimensional lattice to the basis with the shortest possible basis vectors. Equivalently, the code finds the basis that is as close to orthogonal as possible. This is known as Minkowski reduction. (See <em>Geometrie der Zahlen</em> Hermann Minkowski 1910). In higher dimensions, the famous <a href="https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm" rel="nofollow">LLL lattice reduction</a> is commonly used. Lattice reduction is NP-complete in d &gt; 4 dimensions, but a polynomial time algorithm exists for three and four dimensions. (See <a href="https://link.springer.com/chapter/10.1007/978-3-540-24847-7_26" rel="nofollow">Phong Nguyen and Damien Stehlé, "Low-Dimensional Lattice Basis Reduction Revisited
"</a>) The implementation in this repo for three dimensions (and two dimensions) was inspired by this work.</p>
<p dir="auto">This code is useful in Density Functional Theory calculations to convert a crystal structure to a compact basis best suited for accurate calculations. It is also useful for reducing a lattice prior to calculating the pointgroup because the symmetry of a reduced lattice can be found in a fixed (relatively small) number of steps. (See pointgroup and spacegroup calculator <a href="https://github.com/glwhart/Spacey.jl">Spacey.jl</a>)</p>
<h1 dir="auto"><a id="user-content-example-1-reduce-a-slightly-skew-basis-for-a-simple-cubic-basis" class="anchor" aria-hidden="true" href="#example-1-reduce-a-slightly-skew-basis-for-a-simple-cubic-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Reduce a slightly skew basis for a simple cubic basis</h1>
<p dir="auto">Consider a simple cubic lattice. The "natural" basis is just the <em>standard basis</em>: (1,0,0), (0,1,0), and (0,0,1) and any equivalent (but skew) basis should reduce to this one. As an example, take this basis: (1,0,0), (0,1,0), and (1,1,1). The first two are orthogonal but the third one is not. Reduce it with the <code>minkReduce</code> function.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; a1 = [1.,0.,0.]
julia&gt; a2 = [0.,1.,0.]
julia&gt; a3 = [1.,1.,1.]
julia&gt; minkReduce(a1,a2,a3)
([1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0])"><pre class="notranslate"><code>julia&gt; a1 = [1.,0.,0.]
julia&gt; a2 = [0.,1.,0.]
julia&gt; a3 = [1.,1.,1.]
julia&gt; minkReduce(a1,a2,a3)
([1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0])
</code></pre></div>
<p dir="auto">The output is the standard basis, as expected.</p>
<h1 dir="auto"><a id="user-content-example-2-reduce-a-skew-basis-for-a-hexagonal-lattice" class="anchor" aria-hidden="true" href="#example-2-reduce-a-skew-basis-for-a-hexagonal-lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Reduce a skew basis for a hexagonal lattice</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; a1 = [1.,0.,0.]
julia&gt; a2 = [1.5,√3/2,0.]
julia&gt; a3 = [0,0.,√(8/3)]
julia&gt; minkReduce(a1,a2,a3)
([0.5, 0.8660254037844386, 0.0], [0.5, -0.8660254037844386, 0.0], [0.0, 0.0, 1.632993161855452])"><pre class="notranslate"><code>julia&gt; a1 = [1.,0.,0.]
julia&gt; a2 = [1.5,√3/2,0.]
julia&gt; a3 = [0,0.,√(8/3)]
julia&gt; minkReduce(a1,a2,a3)
([0.5, 0.8660254037844386, 0.0], [0.5, -0.8660254037844386, 0.0], [0.0, 0.0, 1.632993161855452])
</code></pre></div>
<h1 dir="auto"><a id="user-content-example-3-reduce-a-horribly-skew-basis" class="anchor" aria-hidden="true" href="#example-3-reduce-a-horribly-skew-basis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: Reduce a horribly skew basis</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; bigM = DeviousMat(26) # Matrix whose columns are an extremely skew basis for a simple cubic lattice
3×3 Array{Int64,2}:
  292755045568446  -214311567528244   292755045568445
 -214311567528244   156886956080403  -214311567528244
  292755045568445  -214311567528244   292755045568446
  
julia&gt; U,V,W = mapslices(x-&gt;[x], bigM, dims=2) # Grab columns for input to Minkowski reduction routine
3×1 Array{Array{Int64,1},2}:
 [292755045568446, -214311567528244, 292755045568445]
 [-214311567528244, 156886956080403, -214311567528244]
 [292755045568445, -214311567528244, 292755045568446]
  
  julia&gt; u,v,w = minkReduce(U,V,W) # Reduce the basis and store in new variables
  ([-1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, -1.0, 0.0], 15)"><pre class="notranslate"><code>julia&gt; bigM = DeviousMat(26) # Matrix whose columns are an extremely skew basis for a simple cubic lattice
3×3 Array{Int64,2}:
  292755045568446  -214311567528244   292755045568445
 -214311567528244   156886956080403  -214311567528244
  292755045568445  -214311567528244   292755045568446
  
julia&gt; U,V,W = mapslices(x-&gt;[x], bigM, dims=2) # Grab columns for input to Minkowski reduction routine
3×1 Array{Array{Int64,1},2}:
 [292755045568446, -214311567528244, 292755045568445]
 [-214311567528244, 156886956080403, -214311567528244]
 [292755045568445, -214311567528244, 292755045568446]
  
  julia&gt; u,v,w = minkReduce(U,V,W) # Reduce the basis and store in new variables
  ([-1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, -1.0, 0.0], 15)
</code></pre></div>
<p dir="auto">The output is the standard basis again (modulo negative signs and ordering). The fourth return value (an integer) is the number of steps required to reduce the basis. In this extreme case, 15 steps are required.</p>
</article></div>