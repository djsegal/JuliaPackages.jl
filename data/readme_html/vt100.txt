<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-vt100---a-pure-julia-terminal-emulator" class="anchor" aria-hidden="true" href="#vt100---a-pure-julia-terminal-emulator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VT100 - A pure julia terminal emulator</h1>
<p dir="auto"><a href="https://travis-ci.org/Keno/VT100.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d5118c53f7d8e458e1a74f61f084e3bb2d641552011155eb26f8a156f2ae2cf8/68747470733a2f2f7472617669732d63692e6f72672f4b656e6f2f56543130302e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Keno/VT100.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">VT100.jl attempts to implement a small and hackable terminal emulator, mostly intended for automatic verification of Terminal based UIs. The current implementation is very simple and ignores most of the more complicated ascepts of terminal emulation, including colors, attributes and Unicode combining characters, but is nevertheless useful for UI validation in regression tests. Support for those features will be added as the need arises</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create an Emulator
em = VT100.Emulator()
# Feed the emulator some io
VT100.parse!(em, IOBuffer(&quot;\e[37mHello World\n&quot;))
# Create an actual fake terminal
pty = VT100.create_pty()
# [Should pass pty.slave to C library, e.g. ncurses here]
# Now obtain a debug dump of the screen state
buf = IOBuffer()
VT100.dump(buf,devnull,em)
# buf now contains the screen contents of the emulator"><pre><span class="pl-c"><span class="pl-c">#</span> Create an Emulator</span>
em <span class="pl-k">=</span> VT100<span class="pl-k">.</span><span class="pl-c1">Emulator</span>()
<span class="pl-c"><span class="pl-c">#</span> Feed the emulator some io</span>
VT100<span class="pl-k">.</span><span class="pl-c1">parse!</span>(em, <span class="pl-c1">IOBuffer</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\e</span>[37mHello World<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>))
<span class="pl-c"><span class="pl-c">#</span> Create an actual fake terminal</span>
pty <span class="pl-k">=</span> VT100<span class="pl-k">.</span><span class="pl-c1">create_pty</span>()
<span class="pl-c"><span class="pl-c">#</span> [Should pass pty.slave to C library, e.g. ncurses here]</span>
<span class="pl-c"><span class="pl-c">#</span> Now obtain a debug dump of the screen state</span>
buf <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>()
VT100<span class="pl-k">.</span><span class="pl-c1">dump</span>(buf,<span class="pl-c1">devnull</span>,em)
<span class="pl-c"><span class="pl-c">#</span> buf now contains the screen contents of the emulator</span></pre></div>
<p dir="auto">For more examples, see the test directory.</p>
<h1 dir="auto"><a id="user-content-usage-for-terminal-regression-tests" class="anchor" aria-hidden="true" href="#usage-for-terminal-regression-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage for terminal regression tests</h1>
<p dir="auto">The package <a href="https://github.com/JuliaDebug/TerminalRegressionTests.jl">TerminalRegressionTests.jl</a> has a collection of utilities
to simplify writing regression tests for terminal applications.</p>
</article></div>