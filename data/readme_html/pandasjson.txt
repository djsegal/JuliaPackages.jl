<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pandasjsonjl" class="anchor" aria-hidden="true" href="#pandasjsonjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PandasJSON.jl</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cjdoris/PandasJSON.jl/actions/workflows/tests.yml"><img src="https://github.com/cjdoris/PandasJSON.jl/actions/workflows/tests.yml/badge.svg" alt="Tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cjdoris/PandasJSON.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed478c78821fa23db6488b7ae128127448516a36749f990a3d2310100612380a/68747470733a2f2f636f6465636f762e696f2f67682f636a646f7269732f50616e6461734a534f4e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d41383133555549484753" alt="Codecov" data-canonical-src="https://codecov.io/gh/cjdoris/PandasJSON.jl/branch/main/graph/badge.svg?token=A813UUIHGS" style="max-width: 100%;"></a></p>
<p dir="auto">A
<a href="https://julialang.org/" rel="nofollow">Julia</a>
package for reading and writing
<a href="https://pandas.pydata.org/" rel="nofollow">Pandas</a>
dataframes in JSON format.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add PandasJSON"><pre class="notranslate"><code>pkg&gt; add PandasJSON
</code></pre></div>
<h2 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h2>
<p dir="auto">First we load relevant packages. In this tutorial we use
<a href="https://dataframes.juliadata.org/stable/" rel="nofollow">DataFrames.jl</a>
for our tabular data, but any
<a href="https://tables.juliadata.org/stable/" rel="nofollow">Tables.jl</a>-compatible
data structure will do.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PandasJSON, DataFrames"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PandasJSON, DataFrames</pre></div>
<p dir="auto">Now we create a table with two columns and some missing data.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; df = DataFrame(x=[1,2,3], y=[true,false,missing])
3×2 DataFrame
 Row │ x      y
     │ Int64  Bool?
─────┼────────────────
   1 │     1     true
   2 │     2    false
   3 │     3  missing"><pre>julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(x<span class="pl-k">=</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], y<span class="pl-k">=</span>[<span class="pl-c1">true</span>,<span class="pl-c1">false</span>,<span class="pl-c1">missing</span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ x      y
     │ Int64  Bool?
─────┼────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>     <span class="pl-c1">true</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>    <span class="pl-c1">false</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>  <span class="pl-c1">missing</span></pre></div>
<p dir="auto">Now let's save this to disk in JSON format and take a look at the resulting file.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; PandasJSON.write(&quot;example.json&quot;, df)

julia&gt; println(read(&quot;example.json&quot;, String))
{&quot;y&quot;:{&quot;1&quot;:false,&quot;0&quot;:true,&quot;2&quot;:null},&quot;x&quot;:{&quot;1&quot;:2,&quot;0&quot;:1,&quot;2&quot;:3}}"><pre>julia<span class="pl-k">&gt;</span> PandasJSON<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>, df)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>, String))
{<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span><span class="pl-c1">:false</span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span><span class="pl-c1">:true</span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span><span class="pl-c1">:null</span>},<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>:{<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>:<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span>:<span class="pl-c1">1</span>,<span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>:<span class="pl-c1">3</span>}}</pre></div>
<p dir="auto">Finally we read the JSON file back as a table and convert it to a DataFrame. We could do the
same thing with a JSON file written in Python by Pandas.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; df = PandasJSON.read(&quot;example.json&quot;, DataFrame)
3×2 DataFrame
 Row │ x      y
     │ Int64  Bool?
─────┼────────────────
   1 │     1     true
   2 │     2    false
   3 │     3  missing"><pre>julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> PandasJSON<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>, DataFrame)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ x      y
     │ Int64  Bool?
─────┼────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>     <span class="pl-c1">true</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>    <span class="pl-c1">false</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>  <span class="pl-c1">missing</span></pre></div>
<p dir="auto"><strong>Note:</strong> These functions have an optional <code>orient</code> keyword argument, which controls
how the tabular data is represented as a JSON structure. The default in both Pandas and
PandasJSON is <code>orient="split"</code>, so with default parameters everything should be compatible.</p>
<p dir="auto">You should use this argument if either:</p>
<ul dir="auto">
<li>You are reading data which set the <code>orient</code> to something non-default.</li>
<li>You would like to guarantee row and column ordering is correct (<code>split</code>, <code>table</code> or
<code>values</code>) or require more column type information to be stored (<code>table</code>).</li>
</ul>
<p dir="auto">If you are not sure, you can use <code>guess_orient</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; PandasJSON.write(&quot;example.json&quot;, df, orient=&quot;table&quot;)

julia&gt; PandasJSON.guess_orient(&quot;example.json&quot;)
1-element Vector{Symbol}:
 &quot;table&quot;

julia&gt; df = PandasJSON.read(&quot;example.json&quot;, DataFrame, orient=&quot;table&quot;)
3×2 DataFrame
 Row │ x      y
     │ Int64  Bool?
─────┼────────────────
   1 │     1     true
   2 │     2    false
   3 │     3  missing"><pre>julia<span class="pl-k">&gt;</span> PandasJSON<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>, df, orient<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> PandasJSON<span class="pl-k">.</span><span class="pl-c1">guess_orient</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Symbol}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> PandasJSON<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>example.json<span class="pl-pds">"</span></span>, DataFrame, orient<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>table<span class="pl-pds">"</span></span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ x      y
     │ Int64  Bool?
─────┼────────────────
   <span class="pl-c1">1</span> │     <span class="pl-c1">1</span>     <span class="pl-c1">true</span>
   <span class="pl-c1">2</span> │     <span class="pl-c1">2</span>    <span class="pl-c1">false</span>
   <span class="pl-c1">3</span> │     <span class="pl-c1">3</span>  <span class="pl-c1">missing</span></pre></div>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">Read the docstrings for more details and keyword arguments.</p>
<ul dir="auto">
<li><code>PandasJSON.read(file, [type])</code>: Read a JSON file as a table.</li>
<li><code>PandasJSON.write(file, table)</code>: Write a table to the file in JSON format.</li>
<li><code>PandasJSON.guess_orient(file)</code>: Guess the <code>orient</code> parameter used to write the given file.</li>
</ul>
<p dir="auto">Note that <code>PandasJSON.read</code> should behave identically to
<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_json.html" rel="nofollow"><code>pandas.read_json</code></a>
and <code>PandasJSON.write</code> should behave identically to
<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow"><code>pandas.DataFrame.to_json</code></a>,
including the behaviour of any supported keyword arguments. Any deviation is considered a
bug.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<p dir="auto">There are many other Julia packages for reading and writing tabular data in formats
supported by Pandas. We recommend using one of these instead if possible.</p>
<table>
<thead>
<tr>
<th>Format</th>
<th>Packages</th>
</tr>
</thead>
<tbody>
<tr>
<td>Feather</td>
<td><a href="https://feather.juliadata.org/stable/" rel="nofollow">Feather</a></td>
</tr>
<tr>
<td>Parquet</td>
<td><a href="https://github.com/JuliaIO/Parquet.jl">Parquet</a>, <a href="https://expandingman.gitlab.io/Parquet2.jl/" rel="nofollow">Parquet2</a></td>
</tr>
<tr>
<td>Stata DTA, SAS, SPSS</td>
<td><a href="https://github.com/queryverse/ReadStat.jl">ReadStat</a></td>
</tr>
<tr>
<td>Excel</td>
<td><a href="https://felipenoris.github.io/XLSX.jl/stable/" rel="nofollow">XLSX</a>, <a href="https://github.com/queryverse/ExcelReaders.jl">ExcelReaders</a></td>
</tr>
<tr>
<td>CSV</td>
<td><a href="https://csv.juliadata.org/stable/" rel="nofollow">CSV</a>, <a href="https://docs.julialang.org/en/v1/stdlib/DelimitedFiles/" rel="nofollow">DelimitedFiles</a></td>
</tr>
<tr>
<td>FWF</td>
<td><a href="https://csv.juliadata.org/stable/examples.html#ignorerepeated_example" rel="nofollow">CSV</a></td>
</tr>
</tbody>
</table>
</article></div>