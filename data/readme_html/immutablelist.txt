<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-immutablelist" class="anchor" aria-hidden="true" href="#immutablelist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ImmutableList</h1>
<p dir="auto"><strong>A single linked immutable list for Julia</strong></p>
<p dir="auto">This package provides a singly linked immutable list.
Along with common operations such as listHead and listRest
to get the head and the tail in constant time.</p>
<h2 dir="auto"><a id="user-content-list" class="anchor" aria-hidden="true" href="#list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>List</h2>
<p dir="auto"><code>List</code> is a single linked immutable list.</p>
<ul dir="auto">
<li>Usage:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = List{Int}()    # Create a list of the given type.
b = list(1,2,3)    # Creates a list of 3 elements
c = 1 &lt;| b         # Creates a new list C using the cons opertor &lt;| with b as the tail."><pre>a <span class="pl-k">=</span> <span class="pl-c1">List</span><span class="pl-c1">{Int}</span>()    <span class="pl-c"><span class="pl-c">#</span> Create a list of the given type.</span>
b <span class="pl-k">=</span> <span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)    <span class="pl-c"><span class="pl-c">#</span> Creates a list of 3 elements</span>
c <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">&lt;</span><span class="pl-k">|</span> b         <span class="pl-c"><span class="pl-c">#</span> Creates a new list C using the cons opertor &lt;| with b as the tail.</span></pre></div>
<ul dir="auto">
<li>Utility functions:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
&quot;&quot;&quot; O(length(lst1)), O(1) if either list is empty &quot;&quot;&quot;
listAppend

&quot;&quot;&quot; O(n) &quot;&quot;&quot;
listLength

&quot;&quot;&quot; O(n) &quot;&quot;&quot;
listMember

&quot;&quot;&quot; O(index) &quot;&quot;&quot;
listGet

&quot;&quot;&quot; O(1) &quot;&quot;&quot;
listRest

&quot;&quot;&quot; O(1) &quot;&quot;&quot;
listHead

&quot;&quot;&quot; O(index) &quot;&quot;&quot;
listDelete

&quot;&quot;&quot; O(1) &quot;&quot;&quot;
listEmpty
"><pre><span class="pl-s"><span class="pl-pds">"""</span> O(length(lst1)), O(1) if either list is empty <span class="pl-pds">"""</span></span>
listAppend

<span class="pl-s"><span class="pl-pds">"""</span> O(n) <span class="pl-pds">"""</span></span>
listLength

<span class="pl-s"><span class="pl-pds">"""</span> O(n) <span class="pl-pds">"""</span></span>
listMember

<span class="pl-s"><span class="pl-pds">"""</span> O(index) <span class="pl-pds">"""</span></span>
listGet

<span class="pl-s"><span class="pl-pds">"""</span> O(1) <span class="pl-pds">"""</span></span>
listRest

<span class="pl-s"><span class="pl-pds">"""</span> O(1) <span class="pl-pds">"""</span></span>
listHead

<span class="pl-s"><span class="pl-pds">"""</span> O(index) <span class="pl-pds">"""</span></span>
listDelete

<span class="pl-s"><span class="pl-pds">"""</span> O(1) <span class="pl-pds">"""</span></span>
listEmpty
</pre></div>
<p dir="auto">Support for calling functions defined in the Julia core is also provided.
Such as eltype and length.</p>
</article></div>