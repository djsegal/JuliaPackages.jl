<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-iteratedintegrationjl" class="anchor" aria-hidden="true" href="#iteratedintegrationjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IteratedIntegration.jl</h1>
<p dir="auto"><a href="https://lxvm.github.io/IteratedIntegration.jl/dev/" rel="nofollow">Documentation</a></p>
<p dir="auto">This package provides experimental algorithms for globally h-adaptive iterated
integration.</p>
<p dir="auto">Here is an example comparing <code>nested_quadgk</code> to the globally-adaptive <code>iai</code> for
a challenging localized 3D integrand of a form typically found in Brillouin zone
integration</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using IteratedIntegration

julia&gt; f(x) = inv(0.01im+sum(sin, x))

julia&gt; @time I1, = nested_quadgk_count(f, (0,0,0), (2pi,2pi,2pi); atol=1e-5)
 13.810075 seconds (187.29 M allocations: 2.791 GiB, 4.05% gc time)
(3.014355431929516e-11 - 221.4503334458075im, 6.5132132917468245e-6, 187271895)

julia&gt; @time I2, = iai_count(f, (0,0,0), (2pi,2pi,2pi); atol=1e-5)
 85.821637 seconds (521.70 M allocations: 13.221 GiB, 2.34% gc time)
(1.9539925233402755e-14 - 221.45033344593668im, 8.248907526206854e-6, 151635225)

julia&gt; abs(I1-I2) # check how closely solutions agree to within tolerance
1.32642633231035e-10"><pre class="notranslate"><code>julia&gt; using IteratedIntegration

julia&gt; f(x) = inv(0.01im+sum(sin, x))

julia&gt; @time I1, = nested_quadgk_count(f, (0,0,0), (2pi,2pi,2pi); atol=1e-5)
 13.810075 seconds (187.29 M allocations: 2.791 GiB, 4.05% gc time)
(3.014355431929516e-11 - 221.4503334458075im, 6.5132132917468245e-6, 187271895)

julia&gt; @time I2, = iai_count(f, (0,0,0), (2pi,2pi,2pi); atol=1e-5)
 85.821637 seconds (521.70 M allocations: 13.221 GiB, 2.34% gc time)
(1.9539925233402755e-14 - 221.45033344593668im, 8.248907526206854e-6, 151635225)

julia&gt; abs(I1-I2) # check how closely solutions agree to within tolerance
1.32642633231035e-10
</code></pre></div>
<p dir="auto">It is interesting that <code>iai</code> has about 20% fewer function evaluations than
<code>nested_quadgk</code>, however both routines appear to be returning a solution with
nearly 5 digits of accuracy beyond what was requested</p>
<p dir="auto">Additionally, here is a comparison of the same integral to
<a href="https://github.com/JuliaMath/HCubature.jl">HCubature.jl</a> (note that I've
requested a larger tolerance so that the calculation finishes relatively quickly)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using HCubature

julia&gt; function hcubature_count(f, a, b; kwargs...)
       numevals=0
       I, E = hcubature(a, b; kwargs...) do x
           numevals += 1
           f(x)
       end
       return (I, E, numevals)
       end
hcubature_count (generic function with 1 method)

julia&gt; @time I3, = hcubature_count(k, (0,0,0), (2pi,2pi,2pi); atol=1e-2)
 36.371073 seconds (406.85 M allocations: 6.776 GiB, 10.80% gc time)
(-4.367439804114779e-8 - 221.45050701410435im, 0.009999996360083807, 406846935)

julia&gt; abs(I1-I3)
0.00017356830234685803"><pre class="notranslate"><code>julia&gt; using HCubature

julia&gt; function hcubature_count(f, a, b; kwargs...)
       numevals=0
       I, E = hcubature(a, b; kwargs...) do x
           numevals += 1
           f(x)
       end
       return (I, E, numevals)
       end
hcubature_count (generic function with 1 method)

julia&gt; @time I3, = hcubature_count(k, (0,0,0), (2pi,2pi,2pi); atol=1e-2)
 36.371073 seconds (406.85 M allocations: 6.776 GiB, 10.80% gc time)
(-4.367439804114779e-8 - 221.45050701410435im, 0.009999996360083807, 406846935)

julia&gt; abs(I1-I3)
0.00017356830234685803
</code></pre></div>
<p dir="auto">It is worth noting here that the reason <code>hcubature</code> uses far more function
evaluations is due to the geometry of the integrand and its interplay with
multi-dimensional quadratures, although <code>hcubature</code> returns a result much closer
to the requested tolerance.</p>
<h2 dir="auto"><a id="user-content-algorithm" class="anchor" aria-hidden="true" href="#algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Algorithm</h2>
<p dir="auto">See the <code>notes</code> folder for a description of the IAI algorithm.
The implementation is based on <a href="https://github.com/JuliaMath/QuadGK.jl">QuadGK.jl</a></p>
<h2 dir="auto"><a id="user-content-author-and-copyright" class="anchor" aria-hidden="true" href="#author-and-copyright"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Author and Copyright</h2>
<p dir="auto">IteratedIntegration.jl was written by <a href="https://web.mit.edu/lxvm/www/" rel="nofollow">Lorenzo Van
Mu√±oz</a>, and is free/open-source software under
the MIT license.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h2>
<ul dir="auto">
<li><a href="https://github.com/JuliaMath/QuadGK.jl">QuadGK.jl</a></li>
<li><a href="https://github.com/JuliaMath/HCubature.jl">HCubature.jl</a></li>
<li><a href="https://github.com/SciML/Integrals.jl">Integrals.jl</a></li>
</ul>
</article></div>