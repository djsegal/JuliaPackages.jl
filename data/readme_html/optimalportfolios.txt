<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-optimalportfoliosjl" class="anchor" aria-hidden="true" href="#optimalportfoliosjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OptimalPortfolios.jl</h1>
<p dir="auto">OptimalPortfolios.jl is a light-weight package for portfolio optimization. It essentially wraps julia optimization package <a href="https://jump.dev/JuMP.jl/stable/" rel="nofollow">JuMP</a>.</p>
<h2 dir="auto"><a id="user-content-portfolio-problem" class="anchor" aria-hidden="true" href="#portfolio-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Portfolio Problem</h2>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$$\text{max}_w ; \mathrm{J}(w)$$</math-renderer></p>
<p dir="auto">s.t.</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$$l \leq w \leq u$$</math-renderer></p>
<p dir="auto">and</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$$0 \leq w^T\mathbb{1} \leq 1,$$</math-renderer></p>
<p dir="auto">where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$w$</math-renderer> is the vector of % weights and the objective function <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$\mathrm{J}(w) = \frac{\mu^Tw - r_f}{\sqrt{w^T\Sigma w}}$</math-renderer> for maximum Sharpe ratio (MSR) portfolio and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$\mathrm{J}(w) = -w^T\Sigma w$</math-renderer> for minimum variance (MV) portfolio.</p>
<p dir="auto">Covariance matrix of returns <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$\Sigma$</math-renderer> and vector of mean returns <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$\mu$</math-renderer> are estimated from historical returns data. Estimation of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$\mu$</math-renderer> is notoriously unreliable and for that reason MV is often preferred over MSR. There are several methods available for robust estimation of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$\Sigma$</math-renderer> and this package offers a denoising option based on random matrix theory (Marcenko-Pastur).</p>
<h2 dir="auto">
<a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Execute below on Julia REPL to install the package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(&quot;OptimalPortfolios&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>OptimalPortfolios<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Import the package with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OptimalPortfolios"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OptimalPortfolios</pre></div>
<p dir="auto">Compute maximum Sharpe ratio portfolio with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; allocate(X, lower, upper; rf = 0, fullinvest = true, denoise = true, method = &quot;MSR&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">allocate</span>(X, lower, upper; rf <span class="pl-k">=</span> <span class="pl-c1">0</span>, fullinvest <span class="pl-k">=</span> <span class="pl-c1">true</span>, denoise <span class="pl-k">=</span> <span class="pl-c1">true</span>, method <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MSR<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">X is the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$N \times T$</math-renderer> matrix of returns. N is the number of assets and T the is the number of samples. lower and upper are the bounds on weights.</p>
<p dir="auto">Compute minimum variance portfolio with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; allocate(X, lower, upper; fullinvest = true, denoise = true, method = &quot;MV&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">allocate</span>(X, lower, upper; fullinvest <span class="pl-k">=</span> <span class="pl-c1">true</span>, denoise <span class="pl-k">=</span> <span class="pl-c1">true</span>, method <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MV<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Backtest optimal portfolio allocations. -obs_ is the size of historical returns window used to compute optimal portfolio and <em>hold</em> is the holding or rebalance period. Transaction costs are assumed to be zero. P is the <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="11638595e7221be96ee4f7b7dbf5e1dd">$N \times T$</math-renderer> matrix of prices.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = backtest(px, obs, hold, lower, upper; rf = 0.0, fullinvest = true, denoise = true, method = &quot;MSR&quot;)
julia&gt; plot(res.nav)
julia&gt; println(res.wt)"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">backtest</span>(px, obs, hold, lower, upper; rf <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, fullinvest <span class="pl-k">=</span> <span class="pl-c1">true</span>, denoise <span class="pl-k">=</span> <span class="pl-c1">true</span>, method <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>MSR<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(res<span class="pl-k">.</span>nav)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(res<span class="pl-k">.</span>wt)</pre></div>
</article></div>