<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unrollingaveragesjl" class="anchor" aria-hidden="true" href="#unrollingaveragesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UnrollingAverages.jl</h1>
<p dir="auto"><a href="https://github.com/InPhyT/UnrollingAverages.jl/blob/main/LICENSE"><img src="https://camo.githubusercontent.com/fd551ba4b042d89480347a0e74e31af63b356b2cac1116c7b80038f41b04a581/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e2e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-green.svg" style="max-width: 100%;"></a>
<a href="https://InPhyT.github.io/UnrollingAverages.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/2ec1d0b801a29bbd342c1e9c6902bd0de8dc392be0100b99716c138e34a4bf0c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d537461626c652d626c75652e737667" alt="Docs: Stable" data-canonical-src="https://img.shields.io/badge/Docs-Stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://InPhyT.github.io/UnrollingAverages.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/20dca56548bc25b23380187f49f2162f04b623b8f466e9728c582183c0d3bcf5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d4465762d6c69676874626c75652e737667" alt="Docs: Dev" data-canonical-src="https://img.shields.io/badge/Docs-Dev-lightblue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/InPhyT/UnrollingAverages.jl/actions/workflows/CI.yml"><img src="https://github.com/InPhyT/UnrollingAverages.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://github.com/InPhyT/UnrollingAverages.jl/actions/workflows/CompatHelper.yml"><img src="https://github.com/InPhyT/UnrollingAverages.jl/actions/workflows/CompatHelper.yml/badge.svg" alt="Compat Helper" style="max-width: 100%;"></a>
<a href="https://github.com/InPhyT/UnrollingAverages.jl/actions/workflows/FormatCheck.yml"><img src="https://github.com/InPhyT/UnrollingAverages.jl/actions/workflows/FormatCheck.yml/badge.svg" alt="Format Check" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/InPhyT/UnrollingAverages.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ddc5563ccb0b67ba544003a0f51abfcae445a8eb71afc2f64558a559b53927a5/68747470733a2f2f636f6465636f762e696f2f67682f496e506879542f556e726f6c6c696e6741766572616765732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d374b4d5132524e394744" alt="Coverage: Codecov" data-canonical-src="https://codecov.io/gh/InPhyT/UnrollingAverages.jl/branch/main/graph/badge.svg?token=7KMQ2RN9GD" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/InPhyT/UnrollingAverages.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb62d491d42536ac9cb3286c8f06a61cec6b35aee62e1bf07df12685f643782d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f496e506879542f556e726f6c6c696e6741766572616765732e6a6c2f62616467652e737667" alt="Coverage: Coveralls" data-canonical-src="https://coveralls.io/repos/github/InPhyT/UnrollingAverages.jl/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/430885253" rel="nofollow"><img src="https://camo.githubusercontent.com/8d17c9995a9dc8e92e49401eefe6c9026d82abb60d0b055f558c922b3a40fbfb/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3433303838353235332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/430885253.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/InPhyT/UnrollingAverages.jl/blob/main/docs/src/assets/logo.png?raw=true"><img align="right" width="200" height="200" src="https://github.com/InPhyT/UnrollingAverages.jl/raw/main/docs/src/assets/logo.png?raw=true" style="max-width: 100%;"></a></p>
<p dir="auto">UnrollingAverages is a Julia package aimed at <em>deconvolving</em> (or <em>unrolling</em>) moving averages of time series to get the original ones back.</p>
<p dir="auto">UnrollingAverages currently assumes that the moving average is a <a href="https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average" rel="nofollow">simple moving average</a>. Further relaxations and extensions may come in the future, see <a href="#Future-Developments">Future Developments</a> section.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Press <code>]</code> in the Julia REPL and then</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add UnrollingAverages"><pre lang="nothing" class="notranslate"><code>pkg&gt; add UnrollingAverages
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The package exports a single function called <code>unroll</code>: it returns a <code>Vector</code> whose elements are the possible original time series.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="unroll( moving_average::Vector{Float64},
        window::Int64;
        initial_conditions::U=nothing,
        assert_natural::Bool=false
      ) where {U&lt;:Union{Tuple{Vararg{Union{Int64,Float64}}},Nothing}}"><pre><span class="pl-c1">unroll</span>( moving_average<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>,
        window<span class="pl-k">::</span><span class="pl-c1">Int64</span>;
        initial_conditions<span class="pl-k">::</span><span class="pl-c1">U</span><span class="pl-k">=</span><span class="pl-c1">nothing</span>,
        assert_natural<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">false</span>
      ) <span class="pl-k">where</span> {U<span class="pl-k">&lt;:</span><span class="pl-c1">Union</span>{Tuple{Vararg{Union{Int64,Float64}}},Nothing}}</pre></div>
<h3 dir="auto"><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arguments</h3>
<ul dir="auto">
<li><code>moving_average</code>: the time series representing the moving average to unroll ;</li>
<li><code>window</code>: the width of the moving average ;</li>
<li><code>initial_conditions</code>: the initial values of the original time series to be recovered. It may be a <code>Tuple</code> of <code>window-1</code> positive integer values, or <code>nothing</code> if initial conditions are unknown. Currently it is not possible to specify values in the middle of the time series, this may be a feature to be added in the future ;</li>
<li><code>assert_natural</code> default boolean argument. If true, the pipeline will try to recover a time series of natural numbers only. More then one acceptable time series (where "acceptable" means that it reproduces <code>moving_average</code>) may be found and all will be returned.</li>
</ul>
<p dir="auto">A few remarks:</p>
<ol dir="auto">
<li>If <code>isnothing(initial_conditions)</code>:
<ul dir="auto">
<li><code>if assert_natural</code>, then an internal <code>unroll_iterative</code> method is called, which tries to exactly recover the whole time series, initial conditions included. Enter <code>?UnrollingAverages.unroll_iterative</code> in a Julia  to read further details;</li>
<li><code>if !assert_natural</code>, then an internal <code>unroll_linear_approximation</code> method is called. See this <a href="https://stats.stackexchange.com/a/68002" rel="nofollow">StackExchange post</a>. NB: this is an approximated method, it will generally not return the exact original time series;</li>
</ul>
</li>
<li>If <code>typeof(initial_conditions) &lt;: Ntuple{window-1, &lt;:Union{Int64,Float64}}</code>, then an internal <code>unroll_recursive</code> method is called, which exactly recovers the time series. Mathematical details about this function are reported in the <a href="https://InPhyT.github.io/UnrollingAverages.jl/stable" rel="nofollow">documentation</a>, and you may read more by entering <code>?UnrollingAverages.unroll_recursive</code>.</li>
</ol>
<h2 dir="auto"><a id="user-content-future-developments" class="anchor" aria-hidden="true" href="#future-developments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future Developments</h2>
<ul dir="auto">
<li>Modify <code>initial_conditions</code> argument of <code>unroll</code> so that it accepts known values throughout the series;</li>
<li>Implement reversing methods for other types of moving averages .</li>
</ul>
<h2 dir="auto"><a id="user-content-how-to-contribute" class="anchor" aria-hidden="true" href="#how-to-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to Contribute</h2>
<p dir="auto">If you wish to change or add some functionality, please file an <a href="https://github.com/InPhyT/UnrollingAverages.jl/issues">issue</a>. Some suggestions may be found in the <a href="#Future-Developments">Future Developments</a> section.</p>
<h2 dir="auto"><a id="user-content-how-to-cite" class="anchor" aria-hidden="true" href="#how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to Cite</h2>
<p dir="auto">If you use this package in your work, please cite this repository using the metadata in <a href="https://github.com/InPhyT/UnrollingAverages.jl/blob/main/CITATION.bib"><code>CITATION.bib</code></a>.</p>
<h2 dir="auto"><a id="user-content-announcements" class="anchor" aria-hidden="true" href="#announcements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Announcements</h2>
<ul dir="auto">
<li><a href="https://twitter.com/In_Phy_T/status/1461358804730204168?s=20&amp;t=OzJAPLw6gd2WsGjiqlYeWA" rel="nofollow">Twitter</a></li>
<li><a href="https://discourse.julialang.org/t/ann-unrollingaverages-jl-a-package-to-deconvolve-time-series-data/81684" rel="nofollow">Discourse</a></li>
<li><a href="https://forem.julialang.org/inphyt/ann-unrollingaveragesjl-a-package-to-deconvolve-time-series-data-5bbp" rel="nofollow">Forem</a></li>
</ul>
</article></div>