<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dispatcher" class="anchor" aria-hidden="true" href="#dispatcher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dispatcher</h1>
<p dir="auto"><a href="https://github.com/invenia/Dispatcher.jl/actions?query=workflow%3ACI"><img src="https://github.com/invenia/Dispatcher.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/invenia/Dispatcher.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8113ae1946eebd541690203803d2dca6c4ac18838e32b2baa2000a65f42f48ed/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f446973706174636865722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/invenia/Dispatcher.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Dispatcher is a tool for building and executing a computation graph given a series of dependent operations.</p>
<p dir="auto">Documentation: <a href="https://invenia.github.io/Dispatcher.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://invenia.github.io/Dispatcher.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">Using Dispatcher, <code>run!</code> builds and runs a computation graph of <code>DispatchNode</code>s.
<code>DispatchNode</code>s represent units of computation that can be run.
The most common <code>DispatchNode</code> is <code>Op</code>, which represents a function call on some arguments.
Some of those arguments may exist when building the graph, and others may represent the results of other <code>DispatchNode</code>s.
An <code>Executor</code> executes a whole <code>DispatchGraph</code>.
Two <code>Executor</code>s are provided.
<code>AsyncExecutor</code> executes computations asynchronously using Julia <code>Task</code>s.
<code>ParallelExecutor</code> executes computations in parallel using all available Julia processes (by calling <code>@spawn</code>).</p>
<h2 dir="auto"><a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Frequently Asked Questions</h2>
<blockquote>
<p dir="auto">How is Dispatcher different from ComputeFramework/Dagger?</p>
</blockquote>
<p dir="auto">Dagger is built around distributing vectorized computations across large arrays.
Dispatcher is built to deal with discrete, heterogeneous data using any Julia functions.</p>
<blockquote>
<p dir="auto">How is Dispatcher different from Arbiter?</p>
</blockquote>
<p dir="auto">Arbiter requires manually adding tasks and their dependencies and handling data passing.
Dispatcher automatically identifies dependencies from user code and passes data efficiently between dependencies.</p>
<blockquote>
<p dir="auto">Isn't this just Dask?</p>
</blockquote>
<p dir="auto">Pretty much.
The plan is to implement another <code>Executor</code> and <a href="https://github.com/dask/distributed/issues/586" data-hovercard-type="issue" data-hovercard-url="/dask/distributed/issues/586/hovercard">integrate</a> with the <a href="https://distributed.readthedocs.io/" rel="nofollow"><code>dask.distributed</code></a> scheduler service to piggyback off of their great work.</p>
<blockquote>
<p dir="auto">How does Dispatcher handle passing data?</p>
</blockquote>
<p dir="auto">Dispatcher uses Julia <code>RemoteChannel</code>s to pass data between dispatched <code>DispatchNode</code>s.
For more information on how data transfer works with Julia's parallel tools see their <a href="http://docs.julialang.org/en/latest/manual/parallel-computing/" rel="nofollow">documentation</a>.</p>
</article></div>