<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lapsolve" class="anchor" aria-hidden="true" href="#lapsolve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LapSolve</h1>
<p>Linear Assignment Problem solver via the Kuhn-Munkres algorithm, original Kernel functions come from the excellent <a href="https://github.com/Gnimuc/Hungarian.jl">Hungarian.jl</a>, this package adds a solver for stiff problems, which are LAP problems with too many blocking costs where an optimal fully assigned solution is impossible, but an optimal partial assignment may be possible. This solver has been modified to be completely non-copying and non-mutating, for saving as much memory as possible (this modification has also been sent upstream <a href="https://github.com/Gnimuc/Hungarian.jl/pull/15">#15</a>, although in some cases Hungarian.jl will still copy).</p>
<p><a href="https://travis-ci.com/francescoalemanno/LapSolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99b258354e1988818b3922f83d30a9255bb5f11b/68747470733a2f2f7472617669732d63692e636f6d2f6672616e636573636f616c656d616e6e6f2f4c6170536f6c76652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/francescoalemanno/LapSolve.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/francescoalemanno/LapSolve.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e1558cb1d95855bb74b1aade3cf1701fc2928e6/68747470733a2f2f636f6465636f762e696f2f67682f6672616e636573636f616c656d616e6e6f2f4c6170536f6c76652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/francescoalemanno/LapSolve.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/francescoalemanno/LapSolve.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fff7bddccd379d7c85d40e1c3a318200fb73b497/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6672616e636573636f616c656d616e6e6f2f4c6170536f6c76652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/francescoalemanno/LapSolve.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LapSolve

julia<span class="pl-k">&gt;</span> M<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">66</span>  <span class="pl-c1">83</span>  <span class="pl-c1">92</span>
 <span class="pl-c1">17</span>  <span class="pl-c1">92</span>  <span class="pl-c1">65</span>
 <span class="pl-c1">30</span>  <span class="pl-c1">84</span>  <span class="pl-c1">18</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve_lap</span>(M)
([<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>], <span class="pl-c1">118</span>)</pre></div>
<h3><a id="user-content-example-for-stiff-problem" class="anchor" aria-hidden="true" href="#example-for-stiff-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example for Stiff Problem</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LapSolve

julia<span class="pl-k">&gt;</span> M<span class="pl-k">=</span><span class="pl-c1">rand</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">Inf</span>],<span class="pl-c1">5</span>,<span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">5</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">Inf</span>    <span class="pl-c1">Inf</span>      <span class="pl-c1">1.0</span>    <span class="pl-c1">1.0</span>    <span class="pl-c1">1.0</span>
 <span class="pl-c1">Inf</span>    <span class="pl-c1">Inf</span>    <span class="pl-c1">Inf</span>    <span class="pl-c1">Inf</span>    <span class="pl-c1">Inf</span>
   <span class="pl-c1">2.0</span>    <span class="pl-c1">1.0</span>  <span class="pl-c1">Inf</span>      <span class="pl-c1">1.0</span>    <span class="pl-c1">2.0</span>
 <span class="pl-c1">Inf</span>      <span class="pl-c1">2.0</span>    <span class="pl-c1">1.0</span>    <span class="pl-c1">2.0</span>  <span class="pl-c1">Inf</span>
   <span class="pl-c1">2.0</span>    <span class="pl-c1">2.0</span>    <span class="pl-c1">2.0</span>  <span class="pl-c1">Inf</span>      <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">solve_stiff_lap</span>(M)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Tuple{Int64,Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 (<span class="pl-c1">1</span>, <span class="pl-c1">4</span>)        ← row <span class="pl-c1">1</span> is assigned to column <span class="pl-c1">4</span>
 (<span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)       ← <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">for</span> <span class="pl-c1">missing</span> assignment, row <span class="pl-c1">2</span> is assigned to <span class="pl-c1">nothing</span>
 (<span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
 (<span class="pl-c1">4</span>, <span class="pl-c1">3</span>)
 (<span class="pl-c1">5</span>, <span class="pl-c1">5</span>)
 (<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)       ← column <span class="pl-c1">1</span> is assigned to <span class="pl-c1">nothing</span></pre></div>
</article></div>