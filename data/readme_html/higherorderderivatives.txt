<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-higherorderderivatives" class="anchor" aria-hidden="true" href="#higherorderderivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HigherOrderDerivatives</h1>
<p dir="auto">Automatic higher order differentiation of generic Julia Functions. This repository contains an original implementation of (forward) automatic differentiation via dual numbers. Higher order derivatives are obtained by recursively chaining dual numbers together.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example:</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using HigherOrderDerivatives

julia&gt; f(x::Real) = exp(x^3 * cos(-x)^2 * sin(x));

julia&gt; D = x -&gt; derivative(f, x); # gives first derivative
julia&gt; D⁹ = x -&gt; derivative(f, x, 9); # gives 9th derivative

julia&gt; D(0.8)
0.567190549030136

julia&gt; D⁹(0.8)
-2.982695656166806e6

julia&gt; g(x::Vector) = exp(x'*x)

julia&gt; test = ones(4)

julia&gt; grad = x -&gt; gradient(g, x); # returns the gradient
julia&gt; hess = x -&gt; hessian(g, x); # hessian
julia&gt; higher_grad = x,y -&gt; gradient(g, x, y) ## returns the yth order gradient

julia&gt; higher_grad(test, 3)

4x4x4 Array{Float64,3}:
[1091.9630006628847 655.1778003977308 655.1778003977308 655.1778003977308;
655.1778003977308 655.1778003977308 436.7852002651539 436.7852002651539;
655.1778003977308 436.7852002651539 655.1778003977308 436.7852002651539;
655.1778003977308 436.7852002651539 436.7852002651539 655.1778003977308]

[655.1778003977308 655.1778003977308 436.7852002651539 436.7852002651539;
655.1778003977308 1091.9630006628847 655.1778003977308 655.1778003977308;
436.7852002651539 655.1778003977308 655.1778003977308 436.7852002651539;
436.7852002651539 655.1778003977308 436.7852002651539 655.1778003977308]

[655.1778003977308 436.7852002651539 655.1778003977308 436.7852002651539;
436.7852002651539 655.1778003977308 655.1778003977308 436.7852002651539;
655.1778003977308 655.1778003977308 1091.9630006628847 655.1778003977308;
436.7852002651539 436.7852002651539 655.1778003977308 655.1778003977308]

[655.1778003977308 436.7852002651539 436.7852002651539 655.1778003977308;
436.7852002651539 655.1778003977308 436.7852002651539 655.1778003977308;
436.7852002651539 436.7852002651539 655.1778003977308 655.1778003977308;
655.1778003977308 655.1778003977308 655.1778003977308 1091.9630006628847]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HigherOrderDerivatives

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">*</span> <span class="pl-c1">cos</span>(<span class="pl-k">-</span>x)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">sin</span>(x));

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">derivative</span>(f, x); <span class="pl-c"><span class="pl-c">#</span> gives first derivative</span>
julia<span class="pl-k">&gt;</span> D⁹ <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">derivative</span>(f, x, <span class="pl-c1">9</span>); <span class="pl-c"><span class="pl-c">#</span> gives 9th derivative</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D</span>(<span class="pl-c1">0.8</span>)
<span class="pl-c1">0.567190549030136</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">D⁹</span>(<span class="pl-c1">0.8</span>)
<span class="pl-k">-</span><span class="pl-c1">2.982695656166806e6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">g</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector</span>) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(x<span class="pl-k">'</span><span class="pl-k">*</span>x)

julia<span class="pl-k">&gt;</span> test <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> grad <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">gradient</span>(g, x); <span class="pl-c"><span class="pl-c">#</span> returns the gradient</span>
julia<span class="pl-k">&gt;</span> hess <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">hessian</span>(g, x); <span class="pl-c"><span class="pl-c">#</span> hessian</span>
julia<span class="pl-k">&gt;</span> higher_grad <span class="pl-k">=</span> x,y <span class="pl-k">-&gt;</span> <span class="pl-c1">gradient</span>(g, x, y) <span class="pl-c"><span class="pl-c">#</span># returns the yth order gradient</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">higher_grad</span>(test, <span class="pl-c1">3</span>)

<span class="pl-c1">4</span>x4x4 Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[<span class="pl-c1">1091.9630006628847</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span>;
<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">436.7852002651539</span>;
<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span>;
<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span>]

[<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">436.7852002651539</span>;
<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">1091.9630006628847</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span>;
<span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span>;
<span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span>]

[<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span>;
<span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span>;
<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">1091.9630006628847</span> <span class="pl-c1">655.1778003977308</span>;
<span class="pl-c1">436.7852002651539</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span>]

[<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span>;
<span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span>;
<span class="pl-c1">436.7852002651539</span> <span class="pl-c1">436.7852002651539</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span>;
<span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">655.1778003977308</span> <span class="pl-c1">1091.9630006628847</span>]
</pre></div>
</article></div>