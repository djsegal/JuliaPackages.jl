<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dynamiciteratorsjl" class="anchor" aria-hidden="true" href="#dynamiciteratorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DynamicIterators.jl</h1>
<h2 dir="auto"><a id="user-content-dynamiciterator" class="anchor" aria-hidden="true" href="#dynamiciterator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>DynamicIterator</code></h2>
<p dir="auto">Iterators combine to a tree of iterators, but dynamic iterators combine to a network of interacting entities.</p>
<p dir="auto">Dynamic iterators subtype <code>&lt;:DynamicIterator</code>. They extend the iteration protocol and define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    dyniterate(iter, somemessage(state))"><pre>    <span class="pl-c1">dyniterate</span>(iter, <span class="pl-c1">somemessage</span>(state))</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    dyniterate(iter, othermessage(state), arg)"><pre>    <span class="pl-c1">dyniterate</span>(iter, <span class="pl-c1">othermessage</span>(state), arg)</pre></div>
<p dir="auto">where message wraps a state or other relevant information.
For example the definition</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Start{T} &lt;: Message
    value::T
end
dyniterate(iter, Start(value))"><pre><span class="pl-k">struct</span> Start{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">Message</span>
    value<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>
<span class="pl-c1">dyniterate</span>(iter, <span class="pl-c1">Start</span>(value))</pre></div>
<p dir="auto">communicates that <code>iter</code> should start at <code>value</code> (if this is implemented).
This is similar to <code>iterate(iter)</code> communicating that <code>iter</code> should start at a predefined
value. In fact a fallback</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dyniterate(iter, ::Nothing) = iterate(iter)"><pre><span class="pl-en">dyniterate</span>(iter, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>) <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(iter)</pre></div>
<p dir="auto">is in place.</p>
<p dir="auto">Some messages make the iterator accept a third argument.
A simple example using <code>bind</code> to bind an iterator to an iterator using the three-argument form of <code>dyniterate</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DynamicIterators
import DynamicIterators: dyniterate

struct Summed &lt;: DynamicIterator
end

function dyniterate(::Summed, ::Nothing, y)
    y, y
end

function dyniterate(::Summed, i, y)
    i + y, i + y
end

@show collect(bind(1:5, Summed()))"><pre><span class="pl-k">using</span> DynamicIterators
<span class="pl-k">import</span> DynamicIterators<span class="pl-k">:</span> dyniterate

<span class="pl-k">struct</span> Summed <span class="pl-k">&lt;:</span> <span class="pl-c1">DynamicIterator</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">dyniterate</span>(<span class="pl-k">::</span><span class="pl-c1">Summed</span>, <span class="pl-k">::</span><span class="pl-c1">Nothing</span>, y)
    y, y
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">dyniterate</span>(<span class="pl-k">::</span><span class="pl-c1">Summed</span>, i, y)
    i <span class="pl-k">+</span> y, i <span class="pl-k">+</span> y
<span class="pl-k">end</span>

<span class="pl-c1">@show</span> <span class="pl-c1">collect</span>(<span class="pl-c1">bind</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>, <span class="pl-c1">Summed</span>()))</pre></div>
<p dir="auto">A more in-depth example showing the power of the approach is <a href="https://github.com/mschauer/DynamicIterators.jl/blob/master/example/ressourcemanagement.jl">https://github.com/mschauer/DynamicIterators.jl/blob/master/example/ressourcemanagement.jl</a>, showing how to extend the iterator protocol
to allow resource management (e.g. closing of files of child iterators) at the end of iteration of the parent.</p>
<p dir="auto">A preliminary list of supported messages:</p>
<table>
<thead>
<tr>
<th>Message (and third argument)</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>state</code> or <code>State(state)</code></td>
<td>ordinary iteration</td>
</tr>
<tr>
<td><code>Start(noting)</code></td>
<td>start the iterator at its default</td>
</tr>
<tr>
<td><code>Start(x)</code></td>
<td>start the iterate from the state corresponding to value <code>x</code></td>
</tr>
<tr>
<td><code>Value(x, state)</code></td>
<td>continue to iterate from the state corresponding to iterate <code>x</code></td>
</tr>
<tr>
<td><code>NextKey(state, nextkey)</code></td>
<td>advance an iterator over pairs of <code>key=&gt;values</code> to <code>nextkey</code></td>
</tr>
<tr>
<td><code>Steps(state, n)</code></td>
<td>advance the iterator <code>n</code> steps or possibly rewind if <code>n</code> negative</td>
</tr>
<tr>
<td><code>Control(state), control</code></td>
<td>control term as in the Kalman filter provided as third argument to dyniterate⋆</td>
</tr>
<tr>
<td><code>Sample(state[,rng])</code></td>
<td>sample from iterates⋆</td>
</tr>
<tr>
<td><code>NextKeys(state), key</code></td>
<td>advance iterator to the keys provided as third argument to dyniterate⋆</td>
</tr>
</tbody>
</table>
<p dir="auto">⋆persistent messages: <code>dyniterate</code> returns a state again wrapped by the message</p>
<h2 dir="auto"><a id="user-content-evolution-evolution-type-dynamic-iterators" class="anchor" aria-hidden="true" href="#evolution-evolution-type-dynamic-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>Evolution</code>: Evolution-type dynamic iterators</h2>
<p dir="auto">Typically, the state of an iterator is opaque. But for some iterators
the iterates <em>are</em> the states:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; value, state = iterate('A':'Z')
('A', 'A')

julia&gt; value, state = iterate('A':'Z', 'X')
('Y', 'Y')"><pre>julia<span class="pl-k">&gt;</span> value, state <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>Z<span class="pl-pds">'</span></span>)
(<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>)

julia<span class="pl-k">&gt;</span> value, state <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>Z<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>X<span class="pl-pds">'</span></span>)
(<span class="pl-s"><span class="pl-pds">'</span>Y<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Y<span class="pl-pds">'</span></span>)</pre></div>
<p dir="auto">This means that the states/iterates of an iterator can be modified in a
transparent way. This allows iterators not only to depend on each other, but to
<em>interact</em>.</p>
<p dir="auto"><code>DynamicIterators.jl</code> embeds a constrained iterator protocol for
iterators subtyping <code>&lt;:Evolution</code>, which define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evolve(iterator, x) -&gt; y
dub(x) = x === nothing ? nothing : (x,x)
iterate(iterator::Evolution, x) = dub(evolve(iterator, x))"><pre><span class="pl-c1">evolve</span>(iterator, x) <span class="pl-k">-&gt;</span> y
<span class="pl-en">dub</span>(x) <span class="pl-k">=</span> x <span class="pl-k">===</span> <span class="pl-c1">nothing</span> <span class="pl-k">?</span> <span class="pl-c1">nothing</span> <span class="pl-k">:</span> (x,x)
<span class="pl-en">iterate</span>(iterator<span class="pl-k">::</span><span class="pl-c1">Evolution</span>, x) <span class="pl-k">=</span> <span class="pl-c1">dub</span>(<span class="pl-c1">evolve</span>(iterator, x))</pre></div>
<p dir="auto">which guarantees <code>value == state</code> and introduces a powerful set of combinators
for such iterators.</p>
<h2 dir="auto"><a id="user-content-combinators" class="anchor" aria-hidden="true" href="#combinators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Combinators</h2>
<p dir="auto">As a simple example take a Metropolis-Hastings chain</p>
<p dir="auto">It can be described as a simple Evolution.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function evolve(MH::MetropolisHastings, (t,x)::Pair)
    P = MH.P
    Q = MH.proposal(x)
    xᵒ = rand(Q)
    Qᵒ = MH.proposal(xᵒ)
    if log(rand(MH.rng)) &lt; MH.logpdf(P, xᵒ) - MH.logpdf(P, x) + MH.logpdf(Qᵒ, x) - MH.logpdf(Q, xᵒ)
        x = xᵒ
    end
    (t+1 =&gt; x)
end"><pre><span class="pl-k">function</span> <span class="pl-en">evolve</span>(MH<span class="pl-k">::</span><span class="pl-c1">MetropolisHastings</span>, (t,x)<span class="pl-k">::</span><span class="pl-c1">Pair</span>)
    P <span class="pl-k">=</span> MH<span class="pl-k">.</span>P
    Q <span class="pl-k">=</span> MH<span class="pl-k">.</span><span class="pl-c1">proposal</span>(x)
    xᵒ <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Q)
    Qᵒ <span class="pl-k">=</span> MH<span class="pl-k">.</span><span class="pl-c1">proposal</span>(xᵒ)
    <span class="pl-k">if</span> <span class="pl-c1">log</span>(<span class="pl-c1">rand</span>(MH<span class="pl-k">.</span>rng)) <span class="pl-k">&lt;</span> MH<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(P, xᵒ) <span class="pl-k">-</span> MH<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(P, x) <span class="pl-k">+</span> MH<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Qᵒ, x) <span class="pl-k">-</span> MH<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Q, xᵒ)
        x <span class="pl-k">=</span> xᵒ
    <span class="pl-k">end</span>
    (t<span class="pl-k">+</span><span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> x)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The following example shows that the <code>Mixture</code> iterator combinator can be used to combine two Metropolis-Hastings chains into a component wise MetropolisHastings sampler:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DynamicIterators
using Distributions

D = MvNormal([1.0, 0.5], [1.0 0.5; 0.5 1.5] )
struct Move{T}
    x::T
    σ::Float64
    i::Int
end
m1(x) = Move(x, 0.1, 1)
m2(x) = Move(x, 0.1, 2)
Base.rand(M::Move) = M.x + M.σ*randn()*[M.i-1, 2-M.i]
Distributions.logpdf(M::Move, x) = logpdf(Normal(M.x[M.i], M.σ), x[M.i])
MH1 = MetropolisHastings(D, m1, logpdf)
MH2 = MetropolisHastings(D, m2, logpdf)

I = Evolve(i-&gt;rand(1:2))

MH = mixture(I, (MH1, MH2))

X = values(trace(MH, 1=&gt;(1, [0.0, 0.0]), endtime(2000)))"><pre><span class="pl-k">using</span> DynamicIterators
<span class="pl-k">using</span> Distributions

D <span class="pl-k">=</span> <span class="pl-c1">MvNormal</span>([<span class="pl-c1">1.0</span>, <span class="pl-c1">0.5</span>], [<span class="pl-c1">1.0</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0.5</span> <span class="pl-c1">1.5</span>] )
<span class="pl-k">struct</span> Move{T}
    x<span class="pl-k">::</span><span class="pl-c1">T</span>
    σ<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    i<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>
<span class="pl-en">m1</span>(x) <span class="pl-k">=</span> <span class="pl-c1">Move</span>(x, <span class="pl-c1">0.1</span>, <span class="pl-c1">1</span>)
<span class="pl-en">m2</span>(x) <span class="pl-k">=</span> <span class="pl-c1">Move</span>(x, <span class="pl-c1">0.1</span>, <span class="pl-c1">2</span>)
Base<span class="pl-k">.</span><span class="pl-en">rand</span>(M<span class="pl-k">::</span><span class="pl-c1">Move</span>) <span class="pl-k">=</span> M<span class="pl-k">.</span>x <span class="pl-k">+</span> M<span class="pl-k">.</span>σ<span class="pl-k">*</span><span class="pl-c1">randn</span>()<span class="pl-k">*</span>[M<span class="pl-k">.</span>i<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">-</span>M<span class="pl-k">.</span>i]
Distributions<span class="pl-k">.</span><span class="pl-en">logpdf</span>(M<span class="pl-k">::</span><span class="pl-c1">Move</span>, x) <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(M<span class="pl-k">.</span>x[M<span class="pl-k">.</span>i], M<span class="pl-k">.</span>σ), x[M<span class="pl-k">.</span>i])
MH1 <span class="pl-k">=</span> <span class="pl-c1">MetropolisHastings</span>(D, m1, logpdf)
MH2 <span class="pl-k">=</span> <span class="pl-c1">MetropolisHastings</span>(D, m2, logpdf)

I <span class="pl-k">=</span> <span class="pl-c1">Evolve</span>(i<span class="pl-k">-&gt;</span><span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>))

MH <span class="pl-k">=</span> <span class="pl-c1">mixture</span>(I, (MH1, MH2))

X <span class="pl-k">=</span> <span class="pl-c1">values</span>(<span class="pl-c1">trace</span>(MH, <span class="pl-c1">1</span><span class="pl-k">=&gt;</span>(<span class="pl-c1">1</span>, [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]), <span class="pl-c1">endtime</span>(<span class="pl-c1">2000</span>)))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/mschauer/DynamicIterators.jl/master/asset/mh.png"><img src="https://raw.githubusercontent.com/mschauer/DynamicIterators.jl/master/asset/mh.png" alt="img" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-lifting-time" class="anchor" aria-hidden="true" href="#lifting-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lifting time</h2>
<p dir="auto">Letting</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evolve(E, (i, x)::Pair) = i + 1 =&gt; evolve(E, x)"><pre><span class="pl-en">evolve</span>(E, (i, x)<span class="pl-k">::</span><span class="pl-c1">Pair</span>) <span class="pl-k">=</span> i <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">evolve</span>(E, x)</pre></div>
<p dir="auto">constitutes a "lifting" of discrete time. This corresponds to enumerating the iterates of an evolution <code>x = f(x)</code> as <code>(1 =&gt; x1, 2 =&gt; x2, ...)</code>.</p>
<p dir="auto"><code>DynamicIterators</code> control keywords treat <code>Pair</code>s as pair of key and value in concordance with the package <code>Trajectories</code> and somewhat in line with Julia's general convention.</p>
<h2 dir="auto"><a id="user-content-traces" class="anchor" aria-hidden="true" href="#traces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Traces</h2>
<h2 dir="auto"><a id="user-content-controlled-dynamic-iterators" class="anchor" aria-hidden="true" href="#controlled-dynamic-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Controlled Dynamic Iterators</h2>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">To illustrates the range of this I have picked some examples of very diverse nature.</p>
</article></div>