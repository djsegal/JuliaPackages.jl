<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dimensionaldata" class="anchor" aria-hidden="true" href="#dimensionaldata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DimensionalData</h1>
<p><a href="https://rafaqz.github.io/DimensionalData.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://rafaqz.github.io/DimensionalData.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/rafaqz/DimensionalData.jl/workflows/CI/badge.svg"><img src="https://github.com/rafaqz/DimensionalData.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rafaqz/DimensionalData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0b078c8b090ef7666c58ede989e8b306e0285643ee285849dfde4f061ce37098/68747470733a2f2f636f6465636f762e696f2f67682f72616661717a2f44696d656e73696f6e616c446174612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/rafaqz/DimensionalData.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://camo.githubusercontent.com/e349577932398a6ba8f7510d8148fb8ad415850b7ad01697c4b57da4cd508bf3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417175612e6a6c2d2546302539462538432541322d617175612e737667" alt="Aqua.jl Quality Assurance" data-canonical-src="https://img.shields.io/badge/Aqua.jl-%F0%9F%8C%A2-aqua.svg" style="max-width:100%;"></a></p>
<p>DimensionalData.jl provides tools and abstractions for working with datasets
that have named dimensions, and optionally a lookup index. It's a pluggable,
generalised version of <a href="https://github.com/JuliaArrays/AxisArrays.jl">AxisArrays.jl</a>
with a cleaner syntax, and additional functionality found in NamedDims.jl. It has
similar goals to pythons <a href="http://xarray.pydata.org/en/stable/" rel="nofollow">xarray</a>, and is primarily
written for use with spatial data in <a href="https://github.com/rafaqz/GeoData.jl">GeoData.jl</a>.</p>
<p>Broadcasting and most Base methods maintain and sync dimension context.</p>
<p>DimensionalData.jl also implements:</p>
<ul>
<li>comprehensive plot recipes for Plots.jl.</li>
<li>a Tables.jl interface with <code>DimTable</code></li>
<li>multi-layered <code>DimStack</code>s that can be indexed together,
and have base methods applied to all layers.</li>
<li>the Adapt.jl interface for use on GPUs, even as GPU kernel arguments.</li>
<li>traits for handling a wide range of spatial data types accurately.</li>
</ul>
<h2><a id="user-content-dimensions" class="anchor" aria-hidden="true" href="#dimensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dimensions</h2>
<p>Dimensions are wrapper types. They hold the lookup index, details about the
grid, and other metadata. They are also used to index into the array.
<code>X</code>, <code>Y</code>, <code>Z</code> and <code>Ti</code> are the exported defaults. A generalised <code>Dim</code> type is available
to use arbitrary symbols to name dimensions. Custom dimension types can also be defined
using the <code>@dim</code> macro.</p>
<p>Dimensions can be used to construct arrays in <code>rand</code>, <code>ones</code>, <code>zeros</code> and <code>fill</code> with
either a range for a lookup index or a number for the dimension length:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using DimensionalData

julia&gt; A = rand(X(1:40), Y(50))
40×50 DimArray{Float64,2} with dimensions:
  X: 1:40 (Sampled - Ordered Regular Points)
  Y
 0.929006   0.116946  0.750017  …  0.172604  0.678835   0.495294
 0.0550038  0.100739  0.427026     0.778067  0.309657   0.831754
 ⋮                              ⋱
 0.647768   0.965682  0.049315     0.220338  0.0326206  0.36705
 0.851769   0.164914  0.555637     0.771508  0.964596   0.30265
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DimensionalData

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">X</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">40</span>), <span class="pl-c1">Y</span>(<span class="pl-c1">50</span>))
<span class="pl-c1">40</span><span class="pl-k">×</span><span class="pl-c1">50</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span>
  X<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">40</span> (Sampled <span class="pl-k">-</span> Ordered Regular Points)
  Y
 <span class="pl-c1">0.929006</span>   <span class="pl-c1">0.116946</span>  <span class="pl-c1">0.750017</span>  …  <span class="pl-c1">0.172604</span>  <span class="pl-c1">0.678835</span>   <span class="pl-c1">0.495294</span>
 <span class="pl-c1">0.0550038</span>  <span class="pl-c1">0.100739</span>  <span class="pl-c1">0.427026</span>     <span class="pl-c1">0.778067</span>  <span class="pl-c1">0.309657</span>   <span class="pl-c1">0.831754</span>
 ⋮                              ⋱
 <span class="pl-c1">0.647768</span>   <span class="pl-c1">0.965682</span>  <span class="pl-c1">0.049315</span>     <span class="pl-c1">0.220338</span>  <span class="pl-c1">0.0326206</span>  <span class="pl-c1">0.36705</span>
 <span class="pl-c1">0.851769</span>   <span class="pl-c1">0.164914</span>  <span class="pl-c1">0.555637</span>     <span class="pl-c1">0.771508</span>  <span class="pl-c1">0.964596</span>   <span class="pl-c1">0.30265</span></pre></div>
<p>We can also use dim wrappers for indexing, so that the dimension order in the underlying array
does not need to be known:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A[Y(1), X(1:10)]
10-element DimArray{Float64,1} with dimensions:
  X: 1:10 (Sampled - Ordered Regular Points)
and reference dimensions: Y(1) 
 0.929006
 0.0550038
 0.641773
 ⋮
 0.846251
 0.506362
 0.0492866
"><pre>julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Y</span>(<span class="pl-c1">1</span>), <span class="pl-c1">X</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)]
<span class="pl-c1">10</span><span class="pl-k">-</span>element DimArray{Float64,<span class="pl-c1">1</span>} with dimensions<span class="pl-k">:</span>
  X<span class="pl-k">:</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> (Sampled <span class="pl-k">-</span> Ordered Regular Points)
and reference dimensions<span class="pl-k">:</span> <span class="pl-c1">Y</span>(<span class="pl-c1">1</span>) 
 <span class="pl-c1">0.929006</span>
 <span class="pl-c1">0.0550038</span>
 <span class="pl-c1">0.641773</span>
 ⋮
 <span class="pl-c1">0.846251</span>
 <span class="pl-c1">0.506362</span>
 <span class="pl-c1">0.0492866</span></pre></div>
<p>And this has no runtime cost:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = ones(X(3), Y(3))
3×3 DimArray{Float64,2} with dimensions: X, Y
 1.0  1.0  1.0
 1.0  1.0  1.0
 1.0  1.0  1.0

julia&gt; @btime $A[X(1), Y(2)]
  1.077 ns (0 allocations: 0 bytes)
1.0

julia&gt; @btime parent($A)[1, 2]
  1.078 ns (0 allocations: 0 bytes)
1.0
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">X</span>(<span class="pl-c1">3</span>), <span class="pl-c1">Y</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span> X, Y
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>A[<span class="pl-c1">X</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Y</span>(<span class="pl-c1">2</span>)]
  <span class="pl-c1">1.077</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">parent</span>(<span class="pl-k">$</span>A)[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
  <span class="pl-c1">1.078</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">1.0</span></pre></div>
<p>Dims can be used for indexing and views without knowing dimension order:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = rand(X(40), Y(50))
40×50 DimArray{Float64,2} with dimensions: X, Y
 0.377696  0.105445  0.543156  …  0.844973  0.163758  0.849367
 ⋮                             ⋱
 0.431454  0.108927  0.137541     0.531587  0.592512  0.598927

julia&gt; A[Y=3]
40-element DimArray{Float64,1} with dimensions: X
and reference dimensions: Y(3)
 0.543156
 ⋮
 0.137541

julia&gt; view(A, Y(), X(1:5))
5×50 DimArray{Float64,2} with dimensions: X, Y
 0.377696  0.105445  0.543156  …  0.844973  0.163758  0.849367
 ⋮                             ⋱
 0.875279  0.133032  0.925045     0.156768  0.736917  0.444683
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">X</span>(<span class="pl-c1">40</span>), <span class="pl-c1">Y</span>(<span class="pl-c1">50</span>))
<span class="pl-c1">40</span><span class="pl-k">×</span><span class="pl-c1">50</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span> X, Y
 <span class="pl-c1">0.377696</span>  <span class="pl-c1">0.105445</span>  <span class="pl-c1">0.543156</span>  …  <span class="pl-c1">0.844973</span>  <span class="pl-c1">0.163758</span>  <span class="pl-c1">0.849367</span>
 ⋮                             ⋱
 <span class="pl-c1">0.431454</span>  <span class="pl-c1">0.108927</span>  <span class="pl-c1">0.137541</span>     <span class="pl-c1">0.531587</span>  <span class="pl-c1">0.592512</span>  <span class="pl-c1">0.598927</span>

julia<span class="pl-k">&gt;</span> A[Y<span class="pl-k">=</span><span class="pl-c1">3</span>]
<span class="pl-c1">40</span><span class="pl-k">-</span>element DimArray{Float64,<span class="pl-c1">1</span>} with dimensions<span class="pl-k">:</span> X
and reference dimensions<span class="pl-k">:</span> <span class="pl-c1">Y</span>(<span class="pl-c1">3</span>)
 <span class="pl-c1">0.543156</span>
 ⋮
 <span class="pl-c1">0.137541</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">view</span>(A, <span class="pl-c1">Y</span>(), <span class="pl-c1">X</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">50</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span> X, Y
 <span class="pl-c1">0.377696</span>  <span class="pl-c1">0.105445</span>  <span class="pl-c1">0.543156</span>  …  <span class="pl-c1">0.844973</span>  <span class="pl-c1">0.163758</span>  <span class="pl-c1">0.849367</span>
 ⋮                             ⋱
 <span class="pl-c1">0.875279</span>  <span class="pl-c1">0.133032</span>  <span class="pl-c1">0.925045</span>     <span class="pl-c1">0.156768</span>  <span class="pl-c1">0.736917</span>  <span class="pl-c1">0.444683</span></pre></div>
<p>And for specifying dimension number in all <code>Base</code> and <code>Statistics</code>
functions that have a <code>dims</code> argument:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Statistics

julia&gt; A = rand(X(3), Y(4), Ti(5));

julia&gt; mean(A; dims=Ti)
3×4×1 DimArray{Float64,3} with dimensions: X, Y, Ti (Time)
[:, :, 1]
 0.168058  0.52353   0.563065  0.347025
 0.472786  0.395884  0.307846  0.518926
 0.365028  0.381367  0.423553  0.369339
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Statistics

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">X</span>(<span class="pl-c1">3</span>), <span class="pl-c1">Y</span>(<span class="pl-c1">4</span>), <span class="pl-c1">Ti</span>(<span class="pl-c1">5</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mean</span>(A; dims<span class="pl-k">=</span>Ti)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">1</span> DimArray{Float64,<span class="pl-c1">3</span>} with dimensions<span class="pl-k">:</span> X, Y, Ti (Time)
[:, :, <span class="pl-c1">1</span>]
 <span class="pl-c1">0.168058</span>  <span class="pl-c1">0.52353</span>   <span class="pl-c1">0.563065</span>  <span class="pl-c1">0.347025</span>
 <span class="pl-c1">0.472786</span>  <span class="pl-c1">0.395884</span>  <span class="pl-c1">0.307846</span>  <span class="pl-c1">0.518926</span>
 <span class="pl-c1">0.365028</span>  <span class="pl-c1">0.381367</span>  <span class="pl-c1">0.423553</span>  <span class="pl-c1">0.369339</span></pre></div>
<p>You can also use symbols to create <code>Dim{X}</code> dimensions,
although we can't use the <code>rand</code> method directly with Symbols,
and insteadd use the regular <code>DimArray</code> constructor:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = DimArray(rand(10, 20, 30), (:a, :b, :c));

julia&gt; A[a=2:5, c=9]

4×20 DimArray{Float64,2} with dimensions: Dim{:a}, Dim{:b}
and reference dimensions: Dim{:c}(9)
 0.134354  0.581673  0.422615  …  0.410222   0.687915  0.753441
 0.573664  0.547341  0.835962     0.0353398  0.794341  0.490831
 0.166643  0.133217  0.879084     0.695685   0.956644  0.698638
 0.325034  0.147461  0.149673     0.560843   0.889962  0.75733
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">DimArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">30</span>), (<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>));

julia<span class="pl-k">&gt;</span> A[a<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>, c<span class="pl-k">=</span><span class="pl-c1">9</span>]

<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">20</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span> Dim{<span class="pl-c1">:a</span>}, Dim{<span class="pl-c1">:b</span>}
and reference dimensions<span class="pl-k">:</span> <span class="pl-c1">Dim</span><span class="pl-c1">{:c}</span>(<span class="pl-c1">9</span>)
 <span class="pl-c1">0.134354</span>  <span class="pl-c1">0.581673</span>  <span class="pl-c1">0.422615</span>  …  <span class="pl-c1">0.410222</span>   <span class="pl-c1">0.687915</span>  <span class="pl-c1">0.753441</span>
 <span class="pl-c1">0.573664</span>  <span class="pl-c1">0.547341</span>  <span class="pl-c1">0.835962</span>     <span class="pl-c1">0.0353398</span>  <span class="pl-c1">0.794341</span>  <span class="pl-c1">0.490831</span>
 <span class="pl-c1">0.166643</span>  <span class="pl-c1">0.133217</span>  <span class="pl-c1">0.879084</span>     <span class="pl-c1">0.695685</span>   <span class="pl-c1">0.956644</span>  <span class="pl-c1">0.698638</span>
 <span class="pl-c1">0.325034</span>  <span class="pl-c1">0.147461</span>  <span class="pl-c1">0.149673</span>     <span class="pl-c1">0.560843</span>   <span class="pl-c1">0.889962</span>  <span class="pl-c1">0.75733</span></pre></div>
<h2><a id="user-content-selectors" class="anchor" aria-hidden="true" href="#selectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Selectors</h2>
<p>Selectors find indices in the lookup index for each dimension:</p>
<ul>
<li><code>At(x)</code>: get the index exactly matching the passed in value(s)</li>
<li><code>Near(x)</code>: get the closest index to the passed in value(s)</li>
<li><code>Where(f::Function)</code>: filter the array axis by a function of the
dimension index values.</li>
<li><code>Between(a, b)</code>: get all indices between two values, excluding the high value.</li>
<li><code>Contains(x)</code>: get indices where the value x falls within the interval, exluding
the upper value. Only used for <code>Sampled</code> <code>Intervals</code>, for <code>Points</code>, use <code>At</code>.</li>
</ul>
<p>(<code>Between</code> and <code>Contains</code> exlude the upper boundary so that adjacent selections
never contain the same index)</p>
<p>Selectors can be used in <code>getindex</code>, <code>setindex!</code> and
<code>view</code> to select indices matching the passed in value(s)</p>
<p>We can use selectors inside dim wrappers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Dates

julia&gt; timespan = DateTime(2001,1):Month(1):DateTime(2001,12)
DateTime(&quot;2001-01-01T00:00:00&quot;):Month(1):DateTime(&quot;2001-12-01T00:00:00&quot;)

julia&gt; A = DimArray(rand(12,10), (Ti(timespan), X(10:10:100)))
12×10 DimArray{Float64,2} with dimensions:
  Ti (Time): DateTime(&quot;2001-01-01T00:00:00&quot;):Month(1):DateTime(&quot;2001-12-01T00:00:00&quot;) (Sampled - Ordered Regular Points)
  X: 10:10:100 (Sampled - Ordered Regular Points)
 0.14106   0.476176  0.311356  0.454908  …  0.464364  0.973193  0.535004
 ⋮                                       ⋱
 0.522759  0.390414  0.797637  0.686718     0.901123  0.704603  0.0740788

julia&gt; @btime A[X(Near(35)), Ti(At(DateTime(2001,5)))]
0.3133109280208961
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Dates

julia<span class="pl-k">&gt;</span> timespan <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">Month</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">12</span>)
<span class="pl-c1">DateTime</span>(<span class="pl-s"><span class="pl-pds">"</span>2001-01-01T00:00:00<span class="pl-pds">"</span></span>)<span class="pl-k">:</span><span class="pl-c1">Month</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-s"><span class="pl-pds">"</span>2001-12-01T00:00:00<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">DimArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">12</span>,<span class="pl-c1">10</span>), (<span class="pl-c1">Ti</span>(timespan), <span class="pl-c1">X</span>(<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>)))
<span class="pl-c1">12</span><span class="pl-k">×</span><span class="pl-c1">10</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span>
  Ti (Time)<span class="pl-k">:</span> <span class="pl-c1">DateTime</span>(<span class="pl-s"><span class="pl-pds">"</span>2001-01-01T00:00:00<span class="pl-pds">"</span></span>)<span class="pl-k">:</span><span class="pl-c1">Month</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-s"><span class="pl-pds">"</span>2001-12-01T00:00:00<span class="pl-pds">"</span></span>) (Sampled <span class="pl-k">-</span> Ordered Regular Points)
  X<span class="pl-k">:</span> <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span> (Sampled <span class="pl-k">-</span> Ordered Regular Points)
 <span class="pl-c1">0.14106</span>   <span class="pl-c1">0.476176</span>  <span class="pl-c1">0.311356</span>  <span class="pl-c1">0.454908</span>  …  <span class="pl-c1">0.464364</span>  <span class="pl-c1">0.973193</span>  <span class="pl-c1">0.535004</span>
 ⋮                                       ⋱
 <span class="pl-c1">0.522759</span>  <span class="pl-c1">0.390414</span>  <span class="pl-c1">0.797637</span>  <span class="pl-c1">0.686718</span>     <span class="pl-c1">0.901123</span>  <span class="pl-c1">0.704603</span>  <span class="pl-c1">0.0740788</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> A[<span class="pl-c1">X</span>(<span class="pl-c1">Near</span>(<span class="pl-c1">35</span>)), <span class="pl-c1">Ti</span>(<span class="pl-c1">At</span>(<span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">5</span>)))]
<span class="pl-c1">0.3133109280208961</span></pre></div>
<p>Without dim wrappers selectors must be in the right order:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Unitful

julia&gt; A = rand(X((1:10:100)u&quot;m&quot;), Ti((1:5:100)u&quot;s&quot;));

julia&gt; A[Between(10.5u&quot;m&quot;, 50.5u&quot;m&quot;), Near(23u&quot;s&quot;)]
4-element DimArray{Float64,1} with dimensions:
  X: (11:10:41) m (Sampled - Ordered Regular Points)
and reference dimensions:
  Ti(21 s) (Time): 21 s (Sampled - Ordered Regular Points)
 0.584028
 ⋮
 0.716715
"><pre><span class="pl-k">using</span> Unitful

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">X</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>)<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">Ti</span>((<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">100</span>)<span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>));

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Between</span>(<span class="pl-c1">10.5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">50.5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">Near</span>(<span class="pl-c1">23</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>)]
<span class="pl-c1">4</span><span class="pl-k">-</span>element DimArray{Float64,<span class="pl-c1">1</span>} with dimensions<span class="pl-k">:</span>
  X<span class="pl-k">:</span> (<span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">41</span>) m (Sampled <span class="pl-k">-</span> Ordered Regular Points)
and reference dimensions<span class="pl-k">:</span>
  <span class="pl-c1">Ti</span>(<span class="pl-c1">21</span> s) (Time)<span class="pl-k">:</span> <span class="pl-c1">21</span> s (Sampled <span class="pl-k">-</span> Ordered Regular Points)
 <span class="pl-c1">0.584028</span>
 ⋮
 <span class="pl-c1">0.716715</span></pre></div>
<p>For values other than <code>Int</code>/<code>AbstractArray</code>/<code>Colon</code> (which are set aside for
regular indexing) the <code>At</code> selector is assumed, and can be dropped completely:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = rand(X([:a, :b, :c]), Y([25.6, 25.7, 25.8]));

julia&gt; A[:b, 25.8]
0.61839141062599
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">X</span>([<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>]), <span class="pl-c1">Y</span>([<span class="pl-c1">25.6</span>, <span class="pl-c1">25.7</span>, <span class="pl-c1">25.8</span>]));

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">:b</span>, <span class="pl-c1">25.8</span>]
<span class="pl-c1">0.61839141062599</span></pre></div>
<h3><a id="user-content-compile-time-selectors" class="anchor" aria-hidden="true" href="#compile-time-selectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compile-time selectors</h3>
<p>Using all <code>Val</code> indexes (only recommended for small arrays)
you can index with named dimensions <code>At</code> arbitrary values with no
runtime cost:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A = rand(X(Val((:a, :b, :c))), Y(Val((5.0, 6.0, 7.0))))
3×3 DimArray{Float64,2} with dimensions:
  X: Val{(:a, :b, :c)}() (Categorical - Unordered)
  Y: Val{(5.0, 6.0, 7.0)}() (Categorical - Unordered)
 0.5808   0.835037  0.528461
 0.8924   0.431394  0.506915
 0.66386  0.955305  0.774132

julia&gt; @btime $A[:c, 6.0]
  2.777 ns (0 allocations: 0 bytes)
0.9553052910459472

julia&gt; @btime $A[Val(:c), Val(6.0)]
  1.288 ns (0 allocations: 0 bytes)
0.9553052910459472
"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">X</span>(<span class="pl-c1">Val</span>((<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>))), <span class="pl-c1">Y</span>(<span class="pl-c1">Val</span>((<span class="pl-c1">5.0</span>, <span class="pl-c1">6.0</span>, <span class="pl-c1">7.0</span>))))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> DimArray{Float64,<span class="pl-c1">2</span>} with dimensions<span class="pl-k">:</span>
  X<span class="pl-k">:</span> <span class="pl-c1">Val</span><span class="pl-c1">{(:a, :b, :c)}</span>() (Categorical <span class="pl-k">-</span> Unordered)
  Y<span class="pl-k">:</span> <span class="pl-c1">Val</span><span class="pl-c1">{(5.0, 6.0, 7.0)}</span>() (Categorical <span class="pl-k">-</span> Unordered)
 <span class="pl-c1">0.5808</span>   <span class="pl-c1">0.835037</span>  <span class="pl-c1">0.528461</span>
 <span class="pl-c1">0.8924</span>   <span class="pl-c1">0.431394</span>  <span class="pl-c1">0.506915</span>
 <span class="pl-c1">0.66386</span>  <span class="pl-c1">0.955305</span>  <span class="pl-c1">0.774132</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>A[<span class="pl-c1">:c</span>, <span class="pl-c1">6.0</span>]
  <span class="pl-c1">2.777</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">0.9553052910459472</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>A[<span class="pl-c1">Val</span>(<span class="pl-c1">:c</span>), <span class="pl-c1">Val</span>(<span class="pl-c1">6.0</span>)]
  <span class="pl-c1">1.288</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">0.9553052910459472</span></pre></div>
<h2><a id="user-content-methods-where-dims-can-be-used-containing-indices-or-selectors" class="anchor" aria-hidden="true" href="#methods-where-dims-can-be-used-containing-indices-or-selectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods where dims can be used containing indices or Selectors</h2>
<p><code>getindex</code>, <code>setindex!</code> <code>view</code></p>
<h2><a id="user-content-methods-where-dims-dim-types-or-symbols-can-be-used-to-indicate-the-array-dimension" class="anchor" aria-hidden="true" href="#methods-where-dims-dim-types-or-symbols-can-be-used-to-indicate-the-array-dimension"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods where dims, dim types, or <code>Symbol</code>s can be used to indicate the array dimension:</h2>
<ul>
<li><code>size</code>, <code>axes</code>, <code>firstindex</code>, <code>lastindex</code></li>
<li><code>cat</code>, <code>reverse</code>, <code>dropdims</code></li>
<li><code>reduce</code>, <code>mapreduce</code></li>
<li><code>sum</code>, <code>prod</code>, <code>maximum</code>, <code>minimum</code>,</li>
<li><code>mean</code>, <code>median</code>, <code>extrema</code>, <code>std</code>, <code>var</code>, <code>cor</code>, <code>cov</code></li>
<li><code>permutedims</code>, <code>adjoint</code>, <code>transpose</code>, <code>Transpose</code></li>
<li><code>mapslices</code>, <code>eachslice</code></li>
</ul>
<h2><a id="user-content-methods-where-dims-can-be-used-to-construct-dimarrays" class="anchor" aria-hidden="true" href="#methods-where-dims-can-be-used-to-construct-dimarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Methods where dims can be used to construct <code>DimArray</code>s:</h2>
<ul>
<li><code>fill</code>, <code>ones</code>, <code>zeros</code>, <code>rand</code></li>
</ul>
<h2><a id="user-content-warnings" class="anchor" aria-hidden="true" href="#warnings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warnings</h2>
<p>Indexing with unordered or reverse order arrays has undefined behaviour.
It will trash the dimension index, break <code>searchsorted</code> and nothing will make
sense any more. So do it at you own risk. However, indexing with sorted vectors
of Int can be useful. So it's allowed. But it will still do strange things
to your interval sizes if the dimension span is <code>Irregular</code>.</p>
<h2><a id="user-content-alternate-packages" class="anchor" aria-hidden="true" href="#alternate-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternate Packages</h2>
<p>There are a lot of similar Julia packages in this space. AxisArrays.jl, NamedDims.jl, NamedArrays.jl are registered alternative that each cover some of the functionality provided by DimensionalData.jl. DimensionalData.jl should be able to replicate most of their syntax and functionality.</p>
<p><a href="https://github.com/mcabbott/AxisKeys.jl">AxisKeys.jl</a> and <a href="https://github.com/Tokazama/AbstractIndices.jl">AbstractIndices.jl</a> are some other interesting developments. For more detail on why there are so many similar options and where things are headed, read this <a href="https://github.com/JuliaCollections/AxisArraysFuture/issues/1">thread</a>.</p>
</article></div>