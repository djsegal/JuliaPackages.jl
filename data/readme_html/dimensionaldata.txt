<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-dimensionaldata" class="anchor" aria-hidden="true" href="#dimensionaldata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DimensionalData</h1>
<p><a href="https://rafaqz.github.io/DimensionalData.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://rafaqz.github.io/DimensionalData.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/rafaqz/DimensionalData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b22e1ed80a8d81af86dcb5421952189b023e1551/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f44696d656e73696f6e616c446174612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/DimensionalData.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rafaqz/DimensionalData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7cf7904824764329995dd88d8fd2829250e7b196/68747470733a2f2f636f6465636f762e696f2f67682f72616661717a2f44696d656e73696f6e616c446174612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/rafaqz/DimensionalData.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DimensionalData.jl provides tools and abstractions for working with datasets
that have named dimensions. It's a pluggable, generalised version of
<a href="https://github.com/JuliaArrays/AxisArrays.jl">AxisArrays.jl</a> with a cleaner
syntax, and additional functionality found in NamedDimensions.jl. It has similar
goals to pythons <a href="http://xarray.pydata.org/en/stable/" rel="nofollow">xarray</a>, and is primarily
written for use with spatial data in <a href="https://github.com/rafaqz/GeoData.jl">GeoData.jl</a>.</p>
<p>!!! info "Status"
This is a work in progress under active development, it may be a while before
the interface stabilises and things are fully documented.</p>
<h2><a id="user-content-dimensions" class="anchor" aria-hidden="true" href="#dimensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dimensions</h2>
<p>Dimensions are just wrapper types. They store the dimension index
and define details about the grid and other metadata, and are also used
to index into the array, wrapping a value or a <code>Selector</code>.
<code>X</code>, <code>Y</code>, <code>Z</code> and <code>Ti</code> are the exported defaults.</p>
<p>A generalised <a href="@ref"><code>Dim</code></a> type is available to use arbitrary symbols to name dimensions.
Custom dimensions can be defined using the <a href="@ref"><code>@dim</code></a> macro.</p>
<p>We can use dim wrappers for indexing, so that the dimension order in the underlying array
does not need to be known:</p>
<pre><code>a[X(1:10), Y(1:4)]
</code></pre>
<p>The core component is the <code>AbstractDimension</code>, and types that inherit from it,
such as <code>Time</code>, <code>X</code>, <code>Y</code>, <code>Z</code>, the generic <code>Dim{:x}</code> or others you
define manually using the <code>@dim</code> macro.</p>
<p>Dims can be used for indexing and views without knowing dimension order:
<code>a[X(20)]</code>, <code>view(a, X(1:20), Y(30:40))</code> and for indicating dimesions to reduce
<code>mean(a, dims=Time)</code>, or permute <code>permutedims(a, [X, Y, Z, Time])</code> in julia
<code>Base</code> and <code>Statistics</code> functions that have dims arguments.</p>
<h2><a id="user-content-selectors" class="anchor" aria-hidden="true" href="#selectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Selectors</h2>
<p>Selectors find indices in the dimension based on values <code>At</code>, <code>Near</code>, or
<code>Between</code> the index value(s). They can be used in <code>getindex</code>, <code>setindex!</code> and
<code>view</code> to select indices matching the passed in value(s)</p>
<ul>
<li><code>At(x)</code> : get indices exactly matching the passed in value(s)</li>
<li><code>Near(x)</code> : get the closest indices to the passed in value(s)</li>
<li><code>Between(a, b)</code> : get all indices between two values (inclusive)</li>
</ul>
<p>We can use selectors with dim wrappers:</p>
<div class="highlight highlight-source-julia"><pre>a[<span class="pl-c1">X</span>(<span class="pl-c1">Between</span>(<span class="pl-c1">1</span>, <span class="pl-c1">10</span>)), <span class="pl-c1">Y</span>(<span class="pl-c1">At</span>(<span class="pl-c1">25.7</span>))]</pre></div>
<p>Without dim wrappers selectors must be in the right order:</p>
<div class="highlight highlight-source-julia"><pre>usin Unitful
a[<span class="pl-c1">Near</span>(<span class="pl-c1">23</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>), <span class="pl-c1">Between</span>(<span class="pl-c1">10.5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>, <span class="pl-c1">50.5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>)]</pre></div>
<p>It's easy to write your own custom <code>Selector</code> if your need a different behaviour.</p>
<p><em>Example usage:</em></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Dates, DimensionalData
timespan <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">Month</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">12</span>)
A <span class="pl-k">=</span> <span class="pl-c1">DimensionalArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">12</span>,<span class="pl-c1">10</span>), (<span class="pl-c1">Ti</span>(timespan), <span class="pl-c1">X</span>(<span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">100</span>)))

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">X</span>(<span class="pl-c1">Near</span>(<span class="pl-c1">35</span>)), <span class="pl-c1">Ti</span>(<span class="pl-c1">At</span>(<span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>,<span class="pl-c1">5</span>)))]
<span class="pl-c1">0.658404535807791</span>

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Near</span>(<span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>, <span class="pl-c1">5</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Between</span>(<span class="pl-c1">20</span>, <span class="pl-c1">50</span>)]
DimensionalArray with dimensions<span class="pl-k">:</span>
 X<span class="pl-k">:</span> <span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">50</span>
and referenced dimensions<span class="pl-k">:</span>
 Time (type Ti)<span class="pl-k">:</span> <span class="pl-c1">2001</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>
and data<span class="pl-k">:</span> <span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}
[<span class="pl-c1">0.456175</span>, <span class="pl-c1">0.737336</span>, <span class="pl-c1">0.658405</span>, <span class="pl-c1">0.520152</span>]</pre></div>
<p>Dim types or objects can be used instead of a dimension number in many
Base and Statistics methods:</p>
<h2><a id="user-content-methods-where-dims-can-be-used-containing-indices-or-selectors" class="anchor" aria-hidden="true" href="#methods-where-dims-can-be-used-containing-indices-or-selectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods where dims can be used containing indices or Selectors</h2>
<p><code>getindex</code>, <code>setindex!</code> <code>view</code></p>
<h2><a id="user-content-methods-where-dims-can-be-used" class="anchor" aria-hidden="true" href="#methods-where-dims-can-be-used"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods where dims can be used</h2>
<ul>
<li><code>size</code>, <code>axes</code>, <code>firstindex</code>, <code>lastindex</code></li>
<li><code>cat</code></li>
<li><code>reverse</code></li>
<li><code>dropdims</code></li>
<li><code>reduce</code>, <code>mapreduce</code></li>
<li><code>sum</code>, <code>prod</code>, <code>maximum</code>, <code>minimum</code>,</li>
<li><code>mean</code>, <code>median</code>, <code>extrema</code>, <code>std</code>, <code>var</code>, <code>cor</code>, <code>cov</code></li>
<li><code>permutedims</code>, <code>adjoint</code>, <code>transpose</code>, <code>Transpose</code></li>
<li><code>mapslices</code>, <code>eachslice</code></li>
</ul>
<p><em>Example usage:</em></p>
<div class="highlight highlight-source-julia"><pre>A <span class="pl-k">=</span> <span class="pl-c1">DimensionalArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">20</span>,<span class="pl-c1">10</span>), (X, Y))
<span class="pl-c1">size</span>(A, Y)
<span class="pl-c1">mean</span>(A, dims<span class="pl-k">=</span>X)
<span class="pl-c1">std</span>(A; dims<span class="pl-k">=</span><span class="pl-c1">Y</span>())</pre></div>
<h2><a id="user-content-alternate-packages" class="anchor" aria-hidden="true" href="#alternate-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternate Packages</h2>
<p>There are a lot of similar julia packages in this space. AxisArrays.jl, NamedDims.jl, NamedArrays.jl are registered alternative that each cover some of the functionality provided by DimensionalData.jl. DimensionalData.jl should be able to replicate any of their functionality, although with slightly more verbose syntax and less polish in some cases. If there is anything it doesn't do that these packages can do, put in an issue with the feature requrest.</p>
<p><a href="https://github.com/mcabbott/AxisRanges.jl">AxisRanges.jl</a> and <a href="https://github.com/Tokazama/AbstractIndices.jl">AbstractIndices.jl</a> are some other interesting developments. For more detail on why there are so many similar options and where things are headed, read this <a href="https://github.com/JuliaCollections/AxisArraysFuture/issues/1">thread</a></p>
</article></div>