<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-genericfftjl" class="anchor" aria-hidden="true" href="#genericfftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GenericFFT.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaApproximation/GenericFFT.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaApproximation/GenericFFT.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaApproximation/GenericFFT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9f5c30dde4545550fda1ce4439825475e60d8b1763d7e080d5c6e2c97154e987/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f47656e657269634646542e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d545369426a4359717a62" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/GenericFFT.jl/branch/main/graph/badge.svg?token=TSiBjCYqzb" style="max-width: 100%;"></a> <a href="https://JuliaApproximation.github.io/GenericFFT.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://JuliaApproximation.github.io/GenericFFT.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>GenericFFT.jl</code> implements a Fast Fourier Transform for generic floating point number types.</p>
<p dir="auto">The transforms provided have the right computational complexity. However, for the time being, the implementations are crude and far from optimal. Please consider contributing improvements to the package and filing issues for missing functionality.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Installation is straightforward:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add GenericFFT

julia&gt; using GenericFFT"><pre>pkg<span class="pl-k">&gt;</span> add GenericFFT

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GenericFFT</pre></div>
<h2 dir="auto"><a id="user-content-usage-for-high-precision-ffts" class="anchor" aria-hidden="true" href="#usage-for-high-precision-ffts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage for high-precision FFTs</h2>
<p dir="auto">The main reason for using <code>GenericFFT</code> is high-precision calculations. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GenericFFT

julia&gt; fft(rand(Complex{BigFloat}, 2))
2-element Vector{Complex{BigFloat}}:
 0.8071607526060331187983248443648586158893950448440777116281652091029932491471374 + 1.058204007570364569492040922226041865648762106924785198005758849420721686004251im
 0.3195699335469630499276014344115859560577992018210584550701583748039853943955188 + 0.196737316420669631800810230623687615407691727320510522950346182385847637522683im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GenericFFT

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fft</span>(<span class="pl-c1">rand</span>(Complex{BigFloat}, <span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Complex{BigFloat}}<span class="pl-k">:</span>
 <span class="pl-c1">0.8071607526060331187983248443648586158893950448440777116281652091029932491471374</span> <span class="pl-k">+</span> <span class="pl-c1">1.058204007570364569492040922226041865648762106924785198005758849420721686004251im</span>
 <span class="pl-c1">0.3195699335469630499276014344115859560577992018210584550701583748039853943955188</span> <span class="pl-k">+</span> <span class="pl-c1">0.196737316420669631800810230623687615407691727320510522950346182385847637522683im</span></pre></div>
<p dir="auto">Other packages provide high-precision floating point numbers, including <a href="https://github.com/JuliaMath/Quadmath.jl">QuadMath.jl</a> and <a href="https://github.com/JuliaMath/DoubleFloats.jl">DoubleFloats.jl</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GenericFFT, DoubleFloats

julia&gt; fft(rand(Double64, 2))
2-element Vector{Complex{Double64}}:
 0.4026739024263829 + 0.0im
 0.3969515892883767 + 0.0im"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GenericFFT, DoubleFloats

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fft</span>(<span class="pl-c1">rand</span>(Double64, <span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Complex{Double64}}<span class="pl-k">:</span>
 <span class="pl-c1">0.4026739024263829</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
 <span class="pl-c1">0.3969515892883767</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span></pre></div>
<h2 dir="auto"><a id="user-content-history" class="anchor" aria-hidden="true" href="#history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>History</h2>
<p dir="auto">The code in this package was developed in the <a href="https://github.com/JuliaApproximation/FastTransforms.jl">FastTransforms.jl</a> package by Mikael Slevinsky. The code was moved to a separate package in July 2022 from <a href="https://github.com/JuliaApproximation/FastTransforms.jl/blob/3bd5a9a2cf744fc26418fe999bbb151b5ccc6634/src/fftBigFloat.jl">this file</a>.</p>
</article></div>