<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symbolicga" class="anchor" aria-hidden="true" href="#symbolicga"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymbolicGA</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/serenity4/SymbolicGA.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/serenity4/SymbolicGA.jl/workflows/Run%20tests/badge.svg" alt="tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/serenity4/SymbolicGA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/24e898c4c6ee8016873bfd5f5c98c6a50a65ec368611948439cfc8364076f2fb/68747470733a2f2f636f6465636f762e696f2f67682f736572656e697479342f53796d626f6c696347412e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d354a534a474859484355" alt="codecov" data-canonical-src="https://codecov.io/gh/serenity4/SymbolicGA.jl/branch/main/graph/badge.svg?token=5JSJGHYHCU" style="max-width: 100%;"></a>
<a href="https://serenity4.github.io/SymbolicGA.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="docs-stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://serenity4.github.io/SymbolicGA.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="docs-dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="repo-status" data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Geometric Algebra (GA) library with compile-time transformations into linear algebra operations.</p>
<p dir="auto">This package is ready for general use, but it still in active development and bugs may be frequently encountered along with incomplete or unsupported major features. You are welcome to report potential issues or to suggest improvements. When upgrading to a new major version, make sure to consult the <a href="https://github.com/serenity4/SymbolicGA.jl/blob/main/CHANGELOG.md">changelog</a> to be aware of any major breakages.</p>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SymbolicGA

# Compute the determinant of a 4x4 matrix.
# Let A₁, A₂, A₃ and A₄ be the matrix columns.
A₁, A₂, A₃, A₄ = ntuple(_ -&gt; rand(4), 4)
# The determinant is the four-dimensional &quot;volume&quot; of the subspace spanned by all four column vectors.
# This is trivially generalized to `n`-by-`n` matrices by using a signature of `n` and wedging all `n` column vectors.
Δ = @ga 4 A₁::Vector ∧ A₂::Vector ∧ A₃::Vector ∧ A₄::Vector
# We got an antiscalar out as a `KVector{4}`.
# Extract the component with `[]`.
Δ[]"><pre><span class="pl-k">using</span> SymbolicGA

<span class="pl-c"><span class="pl-c">#</span> Compute the determinant of a 4x4 matrix.</span>
<span class="pl-c"><span class="pl-c">#</span> Let A₁, A₂, A₃ and A₄ be the matrix columns.</span>
A₁, A₂, A₃, A₄ <span class="pl-k">=</span> <span class="pl-c1">ntuple</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>), <span class="pl-c1">4</span>)
<span class="pl-c"><span class="pl-c">#</span> The determinant is the four-dimensional "volume" of the subspace spanned by all four column vectors.</span>
<span class="pl-c"><span class="pl-c">#</span> This is trivially generalized to `n`-by-`n` matrices by using a signature of `n` and wedging all `n` column vectors.</span>
Δ <span class="pl-k">=</span> <span class="pl-c1">@ga</span> <span class="pl-c1">4</span> A₁<span class="pl-k">::</span><span class="pl-c1">Vector</span> ∧ A₂<span class="pl-k">::</span><span class="pl-c1">Vector</span> ∧ A₃<span class="pl-k">::</span><span class="pl-c1">Vector</span> ∧ A₄<span class="pl-k">::</span><span class="pl-c1">Vector</span>
<span class="pl-c"><span class="pl-c">#</span> We got an antiscalar out as a `KVector{4}`.</span>
<span class="pl-c"><span class="pl-c">#</span> Extract the component with `[]`.</span>
Δ[]</pre></div>
<p dir="auto">For advanced usage, tutorials and references, please consult the <a href="https://github.com/serenity4.github.io/SymbolicGA.jl/dev">official documentation</a>.</p>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">This library applies rules of geometric algebra at compile-time to generate performant code for runtime execution. The resulting instructions are scalar operations, which should be fast and comparable to hand-written optimized numerical code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StaticArrays: @SVector, SMatrix
using LinearAlgebra: det
using BenchmarkTools: @btime
mydet(A₁, A₂, A₃, A₄) = @ga(4, A₁::Vector ∧ A₂::Vector ∧ A₃::Vector ∧ A₄::Vector)[]
A₁ = @SVector rand(4)
A₂ = @SVector rand(4)
A₃ = @SVector rand(4)
A₄ = @SVector rand(4)
A = SMatrix([A₁ A₂ A₃ A₄])
@assert mydet(A₁, A₂, A₃, A₄) ≈ det(A)
@btime det($A)
@btime mydet($A₁, $A₂, $A₃, $A₄)"><pre><span class="pl-k">using</span> StaticArrays<span class="pl-k">:</span> <span class="pl-c1">@SVector</span>, SMatrix
<span class="pl-k">using</span> LinearAlgebra<span class="pl-k">:</span> det
<span class="pl-k">using</span> BenchmarkTools<span class="pl-k">:</span> <span class="pl-c1">@btime</span>
<span class="pl-en">mydet</span>(A₁, A₂, A₃, A₄) <span class="pl-k">=</span> <span class="pl-c1">@ga</span>(<span class="pl-c1">4</span>, A₁<span class="pl-k">::</span><span class="pl-c1">Vector</span> ∧ A₂<span class="pl-k">::</span><span class="pl-c1">Vector</span> ∧ A₃<span class="pl-k">::</span><span class="pl-c1">Vector</span> ∧ A₄<span class="pl-k">::</span><span class="pl-c1">Vector</span>)[]
A₁ <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
A₂ <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
A₃ <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
A₄ <span class="pl-k">=</span> <span class="pl-c1">@SVector</span> <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
A <span class="pl-k">=</span> <span class="pl-c1">SMatrix</span>([A₁ A₂ A₃ A₄])
<span class="pl-c1">@assert</span> <span class="pl-c1">mydet</span>(A₁, A₂, A₃, A₄) <span class="pl-k">≈</span> <span class="pl-c1">det</span>(A)
<span class="pl-c1">@btime</span> <span class="pl-c1">det</span>(<span class="pl-k">$</span>A)
<span class="pl-c1">@btime</span> <span class="pl-c1">mydet</span>(<span class="pl-k">$</span>A₁, <span class="pl-k">$</span>A₂, <span class="pl-k">$</span>A₃, <span class="pl-k">$</span>A₄)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="4.845 ns (0 allocations: 0 bytes) # LinearAlgebra
13.485 ns (0 allocations: 0 bytes) # SymbolicGA"><pre class="notranslate"><code>4.845 ns (0 allocations: 0 bytes) # LinearAlgebra
13.485 ns (0 allocations: 0 bytes) # SymbolicGA
</code></pre></div>
<p dir="auto">It should be noted that in theory any performance gap can be addressed, as we have total control over what code is emitted.</p>
</article></div>