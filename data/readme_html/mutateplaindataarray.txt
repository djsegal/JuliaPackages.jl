<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mutateplaindataarrayjl" class="anchor" aria-hidden="true" href="#mutateplaindataarrayjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MutatePlainDataArray.jl</h1>
<p dir="auto"><a href="https://github.com/medyan-dev/MutatePlainDataArray.jl/actions"><img src="https://github.com/medyan-dev/MutatePlainDataArray.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Enable mutating immutable plain data fields using <code>aref</code> wrapper, allowing mutating immutable plain data fields using the following syntax:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    aref(v)[i].a.b._i._j[] = val"><pre>    <span class="pl-c1">aref</span>(v)[i]<span class="pl-k">.</span>a<span class="pl-k">.</span>b<span class="pl-k">.</span>_i<span class="pl-k">.</span>_j[] <span class="pl-k">=</span> val</pre></div>
<p dir="auto">The nested fields can be accessed using either the field name, or the field index prefixed with <code>_</code>.
Except for the wrapped vector, every field in the chain must be immutable. The final type to be mutated must be bits type.</p>
<p dir="auto">Examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MutatePlainDataArray

julia&gt; a = [1, 2, 3];

julia&gt; aref(a)[1][] = 4
4

julia&gt; a
3-element Vector{Int64}:
 4
 2
 3

julia&gt; b = [(tup=(1, 2.5), s=&quot;a&quot;), (tup=(2, 4.5), s=&quot;b&quot;)];
 
julia&gt; aref(b)[1].tup._2[] = Inf
Inf

julia&gt; b
2-element Vector{NamedTuple{(:tup, :s), Tuple{Tuple{Int64, Float64}, String}}}:
 (tup = (1, Inf), s = &quot;a&quot;)
 (tup = (2, 4.5), s = &quot;b&quot;)

julia&gt; aref(b)[2]._1._1[] *= 100
200

julia&gt; b
2-element Vector{NamedTuple{(:tup, :s), Tuple{Tuple{Int64, Float64}, String}}}:
 (tup = (1, Inf), s = &quot;a&quot;)
 (tup = (200, 4.5), s = &quot;b&quot;)

julia&gt; aref(b)[1].s[] = &quot;invalid&quot;
ERROR: The field type String (field s in NamedTuple{(:tup, :s), Tuple{Tuple{Int64, Float64}, String}}) is not immutable.
Stacktrace:
 ..."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MutatePlainDataArray

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>];

julia<span class="pl-k">&gt;</span> <span class="pl-c1">aref</span>(a)[<span class="pl-c1">1</span>][] <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> a
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> [(tup<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2.5</span>), s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>), (tup<span class="pl-k">=</span>(<span class="pl-c1">2</span>, <span class="pl-c1">4.5</span>), s<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>)];
 
julia<span class="pl-k">&gt;</span> <span class="pl-c1">aref</span>(b)[<span class="pl-c1">1</span>]<span class="pl-k">.</span>tup<span class="pl-k">.</span>_2[] <span class="pl-k">=</span> <span class="pl-c1">Inf</span>
<span class="pl-c1">Inf</span>

julia<span class="pl-k">&gt;</span> b
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{NamedTuple{(<span class="pl-c1">:tup</span>, <span class="pl-c1">:s</span>), Tuple{Tuple{Int64, Float64}, String}}}<span class="pl-k">:</span>
 (tup <span class="pl-k">=</span> (<span class="pl-c1">1</span>, <span class="pl-c1">Inf</span>), s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
 (tup <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">4.5</span>), s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">aref</span>(b)[<span class="pl-c1">2</span>]<span class="pl-k">.</span>_1<span class="pl-k">.</span>_1[] <span class="pl-k">*=</span> <span class="pl-c1">100</span>
<span class="pl-c1">200</span>

julia<span class="pl-k">&gt;</span> b
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{NamedTuple{(<span class="pl-c1">:tup</span>, <span class="pl-c1">:s</span>), Tuple{Tuple{Int64, Float64}, String}}}<span class="pl-k">:</span>
 (tup <span class="pl-k">=</span> (<span class="pl-c1">1</span>, <span class="pl-c1">Inf</span>), s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>)
 (tup <span class="pl-k">=</span> (<span class="pl-c1">200</span>, <span class="pl-c1">4.5</span>), s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">aref</span>(b)[<span class="pl-c1">1</span>]<span class="pl-k">.</span>s[] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>invalid<span class="pl-pds">"</span></span>
ERROR<span class="pl-k">:</span> The field type String (field s <span class="pl-k">in</span> NamedTuple{(<span class="pl-c1">:tup</span>, <span class="pl-c1">:s</span>), Tuple{Tuple{Int64, Float64}, String}}) is not immutable.
Stacktrace<span class="pl-k">:</span>
 <span class="pl-k">...</span></pre></div>
<p dir="auto">The mutation provided by this package is</p>
<ul dir="auto">
<li><strong>Efficient</strong>. Under the hood, the mutation is achieved by pointer load/store, where the address offset is known at type inference time.</li>
<li><strong>Safe</strong>. Compile-time type check is enforced. Reference to the original vector is obtained to prevent garbage collection. Bounds check is performed unless <code>@inbounds</code> is used. This package is inspired by and acts as a safer counterpart to <a href="https://github.com/cjdoris/UnsafePointers.jl">UnsafePointers.jl</a>.</li>
</ul>
</article></div>