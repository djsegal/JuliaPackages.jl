<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-equalitysamplerjl" class="anchor" aria-hidden="true" href="#equalitysamplerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EqualitySampler.jl</h1>
<p dir="auto"><a href="https://vandenman.github.io/EqualitySampler/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/vandenman/EqualitySampler/EqualitySampler/actions"><img src="https://github.com/vandenman/EqualitySampler/workflows/runtests/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">EqualitySampler.jl is a Julia library for considering all possible equality constraints across parameters and sampling fromt the posterior distribution over equality constraints.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto"><code>EqualitySampler</code> is a registered package, so it can be installed with the usual incantations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add EqualitySampler"><pre>julia<span class="pl-k">&gt;</span> ]add EqualitySampler</pre></div>
<p dir="auto">or alternatively</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;EqualitySampler&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>EqualitySampler<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-functionality" class="anchor" aria-hidden="true" href="#functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functionality</h1>
<p dir="auto"><em>EqualitySampler</em> defines four distributions over <a href="https://en.wikipedia.org/wiki/Partition_of_a_set" rel="nofollow">partitions of a set</a>:</p>
<ul dir="auto">
<li><code>UniformPartitionDistribution</code></li>
<li><code>BetaBinomialPartitionDistribution</code></li>
<li><code>CustomInclusionPartitionDistribution</code></li>
<li><code>RandomProcessPartitionDistribution</code></li>
</ul>
<p dir="auto">Each of these is a subtype of the abstract type <code>AbstractPartitionDistribution</code>, which is a subtype of <a href="https://juliastats.org/Distributions.jl/stable/multivariate/#multivariates" rel="nofollow"><code>Distributions.DiscreteMultivariateDistribution</code></a>.</p>
<p dir="auto">Thus, each of these types can be called with e.g., <code>rand</code> and <code>logpdf</code>.</p>
<p dir="auto">While a partition is usually defined without duplicates, the methods here do assume duplicates are present. For example, given 3 parameters <code>(θ₁, θ₂, θ₃)</code> there exist 5 unique partitions:</p>
<table>
<thead>
<tr>
<th>partition</th>
<th>constraints</th>
<th>representation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>{{θ₁, θ₂, θ₃}}</code></td>
<td><code>θ₁ == θ₂ == θ₃</code></td>
<td><code>[1, 1, 1]</code></td>
</tr>
<tr>
<td><code>{{θ₁, θ₂}, {θ₃}}</code></td>
<td><code>θ₁ == θ₂ != θ₃</code></td>
<td><code>[1, 1, 2]</code></td>
</tr>
<tr>
<td><code>{{θ₁, θ₃}, {θ₂}}</code></td>
<td><code>θ₁ == θ₃ != θ₂</code></td>
<td><code>[1, 2, 1]</code></td>
</tr>
<tr>
<td><code>{{θ₁}, {θ₂, θ₃}}</code></td>
<td><code>θ₁ != θ₂ == θ₃</code></td>
<td><code>[1, 2, 2]</code></td>
</tr>
<tr>
<td><code>{{θ₁}, {θ₂}, {θ₃}}</code></td>
<td><code>θ₁ != θ₂ != θ₃</code></td>
<td><code>[1, 2, 3]</code></td>
</tr>
</tbody>
</table>
<p dir="auto">However, we also consider <code>[2, 2, 2]</code> and <code>[3, 3, 3]</code> to be valid and identical to <code>[1, 1, 1]</code>.
The main reason for this is that in a Gibbs sampling scheme, a transition from <code>[1, 2, 2]</code> to <code>[1, 1, 1]</code> by updating only the first element would be a natural but impossible without duplicated partitions. The default <code>logpdf</code> accounts for duplicated partitions, use <code>logpdf_model_distinct</code> to evaluate the logpdf without duplicated partitions.</p>
<h1 dir="auto"><a id="user-content-built-in-tests" class="anchor" aria-hidden="true" href="#built-in-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Built-in tests</h1>
<p dir="auto">The package contains two functions to explore equality constraints in specific models.
Both use <a href="github.com/TuringLang/Turing.jl">Turing.jl</a> under the hood and return a Chains object with posterior samples from <a href="github.com/TuringLang/MCMCChains.jl">MCMCChains.jl</a>.</p>
<h2 dir="auto"><a id="user-content-independent-binomials" class="anchor" aria-hidden="true" href="#independent-binomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Independent Binomials</h2>
<p dir="auto"><code>proportion_test</code> can be used to explore equality constraints across a series of independent Binomials.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EqualitySampler, EqualitySampler.Simulations, Distributions, Statistics
import Random, AbstractMCMC, MCMCChains

# simulate some data
Random.seed!(42) # on julia 1.7.3
n_groups = 5 # no. binomials.
true_partition     = rand(UniformPartitionDistribution(n_groups))
temp_probabilities = rand(n_groups)
true_probabilities = average_equality_constraints(temp_probabilities, true_partition)
# total no. trials
observations = rand(100:200, n_groups)
# no. successes
successes = rand(product_distribution(Binomial.(observations, true_probabilities)))

obs_proportions = successes ./ observations
[true_probabilities obs_proportions]
# 5×2 Matrix{Float64}:
#  0.30743   0.301205
#  0.640909  0.640244
#  0.640909  0.701493
#  0.30743   0.275591
#  0.30743   0.296053

# specify no mcmc iterations, no chains, parallelization. burnin and thinning can also be specified.
mcmc_settings = MCMCSettings(;iterations = 15_000, chains = 4, parallel = AbstractMCMC.MCMCThreads)

# nothing indicates no equality sampling is done and instead the full model is sampled from
chn_full = proportion_test(successes, observations, nothing; mcmc_settings = mcmc_settings)
# use a BetaBinomial(1, k) over the partitions
partition_prior = BetaBinomialPartitionDistribution(n_groups, 1, n_groups)
chn_eqs  = proportion_test(successes, observations, partition_prior; mcmc_settings = mcmc_settings)

# extract posterior mean of full model and averaged across equality constraints
estimated_probabilities_full = mean(chn_full).nt.mean
estimated_probabilities_eqs = mean(MCMCChains.group(chn_eqs, :p_constrained)).nt.mean
[true_probabilities obs_proportions estimated_probabilities_full estimated_probabilities_eqs]
# 5×4 Matrix{Float64}:
#  0.30743   0.301205  0.303421  0.296359
#  0.640909  0.640244  0.638429  0.662943
#  0.640909  0.701493  0.698563  0.666477
#  0.30743   0.275591  0.278896  0.295154
#  0.30743   0.296053  0.298635  0.296189

# posterior probabilities of equalities among the probabilities
compute_post_prob_eq(chn_eqs)
# 5×5 Matrix{Float64}:
#  0.0       0.0      0.0  0.0       0.0
#  0.0       0.0      0.0  0.0       0.0
#  0.0       0.94185  0.0  0.0       0.0
#  0.930683  0.0      0.0  0.0       0.0
#  0.937     0.0      0.0  0.931667  0.0
# true matrix
[i &gt; j &amp;&amp; p == q for (i, p) in enumerate(true_partition), (j, q) in enumerate(true_partition)]
# 5×5 Matrix{Bool}:
#  0  0  0  0  0
#  0  0  0  0  0
#  0  1  0  0  0
#  1  0  0  0  0
#  1  0  0  1  0

# list the visited models (use compute_model_probs to obtain their posterior probability)
compute_model_counts(chn_eqs, false)
# OrderedCollections.OrderedDict{String, Int64} with 10 entries:
# &quot;12211&quot; =&gt; 51488
# &quot;12215&quot; =&gt; 1512
# &quot;12241&quot; =&gt; 1808
# &quot;12244&quot; =&gt; 1562
# &quot;12245&quot; =&gt; 141
# &quot;12311&quot; =&gt; 2596
# &quot;12315&quot; =&gt; 245
# &quot;12341&quot; =&gt; 328
# &quot;12344&quot; =&gt; 254
# &quot;12345&quot; =&gt; 66

# convert true partition to normalized form and print as string
join(EqualitySampler.reduce_model(true_partition))
# &quot;12211&quot;
# and it so happens to be that the most visited model is also the true model"><pre><span class="pl-k">using</span> EqualitySampler, EqualitySampler<span class="pl-k">.</span>Simulations, Distributions, Statistics
<span class="pl-k">import</span> Random, AbstractMCMC, MCMCChains

<span class="pl-c"><span class="pl-c">#</span> simulate some data</span>
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>) <span class="pl-c"><span class="pl-c">#</span> on julia 1.7.3</span>
n_groups <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> no. binomials.</span>
true_partition     <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">UniformPartitionDistribution</span>(n_groups))
temp_probabilities <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_groups)
true_probabilities <span class="pl-k">=</span> <span class="pl-c1">average_equality_constraints</span>(temp_probabilities, true_partition)
<span class="pl-c"><span class="pl-c">#</span> total no. trials</span>
observations <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">200</span>, n_groups)
<span class="pl-c"><span class="pl-c">#</span> no. successes</span>
successes <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">product_distribution</span>(<span class="pl-c1">Binomial</span>.(observations, true_probabilities)))

obs_proportions <span class="pl-k">=</span> successes <span class="pl-k">./</span> observations
[true_probabilities obs_proportions]
<span class="pl-c"><span class="pl-c">#</span> 5×2 Matrix{Float64}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.30743   0.301205</span>
<span class="pl-c"><span class="pl-c">#</span>  0.640909  0.640244</span>
<span class="pl-c"><span class="pl-c">#</span>  0.640909  0.701493</span>
<span class="pl-c"><span class="pl-c">#</span>  0.30743   0.275591</span>
<span class="pl-c"><span class="pl-c">#</span>  0.30743   0.296053</span>

<span class="pl-c"><span class="pl-c">#</span> specify no mcmc iterations, no chains, parallelization. burnin and thinning can also be specified.</span>
mcmc_settings <span class="pl-k">=</span> <span class="pl-c1">MCMCSettings</span>(;iterations <span class="pl-k">=</span> <span class="pl-c1">15_000</span>, chains <span class="pl-k">=</span> <span class="pl-c1">4</span>, parallel <span class="pl-k">=</span> AbstractMCMC<span class="pl-k">.</span>MCMCThreads)

<span class="pl-c"><span class="pl-c">#</span> nothing indicates no equality sampling is done and instead the full model is sampled from</span>
chn_full <span class="pl-k">=</span> <span class="pl-c1">proportion_test</span>(successes, observations, <span class="pl-c1">nothing</span>; mcmc_settings <span class="pl-k">=</span> mcmc_settings)
<span class="pl-c"><span class="pl-c">#</span> use a BetaBinomial(1, k) over the partitions</span>
partition_prior <span class="pl-k">=</span> <span class="pl-c1">BetaBinomialPartitionDistribution</span>(n_groups, <span class="pl-c1">1</span>, n_groups)
chn_eqs  <span class="pl-k">=</span> <span class="pl-c1">proportion_test</span>(successes, observations, partition_prior; mcmc_settings <span class="pl-k">=</span> mcmc_settings)

<span class="pl-c"><span class="pl-c">#</span> extract posterior mean of full model and averaged across equality constraints</span>
estimated_probabilities_full <span class="pl-k">=</span> <span class="pl-c1">mean</span>(chn_full)<span class="pl-k">.</span>nt<span class="pl-k">.</span>mean
estimated_probabilities_eqs <span class="pl-k">=</span> <span class="pl-c1">mean</span>(MCMCChains<span class="pl-k">.</span><span class="pl-c1">group</span>(chn_eqs, <span class="pl-c1">:p_constrained</span>))<span class="pl-k">.</span>nt<span class="pl-k">.</span>mean
[true_probabilities obs_proportions estimated_probabilities_full estimated_probabilities_eqs]
<span class="pl-c"><span class="pl-c">#</span> 5×4 Matrix{Float64}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.30743   0.301205  0.303421  0.296359</span>
<span class="pl-c"><span class="pl-c">#</span>  0.640909  0.640244  0.638429  0.662943</span>
<span class="pl-c"><span class="pl-c">#</span>  0.640909  0.701493  0.698563  0.666477</span>
<span class="pl-c"><span class="pl-c">#</span>  0.30743   0.275591  0.278896  0.295154</span>
<span class="pl-c"><span class="pl-c">#</span>  0.30743   0.296053  0.298635  0.296189</span>

<span class="pl-c"><span class="pl-c">#</span> posterior probabilities of equalities among the probabilities</span>
<span class="pl-c1">compute_post_prob_eq</span>(chn_eqs)
<span class="pl-c"><span class="pl-c">#</span> 5×5 Matrix{Float64}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0       0.0      0.0  0.0       0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0       0.0      0.0  0.0       0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0       0.94185  0.0  0.0       0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.930683  0.0      0.0  0.0       0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.937     0.0      0.0  0.931667  0.0</span>
<span class="pl-c"><span class="pl-c">#</span> true matrix</span>
[i <span class="pl-k">&gt;</span> j <span class="pl-k">&amp;&amp;</span> p <span class="pl-k">==</span> q <span class="pl-k">for</span> (i, p) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(true_partition), (j, q) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(true_partition)]
<span class="pl-c"><span class="pl-c">#</span> 5×5 Matrix{Bool}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0  0  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  0  0  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  0  1  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0  0  1  0</span>

<span class="pl-c"><span class="pl-c">#</span> list the visited models (use compute_model_probs to obtain their posterior probability)</span>
<span class="pl-c1">compute_model_counts</span>(chn_eqs, <span class="pl-c1">false</span>)
<span class="pl-c"><span class="pl-c">#</span> OrderedCollections.OrderedDict{String, Int64} with 10 entries:</span>
<span class="pl-c"><span class="pl-c">#</span> "12211" =&gt; 51488</span>
<span class="pl-c"><span class="pl-c">#</span> "12215" =&gt; 1512</span>
<span class="pl-c"><span class="pl-c">#</span> "12241" =&gt; 1808</span>
<span class="pl-c"><span class="pl-c">#</span> "12244" =&gt; 1562</span>
<span class="pl-c"><span class="pl-c">#</span> "12245" =&gt; 141</span>
<span class="pl-c"><span class="pl-c">#</span> "12311" =&gt; 2596</span>
<span class="pl-c"><span class="pl-c">#</span> "12315" =&gt; 245</span>
<span class="pl-c"><span class="pl-c">#</span> "12341" =&gt; 328</span>
<span class="pl-c"><span class="pl-c">#</span> "12344" =&gt; 254</span>
<span class="pl-c"><span class="pl-c">#</span> "12345" =&gt; 66</span>

<span class="pl-c"><span class="pl-c">#</span> convert true partition to normalized form and print as string</span>
<span class="pl-c1">join</span>(EqualitySampler<span class="pl-k">.</span><span class="pl-c1">reduce_model</span>(true_partition))
<span class="pl-c"><span class="pl-c">#</span> "12211"</span>
<span class="pl-c"><span class="pl-c">#</span> and it so happens to be that the most visited model is also the true model</span></pre></div>
<h2 dir="auto"><a id="user-content-post-hoc-tests-in-one-way-anova" class="anchor" aria-hidden="true" href="#post-hoc-tests-in-one-way-anova"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Post hoc tests in One-Way ANOVA</h2>
<p dir="auto"><code>anova_test</code> can be used to explore equality constraints across the levels of a single categorical predictor.
The setup uses a grand mean <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8c07ded8d66ea54dca150ed9b3a15012">$\mu$</math-renderer> and offsets <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8c07ded8d66ea54dca150ed9b3a15012">$\theta_i$</math-renderer> for every level of the categorical predictor.
To identify the model, the constraint <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="8c07ded8d66ea54dca150ed9b3a15012">$\sum_i\theta_i = 1$</math-renderer> is imposed.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EqualitySampler, EqualitySampler.Simulations, Distributions, Statistics
import Random, AbstractMCMC, MCMCChains

# Simulate some data
Random.seed!(42)
n_groups = 5
n_obs_per_group = 1000
true_partition = rand(UniformPartitionDistribution(n_groups))
temp_θ = randn(n_groups)
temp_θ .-= mean(temp_θ) # center temp_θ to avoid identification constraints
true_θ = average_equality_constraints(temp_θ, true_partition)

g = repeat(1:n_groups; inner = n_obs_per_group)
μ, σ = 0.0, 1.0

# Important: this is the same parametrization as used by the model!
Dy = MvNormal(μ .+ σ .* true_θ[g], σ)
y = rand(Dy)

# observed cell offsets
obs_offset = ([mean(y[g .== i]) for i in unique(g)] .- mean(y)) / std(y)
[true_θ obs_offset]
# 5×2 Matrix{Float64}:
#   0.191185   0.24118
#  -0.286777  -0.290348
#  -0.286777  -0.243936
#   0.191185   0.142092
#   0.191185   0.151012

# specify no mcmc iterations, no chains, parallelization. burnin and thinning can also be specified.
mcmc_settings = MCMCSettings(;iterations = 15_000, chains = 4, parallel = AbstractMCMC.MCMCThreads)

# nothing indicates no equality sampling is done and instead the full model is sampled from
chn_full = anova_test(y, g, nothing; mcmc_settings = mcmc_settings)
# use a BetaBinomial(1, k) over the partitions
partition_prior = BetaBinomialPartitionDistribution(n_groups, 1, n_groups)
chn_eqs  = anova_test(y, g, partition_prior; mcmc_settings = mcmc_settings)

estimated_θ_full = Statistics.mean(MCMCChains.group(chn_full, :θ_cs)).nt.mean
estimated_θ_eqs  = Statistics.mean(MCMCChains.group(chn_eqs , :θ_cs)).nt.mean
[true_θ obs_offset estimated_θ_full estimated_θ_eqs]
# 5×4 Matrix{Float64}:
#   0.191185   0.24118    0.245577   0.194745
#  -0.286777  -0.290348  -0.296143  -0.252687
#  -0.286777  -0.243936  -0.248339  -0.25913
#   0.191185   0.142092   0.145534   0.165273
#   0.191185   0.151012   0.153371   0.1518

# posterior probabilities of equalities among the probabilities
compute_post_prob_eq(chn_eqs)
# 5×5 Matrix{Float64}:
#  0.0         0.0        0.0        0.0     0.0
#  0.00858333  0.0        0.0        0.0     0.0
#  0.0         0.874517   0.0        0.0     0.0
#  0.772967    0.0256833  0.0428167  0.0     0.0
#  0.73465     0.10215    0.0279333  0.8664  0.0
# true matrix
[i &gt; j &amp;&amp; p == q for (i, p) in enumerate(true_partition), (j, q) in enumerate(true_partition)]
# 5×5 Matrix{Bool}:
#  0  0  0  0  0
#  0  0  0  0  0
#  0  1  0  0  0
#  1  0  0  0  0
#  1  0  0  1  0

# list the visited models (use compute_model_probs to obtain their posterior probability)
compute_model_counts(chn_eqs, false)
# OrderedCollections.OrderedDict{String, Int64} with 21 entries:
#   &quot;11311&quot; =&gt; 421
#   &quot;11341&quot; =&gt; 94
#   &quot;12211&quot; =&gt; 41409
#   &quot;12212&quot; =&gt; 346
#   &quot;12215&quot; =&gt; 1161
#   &quot;12221&quot; =&gt; 3
#   &quot;12222&quot; =&gt; 949
#   &quot;12241&quot; =&gt; 427
#   &quot;12242&quot; =&gt; 381
#   &quot;12244&quot; =&gt; 7699
#   &quot;12245&quot; =&gt; 96
#   &quot;12311&quot; =&gt; 723
#   &quot;12312&quot; =&gt; 2261
#   &quot;12315&quot; =&gt; 57
#   &quot;12322&quot; =&gt; 168
#   &quot;12331&quot; =&gt; 963
#   &quot;12335&quot; =&gt; 654
#   &quot;12341&quot; =&gt; 39
#   &quot;12342&quot; =&gt; 1509
#   &quot;12344&quot; =&gt; 615
#   &quot;12345&quot; =&gt; 25

# note that there is more uncertainty in the results here, probably because this model is more compelex than the previous.

# convert true partition to normalized form and print as string
join(EqualitySampler.reduce_model(true_partition))
# &quot;12211&quot;
# and it so happens to be that the most visited model is also the true model"><pre><span class="pl-k">using</span> EqualitySampler, EqualitySampler<span class="pl-k">.</span>Simulations, Distributions, Statistics
<span class="pl-k">import</span> Random, AbstractMCMC, MCMCChains

<span class="pl-c"><span class="pl-c">#</span> Simulate some data</span>
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)
n_groups <span class="pl-k">=</span> <span class="pl-c1">5</span>
n_obs_per_group <span class="pl-k">=</span> <span class="pl-c1">1000</span>
true_partition <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">UniformPartitionDistribution</span>(n_groups))
temp_θ <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n_groups)
temp_θ <span class="pl-k">.-</span><span class="pl-k">=</span> <span class="pl-c1">mean</span>(temp_θ) <span class="pl-c"><span class="pl-c">#</span> center temp_θ to avoid identification constraints</span>
true_θ <span class="pl-k">=</span> <span class="pl-c1">average_equality_constraints</span>(temp_θ, true_partition)

g <span class="pl-k">=</span> <span class="pl-c1">repeat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n_groups; inner <span class="pl-k">=</span> n_obs_per_group)
μ, σ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>

<span class="pl-c"><span class="pl-c">#</span> Important: this is the same parametrization as used by the model!</span>
Dy <span class="pl-k">=</span> <span class="pl-c1">MvNormal</span>(μ <span class="pl-k">.+</span> σ <span class="pl-k">.*</span> true_θ[g], σ)
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Dy)

<span class="pl-c"><span class="pl-c">#</span> observed cell offsets</span>
obs_offset <span class="pl-k">=</span> ([<span class="pl-c1">mean</span>(y[g <span class="pl-k">.==</span> i]) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">unique</span>(g)] <span class="pl-k">.-</span> <span class="pl-c1">mean</span>(y)) <span class="pl-k">/</span> <span class="pl-c1">std</span>(y)
[true_θ obs_offset]
<span class="pl-c"><span class="pl-c">#</span> 5×2 Matrix{Float64}:</span>
<span class="pl-c"><span class="pl-c">#</span>   0.191185   0.24118</span>
<span class="pl-c"><span class="pl-c">#</span>  -0.286777  -0.290348</span>
<span class="pl-c"><span class="pl-c">#</span>  -0.286777  -0.243936</span>
<span class="pl-c"><span class="pl-c">#</span>   0.191185   0.142092</span>
<span class="pl-c"><span class="pl-c">#</span>   0.191185   0.151012</span>

<span class="pl-c"><span class="pl-c">#</span> specify no mcmc iterations, no chains, parallelization. burnin and thinning can also be specified.</span>
mcmc_settings <span class="pl-k">=</span> <span class="pl-c1">MCMCSettings</span>(;iterations <span class="pl-k">=</span> <span class="pl-c1">15_000</span>, chains <span class="pl-k">=</span> <span class="pl-c1">4</span>, parallel <span class="pl-k">=</span> AbstractMCMC<span class="pl-k">.</span>MCMCThreads)

<span class="pl-c"><span class="pl-c">#</span> nothing indicates no equality sampling is done and instead the full model is sampled from</span>
chn_full <span class="pl-k">=</span> <span class="pl-c1">anova_test</span>(y, g, <span class="pl-c1">nothing</span>; mcmc_settings <span class="pl-k">=</span> mcmc_settings)
<span class="pl-c"><span class="pl-c">#</span> use a BetaBinomial(1, k) over the partitions</span>
partition_prior <span class="pl-k">=</span> <span class="pl-c1">BetaBinomialPartitionDistribution</span>(n_groups, <span class="pl-c1">1</span>, n_groups)
chn_eqs  <span class="pl-k">=</span> <span class="pl-c1">anova_test</span>(y, g, partition_prior; mcmc_settings <span class="pl-k">=</span> mcmc_settings)

estimated_θ_full <span class="pl-k">=</span> Statistics<span class="pl-k">.</span><span class="pl-c1">mean</span>(MCMCChains<span class="pl-k">.</span><span class="pl-c1">group</span>(chn_full, <span class="pl-c1">:θ_cs</span>))<span class="pl-k">.</span>nt<span class="pl-k">.</span>mean
estimated_θ_eqs  <span class="pl-k">=</span> Statistics<span class="pl-k">.</span><span class="pl-c1">mean</span>(MCMCChains<span class="pl-k">.</span><span class="pl-c1">group</span>(chn_eqs , <span class="pl-c1">:θ_cs</span>))<span class="pl-k">.</span>nt<span class="pl-k">.</span>mean
[true_θ obs_offset estimated_θ_full estimated_θ_eqs]
<span class="pl-c"><span class="pl-c">#</span> 5×4 Matrix{Float64}:</span>
<span class="pl-c"><span class="pl-c">#</span>   0.191185   0.24118    0.245577   0.194745</span>
<span class="pl-c"><span class="pl-c">#</span>  -0.286777  -0.290348  -0.296143  -0.252687</span>
<span class="pl-c"><span class="pl-c">#</span>  -0.286777  -0.243936  -0.248339  -0.25913</span>
<span class="pl-c"><span class="pl-c">#</span>   0.191185   0.142092   0.145534   0.165273</span>
<span class="pl-c"><span class="pl-c">#</span>   0.191185   0.151012   0.153371   0.1518</span>

<span class="pl-c"><span class="pl-c">#</span> posterior probabilities of equalities among the probabilities</span>
<span class="pl-c1">compute_post_prob_eq</span>(chn_eqs)
<span class="pl-c"><span class="pl-c">#</span> 5×5 Matrix{Float64}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0         0.0        0.0        0.0     0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.00858333  0.0        0.0        0.0     0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0         0.874517   0.0        0.0     0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.772967    0.0256833  0.0428167  0.0     0.0</span>
<span class="pl-c"><span class="pl-c">#</span>  0.73465     0.10215    0.0279333  0.8664  0.0</span>
<span class="pl-c"><span class="pl-c">#</span> true matrix</span>
[i <span class="pl-k">&gt;</span> j <span class="pl-k">&amp;&amp;</span> p <span class="pl-k">==</span> q <span class="pl-k">for</span> (i, p) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(true_partition), (j, q) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(true_partition)]
<span class="pl-c"><span class="pl-c">#</span> 5×5 Matrix{Bool}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0  0  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  0  0  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  0  1  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0  0  0  0</span>
<span class="pl-c"><span class="pl-c">#</span>  1  0  0  1  0</span>

<span class="pl-c"><span class="pl-c">#</span> list the visited models (use compute_model_probs to obtain their posterior probability)</span>
<span class="pl-c1">compute_model_counts</span>(chn_eqs, <span class="pl-c1">false</span>)
<span class="pl-c"><span class="pl-c">#</span> OrderedCollections.OrderedDict{String, Int64} with 21 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>   "11311" =&gt; 421</span>
<span class="pl-c"><span class="pl-c">#</span>   "11341" =&gt; 94</span>
<span class="pl-c"><span class="pl-c">#</span>   "12211" =&gt; 41409</span>
<span class="pl-c"><span class="pl-c">#</span>   "12212" =&gt; 346</span>
<span class="pl-c"><span class="pl-c">#</span>   "12215" =&gt; 1161</span>
<span class="pl-c"><span class="pl-c">#</span>   "12221" =&gt; 3</span>
<span class="pl-c"><span class="pl-c">#</span>   "12222" =&gt; 949</span>
<span class="pl-c"><span class="pl-c">#</span>   "12241" =&gt; 427</span>
<span class="pl-c"><span class="pl-c">#</span>   "12242" =&gt; 381</span>
<span class="pl-c"><span class="pl-c">#</span>   "12244" =&gt; 7699</span>
<span class="pl-c"><span class="pl-c">#</span>   "12245" =&gt; 96</span>
<span class="pl-c"><span class="pl-c">#</span>   "12311" =&gt; 723</span>
<span class="pl-c"><span class="pl-c">#</span>   "12312" =&gt; 2261</span>
<span class="pl-c"><span class="pl-c">#</span>   "12315" =&gt; 57</span>
<span class="pl-c"><span class="pl-c">#</span>   "12322" =&gt; 168</span>
<span class="pl-c"><span class="pl-c">#</span>   "12331" =&gt; 963</span>
<span class="pl-c"><span class="pl-c">#</span>   "12335" =&gt; 654</span>
<span class="pl-c"><span class="pl-c">#</span>   "12341" =&gt; 39</span>
<span class="pl-c"><span class="pl-c">#</span>   "12342" =&gt; 1509</span>
<span class="pl-c"><span class="pl-c">#</span>   "12344" =&gt; 615</span>
<span class="pl-c"><span class="pl-c">#</span>   "12345" =&gt; 25</span>

<span class="pl-c"><span class="pl-c">#</span> note that there is more uncertainty in the results here, probably because this model is more compelex than the previous.</span>

<span class="pl-c"><span class="pl-c">#</span> convert true partition to normalized form and print as string</span>
<span class="pl-c1">join</span>(EqualitySampler<span class="pl-k">.</span><span class="pl-c1">reduce_model</span>(true_partition))
<span class="pl-c"><span class="pl-c">#</span> "12211"</span>
<span class="pl-c"><span class="pl-c">#</span> and it so happens to be that the most visited model is also the true model</span></pre></div>
<h1 dir="auto">
<a id="user-content-supplementary-analyses" class="anchor" aria-hidden="true" href="#supplementary-analyses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supplementary Analyses</h1>
<p dir="auto">The simulations and analyses for the manuscript 'Flexible Bayesian Multiple Comparison Adjustment Using Dirichlet Process and Beta-Binomial Model Priors' are in the folder "simulations".
Note that this folder is a Julia project, so in order to rerun the simulations it is necessary to first activate and instantiate the project.</p>
</article></div>