<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-githubjl" class="anchor" aria-hidden="true" href="#githubjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GitHub.jl</h1>
<p><a href="https://travis-ci.org/JuliaWeb/GitHub.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1663efcf5fdb9a248fae2d2ad0e1d55d46e54068/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f4769744875622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/GitHub.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaWeb/GitHub.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6137ed4b53564efe2e885f5b9a4e18b93d4c7ff5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69615765622f4769744875622e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaWeb/GitHub.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>GitHub.jl provides a Julia interface to the <a href="https://developer.github.com/v3/">GitHub API v3</a>. Using GitHub.jl, you can do things like:</p>
<ul>
<li>query for basic repository, organization, and user information</li>
<li>programmatically take user-level actions (e.g. starring a repository, commenting on an issue, etc.)</li>
<li>set up listeners that can detect and respond to repository events</li>
<li>create and retrieve commit statuses (i.e. report CI pending/failure/success statuses to GitHub)</li>
</ul>
<p>Here's a table of contents for this rather lengthy README:</p>
<p><a href="#response-types">1. Response Types</a></p>
<p><a href="#rest-methods">2. REST Methods</a></p>
<p><a href="#authentication">3. Authentication</a></p>
<p><a href="#pagination">4. Pagination</a></p>
<p><a href="#handling-webhook-events">5. Handling Webhook Events</a></p>
<p><a href="#github-enterprise">6. GitHub Enterprise</a></p>
<h2><a id="user-content-response-types" class="anchor" aria-hidden="true" href="#response-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Response Types</h2>
<p>GitHub's JSON responses are parsed and returned to the caller as types of the form <code>G&lt;:GitHub.GitHubType</code>. Here's some useful information about these types:</p>
<ul>
<li>
<p>All fields are <code>Union{Nothing, T}</code>.</p>
</li>
<li>
<p>Field names generally match the corresponding field in GitHub's JSON representation (the exception is <code>"type"</code>, which has the corresponding field name <code>typ</code> to avoid the obvious language conflict).</p>
</li>
<li>
<p><code>GitHubType</code>s can be passed as arguments to API methods in place of (and in combination with) regular identifying properties. For example, <code>create_status(repo, commit)</code> could be called as:</p>
<ul>
<li><code>create_status(::GitHub.Repo, ::GitHub.Commit)</code></li>
<li><code>create_status(::GitHub.Repo, ::AbstractString)</code> where the second argument is the SHA</li>
<li><code>create_status(::AbstractString, ::GitHub.Commit)</code> where the first argument is the full qualified repo name</li>
<li><code>create_status(::AbstractString, ::AbstractString)</code> where the first argument is the repo name, and the second is the SHA</li>
</ul>
</li>
</ul>
<p>Here's a table that matches up the provided <code>GitHubType</code>s with their corresponding API documentation, as well as alternative identifying values:</p>
<table>
<thead>
<tr>
<th>type</th>
<th>alternative identifying property</th>
<th>link(s) to documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Owner</code></td>
<td>login, e.g. <code>"octocat"</code></td>
<td><a href="https://developer.github.com/v3/orgs/">organizations</a>, <a href="https://developer.github.com/v3/users/">users</a></td>
</tr>
<tr>
<td><code>Repo</code></td>
<td>full_name, e.g. <code>"JuliaWeb/GitHub.jl"</code></td>
<td><a href="https://developer.github.com/v3/repos/">repositories</a></td>
</tr>
<tr>
<td><code>Commit</code></td>
<td>sha, e.g. <code>"d069993b320c57b2ba27336406f6ec3a9ae39375"</code></td>
<td><a href="https://developer.github.com/v3/repos/commits/">repository commits</a></td>
</tr>
<tr>
<td><code>GitCommit</code></td>
<td>sha, e.g. <code>"d069993b320c57b2ba27336406f6ec3a9ae39375"</code></td>
<td><a href="https://developer.github.com/v3/git/commits/">raw git commits</a></td>
</tr>
<tr>
<td><code>Branch</code></td>
<td>name, e.g. <code>master</code></td>
<td><a href="https://developer.github.com/v3/repos/#get-branch">repository branches</a></td>
</tr>
<tr>
<td><code>Content</code></td>
<td>path, e.g. <code>"src/owners/owners.jl"</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/">repository contents</a></td>
</tr>
<tr>
<td><code>Comment</code></td>
<td>id, e.g. <code>162224613</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/">commit comments</a>, <a href="https://developer.github.com/v3/issues/comments/">issue comments</a>, <a href="https://developer.github.com/v3/pulls/comments/">PR review comments</a></td>
</tr>
<tr>
<td><code>Status</code></td>
<td>id, e.g. <code>366961773</code></td>
<td><a href="https://developer.github.com/v3/repos/statuses/">commit statuses</a></td>
</tr>
<tr>
<td><code>PullRequest</code></td>
<td>number, e.g. <code>44</code></td>
<td><a href="https://developer.github.com/v3/pulls/">pull requests</a></td>
</tr>
<tr>
<td><code>Issue</code></td>
<td>number, e.g. <code>31</code></td>
<td><a href="https://developer.github.com/v3/issues/">issues</a></td>
</tr>
<tr>
<td><code>Team</code></td>
<td>id, e.g. <code>1</code></td>
<td><a href="https://developer.github.com/v3/orgs/teams">teams</a></td>
</tr>
<tr>
<td><code>Gist</code></td>
<td>id, e.g. <code>0bace7cc774df4b3a4b0ee9aaa271ef6</code></td>
<td><a href="https://developer.github.com/v3/gists">gists</a></td>
</tr>
<tr>
<td><code>Review</code></td>
<td>id, e.g. <code>1</code></td>
<td><a href="https://developer.github.com/v3/pulls/reviews/">reviews</a></td>
</tr>
<tr>
<td><code>Blob</code></td>
<td>sha, e.g. <code>"95c8d1aa2a7b1e6d672e15b67e0df4abbe57dcbe"</code></td>
<td><a href="https://developer.github.com/v3/git/blobs/">raw git blobs</a></td>
</tr>
<tr>
<td><code>Tree</code></td>
<td>sha, e.g. <code>"78e524d5e979e326a7c144ce195bf94ca9b04fa0"</code></td>
<td><a href="https://developer.github.com/v3/git/trees/">raw git trees</a></td>
</tr>
<tr>
<td><code>Tag</code></td>
<td>tag name, e.g. <code>v1.0</code></td>
<td><a href="https://developer.github.com/v3/git/tags/">git tags</a></td>
</tr>
<tr>
<td><code>References</code></td>
<td>reference name, e.g. <code>heads/master</code> (note: omits leading <code>refs/</code>)</td>
<td><a href="https://developer.github.com/v3/git/refs/">git tags</a></td>
</tr>
</tbody>
</table>
<p>You can inspect which fields are available for a type <code>G&lt;:GitHubType</code> by calling <code>fieldnames(G)</code>.</p>
<h2><a id="user-content-rest-methods" class="anchor" aria-hidden="true" href="#rest-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>REST Methods</h2>
<p>GitHub.jl implements a bunch of methods that make REST requests to GitHub's API. The below sections list these methods (note that a return type of <code>Tuple{Vector{T}, Dict}</code> means the result is <a href="#pagination">paginated</a>).</p>
<h4><a id="user-content-users-and-organizations" class="anchor" aria-hidden="true" href="#users-and-organizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Users and Organizations</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>owner(owner[, isorg = false])</code></td>
<td><code>Owner</code></td>
<td>get <code>owner</code> as a <a href="https://developer.github.com/v3/users/#get-a-single-user">user</a> or <a href="https://developer.github.com/v3/orgs/#get-an-organization">organization</a></td>
</tr>
<tr>
<td><code>orgs(owner)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/orgs/#list-user-organizations">get the <code>owner</code>'s organizations</a></td>
</tr>
<tr>
<td><code>followers(owner)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/users/followers/#list-followers-of-a-user">get the <code>owner</code>'s followers</a></td>
</tr>
<tr>
<td><code>following(owner)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user">get the users followed by <code>owner</code></a></td>
</tr>
<tr>
<td><code>repos(owner[, isorg = false])</code></td>
<td><code>Tuple{Vector{Repo}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/#list-user-repositories">get the <code>owner</code>'s repositories</a>/<a href="https://developer.github.com/v3/repos/#list-organization-repositories">get an organization's repositories</a></td>
</tr>
<tr>
<td><code>teams(owner)</code></td>
<td><code>Tuple{Vector{Team}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/orgs/teams/#list-teams">get the <code>organizations</code>'s teams repositories</a></td>
</tr>
<tr>
<td><code>sshkeys(owner)</code></td>
<td><code>Tuple{Vector{Dict}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user">get the <code>owner</code>'s public ssh keys</a></td>
</tr>
<tr>
<td><code>gpgkeys(owner)</code></td>
<td><code>Tuple{Vector{Dict}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user">get the <code>owner</code>'s public gpg keys</a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-teams" class="anchor" aria-hidden="true" href="#teams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Teams</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>members(team)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td>get team members as <a href="https://developer.github.com/v3/orgs/teams/#get-team-membership">users</a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-repositories" class="anchor" aria-hidden="true" href="#repositories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Repositories</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>repo(repo)</code></td>
<td><code>Repo</code></td>
<td><a href="https://developer.github.com/v3/repos/#get">get <code>repo</code></a></td>
</tr>
<tr>
<td><code>create_repo(owner, name, params=Dict{String,String}())</code></td>
<td><code>Repo</code></td>
<td><a href="https://developer.github.com/v3/repos/#create">create a repository of the given <code>name</code> in the given  <code>owner</code>'s account</a></td>
</tr>
<tr>
<td><code>create_fork(repo)</code></td>
<td><code>Repo</code></td>
<td><a href="https://developer.github.com/v3/repos/forks/#create-a-fork">create a fork of <code>repo</code></a></td>
</tr>
<tr>
<td><code>forks(repo)</code></td>
<td><code>Tuple{Vector{Repo}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/forks/#list-forks">get <code>repo</code>'s forks</a></td>
</tr>
<tr>
<td><code>contributors(repo)</code></td>
<td><code>Dict</code></td>
<td><a href="https://developer.github.com/v3/repos/#list-contributors">get <code>repo</code>'s contributors</a></td>
</tr>
<tr>
<td><code>collaborators(repo)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/collaborators/#list">get <code>repo</code>'s collaborators</a></td>
</tr>
<tr>
<td><code>iscollaborator(repo, user)</code></td>
<td><code>Bool</code></td>
<td><a href="https://developer.github.com/v3/repos/collaborators/#get">check if <code>user</code> is a collaborator on <code>repo</code></a></td>
</tr>
<tr>
<td><code>add_collaborator(repo, user)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/repos/collaborators/#add-collaborator">add <code>user</code> as a collaborator to <code>repo</code></a></td>
</tr>
<tr>
<td><code>remove_collaborator(repo, user)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/repos/collaborators/#remove-collaborator">remove <code>user</code> as a collaborator from <code>repo</code></a></td>
</tr>
<tr>
<td><code>stats(repo, stat[, attempts = 3])</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/repos/statistics/">get information on <code>stat</code> (e.g. "contributors", "code_frequency", "commit_activity", etc.)</a></td>
</tr>
<tr>
<td><code>commit(repo, sha)</code></td>
<td><code>Commit</code></td>
<td><a href="https://developer.github.com/v3/repos/commits/#get-a-single-commit">get the commit specified by <code>sha</code></a></td>
</tr>
<tr>
<td><code>commits(repo)</code></td>
<td><code>Tuple{Vector{Commit}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository">get <code>repo</code>'s commits</a></td>
</tr>
<tr>
<td><code>branch(repo, branch)</code></td>
<td><code>Branch</code></td>
<td><a href="https://developer.github.com/v3/repos/#get-branch">get the branch specified by <code>branch</code></a></td>
</tr>
<tr>
<td><code>branches(repo)</code></td>
<td><code>Tuple{Vector{Branch}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/#list-branches">get <code>repo</code>'s branches</a></td>
</tr>
<tr>
<td><code>file(repo, path)</code></td>
<td><code>Content</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/#get-contents">get the file specified by <code>path</code></a></td>
</tr>
<tr>
<td><code>directory(repo, path)</code></td>
<td><code>Tuple{Vector{Content}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/#get-contents">get the contents of the directory specified by <code>path</code></a></td>
</tr>
<tr>
<td><code>create_file(repo, path)</code></td>
<td><code>Dict</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/#create-a-file">create a file at <code>path</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>update_file(repo, path)</code></td>
<td><code>Dict</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/#update-a-file">update a file at <code>path</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_file(repo, path)</code></td>
<td><code>Dict</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/#delete-a-file">delete a file at <code>path</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>permalink(content::Content, commit)</code></td>
<td><code>HTTP.URI</code></td>
<td><a href="https://help.github.com/articles/getting-permanent-links-to-files/">get a permalink for <code>content</code> at the SHA specified by <code>commit</code></a></td>
</tr>
<tr>
<td><code>readme(repo)</code></td>
<td><code>Content</code></td>
<td><a href="https://developer.github.com/v3/repos/contents/#get-the-readme">get <code>repo</code>'s README</a></td>
</tr>
<tr>
<td><code>create_status(repo, sha)</code></td>
<td><code>Status</code></td>
<td><a href="https://developer.github.com/v3/repos/statuses/#create-a-status">create a status for the commit specified by <code>sha</code></a></td>
</tr>
<tr>
<td><code>statuses(repo, ref)</code></td>
<td><code>Tuple{Vector{Status}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref">get the statuses posted to <code>ref</code></a></td>
</tr>
<tr>
<td><code>status(repo, ref)</code></td>
<td><code>Status</code></td>
<td><a href="https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref">get the combined status for <code>ref</code></a></td>
</tr>
<tr>
<td><code>create_webhook(owner, repo)</code></td>
<td><code>Webhook</code></td>
<td><a href="https://developer.github.com/v3/repos/hooks/#create-a-hook">create a webhook for <code>repo</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-pull-requests-and-issues" class="anchor" aria-hidden="true" href="#pull-requests-and-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pull Requests and Issues</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pull_request(repo, pr)</code></td>
<td><code>PullRequest</code></td>
<td><a href="https://developer.github.com/v3/pulls/#get-a-single-pull-request">get the pull request specified by <code>pr</code></a></td>
</tr>
<tr>
<td><code>pull_requests(repo)</code></td>
<td><code>Tuple{Vector{PullRequest}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/pulls/#list-pull-requests">get <code>repo</code>'s pull requests</a></td>
</tr>
<tr>
<td><code>create_pull_request(repo)</code></td>
<td><code>PullRequest</code></td>
<td><a href="https://developer.github.com/v3/pulls/#create-a-pull-request">create pull request in <code>repo</code></a></td>
</tr>
<tr>
<td><code>update_pull_request(repo, pr)</code>        </td>
<td><code>PullRequest</code>                   </td>
<td><a href="https://developer.github.com/v3/pulls/#update-a-pull-request">update the given <code>pr</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>close_pull_request(repo, pr)</code></td>
<td><code>PullRequest</code></td>
<td><a href="https://developer.github.com/v3/pulls/#update-a-pull-request">close the given <code>pr</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>issue(repo, issue)</code></td>
<td><code>Issue</code></td>
<td><a href="https://developer.github.com/v3/issues/#get-a-single-issue">get the issue specified by <code>issue</code></a></td>
</tr>
<tr>
<td><code>issues(repo)</code></td>
<td><code>Tuple{Vector{Issue}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/issues/#list-issues-for-a-repository">get <code>repo</code>'s issues</a></td>
</tr>
<tr>
<td><code>create_issue(repo)</code></td>
<td><code>Issue</code></td>
<td><a href="https://developer.github.com/v3/issues/#create-an-issue">create an issue in <code>repo</code></a></td>
</tr>
<tr>
<td><code>edit_issue(repo, issue)</code></td>
<td><code>Issue</code></td>
<td><a href="https://developer.github.com/v3/issues/#edit-an-issue">edit <code>issue</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>reviews(repo, pr)</code></td>
<td><code>Tuple{Vector{PullRequest}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request">get a <code>pr</code>'s reviews</a></td>
</tr>
<tr>
<td><code>dismiss_review(repo, review)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review">dismiss <code>review</code> in <code>repo</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-comments" class="anchor" aria-hidden="true" href="#comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comments</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>comment(repo, comment, :issue)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#get-a-single-comment">get an issue <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>comment(repo, comment, :pr)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#get-a-single-comment">get a PR <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>comment(repo, comment, :review)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/pulls/comments/#get-a-single-comment">get an review <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>comment(repo, comment, :commit)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment">get a commit <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>comments(repo, issue, :issue)</code></td>
<td><code>Tuple{Vector{Comment}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue">get the comments on <code>issue</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>comments(repo, pr, :pr)</code></td>
<td><code>Tuple{Vector{Comment}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue">get the comments on <code>pr</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>comments(repo, pr, :review)</code></td>
<td><code>Tuple{Vector{Comment}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request">get the review comments on <code>pr</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>comments(repo, commit, :commit)</code></td>
<td><code>Tuple{Vector{Comment}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit">get the comments on <code>commit</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>create_comment(repo, issue, :issue)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#create-a-comment">create a comment on <code>issue</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>create_comment(repo, pr, :pr)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#create-a-comment">create a comment on <code>pr</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>create_comment(repo, pr, :review)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/pulls/comments/#create-a-comment">create a review comment on <code>pr</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>create_comment(repo, commit, :commit)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/#create-a-commit-comment">create a comment on <code>commit</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>edit_comment(repo, comment, :issue)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#edit-a-comment">edit the issue <code>comment</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>edit_comment(repo, comment, :pr)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#edit-a-comment">edit the PR <code>comment</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>edit_comment(repo, comment, :review)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/pulls/comments/#edit-a-comment">edit the review <code>comment</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>edit_comment(repo, comment, :commit)</code></td>
<td><code>Comment</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/#update-a-commit-comment">edit the commit <code>comment</code> in <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_comment(repo, comment, :issue)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#delete-a-comment">delete the issue <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_comment(repo, comment, :pr)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/issues/comments/#delete-a-comment">delete the PR <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_comment(repo, comment, :review)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/pulls/comments/#delete-a-comment">delete the review <code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_comment(repo, comment, :commit)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/#delete-a-commit-comment">delete the commit<code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_comment(repo, comment, :commit)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/repos/comments/#delete-a-commit-comment">delete the commit<code>comment</code> from <code>repo</code></a></td>
</tr>
<tr>
<td><code>reply_to(repo, review, comment, body)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/pulls/comments/#alternative-input">reply to the <code>comment</code> (of <code>review</code> in <code>repo</code>) creating a new comment with the specified <code>body</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-social-activity" class="anchor" aria-hidden="true" href="#social-activity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Social Activity</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>star(repo)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/activity/starring/#star-a-repository">star <code>repo</code></a></td>
</tr>
<tr>
<td><code>unstar(repo)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/activity/starring/#unstar-a-repository">unstar <code>repo</code></a></td>
</tr>
<tr>
<td><code>stargazers(repo)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/activity/starring/#list-stargazers">get <code>repo</code>'s stargazers</a></td>
</tr>
<tr>
<td><code>starred(user)</code></td>
<td><code>Tuple{Vector{Repo}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/activity/starring/#list-repositories-being-starred">get repositories starred by <code>user</code></a></td>
</tr>
<tr>
<td><code>watchers(repo)</code></td>
<td><code>Tuple{Vector{Owner}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/activity/watching/#list-watchers">get <code>repo</code>'s watchers</a></td>
</tr>
<tr>
<td><code>watched(user)</code></td>
<td><code>Tuple{Vector{Repo}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/activity/watching/#list-repositories-being-watched">get repositories watched by <code>user</code></a></td>
</tr>
<tr>
<td><code>watch(repo)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/activity/watching/#set-a-repository-subscription">watch <code>repo</code></a></td>
</tr>
<tr>
<td><code>unwatch(repo)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription">unwatch <code>repo</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-gists" class="anchor" aria-hidden="true" href="#gists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gists</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gist(id)</code></td>
<td><code>Gist</code></td>
<td><a href="https://developer.github.com/v3/gists/#get-a-single-gist">get the gist specified by <code>id</code></a></td>
</tr>
<tr>
<td><code>gist(id, revision)</code></td>
<td><code>Gist</code></td>
<td><a href="https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist">get the gist specified by <code>id</code> and <code>revision</code></a></td>
</tr>
<tr>
<td><code>gists()</code></td>
<td><code>Tuple{Vector{Gist}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/gists/#list-all-public-gists">get all public gists</a></td>
</tr>
<tr>
<td><code>gists(owner)</code></td>
<td><code>Tuple{Vector{Gist}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/gists/#list-a-users-gists">get all gists for <code>owner</code></a></td>
</tr>
<tr>
<td><code>create_gist()</code></td>
<td><code>Gist</code></td>
<td><a href="https://developer.github.com/v3/gists/#create-a-gist">create a gist</a></td>
</tr>
<tr>
<td><code>edit_gist(gist)</code></td>
<td><code>Gist</code></td>
<td><a href="https://developer.github.com/v3/gists/#edit-a-gist">edit a gist</a></td>
</tr>
<tr>
<td><code>delete_gist(gist)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/gists/#delete-a-gist">delete a gist</a></td>
</tr>
<tr>
<td><code>create_gist_fork(gist)</code></td>
<td><code>Gist</code></td>
<td><a href="https://developer.github.com/v3/gists/#fork-a-gist">fork a gist</a></td>
</tr>
<tr>
<td><code>gist_forks(gist)</code></td>
<td><code>Tuple{Vector{Gist}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/gists/#list-gist-forks">list the forks of a gist</a></td>
</tr>
<tr>
<td><code>star_gist(gist)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/gists/#star-a-gist">star <code>gist</code></a></td>
</tr>
<tr>
<td><code>starred_gists()</code></td>
<td><code>Tuple{Vector{Gist}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/gists/#list-starred-gists">get the starred <code>gist</code>s</a></td>
</tr>
<tr>
<td><code>unstar_gist(gist)</code></td>
<td><code>HTTP.Response</code></td>
<td><a href="https://developer.github.com/v3/gists/#unstar-a-gist">unstar <code>gist</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-git-data" class="anchor" aria-hidden="true" href="#git-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Git Data</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>blob(repo, sha)</code></td>
<td><code>Blob</code></td>
<td><a href="https://developer.github.com/v3/git/blobs/#get-a-blob">Look up a blob in the <code>repo</code> by its SHA</a></td>
</tr>
<tr>
<td><code>create_blob(repo)</code></td>
<td><code>Blob</code></td>
<td><a href="https://developer.github.com/v3/git/blobs/#create-a-blob">Create a blob in the <code>repo</code></a></td>
</tr>
<tr>
<td><code>gitcommit(repo, sha)</code></td>
<td><code>GitCommit</code></td>
<td><a href="https://developer.github.com/v3/git/commits/#get-a-commit">Look up a commit in the <code>repo</code> by its SHA</a></td>
</tr>
<tr>
<td><code>create_gitcommit(repo)</code></td>
<td><code>GitCommit</code></td>
<td><a href="https://developer.github.com/v3/git/commits/#create-a-commit">Create a commit in the <code>repo</code></a></td>
</tr>
<tr>
<td><code>tree(repo, sha)</code></td>
<td><code>Tree</code></td>
<td><a href="https://developer.github.com/v3/git/trees/#get-a-tree">Look up a tree in the <code>repo</code> by its SHA</a></td>
</tr>
<tr>
<td><code>create_tree(repo)</code></td>
<td><code>Tree</code></td>
<td><a href="https://developer.github.com/v3/git/trees/create-a-tree">Create a tree in the <code>repo</code></a></td>
</tr>
<tr>
<td><code>tag(repo, sha)</code></td>
<td><code>Tag</code></td>
<td><a href="https://developer.github.com/v3/git/tag/#get-a-tag">Look up a tag in the <code>repo</code> by its name</a></td>
</tr>
<tr>
<td><code>create_tag(repo)</code></td>
<td><code>Tag</code></td>
<td>[Create a tag in the <code>repo</code>](</td>
</tr>
<tr>
<td><a href="https://developer.github.com/v3/git/tag/#create-a-tag">https://developer.github.com/v3/git/tag/#create-a-tag</a>)</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>reference(repo, name)</code></td>
<td><code>Reference</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#get-a-reference">Look up a ref in the <code>repo</code> by its name</a></td>
</tr>
<tr>
<td><code>references(repo)</code></td>
<td><code>Vector{Reference}</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#get-all-references">Get all <code>refs </code> of the repo</a></td>
</tr>
<tr>
<td><code>create_reference(repo)</code></td>
<td><code>Reference</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#create-a-reference">Create a reference in the <code>repo</code></a></td>
</tr>
<tr>
<td><code>update_reference(repo)</code></td>
<td><code>Reference</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#create-a-reference">Update a reference in the <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_reference(repo)</code></td>
<td><code>GitCommit</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#delete-a-reference">Delete a the <code>repo</code></a></td>
</tr>
<tr>
<td><code>tag(repo)</code></td>
<td><code>Reference</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#create-a-reference">Update a reference in the <code>repo</code></a></td>
</tr>
<tr>
<td><code>delete_reference(repo)</code></td>
<td><code>GitCommit</code></td>
<td><a href="https://developer.github.com/v3/git/refs/#delete-a-reference">Delete a the <code>repo</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-github-apps" class="anchor" aria-hidden="true" href="#github-apps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GitHub Apps</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>app(id)</code></td>
<td><code>App</code></td>
<td><a href="https://developer.github.com/v3/apps/#get-a-single-github-app">get the GitHub app with the specified <code>id</code></a></td>
</tr>
<tr>
<td><code>app(slug)</code></td>
<td><code>App</code></td>
<td><a href="https://developer.github.com/v3/apps/#get-a-single-github-app">get the GitHub app with the specified <code>slug</code></a></td>
</tr>
<tr>
<td><code>app(;auth=auth)</code></td>
<td><code>App</code></td>
<td><a href="https://developer.github.com/v3/apps/#get-the-authenticated-github-app">get the GitHub app authenticated by the corresponding <code>auth</code></a></td>
</tr>
<tr>
<td><code>installations(auth)</code></td>
<td><code>Vector{Installation}</code></td>
<td><a href="https://developer.github.com/v3/apps/#find-installations">get the installations for the GitHub app authenticated by the corresponding <code>auth</code></a></td>
</tr>
<tr>
<td><code>repos(i::Installation)</code></td>
<td><code>Tuple{Vector{Repo}, Dict}</code></td>
<td><a href="https://developer.github.com/v3/apps/#find-installations">get the active repositories for this installation</a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-github-check-runs" class="anchor" aria-hidden="true" href="#github-check-runs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GitHub Check Runs</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>create_check_run(repo; params=...)</code></td>
<td><code>CheckRun</code></td>
<td><a href="https://developer.github.com/v3/checks/runs/#create-a-check-run">Create a new check run</a></td>
</tr>
<tr>
<td><code>update_check_run(repo, id::Int; params=...)</code></td>
<td><code>CheckRun</code></td>
<td><a href="https://developer.github.com/v3/checks/runs/#update-a-check-run">Update the check run with the given <code>id</code></a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Miscellaneous</h4>
<table>
<thead>
<tr>
<th>method</th>
<th>return type</th>
<th>documentation</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rate_limit()</code></td>
<td><code>Dict</code></td>
<td><a href="https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status">get your rate limit status</a></td>
</tr>
<tr>
<td><code>authenticate(token)</code></td>
<td><code>OAuth2</code></td>
<td><a href="https://developer.github.com/v3/#authentication">validate <code>token</code> and return an authentication object</a></td>
</tr>
</tbody>
</table>
<h4><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Keyword Arguments</h4>
<p>All REST methods accept the following keyword arguments:</p>
<table>
<thead>
<tr>
<th>keyword</th>
<th>type</th>
<th>default value</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>auth</code></td>
<td><code>GitHub.Authorization</code></td>
<td><code>GitHub.AnonymousAuth()</code></td>
<td>The request's authorization</td>
</tr>
<tr>
<td><code>params</code></td>
<td><code>Dict</code></td>
<td><code>Dict()</code></td>
<td>The request's query parameters</td>
</tr>
<tr>
<td><code>headers</code></td>
<td><code>Dict</code></td>
<td><code>Dict()</code></td>
<td>The request's headers. Note that these headers will be mutated by GitHub.jl request methods.</td>
</tr>
<tr>
<td><code>handle_error</code></td>
<td><code>Bool</code></td>
<td><code>true</code></td>
<td>If <code>true</code>, a Julia error will be thrown in the event that GitHub's response reports an error.</td>
</tr>
<tr>
<td><code>page_limit</code></td>
<td><code>Real</code></td>
<td><code>Inf</code></td>
<td>The number of pages to return (only applies to paginated results, obviously)</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-authentication" class="anchor" aria-hidden="true" href="#authentication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authentication</h2>
<p>To authenticate your requests to GitHub, you'll need to generate an appropriate <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">access token</a>. Then, you can do stuff like the following (this example assumes that you set an environmental variable <code>GITHUB_AUTH</code> containing the access token):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> GitHub
myauth <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">authenticate</span>(ENV[<span class="pl-s"><span class="pl-pds">"</span>GITHUB_AUTH<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> don't hardcode your access tokens!</span>
GitHub<span class="pl-k">.</span><span class="pl-c1">star</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaWeb/GitHub.jl<span class="pl-pds">"</span></span>; auth <span class="pl-k">=</span> myauth)  <span class="pl-c"><span class="pl-c">#</span> star the GitHub.jl repo as the user identified by myauth</span></pre></div>
<p>As you can see, you can propagate the identity/permissions of the <code>myauth</code> token to GitHub.jl's methods by passing <code>auth = myauth</code> as a keyword argument.</p>
<p>Note that if authentication is not provided, they'll be subject to the restrictions GitHub imposes on unauthenticated requests (such as <a href="https://developer.github.com/v3/#rate-limiting">stricter rate limiting</a>)</p>
<h3><a id="user-content-authenticating-as-a-github-app" class="anchor" aria-hidden="true" href="#authenticating-as-a-github-app"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authenticating as a GitHub app</h3>
<p>GitHub apps (formerly called integrations) have <a href="https://developer.github.com/apps/building-integrations/setting-up-and-registering-github-apps/about-authentication-options-for-github-apps/">their own authentication format</a>
based on <a href="https://jwt.io/" rel="nofollow">JSON Web Tokens</a>. When creating a GitHub app, you will be
prompted to download your app's private key. You can use this private key to
authenticate as a Github App using the <code>JWTAuth</code> type:</p>
<pre><code>appauth = JWTAuth(1234, "privkey.pem") # Replace with your app id/privkey file
</code></pre>
<p>The following shows a complete example that opens an issue on every repository
on which your application gets installed:</p>
<pre><code>listener = GitHub.EventListener() do event
    # On installation, open an issue on every repository we got installed in
    if event.kind == "installation"
        # Authenticate as the application
        appauth = GitHub.JWTAuth(1234, "privkey.pem")
        # Now, get permissions for this particular installation
        installation = Installation(event.payload["installation"])
        auth = create_access_token(installation, appauth)
        for repo in event.payload["repositories"]
            create_issue(GitHub.Repo(repo), auth=auth,
                params = Dict(
                    :title =&gt; "Hello World",
                    :body =&gt; "Thank you for installing me - I needed that"
            ))
        end
    end
    return HTTP.Response(200)
end
GitHub.run(listener, host=IPv4(0,0,0,0), port=8888)
</code></pre>
<h2><a id="user-content-pagination" class="anchor" aria-hidden="true" href="#pagination"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pagination</h2>
<p>GitHub will often <a href="https://developer.github.com/v3/#pagination">paginate</a> results for requests that return multiple items. On the GitHub.jl side of things, it's pretty easy to see which methods return paginated results by referring to the <a href="#rest-methods">REST Methods documentation</a>; if a method returns a <code>Tuple{Vector{T}, Dict}</code>, that means its results are paginated.</p>
<p>Paginated methods return both the response values, and some pagination metadata. You can use the <code>per_page</code>/<code>page</code> query parameters and the <code>page_limit</code> keyword argument to configure result pagination.</p>
<p>For example, let's request a couple pages of GitHub.jl's PRs, and configure our result pagination to see how it works:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> show all PRs (both open and closed), and give me 3 items per page starting at page 2</span>
julia<span class="pl-k">&gt;</span> myparams <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>all<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>per_page<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>page<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> prs, page_data <span class="pl-k">=</span> <span class="pl-c1">pull_requests</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaWeb/GitHub.jl<span class="pl-pds">"</span></span>; params <span class="pl-k">=</span> myparams, page_limit <span class="pl-k">=</span> <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> prs <span class="pl-c"><span class="pl-c">#</span> 3 items per page * 2 page limit == 6 items, as expected</span>
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{GitHub<span class="pl-k">.</span>PullRequest,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">44</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">43</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">42</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">41</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">39</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">38</span>)

julia<span class="pl-k">&gt;</span> page_data
Dict{String,String} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>prev<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=2&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>next<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=4&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>first<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=1&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>last<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=7&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span></pre></div>
<p>In the above, <code>prs</code> contains the results from page 2 and 3. We know this because we specified page 2 as our starting page (<code>"page" =&gt; 2</code>), and limited the response to 2 pages max (<code>page_limit = 2</code>). In addition, we know that exactly 2 pages were actually retrieved, since there are 6 items and we said each page should only contain 3 items (<code>"per_page" =&gt; 3</code>).</p>
<p>The values provided by <code>page_data</code> are the same values that are included in the <a href="https://developer.github.com/v3/#link-header">Link header</a> of the last requested item. You can continue paginating by starting a new paginated request at one of these links using the <code>start_page</code> keyword argument:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Continue paging, starting with `page_data["next"]`.</span>
<span class="pl-c"><span class="pl-c">#</span> Note that the `params` kwarg can't be used here because</span>
<span class="pl-c"><span class="pl-c">#</span> the link passed to `start_page` has its own parameters</span>
julia<span class="pl-k">&gt;</span> prs2, page_data2 <span class="pl-k">=</span> <span class="pl-c1">pull_requests</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaWeb/GitHub.jl<span class="pl-pds">"</span></span>; page_limit <span class="pl-k">=</span> <span class="pl-c1">2</span>, start_page <span class="pl-k">=</span> page_data[<span class="pl-s"><span class="pl-pds">"</span>next<span class="pl-pds">"</span></span>]);

julia<span class="pl-k">&gt;</span> prs2
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{GitHub<span class="pl-k">.</span>PullRequest,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">37</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">34</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">32</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">30</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">24</span>)
 GitHub<span class="pl-k">.</span><span class="pl-c1">PullRequest</span>(<span class="pl-c1">22</span>)

julia<span class="pl-k">&gt;</span> page_data2
Dict{String,String} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>prev<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=4&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>next<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=6&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>first<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=1&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span>
  <span class="pl-s"><span class="pl-pds">"</span>last<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>https://api.github.com/repositories/16635105/pulls?page=7&amp;per_page=3&amp;state=all<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-handling-webhook-events" class="anchor" aria-hidden="true" href="#handling-webhook-events"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Handling Webhook Events</h2>
<p>GitHub.jl comes with configurable <code>EventListener</code> and <code>CommentListener</code> types that can be used as basic servers for parsing and responding to events delivered by <a href="https://developer.github.com/webhooks/">GitHub's repository Webhooks</a>.</p>
<h4><a id="user-content-eventlistener" class="anchor" aria-hidden="true" href="#eventlistener"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>EventListener</code></h4>
<p>When an <code>EventListener</code> receives an event, it performs some basic validation and wraps the event payload (and some other data) in <a href="https://github.com/JuliaWeb/GitHub.jl/blob/master/src/activity/events/events.jl">a <code>WebhookEvent</code> type</a>. This <code>WebhookEvent</code> instance, along with the provided <code>Authorization</code>, is then fed to the server's handler function, which the user defines to determine the server's response behavior. The handler function is expected to return an <code>HTTP.Response</code> that is then sent back to GitHub.</p>
<p>The <code>EventListener</code> constructor takes the following keyword arguments:</p>
<ul>
<li><code>auth</code>: GitHub authorization (usually with repo-level permissions).</li>
<li><code>secret</code>: A string used to verify the event source. If the event is from a GitHub Webhook, it's the Webhook's secret. If a secret is not provided, the server won't validate the secret signature of incoming requests.</li>
<li><code>repos</code>: A vector of <code>Repo</code>s (or fully qualified repository names) listing all acceptable repositories. All repositories are whitelisted by default.</li>
<li><code>events</code>: A vector of <a href="https://developer.github.com/webhooks/#events">event names</a> listing all acceptable events (e.g. ["commit_comment", "pull_request"]). All events are whitelisted by default.</li>
<li><code>forwards</code>: A vector of <code>HTTP.URI</code>s (or URI strings) to which any incoming requests should be forwarded (after being validated by the listener)</li>
</ul>
<p>Here's an example that demonstrates how to construct and run an <code>EventListener</code> that does benchmarking on every commit and PR:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> GitHub

<span class="pl-c"><span class="pl-c">#</span> EventListener settings</span>
myauth <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">authenticate</span>(ENV[<span class="pl-s"><span class="pl-pds">"</span>GITHUB_AUTH<span class="pl-pds">"</span></span>])
mysecret <span class="pl-k">=</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>MY_SECRET<span class="pl-pds">"</span></span>]
myevents <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>pull_request<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>push<span class="pl-pds">"</span></span>]
myrepos <span class="pl-k">=</span> [GitHub<span class="pl-k">.</span><span class="pl-c1">Repo</span>(<span class="pl-s"><span class="pl-pds">"</span>owner1/repo1<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>owner2/repo2<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> can be Repos or repo names</span>
myforwards <span class="pl-k">=</span> [HTTP<span class="pl-k">.</span><span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>http://myforward1.com<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>http://myforward2.com<span class="pl-pds">"</span></span>] <span class="pl-c"><span class="pl-c">#</span> can be HTTP.URIs or URI strings</span>

<span class="pl-c"><span class="pl-c">#</span> Set up Status parameters</span>
pending_params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>pending<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>context<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Benchmarker<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Running benchmarks...<span class="pl-pds">"</span></span>
)

success_params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>success<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>context<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Benchmarker<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Benchmarks complete!<span class="pl-pds">"</span></span>
)

<span class="pl-en">error_params</span>(err) <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>state<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>context<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Benchmarker<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Error: <span class="pl-v">$err</span><span class="pl-pds">"</span></span>
)

<span class="pl-c"><span class="pl-c">#</span> We can use Julia's `do` notation to set up the listener's handler function</span>
listener <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">EventListener</span>(auth <span class="pl-k">=</span> myauth,
                                secret <span class="pl-k">=</span> mysecret,
                                repos <span class="pl-k">=</span> myrepos,
                                events <span class="pl-k">=</span> myevents,
                                forwards <span class="pl-k">=</span> myforwards) <span class="pl-k">do</span> event
    kind, payload, repo <span class="pl-k">=</span> event<span class="pl-k">.</span>kind, event<span class="pl-k">.</span>payload, event<span class="pl-k">.</span>repository

    <span class="pl-k">if</span> kind <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>pull_request<span class="pl-pds">"</span></span> <span class="pl-k">&amp;&amp;</span> payload[<span class="pl-s"><span class="pl-pds">"</span>action<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>closed<span class="pl-pds">"</span></span>
        <span class="pl-k">return</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>)
    <span class="pl-k">end</span>

    <span class="pl-k">if</span> event<span class="pl-k">.</span>kind <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>push<span class="pl-pds">"</span></span>
        sha <span class="pl-k">=</span> event<span class="pl-k">.</span>payload[<span class="pl-s"><span class="pl-pds">"</span>after<span class="pl-pds">"</span></span>]
    <span class="pl-k">elseif</span> event<span class="pl-k">.</span>kind <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>pull_request<span class="pl-pds">"</span></span>
        sha <span class="pl-k">=</span> event<span class="pl-k">.</span>payload[<span class="pl-s"><span class="pl-pds">"</span>pull_request<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>head<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>sha<span class="pl-pds">"</span></span>]
    <span class="pl-k">end</span>

    GitHub<span class="pl-k">.</span><span class="pl-c1">create_status</span>(repo, sha; auth <span class="pl-k">=</span> myauth, params <span class="pl-k">=</span> pending_params)

    <span class="pl-k">try</span>
        <span class="pl-c"><span class="pl-c">#</span> run_and_log_benchmarks isn't actually a defined function, but you get the point</span>
        <span class="pl-c1">run_and_log_benchmarks</span>(event, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>(sha)-benchmarks.csv<span class="pl-pds">"</span></span>)
    <span class="pl-k">catch</span> err
        GitHub<span class="pl-k">.</span><span class="pl-c1">create_status</span>(repo, sha; auth <span class="pl-k">=</span> myauth, params <span class="pl-k">=</span> <span class="pl-c1">error_params</span>(err))
        <span class="pl-k">return</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">500</span>)
    <span class="pl-k">end</span>

    GitHub<span class="pl-k">.</span><span class="pl-c1">create_status</span>(repo, sha; auth <span class="pl-k">=</span> myauth, params <span class="pl-k">=</span> success_params)

    <span class="pl-k">return</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Start the listener on localhost at port 8000</span>
GitHub<span class="pl-k">.</span><span class="pl-c1">run</span>(listener, <span class="pl-c1">IPv4</span>(<span class="pl-c1">127</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), <span class="pl-c1">8000</span>)</pre></div>
<h4><a id="user-content-commentlistener" class="anchor" aria-hidden="true" href="#commentlistener"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>CommentListener</code></h4>
<p>A <code>CommentListener</code> is a special kind of <code>EventListener</code> that allows users to pass data to the listener's handler function via commenting. This is useful for triggering events on repositories that require configuration settings.</p>
<p>A <code>CommentListener</code> automatically filters out all non-comment events, and then checks the body of each comment event against a trigger <code>Regex</code> supplied by the user. If a match is found in the comment, then the <code>CommentListener</code> calls its handler function, passing it the event and the corresponding <code>RegexMatch</code>.</p>
<p>The <code>CommentListener</code> constructor takes the following keyword arguments:</p>
<ul>
<li><code>auth</code>: same as <code>EventListener</code></li>
<li><code>secret</code>: same as <code>EventListener</code></li>
<li><code>repos</code>: same as <code>EventListener</code></li>
<li><code>forwards</code>: same as <code>EventListener</code></li>
<li><code>check_collab</code>: If <code>true</code>, only acknowledge comments made by repository collaborators. Note that, if <code>check_collab</code> is <code>true</code>, <code>auth</code> must have the appropriate permissions to query the comment's repository for the collaborator status of the commenter. <code>check_collab</code> is <code>true</code> by default.</li>
<li><code>use_access_token</code>: If <code>check_collab</code> is set to <code>true</code> and <code>auth</code> is using JWT authentication for GitHub Apps, then set this to <code>true</code>.</li>
</ul>
<p>For example, let's set up a silly <code>CommentListener</code> that responds to the commenter with a greeting. To give a demonstration of the desired behavior, if a collaborator makes a comment like:</p>
<pre><code>Man, I really would like to be greeted today.

`sayhello("Bob", "outgoing")`
</code></pre>
<p>We want the <code>CommentLister</code> to reply:</p>
<pre><code>Hello, Bob, you look very outgoing today!
</code></pre>
<p>Here's the code that will make this happen:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> GitHub

<span class="pl-c"><span class="pl-c">#</span> CommentListener settings</span>
trigger <span class="pl-k">=</span> <span class="pl-sr"><span class="pl-pds">r"</span>`sayhello<span class="pl-cce">\(</span>.*?<span class="pl-cce">\)</span>`<span class="pl-pds">"</span></span>
myauth <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">authenticate</span>(ENV[<span class="pl-s"><span class="pl-pds">"</span>GITHUB_AUTH<span class="pl-pds">"</span></span>])
mysecret <span class="pl-k">=</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>MY_SECRET<span class="pl-pds">"</span></span>]

<span class="pl-c"><span class="pl-c">#</span> We can use Julia's `do` notation to set up the listener's handler function.</span>
<span class="pl-c"><span class="pl-c">#</span> Note that, in our example case, `phrase` will be "`sayhello(\"Bob\", \"outgoing\")`"</span>
listener <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">CommentListener</span>(trigger; auth <span class="pl-k">=</span> myauth, secret <span class="pl-k">=</span> mysecret) <span class="pl-k">do</span> event, phrase
    <span class="pl-c"><span class="pl-c">#</span> In our example case, this code sets name to "Bob" and adjective to "outgoing"</span>
    name, adjective <span class="pl-k">=</span> <span class="pl-c1">matchall</span>(<span class="pl-sr"><span class="pl-pds">r"</span><span class="pl-cce">\"</span>.*?<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>, phrase)
    comment_params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>body<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, <span class="pl-v">$name</span>, you look very <span class="pl-v">$adjective</span> today!<span class="pl-pds">"</span></span>)

    <span class="pl-c"><span class="pl-c">#</span> Parse the original comment event for all the necessary reply info</span>
    comment <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">Comment</span>(event<span class="pl-k">.</span>payload[<span class="pl-s"><span class="pl-pds">"</span>comment<span class="pl-pds">"</span></span>])

    <span class="pl-k">if</span> event<span class="pl-k">.</span>kind <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>issue_comment<span class="pl-pds">"</span></span>
        comment_kind <span class="pl-k">=</span> <span class="pl-c1">:issue</span>
        reply_to <span class="pl-k">=</span> event<span class="pl-k">.</span>payload[<span class="pl-s"><span class="pl-pds">"</span>issue<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>number<span class="pl-pds">"</span></span>]
    <span class="pl-k">elseif</span> event<span class="pl-k">.</span>kind <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>commit_comment<span class="pl-pds">"</span></span>
        comment_kind <span class="pl-k">=</span> <span class="pl-c1">:commit</span>
        reply_to <span class="pl-k">=</span> comment<span class="pl-k">.</span>commit_id
    <span class="pl-k">elseif</span> event<span class="pl-k">.</span>kind <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>pull_request_review_comment<span class="pl-pds">"</span></span>
        comment_kind <span class="pl-k">=</span> <span class="pl-c1">:review</span>
        reply_to <span class="pl-k">=</span> event<span class="pl-k">.</span>payload[<span class="pl-s"><span class="pl-pds">"</span>pull_request<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>number<span class="pl-pds">"</span></span>]
        <span class="pl-c"><span class="pl-c">#</span> load required query params for review comment creation</span>
        comment_params[<span class="pl-s"><span class="pl-pds">"</span>commit_id<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> comment<span class="pl-k">.</span>commit_id
        comment_params[<span class="pl-s"><span class="pl-pds">"</span>path<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> comment<span class="pl-k">.</span>path
        comment_params[<span class="pl-s"><span class="pl-pds">"</span>position<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> comment<span class="pl-k">.</span>position
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> send the comment creation request to GitHub</span>
    GitHub<span class="pl-k">.</span><span class="pl-c1">create_comment</span>(event<span class="pl-k">.</span>repository, reply_to, comment_kind; auth <span class="pl-k">=</span> myauth, params <span class="pl-k">=</span> comment_params)

    <span class="pl-k">return</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Start the listener on localhost at port 8000</span>
GitHub<span class="pl-k">.</span><span class="pl-c1">run</span>(listener, <span class="pl-c1">IPv4</span>(<span class="pl-c1">127</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), <span class="pl-c1">8000</span>)</pre></div>
<h2><a id="user-content-github-enterprise" class="anchor" aria-hidden="true" href="#github-enterprise"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GitHub Enterprise</h2>
<p>This library work with github.com, and also with self-hosted github, a.k.a. GitHub Enterprise.</p>
<p>To use it with self-hosted github, you need to create <code>GitHubWebAPI</code> structure and pass it to functions when needed.
Following example shows obtaining repository info <code>private/Package.jl</code> on github instance with API <code>https://git.company.com/api/v3</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> GitHub

api <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">GitHubWebAPI</span>(HTTP<span class="pl-k">.</span><span class="pl-c1">URI</span>(<span class="pl-s"><span class="pl-pds">"</span>https://git.company.com/api/v3<span class="pl-pds">"</span></span>))
myauth <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">authenticate</span>(api, ENV[<span class="pl-s"><span class="pl-pds">"</span>GITHUB_AUTH<span class="pl-pds">"</span></span>])
myrepo <span class="pl-k">=</span> GitHub<span class="pl-k">.</span><span class="pl-c1">repo</span>(env, <span class="pl-s"><span class="pl-pds">"</span>private/Package.jl<span class="pl-pds">"</span></span>, auth<span class="pl-k">=</span>myauth)</pre></div>
</article></div>