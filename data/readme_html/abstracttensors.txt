<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-abstracttensorsjl" class="anchor" aria-hidden="true" href="#abstracttensorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractTensors.jl</h1>
<p><em>Tensor algebra abstract type interoperability with vector bundle parameter</em></p>
<p><a href="https://zenodo.org/badge/latestdoi/169811826" rel="nofollow"><img src="https://camo.githubusercontent.com/2f71e195392d13f40f3450e47e2e8cde43d5679e120561df760ce4f2b59f8e9e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3136393831313832362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/169811826.svg" style="max-width:100%;"></a>
<a href="https://grassmann.crucialflow.com/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://grassmann.crucialflow.com/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://gitter.im/Grassmann-jl/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/6316ebac4340c05259f11a6888bc02b857043a3a2ffd7f108c94852b52894d91/68747470733a2f2f6261646765732e6769747465722e696d2f47726173736d616e6e2d6a6c2f636f6d6d756e6974792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Grassmann-jl/community.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/chakravala/AbstractTensors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/80679e969b619f792904be87a745773b2ea3fb411d477f5063dfea423bc6c6cf/68747470733a2f2f7472617669732d63692e6f72672f6368616b726176616c612f416273747261637454656e736f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chakravala/AbstractTensors.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/chakravala/abstracttensors-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46aa4d415fdde432a308f21146a7e154b6c18b3f83c1f98db8d231bd82444179/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7965793868756b3530356834623831753f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/yey8huk505h4b81u?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/chakravala/AbstractTensors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/551c004c30ea0fab909848a9db120b01a0e7ce457e2b4e5f562bb20a4f78c8fe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6368616b726176616c612f416273747261637454656e736f72732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/chakravala/AbstractTensors.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="https://codecov.io/github/chakravala/AbstractTensors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a82acc463b02b6cf84b6237d78d3d929027c3d5eb609ffab1287929c9e30f4f6/68747470733a2f2f636f6465636f762e696f2f6769746875622f6368616b726176616c612f416273747261637454656e736f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/chakravala/AbstractTensors.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>The <code>AbstractTensors</code> package is intended for universal interoperability of the abstract <code>TensorAlgebra</code> type system.
All <code>TensorAlgebra{V}</code> subtypes have type parameter <code>V</code>, used to store a <code>TensorBundle</code> value obtained from <a href="https://github.com/chakravala/DirectSum.jl">DirectSum.jl</a>.</p>
<p>For example, this is mainly used in <a href="https://github.com/chakravala/Grassmann.jl">Grassmann.jl</a> to define various <code>SubAlgebra</code>, <code>TensorGraded</code> and <code>TensorMixed</code> types, each with subtypes. Externalizing the abstract type helps extend the dispatch to other packages.
By itself, this package does not impose any specifications or structure on the <code>TensorAlgebra{V}</code> subtypes and elements, aside from requiring <code>V</code> to be a <code>Manifold</code>.
This means that different packages can create tensor types having a common underlying <code>TensorBundle</code> structure.</p>
<p>Additionally, <code>TupleVector</code> is provided as a light weight alternative to <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a>.</p>
<p>If the environment variable <code>STATICJL</code> is set, the <code>StaticArrays</code> package is depended upon.</p>
<h2><a id="user-content-interoperability" class="anchor" aria-hidden="true" href="#interoperability"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interoperability</h2>
<p>Since <code>TensorBundle</code> choices are fundamental to <code>TensorAlgebra</code> operations, the universal interoperability between <code>TensorAlgebra{V}</code> elements with different associated <code>TensorBundle</code> choices is naturally realized by applying the <code>union</code> morphism to operations.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function op(::TensorAlgebra{V},::TensorAlgebra{V}) where V
    # well defined operations if V is shared
end # but what if V ≠ W in the input types?

function op(a::TensorAlgebra{V},b::TensorAlgebra{W}) where {V,W}
    VW = V ∪ W        # VectorSpace type union
    op(VW(a),VW(b))   # makes call well-defined
end # this option is automatic with interop(a,b)

# alternatively for evaluation of forms, VW(a)(VW(b))
"><pre><span class="pl-k">function</span> <span class="pl-en">op</span>(<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{V}</span>,<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{V}</span>) <span class="pl-k">where</span> V
    <span class="pl-c"><span class="pl-c">#</span> well defined operations if V is shared</span>
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> but what if V ≠ W in the input types?</span>

<span class="pl-k">function</span> <span class="pl-en">op</span>(a<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{V}</span>,b<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{W}</span>) <span class="pl-k">where</span> {V,W}
    VW <span class="pl-k">=</span> V <span class="pl-k">∪</span> W        <span class="pl-c"><span class="pl-c">#</span> VectorSpace type union</span>
    <span class="pl-c1">op</span>(<span class="pl-c1">VW</span>(a),<span class="pl-c1">VW</span>(b))   <span class="pl-c"><span class="pl-c">#</span> makes call well-defined</span>
<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> this option is automatic with interop(a,b)</span>

<span class="pl-c"><span class="pl-c">#</span> alternatively for evaluation of forms, VW(a)(VW(b))</span></pre></div>
<p>Some of operations like <code>+,-,*,⊗,⊛,⊙,⊠,⨼,⨽,⋆</code> and postfix operators <code>⁻¹,ǂ,₊,₋,ˣ</code> for <code>TensorAlgebra</code> elements are shared across different packages, some of the interoperability is taken care of in this package.
Additionally, a universal unit volume element can be specified in terms of <code>LinearAlgebra.UniformScaling</code>, which is independent of <code>V</code> and has its interpretation only instantiated by the context of the <code>TensorAlgebra{V}</code> element being operated on.</p>
<p>Utility methods such as <code>scalar, involute, norm, norm2, unit, even, odd</code> are also defined.</p>
<h3><a id="user-content-example-with-a-new-subtype" class="anchor" aria-hidden="true" href="#example-with-a-new-subtype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example with a new subtype</h3>
<p>Suppose we are dealing with a new subtype in another project, such as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AbstractTensors, DirectSum
struct SpecialTensor{V} &lt;: TensorAlgebra{V} end
a = SpecialTensor{ℝ}()
b = SpecialTensor{ℝ'}()
"><pre><span class="pl-k">using</span> AbstractTensors, DirectSum
<span class="pl-k">struct</span> SpecialTensor{V} <span class="pl-k">&lt;:</span> <span class="pl-c1">TensorAlgebra{V}</span> <span class="pl-k">end</span>
a <span class="pl-k">=</span> <span class="pl-c1">SpecialTensor</span><span class="pl-c1">{ℝ}</span>()
b <span class="pl-k">=</span> <span class="pl-c1">SpecialTensor</span><span class="pl-c1">{ℝ'}</span>()</pre></div>
<p>To define additional specialized interoperability for further methods, it is necessary to define dispatch that catches well-defined operations for equal <code>TensorBundle</code> choices and a fallback method for interoperability, along with a <code>Manifold</code> morphism:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(W::Signature)(s::SpecialTensor{V}) where V = SpecialTensor{W}() # conversions
op(a::SpecialTensor{V},b::SpecialTensor{V}) where V = a # do some kind of operation
op(a::TensorAlgebra{V},b::TensorAlgebra{W}) where {V,W} = interop(op,a,b) # compat
"><pre>(W<span class="pl-k">::</span><span class="pl-c1">Signature</span>)(s<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{V}</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> <span class="pl-c1">SpecialTensor</span><span class="pl-c1">{W}</span>() <span class="pl-c"><span class="pl-c">#</span> conversions</span>
<span class="pl-en">op</span>(a<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{V}</span>,b<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{V}</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> a <span class="pl-c"><span class="pl-c">#</span> do some kind of operation</span>
<span class="pl-en">op</span>(a<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{V}</span>,b<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{W}</span>) <span class="pl-k">where</span> {V,W} <span class="pl-k">=</span> <span class="pl-c1">interop</span>(op,a,b) <span class="pl-c"><span class="pl-c">#</span> compat</span></pre></div>
<p>which should satisfy (using the <code>∪</code> operation as defined in <code>DirectSum</code>)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; op(a,b) |&gt; Manifold == Manifold(a) ∪ Manifold(b)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">op</span>(a,b) <span class="pl-k">|&gt;</span> Manifold <span class="pl-k">==</span> <span class="pl-c1">Manifold</span>(a) <span class="pl-k">∪</span> <span class="pl-c1">Manifold</span>(b)
<span class="pl-c1">true</span></pre></div>
<p>Thus, interoperability is simply a matter of defining one additional fallback method for the operation and also a new form <code>TensorBundle</code> compatibility morphism.</p>
<h4><a id="user-content-uniformscaling-pseudoscalar" class="anchor" aria-hidden="true" href="#uniformscaling-pseudoscalar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>UniformScaling pseudoscalar</h4>
<p>The universal interoperability of <code>LinearAlgebra.UniformScaling</code> as a pseudoscalar element which takes on the <code>TensorBundle</code> form of any other <code>TensorAlgebra</code> element is handled globally by defining the dispatch:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(W::Signature)(s::UniformScaling) = ones(ndims(W)) # interpret a unit pseudoscalar
op(a::TensorAlgebra{V},b::UniformScaling) where V = op(a,V(b)) # right pseudoscalar
op(a::UniformScaling,b::TensorAlgebra{V}) where V = op(V(a),b) # left pseudoscalar
"><pre>(W<span class="pl-k">::</span><span class="pl-c1">Signature</span>)(s<span class="pl-k">::</span><span class="pl-c1">UniformScaling</span>) <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">ndims</span>(W)) <span class="pl-c"><span class="pl-c">#</span> interpret a unit pseudoscalar</span>
<span class="pl-en">op</span>(a<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{V}</span>,b<span class="pl-k">::</span><span class="pl-c1">UniformScaling</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> <span class="pl-c1">op</span>(a,<span class="pl-c1">V</span>(b)) <span class="pl-c"><span class="pl-c">#</span> right pseudoscalar</span>
<span class="pl-en">op</span>(a<span class="pl-k">::</span><span class="pl-c1">UniformScaling</span>,b<span class="pl-k">::</span><span class="pl-c1">TensorAlgebra{V}</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> <span class="pl-c1">op</span>(<span class="pl-c1">V</span>(a),b) <span class="pl-c"><span class="pl-c">#</span> left pseudoscalar</span></pre></div>
<p>This enables the usage of <code>I</code> from <code>LinearAlgebra</code> as a universal pseudoscalar element.</p>
<h5><a id="user-content-tensor-evaluation" class="anchor" aria-hidden="true" href="#tensor-evaluation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tensor evaluation</h5>
<p>To support a generalized interface for <code>TensorAlgebra</code> element evaluation, a similar compatibility interface is constructible.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(a::SpecialTensor{V})(b::SpecialTensor{V}) where V = a # conversion of some form
(a::SpecialTensor{W})(b::SpecialTensor{V}) where {V,W} = interform(a,b) # compat
"><pre>(a<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{V}</span>)(b<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{V}</span>) <span class="pl-k">where</span> V <span class="pl-k">=</span> a <span class="pl-c"><span class="pl-c">#</span> conversion of some form</span>
(a<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{W}</span>)(b<span class="pl-k">::</span><span class="pl-c1">SpecialTensor{V}</span>) <span class="pl-k">where</span> {V,W} <span class="pl-k">=</span> <span class="pl-c1">interform</span>(a,b) <span class="pl-c"><span class="pl-c">#</span> compat</span></pre></div>
<p>which should satisfy (using the <code>∪</code> operation as defined in <code>DirectSum</code>)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; b(a) |&gt; Manifold == Manifold(a) ∪ Manifold(b)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">b</span>(a) <span class="pl-k">|&gt;</span> Manifold <span class="pl-k">==</span> <span class="pl-c1">Manifold</span>(a) <span class="pl-k">∪</span> <span class="pl-c1">Manifold</span>(b)
<span class="pl-c1">true</span></pre></div>
<p>The purpose of the <code>interop</code> and <code>interform</code> methods is to help unify the interoperability of <code>TensorAlgebra</code> elements.</p>
<h3><a id="user-content-deployed-applications" class="anchor" aria-hidden="true" href="#deployed-applications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deployed applications</h3>
<p>The key to making the whole interoperability work is that each <code>TensorAlgebra</code> subtype shares a <code>TensorBundle</code> parameter (with all <code>isbitstype</code> parameters), which contains all the info needed at compile time to make decisions about conversions. So other packages need only use the vector space information to decide on how to convert based on the implementation of a type. If external methods are needed, they can be loaded by <code>Requires</code> when making a separate package with <code>TensorAlgebra</code> interoperability.</p>
<h2><a id="user-content-tuplevector" class="anchor" aria-hidden="true" href="#tuplevector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TupleVector</h2>
<p><em>Statically sized tuple vectors for Julia</em></p>
<p><strong>TupleVector</strong> provides a framework for implementing statically sized tuple vectors
in Julia, using the abstract type <code>TupleVector{N,T} &lt;: AbstractVector{T}</code>.
Subtypes of <code>TupleVector</code> will provide fast implementations of common array and
linear algebra operations. Note that here "statically sized" means that the
size can be determined from the <em>type</em>, and "static" does <strong>not</strong> necessarily
imply <code>immutable</code>.</p>
<p>The package also provides some concrete static vector types: <code>Values</code> which may be used as-is (or else embedded in your own type).
Mutable versions <code>Variables</code> are also exported, as well
as <code>FixedVector</code> for annotating standard <code>Vector</code>s with static size information.</p>
<h3><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h3>
<p>Add <em>AbstractTensors</em> from the <a href="https://docs.julialang.org/en/latest/stdlib/Pkg/#Getting-Started-1" rel="nofollow">Pkg REPL</a>, i.e., <code>pkg&gt; add AbstractTensors</code>. Then:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AbstractTensors

# Create Values using various forms, using constructors, functions or macros
v1 = Values(1, 2, 3)
v1.v === (1, 2, 3) # Values uses a tuple for internal storage
v2 = Values{3,Float64}(1, 2, 3) # length 3, eltype Float64
v5 = zeros(Values{3}) # defaults to Float64
v7 = Values{3}([1, 2, 3]) # Array conversions must specify size

# Can get size() from instance or type
size(v1) == (3,)
size(typeof(v1)) == (3,)

# Supports all the common operations of AbstractVector
v7 = v1 + v2
v8 = sin.(v2)

# Indexing can also be done using static vectors of integers
v1[1] === 1
v1[:] === v1
typeof(v1[[1,2,3]]) &lt;: Vector # Can't determine size from the type of [1,2,3]
"><pre><span class="pl-k">using</span> AbstractTensors

<span class="pl-c"><span class="pl-c">#</span> Create Values using various forms, using constructors, functions or macros</span>
v1 <span class="pl-k">=</span> <span class="pl-c1">Values</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
v1<span class="pl-k">.</span>v <span class="pl-k">===</span> (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> Values uses a tuple for internal storage</span>
v2 <span class="pl-k">=</span> <span class="pl-c1">Values</span><span class="pl-c1">{3,Float64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> length 3, eltype Float64</span>
v5 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Values{<span class="pl-c1">3</span>}) <span class="pl-c"><span class="pl-c">#</span> defaults to Float64</span>
v7 <span class="pl-k">=</span> <span class="pl-c1">Values</span><span class="pl-c1">{3}</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span> Array conversions must specify size</span>

<span class="pl-c"><span class="pl-c">#</span> Can get size() from instance or type</span>
<span class="pl-c1">size</span>(v1) <span class="pl-k">==</span> (<span class="pl-c1">3</span>,)
<span class="pl-c1">size</span>(<span class="pl-c1">typeof</span>(v1)) <span class="pl-k">==</span> (<span class="pl-c1">3</span>,)

<span class="pl-c"><span class="pl-c">#</span> Supports all the common operations of AbstractVector</span>
v7 <span class="pl-k">=</span> v1 <span class="pl-k">+</span> v2
v8 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(v2)

<span class="pl-c"><span class="pl-c">#</span> Indexing can also be done using static vectors of integers</span>
v1[<span class="pl-c1">1</span>] <span class="pl-k">===</span> <span class="pl-c1">1</span>
v1[:] <span class="pl-k">===</span> v1
<span class="pl-c1">typeof</span>(v1[[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector</span> <span class="pl-c"><span class="pl-c">#</span> Can't determine size from the type of [1,2,3]</span></pre></div>
<h3><a id="user-content-approach" class="anchor" aria-hidden="true" href="#approach"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Approach</h3>
<p>The package provides a range of different useful built-in <code>TupleVector</code> types,
which include mutable and immutable vectors based upon tuples, vectors based upon
structs, and wrappers of <code>Vector</code>. There is a relatively simple interface for
creating your own, custom <code>TupleVector</code> types, too.</p>
<p>This package also provides methods for a wide range of <code>AbstractVector</code> functions,
specialized for (potentially immutable) <code>TupleVector</code>s. Many of Julia's
built-in method definitions inherently assume mutability, and further
performance optimizations may be made when the size of the vector is known to the
compiler. One example of this is by loop unrolling, which has a substantial
effect on small arrays and tends to automatically trigger LLVM's SIMD
optimizations. In combination with intelligent fallbacks to
the methods in Base, we seek to provide a comprehensive support for statically
sized vectors, large or small, that hopefully "just works".</p>
<p><code>TupleVector</code> is directly inspired from <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a>.</p>
</article></div>