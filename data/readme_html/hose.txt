<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hosejl" class="anchor" aria-hidden="true" href="#hosejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hose.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/FNj/Hose.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/753475383b387d518de81c73123090b71a2ea1704b85c6edd423a0f859fc4324/68747470733a2f2f7472617669732d63692e6f72672f464e6a2f486f73652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FNj/Hose.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Hose.jl</strong> is for the situations where pipe is just not flexible enough.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    @hose(expression)"><pre>    <span class="pl-c1">@hose</span>(expression)</pre></div>
<p dir="auto">The <code>@hose</code> macro processes its argument so that you pipe the left hand side (LHS) into functions of several arguments, macros, blocks, just index the LHS etc. The placeholder symbol for the LHS on the RHS is the underscore (<code>_</code>).</p>
<p dir="auto">Examples:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    @hose a |&gt; b(x, _) # produces b(x, a)
    @hose a |&gt; _[b] # produces a[b]
    @hose a |&gt; @testmacro _ b # equivalent of @testmacro(a, b)"><pre>    <span class="pl-c1">@hose</span> a <span class="pl-k">|&gt;</span> <span class="pl-c1">b</span>(x, _) <span class="pl-c"><span class="pl-c">#</span> produces b(x, a)</span>
    <span class="pl-c1">@hose</span> a <span class="pl-k">|&gt;</span> _[b] <span class="pl-c"><span class="pl-c">#</span> produces a[b]</span>
    <span class="pl-c1">@hose</span> a <span class="pl-k">|&gt;</span> <span class="pl-c1">@testmacro</span> _ b <span class="pl-c"><span class="pl-c">#</span> equivalent of @testmacro(a, b)</span></pre></div>
<p dir="auto">Also behaves like <a href="https://github.com/MikeInnes/Lazy.jl">Lazy.jl</a> <code>@&gt;</code> macro:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    @hose a |&gt; b(x) # produces b(a, x)
    @hose a |&gt; @testmacro # produces equivalent of @testmacro(a)"><pre>    <span class="pl-c1">@hose</span> a <span class="pl-k">|&gt;</span> <span class="pl-c1">b</span>(x) <span class="pl-c"><span class="pl-c">#</span> produces b(a, x)</span>
    <span class="pl-c1">@hose</span> a <span class="pl-k">|&gt;</span> <span class="pl-c1">@testmacro</span> <span class="pl-c"><span class="pl-c">#</span> produces equivalent of @testmacro(a)</span></pre></div>
<p dir="auto">Standard piping works as well. For other examples see <code>test/runtests.jl</code>.</p>
<p dir="auto">Kudos to <a href="https://github.com/oxinabox/Pipe.jl">Pipe.jl</a> which I basically shamelessly forked for creating this package.</p>
</article></div>