<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libxcjl" class="anchor" aria-hidden="true" href="#libxcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Libxc.jl</h1>
<table>
<thead>
<tr>
<th align="left"><strong>Build Status</strong></th>
<th align="left"><strong>License</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMolSim/Libxc.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaMolSim/Libxc.jl/workflows/CI/badge.svg" alt="" style="max-width:100%;"></a> <a href="https://coveralls.io/github/JuliaMolSim/Libxc.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/31d8b1e89117e83d3ca234199d748609d4835d141944325b8d4725d2d934fff1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69614d6f6c53696d2f4c696278632e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="" data-canonical-src="https://coveralls.io/repos/JuliaMolSim/Libxc.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></td>
<td align="left"><a href="https://github.com/JuliaMolSim/Libxc.jl/blob/master/LICENSE"><img src="https://camo.githubusercontent.com/21f91bc0f6da95c9c464dc2ca6966820fe9b54e0f80ad81ee48bcfef486e3528/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4a756c69614d6f6c53696d2f4c696278632e6a6c2e7376673f6d61784167653d32353932303030" alt="" data-canonical-src="https://img.shields.io/github/license/JuliaMolSim/Libxc.jl.svg?maxAge=2592000" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>This package provides Julia bindings to the
<a href="https://tddft.org/programs/libxc/" rel="nofollow">libxc</a> library
for common exchange-correlation functionals in density-functional theory.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Install the library from Julia as usual:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Libxc&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Libxc<span class="pl-pds">"</span></span>)</pre></div>
<p>and then for example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Libxc

rho = [0.1, 0.2, 0.3, 0.4, 0.5]
sigma = [0.2, 0.3, 0.4, 0.5, 0.6]

# LDA exchange
lda_x = Functional(:lda_x)
result = evaluate(lda_x, rho=rho)
@show result
# result = (vrho = [-0.457078 -0.575882 -0.659220 -0.725566 -0.781592],
#           zk = [-0.342808, -0.43191, -0.49441, -0.544174, -0.586194])

# GGA exchange
gga_x = Functional(:gga_x_pbe, n_spin=1)
result = evaluate(gga_x, rho=rho, sigma=sigma, derivative=0)
@show result
# result = (zk = [-0.452597, -0.478877, -0.520674, -0.561427, -0.598661],)
"><pre><span class="pl-k">using</span> Libxc

rho <span class="pl-k">=</span> [<span class="pl-c1">0.1</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.5</span>]
sigma <span class="pl-k">=</span> [<span class="pl-c1">0.2</span>, <span class="pl-c1">0.3</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.6</span>]

<span class="pl-c"><span class="pl-c">#</span> LDA exchange</span>
lda_x <span class="pl-k">=</span> <span class="pl-c1">Functional</span>(<span class="pl-c1">:lda_x</span>)
result <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(lda_x, rho<span class="pl-k">=</span>rho)
<span class="pl-c1">@show</span> result
<span class="pl-c"><span class="pl-c">#</span> result = (vrho = [-0.457078 -0.575882 -0.659220 -0.725566 -0.781592],</span>
<span class="pl-c"><span class="pl-c">#</span>           zk = [-0.342808, -0.43191, -0.49441, -0.544174, -0.586194])</span>

<span class="pl-c"><span class="pl-c">#</span> GGA exchange</span>
gga_x <span class="pl-k">=</span> <span class="pl-c1">Functional</span>(<span class="pl-c1">:gga_x_pbe</span>, n_spin<span class="pl-k">=</span><span class="pl-c1">1</span>)
result <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(gga_x, rho<span class="pl-k">=</span>rho, sigma<span class="pl-k">=</span>sigma, derivative<span class="pl-k">=</span><span class="pl-c1">0</span>)
<span class="pl-c1">@show</span> result
<span class="pl-c"><span class="pl-c">#</span> result = (zk = [-0.452597, -0.478877, -0.520674, -0.561427, -0.598661],)</span></pre></div>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>Full support for evaluating LDA, GGA and meta-GGA functionals
as shown above. Hybrid or range-separated hybrids and VV10-type functionals
export parameters required in the host programs as properties of the <code>Functional</code>
Julia object. For example</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="b3lyp = Functional(:hyb_gga_xc_b3lyp)
@show b3lyp.exx_coefficient
# b3lyp.exx_coefficient = 0.2
"><pre>b3lyp <span class="pl-k">=</span> <span class="pl-c1">Functional</span>(<span class="pl-c1">:hyb_gga_xc_b3lyp</span>)
<span class="pl-c1">@show</span> b3lyp<span class="pl-k">.</span>exx_coefficient
<span class="pl-c"><span class="pl-c">#</span> b3lyp.exx_coefficient = 0.2</span></pre></div>
<p>See also the <a href="example/xc-info.jl">xc-info.jl</a> example (modelled after the
<code>xc-info</code> executable shipped with libxc).</p>
<p>Some advanced Libxc features (custom functional combinations, setting external
parameters etc.) are not yet supported in the Julia wrapper. If you need those
you can, however, talk to libxc directly using the low-level C-like interface,
see the file <a href="src/gen/libxc.jl">src/gen/libxc.jl</a>.
This file is automatically generated from the libxc source code and
offers all functions of the public interface as <code>ccall</code> wrappers.</p>
</article></div>