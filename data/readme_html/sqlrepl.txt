<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sqlrepljl" class="anchor" aria-hidden="true" href="#sqlrepljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SQLREPL.jl</h1>
<p dir="auto">A Julia REPL mode for PostgreSQL powered by
<a href="https://github.com/MasonProtter/ReplMaker.jl">ReplMaker.jl</a>,
<a href="https://github.com/invenia/LibPQ.jl">LibPQ.jl</a> and
<a href="https://github.com/JuliaComputing/SQLStrings.jl">SQLStrings.jl</a>.</p>
<h2 dir="auto"><a id="user-content-tutorial" class="anchor" aria-hidden="true" href="#tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorial</h2>
<p dir="auto">Install the package with Julia's Pkg mode:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add SQLREPL"><pre class="notranslate"><code>pkg&gt; add SQLREPL
</code></pre></div>
<p dir="auto">To connect the REPL mode, you'll need a connection string for your Postgres
database. You can then use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SQLREPL
julia&gt; SQLREPL.connect(&quot;your_connection_string&quot;)
REPL mode SQL initialized. Press ) to enter and backspace to exit.
&quot;Prompt(\&quot;SQL&gt; \&quot;,...)&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SQLREPL
julia<span class="pl-k">&gt;</span> SQLREPL<span class="pl-k">.</span><span class="pl-c1">connect</span>(<span class="pl-s"><span class="pl-pds">"</span>your_connection_string<span class="pl-pds">"</span></span>)
REPL mode SQL initialized. Press ) to enter and backspace to exit.
<span class="pl-s"><span class="pl-pds">"</span>Prompt(<span class="pl-cce">\"</span>SQL&gt; <span class="pl-cce">\"</span>,...)<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Now press <code>)</code> to enter the REPL mode. You can create tables and do some simple
data insertion and extraction with standard SQL syntax:</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQL&gt; create table foo (x text, y int);

SQL&gt; insert into foo values ('hi', 1);

SQL&gt; insert into foo values ('ho ho', 2);

SQL&gt; select * from foo
2×2 DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   1 │ hi            1
   2 │ ho ho         2"><pre>SQL<span class="pl-k">&gt;</span> create table foo (x <span class="pl-k">text</span>, y <span class="pl-k">int</span>);

SQL<span class="pl-k">&gt;</span> <span class="pl-k">insert into</span> foo <span class="pl-k">values</span> (<span class="pl-s"><span class="pl-pds">'</span>hi<span class="pl-pds">'</span></span>, <span class="pl-c1">1</span>);

SQL<span class="pl-k">&gt;</span> <span class="pl-k">insert into</span> foo <span class="pl-k">values</span> (<span class="pl-s"><span class="pl-pds">'</span>ho ho<span class="pl-pds">'</span></span>, <span class="pl-c1">2</span>);

SQL<span class="pl-k">&gt;</span> <span class="pl-k">select</span> <span class="pl-k">*</span> <span class="pl-k">from</span> foo
<span class="pl-c1">2</span>×<span class="pl-c1">2</span> DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   <span class="pl-c1">1</span> │ hi            <span class="pl-c1">1</span>
   <span class="pl-c1">2</span> │ ho ho         <span class="pl-c1">2</span></pre></div>
<p dir="auto">Thanks to SQLStrings.jl, you can also interpolate local Julia values into your
expression. Let's set <code>min_y</code> in the Julia <code>Main</code> module:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; min_y = 2"><pre>julia<span class="pl-k">&gt;</span> min_y <span class="pl-k">=</span> <span class="pl-c1">2</span></pre></div>
<p dir="auto">And we can now use <code>$min_y</code> within our queries:</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQL&gt; select * from foo where y &gt;= $min_y
1×2 DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   1 │ ho ho         2"><pre>SQL<span class="pl-k">&gt;</span> <span class="pl-k">select</span> <span class="pl-k">*</span> <span class="pl-k">from</span> foo <span class="pl-k">where</span> y <span class="pl-k">&gt;=</span> $min_y
<span class="pl-c1">1</span>×<span class="pl-c1">2</span> DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   <span class="pl-c1">1</span> │ ho ho         <span class="pl-c1">2</span></pre></div>
<p dir="auto">For more complex data manipulation, the REPL mode can be combined with
programmatic access via the normal Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LibPQ, SQLStrings

julia&gt; conn = LibPQ.Connection(&quot;&quot;);

julia&gt; for y=1:10
           msg = &quot;Hi $y&quot;
           LibPQ.execute(conn, sql`insert into foo values ($msg, $y)`)
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LibPQ, SQLStrings

julia<span class="pl-k">&gt;</span> conn <span class="pl-k">=</span> LibPQ<span class="pl-k">.</span><span class="pl-c1">Connection</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> y<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
           msg <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Hi <span class="pl-v">$y</span><span class="pl-pds">"</span></span>
           LibPQ<span class="pl-k">.</span><span class="pl-c1">execute</span>(conn, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">sql</span>`</span>insert into foo values ($msg, $y)<span class="pl-pds">`</span></span>)
       <span class="pl-k">end</span></pre></div>
<p dir="auto">thence</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQL&gt; select * from foo
12×2 DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   1 │ hi            1
   2 │ ho ho         2
   3 │ Hi 1          1
   4 │ Hi 2          2
   5 │ Hi 3          3
   6 │ Hi 4          4
   7 │ Hi 5          5
   8 │ Hi 6          6
   9 │ Hi 7          7
  10 │ Hi 8          8
  11 │ Hi 9          9
  12 │ Hi 10        10"><pre>SQL<span class="pl-k">&gt;</span> <span class="pl-k">select</span> <span class="pl-k">*</span> <span class="pl-k">from</span> foo
<span class="pl-c1">12</span>×<span class="pl-c1">2</span> DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   <span class="pl-c1">1</span> │ hi            <span class="pl-c1">1</span>
   <span class="pl-c1">2</span> │ ho ho         <span class="pl-c1">2</span>
   <span class="pl-c1">3</span> │ Hi <span class="pl-c1">1</span>          <span class="pl-c1">1</span>
   <span class="pl-c1">4</span> │ Hi <span class="pl-c1">2</span>          <span class="pl-c1">2</span>
   <span class="pl-c1">5</span> │ Hi <span class="pl-c1">3</span>          <span class="pl-c1">3</span>
   <span class="pl-c1">6</span> │ Hi <span class="pl-c1">4</span>          <span class="pl-c1">4</span>
   <span class="pl-c1">7</span> │ Hi <span class="pl-c1">5</span>          <span class="pl-c1">5</span>
   <span class="pl-c1">8</span> │ Hi <span class="pl-c1">6</span>          <span class="pl-c1">6</span>
   <span class="pl-c1">9</span> │ Hi <span class="pl-c1">7</span>          <span class="pl-c1">7</span>
  <span class="pl-c1">10</span> │ Hi <span class="pl-c1">8</span>          <span class="pl-c1">8</span>
  <span class="pl-c1">11</span> │ Hi <span class="pl-c1">9</span>          <span class="pl-c1">9</span>
  <span class="pl-c1">12</span> │ Hi <span class="pl-c1">10</span>        <span class="pl-c1">10</span></pre></div>
<h2 dir="auto"><a id="user-content-how-to" class="anchor" aria-hidden="true" href="#how-to"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How To</h2>
<h3 dir="auto"><a id="user-content-editing-multi-line-statements" class="anchor" aria-hidden="true" href="#editing-multi-line-statements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Editing multi-line statements</h3>
<p dir="auto">To edit multi-line SQL statements easily, surround your statement with brackets:</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQL&gt; (select * from foo
         where y &gt; 5
         and   y &lt;= 7)
2×2 DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   1 │ Hi 6          6
   2 │ Hi 7          7"><pre>SQL<span class="pl-k">&gt;</span> (<span class="pl-k">select</span> <span class="pl-k">*</span> <span class="pl-k">from</span> foo
         <span class="pl-k">where</span> y <span class="pl-k">&gt;</span> <span class="pl-c1">5</span>
         <span class="pl-k">and</span>   y <span class="pl-k">&lt;=</span> <span class="pl-c1">7</span>)
<span class="pl-c1">2</span>×<span class="pl-c1">2</span> DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   <span class="pl-c1">1</span> │ Hi <span class="pl-c1">6</span>          <span class="pl-c1">6</span>
   <span class="pl-c1">2</span> │ Hi <span class="pl-c1">7</span>          <span class="pl-c1">7</span></pre></div>
<p dir="auto">Alternatively, to insert a line, the usual key binding <code>ALT+Enter</code> can always be used.</p>
<h3 dir="auto"><a id="user-content-accessing-the-result-of-the-previous-query" class="anchor" aria-hidden="true" href="#accessing-the-result-of-the-previous-query"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Accessing the result of the previous query</h3>
<p dir="auto">The resulting <code>DataFrame</code> is available in the <code>ans</code> variable back in the Julia
REPL. Starting with</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQL&gt; (select * from foo
         where y &gt; 5
         and   y &lt;= 7);"><pre>SQL<span class="pl-k">&gt;</span> (<span class="pl-k">select</span> <span class="pl-k">*</span> <span class="pl-k">from</span> foo
         <span class="pl-k">where</span> y <span class="pl-k">&gt;</span> <span class="pl-c1">5</span>
         <span class="pl-k">and</span>   y <span class="pl-k">&lt;=</span> <span class="pl-c1">7</span>);</pre></div>
<p dir="auto">we then have</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ans
2×2 DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   1 │ Hi 6          6
   2 │ Hi 7          7"><pre>julia<span class="pl-k">&gt;</span> ans
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ x        y      
     │ String?  Int32? 
─────┼─────────────────
   <span class="pl-c1">1</span> │ Hi <span class="pl-c1">6</span>          <span class="pl-c1">6</span>
   <span class="pl-c1">2</span> │ Hi <span class="pl-c1">7</span>          <span class="pl-c1">7</span></pre></div>
<h3 dir="auto"><a id="user-content-inspecting-table-schema" class="anchor" aria-hidden="true" href="#inspecting-table-schema"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inspecting table schema</h3>
<p dir="auto">To inspect table schema you can use the <code>psql</code>-like meta-command <code>\d</code>:</p>
<div class="highlight highlight-source-sql notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="SQL&gt; \d foo
2×5 DataFrame
 Row │ column_name  data_type  character_maximum_length  column_default  is_nullable 
     │ String?      String?    Union{Missing, Int32}     String?         String?     
─────┼───────────────────────────────────────────────────────────────────────────────
   1 │ x            text                        missing  missing         YES
   2 │ y            integer                     missing  missing         YES"><pre>SQL<span class="pl-k">&gt;</span> \d foo
<span class="pl-c1">2</span>×<span class="pl-c1">5</span> DataFrame
 Row │ column_name  data_type  character_maximum_length  column_default  is_nullable 
     │ String?      String?    <span class="pl-k">Union</span>{Missing, Int32}     String?         String?     
─────┼───────────────────────────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │ x            <span class="pl-k">text</span>                        missing  missing         YES
   <span class="pl-c1">2</span> │ y            <span class="pl-k">integer</span>                     missing  missing         YES</pre></div>
<p dir="auto">In the future we might implement more of the
<a href="https://www.postgresql.org/docs/14/app-psql.html" rel="nofollow"><code>psql</code> meta-commands</a>.</p>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<p dir="auto"><a href="https://github.com/c42f/SQLREPL.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/c42f/SQLREPL.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">This package arose from <a href="https://discourse.julialang.org/t/easiest-and-most-complete-package-for-postgresql-right-now-feb-2022/75920" rel="nofollow">a discussion</a> on Julia discourse.</p>
</article></div>