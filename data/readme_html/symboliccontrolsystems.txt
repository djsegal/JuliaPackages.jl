<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-symboliccontrolsystems" class="anchor" aria-hidden="true" href="#symboliccontrolsystems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SymbolicControlSystems</h1>
<p>Utilities for</p>
<ul>
<li>Working with <a href="https://github.com/JuliaControl/ControlSystems.jl/">ControlSystems.jl</a> types with SymPy.jl symbols as coefficients.</li>
<li>Generation of C-code for filtering with LTI systems.</li>
</ul>
<p>This package exports the names <code>s,z</code> for the Laplace and Z-transform variables. These can be used to build symbolic transfer functions.</p>
<h2><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ControlSystems, SymbolicControlSystems

julia&gt; @vars w T d # Define (SymPy) symbolic variables
(w, T, d)

julia&gt; h = 0.01;

julia&gt; G = tf([w^2], [1, 2*d*w, w^2]) * tf(1, [T, 1])
TransferFunction{Continuous, SisoRational{Sym}}
                      w^2
-----------------------------------------------
T*s^3 + 2*T*d*w + 1*s^2 + T*w^2 + 2*d*w*s + w^2

Continuous-time transfer function model

julia&gt; Gd = tustin(G, h); # Discretize

julia&gt; Sym(G) # Convert a TransferFunction to symbolic expression
                        2                      
                       w                       
───────────────────────────────────────────────
   3    2                   ⎛   2        ⎞    2
T⋅s  + s ⋅(2⋅T⋅d⋅w + 1) + s⋅⎝T⋅w  + 2⋅d⋅w⎠ + w 

julia&gt; ex = w^2 / (s^2 + 2*d*w*s + w^2) # Define symbolic expression
         2       
        w        
─────────────────
           2    2
2⋅d⋅s⋅w + s  + w 

julia&gt; tf(ex) # Convert symbolic expression to TransferFunction
TransferFunction{Continuous, SisoRational{Sym}}
         w^2
---------------------
1*s^2 + 2*d*w*s + w^2

Continuous-time transfer function model

julia&gt; # Replace symbols with numbers
       T_, d_, w_ = 0.03, 0.2, 2.0 # Define system parameters
(0.03, 0.2, 2.0)

julia&gt; Gd_  = sym2num(Gd, h, Pair.((T, d, w), (T_, d_, w_))...)
TransferFunction{Discrete{Float64}, SisoRational{Float64}}
1.4227382019434605e-5*z^3 + 4.2682146058303814e-5*z^2 + 4.2682146058303814e-5*z + 1.4227382019434605e-5
-------------------------------------------------------------------------------------------------------
              1.0*z^3 - 2.705920013658287*z^2 + 2.414628594192383*z - 0.7085947614779404

Sample Time: 0.01 (seconds)
Discrete-time transfer function model
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ControlSystems, SymbolicControlSystems

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@vars</span> w T d <span class="pl-c"><span class="pl-c">#</span> Define (SymPy) symbolic variables</span>
(w, T, d)

julia<span class="pl-k">&gt;</span> h <span class="pl-k">=</span> <span class="pl-c1">0.01</span>;

julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">tf</span>([w<span class="pl-k">^</span><span class="pl-c1">2</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">*</span>w, w<span class="pl-k">^</span><span class="pl-c1">2</span>]) <span class="pl-k">*</span> <span class="pl-c1">tf</span>(<span class="pl-c1">1</span>, [T, <span class="pl-c1">1</span>])
TransferFunction{Continuous, SisoRational{Sym}}
                      w<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">-----------------------------------------------</span>
T<span class="pl-k">*</span>s<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>T<span class="pl-k">*</span>d<span class="pl-k">*</span>w <span class="pl-k">+</span> <span class="pl-c1">1</span><span class="pl-k">*</span>s<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> T<span class="pl-k">*</span>w<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">*</span>w<span class="pl-k">*</span>s <span class="pl-k">+</span> w<span class="pl-k">^</span><span class="pl-c1">2</span>

Continuous<span class="pl-k">-</span>time transfer <span class="pl-k">function</span> model

julia<span class="pl-k">&gt;</span> Gd <span class="pl-k">=</span> <span class="pl-c1">tustin</span>(G, h); <span class="pl-c"><span class="pl-c">#</span> Discretize</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Sym</span>(G) <span class="pl-c"><span class="pl-c">#</span> Convert a TransferFunction to symbolic expression</span>
                        <span class="pl-c1">2</span>                      
                       w                       
───────────────────────────────────────────────
   <span class="pl-c1">3</span>    <span class="pl-c1">2</span>                   ⎛   <span class="pl-c1">2</span>        ⎞    <span class="pl-c1">2</span>
T<span class="pl-k">⋅</span>s  <span class="pl-k">+</span> s <span class="pl-k">⋅</span>(<span class="pl-c1">2</span><span class="pl-k">⋅</span>T<span class="pl-k">⋅</span>d<span class="pl-k">⋅</span>w <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">+</span> s<span class="pl-k">⋅</span>⎝T<span class="pl-k">⋅</span>w  <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">⋅</span>d<span class="pl-k">⋅</span>w⎠ <span class="pl-k">+</span> w 

julia<span class="pl-k">&gt;</span> ex <span class="pl-k">=</span> w<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> (s<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">*</span>w<span class="pl-k">*</span>s <span class="pl-k">+</span> w<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Define symbolic expression</span>
         <span class="pl-c1">2</span>       
        w        
─────────────────
           <span class="pl-c1">2</span>    <span class="pl-c1">2</span>
<span class="pl-c1">2</span><span class="pl-k">⋅</span>d<span class="pl-k">⋅</span>s<span class="pl-k">⋅</span>w <span class="pl-k">+</span> s  <span class="pl-k">+</span> w 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tf</span>(ex) <span class="pl-c"><span class="pl-c">#</span> Convert symbolic expression to TransferFunction</span>
TransferFunction{Continuous, SisoRational{Sym}}
         w<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">---------------------</span>
<span class="pl-c1">1</span><span class="pl-k">*</span>s<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">*</span>w<span class="pl-k">*</span>s <span class="pl-k">+</span> w<span class="pl-k">^</span><span class="pl-c1">2</span>

Continuous<span class="pl-k">-</span>time transfer <span class="pl-k">function</span> model

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Replace symbols with numbers</span>
       T_, d_, w_ <span class="pl-k">=</span> <span class="pl-c1">0.03</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">2.0</span> <span class="pl-c"><span class="pl-c">#</span> Define system parameters</span>
(<span class="pl-c1">0.03</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">2.0</span>)

julia<span class="pl-k">&gt;</span> Gd_  <span class="pl-k">=</span> <span class="pl-c1">sym2num</span>(Gd, h, <span class="pl-c1">Pair</span>.((T, d, w), (T_, d_, w_))<span class="pl-k">...</span>)
TransferFunction{Discrete{Float64}, SisoRational{Float64}}
<span class="pl-c1">1.4227382019434605e-5</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4.2682146058303814e-5</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">4.2682146058303814e-5</span><span class="pl-k">*</span>z <span class="pl-k">+</span> <span class="pl-c1">1.4227382019434605e-5</span>
<span class="pl-k">-------------------------------------------------------------------------------------------------------</span>
              <span class="pl-c1">1.0</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> <span class="pl-c1">2.705920013658287</span><span class="pl-k">*</span>z<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2.414628594192383</span><span class="pl-k">*</span>z <span class="pl-k">-</span> <span class="pl-c1">0.7085947614779404</span>

Sample Time<span class="pl-k">:</span> <span class="pl-c1">0.01</span> (seconds)
Discrete<span class="pl-k">-</span>time transfer <span class="pl-k">function</span> model</pre></div>
<p>Get a Latex-string</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; latextf(G)
&quot;\$\\dfrac{1.0w^2}{0.003s^3 + s^2(0.006dw + 1.0) + s(2.0dw + 0.003w^2) + 1.0w^2}\$&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">latextf</span>(G)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$\\</span>dfrac{1.0w^2}{0.003s^3 + s^2(0.006dw + 1.0) + s(2.0dw + 0.003w^2) + 1.0w^2}<span class="pl-cce">\$</span><span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-code-generation" class="anchor" aria-hidden="true" href="#code-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Code generation</h2>
<p>The function <code>code = SymbolicControlSystems.ccode(G::LTISystem)</code> returns a string with C-code for filtering of a signal through the linear system <code>G</code>. All symbolic variables present in <code>G</code> will be expected as inputs to the generated function. The transfer-function state is handled by the C concept of <code>static</code> variables, i.e., a variable that remembers it's value since the last function invocation. The signature of the generated function <code>transfer_function</code> expects all input arguments in alphabetical order, except for the input <code>u</code> which always comes first.</p>
<p>A usage example follows</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ControlSystems, SymbolicControlSystems

@vars w T d # Define symbolic variables
h        = 0.01
G        = tf([w^2], [1, 2*d*w, w^2]) * tf(1, [T, 1])
Gd       = tustin(G, h) # Discretize
code     = SymbolicControlSystems.ccode(Gd, cse=true)
path     = mktempdir()
filename = joinpath(path, &quot;code.c&quot;)
outname  = joinpath(path, &quot;test.so&quot;)
write(joinpath(path, filename), code)
run(`gcc $filename -lm -shared -o $outname`)

## Test that the C-code generates the same output as lsim in Julia

function c_lsim(u, T, d, w)
    Libc.Libdl.dlopen(outname) do lib
        fn = Libc.Libdl.dlsym(lib, :transfer_function)
        map(u) do u
            @ccall $(fn)(u::Float64, T::Float64, d::Float64, w::Float64)::Float64
        end
    end
end

u    = randn(100); # Random input signal 
T_, d_, w_ = 0.03, 0.2, 2.0 # Define system parameters
y    = c_lsim( u,  T_,  d_,  w_); # Filter u through the C-function filter
Gd_  = sym2num(Gd, h, Pair.((T, d, w), (T_, d_, w_))...) # Replace symbols with numeric constants
y_,_ = lsim(Gd_, u); # Filter using Julia
@test norm(y-y_)/norm(y_) &lt; 1e-10
plot([u y y_], lab=[&quot;u&quot; &quot;y c-code&quot; &quot;y julia&quot;]) |&gt; display
"><pre><span class="pl-k">using</span> ControlSystems, SymbolicControlSystems

<span class="pl-c1">@vars</span> w T d <span class="pl-c"><span class="pl-c">#</span> Define symbolic variables</span>
h        <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
G        <span class="pl-k">=</span> <span class="pl-c1">tf</span>([w<span class="pl-k">^</span><span class="pl-c1">2</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">*</span>d<span class="pl-k">*</span>w, w<span class="pl-k">^</span><span class="pl-c1">2</span>]) <span class="pl-k">*</span> <span class="pl-c1">tf</span>(<span class="pl-c1">1</span>, [T, <span class="pl-c1">1</span>])
Gd       <span class="pl-k">=</span> <span class="pl-c1">tustin</span>(G, h) <span class="pl-c"><span class="pl-c">#</span> Discretize</span>
code     <span class="pl-k">=</span> SymbolicControlSystems<span class="pl-k">.</span><span class="pl-c1">ccode</span>(Gd, cse<span class="pl-k">=</span><span class="pl-c1">true</span>)
path     <span class="pl-k">=</span> <span class="pl-c1">mktempdir</span>()
filename <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(path, <span class="pl-s"><span class="pl-pds">"</span>code.c<span class="pl-pds">"</span></span>)
outname  <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(path, <span class="pl-s"><span class="pl-pds">"</span>test.so<span class="pl-pds">"</span></span>)
<span class="pl-c1">write</span>(<span class="pl-c1">joinpath</span>(path, filename), code)
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>gcc $filename -lm -shared -o $outname<span class="pl-pds">`</span></span>)

<span class="pl-c"><span class="pl-c">#</span># Test that the C-code generates the same output as lsim in Julia</span>

<span class="pl-k">function</span> <span class="pl-en">c_lsim</span>(u, T, d, w)
    Libc<span class="pl-k">.</span>Libdl<span class="pl-k">.</span><span class="pl-c1">dlopen</span>(outname) <span class="pl-k">do</span> lib
        fn <span class="pl-k">=</span> Libc<span class="pl-k">.</span>Libdl<span class="pl-k">.</span><span class="pl-c1">dlsym</span>(lib, <span class="pl-c1">:transfer_function</span>)
        <span class="pl-c1">map</span>(u) <span class="pl-k">do</span> u
            <span class="pl-c1">@ccall</span> <span class="pl-k">$</span>(fn)(u<span class="pl-k">::</span><span class="pl-c1">Float64</span>, T<span class="pl-k">::</span><span class="pl-c1">Float64</span>, d<span class="pl-k">::</span><span class="pl-c1">Float64</span>, w<span class="pl-k">::</span><span class="pl-c1">Float64</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

u    <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> Random input signal </span>
T_, d_, w_ <span class="pl-k">=</span> <span class="pl-c1">0.03</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">2.0</span> <span class="pl-c"><span class="pl-c">#</span> Define system parameters</span>
y    <span class="pl-k">=</span> <span class="pl-c1">c_lsim</span>( u,  T_,  d_,  w_); <span class="pl-c"><span class="pl-c">#</span> Filter u through the C-function filter</span>
Gd_  <span class="pl-k">=</span> <span class="pl-c1">sym2num</span>(Gd, h, <span class="pl-c1">Pair</span>.((T, d, w), (T_, d_, w_))<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> Replace symbols with numeric constants</span>
y_,_ <span class="pl-k">=</span> <span class="pl-c1">lsim</span>(Gd_, u); <span class="pl-c"><span class="pl-c">#</span> Filter using Julia</span>
<span class="pl-c1">@test</span> <span class="pl-c1">norm</span>(y<span class="pl-k">-</span>y_)<span class="pl-k">/</span><span class="pl-c1">norm</span>(y_) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-10</span>
<span class="pl-c1">plot</span>([u y y_], lab<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>u<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>y c-code<span class="pl-pds">"</span></span> <span class="pl-s"><span class="pl-pds">"</span>y julia<span class="pl-pds">"</span></span>]) <span class="pl-k">|&gt;</span> display</pre></div>
<p>NOTE: The usual caveats for transfer-function filtering applies. High-order transfer functions might cause numerical problems. Consider either filtering through many smaller transfer function in series, or convert the system into a well-balanced statespace system and generate code for this instead. See <a href="http://www.control.lth.se/fileadmin/control/Education/EngineeringProgram/FRTN01/lectures/L11_slides6.pdf" rel="nofollow">lecture notes</a> slide 45 and onwards.</p>
</article></div>