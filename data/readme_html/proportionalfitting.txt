<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-proportionalfittingjl" class="anchor" aria-hidden="true" href="#proportionalfittingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProportionalFitting.jl</h1>
<p dir="auto"><a href="https://github.com/vankesteren/ProportionalFitting.jl/actions/workflows/CI.yml"><img src="https://github.com/vankesteren/ProportionalFitting.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://vankesteren.github.io/ProportionalFitting.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="devdoc" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>

<p dir="auto">Multidimensional iterative proportional fitting in Julia.</p>
<p dir="auto"><a href="https://github.com/vankesteren/ProportionalFitting.jl">ProportionalFitting</a> implements a multidimensional version of the <a href="https://en.wikipedia.org/wiki/Iterative_proportional_fitting#Algorithm_2_(factor_estimation)" rel="nofollow">factor estimation method</a> for performing iterative proportional fitting (also called RAS algorithm, raking, matrix scaling)</p>
<blockquote>
<p dir="auto">Before version <code>0.3.0</code>, this package was called <code>ItPropFit.jl</code>.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-showcase" class="anchor" aria-hidden="true" href="#showcase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Showcase</h2>
<p dir="auto">See the full documentation and getting started <a href="https://vankesteren.github.io/ProportionalFitting.jl/" rel="nofollow">here</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProportionalFitting

# matrix to be adjusted
X = [40 30 20 10; 35 50 100 75; 30 80 70 120; 20 30 40 50]

# target margins
u = [150, 300, 400, 150]
v = [200, 300, 400, 100]

# Perform iterative proportional fitting
fac = ipf(X, [u, v])"><pre><span class="pl-k">using</span> ProportionalFitting

<span class="pl-c"><span class="pl-c">#</span> matrix to be adjusted</span>
X <span class="pl-k">=</span> [<span class="pl-c1">40</span> <span class="pl-c1">30</span> <span class="pl-c1">20</span> <span class="pl-c1">10</span>; <span class="pl-c1">35</span> <span class="pl-c1">50</span> <span class="pl-c1">100</span> <span class="pl-c1">75</span>; <span class="pl-c1">30</span> <span class="pl-c1">80</span> <span class="pl-c1">70</span> <span class="pl-c1">120</span>; <span class="pl-c1">20</span> <span class="pl-c1">30</span> <span class="pl-c1">40</span> <span class="pl-c1">50</span>]

<span class="pl-c"><span class="pl-c">#</span> target margins</span>
u <span class="pl-k">=</span> [<span class="pl-c1">150</span>, <span class="pl-c1">300</span>, <span class="pl-c1">400</span>, <span class="pl-c1">150</span>]
v <span class="pl-k">=</span> [<span class="pl-c1">200</span>, <span class="pl-c1">300</span>, <span class="pl-c1">400</span>, <span class="pl-c1">100</span>]

<span class="pl-c"><span class="pl-c">#</span> Perform iterative proportional fitting</span>
fac <span class="pl-k">=</span> <span class="pl-c1">ipf</span>(X, [u, v])</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="[ Info: Converged in 8 iterations.
Factors for 2D array:
  [1]: [0.9986403503185242, 0.8833622306385376, 1.1698911437112522, 0.8895042701910321]
  [2]: [1.616160156063788, 1.5431801747375655, 1.771623700829941, 0.38299396265192226]"><pre class="notranslate"><code>[ Info: Converged in 8 iterations.
Factors for 2D array:
  [1]: [0.9986403503185242, 0.8833622306385376, 1.1698911437112522, 0.8895042701910321]
  [2]: [1.616160156063788, 1.5431801747375655, 1.771623700829941, 0.38299396265192226]
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# compute adjusted matrix
Z = Array(fac) .* X"><pre><span class="pl-c"><span class="pl-c">#</span> compute adjusted matrix</span>
Z <span class="pl-k">=</span> <span class="pl-c1">Array</span>(fac) <span class="pl-k">.*</span> X</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="4×4 Matrix{Float64}:
 64.5585   46.2325   35.3843   3.82473
 49.9679   68.1594  156.499   25.3742
 56.7219  144.428   145.082   53.7673
 28.7516   41.18     63.0347  17.0337"><pre class="notranslate"><code>4×4 Matrix{Float64}:
 64.5585   46.2325   35.3843   3.82473
 49.9679   68.1594  156.499   25.3742
 56.7219  144.428   145.082   53.7673
 28.7516   41.18     63.0347  17.0337
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# check that the margins are indeed [u, v]
ArrayMargins(Z)"><pre><span class="pl-c"><span class="pl-c">#</span> check that the margins are indeed [u, v]</span>
<span class="pl-c1">ArrayMargins</span>(Z)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Margins of 2D array:
  [1]: [150.0000000009452, 299.99999999962523, 399.99999999949796, 149.99999999993148]
  [2]: [200.0, 299.99999999999994, 399.99999999999994, 99.99999999999997]"><pre class="notranslate"><code>Margins of 2D array:
  [1]: [150.0000000009452, 299.99999999962523, 399.99999999949796, 149.99999999993148]
  [2]: [200.0, 299.99999999999994, 399.99999999999994, 99.99999999999997]
</code></pre></div>
</article></div>