<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-kafka" class="anchor" aria-hidden="true" href="#kafka"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Kafka</h1>
<p><a href="https://travis-ci.org/dfdx/Kafka.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/734bea506db76f559a82e9faf1eb713bdb806cc4998320ea40160345209db438/68747470733a2f2f7472617669732d63692e6f72672f646664782f4b61666b612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dfdx/Kafka.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Client for Apache Kafka in Julia</p>
<p>This project is <strong>DISCONTINUED</strong>. Please use <a href="https://github.com/dfdx/RDKafka.jl">RDKafka.jl</a> instead.</p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>Basically, Kafka provides 4 principal APIs:</p>
<ol>
<li>Metadata retrieval</li>
<li>Producing messages</li>
<li>Fetching messages</li>
<li>Listing offsets</li>
<li>Consumer group management (a.k.a. storing offsets)</li>
</ol>
<p>First 4 are implemented and should be sufficient for most real-life use cases. The last one, however, is somewhat fast-moving target without single approach (e.g. Kafka 0.8.x uses Zookeeper to store offsets, 0.9.x provides broker API, while external systems like Apache Spark and Apache Storm use their own means to store offsets). Given instability and variety of options this part is postponed for now. Though, proposals and discussions are heavily welcome.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(v1.0) pkg&gt; add Kafka#master
"><pre>(v1.<span class="pl-c1">0</span>) pkg<span class="pl-k">&gt;</span> add Kafka<span class="pl-c"><span class="pl-c">#</span>master</span></pre></div>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example</h2>
<p>Here's short version of what you can do with Kafka.jl. For full example see <code>examples/all.jl</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Kafka

# create KafkaClient using single bootstrap broker
kc = KafkaClient(&quot;127.0.0.1&quot;, 9092)

# get metadata about a topic(s)
md_channel = metadata(kc, [&quot;test&quot;])
md = take!(md_channel)
# if you prefer synchronous logic, use one-linear
take!(metadata(kc, [&quot;test&quot;]))
take!(metadata(kc))

# get earliest and latest available offsets for topic &quot;test&quot; and partition 0
take!(earliest_offset(kc, &quot;test&quot;, 0))
take!(latest_offset(kc, &quot;test&quot;, 0))

# produce new messages
keys = [convert(Vector{UInt8}, key) for key in [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]]
values = [convert(Vector{UInt8}, value) for value in [&quot;feel&quot;, &quot;good&quot;, &quot;inc.&quot;]]
messages = collect(zip(keys, values))
offset = take!(produce(kc, &quot;test&quot;, 0, messages))

# fetch messages
start_offset = 0
offset_messages = take!(fetch(kc, &quot;test&quot;, 0, start_offset))
"><pre><span class="pl-k">using</span> Kafka

<span class="pl-c"><span class="pl-c">#</span> create KafkaClient using single bootstrap broker</span>
kc <span class="pl-k">=</span> <span class="pl-c1">KafkaClient</span>(<span class="pl-s"><span class="pl-pds">"</span>127.0.0.1<span class="pl-pds">"</span></span>, <span class="pl-c1">9092</span>)

<span class="pl-c"><span class="pl-c">#</span> get metadata about a topic(s)</span>
md_channel <span class="pl-k">=</span> <span class="pl-c1">metadata</span>(kc, [<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>])
md <span class="pl-k">=</span> <span class="pl-c1">take!</span>(md_channel)
<span class="pl-c"><span class="pl-c">#</span> if you prefer synchronous logic, use one-linear</span>
<span class="pl-c1">take!</span>(<span class="pl-c1">metadata</span>(kc, [<span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>]))
<span class="pl-c1">take!</span>(<span class="pl-c1">metadata</span>(kc))

<span class="pl-c"><span class="pl-c">#</span> get earliest and latest available offsets for topic "test" and partition 0</span>
<span class="pl-c1">take!</span>(<span class="pl-c1">earliest_offset</span>(kc, <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>))
<span class="pl-c1">take!</span>(<span class="pl-c1">latest_offset</span>(kc, <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>))

<span class="pl-c"><span class="pl-c">#</span> produce new messages</span>
keys <span class="pl-k">=</span> [<span class="pl-c1">convert</span>(Vector{UInt8}, key) <span class="pl-k">for</span> key <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>]]
values <span class="pl-k">=</span> [<span class="pl-c1">convert</span>(Vector{UInt8}, value) <span class="pl-k">for</span> value <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>feel<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>good<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>inc.<span class="pl-pds">"</span></span>]]
messages <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">zip</span>(keys, values))
offset <span class="pl-k">=</span> <span class="pl-c1">take!</span>(<span class="pl-c1">produce</span>(kc, <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>, messages))

<span class="pl-c"><span class="pl-c">#</span> fetch messages</span>
start_offset <span class="pl-k">=</span> <span class="pl-c1">0</span>
offset_messages <span class="pl-k">=</span> <span class="pl-c1">take!</span>(<span class="pl-c1">fetch</span>(kc, <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>, start_offset))</pre></div>
</article></div>