<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-finitestateprojectionjl" class="anchor" aria-hidden="true" href="#finitestateprojectionjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FiniteStateProjection.jl</h1>
<p dir="auto"><a href="https://kaandocal.github.io/FiniteStateProjection.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Finite State Projection <a href="#1">[1]</a>  algorithms for chemical reaction networks based on <a href="https://github.com/SciML/Catalyst.jl">Catalyst.jl</a> and <a href="https://github.com/SciML/ModelingToolkit.jl">ModelingToolkit.jl</a>. Converts descriptions of reaction networks into <code>ODEProblem</code>s and <code>SteadyStateProblem</code>s for use with <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a>.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features:</h2>
<ul dir="auto">
<li>Built on top of <a href="https://github.com/SciML/Catalyst.jl">Catalyst.jl</a></li>
<li>FSP equations are generated as <code>ODEFunction</code>/<code>ODEProblem</code>s and can be solved with <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a>, with on-the-fly generation of targeted functions for improved performance</li>
<li>The Chemical Master Equation can be represented as a <code>SparseMatrixCSC</code></li>
</ul>
<p dir="auto">More information is available in the <a href="https://kaandocal.github.io/FiniteStateProjection.jl/dev/" rel="nofollow">documentation</a>. Please feel free to open issues and submit pull requests!</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-birth-death-system" class="anchor" aria-hidden="true" href="#birth-death-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Birth-Death System</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FiniteStateProjection
using OrdinaryDiffEq

rn = @reaction_network begin
    σ, 0 --&gt; A
    d, A --&gt; 0
end σ d

sys = FSPSystem(rn)

# Parameters for our system
ps = [ 10.0, 1.0 ]

# Initial distribution (over 1 species)
# Here we start with 0 copies of A
u0 = zeros(50)
u0[1] = 1.0 

prob = convert(ODEProblem, sys, u0, (0, 10.0), ps)
sol = solve(prob, Vern7())"><pre><span class="pl-k">using</span> FiniteStateProjection
<span class="pl-k">using</span> OrdinaryDiffEq

rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
    σ, <span class="pl-c1">0</span> <span class="pl-k">--&gt;</span> A
    d, A <span class="pl-k">--&gt;</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span> σ d

sys <span class="pl-k">=</span> <span class="pl-c1">FSPSystem</span>(rn)

<span class="pl-c"><span class="pl-c">#</span> Parameters for our system</span>
ps <span class="pl-k">=</span> [ <span class="pl-c1">10.0</span>, <span class="pl-c1">1.0</span> ]

<span class="pl-c"><span class="pl-c">#</span> Initial distribution (over 1 species)</span>
<span class="pl-c"><span class="pl-c">#</span> Here we start with 0 copies of A</span>
u0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">50</span>)
u0[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1.0</span> 

prob <span class="pl-k">=</span> <span class="pl-c1">convert</span>(ODEProblem, sys, u0, (<span class="pl-c1">0</span>, <span class="pl-c1">10.0</span>), ps)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Vern7</span>())</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/birth_death.png"><img src="docs/src/assets/birth_death.png" alt="Visualisation" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-telegraph-model" class="anchor" aria-hidden="true" href="#telegraph-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Telegraph Model</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FiniteStateProjection
using OrdinaryDiffEq

rn = @reaction_network begin
    σ_on * (1 - G_on), 0 --&gt; G_on
    σ_off, G_on --&gt; 0
    ρ, G_on --&gt; G_on + M
    d, M --&gt; 0
end σ_on σ_off ρ d

sys = FSPSystem(rn)

# Parameters for our system
ps = [ 0.25, 0.15, 15.0, 1.0 ]

# Initial distribution (over two species)
# Here we start with 0 copies of G_on and M
u0 = zeros(2, 50)
u0[1,1] = 1.0

prob = convert(ODEProblem, sys, u0, (0, 10.0), ps)
sol = solve(prob, Vern7())"><pre><span class="pl-k">using</span> FiniteStateProjection
<span class="pl-k">using</span> OrdinaryDiffEq

rn <span class="pl-k">=</span> <span class="pl-c1">@reaction_network</span> <span class="pl-k">begin</span>
    σ_on <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> G_on), <span class="pl-c1">0</span> <span class="pl-k">--&gt;</span> G_on
    σ_off, G_on <span class="pl-k">--&gt;</span> <span class="pl-c1">0</span>
    ρ, G_on <span class="pl-k">--&gt;</span> G_on <span class="pl-k">+</span> M
    d, M <span class="pl-k">--&gt;</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span> σ_on σ_off ρ d

sys <span class="pl-k">=</span> <span class="pl-c1">FSPSystem</span>(rn)

<span class="pl-c"><span class="pl-c">#</span> Parameters for our system</span>
ps <span class="pl-k">=</span> [ <span class="pl-c1">0.25</span>, <span class="pl-c1">0.15</span>, <span class="pl-c1">15.0</span>, <span class="pl-c1">1.0</span> ]

<span class="pl-c"><span class="pl-c">#</span> Initial distribution (over two species)</span>
<span class="pl-c"><span class="pl-c">#</span> Here we start with 0 copies of G_on and M</span>
u0 <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>, <span class="pl-c1">50</span>)
u0[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

prob <span class="pl-k">=</span> <span class="pl-c1">convert</span>(ODEProblem, sys, u0, (<span class="pl-c1">0</span>, <span class="pl-c1">10.0</span>), ps)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Vern7</span>())</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/telegraph.png"><img src="docs/src/assets/telegraph.png" alt="Visualisation" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO:</h2>
<ul dir="auto">
<li>Add bursty reactions</li>
<li>Add support for sparse Jacobians</li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto"><a id="user-content-1">[1]</a> B. Munsky and M. Khammash, "The Finite State Projection algorithm for the solution of the Chemical Master Equation", Journal of Chemical Physics 124, 044104 (2006). <a href="https://doi.org/10.1063/1.2145882" rel="nofollow">https://doi.org/10.1063/1.2145882</a></p>
</article></div>