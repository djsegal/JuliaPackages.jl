<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-xla" class="anchor" aria-hidden="true" href="#xla"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>XLA</h1>
<p dir="auto"><a href="https://travis-ci.org/FluxML/XLA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ef944c104c9f9b458c74b6ac6c8d7f2c8f4a51744b93730ab22669e0b72b4fa8/68747470733a2f2f7472617669732d63692e6f72672f466c75784d4c2f584c412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FluxML/XLA.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add IRTools#master
] add https://github.com/MikeInnes/Mjolnir.jl
] add https://github.com/FluxML/XLA.jl"><pre>] add IRTools<span class="pl-c"><span class="pl-c">#</span>master</span>
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>Mjolnir<span class="pl-k">.</span>jl
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>FluxML<span class="pl-k">/</span>XLA<span class="pl-k">.</span>jl</pre></div>
<p dir="auto">Compile your Julia code to XLA. This package is part of the <a href="https://github.com/FluxML/Flux.jl">Flux</a> ML ecosystem and is designed to work well with its other packages, including the <a href="https://github.com/FluxML/Zygote.jl">Zygote</a> automatic differentiation engine.</p>
<p dir="auto"><strong>This project is in early alpha.</strong> You can see some capability demos below, or some larger examples in the <a href="/examples/">examples folder</a>. You'll want to use the project/manifest in that directory as the examples currently depend on some development versions.</p>
<h2 dir="auto"><a id="user-content-supported-features" class="anchor" aria-hidden="true" href="#supported-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported Features</h2>
<p dir="auto">Convert a Julia function to XLA:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Flux, XLA

julia&gt; xadd = xla(+);

julia&gt; xadd(2, 2.5)
2020-05-07 11:59:19.973581: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7ffe8239e680 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-05-07 11:59:19.973603: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
4.5

julia&gt; m = Chain(Dense(10, 5, relu), Dense(5, 2), softmax) |&gt; f64;

julia&gt; xm = xla(m);

julia&gt; xm(rand(10))
2-element XLA.XArray{Float64,1}:
 0.499667314539429
 0.5003326854605711"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Flux, XLA

julia<span class="pl-k">&gt;</span> xadd <span class="pl-k">=</span> <span class="pl-c1">xla</span>(<span class="pl-k">+</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xadd</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2.5</span>)
<span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">07</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">59</span><span class="pl-k">:</span><span class="pl-c1">19.973581</span><span class="pl-k">:</span> I external<span class="pl-k">/</span>org_tensorflow<span class="pl-k">/</span>tensorflow<span class="pl-k">/</span>compiler<span class="pl-k">/</span>xla<span class="pl-k">/</span>service<span class="pl-k">/</span>service<span class="pl-k">.</span>cc<span class="pl-k">:</span><span class="pl-c1">168</span>] XLA service <span class="pl-c1">0x7ffe8239e680</span> initialized <span class="pl-k">for</span> platform Host (this does not guarantee that XLA will be used)<span class="pl-k">.</span> Devices<span class="pl-k">:</span>
<span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">07</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">59</span><span class="pl-k">:</span><span class="pl-c1">19.973603</span><span class="pl-k">:</span> I external<span class="pl-k">/</span>org_tensorflow<span class="pl-k">/</span>tensorflow<span class="pl-k">/</span>compiler<span class="pl-k">/</span>xla<span class="pl-k">/</span>service<span class="pl-k">/</span>service<span class="pl-k">.</span>cc<span class="pl-k">:</span><span class="pl-c1">176</span>]   StreamExecutor device (<span class="pl-c1">0</span>)<span class="pl-k">:</span> Host, Default Version
<span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">5</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2</span>), softmax) <span class="pl-k">|&gt;</span> f64;

julia<span class="pl-k">&gt;</span> xm <span class="pl-k">=</span> <span class="pl-c1">xla</span>(m);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xm</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element XLA<span class="pl-k">.</span>XArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.499667314539429</span>
 <span class="pl-c1">0.5003326854605711</span></pre></div>
<p dir="auto">Hello world:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function hello()
         if isxla()
           println(&quot;Hello from XLA!&quot;)
         else
           println(&quot;Not running XLA :(&quot;)
         end
       end

julia&gt; hello()
Not running XLA :(

julia&gt; xla(hello)()
Hello from XLA!"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">hello</span>()
         <span class="pl-k">if</span> <span class="pl-c1">isxla</span>()
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello from XLA!<span class="pl-pds">"</span></span>)
         <span class="pl-k">else</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Not running XLA :(<span class="pl-pds">"</span></span>)
         <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">hello</span>()
Not running XLA :(

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xla</span>(hello)()
Hello from XLA!</pre></div>
<p dir="auto">Generic functions and types:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; square = xla(x -&gt; @show x^2);

julia&gt; square(5)
x ^ 2 = 25
25

julia&gt; square(1+2im)
x ^ 2 = -3 + 4im
-3 + 4im"><pre>julia<span class="pl-k">&gt;</span> square <span class="pl-k">=</span> <span class="pl-c1">xla</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">square</span>(<span class="pl-c1">5</span>)
x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">25</span>
<span class="pl-c1">25</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">square</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>)
x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4im</span>
<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4im</span></pre></div>
<p dir="auto">If/else and data structures (loop support is on the roadmap):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; function updatezero!(env)
         if env[:x] &lt; 0
           env[:x] = 0
         end
       end

julia&gt; function myrelu(x)
         env = Dict()
         env[:x] = x
         updatezero!(env)
         return env[:x]
       end

julia&gt; xrelu = xla(myrelu);

julia&gt; xrelu(5), xrelu(-5)
(5, 0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">updatezero!</span>(env)
         <span class="pl-k">if</span> env[<span class="pl-c1">:x</span>] <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>
           env[<span class="pl-c1">:x</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
         <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">myrelu</span>(x)
         env <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
         env[<span class="pl-c1">:x</span>] <span class="pl-k">=</span> x
         <span class="pl-c1">updatezero!</span>(env)
         <span class="pl-k">return</span> env[<span class="pl-c1">:x</span>]
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> xrelu <span class="pl-k">=</span> <span class="pl-c1">xla</span>(myrelu);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xrelu</span>(<span class="pl-c1">5</span>), <span class="pl-c1">xrelu</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>)
(<span class="pl-c1">5</span>, <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">Take a gradient:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; W = randn(2, 3);

julia&gt; f(x) = gradient((W, x) -&gt; sum(W*x), W, x);

julia&gt; W̄, x̄ = xla(f)(rand(3))
([-0.8832944966219527, 2.7865176392411346, 0.8122694890142825], [-0.8832944966219527, 2.7865176392411346, 0.8122694890142825])

julia&gt; typeof(ans)
Tuple{XLA.XArray{Float64,1},Array{Float64,1}}"><pre>julia<span class="pl-k">&gt;</span> W <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">gradient</span>((W, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>(W<span class="pl-k">*</span>x), W, x);

julia<span class="pl-k">&gt;</span> W̄, x̄ <span class="pl-k">=</span> <span class="pl-c1">xla</span>(f)(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
([<span class="pl-k">-</span><span class="pl-c1">0.8832944966219527</span>, <span class="pl-c1">2.7865176392411346</span>, <span class="pl-c1">0.8122694890142825</span>], [<span class="pl-k">-</span><span class="pl-c1">0.8832944966219527</span>, <span class="pl-c1">2.7865176392411346</span>, <span class="pl-c1">0.8122694890142825</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
Tuple{XLA<span class="pl-k">.</span>XArray{Float64,<span class="pl-c1">1</span>},Array{Float64,<span class="pl-c1">1</span>}}</pre></div>
<p dir="auto">(Why is the gradient <code>x̄</code> an <code>Array</code>, and not an <code>XArray</code>? In fact <code>x̄</code> is a
constant regardless of the input <code>x</code>, so the gradient is computed at compile
time and never goes near XLA. If not for the computation of <code>W̄</code> the XLA code
would be a no-op.)</p>
<details>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = gradient(x -&gt; sum(W*x), x);

julia&gt; XLA.@code_xla f(rand(3))
1: (%1 :: Float64[3])
  %2 = ([-1.4783050895216538, -0.317112271139274, -0.32011307414342466],)
  return %2"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">gradient</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>(W<span class="pl-k">*</span>x), x);

julia<span class="pl-k">&gt;</span> XLA<span class="pl-k">.</span><span class="pl-c1">@code_xla</span> <span class="pl-c1">f</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>[<span class="pl-c1">3</span>])
  <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> ([<span class="pl-k">-</span><span class="pl-c1">1.4783050895216538</span>, <span class="pl-k">-</span><span class="pl-c1">0.317112271139274</span>, <span class="pl-k">-</span><span class="pl-c1">0.32011307414342466</span>],)
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">2</span></pre></div>
</details>
<p dir="auto">We also want to support mutating array operations, in future.</p>
<h2 dir="auto"><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Under the Hood</h2>
<p dir="auto">See the results of type inference:</p>
<details>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; XLA.@code_typed softmax([1, 2, 3])
1: (%1 :: const(softmax), %2 :: Mjolnir.Shape{Array{Int64,1}}((3,)))
  %3 =
    1: (%1 :: const(max), %2 :: Int64, %3 :: Int64)
      %4 = (max)(%2, %3) :: Int64
      return %4
  %4 = (Mjolnir.KwFunc{typeof(mapreduce)}())((dims = 1,), mapreduce, identity, %3, %2) :: Int64
  %5 =
    1: (%1 :: const(-), %2 :: Int64, %3 :: Int64)
      %4 = (-)(%2, %3) :: Int64
      return %4
  %6 = (broadcast)(%5, %2, %4) :: Mjolnir.Shape{Array{Int64,1}}((3,))
  %7 =
    1: (%1 :: const(exp), %2 :: Int64)
      %3 = (Float64)(%2) :: Float64
      %4 = (exp)(%3) :: Float64
      return %4
  %8 = (broadcast)(%7, %6) :: Mjolnir.Shape{Array{Float64,1}}((3,))
  %9 =
    1: (%1 :: const(add_sum), %2 :: Float64, %3 :: Float64)
      %4 = (+)(%2, %3) :: Float64
      return %4
  %10 = (Mjolnir.KwFunc{typeof(mapreduce)}())((dims = 1,), mapreduce, identity, %9, %8) :: Float64
  %11 =
    1: (%1 :: const(/), %2 :: Float64, %3 :: Float64)
      %4 = (/)(%2, %3) :: Float64
      return %4
  %12 = (broadcast)(%11, %8, %10) :: Mjolnir.Shape{Array{Float64,1}}((3,))
  return %12"><pre>julia<span class="pl-k">&gt;</span> XLA<span class="pl-k">.</span><span class="pl-c1">@code_typed</span> <span class="pl-c1">softmax</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(softmax), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Int64,1}}</span>((<span class="pl-c1">3</span>,)))
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(max), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (max)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (Mjolnir<span class="pl-k">.</span><span class="pl-c1">KwFunc</span><span class="pl-c1">{typeof(mapreduce)}</span>())((dims <span class="pl-k">=</span> <span class="pl-c1">1</span>,), mapreduce, identity, <span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(<span class="pl-k">-</span>), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-k">-</span>)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> (broadcast)(<span class="pl-k">%</span><span class="pl-c1">5</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>) <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Int64,1}}</span>((<span class="pl-c1">3</span>,))
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(exp), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (Float64)(<span class="pl-k">%</span><span class="pl-c1">2</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (exp)(<span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span> (broadcast)(<span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">6</span>) <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Float64,1}}</span>((<span class="pl-c1">3</span>,))
  <span class="pl-k">%</span><span class="pl-c1">9</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(add_sum), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-k">+</span>)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span> (Mjolnir<span class="pl-k">.</span><span class="pl-c1">KwFunc</span><span class="pl-c1">{typeof(mapreduce)}</span>())((dims <span class="pl-k">=</span> <span class="pl-c1">1</span>,), mapreduce, identity, <span class="pl-k">%</span><span class="pl-c1">9</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
  <span class="pl-k">%</span><span class="pl-c1">11</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(<span class="pl-k">/</span>), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-k">/</span>)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">12</span> <span class="pl-k">=</span> (broadcast)(<span class="pl-k">%</span><span class="pl-c1">11</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-k">%</span><span class="pl-c1">10</span>) <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Float64,1}}</span>((<span class="pl-c1">3</span>,))
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">12</span></pre></div>
</details>
<p dir="auto">See the final XLA code:</p>
<details>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @code_xla softmax([1, 2, 3])
1: (%1 :: Int64[3])
  %2 =
    1: (%2 :: Int64, %3 :: Int64)
      %4 = (XLA.Max())(%2, %3) :: Int64
      return %4
  %3 = (XLA.Reduce(1))(%2, %1, 0)
  %4 =
    1: (%2 :: Int64, %3 :: Int64)
      %4 = (XLA.Sub())(%2, %3) :: Int64
      return %4
  %5 = (XLA.Map())(%4, %1, %3)
  %6 =
    1: (%2 :: Int64)
      %3 = (XLA.ConvertElementType(Float64))(%2) :: Float64
      %4 = (XLA.Exp())(%3) :: Float64
      return %4
  %7 = (XLA.Map())(%6, %5)
  %8 =
    1: (%2 :: Float64, %3 :: Float64)
      %4 = (XLA.Add())(%2, %3) :: Float64
      return %4
  %9 = (XLA.Reduce(1))(%8, %7, 0.0)
  %10 =
    1: (%2 :: Float64, %3 :: Float64)
      %4 = (XLA.Div())(%2, %3) :: Float64
      return %4
  %11 = (XLA.Map())(%10, %7, %9)
  return %11"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_xla</span> <span class="pl-c1">softmax</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>[<span class="pl-c1">3</span>])
  <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Max</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Reduce</span>(<span class="pl-c1">1</span>))(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>)
  <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Sub</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Map</span>())(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>)
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">ConvertElementType</span>(Float64))(<span class="pl-k">%</span><span class="pl-c1">2</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Exp</span>())(<span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Map</span>())(<span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-k">%</span><span class="pl-c1">5</span>)
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Add</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">9</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Reduce</span>(<span class="pl-c1">1</span>))(<span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-c1">0.0</span>)
  <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Div</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">11</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Map</span>())(<span class="pl-k">%</span><span class="pl-c1">10</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">9</span>)
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">11</span></pre></div>
</details>
<p dir="auto">XLA's internal text representation, HLO text:</p>
<details>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @code_hlo softmax([1, 2, 3])
HloModule name__44.31

name__45.3 {
  parameter.4 = s64[]invalid{} parameter(0)
  parameter.5 = s64[]invalid{} parameter(1)
  ROOT maximum.6 = s64[]invalid{} maximum(parameter.4, parameter.5)
}

name__46.8 {
  parameter.9 = s64[]invalid{} parameter(0)
  parameter.10 = s64[]invalid{} parameter(1)
  ROOT subtract.11 = s64[]invalid{} subtract(parameter.9, parameter.10)
}

name__47.14 {
  parameter.15 = s64[]invalid{} parameter(0)
  convert.16 = f64[]invalid{} convert(parameter.15)
  ROOT exponential.17 = f64[]invalid{} exponential(convert.16)
}

name__48.20 {
  parameter.21 = f64[]invalid{} parameter(0)
  parameter.22 = f64[]invalid{} parameter(1)
  ROOT add.23 = f64[]invalid{} add(parameter.21, parameter.22)
}

name__49.25 {
  parameter.26 = f64[]invalid{} parameter(0)
  parameter.27 = f64[]invalid{} parameter(1)
  ROOT divide.28 = f64[]invalid{} divide(parameter.26, parameter.27)
}

ENTRY name__44.31 {
  parameter.1 = s64[3] parameter(0)
  constant.2 = s64[] constant(0)
  reduce.7 = s64[] reduce(parameter.1, constant.2), dimensions={0}, to_apply=name__45.3
  broadcast.12 = s64[3]{0} broadcast(reduce.7), dimensions={}
  map.13 = s64[3]{0} map(parameter.1, broadcast.12), dimensions={0}, to_apply=name__46.8
  map.18 = f64[3]{0} map(map.13), dimensions={0}, to_apply=name__47.14
  constant.19 = f64[] constant(0)
  reduce.24 = f64[] reduce(map.18, constant.19), dimensions={0}, to_apply=name__48.20
  broadcast.29 = f64[3]{0} broadcast(reduce.24), dimensions={}
  ROOT map.30 = f64[3]{0} map(map.18, broadcast.29), dimensions={0}, to_apply=name__49.25
}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_hlo</span> <span class="pl-c1">softmax</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
HloModule name__44.<span class="pl-c1">31</span>

name__45.<span class="pl-c1">3</span> {
  parameter.<span class="pl-c1">4</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter.<span class="pl-c1">5</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT maximum.<span class="pl-c1">6</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">maximum</span>(parameter.<span class="pl-c1">4</span>, parameter.<span class="pl-c1">5</span>)
}

name__46.<span class="pl-c1">8</span> {
  parameter.<span class="pl-c1">9</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter.<span class="pl-c1">10</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT subtract.<span class="pl-c1">11</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">subtract</span>(parameter.<span class="pl-c1">9</span>, parameter.<span class="pl-c1">10</span>)
}

name__47.<span class="pl-c1">14</span> {
  parameter.<span class="pl-c1">15</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  convert.<span class="pl-c1">16</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">convert</span>(parameter.<span class="pl-c1">15</span>)
  ROOT exponential.<span class="pl-c1">17</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">exponential</span>(convert.<span class="pl-c1">16</span>)
}

name__48.<span class="pl-c1">20</span> {
  parameter.<span class="pl-c1">21</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter.<span class="pl-c1">22</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT add.<span class="pl-c1">23</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">add</span>(parameter.<span class="pl-c1">21</span>, parameter.<span class="pl-c1">22</span>)
}

name__49.<span class="pl-c1">25</span> {
  parameter.<span class="pl-c1">26</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter.<span class="pl-c1">27</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT divide.<span class="pl-c1">28</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">divide</span>(parameter.<span class="pl-c1">26</span>, parameter.<span class="pl-c1">27</span>)
}

ENTRY name__44.<span class="pl-c1">31</span> {
  parameter.<span class="pl-c1">1</span> <span class="pl-k">=</span> s64[<span class="pl-c1">3</span>] <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  constant.<span class="pl-c1">2</span> <span class="pl-k">=</span> s64[] <span class="pl-c1">constant</span>(<span class="pl-c1">0</span>)
  reduce.<span class="pl-c1">7</span> <span class="pl-k">=</span> s64[] <span class="pl-c1">reduce</span>(parameter.<span class="pl-c1">1</span>, constant.<span class="pl-c1">2</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__45.<span class="pl-c1">3</span>
  broadcast.<span class="pl-c1">12</span> <span class="pl-k">=</span> s64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">broadcast</span>(reduce.<span class="pl-c1">7</span>), dimensions<span class="pl-k">=</span>{}
  map.<span class="pl-c1">13</span> <span class="pl-k">=</span> s64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">map</span>(parameter.<span class="pl-c1">1</span>, broadcast.<span class="pl-c1">12</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__46.<span class="pl-c1">8</span>
  map.<span class="pl-c1">18</span> <span class="pl-k">=</span> f64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">map</span>(map.<span class="pl-c1">13</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__47.<span class="pl-c1">14</span>
  constant.<span class="pl-c1">19</span> <span class="pl-k">=</span> f64[] <span class="pl-c1">constant</span>(<span class="pl-c1">0</span>)
  reduce.<span class="pl-c1">24</span> <span class="pl-k">=</span> f64[] <span class="pl-c1">reduce</span>(map.<span class="pl-c1">18</span>, constant.<span class="pl-c1">19</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__48.<span class="pl-c1">20</span>
  broadcast.<span class="pl-c1">29</span> <span class="pl-k">=</span> f64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">broadcast</span>(reduce.<span class="pl-c1">24</span>), dimensions<span class="pl-k">=</span>{}
  ROOT map.<span class="pl-c1">30</span> <span class="pl-k">=</span> f64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">map</span>(map.<span class="pl-c1">18</span>, broadcast.<span class="pl-c1">29</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__49.<span class="pl-c1">25</span>
}</pre></div>
</details>
<p dir="auto">You may want to start with simpler examples like <code>@code_xla 1+2.0</code> or
<code>@code_xla (1+2im)*(3+4im)</code>.</p>
<h2 dir="auto"><a id="user-content-limitations--notes" class="anchor" aria-hidden="true" href="#limitations--notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations &amp; Notes</h2>
<p dir="auto">XLA is a specialised backend with limitations, primarily in terms of support for dynamic memory allocation – so we don't expect to be able to support all Julia code. Vectorised array code without too much fanciness (including Flux models) should work well; just don't expect to point XLA at any huge Julia codebase and have it work out of the box.</p>
<p dir="auto">Error handling is so-so right now. If you run into errors, please do open issues; we'll either support your use case or at least add better diagnostics to explain why the code can't be compiled.</p>
<p dir="auto">XLA reuses <a href="https://github.com/google/jax">JAX's</a> build of XLA via <code>pip</code>. A CPU-only build is installed by default; if you want GPU support you can <a href="https://github.com/JuliaPy/PyCall.jl#specifying-the-python-version">use your own python</a> and install the GPU-enabled jaxlib as per the <a href="https://github.com/google/jax#pip-installation">jax docs</a>. The currently supported jaxlib version is specified in <a href="deps/build.jl">build.jl</a>.</p>
</article></div>