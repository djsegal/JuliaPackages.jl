<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-xlatools" class="anchor" aria-hidden="true" href="#xlatools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>XLATools</h1>
<p><a href="https://travis-ci.org/MikeInnes/XLATools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d986c4ce50908f58f66c372135199f4af3bdc26e/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f584c41546f6f6c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/XLATools.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>XLATools provides access to <a href="https://www.tensorflow.org/xla" rel="nofollow">XLA and the XRT runtime</a>, including the ability to build and compile XLA computations using the <a href="https://github.com/MikeInnes/IRTools.jl">IRTools</a> format.</p>
<div class="highlight highlight-source-julia"><pre>] add IRTools<span class="pl-c"><span class="pl-c">#</span>master https://github.com/MikeInnes/XLATools.jl</span></pre></div>
<p>Run XLA ops directly (slow but useful for testing/debugging):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> XLATools

julia<span class="pl-k">&gt;</span> XLATools<span class="pl-k">.</span><span class="pl-c1">Mul</span>()(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">2019</span><span class="pl-k">-</span><span class="pl-c1">09</span><span class="pl-k">-</span><span class="pl-c1">17</span> <span class="pl-c1">14</span><span class="pl-k">:</span><span class="pl-c1">29</span><span class="pl-k">:</span><span class="pl-c1">42.711650</span><span class="pl-k">:</span> I external<span class="pl-k">/</span>org_tensorflow<span class="pl-k">/</span>tensorflow<span class="pl-k">/</span>core<span class="pl-k">/</span>platform<span class="pl-k">/</span>profile_utils<span class="pl-k">/</span>cpu_utils<span class="pl-k">.</span>cc<span class="pl-k">:</span><span class="pl-c1">94</span>] CPU Frequency<span class="pl-k">:</span> <span class="pl-c1">3600000000</span> Hz
<span class="pl-k">...</span>
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> XLATools<span class="pl-k">.</span><span class="pl-c1">XTuple</span>()(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)
(<span class="pl-c1">5</span>, <span class="pl-c1">6</span>)

julia<span class="pl-k">&gt;</span> XLATools<span class="pl-k">.</span><span class="pl-c1">GetTupleElement</span>(<span class="pl-c1">0</span>)(t)
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> XLATools<span class="pl-k">.</span><span class="pl-c1">Add</span>()([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element XLATools<span class="pl-k">.</span>XArray{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">6</span></pre></div>
<p>Ops are named as in XLA proper (see the <a href="https://www.tensorflow.org/xla/operation_semantics" rel="nofollow">reference</a>), except for <code>XTuple</code>. All ops are parameterised, which means you construct them with any options before invoking them.</p>
<p>Build and invoke a simple computation, the polynomial <code>3x^2 + 2x + 1</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> XLATools<span class="pl-k">:</span> Mul, Add, Pow, compile

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IRTools<span class="pl-k">:</span> IR, argument!, xcall

julia<span class="pl-k">&gt;</span> ir <span class="pl-k">=</span> <span class="pl-c1">IR</span>();

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">argument!</span>(ir, Int);

julia<span class="pl-k">&gt;</span> poly <span class="pl-k">=</span> <span class="pl-c1">xcall</span>(<span class="pl-c1">Add</span>(), <span class="pl-c1">xcall</span>(<span class="pl-c1">Mul</span>(), <span class="pl-c1">3</span>, <span class="pl-c1">xcall</span>(<span class="pl-c1">Pow</span>(), x, <span class="pl-c1">2</span>)),
                           <span class="pl-c1">xcall</span>(<span class="pl-c1">Add</span>(), <span class="pl-c1">xcall</span>(<span class="pl-c1">Mul</span>(), <span class="pl-c1">2</span>, x), <span class="pl-c1">1</span>))
:((<span class="pl-c1">Add</span>())((<span class="pl-c1">Mul</span>())(<span class="pl-c1">3</span>, (<span class="pl-c1">Pow</span>())(<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>)), (<span class="pl-c1">Add</span>())((<span class="pl-c1">Mul</span>())(<span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>), <span class="pl-c1">1</span>)))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(ir, poly);

julia<span class="pl-k">&gt;</span> ir
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
  <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-c1">Pow</span>())(<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">2</span>)
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (<span class="pl-c1">Mul</span>())(<span class="pl-c1">3</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>)
  <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-c1">Mul</span>())(<span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>)
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span> (<span class="pl-c1">Add</span>())(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-c1">1</span>)
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> (<span class="pl-c1">Add</span>())(<span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-k">%</span><span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">compile</span>(ir);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">86</span></pre></div>
<p>Writing IR by hand is a bit tedious; we can actually use Julia to do most of the work for us.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@eval</span> relu <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> <span class="pl-k">$</span>(<span class="pl-c1">Gt</span>())(x, <span class="pl-c1">0</span>) ? x : <span class="pl-c1">0</span>
<span class="pl-c"><span class="pl-c">#</span>15 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> ir <span class="pl-k">=</span> <span class="pl-c1">@code_ir</span> <span class="pl-c1">relu</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>)
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (<span class="pl-c1">Gt</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>)
  br <span class="pl-c1">2</span> unless <span class="pl-k">%</span><span class="pl-c1">3</span>
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">2</span>
<span class="pl-c1">2</span><span class="pl-k">:</span>
  <span class="pl-k">return</span> <span class="pl-c1">0</span></pre></div>
<p>Compile it:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> IRTools<span class="pl-k">.</span><span class="pl-c1">argtypes</span>(ir)[:] <span class="pl-k">=</span> [(), Int]
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 ()   
 Int64

julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> <span class="pl-c1">compile</span>(ir)
<span class="pl-c"><span class="pl-c">#</span>10 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>((), <span class="pl-c1">1</span>), <span class="pl-c1">f</span>((), <span class="pl-k">-</span><span class="pl-c1">1</span>)
(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>)</pre></div>
<p>If you're familiar with XLA you might notice that we're not using its "functional" control flow here, but instead normal SSA branches. The idea is to abstract over XLA's <em>somewhat idiosyncratic</em> <code>Conditional</code> and <code>While</code> with something more convenient, that gets lowered to those calls when compiling. It's easy to see what the native equivalent looks like:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> XLATools<span class="pl-k">.</span><span class="pl-c1">controlflow</span>(ir)
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">()</span>, <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (<span class="pl-c1">Gt</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>)
  <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLATools<span class="pl-k">.</span><span class="pl-c1">Not</span>())(<span class="pl-k">%</span><span class="pl-c1">3</span>)
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span>)
      <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> (<span class="pl-c1">XTuple</span>())(<span class="pl-c1">0</span>)
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span>)
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> (<span class="pl-c1">XTuple</span>())()
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span> (<span class="pl-c1">XTuple</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>)
  <span class="pl-k">%</span><span class="pl-c1">9</span> <span class="pl-k">=</span> (<span class="pl-c1">Conditional</span>())(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">5</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-k">%</span><span class="pl-c1">6</span>)
  <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span> (<span class="pl-c1">GetTupleElement</span>(<span class="pl-c1">0</span>))(<span class="pl-k">%</span><span class="pl-c1">9</span>)</pre></div>
<p>Right now only <code>Conditional</code>s are supported, but support for <code>While</code> is planned.</p>
<p>XLATools' op support is not yet exhaustive, but new ops are easy to add. For example, the definition for <code>XTuple</code> is <a href="https://github.com/MikeInnes/XLATools.jl/blob/06e3fccdb2e714aab4b112f16da6ceae38e871ed/src/ops.jl#L36-L40">only three lines</a>.</p>
<p>XLATools reuses <a href="https://github.com/google/jax">JAX's</a> build of XLA via <code>pip</code>. A CPU-only build is installed by default; if you want GPU support you can <a href="https://github.com/JuliaPy/PyCall.jl#specifying-the-python-version">use your own python</a> and install the GPU-enabled jaxlib as per the jax docs.</p>
</article></div>