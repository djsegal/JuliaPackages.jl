<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-xla" class="anchor" aria-hidden="true" href="#xla"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>XLA</h1>
<p><a href="https://travis-ci.org/FluxML/XLA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3d92ad731aebcc0d32108f6afb7927efac63a045/68747470733a2f2f7472617669732d63692e6f72672f466c75784d4c2f584c412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FluxML/XLA.jl.svg?branch=master" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre>] add IRTools<span class="pl-c"><span class="pl-c">#</span>master</span>
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>Mjolnir<span class="pl-k">.</span>jl
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>FluxML<span class="pl-k">/</span>XLA<span class="pl-k">.</span>jl</pre></div>
<p>Compile your Julia code to XLA. This package is part of the <a href="https://github.com/FluxML/Flux.jl">Flux</a> ML ecosystem and is designed to work well with its other packages, including the <a href="https://github.com/FluxML/Zygote.jl">Zygote</a> automatic differentiation engine.</p>
<p><strong>This project is in early alpha.</strong> You can see some capability demos below, or some larger examples in the <a href="/examples/">examples folder</a>. You'll want to use the project/manifest in that directory as the examples currently depend on some development versions.</p>
<h2><a id="user-content-supported-features" class="anchor" aria-hidden="true" href="#supported-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported Features</h2>
<p>Convert a Julia function to XLA:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Flux, XLA

julia<span class="pl-k">&gt;</span> xadd <span class="pl-k">=</span> <span class="pl-c1">xla</span>(<span class="pl-k">+</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xadd</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2.5</span>)
<span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">07</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">59</span><span class="pl-k">:</span><span class="pl-c1">19.973581</span><span class="pl-k">:</span> I external<span class="pl-k">/</span>org_tensorflow<span class="pl-k">/</span>tensorflow<span class="pl-k">/</span>compiler<span class="pl-k">/</span>xla<span class="pl-k">/</span>service<span class="pl-k">/</span>service<span class="pl-k">.</span>cc<span class="pl-k">:</span><span class="pl-c1">168</span>] XLA service <span class="pl-c1">0x7ffe8239e680</span> initialized <span class="pl-k">for</span> platform Host (this does not guarantee that XLA will be used). Devices<span class="pl-k">:</span>
<span class="pl-c1">2020</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">07</span> <span class="pl-c1">11</span><span class="pl-k">:</span><span class="pl-c1">59</span><span class="pl-k">:</span><span class="pl-c1">19.973603</span><span class="pl-k">:</span> I external<span class="pl-k">/</span>org_tensorflow<span class="pl-k">/</span>tensorflow<span class="pl-k">/</span>compiler<span class="pl-k">/</span>xla<span class="pl-k">/</span>service<span class="pl-k">/</span>service<span class="pl-k">.</span>cc<span class="pl-k">:</span><span class="pl-c1">176</span>]   StreamExecutor device (<span class="pl-c1">0</span>)<span class="pl-k">:</span> Host, Default Version
<span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">5</span>, relu), <span class="pl-c1">Dense</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2</span>), softmax) <span class="pl-k">|&gt;</span> f64;

julia<span class="pl-k">&gt;</span> xm <span class="pl-k">=</span> <span class="pl-c1">xla</span>(m);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xm</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>))
<span class="pl-c1">2</span><span class="pl-k">-</span>element XLA<span class="pl-k">.</span>XArray{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.499667314539429</span>
 <span class="pl-c1">0.5003326854605711</span></pre></div>
<p>Hello world:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">hello</span>()
         <span class="pl-k">if</span> <span class="pl-c1">isxla</span>()
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello from XLA!<span class="pl-pds">"</span></span>)
         <span class="pl-k">else</span>
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Not running XLA :(<span class="pl-pds">"</span></span>)
         <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">hello</span>()
Not running XLA :(

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xla</span>(hello)()
Hello from XLA!</pre></div>
<p>Generic functions and types:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> square <span class="pl-k">=</span> <span class="pl-c1">xla</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">square</span>(<span class="pl-c1">5</span>)
x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-c1">25</span>
<span class="pl-c1">25</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">square</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>)
x <span class="pl-k">^</span> <span class="pl-c1">2</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4im</span>
<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4im</span></pre></div>
<p>If/else and data structures (loop support is on the roadmap):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">updatezero!</span>(env)
         <span class="pl-k">if</span> env[<span class="pl-c1">:x</span>] <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>
           env[<span class="pl-c1">:x</span>] <span class="pl-k">=</span> <span class="pl-c1">0</span>
         <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">myrelu</span>(x)
         env <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
         env[<span class="pl-c1">:x</span>] <span class="pl-k">=</span> x
         <span class="pl-c1">updatezero!</span>(env)
         <span class="pl-k">return</span> env[<span class="pl-c1">:x</span>]
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> xrelu <span class="pl-k">=</span> <span class="pl-c1">xla</span>(myrelu);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xrelu</span>(<span class="pl-c1">5</span>), <span class="pl-c1">xrelu</span>(<span class="pl-k">-</span><span class="pl-c1">5</span>)
(<span class="pl-c1">5</span>, <span class="pl-c1">0</span>)</pre></div>
<p>Take a gradient:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> W <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">gradient</span>((W, x) <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>(W<span class="pl-k">*</span>x), W, x);

julia<span class="pl-k">&gt;</span> W̄, x̄ <span class="pl-k">=</span> <span class="pl-c1">xla</span>(f)(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
([<span class="pl-k">-</span><span class="pl-c1">0.8832944966219527</span>, <span class="pl-c1">2.7865176392411346</span>, <span class="pl-c1">0.8122694890142825</span>], [<span class="pl-k">-</span><span class="pl-c1">0.8832944966219527</span>, <span class="pl-c1">2.7865176392411346</span>, <span class="pl-c1">0.8122694890142825</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(ans)
Tuple{XLA<span class="pl-k">.</span>XArray{Float64,<span class="pl-c1">1</span>},Array{Float64,<span class="pl-c1">1</span>}}</pre></div>
<p>(Why is the gradient <code>x̄</code> an <code>Array</code>, and not an <code>XArray</code>? In fact <code>x̄</code> is a
constant regardless of the input <code>x</code>, so the gradient is computed at compile
time and never goes near XLA. If not for the computation of <code>W̄</code> the XLA code
would be a no-op.)</p>
<details>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">gradient</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>(W<span class="pl-k">*</span>x), x);

julia<span class="pl-k">&gt;</span> XLA<span class="pl-k">.</span><span class="pl-c1">@code_xla</span> <span class="pl-c1">f</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>[<span class="pl-c1">3</span>])
  <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span> ([<span class="pl-k">-</span><span class="pl-c1">1.4783050895216538</span>, <span class="pl-k">-</span><span class="pl-c1">0.317112271139274</span>, <span class="pl-k">-</span><span class="pl-c1">0.32011307414342466</span>],)
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">2</span></pre></div>
</details>
<p>We also want to support mutating array operations, in future.</p>
<h2><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Under the Hood</h2>
<p>See the results of type inference:</p>
<details>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> XLA<span class="pl-k">.</span><span class="pl-c1">@code_typed</span> <span class="pl-c1">softmax</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(softmax), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Int64,1}}</span>((<span class="pl-c1">3</span>,)))
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(max), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (max)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (Mjolnir<span class="pl-k">.</span><span class="pl-c1">KwFunc</span><span class="pl-c1">{typeof(mapreduce)}</span>())((dims <span class="pl-k">=</span> <span class="pl-c1">1</span>,), mapreduce, identity, <span class="pl-k">%</span><span class="pl-c1">3</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(<span class="pl-k">-</span>), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-k">-</span>)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span> (broadcast)(<span class="pl-k">%</span><span class="pl-c1">5</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>) <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Int64,1}}</span>((<span class="pl-c1">3</span>,))
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(exp), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (Float64)(<span class="pl-k">%</span><span class="pl-c1">2</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (exp)(<span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span> (broadcast)(<span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">6</span>) <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Float64,1}}</span>((<span class="pl-c1">3</span>,))
  <span class="pl-k">%</span><span class="pl-c1">9</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(add_sum), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-k">+</span>)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span> (Mjolnir<span class="pl-k">.</span><span class="pl-c1">KwFunc</span><span class="pl-c1">{typeof(mapreduce)}</span>())((dims <span class="pl-k">=</span> <span class="pl-c1">1</span>,), mapreduce, identity, <span class="pl-k">%</span><span class="pl-c1">9</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
  <span class="pl-k">%</span><span class="pl-c1">11</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">const</span>(<span class="pl-k">/</span>), <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (<span class="pl-k">/</span>)(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">12</span> <span class="pl-k">=</span> (broadcast)(<span class="pl-k">%</span><span class="pl-c1">11</span>, <span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-k">%</span><span class="pl-c1">10</span>) <span class="pl-k">::</span> <span class="pl-c1">Mjolnir.Shape{Array{Float64,1}}</span>((<span class="pl-c1">3</span>,))
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">12</span></pre></div>
</details>
<p>See the final XLA code:</p>
<details>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_xla</span> <span class="pl-c1">softmax</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
<span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">1</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>[<span class="pl-c1">3</span>])
  <span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Max</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Reduce</span>(<span class="pl-c1">1</span>))(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>)
  <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Sub</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">5</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Map</span>())(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>)
  <span class="pl-k">%</span><span class="pl-c1">6</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Int64</span>)
      <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">ConvertElementType</span>(Float64))(<span class="pl-k">%</span><span class="pl-c1">2</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Exp</span>())(<span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">7</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Map</span>())(<span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-k">%</span><span class="pl-c1">5</span>)
  <span class="pl-k">%</span><span class="pl-c1">8</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Add</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">9</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Reduce</span>(<span class="pl-c1">1</span>))(<span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-c1">0.0</span>)
  <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span>
    <span class="pl-c1">1</span><span class="pl-k">:</span> (<span class="pl-k">%</span><span class="pl-c1">2</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>, <span class="pl-k">%</span><span class="pl-c1">3</span> <span class="pl-k">::</span> <span class="pl-c1">Float64</span>)
      <span class="pl-k">%</span><span class="pl-c1">4</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Div</span>())(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">3</span>) <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
      <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">4</span>
  <span class="pl-k">%</span><span class="pl-c1">11</span> <span class="pl-k">=</span> (XLA<span class="pl-k">.</span><span class="pl-c1">Map</span>())(<span class="pl-k">%</span><span class="pl-c1">10</span>, <span class="pl-k">%</span><span class="pl-c1">7</span>, <span class="pl-k">%</span><span class="pl-c1">9</span>)
  <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">11</span></pre></div>
</details>
<p>XLA's internal text representation, HLO text:</p>
<details>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_hlo</span> <span class="pl-c1">softmax</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])
HloModule name__44<span class="pl-c1">.31</span>

name__45<span class="pl-c1">.3</span> {
  parameter<span class="pl-c1">.4</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter<span class="pl-c1">.5</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT maximum<span class="pl-c1">.6</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">maximum</span>(parameter<span class="pl-c1">.4</span>, parameter<span class="pl-c1">.5</span>)
}

name__46<span class="pl-c1">.8</span> {
  parameter<span class="pl-c1">.9</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter<span class="pl-c1">.10</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT subtract<span class="pl-c1">.11</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">subtract</span>(parameter<span class="pl-c1">.9</span>, parameter<span class="pl-c1">.10</span>)
}

name__47<span class="pl-c1">.14</span> {
  parameter<span class="pl-c1">.15</span> <span class="pl-k">=</span> s64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  convert<span class="pl-c1">.16</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">convert</span>(parameter<span class="pl-c1">.15</span>)
  ROOT exponential<span class="pl-c1">.17</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">exponential</span>(convert<span class="pl-c1">.16</span>)
}

name__48<span class="pl-c1">.20</span> {
  parameter<span class="pl-c1">.21</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter<span class="pl-c1">.22</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT add<span class="pl-c1">.23</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">add</span>(parameter<span class="pl-c1">.21</span>, parameter<span class="pl-c1">.22</span>)
}

name__49<span class="pl-c1">.25</span> {
  parameter<span class="pl-c1">.26</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  parameter<span class="pl-c1">.27</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">parameter</span>(<span class="pl-c1">1</span>)
  ROOT divide<span class="pl-c1">.28</span> <span class="pl-k">=</span> f64[]invalid{} <span class="pl-c1">divide</span>(parameter<span class="pl-c1">.26</span>, parameter<span class="pl-c1">.27</span>)
}

ENTRY name__44<span class="pl-c1">.31</span> {
  parameter<span class="pl-c1">.1</span> <span class="pl-k">=</span> s64[<span class="pl-c1">3</span>] <span class="pl-c1">parameter</span>(<span class="pl-c1">0</span>)
  constant<span class="pl-c1">.2</span> <span class="pl-k">=</span> s64[] <span class="pl-c1">constant</span>(<span class="pl-c1">0</span>)
  reduce<span class="pl-c1">.7</span> <span class="pl-k">=</span> s64[] <span class="pl-c1">reduce</span>(parameter<span class="pl-c1">.1</span>, constant<span class="pl-c1">.2</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__45<span class="pl-c1">.3</span>
  broadcast<span class="pl-c1">.12</span> <span class="pl-k">=</span> s64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">broadcast</span>(reduce<span class="pl-c1">.7</span>), dimensions<span class="pl-k">=</span>{}
  map<span class="pl-c1">.13</span> <span class="pl-k">=</span> s64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">map</span>(parameter<span class="pl-c1">.1</span>, broadcast<span class="pl-c1">.12</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__46<span class="pl-c1">.8</span>
  map<span class="pl-c1">.18</span> <span class="pl-k">=</span> f64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">map</span>(map<span class="pl-c1">.13</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__47<span class="pl-c1">.14</span>
  constant<span class="pl-c1">.19</span> <span class="pl-k">=</span> f64[] <span class="pl-c1">constant</span>(<span class="pl-c1">0</span>)
  reduce<span class="pl-c1">.24</span> <span class="pl-k">=</span> f64[] <span class="pl-c1">reduce</span>(map<span class="pl-c1">.18</span>, constant<span class="pl-c1">.19</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__48<span class="pl-c1">.20</span>
  broadcast<span class="pl-c1">.29</span> <span class="pl-k">=</span> f64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">broadcast</span>(reduce<span class="pl-c1">.24</span>), dimensions<span class="pl-k">=</span>{}
  ROOT map<span class="pl-c1">.30</span> <span class="pl-k">=</span> f64[<span class="pl-c1">3</span>]{<span class="pl-c1">0</span>} <span class="pl-c1">map</span>(map<span class="pl-c1">.18</span>, broadcast<span class="pl-c1">.29</span>), dimensions<span class="pl-k">=</span>{<span class="pl-c1">0</span>}, to_apply<span class="pl-k">=</span>name__49<span class="pl-c1">.25</span>
}</pre></div>
</details>
<p>You may want to start with simpler examples like <code>@code_xla 1+2.0</code> or
<code>@code_xla (1+2im)*(3+4im)</code>.</p>
<h2><a id="user-content-limitations--notes" class="anchor" aria-hidden="true" href="#limitations--notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations &amp; Notes</h2>
<p>XLA is a specialised backend with limitations, primarily in terms of support for dynamic memory allocation – so we don't expect to be able to support all Julia code. Vectorised array code without too much fanciness (including Flux models) should work well; just don't expect to point XLA at any huge Julia codebase and have it work out of the box.</p>
<p>Error handling is so-so right now. If you run into errors, please do open issues; we'll either support your use case or at least add better diagnostics to explain why the code can't be compiled.</p>
<p>XLA reuses <a href="https://github.com/google/jax">JAX's</a> build of XLA via <code>pip</code>. A CPU-only build is installed by default; if you want GPU support you can <a href="https://github.com/JuliaPy/PyCall.jl#specifying-the-python-version">use your own python</a> and install the GPU-enabled jaxlib as per the <a href="https://github.com/google/jax#pip-installation">jax docs</a>. The currently supported jaxlib version is specified in <a href="deps/build.jl">build.jl</a>.</p>
</article></div>