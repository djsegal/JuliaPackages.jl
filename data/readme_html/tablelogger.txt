<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tablelogger" class="anchor" aria-hidden="true" href="#tablelogger"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TableLogger</h1>
<p dir="auto"><a href="https://wikunia.github.io/TableLogger.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://wikunia.github.io/TableLogger.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/wikunia/TableLogger.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/wikunia/TableLogger.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/wikunia/TableLogger.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8f011e9ab1cbd0c22dc4aead7c20e82a559445e019163d73e80468d76ccce57/68747470733a2f2f636f6465636f762e696f2f67682f77696b756e69612f5461626c654c6f676765722e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/wikunia/TableLogger.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>TableLogger.jl</strong> is a Julia package which allows you to easily log data in a table for a nice visual tabular log.
This can be used for your machine learning, optimization or any other project in which you want to have an updated line in your table every x seconds or whenever there was a significant change.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install the package via the Julia package manager.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add TableLogger"><pre>] add TableLogger</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">First you need to define the structure of the table that you want to display.</p>
<p dir="auto">The following will create three columns <code>#Open</code>, <code>#Closed</code> and <code>Time [s]</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="table = init_log_table(
    (id=:open_nodes, name=&quot;#Open&quot;),
    (id=:closed_nodes, name=&quot;#Closed&quot;),
    (id=:time, name=&quot;Time [s]&quot;, width=10, alignment=:right);
    width = 20,
    alignment = :center
)"><pre>table <span class="pl-k">=</span> <span class="pl-c1">init_log_table</span>(
    (id<span class="pl-k">=</span><span class="pl-c1">:open_nodes</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#Open<span class="pl-pds">"</span></span>),
    (id<span class="pl-k">=</span><span class="pl-c1">:closed_nodes</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#Closed<span class="pl-pds">"</span></span>),
    (id<span class="pl-k">=</span><span class="pl-c1">:time</span>, name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time [s]<span class="pl-pds">"</span></span>, width<span class="pl-k">=</span><span class="pl-c1">10</span>, alignment<span class="pl-k">=</span><span class="pl-c1">:right</span>);
    width <span class="pl-k">=</span> <span class="pl-c1">20</span>,
    alignment <span class="pl-k">=</span> <span class="pl-c1">:center</span>
)</pre></div>
<p dir="auto">You can then print the header with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="print_header(table)"><pre><span class="pl-c1">print_header</span>(table)</pre></div>
<p dir="auto">which will print:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="       #Open              #Closed        Time [s] 
=================================================="><pre class="notranslate"><code>       #Open              #Closed        Time [s] 
==================================================
</code></pre></div>
<p dir="auto">now you can add values to the each column with <code>set_value!</code> i.e:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="set_value!(table, :open_nodes, 10)
set_value!(table, :closed_nodes, 0)
set_value!(table, :time, 0.1)"><pre><span class="pl-c1">set_value!</span>(table, <span class="pl-c1">:open_nodes</span>, <span class="pl-c1">10</span>)
<span class="pl-c1">set_value!</span>(table, <span class="pl-c1">:closed_nodes</span>, <span class="pl-c1">0</span>)
<span class="pl-c1">set_value!</span>(table, <span class="pl-c1">:time</span>, <span class="pl-c1">0.1</span>)</pre></div>
<p dir="auto">then with <code>print_line(table)</code> a new line will be printed.
Such that together with the header your output would be:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="       #Open              #Closed        Time [s] 
==================================================
         10                  0                0.1  "><pre class="notranslate"><code>       #Open              #Closed        Time [s] 
==================================================
         10                  0                0.1  
</code></pre></div>
</article></div>