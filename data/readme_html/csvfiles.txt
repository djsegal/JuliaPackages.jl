<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-csvfiles" class="anchor" aria-hidden="true" href="#csvfiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSVFiles</h1>
<p><a href="http://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/ed51270ad41e2b842f9423b165977ac42f8498581be7c17c78818d1a45b834d5/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed." data-canonical-src="http://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/queryverse/CSVFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d98a6c82ef209f135d7cd676e36e2f68fc5b8039fb3e483758c168e89619610a/68747470733a2f2f7472617669732d63692e6f72672f717565727976657273652f43535646696c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/queryverse/CSVFiles.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/queryverse/csvfiles-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/321c728ffb9bfcd10ae8575244f8a366bdca9513bec51222c803acf44671c1e4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f326237326a6278306c657079636966632f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/2b72jbx0lepycifc/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/queryverse/CSVFiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a2bc24cd21d862dc2bbba7657e8594fc2667470867a9c9f53ac24066b898c740/687474703a2f2f636f6465636f762e696f2f6769746875622f717565727976657273652f43535646696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/queryverse/CSVFiles.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This package provides load and save support for CSV Files under the
<a href="https://github.com/JuliaIO/FileIO.jl">FileIO.jl</a> package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Use <code>Pkg.add("CSVFiles")</code> in Julia to install CSVFiles and its dependencies.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-load-a-csv-file" class="anchor" aria-hidden="true" href="#load-a-csv-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Load a CSV file</h3>
<p>To read a CSV file into a <code>DataFrame</code>, use the following julia code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles, DataFrames

df = DataFrame(load(&quot;data.csv&quot;))
"><pre><span class="pl-k">using</span> CSVFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>))</pre></div>
<p>To read a gzipped CSV file into a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles, DataFrames

df = DataFrame(load(File(format&quot;CSV&quot;, &quot;data.csv.gz&quot;)))
"><pre><span class="pl-k">using</span> CSVFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">load</span>(<span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>CSV<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data.csv.gz<span class="pl-pds">"</span></span>)))</pre></div>
<p>The call to <code>load</code> returns a <code>struct</code> that is an <a href="https://github.com/queryverse/IterableTables.jl">IterableTable.jl</a>, so it can be passed to any function that can handle iterable tables, i.e. all the sinks in <a href="https://github.com/queryverse/IterableTables.jl">IterableTable.jl</a>. Here are some examples of materializing a CSV file into data structures that are not a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles, DataTables, IndexedTables, TimeSeries, Temporal, Gadfly

# Load into a DataTable
dt = DataTable(load(&quot;data.csv&quot;))

# Load into an IndexedTable
it = IndexedTable(load(&quot;data.csv&quot;))

# Load into a TimeArray
ta = TimeArray(load(&quot;data.csv&quot;))

# Load into a TS
ts = TS(load(&quot;data.csv&quot;))

# Plot directly with Gadfly
plot(load(&quot;data.csv&quot;), x=:a, y=:b, Geom.line)
"><pre><span class="pl-k">using</span> CSVFiles, DataTables, IndexedTables, TimeSeries, Temporal, Gadfly

<span class="pl-c"><span class="pl-c">#</span> Load into a DataTable</span>
dt <span class="pl-k">=</span> <span class="pl-c1">DataTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into an IndexedTable</span>
it <span class="pl-k">=</span> <span class="pl-c1">IndexedTable</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into a TimeArray</span>
ta <span class="pl-k">=</span> <span class="pl-c1">TimeArray</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Load into a TS</span>
ts <span class="pl-k">=</span> <span class="pl-c1">TS</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>))

<span class="pl-c"><span class="pl-c">#</span> Plot directly with Gadfly</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>), x<span class="pl-k">=</span><span class="pl-c1">:a</span>, y<span class="pl-k">=</span><span class="pl-c1">:b</span>, Geom<span class="pl-k">.</span>line)</pre></div>
<p>One can load both local files and files that can be downloaded via either http or https. To download
from a remote URL, simply pass a URL to the <code>load</code> function instead of just a filename. In addition
one can also load data from an <code>IO</code> object, i.e. any stream. The syntax
that scenario is</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="df = DataFrame(load(Stream(format&quot;CSV&quot;, io)))
"><pre>df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">load</span>(<span class="pl-c1">Stream</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>CSV<span class="pl-pds">"</span></span>, io)))</pre></div>
<p>The <code>load</code> function also takes a number of parameters:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="load(f::FileIO.File{FileIO.format&quot;CSV&quot;}; &lt;arguments&gt;...)
"><pre><span class="pl-c1">load</span>(f<span class="pl-k">::</span><span class="pl-c1">FileIO.File{FileIO.format"CSV"}</span>; <span class="pl-k">&lt;</span>arguments<span class="pl-k">&gt;</span><span class="pl-k">...</span>)</pre></div>
<p>For example, to load a CSV file that doesn't have the extension ".csv", you need</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="load(File(format&quot;CSV&quot;, &quot;csv_file.txt&quot;))
"><pre><span class="pl-c1">load</span>(<span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>CSV<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>csv_file.txt<span class="pl-pds">"</span></span>))</pre></div>
<h4><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments:</h4>
<ul>
<li><code>delim</code>: the delimiter character</li>
<li><code>spacedelim</code>: a <code>Bool</code> indicating whether columns are space delimited. If <code>true</code>, the value of <code>delim</code> is ignored</li>
<li><code>quotechar</code>: character used to quote strings, defaults to "</li>
<li><code>escapechar</code>: character used to escape quotechar in strings. (could be the same as quotechar)</li>
<li><code>commentchar</code>: ignore lines that begin with commentchar</li>
<li><code>row_estimate</code>: estimated number of rows in the file. Defaults to 0 in which case we try to estimate this.</li>
<li><code>skiplines_begin</code>: number of rows to skip at the beginning of the file.</li>
<li><code>header_exists</code>: boolean specifying whether CSV file contains a header</li>
<li><code>colnames</code>: manually specified column names. Could be a vector or a dictionary from Int index (the column) to String column name.</li>
<li><code>colparsers</code>: Parsers to use for specified columns. This can be a vector or a dictionary from column name / column index (Int) to a "parser". The simplest parser is a type such as Int, Float64. It can also be a dateformat"...", see CustomParser if you want to plug in custom parsing behavior</li>
<li><code>type_detect_rows</code>: number of rows to use to infer the initial colparsers defaults to 20.</li>
</ul>
<p>These are simply the arguments from <a href="https://github.com/JuliaComputing/TextParse.jl">TextParse.jl</a>, which is used under the hood to read CSV files.</p>
<h3><a id="user-content-save-a-csv-file" class="anchor" aria-hidden="true" href="#save-a-csv-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Save a CSV file</h3>
<p>The following code saves any iterable table as a CSV file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles

save(&quot;output.csv&quot;, it)
"><pre><span class="pl-k">using</span> CSVFiles

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.csv<span class="pl-pds">"</span></span>, it)</pre></div>
<p>This will work as long as <code>it</code> is any of the types supported as sources in <a href="https://github.com/queryverse/IterableTables.jl">IterableTables.jl</a>.</p>
<p>Compressed CSV files can be created by specifying the <code>.gz</code> file extension:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles

save(File(format&quot;CSV&quot;, &quot;output.csv.gz&quot;), df)
"><pre><span class="pl-k">using</span> CSVFiles

<span class="pl-c1">save</span>(<span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>CSV<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>output.csv.gz<span class="pl-pds">"</span></span>), df)</pre></div>
<p>One can also save into an arbitrary stream:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles

save(Stream(format&quot;CSV&quot;, io), it)
"><pre><span class="pl-k">using</span> CSVFiles

<span class="pl-c1">save</span>(<span class="pl-c1">Stream</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">format</span>"</span>CSV<span class="pl-pds">"</span></span>, io), it)</pre></div>
<p>The <code>save</code> function takes a number of arguments:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="save(f::FileIO.File{FileIO.format&quot;CSV&quot;}, data; delim=',', quotechar='&quot;', escapechar='&quot;', nastring=&quot;NA&quot;, header=true)
"><pre><span class="pl-c1">save</span>(f<span class="pl-k">::</span><span class="pl-c1">FileIO.File{FileIO.format"CSV"}</span>, data; delim<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>, quotechar<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>"<span class="pl-pds">'</span></span>, escapechar<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>"<span class="pl-pds">'</span></span>, nastring<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>NA<span class="pl-pds">"</span></span>, header<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h4><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h4>
<ul>
<li><code>delim</code>: the delimiter character, defaults to <code>,</code>.</li>
<li><code>quotechar</code>: character used to quote strings, defaults to <code>"</code>.</li>
<li><code>escapechar</code>: character used to escape <code>quotechar</code> in strings, defaults to <code>\</code>.</li>
<li><code>nastring</code>: string to insert in the place of missing values, defaults to <code>NA</code>.</li>
<li><code>header</code>: whether a header should be written, defaults to ``true.</li>
</ul>
<h3><a id="user-content-using-the-pipe-syntax" class="anchor" aria-hidden="true" href="#using-the-pipe-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using the pipe syntax</h3>
<p>Both <code>load</code> and <code>save</code> also support the pipe syntax. For example, to load a CSV file into a <code>DataFrame</code>, one can use the following code:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles, DataFrames

df = load(&quot;data.csv&quot;) |&gt; DataFrame
"><pre><span class="pl-k">using</span> CSVFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.csv<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<p>To save an iterable table, one can use the following form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSVFiles, DataFrames

df = # Aquire a DataFrame somehow

df |&gt; save(&quot;output.csv&quot;)
"><pre><span class="pl-k">using</span> CSVFiles, DataFrames

df <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> Aquire a DataFrame somehow</span>

df <span class="pl-k">|&gt;</span> <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>output.csv<span class="pl-pds">"</span></span>)</pre></div>
<p>The pipe syntax is especially useful when combining it with <a href="https://github.com/queryverse/Query.jl">Query.jl</a> queries, for example one can easily load a CSV file, pipe it into a query, then pipe it to the <code>save</code> function to store the results in a new file.</p>
</article></div>