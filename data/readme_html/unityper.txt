<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-unityper" class="anchor" aria-hidden="true" href="#unityper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unityper</h1>
<p dir="auto"><a href="https://YingboMa.github.io/Unityper.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://YingboMa.github.io/Unityper.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/YingboMa/Unityper.jl/actions"><img src="https://github.com/YingboMa/Unityper.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/YingboMa/Unityper.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/14ac64cd955be8a9cdea6e9d12d263a6723d80ca6fb5277b549265f8172b16e8/68747470733a2f2f636f6465636f762e696f2f67682f59696e67626f4d612f556e6974797065722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/YingboMa/Unityper.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Unityper's main capability is to "compactify" structures in <strong>static single
inheritance</strong>. For instance</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="abstract type AA end
Base.@kwdef struct A2 &lt;: AA
    common_field::Int = 0
    a::Bool = true
    b::Int = 10
end
Base.@kwdef struct B2 &lt;: AA
    common_field::Int = 0
    a::Int = 1
    b::Float64 = 1.0
    d::Complex = 1 + 1.0im # not isbits
end
Base.@kwdef struct C2 &lt;: AA
    common_field::Int = 0
    b::Float64 = 2.0
    d::Bool = false
    e::Float64 = 3.0
    k::Complex{Real} = 1 + 2im # not isbits
end
Base.@kwdef struct D2 &lt;: AA
    common_field::Int = 0
    b::Any = &quot;hi&quot; # not isbits
end"><pre><span class="pl-k">abstract type</span> AA <span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">struct</span> A2 <span class="pl-k">&lt;:</span> <span class="pl-c1">AA</span>
    common_field<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
    a<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>
    b<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">struct</span> B2 <span class="pl-k">&lt;:</span> <span class="pl-c1">AA</span>
    common_field<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
    a<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>
    b<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    d<span class="pl-k">::</span><span class="pl-c1">Complex</span> <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span> <span class="pl-c"><span class="pl-c">#</span> not isbits</span>
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">struct</span> C2 <span class="pl-k">&lt;:</span> <span class="pl-c1">AA</span>
    common_field<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
    b<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
    d<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>
    e<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">3.0</span>
    k<span class="pl-k">::</span><span class="pl-c1">Complex{Real}</span> <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span> <span class="pl-c"><span class="pl-c">#</span> not isbits</span>
<span class="pl-k">end</span>
Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">struct</span> D2 <span class="pl-k">&lt;:</span> <span class="pl-c1">AA</span>
    common_field<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
    b<span class="pl-k">::</span><span class="pl-c1">Any</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> not isbits</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">can be compactified by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@compactify begin
    @abstract struct AT
        common_field::Int = 0
    end
    struct A &lt;: AT
        a::Bool = true
        b::Int = 10
    end
    struct B &lt;: AT
        a::Int = 1
        b::Float64 = 1.0
        d::Complex = 1 + 1.0im # not isbits
    end
    struct C &lt;: AT
        b::Float64 = 2.0
        d::Bool = false
        e::Float64 = 3.0
        k::Complex{Real} = 1 + 2im # not isbits
    end
    struct D &lt;: AT
        b::Any = &quot;hi&quot; # not isbits
    end
end"><pre><span class="pl-c1">@compactify</span> <span class="pl-k">begin</span>
    <span class="pl-c1">@abstract</span> <span class="pl-k">struct</span> AT
        common_field<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">end</span>
    <span class="pl-k">struct</span> A <span class="pl-k">&lt;:</span> <span class="pl-c1">AT</span>
        a<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>
        b<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">10</span>
    <span class="pl-k">end</span>
    <span class="pl-k">struct</span> B <span class="pl-k">&lt;:</span> <span class="pl-c1">AT</span>
        a<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>
        b<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
        d<span class="pl-k">::</span><span class="pl-c1">Complex</span> <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span> <span class="pl-c"><span class="pl-c">#</span> not isbits</span>
    <span class="pl-k">end</span>
    <span class="pl-k">struct</span> C <span class="pl-k">&lt;:</span> <span class="pl-c1">AT</span>
        b<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
        d<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>
        e<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">3.0</span>
        k<span class="pl-k">::</span><span class="pl-c1">Complex{Real}</span> <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span> <span class="pl-c"><span class="pl-c">#</span> not isbits</span>
    <span class="pl-k">end</span>
    <span class="pl-k">struct</span> D <span class="pl-k">&lt;:</span> <span class="pl-c1">AT</span>
        b<span class="pl-k">::</span><span class="pl-c1">Any</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> not isbits</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Note that the concrete types <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> here are only conceptual,
and Unityper compactifies these types into a single <code>AT</code> type. Hence, to check
concrete types, ones needs to use Unityper's <code>@compactified</code> macro</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="foo!(xs) = for i in eachindex(xs)
    @inbounds x = xs[i]
    @inbounds xs[i] = @compactified x::AT begin
        A =&gt; D()
        B =&gt; A()
        C =&gt; B()
        D =&gt; A()
    end
end"><pre><span class="pl-en">foo!</span>(xs) <span class="pl-k">=</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(xs)
    <span class="pl-c1">@inbounds</span> x <span class="pl-k">=</span> xs[i]
    <span class="pl-c1">@inbounds</span> xs[i] <span class="pl-k">=</span> <span class="pl-c1">@compactified</span> x<span class="pl-k">::</span><span class="pl-c1">AT</span> <span class="pl-k">begin</span>
        A <span class="pl-k">=&gt;</span> <span class="pl-c1">D</span>()
        B <span class="pl-k">=&gt;</span> <span class="pl-c1">A</span>()
        C <span class="pl-k">=&gt;</span> <span class="pl-c1">B</span>()
        D <span class="pl-k">=&gt;</span> <span class="pl-c1">A</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The above code is equivalent with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="goo!(xs) = for i in eachindex(xs)
    @inbounds x = xs[i]
    @inbounds xs[i] = x isa A2 ? D2() :
                      x isa B2 ? A2() :
                      x isa C2 ? B2() :
                      x isa D2 ? A2() : error()
end"><pre><span class="pl-en">goo!</span>(xs) <span class="pl-k">=</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(xs)
    <span class="pl-c1">@inbounds</span> x <span class="pl-k">=</span> xs[i]
    <span class="pl-c1">@inbounds</span> xs[i] <span class="pl-k">=</span> x <span class="pl-k">isa</span> A2 <span class="pl-k">?</span> <span class="pl-c1">D2</span>() <span class="pl-k">:</span>
                      x <span class="pl-k">isa</span> B2 <span class="pl-k">?</span> <span class="pl-c1">A2</span>() <span class="pl-k">:</span>
                      x <span class="pl-k">isa</span> C2 <span class="pl-k">?</span> <span class="pl-c1">B2</span>() <span class="pl-k">:</span>
                      x <span class="pl-k">isa</span> D2 <span class="pl-k">?</span> <span class="pl-c1">A2</span>() <span class="pl-k">:</span> <span class="pl-c1">error</span>()
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now, let's benchmark these implementations</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Random
rng = Random.MersenneTwister(123)
gs = map(x-&gt;rand(rng, (A2(), B2(), C2(), D2())), 1:10000);
rng = Random.MersenneTwister(123)
xs = map(x-&gt;rand(rng, (A(), B(), C(), D())), 1:10000);
using BenchmarkTools
@btime foo!($xs);
@btime goo!($gs);"><pre><span class="pl-k">using</span> Random
rng <span class="pl-k">=</span> Random<span class="pl-k">.</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">123</span>)
gs <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">rand</span>(rng, (<span class="pl-c1">A2</span>(), <span class="pl-c1">B2</span>(), <span class="pl-c1">C2</span>(), <span class="pl-c1">D2</span>())), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>);
rng <span class="pl-k">=</span> Random<span class="pl-k">.</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">123</span>)
xs <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">rand</span>(rng, (<span class="pl-c1">A</span>(), <span class="pl-c1">B</span>(), <span class="pl-c1">C</span>(), <span class="pl-c1">D</span>())), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>);
<span class="pl-k">using</span> BenchmarkTools
<span class="pl-c1">@btime</span> <span class="pl-c1">foo!</span>(<span class="pl-k">$</span>xs);
<span class="pl-c1">@btime</span> <span class="pl-c1">goo!</span>(<span class="pl-k">$</span>gs);</pre></div>
<p dir="auto">On my laptop, the benchmark result is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @btime foo!($xs);
  58.619 μs (0 allocations: 0 bytes)

julia&gt; @btime goo!($gs);
  116.980 μs (10000 allocations: 312.50 KiB)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo!</span>(<span class="pl-k">$</span>xs);
  <span class="pl-c1">58.619</span> μs (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">goo!</span>(<span class="pl-k">$</span>gs);
  <span class="pl-c1">116.980</span> μs (<span class="pl-c1">10000</span> allocations<span class="pl-k">:</span> <span class="pl-c1">312.50</span> KiB)</pre></div>
<p dir="auto">Keep in mind that the <code>goo!</code> function is optimal in the sense that it explicitly
checks all the sub-types of <code>AA</code>. We can see that Unityper gives a 2x speed up
even in the case where the ordinary Julia code is close to optimal.</p>
</article></div>