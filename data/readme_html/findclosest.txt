<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-findclosestjl" class="anchor" aria-hidden="true" href="#findclosestjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FindClosest.jl</h1>
<p dir="auto"><a href="https://github.com/pablosanjose/FindClosest.jl/actions"><img src="https://github.com/pablosanjose/FindClosest.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">The Findclosest.jl package exports a single function <code>findclosest(pts[, dist])</code> that finds the closest pair of points in <code>pts</code>. It employs a standard multi-dimensional divide-and-conquer recursive algorithm with optimal scaling <code>O(n log(n))</code> in the number of points <code>n</code>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using FindClosest, StaticArrays

julia&gt; pts = rand(SVector{3,Float64}, 10^5);

julia&gt; @time findclosest(pts)
  0.083620 seconds (29 allocations: 5.049 MiB)
(0.00018927587118480567, (4517, 34872))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FindClosest, StaticArrays

julia<span class="pl-k">&gt;</span> pts <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SVector{<span class="pl-c1">3</span>,Float64}, <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">findclosest</span>(pts)
  <span class="pl-c1">0.083620</span> seconds (<span class="pl-c1">29</span> allocations<span class="pl-k">:</span> <span class="pl-c1">5.049</span> MiB)
(<span class="pl-c1">0.00018927587118480567</span>, (<span class="pl-c1">4517</span>, <span class="pl-c1">34872</span>))</pre></div>
<p dir="auto">The returned tuple has the form <code>(d, (i, j))</code>, where <code>(i, j)</code> are the indices of the two closest points in <code>pts</code> and <code>d</code> is their distance <code>dist(pᵢ, pⱼ)</code>.</p>
<p dir="auto">Possible future developments include multithreading, non-recursive algorithms and <code>O(1)</code> memory usage</p>
</article></div>