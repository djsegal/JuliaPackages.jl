<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-plutoargsjl" class="anchor" aria-hidden="true" href="#plutoargsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PlutoArgs.jl</h1>
<p dir="auto">A tiny library that can wrap PlutoUI.jl elements so they can be used as command line arguments too.</p>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<p dir="auto">Wrap <code>Arg(&lt;option name&gt;, &lt;control element&gt;)</code> around your control elements.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@bind enabled Arg(&quot;enabled&quot;, CheckBox())
@bind vegetable Arg(&quot;vegetable&quot;, MultiSelect([&quot;potato&quot;, &quot;carrot&quot;, &quot;beetroot&quot;]); required=false)"><pre class="notranslate"><code>@bind enabled Arg("enabled", CheckBox())
@bind vegetable Arg("vegetable", MultiSelect(["potato", "carrot", "beetroot"]); required=false)
</code></pre></div>
<p dir="auto">Run this in Pluto to get UI controls, or from the CLI like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia &lt;path to script&gt; --enabled true --vegetable potato carrot"><pre class="notranslate"><code>julia &lt;path to script&gt; --enabled true --vegetable potato carrot
</code></pre></div>
<p dir="auto"><code>Arg</code> is the only interface, so this is the entire documentation:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    Arg(name::String, element; required=true, short_name=nothing, type=nothing)

Construct a wrapper around a Pluto element that is a CLI option called
--&lt;name&gt; if not run from Pluto.

Keyword arguments:
- `required`: if passing this option is required if running from CLI. If
    `required == false` and the option is not passed, the `initial_value`of the 
    PlutoUI element will be taken.
- `short_name`: the single-dashed short cli name, if you pass &quot;k&quot; it will be -k
- `type`: override type to convert the CLI argument into, if `nothing`, the type of
    `initial_value` will be considered
- `args`: CLI args (defaults to `ARGS`)"><pre class="notranslate"><code>    Arg(name::String, element; required=true, short_name=nothing, type=nothing)

Construct a wrapper around a Pluto element that is a CLI option called
--&lt;name&gt; if not run from Pluto.

Keyword arguments:
- `required`: if passing this option is required if running from CLI. If
    `required == false` and the option is not passed, the `initial_value`of the 
    PlutoUI element will be taken.
- `short_name`: the single-dashed short cli name, if you pass "k" it will be -k
- `type`: override type to convert the CLI argument into, if `nothing`, the type of
    `initial_value` will be considered
- `args`: CLI args (defaults to `ARGS`)
</code></pre></div>
<h3 dir="auto"><a id="user-content-sample-notebook" class="anchor" aria-hidden="true" href="#sample-notebook"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sample notebook</h3>
<p dir="auto">The notebook <code>run_in_pluto_or_cli.jl</code> has a few examples that you can try.</p>
<h3 dir="auto"><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caveats</h3>
<ul dir="auto">
<li>Using a self-cooked argument parsing that will probably break sometimes</li>
<li>One generic small function for all elements, so probably won't always work as expected</li>
<li>No argument overview or help text, as everything is dynamic</li>
<li>PlutoArgs does not complain if an argument doesn't exist, because it might be needed later</li>
<li>Arguments are not (yet) validated but will be once Pluto supports <code>validate_value</code></li>
</ul>
</article></div>