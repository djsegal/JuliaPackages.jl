<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
<p dir="auto">SymbolicRegression.jl searches for symbolic expressions which optimize a particular objective.</p>
<details open="" class="details-reset border rounded-2">
  <summary class="px-3 py-2">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-camera-video">
    <path d="M16 3.75v8.5a.75.75 0 0 1-1.136.643L11 10.575v.675A1.75 1.75 0 0 1 9.25 13h-7.5A1.75 1.75 0 0 1 0 11.25v-6.5C0 3.784.784 3 1.75 3h7.5c.966 0 1.75.784 1.75 1.75v.675l3.864-2.318A.75.75 0 0 1 16 3.75Zm-6.5 1a.25.25 0 0 0-.25-.25h-7.5a.25.25 0 0 0-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-6.5ZM11 8.825l3.5 2.1v-5.85l-3.5 2.1Z"></path>
</svg>
    <span aria-label="Video description sr_animation.mp4" class="m-1">sr_animation.mp4</span>
    <span class="dropdown-caret"></span>
  </summary>

  <video src="https://user-images.githubusercontent.com/7593028/238192048-f5b68f1f-9830-497f-a197-6ae332c94ee0.mp4" data-canonical-src="https://user-images.githubusercontent.com/7593028/238192048-f5b68f1f-9830-497f-a197-6ae332c94ee0.mp4" controls="controls" muted="muted" class="d-block rounded-bottom-2 border-top width-fit" style="max-height:640px; min-height: 200px">

  </video>
</details>

<table>
<thead>
<tr>
<th align="center">Latest release</th>
<th align="center">Documentation</th>
<th align="center">Forums</th>
<th align="center">Paper</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://juliahub.com/ui/Packages/SymbolicRegression/X2eIS" rel="nofollow"><img src="https://camo.githubusercontent.com/a0a5dc19a63da9881743ea36c0f7208f361c9d6e5408680826898d37fb53c672/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53796d626f6c696352656772657373696f6e2f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/SymbolicRegression/version.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://astroautomata.com/SymbolicRegression.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/MilesCranmer/PySR/discussions"><img src="https://camo.githubusercontent.com/be203bd612f456112fdb758c5748d697e2dd175e07abe083530b2632a8cfa989/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f64697363757373696f6e732d6769746875622d696e666f726d6174696f6e616c" alt="Discussions" data-canonical-src="https://img.shields.io/badge/discussions-github-informational" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://arxiv.org/abs/2305.01582" rel="nofollow"><img src="https://camo.githubusercontent.com/5c2f17134ba22eee6750106c8503a7d564de900c3acd6a834677e4e49fcfa3cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323330352e30313538322d623331623162" alt="Paper" data-canonical-src="https://img.shields.io/badge/arXiv-2305.01582-b31b1b" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="center">Build status</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href=".github/workflows/CI.yml"><img src="https://github.com/MilesCranmer/SymbolicRegression.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/MilesCranmer/SymbolicRegression.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6cb0b09749d1bca5145911a027ad57db3e7f3e994eb6cd58e8a2f6e1fafe6382/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4d696c65734372616e6d65722f53796d626f6c696352656772657373696f6e2e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/MilesCranmer/SymbolicRegression.jl/badge.svg?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Check out <a href="https://github.com/MilesCranmer/PySR">PySR</a> for
a Python frontend.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/7593028/196054732-5c399e82-23a8-4200-945a-67605f7501ab.png"><img src="https://user-images.githubusercontent.com/7593028/196054732-5c399e82-23a8-4200-945a-67605f7501ab.png" height="50%" width="50%" style="max-width: 100%;"></a></p>
</div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1147a346e52a581554d6115ccdbc695c1921a6abd7454592b47f797f51dc29d0/68747470733a2f2f617374726f6175746f6d6174612e636f6d2f646174612f73725f64656d6f5f696d616765312e706e67"><img src="https://camo.githubusercontent.com/1147a346e52a581554d6115ccdbc695c1921a6abd7454592b47f797f51dc29d0/68747470733a2f2f617374726f6175746f6d6174612e636f6d2f646174612f73725f64656d6f5f696d616765312e706e67" alt="demo1" width="700" data-canonical-src="https://astroautomata.com/data/sr_demo_image1.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0aa11e0205da06bb2425b277664a39033390e068baec90f206fd7c752f6d5a01/68747470733a2f2f617374726f6175746f6d6174612e636f6d2f646174612f73725f64656d6f5f696d616765322e706e67"><img src="https://camo.githubusercontent.com/0aa11e0205da06bb2425b277664a39033390e068baec90f206fd7c752f6d5a01/68747470733a2f2f617374726f6175746f6d6174612e636f6d2f646174612f73725f64656d6f5f696d616765322e706e67" alt="demo2" width="700" data-canonical-src="https://astroautomata.com/data/sr_demo_image2.png" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/MilesCranmer/PySR/blob/master/CITATION.md">Cite this software</a></p>
<h1 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h1>
<p dir="auto">Install in Julia with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;SymbolicRegression&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SymbolicRegression<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The heart of this package is the
<code>EquationSearch</code> function, which takes
a 2D array (shape [features, rows]) and attempts
to model a 1D array (shape [rows])
using analytic functional forms.</p>
<p dir="auto">Run with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SymbolicRegression

X = randn(Float32, 5, 100)
y = 2 * cos.(X[4, :]) + X[1, :] .^ 2 .- 2

options = SymbolicRegression.Options(
    binary_operators=[+, *, /, -],
    unary_operators=[cos, exp],
    npopulations=20
)

hall_of_fame = EquationSearch(
    X, y, niterations=40, options=options,
    parallelism=:multithreading
)"><pre><span class="pl-k">using</span> SymbolicRegression

X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(Float32, <span class="pl-c1">5</span>, <span class="pl-c1">100</span>)
y <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">cos</span>.(X[<span class="pl-c1">4</span>, :]) <span class="pl-k">+</span> X[<span class="pl-c1">1</span>, :] <span class="pl-k">.^</span> <span class="pl-c1">2</span> <span class="pl-k">.-</span> <span class="pl-c1">2</span>

options <span class="pl-k">=</span> SymbolicRegression<span class="pl-k">.</span><span class="pl-c1">Options</span>(
    binary_operators<span class="pl-k">=</span>[<span class="pl-k">+</span>, <span class="pl-k">*</span>, <span class="pl-k">/</span>, <span class="pl-k">-</span>],
    unary_operators<span class="pl-k">=</span>[cos, exp],
    npopulations<span class="pl-k">=</span><span class="pl-c1">20</span>
)

hall_of_fame <span class="pl-k">=</span> <span class="pl-c1">EquationSearch</span>(
    X, y, niterations<span class="pl-k">=</span><span class="pl-c1">40</span>, options<span class="pl-k">=</span>options,
    parallelism<span class="pl-k">=</span><span class="pl-c1">:multithreading</span>
)</pre></div>
<p dir="auto">You can view the resultant equations in the dominating Pareto front (best expression
seen at each complexity) with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dominating = calculate_pareto_frontier(hall_of_fame)"><pre>dominating <span class="pl-k">=</span> <span class="pl-c1">calculate_pareto_frontier</span>(hall_of_fame)</pre></div>
<p dir="auto">This is a vector of <code>PopMember</code> type - which contains the expression along with the score.
We can get the expressions with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="trees = [member.tree for member in dominating]"><pre>trees <span class="pl-k">=</span> [member<span class="pl-k">.</span>tree <span class="pl-k">for</span> member <span class="pl-k">in</span> dominating]</pre></div>
<p dir="auto">Each of these equations is a <code>Node{T}</code> type for some constant type <code>T</code> (like <code>Float32</code>).</p>
<p dir="auto">You can evaluate a given tree with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tree = trees[end]
output, did_succeed = eval_tree_array(tree, X, options)"><pre>tree <span class="pl-k">=</span> trees[<span class="pl-c1">end</span>]
output, did_succeed <span class="pl-k">=</span> <span class="pl-c1">eval_tree_array</span>(tree, X, options)</pre></div>
<p dir="auto">The <code>output</code> array will contain the result of the tree at each of the 100 rows.
This <code>did_succeed</code> flag detects whether an evaluation was successful, or whether
encountered any NaNs or Infs during calculation (such as, e.g., <code>sqrt(-1)</code>).</p>
<h2 dir="auto"><a id="user-content-constructing-trees" class="anchor" aria-hidden="true" href="#constructing-trees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Constructing trees</h2>
<p dir="auto">You can also manipulate and construct trees directly. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SymbolicRegression

options = Options(;
    binary_operators=[+, -, *, ^, /], unary_operators=[cos, exp, sin]
)
x1, x2, x3 = [Node(; feature=i) for i=1:3]
tree = cos(x1 - 3.2 * x2) - x1^3.2"><pre><span class="pl-k">using</span> SymbolicRegression

options <span class="pl-k">=</span> <span class="pl-c1">Options</span>(;
    binary_operators<span class="pl-k">=</span>[<span class="pl-k">+</span>, <span class="pl-k">-</span>, <span class="pl-k">*</span>, <span class="pl-k">^</span>, <span class="pl-k">/</span>], unary_operators<span class="pl-k">=</span>[cos, exp, sin]
)
x1, x2, x3 <span class="pl-k">=</span> [<span class="pl-c1">Node</span>(; feature<span class="pl-k">=</span>i) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
tree <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x1 <span class="pl-k">-</span> <span class="pl-c1">3.2</span> <span class="pl-k">*</span> x2) <span class="pl-k">-</span> x1<span class="pl-k">^</span><span class="pl-c1">3.2</span></pre></div>
<p dir="auto">This tree has <code>Float64</code> constants, so the type of the entire tree
will be promoted to <code>Node{Float64}</code>.</p>
<p dir="auto">We can convert all constants (recursively) to <code>Float32</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="float32_tree = convert(Node{Float32}, tree)"><pre>float32_tree <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Node{Float32}, tree)</pre></div>
<p dir="auto">We can then evaluate this tree on a dataset:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="X = rand(Float32, 3, 100)
output, did_succeed = eval_tree_array(tree, X, options)"><pre>X <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">3</span>, <span class="pl-c1">100</span>)
output, did_succeed <span class="pl-k">=</span> <span class="pl-c1">eval_tree_array</span>(tree, X, options)</pre></div>
<h2 dir="auto"><a id="user-content-exporting-to-symbolicutilsjl" class="anchor" aria-hidden="true" href="#exporting-to-symbolicutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exporting to SymbolicUtils.jl</h2>
<p dir="auto">We can view the equations in the dominating
Pareto frontier with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dominating = calculate_pareto_frontier(hall_of_fame)"><pre>dominating <span class="pl-k">=</span> <span class="pl-c1">calculate_pareto_frontier</span>(hall_of_fame)</pre></div>
<p dir="auto">We can convert the best equation
to <a href="https://github.com/JuliaSymbolics/SymbolicUtils.jl">SymbolicUtils.jl</a>
with the following function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="eqn = node_to_symbolic(dominating[end].tree, options)
println(simplify(eqn*5 + 3))"><pre>eqn <span class="pl-k">=</span> <span class="pl-c1">node_to_symbolic</span>(dominating[<span class="pl-c1">end</span>]<span class="pl-k">.</span>tree, options)
<span class="pl-c1">println</span>(<span class="pl-c1">simplify</span>(eqn<span class="pl-k">*</span><span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>))</pre></div>
<p dir="auto">We can also print out the full pareto frontier like so:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="println(&quot;Complexity\tMSE\tEquation&quot;)

for member in dominating
    complexity = compute_complexity(member, options)
    loss = member.loss
    string = string_tree(member.tree, options)

    println(&quot;$(complexity)\t$(loss)\t$(string)&quot;)
end"><pre><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Complexity<span class="pl-cce">\t</span>MSE<span class="pl-cce">\t</span>Equation<span class="pl-pds">"</span></span>)

<span class="pl-k">for</span> member <span class="pl-k">in</span> dominating
    complexity <span class="pl-k">=</span> <span class="pl-c1">compute_complexity</span>(member, options)
    loss <span class="pl-k">=</span> member<span class="pl-k">.</span>loss
    string <span class="pl-k">=</span> <span class="pl-c1">string_tree</span>(member<span class="pl-k">.</span>tree, options)

    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(complexity)</span><span class="pl-cce">\t</span><span class="pl-v">$(loss)</span><span class="pl-cce">\t</span><span class="pl-v">$(string)</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h1 dir="auto"><a id="user-content-code-structure" class="anchor" aria-hidden="true" href="#code-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Code structure</h1>
<p dir="auto">SymbolicRegression.jl is organized roughly as follows.
Rounded rectangles indicate objects, and rectangles indicate functions.</p>
<blockquote>
<p dir="auto">(if you can't see this diagram being rendered, try pasting it into <a href="https://mermaid-js.github.io/mermaid-live-editor" rel="nofollow">mermaid-js.github.io/mermaid-live-editor</a>)</p>
</blockquote>
<section class="js-render-needs-enrichment render-needs-enrichment position-relative" data-identity="a06ab50e-cbf9-4d26-ac5c-cdeb25414b66" data-host="https://viewscreen.githubusercontent.com" data-src="https://viewscreen.githubusercontent.com/markdown/mermaid?docs_host=https%3A%2F%2Fdocs.github.com" data-type="mermaid" aria-label="mermaid rendered output container">
  <div class="js-render-enrichment-target" data-json="{&quot;data&quot;:&quot;flowchart TB\n    op([Options])\n    d([Dataset])\n    op --&amp;gt; ES\n    d --&amp;gt; ES\n    subgraph ES[EquationSearch]\n        direction TB\n        IP[sr_spawner]\n        IP --&amp;gt; p1\n        IP --&amp;gt; p2\n        subgraph p1[Thread 1]\n            direction LR\n            pop1([Population])\n            pop1 --&amp;gt; src[s_r_cycle]\n            src --&amp;gt; opt[optimize_and_simplify_population]\n            opt --&amp;gt; pop1\n        end\n        subgraph p2[Thread 2]\n            direction LR\n            pop2([Population])\n            pop2 --&amp;gt; src2[s_r_cycle]\n            src2 --&amp;gt; opt2[optimize_and_simplify_population]\n            opt2 --&amp;gt; pop2\n        end\n        pop1 --&amp;gt; hof\n        pop2 --&amp;gt; hof\n        hof([HallOfFame])\n        hof --&amp;gt; migration\n        pop1 &amp;lt;-.-&amp;gt; migration\n        pop2 &amp;lt;-.-&amp;gt; migration\n        migration[migrate!]\n    end\n    ES --&amp;gt; output([HallOfFame])\n&quot;}" data-plain="flowchart TB
    op([Options])
    d([Dataset])
    op --&gt; ES
    d --&gt; ES
    subgraph ES[EquationSearch]
        direction TB
        IP[sr_spawner]
        IP --&gt; p1
        IP --&gt; p2
        subgraph p1[Thread 1]
            direction LR
            pop1([Population])
            pop1 --&gt; src[s_r_cycle]
            src --&gt; opt[optimize_and_simplify_population]
            opt --&gt; pop1
        end
        subgraph p2[Thread 2]
            direction LR
            pop2([Population])
            pop2 --&gt; src2[s_r_cycle]
            src2 --&gt; opt2[optimize_and_simplify_population]
            opt2 --&gt; pop2
        end
        pop1 --&gt; hof
        pop2 --&gt; hof
        hof([HallOfFame])
        hof --&gt; migration
        pop1 &lt;-.-&gt; migration
        pop2 &lt;-.-&gt; migration
        migration[migrate!]
    end
    ES --&gt; output([HallOfFame])
" dir="auto">
    <div class="render-plaintext-hidden" dir="auto">
      <pre lang="mermaid" aria-label="Raw mermaid code">flowchart TB
    op([Options])
    d([Dataset])
    op --&gt; ES
    d --&gt; ES
    subgraph ES[EquationSearch]
        direction TB
        IP[sr_spawner]
        IP --&gt; p1
        IP --&gt; p2
        subgraph p1[Thread 1]
            direction LR
            pop1([Population])
            pop1 --&gt; src[s_r_cycle]
            src --&gt; opt[optimize_and_simplify_population]
            opt --&gt; pop1
        end
        subgraph p2[Thread 2]
            direction LR
            pop2([Population])
            pop2 --&gt; src2[s_r_cycle]
            src2 --&gt; opt2[optimize_and_simplify_population]
            opt2 --&gt; pop2
        end
        pop1 --&gt; hof
        pop2 --&gt; hof
        hof([HallOfFame])
        hof --&gt; migration
        pop1 &lt;-.-&gt; migration
        pop2 &lt;-.-&gt; migration
        migration[migrate!]
    end
    ES --&gt; output([HallOfFame])
</pre>
    </div>
  </div>
  <span class="js-render-enrichment-loader d-flex flex-justify-center flex-items-center width-full" style="min-height:100px" role="presentation">
    <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="16" height="16" viewBox="0 0 16 16" fill="none" data-view-component="true" class="octospinner mx-auto anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke"></circle>
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke"></path>
</svg>
  </span>
</section>

<p dir="auto">The <code>HallOfFame</code> objects store the expressions with the lowest loss seen at each complexity.</p>
<p dir="auto">The dependency structure of the code itself is as follows:</p>
<section class="js-render-needs-enrichment render-needs-enrichment position-relative" data-identity="91635c3b-78ea-4a6f-8cd3-2339be171f2f" data-host="https://viewscreen.githubusercontent.com" data-src="https://viewscreen.githubusercontent.com/markdown/mermaid?docs_host=https%3A%2F%2Fdocs.github.com" data-type="mermaid" aria-label="mermaid rendered output container">
  <div class="js-render-enrichment-target" data-json="{&quot;data&quot;:&quot;stateDiagram-v2\n    AdaptiveParsimony --&amp;gt; Mutate\n    AdaptiveParsimony --&amp;gt; Population\n    AdaptiveParsimony --&amp;gt; RegularizedEvolution\n    AdaptiveParsimony --&amp;gt; SingleIteration\n    AdaptiveParsimony --&amp;gt; SymbolicRegression\n    CheckConstraints --&amp;gt; Mutate\n    CheckConstraints --&amp;gt; SymbolicRegression\n    Complexity --&amp;gt; CheckConstraints\n    Complexity --&amp;gt; HallOfFame\n    Complexity --&amp;gt; LossFunctions\n    Complexity --&amp;gt; Mutate\n    Complexity --&amp;gt; Population\n    Complexity --&amp;gt; SearchUtils\n    Complexity --&amp;gt; SingleIteration\n    Complexity --&amp;gt; SymbolicRegression\n    ConstantOptimization --&amp;gt; Mutate\n    ConstantOptimization --&amp;gt; SingleIteration\n    Core --&amp;gt; AdaptiveParsimony\n    Core --&amp;gt; CheckConstraints\n    Core --&amp;gt; Complexity\n    Core --&amp;gt; ConstantOptimization\n    Core --&amp;gt; HallOfFame\n    Core --&amp;gt; InterfaceDynamicExpressions\n    Core --&amp;gt; LossFunctions\n    Core --&amp;gt; Migration\n    Core --&amp;gt; Mutate\n    Core --&amp;gt; MutationFunctions\n    Core --&amp;gt; PopMember\n    Core --&amp;gt; Population\n    Core --&amp;gt; Recorder\n    Core --&amp;gt; RegularizedEvolution\n    Core --&amp;gt; SearchUtils\n    Core --&amp;gt; SingleIteration\n    Core --&amp;gt; SymbolicRegression\n    Dataset --&amp;gt; Core\n    HallOfFame --&amp;gt; SearchUtils\n    HallOfFame --&amp;gt; SingleIteration\n    HallOfFame --&amp;gt; SymbolicRegression\n    InterfaceDynamicExpressions --&amp;gt; LossFunctions\n    InterfaceDynamicExpressions --&amp;gt; SymbolicRegression\n    LossFunctions --&amp;gt; ConstantOptimization\n    LossFunctions --&amp;gt; HallOfFame\n    LossFunctions --&amp;gt; Mutate\n    LossFunctions --&amp;gt; PopMember\n    LossFunctions --&amp;gt; Population\n    LossFunctions --&amp;gt; SymbolicRegression\n    Migration --&amp;gt; SymbolicRegression\n    Mutate --&amp;gt; RegularizedEvolution\n    MutationFunctions --&amp;gt; Mutate\n    MutationFunctions --&amp;gt; Population\n    MutationFunctions --&amp;gt; SymbolicRegression\n    Operators --&amp;gt; Core\n    Operators --&amp;gt; Options\n    Options --&amp;gt; Core\n    OptionsStruct --&amp;gt; Core\n    OptionsStruct --&amp;gt; Options\n    PopMember --&amp;gt; ConstantOptimization\n    PopMember --&amp;gt; HallOfFame\n    PopMember --&amp;gt; Migration\n    PopMember --&amp;gt; Mutate\n    PopMember --&amp;gt; Population\n    PopMember --&amp;gt; RegularizedEvolution\n    PopMember --&amp;gt; SingleIteration\n    PopMember --&amp;gt; SymbolicRegression\n    Population --&amp;gt; Migration\n    Population --&amp;gt; RegularizedEvolution\n    Population --&amp;gt; SearchUtils\n    Population --&amp;gt; SingleIteration\n    Population --&amp;gt; SymbolicRegression\n    ProgramConstants --&amp;gt; Core\n    ProgramConstants --&amp;gt; Dataset\n    ProgressBars --&amp;gt; SearchUtils\n    ProgressBars --&amp;gt; SymbolicRegression\n    Recorder --&amp;gt; Mutate\n    Recorder --&amp;gt; RegularizedEvolution\n    Recorder --&amp;gt; SingleIteration\n    Recorder --&amp;gt; SymbolicRegression\n    RegularizedEvolution --&amp;gt; SingleIteration\n    SearchUtils --&amp;gt; SymbolicRegression\n    SingleIteration --&amp;gt; SymbolicRegression\n    Utils --&amp;gt; CheckConstraints\n    Utils --&amp;gt; ConstantOptimization\n    Utils --&amp;gt; Options\n    Utils --&amp;gt; PopMember\n    Utils --&amp;gt; SingleIteration\n    Utils --&amp;gt; SymbolicRegression\n&quot;}" data-plain="stateDiagram-v2
    AdaptiveParsimony --&gt; Mutate
    AdaptiveParsimony --&gt; Population
    AdaptiveParsimony --&gt; RegularizedEvolution
    AdaptiveParsimony --&gt; SingleIteration
    AdaptiveParsimony --&gt; SymbolicRegression
    CheckConstraints --&gt; Mutate
    CheckConstraints --&gt; SymbolicRegression
    Complexity --&gt; CheckConstraints
    Complexity --&gt; HallOfFame
    Complexity --&gt; LossFunctions
    Complexity --&gt; Mutate
    Complexity --&gt; Population
    Complexity --&gt; SearchUtils
    Complexity --&gt; SingleIteration
    Complexity --&gt; SymbolicRegression
    ConstantOptimization --&gt; Mutate
    ConstantOptimization --&gt; SingleIteration
    Core --&gt; AdaptiveParsimony
    Core --&gt; CheckConstraints
    Core --&gt; Complexity
    Core --&gt; ConstantOptimization
    Core --&gt; HallOfFame
    Core --&gt; InterfaceDynamicExpressions
    Core --&gt; LossFunctions
    Core --&gt; Migration
    Core --&gt; Mutate
    Core --&gt; MutationFunctions
    Core --&gt; PopMember
    Core --&gt; Population
    Core --&gt; Recorder
    Core --&gt; RegularizedEvolution
    Core --&gt; SearchUtils
    Core --&gt; SingleIteration
    Core --&gt; SymbolicRegression
    Dataset --&gt; Core
    HallOfFame --&gt; SearchUtils
    HallOfFame --&gt; SingleIteration
    HallOfFame --&gt; SymbolicRegression
    InterfaceDynamicExpressions --&gt; LossFunctions
    InterfaceDynamicExpressions --&gt; SymbolicRegression
    LossFunctions --&gt; ConstantOptimization
    LossFunctions --&gt; HallOfFame
    LossFunctions --&gt; Mutate
    LossFunctions --&gt; PopMember
    LossFunctions --&gt; Population
    LossFunctions --&gt; SymbolicRegression
    Migration --&gt; SymbolicRegression
    Mutate --&gt; RegularizedEvolution
    MutationFunctions --&gt; Mutate
    MutationFunctions --&gt; Population
    MutationFunctions --&gt; SymbolicRegression
    Operators --&gt; Core
    Operators --&gt; Options
    Options --&gt; Core
    OptionsStruct --&gt; Core
    OptionsStruct --&gt; Options
    PopMember --&gt; ConstantOptimization
    PopMember --&gt; HallOfFame
    PopMember --&gt; Migration
    PopMember --&gt; Mutate
    PopMember --&gt; Population
    PopMember --&gt; RegularizedEvolution
    PopMember --&gt; SingleIteration
    PopMember --&gt; SymbolicRegression
    Population --&gt; Migration
    Population --&gt; RegularizedEvolution
    Population --&gt; SearchUtils
    Population --&gt; SingleIteration
    Population --&gt; SymbolicRegression
    ProgramConstants --&gt; Core
    ProgramConstants --&gt; Dataset
    ProgressBars --&gt; SearchUtils
    ProgressBars --&gt; SymbolicRegression
    Recorder --&gt; Mutate
    Recorder --&gt; RegularizedEvolution
    Recorder --&gt; SingleIteration
    Recorder --&gt; SymbolicRegression
    RegularizedEvolution --&gt; SingleIteration
    SearchUtils --&gt; SymbolicRegression
    SingleIteration --&gt; SymbolicRegression
    Utils --&gt; CheckConstraints
    Utils --&gt; ConstantOptimization
    Utils --&gt; Options
    Utils --&gt; PopMember
    Utils --&gt; SingleIteration
    Utils --&gt; SymbolicRegression
" dir="auto">
    <div class="render-plaintext-hidden" dir="auto">
      <pre lang="mermaid" aria-label="Raw mermaid code">stateDiagram-v2
    AdaptiveParsimony --&gt; Mutate
    AdaptiveParsimony --&gt; Population
    AdaptiveParsimony --&gt; RegularizedEvolution
    AdaptiveParsimony --&gt; SingleIteration
    AdaptiveParsimony --&gt; SymbolicRegression
    CheckConstraints --&gt; Mutate
    CheckConstraints --&gt; SymbolicRegression
    Complexity --&gt; CheckConstraints
    Complexity --&gt; HallOfFame
    Complexity --&gt; LossFunctions
    Complexity --&gt; Mutate
    Complexity --&gt; Population
    Complexity --&gt; SearchUtils
    Complexity --&gt; SingleIteration
    Complexity --&gt; SymbolicRegression
    ConstantOptimization --&gt; Mutate
    ConstantOptimization --&gt; SingleIteration
    Core --&gt; AdaptiveParsimony
    Core --&gt; CheckConstraints
    Core --&gt; Complexity
    Core --&gt; ConstantOptimization
    Core --&gt; HallOfFame
    Core --&gt; InterfaceDynamicExpressions
    Core --&gt; LossFunctions
    Core --&gt; Migration
    Core --&gt; Mutate
    Core --&gt; MutationFunctions
    Core --&gt; PopMember
    Core --&gt; Population
    Core --&gt; Recorder
    Core --&gt; RegularizedEvolution
    Core --&gt; SearchUtils
    Core --&gt; SingleIteration
    Core --&gt; SymbolicRegression
    Dataset --&gt; Core
    HallOfFame --&gt; SearchUtils
    HallOfFame --&gt; SingleIteration
    HallOfFame --&gt; SymbolicRegression
    InterfaceDynamicExpressions --&gt; LossFunctions
    InterfaceDynamicExpressions --&gt; SymbolicRegression
    LossFunctions --&gt; ConstantOptimization
    LossFunctions --&gt; HallOfFame
    LossFunctions --&gt; Mutate
    LossFunctions --&gt; PopMember
    LossFunctions --&gt; Population
    LossFunctions --&gt; SymbolicRegression
    Migration --&gt; SymbolicRegression
    Mutate --&gt; RegularizedEvolution
    MutationFunctions --&gt; Mutate
    MutationFunctions --&gt; Population
    MutationFunctions --&gt; SymbolicRegression
    Operators --&gt; Core
    Operators --&gt; Options
    Options --&gt; Core
    OptionsStruct --&gt; Core
    OptionsStruct --&gt; Options
    PopMember --&gt; ConstantOptimization
    PopMember --&gt; HallOfFame
    PopMember --&gt; Migration
    PopMember --&gt; Mutate
    PopMember --&gt; Population
    PopMember --&gt; RegularizedEvolution
    PopMember --&gt; SingleIteration
    PopMember --&gt; SymbolicRegression
    Population --&gt; Migration
    Population --&gt; RegularizedEvolution
    Population --&gt; SearchUtils
    Population --&gt; SingleIteration
    Population --&gt; SymbolicRegression
    ProgramConstants --&gt; Core
    ProgramConstants --&gt; Dataset
    ProgressBars --&gt; SearchUtils
    ProgressBars --&gt; SymbolicRegression
    Recorder --&gt; Mutate
    Recorder --&gt; RegularizedEvolution
    Recorder --&gt; SingleIteration
    Recorder --&gt; SymbolicRegression
    RegularizedEvolution --&gt; SingleIteration
    SearchUtils --&gt; SymbolicRegression
    SingleIteration --&gt; SymbolicRegression
    Utils --&gt; CheckConstraints
    Utils --&gt; ConstantOptimization
    Utils --&gt; Options
    Utils --&gt; PopMember
    Utils --&gt; SingleIteration
    Utils --&gt; SymbolicRegression
</pre>
    </div>
  </div>
  <span class="js-render-enrichment-loader d-flex flex-justify-center flex-items-center width-full" style="min-height:100px" role="presentation">
    <svg style="box-sizing: content-box; color: var(--color-icon-primary);" width="16" height="16" viewBox="0 0 16 16" fill="none" data-view-component="true" class="octospinner mx-auto anim-rotate">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke"></circle>
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke"></path>
</svg>
  </span>
</section>

<p dir="auto">Bash command to generate dependency structure from <code>src</code> directory (requires <code>vim-stream</code>):</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="echo 'stateDiagram-v2'
IFS=$'\n'
for f in *.jl; do
    for line in $(cat $f | grep -e 'import \.\.' -e 'import \.'); do
        echo $(echo $line | vims -s 'dwf:d$' -t '%s/^\.*//g' '%s/Module//g') $(basename &quot;$f&quot; .jl);
    done;
done | vims -l 'f a--&gt; ' | sort"><pre><span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">'</span>stateDiagram-v2<span class="pl-pds">'</span></span>
IFS=<span class="pl-s"><span class="pl-pds">$'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>
<span class="pl-k">for</span> <span class="pl-smi">f</span> <span class="pl-k">in</span> <span class="pl-k">*</span>.jl<span class="pl-k">;</span> <span class="pl-k">do</span>
    <span class="pl-k">for</span> <span class="pl-smi">line</span> <span class="pl-k">in</span> <span class="pl-s"><span class="pl-pds">$(</span>cat <span class="pl-smi">$f</span> <span class="pl-k">|</span> grep -e <span class="pl-s"><span class="pl-pds">'</span>import \.\.<span class="pl-pds">'</span></span> -e <span class="pl-s"><span class="pl-pds">'</span>import \.<span class="pl-pds">'</span></span><span class="pl-pds">)</span></span><span class="pl-k">;</span> <span class="pl-k">do</span>
        <span class="pl-c1">echo</span> <span class="pl-s"><span class="pl-pds">$(</span>echo <span class="pl-smi">$line</span> <span class="pl-k">|</span> vims -s <span class="pl-s"><span class="pl-pds">'</span>dwf:d$<span class="pl-pds">'</span></span> -t <span class="pl-s"><span class="pl-pds">'</span>%s/^\.*//g<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>%s/Module//g<span class="pl-pds">'</span></span><span class="pl-pds">)</span></span> <span class="pl-s"><span class="pl-pds">$(</span>basename <span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$f</span><span class="pl-pds">"</span></span> .jl<span class="pl-pds">)</span></span><span class="pl-k">;</span>
    <span class="pl-k">done</span><span class="pl-k">;</span>
<span class="pl-k">done</span> <span class="pl-k">|</span> vims -l <span class="pl-s"><span class="pl-pds">'</span>f a--&gt; <span class="pl-pds">'</span></span> <span class="pl-k">|</span> sort</pre></div>
<h2 dir="auto"><a id="user-content-search-options" class="anchor" aria-hidden="true" href="#search-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Search options</h2>
<p dir="auto">See <a href="https://astroautomata.com/SymbolicRegression.jl/stable/api/#Options" rel="nofollow">https://astroautomata.com/SymbolicRegression.jl/stable/api/#Options</a></p>
</article></div>