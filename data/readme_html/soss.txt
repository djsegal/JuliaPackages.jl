<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-soss" class="anchor" aria-hidden="true" href="#soss"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Soss</h1>
<p dir="auto"><a href="https://cscherrer.github.io/Soss.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cscherrer.github.io/Soss.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cscherrer/Soss.jl/actions"><img src="https://github.com/cscherrer/Soss.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cscherrer/Soss.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/873759740c4afcdb8d420905779b4a3f4805015492422b79aefce6415e647486/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f536f73732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/Soss.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Soss is a library for <em>probabilistic programming</em>.</p>
<p dir="auto">Let's look at an example. First we'll load things:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MeasureTheory
using Soss"><pre><span class="pl-k">using</span> MeasureTheory
<span class="pl-k">using</span> Soss</pre></div>
<p dir="auto"><a href="https://github.com/cscherrer/MeasureTheory.jl">MeasureTheory.jl</a> is designed specifically with PPLs like Soss in mind, though you can also use Distributions.jl.</p>
<p dir="auto">Now for a model. Here's a linear regression:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="m = @model x begin
    α ~ Lebesgue(ℝ)
    β ~ Normal()
    σ ~ Exponential()
    y ~ For(x) do xj
        Normal(α + β * xj, σ)
    end
    return y
end"><pre>m <span class="pl-k">=</span> <span class="pl-c1">@model</span> x <span class="pl-k">begin</span>
    α <span class="pl-k">~</span> <span class="pl-c1">Lebesgue</span>(ℝ)
    β <span class="pl-k">~</span> <span class="pl-c1">Normal</span>()
    σ <span class="pl-k">~</span> <span class="pl-c1">Exponential</span>()
    y <span class="pl-k">~</span> <span class="pl-c1">For</span>(x) <span class="pl-k">do</span> xj
        <span class="pl-c1">Normal</span>(α <span class="pl-k">+</span> β <span class="pl-k">*</span> xj, σ)
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> y
<span class="pl-k">end</span></pre></div>
<p dir="auto">Next we'll generate some fake data to work with. For <code>x</code>-values, let's use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = randn(20)"><pre>x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">20</span>)</pre></div>
<p dir="auto">Now loosely speaking, <code>Lebesgue(ℝ)</code> is uniform over the real numbers, so we can't really sample from it. Instead, let's transform the model and make <code>α</code> an argument:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; predα = predictive(m, :α)
@model (x, α) begin
        σ ~ Exponential()
        β ~ Normal()
        y ~ For(x) do xj
                Normal(α + β * xj, σ)
            end
        return y
    end"><pre>julia<span class="pl-k">&gt;</span> predα <span class="pl-k">=</span> <span class="pl-c1">predictive</span>(m, <span class="pl-c1">:α</span>)
<span class="pl-c1">@model</span> (x, α) <span class="pl-k">begin</span>
        σ <span class="pl-k">~</span> <span class="pl-c1">Exponential</span>()
        β <span class="pl-k">~</span> <span class="pl-c1">Normal</span>()
        y <span class="pl-k">~</span> <span class="pl-c1">For</span>(x) <span class="pl-k">do</span> xj
                <span class="pl-c1">Normal</span>(α <span class="pl-k">+</span> β <span class="pl-k">*</span> xj, σ)
            <span class="pl-k">end</span>
        <span class="pl-k">return</span> y
    <span class="pl-k">end</span></pre></div>
<p dir="auto">Now we can do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; y = rand(predα(x=x,α=10.0))
20-element Vector{Float64}:
 10.554133456468438
  9.378065258831002
 12.873667041657287
  8.940799408080496
 10.737189595204965
  9.500536439014208
 11.327606120726893
 10.899892855024445
 10.18488773139243
 10.386969795947177
 10.382195272387214
  8.358407507910297
 10.727173015711768
 10.452311211064654
 11.076232496702387
 11.362009520020141
  9.539433052406448
 10.61851691333643
 11.586170856832645
  9.197496058151618"><pre>julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">predα</span>(x<span class="pl-k">=</span>x,α<span class="pl-k">=</span><span class="pl-c1">10.0</span>))
<span class="pl-c1">20</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">10.554133456468438</span>
  <span class="pl-c1">9.378065258831002</span>
 <span class="pl-c1">12.873667041657287</span>
  <span class="pl-c1">8.940799408080496</span>
 <span class="pl-c1">10.737189595204965</span>
  <span class="pl-c1">9.500536439014208</span>
 <span class="pl-c1">11.327606120726893</span>
 <span class="pl-c1">10.899892855024445</span>
 <span class="pl-c1">10.18488773139243</span>
 <span class="pl-c1">10.386969795947177</span>
 <span class="pl-c1">10.382195272387214</span>
  <span class="pl-c1">8.358407507910297</span>
 <span class="pl-c1">10.727173015711768</span>
 <span class="pl-c1">10.452311211064654</span>
 <span class="pl-c1">11.076232496702387</span>
 <span class="pl-c1">11.362009520020141</span>
  <span class="pl-c1">9.539433052406448</span>
 <span class="pl-c1">10.61851691333643</span>
 <span class="pl-c1">11.586170856832645</span>
  <span class="pl-c1">9.197496058151618</span></pre></div>
<p dir="auto">Now for inference! Let's use <code>DynamicHMC</code>, which we have wrapped in <code>SampleChainsDynamicHMC</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SampleChainsDynamicHMC
[ Info: Precompiling SampleChainsDynamicHMC [6d9fd711-e8b2-4778-9c70-c1dfb499d4c4]

julia&gt; post = sample(m(x=x) | (y=y,), dynamichmc())
4000-element MultiChain with 4 chains and schema (σ = Float64, β = Float64, α = Float64)
(σ = 1.0±0.15, β = 0.503±0.26, α = 10.2±0.25)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SampleChainsDynamicHMC
[ Info<span class="pl-k">:</span> Precompiling SampleChainsDynamicHMC [<span class="pl-c1">6</span>d9fd711<span class="pl-k">-</span>e8b2<span class="pl-k">-</span><span class="pl-c1">4778</span><span class="pl-k">-</span><span class="pl-c1">9</span>c70<span class="pl-k">-</span>c1dfb499d4c4]

julia<span class="pl-k">&gt;</span> post <span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">m</span>(x<span class="pl-k">=</span>x) <span class="pl-k">|</span> (y<span class="pl-k">=</span>y,), <span class="pl-c1">dynamichmc</span>())
<span class="pl-c1">4000</span><span class="pl-k">-</span>element MultiChain with <span class="pl-c1">4</span> chains and schema (σ <span class="pl-k">=</span> Float64, β <span class="pl-k">=</span> Float64, α <span class="pl-k">=</span> Float64)
(σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>±<span class="pl-c1">0.15</span>, β <span class="pl-k">=</span> <span class="pl-c1">0.503</span>±<span class="pl-c1">0.26</span>, α <span class="pl-k">=</span> <span class="pl-c1">10.2</span>±<span class="pl-c1">0.25</span>)</pre></div>
<h2 dir="auto"><a id="user-content-how-is-soss-different-from-turing" class="anchor" aria-hidden="true" href="#how-is-soss-different-from-turing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How is Soss different from <a href="https://turing.ml/dev/" rel="nofollow">Turing</a>?</h2>
<p dir="auto">First, a fine point: When people say "the Turing PPL" they usually mean what's technically called "DynamicPPL".</p>
<ul dir="auto">
<li>In Soss, models are first class, and can be composed or nested. For example, you can define a model and later nest it inside another model, and inference will handle both together. DynamicPPL can also handle nested models (see <a href="https://github.com/TuringLang/DynamicPPL.jl/pull/233" data-hovercard-type="pull_request" data-hovercard-url="/TuringLang/DynamicPPL.jl/pull/233/hovercard">this PR</a>) though I'm not aware of a way to combine independently-defined DynamicPPL models for a single inference pass.</li>
<li>Soss has been updated to use <a href="https://github.com/cscherrer/MeasureTheory.jl">MeasureTheory.jl</a>, though everything from Distributions.jl is still available.</li>
<li>Soss allows model transformations. This can be used, for example, to easily express predictive distributions or Markov blanket as a new model.</li>
<li>Most of the focus of Soss is at the syntactic level; inference works in terms of "primitives" that transform the model's abstract syntax tree (AST) to new code. This adds the same benefits as using Julia's macros and generated functions, as opposed to higher-order functions alone.</li>
<li>Soss can evaluate log-densities symbolically, which can then be used to produce optimized evaluations for much faster inference. This capability is in relatively early stages, and will be made more robust in our ongoing development.</li>
<li>The Soss team is <em>much</em> smaller than that of DynamicPPL. But I hope that will change (contributors welcome!)</li>
</ul>
<p dir="auto">Soss and DynamicPPL are both maturing and becoming more complete, so the above will change over time. It's also worth noting that we (the Turing team and I) hope to move toward a natural way of using these systems together to arrive at the best of both.</p>
<h2 dir="auto"><a id="user-content-how-can-i-get-involved" class="anchor" aria-hidden="true" href="#how-can-i-get-involved"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How can I get involved?</h2>
<p dir="auto">I'm glad you asked! Lots of things:</p>
<ul dir="auto">
<li>Contribute documentation or tests</li>
<li>Ask questions on Discourse or Zulip</li>
<li>File issues for bugs (or other problems) or feature requests</li>
<li>Use Soss in your applications, teaching, or blogging</li>
<li>Get involved in other libraries in the Soss ecosystem:
<ul dir="auto">
<li><a href="https://github.com/cscherrer/SossMLJ.jl">SossMLJ</a></li>
<li><a href="https://github.com/cscherrer/SossGen.jl">SossGen</a> (needs updating)</li>
<li><a href="https://github.com/cscherrer/SampleChains.jl">SampleChains</a></li>
<li><a href="https://github.com/cscherrer/SampleChainsDynamicHMC.jl">SampleChainsDynamicHMC</a></li>
<li><a href="https://github.com/cscherrer/TupleVectors.jl">TupleVectors</a></li>
<li><a href="https://github.com/cscherrer/NestedTuples.jl">NestedTuples</a></li>
<li><a href="https://github.com/cscherrer/MeasureTheory.jl">MeasureTheory</a></li>
<li><a href="https://github.com/cscherrer/SymbolicCodegen.jl">SymbolicCodegen</a></li>
</ul>
</li>
</ul>
<p dir="auto">For more details, please see the <a href="https://cscherrer.github.io/Soss.jl/stable/" rel="nofollow">documentation</a>.</p>
<h2 dir="auto"><a id="user-content-stargazers-over-time" class="anchor" aria-hidden="true" href="#stargazers-over-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stargazers over time</h2>
<p dir="auto"><a href="https://starchart.cc/cscherrer/Soss.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be8bf23624e695228e95806a223fcd2a3e5fe9ad488d1af1b7998aeaf6c68e1a/68747470733a2f2f7374617263686172742e63632f6373636865727265722f536f73732e6a6c2e737667" alt="Stargazers over time" data-canonical-src="https://starchart.cc/cscherrer/Soss.jl.svg" style="max-width: 100%;"></a></p>
</article></div>