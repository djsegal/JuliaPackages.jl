<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-adios2jl" class="anchor" aria-hidden="true" href="#adios2jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ADIOS2.jl</h1>
<p dir="auto">A Julia interface to <a href="https://github.com/ornladios/ADIOS2">ADIOS2</a>,
the Adaptable Input Output System version 2.</p>
<ul dir="auto">
<li><a href="https://eschnett.github.io/ADIOS2.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Documenter" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></li>
<li><a href="https://github.com/eschnett/ADIOS2.jl/actions"><img src="https://github.com/eschnett/ADIOS2.jl/workflows/CI/badge.svg" alt="GitHub CI" style="max-width: 100%;"></a></li>
<li><a href="https://codecov.io/gh/eschnett/ADIOS2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/580c97817341c54b3b102e1b51900720cc24bd8723f3cf87b3688b68532fe3ec/68747470733a2f2f636f6465636f762e696f2f67682f657363686e6574742f4144494f53322e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/eschnett/ADIOS2.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">It is best to read the ADIOS2 documentation before using this package.</p>
<p dir="auto">ADIOS2 splits reading/writing variables into three parts:</p>
<ol dir="auto">
<li>Define the metadata, i.e. the name, type, and shape (if array) of
the variables</li>
<li>Schedule the reads/writes, providing pointers to or buffer for the
data</li>
<li>Perform the actual reads/writes</li>
</ol>
<p dir="auto">This ensures that reads or writes can be performed very efficiently.</p>
<h3 dir="auto"><a id="user-content-writing-a-file" class="anchor" aria-hidden="true" href="#writing-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Writing a file</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Initialize ADIOS
using ADIOS2
adios = adios_init_serial()
io = declare_io(adios, &quot;IO&quot;)
engine = open(io, &quot;example.bp&quot;, mode_write)

# Define some variables
scalar = 247.0
svar = define_variable(io, &quot;scalar&quot;, scalar)
array = Float64[10i + j for i in 1:2, j in 1:3]
avar = define_variable(io, &quot;array&quot;, array)

# Schedule writing the variables
put!(engine, svar, scalar)
put!(engine, avar, array)

# Write the variables
perform_puts!(engine)
close(engine)"><pre><span class="pl-c"><span class="pl-c">#</span> Initialize ADIOS</span>
<span class="pl-k">using</span> ADIOS2
adios <span class="pl-k">=</span> <span class="pl-c1">adios_init_serial</span>()
io <span class="pl-k">=</span> <span class="pl-c1">declare_io</span>(adios, <span class="pl-s"><span class="pl-pds">"</span>IO<span class="pl-pds">"</span></span>)
engine <span class="pl-k">=</span> <span class="pl-c1">open</span>(io, <span class="pl-s"><span class="pl-pds">"</span>example.bp<span class="pl-pds">"</span></span>, mode_write)

<span class="pl-c"><span class="pl-c">#</span> Define some variables</span>
scalar <span class="pl-k">=</span> <span class="pl-c1">247.0</span>
svar <span class="pl-k">=</span> <span class="pl-c1">define_variable</span>(io, <span class="pl-s"><span class="pl-pds">"</span>scalar<span class="pl-pds">"</span></span>, scalar)
array <span class="pl-k">=</span> Float64[<span class="pl-c1">10</span>i <span class="pl-k">+</span> j <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
avar <span class="pl-k">=</span> <span class="pl-c1">define_variable</span>(io, <span class="pl-s"><span class="pl-pds">"</span>array<span class="pl-pds">"</span></span>, array)

<span class="pl-c"><span class="pl-c">#</span> Schedule writing the variables</span>
<span class="pl-c1">put!</span>(engine, svar, scalar)
<span class="pl-c1">put!</span>(engine, avar, array)

<span class="pl-c"><span class="pl-c">#</span> Write the variables</span>
<span class="pl-c1">perform_puts!</span>(engine)
<span class="pl-c1">close</span>(engine)</pre></div>
<h3 dir="auto"><a id="user-content-reading-a-file" class="anchor" aria-hidden="true" href="#reading-a-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading a file</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Initialize ADIOS
using ADIOS2
adios = adios_init_serial()
io = declare_io(adios, &quot;IO&quot;)
engine = open(io, &quot;example.bp&quot;, mode_read)

# List all variables
vars = inquire_all_variables(io)
println(&quot;Variables:&quot;)
for var in vars
    println(&quot;    &quot;, name(var))
end
svar = inquire_variable(io, &quot;scalar&quot;)
avar = inquire_variable(io, &quot;array&quot;)

# Schedule reading the variables
scalar = Ref{Float64}()
get(engine, svar, scalar)
array = Array{Float64}(undef, 2, 3)
get(engine, avar, array)

# Read the variables
perform_gets(engine)

println(&quot;scalar: $(scalar[])&quot;)
println(&quot;array: $array&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Initialize ADIOS</span>
<span class="pl-k">using</span> ADIOS2
adios <span class="pl-k">=</span> <span class="pl-c1">adios_init_serial</span>()
io <span class="pl-k">=</span> <span class="pl-c1">declare_io</span>(adios, <span class="pl-s"><span class="pl-pds">"</span>IO<span class="pl-pds">"</span></span>)
engine <span class="pl-k">=</span> <span class="pl-c1">open</span>(io, <span class="pl-s"><span class="pl-pds">"</span>example.bp<span class="pl-pds">"</span></span>, mode_read)

<span class="pl-c"><span class="pl-c">#</span> List all variables</span>
vars <span class="pl-k">=</span> <span class="pl-c1">inquire_all_variables</span>(io)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Variables:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> var <span class="pl-k">in</span> vars
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>    <span class="pl-pds">"</span></span>, <span class="pl-c1">name</span>(var))
<span class="pl-k">end</span>
svar <span class="pl-k">=</span> <span class="pl-c1">inquire_variable</span>(io, <span class="pl-s"><span class="pl-pds">"</span>scalar<span class="pl-pds">"</span></span>)
avar <span class="pl-k">=</span> <span class="pl-c1">inquire_variable</span>(io, <span class="pl-s"><span class="pl-pds">"</span>array<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Schedule reading the variables</span>
scalar <span class="pl-k">=</span> <span class="pl-c1">Ref</span><span class="pl-c1">{Float64}</span>()
<span class="pl-c1">get</span>(engine, svar, scalar)
array <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>)
<span class="pl-c1">get</span>(engine, avar, array)

<span class="pl-c"><span class="pl-c">#</span> Read the variables</span>
<span class="pl-c1">perform_gets</span>(engine)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>scalar: <span class="pl-v">$(scalar[])</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>array: <span class="pl-v">$array</span><span class="pl-pds">"</span></span>)</pre></div>
</article></div>