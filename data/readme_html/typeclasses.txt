<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-typeclassesjl" class="anchor" aria-hidden="true" href="#typeclassesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TypeClasses.jl</h1>
<p dir="auto"><a href="https://JuliaFunctional.github.io/TypeClasses.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaFunctional.github.io/TypeClasses.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaFunctional/TypeClasses.jl/actions"><img src="https://github.com/JuliaFunctional/TypeClasses.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaFunctional/TypeClasses.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6906469d7e01450fe061e06c49c6623424b7b99e2d2befb28dd072a1ba09ba2e/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f4a756c696146756e6374696f6e616c2f54797065436c61737365732e6a6c" alt="Coverage" data-canonical-src="https://img.shields.io/codecov/c/github/JuliaFunctional/TypeClasses.jl" style="max-width: 100%;"></a></p>
<p dir="auto">TypeClasses defines general programmatic abstractions taken from Scala cats and Haskell TypeClasses.</p>
<p dir="auto">The following interfaces are defined:</p>
<table>
<thead>
<tr>
<th>TypeClass</th>
<th>Methods</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Functor</td>
<td><code>Base.map</code></td>
<td>The basic definition of a container or computational context.</td>
</tr>
<tr>
<td>Applicative</td>
<td>Functor &amp;<code>TypeClasses.ap</code></td>
<td>Computational context with support for parallel execution.</td>
</tr>
<tr>
<td>Monad</td>
<td>Applicative &amp;<code>TypeClasses.flatmap</code></td>
<td>Computational context with support for sequential, nested execution.</td>
</tr>
<tr>
<td>Semigroup</td>
<td><code>TypeClasses.combine</code>, alias <code>⊕</code></td>
<td>The notion of something which can be combined with other things of its kind.</td>
</tr>
<tr>
<td>Monoid</td>
<td>Semigroup &amp;<code>TypeClasses.neutral</code></td>
<td>A semigroup with a neutral element is called a Monoid, an often used category.</td>
</tr>
<tr>
<td>Alternative</td>
<td><code>TypeClasses.neutral</code> &amp; <code>TypeClasses.orelse</code>, alias <code>⊘</code></td>
<td>Slightly different than Monoid, the<code>orelse</code> semantic does not merge two values, but just takes one of the two.</td>
</tr>
</tbody>
</table>
</article></div>