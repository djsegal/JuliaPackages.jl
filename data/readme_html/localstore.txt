<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-localstore-julia-package" class="anchor" aria-hidden="true" href="#localstore-julia-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LocalStore Julia package</h1>
<p dir="auto"><a href="https://cossio.github.io/LocalStore.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cossio.github.io/LocalStore.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/cossio/LocalStore.jl/workflows/CI/badge.svg"><img src="https://github.com/cossio/LocalStore.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cossio/LocalStore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/04a27a218ecf95c0021b208ce3c3f7924eae994368aab2a46b0557623ca37a37/68747470733a2f2f636f6465636f762e696f2f67682f636f7373696f2f4c6f63616c53746f72652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d3357314c4c54494a494f" alt="codecov" data-canonical-src="https://codecov.io/gh/cossio/LocalStore.jl/branch/master/graph/badge.svg?token=3W1LLTIJIO" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a simple interface for storing and retrieving Julia objects locally.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LocalStore

# Define an item type. This should contain enough information
# to be able to reconstruct the desired object.
struct A
    x::Int
end

# Since store location is based on hash, it is recommended to
# define a hash function for custom types.
Base.hash(a::A, h::UInt) = hash(:A, hash(a.x, h))

# Define how the item is stored on disk. The `path` is a dir, handled
# automatically by the LocalStore package.
LocalStore.save(a::A, path::String) = open(&quot;$path/file.txt&quot;, &quot;w&quot;) do f
    # some difficult computation you only want to do once
    x2 = a.x^2
    # maybe download some remote files

    # now save to disk the results
    write(f, string(x2))
end

# Define how the item is read from disk.
LocalStore.load(a::A, path::String) = open(&quot;$path/file.txt&quot;, &quot;r&quot;) do f
    parse(Int, readline(f))
end

# Automatically checks if the requested object is stored. If not,
# it creates a local directory and saves it there and loads it.
# Next time `load` is called, the stored object is returned.
a = LocalStore.load(A(5))"><pre><span class="pl-k">using</span> LocalStore

<span class="pl-c"><span class="pl-c">#</span> Define an item type. This should contain enough information</span>
<span class="pl-c"><span class="pl-c">#</span> to be able to reconstruct the desired object.</span>
<span class="pl-k">struct</span> A
    x<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Since store location is based on hash, it is recommended to</span>
<span class="pl-c"><span class="pl-c">#</span> define a hash function for custom types.</span>
Base<span class="pl-k">.</span><span class="pl-en">hash</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>, h<span class="pl-k">::</span><span class="pl-c1">UInt</span>) <span class="pl-k">=</span> <span class="pl-c1">hash</span>(<span class="pl-c1">:A</span>, <span class="pl-c1">hash</span>(a<span class="pl-k">.</span>x, h))

<span class="pl-c"><span class="pl-c">#</span> Define how the item is stored on disk. The `path` is a dir, handled</span>
<span class="pl-c"><span class="pl-c">#</span> automatically by the LocalStore package.</span>
LocalStore<span class="pl-k">.</span><span class="pl-en">save</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>, path<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$path</span>/file.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c"><span class="pl-c">#</span> some difficult computation you only want to do once</span>
    x2 <span class="pl-k">=</span> a<span class="pl-k">.</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
    <span class="pl-c"><span class="pl-c">#</span> maybe download some remote files</span>

    <span class="pl-c"><span class="pl-c">#</span> now save to disk the results</span>
    <span class="pl-c1">write</span>(f, <span class="pl-c1">string</span>(x2))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define how the item is read from disk.</span>
LocalStore<span class="pl-k">.</span><span class="pl-en">load</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>, path<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$path</span>/file.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">parse</span>(Int, <span class="pl-c1">readline</span>(f))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Automatically checks if the requested object is stored. If not,</span>
<span class="pl-c"><span class="pl-c">#</span> it creates a local directory and saves it there and loads it.</span>
<span class="pl-c"><span class="pl-c">#</span> Next time `load` is called, the stored object is returned.</span>
a <span class="pl-k">=</span> LocalStore<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-c1">A</span>(<span class="pl-c1">5</span>))</pre></div>
</article></div>