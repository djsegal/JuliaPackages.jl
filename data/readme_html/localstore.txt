<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-localstorejl" class="anchor" aria-hidden="true" href="#localstorejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LocalStore.jl</h1>
<p>This package provides a simple interface for storing and retrieving Julia objects locally.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LocalStore

# Define an item type. This should contain enough information
# to be able to reconstruct the desired object.
struct A
    x::Int
end

# Since store location is based on hash, it is recommended to
# define a hash function for custom types.
Base.hash(a::A, h::UInt) = hash(:A, hash(a.x, h))

# Define how the item is stored on disk. The `path` is a dir, handled
# automatically by the LocalStore package.
LocalStore.save(a::A, path::String) = open(&quot;$path/file.txt&quot;, &quot;w&quot;) do f
    # some difficult computation you only want to do once
    x2 = a.x^2
    # maybe download some remote files

    # now save to disk the results
    write(f, string(x2))
end

# Define how the item is read from disk.
LocalStore.load(a::A, path::String) = open(&quot;$path/file.txt&quot;, &quot;r&quot;) do f
    parse(Int, readline(f))
end

# Automatically checks if the requested object is stored. If not,
# it creates a local directory and saves it there and loads it.
# Next time `load` is called, the stored object is returned.
a = LocalStore.load(A(5))
"><pre><span class="pl-k">using</span> LocalStore

<span class="pl-c"><span class="pl-c">#</span> Define an item type. This should contain enough information</span>
<span class="pl-c"><span class="pl-c">#</span> to be able to reconstruct the desired object.</span>
<span class="pl-k">struct</span> A
    x<span class="pl-k">::</span><span class="pl-c1">Int</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Since store location is based on hash, it is recommended to</span>
<span class="pl-c"><span class="pl-c">#</span> define a hash function for custom types.</span>
Base<span class="pl-k">.</span><span class="pl-en">hash</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>, h<span class="pl-k">::</span><span class="pl-c1">UInt</span>) <span class="pl-k">=</span> <span class="pl-c1">hash</span>(<span class="pl-c1">:A</span>, <span class="pl-c1">hash</span>(a<span class="pl-k">.</span>x, h))

<span class="pl-c"><span class="pl-c">#</span> Define how the item is stored on disk. The `path` is a dir, handled</span>
<span class="pl-c"><span class="pl-c">#</span> automatically by the LocalStore package.</span>
LocalStore<span class="pl-k">.</span><span class="pl-en">save</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>, path<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$path</span>/file.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c"><span class="pl-c">#</span> some difficult computation you only want to do once</span>
    x2 <span class="pl-k">=</span> a<span class="pl-k">.</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
    <span class="pl-c"><span class="pl-c">#</span> maybe download some remote files</span>

    <span class="pl-c"><span class="pl-c">#</span> now save to disk the results</span>
    <span class="pl-c1">write</span>(f, <span class="pl-c1">string</span>(x2))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define how the item is read from disk.</span>
LocalStore<span class="pl-k">.</span><span class="pl-en">load</span>(a<span class="pl-k">::</span><span class="pl-c1">A</span>, path<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$path</span>/file.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    <span class="pl-c1">parse</span>(Int, <span class="pl-c1">readline</span>(f))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Automatically checks if the requested object is stored. If not,</span>
<span class="pl-c"><span class="pl-c">#</span> it creates a local directory and saves it there and loads it.</span>
<span class="pl-c"><span class="pl-c">#</span> Next time `load` is called, the stored object is returned.</span>
a <span class="pl-k">=</span> LocalStore<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-c1">A</span>(<span class="pl-c1">5</span>))</pre></div>
</article></div>