<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-predefineddynamicalsystemsjl" class="anchor" aria-hidden="true" href="#predefineddynamicalsystemsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PredefinedDynamicalSystems.jl</h1>
<p dir="auto"><a href="https://JuliaDynamics.github.io/PredefinedDynamicalSystems.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/661356f86ae99407296656b5514b76cfb343dacca3c4a20a0872e9c3c6bfa2b3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6f6e6c696e652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-online-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaDynamics/PredefinedDynamicalSystems.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaDynamics/PredefinedDynamicalSystems.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=PredefinedDynamicalSystems" rel="nofollow"><img src="https://camo.githubusercontent.com/94937d767b56999d5094b44896fd03fa4c3530cc6deebb11f0cc16516e0f3969/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f507265646566696e656444796e616d6963616c53797374656d73" alt="Package Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/PredefinedDynamicalSystems" style="max-width: 100%;"></a></p>
<p dir="auto">Module which contains pre-defined dynamical systems that can be used by the <a href="https://juliadynamics.github.io/DynamicalSystems.jl/dev/" rel="nofollow">DynamicalSystems.jl</a> library.
To install it, run <code>import Pkg; Pkg.add("PredefinedDynamicalSystems")</code>.</p>
<p dir="auto">Predefined systems exist as functions that
return a <code>DynamicalSystem</code> instance. They are accessed like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ds = PredefinedDynamicalSystems.lorenz(u0; ρ = 32.0)"><pre>ds <span class="pl-k">=</span> PredefinedDynamicalSystems<span class="pl-k">.</span><span class="pl-c1">lorenz</span>(u0; ρ <span class="pl-k">=</span> <span class="pl-c1">32.0</span>)</pre></div>
<p dir="auto">The alias <code>Systems</code> is also exported as a deprecation.</p>
<p dir="auto"><strong>This module is provided purely as a convenience. It does not have any actual tests, and it is not guaranteed to be stable in future versions.
It is not recommended to use this module for anything else besides
on-the-spot demonstrative examples.</strong></p>
<p dir="auto">For some systems, a Jacobian function is also defined.
The naming convention for the Jacobian function is <code>\$(name)_jacob</code>.
So, for the above example we have <code>J = Systems.lorenz_jacob</code>.</p>
<p dir="auto">All available systems are provided in the documentation, which you can either find <a href="https://juliadynamics.github.io/PredefinedDynamicalSystems.jl/dev/" rel="nofollow">online</a> or build locally by running the <code>docs/make.jl</code> file.</p>
</article></div>