<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-scipjl" class="anchor" aria-hidden="true" href="#scipjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SCIP.jl</h1>
<p>Julia interface to <a href="http://scip.zib.de" rel="nofollow">SCIP</a> solver.</p>
<p><a href="https://travis-ci.org/SCIP-Interfaces/SCIP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0853ca76279c2635615b5eb3ff80680cdc3ee9d4/68747470733a2f2f7472617669732d63692e6f72672f534349502d496e74657266616365732f534349502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SCIP-Interfaces/SCIP.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/SCIP-Interfaces/SCIP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ee22a90d3901c9208dc81c5a130687c3d42e716c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f534349502d496e74657266616365732f534349502e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/SCIP-Interfaces/SCIP.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/SCIP-Interfaces/SCIP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aef6eab7a6ef7976938f2a0e525a34a969257bdf/68747470733a2f2f636f6465636f762e696f2f67682f534349502d496e74657266616365732f534349502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SCIP-Interfaces/SCIP.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>See <a href="https://github.com/SCIP-Interfaces/SCIP.jl/blob/master/NEWS.md">NEWS.md</a> for changes in each (recent) release.</p>
<h2><a id="user-content-update-march-2019" class="anchor" aria-hidden="true" href="#update-march-2019"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Update (March 2019)</h2>
<p>We have completely rewritten the interface from scratch, using
<a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a> to generate wrappers based on
the headers of the SCIP library.
The goal is to support <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> (from version
0.19 on) through
<a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathOptInterface</a>.</p>
<p>Currently, we support LP, MIP and QCP problems, as well as some nonlinear constraints, both through <code>MOI</code> sets
(e.g., for second-order cones) as well as for expression graphs (see below).</p>
<p>It is now possible to implement SCIP constraint handlers in Julia. Other plugin
types are not yet supported.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>To use SCIP.jl, you will need <a href="http://scip.zib.de" rel="nofollow">SCIP</a> installed on your
system. <a href="https://scip.zib.de/index.php#license" rel="nofollow">SCIP's license</a> does not allow
(automatic) redistribution, so please
<a href="https://scip.zib.de/index.php#download" rel="nofollow">download</a> and install it yourself.</p>
<p>Currently, Linux, OS X and Windows are tested and supported.</p>
<p>We recommend using one of the provided installers, e.g.,
<code>SCIPOptSuite-6.0.1-Linux.deb</code> for systems based on Debian. Adding the SCIP.jl
package should then work out of the box:</p>
<pre><code>pkg&gt; add SCIP
</code></pre>
<p>If you <a href="https://scip.zib.de/doc-6.0.1/html/CMAKE.php" rel="nofollow">build SCIP from source</a>
you should set the environment variable <code>SCIPOPTDIR</code> to point the the
<strong>installation path</strong>. That is, either <code>$SCIPOPTDIR/lib/libscip.so</code>,
<code>$SCIPOPTDIR/lib/libscip.dylib</code> or <code>$SCIPOPTDIR/bin/scip.dll</code> should exist,
depending on your operating system.</p>
<h2><a id="user-content-setting-parameters" class="anchor" aria-hidden="true" href="#setting-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting Parameters</h2>
<p>There are two ways of setting the parameters
(<a href="https://scip.zib.de/doc-6.0.1/html/PARAMETERS.php" rel="nofollow">all</a> are supported). First,
using <code>MOI.set</code>:</p>
<pre><code>using MOI
using SCIP

optimizer = SCIP.Optimizer()
MOI.set(optimizer, SCIP.Param("display/verblevel"), 0)
MOI.set(optimizer, SCIP.Param("limits/gap"), 0.05)
</code></pre>
<p>Second, as keyword arguments to the constructor. But here, the slashes (<code>/</code>)
need to be replaced by underscores (<code>_</code>) in order to end up with a valid Julia
identifier. This should not lead to ambiguities as none of the official SCIP
parameters contain any underscores (yet).</p>
<pre><code>using MOI
using SCIP

optimizer = SCIP.Optimizer(display_verblevel=0, limits_gap=0.05)
</code></pre>
<p>Note that in both cases, the correct value type must be used (here, <code>Int64</code> and
<code>Float64</code>).</p>
<h2><a id="user-content-design-considerations" class="anchor" aria-hidden="true" href="#design-considerations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Design Considerations</h2>
<p><strong>Wrapper of Public API</strong>: All of SCIP's public API methods are wrapped and
available within the <code>SCIP</code> package. This includes the <code>scip_*.h</code> and <code>pub_*.h</code>
headers that are collected in <code>scip.h</code>, as well as all default constraint
handlers (<code>cons_*.h</code>.) But the wrapped functions do not transform any data
structures and work on the <em>raw</em> pointers (e.g. <code>SCIP*</code> in C, <code>Ptr{SCIP_}</code> in
Julia). Convenience wrapper functions based on Julia types are added as needed.</p>
<p><strong>Memory Management</strong>: Programming with SCIP requires dealing with variable and
constraints objects that use <a href="https://scip.zib.de/doc-6.0.0/html/OBJ.php" rel="nofollow">reference
counting</a> for memory management.
SCIP.jl provides a wrapper type <code>ManagedSCIP</code> that collects lists of <code>SCIP_VAR*</code>
and <code>SCIP_CONS*</code> under the hood, and releases all reference when it is garbage
collected itself (via <code>finalize</code>). When adding a variable (<code>add_variable</code>) or a
constraint (<code>add_linear_constraint</code>), an integer index is returned. This index
can be used to retrieve the <code>SCIP_VAR*</code> or <code>SCIP_CONS*</code> pointer via <code>get_var</code>
and <code>get_cons</code> respectively.</p>
<p><code>ManagedSCIP</code> does not currently support deletion of variables or constraints.</p>
<p><strong>Supported Features for MathOptInterface</strong>: We aim at exposing many of SCIP's
features through MathOptInterface. However, the focus is on keeping the wrapper
simple and avoiding duplicate storage of model data.</p>
<p>As a consequence, we do not currently support some features such as retrieving
constraints by name (<code>SingleVariable</code>-set constraints are not stored as SCIP
constraints explicitly).</p>
<p>Support for more constraint types (quadratic/SOC, SOS1/2, nonlinear expression)
is implemented, but SCIP itself only supports affine objective functions, so we
will stick with that. More general objective functions could be implented via a
<a href="https://github.com/JuliaOpt/MathOptInterface.jl/issues/529">bridge</a>.</p>
<p>Supported operators in nonlinear expressions are as follows:</p>
<ul>
<li>unary: <code>-</code>, <code>sqrt</code>, <code>exp</code>, <code>log</code>, <code>abs</code></li>
<li>binary: <code>-</code>, <code>/</code>, <code>^</code>, <code>min</code>, <code>max</code></li>
<li>n-ary: <code>+</code>, <code>*</code></li>
</ul>
<p>In particular, trigonometric functions are not supported.</p>
<h2><a id="user-content-old-interface-implementation" class="anchor" aria-hidden="true" href="#old-interface-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Old Interface Implementation</h2>
<p>A previous implementation of SCIP.jl supported
<a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a> (up to version 0.18) through
<a href="https://github.com/JuliaOpt/MathOptInterface.jl">MathProgBase</a>. It did not
interface SCIP directly, but went through
<a href="https://github.com/SCIP-Interfaces/CSIP">CSIP</a>, a simplified C wrapper.</p>
<p>Back then, the interface support MINLP problems as well as solver-indepentent
callbacks for lazy constraints and heuristics.</p>
<p>To use that version, you need to pin the version of SCIP.jl to <code>v0.6.1</code> (the
last release before the rewrite):</p>
<pre><code>pkg&gt; add SCIP@v0.6.1
pkg&gt; pin SCIP
</code></pre>
</article></div>