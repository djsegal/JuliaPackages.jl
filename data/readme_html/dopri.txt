<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><strong>This package is deprecated and will not be maintained anymore because all use cases are covered by the <a href="http://docs.juliadiffeq.org/latest/index.html" rel="nofollow">DifferentialEquations.jl</a> ecosystem.</strong></p>
<h1><a id="user-content-doprijl" class="anchor" aria-hidden="true" href="#doprijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dopri.jl</h1>
<p><a href="https://travis-ci.org/helgee/Dopri.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/012d0d98edef5ec001baddd1f2f352e860c2fc7d5cf34000bf4cd0d79c314510/68747470733a2f2f7472617669732d63692e6f72672f68656c6765652f446f7072692e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/helgee/Dopri.jl.svg" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/helgee/dopri-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9e69d369e2e083bc1dc47233c418d0348160851a331b705ad77e62567cb48fcb/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f616a333467786f386e6f71356c6563703f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/aj34gxo8noq5lecp?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/helgee/Dopri.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/586f9bccddda62d8aa8b4d037e47d1c145cf8a0477b5a0784535532b345ace77/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f68656c6765652f446f7072692e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/helgee/Dopri.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>Dopri.jl is a Julia wrapper for the DOPRI5 and DOP853 integrators by <a href="http://www.unige.ch/~hairer/software.html" rel="nofollow">Ernst Hairer</a>.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<p>Dopri.jl can then be installed through Julia's package manager.
On Linux and macOS you need to have either <strong>Gfortran</strong> or the <strong>Intel Fortran Compiler</strong> installed to be able to build the binary dependencies.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Dopri&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Dopri<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The API is modelled after that of <a href="https://github.com/JuliaLang/ODE.jl">ODE.jl</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tout, yout = dopri5(F!, y0, tspan; keywords...)
tout, yout = dop853(F!, y0, tspan; keywords...)
"><pre>tout, yout <span class="pl-k">=</span> <span class="pl-c1">dopri5</span>(F!, y0, tspan; keywords<span class="pl-k">...</span>)
tout, yout <span class="pl-k">=</span> <span class="pl-c1">dop853</span>(F!, y0, tspan; keywords<span class="pl-k">...</span>)</pre></div>
<p>The only differences are the mutating user function <code>F!</code> (see below) and a few additional keyword arguments.</p>
<p>The following keyword arguments are supported:</p>
<ul>
<li><code>atol</code>: Vector of absolute tolerances. Default: <code>sqrt(eps())</code>.</li>
<li><code>rtol</code>: Vector of realtive tolerances. Default: <code>1e-6</code>.</li>
<li><code>points</code>
<ul>
<li><code>= :all</code>: Output is given for each value in <code>tspan</code> and all intermediate solver steps.</li>
<li><code>= :specified</code>: Output is given for each value in <code>tspan</code>.</li>
<li><code>= :last</code>: Output is given for the final step only.</li>
</ul>
</li>
<li><code>solout</code>: User function that is called after every successfull integration step (see below).</li>
<li><code>dense</code>: Vector of indices for which dense output shall be performed. Default: Dense output is provided for all components. Is also set automatically for <code>points=:specified</code> and <code>points=:all</code>.</li>
<li><code>verbose</code>: Print messages from <code>DOPRI5</code> and <code>DOP853</code>. Default: <code>false</code>.</li>
</ul>
<h3><a id="user-content-user-functions" class="anchor" aria-hidden="true" href="#user-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>User Functions</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="F!(f, t, y) = ...
"><pre><span class="pl-en">F!</span>(f, t, y) <span class="pl-k">=</span> <span class="pl-k">...</span></pre></div>
<ul>
<li><code>f</code>: <code>f=dy/dt</code></li>
<li><code>t</code>: Current step.</li>
<li><code>y</code>: Current state vector.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="solout!(told, t, y, contd) = ... return dopricode[:nominal]
"><pre><span class="pl-en">solout!</span>(told, t, y, contd) <span class="pl-k">=</span> <span class="pl-k">...</span> <span class="pl-k">return</span> dopricode[<span class="pl-c1">:nominal</span>]</pre></div>
<p>If the user supplies a <code>solout</code> function, it will be called after every successful integration step. Within <code>solout</code> the <code>contd</code> function can be used to approximate state vector components between the current and the preceding integration step via dense output.</p>
<ul>
<li><code>told</code>: Last step.</li>
<li><code>t</code>: Current step.</li>
<li><code>y</code>: Current state vector.</li>
<li><code>contd</code>: <code>yi = contd(i, t1)</code> Get dense output <code>yi</code> for component <code>i</code> at <code>t1</code> with <code>told &lt; t1 &lt; t</code>.</li>
</ul>
<p><code>solout</code> must return one of the following return codes:</p>
<ul>
<li><code>dopricode[:nominal]</code>: If the integration shall continue nominally.</li>
<li><code>dopricode[:altered]</code>: If numerical solution was altered in <code>solout</code>.</li>
<li><code>dopricode[:abort]</code>: If the integration shall be stopped.</li>
</ul>
<h3><a id="user-content-passing-additional-parameters-to-user-functions" class="anchor" aria-hidden="true" href="#passing-additional-parameters-to-user-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Passing Additional Parameters to User Functions</h3>
<p>A closure can be used to pass additional parameters to the user functions, e.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="parameter = pi
tout, yout = dop853((f, t, y) -&gt; F!(f, t, y, parameter), y0, tspan)
"><pre>parameter <span class="pl-k">=</span> <span class="pl-c1">pi</span>
tout, yout <span class="pl-k">=</span> <span class="pl-c1">dop853</span>((f, t, y) <span class="pl-k">-&gt;</span> <span class="pl-c1">F!</span>(f, t, y, parameter), y0, tspan)</pre></div>
</article></div>