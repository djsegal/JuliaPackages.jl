<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-arbitrary" class="anchor" aria-hidden="true" href="#arbitrary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arbitrary</h1>
<p dir="auto">Generate arbitrary sequences for testing.</p>
<p dir="auto"><a href="https://travis-ci.org/eschnett/Arbitrary.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bbc67492e6e8dfc0e633cae00e259e433fae1ea961e1b3f286378846ea23a713/68747470733a2f2f7472617669732d63692e6f72672f657363686e6574742f4172626974726172792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status (Travis)" data-canonical-src="https://travis-ci.org/eschnett/Arbitrary.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/eschnett/arbitrary-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4d37b42364fd18cf053b7a7c859d3f4dd31740ccb25caaf2243739dc43cb1bbc/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7230727971646a6e32726d68763239773f7376673d74727565" alt="Build status (Appveyor)" data-canonical-src="https://ci.appveyor.com/api/projects/status/r0ryqdjn2rmhv29w?svg=true" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/eschnett/Arbitrary.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d9f14a5831cf2a4463b35436713fef7adda70427b5b5acb7514b64d0631a4166/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f657363686e6574742f4172626974726172792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status (Coveralls)" data-canonical-src="https://coveralls.io/repos/github/eschnett/Arbitrary.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/146501346" rel="nofollow"><img src="https://camo.githubusercontent.com/6dca792d0baef40fa33c62f72cc8855894474d4fbf790ff686488984adc8eb6e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3134363530313334362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/146501346.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The Arbitrary package allows testing properties that must hold for
data types. For example, the <code>BigInt</code> implementation needs to ensure
that addition and multiplication are commutative and associative, that
<code>0</code> and <code>1</code> are the additive and multiplicative identity, etc. In
an ideal world, we would want the compiler to prove that these
properties hold (or at least to verify a human-written proof). In the
real world, we can test these properties hold for "arbitrary"
<code>BigInt</code> numbers.</p>
<p dir="auto">The basic API consists of the function <code>arbitrary(::Type{T})</code>, which
returns an iterator that produces values of type <code>T</code>. The iterator
will first produce "simple" or "special" values (such as 0 or 1), and
will then go on to produce more "difficult" values via a random number
generator. I expect that testing properties with e.g. 100 such
arbitrary values make for good property tests.</p>
<h3 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Base.Iterators
using Test
using Arbitrary
# Generate arbitrary values
xs = collect(take(arbitrary(BigInt), 100))
ys = collect(take(arbitrary(BigInt), 100))
zs = collect(take(arbitrary(BigInt), 100))
# Test commutativity
@test all(xs .+ ys .== ys .+ xs)
# Test associativity
@test all((xs .+ ys) .+ zs .== xs .+ (ys .+ zs))"><pre><span class="pl-k">using</span> Base<span class="pl-k">.</span>Iterators
<span class="pl-k">using</span> Test
<span class="pl-k">using</span> Arbitrary
<span class="pl-c"><span class="pl-c">#</span> Generate arbitrary values</span>
xs <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">take</span>(<span class="pl-c1">arbitrary</span>(BigInt), <span class="pl-c1">100</span>))
ys <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">take</span>(<span class="pl-c1">arbitrary</span>(BigInt), <span class="pl-c1">100</span>))
zs <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">take</span>(<span class="pl-c1">arbitrary</span>(BigInt), <span class="pl-c1">100</span>))
<span class="pl-c"><span class="pl-c">#</span> Test commutativity</span>
<span class="pl-c1">@test</span> <span class="pl-c1">all</span>(xs <span class="pl-k">.+</span> ys <span class="pl-k">.==</span> ys <span class="pl-k">.+</span> xs)
<span class="pl-c"><span class="pl-c">#</span> Test associativity</span>
<span class="pl-c1">@test</span> <span class="pl-c1">all</span>((xs <span class="pl-k">.+</span> ys) <span class="pl-k">.+</span> zs <span class="pl-k">.==</span> xs <span class="pl-k">.+</span> (ys <span class="pl-k">.+</span> zs))</pre></div>
<h2 dir="auto"><a id="user-content-why-not-just-use-random-values" class="anchor" aria-hidden="true" href="#why-not-just-use-random-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why not just use random values?</h2>
<p dir="auto">This package takes its motivation from Haskell's
<a href="http://hackage.haskell.org/package/QuickCheck-2.11.3/docs/Test-QuickCheck-Arbitrary.html" rel="nofollow"><code>Test.QuickCheck.Arbitrary</code></a>
type class.</p>
<p dir="auto">Arbitrary values are quite similar to random values. The main
difference is that one has (better) control over the the probability
with which certain values are produced. This ensures that corner cases
receive proper testing. For example, the default random number
generator for <code>Int</code> values creates numbers with a uniform
distribution, and it is thus very unlikely to obtain small integers
(e.g. from 1 to 10).</p>
<h2 dir="auto"><a id="user-content-defining-arbitrary-for-your-own-type" class="anchor" aria-hidden="true" href="#defining-arbitrary-for-your-own-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Defining <code>arbitrary</code> for your own type</h2>
<p dir="auto">The <code>Arbitrary</code> package contains methods for various built-in types.
To extend this for your own type, you need to provide a respective
method for the <code>arbitrary</code> function.</p>
<h3 dir="auto"><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2:</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Base.Iterators
using Arbitrary
# Define your own type
struct Point{T}
    x::T
    y::T
end
# Define a method for Arbitrary.arbitrary
function Arbitrary.arbitrary(::Type{Point{T}}, ast::ArbState) where {T}
    xs = Iterators.Stateful(arbitrary(T, ast))
    flatten([Point{T}[Point(T(0), T(0)),
                      Point(T(0), T(1)),
                      Point(T(1), T(0)),
                      Point(T(-1), T(-1))],
            Generate{Point{T}}(
                () -&gt; Point(popfirst!(xs), popfirst!(xs)))])
end"><pre><span class="pl-k">using</span> Base<span class="pl-k">.</span>Iterators
<span class="pl-k">using</span> Arbitrary
<span class="pl-c"><span class="pl-c">#</span> Define your own type</span>
<span class="pl-k">struct</span> Point{T}
    x<span class="pl-k">::</span><span class="pl-c1">T</span>
    y<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> Define a method for Arbitrary.arbitrary</span>
<span class="pl-k">function</span> Arbitrary<span class="pl-k">.</span><span class="pl-en">arbitrary</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Point{T}}</span>, ast<span class="pl-k">::</span><span class="pl-c1">ArbState</span>) <span class="pl-k">where</span> {T}
    xs <span class="pl-k">=</span> Iterators<span class="pl-k">.</span><span class="pl-c1">Stateful</span>(<span class="pl-c1">arbitrary</span>(T, ast))
    <span class="pl-c1">flatten</span>([Point{T}[<span class="pl-c1">Point</span>(<span class="pl-c1">T</span>(<span class="pl-c1">0</span>), <span class="pl-c1">T</span>(<span class="pl-c1">0</span>)),
                      <span class="pl-c1">Point</span>(<span class="pl-c1">T</span>(<span class="pl-c1">0</span>), <span class="pl-c1">T</span>(<span class="pl-c1">1</span>)),
                      <span class="pl-c1">Point</span>(<span class="pl-c1">T</span>(<span class="pl-c1">1</span>), <span class="pl-c1">T</span>(<span class="pl-c1">0</span>)),
                      <span class="pl-c1">Point</span>(<span class="pl-c1">T</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>), <span class="pl-c1">T</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>))],
            <span class="pl-c1">Generate</span><span class="pl-c1">{Point{T}}</span>(
                () <span class="pl-k">-&gt;</span> <span class="pl-c1">Point</span>(<span class="pl-c1">popfirst!</span>(xs), <span class="pl-c1">popfirst!</span>(xs)))])
<span class="pl-k">end</span></pre></div>
<p dir="auto">This <code>arbitrary</code> method first generates 4 points with particular
values, which are presumably simple but interesting. Next it uses
existing <code>arbitrary</code> methods for the type <code>T</code> to generate new
points. <code>Generate</code> is a wrapper type that creates an iterator from a
function. The function <code>Base.Iterators.flatten</code> concatenates
iterators, while the type <code>Base.Iterators.Stateful</code> captures
iterators into mutable objects.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; collect(take(arbitrary(Point{Int}, UInt(42)), 20))

20-element Array{Point{Int64},1}:
  Point{Int64}(0, 0)                                      
  Point{Int64}(0, 1)                                      
  Point{Int64}(1, 0)                                      
  Point{Int64}(-1, -1)                                    
  Point{Int64}(0, 1)                                      
  Point{Int64}(2, 3)                                      
  Point{Int64}(-1, -2)                                    
  Point{Int64}(10, 100)                                   
  Point{Int64}(-10, 9223372036854775807)                  
  Point{Int64}(9223372036854775806, -9223372036854775808)
  Point{Int64}(-9223372036854775807, 9067366622006296321)
  Point{Int64}(-2256197071093261190, -5795687145721743680)
  Point{Int64}(2798402323870333227, 8156153274284847668)  
  Point{Int64}(8296248152788523164, 2972613083423981281)  
  Point{Int64}(6437123995368952903, -7346326483082348639)
  Point{Int64}(5681684189447142543, 499062510383072047)   
  Point{Int64}(-4069693335803290299, -5159697560496114268)
  Point{Int64}(5657203908704019168, -551782769629649706)  
  Point{Int64}(5497552197468976212, -2695328260518845352)
  Point{Int64}(-1464621002877751017, -7952756775211842320)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">collect</span>(<span class="pl-c1">take</span>(<span class="pl-c1">arbitrary</span>(Point{Int}, <span class="pl-c1">UInt</span>(<span class="pl-c1">42</span>)), <span class="pl-c1">20</span>))

<span class="pl-c1">20</span><span class="pl-k">-</span>element Array{Point{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>)                                      
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)                                      
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>)                                      
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)                                    
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)                                      
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>)                                      
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>)                                    
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">10</span>, <span class="pl-c1">100</span>)                                   
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">10</span>, <span class="pl-c1">9223372036854775807</span>)                  
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">9223372036854775806</span>, <span class="pl-k">-</span><span class="pl-c1">9223372036854775808</span>)
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">9223372036854775807</span>, <span class="pl-c1">9067366622006296321</span>)
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">2256197071093261190</span>, <span class="pl-k">-</span><span class="pl-c1">5795687145721743680</span>)
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">2798402323870333227</span>, <span class="pl-c1">8156153274284847668</span>)  
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">8296248152788523164</span>, <span class="pl-c1">2972613083423981281</span>)  
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">6437123995368952903</span>, <span class="pl-k">-</span><span class="pl-c1">7346326483082348639</span>)
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">5681684189447142543</span>, <span class="pl-c1">499062510383072047</span>)   
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">4069693335803290299</span>, <span class="pl-k">-</span><span class="pl-c1">5159697560496114268</span>)
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">5657203908704019168</span>, <span class="pl-k">-</span><span class="pl-c1">551782769629649706</span>)  
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">5497552197468976212</span>, <span class="pl-k">-</span><span class="pl-c1">2695328260518845352</span>)
  <span class="pl-c1">Point</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">1464621002877751017</span>, <span class="pl-k">-</span><span class="pl-c1">7952756775211842320</span>)</pre></div>
<p dir="auto">The generated arbitrary points start out with the four special values
that are specified explicitly, and then continue with arbitrary
<code>Int</code> values. If you run this example, then your output will differ
since you will be using a different random number generator seed. You
can explicitly pass in a seed by calling e.g. <code>arbitrary(Point{Int}, UInt(42))</code> to ensure reproducible arbitrary sequences.</p>
</article></div>