<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spikinginferencecircuits" class="anchor" aria-hidden="true" href="#spikinginferencecircuits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SpikingInferenceCircuits</h1>
<p dir="auto">Library implementing probabilistic inference circuits for Spiking Neural Networks.
The high-level implementations are hardware-agnostic, and could be compiled
to (e.g.) FPGAs or ASICs in the future by defining compilation routes for those targets.
However, currently full compilation paths to primitive components are only provided for
the <code>Spiking</code> target.</p>
<p dir="auto">This library uses the <a href="https://github.com/probcomp/Circuits.jl">Circuits library</a> for circuit representation &amp; compilation,
and the <a href="https://github.com/probcomp/SpikingCircuits.jl">Spiking circuits library</a> for primitive spiking components and the SNN simulator.</p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<p dir="auto">See <code>setup.md</code>.</p>
<h2 dir="auto"><a id="user-content-current-goals" class="anchor" aria-hidden="true" href="#current-goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current goals</h2>
<p dir="auto">Our current goals include compiling a subset of <a href="gen.dev">Gen</a> probabilistic programs into spiking neural
networks in forward-sampling mode, implementing importance sampling using Gen target &amp; proposal distributions,
and eventually implementing sequential monte carlo for these models.</p>
<h3 dir="auto"><a id="user-content-setup-1" class="anchor" aria-hidden="true" href="#setup-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h3>
<p dir="auto">After cloning this repo, from the <code>SpikingInferenceCircuits.jl/</code> directory:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] activate .
] build"><pre>] activate <span class="pl-c1">.</span>
] build</pre></div>
<p dir="auto">This should suffice!
To test that the utilities for Gen simulation have been set up properly, you can run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Revise
julia&gt; include(&quot;experiments/coord_tracking_2d/gen_run.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Revise
julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>experiments/coord_tracking_2d/gen_run.jl<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This may throw a couple errors, but should then succeed (and output a long stream of text,
to display the last computed value in the script).</p>
<p dir="auto">To test that spiking neural network simulations work, you can run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Revise
julia&gt; include(&quot;test/unit_tests/run_unit_tests.jl&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Revise
julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test/unit_tests/run_unit_tests.jl<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-repository-structure" class="anchor" aria-hidden="true" href="#repository-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Repository Structure</h3>
<p dir="auto">There are 3 main parts:</p>
<ul dir="auto">
<li><code>src</code> contains the core code</li>
<li><code>runs</code> contains scripts used for testing components</li>
<li><code>visualization</code> contains code to produce visualizations of circuits.  Eventually, this should
be replaced with a better visualizer, and perhaps factored into its own repository (or made part of the
Circuits repository).</li>
</ul>
<p dir="auto">I'm currently reorganizing and rewriting large parts of <code>src</code>, so the imports in <code>runs</code> will mostly be wrong
(and some of the runs may become irrelevent / used foor outdated components.)</p>
<h3 dir="auto"><a id="user-content-src" class="anchor" aria-hidden="true" href="#src"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>src</code></h3>
<p dir="auto">(This is currently WIP.)</p>
<p dir="auto">An outline of the directory structure is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="src/
    CPTs/
    DiscreteIRTransforms/
    ProbEstimates/
    DynamicModels/
    circuits/
        value_types.jl
        pulse_ir/
            primitives/
            poisson_implementations/
        stochastic_digital_circuits/
            primitives/
            pulse_ir_implementations/
        generative_functions/
            composite/
            leaf/
        inference/"><pre class="notranslate"><code>src/
    CPTs/
    DiscreteIRTransforms/
    ProbEstimates/
    DynamicModels/
    circuits/
        value_types.jl
        pulse_ir/
            primitives/
            poisson_implementations/
        stochastic_digital_circuits/
            primitives/
            pulse_ir_implementations/
        generative_functions/
            composite/
            leaf/
        inference/
</code></pre></div>
<ul dir="auto">
<li>
<p dir="auto"><code>CPTs</code> a Julia package exposing the <code>CPT</code> (conditional probability table)
and <code>LabeledCPT</code> Gen distributions.</p>
</li>
<li>
<p dir="auto"><code>DiscreteIRTransforms</code> is a Julia package for transforming IRs for Gen models where
all variables are discrete and have finite domains.  In particular, it contains some
transformations to convert from Static IR (+ combinators) generative functions
to equivalent generative functions where all distributions are CPTs.</p>
</li>
<li>
<p dir="auto"><code>ProbEstimates/</code> is a module for running inference in Gen, injecting noise
into each probability or inverse-probability value used in the calculations.
This noise mirrors the type of noise which arises in the spiking neural network
implementations.  This lets us test the robustness of the SNN implementation of
inference algorithms in Gen.</p>
</li>
<li>
<p dir="auto"><code>DynamicModels/</code> is a WIP module providing utility functions for constructing
and running SMC inference in dynamic models.</p>
</li>
<li>
<p dir="auto"><code>circuits</code> contains the code to compile models and inference programs into circuits
and ultimately into spiking neural networks.  The sub-directory structure is roughly:</p>
<ul dir="auto">
<li><code>circuits/value_types.jl</code> defines <code>Value</code> types (from the Circuits library) used for the circuits</li>
<li><code>circuits/generative_functions</code> contains generative function PROPOSE and ASSESS circuits.</li>
<li><code>circuits/inference</code> contains code for producing inference circuits.  I haven't thought through
what this should look like.</li>
<li><code>circuits/stochastic_digital_circuits/</code> and <code>circuits/pulse_ir/</code> define the stochastic digital circuits
and Pulse IR primitive components (and maybe some non-primitive components too.  Eventually
they will also include SDC --&gt; Pulse IR implementations, and Pulse IR --&gt; Poisson neuron implementations.
<code>pulse_ir/</code> will also contain code for satisfying the temporal interfaces of the Pulse IR.</li>
</ul>
</li>
</ul>
<h3 dir="auto"><a id="user-content-visualizations" class="anchor" aria-hidden="true" href="#visualizations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualizations</h3>
<p dir="auto">The visualizer is web-based.  The front-end code is in <code>visualization/frontend</code>; this is a <code>npm</code> package.
To install the dependencies, run <code>npm install</code> from within the <code>visualization/frontend</code> folder.
(If you don't have <code>npm</code> installed, you can get it <a href="https://www.npmjs.com/get-npm" rel="nofollow">here</a>.)
To use the visualizer, run an http server from within this folder.  One way to do this is to
get the <code>npm</code> package <code>http-server</code> by running <code>npm install -g http-server</code>, and then running
the <code>http-server</code> command from within <code>visualization/frontend</code>.</p>
<p dir="auto">To view a component, it must first be compiled into a format that the frontend understands.
For this, there is the julia script <code>visualization/component_interface.jl</code>.
Likewise, there is a julia script <code>visualization/animation_interface.jl</code> to compile the output
of the spiking simulator into a JSON file the frontend can use to produce an animation of spiking circuit operation.</p>
<p dir="auto">See <code>runs/cpt_sample_score.jl</code> for examples of how the visualization scripts are used.  The relevant code snippet is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="includet(&quot;../visualization/component_interface.jl&quot;)

open(&quot;visualization/frontend/renders/cpt.json&quot;, &quot;w&quot;) do f
    JSON.print(f, viz_graph(circuit), 2)
end
println(&quot;Wrote component viz file.&quot;)

events = Sim.simulate_for_time_and_get_events(circuit,  16.0;
    initial_inputs=(:in_vals =&gt; 1 =&gt; 2, :in_vals =&gt; 2 =&gt; 1)
)
println(&quot;Simulation run.&quot;)

includet(&quot;../visualization/animation_interface.jl&quot;)

open(&quot;visualization/frontend/renders/cpt_anim.json&quot;, &quot;w&quot;) do f
    JSON.print(f, animation_to_frontend_format(Sim.initial_state(circuit), events), 2)
end
println(&quot;Wrote animation file.&quot;)"><pre><span class="pl-c1">includet</span>(<span class="pl-s"><span class="pl-pds">"</span>../visualization/component_interface.jl<span class="pl-pds">"</span></span>)

<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>visualization/frontend/renders/cpt.json<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(f, <span class="pl-c1">viz_graph</span>(circuit), <span class="pl-c1">2</span>)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Wrote component viz file.<span class="pl-pds">"</span></span>)

events <span class="pl-k">=</span> Sim<span class="pl-k">.</span><span class="pl-c1">simulate_for_time_and_get_events</span>(circuit,  <span class="pl-c1">16.0</span>;
    initial_inputs<span class="pl-k">=</span>(<span class="pl-c1">:in_vals</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, <span class="pl-c1">:in_vals</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>)
)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Simulation run.<span class="pl-pds">"</span></span>)

<span class="pl-c1">includet</span>(<span class="pl-s"><span class="pl-pds">"</span>../visualization/animation_interface.jl<span class="pl-pds">"</span></span>)

<span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>visualization/frontend/renders/cpt_anim.json<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> f
    JSON<span class="pl-k">.</span><span class="pl-c1">print</span>(f, <span class="pl-c1">animation_to_frontend_format</span>(Sim<span class="pl-k">.</span><span class="pl-c1">initial_state</span>(circuit), events), <span class="pl-c1">2</span>)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Wrote animation file.<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">(For this to work, you will have to <code>mkdir renders</code> from within <code>visualization/frontend</code> first.)</p>
<p dir="auto">Then, from the website (<a href="http://localhost:8080" rel="nofollow">http://localhost:8080</a>), enter the name of the file (here, <code>cpt.json</code>)
to load the visualization.</p>
</article></div>