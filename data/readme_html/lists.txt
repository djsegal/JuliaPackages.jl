<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lists" class="anchor" aria-hidden="true" href="#lists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lists</h1>
<p><a href="https://travis-ci.org/adolgert/Lists.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/756a4199eb53bdab89753a8756e40e9b4d51de2768c89e73dc6081d9a27eae3c/68747470733a2f2f7472617669732d63692e6f72672f61646f6c676572742f4c697374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/adolgert/Lists.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>List collections for Julia</strong></p>
<p>This package provides a singly linked list and a doubly linked list
implementation, as Julia collections. Singly linked lists are
supported with <code>cons</code>, <code>car</code>, and <code>cdr</code>, but not as a standard
collection. Doubly linked lists are included in the samples but,
again, not as a collection. This doesn't do anything fancy
like create an array of nodes. Maybe it should.</p>
<h2><a id="user-content-list" class="anchor" aria-hidden="true" href="#list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>List</h2>
<p><code>List</code> is a doubly linked list. Deletions happen in constant time.
If code contains an index to an item in the list, then
removing other items in the list won't invalidate that index.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = List{Int}()    # Create a list of the given type.
isempty(l)         # Test whether there are any items.
empty!(l)          # Remove all items.
length(l)          # The number of entries. An O(n) operation.
2 in l             # Test whether the given item is an entry in the list. O(n).
eltype(l)          # Returns the item type, here Int64.
indexin(a, l)      # Highest index in list for each value of a that is member.
first(l)           # First item in the list.
last(l)            # Last item in the list, the item value.
push!(l, d)        # Add item d to end of list. Returns index of item.
pop!(l, d)         # Remove and return item at end of list.
unshift!(l, d)     # Add item to start of list. Return index of item.
shift!(l)          # Remove first item and return value.
append!(l, items)  # Add items to end of list.
prepend!(l, items) # Add items to start of list.
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">List</span><span class="pl-c1">{Int}</span>()    <span class="pl-c"><span class="pl-c">#</span> Create a list of the given type.</span>
<span class="pl-c1">isempty</span>(l)         <span class="pl-c"><span class="pl-c">#</span> Test whether there are any items.</span>
<span class="pl-c1">empty!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove all items.</span>
<span class="pl-c1">length</span>(l)          <span class="pl-c"><span class="pl-c">#</span> The number of entries. An O(n) operation.</span>
<span class="pl-c1">2</span> <span class="pl-k">in</span> l             <span class="pl-c"><span class="pl-c">#</span> Test whether the given item is an entry in the list. O(n).</span>
<span class="pl-c1">eltype</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Returns the item type, here Int64.</span>
<span class="pl-c1">indexin</span>(a, l)      <span class="pl-c"><span class="pl-c">#</span> Highest index in list for each value of a that is member.</span>
<span class="pl-c1">first</span>(l)           <span class="pl-c"><span class="pl-c">#</span> First item in the list.</span>
<span class="pl-c1">last</span>(l)            <span class="pl-c"><span class="pl-c">#</span> Last item in the list, the item value.</span>
<span class="pl-c1">push!</span>(l, d)        <span class="pl-c"><span class="pl-c">#</span> Add item d to end of list. Returns index of item.</span>
<span class="pl-c1">pop!</span>(l, d)         <span class="pl-c"><span class="pl-c">#</span> Remove and return item at end of list.</span>
<span class="pl-c1">unshift!</span>(l, d)     <span class="pl-c"><span class="pl-c">#</span> Add item to start of list. Return index of item.</span>
<span class="pl-c1">shift!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove first item and return value.</span>
<span class="pl-c1">append!</span>(l, items)  <span class="pl-c"><span class="pl-c">#</span> Add items to end of list.</span>
<span class="pl-c1">prepend!</span>(l, items) <span class="pl-c"><span class="pl-c">#</span> Add items to start of list.</span></pre></div>
<p>There can be an index into the list. It is a reference to a list
node but can be treated as an opaque index.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getindex(l, index)     # Returns value of item at this index.
setindex!(l, index, d) # Sets item value at this index.
endof(l)               # Returns index of last node. An O(n) operation.
insert!(l, index, d)   # Insert item at index, pushing values back. Return index.
deleteat!(l, index)    # Delete item at index. Return list.
splice!(l, index)      # Remove value at index, returning data value.
splice!(l, index, d)   # Replace item at index with data value.
find(l, d)             # Find first occurrence of item in list. Return its index.
find(l, index, d)      # Find first occurrence of d after the given index.
"><pre><span class="pl-c1">getindex</span>(l, index)     <span class="pl-c"><span class="pl-c">#</span> Returns value of item at this index.</span>
<span class="pl-c1">setindex!</span>(l, index, d) <span class="pl-c"><span class="pl-c">#</span> Sets item value at this index.</span>
<span class="pl-c1">endof</span>(l)               <span class="pl-c"><span class="pl-c">#</span> Returns index of last node. An O(n) operation.</span>
<span class="pl-c1">insert!</span>(l, index, d)   <span class="pl-c"><span class="pl-c">#</span> Insert item at index, pushing values back. Return index.</span>
<span class="pl-c1">deleteat!</span>(l, index)    <span class="pl-c"><span class="pl-c">#</span> Delete item at index. Return list.</span>
<span class="pl-c1">splice!</span>(l, index)      <span class="pl-c"><span class="pl-c">#</span> Remove value at index, returning data value.</span>
<span class="pl-c1">splice!</span>(l, index, d)   <span class="pl-c"><span class="pl-c">#</span> Replace item at index with data value.</span>
<span class="pl-c1">find</span>(l, d)             <span class="pl-c"><span class="pl-c">#</span> Find first occurrence of item in list. Return its index.</span>
<span class="pl-c1">find</span>(l, index, d)      <span class="pl-c"><span class="pl-c">#</span> Find first occurrence of d after the given index.</span></pre></div>
<p>There are two kinds of iterators for <code>List</code>. One access items.
The other loops over indices.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="l = List{Int}()
prepend!(l, [2, 4, 6])
for item::Int in l
    println(item)
end

for index in indexed(l)
    item=getindex(l, index)
    println(item)
end

"><pre>l <span class="pl-k">=</span> <span class="pl-c1">List</span><span class="pl-c1">{Int}</span>()
<span class="pl-c1">prepend!</span>(l, [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>])
<span class="pl-k">for</span> item<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">in</span> l
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>

<span class="pl-k">for</span> index <span class="pl-k">in</span> <span class="pl-c1">indexed</span>(l)
    item<span class="pl-k">=</span><span class="pl-c1">getindex</span>(l, index)
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>
</pre></div>
<h2><a id="user-content-slist" class="anchor" aria-hidden="true" href="#slist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SList</h2>
<p><code>SList</code> is a singly linked list over items of a given type.
Appending to the end of this list takes an order of the number of
the items in the list.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = SList{Int}()    # Create a list of the given type.
isempty(l)         # Test whether there are any items.
empty!(l)          # Remove all items.
eltype(l)          # Returns the item type, here Int64.
first(l)           # First item in the list.
unshift!(l, d)     # Add item to start of list. Return index of item.
shift!(l)          # Remove first item and return value.
prepend!(l, items) # Add items to start of list.
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">SList</span><span class="pl-c1">{Int}</span>()    <span class="pl-c"><span class="pl-c">#</span> Create a list of the given type.</span>
<span class="pl-c1">isempty</span>(l)         <span class="pl-c"><span class="pl-c">#</span> Test whether there are any items.</span>
<span class="pl-c1">empty!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove all items.</span>
<span class="pl-c1">eltype</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Returns the item type, here Int64.</span>
<span class="pl-c1">first</span>(l)           <span class="pl-c"><span class="pl-c">#</span> First item in the list.</span>
<span class="pl-c1">unshift!</span>(l, d)     <span class="pl-c"><span class="pl-c">#</span> Add item to start of list. Return index of item.</span>
<span class="pl-c1">shift!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove first item and return value.</span>
<span class="pl-c1">prepend!</span>(l, items) <span class="pl-c"><span class="pl-c">#</span> Add items to start of list.</span></pre></div>
<p>There can be an index into the list. It is a reference to a list
node but can be treated as an opaque index.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getindex(l, index)     # Returns value of item at this index.
setindex!(l, index, d) # Sets item value at this index.
insert!(l, index, d)   # Inserts *after* the given index. Returns index.
"><pre><span class="pl-c1">getindex</span>(l, index)     <span class="pl-c"><span class="pl-c">#</span> Returns value of item at this index.</span>
<span class="pl-c1">setindex!</span>(l, index, d) <span class="pl-c"><span class="pl-c">#</span> Sets item value at this index.</span>
<span class="pl-c1">insert!</span>(l, index, d)   <span class="pl-c"><span class="pl-c">#</span> Inserts *after* the given index. Returns index.</span></pre></div>
<p>The following methods are O(n) for singly linked lists.
They are included for completeness, but needing these is an indication
that using a doubly linked list, or Vector, might be a better choice.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="length(l)          # The number of entries.
2 in l             # Test whether the given item is an entry in the list.
indexin(a, l)      # Highest index in list for each value of a that is member.
last(l)            # Last item in the list, the item value.
push!(l, d)        # Add item d to end of list. Returns index of item.
pop!(l, d)         # Remove and return item at end of list.
append!(l, items)  # Add items to end of list.
endof(l)               # Returns index of last node.
deleteat!(l, index)    # Delete item at index. Return list.
splice!(l, index)      # Remove value at index, returning data value.
splice!(l, index, d)   # Replace item at index with data value.
find(l, d)             # Find first occurrence of item in list. Return its index.
find(l, index, d)      # Find first occurrence of d after the given index.
"><pre><span class="pl-c1">length</span>(l)          <span class="pl-c"><span class="pl-c">#</span> The number of entries.</span>
<span class="pl-c1">2</span> <span class="pl-k">in</span> l             <span class="pl-c"><span class="pl-c">#</span> Test whether the given item is an entry in the list.</span>
<span class="pl-c1">indexin</span>(a, l)      <span class="pl-c"><span class="pl-c">#</span> Highest index in list for each value of a that is member.</span>
<span class="pl-c1">last</span>(l)            <span class="pl-c"><span class="pl-c">#</span> Last item in the list, the item value.</span>
<span class="pl-c1">push!</span>(l, d)        <span class="pl-c"><span class="pl-c">#</span> Add item d to end of list. Returns index of item.</span>
<span class="pl-c1">pop!</span>(l, d)         <span class="pl-c"><span class="pl-c">#</span> Remove and return item at end of list.</span>
<span class="pl-c1">append!</span>(l, items)  <span class="pl-c"><span class="pl-c">#</span> Add items to end of list.</span>
<span class="pl-c1">endof</span>(l)               <span class="pl-c"><span class="pl-c">#</span> Returns index of last node.</span>
<span class="pl-c1">deleteat!</span>(l, index)    <span class="pl-c"><span class="pl-c">#</span> Delete item at index. Return list.</span>
<span class="pl-c1">splice!</span>(l, index)      <span class="pl-c"><span class="pl-c">#</span> Remove value at index, returning data value.</span>
<span class="pl-c1">splice!</span>(l, index, d)   <span class="pl-c"><span class="pl-c">#</span> Replace item at index with data value.</span>
<span class="pl-c1">find</span>(l, d)             <span class="pl-c"><span class="pl-c">#</span> Find first occurrence of item in list. Return its index.</span>
<span class="pl-c1">find</span>(l, index, d)      <span class="pl-c"><span class="pl-c">#</span> Find first occurrence of d after the given index.</span></pre></div>
<p>As with <code>List</code>, there are two kinds of iterators for <code>SList</code>. One access items.
The other loops over indices.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="l = SList{Int}()
prepend!(l, [2, 4, 6])
for item::Int in l
    println(item)
end

for index in indexed(l)
    item=getindex(l, index)
    println(item)
end

"><pre>l <span class="pl-k">=</span> <span class="pl-c1">SList</span><span class="pl-c1">{Int}</span>()
<span class="pl-c1">prepend!</span>(l, [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>])
<span class="pl-k">for</span> item<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">in</span> l
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>

<span class="pl-k">for</span> index <span class="pl-k">in</span> <span class="pl-c1">indexed</span>(l)
    item<span class="pl-k">=</span><span class="pl-c1">getindex</span>(l, index)
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>
</pre></div>
<h2><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation Notes</h2>
<p>The code comments each time a method for these classes
differs from interfaces described for collections in
the manual. All differences stem from an assumption
that the index to a collection will be an integer.</p>
<p>If you have comments, or especially if I have the wrong idea
about how to write good code in Julia, please send me an email.</p>
</article></div>