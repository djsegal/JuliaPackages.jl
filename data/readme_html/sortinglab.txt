<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
  <thead>
  <tr>
  <th>author</th>
  <th>title</th>
  <th>date</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  <td><div dir="auto">Dai ZJ</div></td>
  <td><div dir="auto">SortingLab README</div></td>
  <td><div dir="auto">2019--09-28</div></td>
  </tr>
  </tbody>
</table>

<h1 dir="auto"><a id="user-content-sortinglab" class="anchor" aria-hidden="true" href="#sortinglab"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SortingLab</h1>
<p dir="auto">An alternative implementation of sorting algorithms and APIs. The ultimate aim is to contribute back to Julia base or SortingAlgorithms.jl. However, there is commitment to keep this package's API stable and supported, so other developers can rely on the implementation and API here.</p>
<h1 dir="auto"><a id="user-content-faster-sort-and-sortperm" class="anchor" aria-hidden="true" href="#faster-sort-and-sortperm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Faster Sort and Sortperm</h1>
<p dir="auto">The main function exported by SortingLab is <code>fsort</code> and <code>fsortperm</code> which generally implements faster algorithms than <code>sort</code> and <code>sortperm</code> for <code>CategoricalArrays.CategoricalVector</code>, <code>Vector{T}</code>,  <code>Vector{Union{T, Missing}}</code> where <code>T</code> is</p>
<ul dir="auto">
<li>Int*, UInt*, Float*, String</li>
</ul>
<p dir="auto"><strong>Note</strong>: The reason why we restrict the type to <code>Vector</code> is that SortingLab.jl assumes something about memory layout and hence <code>Vector</code> provides that guarantee in the types supported.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SortingLab;
using Test
N = 1_000_000;
K = 100;

svec = rand(&quot;id&quot;.*string.(1:N÷K, pad=10), N);

svec_sorted = fsort(svec);
@test issorted(svec_sorted)
@test issorted(svec) == false"><pre><span class="pl-k">using</span> SortingLab;
<span class="pl-k">using</span> Test
N <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>;
K <span class="pl-k">=</span> <span class="pl-c1">100</span>;

svec <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span><span class="pl-k">.*</span><span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">÷</span>K, pad<span class="pl-k">=</span><span class="pl-c1">10</span>), N);

svec_sorted <span class="pl-k">=</span> <span class="pl-c1">fsort</span>(svec);
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(svec_sorted)
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(svec) <span class="pl-k">==</span> <span class="pl-c1">false</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Test Passed"><pre class="notranslate"><code>Test Passed
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# faster string sortperm
sorted_idx = fsortperm(svec)
issorted(svec[sorted_idx]) #true

# in place string sort
fsort!(svec);
issorted(svec) # true"><pre><span class="pl-c"><span class="pl-c">#</span> faster string sortperm</span>
sorted_idx <span class="pl-k">=</span> <span class="pl-c1">fsortperm</span>(svec)
<span class="pl-c1">issorted</span>(svec[sorted_idx]) <span class="pl-c"><span class="pl-c">#</span>true</span>

<span class="pl-c"><span class="pl-c">#</span> in place string sort</span>
<span class="pl-c1">fsort!</span>(svec);
<span class="pl-c1">issorted</span>(svec) <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="true"><pre class="notranslate"><code>true
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# CategoricalArray sort
using CategoricalArrays
pools = &quot;id&quot;.*string.(1:100,3);
byvec = CategoricalArray{String, 1}(rand(UInt32(1):UInt32(length(pools)), N), CategoricalPool(pools, false));
byvec = compress(byvec);

byvec_sorted = fsort(byvec);
@test issorted(byvec_sorted)"><pre><span class="pl-c"><span class="pl-c">#</span> CategoricalArray sort</span>
<span class="pl-k">using</span> CategoricalArrays
pools <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span><span class="pl-k">.*</span><span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-c1">3</span>);
byvec <span class="pl-k">=</span> <span class="pl-c1">CategoricalArray</span><span class="pl-c1">{String, 1}</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">UInt32</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">UInt32</span>(<span class="pl-c1">length</span>(pools)), N), <span class="pl-c1">CategoricalPool</span>(pools, <span class="pl-c1">false</span>));
byvec <span class="pl-k">=</span> <span class="pl-c1">compress</span>(byvec);

byvec_sorted <span class="pl-k">=</span> <span class="pl-c1">fsort</span>(byvec);
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(byvec_sorted)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Test Passed"><pre class="notranslate"><code>Test Passed
</code></pre></div>
<h3 dir="auto"><a id="user-content-sorting-vectoruniont-missing" class="anchor" aria-hidden="true" href="#sorting-vectoruniont-missing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sorting <code>Vector{Union{T, Missing}}</code></h3>
<p dir="auto">For vectors that contain <code>missing</code>, the <code>sort</code> and <code>sortperm</code> performance is often sub-optimal in <code>Base</code> and is not supported in <code>SortingAlgorithms.jl</code>'s radixsort implementation. This is solved by <code>SortingLab.jl</code> <code>fsort</code>, see Benchmarks Section</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test
using Missings: allowmissing
x = allowmissing(rand(1:10_000, 1_000_000))
x[rand(1:length(x), 100_000)] .= missing

using SortingLab
@test isequal(fsort(x), sort(x))"><pre><span class="pl-k">using</span> Test
<span class="pl-k">using</span> Missings<span class="pl-k">:</span> allowmissing
x <span class="pl-k">=</span> <span class="pl-c1">allowmissing</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10_000</span>, <span class="pl-c1">1_000_000</span>))
x[<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x), <span class="pl-c1">100_000</span>)] <span class="pl-k">.=</span> <span class="pl-c1">missing</span>

<span class="pl-k">using</span> SortingLab
<span class="pl-c1">@test</span> <span class="pl-c1">isequal</span>(<span class="pl-c1">fsort</span>(x), <span class="pl-c1">sort</span>(x))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Test Passed"><pre class="notranslate"><code>Test Passed
</code></pre></div>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="benchmarks/sort_vs_radixsort.png"><img src="benchmarks/sort_vs_radixsort.png" alt="Base.sort vs SortingLab.radixsort" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="benchmarks/sortperm_vs_fsortperm.png"><img src="benchmarks/sortperm_vs_fsortperm.png" alt="Base.sort vs SortingLab.radixsort" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="benchmarks/fsort_missing_100m_int.png"><img src="benchmarks/fsort_missing_100m_int.png" alt="Base.sort vs SortingLab.fsort" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="benchmarks/fsortperm_missing_100m_int.png"><img src="benchmarks/fsortperm_missing_100m_int.png" alt="Base.sortperm vs SortingLab.sortperm" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-benchmarking-code" class="anchor" aria-hidden="true" href="#benchmarking-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarking code</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SortingLab;
using BenchmarkTools;
import Random: randstring

N = 1_000_000;
K = 100;

svec = rand(&quot;id&quot;.*string.(1:N÷K, pad=10), N);
sort_id_1m = @belapsed sort($svec);
radixsort_id_1m = @belapsed radixsort($svec);

sortperm_id_1m = @belapsed sortperm($svec);
fsortperm_id_1m = @belapsed fsortperm($svec);

rsvec = rand([randstring(rand(1:32)) for i = 1:N÷K], N);
sort_r_1m = @belapsed sort($rsvec);
radixsort_r_1m = @belapsed radixsort($rsvec);

sortperm_r_1m = @belapsed sortperm($rsvec);
fsortperm_r_1m = @belapsed fsortperm($rsvec);

using Plots
using StatsPlots
groupedbar(
    repeat([&quot;IDs&quot;, &quot;Random len 32&quot;], inner=2),
    [sort_id_1m, radixsort_id_1m, sort_r_1m, radixsort_r_1m],
    group = repeat([&quot;Base.sort&quot;,&quot;SortingLab.radixsort&quot;], outer = 2),
    title = &quot;Strings sort (1m rows): Base vs SortingLab&quot;)
savefig(&quot;benchmarks/sort_vs_radixsort.png&quot;)

groupedbar(
    repeat([&quot;IDs&quot;, &quot;Random len 32&quot;], inner=2),
    [sortperm_id_1m, fsortperm_id_1m, sortperm_r_1m, fsortperm_r_1m],
    group = repeat([&quot;Base.sortperm&quot;,&quot;SortingLab.fsortperm&quot;], outer = 2),
    title = &quot;Strings sortperm (1m rows): Base vs SortingLab&quot;)
savefig(&quot;benchmarks/sortperm_vs_fsortperm.png&quot;)"><pre><span class="pl-k">using</span> SortingLab;
<span class="pl-k">using</span> BenchmarkTools;
<span class="pl-k">import</span> Random<span class="pl-k">:</span> randstring

N <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>;
K <span class="pl-k">=</span> <span class="pl-c1">100</span>;

svec <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span><span class="pl-k">.*</span><span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">÷</span>K, pad<span class="pl-k">=</span><span class="pl-c1">10</span>), N);
sort_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>svec);
radixsort_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>svec);

sortperm_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sortperm</span>(<span class="pl-k">$</span>svec);
fsortperm_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsortperm</span>(<span class="pl-k">$</span>svec);

rsvec <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">32</span>)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">÷</span>K], N);
sort_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>rsvec);
radixsort_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>rsvec);

sortperm_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sortperm</span>(<span class="pl-k">$</span>rsvec);
fsortperm_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsortperm</span>(<span class="pl-k">$</span>rsvec);

<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> StatsPlots
<span class="pl-c1">groupedbar</span>(
    <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>IDs<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Random len 32<span class="pl-pds">"</span></span>], inner<span class="pl-k">=</span><span class="pl-c1">2</span>),
    [sort_id_1m, radixsort_id_1m, sort_r_1m, radixsort_r_1m],
    group <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.radixsort<span class="pl-pds">"</span></span>], outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
    title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Strings sort (1m rows): Base vs SortingLab<span class="pl-pds">"</span></span>)
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>benchmarks/sort_vs_radixsort.png<span class="pl-pds">"</span></span>)

<span class="pl-c1">groupedbar</span>(
    <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>IDs<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Random len 32<span class="pl-pds">"</span></span>], inner<span class="pl-k">=</span><span class="pl-c1">2</span>),
    [sortperm_id_1m, fsortperm_id_1m, sortperm_r_1m, fsortperm_r_1m],
    group <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sortperm<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.fsortperm<span class="pl-pds">"</span></span>], outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
    title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Strings sortperm (1m rows): Base vs SortingLab<span class="pl-pds">"</span></span>)
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>benchmarks/sortperm_vs_fsortperm.png<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-similar-package" class="anchor" aria-hidden="true" href="#similar-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar package</h1>
<p dir="auto"><a href="https://github.com/JuliaCollections/SortingAlgorithms.jl">https://github.com/JuliaCollections/SortingAlgorithms.jl</a></p>
<h1 dir="auto"><a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Build status</h1>
<p dir="auto"><a href="https://travis-ci.org/xiaodaigh/SortingLab.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/495d083c538f1210b7687eac15bd3c334b75645e17641884f206292ef6d92b42/68747470733a2f2f7472617669732d63692e6f72672f7869616f64616967682f536f7274696e674c61622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/xiaodaigh/SortingLab.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/xiaodaigh/SortingLab.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b0551b37fbce09770cd739de296fcc4b9269b57c2b537d9d7963a777197038c7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7869616f64616967682f536f7274696e674c61622e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/xiaodaigh/SortingLab.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/xiaodaigh/SortingLab.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dc805ec2f1d80e43aa9760abf563579eb49aef04ff13cdd0d0e28295253cd426/687474703a2f2f636f6465636f762e696f2f6769746875622f7869616f64616967682f536f7274696e674c61622e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/xiaodaigh/SortingLab.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
</article></div>