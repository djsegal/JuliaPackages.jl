<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sortinglab" class="anchor" aria-hidden="true" href="#sortinglab"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SortingLab</h1>
<p>An alternative implementation of sorting algorithms and APIs. The ultimate aim is to contribute back to Julia base or SortingAlgorithms.jl. However, there is commitment to keep this package's API stable and supported, so other developers can rely on the implementation and API here.</p>
<h1><a id="user-content-faster-sort-and-sortperm" class="anchor" aria-hidden="true" href="#faster-sort-and-sortperm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Faster Sort and Sortperm</h1>
<p>The main function exported by SortingLab is <code>fsort</code> and <code>fsortperm</code> which generally implements faster algorithms than <code>sort</code> and <code>sortperm</code> for <code>CategoricalArrays.CategoricalVector</code>, <code>Vector{T}</code>,  <code>Vector{Union{T, Missing}}</code> where <code>T</code> is</p>
<ul>
<li>Int*, UInt*, Float*, String</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SortingLab;
<span class="pl-k">using</span> Test
N <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>;
K <span class="pl-k">=</span> <span class="pl-c1">100</span>;

svec <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span><span class="pl-k">.*</span><span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">รท</span>K, pad<span class="pl-k">=</span><span class="pl-c1">10</span>), N);

svec_sorted <span class="pl-k">=</span> <span class="pl-c1">fsort</span>(svec);
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(svec_sorted)
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(svec) <span class="pl-k">==</span> <span class="pl-c1">false</span></pre></div>
<pre><code>Test Passed
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> faster string sortperm</span>
sorted_idx <span class="pl-k">=</span> <span class="pl-c1">fsortperm</span>(svec)
<span class="pl-c1">issorted</span>(svec[sorted_idx]) <span class="pl-c"><span class="pl-c">#</span>true</span>

<span class="pl-c"><span class="pl-c">#</span> in place string sort</span>
<span class="pl-c1">fsort!</span>(svec);
<span class="pl-c1">issorted</span>(svec) <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<pre><code>true
</code></pre>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> CategoricalArray sort</span>
<span class="pl-k">using</span> CategoricalArrays
pools <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span><span class="pl-k">.*</span><span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-c1">3</span>);
byvec <span class="pl-k">=</span> <span class="pl-c1">CategoricalArray</span><span class="pl-c1">{String, 1}</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">UInt32</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">UInt32</span>(<span class="pl-c1">length</span>(pools)), N), <span class="pl-c1">CategoricalPool</span>(pools, <span class="pl-c1">false</span>));
byvec <span class="pl-k">=</span> <span class="pl-c1">compress</span>(byvec);

byvec_sorted <span class="pl-k">=</span> <span class="pl-c1">fsort</span>(byvec);
<span class="pl-c1">@test</span> <span class="pl-c1">issorted</span>(byvec_sorted)</pre></div>
<pre><code>Test Passed
</code></pre>
<h3><a id="user-content-sorting-vectoruniont-missing" class="anchor" aria-hidden="true" href="#sorting-vectoruniont-missing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sorting <code>Vector{Union{T, Missing}}</code></h3>
<p>For vectors that contain <code>missing</code>, the <code>sort</code> and <code>sortperm</code> performance is often sub-optimal in <code>Base</code> and is not supported in <code>SortingAlgorithms.jl</code>'s radixsort implementation. This is solved by <code>SortingLab.jl</code> <code>fsort</code>, see Benchmarks Section</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Test
<span class="pl-k">using</span> Missings<span class="pl-k">:</span> allowmissing
x <span class="pl-k">=</span> <span class="pl-c1">allowmissing</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10_000</span>, <span class="pl-c1">1_000_000</span>))
x[<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x), <span class="pl-c1">100_000</span>)] <span class="pl-k">.=</span> <span class="pl-c1">missing</span>

<span class="pl-k">using</span> SortingLab
<span class="pl-c1">@test</span> <span class="pl-c1">isequal</span>(<span class="pl-c1">fsort</span>(x), <span class="pl-c1">sort</span>(x))</pre></div>
<pre><code>Test Passed
</code></pre>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p><a target="_blank" rel="noopener noreferrer" href="benchmarks/sort_vs_radixsort.png"><img src="benchmarks/sort_vs_radixsort.png" alt="Base.sort vs SortingLab.radixsort" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="benchmarks/sortperm_vs_fsortperm.png"><img src="benchmarks/sortperm_vs_fsortperm.png" alt="Base.sort vs SortingLab.radixsort" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="benchmarks/fsort_missing_100m_int.png"><img src="benchmarks/fsort_missing_100m_int.png" alt="Base.sort vs SortingLab.fsort" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="benchmarks/fsortperm_missing_100m_int.png"><img src="benchmarks/fsortperm_missing_100m_int.png" alt="Base.sortperm vs SortingLab.sortperm" style="max-width:100%;"></a></p>
<h2><a id="user-content-benchmarking-code" class="anchor" aria-hidden="true" href="#benchmarking-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarking code</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SortingLab;
<span class="pl-k">using</span> BenchmarkTools;
<span class="pl-k">import</span> Random<span class="pl-k">:</span> randstring

N <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>;
K <span class="pl-k">=</span> <span class="pl-c1">100</span>;

svec <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">"</span>id<span class="pl-pds">"</span></span><span class="pl-k">.*</span><span class="pl-c1">string</span>.(<span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">รท</span>K, pad<span class="pl-k">=</span><span class="pl-c1">10</span>), N);
sort_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>svec);
radixsort_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>svec);

sortperm_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sortperm</span>(<span class="pl-k">$</span>svec);
fsortperm_id_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsortperm</span>(<span class="pl-k">$</span>svec);

rsvec <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-c1">randstring</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">32</span>)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">รท</span>K], N);
sort_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sort</span>(<span class="pl-k">$</span>rsvec);
radixsort_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">radixsort</span>(<span class="pl-k">$</span>rsvec);

sortperm_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">sortperm</span>(<span class="pl-k">$</span>rsvec);
fsortperm_r_1m <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span> <span class="pl-c1">fsortperm</span>(<span class="pl-k">$</span>rsvec);

<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> StatsPlots
<span class="pl-c1">groupedbar</span>(
    <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>IDs<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Random len 32<span class="pl-pds">"</span></span>], inner<span class="pl-k">=</span><span class="pl-c1">2</span>),
    [sort_id_1m, radixsort_id_1m, sort_r_1m, radixsort_r_1m],
    group <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sort<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.radixsort<span class="pl-pds">"</span></span>], outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
    title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Strings sort (1m rows): Base vs SortingLab<span class="pl-pds">"</span></span>)
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>benchmarks/sort_vs_radixsort.png<span class="pl-pds">"</span></span>)

<span class="pl-c1">groupedbar</span>(
    <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>IDs<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Random len 32<span class="pl-pds">"</span></span>], inner<span class="pl-k">=</span><span class="pl-c1">2</span>),
    [sortperm_id_1m, fsortperm_id_1m, sortperm_r_1m, fsortperm_r_1m],
    group <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>Base.sortperm<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SortingLab.fsortperm<span class="pl-pds">"</span></span>], outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
    title <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Strings sortperm (1m rows): Base vs SortingLab<span class="pl-pds">"</span></span>)
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>benchmarks/sortperm_vs_fsortperm.png<span class="pl-pds">"</span></span>)</pre></div>
<h1><a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build status</h1>
<p><a href="https://travis-ci.org/xiaodaigh/SortingLab.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed64c1771f14343ddcf26723673fe6f1567f7b43/68747470733a2f2f7472617669732d63692e6f72672f7869616f64616967682f536f7274696e674c61622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/xiaodaigh/SortingLab.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/xiaodaigh/SortingLab.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c78b79fa3e995716ae5975d1cfce07cd36309fa5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7869616f64616967682f536f7274696e674c61622e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/xiaodaigh/SortingLab.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/xiaodaigh/SortingLab.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fd0dd65dfb34d36ef689fa08ec376bbfbb1697e1/687474703a2f2f636f6465636f762e696f2f6769746875622f7869616f64616967682f536f7274696e674c61622e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/xiaodaigh/SortingLab.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
</article></div>