<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stippleuijl-" class="anchor" aria-hidden="true" href="#stippleuijl-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StippleUI.jl <a href="https://www.genieframework.com/docs/" rel="nofollow"><img src="https://camo.githubusercontent.com/1a3943bd84f790d2cbc654e57398e5ec632e8b91d3fe37abb41b40109cb2502f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73746970706c6575692d646f63732d677265656e79656c6c6f77" alt="Docs" data-canonical-src="https://img.shields.io/badge/stippleui-docs-greenyellow" style="max-width: 100%;"></a></h1>
<p dir="auto">StippleUI is a library of reactive UI elements for <a href="https://github.com/GenieFramework/Stipple.jl">Stipple.jl</a>.</p>
<p dir="auto">together with</p>
<ul dir="auto">
<li><a href="https://github.com/GenieFramework/Stipple.jl">Stipple.jl</a>,</li>
<li><a href="https://github.com/GenieFramework/StipplePlotly.jl">StipplePlotly.jl</a> and</li>
<li><a href="https://github.com/GenieFramework/Genie.jl">Genie.jl</a></li>
</ul>
<p dir="auto">it is part of the <a href="https://github.com/GenieFramework/GenieFramework.jl">GenieFramework</a>, a powerful and complete solution for building
beautiful, responsive, reactive, high performance interactive data dashboards in pure Julia.</p>
<p dir="auto"><code>StippleUI</code> provides over 30 UI elements, including forms and form inputs (button, slider, checkbox, radio, toggle, range), lists, data tables,
higher level components (badges, banners, cards, dialogs, chips, icons), and layout elements (row, col, dashboard, heading, space) from the <a href="https://quasar.dev" rel="nofollow">Quasar Framework</a>.</p>
<p dir="auto"><strong>New</strong>: <a href="#stippleuiparser">StippleUIParser</a></p>
<ul dir="auto">
<li>conversion of html code to julia code</li>
<li>pretty-printing of html</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add StippleUI"><pre>pkg<span class="pl-k">&gt;</span> add StippleUI</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-quasar-components" class="anchor" aria-hidden="true" href="#quasar-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quasar Components</h3>
<p dir="auto">StippleUI defines functions for most of the quasar vue components. Most functions are named like their Quasar counterparts, e.g. <code>btn()</code> for <code>q-btn</code>, <code>tab()</code> for <code>q-tab</code>, etc. Some functions have received different names for clarity, e.g. <code>textfield()</code> for <code>q-input</code> with text type and <code>numberfield()</code> for <code>q-input</code> with number type.
Most functions have named positional arguments that are used for definition of common attributes, e.g. <code>label</code> or <code>fieldname</code>.
Besides that all functions have a general calling scheme for unnamed arguments and keyword arguments:</p>
<ul dir="auto">
<li>if a component supports content, the first non-named positional argument is passed as content to the components.</li>
<li>any following non-array argument is passed as parameter to the components</li>
<li>any non-named array argument is joined and passed as content</li>
<li>if a component does not support content, e.g. <code>btn()</code>, all non-named arguments except arrays are passed as parameter. (Passing arrays can be used to define templates for a component. More details can be found in Vue.js docs.)</li>
<li>keyword arguments are passed pretty much the same as the Julia expression, except that
<ul dir="auto">
<li><code>__</code> is converted to <code>-</code></li>
<li><code>!</code> in the middle of a keyword is converted to <code>.</code></li>
<li><code>!</code> at the end of a keyword indicates that the argument should be treated as js expression</li>
<li>a Symbol as value of a keyword argument indicates that the argument should be treated as js expression</li>
<li>non-standard characters which are not allowed in Julia variable names can be used by employing the <code>var""</code>notation, e.g. <code>span(var"v-html" = "My Text with &lt;br&gt;new lines")</code></li>
<li>most variable names that contain a dash in Vue-syntax are automatically replaced, e.g. <code>"leftlabel" =&gt; "left-label"</code>. All standard mappings can be found in <code>StippleUI.API.ATTRIBUTES_MAPPINGS</code></li>
</ul>
</li>
</ul>
<h4 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; btn(&quot;Just do it!&quot;, @click(:mybutton), loading = :mybutton) |&gt; println
&lt;q-btn :loading=&quot;mybutton&quot; label=&quot;Just do it!&quot; v-on:click=&quot;mybutton = true&quot;&gt;&lt;/q-btn&gt;

julia&gt; textfield(&quot;Label&quot;, :mytext) |&gt; println
&lt;q-input label=&quot;Label&quot; v-model=&quot;mytext&quot;&gt;&lt;/q-input&gt;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">btn</span>(<span class="pl-s"><span class="pl-pds">"</span>Just do it!<span class="pl-pds">"</span></span>, <span class="pl-c1">@click</span>(<span class="pl-c1">:mybutton</span>), loading <span class="pl-k">=</span> <span class="pl-c1">:mybutton</span>) <span class="pl-k">|&gt;</span> println
<span class="pl-k">&lt;</span>q<span class="pl-k">-</span>btn <span class="pl-c1">:loading</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mybutton<span class="pl-pds">"</span></span> label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Just do it!<span class="pl-pds">"</span></span> v<span class="pl-k">-</span>on<span class="pl-k">:</span>click<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mybutton = true<span class="pl-pds">"</span></span><span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>q<span class="pl-k">-</span>btn<span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">textfield</span>(<span class="pl-s"><span class="pl-pds">"</span>Label<span class="pl-pds">"</span></span>, <span class="pl-c1">:mytext</span>) <span class="pl-k">|&gt;</span> println
<span class="pl-k">&lt;</span>q<span class="pl-k">-</span>input label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Label<span class="pl-pds">"</span></span> v<span class="pl-k">-</span>model<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mytext<span class="pl-pds">"</span></span><span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>q<span class="pl-k">-</span>input<span class="pl-k">&gt;</span>
</pre></div>
<h4 dir="auto"><a id="user-content-what-if-a-component-is-missing" class="anchor" aria-hidden="true" href="#what-if-a-component-is-missing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What if a component is missing?</h4>
<p dir="auto">If a quasar component is not yet covered by StippleUI, you can still use the <code>quasar()</code> function to make it available in your UI:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; quasar(:btn, label = &quot;Action!&quot;) |&gt; println
&lt;q-btn label=&quot;Action!&quot;&gt;&lt;/q-btn&gt;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">quasar</span>(<span class="pl-c1">:btn</span>, label <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Action!<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> println
<span class="pl-k">&lt;</span>q<span class="pl-k">-</span>btn label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Action!<span class="pl-pds">"</span></span><span class="pl-k">&gt;&lt;</span><span class="pl-k">/</span>q<span class="pl-k">-</span>btn<span class="pl-k">&gt;</span></pre></div>
<p dir="auto">In a very similar way, you can also integrate vue components or any other html component:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; vue(:calender, date = &quot;today&quot;, &quot;This is still a dream!&quot;)
&quot;&lt;vue-calender date=\&quot;today\&quot;&gt;This is still a dream!&lt;/vue-calender&gt;&quot;

julia&gt; xelem(:br)
&quot;&lt;br&gt;&lt;/br&gt;&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">vue</span>(<span class="pl-c1">:calender</span>, date <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>today<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>This is still a dream!<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>&lt;vue-calender date=<span class="pl-cce">\"</span>today<span class="pl-cce">\"</span>&gt;This is still a dream!&lt;/vue-calender&gt;<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">xelem</span>(<span class="pl-c1">:br</span>)
<span class="pl-s"><span class="pl-pds">"</span>&lt;br&gt;&lt;/br&gt;<span class="pl-pds">"</span></span></pre></div>
<h3 dir="auto"><a id="user-content-bindings" class="anchor" aria-hidden="true" href="#bindings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bindings</h3>
<p dir="auto">There are two ways of assigning component properties</p>
<ul dir="auto">
<li>
<p dir="auto">assignment of a string value:
<code>attribute = "lorem ipsum"</code></p>
</li>
<li>
<p dir="auto">assignment of a Javascript expression, by</p>
<ul dir="auto">
<li>assigning a <code>Symbol</code>
<code>attribute = :input</code></li>
<li>or by appending a <code>!</code>-character to the attribute
<code>attribute! = "input"</code></li>
</ul>
<p dir="auto">In most cases this syntax is used to directly bind app variables, but you can also bind more complicated expressions, e.g. array elements (note that js has 0-based indexing):
<code>attribute = Symbol("data[0]")</code>
<code>attribute = R"data[0]"</code>
<code>attribute! = "data[0]"</code>
The <code>R""</code> string macro is a convenient way of defining Symbols.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-helper-macros" class="anchor" aria-hidden="true" href="#helper-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Helper macros</h3>
<p dir="auto">Vue.js has defined several short cuts which typically start with a <code>@</code>-character. In Julia the <code>@</code>-character is reserved for macros. So we decided to use macros to achieve a similar syntax. But we also provide macros to add attributes with other 'forbidden' characters like <code>.</code> or <code>-</code>.
Have a look at the docstrings of <code>@click</code>, <code>@on</code>,  <code>@iif</code>, <code>@els</code>, <code>@elsiif</code>, <code>@recur</code>, <code>@text</code>, <code>@bind</code>, <code>@data</code> and <code>@showif</code> to learn more. To try out whether rendering is correct enter the tentative expression at the REPL, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; span(@showif(true))
&quot;&lt;span v-show=\&quot;true\&quot;&gt;&lt;/span&gt;&quot;

julia&gt; span(@click(:mybutton))
&quot;&lt;span v-on:click=\&quot;mybutton = true\&quot;&gt;&lt;/span&gt;&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">span</span>(<span class="pl-c1">@showif</span>(<span class="pl-c1">true</span>))
<span class="pl-s"><span class="pl-pds">"</span>&lt;span v-show=<span class="pl-cce">\"</span>true<span class="pl-cce">\"</span>&gt;&lt;/span&gt;<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">span</span>(<span class="pl-c1">@click</span>(<span class="pl-c1">:mybutton</span>))
<span class="pl-s"><span class="pl-pds">"</span>&lt;span v-on:click=<span class="pl-cce">\"</span>mybutton = true<span class="pl-cce">\"</span>&gt;&lt;/span&gt;<span class="pl-pds">"</span></span></pre></div>
<h3 dir="auto"><a id="user-content-javascript-code" class="anchor" aria-hidden="true" href="#javascript-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Javascript code</h3>
<p dir="auto">Vue.js offers the possibility of embedding javascript functions that are called ither manually (<code>methods</code>) or automatically when certain events occur, e.g. <code>watch</code>, <code>mounted</code>, <code>created</code>, <code>computed</code>. Such code can easily be defined by the respective macros <code>@methods</code>, <code>@watch</code>, <code>@mounted</code>, <code>@created</code>, <code>@computed</code>, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@methods &quot;&quot;&quot;
logdemo: function(text) {
    console.log(&quot;Text from Stipple: &quot; + text)
    return text
},
squaredemo: function(number) {
    console.log(&quot;The square of &quot; + number + &quot; is &quot; + number**2)
    return number**2
}
&quot;&quot;&quot;

@created &quot;&quot;&quot;&quot;
    console.log('This app has just been created!')
&quot;&quot;&quot;"><pre><span class="pl-c1">@methods</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">logdemo: function(text) {</span>
<span class="pl-s">    console.log("Text from Stipple: " + text)</span>
<span class="pl-s">    return text</span>
<span class="pl-s">},</span>
<span class="pl-s">squaredemo: function(number) {</span>
<span class="pl-s">    console.log("The square of " + number + " is " + number**2)</span>
<span class="pl-s">    return number**2</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-c1">@created</span> <span class="pl-s"><span class="pl-pds">"""</span>"</span>
<span class="pl-s">    console.log('This app has just been created!')</span>
<span class="pl-s"><span class="pl-pds">"""</span></span></pre></div>
<p dir="auto">See the <a href="https://github.com/GenieFramework/StippleDemos/blob/master/ReactiveTools%20API/EditableTree.jl">editable tree demo</a> for more information.
These macros also work for explicit models, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@created MyApp &quot;&quot;&quot;&quot;
    console.log('This app has just been created!')
&quot;&quot;&quot;"><pre><span class="pl-c1">@created</span> MyApp <span class="pl-s"><span class="pl-pds">"""</span>"</span>
<span class="pl-s">    console.log('This app has just been created!')</span>
<span class="pl-s"><span class="pl-pds">"""</span></span></pre></div>
<h3 dir="auto"><a id="user-content-user-defined-events" class="anchor" aria-hidden="true" href="#user-defined-events"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>User-defined events</h3>
<p dir="auto">There is support for user-defined events by the macro <code>@event</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@event :uploaded begin            
    println(&quot;Files have been uploaded!&quot;)
end"><pre><span class="pl-c1">@event</span> <span class="pl-c1">:uploaded</span> <span class="pl-k">begin</span>            
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Files have been uploaded!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">These lines define julia code that is executed when an event from the client is forwarded to the server.
Typically, events at the client originate from certain vue components, e.g. <code>q-uploader</code>. They can be forwarded by calling the <code>@on</code> macro
with two Symbol arguments.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; uploader(&quot;Upload files&quot;, url = &quot;/upload&quot; , @on(:uploaded, :uploaded))
&quot;&lt;q-uploader url=\&quot;/upload\&quot; v-on:uploaded=\&quot;function(event) { handle_event(event, 'uploaded') }\&quot;&gt;Upload files&lt;/q-uploader&gt;&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">uploader</span>(<span class="pl-s"><span class="pl-pds">"</span>Upload files<span class="pl-pds">"</span></span>, url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/upload<span class="pl-pds">"</span></span> , <span class="pl-c1">@on</span>(<span class="pl-c1">:uploaded</span>, <span class="pl-c1">:uploaded</span>))
<span class="pl-s"><span class="pl-pds">"</span>&lt;q-uploader url=<span class="pl-cce">\"</span>/upload<span class="pl-cce">\"</span> v-on:uploaded=<span class="pl-cce">\"</span>function(event) { handle_event(event, 'uploaded') }<span class="pl-cce">\"</span>&gt;Upload files&lt;/q-uploader&gt;<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Events can also be triggered manually by calling <code>handle_event(event, 'uploaded')</code> on the client side.</p>
<p dir="auto">See the <a href="https://github.com/GenieFramework/StippleDemos/blob/master/ReactiveTools%20API/FileUpload.jl">file upload demo</a> for more information.
Again the <code>@event</code> macro also works for explicit models, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@event MyApp :uploaded begin            
    println(&quot;Files have been uploaded to MyApp!&quot;)
end"><pre><span class="pl-c1">@event</span> MyApp <span class="pl-c1">:uploaded</span> <span class="pl-k">begin</span>            
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Files have been uploaded to MyApp!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-example-app" class="anchor" aria-hidden="true" href="#example-app"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example app</h2>
<p dir="auto">The following snippet illustrates how to build a reactive UI based on StippleUI. You find three different ways of triggering handlers.</p>
<ul dir="auto">
<li>Every input in the input field triggers a function that sets the inverted input string in the output field.</li>
<li>Hitting the <code>Enter</code> key in the input field inverts the output string.</li>
<li>Pressing of the action button inverts the output string.
StippleUI</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Stipple, StippleUI

@vars Inverter begin
  process = false
  input = &quot;&quot;
  output::String, READONLY
end

function handlers(model)
  on(model.input) do input
      model.output[] = input |&gt; reverse
  end

  onbutton(model.process) do
      model.output[] = model.output[] |&gt; reverse
  end

  model
end

function ui()
  row(cell(class = &quot;st-module&quot;, [
    textfield(class = &quot;q-my-md&quot;, &quot;Input&quot;, :input, hint = &quot;Please enter some words&quot;, @on(&quot;keyup.enter&quot;, &quot;process = true&quot;))

    btn(class = &quot;q-my-md&quot;, &quot;Action!&quot;, @click(:process), color = &quot;primary&quot;)
    
    card(class = &quot;q-my-md&quot;, [
      card_section(h2(&quot;Output&quot;))
      card_section(&quot;Variant 1: {{ output }}&quot;)
      card_section([&quot;Variant 2: &quot;, span(class = &quot;text-red&quot;, @text(:output))])
    ])
  ]))
end

route(&quot;/&quot;) do
  model = Inverter |&gt; init |&gt; handlers
  page(model, ui()) |&gt; html
end

Genie.isrunning(:webserver) || up()"><pre><span class="pl-k">using</span> Stipple, StippleUI

<span class="pl-c1">@vars</span> Inverter <span class="pl-k">begin</span>
  process <span class="pl-k">=</span> <span class="pl-c1">false</span>
  input <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
  output<span class="pl-k">::</span><span class="pl-c1">String</span>, READONLY
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">handlers</span>(model)
  <span class="pl-c1">on</span>(model<span class="pl-k">.</span>input) <span class="pl-k">do</span> input
      model<span class="pl-k">.</span>output[] <span class="pl-k">=</span> input <span class="pl-k">|&gt;</span> reverse
  <span class="pl-k">end</span>

  <span class="pl-c1">onbutton</span>(model<span class="pl-k">.</span>process) <span class="pl-k">do</span>
      model<span class="pl-k">.</span>output[] <span class="pl-k">=</span> model<span class="pl-k">.</span>output[] <span class="pl-k">|&gt;</span> reverse
  <span class="pl-k">end</span>

  model
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">ui</span>()
  <span class="pl-c1">row</span>(<span class="pl-c1">cell</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>st-module<span class="pl-pds">"</span></span>, [
    <span class="pl-c1">textfield</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q-my-md<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Input<span class="pl-pds">"</span></span>, <span class="pl-c1">:input</span>, hint <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Please enter some words<span class="pl-pds">"</span></span>, <span class="pl-c1">@on</span>(<span class="pl-s"><span class="pl-pds">"</span>keyup.enter<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>process = true<span class="pl-pds">"</span></span>))

    <span class="pl-c1">btn</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q-my-md<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Action!<span class="pl-pds">"</span></span>, <span class="pl-c1">@click</span>(<span class="pl-c1">:process</span>), color <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span>)
    
    <span class="pl-c1">card</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q-my-md<span class="pl-pds">"</span></span>, [
      <span class="pl-c1">card_section</span>(<span class="pl-c1">h2</span>(<span class="pl-s"><span class="pl-pds">"</span>Output<span class="pl-pds">"</span></span>))
      <span class="pl-c1">card_section</span>(<span class="pl-s"><span class="pl-pds">"</span>Variant 1: {{ output }}<span class="pl-pds">"</span></span>)
      <span class="pl-c1">card_section</span>([<span class="pl-s"><span class="pl-pds">"</span>Variant 2: <span class="pl-pds">"</span></span>, <span class="pl-c1">span</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>text-red<span class="pl-pds">"</span></span>, <span class="pl-c1">@text</span>(<span class="pl-c1">:output</span>))])
    ])
  ]))
<span class="pl-k">end</span>

<span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
  model <span class="pl-k">=</span> Inverter <span class="pl-k">|&gt;</span> init <span class="pl-k">|&gt;</span> handlers
  <span class="pl-c1">page</span>(model, <span class="pl-c1">ui</span>()) <span class="pl-k">|&gt;</span> html
<span class="pl-k">end</span>

Genie<span class="pl-k">.</span><span class="pl-c1">isrunning</span>(<span class="pl-c1">:webserver</span>) <span class="pl-k">||</span> <span class="pl-c1">up</span>()</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/content/img/Example.png"><img src="docs/content/img/Example.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-stippleuiparser" class="anchor" aria-hidden="true" href="#stippleuiparser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StippleUIParser</h2>
<h3 dir="auto"><a id="user-content-tools" class="anchor" aria-hidden="true" href="#tools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tools</h3>
<ul dir="auto">
<li><code>parse_vue_html</code></li>
<li><code>test_vue_parsing</code></li>
<li><code>prettify</code></li>
</ul>
<p dir="auto">A very new tool is StippleUIParser. It converts html code to the respective Julian code and prettifies html code. This is meant as a helper tool to port demo code from the internet into Stipple/Genie apps.</p>
<h4 dir="auto"><a id="user-content-parse-vue-html-code-to-julia-code" class="anchor" aria-hidden="true" href="#parse-vue-html-code-to-julia-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parse vue html code to julia code</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StippleUI.StippleUIParser
julia&gt; doc_string = &quot;&quot;&quot;
&lt;template&gt;
    &lt;div class=&quot;q-pa-md&quot;&gt;
    &lt;q-scroll-area style=&quot;height: 230px; max-width: 300px;&quot;&gt;
        &lt;div class=&quot;row no-wrap&quot;&gt;
            &lt;div v-for=&quot;n in 10&quot; :key=&quot;n&quot; style=&quot;width: 150px&quot; class=&quot;q-pa-sm&quot;&gt;
                Lorem @ipsum \$dolor sit amet consectetur adipisicing elit.
            &lt;/div&gt;
            &lt;q-btn color=\&quot;primary\&quot; label=\&quot;`Animate to \${position}px`\&quot; @click=\&quot;scroll = true\&quot;&gt;&lt;/q-btn&gt;
            &lt;q-input hint=\&quot;Please enter some words\&quot; v-on:keyup.enter=\&quot;process = true\&quot; label=\&quot;Input\&quot; v-model=\&quot;input\&quot;&gt;&lt;/q-input&gt;
            &lt;q-input hint=\&quot;Please enter a number\&quot; label=\&quot;Input\&quot; v-model.number=\&quot;numberinput\&quot; class=\&quot;q-my-md\&quot;&gt;&lt;/q-input&gt;
        &lt;/div&gt;
    &lt;/q-scroll-area&gt;
    &lt;/div&gt;
&lt;/template&gt;
&quot;&quot;&quot;;

julia&gt; parse_vue_html(html_string, indent = 2) |&gt; println
template(
  Stipple.Html.div(class = &quot;q-pa-md&quot;,
    scrollarea(style = &quot;height: 230px; max-width: 300px;&quot;,
      Stipple.Html.div(class = &quot;row no-wrap&quot;, [
        Stipple.Html.div(var&quot;v-for&quot; = &quot;n in 10&quot;, key! = &quot;n&quot;, style = &quot;width: 150px&quot;, class = &quot;q-pa-sm&quot;,
          &quot;Lorem @ipsum dolor sit amet consectetur adipisicing elit.&quot;
        )
        btn(raw&quot;`Animate to ${position}px`&quot;, color = &quot;primary&quot;, var&quot;v-on:click&quot; = &quot;scroll = true&quot;)
        textfield(&quot;Input&quot;, :input, hint = &quot;Please enter some words&quot;, var&quot;v-on:keyup.enter&quot; = &quot;process = true&quot;)
        numberfield(&quot;Input&quot;, :numberinput, hint = &quot;Please enter a number&quot;, class = &quot;q-my-md&quot;)
      ])
    )
  )
)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StippleUI<span class="pl-k">.</span>StippleUIParser
julia<span class="pl-k">&gt;</span> doc_string <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">&lt;template&gt;</span>
<span class="pl-s">    &lt;div class="q-pa-md"&gt;</span>
<span class="pl-s">    &lt;q-scroll-area style="height: 230px; max-width: 300px;"&gt;</span>
<span class="pl-s">        &lt;div class="row no-wrap"&gt;</span>
<span class="pl-s">            &lt;div v-for="n in 10" :key="n" style="width: 150px" class="q-pa-sm"&gt;</span>
<span class="pl-s">                Lorem @ipsum <span class="pl-cce">\$</span>dolor sit amet consectetur adipisicing elit.</span>
<span class="pl-s">            &lt;/div&gt;</span>
<span class="pl-s">            &lt;q-btn color=<span class="pl-cce">\"</span>primary<span class="pl-cce">\"</span> label=<span class="pl-cce">\"</span>`Animate to <span class="pl-cce">\$</span>{position}px`<span class="pl-cce">\"</span> @click=<span class="pl-cce">\"</span>scroll = true<span class="pl-cce">\"</span>&gt;&lt;/q-btn&gt;</span>
<span class="pl-s">            &lt;q-input hint=<span class="pl-cce">\"</span>Please enter some words<span class="pl-cce">\"</span> v-on:keyup.enter=<span class="pl-cce">\"</span>process = true<span class="pl-cce">\"</span> label=<span class="pl-cce">\"</span>Input<span class="pl-cce">\"</span> v-model=<span class="pl-cce">\"</span>input<span class="pl-cce">\"</span>&gt;&lt;/q-input&gt;</span>
<span class="pl-s">            &lt;q-input hint=<span class="pl-cce">\"</span>Please enter a number<span class="pl-cce">\"</span> label=<span class="pl-cce">\"</span>Input<span class="pl-cce">\"</span> v-model.number=<span class="pl-cce">\"</span>numberinput<span class="pl-cce">\"</span> class=<span class="pl-cce">\"</span>q-my-md<span class="pl-cce">\"</span>&gt;&lt;/q-input&gt;</span>
<span class="pl-s">        &lt;/div&gt;</span>
<span class="pl-s">    &lt;/q-scroll-area&gt;</span>
<span class="pl-s">    &lt;/div&gt;</span>
<span class="pl-s">&lt;/template&gt;</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">parse_vue_html</span>(html_string, indent <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">|&gt;</span> println
<span class="pl-c1">template</span>(
  Stipple<span class="pl-k">.</span>Html<span class="pl-k">.</span><span class="pl-c1">div</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q-pa-md<span class="pl-pds">"</span></span>,
    <span class="pl-c1">scrollarea</span>(style <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>height: 230px; max-width: 300px;<span class="pl-pds">"</span></span>,
      Stipple<span class="pl-k">.</span>Html<span class="pl-k">.</span><span class="pl-c1">div</span>(class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>row no-wrap<span class="pl-pds">"</span></span>, [
        Stipple<span class="pl-k">.</span>Html<span class="pl-k">.</span><span class="pl-c1">div</span>(<span class="pl-c1">var"v-for"</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>n in 10<span class="pl-pds">"</span></span>, key! <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>, style <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>width: 150px<span class="pl-pds">"</span></span>, class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q-pa-sm<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>Lorem @ipsum dolor sit amet consectetur adipisicing elit.<span class="pl-pds">"</span></span>
        )
        <span class="pl-c1">btn</span>(<span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>`Animate to ${position}px`<span class="pl-pds">"</span></span>, color <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span>, <span class="pl-c1">var"v-on:click"</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>scroll = true<span class="pl-pds">"</span></span>)
        <span class="pl-c1">textfield</span>(<span class="pl-s"><span class="pl-pds">"</span>Input<span class="pl-pds">"</span></span>, <span class="pl-c1">:input</span>, hint <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Please enter some words<span class="pl-pds">"</span></span>, <span class="pl-c1">var"v-on:keyup.enter"</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>process = true<span class="pl-pds">"</span></span>)
        <span class="pl-c1">numberfield</span>(<span class="pl-s"><span class="pl-pds">"</span>Input<span class="pl-pds">"</span></span>, <span class="pl-c1">:numberinput</span>, hint <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Please enter a number<span class="pl-pds">"</span></span>, class <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>q-my-md<span class="pl-pds">"</span></span>)
      ])
    )
  )
)</pre></div>
<h4 dir="auto"><a id="user-content-test-parsing-result" class="anchor" aria-hidden="true" href="#test-parsing-result"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test parsing result</h4>
<p dir="auto">There is also a testing tool <code>test_vue_parsing()</code> whether the parsing was successful:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; test_vue_parsing(raw&quot;&quot;&quot;&lt;a :hello=&quot;I need $$$&quot;&gt;asap&lt;/a&gt;&quot;&quot;&quot;)

Original HTML string:
&lt;a :hello=&quot;I need $$$&quot;&gt;asap&lt;/a&gt;

Julia code:
a(hello! = raw&quot;I need $$$&quot;,
    &quot;asap&quot;
)

Produced HTML:
&lt;a :hello=&quot;I need $$$&quot;&gt;
    asap
&lt;/a&gt;"><pre class="notranslate"><code>julia&gt; test_vue_parsing(raw"""&lt;a :hello="I need $$$"&gt;asap&lt;/a&gt;""")

Original HTML string:
&lt;a :hello="I need $$$"&gt;asap&lt;/a&gt;

Julia code:
a(hello! = raw"I need $$$",
    "asap"
)

Produced HTML:
&lt;a :hello="I need $$$"&gt;
    asap
&lt;/a&gt;
</code></pre></div>
<p dir="auto">which knows the details of binding syntax and which does respect the html preserve tag <code>&lt;pre&gt;</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; test_vue_parsing(raw&quot;&quot;&quot;&lt;q-test :hello-world=&quot;I need $$$&quot;&gt; asap\n    or\ntoday &lt;pre&gt;asap\n    or\ntoday &lt;/pre&gt;&lt;/q-test&gt;&quot;&quot;&quot;; indent = 2)

Original HTML string:
&lt;q-test :hello-world=&quot;I need $$$&quot;&gt; asap\n    or\ntoday &lt;pre&gt;asap\n    or\ntoday &lt;/pre&gt;&lt;/q-test&gt;

Julia code:
quasar(:test, var&quot;hello-world&quot; = R&quot;I need $$$&quot;, [
  &quot;asap\n    or\ntoday&quot;,
  pre(
      &quot;asap\n    or\ntoday &quot;
  )
])

Produced HTML:
&lt;q-test :hello-world=&quot;I need $$$&quot;&gt;
  asap
  or
  today
  &lt;pre&gt;
asap
    or
today &lt;/pre&gt;
&lt;/q-test&gt;"><pre class="notranslate"><code>julia&gt; test_vue_parsing(raw"""&lt;q-test :hello-world="I need $$$"&gt; asap\n    or\ntoday &lt;pre&gt;asap\n    or\ntoday &lt;/pre&gt;&lt;/q-test&gt;"""; indent = 2)

Original HTML string:
&lt;q-test :hello-world="I need $$$"&gt; asap\n    or\ntoday &lt;pre&gt;asap\n    or\ntoday &lt;/pre&gt;&lt;/q-test&gt;

Julia code:
quasar(:test, var"hello-world" = R"I need $$$", [
  "asap\n    or\ntoday",
  pre(
      "asap\n    or\ntoday "
  )
])

Produced HTML:
&lt;q-test :hello-world="I need $$$"&gt;
  asap
  or
  today
  &lt;pre&gt;
asap
    or
today &lt;/pre&gt;
&lt;/q-test&gt;
</code></pre></div>
<h4 dir="auto"><a id="user-content-prettify-html-code" class="anchor" aria-hidden="true" href="#prettify-html-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prettify html code</h4>
<p dir="auto">The new prettifier is already used in <code>test_vue_parsing()</code> by default</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; prettify(&quot;&quot;&quot;&lt;div  class=&quot;first&quot;&gt;single line&lt;div&gt; more\nlines&lt;/div&gt;&lt;/div&gt;&quot;&quot;&quot;; indent = 5) |&gt; println
&lt;div class=&quot;first&quot;&gt;
     single line
     &lt;div&gt;
          more
          lines
     &lt;/div&gt;
&lt;/div&gt;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">prettify</span>(<span class="pl-s"><span class="pl-pds">"""</span>&lt;div  class="first"&gt;single line&lt;div&gt; more<span class="pl-cce">\n</span>lines&lt;/div&gt;&lt;/div&gt;<span class="pl-pds">"""</span></span>; indent <span class="pl-k">=</span> <span class="pl-c1">5</span>) <span class="pl-k">|&gt;</span> println
<span class="pl-k">&lt;</span>div class<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>first<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span>
     single line
     <span class="pl-k">&lt;</span>div<span class="pl-k">&gt;</span>
          more
          lines
     <span class="pl-k">&lt;</span><span class="pl-k">/</span>div<span class="pl-k">&gt;</span>
<span class="pl-k">&lt;</span><span class="pl-k">/</span>div<span class="pl-k">&gt;</span></pre></div>
<h2 dir="auto"><a id="user-content-demos" class="anchor" aria-hidden="true" href="#demos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Demos</h2>
<h3 dir="auto"><a id="user-content-stippledemos" class="anchor" aria-hidden="true" href="#stippledemos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StippleDemos</h3>
<p dir="auto">We have dedicated a Github Page to Stipple Demos with many downloadable examples at:
<a href="https://github.com/GenieFramework/StippleDemos">https://github.com/GenieFramework/StippleDemos</a>
(Not all of them are updated to the latest changes of the API yet. But most of them should be functional.)</p>
<h3 dir="auto"><a id="user-content-german-credits-visualisation-dashboard" class="anchor" aria-hidden="true" href="#german-credits-visualisation-dashboard"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>German Credits visualisation dashboard</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/504493915044b0aa89d3830af8e5ee87e496e9ced1d94030f6fa25cdcc460373/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f4765726d616e5f437265646974732e706e67"><img src="https://camo.githubusercontent.com/504493915044b0aa89d3830af8e5ee87e496e9ced1d94030f6fa25cdcc460373/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f4765726d616e5f437265646974732e706e67" width="800" data-canonical-src="https://genieframework.com/githubimg/Screenshot_German_Credits.png" style="max-width: 100%;"></a></p>
<p dir="auto">The full application is available at:
<a href="https://github.com/GenieFramework/Stipple-Demo-GermanCredits">https://github.com/GenieFramework/Stipple-Demo-GermanCredits</a></p>
<h3 dir="auto"><a id="user-content-iris-flowers-dataset-k-means-clustering-dashboard" class="anchor" aria-hidden="true" href="#iris-flowers-dataset-k-means-clustering-dashboard"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Iris Flowers dataset k-Means clustering dashboard</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ae312fcdebd465cde2fb2f41e21801407d6913405c0d4c32879a0c562cb372da/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f497269735f446174612e706e67"><img src="https://camo.githubusercontent.com/ae312fcdebd465cde2fb2f41e21801407d6913405c0d4c32879a0c562cb372da/68747470733a2f2f67656e69656672616d65776f726b2e636f6d2f676974687562696d672f53637265656e73686f745f497269735f446174612e706e67" width="800" data-canonical-src="https://genieframework.com/githubimg/Screenshot_Iris_Data.png" style="max-width: 100%;"></a></p>
<p dir="auto">The full application is available at:
<a href="https://github.com/GenieFramework/Stipple-Demo-IrisClustering">https://github.com/GenieFramework/Stipple-Demo-IrisClustering</a></p>
<h3 dir="auto"><a id="user-content-more-information" class="anchor" aria-hidden="true" href="#more-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More information</h3>
<p dir="auto">While Stipple/StippleUI documentation is still evolving, you can find help and many small examples via docstrings of the functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="help?&gt; btn
search: btn Btn btngroup btndropdown q__btn q__btn__group q__btn__dropdown button Buttons onbutton SubString @onbutton bitstring

  Stipple has a component called btn which is a button with a few extra useful features. For instance, it comes in two shapes:
  rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled).

  The button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a      
  delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as     
  soon as the user clicks the button.

  When not disabled or spinning, btn emits a @click event, as soon as it is clicked or tapped.

  Examples
  ≡≡≡≡≡≡≡≡≡≡

  julia&gt; btn(&quot;Move Left&quot;, color = &quot;primary&quot;, icon = &quot;mail&quot;, @click(&quot;press_btn = true&quot;))

  julia&gt; btn(&quot;Go to Hello World&quot;, color = &quot;red&quot;, type = &quot;a&quot;, href = &quot;hello&quot;, icon = &quot;map&quot;, iconright = &quot;send&quot;)

  julia&gt; btn(&quot;Connect to server!&quot;, color=&quot;green&quot;, textcolor=&quot;black&quot;, @click(&quot;btnConnect=!btnConnect&quot;), [
            tooltip(contentclass=&quot;bg-indigo&quot;, contentstyle=&quot;font-size: 16px&quot;,
            style=&quot;offset: 10px 10px&quot;,  &quot;Ports bounded to sockets!&quot;)]
         )

  ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  

  Arguments
  ≡≡≡≡≡≡≡≡≡≡≡

  ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  

    1. Behavior
       • loading::Bool - Put button into loading state (displays a spinner – can be overridden by using a 'loading'
       slot)
       • percentage::Union{Int, Float64} - Percentage (0.0 &lt; x &lt; 100.0); To be used along 'loading' prop; Display a
       progress bar on the background ex. 23
       • darkpercentage::Bool - Progress bar on the background should have dark color; To be used along with
       'percentage' and 'loading' props

    2. Content
       • label::Union{String, Int} - The text that will be shown on the button ex. Button Label
       • icon::String - Icon name following Quasar convention; Make sure you have the icon library installed unless
       you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen real
       estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg
       img:path/to/some_image.png
       • iconright::String - Icon name following Quasar convention; Make sure you have the icon library installed
       unless you are using 'img:' prefix; If 'none' (String) is used as value then no icon is rendered (but screen
       real estate will still be used for it) ex. map ion-add img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg
       img:path/to/some_image.png
       • nocaps::Bool - Avoid turning label text into caps (which happens by default)
       • nowrap::Bool - Avoid label text wrapping
       • align::String - Label or content alignment default. center accepted values. left right center around between
       evenly
       • stack::Bool - Stack icon and label vertically instead of on same line (like it is by default)
       • stretch::Bool - When used on flexbox parent, button will stretch to parent's height

    3. General
       • type::String - 1) Define the button native type attribute (submit, reset, button) or 2) render component with
       &lt;a&gt; tag so you can access events even if disable or 3) Use 'href' prop and specify 'type' as a media tag
       default. button ex. a submit reset button image/png href=&quot;https://some-site.net&quot; target=&quot;_blank&quot;
       • tabindex::Union{Int, String} - Tabindex HTML attribute value

    4. Navigation
       • href::String - Native &lt;a&gt; link href attribute; Has priority over the 'to' and 'replace' props ex.
       https://quasar.dev href=&quot;https://quasar.dev&quot; target=&quot;_blank&quot;
       • target::String - Native &lt;a&gt; link target attribute; Use it only with 'to' or 'href' props ex. _blank _self
       _parent _top

    5. State
       • loading::Bool - Put button into loading state (displays a spinner – can be overridden by using a 'loading'
       slot)
       • padding::String - Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or
       standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set
       • color::String - Color name for component from the Color Palette (https://quasar.dev/style/color-palette) eg.
       primary teal-10
       • textcolor::String - Overrides text color (if needed); Color name from the Color Palette
       (https://quasar.dev/style/color-palette) eg. primary teal-10
       • dense::Bool - Dense mode; occupies less space
       • round::Bool - Makes a circle shaped button"><pre>help?<span class="pl-k">&gt;</span> btn
search<span class="pl-k">:</span> btn Btn btngroup btndropdown q__btn q__btn__group q__btn__dropdown button Buttons onbutton SubString <span class="pl-c1">@onbutton</span> bitstring

  Stipple has a component called btn which is a button with a few extra useful features. For instance, it comes <span class="pl-k">in</span> two shapes<span class="pl-k">:</span>
  rectangle (default) and round. It also has the material ripple effect baked <span class="pl-k">in</span> (which can be disabled)<span class="pl-k">.</span>

  The button component also comes with a spinner or loading effect. You would use this <span class="pl-k">for</span> times when app execution may cause a      
  delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as     
  soon <span class="pl-k">as</span> the user clicks the button.

  When not disabled or spinning, btn emits a <span class="pl-c1">@click</span> event, as soon <span class="pl-k">as</span> it is clicked or tapped.

  Examples
  <span class="pl-k">≡≡≡≡≡≡≡≡≡≡</span>

  julia<span class="pl-k">&gt;</span> <span class="pl-c1">btn</span>(<span class="pl-s"><span class="pl-pds">"</span>Move Left<span class="pl-pds">"</span></span>, color <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>primary<span class="pl-pds">"</span></span>, icon <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mail<span class="pl-pds">"</span></span>, <span class="pl-c1">@click</span>(<span class="pl-s"><span class="pl-pds">"</span>press_btn = true<span class="pl-pds">"</span></span>))

  julia<span class="pl-k">&gt;</span> <span class="pl-c1">btn</span>(<span class="pl-s"><span class="pl-pds">"</span>Go to Hello World<span class="pl-pds">"</span></span>, color <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>, type <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, href <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, icon <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>map<span class="pl-pds">"</span></span>, iconright <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>send<span class="pl-pds">"</span></span>)

  julia<span class="pl-k">&gt;</span> <span class="pl-c1">btn</span>(<span class="pl-s"><span class="pl-pds">"</span>Connect to server!<span class="pl-pds">"</span></span>, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>, textcolor<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>, <span class="pl-c1">@click</span>(<span class="pl-s"><span class="pl-pds">"</span>btnConnect=!btnConnect<span class="pl-pds">"</span></span>), [
            <span class="pl-c1">tooltip</span>(contentclass<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bg-indigo<span class="pl-pds">"</span></span>, contentstyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>font-size: 16px<span class="pl-pds">"</span></span>,
            style<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>offset: 10px 10px<span class="pl-pds">"</span></span>,  <span class="pl-s"><span class="pl-pds">"</span>Ports bounded to sockets!<span class="pl-pds">"</span></span>)]
         )

  ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  

  Arguments
  <span class="pl-k">≡≡≡≡≡≡≡≡≡≡≡</span>

  ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  

    <span class="pl-c1">1.</span> Behavior
       • loading<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Put button into loading state (displays a spinner – can be overridden by <span class="pl-k">using</span> a <span class="pl-s"><span class="pl-pds">'</span>loading<span class="pl-pds">'</span></span>
       slot)
       • percentage<span class="pl-k">::</span><span class="pl-c1">Union{Int, Float64}</span> <span class="pl-k">-</span> Percentage (<span class="pl-c1">0.0</span> <span class="pl-k">&lt;</span> x <span class="pl-k">&lt;</span> <span class="pl-c1">100.0</span>); To be used along <span class="pl-s"><span class="pl-pds">'</span>loading<span class="pl-pds">'</span></span> prop; Display a
       progress bar on the background ex. <span class="pl-c1">23</span>
       • darkpercentage<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Progress bar on the background should have dark color; To be used along with
       <span class="pl-s"><span class="pl-pds">'</span>percentage<span class="pl-pds">'</span></span> and <span class="pl-s"><span class="pl-pds">'</span>loading<span class="pl-pds">'</span></span> props

    <span class="pl-c1">2.</span> Content
       • label<span class="pl-k">::</span><span class="pl-c1">Union{String, Int}</span> <span class="pl-k">-</span> The text that will be shown on the button ex. Button Label
       • icon<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Icon name following Quasar convention; Make sure you have the icon library installed unless
       you are <span class="pl-k">using</span> <span class="pl-s"><span class="pl-pds">'</span>img:<span class="pl-pds">'</span></span> prefix; If <span class="pl-s"><span class="pl-pds">'</span>none<span class="pl-pds">'</span></span> (String) is used <span class="pl-k">as</span> value then no icon is rendered (but screen real
       estate will still be used <span class="pl-k">for</span> it) ex. map ion<span class="pl-k">-</span>add img<span class="pl-k">:</span>https<span class="pl-k">:</span><span class="pl-k">//</span>cdn<span class="pl-k">.</span>quasar<span class="pl-k">.</span>dev<span class="pl-k">/</span>logo<span class="pl-k">/</span>svg<span class="pl-k">/</span>quasar<span class="pl-k">-</span>logo<span class="pl-k">.</span>svg
       img<span class="pl-k">:</span>path<span class="pl-k">/</span>to<span class="pl-k">/</span>some_image<span class="pl-k">.</span>png
       • iconright<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Icon name following Quasar convention; Make sure you have the icon library installed
       unless you are <span class="pl-k">using</span> <span class="pl-s"><span class="pl-pds">'</span>img:<span class="pl-pds">'</span></span> prefix; If <span class="pl-s"><span class="pl-pds">'</span>none<span class="pl-pds">'</span></span> (String) is used <span class="pl-k">as</span> value then no icon is rendered (but screen
       real estate will still be used <span class="pl-k">for</span> it) ex. map ion<span class="pl-k">-</span>add img<span class="pl-k">:</span>https<span class="pl-k">:</span><span class="pl-k">//</span>cdn<span class="pl-k">.</span>quasar<span class="pl-k">.</span>dev<span class="pl-k">/</span>logo<span class="pl-k">/</span>svg<span class="pl-k">/</span>quasar<span class="pl-k">-</span>logo<span class="pl-k">.</span>svg
       img<span class="pl-k">:</span>path<span class="pl-k">/</span>to<span class="pl-k">/</span>some_image<span class="pl-k">.</span>png
       • nocaps<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Avoid turning label text into caps (which happens by default)
       • nowrap<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Avoid label text wrapping
       • align<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Label or content alignment default. center accepted values. left right center around between
       evenly
       • stack<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Stack icon and label vertically instead of on same line (like it is by default)
       • stretch<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> When used on flexbox parent, button will stretch to parent<span class="pl-k">'</span>s height

    <span class="pl-c1">3.</span> General
       • type<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>) Define the button native type attribute (submit, reset, button) or <span class="pl-c1">2</span>) render component with
       <span class="pl-k">&lt;</span>a<span class="pl-k">&gt;</span> tag so you can access events even <span class="pl-k">if</span> disable or <span class="pl-c1">3</span>) Use <span class="pl-s"><span class="pl-pds">'</span>href<span class="pl-pds">'</span></span> prop and specify <span class="pl-s"><span class="pl-pds">'</span>type<span class="pl-pds">'</span></span> as a media tag
       default. button ex. a submit reset button image<span class="pl-k">/</span>png href<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://some-site.net<span class="pl-pds">"</span></span> target<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>_blank<span class="pl-pds">"</span></span>
       • tabindex<span class="pl-k">::</span><span class="pl-c1">Union{Int, String}</span> <span class="pl-k">-</span> Tabindex HTML attribute value

    <span class="pl-c1">4.</span> Navigation
       • href<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Native <span class="pl-k">&lt;</span>a<span class="pl-k">&gt;</span> link href attribute; Has priority over the <span class="pl-s"><span class="pl-pds">'</span>to<span class="pl-pds">'</span></span> and <span class="pl-s"><span class="pl-pds">'</span>replace<span class="pl-pds">'</span></span> props ex.
       https<span class="pl-k">:</span><span class="pl-k">//</span>quasar<span class="pl-k">.</span>dev href<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://quasar.dev<span class="pl-pds">"</span></span> target<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>_blank<span class="pl-pds">"</span></span>
       • target<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Native <span class="pl-k">&lt;</span>a<span class="pl-k">&gt;</span> link target attribute; Use it only with <span class="pl-s"><span class="pl-pds">'</span>to<span class="pl-pds">'</span></span> or <span class="pl-s"><span class="pl-pds">'</span>href<span class="pl-pds">'</span></span> props ex. _blank _self
       _parent _top

    <span class="pl-c1">5.</span> State
       • loading<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Put button into loading state (displays a spinner – can be overridden by <span class="pl-k">using</span> a <span class="pl-s"><span class="pl-pds">'</span>loading<span class="pl-pds">'</span></span>
       slot)
       • padding<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Apply custom padding (vertical [horizontal]); Size <span class="pl-k">in</span> CSS units, including unit name or
       standard size name (none<span class="pl-k">|</span>xs<span class="pl-k">|</span>sm<span class="pl-k">|</span>md<span class="pl-k">|</span>lg<span class="pl-k">|</span>xl); Also removes the min width and height when set
       • color<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Color name <span class="pl-k">for</span> component from the Color Palette (https<span class="pl-k">:</span><span class="pl-k">//</span>quasar<span class="pl-k">.</span>dev<span class="pl-k">/</span>style<span class="pl-k">/</span>color<span class="pl-k">-</span>palette) eg.
       primary teal<span class="pl-k">-</span><span class="pl-c1">10</span>
       • textcolor<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">-</span> Overrides text color (<span class="pl-k">if</span> needed); Color name from the Color Palette
       (https<span class="pl-k">:</span><span class="pl-k">//</span>quasar<span class="pl-k">.</span>dev<span class="pl-k">/</span>style<span class="pl-k">/</span>color<span class="pl-k">-</span>palette) eg. primary teal<span class="pl-k">-</span><span class="pl-c1">10</span>
       • dense<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Dense mode; occupies less space
       • round<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">-</span> Makes a circle shaped button</pre></div>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">StippleUI builds upon the excellent <a href="https://quasar.dev/vue-components" rel="nofollow">Quasar Vue components</a> and the underlying <a href="https://vuejs.org" rel="nofollow">Vue.js</a> Javascript framework.</p>
</article></div>