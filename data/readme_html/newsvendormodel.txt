<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://frankhuettner.github.io/NewsvendorModel.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/frankhuettner/NewsvendorModel.jl/actions/workflows/ci.yml"><img src="https://github.com/frankhuettner/NewsvendorModel.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/FrankHuettner/NewsvendorModel.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e898dac96b8f879d02bfac4a3ef4477adaa1b41f6d143847b181ede2b09639d9/68747470733a2f2f636f6465636f762e696f2f67682f4672616e6b48756574746e65722f4e65777376656e646f724d6f64656c2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/FrankHuettner/NewsvendorModel.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-newsvendormodeljl" class="anchor" aria-hidden="true" href="#newsvendormodeljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NewsvendorModel.jl</h1>
<p dir="auto">This is a lightweight and simple Julia package for modeling and solving <a href="https://en.wikipedia.org/wiki/Newsvendor_model" rel="nofollow">newsvendor problems</a>.</p>
<h2 dir="auto"><a id="user-content-setup" class="anchor" aria-hidden="true" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setup</h2>
<p dir="auto">NewsvendorModel.jl requires an installation of Julia (can be downloaded from the <a href="https://julialang.org/" rel="nofollow">official website</a>). You can install NewsvendorModel.jl like any other Julia package using the REPL as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg
julia&gt; Pkg.add(&quot;NewsvendorModel&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>NewsvendorModel<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">After installation, it can be loaded with the usual command.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using NewsvendorModel"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NewsvendorModel</pre></div>
<p dir="auto">Moreover, you need to load the Distributions.jl package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Distributions"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<ol dir="auto">
<li>Define a model with the function <code>nvm = NVModel(cost, price, demand)</code> using the following required arguments:
<ul dir="auto">
<li>unit production <code>cost</code></li>
<li>unit selling <code>price</code></li>
<li><code>demand</code> distribution, which can be any choosen from the <a href="https://juliastats.org/Distributions.jl/latest/univariate/" rel="nofollow">Distributions.jl</a> package</li>
</ul>
</li>
<li>Solve for optimal quanitity and obtain key metrics with the <code>solve(nvm)</code> function.</li>
</ol>
<p dir="auto">Note that additional keyword arguments can be passed in <em>Step 1</em>: <code>salvage</code> value and <code>holding</code> cost of left-over inventory, <code>substitute</code> profit obtained from serving a lost customer with an alternative, <code>backorder</code> penalty from an unserved customer, <code>fixcost</code> of the operations, a lower quantity bound <code>q_min</code>, and an upper quantity bound <code>q_max</code>.</p>
<p dir="auto">Moreover, it is possible to obtain the unrounded optimal quantity by passing <code>rounded=false</code> in <em>Step 2</em>. For more details go to <a href="https://www.huettner.io/NewsvendorModel.jl/dev/x20_model_options/" rel="nofollow">the documentation</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Consider an <a href="https://en.wikipedia.org/wiki/Newsvendor_model#Numerical_examples" rel="nofollow">example</a> with</p>
<ul dir="auto">
<li>unit <code>cost</code> = 5</li>
<li>unit <code>price</code> = 7</li>
<li><code>demand</code> that draws from a normal distribution with
<ul dir="auto">
<li>mean = 50</li>
<li>standard deviation = 20</li>
</ul>
</li>
</ul>
<p dir="auto">Define the model and store it in the variable <code>nvm</code> as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nvm = NVModel(demand = Normal(50, 20), cost = 5, price = 7)"><pre>julia<span class="pl-k">&gt;</span> nvm <span class="pl-k">=</span> <span class="pl-c1">NVModel</span>(demand <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">50</span>, <span class="pl-c1">20</span>), cost <span class="pl-k">=</span> <span class="pl-c1">5</span>, price <span class="pl-k">=</span> <span class="pl-c1">7</span>)</pre></div>
<p dir="auto">Julia shows the model data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Data of the Newsvendor Model
 * Demand distribution: Normal{Float64}(μ=50.0, σ=20.0)
 * Unit cost: 5.00
 * Unit selling price: 7.00"><pre>Data of the Newsvendor Model
 <span class="pl-k">*</span> Demand distribution<span class="pl-k">:</span> <span class="pl-c1">Normal</span><span class="pl-c1">{Float64}</span>(μ<span class="pl-k">=</span><span class="pl-c1">50.0</span>, σ<span class="pl-k">=</span><span class="pl-c1">20.0</span>)
 <span class="pl-k">*</span> Unit cost<span class="pl-k">:</span> <span class="pl-c1">5.00</span>
 <span class="pl-k">*</span> Unit selling price<span class="pl-k">:</span> <span class="pl-c1">7.00</span></pre></div>
<p dir="auto">Next, you can solve the model and store the result in the variable <code>res</code> like so:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; res = solve(nvm)"><pre>julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">solve</span>(nvm)</pre></div>
<p dir="auto">This gives the following output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="=====================================
Results of maximizing expected profit
 * Optimal quantity: 39 units
 * Expected profit: 52.41
=====================================
This is a consequence of
 * Cost of underage:  2.00
   ╚ + Price:               7.00
   ╚ - Cost:                5.00
 * Cost of overage:   5.00
   ╚ + Cost:                5.00
 * Critical fractile: 0.29
 * Rounded to nearest integer: true
-------------------------------------
Ordering the optimal quantity yields
 * Expected sales: 35.34 units
 * Expected lost sales: 14.66 units
 * Expected leftover: 3.66 units
-------------------------------------"><pre><span class="pl-k">====================================</span><span class="pl-k">=</span>
Results of maximizing expected profit
 <span class="pl-k">*</span> Optimal quantity<span class="pl-k">:</span> <span class="pl-c1">39</span> units
 <span class="pl-k">*</span> Expected profit<span class="pl-k">:</span> <span class="pl-c1">52.41</span>
<span class="pl-k">====================================</span><span class="pl-k">=</span>
This is a consequence of
 <span class="pl-k">*</span> Cost of underage<span class="pl-k">:</span>  <span class="pl-c1">2.00</span>
   ╚ <span class="pl-k">+</span> Price<span class="pl-k">:</span>               <span class="pl-c1">7.00</span>
   ╚ <span class="pl-k">-</span> Cost<span class="pl-k">:</span>                <span class="pl-c1">5.00</span>
 <span class="pl-k">*</span> Cost of overage<span class="pl-k">:</span>   <span class="pl-c1">5.00</span>
   ╚ <span class="pl-k">+</span> Cost<span class="pl-k">:</span>                <span class="pl-c1">5.00</span>
 <span class="pl-k">*</span> Critical fractile<span class="pl-k">:</span> <span class="pl-c1">0.29</span>
 <span class="pl-k">*</span> Rounded to nearest integer<span class="pl-k">:</span> <span class="pl-c1">true</span>
<span class="pl-k">-------------------------------------</span>
Ordering the optimal quantity yields
 <span class="pl-k">*</span> Expected sales<span class="pl-k">:</span> <span class="pl-c1">35.34</span> units
 <span class="pl-k">*</span> Expected lost sales<span class="pl-k">:</span> <span class="pl-c1">14.66</span> units
 <span class="pl-k">*</span> Expected leftover<span class="pl-k">:</span> <span class="pl-c1">3.66</span> units
<span class="pl-k">-------------------------------------</span></pre></div>
<p dir="auto">Moreover, you have stored the result in the varial <code>res</code>. Reading the data from the stored result is straight-forward:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; q_opt(res)
39"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">q_opt</span>(res)
<span class="pl-c1">39</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; profit(res)
52.687735385066865"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">profit</span>(res)
<span class="pl-c1">52.687735385066865</span></pre></div>
<p dir="auto">Analogously, <code>underage_cost(res)</code>, <code>overage_cost(res)</code>, <code>critical_fractile(res)</code>,
<code>rounded(res)</code>, <code>sales(res)</code>, <code>lost_sales(res)</code>, <code>leftover(res)</code>,
read the other information the stored in <code>res</code>. The model that was solved can be retrieved with <code>nvmodel(res)</code>.</p>
</article></div>