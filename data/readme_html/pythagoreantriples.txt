<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pythagoreantriples" class="anchor" aria-hidden="true" href="#pythagoreantriples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>PythagoreanTriples</code></h1>
<p dir="auto">A Pythagorean Triple is a list of three positive integers <code>(a,b,c)</code>
with the property that <code>a^2 + b^2 == c^2</code>. That is, they are integers and the lengths
of the two legs and the hypotenuse of a right triangle.</p>
<p dir="auto">In this module, a <code>PythagoreanTriple</code> is a container that holds three such integers
with the additional property that <code>a&lt;b</code>.</p>
<h2 dir="auto"><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction</h2>
<h3 dir="auto"><a id="user-content-three-parameter-construction" class="anchor" aria-hidden="true" href="#three-parameter-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Three-parameter construction</h3>
<p dir="auto">A Pythagorean triple can be constructed simply by specifying the lengths of the legs
and hypotenuse of a right triangle</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using PythagoreanTriples

julia&gt; T = PythagoreanTriple(4,3,5)
PythagoreanTriple(3, 4, 5)"><pre class="notranslate"><code>julia&gt; using PythagoreanTriples

julia&gt; T = PythagoreanTriple(4,3,5)
PythagoreanTriple(3, 4, 5)
</code></pre></div>
<p dir="auto">If the three integers are not the side lengths of a right triangle, an error is thrown:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; T = PythagoreanTriple(4,5,6)
ERROR: (4, 5, 6) does not define a Pythagorean triple"><pre class="notranslate"><code>julia&gt; T = PythagoreanTriple(4,5,6)
ERROR: (4, 5, 6) does not define a Pythagorean triple
</code></pre></div>
<p dir="auto">In addition, the three side lengths can be given as a tuple:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; abc = (4,3,5)
(4, 3, 5)

julia&gt; PythagoreanTriple(abc)
PythagoreanTriple(3, 4, 5)"><pre class="notranslate"><code>julia&gt; abc = (4,3,5)
(4, 3, 5)

julia&gt; PythagoreanTriple(abc)
PythagoreanTriple(3, 4, 5)
</code></pre></div>
<h3 dir="auto"><a id="user-content-two-parameter-construction" class="anchor" aria-hidden="true" href="#two-parameter-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Two-parameter construction</h3>
<p dir="auto">Pythagorean triples can be created from a pair of integers <code>u,v</code> in which the
legs of the right triangle are <code>abs(u^2 - v^2)</code> and <code>abs(2*u*v)</code>, and the hypotenuse is
<code>u^2 + v^2</code>.</p>
<p dir="auto">A user can give the values <code>u</code> and <code>v</code> to create a Pythagorean triple:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; T = PythagoreanTriple(2,5)
PythagoreanTriple(20, 21, 29)"><pre class="notranslate"><code>julia&gt; T = PythagoreanTriple(2,5)
PythagoreanTriple(20, 21, 29)
</code></pre></div>
<p dir="auto">Note that the integers <code>u</code> and <code>v</code> must be distinct and nonzero:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; PythagoreanTriple(0,5)
ERROR: (0, 5) does not yield a PythagoreanTriple

julia&gt; PythagoreanTriple(2,2)
ERROR: (2, 2) does not yield a PythagoreanTriple"><pre class="notranslate"><code>julia&gt; PythagoreanTriple(0,5)
ERROR: (0, 5) does not yield a PythagoreanTriple

julia&gt; PythagoreanTriple(2,2)
ERROR: (2, 2) does not yield a PythagoreanTriple
</code></pre></div>
<h2 dir="auto"><a id="user-content-generation" class="anchor" aria-hidden="true" href="#generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generation</h2>
<p dir="auto">We call a Pythagorean triple <code>(a,b,c)</code> <em>primitive</em> provided <code>gcd(a,b) == 1</code>.
Thus <code>(3,4,5)</code> is primitive but <code>(6,8,10)</code> is not.</p>
<p dir="auto">Use <code>TripleGenerator</code> to create an iterator for primitive Pythagorean triples. The
iterator <code>TripleGenerator(n)</code> will create <code>n</code> primitive triples:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for t in TripleGenerator(5)
       println(t)
       end
PythagoreanTriple(3, 4, 5)
PythagoreanTriple(5, 12, 13)
PythagoreanTriple(8, 15, 17)
PythagoreanTriple(7, 24, 25)
PythagoreanTriple(20, 21, 29)"><pre class="notranslate"><code>julia&gt; for t in TripleGenerator(5)
       println(t)
       end
PythagoreanTriple(3, 4, 5)
PythagoreanTriple(5, 12, 13)
PythagoreanTriple(8, 15, 17)
PythagoreanTriple(7, 24, 25)
PythagoreanTriple(20, 21, 29)
</code></pre></div>
<p dir="auto">If <code>n</code> is omitted (or negative) the iterator will produce values endlessly.
For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for t in TripleGenerator()
           a,b,c = make_tuple(t)
           if a &gt; 1000
               println(t)
               break
           end
       end
PythagoreanTriple(1007, 1224, 1585)"><pre class="notranslate"><code>julia&gt; for t in TripleGenerator()
           a,b,c = make_tuple(t)
           if a &gt; 1000
               println(t)
               break
           end
       end
PythagoreanTriple(1007, 1224, 1585)
</code></pre></div>
<p dir="auto">Note: The function <code>is_primitive</code> is available to check if a Pythagorean triple
is primitive:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; t = PythagoreanTriple(3,4,5)
PythagoreanTriple(3, 4, 5)

julia&gt; is_primitive(t)
true

julia&gt; t = PythagoreanTriple(30,40,50)
PythagoreanTriple(30, 40, 50)

julia&gt; is_primitive(t)
false"><pre class="notranslate"><code>julia&gt; t = PythagoreanTriple(3,4,5)
PythagoreanTriple(3, 4, 5)

julia&gt; is_primitive(t)
true

julia&gt; t = PythagoreanTriple(30,40,50)
PythagoreanTriple(30, 40, 50)

julia&gt; is_primitive(t)
false
</code></pre></div>
<p dir="auto">The function <code>make_primitive</code> takes a Pythagorean triple and returns a new
triple having divided the three numbers by their greatest common divisor.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; t = PythagoreanTriple(6,8,10)
PythagoreanTriple(6, 8, 10)

julia&gt; make_primitive(t)
PythagoreanTriple(3, 4, 5)"><pre class="notranslate"><code>julia&gt; t = PythagoreanTriple(6,8,10)
PythagoreanTriple(6, 8, 10)

julia&gt; make_primitive(t)
PythagoreanTriple(3, 4, 5)
</code></pre></div>
<h3 dir="auto"><a id="user-content-scalar-multiple" class="anchor" aria-hidden="true" href="#scalar-multiple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scalar multiple</h3>
<p dir="auto">Pythagorean triples can be multiplied (on the left) by a positive integer.
For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = PythagoreanTriple(5,12)
PythagoreanTriple(119, 120, 169)

julia&gt; 10p
PythagoreanTriple(1190, 1200, 1690)"><pre class="notranslate"><code>julia&gt; p = PythagoreanTriple(5,12)
PythagoreanTriple(119, 120, 169)

julia&gt; 10p
PythagoreanTriple(1190, 1200, 1690)
</code></pre></div>
<h3 dir="auto"><a id="user-content-finding-parameters" class="anchor" aria-hidden="true" href="#finding-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finding parameters</h3>
<p dir="auto">All primitive Pythagorean triples (and some, but not all, non-primitive triples)
can be constructed using two parameters <code>p = PythagoreanTriple(u,v)</code>.</p>
<p dir="auto">Given such a triple, the function <code>get_parameters</code> will return a <code>u</code> and <code>v</code> that
creates that triple.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = PythagoreanTriple(5,12,13)
PythagoreanTriple(5, 12, 13)

julia&gt; u,v = get_parameters(p)
(2, 3)

julia&gt; PythagoreanTriple(u,v)
PythagoreanTriple(5, 12, 13)"><pre class="notranslate"><code>julia&gt; p = PythagoreanTriple(5,12,13)
PythagoreanTriple(5, 12, 13)

julia&gt; u,v = get_parameters(p)
(2, 3)

julia&gt; PythagoreanTriple(u,v)
PythagoreanTriple(5, 12, 13)
</code></pre></div>
<p dir="auto">While some non-primitive triples, such as <code>(6,8,10)</code>, can be created this way, others,
such as <code>(30,40,50)</code>, cannot:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; p = get_parameters(6,8,10)
(1, 3)

julia&gt; get_parameters(30,40,50)
ERROR: Unable to find parameters for (30, 40, 50) (non-primitive)"><pre class="notranslate"><code>julia&gt; p = get_parameters(6,8,10)
(1, 3)

julia&gt; get_parameters(30,40,50)
ERROR: Unable to find parameters for (30, 40, 50) (non-primitive)
</code></pre></div>
<h2 dir="auto"><a id="user-content-extracting-values" class="anchor" aria-hidden="true" href="#extracting-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extracting values</h2>
<p dir="auto">The function <code>make_tuple</code> returns a 3-tuple containing the three values:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; t = PythagoreanTriple(5,11)
PythagoreanTriple(96, 110, 146)

julia&gt; make_tuple(t)
(96, 110, 146)"><pre class="notranslate"><code>julia&gt; t = PythagoreanTriple(5,11)
PythagoreanTriple(96, 110, 146)

julia&gt; make_tuple(t)
(96, 110, 146)
</code></pre></div>
<h2 dir="auto"><a id="user-content-sorting" class="anchor" aria-hidden="true" href="#sorting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sorting</h2>
<p dir="auto">Pythagorean triples can be compared using the usual <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> relations.
Lists of triples can be sorted. They are sorted "reverse lexicographically". That is
when we check if <code>(a,b,c)</code> is less than or equal to <code>(aa,bb,cc)</code> we first see if <code>c ≤ cc</code>.
If so, then if <code>b ≤ bb</code>. And if so, then if <code>a ≤ aa</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; list = collect(TripleGenerator(10))
10-element Vector{Any}:
 PythagoreanTriple(3, 4, 5)
 PythagoreanTriple(5, 12, 13)
 PythagoreanTriple(8, 15, 17)
 PythagoreanTriple(7, 24, 25)
 PythagoreanTriple(20, 21, 29)
 PythagoreanTriple(9, 40, 41)
 PythagoreanTriple(12, 35, 37)
 PythagoreanTriple(11, 60, 61)
 PythagoreanTriple(28, 45, 53)
 PythagoreanTriple(33, 56, 65)

julia&gt; sort(list)
10-element Vector{Any}:
 PythagoreanTriple(3, 4, 5)
 PythagoreanTriple(5, 12, 13)
 PythagoreanTriple(8, 15, 17)
 PythagoreanTriple(7, 24, 25)
 PythagoreanTriple(20, 21, 29)
 PythagoreanTriple(12, 35, 37)
 PythagoreanTriple(9, 40, 41)
 PythagoreanTriple(28, 45, 53)
 PythagoreanTriple(11, 60, 61)
 PythagoreanTriple(33, 56, 65)"><pre class="notranslate"><code>julia&gt; list = collect(TripleGenerator(10))
10-element Vector{Any}:
 PythagoreanTriple(3, 4, 5)
 PythagoreanTriple(5, 12, 13)
 PythagoreanTriple(8, 15, 17)
 PythagoreanTriple(7, 24, 25)
 PythagoreanTriple(20, 21, 29)
 PythagoreanTriple(9, 40, 41)
 PythagoreanTriple(12, 35, 37)
 PythagoreanTriple(11, 60, 61)
 PythagoreanTriple(28, 45, 53)
 PythagoreanTriple(33, 56, 65)

julia&gt; sort(list)
10-element Vector{Any}:
 PythagoreanTriple(3, 4, 5)
 PythagoreanTriple(5, 12, 13)
 PythagoreanTriple(8, 15, 17)
 PythagoreanTriple(7, 24, 25)
 PythagoreanTriple(20, 21, 29)
 PythagoreanTriple(12, 35, 37)
 PythagoreanTriple(9, 40, 41)
 PythagoreanTriple(28, 45, 53)
 PythagoreanTriple(11, 60, 61)
 PythagoreanTriple(33, 56, 65)
</code></pre></div>
</article></div>