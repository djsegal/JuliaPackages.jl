<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pomdpgallery" class="anchor" aria-hidden="true" href="#pomdpgallery"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>POMDPGallery</h1>
<p><a href="https://travis-ci.org/JuliaPOMDP/POMDPGallery.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/933be1994a610bef8676fd4c87563c68a9dc83cd7c4c640b69233574afcd3046/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961504f4d44502f504f4d445047616c6c6572792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPOMDP/POMDPGallery.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A gallery of models written for <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a> with visualizations. You should be able to copy and paste the code below each visualization to run it on your local machine.</p>
<p>For instructions on how to add new models, see <a href="INSTRUCTIONS.md">INSTRUCTIONS.md</a>.</p>
<p>For the older version of this package with julia-0.6 models, see <a href="https://github.com/JuliaPOMDP/POMDPGallery.jl/tree/julia-0.6">this branch</a>.</p>
<h2><a id="user-content-continuumworld" class="anchor" aria-hidden="true" href="#continuumworld"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/zsunberg/ContinuumWorld.jl">ContinuumWorld</a></h2>
<p>A Continuous 2D MDP domain for demonstrating function approximation value iteration.</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/ContinuumWorld/out.gif"><img src="problems/ContinuumWorld/out.gif" alt="ContinuumWorld" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ContinuumWorld
using POMDPs
using GridInterpolations
using Reel
using Plots;        pyplot()

w = CWorld()

nx = 30; ny = 30
grid = RectangleGrid(range(first(w.xlim), stop=last(w.xlim), length=nx), 
                     range(first(w.ylim), stop=last(w.ylim), length=ny))
solver = CWorldSolver(max_iters=30, m=50, grid=grid)
policy = solve(solver, w)

frames = Frames(MIME(&quot;image/png&quot;), fps=4)
for i in 1:length(solver.value_hist)
    v = solver.value_hist[i]
    push!(frames, CWorldVis(w, f=s-&gt;evaluate(v,s), g=solver.grid, title=&quot;Value iteration step $i&quot;))
    print(&quot;.&quot;)
end
for i in 1:10
    push!(frames, CWorldVis(w, f=s-&gt;action_ind(policy, s), g=solver.grid, title=&quot;Policy&quot;))
    print(&quot;.&quot;)
end
println()
write(&quot;out.gif&quot;, frames)
"><pre><span class="pl-k">using</span> ContinuumWorld
<span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> GridInterpolations
<span class="pl-k">using</span> Reel
<span class="pl-k">using</span> Plots;        <span class="pl-c1">pyplot</span>()

w <span class="pl-k">=</span> <span class="pl-c1">CWorld</span>()

nx <span class="pl-k">=</span> <span class="pl-c1">30</span>; ny <span class="pl-k">=</span> <span class="pl-c1">30</span>
grid <span class="pl-k">=</span> <span class="pl-c1">RectangleGrid</span>(<span class="pl-c1">range</span>(<span class="pl-c1">first</span>(w<span class="pl-k">.</span>xlim), stop<span class="pl-k">=</span><span class="pl-c1">last</span>(w<span class="pl-k">.</span>xlim), length<span class="pl-k">=</span>nx), 
                     <span class="pl-c1">range</span>(<span class="pl-c1">first</span>(w<span class="pl-k">.</span>ylim), stop<span class="pl-k">=</span><span class="pl-c1">last</span>(w<span class="pl-k">.</span>ylim), length<span class="pl-k">=</span>ny))
solver <span class="pl-k">=</span> <span class="pl-c1">CWorldSolver</span>(max_iters<span class="pl-k">=</span><span class="pl-c1">30</span>, m<span class="pl-k">=</span><span class="pl-c1">50</span>, grid<span class="pl-k">=</span>grid)
policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, w)

frames <span class="pl-k">=</span> <span class="pl-c1">Frames</span>(<span class="pl-c1">MIME</span>(<span class="pl-s"><span class="pl-pds">"</span>image/png<span class="pl-pds">"</span></span>), fps<span class="pl-k">=</span><span class="pl-c1">4</span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(solver<span class="pl-k">.</span>value_hist)
    v <span class="pl-k">=</span> solver<span class="pl-k">.</span>value_hist[i]
    <span class="pl-c1">push!</span>(frames, <span class="pl-c1">CWorldVis</span>(w, f<span class="pl-k">=</span>s<span class="pl-k">-&gt;</span><span class="pl-c1">evaluate</span>(v,s), g<span class="pl-k">=</span>solver<span class="pl-k">.</span>grid, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Value iteration step <span class="pl-v">$i</span><span class="pl-pds">"</span></span>))
    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">push!</span>(frames, <span class="pl-c1">CWorldVis</span>(w, f<span class="pl-k">=</span>s<span class="pl-k">-&gt;</span><span class="pl-c1">action_ind</span>(policy, s), g<span class="pl-k">=</span>solver<span class="pl-k">.</span>grid, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Policy<span class="pl-pds">"</span></span>))
    <span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>()
<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>out.gif<span class="pl-pds">"</span></span>, frames)</pre></div>
<h2><a id="user-content-dronesurveillance" class="anchor" aria-hidden="true" href="#dronesurveillance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/JuliaPOMDP/DroneSurveillance.jl">DroneSurveillance</a></h2>
<p>Implementation of a drone surveillance POMDP from M. Svoreňová, M. Chmelík, K. Leahy, H. F. Eniser, K. Chatterjee, I. Černá, C. Belta, " Temporal logic motion planning using POMDPs with parity objectives: case study paper", International Conference on Hybrid Systems: Computation and Control (HSCC), 2015.
The UAV must go from one corner to the other while avoiding a ground agent. It can only detect the ground agent within its field of view (in blue).</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/DroneSurveillance/out.gif"><img src="problems/DroneSurveillance/out.gif" alt="DroneSurveillance" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DroneSurveillance
using POMDPs
# import a solver from POMDPs.jl e.g. SARSOP
using SARSOP
# for visualization
using POMDPGifs
import Cairo, Fontconfig

pomdp = DroneSurveillancePOMDP() # initialize the problem 
solver = SARSOPSolver(precision=0.1, timeout=10.0) # configure the solver
policy = solve(solver, pomdp) # solve the problem

sim = GifSimulator(filename=&quot;out.gif&quot;, max_steps=30)
simulate(sim, pomdp, policy);
"><pre><span class="pl-k">using</span> DroneSurveillance
<span class="pl-k">using</span> POMDPs
<span class="pl-c"><span class="pl-c">#</span> import a solver from POMDPs.jl e.g. SARSOP</span>
<span class="pl-k">using</span> SARSOP
<span class="pl-c"><span class="pl-c">#</span> for visualization</span>
<span class="pl-k">using</span> POMDPGifs
<span class="pl-k">import</span> Cairo, Fontconfig

pomdp <span class="pl-k">=</span> <span class="pl-c1">DroneSurveillancePOMDP</span>() <span class="pl-c"><span class="pl-c">#</span> initialize the problem </span>
solver <span class="pl-k">=</span> <span class="pl-c1">SARSOPSolver</span>(precision<span class="pl-k">=</span><span class="pl-c1">0.1</span>, timeout<span class="pl-k">=</span><span class="pl-c1">10.0</span>) <span class="pl-c"><span class="pl-c">#</span> configure the solver</span>
policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp) <span class="pl-c"><span class="pl-c">#</span> solve the problem</span>

sim <span class="pl-k">=</span> <span class="pl-c1">GifSimulator</span>(filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>out.gif<span class="pl-pds">"</span></span>, max_steps<span class="pl-k">=</span><span class="pl-c1">30</span>)
<span class="pl-c1">simulate</span>(sim, pomdp, policy);</pre></div>
<h2><a id="user-content-escaperoomba" class="anchor" aria-hidden="true" href="#escaperoomba"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/sisl/AA228FinalProject">EscapeRoomba</a></h2>
<p>The optional final project for AA228 at Stanford in Fall 2018. A Roomba equipped with a LIDAR or a bump sensor (shown) needs to try to find the safe exit (green) without accidentally falling down the stairs (red).</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/EscapeRoomba/out.gif"><img src="problems/EscapeRoomba/out.gif" alt="EscapeRoomba" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AA228FinalProject
using POMDPGifs
using Random
using ParticleFilters
using POMDPPolicies
using ARDESPOT
using POMDPs

rng = MersenneTwister(2)
speed = 2.0
as = vec([RoombaAct(v, om) for v in (0.0, speed), om in (-1.0, 0.0, 1.0)])
m = RoombaPOMDP(sensor=Bumper(), mdp=RoombaMDP(config=1, aspace=as, contact_pen=-0.1));

default = FunctionPolicy(x-&gt;[speed, 0.0])
bounds = IndependentBounds(DefaultPolicyLB(default), 10.0, check_terminal=true)
solver = DESPOTSolver(K=20, T_max=1.0, bounds=bounds, rng=rng)
planner = solve(solver, m)

spf = SimpleParticleFilter(m, BumperResampler(5000), rng=rng)
filter = RoombaParticleFilter(spf, 2.0, 0.5);

makegif(m, planner, filter, filename=&quot;out.gif&quot;, rng=rng, max_steps=100, show_progress=true)
"><pre><span class="pl-k">using</span> AA228FinalProject
<span class="pl-k">using</span> POMDPGifs
<span class="pl-k">using</span> Random
<span class="pl-k">using</span> ParticleFilters
<span class="pl-k">using</span> POMDPPolicies
<span class="pl-k">using</span> ARDESPOT
<span class="pl-k">using</span> POMDPs

rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">2</span>)
speed <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
as <span class="pl-k">=</span> <span class="pl-c1">vec</span>([<span class="pl-c1">RoombaAct</span>(v, om) <span class="pl-k">for</span> v <span class="pl-k">in</span> (<span class="pl-c1">0.0</span>, speed), om <span class="pl-k">in</span> (<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)])
m <span class="pl-k">=</span> <span class="pl-c1">RoombaPOMDP</span>(sensor<span class="pl-k">=</span><span class="pl-c1">Bumper</span>(), mdp<span class="pl-k">=</span><span class="pl-c1">RoombaMDP</span>(config<span class="pl-k">=</span><span class="pl-c1">1</span>, aspace<span class="pl-k">=</span>as, contact_pen<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">0.1</span>));

default <span class="pl-k">=</span> <span class="pl-c1">FunctionPolicy</span>(x<span class="pl-k">-&gt;</span>[speed, <span class="pl-c1">0.0</span>])
bounds <span class="pl-k">=</span> <span class="pl-c1">IndependentBounds</span>(<span class="pl-c1">DefaultPolicyLB</span>(default), <span class="pl-c1">10.0</span>, check_terminal<span class="pl-k">=</span><span class="pl-c1">true</span>)
solver <span class="pl-k">=</span> <span class="pl-c1">DESPOTSolver</span>(K<span class="pl-k">=</span><span class="pl-c1">20</span>, T_max<span class="pl-k">=</span><span class="pl-c1">1.0</span>, bounds<span class="pl-k">=</span>bounds, rng<span class="pl-k">=</span>rng)
planner <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, m)

spf <span class="pl-k">=</span> <span class="pl-c1">SimpleParticleFilter</span>(m, <span class="pl-c1">BumperResampler</span>(<span class="pl-c1">5000</span>), rng<span class="pl-k">=</span>rng)
filter <span class="pl-k">=</span> <span class="pl-c1">RoombaParticleFilter</span>(spf, <span class="pl-c1">2.0</span>, <span class="pl-c1">0.5</span>);

<span class="pl-c1">makegif</span>(m, planner, filter, filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>out.gif<span class="pl-pds">"</span></span>, rng<span class="pl-k">=</span>rng, max_steps<span class="pl-k">=</span><span class="pl-c1">100</span>, show_progress<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-lasertag" class="anchor" aria-hidden="true" href="#lasertag"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/JuliaPOMDP/LaserTag.jl">LaserTag</a></h2>
<p>LaserTag problem from Somani, A., Ye, N., Hsu, D., &amp; Lee, W. (2013). DESPOT : Online POMDP Planning with Regularization. Advances in Neural Information Processing Systems. Retrieved from <a href="http://papers.nips.cc/paper/5189-despot-online-pomdp-planning-with-regularization" rel="nofollow">http://papers.nips.cc/paper/5189-despot-online-pomdp-planning-with-regularization</a>. Versions with continuous and discrete observations.</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/LaserTag/out.gif"><img src="problems/LaserTag/out.gif" alt="LaserTag" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LaserTag
using POMDPGifs
using QMDP
using Random
using ParticleFilters

rng = MersenneTwister(7)

m = gen_lasertag(rng=rng, robot_position_known=true)
policy = solve(QMDPSolver(verbose=true), m)
filter = SIRParticleFilter(m, 10000, rng=rng)

@show makegif(m, policy, filter, filename=&quot;out.gif&quot;, rng=rng)
"><pre><span class="pl-k">using</span> LaserTag
<span class="pl-k">using</span> POMDPGifs
<span class="pl-k">using</span> QMDP
<span class="pl-k">using</span> Random
<span class="pl-k">using</span> ParticleFilters

rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">7</span>)

m <span class="pl-k">=</span> <span class="pl-c1">gen_lasertag</span>(rng<span class="pl-k">=</span>rng, robot_position_known<span class="pl-k">=</span><span class="pl-c1">true</span>)
policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(<span class="pl-c1">QMDPSolver</span>(verbose<span class="pl-k">=</span><span class="pl-c1">true</span>), m)
filter <span class="pl-k">=</span> <span class="pl-c1">SIRParticleFilter</span>(m, <span class="pl-c1">10000</span>, rng<span class="pl-k">=</span>rng)

<span class="pl-c1">@show</span> <span class="pl-c1">makegif</span>(m, policy, filter, filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>out.gif<span class="pl-pds">"</span></span>, rng<span class="pl-k">=</span>rng)</pre></div>
<h2><a id="user-content-quickmountaincar" class="anchor" aria-hidden="true" href="#quickmountaincar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/JuliaPOMDP/QuickPOMDPs.jl">QuickMountainCar</a></h2>
<p>An implementation of the classic Mountain Car RL problem using the QuickPOMDPs interface.</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/QuickMountainCar/out.gif"><img src="problems/QuickMountainCar/out.gif" alt="QuickMountainCar" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs
using QuickPOMDPs
using POMDPPolicies
using Compose
import Cairo
using POMDPGifs

mountaincar = QuickMDP(
    function (s, a, rng)        
        x, v = s
        vp = clamp(v + a*0.001 + cos(3*x)*-0.0025, -0.07, 0.07)
        xp = x + vp
        if xp &gt; 0.5
            r = 100.0
        else
            r = -1.0
        end
        return (sp=(xp, vp), r=r)
    end,
    actions = [-1., 0., 1.],
    initialstate = (-0.5, 0.0),
    discount = 0.95,
    isterminal = s -&gt; s[1] &gt; 0.5,

    render = function (step)
        cx = step.s[1]
        cy = 0.45*sin(3*cx)+0.5
        car = (context(), circle(cx, cy+0.035, 0.035), fill(&quot;blue&quot;))
        track = (context(), line([(x, 0.45*sin(3*x)+0.5) for x in -1.2:0.01:0.6]), stroke(&quot;black&quot;))
        goal = (context(), star(0.5, 1.0, -0.035, 5), fill(&quot;gold&quot;), stroke(&quot;black&quot;))
        bg = (context(), rectangle(), fill(&quot;white&quot;))
        ctx = context(0.7, 0.05, 0.6, 0.9, mirror=Mirror(0, 0, 0.5))
        return compose(context(), (ctx, car, track, goal), bg)
    end
)

energize = FunctionPolicy(s-&gt;s[2] &lt; 0.0 ? -1.0 : 1.0)
makegif(mountaincar, energize; filename=&quot;out.gif&quot;, fps=20)
"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> QuickPOMDPs
<span class="pl-k">using</span> POMDPPolicies
<span class="pl-k">using</span> Compose
<span class="pl-k">import</span> Cairo
<span class="pl-k">using</span> POMDPGifs

mountaincar <span class="pl-k">=</span> <span class="pl-c1">QuickMDP</span>(
    <span class="pl-k">function</span> (s, a, rng)        
        x, v <span class="pl-k">=</span> s
        vp <span class="pl-k">=</span> <span class="pl-c1">clamp</span>(v <span class="pl-k">+</span> a<span class="pl-k">*</span><span class="pl-c1">0.001</span> <span class="pl-k">+</span> <span class="pl-c1">cos</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>x)<span class="pl-k">*-</span><span class="pl-c1">0.0025</span>, <span class="pl-k">-</span><span class="pl-c1">0.07</span>, <span class="pl-c1">0.07</span>)
        xp <span class="pl-k">=</span> x <span class="pl-k">+</span> vp
        <span class="pl-k">if</span> xp <span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span>
            r <span class="pl-k">=</span> <span class="pl-c1">100.0</span>
        <span class="pl-k">else</span>
            r <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>
        <span class="pl-k">end</span>
        <span class="pl-k">return</span> (sp<span class="pl-k">=</span>(xp, vp), r<span class="pl-k">=</span>r)
    <span class="pl-k">end</span>,
    actions <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>],
    initialstate <span class="pl-k">=</span> (<span class="pl-k">-</span><span class="pl-c1">0.5</span>, <span class="pl-c1">0.0</span>),
    discount <span class="pl-k">=</span> <span class="pl-c1">0.95</span>,
    isterminal <span class="pl-k">=</span> s <span class="pl-k">-&gt;</span> s[<span class="pl-c1">1</span>] <span class="pl-k">&gt;</span> <span class="pl-c1">0.5</span>,

    render <span class="pl-k">=</span> <span class="pl-k">function</span> (step)
        cx <span class="pl-k">=</span> step<span class="pl-k">.</span>s[<span class="pl-c1">1</span>]
        cy <span class="pl-k">=</span> <span class="pl-c1">0.45</span><span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>cx)<span class="pl-k">+</span><span class="pl-c1">0.5</span>
        car <span class="pl-k">=</span> (<span class="pl-c1">context</span>(), <span class="pl-c1">circle</span>(cx, cy<span class="pl-k">+</span><span class="pl-c1">0.035</span>, <span class="pl-c1">0.035</span>), <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>))
        track <span class="pl-k">=</span> (<span class="pl-c1">context</span>(), <span class="pl-c1">line</span>([(x, <span class="pl-c1">0.45</span><span class="pl-k">*</span><span class="pl-c1">sin</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>x)<span class="pl-k">+</span><span class="pl-c1">0.5</span>) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-k">-</span><span class="pl-c1">1.2</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">0.6</span>]), <span class="pl-c1">stroke</span>(<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>))
        goal <span class="pl-k">=</span> (<span class="pl-c1">context</span>(), <span class="pl-c1">star</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">0.035</span>, <span class="pl-c1">5</span>), <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>gold<span class="pl-pds">"</span></span>), <span class="pl-c1">stroke</span>(<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>))
        bg <span class="pl-k">=</span> (<span class="pl-c1">context</span>(), <span class="pl-c1">rectangle</span>(), <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>white<span class="pl-pds">"</span></span>))
        ctx <span class="pl-k">=</span> <span class="pl-c1">context</span>(<span class="pl-c1">0.7</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">0.9</span>, mirror<span class="pl-k">=</span><span class="pl-c1">Mirror</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0.5</span>))
        <span class="pl-k">return</span> <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(), (ctx, car, track, goal), bg)
    <span class="pl-k">end</span>
)

energize <span class="pl-k">=</span> <span class="pl-c1">FunctionPolicy</span>(s<span class="pl-k">-&gt;</span>s[<span class="pl-c1">2</span>] <span class="pl-k">&lt;</span> <span class="pl-c1">0.0</span> <span class="pl-k">?</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">:</span> <span class="pl-c1">1.0</span>)
<span class="pl-c1">makegif</span>(mountaincar, energize; filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>out.gif<span class="pl-pds">"</span></span>, fps<span class="pl-k">=</span><span class="pl-c1">20</span>)</pre></div>
<h2><a id="user-content-rocksample" class="anchor" aria-hidden="true" href="#rocksample"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/JuliaPOMDP/RockSample.jl">RockSample</a></h2>
<p>Rock sample problem from T. Smith, R. Simmons, "Heuristic Search Value Iteration for POMDPs," in Association for Uncertainty in Artificial Intelligence (UAI), 2004.
A Rover must pick up good rocks in a grid world. It knows the location of the rocks but does not know which one is good or bad. It is equipped with a noisy sensor to detect the status of a rock.</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/RockSample/out.gif"><img src="problems/RockSample/out.gif" alt="RockSample" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs
using RockSample 
using SARSOP # load a  POMDP Solver
using POMDPGifs # to make gifs
import Cairo, Fontconfig

pomdp = RockSamplePOMDP(rocks_positions=[(2,3), (4,4), (4,2)], 
                        sensor_efficiency=10.0,
                        discount_factor=0.95, 
                        good_rock_reward = 20.0)

solver = SARSOPSolver(precision=1e-3)

policy = solve(solver, pomdp)

sim = GifSimulator(filename=&quot;out.gif&quot;, max_steps=30)
simulate(sim, pomdp, policy);
"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> RockSample 
<span class="pl-k">using</span> SARSOP <span class="pl-c"><span class="pl-c">#</span> load a  POMDP Solver</span>
<span class="pl-k">using</span> POMDPGifs <span class="pl-c"><span class="pl-c">#</span> to make gifs</span>
<span class="pl-k">import</span> Cairo, Fontconfig

pomdp <span class="pl-k">=</span> <span class="pl-c1">RockSamplePOMDP</span>(rocks_positions<span class="pl-k">=</span>[(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>), (<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), (<span class="pl-c1">4</span>,<span class="pl-c1">2</span>)], 
                        sensor_efficiency<span class="pl-k">=</span><span class="pl-c1">10.0</span>,
                        discount_factor<span class="pl-k">=</span><span class="pl-c1">0.95</span>, 
                        good_rock_reward <span class="pl-k">=</span> <span class="pl-c1">20.0</span>)

solver <span class="pl-k">=</span> <span class="pl-c1">SARSOPSolver</span>(precision<span class="pl-k">=</span><span class="pl-c1">1e-3</span>)

policy <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp)

sim <span class="pl-k">=</span> <span class="pl-c1">GifSimulator</span>(filename<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>out.gif<span class="pl-pds">"</span></span>, max_steps<span class="pl-k">=</span><span class="pl-c1">30</span>)
<span class="pl-c1">simulate</span>(sim, pomdp, policy);</pre></div>
<h2><a id="user-content-vdptag2" class="anchor" aria-hidden="true" href="#vdptag2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><a href="https://github.com/zsunberg/VDPTag2.jl">VDPTag2</a></h2>
<p>An implimentation of Van Der Pol Tag using POMDPs.jl and POMCPOW.</p>
<p><a target="_blank" rel="noopener noreferrer" href="problems/VDPTag/_vdprun.gif"><img src="problems/VDPTag/_vdprun.gif" alt="VDPTag2" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using VDPTag2
using Plots
using Reel
using ProgressMeter
using ParticleFilters
using StaticArrays
using POMDPs
using Random
using POMDPModelTools
using POMDPPolicies
using POMDPModels
using POMDPSimulators

frames = Frames(MIME(&quot;image/png&quot;), fps=2)

# pomdp = VDPTagPOMDP()
pomdp = VDPTagPOMDP(mdp=VDPTagMDP(barriers=CardinalBarriers(0.2, 2.8)))
policy = ManageUncertainty(pomdp, 0.01)
# policy = ToNextML(mdp(pomdp))

rng = MersenneTwister(5)

hr = HistoryRecorder(max_steps=30, rng=rng)
filter = SIRParticleFilter(pomdp, 200, rng=rng)
hist = POMDPs.simulate(hr, pomdp, policy, filter)

gr()
@showprogress &quot;Creating gif...&quot; for i in 1:n_steps(hist)
    push!(frames, plot(pomdp, view(hist, 1:i)))
end

filename = string(&quot;_vdprun.gif&quot;)
write(filename, frames)
println(String(pwd()) * &quot;/&quot; * filename)
"><pre><span class="pl-k">using</span> VDPTag2
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> Reel
<span class="pl-k">using</span> ProgressMeter
<span class="pl-k">using</span> ParticleFilters
<span class="pl-k">using</span> StaticArrays
<span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> Random
<span class="pl-k">using</span> POMDPModelTools
<span class="pl-k">using</span> POMDPPolicies
<span class="pl-k">using</span> POMDPModels
<span class="pl-k">using</span> POMDPSimulators

frames <span class="pl-k">=</span> <span class="pl-c1">Frames</span>(<span class="pl-c1">MIME</span>(<span class="pl-s"><span class="pl-pds">"</span>image/png<span class="pl-pds">"</span></span>), fps<span class="pl-k">=</span><span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> pomdp = VDPTagPOMDP()</span>
pomdp <span class="pl-k">=</span> <span class="pl-c1">VDPTagPOMDP</span>(mdp<span class="pl-k">=</span><span class="pl-c1">VDPTagMDP</span>(barriers<span class="pl-k">=</span><span class="pl-c1">CardinalBarriers</span>(<span class="pl-c1">0.2</span>, <span class="pl-c1">2.8</span>)))
policy <span class="pl-k">=</span> <span class="pl-c1">ManageUncertainty</span>(pomdp, <span class="pl-c1">0.01</span>)
<span class="pl-c"><span class="pl-c">#</span> policy = ToNextML(mdp(pomdp))</span>

rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">5</span>)

hr <span class="pl-k">=</span> <span class="pl-c1">HistoryRecorder</span>(max_steps<span class="pl-k">=</span><span class="pl-c1">30</span>, rng<span class="pl-k">=</span>rng)
filter <span class="pl-k">=</span> <span class="pl-c1">SIRParticleFilter</span>(pomdp, <span class="pl-c1">200</span>, rng<span class="pl-k">=</span>rng)
hist <span class="pl-k">=</span> POMDPs<span class="pl-k">.</span><span class="pl-c1">simulate</span>(hr, pomdp, policy, filter)

<span class="pl-c1">gr</span>()
<span class="pl-c1">@showprogress</span> <span class="pl-s"><span class="pl-pds">"</span>Creating gif...<span class="pl-pds">"</span></span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">n_steps</span>(hist)
    <span class="pl-c1">push!</span>(frames, <span class="pl-c1">plot</span>(pomdp, <span class="pl-c1">view</span>(hist, <span class="pl-c1">1</span><span class="pl-k">:</span>i)))
<span class="pl-k">end</span>

filename <span class="pl-k">=</span> <span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">"</span>_vdprun.gif<span class="pl-pds">"</span></span>)
<span class="pl-c1">write</span>(filename, frames)
<span class="pl-c1">println</span>(<span class="pl-c1">String</span>(<span class="pl-c1">pwd</span>()) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span> <span class="pl-k">*</span> filename)</pre></div>
</article></div>