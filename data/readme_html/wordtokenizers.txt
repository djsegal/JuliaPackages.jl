<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-wordtokenizers" class="anchor" aria-hidden="true" href="#wordtokenizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>WordTokenizers</h1>
<p><a href="https://github.com/JuliaText/WordTokenizers.jl/releases/"><img src="https://camo.githubusercontent.com/83d06b3b06ed93e10896ee9887250d3099b2c190/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961546578742f576f7264546f6b656e697a6572732e6a6c2e737667" alt="GitHub release" data-canonical-src="https://img.shields.io/github/release/JuliaText/WordTokenizers.jl.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaText/WordTokenizers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3d0e703f4ccfc553956dc5b980003354f5aaa67e/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961546578742f576f7264546f6b656e697a6572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaText/WordTokenizers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaText/WordTokenizers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/75acd98b4b543a2891451bdb9476971bfb9c4066/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961546578742f576f7264546f6b656e697a6572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaText/WordTokenizers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/oxinabox/wordtokenizers-jl/history" rel="nofollow"><img src="https://camo.githubusercontent.com/ca7f51976d470137f7ea18374c55660aa5f9ebe4/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f4a756c6961546578742f576f7264546f6b656e697a6572732e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/JuliaText/WordTokenizers.jl?branch=master&amp;svg=true" style="max-width:100%;"></a>
<a href="http://hits.dwyl.io/JuliaText/WordTokenizers" rel="nofollow"><img src="https://camo.githubusercontent.com/ebbfb92c784a2773f1982303c68d814788cad9b7/687474703a2f2f686974732e6477796c2e696f2f4a756c6961546578742f576f7264546f6b656e697a6572732e737667" alt="HitCount" data-canonical-src="http://hits.dwyl.io/JuliaText/WordTokenizers.svg" style="max-width:100%;"></a></p>
<p>Some basic tokenizers for Natural Language Processing.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation:</h3>
<p>As per standard <a href="https://julialang.github.io/Pkg.jl/dev/managing-packages/#Adding-registered-packages-1" rel="nofollow">Julia package installation</a>:</p>
<pre><code>pkg&gt; add WordTokenizers
</code></pre>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h3>
<p>The normal way to use this package is to call
<code>tokenize(str)</code> to split up a string into words
or <code>split_sentences(str)</code> to split up a string into sentences.
Maybe even <code>tokenize.(split_sentences(str))</code> to do both.</p>
<p><code>tokenize</code> and <code>split_sentences</code> are configurable functions
that call one of the tokenizers or sentence splitters defined below.
They have sensible defaults set,
but you can override the method used by calling
<code>set_tokenizer(func)</code> or <code>set_sentence_splitter(func)</code> passing in your preferred
function <code>func</code> from the list below (or from elsewhere)
Configuring them this way will throw up a method overwritten warning, and trigger recompilation of any methods that use them.</p>
<p>This means if you are using a package that uses WordTokenizers.jl to do tokenization/sentence splitting via the default methods,
changing the tokenizer/splitter will change the behavior of that package.
This is a feature of <a href="https://github.com/JuliaText/CorpusLoaders.jl">CorpusLoaders.jl</a>.
If as a package author you don't want to allow the user to change the tokenizer in this way, you should use the tokenizer you want explicitly, rather than using the  <code>tokenize</code> method.</p>
<h3><a id="user-content-example-setting-tokenizer-tinysegmenterjl" class="anchor" aria-hidden="true" href="#example-setting-tokenizer-tinysegmenterjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example Setting Tokenizer (TinySegmenter.jl)</h3>
<p>You might like to, for example use <a href="https://github.com/JuliaStrings/TinySegmenter.jl">TinySegmenter.jl's tokenizer</a> for Japanese text.
We do not include TinySegmenter in this package, because making use of it within WordTokenizers.jl is trivial.
Just <code>import TinySegmenter; set_tokenizer(TinySegmenter.tokenize)</code>.</p>
<p>Full example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> WordTokenizers

julia<span class="pl-k">&gt;</span> text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>私の名前は中野です<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize</span>(text) <span class="pl-k">|&gt;</span> print <span class="pl-c"><span class="pl-c">#</span> Default tokenizer</span>
[<span class="pl-s"><span class="pl-pds">"</span>私の名前は中野です<span class="pl-pds">"</span></span>]

julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> TinySegmenter

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_tokenizer</span>(TinySegmenter<span class="pl-k">.</span>tokenize)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize</span>(text) <span class="pl-k">|&gt;</span> print <span class="pl-c"><span class="pl-c">#</span> TinySegmenter's tokenizer</span>
SubString{String}[<span class="pl-s"><span class="pl-pds">"</span>私<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>の<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>名前<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>は<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>中野<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>です<span class="pl-pds">"</span></span>]</pre></div>
<h1><a id="user-content-word-tokenizers" class="anchor" aria-hidden="true" href="#word-tokenizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>(Word) Tokenizers</h1>
<p>The word tokenizers basically assume sentence splitting has already been done.</p>
<ul>
<li>
<p><strong>Poorman's tokenizer:</strong> (<code>poormans_tokenize</code>) Deletes all punctuation, and splits on spaces. (In some ways worse than just using <code>split</code>)</p>
</li>
<li>
<p><strong>Punctuation space tokenize:</strong> (<code>punctuation_space_tokenize</code>) Marginally improved version of the poorman's tokenizer, only deletes punctuation occurring outside words.</p>
</li>
<li>
<p><strong>Penn Tokenizer:</strong> (<code>penn_tokenize</code>) This is Robert MacIntyre's original tokenizer used for the Penn Treebank. Splits contractions.</p>
</li>
<li>
<p><strong>Improved Penn Tokenizer:</strong> (<code>improved_penn_tokenize</code>) NLTK's improved Penn Treebank Tokenizer. Very similar to the original, some improvements on punctuation and contractions. This matches to NLTK's <code>nltk.tokenize.TreeBankWordTokenizer.tokenize</code>.</p>
</li>
<li>
<p><strong>NLTK Word tokenizer:</strong> (<code>nltk_word_tokenize</code>) NLTK's even more improved version of the Penn Tokenizer. This version has better Unicode handling and some other changes. This matches to the most commonly used <code>nltk.word_tokenize</code>, minus the sentence tokenizing step.</p>
</li>
</ul>
<p>(To me it seems like a weird historical thing that NLTK has 2 successive variations on improving the Penn tokenizer, but for now, I am matching it and having both.  See <a href="https://github.com/nltk/nltk/issues/2005">[NLTK#2005]</a>.)</p>
<ul>
<li><strong>Reversible Tokenizer:</strong> (<code>rev_tokenize</code> and <code>rev_detokenize</code>) This tokenizer splits on punctuations, space and special symbols. The generated tokens can be de-tokenized by using the <code>rev_detokenizer</code> function into the state before tokenization.</li>
<li><strong>TokTok Tokenizer:</strong> (<code>toktok_tokenize</code>) This tokenizer is a simple, general tokenizer, where the input has one sentence per line; thus only final period is tokenized. This is an enhanced version of the <a href="https://github.com/jonsafari/tok-tok">original toktok Tokenizer</a>. It has been tested on and gives reasonably good results for English, Persian, Russian, Czech, French, German, Vietnamese, Tajik, and a few others. <strong>(default tokenizer)</strong></li>
<li><strong>Tweet Tokenizer:</strong> (<code>tweet_tokenizer</code>) NLTK's casual tokenizer for that is solely designed for tweets. Apart from being twitter specific, this tokenizer has good handling for emoticons and other web aspects like support for HTML Entities. This closely matches NLTK's <code>nltk.tokenize.TweetTokenizer</code></li>
</ul>
<h1><a id="user-content-sentence-splitters" class="anchor" aria-hidden="true" href="#sentence-splitters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sentence Splitters</h1>
<p>We currently only have one sentence splitter.</p>
<ul>
<li><strong>Rule-Based Sentence Spitter:</strong> (<code>rulebased_split_sentences</code>), uses a rule that periods, question marks, and exclamation marks, followed by white-space end sentences. With a large list of exceptions.</li>
</ul>
<p><code>split_sentences</code> is exported as an alias for the most useful sentence splitter currently implemented.
(Which ATM is the only sentence splitter: <code>rulebased_split_sentences</code>) <strong>(default sentence_splitter)</strong></p>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>The package's tokenizers range from simple (e.g. poorman's), to complex (e.g. Penn).<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> print
SubString{String}[<span class="pl-s"><span class="pl-pds">"</span>The<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>package<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>'s<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>tokenizers<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>range<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>from<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>simple<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e.g.<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>poorman<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>'s<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>complex<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>e.g.<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Penn<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>]</pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>The leatherback sea turtle is the largest, measuring six or seven feet (2 m) in length at maturity, and three to five feet (1 to 1.5 m) in width, weighing up to 2000 pounds (about 900 kg). Most other species are smaller, being two to four feet in length (0.5 to 1 m) and proportionally less wide. The Flatback turtle is found solely on the northerncoast of Australia.<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">split_sentences</span>(text)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{SubString{String},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>The leatherback sea turtle is the largest, measuring six or seven feet (2 m) in length at maturity, and three to five feet (1 to 1.5 m) in width, weighing up to 2000 pounds (about900 kg). <span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>Most other species are smaller, being two to four feet in length (0.5 to 1 m) and proportionally less wide. <span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>The Flatback turtle is found solely on the northern coast of Australia.<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize</span>.(<span class="pl-c1">split_sentences</span>(text))
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Array{SubString{String},<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 SubString{String}[<span class="pl-s"><span class="pl-pds">"</span>The<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>leatherback<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sea<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>turtle<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>is<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>the<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>largest<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>measuring<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>six<span class="pl-pds">"</span></span>  …  <span class="pl-s"><span class="pl-pds">"</span>up<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>2000<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>pounds<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>about<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>900<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>kg<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>]
 SubString{String}[<span class="pl-s"><span class="pl-pds">"</span>Most<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>other<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>species<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>are<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>smaller<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>being<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>four<span class="pl-pds">"</span></span>  …  <span class="pl-s"><span class="pl-pds">"</span>0.5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>m<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>and<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>proportionally<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>less<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>wide<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>]
 SubString{String}[<span class="pl-s"><span class="pl-pds">"</span>The<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Flatback<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>turtle<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>is<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>found<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>solely<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>on<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>the<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>northern<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>coast<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>of<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Australia<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>]</pre></div>
<h2><a id="user-content-experimental-api" class="anchor" aria-hidden="true" href="#experimental-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Experimental API</h2>
<p>I am trying out an experimental API
where these are added as dispatches to <code>Base.split</code>.</p>
<p>So<br>
<code>split(foo, Words)</code> is the same as <code>tokenize(foo)</code>,<br>
and<br>
<code>split(foo, Sentences)</code> is the same as <code>split_sentences(foo)</code>.</p>
<h2><a id="user-content-using-tokenbuffer-api-for-custom-tokenizers" class="anchor" aria-hidden="true" href="#using-tokenbuffer-api-for-custom-tokenizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using TokenBuffer API for Custom Tokenizers</h2>
<p>We offer a <code>TokenBuffer</code> API and supporting utility lexers
for high-speed tokenization.</p>
<h4><a id="user-content-writing-your-own-tokenbuffer-tokenizers" class="anchor" aria-hidden="true" href="#writing-your-own-tokenbuffer-tokenizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing your own TokenBuffer tokenizers</h4>
<p><code>TokenBuffer</code> turns a string into a readable stream, used for building tokenizers.
Utility lexers such as <code>spaces</code> and <code>&lt;span class="x x-first x-last"&gt;number&lt;/span&gt;</code> read characters from the
stream and into an array of tokens.</p>
<p>Lexers return <code>true</code> or <code>false</code> to indicate whether they matched
in the input stream. They can, therefore, be combined easily, e.g.</p>
<pre><code>spacesornumber(ts) = spaces(ts) || number(ts)
</code></pre>
<p>either skips whitespace or parses a number token, if possible.</p>
<p>The simplest useful tokenizer splits on spaces.</p>
<pre><code>using WordTokenizers: TokenBuffer, isdone, spaces, character

function tokenise(input)
    ts = TokenBuffer(input)
    while !isdone(ts)
        spaces(ts) || character(ts)
    end
    return ts.tokens
end

tokenise("foo bar baz") # ["foo", "bar", "baz"]
</code></pre>
<p>Many prewritten components for building custom tokenizers
can be found in <code>src/words/fast.jl</code> and <code>src/words/tweet_tokenizer.jl</code>
These components can be mixed and matched to create more complex tokenizers.</p>
<p>Here is a more complex example.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> WordTokenizers<span class="pl-k">:</span> TokenBuffer, isdone, character, spaces <span class="pl-c"><span class="pl-c">#</span> Present in fast.jl</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> WordTokenizers<span class="pl-k">:</span> nltk_url1, nltk_url2, nltk_phonenumbers <span class="pl-c"><span class="pl-c">#</span> Present in tweet_tokenizer.jl</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">tokeinze</span>(input)
           <span class="pl-en">urls</span>(ts) <span class="pl-k">=</span> <span class="pl-c1">nltk_url1</span>(ts) <span class="pl-k">||</span> <span class="pl-c1">nltk_url2</span>(ts)

           ts <span class="pl-k">=</span> <span class="pl-c1">TokenBuffer</span>(input)
           <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">isdone</span>(ts)
               <span class="pl-c1">spaces</span>(ts) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>
               <span class="pl-c1">urls</span>(ts) <span class="pl-k">||</span>
               <span class="pl-c1">nltk_phonenumbers</span>(ts) <span class="pl-k">||</span>
               <span class="pl-c1">character</span>(ts)
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> ts<span class="pl-k">.</span>tokens
       <span class="pl-k">end</span>
tokeinze (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokeinze</span>(<span class="pl-s"><span class="pl-pds">"</span>A url https://github.com/JuliaText/WordTokenizers.jl/ and phonenumber +0 (987) - 2344321<span class="pl-pds">"</span></span>)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>url<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>https://github.com/JuliaText/WordTokenizers.jl/<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> URL detected.</span>
 <span class="pl-s"><span class="pl-pds">"</span>and<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>phonenumber<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>+0 (987) - 2344321<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> Phone number detected.</span></pre></div>
<h4><a id="user-content-tips-for-writing-custom-tokenizers-and-your-own-tokenbuffer-lexer" class="anchor" aria-hidden="true" href="#tips-for-writing-custom-tokenizers-and-your-own-tokenbuffer-lexer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tips for writing custom tokenizers and your own TokenBuffer Lexer</h4>
<ol>
<li>The order in which the lexers are written needs to be taken care of in some cases-</li>
</ol>
<p>For example: <code>987-654-3210</code> matches as a phone number
as well as numbers, but <code>number</code> will only match up to <code>987</code>
and split after it.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> WordTokenizers<span class="pl-k">:</span> TokenBuffer, isdone, character, spaces, nltk_phonenumbers, number

julia<span class="pl-k">&gt;</span> <span class="pl-en">order1</span>(ts) <span class="pl-k">=</span> <span class="pl-c1">number</span>(ts) <span class="pl-k">||</span> <span class="pl-c1">nltk_phonenumbers</span>(ts)
order1 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">order2</span>(ts) <span class="pl-k">=</span> <span class="pl-c1">nltk_phonenumbers</span>(ts) <span class="pl-k">||</span> <span class="pl-c1">number</span>(ts)
order2 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">tokenize1</span>(input)
           ts <span class="pl-k">=</span> <span class="pl-c1">TokenBuffer</span>(input)
           <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">isdone</span>(ts)
               <span class="pl-c1">order1</span>(ts) <span class="pl-k">||</span>
               <span class="pl-c1">character</span>(ts)
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> ts<span class="pl-k">.</span>tokens
       <span class="pl-k">end</span>
tokenize1 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">tokenize2</span>(input)
           ts <span class="pl-k">=</span> <span class="pl-c1">TokenBuffer</span>(input)
           <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">isdone</span>(ts)
               <span class="pl-c1">order2</span>(ts) <span class="pl-k">||</span>
               <span class="pl-c1">character</span>(ts)
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> ts<span class="pl-k">.</span>tokens
       <span class="pl-k">end</span>
tokenize2 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize1</span>(<span class="pl-s"><span class="pl-pds">"</span>987-654-3210<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> number(ts) || nltk_phonenumbers(ts)</span>
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>987<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>654<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>-<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>3210<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize2</span>(<span class="pl-s"><span class="pl-pds">"</span>987-654-3210<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> nltk_phonenumbers(ts) || number(ts)</span>
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>987-654-3210<span class="pl-pds">"</span></span></pre></div>
<ol start="2">
<li>
<p>BoundsError and errors while handling edge cases are most common
and need to be taken of while writing the TokenBuffer lexers.</p>
</li>
<li>
<p>For some TokenBuffer <code>ts</code>, use <code>flush!(ts)</code>
over <code>push!(ts.tokens, input[i:j])</code>, to make sure that characters
in the Buffer (i.e. ts.Buffer) also gets flushed out as separate tokens.</p>
</li>
</ol>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> WordTokenizers<span class="pl-k">:</span> TokenBuffer, flush!, spaces, character, isdone

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">tokenize</span>(input)
           ts <span class="pl-k">=</span> <span class="pl-c1">TokenBuffer</span>(input)

           <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">isdone</span>(ts)
               <span class="pl-c1">spaces</span>(ts) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">continue</span>
               <span class="pl-c1">my_pattern</span>(ts) <span class="pl-k">||</span>
               <span class="pl-c1">character</span>(ts)
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> ts<span class="pl-k">.</span>tokens
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">my_pattern</span>(ts) <span class="pl-c"><span class="pl-c">#</span> Matches the pattern for 2 continuous `_`</span>
           ts<span class="pl-k">.</span>idx <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">length</span>(ts<span class="pl-k">.</span>input) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">false</span>

           <span class="pl-k">if</span> ts[ts<span class="pl-k">.</span>idx] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span>_<span class="pl-pds">'</span></span> <span class="pl-k">&amp;&amp;</span> ts[ts<span class="pl-k">.</span>idx <span class="pl-k">+</span> <span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span>_<span class="pl-pds">'</span></span>
               <span class="pl-c1">flush!</span>(ts, <span class="pl-s"><span class="pl-pds">"</span>__<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Using flush!</span>
               ts<span class="pl-k">.</span>idx <span class="pl-k">+=</span> <span class="pl-c1">2</span>
               <span class="pl-k">return</span> <span class="pl-c1">true</span>
           <span class="pl-k">end</span>

           <span class="pl-k">return</span> <span class="pl-c1">false</span>
       <span class="pl-k">end</span>
my_pattern (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>hi__hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>hi<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>__<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">my_pattern</span>(ts) <span class="pl-c"><span class="pl-c">#</span> Matches the pattern for 2 continuous `_`</span>
           ts<span class="pl-k">.</span>idx <span class="pl-k">+</span> <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">length</span>(ts<span class="pl-k">.</span>input) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">false</span>

           <span class="pl-k">if</span> ts[ts<span class="pl-k">.</span>idx] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span>_<span class="pl-pds">'</span></span> <span class="pl-k">&amp;&amp;</span> ts[ts<span class="pl-k">.</span>idx <span class="pl-k">+</span> <span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">'</span>_<span class="pl-pds">'</span></span>
               <span class="pl-c1">push!</span>(ts<span class="pl-k">.</span>tokens, <span class="pl-s"><span class="pl-pds">"</span>__<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> Without using flush!</span>
               ts<span class="pl-k">.</span>idx <span class="pl-k">+=</span> <span class="pl-c1">2</span>
               <span class="pl-k">return</span> <span class="pl-c1">true</span>
           <span class="pl-k">end</span>

           <span class="pl-k">return</span> <span class="pl-c1">false</span>
       <span class="pl-k">end</span>
my_pattern (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>hi__hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{String,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>__<span class="pl-pds">"</span></span>
 <span class="pl-s"><span class="pl-pds">"</span>hihello<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contributing</h2>
<p>Contributions, in the form of bug-reports, pull requests, additional documentation are encouraged.
They can be made to the GitHub repository.</p>
<p><strong>All contributions and communications should abide by the <a href="https://julialang.org/community/standards/" rel="nofollow">Julia Community Standards</a>.</strong></p>
<p>Software contributions should follow the prevailing style within the code-base.
If your pull request (or issues) are not getting responses within a few days do not hesitate to "bump" them,
by posting a comment such as "Any update on the status of this?".
Sometimes GitHub notifications get lost.</p>
<h2><a id="user-content-support" class="anchor" aria-hidden="true" href="#support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Support</h2>
<p>Feel free to ask for help on the <a href="https://discourse.julialang.org/" rel="nofollow">Julia Discourse forum</a>,
or in the <code>#natural-language</code> channel on julia-slack. (Which you can <a href="https://slackinvite.julialang.org/" rel="nofollow">join here</a>).
You can also raise issues in this repository to request improvements to the documentation.</p>
</article></div>