<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-tidystanza" class="anchor" aria-hidden="true" href="#tidystanza"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TidyStanza</h2>
<p dir="auto">I am trying to implement {tidyverse}, including {dplyr}, APIs in Julia. This is not intended to be a sustained effort and is meant to be a fun exercise to learn {tidyverse} and teach Julia programming. So prolonged maintenance is purely accidental!</p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples:</h3>
<h4 dir="auto"><a id="user-content-across-and-where" class="anchor" aria-hidden="true" href="#across-and-where"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>across</code> and <code>where</code></h4>
<details>
<ul dir="auto">
<li><code>TidyStanza.Across</code> and <code>TidyStanza.across</code> are synonyms and have the same API as <code>dplyr::across</code></li>
<li><code>TidyStanza.Where</code> and <code>TidyStanza.where</code> are synonyms and have the same API as <code>dplyr::across(where(...), ...)</code></li>
</ul>
<p dir="auto">By default, they are NOT exported, and the recommended way is to use <code>TidyStanza.across</code> and <code>TidyStanza.where</code>
to refer to them.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import TidyStanza
const tidy = TidyStanza

tidy.across
tidy.where"><pre><span class="pl-k">import</span> TidyStanza
<span class="pl-k">const</span> tidy <span class="pl-k">=</span> TidyStanza

tidy<span class="pl-k">.</span>across
tidy<span class="pl-k">.</span>where</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="where (generic function with 1 method)"><pre class="notranslate"><code>where (generic function with 1 method)
</code></pre></div>
<p dir="auto">However, in the examples below, for brevity, I have imported <code>across</code> and <code>where</code>
directly into the namespace.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TidyStanza: across, where


### load some helper packages
using DataFrames
using Statistics # for using mean
using Pipe: @pipe # for @pipe macro
using RDatasets # for iris dataset

iris = dataset(&quot;datasets&quot;, &quot;iris&quot;);

# a glimpse of the data
first(iris, 8)"><pre><span class="pl-k">using</span> TidyStanza<span class="pl-k">:</span> across, <span class="pl-k">where</span>


<span class="pl-c"><span class="pl-c">#</span>## load some helper packages</span>
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> Statistics <span class="pl-c"><span class="pl-c">#</span> for using mean</span>
<span class="pl-k">using</span> Pipe<span class="pl-k">:</span> <span class="pl-c1">@pipe</span> <span class="pl-c"><span class="pl-c">#</span> for @pipe macro</span>
<span class="pl-k">using</span> RDatasets <span class="pl-c"><span class="pl-c">#</span> for iris dataset</span>

iris <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>);

<span class="pl-c"><span class="pl-c">#</span> a glimpse of the data</span>
<span class="pl-c1">first</span>(iris, <span class="pl-c1">8</span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="8×5 DataFrame
 Row │ SepalLength  SepalWidth  PetalLength  PetalWidth  Species
     │ Float64      Float64     Float64      Float64     Cat…
─────┼───────────────────────────────────────────────────────────
   1 │         5.1         3.5          1.4         0.2  setosa
   2 │         4.9         3.0          1.4         0.2  setosa
   3 │         4.7         3.2          1.3         0.2  setosa
   4 │         4.6         3.1          1.5         0.2  setosa
   5 │         5.0         3.6          1.4         0.2  setosa
   6 │         5.4         3.9          1.7         0.4  setosa
   7 │         4.6         3.4          1.4         0.3  setosa
   8 │         5.0         3.4          1.5         0.2  setosa"><pre class="notranslate"><code>8×5 DataFrame
 Row │ SepalLength  SepalWidth  PetalLength  PetalWidth  Species
     │ Float64      Float64     Float64      Float64     Cat…
─────┼───────────────────────────────────────────────────────────
   1 │         5.1         3.5          1.4         0.2  setosa
   2 │         4.9         3.0          1.4         0.2  setosa
   3 │         4.7         3.2          1.3         0.2  setosa
   4 │         4.6         3.1          1.5         0.2  setosa
   5 │         5.0         3.6          1.4         0.2  setosa
   6 │         5.4         3.9          1.7         0.4  setosa
   7 │         4.6         3.4          1.4         0.3  setosa
   8 │         5.0         3.4          1.5         0.2  setosa
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# R&quot;&quot;&quot;
# iris %&gt;%
#   group_by(Species) %&gt;%
#   summarise(across(starts_with(&quot;Sepal&quot;), mean))
# &quot;&quot;&quot;

@pipe iris |&gt;
  groupby(_, :Species) |&gt;
  combine(_, across(startswith(&quot;Sepal&quot;), mean))"><pre><span class="pl-c"><span class="pl-c">#</span> R"""</span>
<span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   group_by(Species) %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   summarise(across(starts_with("Sepal"), mean))</span>
<span class="pl-c"><span class="pl-c">#</span> """</span>

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
  <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:Species</span>) <span class="pl-k">|&gt;</span>
  <span class="pl-c1">combine</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>Sepal<span class="pl-pds">"</span></span>), mean))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×3 DataFrame
 Row │ Species     SepalLength  SepalWidth
     │ Cat…        Float64      Float64
─────┼─────────────────────────────────────
   1 │ setosa            5.006       3.428
   2 │ versicolor        5.936       2.77
   3 │ virginica         6.588       2.974"><pre class="notranslate"><code>3×3 DataFrame
 Row │ Species     SepalLength  SepalWidth
     │ Cat…        Float64      Float64
─────┼─────────────────────────────────────
   1 │ setosa            5.006       3.428
   2 │ versicolor        5.936       2.77
   3 │ virginica         6.588       2.974
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using CategoricalArrays: CategoricalArray
# R&quot;&quot;&quot;
# iris %&gt;%
    # as_tibble() %&gt;%
    # mutate(across(where(is.factor), as.character))
# &quot;&quot;&quot;

# define a convenience function for checking if column is categorical
iscatarray(arr) = typeof(arr) &lt;: CategoricalArray

@pipe iris |&gt;
  transform(_, across(where(iscatarray), Vector{String})) |&gt;
  first(_, 8)

@pipe iris |&gt;
  transform(_, across(where(iscatarray), col-&gt;string.(col))) |&gt;
  first(_, 8)"><pre><span class="pl-k">using</span> CategoricalArrays<span class="pl-k">:</span> CategoricalArray
<span class="pl-c"><span class="pl-c">#</span> R"""</span>
<span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
    <span class="pl-c"><span class="pl-c">#</span> as_tibble() %&gt;%</span>
    <span class="pl-c"><span class="pl-c">#</span> mutate(across(where(is.factor), as.character))</span>
<span class="pl-c"><span class="pl-c">#</span> """</span>

<span class="pl-c"><span class="pl-c">#</span> define a convenience function for checking if column is categorical</span>
<span class="pl-en">iscatarray</span>(arr) <span class="pl-k">=</span> <span class="pl-c1">typeof</span>(arr) <span class="pl-k">&lt;:</span> <span class="pl-c1">CategoricalArray</span>

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
  <span class="pl-c1">transform</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">where</span>(iscatarray), Vector{String})) <span class="pl-k">|&gt;</span>
  <span class="pl-c1">first</span>(_, <span class="pl-c1">8</span>)

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
  <span class="pl-c1">transform</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">where</span>(iscatarray), col<span class="pl-k">-&gt;</span><span class="pl-c1">string</span>.(col))) <span class="pl-k">|&gt;</span>
  <span class="pl-c1">first</span>(_, <span class="pl-c1">8</span>)</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="8×5 DataFrame
 Row │ SepalLength  SepalWidth  PetalLength  PetalWidth  Species
     │ Float64      Float64     Float64      Float64     String
─────┼───────────────────────────────────────────────────────────
   1 │         5.1         3.5          1.4         0.2  setosa
   2 │         4.9         3.0          1.4         0.2  setosa
   3 │         4.7         3.2          1.3         0.2  setosa
   4 │         4.6         3.1          1.5         0.2  setosa
   5 │         5.0         3.6          1.4         0.2  setosa
   6 │         5.4         3.9          1.7         0.4  setosa
   7 │         4.6         3.4          1.4         0.3  setosa
   8 │         5.0         3.4          1.5         0.2  setosa"><pre class="notranslate"><code>8×5 DataFrame
 Row │ SepalLength  SepalWidth  PetalLength  PetalWidth  Species
     │ Float64      Float64     Float64      Float64     String
─────┼───────────────────────────────────────────────────────────
   1 │         5.1         3.5          1.4         0.2  setosa
   2 │         4.9         3.0          1.4         0.2  setosa
   3 │         4.7         3.2          1.3         0.2  setosa
   4 │         4.6         3.1          1.5         0.2  setosa
   5 │         5.0         3.6          1.4         0.2  setosa
   6 │         5.4         3.9          1.7         0.4  setosa
   7 │         4.6         3.4          1.4         0.3  setosa
   8 │         5.0         3.4          1.5         0.2  setosa
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A purrr-style formula
# iris %&gt;%
#   group_by(Species) %&gt;%
#   summarise(across(starts_with(&quot;Sepal&quot;), ~mean(.x, na.rm = TRUE)))
@pipe iris |&gt;
  groupby(_, :Species) |&gt;
  combine(_, across(startswith(&quot;Sepal&quot;), x-&gt;mean(x |&gt; skipmissing)))"><pre><span class="pl-c"><span class="pl-c">#</span> A purrr-style formula</span>
<span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   group_by(Species) %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   summarise(across(starts_with("Sepal"), ~mean(.x, na.rm = TRUE)))</span>
<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
  <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:Species</span>) <span class="pl-k">|&gt;</span>
  <span class="pl-c1">combine</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>Sepal<span class="pl-pds">"</span></span>), x<span class="pl-k">-&gt;</span><span class="pl-c1">mean</span>(x <span class="pl-k">|&gt;</span> skipmissing)))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×3 DataFrame
 Row │ Species     SepalLength  SepalWidth
     │ Cat…        Float64      Float64
─────┼─────────────────────────────────────
   1 │ setosa            5.006       3.428
   2 │ versicolor        5.936       2.77
   3 │ virginica         6.588       2.974"><pre class="notranslate"><code>3×3 DataFrame
 Row │ Species     SepalLength  SepalWidth
     │ Cat…        Float64      Float64
─────┼─────────────────────────────────────
   1 │ setosa            5.006       3.428
   2 │ versicolor        5.936       2.77
   3 │ virginica         6.588       2.974
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A named list of functions
# iris %&gt;%
#   group_by(Species) %&gt;%
#   summarise(across(starts_with(&quot;Sepal&quot;), list(mean = mean, sd = sd)))

@pipe iris |&gt;
    groupby(_, :Species) |&gt;
    combine(_, across(startswith(&quot;Sepal&quot;), (mean, std)))"><pre><span class="pl-c"><span class="pl-c">#</span> A named list of functions</span>
<span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   group_by(Species) %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd)))</span>

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
    <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:Species</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">combine</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>Sepal<span class="pl-pds">"</span></span>), (mean, std)))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×5 DataFrame
 Row │ Species     SepalLength_mean  SepalWidth_mean  SepalLength_std  Sepa
lWi ⋯
     │ Cat…        Float64           Float64          Float64          Floa
t64 ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ setosa                 5.006            3.428         0.35249       
  0 ⋯
   2 │ versicolor             5.936            2.77          0.516171      
  0
   3 │ virginica              6.588            2.974         0.63588       
  0
                                                                1 column om
itted"><pre class="notranslate"><code>3×5 DataFrame
 Row │ Species     SepalLength_mean  SepalWidth_mean  SepalLength_std  Sepa
lWi ⋯
     │ Cat…        Float64           Float64          Float64          Floa
t64 ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ setosa                 5.006            3.428         0.35249       
  0 ⋯
   2 │ versicolor             5.936            2.77          0.516171      
  0
   3 │ virginica              6.588            2.974         0.63588       
  0
                                                                1 column om
itted
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Use the .names argument to control the output names
# iris %&gt;%
#   group_by(Species) %&gt;%
#   summarise(across(starts_with(&quot;Sepal&quot;), mean, .names = &quot;mean_{col}&quot;))

@pipe iris |&gt;
    groupby(_, :Species) |&gt;
    combine(_, across(startswith(&quot;Sepal&quot;), mean; names = &quot;mean_{col}&quot;))"><pre><span class="pl-c"><span class="pl-c">#</span> Use the .names argument to control the output names</span>
<span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   group_by(Species) %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   summarise(across(starts_with("Sepal"), mean, .names = "mean_{col}"))</span>

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
    <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:Species</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">combine</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>Sepal<span class="pl-pds">"</span></span>), mean; names <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>mean_{col}<span class="pl-pds">"</span></span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×3 DataFrame
 Row │ Species     mean_SepalLength  mean_SepalWidth
     │ Cat…        Float64           Float64
─────┼───────────────────────────────────────────────
   1 │ setosa                 5.006            3.428
   2 │ versicolor             5.936            2.77
   3 │ virginica              6.588            2.974"><pre class="notranslate"><code>3×3 DataFrame
 Row │ Species     mean_SepalLength  mean_SepalWidth
     │ Cat…        Float64           Float64
─────┼───────────────────────────────────────────────
   1 │ setosa                 5.006            3.428
   2 │ versicolor             5.936            2.77
   3 │ virginica              6.588            2.974
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# iris %&gt;%
#   group_by(Species) %&gt;%
#   summarise(across(starts_with(&quot;Sepal&quot;), list(mean = mean, sd = sd), .names = &quot;{col}_{fn}&quot;))

@pipe iris |&gt;
    groupby(_, :Species) |&gt;
    combine(_, across(startswith(&quot;Sepal&quot;), (mean = mean, std = std); names = &quot;{col}_{fn}&quot;))"><pre><span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   group_by(Species) %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd), .names = "{col}_{fn}"))</span>

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
    <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:Species</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">combine</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>Sepal<span class="pl-pds">"</span></span>), (mean <span class="pl-k">=</span> mean, std <span class="pl-k">=</span> std); names <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{col}_{fn}<span class="pl-pds">"</span></span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×5 DataFrame
 Row │ Species     SepalLength_mean  SepalWidth_mean  SepalLength_std  Sepa
lWi ⋯
     │ Cat…        Float64           Float64          Float64          Floa
t64 ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ setosa                 5.006            3.428         0.35249       
  0 ⋯
   2 │ versicolor             5.936            2.77          0.516171      
  0
   3 │ virginica              6.588            2.974         0.63588       
  0
                                                                1 column om
itted"><pre class="notranslate"><code>3×5 DataFrame
 Row │ Species     SepalLength_mean  SepalWidth_mean  SepalLength_std  Sepa
lWi ⋯
     │ Cat…        Float64           Float64          Float64          Floa
t64 ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ setosa                 5.006            3.428         0.35249       
  0 ⋯
   2 │ versicolor             5.936            2.77          0.516171      
  0
   3 │ virginica              6.588            2.974         0.63588       
  0
                                                                1 column om
itted
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# iris %&gt;%
#   group_by(Species) %&gt;%
#   summarise(across(starts_with(&quot;Sepal&quot;), list(mean, sd), .names = &quot;{col}.fn{fn}&quot;))

@pipe iris |&gt;
    groupby(_, :Species) |&gt;
    combine(_, across(startswith(&quot;Sepal&quot;), (mean, std); names = &quot;{col}_fn{fn}&quot;))"><pre><span class="pl-c"><span class="pl-c">#</span> iris %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   group_by(Species) %&gt;%</span>
<span class="pl-c"><span class="pl-c">#</span>   summarise(across(starts_with("Sepal"), list(mean, sd), .names = "{col}.fn{fn}"))</span>

<span class="pl-c1">@pipe</span> iris <span class="pl-k">|&gt;</span>
    <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:Species</span>) <span class="pl-k">|&gt;</span>
    <span class="pl-c1">combine</span>(_, <span class="pl-c1">across</span>(<span class="pl-c1">startswith</span>(<span class="pl-s"><span class="pl-pds">"</span>Sepal<span class="pl-pds">"</span></span>), (mean, std); names <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>{col}_fn{fn}<span class="pl-pds">"</span></span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×5 DataFrame
 Row │ Species     SepalLength_fn1  SepalWidth_fn1  SepalLength_fn2  SepalW
idt ⋯
     │ Cat…        Float64          Float64         Float64          Float6
4   ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ setosa                5.006           3.428         0.35249         
0.3 ⋯
   2 │ versicolor            5.936           2.77          0.516171        
0.3
   3 │ virginica             6.588           2.974         0.63588         
0.3
                                                                1 column om
itted"><pre class="notranslate"><code>3×5 DataFrame
 Row │ Species     SepalLength_fn1  SepalWidth_fn1  SepalLength_fn2  SepalW
idt ⋯
     │ Cat…        Float64          Float64         Float64          Float6
4   ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │ setosa                5.006           3.428         0.35249         
0.3 ⋯
   2 │ versicolor            5.936           2.77          0.516171        
0.3
   3 │ virginica             6.588           2.974         0.63588         
0.3
                                                                1 column om
itted
</code></pre></div>
</details>
<h4 dir="auto"><a id="user-content-pivot_wider" class="anchor" aria-hidden="true" href="#pivot_wider"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>pivot_wider</code></h4>
<details>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="df = DataFrame(x = repeat(1:3,inner = 2,outer = 2),
       a = repeat(4:6,inner = 2,outer = 2),
       b = repeat(7:9,inner = 2,outer = 2),
       val1 = [&quot;ce_val1_1&quot;,&quot;cf_val1_1&quot;,&quot;ce_val1_2&quot;,&quot;cf_val1_2&quot;,&quot;ce_val1_3&quot;,&quot;cf_val1_3&quot;,&quot;de_val1_1&quot;,
               &quot;df_val1_1&quot;,&quot;de_val1_2&quot;,&quot;df_val1_2&quot;,&quot;de_val1_3&quot;,&quot;df_val1_3&quot;],
       val2 = [&quot;ce_val2_1&quot;,&quot;cf_val2_1&quot;,&quot;ce_val2_2&quot;,&quot;cf_val2_2&quot;,&quot;ce_val2_3&quot;,&quot;cf_val2_3&quot;,&quot;de_val2_1&quot;,
               &quot;df_val2_1&quot;,&quot;de_val2_2&quot;,&quot;df_val2_2&quot;,&quot;de_val2_3&quot;,&quot;df_val2_3&quot;],
       cname1 = repeat([&quot;c&quot;, &quot;d&quot;], inner = 6),
       cname2 = repeat([&quot;e&quot;, &quot;f&quot;], 6)
       )"><pre>df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(x <span class="pl-k">=</span> <span class="pl-c1">repeat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>,inner <span class="pl-k">=</span> <span class="pl-c1">2</span>,outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
       a <span class="pl-k">=</span> <span class="pl-c1">repeat</span>(<span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">6</span>,inner <span class="pl-k">=</span> <span class="pl-c1">2</span>,outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
       b <span class="pl-k">=</span> <span class="pl-c1">repeat</span>(<span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">9</span>,inner <span class="pl-k">=</span> <span class="pl-c1">2</span>,outer <span class="pl-k">=</span> <span class="pl-c1">2</span>),
       val1 <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>ce_val1_1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cf_val1_1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ce_val1_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cf_val1_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ce_val1_3<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cf_val1_3<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>de_val1_1<span class="pl-pds">"</span></span>,
               <span class="pl-s"><span class="pl-pds">"</span>df_val1_1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>de_val1_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>df_val1_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>de_val1_3<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>df_val1_3<span class="pl-pds">"</span></span>],
       val2 <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>ce_val2_1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cf_val2_1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ce_val2_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cf_val2_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ce_val2_3<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>cf_val2_3<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>de_val2_1<span class="pl-pds">"</span></span>,
               <span class="pl-s"><span class="pl-pds">"</span>df_val2_1<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>de_val2_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>df_val2_2<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>de_val2_3<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>df_val2_3<span class="pl-pds">"</span></span>],
       cname1 <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>], inner <span class="pl-k">=</span> <span class="pl-c1">6</span>),
       cname2 <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-s"><span class="pl-pds">"</span>e<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span>], <span class="pl-c1">6</span>)
       )</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="12×7 DataFrame
 Row │ x      a      b      val1       val2       cname1  cname2
     │ Int64  Int64  Int64  String     String     String  String
─────┼───────────────────────────────────────────────────────────
   1 │     1      4      7  ce_val1_1  ce_val2_1  c       e
   2 │     1      4      7  cf_val1_1  cf_val2_1  c       f
   3 │     2      5      8  ce_val1_2  ce_val2_2  c       e
   4 │     2      5      8  cf_val1_2  cf_val2_2  c       f
   5 │     3      6      9  ce_val1_3  ce_val2_3  c       e
   6 │     3      6      9  cf_val1_3  cf_val2_3  c       f
   7 │     1      4      7  de_val1_1  de_val2_1  d       e
   8 │     1      4      7  df_val1_1  df_val2_1  d       f
   9 │     2      5      8  de_val1_2  de_val2_2  d       e
  10 │     2      5      8  df_val1_2  df_val2_2  d       f
  11 │     3      6      9  de_val1_3  de_val2_3  d       e
  12 │     3      6      9  df_val1_3  df_val2_3  d       f"><pre class="notranslate"><code>12×7 DataFrame
 Row │ x      a      b      val1       val2       cname1  cname2
     │ Int64  Int64  Int64  String     String     String  String
─────┼───────────────────────────────────────────────────────────
   1 │     1      4      7  ce_val1_1  ce_val2_1  c       e
   2 │     1      4      7  cf_val1_1  cf_val2_1  c       f
   3 │     2      5      8  ce_val1_2  ce_val2_2  c       e
   4 │     2      5      8  cf_val1_2  cf_val2_2  c       f
   5 │     3      6      9  ce_val1_3  ce_val2_3  c       e
   6 │     3      6      9  cf_val1_3  cf_val2_3  c       f
   7 │     1      4      7  de_val1_1  de_val2_1  d       e
   8 │     1      4      7  df_val1_1  df_val2_1  d       f
   9 │     2      5      8  de_val1_2  de_val2_2  d       e
  10 │     2      5      8  df_val1_2  df_val2_2  d       f
  11 │     3      6      9  de_val1_3  de_val2_3  d       e
  12 │     3      6      9  df_val1_3  df_val2_3  d       f
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TidyStanza: pivot_wider
pivot_wider(df; names_from = [:cname1, :cname2], values_from = [:val1, :val2])"><pre><span class="pl-k">using</span> TidyStanza<span class="pl-k">:</span> pivot_wider
<span class="pl-c1">pivot_wider</span>(df; names_from <span class="pl-k">=</span> [<span class="pl-c1">:cname1</span>, <span class="pl-c1">:cname2</span>], values_from <span class="pl-k">=</span> [<span class="pl-c1">:val1</span>, <span class="pl-c1">:val2</span>])</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×11 DataFrame
 Row │ x      a      b      val1_c_e   val1_c_f   val1_d_e   val1_d_f   val
2_c ⋯
     │ Int64  Int64  Int64  String?    String?    String?    String?    Str
ing ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │     1      4      7  ce_val1_1  cf_val1_1  de_val1_1  df_val1_1  ce_
val ⋯
   2 │     2      5      8  ce_val1_2  cf_val1_2  de_val1_2  df_val1_2  ce_
val
   3 │     3      6      9  ce_val1_3  cf_val1_3  de_val1_3  df_val1_3  ce_
val
                                                               4 columns om
itted"><pre class="notranslate"><code>3×11 DataFrame
 Row │ x      a      b      val1_c_e   val1_c_f   val1_d_e   val1_d_f   val
2_c ⋯
     │ Int64  Int64  Int64  String?    String?    String?    String?    Str
ing ⋯
─────┼─────────────────────────────────────────────────────────────────────
─────
   1 │     1      4      7  ce_val1_1  cf_val1_1  de_val1_1  df_val1_1  ce_
val ⋯
   2 │     2      5      8  ce_val1_2  cf_val1_2  de_val1_2  df_val1_2  ce_
val
   3 │     3      6      9  ce_val1_3  cf_val1_3  de_val1_3  df_val1_3  ce_
val
                                                               4 columns om
itted
</code></pre></div>
</details>
<h4 dir="auto"><a id="user-content-relocate---for-relocating-columns" class="anchor" aria-hidden="true" href="#relocate---for-relocating-columns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>relocate</code> - for relocating columns</h4>
<p dir="auto">This is for relocating columns and implements a replica of <a href="https://dplyr.tidyverse.org/reference/relocate.html" rel="nofollow"><code>dplyr::relocate</code></a></p>
<details>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DataFrames
using DataConvenience: @&gt;
using TidyStanza: relocate, any_of, last_col

# df &lt;- tibble(a = 1, b = 1, c = 1, d = &quot;a&quot;, e = &quot;a&quot;, f = &quot;a&quot;)

df = DataFrame(a = 1, b = 1, c = 1, d = &quot;a&quot;, e = &quot;a&quot;, f = &quot;a&quot;)"><pre class="notranslate"><code>using DataFrames
using DataConvenience: @&gt;
using TidyStanza: relocate, any_of, last_col

# df &lt;- tibble(a = 1, b = 1, c = 1, d = "a", e = "a", f = "a")

df = DataFrame(a = 1, b = 1, c = 1, d = "a", e = "a", f = "a")
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# df %&gt;% relocate(f)
@&gt; df relocate(:f)"><pre class="notranslate"><code># df %&gt;% relocate(f)
@&gt; df relocate(:f)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# df %&gt;% relocate(a, .after = c)
@&gt; df relocate(:a, after = :c)"><pre class="notranslate"><code># df %&gt;% relocate(a, .after = c)
@&gt; df relocate(:a, after = :c)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# df %&gt;% relocate(f, .before = b)
@&gt; df relocate(:f, before = :b)"><pre class="notranslate"><code># df %&gt;% relocate(f, .before = b)
@&gt; df relocate(:f, before = :b)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# df %&gt;% relocate(a, .after = last_col())
@&gt; df relocate(:a, after = names(df)[end])"><pre class="notranslate"><code># df %&gt;% relocate(a, .after = last_col())
@&gt; df relocate(:a, after = names(df)[end])
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@&gt; df relocate(:a, after = last_col())"><pre class="notranslate"><code>@&gt; df relocate(:a, after = last_col())
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="middle_col() = df-&gt;names(df)[end ÷ 2]
@&gt; df relocate(:a, after = middle_col())"><pre class="notranslate"><code>middle_col() = df-&gt;names(df)[end ÷ 2]
@&gt; df relocate(:a, after = middle_col())
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using TidyStanza: where

# df %&gt;% relocate(where(is.character))
isstring(x) = eltype(x) &lt;: AbstractString

@&gt; df relocate(where(isstring))"><pre class="notranslate"><code>using TidyStanza: where

# df %&gt;% relocate(where(is.character))
isstring(x) = eltype(x) &lt;: AbstractString

@&gt; df relocate(where(isstring))
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@&gt; df relocate(where(x-&gt;eltype(x) &lt;: AbstractString))"><pre class="notranslate"><code>@&gt; df relocate(where(x-&gt;eltype(x) &lt;: AbstractString))
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# df %&gt;% relocate(where(is.numeric), .after = last_col())
isnumeric(x) = eltype(x) &lt;: Number

@&gt; df relocate(where(isnumeric), after = last_col())"><pre class="notranslate"><code># df %&gt;% relocate(where(is.numeric), .after = last_col())
isnumeric(x) = eltype(x) &lt;: Number

@&gt; df relocate(where(isnumeric), after = last_col())
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# df %&gt;% relocate(any_of(c(&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;)))
@&gt; df relocate(intersect([&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;], names(df)))"><pre class="notranslate"><code># df %&gt;% relocate(any_of(c("a", "e", "i", "o", "u")))
@&gt; df relocate(intersect(["a", "e", "i", "o", "u"], names(df)))
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@&gt; df relocate(any_of([&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;]))"><pre class="notranslate"><code>@&gt; df relocate(any_of(["a", "e", "i", "o", "u"]))
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="#df2 &lt;- tibble(a = 1, b = &quot;a&quot;, c = 1, d = &quot;a&quot;)

df2 = DataFrame(a = 1, b = &quot;a&quot;, c = 1, d = &quot;a&quot;)"><pre class="notranslate"><code>#df2 &lt;- tibble(a = 1, b = "a", c = 1, d = "a")

df2 = DataFrame(a = 1, b = "a", c = 1, d = "a")
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="#df2 %&gt;% relocate(where(is.numeric), .after = where(is.character))

@&gt; df2 relocate(where(isnumeric), after = where(isstring))"><pre class="notranslate"><code>#df2 %&gt;% relocate(where(is.numeric), .after = where(is.character))

@&gt; df2 relocate(where(isnumeric), after = where(isstring))
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="#df2 %&gt;% relocate(where(is.numeric), .before = where(is.character))
@&gt; df2 relocate(where(isnumeric), before = where(isstring))"><pre class="notranslate"><code>#df2 %&gt;% relocate(where(is.numeric), .before = where(is.character))
@&gt; df2 relocate(where(isnumeric), before = where(isstring))
</code></pre></div>
</details>
<h2 dir="auto"><a id="user-content-why-stanza" class="anchor" aria-hidden="true" href="#why-stanza"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why Stanza?</h2>
<p dir="auto">The verse in tidyverse is referring to the universe, but "verse" is a <a href="https://en.wikipedia.org/wiki/Verse_(poetry)" rel="nofollow">technical term in poetry</a>, so is <a href="https://en.wikipedia.org/wiki/Stanza" rel="nofollow">stanza</a>.</p>
</article></div>