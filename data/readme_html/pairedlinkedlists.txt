<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pairedlinkedlists" class="anchor" aria-hidden="true" href="#pairedlinkedlists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PairedLinkedLists</h1>
<p dir="auto"><a href="https://tmcgrath325.github.io/PairedLinkedLists.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://tmcgrath325.github.io/PairedLinkedLists.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tmcgrath325/PairedLinkedLists.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/tmcgrath325/PairedLinkedLists.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tmcgrath325/PairedLinkedLists.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/35614c9bd3ce47902ee7e170c69d0531840090304dfd0a41b346dfb415043538/68747470733a2f2f636f6465636f762e696f2f67682f746d6367726174683332352f5061697265644c696e6b65644c697374732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tmcgrath325/PairedLinkedLists.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a few implementations of doubly-linked lists in Julia:</p>
<ul dir="auto">
<li><code>DoublyLinkedList</code>, a doubly-linked list with mutable nodes.</li>
<li><code>PairedLinkedList</code>, a doubly-linked list with mutable nodes which also contain a third link to a node in another <code>PairedLinkedList</code>.</li>
<li><code>TargetedLinkedList</code>, a doubly-linked list with mutable nodes which also contain a third link to a node in another list, which can be a <code>DoublyLinkedList</code>,<code>PairedLinkedList</code>, or a <code>TargetedLinkedList</code>.</li>
</ul>
<p dir="auto">The lists support many of the base methods for arrays:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" julia&gt; using PairedLinkedLists

julia&gt; l = DoublyLinkedList{Int}();

julia&gt; push!(l, 1:10...)
DoublyLinkedList{Int64}(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

julia&gt; pushfirst!(l, 0)
DoublyLinkedList{Int64}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

julia&gt; pop!(l); l
DoublyLinkedList{Int64}(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

julia&gt; popfirst!(l); l
DoublyLinkedList{Int64}(1, 2, 3, 4, 5, 6, 7, 8, 9)

julia&gt; popat!(l, 5); l
DoublyLinkedList{Int64}(1, 2, 3, 4, 6, 7, 8, 9)

julia&gt; insert!(l, 5, -1)
DoublyLinkedList{Int64}(1, 2, 3, 4, -1, 6, 7, 8, 9)"><pre> julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PairedLinkedLists

julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> <span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int}</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(l, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">...</span>)
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>, <span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pushfirst!</span>(l, <span class="pl-c1">0</span>)
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>, <span class="pl-c1">10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pop!</span>(l); l
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">popfirst!</span>(l); l
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">popat!</span>(l, <span class="pl-c1">5</span>); l
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">insert!</span>(l, <span class="pl-c1">5</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)</pre></div>
<p dir="auto">List nodes, rather than the data they contain, can be accessed via <code>getnode()</code>. Each node contains <code>data</code> as well as references to the previous and next nodes:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PairedLinkedLists;

julia&gt; l = DoublyLinkedList{Int}(1:5...)
DoublyLinkedList{Int64}(1, 2, 3, 4, 5)

julia&gt; node = getnode(l,3)
ListNode{Int64, DoublyLinkedList{Int64}}(3)

julia&gt; node.next
ListNode{Int64, DoublyLinkedList{Int64}}(4)

julia&gt; node.prev.data == 2
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PairedLinkedLists;

julia<span class="pl-k">&gt;</span> l <span class="pl-k">=</span> <span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int}</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">...</span>)
<span class="pl-c1">DoublyLinkedList</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>)

julia<span class="pl-k">&gt;</span> node <span class="pl-k">=</span> <span class="pl-c1">getnode</span>(l,<span class="pl-c1">3</span>)
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> node<span class="pl-k">.</span>next
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> node<span class="pl-k">.</span>prev<span class="pl-k">.</span>data <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">true</span></pre></div>
<p dir="auto">Iterating a list returns the data it contains, but nodes can be accessed during iteration by using <code>IteratingListNodes</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; for data in l println(data) end
1
2
3
4
5

julia&gt; for node in IteratingListNodes(l) println(node) end
ListNode{Int64, DoublyLinkedList{Int64}}(1)
ListNode{Int64, DoublyLinkedList{Int64}}(2)
ListNode{Int64, DoublyLinkedList{Int64}}(3)
ListNode{Int64, DoublyLinkedList{Int64}}(4)
ListNode{Int64, DoublyLinkedList{Int64}}(5)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> data <span class="pl-k">in</span> l <span class="pl-c1">println</span>(data) <span class="pl-k">end</span>
<span class="pl-c1">1</span>
<span class="pl-c1">2</span>
<span class="pl-c1">3</span>
<span class="pl-c1">4</span>
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> node <span class="pl-k">in</span> <span class="pl-c1">IteratingListNodes</span>(l) <span class="pl-c1">println</span>(node) <span class="pl-k">end</span>
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">ListNode</span><span class="pl-c1">{Int64, DoublyLinkedList{Int64}}</span>(<span class="pl-c1">5</span>)</pre></div>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Skip_list" rel="nofollow">Skip lists</a> insert new data as appropriate to keep the list sorted, with O(log(n)) insertion and deletion times:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PairedLinkedLists

julia&gt; sortedby = x -&gt; (-x[2], x[1])
#5 (generic function with 1 method)

julia&gt; data = [(x,y) for x in 1:2 for y in 1:2];

julia&gt; sl = SkipList{eltype(data)}(data...) # using default sorting
SkipList{Tuple{Int64, Int64}, typeof(identity)}((1, 1), (1, 2), (2, 1), (2, 2))

julia&gt; sl2 = SkipList{eltype(data)}(data...; sortedby=sortedby) 
SkipList{Tuple{Int64, Int64}, var&quot;#5#6&quot;}((1, 2), (2, 2), (1, 1), (2, 1))

julia&gt; push!(sl, (0,0))
SkipList{Tuple{Int64, Int64}, typeof(identity)}((0, 0), (1, 1), (1, 2), (2, 1), (2, 2))

julia&gt; push!(sl2, (0,0))
SkipList{Tuple{Int64, Int64}, var&quot;#5#6&quot;}((1, 2), (2, 2), (1, 1), (2, 1), (0, 0))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PairedLinkedLists

julia<span class="pl-k">&gt;</span> sortedby <span class="pl-k">=</span> x <span class="pl-k">-&gt;</span> (<span class="pl-k">-</span>x[<span class="pl-c1">2</span>], x[<span class="pl-c1">1</span>])
<span class="pl-c"><span class="pl-c">#</span>5 (generic function with 1 method)</span>

julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> [(x,y) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span> <span class="pl-k">for</span> y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>];

julia<span class="pl-k">&gt;</span> sl <span class="pl-k">=</span> <span class="pl-c1">SkipList</span><span class="pl-c1">{eltype(data)}</span>(data<span class="pl-k">...</span>) <span class="pl-c"><span class="pl-c">#</span> using default sorting</span>
<span class="pl-c1">SkipList</span><span class="pl-c1">{Tuple{Int64, Int64}, typeof(identity)}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))

julia<span class="pl-k">&gt;</span> sl2 <span class="pl-k">=</span> <span class="pl-c1">SkipList</span><span class="pl-c1">{eltype(data)}</span>(data<span class="pl-k">...</span>; sortedby<span class="pl-k">=</span>sortedby) 
<span class="pl-c1">SkipList</span><span class="pl-c1">{Tuple{Int64, Int64}, var"#5#6"}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(sl, (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">SkipList</span><span class="pl-c1">{Tuple{Int64, Int64}, typeof(identity)}</span>((<span class="pl-c1">0</span>, <span class="pl-c1">0</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">push!</span>(sl2, (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))
<span class="pl-c1">SkipList</span><span class="pl-c1">{Tuple{Int64, Int64}, var"#5#6"}</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">2</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>))</pre></div>
</article></div>