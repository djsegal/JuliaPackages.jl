<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cplexcpjl" class="anchor" aria-hidden="true" href="#cplexcpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CPLEXCP.jl</h1>
<p dir="auto">CPLEXCP.jl is a wrapper for the <a href="https://www.ibm.com/analytics/cplex-cp-optimizer" rel="nofollow">IBM® ILOG® CPLEX® CP Optimizer</a>.</p>
<p dir="auto">You cannot use CPLEXCP.jl without having purchased and installed a copy of CPLEX
Optimization Studio from <a href="http://www.ibm.com/" rel="nofollow">IBM</a>. However, CPLEX is
available for free to <a href="http://ibm.biz/Bdzvqw" rel="nofollow">academics and students</a>.</p>
<p dir="auto">CPLEXCP.jl has two components:</p>
<ul dir="auto">
<li>a thin wrapper around the complete Java API</li>
<li>an interface to <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface</a> and
<a href="https://github.com/dourouc05/ConstraintProgrammingExtensions.jl">ConstraintProgrammingExtensions.jl</a></li>
</ul>
<p dir="auto">The Java API can be accessed via <code>CPLEXCP.cpo_java_xxx</code> functions, where the names and
arguments are built from the Java API. See the <a href="https://www.ibm.com/support/knowledgecenter/SSSA5P_12.10.0/COS_KC_home.html" rel="nofollow">CPLEX documentation</a>
for details.</p>
<p dir="auto"><em>Note: This wrapper is maintained by the community and is not
officially supported by IBM. If you are a commercial customer
interested in official support for CPLEX CP Optimizer in Julia, let them know!</em></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><strong>Minimum version requirement:</strong> CPLEXCP.jl requires CPLEX version 20.1. Other versions may work,
but are not tested. Versions 12.9 and 12.10 are automatically detected, though.</p>
<p dir="auto">First, obtain a license of CPLEX and install CPLEX CP optimizer, following the
instructions on <a href="https://www.ibm.com/analytics/cplex-cp-optimizer" rel="nofollow">IBM's website</a>. Then, set the
<code>CPLEX_STUDIO_DIR</code> environment variable as appropriate and run
<code>Pkg.add("CPLEXCP")</code>, then <code>Pkg.build("CPLEXCP")</code>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# On Windows, this might be
ENV[&quot;CPLEX_STUDIO_DIR&quot;] = &quot;C:\\Program Files\\CPLEX_Studio1210\\&quot;
import Pkg
Pkg.add(&quot;CPLEXCP&quot;)
Pkg.build(&quot;CPLEXCP&quot;)

# On macOS, this might be
ENV[&quot;CPLEX_STUDIO_DIR&quot;] = &quot;/Applications/CPLEX_Studio1210/&quot;
import Pkg
Pkg.add(&quot;CPLEXCP&quot;)
Pkg.build(&quot;CPLEXCP&quot;)

# On Unix, this might be
ENV[&quot;CPLEX_STUDIO_DIR&quot;] = &quot;/opt/CPLEX_Studio1210/&quot;
import Pkg
Pkg.add(&quot;CPLEXCP&quot;)
Pkg.build(&quot;CPLEXCP&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> On Windows, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CPLEX_STUDIO_DIR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>Program Files<span class="pl-cce">\\</span>CPLEX_Studio1210<span class="pl-cce">\\</span><span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEXCP<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEXCP<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> On macOS, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CPLEX_STUDIO_DIR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/Applications/CPLEX_Studio1210/<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEXCP<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEXCP<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> On Unix, this might be</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>CPLEX_STUDIO_DIR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/CPLEX_Studio1210/<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEXCP<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>CPLEXCP<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><strong>Note: your path may differ. Check which folder you installed CPLEX in, and
update the path accordingly.</strong></p>
<h2 dir="auto"><a id="user-content-example-with-moi" class="anchor" aria-hidden="true" href="#example-with-moi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example with MOI</h2>
<p dir="auto">Here is an example of use of CPLEXCP.jl through MOI and CP:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MathOptInterface
using ConstraintProgrammingExtensions
using CPLEXCP

const MOI = MathOptInterface
const CP = ConstraintProgrammingExtensions

model = CPLEXCP.Optimizer()

# Create the variables: six countriers; the value is the colour number for each country
belgium, _ = MOI.add_constrained_variable(model, MOI.Integer())
denmark, _ = MOI.add_constrained_variable(model, MOI.Integer())
france, _ = MOI.add_constrained_variable(model, MOI.Integer())
germany, _ = MOI.add_constrained_variable(model, MOI.Integer())
luxembourg, _ = MOI.add_constrained_variable(model, MOI.Integer())
netherlands, _ = MOI.add_constrained_variable(model, MOI.Integer())

# Constrain the colours to be in {0, 1, 2, 3}
MOI.add_constraint(model, belgium, MOI.Interval(0, 3))
MOI.add_constraint(model, denmark, MOI.Interval(0, 3))
MOI.add_constraint(model, france, MOI.Interval(0, 3))
MOI.add_constraint(model, germany, MOI.Interval(0, 3))
MOI.add_constraint(model, luxembourg, MOI.Interval(0, 3))
MOI.add_constraint(model, netherlands, MOI.Interval(0, 3))

# Two adjacent countries must have different colours.
countries(c1, c2) = MOI.ScalarAffineFunction(MOI.ScalarAffineTerm.([1, -1], [c1, c2]), 0)
MOI.add_constraint(model, countries(belgium, france), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(belgium, germany), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(belgium, netherlands), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(belgium, luxembourg), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(denmark, germany), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(france, germany), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(france, luxembourg), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(germany, luxembourg), CP.DifferentFrom(0))
MOI.add_constraint(model, countries(germany, netherlands), CP.DifferentFrom(0))

# Solve the model.
MOI.optimize!(model)

# Check if the solution is optimum.
@assert MOI.get(model, MOI.TerminationStatus()) == MOI.OPTIMAL

# Get the solution
@show MOI.get(model, MOI.VariablePrimal(), belgium)
@show MOI.get(model, MOI.VariablePrimal(), denmark)
@show MOI.get(model, MOI.VariablePrimal(), france)
@show MOI.get(model, MOI.VariablePrimal(), germany)
@show MOI.get(model, MOI.VariablePrimal(), luxembourg)
@show MOI.get(model, MOI.VariablePrimal(), netherlands)"><pre><span class="pl-k">using</span> MathOptInterface
<span class="pl-k">using</span> ConstraintProgrammingExtensions
<span class="pl-k">using</span> CPLEXCP

<span class="pl-k">const</span> MOI <span class="pl-k">=</span> MathOptInterface
<span class="pl-k">const</span> CP <span class="pl-k">=</span> ConstraintProgrammingExtensions

model <span class="pl-k">=</span> CPLEXCP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>()

<span class="pl-c"><span class="pl-c">#</span> Create the variables: six countriers; the value is the colour number for each country</span>
belgium, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
denmark, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
france, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
germany, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
luxembourg, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
netherlands, _ <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_constrained_variable</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())

<span class="pl-c"><span class="pl-c">#</span> Constrain the colours to be in {0, 1, 2, 3}</span>
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, belgium, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, denmark, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, france, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, germany, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, luxembourg, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, netherlands, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))

<span class="pl-c"><span class="pl-c">#</span> Two adjacent countries must have different colours.</span>
<span class="pl-en">countries</span>(c1, c2) <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineFunction</span>(MOI<span class="pl-k">.</span><span class="pl-c1">ScalarAffineTerm</span>.([<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], [c1, c2]), <span class="pl-c1">0</span>)
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, france), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, germany), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, netherlands), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(belgium, luxembourg), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(denmark, germany), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(france, germany), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(france, luxembourg), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(germany, luxembourg), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))
MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">countries</span>(germany, netherlands), CP<span class="pl-k">.</span><span class="pl-c1">DifferentFrom</span>(<span class="pl-c1">0</span>))

<span class="pl-c"><span class="pl-c">#</span> Solve the model.</span>
MOI<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(model)

<span class="pl-c"><span class="pl-c">#</span> Check if the solution is optimum.</span>
<span class="pl-c1">@assert</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">TerminationStatus</span>()) <span class="pl-k">==</span> MOI<span class="pl-k">.</span>OPTIMAL

<span class="pl-c"><span class="pl-c">#</span> Get the solution</span>
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), belgium)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), denmark)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), france)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), germany)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), luxembourg)
<span class="pl-c1">@show</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), netherlands)</pre></div>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<p dir="auto">We highly recommend that you use the <em>CPLEXCP.jl</em> package with higher level
packages such as <a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a>.
<strong>However, for now, JuMP hasn't caught up with MOI 0.10; you will not be able
to use JuMP with the latest version of CPLEXCP.jl.</strong></p>
<p dir="auto">This can be done using a <code>CPLEXCP.Optimizer</code> object. Here is how to create a
<em>JuMP</em> model that uses Chuffed as solver.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, CPLEXCP

model = Model(CPLEXCP.Optimizer)"><pre><span class="pl-k">using</span> JuMP, CPLEXCP

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(CPLEXCP<span class="pl-k">.</span>Optimizer)</pre></div>
</article></div>