<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/JuliaData/NamedTuples.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb3498712866e281f87c9f9a8afe37f61ad6547b/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961446174612f4e616d65645475706c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaData/NamedTuples.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/quinnj/namedtuples-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/45f460915795d41c9282e943752d6d9349ca40f3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f4a756c6961446174612f4e616d65645475706c65732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/JuliaData/NamedTuples.jl?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaData/NamedTuples.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1cb7db4d357dbe529853c6eb3f17429ef36198c6/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961446174612f4e616d65645475706c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaData/NamedTuples.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-namedtuples" class="anchor" aria-hidden="true" href="#namedtuples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NamedTuples</h1>
<h2><a id="user-content-note-the-named-tuple-type-functionality-has-been-integrated-into-julia-base-as-of-julia-07-prefer-using-the-base-implementation-of-namedtuples-when-writing-code-for-julia-07-or-higher" class="anchor" aria-hidden="true" href="#note-the-named-tuple-type-functionality-has-been-integrated-into-julia-base-as-of-julia-07-prefer-using-the-base-implementation-of-namedtuples-when-writing-code-for-julia-07-or-higher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Note: the <a href="https://docs.julialang.org/en/v1/manual/types/#Named-Tuple-Types-1" rel="nofollow">Named Tuple type</a> functionality has been integrated into Julia Base as of Julia 0.7. Prefer using the Base implementation of NamedTuples when writing code for Julia 0.7 or higher.</h2>
<p>NamedTuples.jl provides a high performance implementation of named tuples for Julia (cf named tuples in python). Julia tuples are restricted to supporting index based access. This new implementation allows both index and property based access. NamedTuples may be used anywhere that a tuple is currently being used, for example in the definition of a method or as the return value of a method. NamedTuples are implemented using Juliaâ€™s macro system, ensuring that the run time cost is equivalent to constructing a regular immutable type.</p>
<p>NamedTuples may also be used in cases where a small typed immutable dictionary is desired.</p>
<p>Syntax</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@NT</span>( a, b )                 <span class="pl-k">-&gt;</span> Defines a tuple with a and b as members
<span class="pl-c1">@NT</span>( a<span class="pl-k">::</span><span class="pl-c1">Int64</span>, b<span class="pl-k">::</span><span class="pl-c1">Float64</span> ) <span class="pl-k">-&gt;</span> Defines a tuple with the specific arg types as members
<span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)    <span class="pl-k">-&gt;</span> Defines and constructs a tuple with the specifed members and values
<span class="pl-c1">@NT</span>( a, b )( (<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>) ) <span class="pl-k">-&gt;</span> Is equivalent to the above definition
<span class="pl-c1">@NT</span>( a<span class="pl-k">::</span><span class="pl-c1">Int64</span> )( (<span class="pl-c1">2.0</span>,) )   <span class="pl-k">-&gt;</span> Calls <span class="pl-s"><span class="pl-pds">`</span>convert( Int64, 2.0 )<span class="pl-pds">`</span></span> on construction and sets <span class="pl-s"><span class="pl-pds">`</span>a<span class="pl-pds">`</span></span>
<span class="pl-c1">@NT</span>( <span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Float64</span> )   <span class="pl-k">-&gt;</span> Defines a named tuple with automatic names</pre></div>
<p>NamedTuples may be used anywhere you would use a regular Tuple, this includes method definition and return values.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">module</span> Demo
<span class="pl-k">using</span> NamedTuples

<span class="pl-k">function</span> <span class="pl-en">foo</span>( y )
    a <span class="pl-k">=</span> <span class="pl-c1">1</span>
    x <span class="pl-k">=</span> <span class="pl-c1">3</span>
    <span class="pl-k">return</span>  <span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>, c <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, d<span class="pl-k">=</span>a<span class="pl-k">/</span>x, y <span class="pl-k">=</span> a<span class="pl-k">/</span>y  )
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">bar</span>( nt<span class="pl-k">:</span>:<span class="pl-c1">@NT</span>( a<span class="pl-k">::</span><span class="pl-c1">Int64</span>, c<span class="pl-k">::</span><span class="pl-c1">String</span> ))
    <span class="pl-k">return</span> <span class="pl-c1">repeat</span>( nt<span class="pl-k">.</span>c, nt<span class="pl-k">.</span>a )
<span class="pl-k">end</span>

<span class="pl-k">end</span>

<span class="pl-k">using</span> NamedTuples
Demo<span class="pl-k">.</span><span class="pl-c1">foo</span>( <span class="pl-c1">1</span> ) <span class="pl-c"><span class="pl-c">#</span> Returns a NamedTuple of 5 elements</span>
Demo<span class="pl-k">.</span><span class="pl-c1">bar</span>( <span class="pl-c1">@NT</span>( a<span class="pl-k">=</span> <span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)) <span class="pl-c"><span class="pl-c">#</span> Returns `hellohello`</span></pre></div>
<p>There is at most one instance of a NamedTuple type with a given set of Members and Types, hence</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">typeof</span>( <span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span> )) <span class="pl-k">==</span> <span class="pl-c1">@NT</span>( a<span class="pl-k">::</span><span class="pl-c1">Int</span>, b<span class="pl-k">::</span><span class="pl-c1">Float64</span> )</pre></div>
<p>NamedTuple definitions are shared across all modules. The underlying immutable types are constructed at first use.</p>
<p>NamedTuples support iteration and indexing, and behave as immutable associative containers.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span> )<span class="pl-k">.</span>a <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span> )[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span> )[<span class="pl-c1">:a</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">length</span>( <span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>)) <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">length</span>( <span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span>)) <span class="pl-k">==</span> <span class="pl-c1">2</span>
<span class="pl-c1">first</span>( <span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span> )) <span class="pl-k">==</span>  <span class="pl-c1">1</span>
<span class="pl-c1">last</span>( <span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2.0</span> )) <span class="pl-k">==</span> <span class="pl-c1">2.0</span>
<span class="pl-k">using</span> Compat<span class="pl-k">:</span> pairs
<span class="pl-k">for</span> (k,v) <span class="pl-k">in</span> <span class="pl-c1">pairs</span>(<span class="pl-c1">@NT</span>( a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">1</span> ))
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$k</span> = <span class="pl-v">$v</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>NamedTuples additionally support operations to merge, update, add and delete elements.  Since NamedTuples
are immutable, these operations make a copy of the data and return a new NamedTuple. The current
implementation of these operations is functional rather than performance oriented.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> nt <span class="pl-k">=</span> <span class="pl-c1">@NT</span>( a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, c<span class="pl-k">=</span><span class="pl-c1">3</span> )
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> NamedTuples<span class="pl-k">.</span><span class="pl-c1">setindex</span>( nt, <span class="pl-c1">:x</span>, <span class="pl-c1">123</span> )
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, x <span class="pl-k">=</span> <span class="pl-c1">123</span>)

julia<span class="pl-k">&gt;</span> NamedTuples<span class="pl-k">.</span><span class="pl-c1">delete</span>( x, <span class="pl-c1">:a</span>)
(b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, x <span class="pl-k">=</span> <span class="pl-c1">123</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">merge</span>( nt, <span class="pl-c1">@NT</span>( d <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, e <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>))
(a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>, c <span class="pl-k">=</span> <span class="pl-c1">3</span>, d <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, e <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>)</pre></div>
<p>Note the use of <code>setindex/delete</code> and not <code>setindex!/delete!</code> as these operations do NOT modify in place.</p>
</article></div>