<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rungekuttafehlberg" class="anchor" aria-hidden="true" href="#rungekuttafehlberg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RungeKuttaFehlberg</h1>
<p><a href="https://travis-ci.org/gwater/RungeKuttaFehlberg.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a4ae35d3265bd858a0bc82b8718651c5eef738cf/68747470733a2f2f7472617669732d63692e6f72672f6777617465722f52756e67654b757474614665686c626572672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gwater/RungeKuttaFehlberg.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><em>This package is obsolete and archived. Please use <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl</a>.</em></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>An implementation of the well-known <a href="https://dx.doi.org/10.1007/BF02241732" rel="nofollow">Runge-Kutta-Fehlberg time integration method</a> of 4th and 5th order (RKF45).
The algorithm integrates differential equations of the form:</p>
<pre><code>dx / dt = f[x](t)
</code></pre>
<p>Notably, <code>f</code> can be either a function or a functional of <code>x</code>. This is useful for certain types of partial differential equations (e.g. the heat equation).</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>You import the package as usual:</p>
<pre><code>using RungeKuttaFehlberg
</code></pre>
<p>The package exports exactly one function</p>
<pre><code>rkf45_step(f, x, t, tolerance, dt[, error, safety])
</code></pre>
<p>which returns <code>dx</code> and <code>dt</code> as a tuple.
Most arguments should be self-explanatory but more detailed documentation is included in the package.</p>
<h2><a id="user-content-additional-comments" class="anchor" aria-hidden="true" href="#additional-comments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional comments</h2>
<p>Most likely you will iterate over <code>rkf45_step()</code> and sum up <code>dx</code> and <code>dt</code>.
The algorithm will run most efficiently if you pass the last return value for <code>dt</code> back into <code>rkf45_step()</code> at the next iteration.</p>
<p>The r.h.s. function <code>f()</code> must take exactly two arguments, <code>x</code> and <code>t</code>. Currently, there is no way to pass additional parameters to <code>f()</code>.
However, you can easily define an intermediate function which contains the values of each parameter and then pass it to <code>rkf45_step()</code>.</p>
<p>RKF45 evaluates <code>f()</code> <em>at least</em> 6 times during each step, so optimizing <code>f()</code> can increase performance a lot.</p>
<p>I am currently hosting this in a separate package, but I am open to suggestions w.r.t. inclusion in a package for time integration methods.</p>
</article></div>