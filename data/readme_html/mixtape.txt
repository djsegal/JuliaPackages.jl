<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mixtapejl" class="anchor" aria-hidden="true" href="#mixtapejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mixtape.jl</h1>
<p align="center" dir="auto">
<a target="_blank" rel="noopener noreferrer" href="assets/mixtape.png"><img height="200" src="assets/mixtape.png" style="max-width: 100%;"></a>
</p>
<br>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
<th align="center"><strong>Documentation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaCompilerPlugins/Mixtape.jl/actions"><img src="https://github.com/JuliaCompilerPlugins/Mixtape.jl/workflows/julia-1.6/badge.svg" alt="" style="max-width: 100%;"></a> <a href="https://github.com/JuliaCompilerPlugins/Mixtape.jl/actions"><img src="https://github.com/JuliaCompilerPlugins/Mixtape.jl/workflows/julia-nightly/badge.svg" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/github/JuliaCompilerPlugins/Mixtape.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2aa4fc478c598c9b48c9f7a5f0897f7b4da64e809eecf31d65ea8eb9f970cb7b/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c6961436f6d70696c6572506c7567696e732f4d6978746170652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://codecov.io/github/JuliaCompilerPlugins/Mixtape.jl/badge.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://JuliaCompilerPlugins.github.io/Mixtape.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span>: Usage of this package requires <code>julia &gt;= 1.6</code>.</p>
</blockquote>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add Mixtape"><pre class="notranslate"><code>] add Mixtape
</code></pre></div>
<hr>
<p dir="auto"><code>Mixtape.jl</code> is a static method overlay and optimization tool which operates during Julia type inference. It allows you to (precisely) insert semantic-intruding changes to lowered code (e.g. replace <code>CodeInfo</code>, pre-optimize <code>CodeInfo</code>, and create other forms of static analysis tools on uninferred <code>CodeInfo</code>) <em>before optimization</em>. It also allows you to customize the optimization pipeline -- allowing users to write semantic-preserving passes on <a href="https://github.com/JuliaLang/julia/blob/master/base/compiler/ssair/ir.jl">Core.Compiler.IRCode</a> which operate <em>after inference</em>.</p>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span>: <code>Mixtape.jl</code> manages its own code cache and execution engine through <a href="https://github.com/maleadt/LLVM.jl">LLVM.jl</a> and <a href="https://github.com/JuliaGPU/GPUCompiler.jl">GPUCompiler.jl</a> -- so it is less part of Julia's native pipeline, and closer to a separate compiler pipeline. In the future, parts of <code>Mixtape.jl</code> may be integrated or otherwise exposed as standard APIs with the compiler.</p>
</blockquote>
<p dir="auto">In many respects, it is similar to <a href="https://github.com/JuliaLabs/Cassette.jl">Cassette.jl</a> -- <em>but it is completely static</em>.</p>
<blockquote>
<p dir="auto"><span class="color-fg-accent"><svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg>Note</span>: the architecture for this package can be found in many other places. The interested reader might look at <a href="https://github.com/vchuravy/KernelCompiler.jl">KernelCompiler.jl</a>, <a href="https://github.com/wsmoses/Enzyme.jl">Enzyme.jl</a>, <a href="https://github.com/JuliaLabs/brutus/blob/master/Brutus/src/Brutus.jl">the Julia frontend to brutus</a>, and the <a href="https://github.com/JuliaGPU/GPUCompiler.jl/blob/master/src/interface.jl">compiler interface in GPUCompiler.jl</a> to understand this a bit better.</p>
<p dir="auto">When in doubt, don't be afraid of <a href="https://github.com/JuliaLang/julia/blob/master/base/compiler/typeinfer.jl">typeinfer.jl</a> and <a href="https://github.com/JuliaLang/julia/tree/master/base/compiler/ssair">Julia's SSA form IR</a>!</p>
</blockquote>
<h2 dir="auto"><a id="user-content-interfaces" class="anchor" aria-hidden="true" href="#interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interfaces</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Mixtape
using Mixtape: jit, emit, @load_abi
import Mixtape: CompilationContext, 
                allow, 
                transform, 
                optimize!"><pre><span class="pl-k">using</span> Mixtape
<span class="pl-k">using</span> Mixtape<span class="pl-k">:</span> jit, emit, <span class="pl-c1">@load_abi</span>
<span class="pl-k">import</span> Mixtape<span class="pl-k">:</span> CompilationContext, 
                allow, 
                transform, 
                optimize!</pre></div>
<p dir="auto"><code>Mixtape.jl</code> exports a set of interfaces which allows you to interact with aspects of Julia's type inference to modify the lowered code of method instances before placement into a runtime cache. This code can then be executed as part of a self-managed code generation pipeline. This code generation pipeline works through the <a href="https://github.com/maleadt/LLVM.jl">LLVM.jl</a> and <a href="https://github.com/JuliaGPU/GPUCompiler.jl">GPUCompiler.jl</a> infrastructure.</p>
<blockquote>
<p dir="auto">In other words, you can futz with stuff without refactoring the stuff.</p>
</blockquote>
<p dir="auto"><a href="https://JuliaCompilerPlugins.github.io/Mixtape.jl/dev/" rel="nofollow">The interfaces are well-documented (if experimental).</a></p>
<p dir="auto">This package pairs well with <a href="https://github.com/JuliaCompilerPlugins/CodeInfoTools.jl">CodeInfoTools.jl</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Now easy as 1, 2, 3!</p>
<ol dir="auto">
<li><a href="https://github.com/JuliaCompilerPlugins/Mixtape.jl/blob/master/examples/simple.jl">Start simple!</a></li>
<li><a href="https://github.com/JuliaCompilerPlugins/Mixtape.jl/blob/master/examples/recursion.jl">Recursive musings...</a></li>
<li><a href="https://github.com/JuliaCompilerPlugins/Mixtape.jl/blob/master/examples/cassette.jl">Have you considered that it is interpreters all the way down?</a></li>
</ol>
<h2 dir="auto"><a id="user-content-package-contribution" class="anchor" aria-hidden="true" href="#package-contribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package contribution</h2>
<p dir="auto">A few upsides!</p>
<ol dir="auto">
<li>Completely static -- does not rely on recursive pollution of the call stack (see: <a href="https://julia.mit.edu/Cassette.jl/stable/overdub.html" rel="nofollow">the overdub issue</a>).</li>
<li>Transforms operate pre-type inference -- all semantic-intruding changes happen before type inference runs on the lowered method body.</li>
<li><code>Mixtape.jl</code> manages its own code cache -- and doesn't interact with the native runtime system (see above).</li>
</ol>
<p dir="auto">A few downsides...</p>
<ol dir="auto">
<li><code>Mixtape.jl</code> uses a custom execution engine through <code>GPUCompiler.jl</code> -- code which causes <code>GPUCompiler.jl</code> to fail will also cause <code>Mixtape.jl</code> to fail. In practice, this means you can't use the pipeline on dispatch tuples with <code>Union{As...}</code> or <code>Any</code> -- you must specify a non-dynamic type.</li>
</ol>
</article></div>