<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-destructjl" class="anchor" aria-hidden="true" href="#destructjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Destruct.jl</h1>
<p><a href="https://travis-ci.org/spalato/Destruct.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/352374af55f2c8ea148185976f4f30730b2792fab4c60f7cb765c4ddbf56be35/68747470733a2f2f7472617669732d63692e6f72672f7370616c61746f2f44657374727563742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/spalato/Destruct.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Destructuring arrays of tuples in Julia.</p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>Using julia's 'dot-call' syntax on functions with multiple return arguments
results in an array of tuples. Sometimes, you want the tuple of arrays instead,
preserving array shape.
This can be achieved using <code>destruct</code>, which converts an array of tuple to a
tuple of arrays.</p>
<p>Works with any tuples (ie: with elements of different types).</p>
<p>This single function doesn't really require it's package, maybe you can find it a better home.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Destruct; using BenchmarkTools
julia&gt; f(a, b) = a+1im*b, a*b, convert(Int, round(a-b)); # some transform returing multiple values
julia&gt; v = f.(rand(3,1), rand(1,4));
julia&gt; typeof(v)
Array{Tuple{Complex{Float64},Float64,Int64},2}
julia&gt; x, y, z = destruct(v);
julia&gt; z
3×4 Array{Int64,2}:
 0  0  0  0
 1  0  1  1
 1  0  1  1
julia&gt; v = f.(rand(500,1,1), rand(1,500,500));
julia&gt; @btime destruct($v); # using BenchmarkTools
  1.396 s (7 allocations: 3.73 GiB)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Destruct; <span class="pl-k">using</span> BenchmarkTools
julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(a, b) <span class="pl-k">=</span> a<span class="pl-k">+</span><span class="pl-c1">1im</span><span class="pl-k">*</span>b, a<span class="pl-k">*</span>b, <span class="pl-c1">convert</span>(Int, <span class="pl-c1">round</span>(a<span class="pl-k">-</span>b)); <span class="pl-c"><span class="pl-c">#</span> some transform returing multiple values</span>
julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">f</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">1</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">1</span>,<span class="pl-c1">4</span>));
julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(v)
Array{Tuple{Complex{Float64},Float64,Int64},<span class="pl-c1">2</span>}
julia<span class="pl-k">&gt;</span> x, y, z <span class="pl-k">=</span> <span class="pl-c1">destruct</span>(v);
julia<span class="pl-k">&gt;</span> z
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">1</span>
julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">f</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">500</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">1</span>,<span class="pl-c1">500</span>,<span class="pl-c1">500</span>));
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">destruct</span>(<span class="pl-k">$</span>v); <span class="pl-c"><span class="pl-c">#</span> using BenchmarkTools</span>
  <span class="pl-c1">1.396</span> s (<span class="pl-c1">7</span> allocations<span class="pl-k">:</span> <span class="pl-c1">3.73</span> GiB)</pre></div>
<p>Getting this out of the way:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x, y, z = f.(rand(100,1,1), rand(1,100,100)) |&gt; destruct;
"><pre>julia<span class="pl-k">&gt;</span> x, y, z <span class="pl-k">=</span> <span class="pl-c1">f</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">1</span>,<span class="pl-c1">100</span>,<span class="pl-c1">100</span>)) <span class="pl-k">|&gt;</span> destruct;</pre></div>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>A common way to unpack Arrays of tuples uses the broadcast dot-call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="unpack_broadcast(w::Array{&lt;:Tuple}) = Tuple((v-&gt;v[i]).(w) for i=1:length(w[1]))
"><pre><span class="pl-en">unpack_broadcast</span>(w<span class="pl-k">::</span><span class="pl-c1">Array{&lt;:Tuple}</span>) <span class="pl-k">=</span> <span class="pl-c1">Tuple</span>((v<span class="pl-k">-&gt;</span>v[i]).(w) <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(w[<span class="pl-c1">1</span>]))</pre></div>
<p>However, this approach suffers from two problems: it doesn't access the elements
in the order they are stored in memory and has huge memory consumption for
Tuples with varying types (<code>Tuples</code> instead of <code>NTuples</code>).</p>
<p>This "broadcast unpack" takes between 1.5x and 2x longer than <code>destruct</code>
supplied here for arrays of <code>NTuples</code>. The performance gain is much larger
for tuples of heterogenous types: in the 10x to 75x range, using 1/10th
of the memory.</p>
<p>See timing scripts: <code>timing.jl</code> and <code>comparative_timing.jl</code>.</p>
<h2><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How does it work?</h2>
<p>The <code>destruct</code> function uses macros from <code>Base.Cartesian</code> to allocate
destination arrays and iterate over all the things. The alternative
implementations using broadcast dot-call is available as <code>Destruct.unpack_broadcast</code>.</p>
</article></div>