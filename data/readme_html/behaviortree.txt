<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-behaviortreejl" class="anchor" aria-hidden="true" href="#behaviortreejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BehaviorTree.jl</h1>
<p>Behavior Trees (BTs) are a powerful way to describe the behavior of autonomous agents with applications in robotics and AI.</p>
<p>This implementation is based on <a href="https://arxiv.org/abs/1709.00084" rel="nofollow">Behavior Trees in Robotics and AI: An Introduction</a>.
It was developped by Team L3 to qualify in <a href="https://spacecenter.org/22-teams-selected-for-final-stage-of-space-robotics-challenge-phase-2/" rel="nofollow">NASA'Space Robotics Challenge Phase 2</a> (More details on usage in this paper: <a href="https://www.researchgate.net/publication/344879839_Human-Robot_Teaming_Strategy_for_Fast_Teleoperation_of_a_Lunar_Resource_Exploration_Rover" rel="nofollow">Human-Robot Teaming Strategy for Fast Teleoperation of a Lunar Resource Exploration Rover</a>).</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<h2><a id="user-content-optional-system-dependencies" class="anchor" aria-hidden="true" href="#optional-system-dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optional System Dependencies</h2>
<p>Visualization tools depends on <code>graphviz</code>.<br>
On Ubuntu/Debian:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="sudo apt-get install graphviz
"><pre>sudo apt-get install graphviz</pre></div>
<h2><a id="user-content-install-julia-package" class="anchor" aria-hidden="true" href="#install-julia-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install Julia Package</h2>
<p>With Julia â‰¥ 1.4 (may work on previous 1.x version but not tested) add package</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.4) pkg&gt; add BehaviorTree
"><pre>julia<span class="pl-k">&gt;</span> ]
(v1.<span class="pl-c1">4</span>) pkg<span class="pl-k">&gt;</span> add BehaviorTree</pre></div>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Usage</h2>
<p>Two Primitives are available to build behavior trees: <code>Sequence</code> and <code>Selector</code>. They accept a list of tasks, that can be a Sequence, a Selector, or, in the case of a leaf, a function returning one of <code>:success</code>, <code>:failure</code> or <code>:running</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="doSuccess(bb=Dict()) = :success
isTrue(bb=Dict()) = :success
doFailure(bb=Dict())= :failure
doRunning(bb=Dict()) = :running
bt = Selector([
    doFailure,
    Sequence([isTrue, doFailure, doSuccess], &quot;choice&quot;),
    doRunning,
    doSuccess!
], &quot;head&quot;)
"><pre><span class="pl-en">doSuccess</span>(bb<span class="pl-k">=</span><span class="pl-en">Dict</span>()) <span class="pl-k">=</span> <span class="pl-c1">:success</span>
<span class="pl-en">isTrue</span>(bb<span class="pl-k">=</span><span class="pl-en">Dict</span>()) <span class="pl-k">=</span> <span class="pl-c1">:success</span>
<span class="pl-en">doFailure</span>(bb<span class="pl-k">=</span><span class="pl-en">Dict</span>())<span class="pl-k">=</span> <span class="pl-c1">:failure</span>
<span class="pl-en">doRunning</span>(bb<span class="pl-k">=</span><span class="pl-en">Dict</span>()) <span class="pl-k">=</span> <span class="pl-c1">:running</span>
bt <span class="pl-k">=</span> <span class="pl-c1">Selector</span>([
    doFailure,
    <span class="pl-c1">Sequence</span>([isTrue, doFailure, doSuccess], <span class="pl-s"><span class="pl-pds">"</span>choice<span class="pl-pds">"</span></span>),
    doRunning,
    doSuccess!
], <span class="pl-s"><span class="pl-pds">"</span>head<span class="pl-pds">"</span></span>)</pre></div>
<p>Execution of the tree happen via the <code>tick</code> function, that accepts a shared <code>blackboard</code> object use to share state between tasks.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="blackboard = Dict{Symbol, Any}()
status, results = tick(bt, blackboard)
"><pre>blackboard <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol, Any}</span>()
status, results <span class="pl-k">=</span> <span class="pl-c1">tick</span>(bt, blackboard)</pre></div>
<p>Ticking usually happens in a loop at at a frequency determined by the needs of the application.</p>
<h2><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Visualization</h2>
<p>As BehaviorTrees use the AbstractTree interface, it is possible to use <a href="https://github.com/sisl/D3Trees.jl">D3Trees</a> for visualization:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="d3tree = D3Tree(bt)
inbrowser(tree, &quot;firefox&quot;)
"><pre>d3tree <span class="pl-k">=</span> <span class="pl-c1">D3Tree</span>(bt)
<span class="pl-c1">inbrowser</span>(tree, <span class="pl-s"><span class="pl-pds">"</span>firefox<span class="pl-pds">"</span></span>)</pre></div>
<p>Utilities to generate graphviz output via the <code>.dot</code> format are also provided.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dot_graph=toDot(bt)
filename= &quot;example.dot&quot;
open(filename, &quot;w&quot;) do dot_file
    write(dot_file, dot_graph)
end
filename= &quot;example.png&quot;
png_graph = dot2png(dot_graph)
open(filename, &quot;w&quot;) do png_file
    write(png_file, png_graph)
end
"><pre>dot_graph<span class="pl-k">=</span><span class="pl-c1">toDot</span>(bt)
filename<span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example.dot<span class="pl-pds">"</span></span>
<span class="pl-c1">open</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> dot_file
    <span class="pl-c1">write</span>(dot_file, dot_graph)
<span class="pl-k">end</span>
filename<span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example.png<span class="pl-pds">"</span></span>
png_graph <span class="pl-k">=</span> <span class="pl-c1">dot2png</span>(dot_graph)
<span class="pl-c1">open</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> png_file
    <span class="pl-c1">write</span>(png_file, png_graph)
<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="doc/images/example.png"><img src="doc/images/example.png" alt="behavior tree overview" style="max-width:100%;"></a></p>
<p>passing the execution results  in the toDot function generates a visualization of the current state:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="dot_graph=toDot(bt, results)
filename= &quot;status.png&quot;
png_graph = dot2png(dot_graph)
open(filename, &quot;w&quot;) do png_file
    write(png_file, png_graph)
end
"><pre>dot_graph<span class="pl-k">=</span><span class="pl-c1">toDot</span>(bt, results)
filename<span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>status.png<span class="pl-pds">"</span></span>
png_graph <span class="pl-k">=</span> <span class="pl-c1">dot2png</span>(dot_graph)
<span class="pl-c1">open</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> png_file
    <span class="pl-c1">write</span>(png_file, png_graph)
<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="doc/images/status.png"><img src="doc/images/status.png" alt="behavior tree overview" style="max-width:100%;"></a></p>
</article></div>