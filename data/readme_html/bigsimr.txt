<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bigsimr" class="anchor" aria-hidden="true" href="#bigsimr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bigsimr</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build and Coverage</strong></th>
<th align="center"><strong>Package Details</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://SchisslerGroup.github.io/Bigsimr.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/SchisslerGroup/Bigsimr.jl/actions/workflows/CI.yml"><img src="https://github.com/SchisslerGroup/Bigsimr.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a></td>
<td align="center"><a href="https://lifecycle.r-lib.org/articles/stages.html" rel="nofollow"><img src="https://camo.githubusercontent.com/42c0373df6a0ab2e26098242307a512273a289eb8581e06fc9acad60121e157a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e6765" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://SchisslerGroup.github.io/Bigsimr.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/SchisslerGroup/Bigsimr.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/746d18945c15ccdf7119e3723f4af2b2fed3fb62548b0764913c2d35b6caa2c1/68747470733a2f2f636f6465636f762e696f2f67682f5363686973736c657247726f75702f42696773696d722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/SchisslerGroup/Bigsimr.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/SchisslerGroup/Bigsimr.jl/releases"><img src="https://camo.githubusercontent.com/c3a43bef8ac8f0cb40d75848c49985cb8a4b7d247c2594662f77da41311725e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f5363686973736c657247726f75702f42696773696d722e6a6c3f6c6162656c3d72656c6561736526736f72743d73656d766572" alt="Release" data-canonical-src="https://img.shields.io/github/v/tag/SchisslerGroup/Bigsimr.jl?label=release&amp;sort=semver" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A Julia package for simulating high-dimensional multivariate data with a target correlation and arbitrary marginal distributions via Gaussian copula. <em>Bigsimr</em> works with any univariate distribution implemented in <em>Distributions.jl</em> or any user-defined distribution derived from <em>Distributions</em> univariate classes. Additionally, <em>Bigsimr</em> accounts for different target correlations:</p>
<ul>
<li>Pearson: employs a matching algorithm (Xiao and Zhou 2019) to account for the non-linear transformation in the Normal-to-Anything (NORTA) step</li>
<li>Spearman and Kendall: Use explicit transformations (Lebrun and Dutfoy 2009)</li>
</ul>
<h2><a id="user-content-other-features" class="anchor" aria-hidden="true" href="#other-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other Features</h2>
<ul>
<li><strong>Nearest Correlation Matrix</strong> - Calculate the nearest positive [semi]definite correlation matrix (Qi and Sun 2006)</li>
<li><strong>Fast Approximate Correlation Matrix</strong> - Calculate an approximation to the nearest positive definite correlation matrix</li>
<li><strong>Random Correlation Matrix</strong> - Generate random positive [semi]definite correlation matrices</li>
<li><strong>Fast Multivariate Normal Generation</strong> - Utilize multithreading to generate multivariate normal samples in parallel</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Pearson matching</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Bigsimr
using Distributions

target_corr = cor_randPD(3)
margins = [Binomial(20, 0.2), Beta(2, 3), LogNormal(3, 1)]

adjusted_corr = pearson_match(target_corr, margins)

x = rvec(100_000, adjusted_corr, margins)
cor(x, Pearson)
"><pre><span class="pl-k">using</span> Bigsimr
<span class="pl-k">using</span> Distributions

target_corr <span class="pl-k">=</span> <span class="pl-c1">cor_randPD</span>(<span class="pl-c1">3</span>)
margins <span class="pl-k">=</span> [<span class="pl-c1">Binomial</span>(<span class="pl-c1">20</span>, <span class="pl-c1">0.2</span>), <span class="pl-c1">Beta</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>), <span class="pl-c1">LogNormal</span>(<span class="pl-c1">3</span>, <span class="pl-c1">1</span>)]

adjusted_corr <span class="pl-k">=</span> <span class="pl-c1">pearson_match</span>(target_corr, margins)

x <span class="pl-k">=</span> <span class="pl-c1">rvec</span>(<span class="pl-c1">100_000</span>, adjusted_corr, margins)
<span class="pl-c1">cor</span>(x, Pearson)</pre></div>
<p>Spearman/Kendall matching</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="spearman_corr = cor_randPD(3)
adjusted_corr = cor_convert(spearman_corr, Spearman, Pearson)

x = rvec(100_000, adjusted_corr, margins)
cor(x, Spearman)
"><pre>spearman_corr <span class="pl-k">=</span> <span class="pl-c1">cor_randPD</span>(<span class="pl-c1">3</span>)
adjusted_corr <span class="pl-k">=</span> <span class="pl-c1">cor_convert</span>(spearman_corr, Spearman, Pearson)

x <span class="pl-k">=</span> <span class="pl-c1">rvec</span>(<span class="pl-c1">100_000</span>, adjusted_corr, margins)
<span class="pl-c1">cor</span>(x, Spearman)</pre></div>
<p>Nearest correlation matrix</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import LinearAlgebra: isposdef

s = cor_randPSD(200)
r = cor_convert(s, Spearman, Pearson)
isposdef(r)

p = cor_nearPD(r)
isposdef(p)
"><pre><span class="pl-k">import</span> LinearAlgebra<span class="pl-k">:</span> isposdef

s <span class="pl-k">=</span> <span class="pl-c1">cor_randPSD</span>(<span class="pl-c1">200</span>)
r <span class="pl-k">=</span> <span class="pl-c1">cor_convert</span>(s, Spearman, Pearson)
<span class="pl-c1">isposdef</span>(r)

p <span class="pl-k">=</span> <span class="pl-c1">cor_nearPD</span>(r)
<span class="pl-c1">isposdef</span>(p)</pre></div>
<p>Fast approximate nearest correlation matrix</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = cor_randPSD(2000)
r = cor_convert(s, Spearman, Pearson)
isposdef(r)

p = cor_fastPD(r)
isposdef(p)
"><pre>s <span class="pl-k">=</span> <span class="pl-c1">cor_randPSD</span>(<span class="pl-c1">2000</span>)
r <span class="pl-k">=</span> <span class="pl-c1">cor_convert</span>(s, Spearman, Pearson)
<span class="pl-c1">isposdef</span>(r)

p <span class="pl-k">=</span> <span class="pl-c1">cor_fastPD</span>(r)
<span class="pl-c1">isposdef</span>(p)</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li>Xiao, Q., &amp; Zhou, S. (2019). Matching a correlation coefficient by a Gaussian copula. Communications in Statistics-Theory and Methods, 48(7), 1728-1747.</li>
<li>Lebrun, R., &amp; Dutfoy, A. (2009). An innovating analysis of the Nataf transformation from the copula viewpoint. Probabilistic Engineering Mechanics, 24(3), 312-320.</li>
<li>Qi, H., &amp; Sun, D. (2006). A quadratically convergent Newton method for computing the nearest correlation matrix. SIAM journal on matrix analysis and applications, 28(2), 360-385.</li>
<li>amoeba (<a href="https://stats.stackexchange.com/users/28666/amoeba" rel="nofollow">https://stats.stackexchange.com/users/28666/amoeba</a>), How to generate a large full-rank random correlation matrix with some strong correlations present?, URL (version: 2017-04-13): <a href="https://stats.stackexchange.com/q/125020" rel="nofollow">https://stats.stackexchange.com/q/125020</a></li>
</ul>
<hr>
</article></div>