<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nestedsamplersjl" class="anchor" aria-hidden="true" href="#nestedsamplersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NestedSamplers.jl</h1>
<p><a href="https://github.com/turinglang/NestedSamplers.jl/actions"><img src="https://github.com/turinglang/NestedSamplers.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/1fe6d1f55ea4bc562d399d3e089d73cce24b0abe69c6f0a48307be9f10bb92cf/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4e2f4e657374656453616d706c6572732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/N/NestedSamplers.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/turinglang/NestedSamplers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3abbfb29032c4cc069b984d353442cc7bbf01fc2fcc964047e2b8981207cf8fc/68747470733a2f2f636f6465636f762e696f2f67682f747572696e676c616e672f4e657374656453616d706c6572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/turinglang/NestedSamplers.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://turinglang.github.io/NestedSamplers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://turinglang.github.io/NestedSamplers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3950594" rel="nofollow"><img src="https://camo.githubusercontent.com/b9a9e64bcbac703a7cf470e2bb5bf6dcc4b9582261ef44609301129ae337cd40/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333935303539342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3950594.svg" style="max-width:100%;"></a></p>
<p>A Julian implementation of single- and multi-ellipsoidal nested sampling algorithms using the <a href="https://github.com/turinglang/abstractmcmc.jl">AbstractMCMC</a> interface.</p>
<p>This package was heavily influenced by <a href="https://github.com/kbarbary/nestle"><code>nestle</code></a>, <a href="https://github.com/joshspeagle/dynesty"><code>dynesty</code></a>, and <a href="https://github.com/kbarbary/NestedSampling.jl"><code>NestedSampling.jl</code></a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To use the nested samplers first install this library</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ]add NestedSamplers
"><pre>julia<span class="pl-k">&gt;</span> ]add NestedSamplers</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>For in-depth usage, see the <a href="https://turinglang.github.io/NestedSamplers.jl/dev/" rel="nofollow">online documentation</a>. In general, you'll need to write a log-likelihood function and a prior transform function. These are supplied to a <code>NestedModel</code>, defining the statistical model</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using NestedSamplers
using Distributions

logl(X) = exp(-(X - [1, -1]) / 2)
prior(X) = 4 .* (X .- 0.5)
# or equivalently
prior = [Uniform(-2, 2), Uniform(-2, 2)]
model = NestedModel(logl, prior)
"><pre><span class="pl-k">using</span> NestedSamplers
<span class="pl-k">using</span> Distributions

<span class="pl-en">logl</span>(X) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>(X <span class="pl-k">-</span> [<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>]) <span class="pl-k">/</span> <span class="pl-c1">2</span>)
<span class="pl-en">prior</span>(X) <span class="pl-k">=</span> <span class="pl-c1">4</span> <span class="pl-k">.*</span> (X <span class="pl-k">.-</span> <span class="pl-c1">0.5</span>)
<span class="pl-c"><span class="pl-c">#</span> or equivalently</span>
prior <span class="pl-k">=</span> [<span class="pl-c1">Uniform</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">Uniform</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>)]
model <span class="pl-k">=</span> <span class="pl-c1">NestedModel</span>(logl, prior)</pre></div>
<p>after defining the model, set up the nested sampler. This will involve choosing the bounding space and proposal scheme, or you can rely on the defaults. In addition, we need to define the dimensionality of the problem and the number of live points. More points results in a more precise evidence estimate at the cost of runtime. For more information, see the docs.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="bounds = Bounds.MultiElliipsoid
prop = Proposals.Slice(slices=10)
# 1000 live points
sampler = Nested(2, 1000; bounds=bounds, proposal=prop)
"><pre>bounds <span class="pl-k">=</span> Bounds<span class="pl-k">.</span>MultiElliipsoid
prop <span class="pl-k">=</span> Proposals<span class="pl-k">.</span><span class="pl-c1">Slice</span>(slices<span class="pl-k">=</span><span class="pl-c1">10</span>)
<span class="pl-c"><span class="pl-c">#</span> 1000 live points</span>
sampler <span class="pl-k">=</span> <span class="pl-c1">Nested</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1000</span>; bounds<span class="pl-k">=</span>bounds, proposal<span class="pl-k">=</span>prop)</pre></div>
<p>once the sampler is set up, we can leverage all of the <a href="https://github.com/turinglang/abstractmcmc.jl">AbstractMCMC</a> interface, including the step iterator, transducer, and a convenience <code>sample</code> method. The <code>sample</code> method takes keyword arguments for the convergence criteria.</p>
<p><strong>Note:</strong> both the samples <em>and</em> the sampler state will be returned by <code>sample</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StatsBase
chain, state = sample(model, sampler; dlogz=0.2)
"><pre><span class="pl-k">using</span> StatsBase
chain, state <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, sampler; dlogz<span class="pl-k">=</span><span class="pl-c1">0.2</span>)</pre></div>
<p>you can resample taking into account the statistical weights, again using StatsBase</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="chain_resampled = sample(chain, Weights(vec(chain[&quot;weights&quot;])), length(chain))
"><pre>chain_resampled <span class="pl-k">=</span> <span class="pl-c1">sample</span>(chain, <span class="pl-c1">Weights</span>(<span class="pl-c1">vec</span>(chain[<span class="pl-s"><span class="pl-pds">"</span>weights<span class="pl-pds">"</span></span>])), <span class="pl-c1">length</span>(chain))</pre></div>
<p>These are chains from <a href="https://github.com/turinglang/mcmcchains.jl">MCMCChains</a>, which offer a lot of flexibility in exploring posteriors, combining data, and offering lots of convenient conversions (like to <code>DataFrame</code>s).</p>
<p>Finally, we can see the estimate of the Bayesian evidence</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Measurements
state.logz ± state.logzerr
"><pre><span class="pl-k">using</span> Measurements
state<span class="pl-k">.</span>logz ± state<span class="pl-k">.</span>logzerr</pre></div>
<h2><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Contributing</h2>
<p><strong>Primary Author:</strong> Miles Lucas (<a href="https://github.com/mileslucas">@mileslucas</a>)</p>
<p>Contributions are always welcome! Take a look at the <a href="https://github.com/turinglang/nestedsamplers.jl/issues">issues</a> for ideas of open problems! To discuss ideas or plan contributions, open a <a href="https://github.com/TuringLang/NestedSamplers.jl/discussions">discussion</a>.</p>
</article></div>