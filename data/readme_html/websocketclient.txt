<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dandelionwebsockets" class="anchor" aria-hidden="true" href="#dandelionwebsockets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DandelionWebSockets</h1>
<p dir="auto"><a href="https://travis-ci.org/dandeliondeathray/DandelionWebSockets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f330284c8fbc43b95ac2a744c08c2a1260b790eed983e1933902df98616b1172/68747470733a2f2f7472617669732d63692e6f72672f64616e64656c696f6e64656174687261792f44616e64656c696f6e576562536f636b6574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/dandeliondeathray/DandelionWebSockets.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/erikedin/dandelionwebsockets-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/2701d710310962d32dac3e93d0771e8a5b26c40c69ab62cb2ae4d352f0d09f69/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f37616a636b356276397778666a7861782f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/7ajck5bv9wxfjxax/branch/master?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">DandelionWebSockets is a client side WebSocket package.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Create a subtype of <code>WebSocketHandler</code>, with callbacks for WebSocket events. Create a <code>WSClient</code> and
connect to a WebSocket server. The type <code>WebSocketConnection</code> represents a connection, and is used
to send messages and close the connection. The connection object is supplied in the
<code>state_connection(::WebSocketHandler, ::WebSocketConnection)</code> callback, which is always the first
callback.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DandelionWebSockets
import DandelionWebSockets: on_text, on_binary
import DandelionWebSockets: state_connecting, state_open,
                            state_closing, state_closed

mutable struct MyHandler &lt;: WebSocketHandler
    # The connection is only available once `state_connecting` has been called.
    connection::Union{WebSocketConnection, Nothing}
end

# These are called when you get a text or binary frame, respectively.
on_text(handler::MyHandler, text::String) = ...
on_binary(handler::MyHandler, data::Vector{UInt8}) = ...

# These are called when the state of the WebSocket changes.
state_connecting(handler::MyHandler, connection::WebSocketConnection) = ...
state_open(handler::MyHandler)       = ...
state_closing(handler::MyHandler)    = ...
state_closed(handler::MyHandler)     = ..."><pre><span class="pl-k">using</span> DandelionWebSockets
<span class="pl-k">import</span> DandelionWebSockets<span class="pl-k">:</span> on_text, on_binary
<span class="pl-k">import</span> DandelionWebSockets<span class="pl-k">:</span> state_connecting, state_open,
                            state_closing, state_closed

<span class="pl-k">mutable struct</span> MyHandler <span class="pl-k">&lt;:</span> <span class="pl-c1">WebSocketHandler</span>
    <span class="pl-c"><span class="pl-c">#</span> The connection is only available once `state_connecting` has been called.</span>
    connection<span class="pl-k">::</span><span class="pl-c1">Union{WebSocketConnection, Nothing}</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> These are called when you get a text or binary frame, respectively.</span>
<span class="pl-en">on_text</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>, text<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-en">on_binary</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>, data<span class="pl-k">::</span><span class="pl-c1">Vector{UInt8}</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> These are called when the state of the WebSocket changes.</span>
<span class="pl-en">state_connecting</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>, connection<span class="pl-k">::</span><span class="pl-c1">WebSocketConnection</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-en">state_open</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>)       <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-en">state_closing</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>)    <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-en">state_closed</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>)     <span class="pl-k">=</span> <span class="pl-k">...</span></pre></div>
<p dir="auto">The following functions are available on <code>WebSocketConnection</code>, to send frames to the server.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="send_text(c::WebSocketConnection, s::String)
send_binary(c::WebSocketConnection, data::Vector{UInt8})

# Close the WebSocket.
stop(c::WebSocketConnection)

# Send a multi-frame text message
textsender = sendmultiframetext(connection)
sendframe(textsender, &quot;Hello&quot;)
sendframe(textsender, &quot;world&quot;)
sendframe(textsender, &quot;Goodbye.&quot;; isfinal=true)

# Send a multi-frame binary message
binarysender = sendmultiframebinary(connection)
sendframe(binarysender, b&quot;Hello&quot;)
sendframe(binarysender, b&quot;world&quot;)
sendframe(binarysender, b&quot;Goodbye.&quot;; isfinal=true)"><pre><span class="pl-c1">send_text</span>(c<span class="pl-k">::</span><span class="pl-c1">WebSocketConnection</span>, s<span class="pl-k">::</span><span class="pl-c1">String</span>)
<span class="pl-c1">send_binary</span>(c<span class="pl-k">::</span><span class="pl-c1">WebSocketConnection</span>, data<span class="pl-k">::</span><span class="pl-c1">Vector{UInt8}</span>)

<span class="pl-c"><span class="pl-c">#</span> Close the WebSocket.</span>
<span class="pl-c1">stop</span>(c<span class="pl-k">::</span><span class="pl-c1">WebSocketConnection</span>)

<span class="pl-c"><span class="pl-c">#</span> Send a multi-frame text message</span>
textsender <span class="pl-k">=</span> <span class="pl-c1">sendmultiframetext</span>(connection)
<span class="pl-c1">sendframe</span>(textsender, <span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">sendframe</span>(textsender, <span class="pl-s"><span class="pl-pds">"</span>world<span class="pl-pds">"</span></span>)
<span class="pl-c1">sendframe</span>(textsender, <span class="pl-s"><span class="pl-pds">"</span>Goodbye.<span class="pl-pds">"</span></span>; isfinal<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Send a multi-frame binary message</span>
binarysender <span class="pl-k">=</span> <span class="pl-c1">sendmultiframebinary</span>(connection)
<span class="pl-c1">sendframe</span>(binarysender, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">b</span>"</span>Hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">sendframe</span>(binarysender, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">b</span>"</span>world<span class="pl-pds">"</span></span>)
<span class="pl-c1">sendframe</span>(binarysender, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">b</span>"</span>Goodbye.<span class="pl-pds">"</span></span>; isfinal<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">To connect to a WebSocket server, call
<code>wsconnect(client::WSClient, uri::URI, handler::WebSocketHandler)</code>.</p>
<p dir="auto">For the full example code, please check out <code>examples/echo.jl</code>.</p>
<h2 dir="auto"><a id="user-content-interface-changes" class="anchor" aria-hidden="true" href="#interface-changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface changes</h2>
<p dir="auto">Alongside (but unrelated to) the update to Julia 0.7/1.0, the interface has changed some.
Instead of using the <code>WSClient</code> type to send messages, a type <code>WebSocketConnection</code> is used. This
makes more sense, as a client could (though not supported yet) create several connections. Because
a connection needs a handler, and a handler needs a connection to send messages, the actual
connection object is now supplied in the
<code>state_connecting(::WebSocketHandler, ::WebSocketConnection)</code> callback. This will always be the
first callback. Therefore, the connection can be stored in a <code>Union{WebSocketConnection, Nothing}</code>
field, and set only after <code>state_connecting(..)</code> has been called.</p>
<p dir="auto">So, in short, change</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct MyHandler &lt;: WebSocketHandler
    client::WSClient
end

state_connecting(::MyHandler) = ..."><pre><span class="pl-k">struct</span> MyHandler <span class="pl-k">&lt;:</span> <span class="pl-c1">WebSocketHandler</span>
    client<span class="pl-k">::</span><span class="pl-c1">WSClient</span>
<span class="pl-k">end</span>

<span class="pl-en">state_connecting</span>(<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>) <span class="pl-k">=</span> <span class="pl-k">...</span></pre></div>
<p dir="auto">to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct MyHandler &lt;: WebSocketHandler
    connection::Union{WebSocketConnection, Nothing}
end

state_connecting(handler::MyHandler, connection::WebSocketConnection) = handler.connection = connection"><pre><span class="pl-k">mutable struct</span> MyHandler <span class="pl-k">&lt;:</span> <span class="pl-c1">WebSocketHandler</span>
    connection<span class="pl-k">::</span><span class="pl-c1">Union{WebSocketConnection, Nothing}</span>
<span class="pl-k">end</span>

<span class="pl-en">state_connecting</span>(handler<span class="pl-k">::</span><span class="pl-c1">MyHandler</span>, connection<span class="pl-k">::</span><span class="pl-c1">WebSocketConnection</span>) <span class="pl-k">=</span> handler<span class="pl-k">.</span>connection <span class="pl-k">=</span> connection</pre></div>
<p dir="auto">The sending methods all take a <code>WebSocketConnection</code> argument instead of a <code>WSClient</code> now.</p>
<h2 dir="auto"><a id="user-content-note-on-io-and-thread-safety" class="anchor" aria-hidden="true" href="#note-on-io-and-thread-safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note on I/O and thread safety</h2>
<p dir="auto">Note that print and I/O functions are not thread safe in Julia. Using them in the message and state
callbacks (as is currently done in the examples) may lead to unexpected behaviour, or crashes. See
<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="165076292" data-permission-text="Title is private" data-url="https://github.com/JuliaLang/julia/issues/17388" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/17388/hovercard" href="https://github.com/JuliaLang/julia/issues/17388">JuliaLang/julia#17388</a> for more details.</p>
<p dir="auto">Thank you to @alessandrousseglioviretta for bringing up this issue.</p>
<h2 dir="auto"><a id="user-content-note-on-ssl" class="anchor" aria-hidden="true" href="#note-on-ssl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note on SSL</h2>
<p dir="auto">At the moment, SSL is not functioning, due to moving from Requests.jl to HTTP.jl. This is presumably
just a matter of fixing a minor issue, as HTTP.jl does have SSL support.</p>
<h2 dir="auto"><a id="user-content-releases-and-julia" class="anchor" aria-hidden="true" href="#releases-and-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Releases and Julia</h2>
<p dir="auto">This package is now registered with Julias package manager. Please only use version 0.1.1 and
higher. Version 0.1.0 contains three serious bugs, which were fixed for 0.1.1.</p>
<h2 dir="auto"><a id="user-content-julia-0710" class="anchor" aria-hidden="true" href="#julia-0710"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Julia 0.7/1.0</h2>
<p dir="auto">Migration to Julia 1.0 is nearly complete. A new release will be available soon.</p>
<p dir="auto">Before the migration is complete, there is a PR to an upstream package that must be accepted, or I
must configure the dependencies to use a patched version instead of the latest release.</p>
<h1 dir="auto"><a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributors</h1>
<p dir="auto">These brave people have contributed to this package:</p>
<ul dir="auto">
<li>@hlaaftana</li>
<li>@TotalVerb</li>
<li>@iblis17</li>
</ul>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">DandelionWebSockets is licensed under the MIT license.</p>
</article></div>