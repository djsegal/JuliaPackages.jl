<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-jin" class="anchor" aria-hidden="true" href="#jin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jin</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/malmaud/Jin.jl/actions/workflows/ci.yml/badge.svg"><img src="https://github.com/malmaud/Jin.jl/actions/workflows/ci.yml/badge.svg" alt="CI passing" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia version of the Python <a href="https://github.com/google/gin-config">Gin configuration library</a>.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">This package offers a way to configure your Julia code by specifying the default value of your function's keyword arguments in a configuration file.</p>
<p dir="auto">For example, if you are training a neural network, you might have a function like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function train(data; learning_rate=.01, epochs=10)
    @show learning_rate
   ...
end

function load_data(; dataset=&quot;mnist&quot;)
    @show dataset
    ...
end

results = train(load_my_data())"><pre><span class="pl-k">function</span> <span class="pl-en">train</span>(data; learning_rate<span class="pl-k">=</span>.<span class="pl-c1">01</span>, epochs<span class="pl-k">=</span><span class="pl-c1">10</span>)
    <span class="pl-c1">@show</span> learning_rate
   <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">load_data</span>(; dataset<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mnist<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@show</span> dataset
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

results <span class="pl-k">=</span> <span class="pl-c1">train</span>(<span class="pl-c1">load_my_data</span>())</pre></div>
<p dir="auto">You'll see output like</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dataset = &quot;mnist&quot;
learning_rate = .01"><pre class="notranslate"><code>dataset = "mnist"
learning_rate = .01
</code></pre></div>
<p dir="auto">when you run this script.</p>
<p dir="auto">With Jin, we'll able to set the learning rate in a configuration file with no additional plumbing. Change the above example to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Jin

@Jin.configurable function train(data; learning_rate=.01)
    @show learning_rate
   ...
end

@Jin.configurable function load_data(; dataset=&quot;mnist&quot;)
    @show dataset
    ...
end

Jin.load_config(&quot;my_config.jin&quot;)

results = train(load_my_data())"><pre><span class="pl-k">using</span> Jin

<span class="pl-c1">@Jin</span><span class="pl-k">.</span>configurable <span class="pl-k">function</span> <span class="pl-en">train</span>(data; learning_rate<span class="pl-k">=</span>.<span class="pl-c1">01</span>)
    <span class="pl-c1">@show</span> learning_rate
   <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-c1">@Jin</span><span class="pl-k">.</span>configurable <span class="pl-k">function</span> <span class="pl-en">load_data</span>(; dataset<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>mnist<span class="pl-pds">"</span></span>)
    <span class="pl-c1">@show</span> dataset
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

Jin<span class="pl-k">.</span><span class="pl-c1">load_config</span>(<span class="pl-s"><span class="pl-pds">"</span>my_config.jin<span class="pl-pds">"</span></span>)

results <span class="pl-k">=</span> <span class="pl-c1">train</span>(<span class="pl-c1">load_my_data</span>())</pre></div>
<p dir="auto">Create a file <code>my_config.jin</code> with the following contents:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# Configuration to train on imagenet with a low learning rate
load_data.dataset = &quot;imagenet&quot;
train.learning_rate = .005"><pre class="notranslate"><code># Configuration to train on imagenet with a low learning rate
load_data.dataset = "imagenet"
train.learning_rate = .005
</code></pre></div>
<p dir="auto">Now when you run your Julia program, you'll see</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="dataset = &quot;imagenet&quot;
learning_rate = .005"><pre class="notranslate"><code>dataset = "imagenet"
learning_rate = .005
</code></pre></div>
<p dir="auto">, indicating that the configuration file has changed the value of the learning rate and dataset.</p>
<h1 dir="auto"><a id="user-content-why-jin" class="anchor" aria-hidden="true" href="#why-jin"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why Jin?</h1>
<p dir="auto">With just a single call to <code>load_config</code>, your configuration is loaded and applied to all configurable objects. No need to manually parse a configuration file and plumb keyword arguments all over your code.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">Values in the config don't have to be literals - they can be references to other Julia objects (including other functions) defined in your Julia program.</p>
<p dir="auto">For example, you can use the config to change the activation function of a neural network:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Jin
using Flux

@Jin.register relu(x) = max(0, x)
@Jin.register sigmoid(x) = 1/(1+exp(-x))
@Jin.register identity(x) = x

function linear_layer(x, w, b; activation=identity)
  return activation(x*w + b)
end

Jin.load_config(&quot;my_config.jin&quot;)
...
y = linear_layer(x, w, b)"><pre><span class="pl-k">using</span> Jin
<span class="pl-k">using</span> Flux

<span class="pl-c1">@Jin</span><span class="pl-k">.</span>register <span class="pl-en">relu</span>(x) <span class="pl-k">=</span> <span class="pl-c1">max</span>(<span class="pl-c1">0</span>, x)
<span class="pl-c1">@Jin</span><span class="pl-k">.</span>register <span class="pl-en">sigmoid</span>(x) <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span>x))
<span class="pl-c1">@Jin</span><span class="pl-k">.</span>register <span class="pl-en">identity</span>(x) <span class="pl-k">=</span> x

<span class="pl-k">function</span> <span class="pl-en">linear_layer</span>(x, w, b; activation<span class="pl-k">=</span>identity)
  <span class="pl-k">return</span> <span class="pl-c1">activation</span>(x<span class="pl-k">*</span>w <span class="pl-k">+</span> b)
<span class="pl-k">end</span>

Jin<span class="pl-k">.</span><span class="pl-c1">load_config</span>(<span class="pl-s"><span class="pl-pds">"</span>my_config.jin<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span>
y <span class="pl-k">=</span> <span class="pl-c1">linear_layer</span>(x, w, b)</pre></div>
<p dir="auto">And in <code>my_config.jin</code>,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="linear_layer.activation = @sigmoid"><pre class="notranslate"><code>linear_layer.activation = @sigmoid
</code></pre></div>
<p dir="auto">This config has changed the activation function of the linear layer to be the sigmoid function with no change to your code. There is no clumsy need to define an enum for all possible activation functions, load that enum from a config or command-line argument, and have a bunch of <code>if</code> statements to translate that enum into a function call. Less boilerplate!</p>
<p dir="auto">Note the <code>@</code> in front of the function name in the config - this tells Jin that it should look for a registered function named <code>sigmoid</code>.</p>
<h1 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h1>
<p dir="auto">In general, the syntax "a.b=c" in a configuration file changes the default value of the keyword argument <code>b</code> in the function <code>a</code> to <code>c</code>. A configuration file can have multiple lines. Blank lines and lines starting with a comment <code>#</code> are ignored. Only functions decorated with <code>Jin.configurable</code> can be configured.</p>
<p dir="auto">As expected in Julia, you can always explicitly set the value of a keyword argument at a call site to override the value in the configuration. For example, with the definition</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@Jin.configurable f(;x=0) = x
load_config(&quot;my_config.jin&quot;)"><pre><span class="pl-c1">@Jin</span><span class="pl-k">.</span>configurable <span class="pl-en">f</span>(;x<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-k">=</span> x
<span class="pl-c1">load_config</span>(<span class="pl-s"><span class="pl-pds">"</span>my_config.jin<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">calling <code>f(x=5)</code> will return 5 no matter what <code>f.x</code> is set to in the configuration file.</p>
<p dir="auto"><strong>TODO</strong>: More robust documentation.</p>
<h1 dir="auto"><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future work</h1>
<p dir="auto">Currently this package only supports a subset of the functionality of Gin. In the future, we'll add support for</p>
<ul dir="auto">
<li>scopes</li>
<li>more robust support for references</li>
<li>logging</li>
</ul>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">In a Julia REPL,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Jin&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Jin<span class="pl-pds">"</span></span>)</pre></div>
</article></div>