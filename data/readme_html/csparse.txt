<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-csparsejl" class="anchor" aria-hidden="true" href="#csparsejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSparse.jl</h1>
<p>A <a href="http://julialang.org" rel="nofollow">Julia</a> implementation of some of the functions in the
<a href="http://www.cise.ufl.edu/research/sparse/CSparse" rel="nofollow">CSparse</a> and
<a href="http://www.cise.ufl.edu/research/sparse/CXSparse/" rel="nofollow">CXSparse</a>
libraries developed by
<a href="http://engineering.tamu.edu/cse/people/davis-tim" rel="nofollow">Tim Davis</a></p>
<p>The Julia functions stay very close to the C originals.  Most of the
differences are in changing 0-based indexing to 1-based indexing and
in using the Julia <code>CompositeKind</code> rather than a pointer to a C
<code>struct</code>.  This also allows for checking consistency of
dimensions.</p>
<p>For example, the C function <code>cs_lsolve</code></p>
<div class="highlight highlight-source-c"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>cs.h<span class="pl-pds">"</span></span>
<span class="pl-c"><span class="pl-c">/*</span> solve Lx=b where x and b are dense.  x=b on input, solution on output. <span class="pl-c">*/</span></span>
csi <span class="pl-en">cs_lsolve</span> (<span class="pl-k">const</span> cs *L, <span class="pl-k">double</span> *x)
{
    csi p, j, n, *Lp, *Li ;
    <span class="pl-k">double</span> *Lx ;
    <span class="pl-k">if</span> (!<span class="pl-c1">CS_CSC</span> (L) || !x) <span class="pl-k">return</span> (<span class="pl-c1">0</span>) ;                     <span class="pl-c"><span class="pl-c">/*</span> check inputs <span class="pl-c">*/</span></span>
    n = L-&gt;<span class="pl-smi">n</span> ; Lp = L-&gt;<span class="pl-smi">p</span> ; Li = L-&gt;<span class="pl-smi">i</span> ; Lx = L-&gt;<span class="pl-smi">x</span> ;
    <span class="pl-k">for</span> (j = <span class="pl-c1">0</span> ; j &lt; n ; j++)
    {
        x [j] /= Lx [Lp [j]] ;
        <span class="pl-k">for</span> (p = Lp [j]+<span class="pl-c1">1</span> ; p &lt; Lp [j+<span class="pl-c1">1</span>] ; p++)
        {
            x [Li [p]] -= Lx [p] * x [j] ;
        }
    }
    <span class="pl-k">return</span> (<span class="pl-c1">1</span>) ;
}</pre></div>
<p>becomes</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># solve Lx=b where x and b are dense.  x=b on input, solution on output.</span>
<span class="pl-k">function</span> <span class="pl-en">js_lsolve!</span><span class="pl-c1">{T}</span>(L<span class="pl-k">::</span><span class="pl-c1">SparseMatrixCSC{T}</span>, x<span class="pl-k">::</span><span class="pl-c1">StridedVector{T}</span>)
    m,n <span class="pl-k">=</span> <span class="pl-c1">size</span>(L)
    <span class="pl-k">if</span> m <span class="pl-k">!=</span> n <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Matrix L is <span class="pl-v">$m</span> by <span class="pl-v">$n</span> and should be square<span class="pl-pds">"</span></span>) <span class="pl-k">end</span>
    <span class="pl-k">if</span> <span class="pl-c1">length</span>(x) <span class="pl-k">!=</span> n <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Dimension mismatch<span class="pl-pds">"</span></span>) <span class="pl-k">end</span>
    Lp <span class="pl-k">=</span> L<span class="pl-k">.</span>colptr; Li <span class="pl-k">=</span> L<span class="pl-k">.</span>rowval; Lx <span class="pl-k">=</span> L<span class="pl-k">.</span>nzval
    <span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
        x[j] <span class="pl-k">/=</span> Lx[Lp[j]]
        <span class="pl-k">for</span> p <span class="pl-k">in</span> (Lp[j] <span class="pl-k">+</span> <span class="pl-c1">1</span>)<span class="pl-k">:</span>(Lp[j<span class="pl-k">+</span><span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)
            x[Li[p]] <span class="pl-k">-=</span> Lx[p] <span class="pl-k">*</span> x[j]
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    x
<span class="pl-k">end</span>

<span class="pl-en">js_lsolve</span><span class="pl-c1">{T}</span>(L<span class="pl-k">::</span><span class="pl-c1">SparseMatrixCSC{T}</span>, x<span class="pl-k">::</span><span class="pl-c1">StridedVector{T}</span>) <span class="pl-k">=</span> <span class="pl-c1">js_lsolve!</span>(L, <span class="pl-c1">copy</span>(x))</pre></div>
</article></div>