<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><strong>IMPORTANT</strong>: ClobberingReload.jl has been superseded by <a href="https://github.com/timholy/Revise.jl">Revise.jl</a>. Please consider using this package from 0.6 onward. ClobberingReload.jl is no longer actively developed (though pull requests are welcome).</p>
<h1><a id="user-content-clobberingreloadjl" class="anchor" aria-hidden="true" href="#clobberingreloadjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ClobberingReload.jl</h1>
<p><a href="https://travis-ci.org/cstjean/ClobberingReload.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c78347aa427f77167219744db22f0b60dd77220e9fe97c627d496a2bfc4193e8/68747470733a2f2f7472617669732d63692e6f72672f6373746a65616e2f436c6f62626572696e6752656c6f61642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cstjean/ClobberingReload.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/cstjean/ClobberingReload.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/93d68bab9c1d62a34310be4008f84819ffa294b15b7e2154695d22301517e175/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6373746a65616e2f436c6f62626572696e6752656c6f61642e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/cstjean/ClobberingReload.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/cstjean/ClobberingReload.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/02f05ee131c12d7cde0f5e7a824ab408ee41a29cee0690e2cb18ae3061c8d1eb/687474703a2f2f636f6465636f762e696f2f6769746875622f6373746a65616e2f436c6f62626572696e6752656c6f61642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/cstjean/ClobberingReload.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>ClobberingReload.jl</code> helps with interactive development.</p>
<ul>
<li><code>creload(::Module)</code> is a drop-in replacement for <code>reload(modulename)</code>, that
does not require rebuilding the state after <code>reload</code>. The new code takes effect
immediately, and works on existing objects.</li>
<li>Modules loaded with <code>@ausing</code> and <code>@aimport</code> are automatically reloaded when
they are modified. This works as a successor to <strong>@malmaud</strong>'s
<a href="https://github.com/malmaud/Autoreload.jl">Autoreload.jl</a> package.</li>
<li><code>scrub_stderr</code>, <code>scrub_redefinition_warnings</code> and <code>no_warnings</code> run code
with some warnings silenced.</li>
</ul>
<p>See below for usage information, and the docstrings for details (eg. <code>?creload</code>)</p>
<p>ClobberingReload borrows some code and interface from <a href="https://github.com/malmaud/Autoreload.jl">Autoreload.jl</a> by Jon Malmaud, and from <a href="https://github.com/timholy/Revise.jl">Revise.jl</a> by Tim Holy (which offers similar functionality under a different interface).</p>
<h2><a id="user-content-using-creload" class="anchor" aria-hidden="true" href="#using-creload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using <code>creload</code></h2>
<p>Interactively (whether in the REPL, Atom, or IJulia):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ClobberingReload
using Houses               # `using` modules is fine (unlike with `reload`)

h = House(nwindows=10)
println(&quot;Price of house:$(price(h))&quot;)
&gt; Price of house: 100

.... modify Houses.jl, change the `price` function ....

creload(Houses)

println(&quot;Price of house:$(price(h))&quot;)    # no need to redefine h
&gt; Price of house: 130
"><pre><span class="pl-k">using</span> ClobberingReload
<span class="pl-k">using</span> Houses               <span class="pl-c"><span class="pl-c">#</span> `using` modules is fine (unlike with `reload`)</span>

h <span class="pl-k">=</span> <span class="pl-c1">House</span>(nwindows<span class="pl-k">=</span><span class="pl-c1">10</span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Price of house:<span class="pl-v">$(<span class="pl-c1">price</span>(h))</span><span class="pl-pds">"</span></span>)
<span class="pl-k">&gt;</span> Price of house<span class="pl-k">:</span> <span class="pl-c1">100</span>

<span class="pl-k">....</span> modify Houses<span class="pl-k">.</span>jl, change the <span class="pl-s"><span class="pl-pds">`</span>price<span class="pl-pds">`</span></span> <span class="pl-k">function</span> <span class="pl-k">....</span>

<span class="pl-c1">creload</span>(Houses)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Price of house:<span class="pl-v">$(<span class="pl-c1">price</span>(h))</span><span class="pl-pds">"</span></span>)    <span class="pl-c"><span class="pl-c">#</span> no need to redefine h</span>
<span class="pl-k">&gt;</span> Price of house<span class="pl-k">:</span> <span class="pl-c1">130</span></pre></div>
<p>NOTE: Parametric types cannot be defined inside a <code>creload</code>ed module on Julia 0.5.
This is fixed on Julia 0.6. Parametric type aliases are <a href="https://github.com/JuliaLang/julia/issues/16424#issuecomment-290520499">still a problem</a>, <strong>but</strong> there is an experimental
alternative that should solve this: <code>creload_strip(module)</code>. Please
<a href="https://github.com/cstjean/ClobberingReload.jl/issues">report</a> any issues.</p>
<h2><a id="user-content-autoreload" class="anchor" aria-hidden="true" href="#autoreload"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Autoreload</h2>
<p>In <a href="https://github.com/JuliaLang/IJulia.jl">IJulia</a> (Jupyter notebooks), <code>creload</code> will be called
automatically for modules that were imported using <code>@ausing</code> or <code>@aimport</code>,
whenever the module's source code has been changed.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ClobberingReload

using Images    # regular using
@ausing Foo     # autoreloaded using
@aimport Bar    # autoreloaded import
@ausing Car &lt;: (Foo, Bar)  # autoreloaded with dependency: whenever Car, Foo, or Bar
                           # are modified, Car will be reloaded

println(Bar.life_the_universe())
&gt; 5

# ... modify Bar.jl, or one of its `include`d files

println(Bar.life_the_universe())
&gt;   INFO: Reloading `Bar`
&gt; 42
"><pre><span class="pl-k">using</span> ClobberingReload

<span class="pl-k">using</span> Images    <span class="pl-c"><span class="pl-c">#</span> regular using</span>
<span class="pl-c1">@ausing</span> Foo     <span class="pl-c"><span class="pl-c">#</span> autoreloaded using</span>
<span class="pl-c1">@aimport</span> Bar    <span class="pl-c"><span class="pl-c">#</span> autoreloaded import</span>
<span class="pl-c1">@ausing</span> Car <span class="pl-k">&lt;:</span> <span class="pl-c1">(Foo, Bar)</span>  <span class="pl-c"><span class="pl-c">#</span> autoreloaded with dependency: whenever Car, Foo, or Bar</span>
                           <span class="pl-c"><span class="pl-c">#</span> are modified, Car will be reloaded</span>

<span class="pl-c1">println</span>(Bar<span class="pl-k">.</span><span class="pl-c1">life_the_universe</span>())
<span class="pl-k">&gt;</span> <span class="pl-c1">5</span>

<span class="pl-c"><span class="pl-c">#</span> ... modify Bar.jl, or one of its `include`d files</span>

<span class="pl-c1">println</span>(Bar<span class="pl-k">.</span><span class="pl-c1">life_the_universe</span>())
<span class="pl-k">&gt;</span>   INFO<span class="pl-k">:</span> Reloading <span class="pl-s"><span class="pl-pds">`</span>Bar<span class="pl-pds">`</span></span>
<span class="pl-k">&gt;</span> <span class="pl-c1">42</span></pre></div>
<p>The Julia REPL <a href="https://github.com/JuliaLang/julia/issues/6445">does not have execution hooks yet</a>, but you can still trigger the autoreload feature for <code>@aimport</code>ed modules by calling <code>areload()</code> manually. Or you can use <a href="https://github.com/timholy/Revise.jl">Revise.jl</a>, which works around this issue by scheduling a background thread.</p>
<h2><a id="user-content-silencing-warnings" class="anchor" aria-hidden="true" href="#silencing-warnings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Silencing warnings</h2>
<p><code>scrub_stderr</code>, <code>scrub_redefinition_warnings</code> and <code>no_warnings</code> silence some of
Julia's warnings. Typical usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="scrub_redefinition_warnings() do
    include(filename)
end
"><pre><span class="pl-c1">scrub_redefinition_warnings</span>() <span class="pl-k">do</span>
    <span class="pl-c1">include</span>(filename)
<span class="pl-k">end</span></pre></div>
<ul>
<li><code>sinclude("foo.jl")</code> uses the above code to run <code>include("foo.jl")</code> without
the usual redefinition warnings.</li>
<li><code>scrub_stderr</code> can scrub arbitrary warnings using regexes. See its docstring
for details.</li>
</ul>
<h2><a id="user-content-how-creload-works" class="anchor" aria-hidden="true" href="#how-creload-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How <code>creload</code> works</h2>
<p>Julia's <code>reload(mod)</code> loads <code>mod</code> from scratch, creating a new module object,
then replaces the old module object with the new one. As a consequence:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import A

st = A.SomeType(10)
reload(&quot;A&quot;)
st2 = A.SomeType(10)
typeof(st) == typeof(st2)   # false
"><pre><span class="pl-k">import</span> A

st <span class="pl-k">=</span> A<span class="pl-k">.</span><span class="pl-c1">SomeType</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">reload</span>(<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>)
st2 <span class="pl-k">=</span> A<span class="pl-k">.</span><span class="pl-c1">SomeType</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">typeof</span>(st) <span class="pl-k">==</span> <span class="pl-c1">typeof</span>(st2)   <span class="pl-c"><span class="pl-c">#</span> false</span></pre></div>
<p><code>st</code> and <code>st2</code> are actually of a different type, and cannot be equal. Functions
defined on the first <code>::A.SomeType</code> will not work on the second, and vice
versa. This is inconvenient when working interactively.</p>
<p><code>ClobberingReload.creload</code> solves this problem by never creating a second
module.  It just evaluates the modified code inside the existing module object,
replacing the previous definitions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ClobberingReload
import A

st = A.SomeType(10)
creload(A)
st2 = A.SomeType(10)
typeof(st) == typeof(st2)   # true
"><pre><span class="pl-k">using</span> ClobberingReload
<span class="pl-k">import</span> A

st <span class="pl-k">=</span> A<span class="pl-k">.</span><span class="pl-c1">SomeType</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">creload</span>(A)
st2 <span class="pl-k">=</span> A<span class="pl-k">.</span><span class="pl-c1">SomeType</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">typeof</span>(st) <span class="pl-k">==</span> <span class="pl-c1">typeof</span>(st2)   <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p>Furthermore, <code>reload</code> cannot reload modules imported via <code>using</code>, but <code>creload</code>
can.</p>
</article></div>