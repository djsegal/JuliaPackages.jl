<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-binancejl-a-pure-julia-implementation" class="anchor" aria-hidden="true" href="#binancejl-a-pure-julia-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Binance.jl a pure Julia implementation</h1>
<p dir="auto"><a href="https://www.binance.com/en?ref=35360148" rel="nofollow">Binance</a> (referral link) API with <a href="https://julialang.org/" rel="nofollow">Julialang</a></p>
<p dir="auto">Work In Progress!</p>
<p dir="auto">usage :</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg;
Pkg.add(PackageSpec(url=&quot;https://github.com/DennisRutjes/Binance.jl&quot;,rev=&quot;master&quot;))

packages=[&quot;Dates&quot;,&quot;DataFrames&quot;,&quot;Plots&quot;,&quot;GR&quot;]

for package in packages
    if get(Pkg.installed(),package,-1) == -1
        println(&quot; getting package : &quot;, package)
        Pkg.add(package)
    end
end

using Binance,Dates, DataFrames, Plots

hr24 = Binance.get24HR()
hr24ETHBTC = Binance.get24HR(&quot;ETHBTC&quot;)

market = Binance.getMarket()
market_BNBBTC = Binance.getMarket(&quot;BNBBTC&quot;)

function getBinanceKlineDataframe(symbol; startDateTime = nothing, endDateTime = nothing, interval=&quot;1m&quot;)
    klines = Binance.getKlines(symbol; startDateTime = startDateTime, endDateTime = endDateTime, interval = interval)
    result = hcat(map(z -&gt; map(x -&gt; typeof(x) == String ? parse(Float64, x) : x, z), klines)...)';

    if size(result,2) == 0
        return nothing
    end

    symbolColumnData = map(x -&gt; symbol, collect(1:size(result, 1)));
    df = DataFrame([symbolColumnData, Dates.unix2datetime.(result[:,1]/1000) ,result[:,2],result[:,3],result[:,4],result[:,5],result[:,6],result[:,8],Dates.unix2datetime.(result[:,7] / 1000),result[:,9],result[:,10],result[:,11]], [:symbol,:startDate,:open,:high,:low,:close,:volume,:quoteAVolume, :endDate, :trades, :tbBaseAVolume,:tbQuoteAVolume]);
end

dfKlines = getBinanceKlineDataframe(&quot;ETHBTC&quot;);

plot(dfKlines[:close];label=&quot;ETHBTC interval = '1m'&quot;)
"><pre><span class="pl-k">using</span> Pkg;
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/DennisRutjes/Binance.jl<span class="pl-pds">"</span></span>,rev<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>))

packages<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>Dates<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Plots<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>GR<span class="pl-pds">"</span></span>]

<span class="pl-k">for</span> package <span class="pl-k">in</span> packages
    <span class="pl-k">if</span> <span class="pl-c1">get</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">installed</span>(),package,<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span> getting package : <span class="pl-pds">"</span></span>, package)
        Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(package)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">using</span> Binance,Dates, DataFrames, Plots

hr24 <span class="pl-k">=</span> Binance<span class="pl-k">.</span><span class="pl-c1">get24HR</span>()
hr24ETHBTC <span class="pl-k">=</span> Binance<span class="pl-k">.</span><span class="pl-c1">get24HR</span>(<span class="pl-s"><span class="pl-pds">"</span>ETHBTC<span class="pl-pds">"</span></span>)

market <span class="pl-k">=</span> Binance<span class="pl-k">.</span><span class="pl-c1">getMarket</span>()
market_BNBBTC <span class="pl-k">=</span> Binance<span class="pl-k">.</span><span class="pl-c1">getMarket</span>(<span class="pl-s"><span class="pl-pds">"</span>BNBBTC<span class="pl-pds">"</span></span>)

<span class="pl-k">function</span> <span class="pl-en">getBinanceKlineDataframe</span>(symbol; startDateTime <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, endDateTime <span class="pl-k">=</span> <span class="pl-c1">nothing</span>, interval<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>1m<span class="pl-pds">"</span></span>)
    klines <span class="pl-k">=</span> Binance<span class="pl-k">.</span><span class="pl-c1">getKlines</span>(symbol; startDateTime <span class="pl-k">=</span> startDateTime, endDateTime <span class="pl-k">=</span> endDateTime, interval <span class="pl-k">=</span> interval)
    result <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(<span class="pl-c1">map</span>(z <span class="pl-k">-&gt;</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">==</span> String <span class="pl-k">?</span> <span class="pl-c1">parse</span>(Float64, x) <span class="pl-k">:</span> x, z), klines)<span class="pl-k">...</span>)<span class="pl-k">'</span>;

    <span class="pl-k">if</span> <span class="pl-c1">size</span>(result,<span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
    <span class="pl-k">end</span>

    symbolColumnData <span class="pl-k">=</span> <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> symbol, <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(result, <span class="pl-c1">1</span>)));
    df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>([symbolColumnData, Dates<span class="pl-k">.</span><span class="pl-c1">unix2datetime</span>.(result[:,<span class="pl-c1">1</span>]<span class="pl-k">/</span><span class="pl-c1">1000</span>) ,result[:,<span class="pl-c1">2</span>],result[:,<span class="pl-c1">3</span>],result[:,<span class="pl-c1">4</span>],result[:,<span class="pl-c1">5</span>],result[:,<span class="pl-c1">6</span>],result[:,<span class="pl-c1">8</span>],Dates<span class="pl-k">.</span><span class="pl-c1">unix2datetime</span>.(result[:,<span class="pl-c1">7</span>] <span class="pl-k">/</span> <span class="pl-c1">1000</span>),result[:,<span class="pl-c1">9</span>],result[:,<span class="pl-c1">10</span>],result[:,<span class="pl-c1">11</span>]], [<span class="pl-c1">:symbol</span>,<span class="pl-c1">:startDate</span>,<span class="pl-c1">:open</span>,<span class="pl-c1">:high</span>,<span class="pl-c1">:low</span>,<span class="pl-c1">:close</span>,<span class="pl-c1">:volume</span>,<span class="pl-c1">:quoteAVolume</span>, <span class="pl-c1">:endDate</span>, <span class="pl-c1">:trades</span>, <span class="pl-c1">:tbBaseAVolume</span>,<span class="pl-c1">:tbQuoteAVolume</span>]);
<span class="pl-k">end</span>

dfKlines <span class="pl-k">=</span> <span class="pl-c1">getBinanceKlineDataframe</span>(<span class="pl-s"><span class="pl-pds">"</span>ETHBTC<span class="pl-pds">"</span></span>);

<span class="pl-c1">plot</span>(dfKlines[<span class="pl-c1">:close</span>];label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>ETHBTC interval = '1m'<span class="pl-pds">"</span></span>)
</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/DennisRutjes/Binance.jl/blob/master/images/plot.png"><img src="https://github.com/DennisRutjes/Binance.jl/raw/master/images/plot.png" alt="plot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-websockets-streaming-klines" class="anchor" aria-hidden="true" href="#websockets-streaming-klines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Websockets streaming klines</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tickersChannel = Channel(5)
symbolsBTC=[&quot;BNBBTC&quot;,&quot;SNTBTC&quot;,&quot;DNTBTC&quot;,&quot;TRXBTC&quot;,&quot;FUNBTC&quot;,&quot;XVGBTC&quot;]

@async Binance.wsKlineStreams(tickersChannel, symbolsBTC)

counter = 0
@sync while counter &lt; 10
    global counter
    kline = take!(tickersChannel)
    if kline[&quot;E&quot;] &gt; kline[&quot;k&quot;][&quot;T&quot;]
        counter = counter + 1
        println(string(&quot;counter : &quot;, counter,&quot; kline =&gt; &quot;, kline[&quot;k&quot;]))
    end
end"><pre>tickersChannel <span class="pl-k">=</span> <span class="pl-c1">Channel</span>(<span class="pl-c1">5</span>)
symbolsBTC<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>BNBBTC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>SNTBTC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>DNTBTC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>TRXBTC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>FUNBTC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>XVGBTC<span class="pl-pds">"</span></span>]

<span class="pl-c1">@async</span> Binance<span class="pl-k">.</span><span class="pl-c1">wsKlineStreams</span>(tickersChannel, symbolsBTC)

counter <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-c1">@sync</span> <span class="pl-k">while</span> counter <span class="pl-k">&lt;</span> <span class="pl-c1">10</span>
    <span class="pl-k">global</span> counter
    kline <span class="pl-k">=</span> <span class="pl-c1">take!</span>(tickersChannel)
    <span class="pl-k">if</span> kline[<span class="pl-s"><span class="pl-pds">"</span>E<span class="pl-pds">"</span></span>] <span class="pl-k">&gt;</span> kline[<span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>T<span class="pl-pds">"</span></span>]
        counter <span class="pl-k">=</span> counter <span class="pl-k">+</span> <span class="pl-c1">1</span>
        <span class="pl-c1">println</span>(<span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">"</span>counter : <span class="pl-pds">"</span></span>, counter,<span class="pl-s"><span class="pl-pds">"</span> kline =&gt; <span class="pl-pds">"</span></span>, kline[<span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>]))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</article></div>