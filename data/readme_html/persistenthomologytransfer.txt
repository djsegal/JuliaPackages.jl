<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-this-package-has-been-deprecated-in-favour-of-discretepersistenthomologytransformjl" class="anchor" aria-hidden="true" href="#this-package-has-been-deprecated-in-favour-of-discretepersistenthomologytransformjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This package has been deprecated in favour of <a href="https://github.com/yossibokor/DiscretePersistentHomologyTransform.jl">DiscretePersistentHomologyTransform.jl</a></h1>
<h1><a id="user-content-persistenthomologytransferjl" class="anchor" aria-hidden="true" href="#persistenthomologytransferjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PersistentHomologyTransfer.jl</h1>
<p>Persistent Homology Transform is produced and maintained by <br>
Yossi Bokor and Katharine Turner <br>
<a href="mailto:yossi.bokor@anu.edu.au">yossi.bokor@anu.edu.au</a> and <a href="mailto:katharine.turner@anu.edu.au">katharine.turner@anu.edu.au</a></p>
<p>This package provides an implementation of the Persistent Homology Transform, as defined in <a href="https://arxiv.org/abs/1310.1030" rel="nofollow">Persistent Homology Transform for Modeling Shapes and Surfaces</a>. It also does Rank Functions of Persistence Diagrams, and implements <a href="https://www.sciencedirect.com/science/article/pii/S0167278916000476" rel="nofollow">Principal Component Analysis of Rank functions</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Currently, the best way to install PersistentHomologyTransfer is to run the following in <code>Julia</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PersistentHomologyTransfer<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-functionality" class="anchor" aria-hidden="true" href="#functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functionality</h2>
<ul>
<li>PersistentHomologyTransfer computes the Persistent Homology Transform of simple, closed curves in $\mathbb{R}^2$.</li>
<li>Rank functions of persistence diagrams.</li>
<li>Principal Component Analysis of Rank Functions.</li>
</ul>
<h3><a id="user-content-persistent-homology-transform" class="anchor" aria-hidden="true" href="#persistent-homology-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Persistent Homology Transform</h3>
<p>Given an $m \times 2$ matrix of ordered points sampled from a simple, closed curve $C \subset \mathbb{R}^2$ (in either a clockwise or anti-clockwise direction), calculate the Persistent Homology Transform for a set of directions. You can either specify the directions explicity as a $n \times 2$ array (<code>directions::Array{Float64}(n,2)</code>), or specify an integer (<code>directions::Int64</code>) and then the directions used will be generated by</p>
<div class="highlight highlight-source-julia"><pre>angles <span class="pl-k">=</span> [n<span class="pl-k">*</span>pi<span class="pl-k">/</span>(directions<span class="pl-k">/</span><span class="pl-c1">2</span>) <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>directions]
directions <span class="pl-k">=</span> [[<span class="pl-c1">cos</span>(x), <span class="pl-c1">sin</span>(x)] <span class="pl-k">for</span> x <span class="pl-k">in</span> angles]</pre></div>
<p>To perform the Persistent Homology Transfer for the directions, run</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">PHT</span>(points, directions)</pre></div>
<p>This outputs an array of <a href="https://github.com/Eetion/Eirene.jl">Eirene</a> Persistence Diagrams, one for each direction.</p>
<h3><a id="user-content-rank-functions" class="anchor" aria-hidden="true" href="#rank-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rank Functions</h3>
<p>Given an <a href="https://github.com/Eetion/Eirene.jl">Eirene</a> Persistence Diagram $D$, PersistentHomologyTransfer can calculate the Rank Function $r_D$ either exactly, or given a grid of points, calculate a discretised version. Recall that $D$ is an $n \times 2$ array of points, and hence the function <code>Total_Rank_Exact</code> accepts an $n \times 2$ array of points, and returns a list of points critical points of the Rank function and the value at each of these points. Running</p>
<div class="highlight highlight-source-julia"><pre>rk <span class="pl-k">=</span> <span class="pl-c1">Total_Rank_Exact</span>(barcode)</pre></div>
<p>we obtain the critical points via</p>
<div class="highlight highlight-source-julia"><pre>rk[<span class="pl-c1">1</span>]</pre></div>
<p>which returns an array of points in $\mathbb{R}^2$, and the values through</p>
<div class="highlight highlight-source-julia"><pre>rk[<span class="pl-c1">2</span>]</pre></div>
<p>wich returns an array of integers.</p>
<p>To obtain a discrete approximation of a Rank Function over a persistence diagram $D$, use <code>Total_Rank_Grid</code>, which acceps as input an <a href="https://github.com/Eetion/Eirene.jl">Eirene</a> Persistence Diagram $D$, an increasing <code>StepRange</code> for $x$-coordinates <code>x_g</code>, and a decreasing <code>StepRange</code> for $y$-coordinates <code>y_g</code>. The <code>StepRanges</code> are obtained by running</p>
<div class="highlight highlight-source-julia"><pre>x_g <span class="pl-k">=</span> lb<span class="pl-k">:</span>delta<span class="pl-k">:</span>ub
x_g <span class="pl-k">=</span> ub<span class="pl-k">:</span><span class="pl-k">-</span>delta<span class="pl-k">:</span>lb</pre></div>
<p>with <code>lb</code> being the lower bound so that $(lb, lb)$ is the lower left corner of the grid, and <code>ub</code> being the upper bound so that $(ub,ub)$ is the top right corner of the grid, and $delta$ is the step size.</p>
<p>Finally, the rank is obtained by</p>
<div class="highlight highlight-source-julia"><pre>rk <span class="pl-k">=</span> <span class="pl-c1">Total_Rank_Grid</span>(D, x_g, y_g)</pre></div>
<p>which returns an array or values.</p>
<h3><a id="user-content-pca-of-rank-functions" class="anchor" aria-hidden="true" href="#pca-of-rank-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PCA of Rank Functions</h3>
<p>Given a set of rank functions, we can perform principal component analysis on them. The easiest way to do this is to use the wrapper function <code>PCA</code> which has inputs an array of rank functions evaluated at the same points (best to use <code>Total_Rank_Grid</code> to obtain them), an dimension $d$ and an array of weights <code>weights</code>, where the weights correspond to the grid points used in <code>Total_Rank_Grid</code>.</p>
<p>To perform Principal Component Analysis and obtain the scores run</p>
<div class="highlight highlight-source-julia"><pre>scores <span class="pl-k">=</span> <span class="pl-c1">PCA</span>(ranks, d, weights)</pre></div>
<p>which returns the scores in $d$-dimensions.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-persistent-homology-transfer" class="anchor" aria-hidden="true" href="#persistent-homology-transfer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Persistent Homology Transfer</h3>
<p>We will go through an example using a random <a href="https://github.com/yossibokor/PersistentHomologyTransfer.jl/Example/Example1.png">shape</a> and 20 directions. You can download the CSV file from <a href="https://github.com/yossibokor/PersistentHomologyTransfer.jl/Example/Example1.csv">here</a></p>
<p>To begin, load the CSV file into an array in Julia</p>
<div class="highlight highlight-source-julia"><pre>Boundary <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;path/to/file&gt;<span class="pl-pds">"</span></span>)
Persistence_Diagrams <span class="pl-k">=</span> <span class="pl-c1">PHT</span>(Boundary, <span class="pl-c1">20</span>)</pre></div>
<p>You can then access the persistence diagram corresponding to the $i^{th}$ direction as</p>
<div class="highlight highlight-source-julia"><pre>Persistence_Diagrams[i]</pre></div>

</article></div>