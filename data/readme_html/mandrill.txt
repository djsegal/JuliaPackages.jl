<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><em>I do not use Mandrill any more, after they changed their subscription models. Therefore, this package is currently unmaintained. I'll be happy to take PR's if anyone is interested.</em></p>
<h1><a id="user-content-a-julia-package-for-the-mandrill-rest-api" class="anchor" aria-hidden="true" href="#a-julia-package-for-the-mandrill-rest-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A Julia package for the Mandrill REST API</h1>
<p><a href="https://travis-ci.org/aviks/Mandrill.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/59ea502d30b4358bbe5cd1781dacf70abea8c72f/68747470733a2f2f7472617669732d63692e6f72672f6176696b732f4d616e6472696c6c2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/aviks/Mandrill.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://mandrill.com/" rel="nofollow">Mandrill</a> is a mail delivery provider for transactional email, created by the folks at
<a href="https://mailchimp.com" rel="nofollow">Mailchimp</a>. This package is a low overhead, lightweight wrapper around
Mandrill's REST api.</p>
<p><a href="https://mandrillapp.com/api/docs/" rel="nofollow">Mandrill's REST API</a> uses JSON messages to send emails, setup templates, or query reports. To use this package, create the input message as a Julia Dictionary, using the schema in the <a href="https://mandrillapp.com/api/docs/" rel="nofollow">Mandrill API Documentation</a>. Then, call the corresponding julia method. The call results are returned as JSON documents from Mandrill, which are converted Julia Dictionaries.</p>
<p>Any errors from the API call will result in a Julia <code>ErrorException</code> being thrown. This will exit the process if not caught.</p>
<p>Each API endpoint corresponds to a single method. Mandrill API endpoints are structured as <code>group/name.ext</code>. This is mapped as a <code>Mandrill.group_name</code> method in Julia. For example, the endpoint <code>/user/info.json</code> is mapped to the method <code>Mandril.user_info()</code>. These methods typically take a Julia Dictionary as their only arguments. For endpoints that do not need any inputs (other than the authentication key,) the method can be called without arguments.</p>
<p>The Mandrill authentication key can be provided via a SHELL environment variable <code>MANDRILL_KEY</code> (which must be set before the package is loaded) or explicitly set via the <code>Mandrill.key(key_string)</code> method call. The key need not be provided again for each method call.</p>
<p>Note that email attachments are sent as <code>base64</code> encoded strings in the Mandrill JSON API. Julia base library includes a <code>base64encode</code> method that can be used for this purpose.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Mandrill<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Mandrill
Mandrill<span class="pl-k">.</span><span class="pl-c1">key</span>(<span class="pl-s"><span class="pl-pds">"</span>axfGadhf4E....<span class="pl-pds">"</span></span>)

Mandrill<span class="pl-k">.</span><span class="pl-c1">user_info</span>()
<span class="pl-c"><span class="pl-c">#</span>Dict{AbstractString,Any} with 7 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  "public_id"    =&gt; "WBdNPiLFZ............."</span>
<span class="pl-c"><span class="pl-c">#</span>  "created_at"   =&gt; "2015-11-02 14:15:30.37005"</span>
<span class="pl-c"><span class="pl-c">#</span>  "hourly_quota" =&gt; 25</span>
<span class="pl-c"><span class="pl-c">#</span>  "username"     =&gt; "avik........"</span>
<span class="pl-c"><span class="pl-c">#</span>  "reputation"   =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span>  "backlog"      =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span>  "stats"        =&gt; Dict{AbstractString,Any}("today"=&gt;Dict{AbstractString,Any}("hard_bounces"=&gt;0,"unique_opâ€¦</span></pre></div>
<p>To send a message, it may be simplest to create a <code>Dict</code> inline:</p>
<div class="highlight highlight-source-julia"><pre>s <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
  <span class="pl-s"><span class="pl-pds">"</span>message<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>html<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;p&gt; Example HTML Content &lt;/p&gt;<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>text<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Example Test Content<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>subject<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Example Subject<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>from_email<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>message.from@example.com<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>from_name<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Example Name<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [
      <span class="pl-c1">Dict</span>(
        <span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>recipient.email@example.com<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Recipient Name<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>
        )
    ],
    <span class="pl-s"><span class="pl-pds">"</span>headers<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
      <span class="pl-s"><span class="pl-pds">"</span>Reply-To<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>message.reply@example.com<span class="pl-pds">"</span></span>
    ),
    <span class="pl-s"><span class="pl-pds">"</span>important<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>,
    <span class="pl-s"><span class="pl-pds">"</span>tags<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [
      <span class="pl-s"><span class="pl-pds">"</span>password-resets<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>user-initiated<span class="pl-pds">"</span></span>
    ],
    <span class="pl-s"><span class="pl-pds">"</span>metadata<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
      <span class="pl-s"><span class="pl-pds">"</span>website<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>www.example.com<span class="pl-pds">"</span></span>
    )
  ),
  <span class="pl-s"><span class="pl-pds">"</span>async<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">false</span>,
  <span class="pl-s"><span class="pl-pds">"</span>ip_pool<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Main Pool<span class="pl-pds">"</span></span>
)
<span class="pl-c"><span class="pl-c">#</span>stick a @compat in front of Dict creation for julia 0.3</span>

Mandrill<span class="pl-k">.</span><span class="pl-c1">messages_send</span>(s)
<span class="pl-c"><span class="pl-c">#</span>1-element Array{Any,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> Dict{AbstractString,Any}("_id"=&gt;"85115b2d653748e19a37cd851b0fd1d2","status"=&gt;"sent",</span>
<span class="pl-c"><span class="pl-c">#</span>                      "reject_reason"=&gt;nothing,"email"=&gt;"recipient.email@example.com")</span></pre></div>
<p>Alternatively, you could create the Dict piecemeal.</p>
<div class="highlight highlight-source-julia"><pre>s <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>()
message <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>()
message[<span class="pl-s"><span class="pl-pds">"</span>html<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;p&gt;Example HTML Content&lt;/p&gt;<span class="pl-pds">"</span></span>
message[<span class="pl-s"><span class="pl-pds">"</span>text<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Example text content<span class="pl-pds">"</span></span>
message[<span class="pl-s"><span class="pl-pds">"</span>subject<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>message.from@example.com<span class="pl-pds">"</span></span>
rcpt1 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>()
rcpt1[<span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>rcpt1@example.com<span class="pl-pds">"</span></span>
rcpt1[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Recipient One<span class="pl-pds">"</span></span>
rcpt1[<span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>
rcpt2 <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>()
rcpt2[<span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>rcpt2@example.com<span class="pl-pds">"</span></span>
rcpt2[<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Recipient Two<span class="pl-pds">"</span></span>
rcpt2[<span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>cc<span class="pl-pds">"</span></span>
message[<span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> [rcpt1, rcpt2]
s[<span class="pl-s"><span class="pl-pds">"</span>message<span class="pl-pds">"</span></span>]<span class="pl-k">=</span>message
s[<span class="pl-s"><span class="pl-pds">"</span>async<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">true</span>

Mandrill<span class="pl-k">.</span><span class="pl-c1">messages_send</span>(s)
<span class="pl-c"><span class="pl-c">#</span>2-element Array{Any,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> Dict{AbstractString,Any}("_id"=&gt;"59b5a7b930b44a21953ae7975c657fcf",</span>
<span class="pl-c"><span class="pl-c">#</span>                    "status"=&gt;"queued","email"=&gt;"rcpt1@example.com")</span>
<span class="pl-c"><span class="pl-c">#</span> Dict{AbstractString,Any}("_id"=&gt;"2dd208db6ad546dfae8a3a2466137260",</span>
<span class="pl-c"><span class="pl-c">#</span>                    "status"=&gt;"queued","email"=&gt;"rcpt2@example.com")</span></pre></div>
</article></div>