<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-traitor" class="anchor" aria-hidden="true" href="#traitor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Traitor</h1>
<p><strong>Traitor</strong>, <em>noun</em>, possibly from old French or somewhere. Definition:</p>
<ol>
<li>
<p>A person who double-crosses or otherwise does harm to a trusting party.</p>
</li>
<li>
<p>An uncommon (some even say made-up) term for a person or package which
bestows traits on (or <em>betrays</em>) a programming language.</p>
</li>
</ol>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>The <em>Traitor.jl</em> package is a naive (and potentially evil) attempt to create a
convenient framework for trait-based dispatch in the Julia programming language.
Traits provide an alternative to <em>single-inheritance multiple-dispatch</em>,
which would allow for complex combinations of object properties to be tested
at method dispatch.</p>
<p>Currently the package has basic functionality, supporting the features
discussed in the following sections. Some obvious oversights include lack of
support for default values and keyword arguments.</p>
<p><strong>Warning: please have some fun using this package, but it might not yet be suitable for production code.</strong></p>
<h3><a id="user-content-our-expectations-of-a-traits-type-system" class="anchor" aria-hidden="true" href="#our-expectations-of-a-traits-type-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Our expectations of a traits type system</h3>
<p>Trait types are organized into the type system. An abstract type defines the
trait class, while subtypes of them define examples of that trait.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="abstract Size

immutable Big &lt;: Size; end
immutable Medium &lt;: Size; end
immutable Small &lt;: Size; end
"><pre>abstract Size

immutable Big <span class="pl-k">&lt;:</span> <span class="pl-c1">Size</span>; <span class="pl-k">end</span>
immutable Medium <span class="pl-k">&lt;:</span> <span class="pl-c1">Size</span>; <span class="pl-k">end</span>
immutable Small <span class="pl-k">&lt;:</span> <span class="pl-c1">Size</span>; <span class="pl-k">end</span></pre></div>
<p>Types are annotated with traits <em>post-hoc</em> by returning the appropriate trait
<em>type</em> from the constructor of the abstract trait class given the data type in
question. So we could have:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Note: both input and output are types
Size(::Union{Type{Int32},Type{Int64}}) = Small
Size(::Type{BigInt}) = Big
Size(::Type{Int128}) = Medium
"><pre><span class="pl-c"><span class="pl-c">#</span> Note: both input and output are types</span>
<span class="pl-en">Size</span>(<span class="pl-k">::</span><span class="pl-c1">Union{Type{Int32},Type{Int64}}</span>) <span class="pl-k">=</span> Small
<span class="pl-en">Size</span>(<span class="pl-k">::</span><span class="pl-c1">Type{BigInt}</span>) <span class="pl-k">=</span> Big
<span class="pl-en">Size</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Int128}</span>) <span class="pl-k">=</span> Medium</pre></div>
<h3><a id="user-content-the-traitor-macro" class="anchor" aria-hidden="true" href="#the-traitor-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>@traitor</code> macro</h3>
<p>The <code>@traitor</code> macro is used to define a method which will be followed by a
further trait-based dispatch. Currently, it suffers from several limitations.
Firstly, the function must already exist (use <code>function f end</code> if necessary).
Further, <code>@traitor</code> methods are not compatible with pre-existing standard
methods, so it is best to keep in mind that <code>@traitor</code> can destructively
overwrite existing definitions. Finally, it doesn't currently support default
values or keyword arguments.</p>
<p>The traits to dispatch upon are given by a flexible extra set of <code>::</code> operators.
For a quick example, we allow for instance:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@traitor function howbig(x::Any::Big)
    &quot;Huge!&quot;
end

# The `Any` is optional
@traitor function howbig(x::::Medium)
    &quot;So-so&quot;
end

# One can combine standard dispatch and traits-based dispatch. In this case,
# standard multiple-dispatch occurs first, and `Traitor` then selects the most
# appropriate trait-based submethod.
@traitor function howbig(x::Integer::Small)
    &quot;Teensy...&quot;
end
"><pre><span class="pl-c1">@traitor</span> <span class="pl-k">function</span> <span class="pl-en">howbig</span>(x<span class="pl-k">::</span><span class="pl-c1">Any</span><span class="pl-k">::</span><span class="pl-c1">Big</span>)
    <span class="pl-s"><span class="pl-pds">"</span>Huge!<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The `Any` is optional</span>
<span class="pl-c1">@traitor</span> <span class="pl-k">function</span> <span class="pl-en">howbig</span>(x<span class="pl-k">:</span><span class="pl-k">::</span><span class="pl-c1">:Medium</span>)
    <span class="pl-s"><span class="pl-pds">"</span>So-so<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> One can combine standard dispatch and traits-based dispatch. In this case,</span>
<span class="pl-c"><span class="pl-c">#</span> standard multiple-dispatch occurs first, and `Traitor` then selects the most</span>
<span class="pl-c"><span class="pl-c">#</span> appropriate trait-based submethod.</span>
<span class="pl-c1">@traitor</span> <span class="pl-k">function</span> <span class="pl-en">howbig</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span><span class="pl-k">::</span><span class="pl-c1">Small</span>)
    <span class="pl-s"><span class="pl-pds">"</span>Teensy...<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-unions-of-traits-via-union" class="anchor" aria-hidden="true" href="#unions-of-traits-via-union"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unions of traits via <code>Union</code></h3>
<p>Trait constraints can be relaxed by writing <code>Union{}</code>s of trait types <em>of the
same trait class</em>. For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@traitor roughlyhowbig(x::::Big) = &quot;Huge!&quot;
@traitor roughlyhowbig(x::::Union{Medium,Small}) = &quot;Smallish&quot;
"><pre><span class="pl-c1">@traitor</span> <span class="pl-en">roughlyhowbig</span>(x<span class="pl-k">:</span><span class="pl-k">::</span><span class="pl-c1">:Big</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Huge!<span class="pl-pds">"</span></span>
<span class="pl-c1">@traitor</span> <span class="pl-en">roughlyhowbig</span>(x<span class="pl-k">:</span><span class="pl-k">::</span><span class="pl-c1">:Union</span>{Medium,Small}) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Smallish<span class="pl-pds">"</span></span></pre></div>
<p>Such unions encapsulate a larger set of Julia objects than the individual traits.</p>
<h3><a id="user-content-intersection-of-traits-via-tuple" class="anchor" aria-hidden="true" href="#intersection-of-traits-via-tuple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intersection of traits via <code>Tuple</code></h3>
<p>Traits of <em>different trait classes</em> can be combined using a <code>Tuple{...}</code>. This
represents a <em>smaller</em> set of Julia objects - those which satisfy all of the
traits simultaneously. For example,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="abstract Odor
immutable Smelly &lt;: Odor; end

@traitor describeyourself(::::Tuple{Big,Smelly}) = &quot;I'm big and smelly&quot;
"><pre>abstract Odor
immutable Smelly <span class="pl-k">&lt;:</span> <span class="pl-c1">Odor</span>; <span class="pl-k">end</span>

<span class="pl-c1">@traitor</span> <span class="pl-en">describeyourself</span>(<span class="pl-k">::</span><span class="pl-k">::</span><span class="pl-c1">Tuple{Big,Smelly}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>I'm big and smelly<span class="pl-pds">"</span></span></pre></div>
<p>Internally to <code>Traitor</code>, the most generic trait-methods are defined by the
<code>Tuple{}</code> trait, which has no trait constraints and therefore may represent any
object.</p>
<h3><a id="user-content-computable-traits" class="anchor" aria-hidden="true" href="#computable-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Computable traits</h3>
<p>To our utter dismay, it turns out that traits can be computed. Watch out for
this slippery code below:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;The `Treason` module implements stuff that Jeff and Stefan really won't like.&quot;
module Treason
using Traitor

abstract Mutability
immutable Immutable &lt;: Mutability; end
immutable Mutable &lt;: Mutability; end

@pure Mutability(T) = T.mutable ? Mutable : Immutable

&quot;Boring, old definition...&quot;
@traitor function map(f, x::::Mutable)
    out = similar(x)
    for i = 1:length(x)
        out[i] = f(x[i])
    end
    return out
end

&quot;Cool, but please optimize me onto the stack, oh Julia compiler gods&quot;
@traitor function map(f, x::::Immutable)
    out = Ref(similar(x)) # Get one on the heap
    for i = 1:length(x) # Mutate it on the heap
        out[i] = f(x[i]) # Elsewhere define setindex!(::RefValue{Tuple}), etc
    end
    return out.x # Copy it back to the stack
end

function setindex!{T &lt;: Tuple}(x::RefValue{T}, val, i::Integer)
    # grab a pointer and set some memory (safely, please...)
end

end # module
"><pre><span class="pl-s"><span class="pl-pds">"</span>The `Treason` module implements stuff that Jeff and Stefan really won't like.<span class="pl-pds">"</span></span>
<span class="pl-k">module</span> Treason
<span class="pl-k">using</span> Traitor

abstract Mutability
immutable Immutable <span class="pl-k">&lt;:</span> <span class="pl-c1">Mutability</span>; <span class="pl-k">end</span>
immutable Mutable <span class="pl-k">&lt;:</span> <span class="pl-c1">Mutability</span>; <span class="pl-k">end</span>

<span class="pl-c1">@pure</span> <span class="pl-en">Mutability</span>(T) <span class="pl-k">=</span> T<span class="pl-k">.</span>mutable <span class="pl-k">?</span> Mutable <span class="pl-k">:</span> Immutable

<span class="pl-s"><span class="pl-pds">"</span>Boring, old definition...<span class="pl-pds">"</span></span>
<span class="pl-c1">@traitor</span> <span class="pl-k">function</span> <span class="pl-en">map</span>(f, x<span class="pl-k">:</span><span class="pl-k">::</span><span class="pl-c1">:Mutable</span>)
    out <span class="pl-k">=</span> <span class="pl-c1">similar</span>(x)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)
        out[i] <span class="pl-k">=</span> <span class="pl-c1">f</span>(x[i])
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> out
<span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"</span>Cool, but please optimize me onto the stack, oh Julia compiler gods<span class="pl-pds">"</span></span>
<span class="pl-c1">@traitor</span> <span class="pl-k">function</span> <span class="pl-en">map</span>(f, x<span class="pl-k">:</span><span class="pl-k">::</span><span class="pl-c1">:Immutable</span>)
    out <span class="pl-k">=</span> <span class="pl-c1">Ref</span>(<span class="pl-c1">similar</span>(x)) <span class="pl-c"><span class="pl-c">#</span> Get one on the heap</span>
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x) <span class="pl-c"><span class="pl-c">#</span> Mutate it on the heap</span>
        out[i] <span class="pl-k">=</span> <span class="pl-c1">f</span>(x[i]) <span class="pl-c"><span class="pl-c">#</span> Elsewhere define setindex!(::RefValue{Tuple}), etc</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> out<span class="pl-k">.</span>x <span class="pl-c"><span class="pl-c">#</span> Copy it back to the stack</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">setindex!</span><span class="pl-c1">{T &lt;: Tuple}</span>(x<span class="pl-k">::</span><span class="pl-c1">RefValue{T}</span>, val, i<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    <span class="pl-c"><span class="pl-c">#</span> grab a pointer and set some memory (safely, please...)</span>
<span class="pl-k">end</span>

<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> module</span></pre></div>
<h3><a id="user-content-help-wanted-the-betray-macro" class="anchor" aria-hidden="true" href="#help-wanted-the-betray-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Help wanted: the <code>@betray</code> macro</h3>
<p>We would like to have a macro, say <code>@betray</code>, that would be able to "steal"
pre-existing method definitions and make them compatible with <code>@traitor</code> methods
as a default fallback. The current roadblock is that we don't know how to
take the code corresponding to a <code>Method</code> (or <code>LambdaInfo</code>) and insert it into
a new method definition (since the <code>LambdaInfo</code> is lowered IR and it is normal
to define methods with top-level expression syntax).</p>
<h2><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h2>
<p>This is joint work by Chris Foster (<strong>@c42f</strong>) and Andy Ferris (<strong>@andyferris</strong>).
We would like to thank QANTAS for providing a small space with limited distractions
for such a long time, so that we could prototype this work.</p>
</article></div>