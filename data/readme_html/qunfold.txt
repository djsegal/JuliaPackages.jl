<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://mirkobunse.github.io/QUnfold.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/mirkobunse/QUnfold.jl/actions"><img src="https://github.com/mirkobunse/QUnfold.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-qunfoldjl---algorithms-for-quantification-and-unfolding" class="anchor" aria-hidden="true" href="#qunfoldjl---algorithms-for-quantification-and-unfolding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QUnfold.jl - algorithms for quantification and unfolding</h1>
<p dir="auto">This Julia package implements our unified framework of quantification and unfolding algorithms.</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">A detailed <a href="https://mirkobunse.github.io/QUnfold.jl/dev" rel="nofollow">documentation</a> is available online.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QUnfold, ScikitLearn
@sk_import ensemble: RandomForestClassifier

# X_trn, y_trn = my_training_data(...)

acc = ACC( # a scikit-learn classifier is needed
    RandomForestClassifier(oob_score=true) # we recommend bagging with oob_score=true
)
trained_acc = fit(acc, X_trn, y_trn) # fit returns a trained COPY

# X_tst = my_testing_data(...)

p_est = predict(trained_acc, X_tst) # return a prevalence vector"><pre><span class="pl-k">using</span> QUnfold, ScikitLearn
<span class="pl-c1">@sk_import</span> ensemble<span class="pl-k">:</span> RandomForestClassifier

<span class="pl-c"><span class="pl-c">#</span> X_trn, y_trn = my_training_data(...)</span>

acc <span class="pl-k">=</span> <span class="pl-c1">ACC</span>( <span class="pl-c"><span class="pl-c">#</span> a scikit-learn classifier is needed</span>
    <span class="pl-c1">RandomForestClassifier</span>(oob_score<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> we recommend bagging with oob_score=true</span>
)
trained_acc <span class="pl-k">=</span> <span class="pl-c1">fit</span>(acc, X_trn, y_trn) <span class="pl-c"><span class="pl-c">#</span> fit returns a trained COPY</span>

<span class="pl-c"><span class="pl-c">#</span> X_tst = my_testing_data(...)</span>

p_est <span class="pl-k">=</span> <span class="pl-c1">predict</span>(trained_acc, X_tst) <span class="pl-c"><span class="pl-c">#</span> return a prevalence vector</span></pre></div>
</article></div>