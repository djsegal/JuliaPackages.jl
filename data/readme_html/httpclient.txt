<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>THIS PACKAGE IS DEPRECATED IN FAVOR OF <a href="https://github.com/JuliaWeb/HTTP.jl">HTTP.JL</a></p>
<h1><a id="user-content-httpclientjl" class="anchor" aria-hidden="true" href="#httpclientjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTPClient.jl</h1>
<p><a href="https://travis-ci.org/JuliaWeb/HTTPClient.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c67c36e69a64725ed2a71a55c349284f6706004f/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f48545450436c69656e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/HTTPClient.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaWeb/HTTPClient.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cada6318027e49f9f3f0efa22fd7e5c27db47f0c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69615765622f48545450436c69656e742e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaWeb/HTTPClient.jl/badge.svg" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=HTTPClient&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/557affe6119ee41af273a8ca730da17a53f6ca85/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f48545450436c69656e745f302e332e737667" alt="HTTPClient" data-canonical-src="http://pkg.julialang.org/badges/HTTPClient_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=HTTPClient&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/36ce79f4cecf6281570f0824ccff5567ae13bd29/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f48545450436c69656e745f302e342e737667" alt="HTTPClient" data-canonical-src="http://pkg.julialang.org/badges/HTTPClient_0.4.svg" style="max-width:100%;"></a></p>
<p>Provides HTTP client functionality based on <a href="https://github.com/JuliaWeb/LibCURL.jl">libcurl</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The exported APIs from module HTTPClient are :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">get</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">get</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>; kw_opts<span class="pl-k">...</span>)

<span class="pl-c1">post</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, data, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">post</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, data; kw_opts<span class="pl-k">...</span>)

<span class="pl-c1">put</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, data, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">put</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, data; kw_opts<span class="pl-k">...</span>)</pre></div>
<p><code>data</code> can be either a</p>
<ul>
<li><code>String</code> - sent as is.</li>
<li><code>IOStream</code> - Content type is set to "application/octet-stream" unless specified otherwise</li>
<li><code>Dict{Name, Value}</code> or <code>Vector{Tuple{Name, Value}}</code> - Content type is set to "application/x-www-form-urlencoded" unless specified otherwise</li>
<li>(:file, filename::String) - The file is read, and the content-type is set automatically unless specified otherwise.</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">head</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">head</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>; kw_opts<span class="pl-k">...</span>)

<span class="pl-c1">delete</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">delete</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>; kw_opts<span class="pl-k">...</span>)

<span class="pl-c1">trace</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">trace</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>; kw_opts<span class="pl-k">...</span>)

<span class="pl-c1">options</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>, options<span class="pl-k">::</span><span class="pl-c1">RequestOptions</span>)
<span class="pl-c1">options</span>(url<span class="pl-k">::</span><span class="pl-c1">String</span>; kw_opts<span class="pl-k">...</span>)</pre></div>
<p>Each API returns an object of type</p>
<div class="highlight highlight-source-julia"><pre>type Response
    body<span class="pl-k">::</span><span class="pl-c1">IOBuffer</span>
    headers<span class="pl-k">::</span><span class="pl-c1">Dict{String, Vector{String}}</span>
    http_code<span class="pl-k">::</span><span class="pl-c1">Int</span>
    total_time<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    bytes_recd<span class="pl-k">::</span><span class="pl-c1">Integer</span>
<span class="pl-k">end</span></pre></div>
<p>If you expecting ascii text as a response, for example, html content, or json,
<code>bytestring(r.body)</code> will return the stringified response. For binary data use the
functions described in <a href="http://docs.julialang.org/en/latest/stdlib/base/#i-o" rel="nofollow">http://docs.julialang.org/en/latest/stdlib/base/#i-o</a> to access
the raw data.</p>
<h3><a id="user-content-specifying-options" class="anchor" aria-hidden="true" href="#specifying-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Specifying Options</h3>
<p>Options can specified either as keyword arguments or a single object of type <code>RequestOptions</code></p>
<div class="highlight highlight-source-julia"><pre>type RequestOptions
    blocking<span class="pl-k">::</span><span class="pl-c1">Bool</span>
    query_params<span class="pl-k">::</span><span class="pl-c1">Vector{Tuple}</span>
    request_timeout<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    callback<span class="pl-k">::</span><span class="pl-c1">Union(Function,Bool)</span>
    content_type<span class="pl-k">::</span><span class="pl-c1">String</span>
    headers<span class="pl-k">::</span><span class="pl-c1">Vector{Tuple}</span>
    ostream<span class="pl-k">::</span><span class="pl-c1">Union{IO, Nothing}</span>
    auto_content_type<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span></pre></div>
<p><code>options</code> can also be specified as named arguments in each of the APIS. The names are field names of RequestOptions.
For example, <code>get(url; blocking=false, request_timeout=30.0)</code></p>
<ul>
<li>
<p>By default all APIs block till request completion and return Response objects.</p>
</li>
<li>
<p>If <code>blocking</code> is set to <code>false</code>, then the API returns immediately with a RemoteRef. The request is executed asynchronously in a separate task.</p>
</li>
<li>
<p>The user can specify a complete url in the <code>url</code> parameter of the API, or can set query_params as a <code>Vector</code> of <code>(Name, Value)</code> tuples</p>
<p>In the former case, the passed url is executed as is.</p>
<p>In the latter case the complete URL if formed by concatenating the <code>url</code> field, a "?" and
the escaped (name,value) pairs. Both the name and values must be convertible to appropriate ASCIIStrings.</p>
</li>
<li>
<p>In file upload cases, an attempt is made to set the <code>content_type</code> type automatically as
derived from the file extension unless <code>auto_content_type</code> is set to false.</p>
</li>
<li>
<p><code>auto_content_type</code> - default is true. If the content_type has not been explicitly specified,
the library will try to guess the content type for a PUT/POST from the file extension.
For POST it will default to "application/x-www-form-urlencoded". Set this parameter to false to override this behaviour</p>
</li>
<li>
<p>Default value for the <code>request_timeout</code> is 0.0 seconds, i.e., never timeout.</p>
</li>
<li>
<p>If a callback is specified, its signature should be  <code>customize_cb(curl)</code> where <code>curl</code> is the libCURL handle.
The callback can further customize the request by using libCURL easy* APIs directly</p>
</li>
<li>
<p>headers - additional headers to be set. Vector of {Name, Value} Tuples</p>
</li>
<li>
<p>ostream - if set as an IO, any returned data to written to ostream.
If it is a String, it is treated as a filename and written to the file.
In both these cases the data is not returned as part of the Response object</p>
</li>
</ul>
<h1><a id="user-content-samples" class="anchor" aria-hidden="true" href="#samples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Samples</h1>
<p>See <code>test/runtests.jl</code> for sample code</p>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h3>
<p>Change the sleep in a loop to using fdwatcher when support for fdwatcher becomes available in mainline</p>
</article></div>