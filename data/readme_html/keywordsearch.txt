<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://github.com/beacon-biosignals/KeywordSearch.jl/actions?query=workflow%3ACI"><img src="https://github.com/beacon-biosignals/KeywordSearch.jl/workflows/CI/badge.svg?branch=main" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/beacon-biosignals/KeywordSearch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4259b11319802c18d2bba8de0a5bd180399593016dc77814084f2ac455e2d412/68747470733a2f2f636f6465636f762e696f2f67682f626561636f6e2d62696f7369676e616c732f4b6579776f72645365617263682e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d304852485a31424c3630" alt="codecov" data-canonical-src="https://codecov.io/gh/beacon-biosignals/KeywordSearch.jl/branch/main/graph/badge.svg?token=0HRHZ1BL60" style="max-width:100%;"></a>
<a href="https://beacon-biosignals.github.io/KeywordSearch.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs: stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://beacon-biosignals.github.io/KeywordSearch.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs: development" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-keywordsearch" class="anchor" aria-hidden="true" href="#keywordsearch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KeywordSearch</h1>
<p>Given a collection of free-text documents and a set of keywords, we want to know: which keywords have fuzzy matches in which documents?</p>
<p>There are two types of errors:</p>
<ul>
<li>false positive: we flag a match when it does not exist</li>
<li>false negative: we miss a match that should exist</li>
</ul>
<p>Here, we primarily wish to minimize false negatives (ideally without having too many false positives either!). That is, we wish to error on the side of having too many matches:
in some cases where we have many haystacks and few needles, we'd rather have to manually filter out some pins (false needles <g-emoji class="g-emoji" alias="wink" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png">ðŸ˜‰</g-emoji>) than miss a needle.</p>
<p>In particular, we want robust to the following types of mistakes in the documents which could cause us to miss a match:</p>
<ol>
<li>Misspellings</li>
<li>word conjunctions (missed space separating words)</li>
<li>hyphenated words conjoined without a hyphen</li>
<li>hyphenated words/phrase joined with spaces instead of hyphens</li>
<li>Erroneously redacted terms (e.g. <code>Darwin's Frog</code> being redacted as suspected PHI since <code>Darwin</code> could be flagged as name, whereas in this case it is the name of an animal).</li>
</ol>
<p>We also will pay attention to one source of false positives:</p>
<ol start="6">
<li>Search terms that are subsets of other general terms (not the intended term class). E.g. "ant" could show up as part of "anteater", but that would not be a correct match if we're looking for the little insects.</li>
</ol>
<p>We address...</p>
<ul>
<li>...(1) by using fuzzy matching via an edit distance (i.e. a string matches another substring if it is the same up to <code>n</code> edits, where we have to choose <code>n</code>). Edit distances are supplied by <a href="https://github.com/matthieugomez/StringDistances.jl">StringDistances.jl</a>.</li>
<li>...(2) by not requiring matches between word boundaries but just between substrings (i.e. if the query is <code>cobra</code> and <code>kingcobra</code> shows up in the document, then we would have a perfect match with the substring <code>cobra</code> found in the document)</li>
<li>...(3) and (4) by first replacing hyphens with spaces, and then augmenting our search terms by taking any terms with spaces or hyphens and generating a list of terms with each possible choice of (spaces, no spaces). For example, the query "crab-eating macaque" is augmented to the query ("crab eating macaque" OR "crabeating macaque" OR "crab eatingmacaque" OR "crabeatingmacaque").</li>
<li>...(5) Here, we allow a global list of replacements (<code>KeywordSearch.AUTOMATIC_REPLACEMENTS</code>) to manually undo erroneous redaction.</li>
<li>...(6) Here, our solution to (2) has gotten us into trouble. What we can do is add spaces to our term, e.g., instead of searching for "ant" we can search for " ant " and require an exact match. This is accomplished by e.g. <code>word_boundary(Query("ant"))</code> in the language of KeywordSearch.jl.</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using KeywordSearch, UUIDs

julia&gt; document = Document(&quot;&quot;&quot;
                         The crabeating macacue ate a crab.
                         &quot;&quot;&quot;, (; document_uuid = uuid4()))
Document starting with &quot;The crabeating macacueâ€¦&quot;. Metadata: (document_uuid = UUID(&quot;a703302c-eeda-46ba-8755-940a7db86b63&quot;),)

julia&gt; query = augment(FuzzyQuery(&quot;crab-eating macaque&quot;))
Or
â”œâ”€ FuzzyQuery(&quot;crab eating macaque&quot;, DamerauLevenshtein(), 2)
â”œâ”€ FuzzyQuery(&quot;crabeating macaque&quot;, DamerauLevenshtein(), 2)
â”œâ”€ FuzzyQuery(&quot;crab eatingmacaque&quot;, DamerauLevenshtein(), 2)
â””â”€ FuzzyQuery(&quot;crabeatingmacaque&quot;, DamerauLevenshtein(), 2)

julia&gt; m = match(query, document)
QueryMatch with distance 1 at indices 5:22.

julia&gt; explain(m)
The query &quot;crabeating macaque&quot; matched the text &quot;The crabeating macacue ate a crab \n &quot; with distance 1.

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> KeywordSearch, UUIDs

julia<span class="pl-k">&gt;</span> document <span class="pl-k">=</span> <span class="pl-c1">Document</span>(<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">                         The crabeating macacue ate a crab.</span>
<span class="pl-s">                         <span class="pl-pds">"""</span></span>, (; document_uuid <span class="pl-k">=</span> <span class="pl-c1">uuid4</span>()))
Document starting with <span class="pl-s"><span class="pl-pds">"</span>The crabeating macacueâ€¦<span class="pl-pds">"</span></span>. Metadata<span class="pl-k">:</span> (document_uuid <span class="pl-k">=</span> <span class="pl-c1">UUID</span>(<span class="pl-s"><span class="pl-pds">"</span>a703302c-eeda-46ba-8755-940a7db86b63<span class="pl-pds">"</span></span>),)

julia<span class="pl-k">&gt;</span> query <span class="pl-k">=</span> <span class="pl-c1">augment</span>(<span class="pl-c1">FuzzyQuery</span>(<span class="pl-s"><span class="pl-pds">"</span>crab-eating macaque<span class="pl-pds">"</span></span>))
Or
â”œâ”€ <span class="pl-c1">FuzzyQuery</span>(<span class="pl-s"><span class="pl-pds">"</span>crab eating macaque<span class="pl-pds">"</span></span>, <span class="pl-c1">DamerauLevenshtein</span>(), <span class="pl-c1">2</span>)
â”œâ”€ <span class="pl-c1">FuzzyQuery</span>(<span class="pl-s"><span class="pl-pds">"</span>crabeating macaque<span class="pl-pds">"</span></span>, <span class="pl-c1">DamerauLevenshtein</span>(), <span class="pl-c1">2</span>)
â”œâ”€ <span class="pl-c1">FuzzyQuery</span>(<span class="pl-s"><span class="pl-pds">"</span>crab eatingmacaque<span class="pl-pds">"</span></span>, <span class="pl-c1">DamerauLevenshtein</span>(), <span class="pl-c1">2</span>)
â””â”€ <span class="pl-c1">FuzzyQuery</span>(<span class="pl-s"><span class="pl-pds">"</span>crabeatingmacaque<span class="pl-pds">"</span></span>, <span class="pl-c1">DamerauLevenshtein</span>(), <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">match</span>(query, document)
QueryMatch with distance <span class="pl-c1">1</span> at indices <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">22.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">explain</span>(m)
The query <span class="pl-s"><span class="pl-pds">"</span>crabeating macaque<span class="pl-pds">"</span></span> matched the text <span class="pl-s"><span class="pl-pds">"</span>The crabeating macacue ate a crab <span class="pl-cce">\n</span> <span class="pl-pds">"</span></span> with distance <span class="pl-c1">1.</span>
</pre></div>
<p>Currently, only the <code>StringDistances.DamerauLevenshtein</code> distance measure is supported.</p>
</article></div>