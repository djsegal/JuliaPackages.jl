<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cumulantsjl" class="anchor" aria-hidden="true" href="#cumulantsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cumulants.jl</h1>
<p><a href="https://travis-ci.org/iitis/Cumulants.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d15bac01cbaec7a949ce678d7c47df6f37ec781/68747470733a2f2f7472617669732d63692e6f72672f69697469732f43756d756c616e74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/iitis/Cumulants.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/iitis/Cumulants.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ef8803f946f93e05752c55c69556e2c45f085fd1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f69697469732f43756d756c616e74732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/iitis/Cumulants.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3446199" rel="nofollow"><img src="https://camo.githubusercontent.com/539291ee2b0ed2f7ee35ebe34c1fe331da10f96a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333434363139392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3446199.svg" style="max-width:100%;"></a></p>
<p>Calculates cummulant tensors of any order for multivariate data.
Functions return tensor or array of tensors in <code>SymmetricTensors</code> type. Requires <a href="https://github.com/ZKSI/SymmetricTensors.jl">SymmetricTensors.jl</a>. To convert to array, run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(data<span class="pl-k">::</span><span class="pl-c1">SymmetricTensors{T, N}</span>)</pre></div>
<p>As of 01/01/2017 <a href="https://github.com/kdomino">kdomino</a> is the lead maintainer of this package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, run</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add Cumulants</pre></div>
<p>to install the files. Julia 1.0 or later is required.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<h3><a id="user-content-moment" class="anchor" aria-hidden="true" href="#moment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Moment</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">moment</span>(data<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span>, b<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<p>Returns a <code>SymmetricTensor{T, m}</code> of the moment of order <code>m</code> of multivariate data represented by a <code>t</code> by <code>n</code> matrix, i.e. data with <code>n</code> marginal variables and <code>t</code> realisations. The argument <code>b</code> with defalt value <code>2</code>, is an optional <code>Int</code> that determines the size
of the blocks in <code>SymmetricTensors</code> type.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">1.</span>:<span class="pl-c1">15.</span>),(<span class="pl-c1">5</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>   <span class="pl-c1">6.0</span>  <span class="pl-c1">11.0</span>
 <span class="pl-c1">2.0</span>   <span class="pl-c1">7.0</span>  <span class="pl-c1">12.0</span>
 <span class="pl-c1">3.0</span>   <span class="pl-c1">8.0</span>  <span class="pl-c1">13.0</span>
 <span class="pl-c1">4.0</span>   <span class="pl-c1">9.0</span>  <span class="pl-c1">14.0</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-c1">15.0</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">moment</span>(data, <span class="pl-c1">3</span>)
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">45.0</span> <span class="pl-c1">100.0</span>; <span class="pl-c1">100.0</span> <span class="pl-c1">230.0</span>]

[<span class="pl-c1">100.0</span> <span class="pl-c1">230.0</span>; <span class="pl-c1">230.0</span> <span class="pl-c1">560.0</span>] <span class="pl-c1">nothing</span>; <span class="pl-c1">nothing</span> <span class="pl-c1">nothing</span>]

Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">155.0</span> <span class="pl-c1">360.0</span>; <span class="pl-c1">360.0</span> <span class="pl-c1">890.0</span>] [<span class="pl-c1">565.0</span>; <span class="pl-c1">1420.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">2275.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)</pre></div>
<p>To convert to array use:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(m)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
  <span class="pl-c1">45.0</span>  <span class="pl-c1">100.0</span>  <span class="pl-c1">155.0</span>
 <span class="pl-c1">100.0</span>  <span class="pl-c1">230.0</span>  <span class="pl-c1">360.0</span>
 <span class="pl-c1">155.0</span>  <span class="pl-c1">360.0</span>  <span class="pl-c1">565.0</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">100.0</span>  <span class="pl-c1">230.0</span>   <span class="pl-c1">360.0</span>
 <span class="pl-c1">230.0</span>  <span class="pl-c1">560.0</span>   <span class="pl-c1">890.0</span>
 <span class="pl-c1">360.0</span>  <span class="pl-c1">890.0</span>  <span class="pl-c1">1420.0</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
 <span class="pl-c1">155.0</span>   <span class="pl-c1">360.0</span>   <span class="pl-c1">565.0</span>
 <span class="pl-c1">360.0</span>   <span class="pl-c1">890.0</span>  <span class="pl-c1">1420.0</span>
 <span class="pl-c1">565.0</span>  <span class="pl-c1">1420.0</span>  <span class="pl-c1">2275.0</span></pre></div>
<h3><a id="user-content-cumulants" class="anchor" aria-hidden="true" href="#cumulants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cumulants</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cumulants</span>(data<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>, b<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<p>Returns a vector of <code>SymmetricTensor{T, i}</code> <code>i = 1,2,3,...,m</code> of cumulants of
order <code>1,2,3,...,m</code>. Cumulants are calculated for multivariate data represented
by matrix of size <code>t</code> by <code>n</code>, i.e. data with <code>n</code> marginal variables and <code>t</code>
realisations. The argument <code>b</code> with default value <code>2</code>, is an optional <code>Int</code>
that determines a size of blocks in <code>SymmetricTensors</code> type.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">cumulants</span>(data, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">2</span>]
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>] [<span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">2.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)

julia<span class="pl-k">&gt;</span> c[<span class="pl-c1">3</span>]
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>]

[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>] <span class="pl-c1">nothing</span>; <span class="pl-c1">nothing</span> <span class="pl-c1">nothing</span>]

Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>] [<span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">0.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)
</pre></div>
<p>To convert to array:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(c[<span class="pl-c1">2</span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(c[<span class="pl-c1">3</span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<p>Parallel computation available, it is efficient for large number of data realisations, e.g. <code>t = 1000000</code>. For parallel computation just run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(n)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> Cumulants</pre></div>
<p>Naive algorithms of moment and cumulant tensors calculations are also available.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">naivemoment</span>(data<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<p>Returns array{T, m} of the m'th moment of data. calculated using a naive algorithm.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">naivemoment</span>(data, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
  <span class="pl-c1">45.0</span>  <span class="pl-c1">100.0</span>  <span class="pl-c1">155.0</span>
 <span class="pl-c1">100.0</span>  <span class="pl-c1">230.0</span>  <span class="pl-c1">360.0</span>
 <span class="pl-c1">155.0</span>  <span class="pl-c1">360.0</span>  <span class="pl-c1">565.0</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">100.0</span>  <span class="pl-c1">230.0</span>   <span class="pl-c1">360.0</span>
 <span class="pl-c1">230.0</span>  <span class="pl-c1">560.0</span>   <span class="pl-c1">890.0</span>
 <span class="pl-c1">360.0</span>  <span class="pl-c1">890.0</span>  <span class="pl-c1">1420.0</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
 <span class="pl-c1">155.0</span>   <span class="pl-c1">360.0</span>   <span class="pl-c1">565.0</span>
 <span class="pl-c1">360.0</span>   <span class="pl-c1">890.0</span>  <span class="pl-c1">1420.0</span>
 <span class="pl-c1">565.0</span>  <span class="pl-c1">1420.0</span>  <span class="pl-c1">2275.0</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">naivecumulant</span>(data<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, m<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<p>Returns <code>Array{T, m}</code> of the <code>m</code>'th cumulant of data, calculated using a naive algorithm. Works for <code>1 &lt;= m  &lt; 7</code>, for <code>m &gt;= 7</code> throws exception.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">naivecumulant</span>(data, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">naivecumulant</span>(data, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

[:, :, <span class="pl-c1">3</span>] <span class="pl-k">=</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<h1><a id="user-content-performance-analysis" class="anchor" aria-hidden="true" href="#performance-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance analysis</h1>
<p>To analyse the computational time of cumulants vs naivecumulants and moment vs naivemoment, we supply the executable script <code>comptimes.jl</code>.
This script returns to a .jld file computational times, given following parameters:</p>
<ul>
<li><code>-m (Int)</code>: cumulant's order, by default <code>m = 4</code>,</li>
<li><code>-n (vararg Int)</code>: numbers of marginal variables, by default <code>m = 20 24 28</code>,</li>
<li><code>-t (vararg Int)</code>: number of realisations of random variable, by defalut <code>t = 10000</code>.
Be careful while using <code>n</code>&gt;<code>4</code> and large <code>m</code>, where naive algorithms might need a large computational time and memory usage. Naive algorithms does not use the block structures, hence they computes and stores a whole cumulant tensor regardless its symmetry. All comparisons performed by this script use one core.</li>
</ul>
<p>To analyse the computational time of cumulants for different block sizes <code>1 =&lt; b =&lt; Int(sqrt(n))</code>, we supply the executable script <code>comptimeblocks.jl</code>.
This script returns to a .jld file computational times, given following parameters:</p>
<ul>
<li><code>-m (Int)</code>: cumulant's order, by default <code>m = 4</code>,</li>
<li><code>-n (Int)</code>: numbers of marginal variables, by default <code>m = 48</code>,</li>
<li><code>-t (vararg Int)</code>: number of realisations of random variable, by default <code>t = 10000 20000</code>.
Computational times and parameters are saved in the .jld file in /res directory. All comparisons performed by this script use one core.</li>
</ul>
<p>To analyse the computational time of moment on different numbers of processes, we supply the executable script <code>comptimeprocs.jl</code>.
This script returns to a .jld file computational times, given following parameters:</p>
<ul>
<li><code>-m (Int)</code>: moment's order, by default <code>m = 4</code>,</li>
<li><code>-n (Int)</code>: numbers of marginal variables, by default <code>m = 50</code>,</li>
<li><code>-t (Int)</code>: number of realisations of random variable, by default <code>t = 100000</code>,</li>
<li><code>-p (Int)</code>: maximal number of processes, by default <code>p = 4</code>,</li>
<li><code>-b (Int)</code>: blocks size, by default <code>b = 2</code>.</li>
</ul>
<p>All result files are saved in /res directory. To plot a graph run /res/plotcomptimes.jl followed by a <code>*.jld</code> file name</p>
<p>For the computational example on data use the following.</p>
<p>The script <code>gandata.jl</code> generates <code>t = 150000000</code> realisations of <code>n = 4</code> dimensional data form the <code>t</code>-multivariate distribution with <code>ν = 14</code> degrees of freedom, and theoretical
super-diagonal elements of those cumulants. Results are saved in <code>data/datafortests.jld</code></p>
<p>The script <code>testondata.jl</code> computes cumulant tensors of order <code>m = 1 - 6</code> for <code>data/datafortests.jld</code>, results are saved in <code>data/cumulants.jld</code>.</p>
<p>To read <code>cumulants.jld</code> please run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> JLD

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SymmetricTensors

julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>cumulants.jld<span class="pl-pds">"</span></span>)
</pre></div>
<p>To plot super-diagonal elements of those cumulants and their theoretical values from t-student distribution pleas run <code>plotsuperdiag.jl</code></p>
<h1><a id="user-content-citing-this-work" class="anchor" aria-hidden="true" href="#citing-this-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing this work</h1>
<p>Krzysztof Domino, Piotr Gawron, Łukasz Pawela, <em>Efficient Computation of Higher-Order Cumulant Tensors</em>, SIAM J. Sci. Comput. 40, A1590 (2018) <a href="https://doi.org/10.1137/17M1149365" rel="nofollow"><img src="10.1137/17M1149365" alt="DOI" style="max-width:100%;"></a>, <a href="https://arxiv.org/abs/1701.05420" rel="nofollow">https://arxiv.org/abs/1701.05420</a></p>
<p>This project was partially financed by the National Science Centre, Poland – project number 2014/15/B/ST6/05204.</p>
</article></div>