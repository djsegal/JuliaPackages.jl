<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-readwritedlm2" class="anchor" aria-hidden="true" href="#readwritedlm2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ReadWriteDlm2</h1>
<h3><a id="user-content-csv-io-supports-decimal-comma-date-datetime-time-complex-missing-and-rational" class="anchor" aria-hidden="true" href="#csv-io-supports-decimal-comma-date-datetime-time-complex-missing-and-rational"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CSV IO Supports Decimal Comma, Date, DateTime, Time, Complex, Missing and Rational</h3>
<p><a href="https://travis-ci.org/strickek/ReadWriteDlm2.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e1aa81559e20dcb5d9ff1dcedb54ec5df266505c93bcdb335618a7dd2b086cde/68747470733a2f2f7472617669732d63692e6f72672f73747269636b656b2f526561645772697465446c6d322e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/strickek/ReadWriteDlm2.jl.svg?branch=master" style="max-width:100%;"></a>   <a href="https://ci.appveyor.com/project/strickek/readwritedlm2-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/db58e9262a05362f883aa2a6b024b0588d241955c04154f8bc3e5aac3cbb5b98/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6f6a76386e6e757736336b68397962612f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ojv8nnuw63kh9yba/branch/master?svg=true" style="max-width:100%;"></a>  <a href="http://codecov.io/github/strickek/ReadWriteDlm2.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7a27ad99d4b727e4a181fd1e7bb500889212323c01f8434a3c38bed93664d43f/687474703a2f2f636f6465636f762e696f2f6769746875622f73747269636b656b2f526561645772697465446c6d322e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/strickek/ReadWriteDlm2.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>ReadWriteDlm2</code> functions <code>readdlm2()</code>, <code>writedlm2()</code>, <code>readcsv2()</code> and <code>writecsv2()</code> are similar to those of stdlib.DelimitedFiles, but with additional support for <code>Dates</code> formats, <code>Complex</code>, <code>Rational</code>, <code>Missing</code> types and special decimal marks. <code>ReadWriteDlm2</code> supports the <code>Tables.jl</code> interface.</p>
<ul>
<li>
<p>For "decimal dot" users the functions <code>readcsv2()</code> and <code>writecsv2()</code> have the respective defaults: Delimiter is <code>','</code> (fixed) and <code>decimal='.'</code>.</p>
</li>
<li>
<p>The basic idea of <code>readdlm2()</code> and <code>writedlm2()</code> is to support the <a href="https://commons.wikimedia.org/wiki/File:DecimalSeparator.svg?uselang=en#file" rel="nofollow">decimal comma countries</a>. These functions use <code>';'</code> as default delimiter and <code>','</code> as default decimal mark. "Decimal dot" users of these functions need to define <code>decimal='.'</code>.</p>
</li>
<li>
<p>Alternative package: <code>CSV</code> (supports also special decimal marks)</p>
</li>
</ul>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>This package is registered and can be installed within the <a href="https://docs.julialang.org/en/latest/stdlib/Pkg/" rel="nofollow"><code>Pkg</code> REPL-mode</a>: Type <code>]</code> in the REPL and then:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ReadWriteDlm2
"><pre><code>pkg&gt; add ReadWriteDlm2
</code></pre></div>
<h3><a id="user-content-basic-example--more-how-to-use-readwritedlm2" class="anchor" aria-hidden="true" href="#basic-example--more-how-to-use-readwritedlm2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Example(<a href="#more-examples">-&gt; more</a>): How To Use <code>ReadWriteDlm2</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReadWriteDlm2, Dates           # activate modules ReadWriteDlm2, Dates

julia&gt; a = [&quot;text&quot; 1.2; Date(2017,1,1) 1];  # create array with: String, Date, Float64 and Int eltype

julia&gt; writedlm2(&quot;test.csv&quot;, a)             # test.csv(decimal comma): &quot;text;1,2\n2017-01-01;1\n&quot;

julia&gt; readdlm2(&quot;test.csv&quot;)                 # read `CSV` data: All four eltypes are parsed correctly!
2×2 Array{Any,2}:
 &quot;text&quot;      1.2
 2017-01-01  1

julia&gt; using DataFrames                     # Tables interface: auto Types for DataFrame columns

julia&gt; DataFrame(readdlm2(&quot;test.csv&quot;, tables=true))
2×2 DataFrame
│ Row │ Column1    │ Column2 │
│     │ Any        │ Real    │
├─────┼────────────┼─────────┤
│ 1   │ text       │ 1.2     │
│ 2   │ 2017-01-01 │ 1       │
"><pre><code>julia&gt; using ReadWriteDlm2, Dates           # activate modules ReadWriteDlm2, Dates

julia&gt; a = ["text" 1.2; Date(2017,1,1) 1];  # create array with: String, Date, Float64 and Int eltype

julia&gt; writedlm2("test.csv", a)             # test.csv(decimal comma): "text;1,2\n2017-01-01;1\n"

julia&gt; readdlm2("test.csv")                 # read `CSV` data: All four eltypes are parsed correctly!
2×2 Array{Any,2}:
 "text"      1.2
 2017-01-01  1

julia&gt; using DataFrames                     # Tables interface: auto Types for DataFrame columns

julia&gt; DataFrame(readdlm2("test.csv", tables=true))
2×2 DataFrame
│ Row │ Column1    │ Column2 │
│     │ Any        │ Real    │
├─────┼────────────┼─────────┤
│ 1   │ text       │ 1.2     │
│ 2   │ 2017-01-01 │ 1       │
</code></pre></div>
<h2><a id="user-content-function-readdlm2" class="anchor" aria-hidden="true" href="#function-readdlm2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function <code>readdlm2()</code></h2>
<p>Read a matrix from <code>source</code>. The <code>source</code> can be a text file, stream or byte array.
Each line, separated by <code>eol</code> (default is <code>'\n'</code>), gives one row.
The columns are separated by <code>';'</code>, another <code>delim</code> can be defined.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="readdlm2(source; options...)
readdlm2(source, T::Type; options...)
readdlm2(source, delim::Char; options...)
readdlm2(source, delim::Char, T::Type; options...)
readdlm2(source, delim::Char, eol::Char; options...)
readdlm2(source, delim::Char, T::Type, eol::Char; options...)
"><pre><code>readdlm2(source; options...)
readdlm2(source, T::Type; options...)
readdlm2(source, delim::Char; options...)
readdlm2(source, delim::Char, T::Type; options...)
readdlm2(source, delim::Char, eol::Char; options...)
readdlm2(source, delim::Char, T::Type, eol::Char; options...)
</code></pre></div>
<p>Pre-processing of <code>source</code> with regex substitution changes the decimal marks
from <code>d,d</code> to <code>d.d</code>. For default <code>rs</code> the keyword argument <code>decimal=','</code> sets
the decimal Char in the <code>r</code>-string of <code>rs</code>. When a special regex substitution
tuple <code>rs=(r.., s..)</code> is defined, the argument <code>decimal</code> is not used (
<a href="#writedlm2-and-readdlm2-with-special-decimal">-&gt; Example</a>). Pre-processing
can be switched off with: <code>rs=()</code>.</p>
<p>In addition to stdlib <code>readdlm()</code>, data is also parsed for <code>Dates</code> formats (ISO),
the<code>Time</code> format <code>HH:MM[:SS[.s{1,9}]]</code> and for complex and rational numbers.
To deactivate parsing dates/time set: <code>dfs="", dtfs=""</code>.
<code>locale</code> defines the language of day (<code>E</code>, <code>e</code>) and month (<code>U</code>, <code>u</code>) names.</p>
<p>The result will be a (heterogeneous) array of default element type <code>Any</code>. If
<code>header=true</code> it will be a tuple containing the data array and a vector for
the columnnames. Other (abstract) types for the data array elements could be
defined. If data is empty, a <code>0×0 Array{T,2}</code> is returned.</p>
<p>With <code>tables=true</code>[, <code>header=true</code>] option[s] a <code>Tables</code> interface compatible
<code>MatrixTable</code> with individual column types is returned, which for example can
be used as argument for <code>DataFrame()</code>.</p>
<h3><a id="user-content-additional-keyword-arguments-readdlm2" class="anchor" aria-hidden="true" href="#additional-keyword-arguments-readdlm2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional Keyword Arguments <code>readdlm2()</code></h3>
<ul>
<li><code>decimal=','</code>: Decimal mark Char used by default <code>rs</code>, irrelevant if <code>rs</code>-tuple is not the default one</li>
<li><code>rs=(r"(\d),(\d)", s"\1.\2")</code>: <a href="https://docs.julialang.org/en/latest/manual/strings/#Regular-Expressions-1" rel="nofollow">Regex</a> (r,s)-tuple, the default change d,d to d.d if <code>decimal=','</code></li>
<li><code>dtfs="yyyy-mm-ddTHH:MM:SS.s"</code>: <a href="https://docs.julialang.org/en/latest/stdlib/Dates/#Dates.DateFormat" rel="nofollow">Format string</a> for DateTime parsing</li>
<li><code>dfs="yyyy-mm-dd"</code>: <a href="https://docs.julialang.org/en/latest/stdlib/Dates/#Dates.DateFormat" rel="nofollow">Format string</a> for Date parsing</li>
<li><code>locale="english"</code>: Language for parsing dates names, default is english</li>
<li><code>tables=false</code>: Return <code>Tables</code> interface compatible MatrixTable if <code>true</code></li>
<li><code>dfheader=false</code>: <code>dfheader=true</code> is shortform for <code>tables=true, header=true</code></li>
<li><code>missingstring="na"</code>: How missing values are represented, default is <code>"na"</code></li>
</ul>
<h3><a id="user-content-function-readcsv2" class="anchor" aria-hidden="true" href="#function-readcsv2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function <code>readcsv2()</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="readcsv2(source, T::Type=Any; opts...)
"><pre><code>readcsv2(source, T::Type=Any; opts...)
</code></pre></div>
<p>Equivalent to <code>readdlm2()</code> with delimiter <code>','</code> and <code>decimal='.'</code>.</p>
<h3><a id="user-content-documentation-for-base-readdlm" class="anchor" aria-hidden="true" href="#documentation-for-base-readdlm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation For Base <code>readdlm()</code></h3>
<p>More information about Base functionality and (keyword) arguments - which are also
supported by <code>readdlm2()</code> and <code>readcsv2()</code> - is available in the <a href="https://docs.julialang.org/en/latest/stdlib/DelimitedFiles/#DelimitedFiles.readdlm-Tuple%7BAny,AbstractChar,Type,AbstractChar%7D" rel="nofollow">documentation for readdlm()</a>.</p>
<h3><a id="user-content-compare-default-functionality-readdlm---readdlm2---readcsv2" class="anchor" aria-hidden="true" href="#compare-default-functionality-readdlm---readdlm2---readcsv2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compare Default Functionality <code>readdlm()</code> - <code>readdlm2()</code> - <code>readcsv2()</code></h3>
<table>
<thead>
<tr>
<th align="left">Module</th>
<th align="left">Function</th>
<th align="center">Delimiter</th>
<th align="center">Dec. Mark</th>
<th align="left">Element Type</th>
<th align="left">Ext. Parsing</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">DelimitedFiles</td>
<td align="left"><code>readdlm()</code></td>
<td align="center"><code>' '</code></td>
<td align="center"><code>'.'</code></td>
<td align="left">Float64/Any</td>
<td align="left">No (String)</td>
</tr>
<tr>
<td align="left">ReadWriteDlm2</td>
<td align="left"><code>readdlm2()</code></td>
<td align="center"><code>';'</code></td>
<td align="center"><code>','</code></td>
<td align="left">Any</td>
<td align="left">Yes</td>
</tr>
<tr>
<td align="left">ReadWriteDlm2</td>
<td align="left"><code>readcsv2()</code></td>
<td align="center"><code>','</code></td>
<td align="center"><code>'.'</code></td>
<td align="left">Any</td>
<td align="left">Yes</td>
</tr>
<tr>
<td align="left">ReadWriteDlm2</td>
<td align="left"><code>readdlm2(opt:tables=true)</code></td>
<td align="center"><code>';'</code></td>
<td align="center"><code>','</code></td>
<td align="left">Column spec.</td>
<td align="left">Yes, + col T</td>
</tr>
<tr>
<td align="left">ReadWriteDlm2</td>
<td align="left"><code>readcsv2(opt:tables=true)</code></td>
<td align="center"><code>','</code></td>
<td align="center"><code>'.'</code></td>
<td align="left">Column spec.</td>
<td align="left">Yes, + col T</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-function-writedlm2" class="anchor" aria-hidden="true" href="#function-writedlm2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function <code>writedlm2()</code></h2>
<p>Write <code>A</code> (a vector, matrix, or an iterable collection of iterable rows, a
<code>Tables</code> source) as text to <code>f</code> (either a filename or an IO stream). The columns
are separated by <code>';'</code>, another <code>delim</code> (Char or String) can be defined.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="writedlm2(f, A; options...)
writedlm2(f, A, delim; options...)
"><pre><code>writedlm2(f, A; options...)
writedlm2(f, A, delim; options...)
</code></pre></div>
<p>By default, a pre-processing of values takes place. Before writing as strings,
decimal marks are changed from <code>'.'</code> to <code>','</code>.
With a keyword argument another decimal mark can be defined.
To switch off this pre-processing set: <code>decimal='.'</code>.</p>
<p>In <code>writedlm2()</code> the output format for <code>Date</code> and <code>DateTime</code> data can be
defined with format strings. Defaults are the ISO formats. Day (<code>E</code>, <code>e</code>) and
month (<code>U</code>, <code>u</code>) names are written in the <code>locale</code> language. For writing
<code>Complex</code> numbers the imaginary component suffix can be selected with the
<code>imsuffix=</code> keyword argument.</p>
<h3><a id="user-content-additional-keyword-arguments-writedlm2" class="anchor" aria-hidden="true" href="#additional-keyword-arguments-writedlm2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Additional Keyword Arguments <code>writedlm2()</code></h3>
<ul>
<li><code>decimal=','</code>: Character for writing decimal marks, default is a comma</li>
<li><code>dtfs="yyyy-mm-ddTHH:MM:SS.s"</code>: <a href="https://docs.julialang.org/en/latest/stdlib/Dates/#Dates.DateFormat" rel="nofollow">Format string</a>,  DateTime write format</li>
<li><code>dfs="yyyy-mm-dd"</code>: <a href="https://docs.julialang.org/en/latest/stdlib/Dates/#Dates.DateFormat" rel="nofollow">Format string</a>, Date write format</li>
<li><code>locale="english"</code>: Language for writing date names, default is english</li>
<li><code>imsuffix="im"</code>: Complex - imaginary component suffix <code>"im"</code>(=default), <code>"i"</code> or <code>"j"</code></li>
<li><code>missingstring="na"</code>: How missing values are written, default is <code>"na"</code></li>
</ul>
<h3><a id="user-content-function-writecsv2" class="anchor" aria-hidden="true" href="#function-writecsv2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function <code>writecsv2()</code></h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="writecsv2(f, A; opts...)
"><pre><code>writecsv2(f, A; opts...)
</code></pre></div>
<p>Equivalent to <code>writedlm2()</code> with fixed delimiter <code>','</code> and <code>decimal='.'</code>.</p>
<h3><a id="user-content-compare-default-functionality-writedlm---writedlm2---writecsv2" class="anchor" aria-hidden="true" href="#compare-default-functionality-writedlm---writedlm2---writecsv2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compare Default Functionality <code>writedlm()</code> - <code>writedlm2()</code> - <code>writecsv2()</code></h3>
<table>
<thead>
<tr>
<th align="left">Module</th>
<th align="left">Function</th>
<th align="center">Delimiter</th>
<th align="center">Decimal Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">DelimitedFiles</td>
<td align="left"><code>writedlm()</code></td>
<td align="center"><code>'\t'</code></td>
<td align="center"><code>'.'</code></td>
</tr>
<tr>
<td align="left">ReadWriteDlm2</td>
<td align="left"><code>writedlm2()</code></td>
<td align="center"><code>';'</code></td>
<td align="center"><code>','</code></td>
</tr>
<tr>
<td align="left">ReadWriteDlm2</td>
<td align="left"><code>writecsv2()</code></td>
<td align="center"><code>','</code></td>
<td align="center"><code>'.'</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More Examples</h2>
<h4><a id="user-content-writecsv2-and-readcsv2" class="anchor" aria-hidden="true" href="#writecsv2-and-readcsv2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>writecsv2()</code> And <code>readcsv2()</code></h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReadWriteDlm2

julia&gt; a = Any[1 complex(1.5,2.7);1.0 1//3];   # create array with: Int, Complex, Float64 and Rational type

julia&gt; writecsv2(&quot;test.csv&quot;, a)                # test.csv(decimal dot): &quot;1,1.5+2.7im\n1.0,1//3\n&quot;

julia&gt; readcsv2(&quot;test.csv&quot;)                    # read CSV data: All four types are parsed correctly!
2×2 Array{Any,2}:
 1    1.5+2.7im
 1.0    1//3
"><pre><code>julia&gt; using ReadWriteDlm2

julia&gt; a = Any[1 complex(1.5,2.7);1.0 1//3];   # create array with: Int, Complex, Float64 and Rational type

julia&gt; writecsv2("test.csv", a)                # test.csv(decimal dot): "1,1.5+2.7im\n1.0,1//3\n"

julia&gt; readcsv2("test.csv")                    # read CSV data: All four types are parsed correctly!
2×2 Array{Any,2}:
 1    1.5+2.7im
 1.0    1//3
</code></pre></div>
<h4><a id="user-content-writedlm2-and-readdlm2-with-special-decimal" class="anchor" aria-hidden="true" href="#writedlm2-and-readdlm2-with-special-decimal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>writedlm2()</code> And <code>readdlm2()</code> With Special <code>decimal=</code></h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReadWriteDlm2

julia&gt; a = Float64[1.1 1.2;2.1 2.2]
2×2 Array{Float64,2}:
 1.1  1.2
 2.1  2.2

julia&gt; writedlm2(&quot;test.csv&quot;, a; decimal='€')     # '€' is decimal Char in 'test.csv'

julia&gt; readdlm2(&quot;test.csv&quot;, Float64; decimal='€')      # a) standard: use keyword argument
2×2 Array{Float64,2}:
 1.1  1.2
 2.1  2.2

julia&gt; readdlm2(&quot;test.csv&quot;, Float64; rs=(r&quot;(\d)€(\d)&quot;, s&quot;\1.\2&quot;))    # b) more flexible: rs-Regex-Tupel
2×2 Array{Float64,2}:
 1.1  1.2
 2.1  2.2
"><pre><code>julia&gt; using ReadWriteDlm2

julia&gt; a = Float64[1.1 1.2;2.1 2.2]
2×2 Array{Float64,2}:
 1.1  1.2
 2.1  2.2

julia&gt; writedlm2("test.csv", a; decimal='€')     # '€' is decimal Char in 'test.csv'

julia&gt; readdlm2("test.csv", Float64; decimal='€')      # a) standard: use keyword argument
2×2 Array{Float64,2}:
 1.1  1.2
 2.1  2.2

julia&gt; readdlm2("test.csv", Float64; rs=(r"(\d)€(\d)", s"\1.\2"))    # b) more flexible: rs-Regex-Tupel
2×2 Array{Float64,2}:
 1.1  1.2
 2.1  2.2
</code></pre></div>
<h4><a id="user-content-writedlm2-and-readdlm2-with-unionmissing-float64" class="anchor" aria-hidden="true" href="#writedlm2-and-readdlm2-with-unionmissing-float64"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>writedlm2()</code> And <code>readdlm2()</code> With <code>Union{Missing, Float64}</code></h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReadWriteDlm2

julia&gt; a = Union{Missing, Float64}[1.1 0/0;missing 2.2;1/0 -1/0]
3×2 Array{Union{Missing, Float64},2}:
   1.1        NaN
    missing     2.2
 Inf         -Inf

julia&gt; writedlm2(&quot;test.csv&quot;, a; missingstring=&quot;???&quot;)     # use &quot;???&quot; for missing data

julia&gt; read(&quot;test.csv&quot;, String)
&quot;1,1;NaN\n???;2,2\nInf;-Inf\n&quot;

julia&gt; readdlm2(&quot;test.csv&quot;, Union{Missing, Float64}; missingstring=&quot;???&quot;)
3×2 Array{Union{Missing, Float64},2}:
   1.1        NaN
    missing     2.2
 Inf         -Inf
"><pre><code>julia&gt; using ReadWriteDlm2

julia&gt; a = Union{Missing, Float64}[1.1 0/0;missing 2.2;1/0 -1/0]
3×2 Array{Union{Missing, Float64},2}:
   1.1        NaN
    missing     2.2
 Inf         -Inf

julia&gt; writedlm2("test.csv", a; missingstring="???")     # use "???" for missing data

julia&gt; read("test.csv", String)
"1,1;NaN\n???;2,2\nInf;-Inf\n"

julia&gt; readdlm2("test.csv", Union{Missing, Float64}; missingstring="???")
3×2 Array{Union{Missing, Float64},2}:
   1.1        NaN
    missing     2.2
 Inf         -Inf
</code></pre></div>
<h4><a id="user-content-date-and-datetime-with-localefrench" class="anchor" aria-hidden="true" href="#date-and-datetime-with-localefrench"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Date</code> And <code>DateTime</code> With <code>locale="french"</code></h4>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReadWriteDlm2, Dates

julia&gt; Dates.LOCALES[&quot;french&quot;] = Dates.DateLocale(
           [&quot;janvier&quot;, &quot;février&quot;, &quot;mars&quot;, &quot;avril&quot;, &quot;mai&quot;, &quot;juin&quot;,
               &quot;juillet&quot;, &quot;août&quot;, &quot;septembre&quot;, &quot;octobre&quot;, &quot;novembre&quot;, &quot;décembre&quot;],
           [&quot;janv&quot;, &quot;févr&quot;, &quot;mars&quot;, &quot;avril&quot;, &quot;mai&quot;, &quot;juin&quot;,
               &quot;juil&quot;, &quot;août&quot;, &quot;sept&quot;, &quot;oct&quot;, &quot;nov&quot;, &quot;déc&quot;],
           [&quot;lundi&quot;, &quot;mardi&quot;, &quot;mercredi&quot;, &quot;jeudi&quot;, &quot;vendredi&quot;, &quot;samedi&quot;, &quot;dimanche&quot;],
           [&quot;lu&quot;, &quot;ma&quot;, &quot;me&quot;, &quot;je&quot;, &quot;ve&quot;, &quot;sa&quot;, &quot;di&quot;],
           );

julia&gt; a = hcat([Date(2017,1,1), DateTime(2017,1,1,5,59,1,898), 1, 1.0, &quot;text&quot;])
5x1 Array{Any,2}:
  2017-01-01
  2017-01-01T05:59:01.898
 1
 1.0
  &quot;text&quot;

julia&gt; writedlm2(&quot;test.csv&quot;, a; dfs=&quot;E, d.U yyyy&quot;, dtfs=&quot;e, d.u yyyy H:M:S,s&quot;, locale=&quot;french&quot;)

julia&gt; read(&quot;test.csv&quot;, String)  # to see what have been written in &quot;test.csv&quot; file
&quot;dimanche, 1.janvier 2017\ndi, 1.janv 2017 5:59:1,898\n1\n1,0\ntext\n&quot;

julia&gt; readdlm2(&quot;test.csv&quot;; dfs=&quot;E, d.U yyyy&quot;, dtfs=&quot;e, d.u yyyy H:M:S,s&quot;, locale=&quot;french&quot;)
5×1 Array{Any,2}:
  2017-01-01
  2017-01-01T05:59:01.898
 1
 1.0
  &quot;text&quot;
"><pre><code>julia&gt; using ReadWriteDlm2, Dates

julia&gt; Dates.LOCALES["french"] = Dates.DateLocale(
           ["janvier", "février", "mars", "avril", "mai", "juin",
               "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
           ["janv", "févr", "mars", "avril", "mai", "juin",
               "juil", "août", "sept", "oct", "nov", "déc"],
           ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"],
           ["lu", "ma", "me", "je", "ve", "sa", "di"],
           );

julia&gt; a = hcat([Date(2017,1,1), DateTime(2017,1,1,5,59,1,898), 1, 1.0, "text"])
5x1 Array{Any,2}:
  2017-01-01
  2017-01-01T05:59:01.898
 1
 1.0
  "text"

julia&gt; writedlm2("test.csv", a; dfs="E, d.U yyyy", dtfs="e, d.u yyyy H:M:S,s", locale="french")

julia&gt; read("test.csv", String)  # to see what have been written in "test.csv" file
"dimanche, 1.janvier 2017\ndi, 1.janv 2017 5:59:1,898\n1\n1,0\ntext\n"

julia&gt; readdlm2("test.csv"; dfs="E, d.U yyyy", dtfs="e, d.u yyyy H:M:S,s", locale="french")
5×1 Array{Any,2}:
  2017-01-01
  2017-01-01T05:59:01.898
 1
 1.0
  "text"
</code></pre></div>
<h4><a id="user-content-tables-interface-example-with-dataframes" class="anchor" aria-hidden="true" href="#tables-interface-example-with-dataframes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>Tables</code>-Interface Example With <code>DataFrames</code></h4>
<p>See <a href="https://github.com/JuliaData/DataFrames.jl">-&gt; <code>DataFrames</code></a> for installation and more information.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReadWriteDlm2, Dates, DataFrames, Statistics
"><pre><code>julia&gt; using ReadWriteDlm2, Dates, DataFrames, Statistics
</code></pre></div>
<h5><a id="user-content-write-csv-tables--dataframes-compared-with-array" class="anchor" aria-hidden="true" href="#write-csv-tables--dataframes-compared-with-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Write CSV: <code>Tables &amp; DataFrames</code> compared with <code>Array</code></h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; a = [&quot;date&quot; &quot;value_1&quot; &quot;value_2&quot;;              # Create Array `a`
            Date(2017,1,1) 1.4 2;
            Date(2017,1,2) 1.8 3;
            nothing missing 4]
4×3 Array{Any,2}:
 &quot;date&quot;       &quot;value_1&quot;   &quot;value_2&quot;
 2017-01-01  1.4         2
 2017-01-02  1.8         3
 nothing      missing    4

julia&gt; df = DataFrame(                                # Create DataFrame `df`
    date = [Date(2017,1,1), Date(2017,1,2), nothing],
    value_1 = [1.4, 1.8, missing],
    value_2 = [2, 3, 4]
    )
3×3 DataFrame
│ Row │ date       │ value_1  │ value_2 │
│     │ Union…     │ Float64⍰ │ Int64   │
├─────┼────────────┼──────────┼─────────┤
│ 1   │ 2017-01-01 │ 1.4      │ 2       │
│ 2   │ 2017-01-02 │ 1.8      │ 3       │
│ 3   │            │ missing  │ 4       │

julia&gt; writedlm2(&quot;testa_com.csv&quot;, a)     # decimal comma: write array a

julia&gt; writedlm2(&quot;testdf_com.csv&quot;, df)   # decimal comma: write DataFrame df

julia&gt; read(&quot;testa_com.csv&quot;, String) ==  # decimal comma: a.csv == df.csv
       read(&quot;testdf_com.csv&quot;, String) ==
       &quot;date;value_1;value_2\n2017-01-01;1,4;2\n2017-01-02;1,8;3\nnothing;na;4\n&quot;
true

julia&gt; writecsv2(&quot;testa_dot.csv&quot;, a)     # decimal dot: write array a

julia&gt; writecsv2(&quot;testdf_dot.csv&quot;, df)   # decimal dot: write DataFrame df

julia&gt; read(&quot;testa_dot.csv&quot;, String) ==  # decimal dot: a.csv == df.csv
       read(&quot;testdf_dot.csv&quot;, String) ==
       &quot;date,value_1,value_2\n2017-01-01,1.4,2\n2017-01-02,1.8,3\nnothing,na,4\n&quot;
true

"><pre><code>julia&gt; a = ["date" "value_1" "value_2";              # Create Array `a`
            Date(2017,1,1) 1.4 2;
            Date(2017,1,2) 1.8 3;
            nothing missing 4]
4×3 Array{Any,2}:
 "date"       "value_1"   "value_2"
 2017-01-01  1.4         2
 2017-01-02  1.8         3
 nothing      missing    4

julia&gt; df = DataFrame(                                # Create DataFrame `df`
    date = [Date(2017,1,1), Date(2017,1,2), nothing],
    value_1 = [1.4, 1.8, missing],
    value_2 = [2, 3, 4]
    )
3×3 DataFrame
│ Row │ date       │ value_1  │ value_2 │
│     │ Union…     │ Float64⍰ │ Int64   │
├─────┼────────────┼──────────┼─────────┤
│ 1   │ 2017-01-01 │ 1.4      │ 2       │
│ 2   │ 2017-01-02 │ 1.8      │ 3       │
│ 3   │            │ missing  │ 4       │

julia&gt; writedlm2("testa_com.csv", a)     # decimal comma: write array a

julia&gt; writedlm2("testdf_com.csv", df)   # decimal comma: write DataFrame df

julia&gt; read("testa_com.csv", String) ==  # decimal comma: a.csv == df.csv
       read("testdf_com.csv", String) ==
       "date;value_1;value_2\n2017-01-01;1,4;2\n2017-01-02;1,8;3\nnothing;na;4\n"
true

julia&gt; writecsv2("testa_dot.csv", a)     # decimal dot: write array a

julia&gt; writecsv2("testdf_dot.csv", df)   # decimal dot: write DataFrame df

julia&gt; read("testa_dot.csv", String) ==  # decimal dot: a.csv == df.csv
       read("testdf_dot.csv", String) ==
       "date,value_1,value_2\n2017-01-01,1.4,2\n2017-01-02,1.8,3\nnothing,na,4\n"
true

</code></pre></div>
<h5><a id="user-content-read-csv-using-tables-interface-and-create-a-dataframe" class="anchor" aria-hidden="true" href="#read-csv-using-tables-interface-and-create-a-dataframe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Read CSV: Using <code>Tables</code> interface and create a <code>DataFrame</code></h5>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
julia&gt; df2 = DataFrame(readdlm2(&quot;testdf_com.csv&quot;, header=true, tables=true))
3×3 DataFrame
│ Row │ date       │ value_1  │ value_2 │
│     │ Union…     │ Float64⍰ │ Int64   │
├─────┼────────────┼──────────┼─────────┤
│ 1   │ 2017-01-01 │ 1.4      │ 2       │
│ 2   │ 2017-01-02 │ 1.8      │ 3       │
│ 3   │            │ missing  │ 4       │

julia&gt; mean(skipmissing(df2[!, :value_1]))
1.6

julia&gt; mean(df2[!, :value_2])
3.0
"><pre><code>
julia&gt; df2 = DataFrame(readdlm2("testdf_com.csv", header=true, tables=true))
3×3 DataFrame
│ Row │ date       │ value_1  │ value_2 │
│     │ Union…     │ Float64⍰ │ Int64   │
├─────┼────────────┼──────────┼─────────┤
│ 1   │ 2017-01-01 │ 1.4      │ 2       │
│ 2   │ 2017-01-02 │ 1.8      │ 3       │
│ 3   │            │ missing  │ 4       │

julia&gt; mean(skipmissing(df2[!, :value_1]))
1.6

julia&gt; mean(df2[!, :value_2])
3.0
</code></pre></div>
</article></div>