<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-drakelcmtypes" class="anchor" aria-hidden="true" href="#drakelcmtypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DrakeLCMTypes</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaRobotics/DrakeLCMTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b3f412175273361d49da9b165db803d7188ea1e88512a7e0db22f9b49d10b83/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961526f626f746963732f4472616b654c434d54797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaRobotics/DrakeLCMTypes.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaRobotics/DrakeLCMTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dd16adcb0a8d5dd37a5c38989934dd5e016ed6a03fb468dd61015191f5be98c4/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f4472616b654c434d54797065732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaRobotics/DrakeLCMTypes.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements the <a href="http://lcm-proj.github.io/" rel="nofollow">LCM</a> type definitions from <a href="http://drake.mit.edu/" rel="nofollow">Drake</a> in Julia using <a href="https://github.com/JuliaRobotics/LCMCore.jl">LCMCore.jl</a>. Each lcmtype has a matching native Julia type with associated <code>encode()</code> and <code>decode()</code> methods.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DrakeLCMTypes, LCMCore

msg = polynomial_t()
msg.timestamp = 12345
msg.num_coefficients = 4
msg.coefficients = [1, 0, 2, 5]  # 1 + 0x + 2x^2 + 5x^3
bytes = encode(msg)

decoded = decode(bytes, polynomial_t)
@assert decoded.timestamp == msg.timestamp
@assert decoded.num_coefficients == msg.num_coefficients
@assert decoded.coefficients == msg.coefficients"><pre><span class="pl-k">using</span> DrakeLCMTypes, LCMCore

msg <span class="pl-k">=</span> <span class="pl-c1">polynomial_t</span>()
msg<span class="pl-k">.</span>timestamp <span class="pl-k">=</span> <span class="pl-c1">12345</span>
msg<span class="pl-k">.</span>num_coefficients <span class="pl-k">=</span> <span class="pl-c1">4</span>
msg<span class="pl-k">.</span>coefficients <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>]  <span class="pl-c"><span class="pl-c">#</span> 1 + 0x + 2x^2 + 5x^3</span>
bytes <span class="pl-k">=</span> <span class="pl-c1">encode</span>(msg)

decoded <span class="pl-k">=</span> <span class="pl-c1">decode</span>(bytes, polynomial_t)
<span class="pl-c1">@assert</span> decoded<span class="pl-k">.</span>timestamp <span class="pl-k">==</span> msg<span class="pl-k">.</span>timestamp
<span class="pl-c1">@assert</span> decoded<span class="pl-k">.</span>num_coefficients <span class="pl-k">==</span> msg<span class="pl-k">.</span>num_coefficients
<span class="pl-c1">@assert</span> decoded<span class="pl-k">.</span>coefficients <span class="pl-k">==</span> msg<span class="pl-k">.</span>coefficients</pre></div>
<h1 dir="auto"><a id="user-content-exported-types" class="anchor" aria-hidden="true" href="#exported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported Types</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="body_motion_data_t
body_wrench_data_t
drake_signal_t
driving_control_cmd_t
external_force_torque_t
foot_flag_t
force_torque_t
joint_pd_override_t
piecewise_polynomial_t
polynomial_t
polynomial_matrix_t
qp_controller_input_t
quadrotor_input_t
quadrotor_output_t
robot_state_t
scope_data_t
simulation_command_t
support_data_t
whole_body_data_t
zmp_com_observer_state_t
zmp_data_t"><pre>body_motion_data_t
body_wrench_data_t
drake_signal_t
driving_control_cmd_t
external_force_torque_t
foot_flag_t
force_torque_t
joint_pd_override_t
piecewise_polynomial_t
polynomial_t
polynomial_matrix_t
qp_controller_input_t
quadrotor_input_t
quadrotor_output_t
robot_state_t
scope_data_t
simulation_command_t
support_data_t
whole_body_data_t
zmp_com_observer_state_t
zmp_data_t</pre></div>
</article></div>