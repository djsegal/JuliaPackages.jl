<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sortmerge" class="anchor" aria-hidden="true" href="#sortmerge"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SortMerge</h1>
<p dir="auto"><a href="https://travis-ci.org/gcalderone/SortMerge.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/929e6f518859be9fc9ce26b80077da8e7773702b5372670532dc917ebeb695d4/68747470733a2f2f7472617669732d63692e6f72672f6763616c6465726f6e652f536f72744d657267652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/gcalderone/SortMerge.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-a-julia-implementation-of-the-sort-merge-algorithm" class="anchor" aria-hidden="true" href="#a-julia-implementation-of-the-sort-merge-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A Julia implementation of the Sort-merge algorithm.</h2>
<p dir="auto">The <a href="https://en.wikipedia.org/wiki/Sort-merge_join" rel="nofollow">Sort-merge join</a> algorithm allows to <strong>quickly</strong> find the matching pairs in two separate arrays or collections.  The best performances are obtained when the input data are already sorted, but the package is able to sort the data if they are not.</p>
<p dir="auto">The algorithm works out of the box with arrays of real numbers, but it can also be used with any data type stored in any type of container.  Also, it can handle customized sorting and matching criteria.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;SortMerge&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SortMerge<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic usage</h2>
<p dir="auto">Consider the following vectors:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = [2,3,2,5,7,2,9,9,10,12]
B = [2,1,7,7,4,6,10,11]"><pre>A <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">7</span>,<span class="pl-c1">2</span>,<span class="pl-c1">9</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>,<span class="pl-c1">12</span>]
B <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">6</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>]</pre></div>
<p dir="auto">The common elements can be found as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SortMerge
j = sortmerge(A, B)"><pre><span class="pl-k">using</span> SortMerge
j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(A, B)</pre></div>
<p dir="auto">The value returned by the <code>sortmerge</code> function implements the <code>AbstractArray</code> interface, hence it can be used as a common <code>Matrix{Int}</code> containing the indices of the matching pairs, e.g:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="println(&quot;Indices of matched pairs:&quot;)
display([j[1] j[2]])
println(&quot;Matched pairs:&quot;)
display([A[j[1]] B[j[2]]])"><pre><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Indices of matched pairs:<span class="pl-pds">"</span></span>)
<span class="pl-c1">display</span>([j[<span class="pl-c1">1</span>] j[<span class="pl-c1">2</span>]])
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Matched pairs:<span class="pl-pds">"</span></span>)
<span class="pl-c1">display</span>([A[j[<span class="pl-c1">1</span>]] B[j[<span class="pl-c1">2</span>]]])</pre></div>
<p dir="auto">or, equivalently:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="println(&quot;Indices of matched pairs:&quot;)
for (i1, i2) in zip(j)
    println(i1, &quot;  &quot;, i2)
end
println(&quot;Matched pairs:&quot;)
for (i1, i2) in zip(j)
    println(A[i1], &quot;  &quot;, B[i2])
end"><pre><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Indices of matched pairs:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> (i1, i2) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(j)
    <span class="pl-c1">println</span>(i1, <span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-pds">"</span></span>, i2)
<span class="pl-k">end</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Matched pairs:<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> (i1, i2) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(j)
    <span class="pl-c1">println</span>(A[i1], <span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-pds">"</span></span>, B[i2])
<span class="pl-k">end</span></pre></div>
<p dir="auto">The number of times each element in the input array has been matched can be retrieved using the <code>countmatch</code> function, returning a <code>Vector{Int}</code> whose length is the same as the input array and whose elements are the multiplicity of the matched entries:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cm = countmatch(j, 1)
for i in 1:length(A)
    println(&quot;Element at index $i ($(A[i])) has been matched $(cm[i]) times&quot;)
end"><pre>cm <span class="pl-k">=</span> <span class="pl-c1">countmatch</span>(j, <span class="pl-c1">1</span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(A)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Element at index <span class="pl-v">$i</span> (<span class="pl-v">$(A[i])</span>) has been matched <span class="pl-v">$(cm[i])</span> times<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Analogously, for the second array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cm = countmatch(j, 2)
for i in 1:length(B)
    println(&quot;Element at index $i ($(B[i])) has been matched $(cm[i]) times&quot;)
end"><pre>cm <span class="pl-k">=</span> <span class="pl-c1">countmatch</span>(j, <span class="pl-c1">2</span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(B)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Element at index <span class="pl-v">$i</span> (<span class="pl-v">$(B[i])</span>) has been matched <span class="pl-v">$(cm[i])</span> times<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The unmatched entries can be retrieved as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="println(&quot;Unmatched entries in array 1:&quot;)
println(A[countmatch(j, 1) .== 0])
println(&quot;Unmatched entries in array 2:&quot;)
println(B[countmatch(j, 2) .== 0])"><pre><span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Unmatched entries in array 1:<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(A[<span class="pl-c1">countmatch</span>(j, <span class="pl-c1">1</span>) <span class="pl-k">.==</span> <span class="pl-c1">0</span>])
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Unmatched entries in array 2:<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(B[<span class="pl-c1">countmatch</span>(j, <span class="pl-c1">2</span>) <span class="pl-k">.==</span> <span class="pl-c1">0</span>])</pre></div>
<p dir="auto">A more computationally demanding example is as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nn = 10_000_000
A = rand(1:nn, nn);
B = rand(1:nn, nn);
j = sortmerge(A, B);
println(&quot;Check matching: &quot;, sum(abs.(A[j[1]] .- B[j[2]])) == 0)"><pre>nn <span class="pl-k">=</span> <span class="pl-c1">10_000_000</span>
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>nn, nn);
B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>nn, nn);
j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(A, B);
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Check matching: <span class="pl-pds">"</span></span>, <span class="pl-c1">sum</span>(<span class="pl-c1">abs</span>.(A[j[<span class="pl-c1">1</span>]] <span class="pl-k">.-</span> B[j[<span class="pl-c1">2</span>]])) <span class="pl-k">==</span> <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">where the purpose of the last line is just to perform a simple check on the matched pairs.</p>
<p dir="auto">The default <code>show(j)</code> method reports a few details of the matching process. E.g., for the previous example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Input 1:       632368 /      1000000  ( 63.24%)  -  max mult. 10
Input 2:       632449 /      1000000  ( 63.24%)  -  max mult. 8
Output :      1000377"><pre class="notranslate"><code>Input 1:       632368 /      1000000  ( 63.24%)  -  max mult. 10
Input 2:       632449 /      1000000  ( 63.24%)  -  max mult. 8
Output :      1000377
</code></pre></div>
<p dir="auto">The lines marked with <code>Input 1</code> and <code>Input 2</code> report, respectively:</p>
<ul dir="auto">
<li>the number of indices for which a matching pair has been found;</li>
<li>the total number of elements in input array;</li>
<li>the fraction of indices for which a matching pair has been found;</li>
<li>the maximum multiplicity;</li>
</ul>
<p dir="auto">The last line reports the number of matched pairs in the output.</p>
<p dir="auto">A significant amount of time is spent sorting the input arrays, hence the algorithm will provide much better performances if the arrays are already sorted.  Since the order is so important, and it is calculated during a call to <code>sortmerge</code>, it will not be thrown away but returned in the results.  Hence if we are going to call again <code>sortmerge</code> we can take advantage of the previous calculation to speed up calculations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="j = sortmerge(A, B, sort1=sortperm(j, 1), sort2=sortperm(j, 2));"><pre>j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(A, B, sort1<span class="pl-k">=</span><span class="pl-c1">sortperm</span>(j, <span class="pl-c1">1</span>), sort2<span class="pl-k">=</span><span class="pl-c1">sortperm</span>(j, <span class="pl-c1">2</span>));</pre></div>
<p dir="auto">The permutation vector that puts <code>A</code> and <code>B</code> in sorted order are retrieved with the <code>sortperm</code> function, and passed through the <code>sort1</code> and <code>sort2</code> keywords.</p>
<p dir="auto">Finally, you will get an extra boost performance if the input arrays are already sorted, i.e.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sortedA = A[sortperm(j, 1)];
sortedB = B[sortperm(j, 2)];
j = sortmerge(sortedA, sortedB, sorted=true);"><pre>sortedA <span class="pl-k">=</span> A[<span class="pl-c1">sortperm</span>(j, <span class="pl-c1">1</span>)];
sortedB <span class="pl-k">=</span> B[<span class="pl-c1">sortperm</span>(j, <span class="pl-c1">2</span>)];
j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(sortedA, sortedB, sorted<span class="pl-k">=</span><span class="pl-c1">true</span>);</pre></div>
<p dir="auto">(the <code>sorted=true</code> keyword tells <code>sortmerge</code> that the input arrays are already sorted).</p>
<h2 dir="auto"><a id="user-content-handling-multiple-matched-entries" class="anchor" aria-hidden="true" href="#handling-multiple-matched-entries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Handling multiple matched entries</h2>
<p dir="auto">The <code>multimatch</code> function allows to extract matching pairs with a given multiplicity.  E.g., to find the matched pairs whose index in the <strong>first</strong> array occurs twice (multiplicity = 2):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="A = [2,3,2,5,7,2,9,9,10,12]
B = [2,1,7,7,4,6,10,11]
j = sortmerge(A, B)

m = multimatch(j, 1, 2);
display([m[1] m[2]])"><pre>A <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,<span class="pl-c1">7</span>,<span class="pl-c1">2</span>,<span class="pl-c1">9</span>,<span class="pl-c1">9</span>,<span class="pl-c1">10</span>,<span class="pl-c1">12</span>]
B <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">7</span>,<span class="pl-c1">7</span>,<span class="pl-c1">4</span>,<span class="pl-c1">6</span>,<span class="pl-c1">10</span>,<span class="pl-c1">11</span>]
j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(A, B)

m <span class="pl-k">=</span> <span class="pl-c1">multimatch</span>(j, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>);
<span class="pl-c1">display</span>([m[<span class="pl-c1">1</span>] m[<span class="pl-c1">2</span>]])</pre></div>
<p dir="auto">The matched pairs whose index in the <strong>second</strong> array (rather than <strong>first</strong>) occur three times (multiplicity = 3) is obtained as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for (i1, i2) in zip(multimatch(j, 2, 3))
    println(i1, &quot;  &quot;, i2)
end"><pre><span class="pl-k">for</span> (i1, i2) <span class="pl-k">in</span> <span class="pl-c1">zip</span>(<span class="pl-c1">multimatch</span>(j, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>))
    <span class="pl-c1">println</span>(i1, <span class="pl-s"><span class="pl-pds">"</span>  <span class="pl-pds">"</span></span>, i2)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Another facility provided by <code>sortmerge</code> is to separate matching pairs into groups, e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="for group in multimatch(j, 2, 3, group=true)
    println(&quot;The index &quot;, group[2][1], &quot; in the second table matches the following indices in the first:&quot;)
    println(group[1])
end"><pre><span class="pl-k">for</span> group <span class="pl-k">in</span> <span class="pl-c1">multimatch</span>(j, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, group<span class="pl-k">=</span><span class="pl-c1">true</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>The index <span class="pl-pds">"</span></span>, group[<span class="pl-c1">2</span>][<span class="pl-c1">1</span>], <span class="pl-s"><span class="pl-pds">"</span> in the second table matches the following indices in the first:<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(group[<span class="pl-c1">1</span>])
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Advanced usage</h2>
<p dir="auto">As anticipated, the <strong>SortMerge</strong> package can handle any data type stored in any type of container, as well as customized sorting and matching criteria, by providing customized functions for sorting and matching elements.</p>
<p dir="auto">The following sections will provide a few examples.</p>
<h3 dir="auto"><a id="user-content-custom-sorting-function" class="anchor" aria-hidden="true" href="#custom-sorting-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom sorting function</h3>
<p dir="auto">The custom sorting functions must accept three arguments:</p>
<ul dir="auto">
<li>the container;</li>
<li>the index of the first element to be compared;</li>
<li>the index of the second element to be compared;</li>
</ul>
<p dir="auto">and must return a boolean value: <code>true</code> if the first element is smaller than the second, <code>false</code> otherwise.  The <code>sortmerge</code> accepts these functions through the <code>lt1</code>, <code>lt2</code> keywords, to sort the first and second container respectively.</p>
<h3 dir="auto"><a id="user-content-custom-matching-function" class="anchor" aria-hidden="true" href="#custom-matching-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom matching function</h3>
<p dir="auto">The custom matching function must accept at least four arguments:</p>
<ul dir="auto">
<li>the first container;</li>
<li>the second container;</li>
<li>the index in the first container of the element to be compared;</li>
<li>the index in the second container of the element to be compared.</li>
</ul>
<p dir="auto">If the function accepts more than 4 arguments they must be passed as further arguments in the main <code>sortmerge</code> call.  Note that when this function is called the two input containers are already sorted according to the <code>lt1</code> and <code>lt2</code> functions.</p>
<p dir="auto">The return value must be an integer with the following meaning:</p>
<ul dir="auto">
<li><strong>0</strong>: the two elements match;</li>
<li><strong>-1</strong>: the element in the first container do not match with the element in the second container, and will not match with any of the remaining elements in the second container;</li>
<li><strong>1</strong>: the element in the first container do not match with the element in the second container, and will not match with any of the previous elements in the second container;</li>
<li>any other integer number: none of the above applies (<em>missed match</em> case).</li>
</ul>
<p dir="auto">The <strong>-1</strong> and <strong>1</strong> return values are important <em>hints</em> which allows <code>sortmerge</code> to  avoid checking for a match that will never occur, ultimately resulting in very short execution times.  The <em>missed match</em> case (any integer number different from -1, 0 and 1) allows to deal with partial order relations and complex matching criteria.</p>
<p dir="auto">The <code>sortmerge</code> accept this function through the <code>sd</code> (<em>Sign of the Difference</em>) keyword.  The name stem from the fact that for array of numbers this function should simply return the sign of the difference of two numbers.</p>
<h3 dir="auto"><a id="user-content-use-with-data-frames" class="anchor" aria-hidden="true" href="#use-with-data-frames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with <a href="https://github.com/JuliaData/DataFrames.jl">data frames</a></h3>
<p dir="auto">The following example shows how to match two data frames objects, according to the numbers in a specific column:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DataFrames

# Create a data frame with prime numbers
primes = DataFrame(:p =&gt; [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
                          41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])

# ...and another one with random numbers.
nn = 100
numbers = DataFrame(:n =&gt; rand(1:100, nn))

# Search for matching elements in the two dataframes, and print the
# multiplicity of matching prime numbers
j = sortmerge(numbers, primes,
             lt1=(v, i, j) -&gt; (v[i,:n] &lt; v[j,:n]),
             lt2=(v, i, j) -&gt; (v[i,:p] &lt; v[j,:p]),
             sd=(v1, v2, i1, i2) -&gt; (sign(v1[i1,:n] - v2[i2,:p])))

cm = countmatch(j, 2);
for i in 1:nrow(primes)
    println(&quot;Prime number $(primes[i,:p]) has been matched $(cm[i]) times&quot;)
end"><pre><span class="pl-k">using</span> DataFrames

<span class="pl-c"><span class="pl-c">#</span> Create a data frame with prime numbers</span>
primes <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">:p</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">7</span>, <span class="pl-c1">11</span>, <span class="pl-c1">13</span>, <span class="pl-c1">17</span>, <span class="pl-c1">19</span>, <span class="pl-c1">23</span>, <span class="pl-c1">29</span>, <span class="pl-c1">31</span>, <span class="pl-c1">37</span>,
                          <span class="pl-c1">41</span>, <span class="pl-c1">43</span>, <span class="pl-c1">47</span>, <span class="pl-c1">53</span>, <span class="pl-c1">59</span>, <span class="pl-c1">61</span>, <span class="pl-c1">67</span>, <span class="pl-c1">71</span>, <span class="pl-c1">73</span>, <span class="pl-c1">79</span>, <span class="pl-c1">83</span>, <span class="pl-c1">89</span>, <span class="pl-c1">97</span>])

<span class="pl-c"><span class="pl-c">#</span> ...and another one with random numbers.</span>
nn <span class="pl-k">=</span> <span class="pl-c1">100</span>
numbers <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(<span class="pl-c1">:n</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, nn))

<span class="pl-c"><span class="pl-c">#</span> Search for matching elements in the two dataframes, and print the</span>
<span class="pl-c"><span class="pl-c">#</span> multiplicity of matching prime numbers</span>
j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(numbers, primes,
             lt1<span class="pl-k">=</span>(v, i, j) <span class="pl-k">-&gt;</span> (v[i,<span class="pl-c1">:n</span>] <span class="pl-k">&lt;</span> v[j,<span class="pl-c1">:n</span>]),
             lt2<span class="pl-k">=</span>(v, i, j) <span class="pl-k">-&gt;</span> (v[i,<span class="pl-c1">:p</span>] <span class="pl-k">&lt;</span> v[j,<span class="pl-c1">:p</span>]),
             sd<span class="pl-k">=</span>(v1, v2, i1, i2) <span class="pl-k">-&gt;</span> (<span class="pl-c1">sign</span>(v1[i1,<span class="pl-c1">:n</span>] <span class="pl-k">-</span> v2[i2,<span class="pl-c1">:p</span>])))

cm <span class="pl-k">=</span> <span class="pl-c1">countmatch</span>(j, <span class="pl-c1">2</span>);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">nrow</span>(primes)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Prime number <span class="pl-v">$(primes[i,<span class="pl-c1">:p</span>])</span> has been matched <span class="pl-v">$(cm[i])</span> times<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Here we defined two custom <code>lt1</code> and <code>lt2</code> functions to sort the <code>numbers</code> and <code>prime</code> DataFrame respectively, and a custom <code>sd</code> function which uses the appropriate column names (<code>:n</code> and <code>:p</code>) for comparisons.</p>
<h3 dir="auto"><a id="user-content-match-arrays-of-complex-numbers" class="anchor" aria-hidden="true" href="#match-arrays-of-complex-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Match arrays of complex numbers</h3>
<p dir="auto">The following example shows how to match two arrays of complex numbers, according to their distance in the complex plane.  Unlike real numbers, there is no complete order relation for the complex number, hence we must provide a custom sorting criteria.  Among the many possible ones, here we will simply sort the arrays according to their real part.  Also, we will define a custom <code>sd</code> function accepting a fifth argument, namely the <code>threshold</code> distance below which two numbers match.</p>
<p dir="auto">The code is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nn = 1_000_000
a1 = rand(nn) .+ rand(nn) .* im;
a2 = rand(nn) .+ rand(nn) .* im;

lt(v, i, j) = (real(v[i]) &lt; real(v[j]))
function sd(v1, v2, i1, i2, threshold)
    d = (real(v1[i1]) - real(v2[i2])) / threshold
	(abs(d) &gt;= 1)  &amp;&amp;  (return sign(d))
    d = abs(v1[i1] - v2[i2]) / threshold
	(d &lt; 1)  &amp;&amp;  (return 0)
	return 999 # missed match
end
@time j = sortmerge(a1, a2, 10. / nn, lt1=lt, lt2=lt, sd=sd)"><pre>nn <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>
a1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.+</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.*</span> im;
a2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.+</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.*</span> im;

<span class="pl-en">lt</span>(v, i, j) <span class="pl-k">=</span> (<span class="pl-c1">real</span>(v[i]) <span class="pl-k">&lt;</span> <span class="pl-c1">real</span>(v[j]))
<span class="pl-k">function</span> <span class="pl-en">sd</span>(v1, v2, i1, i2, threshold)
    d <span class="pl-k">=</span> (<span class="pl-c1">real</span>(v1[i1]) <span class="pl-k">-</span> <span class="pl-c1">real</span>(v2[i2])) <span class="pl-k">/</span> threshold
	(<span class="pl-c1">abs</span>(d) <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)  <span class="pl-k">&amp;&amp;</span>  (<span class="pl-k">return</span> <span class="pl-c1">sign</span>(d))
    d <span class="pl-k">=</span> <span class="pl-c1">abs</span>(v1[i1] <span class="pl-k">-</span> v2[i2]) <span class="pl-k">/</span> threshold
	(d <span class="pl-k">&lt;</span> <span class="pl-c1">1</span>)  <span class="pl-k">&amp;&amp;</span>  (<span class="pl-k">return</span> <span class="pl-c1">0</span>)
	<span class="pl-k">return</span> <span class="pl-c1">999</span> <span class="pl-c"><span class="pl-c">#</span> missed match</span>
<span class="pl-k">end</span>
<span class="pl-c1">@time</span> j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(a1, a2, <span class="pl-c1">10.</span> <span class="pl-k">/</span> nn, lt1<span class="pl-k">=</span>lt, lt2<span class="pl-k">=</span>lt, sd<span class="pl-k">=</span>sd)</pre></div>
<p dir="auto">Note that since the order relation is partial the <code>sd</code> function will sometimes return a number different from -1, 0 and 1, resulting in the so called <em>missed match</em> condition (return value is 999).</p>
<p dir="auto">You may check that the result is correct by disabling all optimization hints and performing a simple join by comparing <strong>each</strong> element in the first array with <strong>each</strong> element in the second:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@time j = simple_join(a1, a2, (a, b) -&gt; (abs(a-b) &lt; 10. / nn))"><pre><span class="pl-c1">@time</span> j <span class="pl-k">=</span> <span class="pl-c1">simple_join</span>(a1, a2, (a, b) <span class="pl-k">-&gt;</span> (<span class="pl-c1">abs</span>(a<span class="pl-k">-</span>b) <span class="pl-k">&lt;</span> <span class="pl-c1">10.</span> <span class="pl-k">/</span> nn))</pre></div>
<p dir="auto">but be prepared that the execution time will be much longer!</p>
<p dir="auto">Another possible approach is to sort the numbers by their distance from the origin, i.e.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lt(v, i, j) = (abs2(v[i]) &lt; abs2(v[j]))
function sd(v1, v2, i1, i2, threshold)
    d = (abs(v1[i1]) - abs(v2[i2])) / threshold
	(abs(d) &gt;= 1)  &amp;&amp;  (return sign(d))
    d = abs(v1[i1] - v2[i2]) / threshold
	(d &lt; 1)  &amp;&amp;  (return 0)
	return 999 # missed match
end
@time j = sortmerge(a1, a2, 10. / nn, lt1=lt, lt2=lt, sd=sd)"><pre><span class="pl-en">lt</span>(v, i, j) <span class="pl-k">=</span> (<span class="pl-c1">abs2</span>(v[i]) <span class="pl-k">&lt;</span> <span class="pl-c1">abs2</span>(v[j]))
<span class="pl-k">function</span> <span class="pl-en">sd</span>(v1, v2, i1, i2, threshold)
    d <span class="pl-k">=</span> (<span class="pl-c1">abs</span>(v1[i1]) <span class="pl-k">-</span> <span class="pl-c1">abs</span>(v2[i2])) <span class="pl-k">/</span> threshold
	(<span class="pl-c1">abs</span>(d) <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)  <span class="pl-k">&amp;&amp;</span>  (<span class="pl-k">return</span> <span class="pl-c1">sign</span>(d))
    d <span class="pl-k">=</span> <span class="pl-c1">abs</span>(v1[i1] <span class="pl-k">-</span> v2[i2]) <span class="pl-k">/</span> threshold
	(d <span class="pl-k">&lt;</span> <span class="pl-c1">1</span>)  <span class="pl-k">&amp;&amp;</span>  (<span class="pl-k">return</span> <span class="pl-c1">0</span>)
	<span class="pl-k">return</span> <span class="pl-c1">999</span> <span class="pl-c"><span class="pl-c">#</span> missed match</span>
<span class="pl-k">end</span>
<span class="pl-c1">@time</span> j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>(a1, a2, <span class="pl-c1">10.</span> <span class="pl-k">/</span> nn, lt1<span class="pl-k">=</span>lt, lt2<span class="pl-k">=</span>lt, sd<span class="pl-k">=</span>sd)</pre></div>
<p dir="auto">but the performance worsen since <code>abs</code> is slower than <code>real</code>.</p>
<h3 dir="auto"><a id="user-content-match-arrays-of-geographical-coordinates" class="anchor" aria-hidden="true" href="#match-arrays-of-geographical-coordinates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Match arrays of geographical coordinates</h3>
<p dir="auto">The following example shows how to match 2D arrays containing geographical coordinates (latitude and longitude).  We will use the <code>gcirc</code> function in the <a href="https://github.com/JuliaAstro/AstroLib.jl">Astrolib</a> package to calculate the great circle arc distances between two points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="nn = 1_000_000
lat1  = rand(nn) .* 180 .- 90.;
long1 = rand(nn) .* 360;
lat2  = rand(nn) .* 180 .- 90.;
long2 = rand(nn) .* 360;

using AstroLib
lt(v, i, j) = (v[i, 2] &lt; v[j, 2])
function sd(v1, v2, i1, i2, threshold_arcsec)
    threshold_deg = threshold_arcsec / 3600. # [deg]
    d = (v1[i1, 2] - v2[i2, 2]) / threshold_deg
    (abs(d) &gt;= 1)  &amp;&amp;  (return sign(d))
    dd = gcirc(2, v1[i1, 1], v1[i1, 2], v2[i2, 1], v2[i2, 2])
    (dd &lt; threshold_arcsec)  &amp;&amp;  (return 0)
    return 999
end
@time j = sortmerge([lat1 long1], [lat2 long2], lt1=lt, lt2=lt, sd=sd, 1.)"><pre>nn <span class="pl-k">=</span> <span class="pl-c1">1_000_000</span>
lat1  <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.*</span> <span class="pl-c1">180</span> <span class="pl-k">.-</span> <span class="pl-c1">90.</span>;
long1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.*</span> <span class="pl-c1">360</span>;
lat2  <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.*</span> <span class="pl-c1">180</span> <span class="pl-k">.-</span> <span class="pl-c1">90.</span>;
long2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nn) <span class="pl-k">.*</span> <span class="pl-c1">360</span>;

<span class="pl-k">using</span> AstroLib
<span class="pl-en">lt</span>(v, i, j) <span class="pl-k">=</span> (v[i, <span class="pl-c1">2</span>] <span class="pl-k">&lt;</span> v[j, <span class="pl-c1">2</span>])
<span class="pl-k">function</span> <span class="pl-en">sd</span>(v1, v2, i1, i2, threshold_arcsec)
    threshold_deg <span class="pl-k">=</span> threshold_arcsec <span class="pl-k">/</span> <span class="pl-c1">3600.</span> <span class="pl-c"><span class="pl-c">#</span> [deg]</span>
    d <span class="pl-k">=</span> (v1[i1, <span class="pl-c1">2</span>] <span class="pl-k">-</span> v2[i2, <span class="pl-c1">2</span>]) <span class="pl-k">/</span> threshold_deg
    (<span class="pl-c1">abs</span>(d) <span class="pl-k">&gt;=</span> <span class="pl-c1">1</span>)  <span class="pl-k">&amp;&amp;</span>  (<span class="pl-k">return</span> <span class="pl-c1">sign</span>(d))
    dd <span class="pl-k">=</span> <span class="pl-c1">gcirc</span>(<span class="pl-c1">2</span>, v1[i1, <span class="pl-c1">1</span>], v1[i1, <span class="pl-c1">2</span>], v2[i2, <span class="pl-c1">1</span>], v2[i2, <span class="pl-c1">2</span>])
    (dd <span class="pl-k">&lt;</span> threshold_arcsec)  <span class="pl-k">&amp;&amp;</span>  (<span class="pl-k">return</span> <span class="pl-c1">0</span>)
    <span class="pl-k">return</span> <span class="pl-c1">999</span>
<span class="pl-k">end</span>
<span class="pl-c1">@time</span> j <span class="pl-k">=</span> <span class="pl-c1">sortmerge</span>([lat1 long1], [lat2 long2], lt1<span class="pl-k">=</span>lt, lt2<span class="pl-k">=</span>lt, sd<span class="pl-k">=</span>sd, <span class="pl-c1">1.</span>)</pre></div>
</article></div>