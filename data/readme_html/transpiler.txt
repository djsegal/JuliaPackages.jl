<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-transpiler" class="anchor" aria-hidden="true" href="#transpiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Transpiler</h1>
<p><a href="https://travis-ci.org/SimonDanisch/Transpiler.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8f6fc09ef60938e7f28a2f45f1050c3ae12737b/68747470733a2f2f7472617669732d63692e6f72672f53696d6f6e44616e697363682f5472616e7370696c65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SimonDanisch/Transpiler.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/SimonDanisch/Transpiler.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7cc47e384d9fb1301af9ae2f586a8040c812b559/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f53696d6f6e44616e697363682f5472616e7370696c65722e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/SimonDanisch/Transpiler.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/SimonDanisch/Transpiler.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5f7d4b30e86c6c576c8c5aaa0d6400b2651ddfd3/687474703a2f2f636f6465636f762e696f2f6769746875622f53696d6f6e44616e697363682f5472616e7370696c65722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/SimonDanisch/Transpiler.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Tools for working with Julia's typed AST and emiting code for other statically compiled languages.</p>
<p>Transpiling is not the optimal way to emit code for e.g. OpenCL or OpenGL, but it's a nice way to integrate simple user defined Julia functions into a larger framework (e.g. for <a href="https://github.com/JuliaGPU/GPUArrays.jl/">GPUArrays</a>).
The better appraoch is via LLVM, like <a href="https://github.com/JuliaGPU/CUDAnative.jl/">CUDAnative</a>, and using SPIR-V for OpenCL and Vulkan.
Right now it's a nice adhoc solution to get our Julia -&gt; GPU compilation efforts started and the transpilation code is much more appraochable for Julia programmers then diving into the world of LLVM + Julia internals.
Also, the tools developed for this packages (e.g. <a href="https://github.com/SimonDanisch/Sugar.jl">Sugar</a> and <a href="https://github.com/SimonDanisch/Matcha.jl">Matcha</a>) offer a lot of functionality needed for static linting and introspection into Julia's typed AST's.
Another option is to use Julia itself as a transpilation target and implement macros from a typed AST, allowing to do more powerful transformations.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Transpiler<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Transpiler<span class="pl-k">:</span> kernel_source
<span class="pl-k">import</span> Transpiler<span class="pl-k">:</span> cli
<span class="pl-k">using</span> OpenCL

<span class="pl-k">function</span> <span class="pl-en">test</span>(a<span class="pl-k">::</span><span class="pl-c1">T</span>, b) <span class="pl-k">where</span> {T}
    x <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">sin</span>(a) <span class="pl-k">*</span> b) <span class="pl-k">/</span> <span class="pl-c1">T</span>(<span class="pl-c1">10.0</span>)
    y <span class="pl-k">=</span> <span class="pl-c1">T</span>(<span class="pl-c1">33.0</span>)x <span class="pl-k">+</span> <span class="pl-c1">cos</span>(b)
    y <span class="pl-k">*</span> <span class="pl-c1">T</span>(<span class="pl-c1">10.0</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">mapkernel</span>(f, a, b, c)
    gid <span class="pl-k">=</span> cli<span class="pl-k">.</span><span class="pl-c1">get_global_id</span>(<span class="pl-c1">0</span>) <span class="pl-k">+</span> <span class="pl-c1">1</span>
    c[gid] <span class="pl-k">=</span> <span class="pl-c1">f</span>(a[gid], b[gid])
    <span class="pl-k">return</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> types of mapkernel arguments</span>
T <span class="pl-k">=</span> cli<span class="pl-k">.</span>GlobalPointer{Float32}
argtypes <span class="pl-k">=</span> (<span class="pl-c1">typeof</span>(test), T, T, T)
src, method, fname <span class="pl-k">=</span> <span class="pl-c1">kernel_source</span>(mapkernel, argtypes)

<span class="pl-c1">println</span>(src)

<span class="pl-c"><span class="pl-c">#</span> setup OpenCL buffers, queue and context</span>
a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">50_000</span>)
b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">50_000</span>)
device, ctx, queue <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">create_compute_context</span>()
a_buff <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Float32, ctx, (<span class="pl-c1">:r</span>, <span class="pl-c1">:copy</span>), hostbuf<span class="pl-k">=</span>a)
b_buff <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Float32, ctx, (<span class="pl-c1">:r</span>, <span class="pl-c1">:copy</span>), hostbuf<span class="pl-k">=</span>b)
c_buff <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Float32, ctx, <span class="pl-c1">:w</span>, <span class="pl-c1">length</span>(a))

<span class="pl-c"><span class="pl-c">#</span> compile kernel</span>
p <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Program</span>(ctx, source<span class="pl-k">=</span>src) <span class="pl-k">|&gt;</span> cl<span class="pl-k">.</span>build!
k <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Kernel</span>(p, fname)

<span class="pl-c"><span class="pl-c">#</span> call kernel. Accepts kw_args for global and local work size!</span>
<span class="pl-c"><span class="pl-c">#</span> but can also find them out automatically (in a super primitive way)</span>
<span class="pl-c1">queue</span>(k, <span class="pl-c1">size</span>(a), <span class="pl-c1">nothing</span>, test, a_buff, b_buff, c_buff)

r <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">read</span>(queue, c_buff)

<span class="pl-k">if</span> r <span class="pl-k">≈</span> <span class="pl-c1">test</span>.(a, b)
    <span class="pl-c1">info</span>(<span class="pl-s"><span class="pl-pds">"</span>Success!<span class="pl-pds">"</span></span>)
<span class="pl-k">else</span>
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>⁉<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Output:</p>
<div class="highlight highlight-source-c"><pre><span class="pl-c"><span class="pl-c">//</span> dependant type declarations</span>
<span class="pl-k">typedef</span> <span class="pl-k">struct</span> {
<span class="pl-k">float</span> empty; <span class="pl-c"><span class="pl-c">//</span> structs can't be empty</span>
}_1test;

<span class="pl-c"><span class="pl-c">//</span> dependant function declarations</span>
<span class="pl-k">float</span> <span class="pl-en">test_8633297058295171728</span>(<span class="pl-k">float</span> a, <span class="pl-k">float</span> b)
{
    <span class="pl-k">float</span> y;
    <span class="pl-k">float</span> x;
    x = <span class="pl-c1">sqrt</span>(<span class="pl-c1">sin</span>(a) * b) / (<span class="pl-k">float</span>)(<span class="pl-c1">10.0</span>);
    y = (<span class="pl-k">float</span>)(<span class="pl-c1">33.0</span>) * x + <span class="pl-c1">cos</span>(b);
    <span class="pl-k">return</span> y * (<span class="pl-k">float</span>)(<span class="pl-c1">10.0</span>);
}
<span class="pl-c"><span class="pl-c">//</span> Main inner function</span>
__kernel <span class="pl-k">void</span> <span class="pl-en">mapkernel_5672850724456951104</span>(__global <span class="pl-k">const</span> _1test *f, __global <span class="pl-k">float</span> * a, __global <span class="pl-k">float</span> * b, __global <span class="pl-k">float</span> * c)
{
    <span class="pl-k">int</span> gid;
    gid = <span class="pl-c1">get_global_id</span>(<span class="pl-c1">0</span>) + <span class="pl-c1">1</span>;
    <span class="pl-k">float</span> _ssavalue_0;
    _ssavalue_0 = <span class="pl-c1">test_8633297058295171728</span>(a[gid - <span class="pl-c1">1</span>], b[gid - <span class="pl-c1">1</span>]);
    c[gid - <span class="pl-c1">1</span>] = _ssavalue_0;
    ;
}</pre></div>
<h1><a id="user-content-todo--common-issues" class="anchor" aria-hidden="true" href="#todo--common-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO / Common issues</h1>
<ul>
<li>compiling constructor code</li>
<li>Not sure how to transpile <code>Core._apply</code></li>
<li>passing around types and constructing them</li>
<li>better error handling / logging</li>
</ul>
</article></div>