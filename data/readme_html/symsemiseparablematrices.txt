<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symsemiseparablematricesjl" class="anchor" aria-hidden="true" href="#symsemiseparablematricesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymSemiseparableMatrices.jl</h1>
<p dir="auto"><a href="https://github.com/mipals/SymSemiseparableMatrices.jl/actions/workflows/CI.yml"><img src="https://github.com/mipals/SymSemiseparableMatrices.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mipals/SymSemiseparableMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fa84da5197c4f50f3f9e0264cf9722f68b0fc33079250f67c929ce3488b07b1c/68747470733a2f2f636f6465636f762e696f2f67682f6d6970616c732f53796d53656d69736570617261626c654d617472696365732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mipals/SymSemiseparableMatrices.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">A package for efficiently computing with symmetric extended generator representable semiseparable matrices (EGRSS Matrices) and a varient with added diagonal terms. In short this means matrices of the form</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="65e617263047331963cd2773bdb6932a">$$
K = \text{\textbf{tril}}(UV^\top) + \text{\textbf{triu}}\left(VU^\top,1\right), \quad U,V\in\mathbb{R}^{p\times n}
$$</math-renderer></p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="65e617263047331963cd2773bdb6932a">$$
K = \text{\textbf{tril}}(UV^\top) + \text{\textbf{triu}}\left(VU^\top,1\right) + \text{\textbf{diag}}(d), \quad U,V\in\mathbb{R}^{p\times n},\ d\in\mathbb{R}^n
$$</math-renderer></p>
<p dir="auto">All implemented algorithms (multiplication, Cholesky factorization, forward/backward substitution as well as various traces and determinants) scales with <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="65e617263047331963cd2773bdb6932a">$O(p^kn)$</math-renderer>. Since <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="65e617263047331963cd2773bdb6932a">$p \ll n$</math-renderer> this result in very scalable computations.</p>
<p dir="auto">A more in-depth descriptions of the algorithms can be found in [1] or <a href="https://github.com/mipals/SmoothingSplines.jl/blob/master/mt_mikkel_paltorp.pdf">here</a>.</p>
<h2 dir="auto">
<a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Adding the package can be done through</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.7) pkg&gt; add SymSemiseparableMatrices"><pre class="notranslate"><code>(@v1.7) pkg&gt; add SymSemiseparableMatrices
</code></pre></div>
<p dir="auto">First we need to create generators U and V that represent the symmetric matrix, <code>K = tril(UV') + triu(VU',1)</code> as well a test vector <code>x</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SymSemiseparableMatrices
julia&gt; import SymSemiseparableMatrices: spline_kernel
julia&gt; U, V = spline_kernel(Vector(0.1:0.01:1)', 2); # Creating input such that K is PD
julia&gt; K = SymSemiseparableMatrix(U,V); # Symmetric generator representable semiseparable matrix
julia&gt; x = ones(size(K)); # Test vector"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SymSemiseparableMatrices
julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> SymSemiseparableMatrices<span class="pl-k">:</span> spline_kernel
julia<span class="pl-k">&gt;</span> U, V <span class="pl-k">=</span> <span class="pl-c1">spline_kernel</span>(<span class="pl-c1">Vector</span>(<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">1</span>)<span class="pl-k">'</span>, <span class="pl-c1">2</span>); <span class="pl-c"><span class="pl-c">#</span> Creating input such that K is PD</span>
julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">SymSemiseparableMatrix</span>(U,V); <span class="pl-c"><span class="pl-c">#</span> Symmetric generator representable semiseparable matrix</span>
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">size</span>(K)); <span class="pl-c"><span class="pl-c">#</span> Test vector</span></pre></div>
<p dir="auto">We can now compute products with <code>K</code> and <code>K'</code>. The result are the same, since <code>K</code> is symmetric.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; K*x
91×1 Array{Float64,2}:
  0.23508333333333334
  0.28261583333333334
  0.3341535          
  0.3896073333333333 
  0.44888933333333336
  0.5119124999999999 
  ⋮                  
 11.977057499999997  
 12.146079333333331  
 12.31510733333333   
 12.484138499999995  
 12.65317083333333 

julia&gt; K'*x
91×1 Array{Float64,2}:
  0.23508333333333334
  0.28261583333333334
  0.3341535          
  0.3896073333333333 
  0.44888933333333336
  0.5119124999999999 
  ⋮                  
 11.977057499999997  
 12.146079333333331  
 12.31510733333333   
 12.484138499999995  
 12.65317083333333  "><pre>julia<span class="pl-k">&gt;</span> K<span class="pl-k">*</span>x
<span class="pl-c1">91</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.23508333333333334</span>
  <span class="pl-c1">0.28261583333333334</span>
  <span class="pl-c1">0.3341535</span>          
  <span class="pl-c1">0.3896073333333333</span> 
  <span class="pl-c1">0.44888933333333336</span>
  <span class="pl-c1">0.5119124999999999</span> 
  ⋮                  
 <span class="pl-c1">11.977057499999997</span>  
 <span class="pl-c1">12.146079333333331</span>  
 <span class="pl-c1">12.31510733333333</span>   
 <span class="pl-c1">12.484138499999995</span>  
 <span class="pl-c1">12.65317083333333</span> 

julia<span class="pl-k">&gt;</span> K<span class="pl-k">'</span><span class="pl-k">*</span>x
<span class="pl-c1">91</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.23508333333333334</span>
  <span class="pl-c1">0.28261583333333334</span>
  <span class="pl-c1">0.3341535</span>          
  <span class="pl-c1">0.3896073333333333</span> 
  <span class="pl-c1">0.44888933333333336</span>
  <span class="pl-c1">0.5119124999999999</span> 
  ⋮                  
 <span class="pl-c1">11.977057499999997</span>  
 <span class="pl-c1">12.146079333333331</span>  
 <span class="pl-c1">12.31510733333333</span>   
 <span class="pl-c1">12.484138499999995</span>  
 <span class="pl-c1">12.65317083333333</span>  </pre></div>
<p dir="auto">Furthermore from the <code>SymSemiseparableMatrix</code> structure we can efficiently compute the Cholesky factorization as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; L = cholesky(K); # Computing the Cholesky factorization of K
julia&gt; K*(L'\(L\x))
91×1 Array{Float64,2}:
 1.0000000000000036
 0.9999999999999982
 0.9999999999999956
 0.9999999999999944
 0.9999999999999951
 0.999999999999995 
 ⋮                 
 0.9999999999996279
 0.9999999999996153
 0.9999999999996028
 0.9999999999995898
 0.9999999999995764"><pre>julia<span class="pl-k">&gt;</span> L <span class="pl-k">=</span> <span class="pl-c1">cholesky</span>(K); <span class="pl-c"><span class="pl-c">#</span> Computing the Cholesky factorization of K</span>
julia<span class="pl-k">&gt;</span> K<span class="pl-k">*</span>(L<span class="pl-k">'</span><span class="pl-k">\</span>(L<span class="pl-k">\</span>x))
<span class="pl-c1">91</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0000000000000036</span>
 <span class="pl-c1">0.9999999999999982</span>
 <span class="pl-c1">0.9999999999999956</span>
 <span class="pl-c1">0.9999999999999944</span>
 <span class="pl-c1">0.9999999999999951</span>
 <span class="pl-c1">0.999999999999995</span> 
 ⋮                 
 <span class="pl-c1">0.9999999999996279</span>
 <span class="pl-c1">0.9999999999996153</span>
 <span class="pl-c1">0.9999999999996028</span>
 <span class="pl-c1">0.9999999999995898</span>
 <span class="pl-c1">0.9999999999995764</span></pre></div>
<p dir="auto">Now <code>L</code> represents a Cholesky factorization with of form <code>L = tril(UW')</code>, requiring only <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="65e617263047331963cd2773bdb6932a">$O(pn)$</math-renderer> storage.</p>
<p dir="auto">A struct for the dealing with symmetric matrices of the form, <code>K = tril(UV') + triu(VU',1) + diag(d)</code> called <code>DiaSymSemiseparableMatrix</code> is also implemented. The usage is similar to that of <code>DiaSymSemiseparableMatrix</code> and can be created as follows</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; U, V = spline_kernel(Vector(0.1:0.01:1)', 2); # Creating input such that K is PD
julia&gt; K = DiaSymSemiseparableMatrix(U,V,rand(size(U,2)); # Symmetric EGRSS matrix + diagonal"><pre>julia<span class="pl-k">&gt;</span> U, V <span class="pl-k">=</span> <span class="pl-c1">spline_kernel</span>(<span class="pl-c1">Vector</span>(<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">1</span>)<span class="pl-k">'</span>, <span class="pl-c1">2</span>); <span class="pl-c"><span class="pl-c">#</span> Creating input such that K is PD</span>
julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">DiaSymSemiseparableMatrix</span>(U,V,<span class="pl-c1">rand</span>(<span class="pl-c1">size</span>(U,<span class="pl-c1">2</span>)); <span class="pl-c"><span class="pl-c">#</span> Symmetric EGRSS matrix + diagonal</span></pre></div>
<p dir="auto">The Cholesky factorization of this matrix can be computed using <code>cholesky</code>. Note however here that <code>L</code> represents a matrix of the form <code>L = tril(UW',-1) + diag(c)</code></p>
<h2 dir="auto">
<a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<h3 dir="auto">
<a id="user-content-computing-cholesky-factorization-of-k--triluv--triuvu1" class="anchor" aria-hidden="true" href="#computing-cholesky-factorization-of-k--triluv--triuvu1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computing Cholesky factorization of <code>K = tril(UV') + triu(VU',1)</code>
</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://i.imgur.com/NFqfreO.png"><img src="https://i.imgur.com/NFqfreO.png" alt="Scaling of the Cholesky factorization of an SymSemiseparableMatrix matrix" style="max-width: 100%;"></a></p>
<h3 dir="auto">
<a id="user-content-computing-cholesky-factorization-of-k--triluv--triuvu1--diagd" class="anchor" aria-hidden="true" href="#computing-cholesky-factorization-of-k--triluv--triuvu1--diagd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computing Cholesky factorization of <code>K = tril(UV') + triu(VU',1) + diag(d)</code>
</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://i.imgur.com/IuupJSP.png"><img src="https://i.imgur.com/IuupJSP.png" alt="Scaling of the Cholesky factorization of an DiaSymSemiseparableMatrix matrix" style="max-width: 100%;"></a></p>
<h3 dir="auto">
<a id="user-content-solving-linear-systems-using-a-cholesky-factorization-with-the-form-l--triluw" class="anchor" aria-hidden="true" href="#solving-linear-systems-using-a-cholesky-factorization-with-the-form-l--triluw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solving linear systems using a Cholesky factorization with the form <code>L = tril(UW')</code>
</h3>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://i.imgur.com/mYBNTSr.png"><img src="https://i.imgur.com/mYBNTSr.png" alt="Solving a system using the implicit Cholesky factorization" style="max-width: 100%;"></a></p>
<h2 dir="auto">
<a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">[1] M. S. Andersen and T. Chen, “Smoothing Splines and Rank Structured Matrices: Revisiting the Spline Kernel,” SIAM Journal on Matrix Analysis and Applications, 2020.</p>
<p dir="auto">[2] J. Keiner. "Fast Polynomial Transforms." Logos Verlag Berlin, 2011.</p>
</article></div>