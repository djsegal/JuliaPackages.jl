<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-symsemiseparablematricesjl" class="anchor" aria-hidden="true" href="#symsemiseparablematricesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SymSemiseparableMatrices.jl</h1>
<p><a href="https://travis-ci.com/mipals/SymSemiseparableMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9c29f115a0158c351b4c331d4c027dd39b58c75d/68747470733a2f2f7472617669732d63692e636f6d2f6d6970616c732f53796d53656d69736570617261626c654d617472696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mipals/SymSemiseparableMatrices.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mipals/SymSemiseparableMatrices-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a1fed268a116cfbaaf30385448dfb7230b0df11/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6970616c732f53796d53656d69736570617261626c654d617472696365732e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mipals/SymSemiseparableMatrices.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mipals/SymSemiseparableMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6f2999aa6d7afd75c70620fde3a2e65a34a5b25/68747470733a2f2f636f6465636f762e696f2f67682f6d6970616c732f53796d53656d69736570617261626c654d617472696365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mipals/SymSemiseparableMatrices.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/mipals/SymSemiseparableMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b6cec9428161555198c3ec60d3a2088ac7cf26f2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6970616c732f53796d53656d69736570617261626c654d617472696365732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/mipals/SymSemiseparableMatrices.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>A package for efficiently computing with symmetric extended generator representable semiseparable matrices and a variant thereof. In short this means matrices of the form</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d6d6f394d0486be2e67c65bea5341df2d859831b/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6470697b3130307d2673706163653b4b3d5c746578747b5c7465787462667b7472696c7d7d2855565e54292673706163653b2b2673706163653b5c746578747b5c7465787462667b747269757d7d28565e54552c31292c265c71756164253230552c565c696e5c6d61746862627b527d5e7b6e5c74696d6573253230707d"><img src="https://camo.githubusercontent.com/d6d6f394d0486be2e67c65bea5341df2d859831b/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6470697b3130307d2673706163653b4b3d5c746578747b5c7465787462667b7472696c7d7d2855565e54292673706163653b2b2673706163653b5c746578747b5c7465787462667b747269757d7d28565e54552c31292c265c71756164253230552c565c696e5c6d61746862627b527d5e7b6e5c74696d6573253230707d" title="K=\text{\textbf{tril}}(UV^T) + \text{\textbf{triu}}(VU^T,1)" data-canonical-src="https://latex.codecogs.com/svg.latex?\dpi{100}&amp;space;K=\text{\textbf{tril}}(UV^T)&amp;space;+&amp;space;\text{\textbf{triu}}(V^TU,1),&amp;\quad%20U,V\in\mathbb{R}^{n\times%20p}" style="max-width:100%;"></a></p>
<p>as well as</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4727e656b4aca582d75546b54ceeab71d19afb3e/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6470697b3130307d2673706163653b4b3d5c746578747b5c7465787462667b7472696c7d7d2855565e54292673706163653b2b2673706163653b5c746578747b5c7465787462667b7472696c7d7d2856555e542c31292673706163653b2b2673706163653b5c746578747b5c7465787462667b646961677d7d2864292c265c71756164253230552c565c696e5c6d61746862627b527d5e7b6e5c74696d6573253230707d2c2673706163653b645c696e5c6d61746862627b527d5e6e"><img src="https://camo.githubusercontent.com/4727e656b4aca582d75546b54ceeab71d19afb3e/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6470697b3130307d2673706163653b4b3d5c746578747b5c7465787462667b7472696c7d7d2855565e54292673706163653b2b2673706163653b5c746578747b5c7465787462667b7472696c7d7d2856555e542c31292673706163653b2b2673706163653b5c746578747b5c7465787462667b646961677d7d2864292c265c71756164253230552c565c696e5c6d61746862627b527d5e7b6e5c74696d6573253230707d2c2673706163653b645c696e5c6d61746862627b527d5e6e" title="K=\text{\textbf{tril}}(UV^T) + \text{\textbf{tril}}(VU^T,1) + \text{\textbf{diag}}(d)" data-canonical-src="https://latex.codecogs.com/svg.latex?\dpi{100}&amp;space;K=\text{\textbf{tril}}(UV^T)&amp;space;+&amp;space;\text{\textbf{tril}}(VU^T,1)&amp;space;+&amp;space;\text{\textbf{diag}}(d),&amp;\quad%20U,V\in\mathbb{R}^{n\times%20p},&amp;space;d\in\mathbb{R}^n" style="max-width:100%;"></a></p>
<p>All implemented algorithms (multiplication, Cholesky factorization, forward/backward substitution as well as various traces and determinants) run linear in time and memory w.r.t. to the number of data points <code>n</code>.</p>
<p>A more in-depth descriptions of the algorithms can be found in [1] or <a href="https://github.com/mipals/SmoothingSplines.jl/blob/master/mt_mikkel_paltorp.pdf">here</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>First we need to create generators U and V that represent the symmetric matrix, <code>K = tril(UV') + triu(VU',1)</code> as well a test vector <code>x</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> U, V <span class="pl-k">=</span> <span class="pl-c1">spline_kernel</span>(<span class="pl-c1">Vector</span>(<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">1</span>), <span class="pl-c1">2</span>); <span class="pl-c"><span class="pl-c">#</span> Creating input such that K is positive definite</span>
julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">SymSemiseparable</span>(U,V); <span class="pl-c"><span class="pl-c">#</span> Symmetric generator representable semiseparable matrix</span>
julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(K<span class="pl-k">.</span>n); <span class="pl-c"><span class="pl-c">#</span> Test vector</span></pre></div>
<p>We can now compute products with <code>K</code> and <code>K'</code>. The result are the same as <code>K</code> is symmetric.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> K<span class="pl-k">*</span>x
<span class="pl-c1">91</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.23508333333333334</span>
  <span class="pl-c1">0.28261583333333334</span>
  <span class="pl-c1">0.3341535</span>          
  <span class="pl-c1">0.3896073333333333</span> 
  <span class="pl-c1">0.44888933333333336</span>
  <span class="pl-c1">0.5119124999999999</span> 
  ⋮                  
 <span class="pl-c1">11.977057499999997</span>  
 <span class="pl-c1">12.146079333333331</span>  
 <span class="pl-c1">12.31510733333333</span>   
 <span class="pl-c1">12.484138499999995</span>  
 <span class="pl-c1">12.65317083333333</span> 

julia<span class="pl-k">&gt;</span> K<span class="pl-k">'</span><span class="pl-k">*</span>x
<span class="pl-c1">91</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.23508333333333334</span>
  <span class="pl-c1">0.28261583333333334</span>
  <span class="pl-c1">0.3341535</span>          
  <span class="pl-c1">0.3896073333333333</span> 
  <span class="pl-c1">0.44888933333333336</span>
  <span class="pl-c1">0.5119124999999999</span> 
  ⋮                  
 <span class="pl-c1">11.977057499999997</span>  
 <span class="pl-c1">12.146079333333331</span>  
 <span class="pl-c1">12.31510733333333</span>   
 <span class="pl-c1">12.484138499999995</span>  
 <span class="pl-c1">12.65317083333333</span>  

julia<span class="pl-k">&gt;</span> K<span class="pl-k">*</span>(K<span class="pl-k">\</span>x)
<span class="pl-c1">91</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0000000000000036</span>
 <span class="pl-c1">0.9999999999999982</span>
 <span class="pl-c1">0.9999999999999956</span>
 <span class="pl-c1">0.9999999999999944</span>
 <span class="pl-c1">0.9999999999999951</span>
 <span class="pl-c1">0.999999999999995</span> 
 ⋮                 
 <span class="pl-c1">0.9999999999996279</span>
 <span class="pl-c1">0.9999999999996153</span>
 <span class="pl-c1">0.9999999999996028</span>
 <span class="pl-c1">0.9999999999995898</span>
 <span class="pl-c1">0.9999999999995764</span></pre></div>
<p>Furthermore from the <code>SymSemiseparable</code> structure we can efficiently compute the Cholesky factorization as</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> L <span class="pl-k">=</span> <span class="pl-c1">SymSemiseparableChol</span>(K); <span class="pl-c"><span class="pl-c">#</span> Computing the Cholesky factorization of K</span></pre></div>
<p>Now <code>L</code> represents a Cholesky factorization with the form <code>L = tril(UW')</code>. Computations with <code>SymSemiseparableChol</code> can be performed similar to that of <code>SymSemiseparable</code>. The simple structure gives rise to linear (time and storage) algorithms for solving linear systems of equations.</p>
<p>A struct for the dealing with symmetric matrices of the form, <code>K = tril(UV') + triu(VU',1) + diag(d)</code> called <code>DiaSymSemiseparable</code> is also implemented. The usage is similar to that of <code>SymSemiseparable</code> and can be created as follows</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> U, V <span class="pl-k">=</span> <span class="pl-c1">spline_kernel</span>(<span class="pl-c1">Vector</span>(<span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">1</span>), <span class="pl-c1">2</span>); <span class="pl-c"><span class="pl-c">#</span> Creating input such that K is positive definite</span>
julia<span class="pl-k">&gt;</span> K <span class="pl-k">=</span> <span class="pl-c1">DiaSymSemiseparable</span>(U,V,<span class="pl-c1">rand</span>(<span class="pl-c1">size</span>(U,<span class="pl-c1">1</span>)); <span class="pl-c"><span class="pl-c">#</span> Symmetric generator representable semiseparable matrix + diagonal</span></pre></div>
<p>The Cholesky factorization of this matrix can be computed using <code>DiaSymSemiseparableChol</code>. Note however here that <code>L</code> represents a matrix of the form <code>L = tril(UW',-1) + diag(c)</code></p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Benchmarks</h2>
<h3><a id="user-content-computing-cholesky-factorization-of-k--triluv--triuvu1" class="anchor" aria-hidden="true" href="#computing-cholesky-factorization-of-k--triluv--triuvu1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Computing Cholesky factorization of <code>K = tril(UV') + triu(VU',1)</code></h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b5ebff9b650b9a068d3f321c2805939d68efbf8f/68747470733a2f2f692e696d6775722e636f6d2f4e46716672654f2e706e67"><img src="https://camo.githubusercontent.com/b5ebff9b650b9a068d3f321c2805939d68efbf8f/68747470733a2f2f692e696d6775722e636f6d2f4e46716672654f2e706e67" alt="Scaling of the Cholesky factorization of an EGRSS matrix" data-canonical-src="https://i.imgur.com/NFqfreO.png" style="max-width:100%;"></a></p>
<h3><a id="user-content-computing-cholesky-factorization-of-k--triluv--triuvu1--diagd" class="anchor" aria-hidden="true" href="#computing-cholesky-factorization-of-k--triluv--triuvu1--diagd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Computing Cholesky factorization of <code>K = tril(UV') + triu(VU',1) + diag(d)</code></h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/c690b10c4319b1b46c3f17264e4434ca6f04901f/68747470733a2f2f692e696d6775722e636f6d2f497575704a53502e706e67"><img src="https://camo.githubusercontent.com/c690b10c4319b1b46c3f17264e4434ca6f04901f/68747470733a2f2f692e696d6775722e636f6d2f497575704a53502e706e67" alt="Scaling of the Cholesky factorization of an EGRQS matrix" data-canonical-src="https://i.imgur.com/IuupJSP.png" style="max-width:100%;"></a></p>
<h3><a id="user-content-solving-linear-systems-using-a-cholesky-factorization-with-the-form-l--triluw" class="anchor" aria-hidden="true" href="#solving-linear-systems-using-a-cholesky-factorization-with-the-form-l--triluw"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solving linear systems using a Cholesky factorization with the form <code>L = tril(UW')</code></h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/92e2c41634df0ca737e086687ab0dfea9e26927f/68747470733a2f2f692e696d6775722e636f6d2f6d59424e5453722e706e67"><img src="https://camo.githubusercontent.com/92e2c41634df0ca737e086687ab0dfea9e26927f/68747470733a2f2f692e696d6775722e636f6d2f6d59424e5453722e706e67" alt="Solving a system using the implicit Cholesky factorization" data-canonical-src="https://i.imgur.com/mYBNTSr.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>[1] M. S. Andersen and T. Chen, “Smoothing Splines and Rank Structured Matrices: Revisiting the Spline Kernel,” SIAM Journal on Matrix Analysis and Applications, 2020.</p>
<p>[2] J. Keiner. "Fast Polynomial Transforms." Logos Verlag Berlin, 2011.</p>
</article></div>