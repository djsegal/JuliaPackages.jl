<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-rasimjl" class="anchor" aria-hidden="true" href="#rasimjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rasim.jl</h1>
<p>Rasim (RAdio network SIMulator) is a simple time-slot-based simulator for cognitive radio
networks. Rasim.jl is port of rasim to Julia. I created the port mainly because the
performance (simulation time) I was getting in Python was not satisfactory for my graduation
project.</p>
<p>As I added new features for my proposed algorithm, Rasim.jl became more complicated than and
a successor of Rasim.</p>
<h1><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dependencies</h1>
<p>The current dependency list is:</p>
<ul>
<li>Gadfly</li>
<li>HDF5</li>
<li>DataFrames</li>
</ul>
<p>and Winston if you want to draw plots right after simulation.</p>
<h1><a id="user-content-how-to-run" class="anchor" aria-hidden="true" href="#how-to-run"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to run</h1>
<p>Firstly set the parameter set you want to simulate by modifying <code>Params.jl</code>, which is used like more or less a config file. Do not forget to modify parameters generated by <code>genparam()</code> function. Then add your agents along project files and import them from Rasim by modifying <code>Rasim.jl</code>. Lastly, add your agents to array <code>agent_types</code>. If you want to make a single run, just import <code>Rasim</code> and <code>Params</code> from a script and call <code>Rasim.run_whole_simulation(p)</code> where <code>p</code> is the parameter set you configure (a variable of type <code>ParamT</code>). IF you want to run a set of simulations parallelly, use <code>RunParallel.jl</code> but don't forget to modify the first line to match number of your machine's CPU cores and set <code>batch_run</code> parameter to <code>true</code> in <code>Params.jl</code>. You can also run Rasim.jl over a network of machines by writing a small Julia script.</p>
</article></div>