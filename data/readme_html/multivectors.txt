<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.com/digitaldomain/Multivectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2dd064955a7fc2534ca66412cfe5f6e8b9b793f7e6276078203ae3c40bc35709/68747470733a2f2f7472617669732d63692e636f6d2f6469676974616c646f6d61696e2f4d756c7469766563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/digitaldomain/Multivectors.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/digitaldomain/Multivectors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/25070ed49c1926e49620520a6ed3197d8183d9f6750304edccf2ae9579bf9d32/68747470733a2f2f636f6465636f762e696f2f6769746875622f6469676974616c646f6d61696e2f4d756c7469766563746f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/digitaldomain/Multivectors.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-multivectors" class="anchor" aria-hidden="true" href="#multivectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multivectors</h1>
<p dir="auto">The <code>Multivectors</code> <a href="http://julialang.org" rel="nofollow">Julia</a> package defines the <code>Multivector</code> Type
to represent mixed-grade linear combinations of <a href="./KVectors_README.md">KVectors</a>, which are in turn a vector space of <a href="./Blades_README.md">Blades</a> of a given grade.
<code>Multivectors</code> is intended to be an implementation of <a href="https://en.wikipedia.org/wiki/Geometric_algebra" rel="nofollow">Geometric Algebra</a>, although it is useful for any Clifford algebra.<br>
Where operator or naming conventions differ, the ones from Geometric Algebra most closely aligned to conventions used in Computer Science will be used.</p>
<p dir="auto">It is recommended to read the documentation on <a href="./Blades_README.md">Blades</a> and <a href="./KVectors_README.md">KVectors</a> first.</p>
<h2 dir="auto"><a id="user-content-geometric-product" class="anchor" aria-hidden="true" href="#geometric-product"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Geometric Product</h2>
<p dir="auto"><code>Multivectors</code> essentially extends the algebras and Types defined as <a href="./Blades_README.md">Blades</a> and <a href="./KVectors_README.md">KVectors</a> with <code>*</code>, the <a href="https://en.wikipedia.org/wiki/Geometric_algebra#The_geometric_product" rel="nofollow">Geometric Product</a>.</p>
<p dir="auto">There are many other operators defined, but the geometric product is fundamental.  In fact, we could go back and redefine the wedge <code>∧</code> and inner products <code>⋅</code> using the geometric product.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="a⋅b = ½(a*b + b*a) 
a∧b = ½(a*b - b*a)"><pre class="notranslate"><code>a⋅b = ½(a*b + b*a) 
a∧b = ½(a*b - b*a)
</code></pre></div>
<p dir="auto">Note: this is only strictly true for <code>a</code> and <code>b</code> as 1-vectors.</p>
<p dir="auto">To complete the picture for <code>*</code> and extend to <code>Multivectors</code> we require a grade projection operator.  The grade projection operator simply returns the k-vector of grade k contained in the <code>Multivector</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="⟨A⟩ᵢ = grade(A,i)"><pre class="notranslate"><code>⟨A⟩ᵢ = grade(A,i)
</code></pre></div>
<p dir="auto">and commutator product to catch any (most) grades not in <code>∧</code> and inner products <code>⋅</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="A×B = ½(A*B-B*A) "><pre class="notranslate"><code>A×B = ½(A*B-B*A) 
</code></pre></div>
<p dir="auto">With grade projection we can define wedge <code>∧</code> and inner products <code>⋅</code> using the geometric product of <code>Multivectors</code>.  Notice the symmetry where one is grade raising and the other grade lowering.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="A∧B = grade(A*B, grade(B)+grade(A)) # grade raising
A⋅B = grade(A*B, grade(B)-grade(A)) # grade lowering"><pre class="notranslate"><code>A∧B = grade(A*B, grade(B)+grade(A)) # grade raising
A⋅B = grade(A*B, grade(B)-grade(A)) # grade lowering
</code></pre></div>
<h2 dir="auto"><a id="user-content-inner-product" class="anchor" aria-hidden="true" href="#inner-product"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inner Product</h2>
<p dir="auto">The inner product <code>⋅</code> is defined in <code>Multivectors</code> to be the left contraction operator ⌋, <code>lcontraction</code>.
The contraction <code>a⋅B</code> between blades <code>a</code> and <code>B</code> will result in a blade with grade <code>grade(B)-grade(a)</code> that is orthogonal to <code>a</code> and contained in <code>B</code>.<br>
These 3 properties ( grade reduction, orthogonality and projection ) in one operator make left contraction powerful but less intiutive than the standard inner product you may be used to.
This is a generalization of the inner product ( dot product ) from vector algebra to blades and multivectors.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-barycentric-coordinates" class="anchor" aria-hidden="true" href="#barycentric-coordinates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Barycentric coordinates</h3>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Multivectors

julia&gt; @generate_basis(&quot;+++&quot;, true)  # generate blades for euclidean 3D-space

julia&gt; a = 0.0e₁+0.0e₂; b = 1.0e₁ + 0.0e₂; c = 0.0e₁ + 1.0e₂;  # a simple right angle triangle

julia&gt; A = (b-a)∧(c-a)  # twice the area of the triangle. we don't worry about the factor of 2"><pre class="notranslate"><code>julia&gt; using Multivectors

julia&gt; @generate_basis("+++", true)  # generate blades for euclidean 3D-space

julia&gt; a = 0.0e₁+0.0e₂; b = 1.0e₁ + 0.0e₂; c = 0.0e₁ + 1.0e₂;  # a simple right angle triangle

julia&gt; A = (b-a)∧(c-a)  # twice the area of the triangle. we don't worry about the factor of 2
</code></pre></div>
<p dir="auto">Make a function to calculate barycentric coords as the ratio of the area of a triangle made with a point <code>p</code> and an edge over original triangle.  i.e. the barycentric coord for vertex <code>a</code> is the ratio Δpbc/Δabc</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; barycoords(p) = ((c-b)∧(p-b)/A, (a-c)∧(p-c)/A, (b-a)∧(p-a)/A)  # a tuple of coords"><pre class="notranslate"><code>julia&gt; barycoords(p) = ((c-b)∧(p-b)/A, (a-c)∧(p-c)/A, (b-a)∧(p-a)/A)  # a tuple of coords
</code></pre></div>
<p dir="auto">Notice how the code very directly represents the geometric relationship.  The body of the function is also coordinate free ( we never index into the points or vertices ).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; barycoords(0.0e₁)
(1.0, -0.0e₁₂, -0.0e₁₂)

julia&gt; barycoords(1.0e₁)
(-0.0e₁₂, 1.0, -0.0e₁₂)

julia&gt; barycoords(0.5e₁+0.5e₂)
(0.0, 0.5, 0.5)

julia&gt; barycoords(0.1e₁+0.25e₂)
(0.65, 0.1, 0.25)

julia&gt; barycoords(0.1e₁+0.25e₂+10.0e₃)  # go off-plane by adding +10 in &quot;up&quot; direction
(Multivector{Float64,2}
⟨0.65⟩₀ + ⟨10.0e₁₃,10.0e₂₃⟩₂, Multivector{Float64,2}
⟨0.1⟩₀ + ⟨-10.0e₁₃,-0.0e₂₃⟩₂, Multivector{Float64,2}
⟨0.25⟩₀ + ⟨0.0e₁₃,-10.0e₂₃⟩₂)"><pre class="notranslate"><code>julia&gt; barycoords(0.0e₁)
(1.0, -0.0e₁₂, -0.0e₁₂)

julia&gt; barycoords(1.0e₁)
(-0.0e₁₂, 1.0, -0.0e₁₂)

julia&gt; barycoords(0.5e₁+0.5e₂)
(0.0, 0.5, 0.5)

julia&gt; barycoords(0.1e₁+0.25e₂)
(0.65, 0.1, 0.25)

julia&gt; barycoords(0.1e₁+0.25e₂+10.0e₃)  # go off-plane by adding +10 in "up" direction
(Multivector{Float64,2}
⟨0.65⟩₀ + ⟨10.0e₁₃,10.0e₂₃⟩₂, Multivector{Float64,2}
⟨0.1⟩₀ + ⟨-10.0e₁₃,-0.0e₂₃⟩₂, Multivector{Float64,2}
⟨0.25⟩₀ + ⟨0.0e₁₃,-10.0e₂₃⟩₂)
</code></pre></div>
<p dir="auto">When we go off-plane, we get a very natural result where the barycentric coords are in the grade 0 part of a multivector.  As a bonus there is extra information in the higher grade k-vectors.
That extra info in the higher grades is a bit odd (it's the Lie bracket of the ratio operator).
We really just want the scalar part of the multivector.<br>
Let's clean up the results by selecting the grade 0 scalar explicitly.
Selecting the grade with the relevant results is a common pattern when working with Multivectors.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; baryscalars(p) = map(k-&gt;grade(k, 0), barycoords(p))

julia&gt; baryscalars(0.1e₁+0.25e₂+10.0e₃)
(0.65, 0.1, 0.25)

julia&gt; baryscalars(1.0e₁)
(0.0, 1.0, 0.0)"><pre class="notranslate"><code>julia&gt; baryscalars(p) = map(k-&gt;grade(k, 0), barycoords(p))

julia&gt; baryscalars(0.1e₁+0.25e₂+10.0e₃)
(0.65, 0.1, 0.25)

julia&gt; baryscalars(1.0e₁)
(0.0, 1.0, 0.0)
</code></pre></div>
<p dir="auto">Extending to higher dimensions is straightforwards.
Tetrahedron.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; d = 1.0e₃

julia&gt; V = A∧d
1.0e₁₂₃

julia&gt; barycoords4(p) = ((c-b)∧(p-b)∧(d-c)/V, 
                         (a-c)∧(p-c)∧(d-a)/V, 
                         (b-a)∧(p-a)∧(d-a)/V, 
                         (b-a)∧(p-a)∧(a-c)/V)
barycoords4 (generic function with 1 method)

julia&gt; barycoords4(0.25e₁+0.25e₂+0.25e₃)
(0.25, 0.25, 0.25, 0.25)

julia&gt; barycoords4(0.1e₁+0.2e₂+0.3e₃)
(0.39999999999999997, 0.1, 0.2, 0.3)"><pre class="notranslate"><code>julia&gt; d = 1.0e₃

julia&gt; V = A∧d
1.0e₁₂₃

julia&gt; barycoords4(p) = ((c-b)∧(p-b)∧(d-c)/V, 
                         (a-c)∧(p-c)∧(d-a)/V, 
                         (b-a)∧(p-a)∧(d-a)/V, 
                         (b-a)∧(p-a)∧(a-c)/V)
barycoords4 (generic function with 1 method)

julia&gt; barycoords4(0.25e₁+0.25e₂+0.25e₃)
(0.25, 0.25, 0.25, 0.25)

julia&gt; barycoords4(0.1e₁+0.2e₂+0.3e₃)
(0.39999999999999997, 0.1, 0.2, 0.3)
</code></pre></div>
<p dir="auto">Add an extra dimension to get barycentric coords of a 4D volume.   Now we are doing something you can't do directly with a cross product.  Cross product doesn't exist in 4D.</p>
<p dir="auto">Note, we need to restart julia to clear out the old basis from the Main module before we generate a new basis.
Better practice is to namespace a basis within it's own module.</p>
<p dir="auto">Behold, the barycentric coordinates of a pentachoron.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Multivectors

julia&gt; module R4
         using Multivectors
         @generate_basis(&quot;++++&quot;)  # 4D euclidean space
       end

julia&gt; using .R4

julia&gt; e₁, e₂, e₃, e₄ = alle(R4,4)[1:4]  # pick out the basis blades we will work with

julia&gt; a = 0.0e₁+0.0e₂; b = 1.0e₁; c = 1.0e₂; d = 1.0e₃; e = 1.0e₄ # a pentachoron!

julia&gt; H = b∧c∧d∧e  # hypervolume ( a is at origin )

julia&gt; barycoords5(p) = ((c-b)∧(p-b)∧(d-c)∧(e-b)/H, 
                         (a-c)∧(p-c)∧(d-a)∧(e-a)/H, 
                         (b-a)∧(p-a)∧(d-a)∧(e-b)/H, 
                         (b-a)∧(p-a)∧(a-c)∧(e-b)/H,
                         (b-a)∧(p-a)∧(d-a)∧(a-c)/H)

julia&gt; barycoords5(1.0e₄)
(0.0, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 1.0)

julia&gt; barycoords5(1.0e₁+1.0e₄)
(-1.0, 1.0, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 1.0)

julia&gt; barycoords5(0.0e₄)
(1.0, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.0e₁₂₃₄)

julia&gt; barycoords5(0.1e₁+0.1e₄)
(0.8, 0.1, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.1)

julia&gt; barycoords5(0.1e₁+0.2e₂+0.2e₃+0.4e₄)
(0.09999999999999992, 0.1, 0.2, 0.2, 0.4)"><pre class="notranslate"><code>julia&gt; using Multivectors

julia&gt; module R4
         using Multivectors
         @generate_basis("++++")  # 4D euclidean space
       end

julia&gt; using .R4

julia&gt; e₁, e₂, e₃, e₄ = alle(R4,4)[1:4]  # pick out the basis blades we will work with

julia&gt; a = 0.0e₁+0.0e₂; b = 1.0e₁; c = 1.0e₂; d = 1.0e₃; e = 1.0e₄ # a pentachoron!

julia&gt; H = b∧c∧d∧e  # hypervolume ( a is at origin )

julia&gt; barycoords5(p) = ((c-b)∧(p-b)∧(d-c)∧(e-b)/H, 
                         (a-c)∧(p-c)∧(d-a)∧(e-a)/H, 
                         (b-a)∧(p-a)∧(d-a)∧(e-b)/H, 
                         (b-a)∧(p-a)∧(a-c)∧(e-b)/H,
                         (b-a)∧(p-a)∧(d-a)∧(a-c)/H)

julia&gt; barycoords5(1.0e₄)
(0.0, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 1.0)

julia&gt; barycoords5(1.0e₁+1.0e₄)
(-1.0, 1.0, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 1.0)

julia&gt; barycoords5(0.0e₄)
(1.0, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.0e₁₂₃₄)

julia&gt; barycoords5(0.1e₁+0.1e₄)
(0.8, 0.1, 0.0e₁₂₃₄, 0.0e₁₂₃₄, 0.1)

julia&gt; barycoords5(0.1e₁+0.2e₂+0.2e₃+0.4e₄)
(0.09999999999999992, 0.1, 0.2, 0.2, 0.4)
</code></pre></div>
<h2 dir="auto"><a id="user-content-quaternions-rotors-versors" class="anchor" aria-hidden="true" href="#quaternions-rotors-versors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quaternions, Rotors, Versors</h2>
<p dir="auto">Quaternions have a particularly simple construction in Geometric Algebra.
<code>q = a/b</code>
Geometrically this is asking <code>q</code> to be a mulitivector that would transform <code>b</code> into <code>a</code> via the geometric product.
<code>q</code> will also have the effect of rotating any vector <code>c</code> laying in the plane <code>a∧b</code> by the amount needed to rotate <code>b</code> into <code>a</code>.
We assume <code>q</code> is normalized.
In order for the <code>q</code> to act on (multi)vectors not neccesarily in the plane of rotation, we treat it as a versor.</p>
<p dir="auto">A quaternion is a versor, simply means that you use the sandwich product when transforming an object with it.
Using the sandwich product we multiply by <code>q</code> twice and will end up rotating by twice the angle.  So we modify our initial construction rule to <code>q = normalize(â+b̂)/b̂</code>.</p>
<p dir="auto">Now we get a familiar quaternion transformation rule <code>q̃*v*q</code>.<br>
Where we use <code>q̃</code> to indicate the reverse of <code>q</code>, which acts like complex conjugation and flips the sign of grade 2 blades.<br>
This construction extends to higher and lower dimensions and doesn't involve complex numbers.<br>
Therefore it's called a rotor in geometric algebra and not a quaternion.
Geometrically it is better to view rotors as a sequence of reflections to understand how it operates on vectors not parallel to the plane of rotation.</p>
<h3 dir="auto"><a id="user-content-cayley-map" class="anchor" aria-hidden="true" href="#cayley-map"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cayley map</h3>
<p dir="auto">We can take our rotor construction another step further to create a simple mapping between rotors and bivectors.</p>
<p dir="auto">First we ask how to construct a rotor from a single vector and the plane of rotation.</p>
<p dir="auto">We can create a second vector orthogonal to our first vector in the plane of rotation.  This is accomplished by multiplying our vector with the bivector of the rotation plane.  Now we can use the two vectors in a simlilar fashion as before.</p>
<p dir="auto"><code>q = (a + a*B)/(a - a*B)</code></p>
<p dir="auto">We made two vectors by adding and subtracting a vector orthogonal to <code>a</code>.  This way we can choose a bivector <code>B</code> scaled by <code>tan(θ)</code>.  The trigonometry works out to give us the correct <code>q</code> for the angle <code>θ</code>.</p>
<p dir="auto">Simplifying by pulling out <code>a</code> and adding the scaling factor gives us <code>q = (1 + tan(θ)B̂)/(1 - tan(θ)B̂)</code></p>
<p dir="auto">This is the Cayley map and only depends on a rotation bivector.</p>
<p dir="auto">Using similar arguments we can arrive at the reverse map to recover the bivector from the rotor.  <code>B = (1 + q)/(1 - q)</code></p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<p dir="auto">Construct a quaternion/rotor taking 1-vector 1.0e₁ to vector half45</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# normalized vector half-way between x and x+y
julia&gt; half45 = normalize(1.0e₁ + normalize(1.0e₁+1.0e₂))

julia&gt; q = half45/1.0e₁"><pre class="notranslate"><code># normalized vector half-way between x and x+y
julia&gt; half45 = normalize(1.0e₁ + normalize(1.0e₁+1.0e₂))

julia&gt; q = half45/1.0e₁
</code></pre></div>
<p dir="auto">Transform a 1-vector with the sandwich product.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; v = reverse(q)*(1.0e₁+1.0e₂+1.0e₃)*q

julia&gt; grade(v, 1) |&gt; prune∘sort_basis
2-element KVector{Float64,1,2}:
 1.414213562373095e₁
               1.0e₃"><pre class="notranslate"><code>julia&gt; v = reverse(q)*(1.0e₁+1.0e₂+1.0e₃)*q

julia&gt; grade(v, 1) |&gt; prune∘sort_basis
2-element KVector{Float64,1,2}:
 1.414213562373095e₁
               1.0e₃
</code></pre></div>
<p dir="auto">Rotors can be constructed using half-angle of trig functions, like quaternions.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; cos(π/8) - sin(π/8)*1.0e₁₂ == q
true"><pre class="notranslate"><code>julia&gt; cos(π/8) - sin(π/8)*1.0e₁₂ == q
true
</code></pre></div>
<h3 dir="auto"><a id="user-content-entering-values-in-the-repl" class="anchor" aria-hidden="true" href="#entering-values-in-the-repl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Entering values in the REPL</h3>
<p dir="auto">Some non-keyboard characters are required for this package.  Here are some examples of how to enter them.</p>
<p dir="auto">To type e₁, enter:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="e\_1[tab]"><pre class="notranslate"><code>e\_1[tab]
</code></pre></div>
<p dir="auto">To type ∧ (wedge), enter:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="\wedge[tab]"><pre class="notranslate"><code>\wedge[tab]
</code></pre></div>
<h3 dir="auto"><a id="user-content-gotchas" class="anchor" aria-hidden="true" href="#gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gotchas</h3>
<p dir="auto">Note that e₁, e₂, ... are types, not values.  For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; typeof(e₁)
UnionAll"><pre class="notranslate"><code>julia&gt; typeof(e₁)
UnionAll
</code></pre></div>
<p dir="auto">In order for operations to have expected results, a numerical coefficient is required</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; e₃ ∧ e₁
Nothing

julia&gt; 1e₃ ∧ 1e₁
-1e₁₃

julia&gt; (1 * e₃) ∧ (1 * e₁)
-1e₁₃"><pre class="notranslate"><code>julia&gt; e₃ ∧ e₁
Nothing

julia&gt; 1e₃ ∧ 1e₁
-1e₁₃

julia&gt; (1 * e₃) ∧ (1 * e₁)
-1e₁₃
</code></pre></div>
<p dir="auto">Some methods and operators are defined in the LinearAlgebra package.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using LinearAlgebra

julia&gt; normalize(2e₁)
1e₁"><pre class="notranslate"><code>julia&gt; using LinearAlgebra

julia&gt; normalize(2e₁)
1e₁
</code></pre></div>
<h2 dir="auto"><a id="user-content-other-operators" class="anchor" aria-hidden="true" href="#other-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other Operators</h2>
<p dir="auto">Depending on the specific Geometric Algebra in use it may be desireable to define other operators.  For example <code>meet</code> and <code>join</code> operators are very useful, but will differ depending on the context.  Where there are multiple possible definitions/implementations of an operator, <code>Multivectors</code> chooses to omit such an operator rather than include it.</p>
<p dir="auto">Most operators and methods defined for <a href="./KVectors_README.md">KVectors</a> and <a href="./Blades_README.md">Blades</a> work on <code>Multivectors</code> through either linearity (extended via vector space <code>+</code> and scalar <code>*</code> ) or outermorphism (extended via <code>∧</code>).</p>
<h2 dir="auto"><a id="user-content-performance-and-design" class="anchor" aria-hidden="true" href="#performance-and-design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance and Design</h2>
<p dir="auto">Blades, KVectors and Multivectors, in it's current iteration, is designed for exploring and prototyping novel algorithms in the emerging field of Applied Geometric Algebra with a focus on Computer Base Animation ( CGI ).  While the foundational Types are optimally performant, some work is needed to extend that performance through the rest of the Types.</p>
<p dir="auto"><a href="./Blades_README.md">Blades</a> have been designed and implemented with optimal performance in mind.  Operations on simple Blades have around the same performance as similar operations on native scalars.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; x = sqrt(2.0); y = exp(1.0); ex = e₂₃(x); ey = e₁₃(y);

julia&gt; @btime x*y
  23.008 ns (1 allocation: 16 bytes)
3.844231028159117

julia&gt; @btime ex*ey
  26.635 ns (1 allocation: 16 bytes)
3.844231028159117e₁₂"><pre class="notranslate"><code>julia&gt; x = sqrt(2.0); y = exp(1.0); ex = e₂₃(x); ey = e₁₃(y);

julia&gt; @btime x*y
  23.008 ns (1 allocation: 16 bytes)
3.844231028159117

julia&gt; @btime ex*ey
  26.635 ns (1 allocation: 16 bytes)
3.844231028159117e₁₂
</code></pre></div>
<p dir="auto">This is accomplished with Julia's metaprogramming features.  We effectively leverage Julia's Type system and compiler to do the heavy lifting for us by creating unqiue Types for each Blade.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; (typeof(ex), typeof(ey), typeof(ex) == typeof(ey))
(e₂₃{Float64}, e₁₃{Float64}, false)"><pre class="notranslate"><code>julia&gt; (typeof(ex), typeof(ey), typeof(ex) == typeof(ey))
(e₂₃{Float64}, e₁₃{Float64}, false)
</code></pre></div>
<p dir="auto">This performance minded design has not been extended to KVectors or Multivectors.<br>
The intention is to keep Blades, KVectors and Multivectors as a general reference implementation of Geometric Algebra.<br>
The main hurdle to achieving performance is to give Julia enough Type information to effectively optimize the code while still maintaining flexibility and ease of use for our Types.
Since we rely on the Julia compiler/parser to achieve performance, it could be that future versions of Julia will optimize KVectors and Multivectors (to a certain extent) for us.</p>
<p dir="auto">Future versions or new packages implementing KVectors and Multivectors will be performant.</p>
<p dir="auto">Truely great performance will likely require specializing on a fixed algebra or set of objects (for an example of this approach: <a href="https://github.com/jeremyong/Klein">Klein</a>).</p>
<h2 dir="auto"><a id="user-content-related-packagestypes" class="anchor" aria-hidden="true" href="#related-packagestypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages/Types</h2>
<p dir="auto">See the documentation of <a href="./KVectors_README.md">KVectors</a> and <a href="./Blades_README.md">Blades</a> for more information.</p>
<p dir="auto"><a href="https://github.com/chakravala/Grassmann.jl">Grassmann</a> is another julia package that implements a Geometric Algebra in the context of a wider algebraic framework.</p>
<h2 dir="auto"><a id="user-content-project-information" class="anchor" aria-hidden="true" href="#project-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Information</h2>
<h3 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h3>
<p dir="auto">Please read <a href="./CONTRIBUTING.md">CONTRIBUTING.md</a> for details.</p>
<h3 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h3>
<ul dir="auto">
<li><strong>Michael Alexander Ewert</strong> - Developer - <a href="https://digitaldomain.com" rel="nofollow">Digital Domain</a></li>
</ul>
<h3 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h3>
<p dir="auto">This project is licensed under a modified Apache 2.0 license - see the <a href="./LICENSE">LICENSE</a> file for details</p>
</article></div>