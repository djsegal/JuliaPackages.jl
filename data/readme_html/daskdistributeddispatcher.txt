<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-daskdistributeddispatcher" class="anchor" aria-hidden="true" href="#daskdistributeddispatcher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DaskDistributedDispatcher</h1>
<p><a href="https://travis-ci.org/invenia/DaskDistributedDispatcher.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b01d2dfb7da0f89e0469394451afd80a77f0269d68d27a533554704aaadf1c3e/68747470733a2f2f7472617669732d63692e6f72672f696e76656e69612f4461736b4469737472696275746564446973706174636865722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Linux/macOS Build Status" data-canonical-src="https://travis-ci.org/invenia/DaskDistributedDispatcher.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/invenia/daskdistributeddispatcher-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/8e7a75fc7378c19b43e3428bccb4bb6622321a7c63ff372188b13f458778a6a5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f34616f6f747767793176356a613971372f6272616e63682f6d61737465723f7376673d74727565" alt="Windows Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/4aootwgy1v5ja9q7/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/invenia/DaskDistributedDispatcher.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/06f7859bf2cb3466e7eec9ad5921b136c26bc2ca112bbda61c2e5447eff9c554/68747470733a2f2f636f6465636f762e696f2f67682f696e76656e69612f4461736b4469737472696275746564446973706174636865722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/invenia/DaskDistributedDispatcher.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>DaskDistributedDispatcher integrates <code>Dispatcher.jl</code> with the python <code>dask.distributed</code> scheduler service.</p>
<p>Documentation: <a href="https://invenia.github.io/DaskDistributedDispatcher.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p><a href="https://invenia.github.io/Dispatcher.jl/latest/index.html" rel="nofollow"><code>Dispatcher.jl</code></a> builds the graph of julia computations and submits jobs via the julia client to the  <a href="https://distributed.readthedocs.io/" rel="nofollow"><code>dask.distributed scheduler</code></a>, which is in charge of determining when and where to schedule jobs on the julia workers. Thus, the computations can be scheduled and executed efficiently.</p>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Start</h2>
<p>At the command line:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="dask-scheduler
"><pre>dask-scheduler</pre></div>
<p>At the Julia REPL, given some Dispatcher nodes <code>nodes</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="addprocs(3)
@everywhere using DaskDistributedDispatcher

for i in workers()
	@spawnat i Worker()
end

dask_executor = DaskExecutor()

node_results = run!(dask_executor, nodes)
"><pre><span class="pl-c1">addprocs</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> DaskDistributedDispatcher

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">workers</span>()
	<span class="pl-c1">@spawnat</span> i <span class="pl-c1">Worker</span>()
<span class="pl-k">end</span>

dask_executor <span class="pl-k">=</span> <span class="pl-c1">DaskExecutor</span>()

node_results <span class="pl-k">=</span> <span class="pl-c1">run!</span>(dask_executor, nodes)</pre></div>
<p>For a more detailed explanation, see the documentation linked above.</p>
<h2><a id="user-content-frequently-asked-questions" class="anchor" aria-hidden="true" href="#frequently-asked-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Frequently Asked Questions</h2>
<blockquote>
<p>How can the python <code>dask.distributed</code> scheduler be used for julia computations?</p>
</blockquote>
<p>The <code>dask.distributed</code> scheduler can be used in a julia workflow environment since it is language agnostic (no information that passes in or out of it is Python-specific). Instead the scheduler communicates with the workers/clients entirely using msgpack and long bytestrings. More information on the protocol used is <a href="http://distributed.readthedocs.io/en/latest/protocol.html" rel="nofollow"><code>here</code></a>.</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>DaskDistributedDispatcher.jl is provided under the <a href="LICENSE.md">Mozilla Public License 2.0</a>.</p>
</article></div>