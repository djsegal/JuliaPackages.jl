<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-ordinarydiffeqjl" class="anchor" aria-hidden="true" href="#ordinarydiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>OrdinaryDiffEq.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/063a520f1733d1b53d1e2fdb37b70a8016dd36f6/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/SciML/OrdinaryDiffEq.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/11409e8a9493fbe0e61535e98e6b865c86cad01d/68747470733a2f2f7472617669732d63692e6f72672f5363694d4c2f4f7264696e6172794469666645712e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SciML/OrdinaryDiffEq.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/YingboMa/ordinarydiffeq-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/b80aa042e4759c5977b57baae0d51e59406ea236/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f647061313832733669386336376177752f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/dpa182s6i8c67awu/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://gitlab.com/juliadiffeq/OrdinaryDiffEq-jl/pipelines" rel="nofollow"><img src="https://camo.githubusercontent.com/306a78e3fef0dd22adbd2d3296662b980f5da0fc/68747470733a2f2f6769746c61622e636f6d2f6a756c69616469666665712f4f7264696e6172794469666645712d6a6c2f6261646765732f6d61737465722f706970656c696e652e737667" alt="GitlabCI" data-canonical-src="https://gitlab.com/juliadiffeq/OrdinaryDiffEq-jl/badges/master/pipeline.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/OrdinaryDiffEq.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8a29dfed698342fadb8b56663950f77b2c56a683/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614469666645712f4f7264696e6172794469666645712e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaDiffEq/OrdinaryDiffEq.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaDiffEq/OrdinaryDiffEq.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4e69f24cca40d70db22dc52dd13df8e0735d9e8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614469666645712f4f7264696e6172794469666645712e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaDiffEq/OrdinaryDiffEq.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>OrdinaryDiffEq.jl is a component package in the DifferentialEquations ecosystem. It holds the
ordinary differential equation solvers and utilities. While completely independent
and usable on its own, users interested in using this
functionality should check out <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl</a>.</p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h2>
<p>OrdinaryDiffEq.jl is part of the JuliaDiffEq common interface, but can be used independently of DifferentialEquations.jl. The only requirement is that the user passes an OrdinaryDiffEq.jl algorithm to <code>solve</code>. For example, we can solve the <a href="https://docs.juliadiffeq.org/dev/tutorials/ode_example/" rel="nofollow">ODE tutorial from the docs</a> using the <code>Tsit5()</code> algorithm:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OrdinaryDiffEq
<span class="pl-en">f</span>(u,p,t) <span class="pl-k">=</span> <span class="pl-c1">1.01</span><span class="pl-k">*</span>u
u0<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>(),reltol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>,abstol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>)
<span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(sol,linewidth<span class="pl-k">=</span><span class="pl-c1">5</span>,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Solution to the linear ODE with a thick line<span class="pl-pds">"</span></span>,
     xaxis<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time (t)<span class="pl-pds">"</span></span>,yaxis<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u(t) (in Î¼m)<span class="pl-pds">"</span></span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>My Thick Line!<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> legend=false</span>
<span class="pl-c1">plot!</span>(sol<span class="pl-k">.</span>t, t<span class="pl-k">-&gt;</span><span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-c1">1.01</span>t),lw<span class="pl-k">=</span><span class="pl-c1">3</span>,ls<span class="pl-k">=</span><span class="pl-c1">:dash</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>True Solution!<span class="pl-pds">"</span></span>)</pre></div>
<p>That example uses the out-of-place syntax <code>f(u,p,t)</code>, while the inplace syntax (more efficient for systems of equations) is shown in the Lorenz example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OrdinaryDiffEq
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(du,u,p,t)
 du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10.0</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])
 du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
 du[<span class="pl-c1">3</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
<span class="pl-k">end</span>
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>;<span class="pl-c1">0.0</span>;<span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())
<span class="pl-k">using</span> Plots; <span class="pl-c1">plot</span>(sol,vars<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))</pre></div>
<p>Very fast static array versions can be specifically compiled to the size of your model. For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> OrdinaryDiffEq, StaticArrays
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(u,p,t)
 SA[<span class="pl-c1">10.0</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>]),u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>],u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]]
<span class="pl-k">end</span>
u0 <span class="pl-k">=</span> SA[<span class="pl-c1">1.0</span>;<span class="pl-c1">0.0</span>;<span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())</pre></div>
<p>For "refined ODEs" like dynamical equations and <code>SecondOrderODEProblem</code>s, refer to the <a href="https://docs.juliadiffeq.org/dev/types/ode_types/" rel="nofollow">DiffEqDocs</a>. For example, in <a href="https://github.com/JuliaDiffEq/DiffEqTutorials.jl">DiffEqTutorials.jl</a> we show how to solve equations of motion using symplectic methods:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">HH_acceleration</span>(dv,v,u,p,t)
    x,y  <span class="pl-k">=</span> u
    dx,dy <span class="pl-k">=</span> dv
    dv[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>x <span class="pl-k">-</span> <span class="pl-c1">2</span>x<span class="pl-k">*</span>y
    dv[<span class="pl-c1">2</span>] <span class="pl-k">=</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> y <span class="pl-k">-</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>
initial_positions <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>,<span class="pl-c1">0.1</span>]
initial_velocities <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>,<span class="pl-c1">0.0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">SecondOrderODEProblem</span>(HH_acceleration,initial_velocities,initial_positions,tspan)
sol2 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">KahanLi8</span>(), dt<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>);</pre></div>
<p>Other refined forms are IMEX and semi-linear ODEs (for exponential integrators).</p>
<h2><a id="user-content-available-solvers" class="anchor" aria-hidden="true" href="#available-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Available Solvers</h2>
<p>For the list of available solvers, please refer to the <a href="https://docs.juliadiffeq.org/dev/solvers/ode_solve/" rel="nofollow">DifferentialEquations.jl ODE Solvers</a>, <a href="http://docs.juliadiffeq.org/dev/solvers/dynamical_solve/" rel="nofollow">Dynamical ODE Solvers</a>, and the <a href="http://docs.juliadiffeq.org/dev/solvers/split_ode_solve/" rel="nofollow">Split ODE Solvers</a> pages.</p>
</article></div>