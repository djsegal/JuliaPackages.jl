<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ordinarydiffeqjl" class="anchor" aria-hidden="true" href="#ordinarydiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OrdinaryDiffEq.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/OrdinaryDiffEq/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://app.codecov.io/gh/SciML/OrdinaryDiffEq.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8d1455fc1dec281e321976d84273d760107c5d85ecccc28d711010b8a3510129/68747470733a2f2f636f6465636f762e696f2f67682f5363694d4c2f4f7264696e6172794469666645712e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/SciML/OrdinaryDiffEq.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/OrdinaryDiffEq.jl/actions?query=workflow%3ACI"><img src="https://github.com/SciML/OrdinaryDiffEq.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://buildkite.com/julialang/ordinarydiffeq-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cd3fd773ea2c9e4c90292ae13078f46f1ad21fb9ccfab7dbc72481aa17090e20/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f35663339373737643030396365393465663164636632613438383163363862396662636166366636396631643862386466322e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://badge.buildkite.com/5f39777d009ce94ef1dcf2a4881c68b9fbcaf6f69f1d8b8df2.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<p dir="auto">OrdinaryDiffEq.jl is a component package in the DifferentialEquations ecosystem. It holds the
ordinary differential equation solvers and utilities. While completely independent
and usable on its own, users interested in using this
functionality should check out <a href="https://github.com/SciML/DifferentialEquations.jl">DifferentialEquations.jl</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Assuming that you already have Julia correctly installed, it suffices to import
OrdinaryDiffEq.jl in the standard way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;OrdinaryDiffEq&quot;)"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>OrdinaryDiffEq<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">OrdinaryDiffEq.jl is part of the SciML common interface, but can be used independently of DifferentialEquations.jl. The only requirement is that the user passes an OrdinaryDiffEq.jl algorithm to <code>solve</code>. For example, we can solve the <a href="https://docs.sciml.ai/DiffEqDocs/stable/getting_started/#ode_example" rel="nofollow">ODE tutorial from the docs</a> using the <code>Tsit5()</code> algorithm:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OrdinaryDiffEq
f(u,p,t) = 1.01*u
u0=1/2
tspan = (0.0,1.0)
prob = ODEProblem(f,u0,tspan)
sol = solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)
using Plots
plot(sol,linewidth=5,title=&quot;Solution to the linear ODE with a thick line&quot;,
     xaxis=&quot;Time (t)&quot;,yaxis=&quot;u(t) (in μm)&quot;,label=&quot;My Thick Line!&quot;) # legend=false
plot!(sol.t, t-&gt;0.5*exp(1.01t),lw=3,ls=:dash,label=&quot;True Solution!&quot;)"><pre><span class="pl-k">using</span> OrdinaryDiffEq
<span class="pl-en">f</span>(u,p,t) <span class="pl-k">=</span> <span class="pl-c1">1.01</span><span class="pl-k">*</span>u
u0<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">1.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>(),reltol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>,abstol<span class="pl-k">=</span><span class="pl-c1">1e-8</span>)
<span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(sol,linewidth<span class="pl-k">=</span><span class="pl-c1">5</span>,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Solution to the linear ODE with a thick line<span class="pl-pds">"</span></span>,
     xaxis<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Time (t)<span class="pl-pds">"</span></span>,yaxis<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>u(t) (in μm)<span class="pl-pds">"</span></span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>My Thick Line!<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> legend=false</span>
<span class="pl-c1">plot!</span>(sol<span class="pl-k">.</span>t, t<span class="pl-k">-&gt;</span><span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-c1">1.01</span>t),lw<span class="pl-k">=</span><span class="pl-c1">3</span>,ls<span class="pl-k">=</span><span class="pl-c1">:dash</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>True Solution!<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">That example uses the out-of-place syntax <code>f(u,p,t)</code>, while the inplace syntax (more efficient for systems of equations) is shown in the Lorenz example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OrdinaryDiffEq
function lorenz!(du,u,p,t)
 du[1] = 10.0(u[2]-u[1])
 du[2] = u[1]*(28.0-u[3]) - u[2]
 du[3] = u[1]*u[2] - (8/3)*u[3]
end
u0 = [1.0;0.0;0.0]
tspan = (0.0,100.0)
prob = ODEProblem(lorenz!,u0,tspan)
sol = solve(prob,Tsit5())
using Plots; plot(sol,idxs=(1,2,3))"><pre><span class="pl-k">using</span> OrdinaryDiffEq
<span class="pl-k">function</span> <span class="pl-en">lorenz!</span>(du,u,p,t)
 du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">10.0</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>])
 du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
 du[<span class="pl-c1">3</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
<span class="pl-k">end</span>
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>;<span class="pl-c1">0.0</span>;<span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz!,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())
<span class="pl-k">using</span> Plots; <span class="pl-c1">plot</span>(sol,idxs<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))</pre></div>
<p dir="auto">Very fast static array versions can be specifically compiled to the size of your model. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using OrdinaryDiffEq, StaticArrays
function lorenz(u,p,t)
 SA[10.0(u[2]-u[1]),u[1]*(28.0-u[3]) - u[2],u[1]*u[2] - (8/3)*u[3]]
end
u0 = SA[1.0;0.0;0.0]
tspan = (0.0,100.0)
prob = ODEProblem(lorenz,u0,tspan)
sol = solve(prob,Tsit5())"><pre><span class="pl-k">using</span> OrdinaryDiffEq, StaticArrays
<span class="pl-k">function</span> <span class="pl-en">lorenz</span>(u,p,t)
 SA[<span class="pl-c1">10.0</span>(u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>]),u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(<span class="pl-c1">28.0</span><span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>],u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> (<span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>)<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]]
<span class="pl-k">end</span>
u0 <span class="pl-k">=</span> SA[<span class="pl-c1">1.0</span>;<span class="pl-c1">0.0</span>;<span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>,<span class="pl-c1">100.0</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz,u0,tspan)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">Tsit5</span>())</pre></div>
<p dir="auto">For "refined ODEs", like dynamical equations and <code>SecondOrderODEProblem</code>s, refer to the <a href="https://diffeq.sciml.ai/dev/types/ode_types/" rel="nofollow">DiffEqDocs</a>. For example, in <a href="https://github.com/SciML/DiffEqTutorials.jl">DiffEqTutorials.jl</a> we show how to solve equations of motion using symplectic methods:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function HH_acceleration!(dv,v,u,p,t)
    x,y  = u
    dx,dy = dv
    dv[1] = -x - 2x*y
    dv[2] = y^2 - y -x^2
end
initial_positions = [0.0,0.1]
initial_velocities = [0.5,0.0]
prob = SecondOrderODEProblem(HH_acceleration!,initial_velocities,initial_positions,tspan)
sol2 = solve(prob, KahanLi8(), dt=1/10);"><pre><span class="pl-k">function</span> <span class="pl-en">HH_acceleration!</span>(dv,v,u,p,t)
    x,y  <span class="pl-k">=</span> u
    dx,dy <span class="pl-k">=</span> dv
    dv[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-k">-</span>x <span class="pl-k">-</span> <span class="pl-c1">2</span>x<span class="pl-k">*</span>y
    dv[<span class="pl-c1">2</span>] <span class="pl-k">=</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> y <span class="pl-k">-</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>
initial_positions <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>,<span class="pl-c1">0.1</span>]
initial_velocities <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>,<span class="pl-c1">0.0</span>]
prob <span class="pl-k">=</span> <span class="pl-c1">SecondOrderODEProblem</span>(HH_acceleration!,initial_velocities,initial_positions,tspan)
sol2 <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">KahanLi8</span>(), dt<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">10</span>);</pre></div>
<p dir="auto">Other refined forms are IMEX and semi-linear ODEs (for exponential integrators).</p>
<h2 dir="auto"><a id="user-content-available-solvers" class="anchor" aria-hidden="true" href="#available-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available Solvers</h2>
<p dir="auto">For the list of available solvers, please refer to the <a href="https://diffeq.sciml.ai/dev/solvers/ode_solve/" rel="nofollow">DifferentialEquations.jl ODE Solvers</a>, <a href="http://diffeq.sciml.ai/dev/solvers/dynamical_solve/" rel="nofollow">Dynamical ODE Solvers</a>, and the <a href="http://diffeq.sciml.ai/dev/solvers/split_ode_solve/" rel="nofollow">Split ODE Solvers</a> pages.</p>
</article></div>