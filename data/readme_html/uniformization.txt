<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-uniformization" class="anchor" aria-hidden="true" href="#uniformization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Uniformization</h1>
<p dir="auto"><a href="https://smith-garrett.github.io/Uniformization.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://smith-garrett.github.io/Uniformization.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/smith-garrett/Uniformization.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/smith-garrett/Uniformization.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/smith-garrett/Uniformization.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/480cf2700b2ac9cfcc579fef285d77caf704335d348960a068f908ba02c10b21/68747470733a2f2f636f6465636f762e696f2f67682f736d6974682d676172726574742f556e69666f726d697a6174696f6e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/smith-garrett/Uniformization.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/555271933" rel="nofollow"><img src="https://camo.githubusercontent.com/c1b111928c2950181ea47ddf37fe040c6d08ea6ff4f9c460fca8ffc4216a8ba2/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3535353237313933332e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/555271933.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Uniformization.jl is a package for solving continuous-time Markov processes using
uniformization, also known as randomization or Jensen's method. Solutions are approximated
by converting the continuous-time problem to a discrete-time problem paired with a counting
mechanism. Currently, standard uniformization, Erlangization or external uniformization, and
method based on discrete observation times (Yoon &amp; Shanthikumar, 1989, <em>Probability in the
Engineering and Informational Sciences</em>) are implemented.</p>
<h2 dir="auto"><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installing</h2>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Begin by creating a generator matrix <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$\mathbf{Q}$</math-renderer> for the problem. The <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$i,j$</math-renderer>-th entry
specifies the transition rate per unit time from state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$j$</math-renderer> to state <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$i$</math-renderer>. We also need to
specify the initial conditions, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$\mathbf{p}(0)$</math-renderer>, which must be a probabilty distribution
over all states. Using the <code>TransitionRateMatrix</code> type is optional; ensuring that other
types of matrices have the correct properties can also be done using the
<code>transitionratematrix</code> and <code>transitionratematrix!</code> functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Uniformization.jl
Q = TransitionRateMatrix([-1.0 1 0; 1 -2 1; 0 1 -1])
p0 = [1.0, 0, 0]"><pre><span class="pl-k">using</span> Uniformization<span class="pl-k">.</span>jl
Q <span class="pl-k">=</span> <span class="pl-c1">TransitionRateMatrix</span>([<span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>; <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>])
p0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>]</pre></div>
<p dir="auto">From here, we can solve for the probability distribution at time <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$\mathbf{p}(t)$</math-renderer>,
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$\mathbf{p}(t) = e^{\mathbf{Q}t} \mathbf{p}(0)$</math-renderer>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t = 0.5
k = 2^8
uniformize(Q, p0, k, t)"><pre>t <span class="pl-k">=</span> <span class="pl-c1">0.5</span>
k <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">^</span><span class="pl-c1">8</span>
<span class="pl-c1">uniformize</span>(Q, p0, k, t)</pre></div>
<p dir="auto">The parameter <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$k$</math-renderer> controls the accuracy of the approximation; the default is <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="c35625971ba84b735b2cd4f37aa11bf1">$2^{10}$</math-renderer>.</p>
<p dir="auto">The <code>erlangization</code> method is the default, as it seems to be a good compromise between
efficiency and robustness on stiff problems.</p>
<p dir="auto">Automatic differentiation using <code>ForwardDiff.jl</code> and <code>ReverseDiff.jl</code> should work as
expected.</p>
<p dir="auto">Further information is available in the docstrings.</p>
<h2 dir="auto">
<a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">See <a href="CITATION.bib"><code>CITATION.bib</code></a> for the relevant reference(s).</p>
</article></div>