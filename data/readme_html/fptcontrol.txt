<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fptcontrol" class="anchor" aria-hidden="true" href="#fptcontrol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FPTControl</h1>
<p><a href="https://travis-ci.org/krisztiankosi/FPTControl" rel="nofollow"><img src="https://camo.githubusercontent.com/8d28bf40a006f7909bb8902b08405fa3274017a9/68747470733a2f2f7472617669732d63692e6f72672f6b7269737a7469616e6b6f73692f465054436f6e74726f6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/krisztiankosi/FPTControl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Fixed Point Transformation Based Control</p>
<p>Some examples can be found on my Control github repo.
<a href="https://github.com/krisztiankosi/Control">https://github.com/krisztiankosi/Control</a></p>
<p>The Original article for this method is in <a href="http://uni-obuda.hu/journal" rel="nofollow">Acta Polytechnica Hungarica</a> published by <a href="https://www.uni-obuda.hu" rel="nofollow">Óbuda University</a>
It is an Open Access Journal, IF for 2014: 0.649
<a href="http://uni-obuda.hu/journal/Tar_Bito_Nadai_Machado_17.pdf" rel="nofollow">Robust Fixed Point Transformations in Adaptive Control Using Local Basin of Attraction</a></p>
<p>##Usage examples</p>
<p>If we see a 2nd order system,</p>
<p>Kinematic Block</p>
<pre><code>KB(n,lambda,errors,nominal)
</code></pre>
<p>in code:</p>
<pre><code>errors=[error_int,h,h_p]
qDes_pp[i]=KB(3,Λ,errors,qN_pp[i])
</code></pre>
<p>Deformation functions</p>
<p>SISO case:</p>
<pre><code>G_SISO(past_input,past_response,desired,Kc,Bc,Ac)
</code></pre>
<p>MIMO case:</p>
<pre><code>G_MIMO(past_input,past_response,desired,Kc,Bc,Ac)
</code></pre>
<p>using SISO in code:</p>
<pre><code>qDef_pp[i]=G_SISO(past_input,past_response,qDes_pp[i],K,B,A)
</code></pre>
<p>Simple Euler Integral (rectangle method)</p>
<pre><code>Integ(Integral,step,input)
</code></pre>
<pre><code>error_int=Integ(error_int,δt,h)
</code></pre>
<p>Complete example using this toolbox can be found <a href="https://github.com/krisztiankosi/Control/blob/master/examples/RFPT_SISO/Duffing%20Oscillator%20with%20FPTControl%20Toolbox/Duffing_RFPT_with_FPTControl_v2.jl">here</a></p>
<p>The model is a simple Duffing Oscillator.</p>
<p>Manual: the first version of the manual is in the Manual folder (pdf)</p>
</article></div>