<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gtkutilities" class="anchor" aria-hidden="true" href="#gtkutilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GtkUtilities</h1>
<p dir="auto"><a href="https://travis-ci.com/JuliaGtk/GtkUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/140db6824ad7905737a6bd5c9b6cee52fae60a9f8b95d292092dda89cf41441d/68747470733a2f2f7472617669732d63692e636f6d2f4a756c696147746b2f47746b5574696c69746965732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaGtk/GtkUtilities.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Alternatives</h1>
<p dir="auto">New users are encouraged to consider <a href="https://github.com/JuliaGizmos/GtkReactive.jl">GtkReactive</a> instead.</p>
<h1 dir="auto"><a id="user-content-what-is-gtkutilities" class="anchor" aria-hidden="true" href="#what-is-gtkutilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is GtkUtilities?</h1>
<p dir="auto">This package is a collection of extensions to
<a href="https://github.com/JuliaLang/Gtk.jl">Gtk</a> that make interactive
graphics easier.  For example, it allows you to:</p>
<ul dir="auto">
<li>"attach" user data to widgets or any other object</li>
<li>perform rubber-band selection</li>
<li>use pan and zoom</li>
<li>synchronize state across multiple UI widgets and canvases</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install via</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add GtkUtilities"><pre>]add GtkUtilities</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-guidata-associating-user-data-with-widgets" class="anchor" aria-hidden="true" href="#guidata-associating-user-data-with-widgets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>guidata</code>: associating user data with widgets</h3>
<p dir="auto">Given a widget (Button, Canvas, Window, etc.) or other graphical object
<code>w</code>, a value <code>val</code> can be associated with ("stored in") <code>w</code> using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="guidata[w, :name] = val"><pre>guidata[w, <span class="pl-c1">:name</span>] <span class="pl-k">=</span> val</pre></div>
<p dir="auto">where <code>:name</code> is the name (a Symbol) you've assigned to <code>val</code> for the
purposes of storage.</p>
<p dir="auto">The value can be retrieved with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="val = guidata[w, :name]"><pre>val <span class="pl-k">=</span> guidata[w, <span class="pl-c1">:name</span>]</pre></div>
<p dir="auto">Here are some other things you can do with <code>guidata</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="alldata = guidata[w]           # fetch all data associated with w
val = get(guidata, (w,:name), default)   # returns default if :name not defined
delete!(guidata, (w,:name))    # deletes the value associated with :name
delete!(guidata, w)            # deletes all data associated with w"><pre>alldata <span class="pl-k">=</span> guidata[w]           <span class="pl-c"><span class="pl-c">#</span> fetch all data associated with w</span>
val <span class="pl-k">=</span> <span class="pl-c1">get</span>(guidata, (w,<span class="pl-c1">:name</span>), default)   <span class="pl-c"><span class="pl-c">#</span> returns default if :name not defined</span>
<span class="pl-c1">delete!</span>(guidata, (w,<span class="pl-c1">:name</span>))    <span class="pl-c"><span class="pl-c">#</span> deletes the value associated with :name</span>
<span class="pl-c1">delete!</span>(guidata, w)            <span class="pl-c"><span class="pl-c">#</span> deletes all data associated with w</span></pre></div>
<p dir="auto">If <code>w</code> is a <code>GtkWidget</code>, the associated data are automatically deleted
when the object is destroyed.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    c = @Canvas()
    bb = BoundingBox(0, 1, 0, 1)
    guidata[c, :zoombb] = bb"><pre>    c <span class="pl-k">=</span> <span class="pl-c1">@Canvas</span>()
    bb <span class="pl-k">=</span> <span class="pl-c1">BoundingBox</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
    guidata[c, <span class="pl-c1">:zoombb</span>] <span class="pl-k">=</span> bb</pre></div>
<h3 dir="auto"><a id="user-content-rubber-band-selection" class="anchor" aria-hidden="true" href="#rubber-band-selection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rubber band selection</h3>
<p dir="auto"><code>rubberband_start(c, x, y, callback_done; minpixels=2)</code> starts a rubber-band
selection on Canvas <code>c</code> at position <code>(x,y)</code>.  When the user releases
the mouse button, the callback function <code>callback_done(c, bb)</code> is run,
where <code>bb</code> is the BoundingBox of the selected region.  To reduce the
likelihood that clicks used to raise windows will result in
rubber banding, the callback is not executed unless the user drags
the mouse by at least <code>minpixels</code> pixels (default value 2).</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    c.mouse.button1press = (widget, event) -&gt; begin
        if event.event_type == Gtk.GdkEventType.BUTTON_PRESS
            GtkUtilities.rubberband_start(c, event.x, event.y, (c, bb) -&gt; @show bb)
        end
    end"><pre>    c<span class="pl-k">.</span>mouse<span class="pl-k">.</span>button1press <span class="pl-k">=</span> (widget, event) <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
        <span class="pl-k">if</span> event<span class="pl-k">.</span>event_type <span class="pl-k">==</span> Gtk<span class="pl-k">.</span>GdkEventType<span class="pl-k">.</span>BUTTON_PRESS
            GtkUtilities<span class="pl-k">.</span><span class="pl-c1">rubberband_start</span>(c, event<span class="pl-k">.</span>x, event<span class="pl-k">.</span>y, (c, bb) <span class="pl-k">-&gt;</span> <span class="pl-c1">@show</span> bb)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span></pre></div>
<p dir="auto">sets up a Canvas so that rubberband selection starts when the
user clicks the mouse; when the button is released, it prints the
bounding box of the selection region.</p>
<h3 dir="auto"><a id="user-content-zooming-and-panning" class="anchor" aria-hidden="true" href="#zooming-and-panning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Zooming and panning</h3>
<p dir="auto">Zooming and panning a Canvas <code>c</code> are performed using four <code>guidata</code>
objects, named <code>:xview</code>, <code>:yview</code>, <code>:xviewlimits</code>, <code>:yviewlimits</code>.
The first two express the current view region, which includes
effects of any previous zoom and pan operations.  The second two
encode the allowable area, representing the largest-sized region
that may be viewed.</p>
<p dir="auto">You intialize panning and zooming with</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="panzoom(c, [xviewlimits, yviewlimits], [xview, yview])
panzoom_mouse(c)
id = panzoom_key(c)"><pre class="notranslate"><code>panzoom(c, [xviewlimits, yviewlimits], [xview, yview])
panzoom_mouse(c)
id = panzoom_key(c)
</code></pre></div>
<p dir="auto">This sequence will implement panning and zooming with either the
keyboard or wheel-mouse.  You can specify the keys and modifiers, as
well as the behavior of scroll-zooming relative to the mouse pointer
location, via keyword arguments to these functions. See each
individual function (e.g., <code>?panzoom_key</code>) for more information.</p>
<p dir="auto">The <code>draw</code> method for your Canvas must make use of the
<code>:xview</code>, <code>:yview</code> properties.
In the simplest cases, you might achieve this with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="draw(c) do widget
ctx = getgc(c)
h = height(c)
w = width(c)

xviewlimits, yviewlimits = guidata[c, :xviewlimits], guidata[c, :yviewlimits]
bb = BoundingBox( xviewlimits.min, xviewlimits.max, yviewlimits.min, yviewlimits.max)  # you can create bb outside of the draw method instead, by using explicity values for xview/yview-limits. However, 'guidata' will not work unless 'c' has already been fully defined.
set_coordinates(ctx, BoundingBox(0, w, 0, h), bb)

xview, yview = guidata[c, :xview], guidata[c, :yview]
...
# use xview and yview to manipulate the content of your canvas
...
end"><pre><span class="pl-c1">draw</span>(c) <span class="pl-k">do</span> widget
ctx <span class="pl-k">=</span> <span class="pl-c1">getgc</span>(c)
h <span class="pl-k">=</span> <span class="pl-c1">height</span>(c)
w <span class="pl-k">=</span> <span class="pl-c1">width</span>(c)

xviewlimits, yviewlimits <span class="pl-k">=</span> guidata[c, <span class="pl-c1">:xviewlimits</span>], guidata[c, <span class="pl-c1">:yviewlimits</span>]
bb <span class="pl-k">=</span> <span class="pl-c1">BoundingBox</span>( xviewlimits<span class="pl-k">.</span>min, xviewlimits<span class="pl-k">.</span>max, yviewlimits<span class="pl-k">.</span>min, yviewlimits<span class="pl-k">.</span>max)  <span class="pl-c"><span class="pl-c">#</span> you can create bb outside of the draw method instead, by using explicity values for xview/yview-limits. However, 'guidata' will not work unless 'c' has already been fully defined.</span>
<span class="pl-c1">set_coordinates</span>(ctx, <span class="pl-c1">BoundingBox</span>(<span class="pl-c1">0</span>, w, <span class="pl-c1">0</span>, h), bb)

xview, yview <span class="pl-k">=</span> guidata[c, <span class="pl-c1">:xview</span>], guidata[c, <span class="pl-c1">:yview</span>]
<span class="pl-k">...</span>
<span class="pl-c"><span class="pl-c">#</span> use xview and yview to manipulate the content of your canvas</span>
<span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The returned <code>id</code> can be disabled or enabled via
<code>signal_handler_block</code> and <code>signal_handler_unblock</code>, respectively, or
removed with <code>signal_handler_disconnect</code>.</p>
<h3 dir="auto"><a id="user-content-managing-state" class="anchor" aria-hidden="true" href="#managing-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Managing state</h3>
<p dir="auto"><strong>Note</strong>: this component will be rebased on Reactive.jl after
<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="103815675" data-permission-text="Title is private" data-url="https://github.com/JuliaGizmos/Reactive.jl/issues/65" data-hovercard-type="pull_request" data-hovercard-url="/JuliaGizmos/Reactive.jl/pull/65/hovercard" href="https://github.com/JuliaGizmos/Reactive.jl/pull/65">JuliaGizmos/Reactive.jl#65</a> merges, hopefully
via <a href="https://github.com/jverzani/GtkInteract.jl">https://github.com/jverzani/GtkInteract.jl</a>. This
interface is deprecated.</p>
<p dir="auto">Suppose you have a slider (a <code>Scale</code>) and an <code>Entry</code> box as two
alternative mechanisms for specifying a single number, and you want to
use that number in some calculations when you render a <code>Canvas</code>.
Who "owns" the number? Does the <code>Entry</code> callback have to be aware of
the <code>Scale</code> callback, and vice-versa?</p>
<p dir="auto">You can centralize your handling of this piece of information by using
a <code>State</code> object and <code>link</code>ing it to the UI elements:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state = State(5)

e = @Entry()
s = @Scale(false, 1:10)
c = @Canvas()
draw(c) do widget
   ...   # make use of state in here somewhere
end

elink = link(state, e)
slink = link(state, s)
link(state, c)

get(elink)               # returns 5
set!(state, 7)           # wow, the Canvas redraws and the Entry &amp; Scale change!
get(state)               # returns 7
get(slink)               # returns 7
set!(slink, 4)           # everything updates again"><pre>state <span class="pl-k">=</span> <span class="pl-c1">State</span>(<span class="pl-c1">5</span>)

e <span class="pl-k">=</span> <span class="pl-c1">@Entry</span>()
s <span class="pl-k">=</span> <span class="pl-c1">@Scale</span>(<span class="pl-c1">false</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
c <span class="pl-k">=</span> <span class="pl-c1">@Canvas</span>()
<span class="pl-c1">draw</span>(c) <span class="pl-k">do</span> widget
   <span class="pl-k">...</span>   <span class="pl-c"><span class="pl-c">#</span> make use of state in here somewhere</span>
<span class="pl-k">end</span>

elink <span class="pl-k">=</span> <span class="pl-c1">link</span>(state, e)
slink <span class="pl-k">=</span> <span class="pl-c1">link</span>(state, s)
<span class="pl-c1">link</span>(state, c)

<span class="pl-c1">get</span>(elink)               <span class="pl-c"><span class="pl-c">#</span> returns 5</span>
<span class="pl-c1">set!</span>(state, <span class="pl-c1">7</span>)           <span class="pl-c"><span class="pl-c">#</span> wow, the Canvas redraws and the Entry &amp; Scale change!</span>
<span class="pl-c1">get</span>(state)               <span class="pl-c"><span class="pl-c">#</span> returns 7</span>
<span class="pl-c1">get</span>(slink)               <span class="pl-c"><span class="pl-c">#</span> returns 7</span>
<span class="pl-c1">set!</span>(slink, <span class="pl-c1">4</span>)           <span class="pl-c"><span class="pl-c">#</span> everything updates again</span></pre></div>
<p dir="auto">Note that in this example we didn't have to write any callbacks at
all: just <code>link</code>ing the widget to the <code>State</code> object creates the
callback we need, and any changes are automatically propagated for
you.</p>
<h2 dir="auto"><a id="user-content-help" class="anchor" aria-hidden="true" href="#help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Help</h2>
<p dir="auto">Each function has its own help, e.g., <code>?rubberband_start</code>.</p>
</article></div>