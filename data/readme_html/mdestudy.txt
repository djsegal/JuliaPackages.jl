<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mdestudy-market-data-event-study" class="anchor" aria-hidden="true" href="#mdestudy-market-data-event-study"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MDEStudy (Market Data Event Study)</h1>
<hr>
<h2 dir="auto"><a id="user-content-dataset-introduction" class="anchor" aria-hidden="true" href="#dataset-introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dataset Introduction</h2>
<p dir="auto">We need three data sets as input, one for firm returns (firm_ret), one for market returns(mkt_ret), and one for event dates(event_dates).</p>
<p dir="auto">First is the company return, in firm_ret, we have firm id(firm_id), firm return date(date), return (ret).
The second is market return. In mkt_ret, there are market return value(mkt), market return date(date), and some optional factors, such as smb,hml,umb, etc.
The third is the firm's event date. In event_dates, we have the firm id(firm_id), the date the event started (event_window_start), the date the event ended (event_window_end), the start date without the event (est_window_start) and the end date without the event (est_window_start).</p>
<h2 dir="auto"><a id="user-content-generating-the-dataset" class="anchor" aria-hidden="true" href="#generating-the-dataset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating the dataset</h2>
<p dir="auto">The example dataset is simulated data. If you want to use the sample data for testing, follow these steps:
Find create_data.jl in MDEStudy/benchmark/ and run it, this process will take a while.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="include(&quot;create_data.jl&quot;)"><pre class="notranslate"><code>include("create_data.jl")
</code></pre></div>
<p dir="auto">Make sure that there is a folder named "data" in the MDEStudy/benchmark/ directory where the dataset files will be placed. And the data is in millions, so make sure you have enough storage.
In total, three datasets are generated: ds_firm, ds_mkt, and ds_events.</p>
<h2 dir="auto"><a id="user-content-loading-dataset" class="anchor" aria-hidden="true" href="#loading-dataset"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading dataset</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DLMreader
using Dates"><pre class="notranslate"><code>using DLMreader
using Dates
</code></pre></div>
<p dir="auto">DLMreader is an efficient multi-threaded package for reading(writing) delimited files. It works very well for huge files.
The date is read in as a string. We need to convert it to a date by using Dates.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ds_firm = filereader(joinpath(&quot;data&quot;, &quot;firm_ret.csv&quot;), types = Dict(2=&gt;Date)); 
ds_mkt = filereader(joinpath(&quot;data&quot;, &quot;mkt_ret.csv&quot;), types = Dict(1=&gt;Date));
ds_events=filereader(joinpath(&quot;data&quot;,&quot;event_dates.csv&quot;),types = Dict(2:6 .=&gt;Date)) |&gt; unique;"><pre class="notranslate"><code>ds_firm = filereader(joinpath("data", "firm_ret.csv"), types = Dict(2=&gt;Date)); 
ds_mkt = filereader(joinpath("data", "mkt_ret.csv"), types = Dict(1=&gt;Date));
ds_events=filereader(joinpath("data","event_dates.csv"),types = Dict(2:6 .=&gt;Date)) |&gt; unique;
</code></pre></div>
<h2 dir="auto"><a id="user-content-combine-datasets" class="anchor" aria-hidden="true" href="#combine-datasets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Combine datasets</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="data = MarketData(ds_mkt, ds_firm; id_col=:firm_id, valuecols_firms=[:ret])"><pre class="notranslate"><code>data = MarketData(ds_mkt, ds_firm; id_col=:firm_id, valuecols_firms=[:ret])
</code></pre></div>
<p dir="auto">leftjoin ds_firm with ds_mkt by "date" column. In this process, we will take the date in ds_mkt as businessday to check whether the date in ds_firm is businessday, and if there is any discrepancy, we will throw an error.
<em>MarketData</em> will return a MarketData struct.
Note: All datasets will be sorted by date inside the MarketData function.</p>
<p dir="auto">"MarketData()" has three fields
calendar
firmdata
marketdata
The businessday result is stored in "calendar" field.
"firmdata" is the leftjoin  result of sorted ds_firm.
"marketdata" is the sorted ds_mkt without "date" column.</p>
<h2 dir="auto"><a id="user-content-calculate-the-abnormal-return" class="anchor" aria-hidden="true" href="#calculate-the-abnormal-return"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Calculate the abnormal return</h2>
<p dir="auto">We can then use the events data set ds_events, the curated data set data, and the user-provided model (represented as a formula) as arguments to the group_and_reg function.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="result=group_and_reg(ds_events,data, @formula(ret ~ mkt + smb + hml + umd))"><pre class="notranslate"><code>result=group_and_reg(ds_events,data, @formula(ret ~ mkt + smb + hml + umd))
</code></pre></div>
<p dir="auto">Formula format: @formula(response_name ~ factor_names)
Users can customize the formula to fit different expected return models.</p>
<p dir="auto">The result is an AbResult struct which has fields:
formula: the user's input formula
coef: a matrix of coefficient of the model
expected: expected return
actual: actual return
abr: abnormal return
xnames:a vector of factor names and intercept of model
yname : response variable name.</p>
</article></div>