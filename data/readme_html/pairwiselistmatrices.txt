<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pairwiselistmatrices" class="anchor" aria-hidden="true" href="#pairwiselistmatrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PairwiseListMatrices</h1>
<p dir="auto">Linux, OSX: <a href="https://travis-ci.org/diegozea/PairwiseListMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0b60e1b642ba90a73fac74d8ab012aca7c7cd035c401ee61b230272244c6cc05/68747470733a2f2f7472617669732d63692e6f72672f646965676f7a65612f50616972776973654c6973744d617472696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/diegozea/PairwiseListMatrices.jl.svg?branch=master" style="max-width: 100%;"></a><br>
Windows: <a href="https://ci.appveyor.com/project/diegozea/pairwiselistmatrices-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/35e978c5bd1eb93cd93ddf6d386d99ce4b8278c486144d2f03c59e423e3df2b8/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f70393673736f35623233676938356d672f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/p96sso5b23gi85mg/branch/master?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">Code Coverage: <a href="https://coveralls.io/github/diegozea/PairwiseListMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/41eec1b261ba5b066e90334b257efcd2c6ca68baac5c096caa4833a28b319a44/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f646965676f7a65612f50616972776973654c6973744d617472696365732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/diegozea/PairwiseListMatrices.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a> <a href="http://codecov.io/github/diegozea/PairwiseListMatrices.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/889159eb5f0d81046b300ad8b6f199669ca5e8534e76a86c2478777f683dc2b5/687474703a2f2f636f6465636f762e696f2f6769746875622f646965676f7a65612f50616972776973654c6973744d617472696365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/diegozea/PairwiseListMatrices.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto"><a href="https://diegozea.github.io/PairwiseListMatrices.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a><br>
<a href="https://diegozea.github.io/PairwiseListMatrices.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">This package allows you to use a pairwise list as a matrix:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/diegozea/PairwiseListMatrices.jl/master/docs/src/PLM_README.png"><img src="https://raw.githubusercontent.com/diegozea/PairwiseListMatrices.jl/master/docs/src/PLM_README.png" alt="PLM" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mutable struct PairwiseListMatrix{T,diagonal,VT} &lt;: AbstractArray{T, 2}
    list::VT
    diag::VT
    nelements::Int
    ...
end"><pre><span class="pl-k">mutable struct</span> PairwiseListMatrix{T,diagonal,VT} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractArray{T, 2}</span>
    list<span class="pl-k">::</span><span class="pl-c1">VT</span>
    diag<span class="pl-k">::</span><span class="pl-c1">VT</span>
    nelements<span class="pl-k">::</span><span class="pl-c1">Int</span>
    <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto"><code>PairwiseListMatrix{T, diagonal, VT}</code> is a (squared) symmetric matrix that stores a <code>list</code>
of type <code>VT</code> with values of type <code>T</code> for the pairwise comparison/evaluation of <code>nelements</code>.
If <code>diagonal</code> is <code>true</code> the first element of the list is <code>1, 1</code> otherwise is <code>1, 2</code>.
If <code>diagonal</code> is <code>false</code> the diagonal values are stored in a vector on the <code>diag</code> field.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<h4 dir="auto"><a id="user-content-space" class="anchor" aria-hidden="true" href="#space"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Space</h4>
<p dir="auto">In pairwise calculations like <code>cor()</code> if results are saved as <code>PairwiseListMatrix</code> the
space is <code>N(N+1)/2</code> instead of <code>N*N</code>. This is useful to compare a large number of elements,
because you are <strong>saving ~ 50% of the memory.</strong></p>
<h4 dir="auto"><a id="user-content-time" class="anchor" aria-hidden="true" href="#time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Time</h4>
<p dir="auto"><code>PairwiseListMatrix</code> is <strong>faster than a full matrix</strong> to make operatation like <code>sum</code> and
<code>mean</code> in the whole matrix, since it is cache efficient. However it is slower than a full
matrix for reducing along dimensions.</p>
<ul dir="auto">
<li><a href="http://nbviewer.ipython.org/github/diegozea/PairwiseListMatrices.jl/blob/master/test/creation_bech.ipynb" rel="nofollow">Creation benchmark</a></li>
<li><a href="http://nbviewer.ipython.org/github/diegozea/PairwiseListMatrices.jl/blob/master/test/stats_bench.ipynb" rel="nofollow">Statistics benchmark</a></li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; # Pkg.add(&quot;PairwiseListMatrices&quot;)

julia&gt; using PairwiseListMatrices

julia&gt; plm  = PairwiseListMatrix([1,2,3], false)
3×3 PairwiseListMatrices.PairwiseListMatrix{Int64,false,Array{Int64,1}}:
 0  1  2
 1  0  3
 2  3  0

julia&gt; nplm  = setlabels(plm, [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])
3×3 Named PairwiseListMatrices.PairwiseListMatrix{Int64,false,Array{Int64,1}}
A ╲ B │ a  b  c
──────┼────────
a     │ 0  1  2
b     │ 1  0  3
c     │ 2  3  0

julia&gt; table = to_table(nplm)
6×3 Matrix{Any}:
 &quot;a&quot;  &quot;a&quot;  0
 &quot;a&quot;  &quot;b&quot;  1
 &quot;a&quot;  &quot;c&quot;  2
 &quot;b&quot;  &quot;b&quot;  0
 &quot;b&quot;  &quot;c&quot;  3
 &quot;c&quot;  &quot;c&quot;  0

julia&gt; from_table(table, true)
3×3 Named PairwiseListMatrix{Any, true, Vector{Any}}
A ╲ B │ a  b  c
──────┼────────
a     │ 0  1  2
b     │ 1  0  3
c     │ 2  3  0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Pkg.add("PairwiseListMatrices")</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PairwiseListMatrices

julia<span class="pl-k">&gt;</span> plm  <span class="pl-k">=</span> <span class="pl-c1">PairwiseListMatrix</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-c1">false</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> PairwiseListMatrices<span class="pl-k">.</span>PairwiseListMatrix{Int64,<span class="pl-c1">false</span>,Array{Int64,<span class="pl-c1">1</span>}}<span class="pl-k">:</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> nplm  <span class="pl-k">=</span> <span class="pl-c1">setlabels</span>(plm, [<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>])
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named PairwiseListMatrices<span class="pl-k">.</span>PairwiseListMatrix{Int64,<span class="pl-c1">false</span>,Array{Int64,<span class="pl-c1">1</span>}}
A ╲ B │ a  b  c
──────┼────────
a     │ <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
b     │ <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>
c     │ <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> table <span class="pl-k">=</span> <span class="pl-c1">to_table</span>(nplm)
<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Any}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>  <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>  <span class="pl-c1">0</span>
 <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>  <span class="pl-c1">1</span>
 <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>  <span class="pl-c1">2</span>
 <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>  <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>  <span class="pl-c1">0</span>
 <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>  <span class="pl-c1">3</span>
 <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>  <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span>  <span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">from_table</span>(table, <span class="pl-c1">true</span>)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Named PairwiseListMatrix{Any, <span class="pl-c1">true</span>, Vector{Any}}
A ╲ B │ a  b  c
──────┼────────
a     │ <span class="pl-c1">0</span>  <span class="pl-c1">1</span>  <span class="pl-c1">2</span>
b     │ <span class="pl-c1">1</span>  <span class="pl-c1">0</span>  <span class="pl-c1">3</span>
c     │ <span class="pl-c1">2</span>  <span class="pl-c1">3</span>  <span class="pl-c1">0</span>
</pre></div>
</article></div>