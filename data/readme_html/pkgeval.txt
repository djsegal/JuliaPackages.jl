<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-pkgevaljl" class="anchor" aria-hidden="true" href="#pkgevaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PkgEval.jl</h1>
<p dir="auto"><em>Evaluate Julia packages.</em></p>
<p dir="auto">PkgEval.jl is a package to test one or more Julia versions against the Julia
package ecosystem, and is used by Nanosoldier.jl for keeping track of package
compatibility of upcoming Julia versions.</p>
<p dir="auto">Note that for now, <strong>PkgEval.jl is Linux-only</strong>, and even requires a
sufficiently recent kernel (at least 5.11, or a distribution like Ubuntu that
has back-ported support for unprivileged overlayfs mounts in user namespaces).</p>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">PkgEval is not a registered package, so you'll need to install it from Git:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/JuliaCI/PkgEval.jl.git
cd PkgEval.jl
julia --project -e 'import Pkg; Pkg.instantiate()'"><pre>git clone https://github.com/JuliaCI/PkgEval.jl.git
<span class="pl-c1">cd</span> PkgEval.jl
julia --project -e <span class="pl-s"><span class="pl-pds">'</span>import Pkg; Pkg.instantiate()<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">To quickly test a package, a script has been provided under the <code>bin/</code> folder:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia --project bin/test_package.jl --name=Example
Package evaluation of Example started at 2022-11-27T09:30:27.777
...
Testing completed after 1.04s"><pre>$ julia --project bin/test_package.jl --name=Example
Package evaluation of Example started at 2022-11-27T09:30:27.777
...
Testing completed after 1.04s</pre></div>
<p dir="auto">This script can also be used to test specific versions of a package by setting any of the
<code>--version</code>, <code>--rev</code>, or <code>--url</code> arguments. To test a version of a package you only have
locally, e.g., a development version, use the <code>--path</code> argument instead:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia --project bin/test_package.jl --name Example --path=~/.julia/dev/Example"><pre>$ julia --project bin/test_package.jl --name Example --path=<span class="pl-k">~</span>/.julia/dev/Example</pre></div>
<p dir="auto">By default, this will use the latest <code>nightly</code> version of Julia, which is what PkgEval
uses. To use another version, use the <code>--julia</code> argument, e.g., <code>--julia=1.8</code>.</p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">To use PkgEval programmatically, there are three main interfaces do deal with:</p>
<ul dir="auto">
<li><code>Configuration</code> objects to determine how to execute tests (which Julia version, build
flags, any environment variables, ...)</li>
<li><code>Package</code> objects to select packages to test</li>
<li>the <code>evaluate</code> function to evaluate every package on each provieded configuration,
returning the results in a DataFrame</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PkgEval

julia&gt; config = Configuration(; julia=&quot;1.7&quot;);

julia&gt; package = Package(; name=&quot;Example&quot;);

julia&gt; evaluate([config], [package])
1×9 DataFrame
 Row │ julia_spec  julia_version  compiled  name     version    ⋯
     │ String      VersionNumber  Bool      String   VersionN…? ⋯
─────┼───────────────────────────────────────────────────────────
   1 │ 1.7         1.7.0             false  Example  0.5.3      ⋯
                                                4 columns omitted"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PkgEval

julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">Configuration</span>(; julia<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>1.7<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> package <span class="pl-k">=</span> <span class="pl-c1">Package</span>(; name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Example<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>([config], [package])
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">9</span> DataFrame
 Row │ julia_spec  julia_version  compiled  name     version    ⋯
     │ String      VersionNumber  Bool      String   VersionN…? ⋯
─────┼───────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │ <span class="pl-c1">1.7</span>         <span class="pl-c1">1.7</span>.<span class="pl-c1">0</span>             <span class="pl-c1">false</span>  Example  <span class="pl-c1">0.5</span>.<span class="pl-c1">3</span>      ⋯
                                                <span class="pl-c1">4</span> columns omitted</pre></div>
<p dir="auto">Test logs are part of this dataframe in the <code>log</code> column. For example, in this case:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Resolving package versions...
Installed Example ─ v0.5.3
...
Testing Example tests passed"><pre class="notranslate"><code>Resolving package versions...
Installed Example ─ v0.5.3
...
Testing Example tests passed
</code></pre></div>
<h2 dir="auto"><a id="user-content-why-does-my-package-fail" class="anchor" aria-hidden="true" href="#why-does-my-package-fail"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why does my package fail?</h2>
<p dir="auto">If you want to debug why your package fails, it's probably easiest to use an interactive
shell:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PkgEval

julia&gt; config = Configuration()
PkgEval configuration(
  ...
)

julia&gt; PkgEval.sandboxed_julia(config)

   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.9.0-DEV.1163 (2022-08-21)
 _/ |\__'_|_|_|\__'_|  |  Commit 696f7d3dfe1 (1 day old master)
|__/                   |

julia&gt; # we're in the PkgEval sandbox here"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PkgEval

julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">Configuration</span>()
PkgEval <span class="pl-c1">configuration</span>(
  <span class="pl-k">...</span>
)

julia<span class="pl-k">&gt;</span> PkgEval<span class="pl-k">.</span><span class="pl-c1">sandboxed_julia</span>(config)

   _       _ <span class="pl-c1">_</span>(_)_     <span class="pl-k">|</span>  Documentation<span class="pl-k">:</span> https<span class="pl-k">:</span><span class="pl-k">//</span>docs<span class="pl-k">.</span>julialang<span class="pl-k">.</span>org
  (_)     <span class="pl-k">|</span> (_) (_)    <span class="pl-k">|</span>
   _ _   _<span class="pl-k">|</span> <span class="pl-k">|</span>_  __ _   <span class="pl-k">|</span>  Type <span class="pl-s"><span class="pl-pds">"</span>?<span class="pl-pds">"</span></span> <span class="pl-k">for</span> help, <span class="pl-s"><span class="pl-pds">"</span>]?<span class="pl-pds">"</span></span> <span class="pl-k">for</span> Pkg help.
  <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span> <span class="pl-k">|</span><span class="pl-k">/</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">_</span>`</span> |  |</span>
<span class="pl-s">  | | |_| | | | (_| |  |  Version 1.9.0-DEV.1163 (2022-08-21)</span>
<span class="pl-s"> _/ |<span class="pl-cce">\_</span>_'_|_|_|<span class="pl-cce">\_</span>_'_|  |  Commit 696f7d3dfe1 (1 day old master)</span>
<span class="pl-s">|__/                   |</span>
<span class="pl-s"></span>
<span class="pl-s">julia&gt; # we're in the PkgEval sandbox here</span></pre></div>
<p dir="auto">Now you can install, load and test your package. This will, by default, use a nightly build
of Julia. If you want PkgEval.jl to compile Julia, e.g. to test a specific version, create
a Configuration instance as such:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; config = Configuration(julia=&quot;master&quot;,
                              buildflags=[&quot;JULIA_CPU_TARGET=native&quot;, &quot;JULIA_PRECOMPILE=0&quot;])

# NOTE: buildflags are specified to speed-up the build"><pre>julia<span class="pl-k">&gt;</span> config <span class="pl-k">=</span> <span class="pl-c1">Configuration</span>(julia<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>master<span class="pl-pds">"</span></span>,
                              buildflags<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CPU_TARGET=native<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>JULIA_PRECOMPILE=0<span class="pl-pds">"</span></span>])

<span class="pl-c"><span class="pl-c">#</span> NOTE: buildflags are specified to speed-up the build</span></pre></div>
<h2 dir="auto"><a id="user-content-resource-constraints" class="anchor" aria-hidden="true" href="#resource-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resource constraints</h2>
<p dir="auto">PkgEval uses cgroups for restricting the resources each package can use. By default however,
non-root users can control the <code>memory</code> and <code>pids</code> cgroup controllers. To enable PkgEval
to control more resources, run the following commands:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ sudo mkdir -p /etc/systemd/system/user@.service.d
$ cat &lt;&lt;EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf
[Service]
Delegate=cpu cpuset io memory pids
EOF
$ sudo systemctl daemon-reload"><pre class="notranslate"><code>$ sudo mkdir -p /etc/systemd/system/user@.service.d
$ cat &lt;&lt;EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf
[Service]
Delegate=cpu cpuset io memory pids
EOF
$ sudo systemctl daemon-reload
</code></pre></div>
<p dir="auto">In addition, some container runtimes (i.e. <code>runc</code>) want full control over the current
cgroup, which can be done by launching Julia as a scoped service:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="systemd-run --user --scope -p Delegate=yes julia ..."><pre class="notranslate"><code>systemd-run --user --scope -p Delegate=yes julia ...
</code></pre></div>
</article></div>