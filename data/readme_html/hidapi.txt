<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-hidapi" class="anchor" aria-hidden="true" href="#hidapi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HidApi</h1>
<p><a href="https://travis-ci.org/laborg/HidApi.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f82c4b6cdf578b9f2d44491f19adc0ce3d7efe507c4fbbea887fed07366e64b9/68747470733a2f2f7472617669732d63692e6f72672f6c61626f72672f4869644170692e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/laborg/HidApi.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is a high level, cross platform wrapper of the <code>hidapi</code> library <a href="https://github.com/libusb/hidapi">https://github.com/libusb/hidapi</a> for
Julia. It comes with <em>batteries included</em> and can be used to communicate with HID devices on <em>Linux, Mac and Windows</em>.</p>
<h4><a id="user-content-under-the-hood" class="anchor" aria-hidden="true" href="#under-the-hood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Under the hood</h4>
<p>The compiled <code>hidapi</code> library is provided by Julias binary build provisioning system in the
project <a href="https://github.com/JuliaBinaryWrappers/hidapi_jll.jl">hidapi_jll</a>.
The low-level C-interface to <code>hidapi.h</code> has been created by wrapping the library using <a href="https://github.com/JuliaInterop/Clang.jl">Clang.jl</a>.
Finally a couple of functions have been added, forming the high-level API.</p>
<h1><a id="user-content-prerequisits" class="anchor" aria-hidden="true" href="#prerequisits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prerequisits</h1>
<p><em>None</em>. Although on Linux you might need to create a udev rule if the device can't be enumerated.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;HidApi.jl&quot;)
using HidApi
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>HidApi.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> HidApi</pre></div>
<h1><a id="user-content-usage-high-level-api" class="anchor" aria-hidden="true" href="#usage-high-level-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage (high level API)</h1>
<p>A high level API allows to enumerate or find devices and offers a simple way to read and write
hid messages. Devices have to be opened before reading or writing.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# initalize
init()

# enumerate
dump.(enumerate_devices())

# open and read data
dev = open(find_device(0x04ec, 0x2605))
data = read(dev)

# do something with data
...

# close
close(dev)

# exit
shutdown()
"><pre><span class="pl-c"><span class="pl-c">#</span> initalize</span>
<span class="pl-c1">init</span>()

<span class="pl-c"><span class="pl-c">#</span> enumerate</span>
<span class="pl-c1">dump</span>.(<span class="pl-c1">enumerate_devices</span>())

<span class="pl-c"><span class="pl-c">#</span> open and read data</span>
dev <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-c1">find_device</span>(<span class="pl-c1">0x04ec</span>, <span class="pl-c1">0x2605</span>))
data <span class="pl-k">=</span> <span class="pl-c1">read</span>(dev)

<span class="pl-c"><span class="pl-c">#</span> do something with data</span>
<span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> close</span>
<span class="pl-c1">close</span>(dev)

<span class="pl-c"><span class="pl-c">#</span> exit</span>
<span class="pl-c1">shutdown</span>()</pre></div>
<h1><a id="user-content-usage-low-level-api" class="anchor" aria-hidden="true" href="#usage-low-level-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage (low level API)</h1>
<p>All low level <code>hidapi.h</code> functions are available but not exported. They typically are prefixed
with <code>hid_xxx</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# initialize
val = HidApi.hid_init()
if val &lt; 0
    error(&quot;init failed&quot;)
end

# enumerate
devs = HidApi.hid_enumerate(0x0, 0x0)
cur_dev = devs
while cur_dev != C_NULL
    hid_device_info = unsafe_load(cur_dev)
    dump(hid_device_info)
    global cur_dev = hid_device_info.next
end

# free up devices list
HidApi.hid_free_enumeration(devs)

# open the device
handle = HidApi.hid_open(0x04ec, 0x2605, C_NULL)
if handle == C_NULL 
    error(&quot;open failed&quot;)
end

# create a vector, pass it to hid_read
data = Vector{Cuchar}(undef, 64)
val = HidApi.hid_read_timeout(handle, data, 64, 2000)
if val == -1 
    error(&quot;error while reading&quot;)
end

# do something with data
...

# close the device
HidApi.hid_close(handle)

# exit at the end
HidApi.hid_exit()
"><pre><span class="pl-c"><span class="pl-c">#</span> initialize</span>
val <span class="pl-k">=</span> HidApi<span class="pl-k">.</span><span class="pl-c1">hid_init</span>()
<span class="pl-k">if</span> val <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>init failed<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> enumerate</span>
devs <span class="pl-k">=</span> HidApi<span class="pl-k">.</span><span class="pl-c1">hid_enumerate</span>(<span class="pl-c1">0x0</span>, <span class="pl-c1">0x0</span>)
cur_dev <span class="pl-k">=</span> devs
<span class="pl-k">while</span> cur_dev <span class="pl-k">!=</span> <span class="pl-c1">C_NULL</span>
    hid_device_info <span class="pl-k">=</span> <span class="pl-c1">unsafe_load</span>(cur_dev)
    <span class="pl-c1">dump</span>(hid_device_info)
    <span class="pl-k">global</span> cur_dev <span class="pl-k">=</span> hid_device_info<span class="pl-k">.</span>next
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> free up devices list</span>
HidApi<span class="pl-k">.</span><span class="pl-c1">hid_free_enumeration</span>(devs)

<span class="pl-c"><span class="pl-c">#</span> open the device</span>
handle <span class="pl-k">=</span> HidApi<span class="pl-k">.</span><span class="pl-c1">hid_open</span>(<span class="pl-c1">0x04ec</span>, <span class="pl-c1">0x2605</span>, <span class="pl-c1">C_NULL</span>)
<span class="pl-k">if</span> handle <span class="pl-k">==</span> <span class="pl-c1">C_NULL</span> 
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>open failed<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> create a vector, pass it to hid_read</span>
data <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Cuchar}</span>(undef, <span class="pl-c1">64</span>)
val <span class="pl-k">=</span> HidApi<span class="pl-k">.</span><span class="pl-c1">hid_read_timeout</span>(handle, data, <span class="pl-c1">64</span>, <span class="pl-c1">2000</span>)
<span class="pl-k">if</span> val <span class="pl-k">==</span> <span class="pl-k">-</span><span class="pl-c1">1</span> 
    <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>error while reading<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> do something with data</span>
<span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> close the device</span>
HidApi<span class="pl-k">.</span><span class="pl-c1">hid_close</span>(handle)

<span class="pl-c"><span class="pl-c">#</span> exit at the end</span>
HidApi<span class="pl-k">.</span><span class="pl-c1">hid_exit</span>()</pre></div>
<h3><a id="user-content-mixing-low-level-and-high-level" class="anchor" aria-hidden="true" href="#mixing-low-level-and-high-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mixing low-level and high-level</h3>
<p>In case you need to do something thats not possible with the high level interface you
can mix in the low-level calls by using the <code>handle</code> from a <code>HidDevice</code>.</p>
</article></div>