<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-fasthaltonjl" class="anchor" aria-hidden="true" href="#fasthaltonjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastHalton.jl</h2>
<p dir="auto"><a href="https://travis-ci.com/npfrazier/Halton.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5ca27640c6b1e5c1b22cc70046dcaf94e4c6191f2539397b927f829b31f4cf09/68747470733a2f2f7472617669732d63692e636f6d2f6e706672617a6965722f48616c746f6e2e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://travis-ci.com/npfrazier/Halton.jl.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/npfrazier/Halton-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/10702de3e1c1aa1f8f9170052d4414534a5a2492ad05dfa0d9e69cbff3a4f091/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6e706672617a6965722f48616c746f6e2e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/npfrazier/Halton.jl?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">Convenient interface for getting a set of entries from a Halton Sequence. Typically needed for Monte Carlo integration. These are rough implementations of the code available <a href="https://doi.org/10.1016/0898-1221(93)90307-H" rel="nofollow">Kolář and O'Shea (1993) </a> and make no claim of coding efficiency or deep understanding. This package implements that algorithm which provides a substantial improvement in computational speed relative to existing packages (e.g. <a href="https://github.com/tobydriscoll/HaltonSequences.jl">HaltonSequences.jl</a>).</p>
<p dir="auto">Exports <code>HaltonSeq(base, skip, length, invcdf=identity)</code>, which is an iterator that returns a sequence of Halton draws of base <code>b</code> after discarding <code>skip</code> entries. These are returned as <code>Rational{Int}</code>s, and they can be collected into a <code>Vector{Rational{Int}}</code>, or copied to an <code>AbstractArray</code>, which can have eltypes <code>sRational</code> or <code>AbstractFloat</code>. Argument <code>invcdf</code> defaults to the <code>identity</code> function but can be switched to an inverse CDF to obtain draws from a particular distribution.</p>
<p dir="auto">The iterator does not provide draws from a normal distribution but rather the low discrepancy Halton sequence over the interval <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5a5c7e56c08c403b653a0d80ccc61187">$(0,1)$</math-renderer>. Use the <code>invcdf</code> argument to draws from a particular distribution. For example <code>using StatsFuns: norminvcdf; HaltonSeq(2, 5000, 100, norminvcdf)</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using StatsFuns

BASE = 2
SKIP = 5000
LENGTH = 1000
INVCDF = norminvcdf

# 1000 halton draws of base 2 starting at 1001
draws2 = collect(HaltonSeq(BASE, SKIP, LENGTH, INVCDF))

# preallocated
m,n = 10, 50
draws3 = Matrix{Float64}(undef, m, n)
HaltonSeq!(draws3, BASE, SKIP)"><pre><span class="pl-k">using</span> StatsFuns

BASE <span class="pl-k">=</span> <span class="pl-c1">2</span>
SKIP <span class="pl-k">=</span> <span class="pl-c1">5000</span>
LENGTH <span class="pl-k">=</span> <span class="pl-c1">1000</span>
INVCDF <span class="pl-k">=</span> norminvcdf

<span class="pl-c"><span class="pl-c">#</span> 1000 halton draws of base 2 starting at 1001</span>
draws2 <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">HaltonSeq</span>(BASE, SKIP, LENGTH, INVCDF))

<span class="pl-c"><span class="pl-c">#</span> preallocated</span>
m,n <span class="pl-k">=</span> <span class="pl-c1">10</span>, <span class="pl-c1">50</span>
draws3 <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(undef, m, n)
<span class="pl-c1">HaltonSeq!</span>(draws3, BASE, SKIP)</pre></div>
<h5 dir="auto">
<a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>To-Do:</h5>
<ul dir="auto">
<li>Add ability to use every <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="5a5c7e56c08c403b653a0d80ccc61187">$k$</math-renderer>-th draw.</li>
</ul>
<h4 dir="auto">
<a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h4>
<p dir="auto">Kolář, Miroslav and Seamus O'Shea (1993). "Fast, portable, and reliable algorithm for the calculation of Halton numbers" <em>Computers &amp; Mathematics with Applications</em> 25(7):3-13. <a href="https://doi.org/10.1016/0898-1221(93)90307-H" rel="nofollow">https://doi.org/10.1016/0898-1221(93)90307-H</a></p>
</article></div>