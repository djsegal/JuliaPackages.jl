<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-the-julia-devito-inversion-framework-judi" class="anchor" aria-hidden="true" href="#the-julia-devito-inversion-framework-judi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Julia Devito Inversion framework (JUDI)</h1>
<p><a href="https://slimgroup.github.io/JUDI.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/slimgroup/JUDI.jl/actions?query=workflow%3ACI-tests"><img src="https://github.com/slimgroup/JUDI.jl/workflows/CI-tests/badge.svg" alt="Build Status " style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3878711" rel="nofollow"><img src="https://camo.githubusercontent.com/340c8086d7198591f589aeb825e8a901b9512709/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333837383731312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3878711.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>JUDI is a framework for large-scale seismic modeling and inversion and designed to enable rapid translations of algorithms to fast and efficient code that scales to industry-size 3D problems. The focus of the package lies on seismic modeling as well as PDE-constrained optimization such as full-waveform inversion (FWI) and imaging (LS-RTM). Wave equations in JUDI are solved with <a href="https://www.devitoproject.org" rel="nofollow">Devito</a>, a Python domain-specific language for automated finite-difference (FD) computations. JUDI's modeling operators can also be used as layers in (convolutional) neural networks to implement physics-augmented deep learning algorithms. For this, check out JUDI's deep learning extension <a href="https://github.com/slimgroup/JUDI4Flux.jl">JUDI4Flux</a>.</p>
<h2><a id="user-content-installation-and-prerequisites" class="anchor" aria-hidden="true" href="#installation-and-prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation and prerequisites</h2>
<p>First, install Devito using <code>pip</code>, or see the <a href="https://github.com/devitocodes/devito">Devito's GitHub page</a> for installation with Conda and further information. The current release of JUDI requires Python 3 and the current Devito version. Run all of the following commands from the (bash) terminal command line (not in the Julia REPL):</p>
<div class="highlight highlight-source-julia"><pre>pip3 install <span class="pl-k">--</span>user git<span class="pl-k">+</span>https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>devitocodes<span class="pl-k">/</span>devito<span class="pl-k">.</span>git</pre></div>
<p>For reading and writing seismic SEG-Y data, JUDI uses the <a href="https://github.com/slimgroup/SegyIO.jl">SegyIO</a> package and matrix-free linear operators are based the <a href="https://github.com/slimgroup/JOLI.jl/tree/master/src">Julia Operator LIbrary</a> (JOLI):</p>
<div class="highlight highlight-source-julia"><pre>julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.develop(PackageSpec(url="https://github.com/slimgroup/SegyIO.jl"))<span class="pl-pds">'</span></span>
julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.develop(PackageSpec(url="https://github.com/slimgroup/JOLI.jl"))<span class="pl-pds">'</span></span></pre></div>
<p>Once Devito, SegyIO and JOLI are installed, you can install JUDI as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.develop(PackageSpec(url="https://github.com/slimgroup/JUDI.jl"))<span class="pl-pds">'</span></span></pre></div>
<p>Once you have JUDI installed, you need to point Julia's PyCall package to the Python version for which we previsouly installed Devito. To do this, copy-paste the following commands into the (bash) terminal:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">export</span> PYTHON<span class="pl-k">=</span><span class="pl-k">$</span>(which python3)
julia <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using Pkg; Pkg.build("PyCall")<span class="pl-pds">'</span></span></pre></div>
<h2><a id="user-content-running-with-docker" class="anchor" aria-hidden="true" href="#running-with-docker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running with Docker</h2>
<p>If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook:</p>
<pre><code>docker run -p 8888:8888 philippwitte/judi:v1.5
</code></pre>
<p>This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with:</p>
<pre><code>docker run -it philippwitte/judi:v1.5 /bin/bash
</code></pre>
<p>Inside the container, all examples are located in the directory <code>/app/judi/examples/scripts</code>.</p>
<h2><a id="user-content-configure-compiler-and-openmp" class="anchor" aria-hidden="true" href="#configure-compiler-and-openmp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configure compiler and OpenMP</h2>
<h2><a id="user-content-running-with-docker-1" class="anchor" aria-hidden="true" href="#running-with-docker-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running with Docker</h2>
<p>If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook:</p>
<pre><code>docker run -p 8888:8888 philippwitte/judi:master
</code></pre>
<p>This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with:</p>
<pre><code>docker run -it philippwitte/judi:master /bin/bash
</code></pre>
<p>Inside the container, all examples are located in the directory <code>/app/judi/examples/scripts</code>.</p>
<h2><a id="user-content-configure-compiler-and-openmp-1" class="anchor" aria-hidden="true" href="#configure-compiler-and-openmp-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configure compiler and OpenMP</h2>
<p>Devito uses just-in-time compilation for the underlying wave equation solves. The default compiler is intel, but can be changed to any other specified compiler such as <code>gnu</code>. Either run the following command from the command line or add it to your ~/.bashrc file:</p>
<pre><code>export DEVITO_ARCH=gnu
</code></pre>
<p>Devito uses shared memory OpenMP parallelism for solving PDEs. OpenMP is disabled by default, but you can enable OpenMP and define the number of threads (per PDE solve) as follows:</p>
<pre><code>export DEVITO_LANGUAGE=openmp  # Enable OpenMP. 
export OMP_NUM_THREADS=4    # Number of OpenMP threads
</code></pre>
<h2><a id="user-content-full-waveform-inversion" class="anchor" aria-hidden="true" href="#full-waveform-inversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Full-waveform inversion</h2>
<p>JUDI is designed to let you set up objective functions that can be passed to standard packages for (gradient-based) optimization. The following example demonstrates how to perform FWI on the 2D Overthrust model using a spectral projected gradient algorithm from the minConf library, which is included in the software. A small test dataset (62 MB) and the model can be downloaded from this FTP server:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>wget ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/2DFWI/overthrust_2D.segy<span class="pl-pds">`</span></span>)
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>wget ftp://slim.gatech.edu/data/SoftwareRelease/WaveformInversion.jl/2DFWI/overthrust_2D_initial_model.h5<span class="pl-pds">`</span></span>)</pre></div>
<p>The first step is to load the velocity model and the observed data into Julia, as well as setting up bound constraints for the inversion, which prevent too high or low velocities in the final result. Furthermore, we define an 8 Hertz Ricker wavelet as the source function:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyPlot, HDF5, SegyIO, JUDI<span class="pl-k">.</span>TimeModeling, JUDI<span class="pl-k">.</span>SLIM_optim, Statistics, Random

<span class="pl-c"><span class="pl-c">#</span> Load starting model</span>
n, d, o, m0 <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>overthrust_2D_initial_model.h5<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>o<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>m0<span class="pl-pds">"</span></span>)
model0 <span class="pl-k">=</span> <span class="pl-c1">Model</span>((n[<span class="pl-c1">1</span>], n[<span class="pl-c1">2</span>]), (d[<span class="pl-c1">1</span>], d[<span class="pl-c1">2</span>]), (o[<span class="pl-c1">1</span>], o[<span class="pl-c1">2</span>]), m0)	<span class="pl-c"><span class="pl-c">#</span> need n, d, o as tuples and m0 as array</span>

<span class="pl-c"><span class="pl-c">#</span> Bound constraints</span>
vmin <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Float32, model0<span class="pl-k">.</span>n) <span class="pl-k">.+</span> <span class="pl-c1">0.3</span>f0
vmax <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Float32, model0<span class="pl-k">.</span>n) <span class="pl-k">.+</span> <span class="pl-c1">5.5</span>f0
mmin <span class="pl-k">=</span> <span class="pl-c1">vec</span>((<span class="pl-c1">1</span>f0 <span class="pl-k">./</span> vmax)<span class="pl-k">.^</span><span class="pl-c1">2</span>)	<span class="pl-c"><span class="pl-c">#</span> convert to slowness squared [s^2/km^2]</span>
mmax <span class="pl-k">=</span> <span class="pl-c1">vec</span>((<span class="pl-c1">1</span>f0 <span class="pl-k">./</span> vmin)<span class="pl-k">.^</span><span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Load segy data</span>
block <span class="pl-k">=</span> <span class="pl-c1">segy_read</span>(<span class="pl-s"><span class="pl-pds">"</span>overthrust_2D.segy<span class="pl-pds">"</span></span>)
dobs <span class="pl-k">=</span> <span class="pl-c1">judiVector</span>(block)

<span class="pl-c"><span class="pl-c">#</span> Set up wavelet</span>
src_geometry <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>(block; key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>source<span class="pl-pds">"</span></span>, segy_depth_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SourceDepth<span class="pl-pds">"</span></span>)	<span class="pl-c"><span class="pl-c">#</span> read source position geometry</span>
wavelet <span class="pl-k">=</span> <span class="pl-c1">ricker_wavelet</span>(src_geometry<span class="pl-k">.</span>t[<span class="pl-c1">1</span>], src_geometry<span class="pl-k">.</span>dt[<span class="pl-c1">1</span>], <span class="pl-c1">0.008</span>f0)	<span class="pl-c"><span class="pl-c">#</span> 8 Hz wavelet</span>
q <span class="pl-k">=</span> <span class="pl-c1">judiVector</span>(src_geometry, wavelet)
</pre></div>
<p>For this FWI example, we define an objective function that can be passed to the minConf optimization library, which is included in the Julia Devito software package. We allow a maximum of 20 function evaluations using a spectral-projected gradient (SPG) algorithm. To save computational cost, each function evaluation uses a randomized subset of 20 shot records, instead of all 97 shots:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Optimization parameters</span>
fevals <span class="pl-k">=</span> <span class="pl-c1">20</span>	<span class="pl-c"><span class="pl-c">#</span> number of function evaluations</span>
batchsize <span class="pl-k">=</span> <span class="pl-c1">20</span>	<span class="pl-c"><span class="pl-c">#</span> number of sources per iteration</span>
fvals <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">21</span>)
opt <span class="pl-k">=</span> <span class="pl-c1">Options</span>(optimal_checkpointing <span class="pl-k">=</span> <span class="pl-c1">false</span>)    <span class="pl-c"><span class="pl-c">#</span> set to true to enable checkpointing</span>

<span class="pl-c"><span class="pl-c">#</span> Objective function for minConf library</span>
count <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">function</span> <span class="pl-en">objective_function</span>(x)
	model0<span class="pl-k">.</span>m <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(x, model0<span class="pl-k">.</span>n);

	<span class="pl-c"><span class="pl-c">#</span> fwi function value and gradient</span>
	i <span class="pl-k">=</span> <span class="pl-c1">randperm</span>(dobs<span class="pl-k">.</span>nsrc)[<span class="pl-c1">1</span><span class="pl-k">:</span>batchsize]
	fval, grad <span class="pl-k">=</span> <span class="pl-c1">fwi_objective</span>(model0, q[i], dobs[i]; options<span class="pl-k">=</span>opt)
	grad <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(grad, model0<span class="pl-k">.</span>n); grad[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">21</span>] <span class="pl-k">.=</span> <span class="pl-c1">0</span>f0	<span class="pl-c"><span class="pl-c">#</span> reset gradient in water column to 0.</span>
	grad <span class="pl-k">=</span> <span class="pl-c1">.1</span>f0<span class="pl-k">*</span>grad<span class="pl-k">/</span><span class="pl-c1">maximum</span>(<span class="pl-c1">abs</span>.(grad))	<span class="pl-c"><span class="pl-c">#</span> scale gradient for line search</span>

	<span class="pl-k">global</span> count; count <span class="pl-k">+=</span> <span class="pl-c1">1</span>; fvals[count] <span class="pl-k">=</span> fval
    <span class="pl-k">return</span> fval, <span class="pl-c1">vec</span>(grad)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> FWI with SPG</span>
<span class="pl-en">ProjBound</span>(x) <span class="pl-k">=</span> <span class="pl-c1">median</span>([mmin x mmax], dims<span class="pl-k">=</span><span class="pl-c1">2</span>)	<span class="pl-c"><span class="pl-c">#</span> Bound projection</span>
options <span class="pl-k">=</span> <span class="pl-c1">spg_options</span>(verbose<span class="pl-k">=</span><span class="pl-c1">3</span>, maxIter<span class="pl-k">=</span>fevals, memory<span class="pl-k">=</span><span class="pl-c1">3</span>)
x, fsave, funEvals<span class="pl-k">=</span> <span class="pl-c1">minConf_SPG</span>(objective_function, <span class="pl-c1">vec</span>(model0<span class="pl-k">.</span>m), ProjBound, options)</pre></div>
<p>This example script can be run in parallel and requires roughly 220 MB of memory per source location. Execute the following code to generate figures of the initial model and the result, as well as the function values:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">figure</span>(); <span class="pl-c1">imshow</span>(<span class="pl-c1">sqrt</span>.(<span class="pl-c1">1.</span><span class="pl-k">/</span><span class="pl-c1">adjoint</span>(m0))); <span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>Initial model<span class="pl-pds">"</span></span>)
<span class="pl-c1">figure</span>(); <span class="pl-c1">imshow</span>(<span class="pl-c1">sqrt</span>.(<span class="pl-c1">1.</span><span class="pl-k">/</span><span class="pl-c1">adjoint</span>(<span class="pl-c1">reshape</span>(x, model0<span class="pl-k">.</span>n)))); <span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>FWI<span class="pl-pds">"</span></span>)
<span class="pl-c1">figure</span>(); <span class="pl-c1">plot</span>(fvals); <span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>Function value<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figures/fwi.png"><img src="docs/figures/fwi.png" alt="fwi" style="max-width:100%;"></a></p>
<h2><a id="user-content-least-squares-reverse-time-migration" class="anchor" aria-hidden="true" href="#least-squares-reverse-time-migration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Least squares reverse-time migration</h2>
<p>JUDI includes matrix-free linear operators for modeling and linearized (Born) modeling, that let you write algorithms for migration that follow the mathematical notation of standard least squares problems. This example demonstrates how to use Julia Devito to perform least-squares reverse-time migration on the 2D Marmousi model. Start by downloading the test data set (1.1 GB) and the model:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>wget ftp://slim.gatech.edu/data/SoftwareRelease/Imaging.jl/2DLSRTM/marmousi_2D.segy<span class="pl-pds">`</span></span>)
<span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>wget ftp://slim.gatech.edu/data/SoftwareRelease/Imaging.jl/2DLSRTM/marmousi_migration_velocity.h5<span class="pl-pds">`</span></span>)</pre></div>
<p>Once again, load the starting model and the data and set up the source wavelet. For this example, we use a Ricker wavelet with 30 Hertz peak frequency. For setting up matrix-free linear operators, an <code>info</code> structure with the dimensions of the problem is required:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PyPlot, HDF5, JUDI<span class="pl-k">.</span>TimeModeling, SegyIO, Random

<span class="pl-c"><span class="pl-c">#</span> Load smooth migration velocity model</span>
n,d,o,m0 <span class="pl-k">=</span> <span class="pl-c1">read</span>(<span class="pl-c1">h5open</span>(<span class="pl-s"><span class="pl-pds">"</span>marmousi_migration_velocity.h5<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>d<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>o<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>m0<span class="pl-pds">"</span></span>)
model0 <span class="pl-k">=</span> <span class="pl-c1">Model</span>((n[<span class="pl-c1">1</span>],n[<span class="pl-c1">2</span>]), (d[<span class="pl-c1">1</span>],d[<span class="pl-c1">2</span>]), (o[<span class="pl-c1">1</span>],o[<span class="pl-c1">2</span>]), m0)

<span class="pl-c"><span class="pl-c">#</span> Load data</span>
block <span class="pl-k">=</span> <span class="pl-c1">segy_read</span>(<span class="pl-s"><span class="pl-pds">"</span>marmousi_2D.segy<span class="pl-pds">"</span></span>)
dD <span class="pl-k">=</span> <span class="pl-c1">judiVector</span>(block)

<span class="pl-c"><span class="pl-c">#</span> Set up wavelet</span>
src_geometry <span class="pl-k">=</span> <span class="pl-c1">Geometry</span>(block; key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>source<span class="pl-pds">"</span></span>, segy_depth_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>SourceDepth<span class="pl-pds">"</span></span>)
wavelet <span class="pl-k">=</span> <span class="pl-c1">ricker_wavelet</span>(src_geometry<span class="pl-k">.</span>t[<span class="pl-c1">1</span>],src_geometry<span class="pl-k">.</span>dt[<span class="pl-c1">1</span>],<span class="pl-c1">0.03</span>)	<span class="pl-c"><span class="pl-c">#</span> 30 Hz wavelet</span>
q <span class="pl-k">=</span> <span class="pl-c1">judiVector</span>(src_geometry,wavelet)

<span class="pl-c"><span class="pl-c">#</span> Set up info structure</span>
ntComp <span class="pl-k">=</span> <span class="pl-c1">get_computational_nt</span>(q<span class="pl-k">.</span>geometry,dD<span class="pl-k">.</span>geometry,model0)	<span class="pl-c"><span class="pl-c">#</span> no. of computational time steps</span>
info <span class="pl-k">=</span> <span class="pl-c1">Info</span>(<span class="pl-c1">prod</span>(model0<span class="pl-k">.</span>n),dD<span class="pl-k">.</span>nsrc,ntComp)</pre></div>
<p>To speed up the convergence of our imaging example, we set up a basic preconditioner for each the model- and the data space, consisting of mutes to suppress the ocean-bottom reflection in the data and the source/receiver imprint in the image. The operator <code>J</code> represents the linearized modeling operator and its adjoint <code>J'</code> corresponds to the migration (RTM) operator. The forward and adjoint pair can be used for a basic LS-RTM example with (stochastic) gradient descent:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Set up matrix-free linear operators</span>
opt <span class="pl-k">=</span> <span class="pl-c1">Options</span>(optimal_checkpointing <span class="pl-k">=</span> <span class="pl-c1">true</span>)    <span class="pl-c"><span class="pl-c">#</span> set to false to disable optimal checkpointing</span>
F <span class="pl-k">=</span> <span class="pl-c1">judiModeling</span>(info, model0, q<span class="pl-k">.</span>geometry, dD<span class="pl-k">.</span>geometry; options<span class="pl-k">=</span>opt)
J <span class="pl-k">=</span> <span class="pl-c1">judiJacobian</span>(F, q)

<span class="pl-c"><span class="pl-c">#</span> Right-hand preconditioners (model topmute)</span>
Mr <span class="pl-k">=</span> <span class="pl-c1">judiTopmute</span>(model0<span class="pl-k">.</span>n, <span class="pl-c1">52</span>, <span class="pl-c1">10</span>)	<span class="pl-c"><span class="pl-c">#</span> mute up to grid point 52, with 10 point taper</span>

<span class="pl-c"><span class="pl-c">#</span> Stochastic gradient</span>
x <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float32, info<span class="pl-k">.</span>n)	<span class="pl-c"><span class="pl-c">#</span> zero initial guess</span>
batchsize <span class="pl-k">=</span> <span class="pl-c1">10</span>	<span class="pl-c"><span class="pl-c">#</span> use subset of 10 shots per iteration</span>
niter <span class="pl-k">=</span> <span class="pl-c1">32</span>
fval <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float32, niter)

<span class="pl-k">for</span> j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>niter
	<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Iteration: <span class="pl-pds">"</span></span>, j)

	<span class="pl-c"><span class="pl-c">#</span> Select batch and set up left-hand preconditioner</span>
	i <span class="pl-k">=</span> <span class="pl-c1">randperm</span>(dD<span class="pl-k">.</span>nsrc)[<span class="pl-c1">1</span><span class="pl-k">:</span>batchsize]
	Ml <span class="pl-k">=</span> <span class="pl-c1">judiMarineTopmute2D</span>(<span class="pl-c1">30</span>, dD[i]<span class="pl-k">.</span>geometry)	<span class="pl-c"><span class="pl-c">#</span> data topmute starting at time sample 30</span>

	<span class="pl-c"><span class="pl-c">#</span> Compute residual and gradient</span>
	r <span class="pl-k">=</span> Ml<span class="pl-k">*</span>J[i]<span class="pl-k">*</span>Mr<span class="pl-k">*</span>x <span class="pl-k">-</span> Ml<span class="pl-k">*</span>dD[i]
	g <span class="pl-k">=</span> <span class="pl-c1">adjoint</span>(Mr)<span class="pl-k">*</span><span class="pl-c1">adjoint</span>(J[i])<span class="pl-k">*</span><span class="pl-c1">adjoint</span>(Ml)<span class="pl-k">*</span>r

	<span class="pl-c"><span class="pl-c">#</span> Step size and update variable</span>
	fval[j] <span class="pl-k">=</span> <span class="pl-c1">.5</span>f0<span class="pl-k">*</span><span class="pl-c1">norm</span>(r)<span class="pl-k">^</span><span class="pl-c1">2</span>
	t <span class="pl-k">=</span> <span class="pl-c1">norm</span>(r)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">norm</span>(g)<span class="pl-k">^</span><span class="pl-c1">2</span>
	<span class="pl-k">global</span> x <span class="pl-k">-=</span> t<span class="pl-k">*</span>g
<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figures/lsrtm.png"><img src="docs/figures/lsrtm.png" alt="lsrtm" style="max-width:100%;"></a></p>
<h2><a id="user-content-machine-learning" class="anchor" aria-hidden="true" href="#machine-learning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Machine Learning</h2>
<p>The JUDI4Flux interface allows integrating JUDI modeling operators into convolutional neural networks for deep learning. For example, the following code snippet shows how to create a shallow CNN consisting of two convolutional layers with a nonlinear forward modeling layer in-between them. JUDI4Flux enables backpropagation through Flux' automatic differentiation tool, but calls the corresponding adjoint JUDI operators under the hood. For more details, please check out the <a href="https://github.com/slimgroup/JUDI4Flux.jl">JUDI4Flux Github</a> page.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Jacobian</span>
W1 <span class="pl-k">=</span> <span class="pl-c1">judiJacobian</span>(F0, q)
b1 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(Float32, num_samples)

<span class="pl-c"><span class="pl-c">#</span> Fully connected layer</span>
W2 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(Float32, n_out, num_samples)
b2 <span class="pl-k">=</span> <span class="pl-c1">randn</span>(Float32, n_out)

<span class="pl-c"><span class="pl-c">#</span> Network and loss</span>
<span class="pl-en">network</span>(x) <span class="pl-k">=</span> W2<span class="pl-k">*</span>(W1<span class="pl-k">*</span>x <span class="pl-k">.+</span> b1) <span class="pl-k">.+</span> b2
<span class="pl-en">loss</span>(x, y) <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">mse</span>(<span class="pl-c1">network</span>(x), y)

<span class="pl-c"><span class="pl-c">#</span> Compute gradient w/ Flux</span>
p <span class="pl-k">=</span> <span class="pl-c1">params</span>(x, y, W1, b1, b2)
gs <span class="pl-k">=</span> Tracker<span class="pl-k">.</span><span class="pl-c1">gradient</span>(() <span class="pl-k">-&gt;</span> <span class="pl-c1">loss</span>(x, y), p)
gs[x]	<span class="pl-c"><span class="pl-c">#</span> gradient w.r.t. to x</span></pre></div>
<p>JUDI4Flux allows implementing physics-augmented neural networks for seismic inversion, such as loop-unrolled seismic imaging algorithms. For example, the following results are a conventional RTM image, an LS-RTM image and a loop-unrolled LS-RTM image for a single simultaneous shot record.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figures/figure1.png"><img src="docs/figures/figure1.png" alt="flux" style="max-width:100%;"></a></p>
<h2><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Authors</h2>
<p>This package was written by <a href="https://www.slim.eos.ubc.ca/philip" rel="nofollow">Philipp Witte</a> and <a href="https://www.slim.eos.ubc.ca/content/mathias-louboutin" rel="nofollow">Mathias Louboutin</a> from the Seismic Laboratory for Imaging and Modeling (SLIM) at the Georgia Institute of Technology.</p>
<p>If you use our software for your research, please cite our <a href="https://library.seg.org/doi/abs/10.1190/geo2018-0174.1#" rel="nofollow">Geophysics paper</a>:</p>
<pre><code>@article{witteJUDI2019,
author = {Philipp A. Witte and Mathias Louboutin and Navjot Kukreja and Fabio Luporini and Michael Lange and Gerard J. Gorman and Felix J. Herrmann},
title = {A large-scale framework for symbolic implementations of seismic inversion algorithms in Julia},
journal = {GEOPHYSICS},
volume = {84},
number = {3},
pages = {F57-F71},
year = {2019},
doi = {10.1190/geo2018-0174.1},
URL = {https://doi.org/10.1190/geo2018-0174.1},
eprint = {https://doi.org/10.1190/geo2018-0174.1}
}
</code></pre>
<p>Also visit the Devito homepage at <a href="https://www.devitoproject.org/publications" rel="nofollow">https://www.devitoproject.org/publications</a> for more information and references.</p>
<p>Contact authors via: <a href="mailto:pwitte3@gatech.edu">pwitte3@gatech.edu</a> and <a href="mailto:mlouboutin3@gatech.edu">mlouboutin3@gatech.edu</a>.</p>
</article></div>