<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-efficient-stable-fluids-algorithm-in-the-julia-programming-language" class="anchor" aria-hidden="true" href="#efficient-stable-fluids-algorithm-in-the-julia-programming-language"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Efficient Stable Fluids Algorithm in the Julia Programming Language</h1>
<table>
<thead>
<tr>
<th align="center">2D Stable Fluids</th>
<th align="center">3D Stable Fluids</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/27728103/151655433-89e6572f-098c-461c-969d-9076d5fb8716.gif"><img src="https://user-images.githubusercontent.com/27728103/151655433-89e6572f-098c-461c-969d-9076d5fb8716.gif" alt="2d_collision" data-animated-image="" style="max-width: 100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/27728103/151655451-108a6134-0a35-4cf8-ba15-f4448215d427.gif"><img src="https://user-images.githubusercontent.com/27728103/151655451-108a6134-0a35-4cf8-ba15-f4448215d427.gif" alt="3d_collision" data-animated-image="" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Stable Fluids is an algorithm by Jos Stam to simulate the equations of fluid
mechanics <g-emoji class="g-emoji" alias="ocean" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png">üåä</g-emoji> unconditionally stable. It is widely used in Computer Graphics <g-emoji class="g-emoji" alias="desktop_computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f5a5.png">üñ•</g-emoji>  to
obtain realistic fluid motion. This is an implementation using the Fast Fourier
Transformation that greatly simplifies the steps of diffusion and
incompressibility projection.</p>
<p dir="auto">The aim of the implementation (and the stable fluids algorithm in general) is to
be visually pleasing and realistic by the "eye norm". However, it is not as
accurate as more advanced techniques used in Computational Fluid Dynamics.</p>
<h2 dir="auto"><a id="user-content-how-to-run-the-files" class="anchor" aria-hidden="true" href="#how-to-run-the-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to run the files</h2>
<p dir="auto">Make sure you have all the dependencies installed. You can do so by entering a Julia REPL session and then execute</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    ] add https://github.com/Ceyron/StableFluids.jl"><pre class="notranslate"><code>    ] add https://github.com/Ceyron/StableFluids.jl
</code></pre></div>
<p dir="auto">Then you can run the 2D version by running the file as a script:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    julia --project=. stable_fluids_fft.jl"><pre class="notranslate"><code>    julia --project=. stable_fluids_fft.jl
</code></pre></div>
<p dir="auto">or within the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using StableFluids
    cd(mktempdir())
    StableFluids.run_2D()"><pre>    <span class="pl-k">using</span> StableFluids
    <span class="pl-c1">cd</span>(<span class="pl-c1">mktempdir</span>())
    StableFluids<span class="pl-k">.</span><span class="pl-c1">run_2D</span>()</pre></div>
<p dir="auto">The 2D version is set up in a way that it interactively plots the curl
(=vorticity magnitude) of the velocity field while it is simulating.</p>
<p dir="auto">To run the 3D version execute</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    julia --project=. stable_fluids_fft_3d.jl"><pre class="notranslate"><code>    julia --project=. stable_fluids_fft_3d.jl
</code></pre></div>
<p dir="auto">or within the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using StableFluids
    cd(mktempdir())
    StableFluids.run_3D()"><pre>    <span class="pl-k">using</span> StableFluids
    <span class="pl-c1">cd</span>(<span class="pl-c1">mktempdir</span>())
    StableFluids<span class="pl-k">.</span><span class="pl-c1">run_3D</span>()</pre></div>
<p dir="auto">This will not interactively visualize, but rather writes out VTK files that you
can the later on visualize with another software, e.g. ParaView. You can find a
tutorial on how to create nice volume renderings <a href="https://youtu.be/bvPi6XwdM0U?t=1034" rel="nofollow">in this YouTube
video</a></p>
<h2 dir="auto"><a id="user-content-understading-the-algorithm-" class="anchor" aria-hidden="true" href="#understading-the-algorithm-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Understading the algorithm <g-emoji class="g-emoji" alias="woman_teacher" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f469-1f3eb.png">üë©‚Äçüè´</g-emoji></h2>
<p dir="auto"><g-emoji class="g-emoji" alias="tv" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png">üì∫</g-emoji> Code along with me in <a href="https://youtu.be/F7rWoxeGrko" rel="nofollow">this vide</a> to build the 2D version.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="tv" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png">üì∫</g-emoji> Watch and follow along <a href="https://youtu.be/bvPi6XwdM0U" rel="nofollow">this video</a> for the
extension to 3D as well as a tutorial on how to visualize the results in Paraview.</p>
<p dir="auto">You can find similar simple implementations of our simulations in Julia and
Python <a href="https://github.com/Ceyron/machine-learning-and-simulation/tree/main/english/simulation_scripts">on the GitHub
Repo</a>
of my <a href="https://www.youtube.com/channel/UCh0P7KwJhuQ4vrzc3IRuw4Q" rel="nofollow">YouTube
Channel</a>.</p>
<h2 dir="auto"><a id="user-content-parameters-of-the-algorithm" class="anchor" aria-hidden="true" href="#parameters-of-the-algorithm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parameters of the algorithm</h2>
<p dir="auto">In the beginning of each file, directly after the doc string, you find constants
that will change the simulation.</p>
<ol dir="auto">
<li><strong>N_POINTS</strong>: The number of vertices in the mesh per axis. Higher numbers will make your computer sweat more, but also allow you to resolve more details. For my Laptop (i7-8500u), 250 for 2D (250¬≤ = 62'500 dof) and 40 for 3D (40¬≥ = 64,000) worked fine. If you have more powerful hardware, you can go higher, of course <g-emoji class="g-emoji" alias="wink" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png">üòâ</g-emoji>.</li>
<li><strong>KINEMATIC_VISCOSITY</strong>: This value defines how diffusive your simulation
will be.</li>
<li><strong>TIME_STEP_LENGTH</strong>: The dt of the time integration. Since the algorithm is
unconditionally stable, it can be selected arbitrarily. Higher values will make your simulations advance faster. However, be aware that too high values can cause instability, since the ODE integrator for the back-tracing is just a plain explicit Euler. Additionally, higher time steps make your simulations less accurate.</li>
<li><strong>N_TIME_STEPS</strong>: For how many iterations you want to run your time loop.</li>
</ol>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">The Stable Fluids Algorithm is based on the <a href="https://d2f99xq7vri1nk.cloudfront.net/legacy_app_files/pdf/ns.pdf" rel="nofollow">1999 SIGGRAPH paper by Jos Stam</a>. Here, we are using the <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.590.1681&amp;rep=rep1&amp;type=pdf" rel="nofollow">2002 extension with the FFT</a>.</p>
</article></div>