<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p>Latest Stable Release (v0.1): <a href="https://travis-ci.org/JuliaQuantum/QuDirac.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6ff1f8f9d2249c9323835af3bd52cba56631a5b5/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615175616e74756d2f517544697261632e6a6c2e7376673f6272616e63683d72656c656173652d302e31" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaQuantum/QuDirac.jl.svg?branch=release-0.1" style="max-width:100%;"></a></p>
<p>Upcoming Release (v0.2): <a href="https://travis-ci.org/JuliaQuantum/QuDirac.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/79224135b760f8856e76f1fc16a7fd4d8bd0c9e5/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615175616e74756d2f517544697261632e6a6c2e7376673f6272616e63683d72656c656173652d302e32" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaQuantum/QuDirac.jl.svg?branch=release-0.2" style="max-width:100%;"></a></p>
<h1><a id="user-content-qudiracjl" class="anchor" aria-hidden="true" href="#qudiracjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuDirac.jl</h1>
<p>QuDirac.jl is a <a href="http://julialang.org/" rel="nofollow">Julia</a> library for using Dirac notation to perform
quantum mechanics computations.</p>
<p>Documentation for the current release version (v0.1) can be found <a href="http://qudiracjl.readthedocs.org/en/release-0.1/" rel="nofollow"><strong>here</strong></a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>To install QuDirac.jl, you should have <a href="https://github.com/JuliaLang/julia#source-download-and-compilation">a working build of Julia v0.3</a>. Then, you can grab QuDirac.jl via the package manager:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>QuDirac<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<p>These are toy examples for demoing features. See <a href="https://github.com/JuliaQuantum/QuDirac.jl#examples">below for more involved examples</a>.</p>
<h4><a id="user-content-ket-bra-and-operator-types" class="anchor" aria-hidden="true" href="#ket-bra-and-operator-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ket, Bra, and Operator types</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> bell <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> 1/√2 * (| 0,0 &gt; + | 1,1 &gt;) <span class="pl-pds">"</span></span>
Ket{KroneckerDelta,<span class="pl-c1">2</span>,Float64} with <span class="pl-c1">2</span> <span class="pl-c1">state</span>(s)<span class="pl-k">:</span>
  <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">|</span> <span class="pl-c1">0</span>,<span class="pl-c1">0</span> ⟩
  <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">|</span> <span class="pl-c1">1</span>,<span class="pl-c1">1</span> ⟩

julia<span class="pl-k">&gt;</span> bell<span class="pl-k">'</span>
Bra{KroneckerDelta,<span class="pl-c1">2</span>,Float64} with <span class="pl-c1">2</span> <span class="pl-c1">state</span>(s)<span class="pl-k">:</span>
  <span class="pl-c1">0.7071067811865475</span> ⟨ <span class="pl-c1">0</span>,<span class="pl-c1">0</span> <span class="pl-k">|</span>
  <span class="pl-c1">0.7071067811865475</span> ⟨ <span class="pl-c1">1</span>,<span class="pl-c1">1</span> <span class="pl-k">|</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ptrace</span>(bell <span class="pl-k">*</span> bell<span class="pl-k">'</span>, <span class="pl-c1">1</span>)
OpSum{KroneckerDelta,<span class="pl-c1">1</span>,Float64} with <span class="pl-c1">2</span> <span class="pl-c1">operator</span>(s)<span class="pl-k">:</span>
  <span class="pl-c1">0.4999999999999999</span> <span class="pl-k">|</span> <span class="pl-c1">0</span> ⟩⟨ <span class="pl-c1">0</span> <span class="pl-k">|</span>
  <span class="pl-c1">0.4999999999999999</span> <span class="pl-k">|</span> <span class="pl-c1">1</span> ⟩⟨ <span class="pl-c1">1</span> <span class="pl-k">|</span></pre></div>
<h4><a id="user-content-support-for-undefined-inner-products" class="anchor" aria-hidden="true" href="#support-for-undefined-inner-products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Support for undefined inner products</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> tells QuDirac to use the rule for undefined inner products</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">default_inner</span>(<span class="pl-c1">UndefinedInner</span>())
INFO<span class="pl-k">:</span> QuDirac<span class="pl-k">'</span>s default inner product type is currently <span class="pl-c1">UndefinedInner</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> &lt; 0,0 | *  (| 0,0 &gt; + | 1,1 &gt;)/√2 <span class="pl-pds">"</span></span>
((⟨ <span class="pl-c1">0</span>,<span class="pl-c1">0</span> <span class="pl-k">|</span> <span class="pl-c1">0</span>,<span class="pl-c1">0</span> ⟩ <span class="pl-k">+</span> ⟨ <span class="pl-c1">0</span>,<span class="pl-c1">0</span> <span class="pl-k">|</span> <span class="pl-c1">1</span>,<span class="pl-c1">1</span> ⟩) <span class="pl-k">/</span> <span class="pl-c1">1.4142135623730951</span>)

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> (e^( &lt; 1,2 | 3,4 &gt; ) + &lt; 5,6 | 7,8 &gt; * im)^4 <span class="pl-pds">"</span></span>
(((<span class="pl-c1">exp</span>(⟨ <span class="pl-c1">1</span>,<span class="pl-c1">2</span> <span class="pl-k">|</span> <span class="pl-c1">3</span>,<span class="pl-c1">4</span> ⟩)) <span class="pl-k">+</span> (⟨ <span class="pl-c1">5</span>,<span class="pl-c1">6</span> <span class="pl-k">|</span> <span class="pl-c1">7</span>,<span class="pl-c1">8</span> ⟩ <span class="pl-k">*</span> im))<span class="pl-k">^</span><span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">inner_eval</span>((b, k) <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>(k) <span class="pl-k">-</span> <span class="pl-c1">sum</span>(b), s)
<span class="pl-c1">8.600194553751864e6</span> <span class="pl-k">+</span> <span class="pl-c1">2.5900995362955774e6im</span></pre></div>
<h4><a id="user-content-custom-inner-product-rules" class="anchor" aria-hidden="true" href="#custom-inner-product-rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom inner product rules</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> immutable MyInner <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractInner</span> <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> QuDirac<span class="pl-k">.</span><span class="pl-en">inner_rule</span>(<span class="pl-k">::</span><span class="pl-c1">MyInner</span>, ktlabel, brlabel) <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(ktlabel[<span class="pl-c1">1</span>]<span class="pl-k">+</span>brlabel[<span class="pl-c1">1</span>])
inner_rule (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">default_inner</span>(<span class="pl-c1">MyInner</span>())
INFO<span class="pl-k">:</span> QuDirac<span class="pl-k">'</span>s default inner product type is currently <span class="pl-c1">MyInner</span>()

<span class="pl-c"><span class="pl-c">#</span> eval ⟨ π | e ⟩ with MyInner rule -&gt; sqrt(π + e)</span>
julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> &lt; π | e &gt; <span class="pl-pds">"</span></span>
<span class="pl-c1">2.420717761749361</span></pre></div>
<h4><a id="user-content-functional-operator-construction" class="anchor" aria-hidden="true" href="#functional-operator-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functional operator construction</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> define a₂ on Ket</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@def_op</span> <span class="pl-s"><span class="pl-pds">"</span> a₂ | x, y, z &gt; = √y * | x, y - 1, z &gt; <span class="pl-pds">"</span></span>
a₂ (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

<span class="pl-c"><span class="pl-c">#</span> define a₂ on Bra</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@def_op</span> <span class="pl-s"><span class="pl-pds">"</span> &lt; x, y, z | a₂ = √(y + 1) * &lt; x, y + 1, z | <span class="pl-pds">"</span></span>
a₂ (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> a₂ * | 3,5,5 &gt; <span class="pl-pds">"</span></span>
Ket{KroneckerDelta,<span class="pl-c1">3</span>,Float64} with <span class="pl-c1">1</span> <span class="pl-c1">state</span>(s)<span class="pl-k">:</span>
  <span class="pl-c1">2.23606797749979</span> <span class="pl-k">|</span> <span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span> ⟩

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> a₂' * | 3,4,5 &gt; <span class="pl-pds">"</span></span>
Ket{KroneckerDelta,<span class="pl-c1">3</span>,Float64} with <span class="pl-c1">1</span> <span class="pl-c1">state</span>(s)<span class="pl-k">:</span>
  <span class="pl-c1">2.23606797749979</span> <span class="pl-k">|</span> <span class="pl-c1">3</span>,<span class="pl-c1">5</span>,<span class="pl-c1">5</span> ⟩

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">d</span>"</span> &lt; 3,4,5 | * a₂ * | 3,5,5 &gt; <span class="pl-pds">"</span></span>
<span class="pl-c1">2.23606797749979</span>

<span class="pl-c"><span class="pl-c">#</span> Hadamard operator</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@rep_op</span> <span class="pl-s"><span class="pl-pds">"</span> H | n &gt; = 1/√2 * ( | 0 &gt; + (-1)^n *| 1 &gt; ) <span class="pl-pds">"</span></span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>;

julia<span class="pl-k">&gt;</span> H
OpSum{KroneckerDelta,<span class="pl-c1">1</span>,Float64} with <span class="pl-c1">4</span> <span class="pl-c1">operator</span>(s)<span class="pl-k">:</span>
  <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">|</span> <span class="pl-c1">1</span> ⟩⟨ <span class="pl-c1">0</span> <span class="pl-k">|</span>
  <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">|</span> <span class="pl-c1">0</span> ⟩⟨ <span class="pl-c1">0</span> <span class="pl-k">|</span>
  <span class="pl-c1">0.7071067811865475</span> <span class="pl-k">|</span> <span class="pl-c1">0</span> ⟩⟨ <span class="pl-c1">1</span> <span class="pl-k">|</span>
  <span class="pl-k">-</span><span class="pl-c1">0.7071067811865475</span> <span class="pl-k">|</span> <span class="pl-c1">1</span> ⟩⟨ <span class="pl-c1">1</span> <span class="pl-k">|</span></pre></div>
<h4><a id="user-content-and-other-stuff" class="anchor" aria-hidden="true" href="#and-other-stuff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>...and other stuff</h4>
<ul>
<li>Implementation of common operations like partial trace (<code>ptrace</code>) and partial transpose (<code>ptranspose</code>)</li>
<li>Treat states and operators as map-like data structures, enabling label-based analysis for spectroscopy purposes</li>
<li><code>xsubspace</code> allows easy selection of excitation subspaces of states and operators</li>
<li><code>permute</code> and <code>switch</code> allows generic permutation of factor labels for states</li>
<li><code>filter</code>/<code>filter!</code> for the filtering out component states/operators via predicate functions</li>
<li>Arbitrary mapping functions (<code>map</code>/<code>maplabels</code>/<code>mapcoeffs</code>) for applying functions to labels and coefficients</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>There are currently two example files, <code>qho.jl</code> and <code>randwalk.jl</code>. The former implements methods for plotting quantum harmonic oscillator wave functions using Plotly. The latter is a simple implementation of a quantum random
walk.</p>
<p>To run the examples, one can do the following (using <code>qho.jl</code> as an example):</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">dir</span>(<span class="pl-s"><span class="pl-pds">"</span>QuDirac<span class="pl-pds">"</span></span>))
julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/qho.jl<span class="pl-pds">"</span></span>)</pre></div>
</article></div>