<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-robertomd" class="anchor" aria-hidden="true" href="#robertomd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RobertoMD</h1>
<p dir="auto">RobertoMD.jl (<a href="https://live.juliacon.org/talk/ECKGDE" rel="nofollow">JuliaCon2021</a>): Rome-Berlin-Tokyo Hybrid Particle-field Molecular-Dynamics Simulation</p>
<p dir="auto">A massively parallel hybrid particle-field molecular dynamics simulation package written in Julia. <strong>It is aimed to become a productive hPF-MD simulator. However, it has not yet been at that stage</strong>. Benchmarks and tests are welcome.</p>
<p dir="auto">The implemeted functions are limited for now, including:</p>
<ul dir="auto">
<li>Original hPF-MD algorithm of <a href="https://doi.org/10.1063/1.3142103" rel="nofollow">Milano <em>et al.</em></a>.
<ul dir="auto">
<li>Particle-in-cell transformation</li>
<li>Periodic cubic fields (simulation box must be same in x,y,z directions)</li>
</ul>
</li>
<li>Bond interactions: Harmonic</li>
<li>Thermostats: Langevin, Berendsen</li>
<li>Velocity Verlet integration</li>
<li>Periodic boundary conditions in a cubic box.</li>
<li>Particle-decomposition parallelization (MPI.jl)</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Julia is required, with Julia v1.5 required to get the latest version of RobertoMD. Install Roberto from the Julia REPL. Enter the package mode by pressing ] and run "add RobertoMD".</p>
<h2 dir="auto"><a id="user-content-parallelization" class="anchor" aria-hidden="true" href="#parallelization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parallelization</h2>
<p dir="auto">The parallelization is implemented via the "particle decomposition" algorithm, taking advantage of the unqiue feature of the field interaction. Details can be found in the <a href="https://doi.org/10.1002/jcc.22883" rel="nofollow">previous article</a> [Ref.2].</p>
<p dir="auto">In short, the field is a function of the local particle density. This collective variable is a slow variable compared to the displacement of the particles. Therefore, it is possible to update the field every <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="71db22aeaa7bae8e57cee20b67f4266c">$\Delta t$</math-renderer> steps without losing accuracy. In this way, data exchange between different cores is less frequent compared with domain decomposition.</p>
<h2 dir="auto">
<a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Several example systems, e.g., <strong>monoliquid</strong>, <strong>polymer melt</strong>, <strong>copolymer melt</strong>, <strong>polymer in solution</strong>, can be found in Example folder:</p>
<p dir="auto">This is the hPF-MD simulation of a simple block copolymer system:</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RobertoMD
using Rotations
using JSON

#control parameters
control=Dict(
    &quot;dt&quot;=&gt;0.01,
    &quot;steps&quot;=&gt;1000,
    &quot;velocity verlet&quot;=&gt;true,
    &quot;LAMMPSTrj&quot;=&gt;Dict(&quot;file&quot;=&gt;&quot;copolymer.lammpstrj&quot;,&quot;freq&quot;=&gt;1000),
    &quot;restart&quot;=&gt;Dict(&quot;JSONRestart&quot;=&gt;true,&quot;file&quot;=&gt;&quot;copolymer.json&quot;,&quot;freq&quot;=&gt;1000),
    &quot;BerendsenNVT&quot;=&gt;Dict(&quot;tau&quot;=&gt;1.0),
    &quot;harmonic bond&quot;=&gt;Dict(
    &quot;k&quot;=&gt;Dict(&quot;1&quot;=&gt;1000.0),
    &quot;l0&quot;=&gt;Dict(&quot;1&quot;=&gt;1.0)
    ),
    &quot;Canonical field&quot;=&gt;Dict(
    &quot;χ&quot;=&gt;Dict(  &quot;1&quot;=&gt;[0.0,5.0],
                &quot;2&quot;=&gt;[5.0,0.0] ),
    &quot;κ&quot;=&gt;0.2,
    &quot;uniform mesh&quot;=&gt;true,
    &quot;update&quot;=&gt;1,
    &quot;Lcell&quot;=&gt;1.0),
    &quot;thermo information&quot;=&gt;Dict( &quot;freq&quot;=&gt;1,
                                &quot;energy&quot;=&gt;true,
                                &quot;momentum&quot;=&gt;true,
                                &quot;write&quot;=&gt;true,
                                &quot;file&quot;=&gt;&quot;copolymer.log&quot;),
    &quot;density&quot;=&gt;0.85,
    &quot;bondlength&quot;=&gt;1.0,
    &quot;chain_length&quot;=&gt;20,
    &quot;num_polymers&quot;=&gt;500,
    &quot;zero velocity&quot;=&gt;true,
    )


boxsize=(control[&quot;num_polymers&quot;]*control[&quot;chain_length&quot;]/control[&quot;density&quot;])^(1.0/3)
bondlength=control[&quot;bondlength&quot;]
chain_length=control[&quot;chain_length&quot;]

polymer=Dict()
for polymer_i in 1:control[&quot;num_polymers&quot;]
    polymer[string(polymer_i)]=Dict()
    polymer[string(polymer_i)][&quot;atoms&quot;]=Dict()
    polymer[string(polymer_i)][&quot;bonds&quot;]=Dict()
    pos_init=rand(3)*boxsize
    for monomer_i in 1:chain_length
        r = rand(RotMatrix{3})
        q = QuatRotation(r)
        pos_init=pos_init+q*[bondlength,0.0,0.0]
        type_=1
        if monomer_i&gt;div(control[&quot;chain_length&quot;],2)
            type_=2
        end
        polymer[string(polymer_i)][&quot;atoms&quot;][string(monomer_i)]=Dict(&quot;type&quot;=&gt;type_,&quot;mass&quot;=&gt;1,&quot;coords&quot;=&gt;pos_init)
    end
    for bond_i in 1:chain_length-1
        polymer[string(polymer_i)][&quot;bonds&quot;][string(bond_i)]=[1,bond_i,bond_i+1]
    end

end

configs=Dict(
    &quot;box&quot;=&gt;[boxsize,boxsize,boxsize],
    &quot;molecules&quot;=&gt;polymer
    )



Simulate(control,configs)"><pre><span class="pl-s1">using</span> <span class="pl-v">RobertoMD</span>
<span class="pl-s1">using</span> <span class="pl-v">Rotations</span>
<span class="pl-s1">using</span> <span class="pl-v">JSON</span>

<span class="pl-c">#control parameters</span>
<span class="pl-s1">control</span><span class="pl-c1">=</span><span class="pl-v">Dict</span>(
    <span class="pl-s">"dt"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">0.01</span>,
    <span class="pl-s">"steps"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1000</span>,
    <span class="pl-s">"velocity verlet"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,
    <span class="pl-s">"LAMMPSTrj"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(<span class="pl-s">"file"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s">"copolymer.lammpstrj"</span>,<span class="pl-s">"freq"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1000</span>),
    <span class="pl-s">"restart"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(<span class="pl-s">"JSONRestart"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,<span class="pl-s">"file"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s">"copolymer.json"</span>,<span class="pl-s">"freq"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1000</span>),
    <span class="pl-s">"BerendsenNVT"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(<span class="pl-s">"tau"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1.0</span>),
    <span class="pl-s">"harmonic bond"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(
    <span class="pl-s">"k"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(<span class="pl-s">"1"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1000.0</span>),
    <span class="pl-s">"l0"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(<span class="pl-s">"1"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1.0</span>)
    ),
    <span class="pl-s">"Canonical field"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(
    <span class="pl-s">"χ"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>(  <span class="pl-s">"1"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span>[<span class="pl-c1">0.0</span>,<span class="pl-c1">5.0</span>],
                <span class="pl-s">"2"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span>[<span class="pl-c1">5.0</span>,<span class="pl-c1">0.0</span>] ),
    <span class="pl-s">"κ"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">0.2</span>,
    <span class="pl-s">"uniform mesh"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,
    <span class="pl-s">"update"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1</span>,
    <span class="pl-s">"Lcell"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1.0</span>),
    <span class="pl-s">"thermo information"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-v">Dict</span>( <span class="pl-s">"freq"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1</span>,
                                <span class="pl-s">"energy"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,
                                <span class="pl-s">"momentum"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,
                                <span class="pl-s">"write"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,
                                <span class="pl-s">"file"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s">"copolymer.log"</span>),
    <span class="pl-s">"density"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">0.85</span>,
    <span class="pl-s">"bondlength"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1.0</span>,
    <span class="pl-s">"chain_length"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">20</span>,
    <span class="pl-s">"num_polymers"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">500</span>,
    <span class="pl-s">"zero velocity"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">true</span>,
    )


<span class="pl-s1">boxsize</span><span class="pl-c1">=</span>(<span class="pl-s1">control</span>[<span class="pl-s">"num_polymers"</span>]<span class="pl-c1">*</span><span class="pl-s1">control</span>[<span class="pl-s">"chain_length"</span>]<span class="pl-c1">/</span><span class="pl-s1">control</span>[<span class="pl-s">"density"</span>])<span class="pl-c1">^</span>(<span class="pl-c1">1.0</span><span class="pl-c1">/</span><span class="pl-c1">3</span>)
<span class="pl-s1">bondlength</span><span class="pl-c1">=</span><span class="pl-s1">control</span>[<span class="pl-s">"bondlength"</span>]
<span class="pl-s1">chain_length</span><span class="pl-c1">=</span><span class="pl-s1">control</span>[<span class="pl-s">"chain_length"</span>]

<span class="pl-s1">polymer</span><span class="pl-c1">=</span><span class="pl-v">Dict</span>()
<span class="pl-k">for</span> <span class="pl-s1">polymer_i</span> <span class="pl-c1">in</span> <span class="pl-c1">1</span>:<span class="pl-s1">control</span>[<span class="pl-s">"num_polymers"</span>]
    <span class="pl-s1">polymer</span>[<span class="pl-en">string</span>(<span class="pl-s1">polymer_i</span>)]<span class="pl-c1">=</span><span class="pl-v">Dict</span>()
    <span class="pl-s1">polymer</span>[<span class="pl-en">string</span>(<span class="pl-s1">polymer_i</span>)][<span class="pl-s">"atoms"</span>]<span class="pl-c1">=</span><span class="pl-v">Dict</span>()
    <span class="pl-s1">polymer</span>[<span class="pl-en">string</span>(<span class="pl-s1">polymer_i</span>)][<span class="pl-s">"bonds"</span>]<span class="pl-c1">=</span><span class="pl-v">Dict</span>()
    <span class="pl-s1">pos_init</span><span class="pl-c1">=</span><span class="pl-en">rand</span>(<span class="pl-c1">3</span>)<span class="pl-c1">*</span><span class="pl-s1">boxsize</span>
    <span class="pl-k">for</span> <span class="pl-s1">monomer_i</span> <span class="pl-c1">in</span> <span class="pl-c1">1</span>:<span class="pl-s1">chain_length</span>
        <span class="pl-s1">r</span> <span class="pl-c1">=</span> <span class="pl-en">rand</span>(<span class="pl-v">RotMatrix</span>{<span class="pl-c1">3</span>})
        <span class="pl-s1">q</span> <span class="pl-c1">=</span> <span class="pl-v">QuatRotation</span>(<span class="pl-s1">r</span>)
        <span class="pl-s1">pos_init</span><span class="pl-c1">=</span><span class="pl-s1">pos_init</span><span class="pl-c1">+</span><span class="pl-s1">q</span><span class="pl-c1">*</span>[<span class="pl-s1">bondlength</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>]
        <span class="pl-s1">type_</span><span class="pl-c1">=</span><span class="pl-c1">1</span>
        <span class="pl-k">if</span> <span class="pl-s1">monomer_i</span><span class="pl-c1">&gt;</span><span class="pl-en">div</span>(<span class="pl-s1">control</span>[<span class="pl-s">"chain_length"</span>],<span class="pl-c1">2</span>)
            <span class="pl-s1">type_</span><span class="pl-c1">=</span><span class="pl-c1">2</span>
        <span class="pl-s1">end</span>
        <span class="pl-s1">polymer</span>[<span class="pl-en">string</span>(<span class="pl-s1">polymer_i</span>)][<span class="pl-s">"atoms"</span>][<span class="pl-en">string</span>(<span class="pl-s1">monomer_i</span>)]<span class="pl-c1">=</span><span class="pl-v">Dict</span>(<span class="pl-s">"type"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">type_</span>,<span class="pl-s">"mass"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-c1">1</span>,<span class="pl-s">"coords"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">pos_init</span>)
    <span class="pl-s1">end</span>
    <span class="pl-s1">for</span> <span class="pl-s1">bond_i</span> <span class="pl-c1">in</span> <span class="pl-c1">1</span>:<span class="pl-s1">chain_length</span><span class="pl-c1">-</span><span class="pl-c1">1</span>
        <span class="pl-s1">polymer</span>[<span class="pl-en">string</span>(<span class="pl-s1">polymer_i</span>)][<span class="pl-s">"bonds"</span>][<span class="pl-en">string</span>(<span class="pl-s1">bond_i</span>)]<span class="pl-c1">=</span>[<span class="pl-c1">1</span>,<span class="pl-s1">bond_i</span>,<span class="pl-s1">bond_i</span><span class="pl-c1">+</span><span class="pl-c1">1</span>]
    <span class="pl-s1">end</span>

<span class="pl-s1">end</span>

<span class="pl-s1">configs</span><span class="pl-c1">=</span><span class="pl-v">Dict</span>(
    <span class="pl-s">"box"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span>[<span class="pl-s1">boxsize</span>,<span class="pl-s1">boxsize</span>,<span class="pl-s1">boxsize</span>],
    <span class="pl-s">"molecules"</span><span class="pl-c1">=</span><span class="pl-c1">&gt;</span><span class="pl-s1">polymer</span>
    )



<span class="pl-v">Simulate</span>(<span class="pl-s1">control</span>,<span class="pl-s1">configs</span>)</pre></div>
<h2 dir="auto">
<a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References:</h2>
<ol dir="auto">
<li>Milano, G.; Kawakatsu, T. Hybrid Particle-Field Molecular Dynamics Simulations for Dense Polymer Systems. <a href="https://doi.org/10.1063/1.3142103" rel="nofollow">J. Chem. Phys. 2009, 130 (21), 214106.</a>
</li>
<li>Zhao, Y.; Nicola, A. D.; Kawakatsu, T.; Milano, G. Hybrid Particle-Field Molecular Dynamics Simulations: Parallelization and Benchmarks. <a href="https://doi.org/10.1002/jcc.22883" rel="nofollow">J. Comput. Chem. 2012, 33 (8), 868–880.</a>
</li>
<li>Bore, S. L.; Cascella, M. Hamiltonian and Alias-Free Hybrid Particle–Field Molecular Dynamics. <a href="https://doi.org/10.1063/5.0020733" rel="nofollow">J. Chem. Phys. 2020, 153 (9), 094106.</a>
</li>
<li>Wu, Z.; Kalogirou, A.; De Nicola, A.; Milano, G.; Müller‐Plathe, F. Atomistic Hybrid Particle‐field Molecular Dynamics Combined with: Restoring Entangled Dynamics to Simulations of Polymer Melts. <a href="https://doi.org/10.1002/jcc.26428" rel="nofollow">J. Comput. Chem. 2021, 42 (1), 6–18.</a>
</li>
<li>Wu, Z.; Milano, G.; Müller-Plathe, F. Combination of Hybrid Particle-Field Molecular Dynamics and Slip-Springs for the Efficient Simulation of Coarse-Grained Polymer Models: Static and Dynamic Properties of Polystyrene Melts. <a href="https://doi.org/10.1021/acs.jctc.0c00954" rel="nofollow">J. Chem. Theory Comput. 2021 17 (1), 474-487</a>
</li>
</ol>
</article></div>