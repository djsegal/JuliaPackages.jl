<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-integratedoscillatormodeljl" class="anchor" aria-hidden="true" href="#integratedoscillatormodeljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IntegratedOscillatorModel.jl</h1>
<h1 dir="auto"><a id="user-content-background" class="anchor" aria-hidden="true" href="#background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Background</h1>
<p dir="auto">This module was made during my bachelor's thesis. It implements a mathematical model developed
the following publication, <a href="https://doi.org/10.1016/j.bpj.2015.11.3526" rel="nofollow">McKenna et. al 2016</a>.
The specific model used here is the same as in <a href="https://doi.org/10.1016/j.jtbi.2018.06.017" rel="nofollow">Marinelli et. al 2018</a>
The model describes the flux of certain ions and molecules seen in the beta-cell in the human
pancreas. This is done by a non linear system of first order differential equations, and it's
goal is to get insights about the insulin exocytosis.</p>
<p dir="auto">I will not explain the specific parameters of the model in this README.
Please refer to the above mentioned papers and the comments in the params.jl file.</p>
<p dir="auto">If you want to gain a broader overview of beta-Cell modeling, I can recommend <a href="https://doi.org/10.2337/dbi17-0004" rel="nofollow">this paper</a>.</p>
<h1 dir="auto"><a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Goals</h1>
<p dir="auto">The goal of this module is to enable easy manipulation of parameters within the model,
to obtain insides about its viability and inner workings.
Fast calculation was also a concern, so multithreading was implemented as well as
helper functions to deal with the arising problems.
A novel approach is, to include the simulation of active substances in the model.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">The main function to use, is the simulate function.
It accepts a System struct, that has the following structure:</p>
<h2 dir="auto"><a id="user-content-system" class="anchor" aria-hidden="true" href="#system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>System</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@with_kw struct System
    ode_func      :: Function = sys 
    y0            :: AbstractVecOrMat{Float64} = y0
    time          :: Integer = 60
    plot_args     :: Dict = Dict()
    params        :: Dict{String,Any} = deepcopy(params)
    plot_params   :: AbstractVector{Integer} = [1,2,3,4,5,6,7,8]
    change_params :: Dict{String,Number} = Dict()
    meds          :: Vector{Meds} = []
end"><pre><span class="pl-c1">@with_kw</span> <span class="pl-k">struct</span> System
    ode_func      <span class="pl-k">::</span> <span class="pl-c1">Function</span> <span class="pl-k">=</span> sys 
    y0            <span class="pl-k">::</span> <span class="pl-c1">AbstractVecOrMat{Float64}</span> <span class="pl-k">=</span> y0
    time          <span class="pl-k">::</span> <span class="pl-c1">Integer</span> <span class="pl-k">=</span> <span class="pl-c1">60</span>
    plot_args     <span class="pl-k">::</span> <span class="pl-c1">Dict</span> <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    params        <span class="pl-k">::</span> <span class="pl-c1">Dict{String,Any}</span> <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(params)
    plot_params   <span class="pl-k">::</span> <span class="pl-c1">AbstractVector{Integer}</span> <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>]
    change_params <span class="pl-k">::</span> <span class="pl-c1">Dict{String,Number}</span> <span class="pl-k">=</span> <span class="pl-c1">Dict</span>()
    meds          <span class="pl-k">::</span> <span class="pl-c1">Vector{Meds}</span> <span class="pl-k">=</span> []
<span class="pl-k">end</span></pre></div>
<p dir="auto">The above struct uses the <a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a> package.</p>
<ul dir="auto">
<li>
<p dir="auto">ode_func<br>
The function, that is used as the ode function. In most cases, this parameter should stay the same.</p>
</li>
<li>
<p dir="auto">y0 <br>
The starting values.
Another set of values (called y0_stat) contains the values to achieve an almost constant solution</p>
</li>
<li>
<p dir="auto">time <br>
The simulation time in minutes</p>
</li>
<li>
<p dir="auto">plot_args <br>
Extra arguments, that are used in the automatic plot generation</p>
</li>
<li>
<p dir="auto">params <br>
The parameter set of the simulation.
This will be modified, so copy or deepcopy should be used to mitigate unwanted side effects.</p>
</li>
<li>
<p dir="auto">plot_params <br>
The values of the ode system that shall be contained in the generated plot.</p>
<ol dir="auto">
<li>V - Membrane potential</li>
<li>N - Potassium</li>
<li>Ca - Calcium</li>
<li>Ca_er - Calcium (endoplasmic reticulum)</li>
<li>Ca_m - Calcium (mitochondria)</li>
<li>ADP</li>
<li>F6P</li>
<li>FBP</li>
</ol>
</li>
<li>
<p dir="auto">change_params <br>
The key value pairs are used to modify some parameters given with the params field.</p>
</li>
<li>
<p dir="auto">meds <br>
A list of Activa objects</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-activa" class="anchor" aria-hidden="true" href="#activa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Activa</h2>
<p dir="auto">Activa represent active substances, that can be added to the system as further behavior modifiers.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@with_kw mutable struct Activa
    # starting time in minutes
    time :: Real
    # duration in inutes
    duration :: Number = Inf
    # dosage
    dose :: Float64
    name :: String = &quot;&quot;
    # will be used in en exponential function to simulate
    # exponential dosage decrease or decline
    fade :: Float64 = 1
    # (dose, current_ode_state) -&gt; Float64
    # This function is used to calculate the effect of a active substance
    func :: Function = id
    # The name of the param, that is modified
    param :: String
end"><pre><span class="pl-c1">@with_kw</span> <span class="pl-k">mutable struct</span> Activa
    <span class="pl-c"><span class="pl-c">#</span> starting time in minutes</span>
    time <span class="pl-k">::</span> <span class="pl-c1">Real</span>
    <span class="pl-c"><span class="pl-c">#</span> duration in inutes</span>
    duration <span class="pl-k">::</span> <span class="pl-c1">Number</span> <span class="pl-k">=</span> <span class="pl-c1">Inf</span>
    <span class="pl-c"><span class="pl-c">#</span> dosage</span>
    dose <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
    name <span class="pl-k">::</span> <span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
    <span class="pl-c"><span class="pl-c">#</span> will be used in en exponential function to simulate</span>
    <span class="pl-c"><span class="pl-c">#</span> exponential dosage decrease or decline</span>
    fade <span class="pl-k">::</span> <span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-c"><span class="pl-c">#</span> (dose, current_ode_state) -&gt; Float64</span>
    <span class="pl-c"><span class="pl-c">#</span> This function is used to calculate the effect of a active substance</span>
    func <span class="pl-k">::</span> <span class="pl-c1">Function</span> <span class="pl-k">=</span> id
    <span class="pl-c"><span class="pl-c">#</span> The name of the param, that is modified</span>
    param <span class="pl-k">::</span> <span class="pl-c1">String</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-simulate" class="anchor" aria-hidden="true" href="#simulate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>simulate</h2>
<p dir="auto">The interface to use, is the simulate function.
It accepts a Settings object and will run a simulation accordingly.
The return value is a tuple, containing an OdeSolution object, a matrix
containing the solution and a plot, of the solution.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IntegratedOscillatorModel
ode_solution, solution_matrix, solution_plot = simulate(System())"><pre><span class="pl-k">using</span> IntegratedOscillatorModel
ode_solution, solution_matrix, solution_plot <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(<span class="pl-c1">System</span>())</pre></div>
<p dir="auto">It is also possible to simulate different modifications in one command.
In this scenario 3 dicts will be returned, containing the solutions, the matrices,
and the plots. In addition, a plot, of all solutions, will be returned as the fourth value
Because, this function uses the <a href="https://docs.julialang.org/en/v1/manual/multi-threading/" rel="nofollow">@threads macro</a> to parallelize the operations, the SortedDict has a key for every value, given in the value array.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IntegratedOscillatorModel
sol_dict, mat_dict, plot_dict, overview_plot = simulate(
    System(
        time = 120
        change_params = Dict(
            &quot;vpdh&quot; =&gt; 0.001
        )),
    &quot;Jgk&quot;,
    [0.001, 0.05, 0.01]
    )"><pre><span class="pl-k">using</span> IntegratedOscillatorModel
sol_dict, mat_dict, plot_dict, overview_plot <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(
    <span class="pl-c1">System</span>(
        time <span class="pl-k">=</span> <span class="pl-c1">120</span>
        change_params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
            <span class="pl-s"><span class="pl-pds">"</span>vpdh<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.001</span>
        )),
    <span class="pl-s"><span class="pl-pds">"</span>Jgk<span class="pl-pds">"</span></span>,
    [<span class="pl-c1">0.001</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.01</span>]
    )</pre></div>
<p dir="auto">At last, two keys and two lists can be provided, like in the following example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IntegratedOscillatorModel
sol_dict, mat_dict, plot_dict, overview_plot = simulate(
    System(
        time = 120
        change_params = Dict(
            &quot;vpdh&quot; =&gt; 0.001
        )),
    &quot;Jgk&quot;,
    [0.001, 0.05, 0.01]
    &quot;gca&quot;,
    [200, 400, 800]
    )"><pre><span class="pl-k">using</span> IntegratedOscillatorModel
sol_dict, mat_dict, plot_dict, overview_plot <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(
    <span class="pl-c1">System</span>(
        time <span class="pl-k">=</span> <span class="pl-c1">120</span>
        change_params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
            <span class="pl-s"><span class="pl-pds">"</span>vpdh<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.001</span>
        )),
    <span class="pl-s"><span class="pl-pds">"</span>Jgk<span class="pl-pds">"</span></span>,
    [<span class="pl-c1">0.001</span>, <span class="pl-c1">0.05</span>, <span class="pl-c1">0.01</span>]
    <span class="pl-s"><span class="pl-pds">"</span>gca<span class="pl-pds">"</span></span>,
    [<span class="pl-c1">200</span>, <span class="pl-c1">400</span>, <span class="pl-c1">800</span>]
    )</pre></div>
<h2 dir="auto"><a id="user-content-simulate-activa" class="anchor" aria-hidden="true" href="#simulate-activa"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>simulate activa</h2>
<p dir="auto">Four types of activa are currently predefined:</p>
<table>
<thead>
<tr>
<th align="left">Function</th>
<th align="left">Active Substance</th>
<th align="left">param</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Tolb</td>
<td align="left">Tolbuatmid</td>
<td align="left">- gkatpbar</td>
</tr>
<tr>
<td align="left">Dz</td>
<td align="left">Diazoxide</td>
<td align="left">+ gkatpbar</td>
</tr>
<tr>
<td align="left">Glucose</td>
<td align="left">Glucose</td>
<td align="left">+ Jgk</td>
</tr>
<tr>
<td align="left">KCl</td>
<td align="left">KalciumChloride</td>
<td align="left">+ vk</td>
</tr>
</tbody>
</table>
<h4 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IntegratedOscillatorModel
sol = simulate(System(
        time = 140,
        plot_params = [1,3,6],
        change_params = Dict(
            &quot;vpdh&quot; =&gt; 0.001,
            &quot;Jgk&quot; =&gt; 0.001,
            &quot;gkca&quot; =&gt; 800
        ),
        meds = [
            Tolb(40,  50,   duration = 20),
            Tolb(60,  100,  duration = 20),
            Tolb(80,  200,  duration = 20),
            Tolb(100, 500,  duration = 20),
            Tolb(120, 1000, duration = 20),
        ]
    ),
)"><pre><span class="pl-k">using</span> IntegratedOscillatorModel
sol <span class="pl-k">=</span> <span class="pl-c1">simulate</span>(<span class="pl-c1">System</span>(
        time <span class="pl-k">=</span> <span class="pl-c1">140</span>,
        plot_params <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">6</span>],
        change_params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
            <span class="pl-s"><span class="pl-pds">"</span>vpdh<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.001</span>,
            <span class="pl-s"><span class="pl-pds">"</span>Jgk<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.001</span>,
            <span class="pl-s"><span class="pl-pds">"</span>gkca<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">800</span>
        ),
        meds <span class="pl-k">=</span> [
            <span class="pl-c1">Tolb</span>(<span class="pl-c1">40</span>,  <span class="pl-c1">50</span>,   duration <span class="pl-k">=</span> <span class="pl-c1">20</span>),
            <span class="pl-c1">Tolb</span>(<span class="pl-c1">60</span>,  <span class="pl-c1">100</span>,  duration <span class="pl-k">=</span> <span class="pl-c1">20</span>),
            <span class="pl-c1">Tolb</span>(<span class="pl-c1">80</span>,  <span class="pl-c1">200</span>,  duration <span class="pl-k">=</span> <span class="pl-c1">20</span>),
            <span class="pl-c1">Tolb</span>(<span class="pl-c1">100</span>, <span class="pl-c1">500</span>,  duration <span class="pl-k">=</span> <span class="pl-c1">20</span>),
            <span class="pl-c1">Tolb</span>(<span class="pl-c1">120</span>, <span class="pl-c1">1000</span>, duration <span class="pl-k">=</span> <span class="pl-c1">20</span>),
        ]
    ),
)</pre></div>
<h1 dir="auto"><a id="user-content-inner-workings-and-hints" class="anchor" aria-hidden="true" href="#inner-workings-and-hints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inner Workings and Hints</h1>
<h3 dir="auto"><a id="user-content-tolerance" class="anchor" aria-hidden="true" href="#tolerance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tolerance</h3>
<p dir="auto">Since the simulated ode system is quite fast oscillating, the solver will assume an initial
tolerance of abstol = 1e-6 and reltol = 1e-6.
If the calculation failed because of a domain error (mostly a failed sqrt(-n)) the
tolerances will be decreased by 6 orders of magnitude.
If the system can't by solved with a tolerance of 1e-18, the simulations fails and returns nothing.</p>
<h3 dir="auto"><a id="user-content-medication-implementation" class="anchor" aria-hidden="true" href="#medication-implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Medication implementation</h3>
<p dir="auto">A periodic callback is called every 100 steps in the simulation, and the medications are evaluated.
An evaluation at every step would be very slow and error-prone.</p>
<h3 dir="auto"><a id="user-content-reexports" class="anchor" aria-hidden="true" href="#reexports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reexports</h3>
<p dir="auto">The Plots and LaTeXStrings modules are reexported.</p>
<h3 dir="auto"><a id="user-content-legacy" class="anchor" aria-hidden="true" href="#legacy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Legacy</h3>
<p dir="auto">I originally designed the module to work with a named tuple of options.
This syntax is still accepted, to achieve compatibility with my bachelor's thesis simulations.</p>
</article></div>