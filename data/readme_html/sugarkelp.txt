<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sugarkelpjl" class="anchor" aria-hidden="true" href="#sugarkelpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SugarKelp.jl</h1>
<p align="middle" dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img src="docs/src/assets/logo.png" alt="Logo" width="100" style="max-width: 100%;"></a> 
</p><p dir="auto"><a href="https://zenodo.org/badge/latestdoi/383172934" rel="nofollow"><img src="https://camo.githubusercontent.com/b5b7510c9c1906615f9e47fd5534450fc926796cf6908d81157a1ddb65e5a686/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3338333137323933342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/383172934.svg" style="max-width: 100%;"></a><a href="https://app.travis-ci.com/jagoosw/SugarKelp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d171bc75200bae230a4975eae7a1aa3bb77f640d059247328cbdbc4149b027d0/68747470733a2f2f6170702e7472617669732d63692e636f6d2f6a61676f6f73772f53756761724b656c702e6a6c2e7376673f6272616e63683d6d61696e" alt="Build Status" data-canonical-src="https://app.travis-ci.com/jagoosw/SugarKelp.jl.svg?branch=main" style="max-width: 100%;"></a><a href="https://codecov.io/gh/jagoosw/SugarKelp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8a7c862f594f52c84c6a862a6774d1bd4fdd855f729f244c472ca769826b3622/68747470733a2f2f636f6465636f762e696f2f67682f6a61676f6f73772f53756761724b656c702e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4a473044385559324b38" alt="codecov" data-canonical-src="https://codecov.io/gh/jagoosw/SugarKelp.jl/branch/main/graph/badge.svg?token=JG0D8UY2K8" style="max-width: 100%;"></a><a href="https://juliahub.com/ui/Packages/SugarKelp/Uh2dO" rel="nofollow"><img src="https://camo.githubusercontent.com/6bbe7c9361a6142e2bfa541a77b1a08586b7b3edd400aedb5da1446465d084b8/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53756761724b656c702f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/SugarKelp/pkgeval.svg" style="max-width: 100%;"></a><a href="https://juliahub.com/ui/Packages/SugarKelp/Uh2dO" rel="nofollow"><img src="https://camo.githubusercontent.com/ee5d2e358e5a0124b91d28043509d16532e3ba22165126c56d703407bd53adca/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f53756761724b656c702f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/SugarKelp/version.svg" style="max-width: 100%;"></a></p>
<p dir="auto"></p>
<p dir="auto">Implementation of the <a href="https://link.springer.com/article/10.1007/s10811-011-9695-y" rel="nofollow">Broch and Slagstad, 2012 model of the growth and composition of <em>Saccharina latissima</em> kelp</a>.</p>
<p dir="auto">The main way to solve a single frond is <code>SugarKelp.solve</code> and grids can be solved by <code>SugarKelp.solvegrid</code>.</p>
<p dir="auto">Changes from the stated parameter values in the paper are detailed in <a href="https://github.com/jagoosw/SugarKelp.jl/blob/main/info/changes.pdf">changes.pdf</a>.</p>
<p dir="auto">This package is now available from the registry so can be installed by <code>import Pkg;Pkg.add("SugarKelp")</code>. Alternatively, you can install from this repo (which may be slightly updated) by <code>import Pkg;Pkg.add("https://github.com/jagoosw/SugarKelp.jl")</code>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h2 dir="auto"><a id="user-content-running-a-model" class="anchor" aria-hidden="true" href="#running-a-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running a model</h2>
<p dir="auto">These examples for running the model both at a single point and on a grid can be found in <a href="https://github.com/jagoosw/SugarKelp.jl/blob/main/examples/example.ipynb">examples.ipynb</a>.</p>
<h3 dir="auto"><a id="user-content-example-1---single-point" class="anchor" aria-hidden="true" href="#example-1---single-point"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1 - Single Point</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SugarKelp, Plots, Interpolations;pyplot();"><pre><span class="pl-k">using</span> SugarKelp, Plots, Interpolations;<span class="pl-c1">pyplot</span>();</pre></div>
<p dir="auto">Set initial conditions and parameters</p>
<ul dir="auto">
<li>t_i - start day (days since January first) - needs to have the same date reference as the forcing data</li>
<li>nd - number of days to run for</li>
<li>lat - latitude as this effects the change in day length</li>
<li>a_0,n_0,c_0 - initial area, nitrogen reserve and carbon reserve</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t_i = 1.0;nd = 600;lat = 60
a_0 = 0.1;n_0 = 0.022;c_0 = 0.3;"><pre>t_i <span class="pl-k">=</span> <span class="pl-c1">1.0</span>;nd <span class="pl-k">=</span> <span class="pl-c1">600</span>;lat <span class="pl-k">=</span> <span class="pl-c1">60</span>
a_0 <span class="pl-k">=</span> <span class="pl-c1">0.1</span>;n_0 <span class="pl-k">=</span> <span class="pl-c1">0.022</span>;c_0 <span class="pl-k">=</span> <span class="pl-c1">0.3</span>;</pre></div>
<p dir="auto">Setting the forcing variables, these would normally be loaded from a data set but here will be generated</p>
<ul dir="auto">
<li>time - day corresponding to forcing data in days since January first (year is arbitrary). This <strong>must</strong> be a float rather than an integer or ODE solving library fails</li>
<li>temp - temperature in degrees C</li>
<li>no3 - nitrate concentration in mmol/m³</li>
<li>irr - PAR irradiance in mol photons/m²/day</li>
<li>u - water velocity in m/s</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="time = [1:2:800;]

temp = 6 * cos.((time .- 250) .* 2 .* pi ./ 365) .+ 8
no3 = (7 .* ((cos.(time .* 2 .* pi ./ 365) .+ 1) ./ 2).^3 .+ 0.1) ./ 1000
irr = 40 .* (sin.((time .+ 15) .* pi ./ 365).^10) .+ 1
u = repeat([0.15],400);"><pre>time <span class="pl-k">=</span> [<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">800</span>;]

temp <span class="pl-k">=</span> <span class="pl-c1">6</span> <span class="pl-k">*</span> <span class="pl-c1">cos</span>.((time <span class="pl-k">.-</span> <span class="pl-c1">250</span>) <span class="pl-k">.*</span> <span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-c1">pi</span> <span class="pl-k">./</span> <span class="pl-c1">365</span>) <span class="pl-k">.+</span> <span class="pl-c1">8</span>
no3 <span class="pl-k">=</span> (<span class="pl-c1">7</span> <span class="pl-k">.*</span> ((<span class="pl-c1">cos</span>.(time <span class="pl-k">.*</span> <span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-c1">pi</span> <span class="pl-k">./</span> <span class="pl-c1">365</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>) <span class="pl-k">./</span> <span class="pl-c1">2</span>)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">.+</span> <span class="pl-c1">0.1</span>) <span class="pl-k">./</span> <span class="pl-c1">1000</span>
irr <span class="pl-k">=</span> <span class="pl-c1">40</span> <span class="pl-k">.*</span> (<span class="pl-c1">sin</span>.((time <span class="pl-k">.+</span> <span class="pl-c1">15</span>) <span class="pl-k">.*</span> <span class="pl-c1">pi</span> <span class="pl-k">./</span> <span class="pl-c1">365</span>)<span class="pl-k">.^</span><span class="pl-c1">10</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>
u <span class="pl-k">=</span> <span class="pl-c1">repeat</span>([<span class="pl-c1">0.15</span>],<span class="pl-c1">400</span>);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(layout=grid(1,3),size=(1000,250),legend=false)
plot!(time,temp,ylabel=&quot;Temp (°C)&quot;,sp=1)
plot!(time,no3,xlabel=&quot;Day&quot;,ylabel=&quot;Nitrate concentration (mmol/m³)&quot;,sp=2)
plot!(time,irr,ylabel=&quot;PAR (mol photons/m²/day)&quot;,sp=3)"><pre><span class="pl-c1">plot</span>(layout<span class="pl-k">=</span><span class="pl-c1">grid</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>),size<span class="pl-k">=</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">250</span>),legend<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>(time,temp,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Temp (°C)<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(time,no3,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Day<span class="pl-pds">"</span></span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Nitrate concentration (mmol/m³)<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot!</span>(time,irr,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>PAR (mol photons/m²/day)<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/output_6_0.png"><img src="docs/src/output_6_0.png" alt="png" style="max-width: 100%;"></a></p>
<p dir="auto">The forcing variables must be converted to interpolations for the kelp model to access them at arbitrary time</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="temp_itp=Interpolations.LinearInterpolation(time,temp)
no3_itp=Interpolations.LinearInterpolation(time,no3)
irr_itp=Interpolations.LinearInterpolation(time,irr)
u_itp=Interpolations.LinearInterpolation(time,u);"><pre>temp_itp<span class="pl-k">=</span>Interpolations<span class="pl-k">.</span><span class="pl-c1">LinearInterpolation</span>(time,temp)
no3_itp<span class="pl-k">=</span>Interpolations<span class="pl-k">.</span><span class="pl-c1">LinearInterpolation</span>(time,no3)
irr_itp<span class="pl-k">=</span>Interpolations<span class="pl-k">.</span><span class="pl-c1">LinearInterpolation</span>(time,irr)
u_itp<span class="pl-k">=</span>Interpolations<span class="pl-k">.</span><span class="pl-c1">LinearInterpolation</span>(time,u);</pre></div>
<p dir="auto">Now the model can be run, the parameter must be passed as a NamedTuple and in this run the respiration model proposed in Broch, 2013 is being used</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="solution, results = SugarKelp.solve(t_i, nd, u_itp, temp_itp, irr_itp, no3_itp, lat, a_0, n_0, c_0, SugarKelp.broch2013params, 2);"><pre>solution, results <span class="pl-k">=</span> SugarKelp<span class="pl-k">.</span><span class="pl-c1">solve</span>(t_i, nd, u_itp, temp_itp, irr_itp, no3_itp, lat, a_0, n_0, c_0, SugarKelp<span class="pl-k">.</span>broch2013params, <span class="pl-c1">2</span>);</pre></div>
<p dir="auto">Solutions contains the raw output of the ODE solver while results is refactored into a dataframe (this can optionally be turned off for an array to be returned)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="results"><pre>results</pre></div>
<p dir="auto"><em>dataframe as a table that can't be rendered here</em></p>
<p dir="auto">It is useful to convert the results into total carbon and nitrogen masses (rather than the reserves that the model returns), this requires some of the parameters.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="total_carbon = results.area .* SugarKelp.broch2013params.K_A .* (results.carbon .+ SugarKelp.broch2013params.C_struct)
total_nitrogen = results.area .* SugarKelp.broch2013params.K_A .* (results.nitrogen .+ SugarKelp.broch2013params.N_struct);"><pre>total_carbon <span class="pl-k">=</span> results<span class="pl-k">.</span>area <span class="pl-k">.*</span> SugarKelp<span class="pl-k">.</span>broch2013params<span class="pl-k">.</span>K_A <span class="pl-k">.*</span> (results<span class="pl-k">.</span>carbon <span class="pl-k">.+</span> SugarKelp<span class="pl-k">.</span>broch2013params<span class="pl-k">.</span>C_struct)
total_nitrogen <span class="pl-k">=</span> results<span class="pl-k">.</span>area <span class="pl-k">.*</span> SugarKelp<span class="pl-k">.</span>broch2013params<span class="pl-k">.</span>K_A <span class="pl-k">.*</span> (results<span class="pl-k">.</span>nitrogen <span class="pl-k">.+</span> SugarKelp<span class="pl-k">.</span>broch2013params<span class="pl-k">.</span>N_struct);</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(layout=grid(1,3),size=(1000,250),legend=false)
plot!(results.time,results.area,ylabel=&quot;Area/dm²&quot;,sp=1)
plot!(results.time,total_carbon,xlabel=&quot;Day&quot;,ylabel=&quot;Total Carbon (gC)&quot;,sp=2)
plot!(results.time,total_nitrogen,ylabel=&quot;Total Nitrogen (gN)&quot;,sp=3)"><pre><span class="pl-c1">plot</span>(layout<span class="pl-k">=</span><span class="pl-c1">grid</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>),size<span class="pl-k">=</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">250</span>),legend<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">plot!</span>(results<span class="pl-k">.</span>time,results<span class="pl-k">.</span>area,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Area/dm²<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(results<span class="pl-k">.</span>time,total_carbon,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Day<span class="pl-pds">"</span></span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Total Carbon (gC)<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot!</span>(results<span class="pl-k">.</span>time,total_nitrogen,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Total Nitrogen (gN)<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/output_15_0.png"><img src="docs/src/output_15_0.png" alt="png" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-example-2---grid" class="anchor" aria-hidden="true" href="#example-2---grid"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2 - Grid</h3>
<p dir="auto">For a grid we must set initial conditions as with a single point</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t_i = 1.0;nd = 300
a_0 = 0.1;n_0 = 0.022;c_0 = 0.3;"><pre>t_i <span class="pl-k">=</span> <span class="pl-c1">1.0</span>;nd <span class="pl-k">=</span> <span class="pl-c1">300</span>
a_0 <span class="pl-k">=</span> <span class="pl-c1">0.1</span>;n_0 <span class="pl-k">=</span> <span class="pl-c1">0.022</span>;c_0 <span class="pl-k">=</span> <span class="pl-c1">0.3</span>;</pre></div>
<p dir="auto">This time we will generate a 4d grid of input data for temp and no3 and 2d for nitrate. An additional variable needs to be generated, either a 3d diffuse attenuation coefficient or 4d light attenuation. In this example the latter is used. Again this would usually be loaded from a file. It is beneficial to define all of these as constants as it drastically speeds up on larger grids.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const arr_lon=[45:50;]
const arr_lat=[55:65;]
const arr_dep=[0:5:75;]
const arr_t = [0:2:310;]

const arr_temp = permutedims(repeat(6 * cos.((arr_t .- 250) .* 2 .* pi ./ 365) .+ 8,1,length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1)).*permutedims(repeat(arr_lat./arr_lat[1],1,length(arr_lon),length(arr_dep),length(arr_t)),(2,1,3,4))
const arr_no3 = permutedims(repeat((7 .* ((cos.(arr_t .* 2 .* pi ./ 365) .+ 1) ./ 2).^3 .+ 0.1) ./ 1000,1,length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1)).*repeat(arr_lon./arr_lon[1],1,length(arr_lat),length(arr_dep),length(arr_t))
const arr_irr = permutedims(repeat(40 .* (sin.((arr_t .+ 15) .* pi ./ 365).^10) .+ 1,1,length(arr_lon),length(arr_lat)),(2,3,1)).*permutedims(repeat(arr_lat./arr_lat[1],1,length(arr_lon),length(arr_t)),(2,1,3))
const arr_beta = permutedims(repeat(reverse([0:1/(length(arr_dep)-1):1;]),1,length(arr_lon),length(arr_lat),length(arr_t)),(2,3,1,4))
const arr_u = permutedims(repeat([0.15],length(arr_t),length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1));"><pre><span class="pl-k">const</span> arr_lon<span class="pl-k">=</span>[<span class="pl-c1">45</span><span class="pl-k">:</span><span class="pl-c1">50</span>;]
<span class="pl-k">const</span> arr_lat<span class="pl-k">=</span>[<span class="pl-c1">55</span><span class="pl-k">:</span><span class="pl-c1">65</span>;]
<span class="pl-k">const</span> arr_dep<span class="pl-k">=</span>[<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">75</span>;]
<span class="pl-k">const</span> arr_t <span class="pl-k">=</span> [<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">310</span>;]

<span class="pl-k">const</span> arr_temp <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>(<span class="pl-c1">6</span> <span class="pl-k">*</span> <span class="pl-c1">cos</span>.((arr_t <span class="pl-k">.-</span> <span class="pl-c1">250</span>) <span class="pl-k">.*</span> <span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-c1">pi</span> <span class="pl-k">./</span> <span class="pl-c1">365</span>) <span class="pl-k">.+</span> <span class="pl-c1">8</span>,<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_lat),<span class="pl-c1">length</span>(arr_dep)),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>))<span class="pl-k">.*</span><span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>(arr_lat<span class="pl-k">./</span>arr_lat[<span class="pl-c1">1</span>],<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_dep),<span class="pl-c1">length</span>(arr_t)),(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))
<span class="pl-k">const</span> arr_no3 <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>((<span class="pl-c1">7</span> <span class="pl-k">.*</span> ((<span class="pl-c1">cos</span>.(arr_t <span class="pl-k">.*</span> <span class="pl-c1">2</span> <span class="pl-k">.*</span> <span class="pl-c1">pi</span> <span class="pl-k">./</span> <span class="pl-c1">365</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>) <span class="pl-k">./</span> <span class="pl-c1">2</span>)<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">.+</span> <span class="pl-c1">0.1</span>) <span class="pl-k">./</span> <span class="pl-c1">1000</span>,<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_lat),<span class="pl-c1">length</span>(arr_dep)),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>))<span class="pl-k">.*</span><span class="pl-c1">repeat</span>(arr_lon<span class="pl-k">./</span>arr_lon[<span class="pl-c1">1</span>],<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lat),<span class="pl-c1">length</span>(arr_dep),<span class="pl-c1">length</span>(arr_t))
<span class="pl-k">const</span> arr_irr <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>(<span class="pl-c1">40</span> <span class="pl-k">.*</span> (<span class="pl-c1">sin</span>.((arr_t <span class="pl-k">.+</span> <span class="pl-c1">15</span>) <span class="pl-k">.*</span> <span class="pl-c1">pi</span> <span class="pl-k">./</span> <span class="pl-c1">365</span>)<span class="pl-k">.^</span><span class="pl-c1">10</span>) <span class="pl-k">.+</span> <span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_lat)),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>))<span class="pl-k">.*</span><span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>(arr_lat<span class="pl-k">./</span>arr_lat[<span class="pl-c1">1</span>],<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_t)),(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">3</span>))
<span class="pl-k">const</span> arr_beta <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>(<span class="pl-c1">reverse</span>([<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">/</span>(<span class="pl-c1">length</span>(arr_dep)<span class="pl-k">-</span><span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">1</span>;]),<span class="pl-c1">1</span>,<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_lat),<span class="pl-c1">length</span>(arr_t)),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">1</span>,<span class="pl-c1">4</span>))
<span class="pl-k">const</span> arr_u <span class="pl-k">=</span> <span class="pl-c1">permutedims</span>(<span class="pl-c1">repeat</span>([<span class="pl-c1">0.15</span>],<span class="pl-c1">length</span>(arr_t),<span class="pl-c1">length</span>(arr_lon),<span class="pl-c1">length</span>(arr_lat),<span class="pl-c1">length</span>(arr_dep)),(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>));</pre></div>
<p dir="auto">These grids are directly fed to the grid solver, which returns an array. irr can have its own time provided as satellite products often do not have the same temporal resolution as models. Additionally, a fill value, in this case NaN, can be provided as they are often temporally sparse and need to be filtered.</p>
<p dir="auto">This function automatically parallelised to however many threads you start Julia with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@time results = SugarKelp.solvegrid(t_i, nd, a_0, n_0, c_0, arr_lon, arr_lat, arr_dep, arr_t, arr_no3, arr_temp, arr_u, (arr_irr, arr_t, NaN), (nothing, nothing, nothing), arr_beta, SugarKelp.broch2013params, 2);"><pre><span class="pl-c1">@time</span> results <span class="pl-k">=</span> SugarKelp<span class="pl-k">.</span><span class="pl-c1">solvegrid</span>(t_i, nd, a_0, n_0, c_0, arr_lon, arr_lat, arr_dep, arr_t, arr_no3, arr_temp, arr_u, (arr_irr, arr_t, <span class="pl-c1">NaN</span>), (<span class="pl-c1">nothing</span>, <span class="pl-c1">nothing</span>, <span class="pl-c1">nothing</span>), arr_beta, SugarKelp<span class="pl-k">.</span>broch2013params, <span class="pl-c1">2</span>);</pre></div>
<p dir="auto">...</p>
<p dir="auto">The output from this is an array with area/nitrogen reserve/carbon reserve/nitrate uptake in the first dimension, then lon,lat,dep,time in the others. We can extract the total carbon and nitrogen again:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="total_carbon = results[1,:,:,:,:] .* K_A .* (results[3,:,:,:,:] .+ C_struct)
total_nitrogen = results[1,:,:,:,:] .* K_A .* (results[2,:,:,:,:] .+ N_struct);"><pre>total_carbon <span class="pl-k">=</span> results[<span class="pl-c1">1</span>,:,:,:,:] <span class="pl-k">.*</span> K_A <span class="pl-k">.*</span> (results[<span class="pl-c1">3</span>,:,:,:,:] <span class="pl-k">.+</span> C_struct)
total_nitrogen <span class="pl-k">=</span> results[<span class="pl-c1">1</span>,:,:,:,:] <span class="pl-k">.*</span> K_A <span class="pl-k">.*</span> (results[<span class="pl-c1">2</span>,:,:,:,:] <span class="pl-k">.+</span> N_struct);</pre></div>
<p dir="auto">We could plot these for a couple of points as a comparison for above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(layout=grid(1,3),size=(1000,300))
results_time=[0:nd;]
for r=1:10
    i,j,k=rand([1:length(arr_lon);]),rand([1:length(arr_lat);]),rand([1:length(arr_dep);])
    plot!(results_time,results[1,i,j,k,:],sp=1,label=&quot;$(arr_lat[j])N, $(arr_lon[i])W, $(arr_dep[k])m&quot;)
    plot!(results_time,total_carbon[i,j,k,:],sp=2)
    plot!(results_time,total_nitrogen[i,j,k,:],sp=3)
end
plot!(ylabel=&quot;Area/dm²&quot;,sp=1,legend=:bottomright);plot!(sp=2,xlabel=&quot;Day&quot;,ylabel=&quot;Total Carbon (gC)&quot;,legend=false);plot!(sp=3,ylabel=&quot;Total Nitrogen (gN)&quot;,legend=false)"><pre><span class="pl-c1">plot</span>(layout<span class="pl-k">=</span><span class="pl-c1">grid</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>),size<span class="pl-k">=</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">300</span>))
results_time<span class="pl-k">=</span>[<span class="pl-c1">0</span><span class="pl-k">:</span>nd;]
<span class="pl-k">for</span> r<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    i,j,k<span class="pl-k">=</span><span class="pl-c1">rand</span>([<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(arr_lon);]),<span class="pl-c1">rand</span>([<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(arr_lat);]),<span class="pl-c1">rand</span>([<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(arr_dep);])
    <span class="pl-c1">plot!</span>(results_time,results[<span class="pl-c1">1</span>,i,j,k,:],sp<span class="pl-k">=</span><span class="pl-c1">1</span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(arr_lat[j])</span>N, <span class="pl-v">$(arr_lon[i])</span>W, <span class="pl-v">$(arr_dep[k])</span>m<span class="pl-pds">"</span></span>)
    <span class="pl-c1">plot!</span>(results_time,total_carbon[i,j,k,:],sp<span class="pl-k">=</span><span class="pl-c1">2</span>)
    <span class="pl-c1">plot!</span>(results_time,total_nitrogen[i,j,k,:],sp<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-k">end</span>
<span class="pl-c1">plot!</span>(ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Area/dm²<span class="pl-pds">"</span></span>,sp<span class="pl-k">=</span><span class="pl-c1">1</span>,legend<span class="pl-k">=</span><span class="pl-c1">:bottomright</span>);<span class="pl-c1">plot!</span>(sp<span class="pl-k">=</span><span class="pl-c1">2</span>,xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Day<span class="pl-pds">"</span></span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Total Carbon (gC)<span class="pl-pds">"</span></span>,legend<span class="pl-k">=</span><span class="pl-c1">false</span>);<span class="pl-c1">plot!</span>(sp<span class="pl-k">=</span><span class="pl-c1">3</span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Total Nitrogen (gN)<span class="pl-pds">"</span></span>,legend<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/output_26_0.png"><img src="docs/src/output_26_0.png" alt="png" style="max-width: 100%;"></a></p>
<p dir="auto">Or we could plot a heatmap of the surfaces:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hms=[
    heatmap(arr_lon,arr_lat,total_carbon[:,:,1,end]',color=cgrad(:bamako, rev=true),colorbar_title=&quot;Total Carbon (gC)&quot;),
    heatmap(arr_lon,arr_lat,total_nitrogen[:,:,1,end]',color=:lajolla,colorbar_title=&quot;Total Nitrogen (gN)&quot;),
    heatmap(arr_lon,arr_lat,total_carbon[:,:,1,end]'./total_nitrogen[:,:,1,end]',color=cgrad(:lapaz, rev=true),colorbar_title=&quot;Carbon:Nitrogen ratio&quot;)
]
plot!(hms...,layout=grid(1,3),size=(1000,200))"><pre>hms<span class="pl-k">=</span>[
    <span class="pl-c1">heatmap</span>(arr_lon,arr_lat,total_carbon[:,:,<span class="pl-c1">1</span>,<span class="pl-c1">end</span>]<span class="pl-k">'</span>,color<span class="pl-k">=</span><span class="pl-c1">cgrad</span>(<span class="pl-c1">:bamako</span>, rev<span class="pl-k">=</span><span class="pl-c1">true</span>),colorbar_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Total Carbon (gC)<span class="pl-pds">"</span></span>),
    <span class="pl-c1">heatmap</span>(arr_lon,arr_lat,total_nitrogen[:,:,<span class="pl-c1">1</span>,<span class="pl-c1">end</span>]<span class="pl-k">'</span>,color<span class="pl-k">=</span><span class="pl-c1">:lajolla</span>,colorbar_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Total Nitrogen (gN)<span class="pl-pds">"</span></span>),
    <span class="pl-c1">heatmap</span>(arr_lon,arr_lat,total_carbon[:,:,<span class="pl-c1">1</span>,<span class="pl-c1">end</span>]<span class="pl-k">'</span><span class="pl-k">./</span>total_nitrogen[:,:,<span class="pl-c1">1</span>,<span class="pl-c1">end</span>]<span class="pl-k">'</span>,color<span class="pl-k">=</span><span class="pl-c1">cgrad</span>(<span class="pl-c1">:lapaz</span>, rev<span class="pl-k">=</span><span class="pl-c1">true</span>),colorbar_title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Carbon:Nitrogen ratio<span class="pl-pds">"</span></span>)
]
<span class="pl-c1">plot!</span>(hms<span class="pl-k">...</span>,layout<span class="pl-k">=</span><span class="pl-c1">grid</span>(<span class="pl-c1">1</span>,<span class="pl-c1">3</span>),size<span class="pl-k">=</span>(<span class="pl-c1">1000</span>,<span class="pl-c1">200</span>))</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/output_28_0.png"><img src="docs/src/output_28_0.png" alt="png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Documentation can now be found <a href="https://jagoosw.github.io/SugarKelp.jl" rel="nofollow">here</a>.</p>
</article></div>