<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-kaldijl" class="anchor" aria-hidden="true" href="#kaldijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kaldi.jl</h1>
<p>Julia interface to the Kaldi speech recognition suite.</p>
<p>Currently, we can only read and write Kaldi <code>.ark</code> matrices, and read a nnet2 binary acoustic model.  Sorry---I have to start somewhere.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/davidavdav/Kaldi.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-reading-a-kaldi-ark-file" class="anchor" aria-hidden="true" href="#reading-a-kaldi-ark-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading a Kaldi <code>.ark</code> file</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Kaldi
<span class="pl-k">for</span> (id, matrix) <span class="pl-k">in</span> <span class="pl-c1">load_ark_matrix</span>(fd)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Key <span class="pl-pds">"</span></span>, id, <span class="pl-s"><span class="pl-pds">"</span> matrix <span class="pl-pds">"</span></span>, matrix)
<span class="pl-k">end</span></pre></div>
<p>Here <code>fd</code> is an object of type <code>::IO</code>, e.g., <code>open("file.ark")</code>.  <code>load_ark_matrix()</code> is a generator (coroutine), and returns a <code>(key, value)</code> pair on every iteration.  There is also <code>load_ark_matrices()</code> which reads the entire file and produces an <code>OrderedDict</code>, with the matrix IDs as keys in the order as they occur in the <code>.ark</code> file:</p>
<div class="highlight highlight-source-julia"><pre>matrices <span class="pl-k">=</span> <span class="pl-c1">load_ark_matrices</span>(<span class="pl-s"><span class="pl-pds">"</span>file.ark<span class="pl-pds">"</span></span>)</pre></div>
<p>Matrices have the same direction sense as in the C++ library, i.e., features are like row vectors.  However, this is a different memory layout, because Julia unfortunately represents matrices column-major.  We may change this in the future, if we would directly interface to the kaldi C++ libraries.</p>
<p>Currently only matrices of type float, double and compressed (version 1) are supported.   Compressed matrices are expanded to <code>Float32</code>.</p>
<h2><a id="user-content-writing-a-kaldi-ark-file" class="anchor" aria-hidden="true" href="#writing-a-kaldi-ark-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing a Kaldi <code>.ark</code> file</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">save_ark_matrix</span>(f, id<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, mat<span class="pl-k">::</span><span class="pl-c1">Matrix</span>)
<span class="pl-c"><span class="pl-c">#</span># or</span>
<span class="pl-c1">save_ark_matrix</span>(f, d<span class="pl-k">::</span><span class="pl-c1">Associative</span>)
<span class="pl-c"><span class="pl-c">#</span># or</span>
<span class="pl-c1">save_ark_matrix</span>(f, keys<span class="pl-k">::</span><span class="pl-c1">Vector{AbstractString}</span>, values<span class="pl-k">::</span><span class="pl-c1">Vector{Matrix{AbstractFloat}}</span>)</pre></div>
<p>This is the reverse of loading a <code>.ark</code> matrix.  <code>d</code> can be a normal (unordered) dict, but this leads to an arbitrary storage order of the matrices in the <code>.ark</code> file.  Kaldi often works with (promises) of lexicographically ordered keys.  The second version allows explicit control of the order of the matrices without having to use an <code>OrderedDict</code>.</p>
<p>Only matirces of type <code>Float32</code> and <code>Float64</code> are supported.</p>
<h2><a id="user-content-reading-a-nnet2-neural-net-acoustical-model" class="anchor" aria-hidden="true" href="#reading-a-nnet2-neural-net-acoustical-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading a nnet2 neural net acoustical model</h2>
<p>We now have rudimentary support for reading (binary) <code>nnet-am</code> files in Dan Povey's nnet2 implementation.</p>
<div class="highlight highlight-source-julia"><pre>nnetam <span class="pl-k">=</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>final.mdl<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> fd
    <span class="pl-c1">load_nnet_am</span>(fd)
<span class="pl-k">end</span></pre></div>
<p>This reads a tuple <code>(transition_model, nnet2)</code> into <code>nnetam</code>.</p>
<h2><a id="user-content-plans" class="anchor" aria-hidden="true" href="#plans"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plans</h2>
<p>Nothing concrete, but it would be kind-of cool to be able to run the <code>online/nnet2</code> pipeline of Kaldi natively in Julia.  Come to think of it, it would be better work on nnet3 support instead.  But then, there is not even a small chance we'll be able to reproduce the nnet3 computation.</p>
</article></div>