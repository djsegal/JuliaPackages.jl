<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-strliterals" class="anchor" aria-hidden="true" href="#strliterals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StrLiterals</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Info</strong></th>
<th align="center"><strong>Windows</strong></th>
<th align="center"><strong>Linux &amp; MacOS</strong></th>
<th align="center"><strong>Package Evaluator</strong></th>
<th align="center"><strong>CodeCov</strong></th>
<th align="center"><strong>Coveralls</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="center"><a href="https://ci.appveyor.com/project/ScottPJones/strliterals-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f54367425133a69895550acd7a38616dacd92e51/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f383436326f713039656b30376b6e6f733f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/8462oq09ek07knos?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f86fe8fde408e3a94b40b4af226cbbe4987213c/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f5374724c69746572616c732e6a6c2e737667" alt="" data-canonical-src="https://travis-ci.org/JuliaString/StrLiterals.jl.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/detail/StrLiterals" rel="nofollow"><img src="https://camo.githubusercontent.com/2ee56c6ffab4edcb351762056ae03cbbecb3973d/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5374724c69746572616c735f302e362e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/StrLiterals_0.6.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/034f1685ab2bb5f41093fbe2e2c96c90a0ffa025/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f5374724c69746572616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/StrLiterals.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3da299097ecf63f098054505df5578f4c1ccd8f8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961537472696e672f5374724c69746572616c732e6a6c2f62616467652e737667" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaString/StrLiterals.jl/badge.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://gitter.im/JuliaString/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://ci.appveyor.com/project/ScottPJones/strliterals-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e0d66aab2c93bbe58f737d86cfa0b0f3f8085c99/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f383436326f713039656b30376b6e6f732f6272616e63682f6d61737465723f7376673d74727565" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/8462oq09ek07knos/branch/master?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a5f25087c423326c0926ffd030ae27e3ebdd0148/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f5374724c69746572616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/StrLiterals.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/detail/StrLiterals" rel="nofollow"><img src="https://camo.githubusercontent.com/cc0e098a94a1ea3ded31581c9aec3068371404ff/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5374724c69746572616c735f302e372e737667" alt="" data-canonical-src="http://pkg.julialang.org/badges/StrLiterals_0.7.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/034f1685ab2bb5f41093fbe2e2c96c90a0ffa025/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f5374724c69746572616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/StrLiterals.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/JuliaString/StrLiterals.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0521947f6a224a2b8cc45853920f73859ee4ec98/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961537472696e672f5374724c69746572616c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/JuliaString/StrLiterals.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The StrLiterals package is an attempt to bring a cleaner string literal syntax to Julia, as well as having an easier way of producing formatted strings, borrowing from both Python and C formatted printing syntax.  It also adds support for using LaTex, Emoji, HTML, or Unicode entity names that are looked up at compile-time.
This builds on the previous work in StringUtils and StringLiterals, but is based on the new Strs.jl package</p>
<p>Currently, it adds a Swift style string macro, <code>f"..."</code>, which uses the Swift syntax for
interpolation, i.e. <code>\(expression)</code>.  This means that you never have to worry about strings with
the $ character in them, which is rather frequent in some applications.
Also, Unicode sequences are represented as in Swift, i.e. as <code>\u{hexdigits}</code>, where there
can be from 1 to 6 hex digits. This syntax eliminates having to worry about always outputting
4 or 8 hex digits, to prevent problems with 0-9,A-F,a-f characters immediately following.</p>
<p>It also adds a string macro that instead of building a string, can print the strings and interpolated values directly, without having to create a string out of all the parts.
Finally, there are uppercase versions of the macros, which also supports the legacy sequences, $ for string interpolation, <code>\x</code> followed by 1 or 2 hex digits, <code>\u</code> followed by 1 to 4 hex digits, and <code>\U</code> followed by 1 to 8 hex digits.</p>
<p>The <a href="https://github.com/JuliaString/StrFormat.jl">StrFormat</a> package adds type-based, C-style, and Python-style formatting, using the following escape characters (after <code>\</code>): <code>%</code> and <code>{</code>.
See the package for more details.</p>
<p>The <a href="https://github.com/JuliaString/StrEntities.jl">StrEntities</a> package adds Emojis (starting with <code>\:</code> and ending with <code>:</code>), LaTeX entities (starting with <code>\&lt;</code> and ending with <code>&gt;</code>) similar to the Julia REPL, as well as HTML entities (starting with <code>&amp;</code>, anding with <code>;</code>), and Unicode entities (starting with <code>\N{</code> and ending with <code>}</code> (similar to Python strings)
See the package for more details.</p>
<ul>
<li>
<p><code>\</code> can be followed by: 0, $, ", ', , a, b, e, f, n, r, t, u, v, (
(as well as any added by other packages, such as <code>StrFormat</code> or <code>StrEntities</code>)
In the legacy modes, x and U are also allowed after the <code>\</code>.
Unsupported characters give an error (as in Swift, and in recent Julia versions).</p>
</li>
<li>
<p><code>\0</code> outputs a nul byte (0x00) (note: as in Swift, octal sequences are not supported, just the nul byte)</p>
</li>
<li>
<p><code>\a</code> outputs the "alarm" or "bell" control code (0x07)</p>
</li>
<li>
<p><code>\b</code> outputs the "backspace" control code (0x08)</p>
</li>
<li>
<p><code>\e</code> outputs the "escape" control code (0x1b)</p>
</li>
<li>
<p><code>\f</code> outputs the "formfeed" control code (0x0c)</p>
</li>
<li>
<p><code>\n</code> outputs the "newline" or "linefeed" control code (0x0a)</p>
</li>
<li>
<p><code>\r</code> outputs the "return" (carriage return) control code (0x0d)</p>
</li>
<li>
<p><code>\t</code> outputs the "tab" control code (0x09)</p>
</li>
<li>
<p><code>\v</code> outputs the "vertical tab" control code (0x0b)</p>
</li>
<li>
<p><code>\u{&lt;hexdigits&gt;}</code> is used to represent a Unicode character, with 1-6 hex digits.</p>
</li>
<li>
<p><code>\(expression)</code> simply interpolates the value of the expression, the same as <code>$(expression)</code> in standard Julia string literals.</p>
</li>
</ul>
</article></div>