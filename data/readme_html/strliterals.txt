<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-strliterals" class="anchor" aria-hidden="true" href="#strliterals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StrLiterals</h1>
<p><a href="https://github.com/JuliaString/StrLiterals.jl.git"><img src="https://camo.githubusercontent.com/c02c703992353927f3773d4791ca65e87fea4cdb7f574efa9446c7db9c6833c1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961537472696e672f5374724c69746572616c732e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaString/StrLiterals.jl.svg" style="max-width:100%;"></a> <a href="https://github.com/JuliaString/StrLiterals.jl.git"><img src="https://camo.githubusercontent.com/d825cbc5ec9347c6433946c62d6921e7d1837a5e1649ea41816a24a22b92188e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f4a756c6961537472696e672f5374724c69746572616c732e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release-date/JuliaString/StrLiterals.jl.svg" style="max-width:100%;"></a> <a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a> <a href="https://github.com/JuliaString/StrLiterals.jl/issues"><img src="https://camo.githubusercontent.com/f5054ffcd4245c10d3ec85ef059e07aacf787b560f83ad4aec2236364437d097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="contributions welcome" data-canonical-src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" style="max-width:100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Julia Version</strong></th>
<th align="center"><strong>Unit Tests</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaLang/Julia"><img src="https://camo.githubusercontent.com/514feca078cec1d0f876174356358ac616bed330b2a880fa65daca3148ead714/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c69614c616e672f6a756c69612e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaLang/julia.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/859b44ef208c492c27c7ce41586b9218f6051751a490a85d54a884a331634fce/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f5374724c69746572616c732e6a6c2e737667" alt="" data-canonical-src="https://travis-ci.org/JuliaString/StrLiterals.jl.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f367b725e5d84954e5f5217a07710b69c0c85d62d9f6524d5018eec06e630fb6/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f5374724c69746572616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/StrLiterals.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center">Julia Latest</td>
<td align="center"><a href="https://travis-ci.org/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9f7889ae4424a6eced6e32366388ce5c52d74a1de31b7493e9a347366d58bcc3/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f5374724c69746572616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/StrLiterals.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/StrLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f367b725e5d84954e5f5217a07710b69c0c85d62d9f6524d5018eec06e630fb6/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f5374724c69746572616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/StrLiterals.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>The StrLiterals package is an attempt to bring a cleaner string literal syntax to Julia, as well as having an easier way of producing formatted strings, borrowing from both Python and C formatted printing syntax.  It also adds support for using LaTex, Emoji, HTML, or Unicode entity names that are looked up at compile-time.
This builds on the previous work in StringUtils and StringLiterals, but is based on the new Strs.jl package</p>
<p>Currently, it adds a Swift style string macro, <code>f"..."</code>, which uses the Swift syntax for
interpolation, i.e. <code>\(expression)</code>.  This means that you never have to worry about strings with
the $ character in them, which is rather frequent in some applications.
Also, Unicode sequences are represented as in Swift, i.e. as <code>\u{hexdigits}</code>, where there
can be from 1 to 6 hex digits. This syntax eliminates having to worry about always outputting
4 or 8 hex digits, to prevent problems with 0-9,A-F,a-f characters immediately following.</p>
<p>It also adds a string macro that instead of building a string, can print the strings and interpolated values directly, without having to create a string out of all the parts.
Finally, there are uppercase versions of the macros, which also supports the legacy sequences, $ for string interpolation, <code>\x</code> followed by 1 or 2 hex digits, <code>\u</code> followed by 1 to 4 hex digits, and <code>\U</code> followed by 1 to 8 hex digits.</p>
<p>The <a href="https://github.com/JuliaString/StrFormat.jl">StrFormat</a> package adds type-based, C-style, and Python-style formatting, using the following escape characters (after <code>\</code>): <code>%</code> and <code>{</code>.
See the package for more details.</p>
<p>The <a href="https://github.com/JuliaString/StrEntities.jl">StrEntities</a> package adds Emojis (starting with <code>\:</code> and ending with <code>:</code>), LaTeX entities (starting with <code>\&lt;</code> and ending with <code>&gt;</code>) similar to the Julia REPL, as well as HTML entities (starting with <code>&amp;</code>, anding with <code>;</code>), and Unicode entities (starting with <code>\N{</code> and ending with <code>}</code> (similar to Python strings)
See the package for more details.</p>
<ul>
<li>
<p><code>\</code> can be followed by: 0, $, ", ', , a, b, e, f, n, r, t, u, v, (
(as well as any added by other packages, such as <code>StrFormat</code> or <code>StrEntities</code>)
In the legacy modes, x and U are also allowed after the <code>\</code>.
Unsupported characters give an error (as in Swift, and in recent Julia versions).</p>
</li>
<li>
<p><code>\0</code> outputs a nul byte (0x00) (note: as in Swift, octal sequences are not supported, just the nul byte)</p>
</li>
<li>
<p><code>\a</code> outputs the "alarm" or "bell" control code (0x07)</p>
</li>
<li>
<p><code>\b</code> outputs the "backspace" control code (0x08)</p>
</li>
<li>
<p><code>\e</code> outputs the "escape" control code (0x1b)</p>
</li>
<li>
<p><code>\f</code> outputs the "formfeed" control code (0x0c)</p>
</li>
<li>
<p><code>\n</code> outputs the "newline" or "linefeed" control code (0x0a)</p>
</li>
<li>
<p><code>\r</code> outputs the "return" (carriage return) control code (0x0d)</p>
</li>
<li>
<p><code>\t</code> outputs the "tab" control code (0x09)</p>
</li>
<li>
<p><code>\v</code> outputs the "vertical tab" control code (0x0b)</p>
</li>
<li>
<p><code>\u{&lt;hexdigits&gt;}</code> is used to represent a Unicode character, with 1-6 hex digits.</p>
</li>
<li>
<p><code>\(expression)</code> simply interpolates the value of the expression, the same as <code>$(expression)</code> in standard Julia string literals.</p>
</li>
</ul>
</article></div>