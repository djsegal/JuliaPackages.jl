<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-quantumnldiffeqjl" class="anchor" aria-hidden="true" href="#quantumnldiffeqjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QuantumNLDiffEq.jl</h1>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add https://github.com/SciML/QuantumNLDiffEq.jl"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>SciML<span class="pl-k">/</span>QuantumNLDiffEq<span class="pl-k">.</span>jl</pre></div>
<h3 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using DifferentialEquations, Yao, QuantumNLDiffEq
# Making the ODEProblem
function f(u, p, t)
	λ, κ = p
	return -1*λ*u*(κ + tan(λ*t))
end
prob = ODEProblem(f, [1.0], (0.0, 0.9), [8.0, 0.1])
function loss_func(a, b)
	return (a - b)^2
end

#Making the DQC
DQC = [QuantumNLDiffEq.DQCType(afm = QuantumNLDiffEq.ChebyshevSparse(2), fm = chain(6, [put(i=&gt;Ry(0)) for i in 1:6]), cost = [Add([put(6, i=&gt;Z) for i in 1:6])], var = dispatch(EasyBuild.variational_circuit(6,5), :random), N = 6)]
config = DQCConfig(abh = QuantumNLDiffEq.Floating(), loss = loss_func)
M = range(start=0; stop=0.9, length=20)
evalue(M) = [QuantumNLDiffEq.calculate_evalue(DQC[1], DQC[1].cost, prob.u0[1], config.abh, params[1], M[x], M[1]) for x in 1:length(M)]
params = [Yao.parameters(DQC[1].var)]

#Training the circuit
QuantumNLDiffEq.train!(DQC, prob, config, M, params)

#Plotting the solution
using Plots
new_M = range(start=0; stop=0.9, length=100)
Plots.plot(new_M, reduce(vcat, real.(evalue(new_M))), xlabel=&quot;x&quot;, ylabel=&quot;f(x)&quot;, legend=false)"><pre><span class="pl-k">using</span> DifferentialEquations, Yao, QuantumNLDiffEq
<span class="pl-c"><span class="pl-c">#</span> Making the ODEProblem</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(u, p, t)
	λ, κ <span class="pl-k">=</span> p
	<span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">*</span>λ<span class="pl-k">*</span>u<span class="pl-k">*</span>(κ <span class="pl-k">+</span> <span class="pl-c1">tan</span>(λ<span class="pl-k">*</span>t))
<span class="pl-k">end</span>
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(f, [<span class="pl-c1">1.0</span>], (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.9</span>), [<span class="pl-c1">8.0</span>, <span class="pl-c1">0.1</span>])
<span class="pl-k">function</span> <span class="pl-en">loss_func</span>(a, b)
	<span class="pl-k">return</span> (a <span class="pl-k">-</span> b)<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>Making the DQC</span>
DQC <span class="pl-k">=</span> [QuantumNLDiffEq<span class="pl-k">.</span><span class="pl-c1">DQCType</span>(afm <span class="pl-k">=</span> QuantumNLDiffEq<span class="pl-k">.</span><span class="pl-c1">ChebyshevSparse</span>(<span class="pl-c1">2</span>), fm <span class="pl-k">=</span> <span class="pl-c1">chain</span>(<span class="pl-c1">6</span>, [<span class="pl-c1">put</span>(i<span class="pl-k">=&gt;</span><span class="pl-c1">Ry</span>(<span class="pl-c1">0</span>)) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>]), cost <span class="pl-k">=</span> [<span class="pl-c1">Add</span>([<span class="pl-c1">put</span>(<span class="pl-c1">6</span>, i<span class="pl-k">=&gt;</span>Z) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>])], var <span class="pl-k">=</span> <span class="pl-c1">dispatch</span>(EasyBuild<span class="pl-k">.</span><span class="pl-c1">variational_circuit</span>(<span class="pl-c1">6</span>,<span class="pl-c1">5</span>), <span class="pl-c1">:random</span>), N <span class="pl-k">=</span> <span class="pl-c1">6</span>)]
config <span class="pl-k">=</span> <span class="pl-c1">DQCConfig</span>(abh <span class="pl-k">=</span> QuantumNLDiffEq<span class="pl-k">.</span><span class="pl-c1">Floating</span>(), loss <span class="pl-k">=</span> loss_func)
M <span class="pl-k">=</span> <span class="pl-c1">range</span>(start<span class="pl-k">=</span><span class="pl-c1">0</span>; stop<span class="pl-k">=</span><span class="pl-c1">0.9</span>, length<span class="pl-k">=</span><span class="pl-c1">20</span>)
<span class="pl-en">evalue</span>(M) <span class="pl-k">=</span> [QuantumNLDiffEq<span class="pl-k">.</span><span class="pl-c1">calculate_evalue</span>(DQC[<span class="pl-c1">1</span>], DQC[<span class="pl-c1">1</span>]<span class="pl-k">.</span>cost, prob<span class="pl-k">.</span>u0[<span class="pl-c1">1</span>], config<span class="pl-k">.</span>abh, params[<span class="pl-c1">1</span>], M[x], M[<span class="pl-c1">1</span>]) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(M)]
params <span class="pl-k">=</span> [Yao<span class="pl-k">.</span><span class="pl-c1">parameters</span>(DQC[<span class="pl-c1">1</span>]<span class="pl-k">.</span>var)]

<span class="pl-c"><span class="pl-c">#</span>Training the circuit</span>
QuantumNLDiffEq<span class="pl-k">.</span><span class="pl-c1">train!</span>(DQC, prob, config, M, params)

<span class="pl-c"><span class="pl-c">#</span>Plotting the solution</span>
<span class="pl-k">using</span> Plots
new_M <span class="pl-k">=</span> <span class="pl-c1">range</span>(start<span class="pl-k">=</span><span class="pl-c1">0</span>; stop<span class="pl-k">=</span><span class="pl-c1">0.9</span>, length<span class="pl-k">=</span><span class="pl-c1">100</span>)
Plots<span class="pl-k">.</span><span class="pl-c1">plot</span>(new_M, <span class="pl-c1">reduce</span>(vcat, <span class="pl-c1">real</span>.(<span class="pl-c1">evalue</span>(new_M))), xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>f(x)<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/51269425/180599519-4e29b5c0-36e9-497b-b63c-db97d14a1050.png"><img src="https://user-images.githubusercontent.com/51269425/180599519-4e29b5c0-36e9-497b-b63c-db97d14a1050.png" alt="example1" style="max-width: 100%;"></a></p>
</article></div>