<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-matterpower" class="anchor" aria-hidden="true" href="#matterpower"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatterPower</h1>
<p>This package contains functions to compute</p>
<ol>
<li>Growth factor of the linear matter density fluctuation for ΛCDM cosmology</li>
<li>"No-wiggle" transfer function for the linear matter power spectrum</li>
<li>Non-linear matter power spectrum</li>
<li>Variance of the matter density fluctuation and its derivatives</li>
</ol>
<p>The package contains</p>
<ol>
<li>Linear growth factor</li>
</ol>
<ul>
<li><code>growth(Ωm, ΩΛ[, a1=1e-2])</code>: returns an interpolation function containing solutions of the linear matter density (δ) and velocity divergence (θ/H0) fields as a function of the scale factor, a</li>
</ul>
<ol start="2">
<li>Linear matter transfer function</li>
</ol>
<ul>
<li><code>t_nowiggle(k, ωm, fbaryon)</code>: returns a "no-wiggle transfer function", T0(k), from Equation (29-31) of <a href="https://iopscience.iop.org/article/10.1086/305424" rel="nofollow">Eisenstein and Hu, ApJ, 496, 605 (1998)</a></li>
</ul>
<ol start="3">
<li>Non-linear matter power spectrum</li>
</ol>
<ul>
<li><code>setup_halofit(pk)</code>: returns an array containing three variables <code>p=[kσ, neff, C]</code> defined in Equation (C6-C8) of <a href="https://academic.oup.com/mnras/article/341/4/1311/1038529" rel="nofollow">Smith et al., MNRAS, 341, 1311 (2003)</a></li>
<li><code>halofit(pk, p, Ωmz, k)</code>: returns a "halofit" non-linear matter power spectrum at a specified value of the comoving wavenuember <code>k</code> using <a href="https://academic.oup.com/mnras/article/341/4/1311/1038529" rel="nofollow">Smith et al.</a>'s method with the parameters given in Appendix of <a href="https://iopscience.iop.org/article/10.1088/0004-637X/761/2/152" rel="nofollow">Takahashi et al., ApJ, 761, 152 (2012)</a>
<ul>
<li>The terms proportional to (1+w) in Equation (A6, A7) of Takahashi et al. are not included in this function</li>
<li><strong>Limitation of halotfit</strong>: The halofit non-linear power spectrum does not capture smearing of the Baryon Acoustic Oscillation (BAO) due to non-linear evolution. You can see this clearly in the correlation function, whose peak is not smeared out but stays similar to the linear theory prediction. See <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/PlotCorrelationFunctions.jl">examples/PlotCorrelationFunctions.jl</a>.</li>
</ul>
</li>
</ul>
<ol start="4">
<li>Variance of the matter density fluctuation</li>
</ol>
<ul>
<li><code>sigma2(pk, R)</code>: returns variance of the matter density fluctuation, σ<sup>2</sup>, smoothed by a top-hat filter with radius <code>R</code></li>
<li><code>dsigma2dR(pk, R)</code>: returns a derivative of variance, dσ<sup>2</sup>/dR, with respect to a top-hat filter with radius <code>R</code></li>
<li><code>sigma2gaus(pk, R)</code>: returns variance of the matter density fluctuation, σ<sup>2</sup>, smoothed by a Gaussian filter with width <code>R</code></li>
<li><code>dsigma2gausdR(pk, R)</code>: returns a derivative of variance, dσ<sup>2</sup>/dR, with respect to a Gaussian filter with width <code>R</code></li>
<li><code>d2sigma2gausdR2(pk, R)</code>: returns a secon derivative of variance, d<sup>2</sup>σ<sup>2</sup>/dR<sup>2</sup>, with respect to a Gaussian filter with width <code>R</code></li>
</ul>
<h2><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arguments</h2>
<ul>
<li><code>Ωm::Real</code>: present-day total matter density parameter.</li>
<li><code>ΩΛ::Real</code>: present-day dark energy density parameter (for cosmological constant).</li>
<li><code>k::Real</code>: comoving wavenumber.</li>
<li><code>ωm::Real</code>: physical baryon density parameter, <code>ωm = Ωm h^2</code></li>
<li><code>fbaryon::Real</code>: baryon fraction,  <code>fbaryon = Ωb/Ωb</code>.</li>
<li><code>pk::Any</code>(k): a function which returns a linear matter power spectrum with the argument k being the comoving wavenumber. This can be an interpolation function constructed from tabulated data.</li>
<li><code>p::Array{T,1} where T &lt;: Real</code>: an array containing three variables [kσ, neff, C], which are obtained from <code>p = setup_halofit(pk)</code>.</li>
<li><code>Ωmz::Real</code>: matter density parameter at a given redshift z, e.g., <code>Ωmz = Ωm(1+z)^3 / [Ωm(1+z)^3 + Ωk(1+z)^2 + ΩΛ]</code>.</li>
<li><code>R::Real</code>: top-hat or Gaussian smoothing scale.</li>
</ul>
<h2><a id="user-content-optional-arguments" class="anchor" aria-hidden="true" href="#optional-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Optional Arguments</h2>
<ul>
<li><code>a1::Real</code>: initial scale factor for <code>setup_growth(Ωm, ΩΛ[, a1])</code>, at which the initial condition is set as δ(a1) = a1. The default value: <code>1e-2</code>.</li>
</ul>
<h2><a id="user-content-correlation-function-in-configuration-space" class="anchor" aria-hidden="true" href="#correlation-function-in-configuration-space"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Correlation Function in Configuration Space</h2>
<p>Fourier transform of the power spectrum is a two-point correlation function in configuration space, <code>ξ(R)</code>, where <code>R</code> is the comoving separation. If we ignore anisotropy in the power spectrum caused by, e.g., the effect of pecular velocity of galaxies, <code>ξ(R)</code> can be calculated from the isotropic power spectrum as</p>
<p>ξ(R) = (2π<sup>2</sup>)<sup>-1</sup> ∫<sub>0</sub><sup>∞</sup> dk k<sup>2</sup> P(k) sin(kR)/(kR) .</p>
<p>This integral is difficult to evaluate because of the oscillatory function <code>sin(kR)/(kR)</code>. Fortunately, a Julia function <code>quaddeo</code> available in <a href="https://github.com/machakann/DoubleExponentialFormulas.jl">DoubleExponentialFormulas.jl</a> can handle this integral. (Many thanks to <a href="https://github.com/machakann">machakann</a> for implementing this!) Here is an exmaple Julia code to compute the corrletion function. Also see <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/PlotCorrelationFunctions.jl">examples/PlotCorrelationFunctions.jl</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DoubleExponentialFormulas
# %% Define a function to return a power spectrum. See &quot;Example Juia code&quot; below for the example.
pk(k) = ...
# %% Compute ξ(R)
kmin, kmax = 1e-4, Inf # h/Mpc
R = 10.0 # Mpc/h
func(k) = k^2 * pk(k) * sin(k * R) / (k * R) / 2 / π^2
ξ, err = quaddeo(func, R, 0, kmin, kmax)
"><pre><span class="pl-k">using</span> DoubleExponentialFormulas
<span class="pl-c"><span class="pl-c">#</span> %% Define a function to return a power spectrum. See "Example Juia code" below for the example.</span>
<span class="pl-en">pk</span>(k) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-c"><span class="pl-c">#</span> %% Compute ξ(R)</span>
kmin, kmax <span class="pl-k">=</span> <span class="pl-c1">1e-4</span>, <span class="pl-c1">Inf</span> <span class="pl-c"><span class="pl-c">#</span> h/Mpc</span>
R <span class="pl-k">=</span> <span class="pl-c1">10.0</span> <span class="pl-c"><span class="pl-c">#</span> Mpc/h</span>
<span class="pl-en">func</span>(k) <span class="pl-k">=</span> k<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">pk</span>(k) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(k <span class="pl-k">*</span> R) <span class="pl-k">/</span> (k <span class="pl-k">*</span> R) <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">/</span> π<span class="pl-k">^</span><span class="pl-c1">2</span>
ξ, err <span class="pl-k">=</span> <span class="pl-c1">quaddeo</span>(func, R, <span class="pl-c1">0</span>, kmin, kmax)</pre></div>
<p>Alternatively, you can use Henry S. G. Gebhardt's <a href="https://github.com/hsgg/TwoFAST.jl">TwoFAST package</a>, which enables accurate and fast computations of the correlation functions. The plot comparing the results from <code>quaddeo</code> and TwoFAST's <code>xicalc</code> can be generated by <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/CompareToTwoFAST.jl">examples/CompareToTwoFAST.jl</a>.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>The linear matter power spectrum computed from the "no-wiggle" transfer function <code>t_nowiggle(k, ωm, fbaryon)</code> is not very accurate because it does not contain the Baryon Acoustic Oscillation (BAO) and it is a fitting function. If you need a very accurate linear matter power spectrum, you should use linear Boltzmann solvers such as <a href="https://github.com/cmbant/CAMB">CAMB</a> and <a href="https://github.com/lesgourg/class_public">CLASS</a>.</p>
<p>Nevertheless, if you exclude BAO, this linear matter power spectrum is reasonably accurate: it achieves precision better than 1.5% at all wavenumbers below k &lt; 10 h/Mpc for ΛCDM cosmology with the standard thermal history of the Universe and massless neutrinos. This is quite sufficient for many purposes in the cosmological research (unless you need BAO, of course). Therefore, you can calculate many quantities in your research with decent accuracy quickly using the functions given in this package.</p>
<p>Finding new, (hopefully) interesting problems is the hardest part of doing research. To explore new ideas, precision is often not needed; thus, you can use the functions given in this package to explore new ideas. Once you find interesting results that are worth exploring further with better precision, you can update your calculations with CAMB or CLASS.</p>
<p>Also, having a single, self-contained, simple and well-documented package should be useful for educational purposes. My hope is that beginning students would take a look at this package and gain insights into how the growth of linear density fluctuation and linear and non-linear matter power spectra are computed, before using public linear Boltzmann solvers as a black box.</p>
<p>Having said this, the non-linear matter power spectrum functions <code>setup_halofit(pk)</code> and <code>halofit(pk, p, Ωmz, k)</code> in this package can take any linear power spectrum inputs <code>pk</code> you wish; i.e, you do not have to use <code>t_nowiggle(k, ωm, fbaryon)</code>, but can supply linear power spectra computed from CAMB and CLASS.</p>
<h2><a id="user-content-how-the-linear-growth-factor-is-calculated" class="anchor" aria-hidden="true" href="#how-the-linear-growth-factor-is-calculated"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How the linear growth factor is calculated</h2>
<p>Growth of the linear matter density fluctuation, δ, is determined by three equations: (1) continuity, (2) Euler, and (3) Poisson equations.</p>
<ol>
<li>Continuity Equation, <code>δ' + θ = 0</code></li>
<li>Euler equation, <code>θ' + (a'/a)θ - k^2 ϕ = 0</code></li>
<li>Poisson equation, <code>k^2ϕ = -4πG a^2 ρm δ</code></li>
</ol>
<p>where θ = div(velocity), ϕ is the Newtonian gravitational potential, and the primes denote conformal time derivatives.</p>
<p>To solve these equations, we rewrite them using derivatives with respect to the scale factor, <code>a</code>.</p>
<ol>
<li><code>dδ/da = -θ/a^2/E(a)</code></li>
<li><code>dθ/da = -θ/a + q^2ϕ/a^2/E(a)</code></li>
<li><code>q^2ϕ = -(3/2)Ωm δ/a</code></li>
</ol>
<p>where</p>
<ul>
<li><code>θ = div(velocity)/H0</code></li>
<li><code>E(a) = H(a)/H0 = √(Ωm/a^3 + Ωk/a^2 + ΩΛ)</code></li>
<li><code>q = k/H0</code></li>
</ul>
<p>These equations are put in the form of a function <code>growth!(du, u, p, a)</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function growth!(du, u, p, a)
    δ, θ = u
    Ωm, ΩΛ = p
    Ωk = 1 - Ωm - ΩΛ
    E = √(Ωm / a^3 + Ωk / a^2 + ΩΛ) # E(a) = H(a)/H0
    k2ϕ = -(3 / 2) * Ωm * δ / a # Poisson equation
    du[1] = dδda = -θ / a^2 / E # Continuity equation
    du[2] = dθda = -θ / a + k2ϕ / a^2 / E # Euler equation
end
"><pre><span class="pl-k">function</span> <span class="pl-en">growth!</span>(du, u, p, a)
    δ, θ <span class="pl-k">=</span> u
    Ωm, ΩΛ <span class="pl-k">=</span> p
    Ωk <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> Ωm <span class="pl-k">-</span> ΩΛ
    E <span class="pl-k">=</span> <span class="pl-k">√</span>(Ωm <span class="pl-k">/</span> a<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> Ωk <span class="pl-k">/</span> a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> ΩΛ) <span class="pl-c"><span class="pl-c">#</span> E(a) = H(a)/H0</span>
    k2ϕ <span class="pl-k">=</span> <span class="pl-k">-</span>(<span class="pl-c1">3</span> <span class="pl-k">/</span> <span class="pl-c1">2</span>) <span class="pl-k">*</span> Ωm <span class="pl-k">*</span> δ <span class="pl-k">/</span> a <span class="pl-c"><span class="pl-c">#</span> Poisson equation</span>
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> dδda <span class="pl-k">=</span> <span class="pl-k">-</span>θ <span class="pl-k">/</span> a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> E <span class="pl-c"><span class="pl-c">#</span> Continuity equation</span>
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> dθda <span class="pl-k">=</span> <span class="pl-k">-</span>θ <span class="pl-k">/</span> a <span class="pl-k">+</span> k2ϕ <span class="pl-k">/</span> a<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> E <span class="pl-c"><span class="pl-c">#</span> Euler equation</span>
<span class="pl-k">end</span></pre></div>
<p>and solved by Julia's ODE solver as</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="prob = ODEProblem(growth!, u0, tspan, [Ωm, ΩΛ])
sol = solve(prob, Tsit5())
"><pre>prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(growth!, u0, tspan, [Ωm, ΩΛ])
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">Tsit5</span>())</pre></div>
<p>with</p>
<ul>
<li><code>du[1]</code> = dδ/da, <code>du[2]</code> = dθ/da</li>
<li><code>u[1]</code> = δ, <code>u[2]</code> = θ</li>
<li><code>p[1]</code> = Ωm, <code>p[2]</code> = ΩΛ</li>
<li><code>tspan = (a1, 1.0)</code> with <code>a1 = 0.01</code></li>
<li><code>u0 = [a1; -a1^2 * E(a1)]</code></li>
</ul>
<p>See <a href="https://github.com/SciML/OrdinaryDiffEq.jl">documentation</a> for how to use this ODE solver.</p>
<h2><a id="user-content-example-juia-code" class="anchor" aria-hidden="true" href="#example-juia-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Juia code</h2>
<p>The following example code (avaiable in <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/PowerSpectrum.jl">examples/PowerSpectrum.jl</a>) computes the linear growth factor, the linear and non-linear power spectra, the r.m.s. mass density fluctuation σ(R), and the non-linear mass M* defined by σ(M*) = 1.6865.</p>
<p>If you would like to generate a nice figure showing linear and non-linear P(k) as a function of k, take a look at <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/PlotPowerSpectrum.jl">examples/PlotPowerSpectrum.jl</a>.</p>
<p>To check accuracy of linear and non-linear power spectra computed from <code>t_nowiggle(k, ωm, fbaryon)</code> against those pre-computed by <a href="https://github.com/lesgourg/class_public">CLASS</a>, take a look at <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/ComparePowerSpectrum.jl">examples/ComparePowerSpectrum.jl</a>.</p>
<p>If you have the python wrapper for CLASS <a href="https://github.com/lesgourg/class_public/wiki/Python-wrapper">classy</a> installed already, you can use <a href="https://github.com/komatsu5147/MatterPower.jl/blob/master/examples/PlotCLASSPowerSpectrum.jl">examples/PlotCLASSPowerSpectrum.jl</a> to call <code>classy</code> via <code>PyCall</code>, compute linear and non-linear P(k), and generate a figure.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using MatterPower
using Roots

# %% Specify a redshift
redshift = 0

# %% Define a function to return a linear matter power spectrum (in units of Mpc^3/h^3)
# as a function of the comoving wavenumber, kovh, in units of h/Mpc.
# Here is an example using Einstein &amp; Hu's analytical transfer function

# Cosmological parameters
As, ns, kpivot = 2.097e-9, 0.9652, 0.05
Ωm, ΩΛ, Ωb = 0.315, 0.685, 0.049
Ωk = 1 - Ωm - ΩΛ
h0 = 0.674
ωm, fb = Ωm * h0^2, Ωb / Ωm

# Tabulate linear growth factor as a function of scale factor, a
sol = setup_growth(Ωm, ΩΛ)
a = 1 / (1 + redshift)
D1 = sol(a)[1]

pk(kovh) =
   D1^2 *
   As *
   (kovh * h0 / kpivot)^(ns - 1) *
   (2 * kovh^2 * 2998^2 / 5 / Ωm)^2 *
   t_nowiggle(kovh * h0, ωm, fb)^2 *
   2 *
   π^2 / kovh^3

# %% Alternatively you may read in pre-computed data and define a spline function
# using Dierckx
# pk = Spline1D(tabulated_kovh, tabulated_power_spectrum)

# %% Compute the r.m.s. mass fluctuation with a top-hat radius Rh
Rh = 8 # Mpc/h
σ2 = sigma2(pk, Rh)
println(&quot;σ(R) = &quot;, √σ2, &quot; for R = &quot;, Rh, &quot; Mpc/h&quot;)

# %% Compute the non-linear mass, M*, defined by σ(R*,z) = 1.6865
# and M* = (4π/3)ρm R*^3 = (4π/3)ρc Ωm R*^3
# ρc is the present-day critical density of the Universe in units of h^2 M⊙/Mpc^3
ρc = 2.775e11
f(x) = √sigma2(pk, x) - 1.6865
Rstar = find_zero(f, (1e-2, 1e2), Bisection())
println(&quot;R* = &quot;, Rstar, &quot; h/Mpc&quot;)
Mstar = 4π / 3 * ρc * Ωm * Rstar^3
println(&quot;Non-linear mass M* = &quot;, Mstar, &quot; M⊙/h&quot;)

# %% Compute the non-linear power spectrum using halofit
# Get three parameters [kσ, neff, C] needed for the halofit transform
p = kσ, neff, C = setup_halofit(pk)

# Calculate Ωm(z) = Ωm(z=0)(1+z)^3 / E^2(z), where E^2(z) = H^2(z) / H0^2
z = redshift
E2 = Ωm * (1 + z)^3 + Ωk * (1 + z)^2 + ΩΛ
Ωmz = Ωm * (1 + z)^3 / E2

# Define a function to return a halofit non-linear power spectrum
pknl(kovh) = halofit(pk, p, Ωmz, kovh) # Mpc^3/h^3

kovh = 1 # h/Mpc
println(&quot;k = &quot;, kovh, &quot; h/Mpc:&quot;)
println(&quot;Non-linear P(k) = &quot;, pknl(kovh), &quot; Mpc^3/h^3&quot;)
println(&quot;linear P(k) = &quot;, pk(kovh), &quot; Mpc^3/h^3&quot;)
"><pre><span class="pl-k">using</span> MatterPower
<span class="pl-k">using</span> Roots

<span class="pl-c"><span class="pl-c">#</span> %% Specify a redshift</span>
redshift <span class="pl-k">=</span> <span class="pl-c1">0</span>

<span class="pl-c"><span class="pl-c">#</span> %% Define a function to return a linear matter power spectrum (in units of Mpc^3/h^3)</span>
<span class="pl-c"><span class="pl-c">#</span> as a function of the comoving wavenumber, kovh, in units of h/Mpc.</span>
<span class="pl-c"><span class="pl-c">#</span> Here is an example using Einstein &amp; Hu's analytical transfer function</span>

<span class="pl-c"><span class="pl-c">#</span> Cosmological parameters</span>
As, ns, kpivot <span class="pl-k">=</span> <span class="pl-c1">2.097e-9</span>, <span class="pl-c1">0.9652</span>, <span class="pl-c1">0.05</span>
Ωm, ΩΛ, Ωb <span class="pl-k">=</span> <span class="pl-c1">0.315</span>, <span class="pl-c1">0.685</span>, <span class="pl-c1">0.049</span>
Ωk <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> Ωm <span class="pl-k">-</span> ΩΛ
h0 <span class="pl-k">=</span> <span class="pl-c1">0.674</span>
ωm, fb <span class="pl-k">=</span> Ωm <span class="pl-k">*</span> h0<span class="pl-k">^</span><span class="pl-c1">2</span>, Ωb <span class="pl-k">/</span> Ωm

<span class="pl-c"><span class="pl-c">#</span> Tabulate linear growth factor as a function of scale factor, a</span>
sol <span class="pl-k">=</span> <span class="pl-c1">setup_growth</span>(Ωm, ΩΛ)
a <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> redshift)
D1 <span class="pl-k">=</span> <span class="pl-c1">sol</span>(a)[<span class="pl-c1">1</span>]

<span class="pl-en">pk</span>(kovh) <span class="pl-k">=</span>
   D1<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span>
   As <span class="pl-k">*</span>
   (kovh <span class="pl-k">*</span> h0 <span class="pl-k">/</span> kpivot)<span class="pl-k">^</span>(ns <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span>
   (<span class="pl-c1">2</span> <span class="pl-k">*</span> kovh<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">2998</span><span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">5</span> <span class="pl-k">/</span> Ωm)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span>
   <span class="pl-c1">t_nowiggle</span>(kovh <span class="pl-k">*</span> h0, ωm, fb)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span>
   <span class="pl-c1">2</span> <span class="pl-k">*</span>
   π<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> kovh<span class="pl-k">^</span><span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> %% Alternatively you may read in pre-computed data and define a spline function</span>
<span class="pl-c"><span class="pl-c">#</span> using Dierckx</span>
<span class="pl-c"><span class="pl-c">#</span> pk = Spline1D(tabulated_kovh, tabulated_power_spectrum)</span>

<span class="pl-c"><span class="pl-c">#</span> %% Compute the r.m.s. mass fluctuation with a top-hat radius Rh</span>
Rh <span class="pl-k">=</span> <span class="pl-c1">8</span> <span class="pl-c"><span class="pl-c">#</span> Mpc/h</span>
σ2 <span class="pl-k">=</span> <span class="pl-c1">sigma2</span>(pk, Rh)
<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>σ(R) = <span class="pl-pds">"</span></span>, <span class="pl-k">√</span>σ2, <span class="pl-s"><span class="pl-pds">"</span> for R = <span class="pl-pds">"</span></span>, Rh, <span class="pl-s"><span class="pl-pds">"</span> Mpc/h<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> %% Compute the non-linear mass, M*, defined by σ(R*,z) = 1.6865</span>
<span class="pl-c"><span class="pl-c">#</span> and M* = (4π/3)ρm R*^3 = (4π/3)ρc Ωm R*^3</span>
<span class="pl-c"><span class="pl-c">#</span> ρc is the present-day critical density of the Universe in units of h^2 M⊙/Mpc^3</span>
ρc <span class="pl-k">=</span> <span class="pl-c1">2.775e11</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-k">√</span><span class="pl-c1">sigma2</span>(pk, x) <span class="pl-k">-</span> <span class="pl-c1">1.6865</span>
Rstar <span class="pl-k">=</span> <span class="pl-c1">find_zero</span>(f, (<span class="pl-c1">1e-2</span>, <span class="pl-c1">1e2</span>), <span class="pl-c1">Bisection</span>())
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>R* = <span class="pl-pds">"</span></span>, Rstar, <span class="pl-s"><span class="pl-pds">"</span> h/Mpc<span class="pl-pds">"</span></span>)
Mstar <span class="pl-k">=</span> <span class="pl-c1">4</span>π <span class="pl-k">/</span> <span class="pl-c1">3</span> <span class="pl-k">*</span> ρc <span class="pl-k">*</span> Ωm <span class="pl-k">*</span> Rstar<span class="pl-k">^</span><span class="pl-c1">3</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Non-linear mass M* = <span class="pl-pds">"</span></span>, Mstar, <span class="pl-s"><span class="pl-pds">"</span> M⊙/h<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> %% Compute the non-linear power spectrum using halofit</span>
<span class="pl-c"><span class="pl-c">#</span> Get three parameters [kσ, neff, C] needed for the halofit transform</span>
p <span class="pl-k">=</span> kσ, neff, C <span class="pl-k">=</span> <span class="pl-c1">setup_halofit</span>(pk)

<span class="pl-c"><span class="pl-c">#</span> Calculate Ωm(z) = Ωm(z=0)(1+z)^3 / E^2(z), where E^2(z) = H^2(z) / H0^2</span>
z <span class="pl-k">=</span> redshift
E2 <span class="pl-k">=</span> Ωm <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> z)<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> Ωk <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> z)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> ΩΛ
Ωmz <span class="pl-k">=</span> Ωm <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> z)<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">/</span> E2

<span class="pl-c"><span class="pl-c">#</span> Define a function to return a halofit non-linear power spectrum</span>
<span class="pl-en">pknl</span>(kovh) <span class="pl-k">=</span> <span class="pl-c1">halofit</span>(pk, p, Ωmz, kovh) <span class="pl-c"><span class="pl-c">#</span> Mpc^3/h^3</span>

kovh <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> h/Mpc</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>k = <span class="pl-pds">"</span></span>, kovh, <span class="pl-s"><span class="pl-pds">"</span> h/Mpc:<span class="pl-pds">"</span></span>)
<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Non-linear P(k) = <span class="pl-pds">"</span></span>, <span class="pl-c1">pknl</span>(kovh), <span class="pl-s"><span class="pl-pds">"</span> Mpc^3/h^3<span class="pl-pds">"</span></span>)
<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>linear P(k) = <span class="pl-pds">"</span></span>, <span class="pl-c1">pk</span>(kovh), <span class="pl-s"><span class="pl-pds">"</span> Mpc^3/h^3<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-acknowledgment" class="anchor" aria-hidden="true" href="#acknowledgment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgment</h2>
<p>The functions provided in this package are adapted from <a href="https://wwwmpa.mpa-garching.mpg.de/~komatsu/crl/" rel="nofollow">Cosmology Routine Library (CRL)</a>, which is based upon work supported in part by NSF under Grant AST-0807649 and PHY-0758153, NASA under Grant NNX08AL43G, and Alfred P. Sloan Research Foundation via a Sloan Fellowship. This work is also supported in part by JSPS KAKENHI Grant Number JP15H05896.</p>
</article></div>