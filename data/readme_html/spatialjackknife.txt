<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.com/kilianbreathnach/SpatialJackknife.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4e7e8cd5d29a2877a3a63e4ff2bad258af8b2f7725de03e97232b357ffcaeb4/68747470733a2f2f7472617669732d63692e636f6d2f6b696c69616e6272656174686e6163682f5370617469616c4a61636b6b6e6966652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/kilianbreathnach/SpatialJackknife.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-spatialjackknifejl" class="anchor" aria-hidden="true" href="#spatialjackknifejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SpatialJackknife.jl</h1>
<p>This package can be used to perform jackknife resampling on spatial data in an arbitrary number of dimensions
with arbitrary geometry. It exports two function <code>get_subvols</code>, for assigning jackknife subvolumes to the data
points, and <code>jackknife</code> for performing jackknife estimation of the mean and variance of a given estimator function.
An example of how to use this code with SDSS data can be found in the <code>notebooks</code> directory. To run this, however,
you will have to download the data separately.</p>
<p><code>get_subvols</code> has two methods which can be used for data that is either distributed in a regular cubic volume or
distributed in a more complex geometry for which you must provide a set of randomly distributed points that define
the geometry:</p>
<ol>
<li>Regular cubic geometry</li>
</ol>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="get_subvols(data::Array{Float64, 2};
            side_divs::Int = 3,
            edges::Array{Array{Float64, 1}, 1} = Array{Array{Float64, 1}, 1}(undef, 0))
"><pre><code>get_subvols(data::Array{Float64, 2};
            side_divs::Int = 3,
            edges::Array{Array{Float64, 1}, 1} = Array{Array{Float64, 1}, 1}(undef, 0))
</code></pre></div>
<ul>
<li><code>data</code> is a 2-dimensional array of shape (N, ndims)</li>
<li>'side_divs' is the number of volumes per dimension to divide the data into</li>
<li>'edges' can be given either as the extrema in each dimension or just once and taken as the extrema for all dimensions</li>
</ul>
<ol start="2">
<li>Arbitrary geometry defined by random points</li>
</ol>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="get_subvols(data::Array{Float64, 2},
            randmask::Array{Float64, 2},
            side_divs::Int,
            metric::Metric = Euclidean())::Array{Int, 1}
"><pre><code>get_subvols(data::Array{Float64, 2},
            randmask::Array{Float64, 2},
            side_divs::Int,
            metric::Metric = Euclidean())::Array{Int, 1}
</code></pre></div>
<ul>
<li><code>data</code> is a 2-D array as above</li>
<li><code>randmask</code> is a 2-D array with the same number of dimensions defining the geometry of your dataset</li>
<li><code>side_divs</code> is the number of volumes per dimension to subdivide the sample into</li>
<li><code>metric</code> is an optional parameter to define the distance between points, assumed to be Euclidean</li>
</ul>
<h3><a id="user-content-jackknifing" class="anchor" aria-hidden="true" href="#jackknifing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Jackknifing</h3>
<p>Once the subvolumes have been determined, the 'jackknife' function can be used to find the mean and covariance
of your desired estimator:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="jackknife(obsfunc::Function,
          data::Array{Float64, 2},
          subvolinds::Array{Int, 1},
          args::Tuple = ();
          covar::Bool = true)
"><pre><code>jackknife(obsfunc::Function,
          data::Array{Float64, 2},
          subvolinds::Array{Int, 1},
          args::Tuple = ();
          covar::Bool = true)
</code></pre></div>
<ul>
<li>
<p>'obsfunc' is a function that computes your estimator and takes the form</p>
<p>obsfunc(data, args...)</p>
</li>
</ul>
<ul>
<li>'subvolinds' is an integer array of subvolume indices that has the same length as the number of data points
and is returned by 'get_subvols'</li>
<li>'args' is an optional tuple of other arguments to pass to your estimator function</li>
<li>'covar' is a boolean that determines whether a full covariance matrix is computed (for 'true') for multidimensional
estimators, or just the diagonals ('false')</li>
</ul>
</article></div>