<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gillespiejl" class="anchor" aria-hidden="true" href="#gillespiejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Gillespie.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/sdwfrost/Gillespie.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d4a9354deb10c4ee9263f001d0531f2bde04c1887a8b5a07369f49b86fa630ae/68747470733a2f2f7472617669732d63692e6f72672f73647766726f73742f47696c6c65737069652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sdwfrost/Gillespie.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/sdwfrost/Gillespie.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/24a23b8840f78974a244ae432b4930103cb44e6d8397f01270be7108877da0f3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73647766726f73742f47696c6c65737069652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sdwfrost/Gillespie.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Gillespie" rel="nofollow"><img src="https://camo.githubusercontent.com/63ea2acaf4e0c0a20e833ec1ba9b38f31907ec3e60e08aa7c50f898afa884b7a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47696c6c65737069655f302e342e737667" alt="Gillespie" data-canonical-src="http://pkg.julialang.org/badges/Gillespie_0.4.svg" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Gillespie" rel="nofollow"><img src="https://camo.githubusercontent.com/8c19bfce457a81b66f32f8b9a21efdc065a990a1e82e64327a25a82d36d0826d/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f47696c6c65737069655f302e352e737667" alt="Gillespie" data-canonical-src="http://pkg.julialang.org/badges/Gillespie_0.5.svg" style="max-width: 100%;"></a>
<a href="https://sdwfrost.github.io/Gillespie.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://sdwfrost.github.io/Gillespie.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://waffle.io/sdwfrost/Gillespie.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/911c41450aeb8220e19d94b3b3d9469b68eed3cdf95fffdecf004f65eccde496/68747470733a2f2f62616467652e776166666c652e696f2f73647766726f73742f47696c6c65737069652e6a6c2e706e673f6c6162656c3d7265616479267469746c653d5265616479" alt="Stories in Ready" data-canonical-src="https://badge.waffle.io/sdwfrost/Gillespie.jl.png?label=ready&amp;title=Ready" style="max-width: 100%;"></a>
<a href="http://joss.theoj.org/papers/3cfdd80b93a9123b173e9617c1e6a238" rel="nofollow"><img src="https://camo.githubusercontent.com/733ff73266a1819a646791f03cfe86b139f4127395f6a91a41900758dfc7c525/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f33636664643830623933613931323362313733653936313763316536613233382f7374617475732e737667" alt="status" data-canonical-src="http://joss.theoj.org/papers/3cfdd80b93a9123b173e9617c1e6a238/status.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/23574/sdwfrost/Gillespie.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cdfce92b494095bf09b826cfb382e30a452b9bac0b06dc78a28d5a36cfa8fe48/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f32333537342f73647766726f73742f47696c6c65737069652e6a6c2e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/23574/sdwfrost/Gillespie.jl.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://waffle.io/sdwfrost/Gillespie.jl/metrics/throughput" rel="nofollow"><img src="https://camo.githubusercontent.com/2d394fca2856ed942bbe75015c85a5b87d8e64e17ebe66c6f7fc0efd114ca630/68747470733a2f2f6772617068732e776166666c652e696f2f73647766726f73742f47696c6c65737069652e6a6c2f7468726f7567687075742e737667" alt="Throughput Graph" data-canonical-src="https://graphs.waffle.io/sdwfrost/Gillespie.jl/throughput.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-statement-of-need" class="anchor" aria-hidden="true" href="#statement-of-need"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Statement of need</h2>
<p dir="auto">This is an implementation of <a href="http://en.wikipedia.org/wiki/Gillespie_algorithm" rel="nofollow">Gillespie's direct method</a> as well as <a href="https://en.wikipedia.org/wiki/Uniformization_(probability_theory)" rel="nofollow">uniformization/Jensen's method</a> for performing stochastic simulations, which are widely used in many fields, including systems biology and epidemiology. It borrows the basic interface (although none of the code) from the R library <a href="http://www.jstatsoft.org/v25/i12/paper" rel="nofollow"><code>GillespieSSA</code></a> by Mario Pineda-Krch, although <code>Gillespie.jl</code> only implements exact methods at present, whereas <code>GillespieSSA</code> also includes tau-leaping, <em>etc.</em>. It is intended to offer performance on par with hand-coded C code; please file an issue if you find an example that is significantly slower (2 to 5 times) than C.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The stable release of <code>Gillespie.jl</code> can be installed from the Julia REPL using the following command.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Gillespie&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Gillespie<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The development version from this repository can be installed as follows.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;https://github.com/sdwfrost/Gillespie.jl&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/sdwfrost/Gillespie.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">An example of a <a href="https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SIR_model_without_vital_dynamics" rel="nofollow">susceptible-infected-recovered (SIR) epidemiological model</a> is as follows.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Gillespie
using Gadfly
using Random

function F(x,parms)
  (S,I,R) = x
  (beta,gamma) = parms
  infection = beta*S*I
  recovery = gamma*I
  [infection,recovery]
end

x0 = [999,1,0]
nu = [[-1 1 0];[0 -1 1]]
parms = [0.1/1000.0,0.01]
tf = 250.0
Random.seed!(1234)

result = ssa(x0,F,nu,parms,tf)

data = ssa_data(result)

plot_theme = Theme(
    panel_fill=colorant&quot;white&quot;,
    default_color=colorant&quot;black&quot;
)
p=plot(data,
    layer(x=:time,y=:x1,Geom.step,Theme(default_color=colorant&quot;red&quot;)),
    layer(x=:time,y=:x2,Geom.step,Theme(default_color=colorant&quot;orange&quot;)),
    layer(x=:time,y=:x3,Geom.step,Theme(default_color=colorant&quot;blue&quot;)),
    Guide.xlabel(&quot;Time&quot;),
    Guide.ylabel(&quot;Number&quot;),
    Guide.title(&quot;SSA simulation&quot;),
    Guide.manual_color_key(&quot;Subpopulation&quot;,[&quot;S&quot;,&quot;I&quot;,&quot;R&quot;],[&quot;red&quot;,&quot;orange&quot;,&quot;blue&quot;]),
    plot_theme
)"><pre><span class="pl-k">using</span> Gillespie
<span class="pl-k">using</span> Gadfly
<span class="pl-k">using</span> Random

<span class="pl-k">function</span> <span class="pl-en">F</span>(x,parms)
  (S,I,R) <span class="pl-k">=</span> x
  (beta,gamma) <span class="pl-k">=</span> parms
  infection <span class="pl-k">=</span> beta<span class="pl-k">*</span>S<span class="pl-k">*</span>I
  recovery <span class="pl-k">=</span> gamma<span class="pl-k">*</span>I
  [infection,recovery]
<span class="pl-k">end</span>

x0 <span class="pl-k">=</span> [<span class="pl-c1">999</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>]
nu <span class="pl-k">=</span> [[<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span>];[<span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span>]]
parms <span class="pl-k">=</span> [<span class="pl-c1">0.1</span><span class="pl-k">/</span><span class="pl-c1">1000.0</span>,<span class="pl-c1">0.01</span>]
tf <span class="pl-k">=</span> <span class="pl-c1">250.0</span>
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1234</span>)

result <span class="pl-k">=</span> <span class="pl-c1">ssa</span>(x0,F,nu,parms,tf)

data <span class="pl-k">=</span> <span class="pl-c1">ssa_data</span>(result)

plot_theme <span class="pl-k">=</span> <span class="pl-c1">Theme</span>(
    panel_fill<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>white<span class="pl-pds">"</span></span>,
    default_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>black<span class="pl-pds">"</span></span>
)
p<span class="pl-k">=</span><span class="pl-c1">plot</span>(data,
    <span class="pl-c1">layer</span>(x<span class="pl-k">=</span><span class="pl-c1">:time</span>,y<span class="pl-k">=</span><span class="pl-c1">:x1</span>,Geom<span class="pl-k">.</span>step,<span class="pl-c1">Theme</span>(default_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>red<span class="pl-pds">"</span></span>)),
    <span class="pl-c1">layer</span>(x<span class="pl-k">=</span><span class="pl-c1">:time</span>,y<span class="pl-k">=</span><span class="pl-c1">:x2</span>,Geom<span class="pl-k">.</span>step,<span class="pl-c1">Theme</span>(default_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>orange<span class="pl-pds">"</span></span>)),
    <span class="pl-c1">layer</span>(x<span class="pl-k">=</span><span class="pl-c1">:time</span>,y<span class="pl-k">=</span><span class="pl-c1">:x3</span>,Geom<span class="pl-k">.</span>step,<span class="pl-c1">Theme</span>(default_color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>blue<span class="pl-pds">"</span></span>)),
    Guide<span class="pl-k">.</span><span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Time<span class="pl-pds">"</span></span>),
    Guide<span class="pl-k">.</span><span class="pl-c1">ylabel</span>(<span class="pl-s"><span class="pl-pds">"</span>Number<span class="pl-pds">"</span></span>),
    Guide<span class="pl-k">.</span><span class="pl-c1">title</span>(<span class="pl-s"><span class="pl-pds">"</span>SSA simulation<span class="pl-pds">"</span></span>),
    Guide<span class="pl-k">.</span><span class="pl-c1">manual_color_key</span>(<span class="pl-s"><span class="pl-pds">"</span>Subpopulation<span class="pl-pds">"</span></span>,[<span class="pl-s"><span class="pl-pds">"</span>S<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>I<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>R<span class="pl-pds">"</span></span>],[<span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>]),
    plot_theme
)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/sdwfrost/Gillespie.jl/blob/master/sir.png"><img src="https://github.com/sdwfrost/Gillespie.jl/raw/master/sir.png" alt="SIR" style="max-width: 100%;"></a></p>
<p dir="auto">Julia versions of the examples used in <a href="http://www.jstatsoft.org/v25/i12/paper" rel="nofollow"><code>GillespieSSA</code></a> are given in the <a href="https://github.com/sdwfrost/Gillespie.jl/blob/master/examples">examples</a> directory.</p>
<h2 dir="auto"><a id="user-content-jensens-method-or-uniformization" class="anchor" aria-hidden="true" href="#jensens-method-or-uniformization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Jensen's method or uniformization</h2>
<p dir="auto">The development version of <code>Gillespie.jl</code> includes code to simulate via uniformization (a.k.a. Jensen's method); the API is the same as for the SSA, with the addition of <strong>max_rate</strong>, the maximum rate (<code>Float64</code>). Optionally, another argument, <strong>thin</strong> (<code>Bool</code>), can be set to <code>false</code> to return all the jumps (including the fictitious ones), and saves a bit of time by pre-allocating the time vector. This code is under development at present, and may change. Time-varying rates can be accommodated by passing a rate function with three arguments, <code>F(x,parms,t)</code>, where <code>x</code> is the discrete state, <code>parms</code> are the parameters, and <code>t</code> is the simulation time.</p>
<h2 dir="auto"><a id="user-content-the-true-jump-method" class="anchor" aria-hidden="true" href="#the-true-jump-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The true jump method</h2>
<p dir="auto">The development version of <code>Gillespie.jl</code> also includes code to simulate assuming time-varying rates via the true jump method; the API is the same as for the SSA, with the exception that the rate function must have three arguments, as described above.</p>
<h2 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h2>
<p dir="auto">The speed of an SIR model in <code>Gillespie.jl</code> was compared to:</p>
<ul dir="auto">
<li>A version using the R package <code>GillespieSSA</code></li>
<li>Handcoded versions of the SIR model in Julia, R, and Rcpp</li>
<li><a href="https://docs.sciml.ai/latest/" rel="nofollow">DifferentialEquations.jl's</a> jump interface.</li>
</ul>
<p dir="auto">1000 simulations were performed, and the time per simulation computed (lower is better). Benchmarks were run on a Mac Pro (Late 2013), with 3 Ghz 8-core Intel Xeon E3, 64GB 1866 Mhz RAM, running OSX v 10.11.3 (El Capitan), using Julia v0.4.5 and R v.3.3. Jupyter notebooks for <a href="https://gist.github.com/sdwfrost/8a0e926a5e16d7d104bd2bc1a5f9ed0b">Julia</a> and <a href="https://gist.github.com/sdwfrost/afed3b881ef5742623b905a539197c7a">R</a> with the code and benchmarks are available as gists. A plain Julia file is also provided <a href="https://github.com/sdwfrost/Gillespie.jl/blob/master/benchmarks/sir-jl-benchmark.jl">in the benchmarks subdirectory</a> for ease of benchmarking locally.</p>
<table>
<thead>
<tr>
<th>Implementation</th>
<th>Time per simulation (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td>R (GillespieSSA)</td>
<td>463</td>
</tr>
<tr>
<td>R (handcoded)</td>
<td>785</td>
</tr>
<tr>
<td>Rcpp (handcoded)</td>
<td>1.40</td>
</tr>
<tr>
<td>Julia (Gillespie.jl)</td>
<td>1.69</td>
</tr>
<tr>
<td>Julia (Gillespie.jl, Static)</td>
<td>0.89</td>
</tr>
<tr>
<td>Julia (DifferentialEquations.jl)</td>
<td>1.14</td>
</tr>
<tr>
<td>Julia (DifferentialEquations.jl, Static)</td>
<td>0.72</td>
</tr>
<tr>
<td>Julia (handcoded)</td>
<td>0.49</td>
</tr>
</tbody>
</table>
<p dir="auto">(smaller is better)</p>
<p dir="auto">Julia performance for <code>Gillespie.jl</code> is much better than <code>GillespieSSA</code>, and close to a handcoded version in Julia (which is itself comparable to Rcpp); as compiler performance improves, the gap in performance should narrow.</p>
<h2 dir="auto"><a id="user-content-future-work" class="anchor" aria-hidden="true" href="#future-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Future work</h2>
<p dir="auto"><code>Gillespie.jl</code> is under development, and pull requests are welcome. Future enhancements include:</p>
<ul dir="auto">
<li>Constrained simulations (where events are forced to occur at specific times)</li>
<li>Discrete time simulation</li>
</ul>
<h2 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h2>
<p dir="auto">If you use <code>Gillespie.jl</code> in a publication, please cite the following.</p>
<ul dir="auto">
<li>Frost, Simon D.W. (2016) Gillespie.jl: Stochastic Simulation Algorithm in Julia. <em>Journal of Open Source Software</em> 1(3) doi:0.21105/joss.00042</li>
</ul>
<p dir="auto">A Bibtex entry can be found <a href="http://www.doi2bib.org/#/doi/10.21105/joss.00042" rel="nofollow">here</a>.</p>
</article></div>