<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-vtufilehandlerjl" class="anchor" aria-hidden="true" href="#vtufilehandlerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VTUFileHandler.jl</h1>
<p dir="auto">A VTU library in the Julia language that implements an algebra for basic mathematical operations on VTU data.</p>
<p dir="auto"><a href="https://baxmittens.github.io/VTUFileHandler.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/baxmittens/VTUFileHandler.jl/actions/workflows/CI.yml"><img src="https://github.com/baxmittens/VTUFileHandler.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://doi.org/10.21105/joss.04300" rel="nofollow"><img src="https://camo.githubusercontent.com/15f3938b8caad1de234711b5296cb9b6e32c13a4a249a19abb8039f0c9c865d1/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30343330302f7374617475732e737667" alt="DOI" data-canonical-src="https://joss.theoj.org/papers/10.21105/joss.04300/status.svg" style="max-width: 100%;"></a></p>
<p dir="auto">See the <a href="https://baxmittens.github.io/VTUFileHandler.jl/dev/" rel="nofollow">documentation</a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">With increasing computing resources, investigating uncertainties in simulation results is becoming an increasingly important factor. A discrete numerical simulation is computed several times with different deviations of the input parameters to produce different outputs of the same model to analyze those effects. The relevant stochastic or parametric output variables, such as mean, expected value, and variance, are often calculated and visualized only at selected individual points of the whole domain. This project aims to provide a simple way to perform stochastic/parametric post-processing of numerical simulations on entire domains using the <a href="https://vtk.org/" rel="nofollow">VTK unstructured grid</a> (VTU) <a href="https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf" rel="nofollow">file system</a> and the Julia language as an example.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;VTUFileHandler&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>VTUFileHandler<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-preliminaries" class="anchor" aria-hidden="true" href="#preliminaries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Preliminaries</h2>
<p dir="auto">The VTUFileHandler will eventually be used to perform stochastic post-processing on large VTU result files. Therefore, the following assumptions have to be fulfilled for the software to work correctly:</p>
<ol dir="auto">
<li>The VTU file must be in binary format and, in addition, can be Zlib compressed.</li>
<li>Operators can only be applied to VTU files sharing the same topology. The user must ensure that this condition is met.</li>
<li>The data type of numerical fields of the VTU file, for which operators should be applied, have to be <code>Float64</code>.</li>
</ol>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The VTUFileHandler implements a basic VTU reader and writer through the functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function VTUFile(file::String) ... end 
function Base.write(vtu::VTUFile, add_timestamp=true) ... end"><pre><span class="pl-k">function</span> <span class="pl-en">VTUFile</span>(file<span class="pl-k">::</span><span class="pl-c1">String</span>) <span class="pl-k">...</span> <span class="pl-k">end</span> 
<span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">write</span>(vtu<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, add_timestamp<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">...</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">By default, a timestamp is added if VTU files are written to disk not to overwrite existing files. Only data fields that are registered by the function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function set_uncompress_keywords(uk::Vector{String}) ... end"><pre><span class="pl-k">function</span> <span class="pl-en">set_uncompress_keywords</span>(uk<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>) <span class="pl-k">...</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">before reading the VTU file are uncompressed and can be altered. For applying math operators onto a data field, the associated field has to be registered by the function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function set_interpolation_keywords(ik::Vector{String}) ... end"><pre><span class="pl-k">function</span> <span class="pl-en">set_interpolation_keywords</span>(ik<span class="pl-k">::</span><span class="pl-c1">Vector{String}</span>) <span class="pl-k">...</span> <span class="pl-k">end</span></pre></div>
<p dir="auto">The following math operators are implemented:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="+(::VTUFile, ::VTUFile),+(::VTUFile, ::Number),
-(::VTUFile, ::VTUFile),-(::VTUFile, ::Number),
*(::VTUFile, ::VTUFile),*(::VTUFile, ::Number),
/(::VTUFile, ::VTUFile),/(::VTUFile, ::Number),
^(::VTUFile, ::Number)"><pre><span class="pl-k">+</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">VTUFile</span>),<span class="pl-k">+</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">Number</span>),
<span class="pl-k">-</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">VTUFile</span>),<span class="pl-k">-</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">Number</span>),
<span class="pl-k">*</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">VTUFile</span>),<span class="pl-k">*</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">Number</span>),
<span class="pl-k">/</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">VTUFile</span>),<span class="pl-k">/</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">Number</span>),
<span class="pl-k">^</span>(<span class="pl-k">::</span><span class="pl-c1">VTUFile</span>, <span class="pl-k">::</span><span class="pl-c1">Number</span>)</pre></div>
<p dir="auto">In-place variations of the operators above are implemented as well.</p>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<p dir="auto">A three-dimensional cube with dimension (x,y,z) with 0&lt;=x,y,z&lt;=2 discretized by quadrilian elements with 27 points and 8 cells named <a href="./test/vox8.vtu"><code>vox8.vtu</code></a> with a linear ramp in x-direction (f(x=0,y,z)=0, f(x=2,y,z)=0.8) as a result field termed <code>xramp</code> will be used as an example. The following set of instructions transform the result field from a linear ramp to a quadratic function in x-direction (displayed as a piecewise linear field due to the discretization):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using VTUFileHandler
set_uncompress_keywords([&quot;xRamp&quot;]) # uncompress data field xramp
set_interpolation_keywords([&quot;xRamp&quot;]) # apply math operators to xramp
vtu = VTUFile(&quot;vox8.vtu&quot;); # read the vtu
vtu += vtu/4; # [0.0,...,0.8] -&gt; [0.0,...,1.0]
vtu *= 4.0; # [0,...,1.0] -&gt; [0.0,...,4.0]
vtu -= 2.0; # [0,...,4.0] -&gt; [-2.0,...,2.0]
vtu ^= 2.0; # [-2.0,...,2.0] -&gt; [4.0,...,0.0,...,4.0]
rename!(vtu, ”vox8_1.vtu”)
write(vtu)"><pre><span class="pl-k">using</span> VTUFileHandler
<span class="pl-c1">set_uncompress_keywords</span>([<span class="pl-s"><span class="pl-pds">"</span>xRamp<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> uncompress data field xramp</span>
<span class="pl-c1">set_interpolation_keywords</span>([<span class="pl-s"><span class="pl-pds">"</span>xRamp<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> apply math operators to xramp</span>
vtu <span class="pl-k">=</span> <span class="pl-c1">VTUFile</span>(<span class="pl-s"><span class="pl-pds">"</span>vox8.vtu<span class="pl-pds">"</span></span>); <span class="pl-c"><span class="pl-c">#</span> read the vtu</span>
vtu <span class="pl-k">+=</span> vtu<span class="pl-k">/</span><span class="pl-c1">4</span>; <span class="pl-c"><span class="pl-c">#</span> [0.0,...,0.8] -&gt; [0.0,...,1.0]</span>
vtu <span class="pl-k">*=</span> <span class="pl-c1">4.0</span>; <span class="pl-c"><span class="pl-c">#</span> [0,...,1.0] -&gt; [0.0,...,4.0]</span>
vtu <span class="pl-k">-=</span> <span class="pl-c1">2.0</span>; <span class="pl-c"><span class="pl-c">#</span> [0,...,4.0] -&gt; [-2.0,...,2.0]</span>
vtu <span class="pl-k">^=</span> <span class="pl-c1">2.0</span>; <span class="pl-c"><span class="pl-c">#</span> [-2.0,...,2.0] -&gt; [4.0,...,0.0,...,4.0]</span>
<span class="pl-c1">rename!</span>(vtu, ”vox8_1<span class="pl-k">.</span>vtu”)
<span class="pl-c1">write</span>(vtu)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="xramp1.PNG"><img src="xramp1.PNG" alt="Cube with initial result field (left). Cube with manipulated result field (right). Rendered with Paraview\label{fig:1}" style="max-width: 100%;"></a>.</p>
<h2 dir="auto"><a id="user-content-contributions-report-bugs-and-support" class="anchor" aria-hidden="true" href="#contributions-report-bugs-and-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributions, report bugs and support</h2>
<p dir="auto">Contributions to or questions about this project are welcome. Feel free to create a issue or a pull request on <a href="https://github.com/baxmittens/VTUFileHandler.jl">GitHub</a>.</p>
</article></div>