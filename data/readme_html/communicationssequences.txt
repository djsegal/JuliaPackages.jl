<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-communicationssequences" class="anchor" aria-hidden="true" href="#communicationssequences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CommunicationsSequences</h1>
<p dir="auto">This Julia package provides functions to generate data sequences that are
frequently used in digital communications.</p>
<h3 dir="auto"><a id="user-content-roadmap-to-v10" class="anchor" aria-hidden="true" href="#roadmap-to-v10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roadmap to v1.0</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Linear shift-register sequences</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Barker sequences</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Golay complementary sequences</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Zadoff-Chu sequences</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Frank sequences</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Other sequences?</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Expand documentation</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Improve tests</li>
</ul>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<h4 dir="auto"><a id="user-content-generate-a-linear-shift-register-sequence" class="anchor" aria-hidden="true" href="#generate-a-linear-shift-register-sequence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generate a linear-shift register sequence</h4>
<p dir="auto">LFSR sequences are implemented as stateful, infinite iterators. The sequence is defined by the
feedback taps, specified in Fibonacci notation, from largest to smallest degree. The package
pre-defines feedback taps for maximum-length sequences of degrees 2 to 24. While the LFSR
produces boolean output by default, it is possible to define arbitrary outputs.</p>
<p dir="auto">Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Instantiate an LFSR iterator with taps (10, 7, 5)
l = LFSR((10, 7, 5))

# Instantiate a maximum-length LFSR iterator with period 2^16-1
l = LFSR(lfsrtaps[16])

# Specify the outputs to be 1.0 and -1.0
l = LFSR(lfsrtaps[16], mapping = (1.0, -1.0))

# Obtain the first 20 values of the sequence
first(l, 20)

# Obtain the next 20 values -- recall that the iterator is stateful
first(l, 20)"><pre><span class="pl-c"><span class="pl-c">#</span> Instantiate an LFSR iterator with taps (10, 7, 5)</span>
l <span class="pl-k">=</span> <span class="pl-c1">LFSR</span>((<span class="pl-c1">10</span>, <span class="pl-c1">7</span>, <span class="pl-c1">5</span>))

<span class="pl-c"><span class="pl-c">#</span> Instantiate a maximum-length LFSR iterator with period 2^16-1</span>
l <span class="pl-k">=</span> <span class="pl-c1">LFSR</span>(lfsrtaps[<span class="pl-c1">16</span>])

<span class="pl-c"><span class="pl-c">#</span> Specify the outputs to be 1.0 and -1.0</span>
l <span class="pl-k">=</span> <span class="pl-c1">LFSR</span>(lfsrtaps[<span class="pl-c1">16</span>], mapping <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>))

<span class="pl-c"><span class="pl-c">#</span> Obtain the first 20 values of the sequence</span>
<span class="pl-c1">first</span>(l, <span class="pl-c1">20</span>)

<span class="pl-c"><span class="pl-c">#</span> Obtain the next 20 values -- recall that the iterator is stateful</span>
<span class="pl-c1">first</span>(l, <span class="pl-c1">20</span>)</pre></div>
<p dir="auto">The iterator is quite fast. On an IceLake i5 laptop:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools
l = LFSR(lfsrtaps[16], mapping = (1.0, -1.0))
@btime iterate($l, nothing)"><pre><span class="pl-k">using</span> BenchmarkTools
l <span class="pl-k">=</span> <span class="pl-c1">LFSR</span>(lfsrtaps[<span class="pl-c1">16</span>], mapping <span class="pl-k">=</span> (<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>))
<span class="pl-c1">@btime</span> <span class="pl-c1">iterate</span>(<span class="pl-k">$</span>l, <span class="pl-c1">nothing</span>)</pre></div>
<p dir="auto">results in</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  15.192 ns (0 allocations: 0 bytes)"><pre>  <span class="pl-c1">15.192</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<p dir="auto">or almost 66 million iterations per second.</p>
<h4 dir="auto"><a id="user-content-barker-sequences" class="anchor" aria-hidden="true" href="#barker-sequences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Barker sequences</h4>
<p dir="auto">Barker sequences (or "codes"), being quite short, are provided as tuples that can be
accessed from a dictionary. For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="barker[&quot;7&quot;]"><pre>barker[<span class="pl-s"><span class="pl-pds">"</span>7<span class="pl-pds">"</span></span>]</pre></div>
<p dir="auto">returns the tuple</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(1, 1, 1, -1, -1, 1, -1)"><pre>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)</pre></div>
<p dir="auto">The full list of sequences and their keys is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    &quot;2a&quot; =&gt; (1, 1)
    &quot;2b&quot; =&gt; (1, -1)
    &quot;3&quot;  =&gt; (1, 1, -1)
    &quot;4a&quot; =&gt; (1, 1, -1, 1)
    &quot;4b&quot; =&gt; (1, 1, 1, -1)
    &quot;5&quot;  =&gt; (1, 1, 1, -1, 1)
    &quot;7&quot;  =&gt; (1, 1, 1, -1, -1, 1, -1)
    &quot;11&quot; =&gt; (1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1)
    &quot;13&quot; =&gt; (1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1 , 1)"><pre>    <span class="pl-s"><span class="pl-pds">"</span>2a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>2b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>3<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>4a<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>4b<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>5<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>7<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>11<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>)
    <span class="pl-s"><span class="pl-pds">"</span>13<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span> , <span class="pl-c1">1</span>)</pre></div>
</article></div>