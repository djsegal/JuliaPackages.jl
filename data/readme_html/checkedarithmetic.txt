<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-checkedarithmetic" class="anchor" aria-hidden="true" href="#checkedarithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CheckedArithmetic</h1>
<p dir="auto">This package aims to make it easier to detect overflow in numeric computations.
It exports two macros, <code>@check</code> and <code>@checked</code>, as well as functions
<code>accumulatortype</code> and <code>acc</code>.
Packages can add support for their own types to interact appropriately
with these tools.</p>
<h2 dir="auto"><a id="user-content-checked" class="anchor" aria-hidden="true" href="#checked"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@checked</code></h2>
<p dir="auto"><code>@checked</code> converts arithmetic operators to their checked variants.
For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@checked z = x + y"><pre><span class="pl-c1">@checked</span> z <span class="pl-k">=</span> x <span class="pl-k">+</span> y</pre></div>
<p dir="auto">rewrites this expression as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z = Base.Checked.checked_add(x, y)"><pre>z <span class="pl-k">=</span> Base<span class="pl-k">.</span>Checked<span class="pl-k">.</span><span class="pl-c1">checked_add</span>(x, y)</pre></div>
<p dir="auto">Note that this macro only operates at the level of surface syntax, i.e.,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@checked z = f(x) + f(y)"><pre><span class="pl-c1">@checked</span> z <span class="pl-k">=</span> <span class="pl-c1">f</span>(x) <span class="pl-k">+</span> <span class="pl-c1">f</span>(y)</pre></div>
<p dir="auto">will not detect overflow caused by <code>f</code>.</p>
<p dir="auto">The <a href="https://github.com/JuliaLang/julia/blob/master/base/checked.jl"><code>Base.Checked</code> module</a> defines numerous checked operations.
These can be specialized for custom types.</p>
<h2 dir="auto"><a id="user-content-check" class="anchor" aria-hidden="true" href="#check"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@check</code></h2>
<p dir="auto"><code>@check</code> performs an operation in two different ways,
checking that both approaches agree.
<code>@check</code> is primarily useful in tests.</p>
<p dir="auto">For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = @check ssd(a, b)"><pre>d <span class="pl-k">=</span> <span class="pl-c1">@check</span> <span class="pl-c1">ssd</span>(a, b)</pre></div>
<p dir="auto">would perform <code>ssd(a, b)</code> with the inputs as given, and also compute <code>ssd(asafe, bsafe)</code>
where <code>asafe</code> and <code>bsafe</code> are "safer" variants of <code>a</code> and <code>b</code>.
It then tests whether the result obtained from the "safe" arguments is consistent with
the result obtained from <code>a</code> and <code>b</code>.
If the two differ to within the precision of the "ordinary" (unsafe) result, an
error is thrown.
Optionally, you can supply keywords accepted by <code>isapprox</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@check foo(a) atol=1e-12"><pre><span class="pl-c1">@check</span> <span class="pl-c1">foo</span>(a) atol<span class="pl-k">=</span><span class="pl-c1">1e-12</span></pre></div>
<p dir="auto">Packages can specialize <code>CheckedArithmetic.safearg</code> to control how <code>asafe</code> and <code>bsafe</code>
are generated. To guard against oversights, <code>safearg</code> must be explicitly defined for
each numeric type---the fallback method for <code>safearg(::Number)</code> is to throw an error.</p>
<h2 dir="auto"><a id="user-content-accumulatortype-and-acc" class="anchor" aria-hidden="true" href="#accumulatortype-and-acc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>accumulatortype</code> and <code>acc</code></h2>
<p dir="auto">These functions are useful for writing overflow-safe algorithms.
<code>accumulatortype(T)</code> or <code>accumulatortype(T1, T2...)</code> takes types as input arguments
and returns a type suitable for limited-risk arithmetic operations.
<code>acc(x)</code> is just shorthand for <code>convert(accumulatortype(typeof(x)), x)</code>.</p>
<p dir="auto">You can also specialize on the operation. For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; accumulatortype(+, UInt8)
UInt64

julia&gt; accumulatortype(-, UInt8)
Int64"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">accumulatortype</span>(<span class="pl-k">+</span>, UInt8)
UInt64

julia<span class="pl-k">&gt;</span> <span class="pl-c1">accumulatortype</span>(<span class="pl-k">-</span>, UInt8)
Int64</pre></div>
<p dir="auto">If you're computing a sum-of-squares and want to make sure you algorithm is (reasonably)
safe for an input array of <code>UInt8</code> numbers, you might want to write that as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function sumsquares(A::AbstractArray)
    s = zero(accumulatortype(eltype(A)))
    for a in A
        s += acc(a)^2
    end
    return s
end"><pre><span class="pl-k">function</span> <span class="pl-en">sumsquares</span>(A<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>)
    s <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">accumulatortype</span>(<span class="pl-c1">eltype</span>(A)))
    <span class="pl-k">for</span> a <span class="pl-k">in</span> A
        s <span class="pl-k">+=</span> <span class="pl-c1">acc</span>(a)<span class="pl-k">^</span><span class="pl-c1">2</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> s
<span class="pl-k">end</span></pre></div>
</article></div>