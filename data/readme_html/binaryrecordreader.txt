<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-binaryrecordreader" class="anchor" aria-hidden="true" href="#binaryrecordreader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BinaryRecordReader</h1>
<p><a href="https://travis-ci.com/Optomatica/BinaryRecordReader.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6a52cea59f3d60ad87e5de0beb2893cfbcf121b5012018c889fcdff0dc9085e7/68747470733a2f2f7472617669732d63692e636f6d2f4f70746f6d61746963612f42696e6172795265636f72645265616465722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/Optomatica/BinaryRecordReader.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/mbeltagy/binaryrecordreader-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/3f0ce1c9c528760ae7297dd2ce49dd62503046dd63bf76f99bf1b6749e4a8ef3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6668706e37356b337236376f77336b652f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/fhpn75k3r67ow3ke/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/Optomatica/BinaryRecordReader.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/310ff302a1a768aa0f4772e7ebe1014f70ccf1871192eb2d17233ff18e86579c/68747470733a2f2f636f6465636f762e696f2f67682f4f70746f6d61746963612f42696e6172795265636f72645265616465722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Optomatica/BinaryRecordReader.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package allow you to conveniently describe binary records for reading files. It require some extra dimensionally information for Julia <code>Array</code> fields inside a given <code>type</code> and creates a suitable <code>read</code> method.</p>
<p>Example usage</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BinaryRecordReader


struct TestS
    a::Int16
    b::Float64
    m::Vector{Int32}
    k::UInt8 
end

@construct_reader TestS (m=(500,),) 
"><pre><span class="pl-k">using</span> BinaryRecordReader


<span class="pl-k">struct</span> TestS
    a<span class="pl-k">::</span><span class="pl-c1">Int16</span>
    b<span class="pl-k">::</span><span class="pl-c1">Float64</span>
    m<span class="pl-k">::</span><span class="pl-c1">Vector{Int32}</span>
    k<span class="pl-k">::</span><span class="pl-c1">UInt8</span> 
<span class="pl-k">end</span>

<span class="pl-c1">@construct_reader</span> TestS (m<span class="pl-k">=</span>(<span class="pl-c1">500</span>,),) </pre></div>
<p>The first argument to the <code>@construct_reader</code> macro is the type we wish to generate a <code>read</code> method for, the second argument is a <a href="https://docs.julialang.org/en/v1/manual/types/#Named-Tuple-Types" rel="nofollow">NameTuple</a> to specify the dimensionality of the field names that require explicit definition.</p>
<p>In the above example, <code>@construct_reader</code> macro will construct a <code>Base.read</code> method for the <code>TestS</code> type with the size of the <code>m</code> having 500 elements. Concretely, the generated code will be:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function Base.read(io::IOStream, ::Type{TestS})
      a = read(io, Int16)
      b = read(io, Float64)
      m = read!(io, (Array{Int32,1})(undef, (500, 1)))
      k = read(io, UInt8)
      TestS(a, b, m, k)
  end
"><pre><span class="pl-k">function</span> Base<span class="pl-k">.</span><span class="pl-en">read</span>(io<span class="pl-k">::</span><span class="pl-c1">IOStream</span>, <span class="pl-k">::</span><span class="pl-c1">Type{TestS}</span>)
      a <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Int16)
      b <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, Float64)
      m <span class="pl-k">=</span> <span class="pl-c1">read!</span>(io, (Array{Int32,<span class="pl-c1">1</span>})(undef, (<span class="pl-c1">500</span>, <span class="pl-c1">1</span>)))
      k <span class="pl-k">=</span> <span class="pl-c1">read</span>(io, UInt8)
      <span class="pl-c1">TestS</span>(a, b, m, k)
  <span class="pl-k">end</span></pre></div>
<p>The generated <code>read</code> function can be explicitly called, as in</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="file_name=&quot;some_binary_file.dat&quot;
open(file_name) do io
    read(io,TestS)
end
"><pre>file_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>some_binary_file.dat<span class="pl-pds">"</span></span>
<span class="pl-c1">open</span>(file_name) <span class="pl-k">do</span> io
    <span class="pl-c1">read</span>(io,TestS)
<span class="pl-k">end</span></pre></div>
<p>or implicitly, via <code>read!</code> while filling up an array, as in</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="myrecs=Vector{TestS}(undef,15)
read!(file_name,myrecs)
"><pre>myrecs<span class="pl-k">=</span><span class="pl-c1">Vector</span><span class="pl-c1">{TestS}</span>(undef,<span class="pl-c1">15</span>)
<span class="pl-c1">read!</span>(file_name,myrecs)</pre></div>
<h2><a id="user-content-other-convenience-methods" class="anchor" aria-hidden="true" href="#other-convenience-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Other convenience methods</h2>
<p>In addition to <code>@construct_reader</code>, which is intended for use at the top level, there are two convenience  methods that can be called inside functions.</p>
<p><code>construct_reader_shallow</code> is identical in form to <code>@construct_reader</code>, with added benefit of being executable inside any function/context.</p>
<p><code>construct_reader_deep</code> has the added functionality where we can specify the dimensionality of internal types arrays. For example with following types</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct SimpleRecMat
    lat::Float32
    time::Matrix{Int32}
end

struct AnotherSimpleRecMat
    fun::UInt8
    funMat::Matrix{UInt16}
end

struct CompoundRecComplex
    long::Float32
    COG::UInt16
    funky::AnotherSimpleRecMat
    data::Matrix{SimpleRecMat}
end
"><pre><span class="pl-k">struct</span> SimpleRecMat
    lat<span class="pl-k">::</span><span class="pl-c1">Float32</span>
    time<span class="pl-k">::</span><span class="pl-c1">Matrix{Int32}</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> AnotherSimpleRecMat
    fun<span class="pl-k">::</span><span class="pl-c1">UInt8</span>
    funMat<span class="pl-k">::</span><span class="pl-c1">Matrix{UInt16}</span>
<span class="pl-k">end</span>

<span class="pl-k">struct</span> CompoundRecComplex
    long<span class="pl-k">::</span><span class="pl-c1">Float32</span>
    COG<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
    funky<span class="pl-k">::</span><span class="pl-c1">AnotherSimpleRecMat</span>
    data<span class="pl-k">::</span><span class="pl-c1">Matrix{SimpleRecMat}</span>
<span class="pl-k">end</span></pre></div>
<p>We can fully a specify all three readers for each one on then by invoking</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="construct_reader_deep(CompoundRecComplex, (data=(5,5), AnotherSimpleRecMat__funMat=(2,2), SimpleRecMat__time =(3,3)))
"><pre><span class="pl-c1">construct_reader_deep</span>(CompoundRecComplex, (data<span class="pl-k">=</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>), AnotherSimpleRecMat__funMat<span class="pl-k">=</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), SimpleRecMat__time <span class="pl-k">=</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)))</pre></div>
<p>Note that for internal type definition we have to be a explicit in the specifying the the internal field names via a <code>Type__fieldName</code> syntax.</p>
</article></div>