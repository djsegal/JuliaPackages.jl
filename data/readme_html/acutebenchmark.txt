<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-acutebenchmark" class="anchor" aria-hidden="true" href="#acutebenchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AcuteBenchmark</h1>
<p><a href="https://aminya.github.io/AcuteBenchmark.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/aminya/AcuteBenchmark.jl/workflows/CI/badge.svg"><img src="https://github.com/aminya/AcuteBenchmark.jl/workflows/CI/badge.svg" alt="Build Status (Github Actions)" style="max-width:100%;"></a></p>
<p>AcuteBenchmark allows you to benchmark functions that get Arrays as their input.</p>
<p>It is used inside <a href="https://github.com/JuliaMath/VML.jl">IntelVectorMath</a> for benchmarking its functions. A fully working example available here: <a href="https://github.com/JuliaMath/VML.jl/blob/AcuteBenchmark/benchmark/benchmark.jl">https://github.com/JuliaMath/VML.jl/blob/AcuteBenchmark/benchmark/benchmark.jl</a></p>
<p>Creates random inputs for a function based on limits, types, and dims specified.</p>
<div class="highlight highlight-source-julia"><pre>config <span class="pl-k">=</span> <span class="pl-c1">Funb</span>(
    fun <span class="pl-k">=</span> sin,
    limits <span class="pl-k">=</span> [(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)],
    types <span class="pl-k">=</span> [Float32, Float64],
    dims <span class="pl-k">=</span> [<span class="pl-c1">10</span> <span class="pl-c1">100</span> <span class="pl-c1">200</span>],
)</pre></div>
<p>or just in a compact form:</p>
<div class="highlight highlight-source-julia"><pre>config <span class="pl-k">=</span> <span class="pl-c1">Funb</span>( sin, [(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)], [Float32, Float64], [<span class="pl-c1">10</span> <span class="pl-c1">100</span> <span class="pl-c1">200</span>])</pre></div>
<ul>
<li>fun: the function <code>:fun</code> or :(Module.fun)</li>
<li>limits: min and max of possible values</li>
<li>types : type of elements</li>
<li>dims:
<ul>
<li>each element gives the size of the input, and it is a:
<ul>
<li>Number (for 1D)</li>
<li>Tuple (for N-D)</li>
</ul>
</li>
<li>each row for each function argument</li>
<li>each column for each dimension set.</li>
</ul>
</li>
</ul>
<p>use benchmark! to run the benchmark:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AcuteBenchmark

configs <span class="pl-k">=</span> <span class="pl-c1">FunbArray</span>([
    <span class="pl-c1">Funb</span>( sin, [(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)],[Float32, Float64], [<span class="pl-c1">10</span>] );
    <span class="pl-c1">Funb</span>( atan, [(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>), (<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)],[Float32, Float64],[<span class="pl-c1">10</span>; <span class="pl-c1">10</span>] );
    <span class="pl-c1">Funb</span>( <span class="pl-k">*</span>, [(<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>), (<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)], [Float32, Float64], [(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>); (<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)] );
    ])

<span class="pl-c1">benchmark!</span>(configs)</pre></div>
<p>Plot the benchmark result using:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">bar</span>(configs)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="test/bar/bench-dims-set1.png"><img src="test/bar/bench-dims-set1.png" alt="bench-dims-set1" style="max-width:100%;"></a></p>
<p>To have a same color for the same types use:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">bar</span>(configs, uniqueType <span class="pl-k">=</span> <span class="pl-c1">true</span>, dimAnnotation <span class="pl-k">=</span> <span class="pl-c1">true</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="test/bar/bench-dims-set1-unique.png"><img src="test/bar/bench-dims-set1-unique.png" alt="bench-dims-set1-unique" style="max-width:100%;"></a></p>
<p>To plot the relative speed, pass a pair of configs:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">bar</span>(configsRealBase <span class="pl-k">=&gt;</span> configsRealIVM, uniqueType <span class="pl-k">=</span> <span class="pl-c1">true</span>, dimAnnotation <span class="pl-k">=</span> <span class="pl-c1">false</span>, uniqueDim <span class="pl-k">=</span> <span class="pl-c1">true</span>, <span class="pl-s"><span class="pl-pds">"</span>Base<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>IntelVectorMath<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set6-relative.png"><img src="https://raw.githubusercontent.com/aminya/AcuteBenchmark-Results/master/IntelVectorMath/Real/bar/bench-dims-set6-relative.png" alt="IntelVectorMath Performance Comparison" style="max-width:100%;"></a></p>
<p>To plot how the function acts over different dimension sets:</p>
<div class="highlight highlight-source-julia"><pre>configs2 <span class="pl-k">=</span> <span class="pl-c1">Funb</span>( sin, [(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">1</span>)],[Float32, Float64], [<span class="pl-c1">10</span> <span class="pl-c1">30</span> <span class="pl-c1">50</span> <span class="pl-c1">100</span> <span class="pl-c1">200</span> <span class="pl-c1">500</span>] );
<span class="pl-c1">benchmark!</span>(configs2)
<span class="pl-c1">dimplot</span>(configs2)</pre></div>
<p>The axes are logarithmic.</p>
<p><a target="_blank" rel="noopener noreferrer" href="test/dimplot/bench-sin.png"><img src="test/dimplot/bench-sin.png" alt="bench-sin" style="max-width:100%;"></a></p>
<p>To compare different sets pass an array of configs:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">dimplot</span>([configsRealBase,configsRealIVM],[<span class="pl-s"><span class="pl-pds">"</span>Base<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>IntelVectorMath<span class="pl-pds">"</span></span>])</pre></div>

</article></div>