<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a id="user-content-matint" href="#MatInt">#</a>
<strong><code>MatInt</code></strong> — <em>Module</em>.</p>
<p dir="auto">This  package  provides  the  Smith  and  Hermite normal forms for integral matrices,  the Diaconis-Graham  normal form  for sets  of generators  of an abelian  group,  and  a  few  functions to  work  with integral matrices as lattices.</p>
<p dir="auto">Most  of the  code is  ported from  <code>GAP4</code>, authored  by A.  Storjohann, R. Wainwright, F. Gähler and D. Holt; the code for <code>NormalFormIntMat</code> is still hard  to read  like the  original one.  The Diaconis-Graham  normal form is ported from <code>GAP3/Chevie</code>.</p>
<p dir="auto">The  best way to make sure  of the validity of the  results is to work with matrices of <code>SaferIntegers</code>, which error in case of overflow. Then redo the computation with a wider type in case of error.</p>
<p dir="auto">For  the API, look at the docstrings for <code>smith, smith_transforms, hermite, hermite_transforms,  col_hermite,  col_hermite_transforms, diaconis_graham, baseInt, complementInt, lnullspaceInt, solutionmatInt, intersect_rowspaceInt</code>.</p>
<p dir="auto">We  recall  that  a  <em>unimodular</em>  matrix  means an integer matrix which is invertible and whose inverse is still an integer matrix.</p>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L1-L23">source</a><br></p>
<p dir="auto"><a id="user-content-matint.hermite" href="#MatInt.hermite">#</a>
<strong><code>MatInt.hermite</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>hermite(m::AbstractMatrix{&lt;:Integer})</code></p>
<p dir="auto">returns  the row Hermite normal  form <code>H</code> of <code>m</code>,  a row equivalent integer upper triangular form. If a <em>pivot</em> is the first non-zero entry on a row of <code>H</code>,  the quadrant  below left  a pivot  is zero,  pivots are  positive and entries  above a  pivot are  nonnegative and  smaller than the pivot. There exists a unique unimodular matrix <code>r</code> such that <code>r*m==H</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; hermite(m)
3×3 Matrix{Int64}:
 1  0  1
 0  1  1
 0  0  3"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; hermite(m)
3×3 Matrix{Int64}:
 1  0  1
 0  1  1
 0  0  3
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L529-L551">source</a><br></p>
<p dir="auto"><a id="user-content-matint.hermite_transforms" href="#MatInt.hermite_transforms">#</a>
<strong><code>MatInt.hermite_transforms</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>hermite_transforms(m::AbstractMatrix{&lt;:Integer})</code></p>
<p dir="auto">The  row Hermite  normal form  <code>H</code> of  the <code>m</code>  is a row equivalent integer upper triangular form. If a <em>pivot</em> is the first non-zero entry on a row of <code>H</code>,  the quadrant  below left  a pivot  is zero,  pivots are  positive and entries  above a  pivot are  nonnegative and  smaller than the pivot. There exists  a unique  unimodular matrix  <code>r</code> such  that <code>r*m==H</code>.  The function <code>hermite_transforms</code>  returns a named tuple with components <code>.normal=H</code> and <code>.rowtrans=r</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; n=hermite_transforms(m)
(normal = [1 0 1; 0 1 1; 0 0 3], rowtrans = [-2 62 -35; 1 -30 17; -3 97 -55], rank = 3, signdet = 1)

julia&gt; n.rowtrans*m==n.normal
true"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; n=hermite_transforms(m)
(normal = [1 0 1; 0 1 1; 0 0 3], rowtrans = [-2 62 -35; 1 -30 17; -3 97 -55], rank = 3, signdet = 1)

julia&gt; n.rowtrans*m==n.normal
true
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L556-L580">source</a><br></p>
<p dir="auto"><a id="user-content-matint.col_hermite" href="#MatInt.col_hermite">#</a>
<strong><code>MatInt.col_hermite</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>col_hermite(m::AbstractMatrix{&lt;:Integer})</code></p>
<p dir="auto">returns  the column Hermite  normal form <code>H</code>  of the integer  matrix <code>m</code>, a column equivalent lower triangular form. If a <em>pivot</em> is the first non-zero entry on a column of <code>H</code> (the quadrant above right a pivot is zero), pivots are  positive and entries left of a  pivot are nonnegative and smaller than the pivot. There exists a unique unimodular matrix <code>c</code> such that <code>m*c==H</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; col_hermite(m)
3×3 Matrix{Int64}:
 1  0  0
 0  1  0
 0  1  3"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; col_hermite(m)
3×3 Matrix{Int64}:
 1  0  0
 0  1  0
 0  1  3
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L587-L609">source</a><br></p>
<p dir="auto"><a id="user-content-matint.col_hermite_transforms" href="#MatInt.col_hermite_transforms">#</a>
<strong><code>MatInt.col_hermite_transforms</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>col_hermite_transforms(m::AbstractMatrix{&lt;:Integer})</code></p>
<p dir="auto">The  column Hermite normal form  <code>H</code> of the integer  matrix <code>m</code> is a column equivalent  lower triangular form. If a <em>pivot</em> is the first non-zero entry on  a column of <code>H</code> (the quadrant above  right a pivot is zero), pivots are positive  and entries left of a pivot  are nonnegative and smaller than the pivot.  There exists a unique unimodular matrix <code>c</code> such that <code>m*c==H</code>. The function  <code>col_hermite_transforms</code>  returns  a  named tuple with components <code>.normal=H</code> and <code>.coltrans=c</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; n=col_hermite_transforms(m)
(normal = [1 0 0; 0 1 0; 0 1 3], coltrans = [-1 13 -50; 2 -27 106; -1 14 -55], rank = 3, signdet = 1)

julia&gt; m*n.coltrans==n.normal
true"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 15 28;4 5 6;7 8 9]
3×3 Matrix{Int64}:
 1  15  28
 4   5   6
 7   8   9

julia&gt; n=col_hermite_transforms(m)
(normal = [1 0 0; 0 1 0; 0 1 3], coltrans = [-1 13 -50; 2 -27 106; -1 14 -55], rank = 3, signdet = 1)

julia&gt; m*n.coltrans==n.normal
true
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L614-L638">source</a><br></p>
<p dir="auto"><a id="user-content-matint.smith" href="#MatInt.smith">#</a>
<strong><code>MatInt.smith</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>smith(m::AbstractMatrix{&lt;:Integer})</code></p>
<p dir="auto">computes  the Smith normal form  <code>S</code> of <code>m</code>, the  unique equivalent (in the sense  that  there  exist  unimodular  integer  matrices  <code>r,  c</code> such that <code>r*m*c==S</code>) diagonal matrix such that <code>Sᵢ,ᵢ</code> divides <code>Sⱼ,ⱼ</code> for <code>i≤j</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 15 28 7;4 5 6 7;7 8 9 7]
3×4 Matrix{Int64}:
 1  15  28  7
 4   5   6  7
 7   8   9  7

julia&gt; smith(m)
3×4 Matrix{Int64}:
 1  0  0  0
 0  1  0  0
 0  0  3  0"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 15 28 7;4 5 6 7;7 8 9 7]
3×4 Matrix{Int64}:
 1  15  28  7
 4   5   6  7
 7   8   9  7

julia&gt; smith(m)
3×4 Matrix{Int64}:
 1  0  0  0
 0  1  0  0
 0  0  3  0
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L645-L665">source</a><br></p>
<p dir="auto"><a id="user-content-matint.smith_transforms" href="#MatInt.smith_transforms">#</a>
<strong><code>MatInt.smith_transforms</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>smith_transforms(m::AbstractMatrix{&lt;:Integer})</code></p>
<p dir="auto">The  Smith normal form of <code>m</code> is  the unique equivalent diagonal matrix <code>S</code> such  that <code>Sᵢ,ᵢ</code> divides <code>Sⱼ,ⱼ</code> for  <code>i≤j</code>. There exist unimodular integer matrices  <code>c,  r</code>  such  that  <code>r*m*c==S</code>.  The function <code>smith_transforms</code> returns  a  named  tuple  with  components  <code>.normal=S</code>,  <code>.rowtrans=r</code> and <code>.coltrans=c</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 15 28 7;4 5 6 7;7 8 9 7]
3×4 Matrix{Int64}:
 1  15  28  7
 4   5   6  7
 7   8   9  7

julia&gt; n=smith_transforms(m)
(normal = [1 0 0 0; 0 1 0 0; 0 0 3 0], coltrans = [1 0 -1 -84; 0 1 -1 175; 0 0 1 -91; 0 0 0 1], rowtrans = [-2 62 -35; 1 -30 17; -3 97 -55], rank = 3, signdet = nothing)

julia&gt; n.rowtrans*m*n.coltrans==n.normal
true"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 15 28 7;4 5 6 7;7 8 9 7]
3×4 Matrix{Int64}:
 1  15  28  7
 4   5   6  7
 7   8   9  7

julia&gt; n=smith_transforms(m)
(normal = [1 0 0 0; 0 1 0 0; 0 0 3 0], coltrans = [1 0 -1 -84; 0 1 -1 175; 0 0 1 -91; 0 0 0 1], rowtrans = [-2 62 -35; 1 -30 17; -3 97 -55], rank = 3, signdet = nothing)

julia&gt; n.rowtrans*m*n.coltrans==n.normal
true
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L668-L690">source</a><br></p>
<p dir="auto"><a id="user-content-matint.diaconis_graham" href="#MatInt.diaconis_graham">#</a>
<strong><code>MatInt.diaconis_graham</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>diaconis_graham(m::Matrix{&lt;:Integer}, moduli::Vector{&lt;:Integer})</code></p>
<p dir="auto">returns the normal form defined for the set of generators defined by <code>m</code> of the  abelian group defined by <code>moduli</code>. in P. Diaconis and R. Graham., "The graph  of generating sets  of an abelian  group", Colloq. Math., 80:31–38,</p>
<ol start="1999" dir="auto">
<li></li>
</ol>
<p dir="auto"><code>moduli</code>  should  have  positive  entries  such  that <code>moduli[i+1]</code> divides <code>moduli[i]</code> for all <code>i</code>, representing the abelian group <code>A=ℤ/moduli[1]×…×ℤ/moduli[n]</code>, where <code>n=length(moduli)</code>.</p>
<p dir="auto"><code>m</code>  should have <code>n</code> columns, and each  line, with the <code>i</code>-th element taken <code>mod  moduli[i]</code>, represents  an element  of <code>A</code>;  the set  of rows  of <code>m</code> should generate <code>A</code>.</p>
<p dir="auto">The  function returns  'nothing' if  the rows  of <code>m</code>  do not generate <code>A</code>. Otherwise it returns a named tuple <code>r</code> with fields</p>
<p dir="auto"><code>r.normal</code>:  the Diaconis-Graham normal form, a matrix of same shape as <code>m</code> where  either the first <code>n</code> rows are  the identity matrix and the remaining rows  are <code>0</code>,  or <code>length(m)=n</code>  and <code>.normal</code>  differs from  the identity matrix only in the entry <code>.normal[n,n]</code>, which is prime to <code>moduli[n]</code>.</p>
<p dir="auto"><code>r.rowtrans</code>: unimodular matrix such that <code>r.normal==mod.(r.rowtrans*m,moduli')</code></p>
<p dir="auto">Here is an example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; r=diaconis_graham([3 0;4 1],[10,5])
(rowtrans = [-13 10; 4 -3], normal = [1 0; 0 2])

julia&gt; r.normal==mod.(r.rowtrans*[3 0;4 1],[10,5]')
true"><pre lang="julia-repl" class="notranslate"><code>julia&gt; r=diaconis_graham([3 0;4 1],[10,5])
(rowtrans = [-13 10; 4 -3], normal = [1 0; 0 2])

julia&gt; r.normal==mod.(r.rowtrans*[3 0;4 1],[10,5]')
true
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L957-L992">source</a><br></p>
<p dir="auto"><a id="user-content-matint.baseint" href="#MatInt.baseInt">#</a>
<strong><code>MatInt.baseInt</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>baseInt(m::Matrix{&lt;:Integer})</code></p>
<p dir="auto">returns a matrix whose rows forms a basis of the integral row space of <code>m</code>, i.e. of the set of integral linear combinations of the rows of <code>m</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 2 7;4 5 6;10 11 19]
3×3 Matrix{Int64}:
  1   2   7
  4   5   6
 10  11  19

julia&gt; baseInt(m)
3×3 Matrix{Int64}:
 1  2   7
 0  3   7
 0  0  15"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 2 7;4 5 6;10 11 19]
3×3 Matrix{Int64}:
  1   2   7
  4   5   6
 10  11  19

julia&gt; baseInt(m)
3×3 Matrix{Int64}:
 1  2   7
 0  3   7
 0  0  15
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L697-L716">source</a><br></p>
<p dir="auto"><a id="user-content-matint.complementint" href="#MatInt.complementInt">#</a>
<strong><code>MatInt.complementInt</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>complementInt(full::Matrix{&lt;:Integer}, sub::Matrix{&lt;:Integer})</code></p>
<p dir="auto"><code>complementInt(sub::Matrix{&lt;:Integer})</code></p>
<p dir="auto">Let <code>M</code> be the integral row space of <code>full</code> and let <code>S</code> be the integral row space   of  <code>sub</code>,  which  should  be  a  subspace  of  <code>M</code>.  The  function <code>complementInt</code> computes a free basis for <code>M</code> that extends <code>S</code>, that is, if the dimension of <code>S</code> is <code>n</code> it determines a basis <code>B={b₁,…,bₘ}</code> for <code>M</code>, as well as <code>n</code> integers <code>x₁,…,xₙ</code> such that the <code>n</code> vectors <code>sᵢ:=xᵢ⋅bᵢ</code> form a basis  for <code>S</code>. If only one argument is  given, <code>full</code> is assumed to be the identity matrix of size <code>size(sub,2)</code>.</p>
<p dir="auto">The  function  <code>complementInt</code>  returns  a  named  tuple with the following components:</p>
<ul dir="auto">
<li><code>complement</code> a matrix whose rows are <code>bₙ₊₁,…,bₘ</code>.</li>
<li><code>sub</code> a matrix whose rows are the <code>sᵢ</code> (a basis for <code>S</code>).</li>
<li><code>moduli</code> the factors <code>xᵢ</code>.</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; n=[1 2 3;4 5 6]
2×3 Matrix{Int64}:
 1  2  3
 4  5  6

julia&gt; complementInt(n)
(complement = [0 0 1], sub = [1 2 3; 0 3 6], moduli = [1, 3])"><pre lang="julia-repl" class="notranslate"><code>julia&gt; n=[1 2 3;4 5 6]
2×3 Matrix{Int64}:
 1  2  3
 4  5  6

julia&gt; complementInt(n)
(complement = [0 0 1], sub = [1 2 3; 0 3 6], moduli = [1, 3])
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L750-L779">source</a><br></p>
<p dir="auto"><a id="user-content-matint.lnullspaceint" href="#MatInt.lnullspaceInt">#</a>
<strong><code>MatInt.lnullspaceInt</code></strong> — <em>Function</em>.</p>
<p dir="auto">`lnullspaceInt(m::Matrix{&lt;:Integer})</p>
<p dir="auto">returns a matrix whose rows form a basis of the integral lnullspace of <code>m</code>, that  is  of  elements  of  the  left  nullspace  of <code>m</code> that have integral entries.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; m=[1 2 7;4 5 6;7 8 9;10 11 19;5 7 12]
5×3 Matrix{Int64}:
  1   2   7
  4   5   6
  7   8   9
 10  11  19
  5   7  12

julia&gt; MatInt.lnullspaceInt(m)
2×5 Matrix{Int64}:
 1  18   -9  2  -6
 0  24  -13  3  -7"><pre lang="julia-repl" class="notranslate"><code>julia&gt; m=[1 2 7;4 5 6;7 8 9;10 11 19;5 7 12]
5×3 Matrix{Int64}:
  1   2   7
  4   5   6
  7   8   9
 10  11  19
  5   7  12

julia&gt; MatInt.lnullspaceInt(m)
2×5 Matrix{Int64}:
 1  18   -9  2  -6
 0  24  -13  3  -7
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L797-L818">source</a><br></p>
<p dir="auto"><a id="user-content-matint.intersect_rowspaceint" href="#MatInt.intersect_rowspaceInt">#</a>
<strong><code>MatInt.intersect_rowspaceInt</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>intersect_rowspaceInt(m::Matrix{&lt;:Integer}, n::Matrix{&lt;:Integer})</code></p>
<p dir="auto">returns  a  matrix  whose  rows  forms  a  basis of the intersection of the integral row spaces of <code>m</code> and <code>n</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; mat=[1 2 7;4 5 6;10 11 19]; nat=[5 7 2;4 2 5;7 1 4]
3×3 Matrix{Int64}:
 5  7  2
 4  2  5
 7  1  4

julia&gt; intersect_rowspaceInt(mat,nat)
3×3 Matrix{Int64}:
 1  5  509
 0  6  869
 0  0  960"><pre lang="julia-repl" class="notranslate"><code>julia&gt; mat=[1 2 7;4 5 6;10 11 19]; nat=[5 7 2;4 2 5;7 1 4]
3×3 Matrix{Int64}:
 5  7  2
 4  2  5
 7  1  4

julia&gt; intersect_rowspaceInt(mat,nat)
3×3 Matrix{Int64}:
 1  5  509
 0  6  869
 0  0  960
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L722-L741">source</a><br></p>
<p dir="auto"><a id="user-content-matint.solutionmatint" href="#MatInt.solutionmatInt">#</a>
<strong><code>MatInt.solutionmatInt</code></strong> — <em>Function</em>.</p>
<p dir="auto"><code>solutionmatInt(mat::Matrix{&lt;:Integer}, v::Vector{&lt;:Integer})</code></p>
<p dir="auto">returns  an  integral  vector  <code>x</code>  that  is  a  solution  of  the equation <code>mat'*x=v</code>. It returns <code>nothing</code> if no such vector exists.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; mat=[1 2 7;4 5 6;7 8 9;10 11 19;5 7 12]
5×3 Matrix{Int64}:
  1   2   7
  4   5   6
  7   8   9
 10  11  19
  5   7  12

julia&gt; solutionmatInt(mat,[95,115,182])
5-element Vector{Int64}:
  2285
 -5854
  4888
 -1299
     0"><pre lang="julia-repl" class="notranslate"><code>julia&gt; mat=[1 2 7;4 5 6;7 8 9;10 11 19;5 7 12]
5×3 Matrix{Int64}:
  1   2   7
  4   5   6
  7   8   9
 10  11  19
  5   7  12

julia&gt; solutionmatInt(mat,[95,115,182])
5-element Vector{Int64}:
  2285
 -5854
  4888
 -1299
     0
</code></pre></div>
<p dir="auto"><a href="https://github.com/jmichel7/MatInt.jl/blob/f7fd93c42b404cb5a8c4fc9ac242ea30920c8864/src/MatInt.jl#L824-L847">source</a><br></p>
</article></div>