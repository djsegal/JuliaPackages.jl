<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lidjuljl" class="anchor" aria-hidden="true" href="#lidjuljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LidJul.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a></p>
<p><em>Disclaimer: this is a Work In Progress that explores the performance of different different solvers for Poisson's equation. Parts of this work may be included as hands-on sessions in TriScale innov's future professional training programs.</em></p>
<h2><a id="user-content-a-simple-geometric-multi-grid-julia-implementation-for-a-2d-poissons-equation" class="anchor" aria-hidden="true" href="#a-simple-geometric-multi-grid-julia-implementation-for-a-2d-poissons-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A simple Geometric Multi-Grid Julia implementation for a 2D Poisson's equation.</h2>
<p>This Julia repo compares the performance of different linear solvers available in classical Julia packages with a simple <em>Geometric Multi Grid</em> (GMG) solver adapted from <em>Harald Köstler</em>'s implementation:</p>
<p>"Multigrid HowTo: A simple Multigrid solver in C++ in less than 200 lines of code"
<a href="https://www10.cs.fau.de/publications/reports/TechRep_2008-03.pdf" rel="nofollow">https://www10.cs.fau.de/publications/reports/TechRep_2008-03.pdf</a></p>
<p>The <code>src/poisson2DGMG</code> and <code>src/GSSmoother.jl</code> files contain the Julia implementation of a solver for Poisson's equation defined on a 2D unit square with <code>n x n</code> steps and a basic FD scheme. Boundary conditions can be chosen to be of <code>Dirichlet</code> or <code>Neumann</code> type for the 4 edges of the square (left,right,bottom,top). One can launch the
resolution of the Poisson's equation with a collection of solvers via the command (from this directory):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] activate .
include(&quot;test/poisson2D.jl&quot;)
"><pre>] activate .
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test/poisson2D.jl<span class="pl-pds">"</span></span>)</pre></div>
<p>By default the solver is launched for <code>n=128</code> and <code>DNDN</code> boundary conditions. These values can be modified in the <code>go()</code> function defined in <code>test/poisson2D.jl</code>. Note that <code>n</code> must be a power of two.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function go()
    n=128 #Choose a power of two
    #Choose boundary conditions 
    # bc=(neumann,neumann,neumann,neumann)
    bc=(dirichlet,neumann,dirichlet,neumann)
    ...
"><pre><code>function go()
    n=128 #Choose a power of two
    #Choose boundary conditions 
    # bc=(neumann,neumann,neumann,neumann)
    bc=(dirichlet,neumann,dirichlet,neumann)
    ...
</code></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figs/makie128DNDN.png"><img src="docs/figs/makie128DNDN.png" alt="" style="max-width:100%;"></a></p>
<p>The code should return a collection of measurements corresponding to the CPU time required by each solver, the number of iterations for the iterative solvers as well as the corresponding residual. The CPU time the <code>init_time</code> corresponds to the time required by the solver construction for a given matrix, and the <code>solver_time</code> corresponds to the time required by the solution of a linear system with a given RHS.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="┌────────────────────┬───────────┬─────────────┬────────────┬───────────┬─────────┐
│ solver             │ init_time │ solver_time │ Total Time │ residual  │ niters  │
├────────────────────┼───────────┼─────────────┼────────────┼───────────┼─────────┤
│ gauss_seidel       │ 8.900E-08 │ 4.492E-03   │ 4.492E-03  │   NaN     │ 10      │
│ GMG_GSSmoother     │ 7.034E-05 │ 5.264E-03   │ 5.335E-03  │ 1.148E-10 │ 17      │
│ TTSolver           │ 6.101E-03 │ 3.554E-04   │ 6.457E-03  │ 4.886E-11 │ nothing │
│ PCGAMG{SmoothA}    │ 1.383E-02 │ 4.145E-02   │ 5.529E-02  │ 1.916E-09 │ 16      │
│ PCGAMG{RugeStuben} │ 2.825E-02 │ 4.817E-02   │ 7.643E-02  │ 6.521E-10 │ 12      │
│ SparseLU           │ 9.333E-02 │ 6.262E-03   │ 9.959E-02  │ 1.748E-12 │ nothing │
│ PCGnothing         │ 5.100E-08 │ 1.431E-01   │ 1.431E-01  │ 5.959E-09 │ 605     │
│ SparseAMG          │ 8.246E-02 │ 6.945E-02   │ 1.519E-01  │ 6.521E-10 │ 12      │
│ jacobi             │ 5.700E-08 │ 3.014E-01   │ 3.014E-01  │ 9.707E+01 │ 2000    │
│ PCGILU             │ 2.629E-01 │ 7.272E-02   │ 3.356E-01  │ 4.687E-10 │ 8       │
│ sor                │ 3.000E-08 │ 4.922E-01   │ 4.922E-01  │ 6.332E+01 │ 2000    │
│ ssor               │ 3.100E-08 │ 9.461E-01   │ 9.461E-01  │ 6.332E+01 │ 2000    │
│ PCGDiagonalPrecond │ 2.945E-04 │ 5.147E+00   │ 5.148E+00  │ 6.132E-09 │ 602     │
└────────────────────┴───────────┴─────────────┴────────────┴───────────┴─────────┘
"><pre><code>┌────────────────────┬───────────┬─────────────┬────────────┬───────────┬─────────┐
│ solver             │ init_time │ solver_time │ Total Time │ residual  │ niters  │
├────────────────────┼───────────┼─────────────┼────────────┼───────────┼─────────┤
│ gauss_seidel       │ 8.900E-08 │ 4.492E-03   │ 4.492E-03  │   NaN     │ 10      │
│ GMG_GSSmoother     │ 7.034E-05 │ 5.264E-03   │ 5.335E-03  │ 1.148E-10 │ 17      │
│ TTSolver           │ 6.101E-03 │ 3.554E-04   │ 6.457E-03  │ 4.886E-11 │ nothing │
│ PCGAMG{SmoothA}    │ 1.383E-02 │ 4.145E-02   │ 5.529E-02  │ 1.916E-09 │ 16      │
│ PCGAMG{RugeStuben} │ 2.825E-02 │ 4.817E-02   │ 7.643E-02  │ 6.521E-10 │ 12      │
│ SparseLU           │ 9.333E-02 │ 6.262E-03   │ 9.959E-02  │ 1.748E-12 │ nothing │
│ PCGnothing         │ 5.100E-08 │ 1.431E-01   │ 1.431E-01  │ 5.959E-09 │ 605     │
│ SparseAMG          │ 8.246E-02 │ 6.945E-02   │ 1.519E-01  │ 6.521E-10 │ 12      │
│ jacobi             │ 5.700E-08 │ 3.014E-01   │ 3.014E-01  │ 9.707E+01 │ 2000    │
│ PCGILU             │ 2.629E-01 │ 7.272E-02   │ 3.356E-01  │ 4.687E-10 │ 8       │
│ sor                │ 3.000E-08 │ 4.922E-01   │ 4.922E-01  │ 6.332E+01 │ 2000    │
│ ssor               │ 3.100E-08 │ 9.461E-01   │ 9.461E-01  │ 6.332E+01 │ 2000    │
│ PCGDiagonalPrecond │ 2.945E-04 │ 5.147E+00   │ 5.148E+00  │ 6.132E-09 │ 602     │
└────────────────────┴───────────┴─────────────┴────────────┴───────────┴─────────┘
</code></pre></div>
<p>One can see in particular that the present GMG solver (<code>GMG_GSSmoother</code>) outperforms the available AMG solvers (Algebraic Multi-Grid) by a large factor (x10). The TTSolver is a direct Poisson solver which is restricted to separable Poisson coefficients.</p>
<p>The code also produces some convergence curves and bar charts for comparing CPU times.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figs/allconvergence_128DNDN.svg"><img src="docs/figs/allconvergence_128DNDN.svg" alt="" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figs/fastconvergence_128DNDN.svg"><img src="docs/figs/fastconvergence_128DNDN.svg" alt="" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figs/time_converge_128DNDN_all.svg"><img src="docs/figs/time_converge_128DNDN_all.svg" alt="" style="max-width:100%;"></a></p>
<p>Note that the full Neumann case can be treated by several iterative methods (including the present GMG). The direct SparseLU is also able to treat this case via a regularization applied to the Laplacian operator.</p>
<h2><a id="user-content-a-simple-cfd-application-of-the-solver-lid-cavity" class="anchor" aria-hidden="true" href="#a-simple-cfd-application-of-the-solver-lid-cavity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A simple CFD application of the solver (Lid Cavity).</h2>
<p>Finally the GMG solver is used in a Julia translation of <em>Benjamin Seibold</em>'s classical <code>MIT18086_NAVIERSTOKES</code> matlab implementation that simulates a square lid cavity. See the details here:
<a href="http://math.mit.edu/~gs/cse/codes/mit18086_navierstokes.pdf" rel="nofollow">http://math.mit.edu/~gs/cse/codes/mit18086_navierstokes.pdf</a></p>
<p>From this directory run the following command to launch this 2D CFD simulation :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] activate .
include(&quot;test/mit_implicit.jl&quot;)
"><pre>] activate .
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test/mit_implicit.jl<span class="pl-pds">"</span></span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="docs/figs/test.gif"><img src="docs/figs/test.gif" alt="" style="max-width:100%;"></a></p>
</article></div>