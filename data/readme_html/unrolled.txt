<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-unrolled" class="anchor" aria-hidden="true" href="#unrolled"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unrolled</h1>
<p><a href="https://travis-ci.org/cstjean/Unrolled.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/702ed5acc3bff351ffc3ac36989885f51163ae3b/68747470733a2f2f7472617669732d63692e6f72672f6373746a65616e2f556e726f6c6c65642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cstjean/Unrolled.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/cstjean/Unrolled.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/68266fc0436005df034549cdba703c6628930f39/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6373746a65616e2f556e726f6c6c65642e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/cstjean/Unrolled.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/cstjean/Unrolled.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fbe55b86d1f7b41616e95d31cfac7517adf82d9f/687474703a2f2f636f6465636f762e696f2f6769746875622f6373746a65616e2f556e726f6c6c65642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/cstjean/Unrolled.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Unrolled.jl provides functions to unroll loops on sequences whose length is known at
compile-time (mostly <code>Tuple</code> and <a href="https://github.com/JuliaArrays/StaticArrays.jl"><code>StaticArrays</code></a>). This can significantly improve performance and type-stability.</p>
<h1><a id="user-content-the-unroll-macro" class="anchor" aria-hidden="true" href="#the-unroll-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>@unroll</code> macro</h1>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Unrolled

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@unroll</span> <span class="pl-k">function</span> <span class="pl-en">my_sum</span>(seq)
       	   <span class="pl-c"><span class="pl-c">#</span> More on why we need @unroll twice later.</span>
	   total <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(seq))
           <span class="pl-c1">@unroll</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> seq
               total <span class="pl-k">+=</span> x
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> total
       <span class="pl-k">end</span>
my_sum_unrolled_expansion_ (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">my_sum</span>((<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>))
<span class="pl-c1">6</span></pre></div>
<p>To see what code will be executed,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Tuples are unrolled</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_unrolled</span> <span class="pl-c1">my_sum</span>((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))
<span class="pl-k">quote</span>  
    total <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(seq))
    <span class="pl-k">begin</span>  
        <span class="pl-k">let</span> x <span class="pl-k">=</span> seq[<span class="pl-c1">1</span>]
            total <span class="pl-k">+=</span> x
        <span class="pl-k">end</span>
        <span class="pl-k">let</span> x <span class="pl-k">=</span> seq[<span class="pl-c1">2</span>]
            total <span class="pl-k">+=</span> x
        <span class="pl-k">end</span>
        <span class="pl-k">let</span> x <span class="pl-k">=</span> seq[<span class="pl-c1">3</span>]
            total <span class="pl-k">+=</span> x
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> total
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> But not vectors, since their length is not part of Vector{Int}</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_unrolled</span> <span class="pl-c1">my_sum</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-k">quote</span>
    total <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(seq))
    <span class="pl-k">for</span> x <span class="pl-k">=</span> seq
        total <span class="pl-k">+=</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> total
<span class="pl-k">end</span></pre></div>
<p>All types for which <code>length</code> is implemented will be unrolled (this includes the fixed-size
vectors from <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> and
<a href="https://github.com/SimonDanisch/FixedSizeArrays.jl">FixedSizeArrays.jl</a>)</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>@unroll</code> works by generating (at compile-time) a separate function for each type
combination. This is why we need (at least) two <code>@unroll</code>:</p>
<ul>
<li>One in front of the <code>function</code> definition</li>
<li>One in front of each <code>for</code> loop to be unrolled</li>
</ul>
<p><code>@unroll</code> can only unroll loops over the arguments of the function. For instance, this
is an error:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Sum every number in seq except the last one</span>
<span class="pl-c1">@unroll</span> <span class="pl-k">function</span> <span class="pl-en">my_sum_but_last</span>(seq)
    total <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(seq))
    <span class="pl-c1">@unroll</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> seq[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]   <span class="pl-c"><span class="pl-c">#</span> Bad!</span>
        total <span class="pl-k">+=</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> total
<span class="pl-k">end</span></pre></div>
<p>An easy work-around is to use a helper function</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@unroll</span> <span class="pl-k">function</span> <span class="pl-en">_do_sum</span>(sub_seq) <span class="pl-c"><span class="pl-c">#</span> helper for my_sum_but_last</span>
    total <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(sub_seq))
    <span class="pl-c1">@unroll</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> sub_seq
        total <span class="pl-k">+=</span> x
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> total
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Sum every number in seq except the last one</span>
<span class="pl-en">my_sum_but_last</span>(seq) <span class="pl-k">=</span> <span class="pl-c1">_do_sum</span>(seq[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>])

<span class="pl-c1">my_sum_but_last</span>((<span class="pl-c1">1</span>,<span class="pl-c1">20</span>,<span class="pl-c1">3</span>))    <span class="pl-c"><span class="pl-c">#</span> 21</span></pre></div>
<p>As a special case, <code>@unroll</code> also supports iteration over <code>1:some_argument</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@unroll</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(tup)
    <span class="pl-c1">@unroll</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(tup)
        <span class="pl-c1">println</span>(x)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">foo</span>((<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>, <span class="pl-c1">:c</span>))
<span class="pl-k">&gt;</span> <span class="pl-c1">1</span>
<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>
<span class="pl-k">&gt;</span> <span class="pl-c1">3</span></pre></div>
<h1><a id="user-content-unrolled-functions" class="anchor" aria-hidden="true" href="#unrolled-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unrolled functions</h1>
<p>Unrolled.jl also provides the following unrolled functions, defined on <code>Tuple</code>s only.</p>
<pre><code>unrolled_map, unrolled_reduce, unrolled_in, unrolled_any, unrolled_all, unrolled_foreach
</code></pre>
<p>and</p>
<pre><code>unrolled_filter, unrolled_intersect, unrolled_union, unrolled_setdiff
</code></pre>
<p>The functions in this second group will only perform well when the computations can be
performed entirely at compile-time (using the types). For example,
<code>unrolled_filter(x-&gt;isa(x, Int), some_tuple)</code>.</p>
<p>In this other example, <code>unrolled_filter</code> is compiled to a constant:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Unrolled, Base<span class="pl-k">.</span>Test

<span class="pl-c1">@generated</span> <span class="pl-en">positive</span><span class="pl-c1">{N}</span>(<span class="pl-k">::</span><span class="pl-c1">Val{N}</span>) <span class="pl-k">=</span> N <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
<span class="pl-c1">@inferred</span> <span class="pl-c1">unrolled_filter</span>(positive, (<span class="pl-c1">Val</span><span class="pl-c1">{1}</span>(), <span class="pl-c1">Val</span><span class="pl-c1">{3}</span>(), <span class="pl-c1">Val</span><span class="pl-c1">{-1}</span>(), <span class="pl-c1">Val</span><span class="pl-c1">{5}</span>()))</pre></div>
<h1><a id="user-content-note-on-val" class="anchor" aria-hidden="true" href="#note-on-val"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Note on <code>Val</code></h1>
<p>In my experience, <code>Val</code> objects are more type-stable than <code>Val</code> types. Favor
<code>Val{:x}()</code> over <code>Val{:x}</code>.</p>
</article></div>