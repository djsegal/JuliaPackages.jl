<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quicktypes" class="anchor" aria-hidden="true" href="#quicktypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuickTypes</h1>
<p><a href="https://travis-ci.org/cstjean/QuickTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/905a77a21939252a3abc6a1c6ecb2188d1803c40115ec828c02f7e6911960f4d/68747470733a2f2f7472617669732d63692e6f72672f6373746a65616e2f517569636b54797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cstjean/QuickTypes.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/cstjean/QuickTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/987a06e19df61c10f18415e6a39f676f01ea4d09552ad0e59c39c07657872090/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6373746a65616e2f517569636b54797065732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/cstjean/QuickTypes.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/cstjean/QuickTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/55d25ca58d452e7fdb4679857ccc865ebed96a9d77c9c3952b376099ad3bc64f/687474703a2f2f636f6465636f762e696f2f6769746875622f6373746a65616e2f517569636b54797065732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/cstjean/QuickTypes.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Types are central to Julia programming, but the built-in <code>struct</code> and <code>mutable struct</code> definitions can be cumbersome to write. QuickTypes.jl provides two alternative macros, <code>@qstruct</code> and <code>@qmutable</code>, with a more convenient syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using QuickTypes      # install with Pkg.add(&quot;QuickTypes&quot;)

# Equivalent to
# struct Wall
#    width
#    height
# end
@qstruct Wall(width, height)

# Optional and keyword-arguments
@qstruct Cat(name, age::Int, nlegs=4; species=&quot;Siamese&quot;)

# Parametric type
@qstruct Pack{T}(animals::Vector{T})

# Inheritance
abstract type Tree end
@qstruct Maple(qty_syrup::Float64) &lt;: Tree

# Mutable structs work the same way
@qmutable Window(height::Float64, width::Float64)

# Arguments can be validated using do-syntax
@qstruct Human(name, height::Float64) do
    @assert height &gt; 0    # arbitrary code, executed in the constructor
end

# Functors (see ?@qfunctor for details)
@qfunctor Adder(x::Int)(y) = x + y
Adder(10)(20)
"><pre><span class="pl-k">using</span> QuickTypes      <span class="pl-c"><span class="pl-c">#</span> install with Pkg.add("QuickTypes")</span>

<span class="pl-c"><span class="pl-c">#</span> Equivalent to</span>
<span class="pl-c"><span class="pl-c">#</span> struct Wall</span>
<span class="pl-c"><span class="pl-c">#</span>    width</span>
<span class="pl-c"><span class="pl-c">#</span>    height</span>
<span class="pl-c"><span class="pl-c">#</span> end</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Wall</span>(width, height)

<span class="pl-c"><span class="pl-c">#</span> Optional and keyword-arguments</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Cat</span>(name, age<span class="pl-k">::</span><span class="pl-c1">Int</span>, nlegs<span class="pl-k">=</span><span class="pl-c1">4</span>; species<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Siamese<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Parametric type</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Pack</span><span class="pl-c1">{T}</span>(animals<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)

<span class="pl-c"><span class="pl-c">#</span> Inheritance</span>
<span class="pl-k">abstract type</span> Tree <span class="pl-k">end</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Maple</span>(qty_syrup<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">&lt;:</span> <span class="pl-c1">Tree</span>

<span class="pl-c"><span class="pl-c">#</span> Mutable structs work the same way</span>
<span class="pl-c1">@qmutable</span> <span class="pl-c1">Window</span>(height<span class="pl-k">::</span><span class="pl-c1">Float64</span>, width<span class="pl-k">::</span><span class="pl-c1">Float64</span>)

<span class="pl-c"><span class="pl-c">#</span> Arguments can be validated using do-syntax</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Human</span>(name, height<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">do</span>
    <span class="pl-c1">@assert</span> height <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>    <span class="pl-c"><span class="pl-c">#</span> arbitrary code, executed in the constructor</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Functors (see ?@qfunctor for details)</span>
<span class="pl-c1">@qfunctor</span> <span class="pl-en">Adder</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>)(y) <span class="pl-k">=</span> x <span class="pl-k">+</span> y
<span class="pl-c1">Adder</span>(<span class="pl-c1">10</span>)(<span class="pl-c1">20</span>)</pre></div>
<h3><a id="user-content-more-options" class="anchor" aria-hidden="true" href="#more-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More options</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# _concise_show takes out the type parameters when printing the object
@qstruct Group{X}(members::X; _concise_show=true)
Group([1,1+1])
&gt; Group([1,2])            # instead of Group{Array{Int64,1}}([1,2])

# `_fp` (for Fully Parametric) automatically adds type parameters. For example:
@qstruct_fp Plane(nwheels, weight::Number; brand=:zoomba)
# is equivalent to `@qstruct Plane{T, U &lt;: Number, V}(nwheels::T, weight::U; brand::V=:zoomba)`
# For even greater specialization, see `?@qstruct_np`.
"><pre><span class="pl-c"><span class="pl-c">#</span> _concise_show takes out the type parameters when printing the object</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Group</span><span class="pl-c1">{X}</span>(members<span class="pl-k">::</span><span class="pl-c1">X</span>; _concise_show<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">Group</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">1</span>])
<span class="pl-k">&gt;</span> <span class="pl-c1">Group</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])            <span class="pl-c"><span class="pl-c">#</span> instead of Group{Array{Int64,1}}([1,2])</span>

<span class="pl-c"><span class="pl-c">#</span> `_fp` (for Fully Parametric) automatically adds type parameters. For example:</span>
<span class="pl-c1">@qstruct_fp</span> <span class="pl-c1">Plane</span>(nwheels, weight<span class="pl-k">::</span><span class="pl-c1">Number</span>; brand<span class="pl-k">=</span><span class="pl-c1">:zoomba</span>)
<span class="pl-c"><span class="pl-c">#</span> is equivalent to `@qstruct Plane{T, U &lt;: Number, V}(nwheels::T, weight::U; brand::V=:zoomba)`</span>
<span class="pl-c"><span class="pl-c">#</span> For even greater specialization, see `?@qstruct_np`.</span></pre></div>
<p>See also <a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a>.</p>
<h2><a id="user-content-destructuring-objects" class="anchor" aria-hidden="true" href="#destructuring-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Destructuring objects</h2>
<p><code>@destruct</code> is used to destructure objects.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct House
    owner
    price
    n_windows
end

@destruct function energy_cost(House(o; n_windows))
    return o == &quot;Bob&quot; ? 10000 : n_windows * 5
end
"><pre><span class="pl-k">struct</span> House
    owner
    price
    n_windows
<span class="pl-k">end</span>

<span class="pl-c1">@destruct</span> <span class="pl-k">function</span> <span class="pl-en">energy_cost</span>(<span class="pl-c1">House</span>(o; n_windows))
    <span class="pl-k">return</span> o <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Bob<span class="pl-pds">"</span></span> <span class="pl-k">?</span> <span class="pl-c1">10000</span> <span class="pl-k">:</span> n_windows <span class="pl-k">*</span> <span class="pl-c1">5</span>
<span class="pl-k">end</span></pre></div>
<p>becomes</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function energy_cost(temp_var::House)
    o = getfield(temp_var, 1)         # get the first field
    n_windows = temp_var.n_windows

    return o == &quot;Bob&quot; ? 10000 : n_windows * 5
end
"><pre><span class="pl-k">function</span> <span class="pl-en">energy_cost</span>(temp_var<span class="pl-k">::</span><span class="pl-c1">House</span>)
    o <span class="pl-k">=</span> <span class="pl-c1">getfield</span>(temp_var, <span class="pl-c1">1</span>)         <span class="pl-c"><span class="pl-c">#</span> get the first field</span>
    n_windows <span class="pl-k">=</span> temp_var<span class="pl-k">.</span>n_windows

    <span class="pl-k">return</span> o <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Bob<span class="pl-pds">"</span></span> <span class="pl-k">?</span> <span class="pl-c1">10000</span> <span class="pl-k">:</span> n_windows <span class="pl-k">*</span> <span class="pl-c1">5</span>
<span class="pl-k">end</span></pre></div>
<p>This enables syntax like <code>@destruct mean_price(DataFrame(; price)) = mean(price)</code>. Destructuring
can also be applied to assignments with <code>@destruct Ref(x) := ...</code> and <code>for</code> loops. It can be nested:
<code>@destruct energy_cost(House(Landlord(name, age))) = ...</code></p>
<p>Type annotations on fields <em>do not participate in dispatch</em>, but are instead converted to.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @d foo(Ref(a::Int)) = a
foo (generic function with 1 method)

julia&gt; foo(Ref(2.0))
2  # not 2.0
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@d</span> <span class="pl-en">foo</span>(<span class="pl-en">Ref</span>(a<span class="pl-k">::</span><span class="pl-c1">Int</span>)) <span class="pl-k">=</span> a
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">foo</span>(<span class="pl-c1">Ref</span>(<span class="pl-c1">2.0</span>))
<span class="pl-c1">2</span>  <span class="pl-c"><span class="pl-c">#</span> not 2.0</span></pre></div>
<p><code>@d ...</code> is a synonym for <code>@destruct</code>. Import it with <code>using QuickTypes: @d</code>.</p>
</article></div>