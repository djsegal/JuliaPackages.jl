<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-quicktypes" class="anchor" aria-hidden="true" href="#quicktypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QuickTypes</h1>
<p><a href="https://travis-ci.org/cstjean/QuickTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/28d7c9c25cb5d86f555e2b41d2dac25de7198aac/68747470733a2f2f7472617669732d63692e6f72672f6373746a65616e2f517569636b54797065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/cstjean/QuickTypes.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/cstjean/QuickTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/997baa352ffb5d3f9dacc0487c699d7f54088287/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6373746a65616e2f517569636b54797065732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/cstjean/QuickTypes.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/cstjean/QuickTypes.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/6cc7265c93be470ae2dbde5833b5b5517ed72dac/687474703a2f2f636f6465636f762e696f2f6769746875622f6373746a65616e2f517569636b54797065732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/cstjean/QuickTypes.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Types are central to Julia programming, but the built-in <code>struct</code> and <code>mutable struct</code> definitions can be cumbersome to write. QuickTypes.jl provides two alternative macros, <code>@qstruct</code> and <code>@qmutable</code>, with a more convenient syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> QuickTypes      <span class="pl-c"><span class="pl-c">#</span> install with Pkg.add("QuickTypes")</span>

<span class="pl-c"><span class="pl-c">#</span> Equivalent to</span>
<span class="pl-c"><span class="pl-c">#</span> struct Wall</span>
<span class="pl-c"><span class="pl-c">#</span>    width</span>
<span class="pl-c"><span class="pl-c">#</span>    height</span>
<span class="pl-c"><span class="pl-c">#</span> end</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Wall</span>(width, height)

<span class="pl-c"><span class="pl-c">#</span> Optional and keyword-arguments</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Cat</span>(name, age<span class="pl-k">::</span><span class="pl-c1">Int</span>, nlegs<span class="pl-k">=</span><span class="pl-c1">4</span>; species<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Siamese<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Parametric type</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Pack</span><span class="pl-c1">{T}</span>(animals<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)

<span class="pl-c"><span class="pl-c">#</span> Inheritance</span>
<span class="pl-k">abstract type</span> Tree <span class="pl-k">end</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Maple</span>(qty_syrup<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">&lt;:</span> <span class="pl-c1">Tree</span>

<span class="pl-c"><span class="pl-c">#</span> Mutable structs work the same way</span>
<span class="pl-c1">@qmutable</span> <span class="pl-c1">Window</span>(height<span class="pl-k">::</span><span class="pl-c1">Float64</span>, width<span class="pl-k">::</span><span class="pl-c1">Float64</span>)

<span class="pl-c"><span class="pl-c">#</span> Arguments can be validated using do-syntax</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Human</span>(name, height<span class="pl-k">::</span><span class="pl-c1">Float64</span>) <span class="pl-k">do</span>
    <span class="pl-c1">@assert</span> height <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>    <span class="pl-c"><span class="pl-c">#</span> arbitrary code, executed in the constructor</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-more-options" class="anchor" aria-hidden="true" href="#more-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More options</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> _concise_show takes out the type parameters when printing the object</span>
<span class="pl-c1">@qstruct</span> <span class="pl-c1">Group</span><span class="pl-c1">{X}</span>(members<span class="pl-k">::</span><span class="pl-c1">X</span>; _concise_show<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">Group</span>([<span class="pl-c1">1</span>,<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">1</span>])
<span class="pl-k">&gt;</span> <span class="pl-c1">Group</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])            <span class="pl-c"><span class="pl-c">#</span> instead of Group{Array{Int64,1}}([1,2])</span>

<span class="pl-c"><span class="pl-c">#</span> `_fp` (for Fully Parametric) automatically adds type parameters. For example:</span>
<span class="pl-c1">@qstruct_fp</span> <span class="pl-c1">Plane</span>(nwheels, weight<span class="pl-k">::</span><span class="pl-c1">Number</span>; brand<span class="pl-k">=</span><span class="pl-c1">:zoomba</span>)
<span class="pl-c"><span class="pl-c">#</span> is equivalent to `@qstruct Plane{T, U &lt;: Number, V}(nwheels::T, weight::U; brand::V=:zoomba)`</span>
<span class="pl-c"><span class="pl-c">#</span> For even greater specialization, see `?@qstruct_np`.</span></pre></div>
<p>See also <a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a>.</p>
</article></div>