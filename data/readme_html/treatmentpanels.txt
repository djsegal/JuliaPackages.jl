<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/nilshg/TreatmentPanels.jl/actions/workflows/ci.yml"><img src="https://github.com/nilshg/TreatmentPanels.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-treatmentpanels" class="anchor" aria-hidden="true" href="#treatmentpanels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TreatmentPanels</h1>
<p dir="auto">Julia package that defines structs to hold panel data for use in causal inference estimation. This
package is used in the package <a href="https://github.com/nilshg/SynthControl"><code>SynthControl</code></a> to provide
input data types for different synthetic control algorithms.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package is registered in the General Registry and can be added via</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;TreatmentPanels&quot;)"><pre class="notranslate"><code>julia&gt; Pkg.add("TreatmentPanels")
</code></pre></div>
<p dir="auto">or in the Pkg REPL</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.7) add TreatmentPanels"><pre class="notranslate"><code>(@v1.7) add TreatmentPanels
</code></pre></div>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<p dir="auto">The basic idea of the package is to combine a <code>DataFrame</code> with a specification of treatment
assignment to construct a an outcome matrix <code>Y</code>, and an accompanying treatment matrix <code>W</code>. Both <code>Y</code>
and <code>W</code> follow the convention that a row is an observational unit and a column is a time period -
i.e. it can be seen as a "wide" panel data set.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using DataFrames, TreatmentPanels

julia&gt; data = DataFrame(region = repeat([&quot;A&quot;, &quot;B&quot;], inner = 5), year = repeat(Date(2000):Year(1):Date(2004), 2), outcome = rand(10))
10×3 DataFrame
 Row │ region  year        outcome   
     │ String  Date        Float64   
─────┼───────────────────────────────
   1 │ A       2000-01-01  0.0605538
   2 │ A       2001-01-01  0.820218
   3 │ A       2002-01-01  0.533732
   4 │ A       2003-01-01  0.144979
   5 │ A       2004-01-01  0.353885
   6 │ B       2000-01-01  0.65294
   7 │ B       2001-01-01  0.353973
   8 │ B       2002-01-01  0.683144
   9 │ B       2003-01-01  0.477427
  10 │ B       2004-01-01  0.702888

julia&gt; bp = BalancedPanel(data, &quot;A&quot; =&gt; Date(2003); id_var = &quot;region&quot;, t_var = &quot;year&quot;, outcome_var = &quot;outcome&quot;)
Balanced Panel - single unit, single continuous treatment
    Treated unit: A
    Number of untreated units: 1
    First treatment period: 2003-01-01
    Number of pretreatment periods: 3
    Number of treatment periods: 2

julia&gt; bp.Y
2×5 Matrix{Float64}:
 0.0605538  0.820218  0.533732  0.144979  0.353885
 0.65294    0.353973  0.683144  0.477427  0.702888

julia&gt; bp.W
2×5 Matrix{Bool}:
 0  0  0  1  1
 0  0  0  0  0"><pre class="notranslate"><code>julia&gt; using DataFrames, TreatmentPanels

julia&gt; data = DataFrame(region = repeat(["A", "B"], inner = 5), year = repeat(Date(2000):Year(1):Date(2004), 2), outcome = rand(10))
10×3 DataFrame
 Row │ region  year        outcome   
     │ String  Date        Float64   
─────┼───────────────────────────────
   1 │ A       2000-01-01  0.0605538
   2 │ A       2001-01-01  0.820218
   3 │ A       2002-01-01  0.533732
   4 │ A       2003-01-01  0.144979
   5 │ A       2004-01-01  0.353885
   6 │ B       2000-01-01  0.65294
   7 │ B       2001-01-01  0.353973
   8 │ B       2002-01-01  0.683144
   9 │ B       2003-01-01  0.477427
  10 │ B       2004-01-01  0.702888

julia&gt; bp = BalancedPanel(data, "A" =&gt; Date(2003); id_var = "region", t_var = "year", outcome_var = "outcome")
Balanced Panel - single unit, single continuous treatment
    Treated unit: A
    Number of untreated units: 1
    First treatment period: 2003-01-01
    Number of pretreatment periods: 3
    Number of treatment periods: 2

julia&gt; bp.Y
2×5 Matrix{Float64}:
 0.0605538  0.820218  0.533732  0.144979  0.353885
 0.65294    0.353973  0.683144  0.477427  0.702888

julia&gt; bp.W
2×5 Matrix{Bool}:
 0  0  0  1  1
 0  0  0  0  0
</code></pre></div>
<p dir="auto">The package provides simple plotting functionality to visualise treatment assignment and outcomes:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Plots

julia&gt; plot(bp, markersize = 10)"><pre class="notranslate"><code>julia&gt; using Plots

julia&gt; plot(bp, markersize = 10)
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="plot1.jpg"><img src="plot1.jpg" alt="Treatment plot" width="400" style="max-width: 100%;"></a></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; plot(bp; kind = &quot;outcome&quot;)"><pre class="notranslate"><code>julia&gt; plot(bp; kind = "outcome")
</code></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="plot2.jpg"><img src="plot2.jpg" alt="Outcome plot" width="400" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-types-provided" class="anchor" aria-hidden="true" href="#types-provided"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Types provided</h2>
<p dir="auto">There are two basic types:</p>
<ul dir="auto">
<li>
<code>BalancedPanel{T1, T2} &lt;: TreatmentPanel</code> holds panel data in which each
unit of observation <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="082c3ea9a87bbf97ff311e5918c10e4e">$i = 1, ..., N$</math-renderer> is observed for <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="082c3ea9a87bbf97ff311e5918c10e4e">$t = 1, ..., T$</math-renderer> periods</li>
<li>
<code>UnbalancedPanel{T1, T2}</code> holds panel data in which there might be a
different number of periods for each unit of observation</li>
</ul>
<p dir="auto">Basic usage of the <code>BalancedPanel</code> constructor is</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="BalancedPanel(data::DataFrame, treatment_assignment; id_var, t_var, outcome_var)::BalancedPanel{T1, T2}"><pre class="notranslate"><code>BalancedPanel(data::DataFrame, treatment_assignment; id_var, t_var, outcome_var)::BalancedPanel{T1, T2}
</code></pre></div>
<p dir="auto">where</p>
<ul dir="auto">
<li>
<code>data</code> is a DataFrame holding the panel data, including columns holding <code>id_var</code>, <code>t_var</code>, and
<code>outcome_var</code>
</li>
<li>
<code>treatment_assignment</code> specifies the units treated and timing of treatment.</li>
<li>
<code>id_var</code> is the name of the column in <code>data</code> holding the unit identifier</li>
<li>
<code>t_var</code> is the name of the column in <code>data</code> holding the time identifier</li>
<li>
<code>outcome_var</code> is the name of the column in <code>data</code> holding data on the  outcome variable of interest</li>
</ul>
<p dir="auto"><code>T1 &lt;: UnitTreatmentType</code> and <code>T2 &lt;: TreatmentDurationType</code> are types indicating the nature the
treatment observed. <code>UnitTreatmentType</code> currently has three concrete types:</p>
<ul dir="auto">
<li>
<code>SingleUnitTreatment</code> - only one unit of observation is subject to treatment</li>
<li>
<code>MultiUnitSimultaneousTreatment</code> - multiple units are being treated in the same time period</li>
<li>
<code>MultiUnitStaggeredTreatment</code> - multiple units are being treated in different periods</li>
</ul>
<p dir="auto"><code>TreatmentDurationType</code> currently has two concrete types:</p>
<ul dir="auto">
<li>
<code>ContinuousTreatment</code> - once a unit is treated, it remains treated for the remainder of the
observation period</li>
<li>
<code>StartEndTreatment</code> - the treatment has an end point in time, i.e. treated units revert to being
untreated at some point</li>
</ul>
<p dir="auto">The types of <code>T1</code> and <code>T2</code> are automatically chosen based on the <code>treatment_assignment</code> passed.</p>
<table>
<thead>
<tr>
<th></th>
<th>Only starting point</th>
<th>Start and end point</th>
<th>Multiple start &amp; end points</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>one unit</strong></td>
<td>Pair{String, Date}</td>
<td>Pair{String, Tuple{Date, Date}}</td>
<td>Pair{String}, Vector{Tuple{Date, Date}}}</td>
</tr>
<tr>
<td><strong>multiple units</strong></td>
<td>Vector{Pair{String, Date}}</td>
<td>Vector{Pair{String, Tuple{Date, Date}}}</td>
<td>Vector{Pair{String, Vector{Tuple{Date, Date}}}}</td>
</tr>
</tbody>
</table>
<p dir="auto">As an example, calling <code>BalancedPanel(data, "unit1" =&gt; Date(2000))</code> will return an object of type
<code>BalancedPanel{SingleUnitTreatment, ContinuousTreatment}</code>, as only one unit is treated and only a
start point for treatment is provided, so it is assumed that all periods from the year 2000 onwards
are treatment periods. <code>BalancedPanel(data, "unit1" =&gt; (Date(2000) =&gt; Date(2010))</code> in contrast will
return a <code>BalancedPanel{SingleUnitTreatment, StartEndTreatment}</code>, and any observations in the year
2011 or after will be considered untreated.</p>
<p dir="auto">While many of the convenience methods in this package are specialised on the concrete types of <code>T1</code>
and <code>T2</code>, their main role is in supporting dispatch for synthetic control models. As an example, a
standard synthetic control model is designed to estimate the impact of a continuous treatment for a
single unit, and hence should accept a <code>BalancedPanel{SingleUnitTreatment, ContinuousTreatment}</code> as
input, while a staggered synthetic control model will accept a
<code>BalancedPanel{MultiUnitStaggeredTreatment, T2}</code>. In this way, the type of the <code>BalancedPanel</code>
passed to an estimation routine can be used to enforce the data structure assumed in the routine.</p>
</article></div>