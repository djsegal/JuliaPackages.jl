<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-arrayallezjl" class="anchor" aria-hidden="true" href="#arrayallezjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ArrayAllez.jl</h1>
<p><a href="https://travis-ci.org/mcabbott/ArrayAllez.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3f42d69a4e0daabf9e739c4078d1c18539943e4f/68747470733a2f2f7472617669732d63692e6f72672f6d636162626f74742f4172726179416c6c657a2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/mcabbott/ArrayAllez.jl.svg?branch=master" style="max-width:100%;"></a></p>
<pre><code>] add ArrayAllez
</code></pre>
<h3><a id="user-content---odot" class="anchor" aria-hidden="true" href="#--odot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>⊙ = \odot</code></h3>
<p>Matrix multiplication, on the last index of one tensor &amp; the first index of the next:</p>
<div class="highlight highlight-source-julia"><pre>three <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">5</span>);
mat <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>,<span class="pl-c1">2</span>);

p1 <span class="pl-k">=</span> three ⊙ mat

p2 <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">reshape</span>(three,:,<span class="pl-c1">5</span>) <span class="pl-k">*</span> mat ,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> same</span>

<span class="pl-k">using</span> Einsum
<span class="pl-c1">@einsum</span> p3[i,j,k] <span class="pl-k">:=</span> three[i,j,s] <span class="pl-k">*</span> mat[s,k]  <span class="pl-c"><span class="pl-c">#</span> same</span></pre></div>
<p>There are also variants <code>⊙ˡ, ⊙ʳ</code> with different gradient definitions,
specifying that only what's on the left (or right) needs to be tracked.
(Likewise <code>*ˡ, *ʳ</code> for ordinary <code>*</code>.)</p>
<h3><a id="user-content-bmm---timesbar" class="anchor" aria-hidden="true" href="#bmm---timesbar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>bmm == ⨱ (\timesbar)</code></h3>
<p>Batched matrix multiplication, which understands all trailing dimensions:</p>
<div class="highlight highlight-source-julia"><pre>four <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>);
three <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">8</span>,<span class="pl-c1">9</span>);

<span class="pl-c1">size</span>(four ⨱ three) <span class="pl-k">==</span> (<span class="pl-c1">2</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)
(four ⨱ three)[:,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">≈</span> four[:,:,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">*</span> three[:,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]

<span class="pl-k">using</span> Einsum
<span class="pl-c1">@einsum</span> out[i,x,y] <span class="pl-k">:=</span> four[i,j,x,y] <span class="pl-k">*</span> three[j,x,y];
out <span class="pl-k">≈</span> four ⨱ three</pre></div>
<p>Corresponding <code>⨱ˡ, ⨱ʳ</code> are not yet defined.</p>
<h3><a id="user-content-dimnames" class="anchor" aria-hidden="true" href="#dimnames"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>dimnames</code></h3>
<p>Both <code>⊙</code> and <code>⨱</code> will propagate names from <a href="https://github.com/invenia/NamedDims.jl">NamedDims.jl</a>.</p>
<h3><a id="user-content-log--exp" class="anchor" aria-hidden="true" href="#log--exp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>log! ∘ exp!</code></h3>
<p>This began as a way to more conveniently choose between <a href="https://github.com/JuliaMath/Yeppp.jl">Yeppp!</a>
and <a href="https://github.com/JuliaMath/AppleAccelerate.jl">AppleAccelerate</a>
and <a href="https://github.com/JuliaMath/IntelVectorMath.jl">IntelVectorMath</a>,
without requiring that any by installed.
The fallback version is just a loop, with <code>@threads</code> for large enough arrays.</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span>,<span class="pl-c1">100</span>);

y <span class="pl-k">=</span> <span class="pl-c1">exp0</span>(x)  <span class="pl-c"><span class="pl-c">#</span> precisely = exp.(x)</span>
x <span class="pl-k">≈</span> <span class="pl-c1">log!</span>(y)  <span class="pl-c"><span class="pl-c">#</span> in-place, just a loop</span>

<span class="pl-k">using</span> AppleAccelerate  <span class="pl-c"><span class="pl-c">#</span> or using IntelVectorMath, or using Yeppp</span>

y <span class="pl-k">=</span> <span class="pl-c1">exp!</span>(x)  <span class="pl-c"><span class="pl-c">#</span> with ! mutates</span>
x <span class="pl-k">=</span> <span class="pl-c1">log_</span>(y)  <span class="pl-c"><span class="pl-c">#</span> with _ copies</span></pre></div>
<p>Besides <code>log!</code> and <code>exp!</code>, there is also <code>scale!</code> which understands rows/columns.
And <code>iscale!</code> which divides, and <code>inv!</code> which is an element-wise inverse.
All have non-mutating versions ending <code>_</code> instead of <code>!</code>, and simple broadcast-ed versions with <code>0</code>.</p>
<div class="highlight highlight-source-julia"><pre>m <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">3</span>,<span class="pl-c1">7</span>)
v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
r <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">7</span>)<span class="pl-k">'</span>

<span class="pl-c1">scale0</span>(m, <span class="pl-c1">99</span>)  <span class="pl-c"><span class="pl-c">#</span> simply m .* 99</span>
<span class="pl-c1">scale_</span>(m, v)   <span class="pl-c"><span class="pl-c">#</span> like m .* v but using rmul!</span>
<span class="pl-c1">iscale!</span>(m, r)  <span class="pl-c"><span class="pl-c">#</span> like m ./ r but mutating.</span>
m</pre></div>
<h3><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>∇</code></h3>
<p>These commands all make some attempt to define gradients for use with
<a href="https://github.com/FluxML/Tracker.jl">Tracker</a> ans
<a href="https://github.com/FluxML/Zygote.jl">Zygote</a>, but caveat emptor.
There is also an <code>exp!!</code> which mutates both its forward input and its backward gradient,
which may be a terrible idea.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Tracker
x <span class="pl-k">=</span> <span class="pl-c1">param</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">5</span>));
y <span class="pl-k">=</span> <span class="pl-c1">exp_</span>(x)

Tracker<span class="pl-k">.</span><span class="pl-c1">back!</span>(<span class="pl-c1">sum_</span>(<span class="pl-c1">exp!</span>(x)))
x<span class="pl-k">.</span>data <span class="pl-k">==</span> y <span class="pl-c"><span class="pl-c">#</span> true</span>
x<span class="pl-k">.</span>grad</pre></div>
<p>This package also defines gradients for <code>prod</code> (overwriting an incorrect one) and <code>cumprod</code>,
as in <a href="https://github.com/FluxML/Flux.jl/pull/524">this PR</a>.</p>
<h3><a id="user-content-array_" class="anchor" aria-hidden="true" href="#array_"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>Array_</code></h3>
<p>An experiment with <a href="https://github.com/JuliaCollections/LRUCache.jl">LRUCache</a> for working space:</p>
<div class="highlight highlight-source-julia"><pre>x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2000</span>)<span class="pl-k">'</span> <span class="pl-c"><span class="pl-c">#</span> turns off below this size</span>

<span class="pl-c1">copy_</span>(<span class="pl-c1">:copy</span>, x)
<span class="pl-c1">similar_</span>(<span class="pl-c1">:sim</span>, x)
<span class="pl-c1">Array_</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">:new</span>, <span class="pl-c1">5</span>,<span class="pl-c1">1000</span>) <span class="pl-c"><span class="pl-c">#</span> @btime 200 ns, 32 bytes</span>

<span class="pl-c1">inv_</span>(<span class="pl-c1">:inv</span>, x) <span class="pl-c"><span class="pl-c">#</span> most of the _ functions can opt-in</span></pre></div>
<h3><a id="user-content-dropdims" class="anchor" aria-hidden="true" href="#dropdims"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@dropdims</code></h3>
<p>This macro wraps reductions like <code>sum(A; dims=...)</code> in <code>dropdims()</code>.
It understands things like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@dropdims</span> <span class="pl-c1">sum</span>(<span class="pl-c1">10</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">10</span>); dims<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">do</span> x
    <span class="pl-c1">trunc</span>(Int, x)
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-see-also" class="anchor" aria-hidden="true" href="#see-also"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>See Also</h3>
<ul>
<li>
<p><a href="https://github.com/rprechelt/Vectorize.jl">Vectorize.jl</a> is a more comprehensive wrapper.</p>
</li>
<li>
<p><a href="https://github.com/Jutho/Strided.jl">Strided.jl</a> adds <code>@threads</code> to broadcasting.</p>
</li>
<li>
<p><a href="https://github.com/chriselrod/LoopVectorization.jl">LoopVectorization.jl</a> adds AVX black magic.</p>
</li>
</ul>
</article></div>