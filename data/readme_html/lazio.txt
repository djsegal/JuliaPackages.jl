<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/evetion/LazIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7344688b28bf9da5e19b9b6f87d05b2db2d9779d4373aff3035b4a1bed00597b/68747470733a2f2f7472617669732d63692e6f72672f65766574696f6e2f4c617a494f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/evetion/LazIO.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/evetion/lazio-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/825120882703d8d3b76576e0d3ceaf6b2b23675888c61898ae16eb4905a913ad/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f656a34766838323433656d68673565732f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ej4vh8243emhg5es/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/evetion/LazIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a1c6562c470e8a7cc95d6b83d40c096068039c48bc223ea162a19d8c4091456e/68747470733a2f2f636f6465636f762e696f2f67682f65766574696f6e2f4c617a494f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/evetion/LazIO.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-lazio" class="anchor" aria-hidden="true" href="#lazio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LazIO</h1>
<p>Extends LasIO with LASzip integration.</p>
<p>Uses the <a href="https://github.com/LASzip/LASzip/">LASzip</a> shared library to read compressed las files (*.laz) into the uncompressed format that <a href="https://github.com/visr/LasIO.jl">LasIO</a> reads natively.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using LazIO

# Load header and all points
julia&gt; LazIO.load(&quot;test/libLAS_1.2.laz&quot;)
(LasHeader with 497536 points.
, Vector{LasIO.LasPoint0} with 497536 points.
)

# Load header and range of points
julia&gt; h, p = LazIO.load(&quot;test/libLAS_1.2.laz&quot;, range=2:10)
(LasHeader with 497536 points.
, Vector{LasIO.LasPoint0} with 9 points.
)

# Open file and iterate over points (streaming)
julia&gt; ds = LazIO.open(&quot;test/libLAS_1.2.laz&quot;)
LazDataset of test/libLAS_1.2.laz with 497536 points.

julia&gt; sum = map(Int32, (0,0,0))  # Int32, not yet scaled and offset
julia&gt; for p in ds
           global sum = sum .+ (p.X, p.Y, p.Z)
       end
julia&gt; sum ./ ds.header.number_of_point_records
(3497.988658107152, 3741.789882541163, -164.49942114741447)

# Or use the tables interface
julia&gt; using DataFrames
julia&gt; DataFrame(ds)
497536×19 DataFrame. Omitted printing of 12 columns
│ Row    │ X         │ Y        │ Z     │ intensity │ return_number
│        │ Int32     │ Int32    │ Int32 │ UInt16    │ UInt8
├────────┼───────────┼──────────┼───────┼───────────┼──────────────
│ 1      │ 144013394 │ 37500023 │ 84666 │ 0x00fa    │ 0x00
│ 2      │ 144012426 │ 37500049 │ 84655 │ 0x00f5    │ 0x00
│ 3      │ 144011447 │ 37500077 │ 84644 │ 0x00ef    │ 0x00
│ 4      │ 144010469 │ 37500104 │ 84632 │ 0x00fb    │ 0x00
⋮
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LazIO

<span class="pl-c"><span class="pl-c">#</span> Load header and all points</span>
julia<span class="pl-k">&gt;</span> LazIO<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test/libLAS_1.2.laz<span class="pl-pds">"</span></span>)
(LasHeader with <span class="pl-c1">497536</span> points.
, Vector{LasIO<span class="pl-k">.</span>LasPoint0} with <span class="pl-c1">497536</span> points.
)

<span class="pl-c"><span class="pl-c">#</span> Load header and range of points</span>
julia<span class="pl-k">&gt;</span> h, p <span class="pl-k">=</span> LazIO<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test/libLAS_1.2.laz<span class="pl-pds">"</span></span>, range<span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
(LasHeader with <span class="pl-c1">497536</span> points.
, Vector{LasIO<span class="pl-k">.</span>LasPoint0} with <span class="pl-c1">9</span> points.
)

<span class="pl-c"><span class="pl-c">#</span> Open file and iterate over points (streaming)</span>
julia<span class="pl-k">&gt;</span> ds <span class="pl-k">=</span> LazIO<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>test/libLAS_1.2.laz<span class="pl-pds">"</span></span>)
LazDataset of test<span class="pl-k">/</span>libLAS_1.<span class="pl-c1">2.</span>laz with <span class="pl-c1">497536</span> points.

julia<span class="pl-k">&gt;</span> sum <span class="pl-k">=</span> <span class="pl-c1">map</span>(Int32, (<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>))  <span class="pl-c"><span class="pl-c">#</span> Int32, not yet scaled and offset</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> p <span class="pl-k">in</span> ds
           <span class="pl-k">global</span> sum <span class="pl-k">=</span> sum <span class="pl-k">.+</span> (p<span class="pl-k">.</span>X, p<span class="pl-k">.</span>Y, p<span class="pl-k">.</span>Z)
       <span class="pl-k">end</span>
julia<span class="pl-k">&gt;</span> sum <span class="pl-k">./</span> ds<span class="pl-k">.</span>header<span class="pl-k">.</span>number_of_point_records
(<span class="pl-c1">3497.988658107152</span>, <span class="pl-c1">3741.789882541163</span>, <span class="pl-k">-</span><span class="pl-c1">164.49942114741447</span>)

<span class="pl-c"><span class="pl-c">#</span> Or use the tables interface</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames
julia<span class="pl-k">&gt;</span> <span class="pl-c1">DataFrame</span>(ds)
<span class="pl-c1">497536</span><span class="pl-k">×</span><span class="pl-c1">19</span> DataFrame. Omitted printing of <span class="pl-c1">12</span> columns
│ Row    │ X         │ Y        │ Z     │ intensity │ return_number
│        │ Int32     │ Int32    │ Int32 │ UInt16    │ UInt8
├────────┼───────────┼──────────┼───────┼───────────┼──────────────
│ <span class="pl-c1">1</span>      │ <span class="pl-c1">144013394</span> │ <span class="pl-c1">37500023</span> │ <span class="pl-c1">84666</span> │ <span class="pl-c1">0x00fa</span>    │ <span class="pl-c1">0x00</span>
│ <span class="pl-c1">2</span>      │ <span class="pl-c1">144012426</span> │ <span class="pl-c1">37500049</span> │ <span class="pl-c1">84655</span> │ <span class="pl-c1">0x00f5</span>    │ <span class="pl-c1">0x00</span>
│ <span class="pl-c1">3</span>      │ <span class="pl-c1">144011447</span> │ <span class="pl-c1">37500077</span> │ <span class="pl-c1">84644</span> │ <span class="pl-c1">0x00ef</span>    │ <span class="pl-c1">0x00</span>
│ <span class="pl-c1">4</span>      │ <span class="pl-c1">144010469</span> │ <span class="pl-c1">37500104</span> │ <span class="pl-c1">84632</span> │ <span class="pl-c1">0x00fb</span>    │ <span class="pl-c1">0x00</span>
⋮</pre></div>
</article></div>