<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fortranstrings" class="anchor" aria-hidden="true" href="#fortranstrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FortranStrings</h1>
<p><a href="https://travis-ci.com/denius/FortranStrings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/90c547ef2533e74d696ff5ab637504038dad97083d90bd939a588461eb820e4f/68747470733a2f2f7472617669732d63692e636f6d2f64656e6975732f466f727472616e537472696e67732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/denius/FortranStrings.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/denius/FortranStrings.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c816f55ede502ce60bbdcc5471d8bbcc1857feff51cb27d2b49230cf23dccf9f/68747470733a2f2f636f6465636f762e696f2f67682f64656e6975732f466f727472616e537472696e67732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/denius/FortranStrings.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>FortranStrings.jl</code> is a datatype for Fortran strings emulation. These strings have two main points:</p>
<ul>
<li><code>FortranString</code> is mutable (but not resizable)</li>
<li>flexibility in assignment: can truncate or fill the right side with spaces if the length is not coincide.</li>
</ul>
<p>The original Fortran strings are composed of the 1-byte elements. To create such strings:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = FortranString{UInt8}(&quot;ABC&quot;)
"><pre>s <span class="pl-k">=</span> <span class="pl-c1">FortranString</span><span class="pl-c1">{UInt8}</span>(<span class="pl-s"><span class="pl-pds">"</span>ABC<span class="pl-pds">"</span></span>)</pre></div>
<p>or, the same with the shorthand macro <code>@F8_str</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="s = F8&quot;ABC&quot;
"><pre>s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>ABC<span class="pl-pds">"</span></span></pre></div>
<p>It is also possible to create strings with <code>Char</code> elements, or any other:
<code>str = FortranString{Char}("ABC")</code> (or <code>str = F"ABC"</code>), <code>S = FortranString{UInt64}("ABC")</code>.</p>
<p>Assignment must be done element-wise with <code>.=</code>. Other element-wise operations (<code>.</code>) are supported also.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; s = F8&quot;ABC&quot;
F8&quot;ABC&quot;

julia&gt; s .= &quot;abc&quot;
F8&quot;abc&quot;

julia&gt; s .= &quot;DE&quot;
F8&quot;DE &quot;

julia&gt; s .= &quot;f&quot; * &quot;abc&quot;
F8&quot;fab&quot;

julia&gt; str = F&quot;ABC&quot;
F&quot;ABC&quot;

julia&gt; str .+= 1
F&quot;BCD&quot;

julia&gt; str[2:3] .= s[1:3]
2-element view(::FortranString{Char}, 2:3) with eltype Char:
 'f': ASCII/Unicode U+0066 (category Ll: Letter, lowercase)
 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)

julia&gt; str
F&quot;Bfa&quot;

julia&gt; @btime $s .= uppercase.($s)
  11.272 ns (0 allocations: 0 bytes)
F8&quot;FAB&quot;
"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>ABC<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>ABC<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> s <span class="pl-k">.=</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>abc<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> s <span class="pl-k">.=</span> <span class="pl-s"><span class="pl-pds">"</span>DE<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>DE <span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> s <span class="pl-k">.=</span> <span class="pl-s"><span class="pl-pds">"</span>f<span class="pl-pds">"</span></span> <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>fab<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>ABC<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>ABC<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> str <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>BCD<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> str[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">.=</span> s[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
<span class="pl-c1">2</span><span class="pl-k">-</span>element <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">FortranString{Char}</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Char<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">'</span>f<span class="pl-pds">'</span></span>: ASCII<span class="pl-k">/</span>Unicode U<span class="pl-k">+</span><span class="pl-c1">0066</span> (category Ll<span class="pl-k">:</span> Letter, lowercase)
 <span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>: ASCII<span class="pl-k">/</span>Unicode U<span class="pl-k">+</span><span class="pl-c1">0061</span> (category Ll<span class="pl-k">:</span> Letter, lowercase)

julia<span class="pl-k">&gt;</span> str
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>Bfa<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>s <span class="pl-k">.=</span> <span class="pl-c1">uppercase</span>.(<span class="pl-k">$</span>s)
  <span class="pl-c1">11.272</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F8</span>"</span>FAB<span class="pl-pds">"</span></span></pre></div>
<p>Internally, the <code>FortranString{T}</code> is just a wrapper for <code>Vector{T}</code> with a bunch of broadcasting routines.</p>
<h2><a id="user-content-quotes-escaping" class="anchor" aria-hidden="true" href="#quotes-escaping"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quotes escaping</h2>
<p>In Fortran strings, the quotes with which the strings were created must be escaped by doubling, for example Fortran's: <code>'Can''t be with only single quote inside'</code> or <code>"Should be ""doubled"""</code>. To simplify conversion from Fortran the escape flag <code>qq</code> or <code>d</code> has been introduced:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; str = F&quot;Should be \&quot;\&quot;doubled\&quot;\&quot;&quot;d
F&quot;Should be \&quot;doubled\&quot;&quot;
"><pre>julia<span class="pl-k">&gt;</span> str <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>Should be <span class="pl-cce">\"\"</span>doubled<span class="pl-cce">\"\"</span><span class="pl-pds">"d</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>Should be <span class="pl-cce">\"</span>doubled<span class="pl-cce">\"</span><span class="pl-pds">"</span></span></pre></div>
<p>Similarly, using the <code>q</code> flag, single quotes should be doubled:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; s = F&quot;Can''t be with only single quote inside&quot;
F&quot;Can't be with only single quote inside&quot;
"><pre>julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>Can''t be with only single quote inside<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>Can't be with only single quote inside<span class="pl-pds">"</span></span></pre></div>
<p>Although, in both cases, the escaping-doubling is not necessary when using the <code>q</code> or<code> qq</code> flags, because single <code>'</code> or <code>"</code> produce single ones.</p>
<p>All this escaping only works when the <code>FortranString</code> is created from <code>String</code>, and this does not apply when a string is created from an <code>Vector</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; FortranString{Char}([0x27, 0x27, 0x61, 0x62, 0x63, 0x27, 0x27])
F&quot;''abc''&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">FortranString</span><span class="pl-c1">{Char}</span>([<span class="pl-c1">0x27</span>, <span class="pl-c1">0x27</span>, <span class="pl-c1">0x61</span>, <span class="pl-c1">0x62</span>, <span class="pl-c1">0x63</span>, <span class="pl-c1">0x27</span>, <span class="pl-c1">0x27</span>])
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">F</span>"</span>''abc''<span class="pl-pds">"</span></span></pre></div>
</article></div>