<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-instantiatefromurl" class="anchor" aria-hidden="true" href="#instantiatefromurl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InstantiateFromURL</h1>
<p>A way to bind dependency information to Julia assets without the need to pass around TOML files.</p>
<p>The use case is that your notebooks would have something like the following in their first cell:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using InstantiateFromURL
github_project(&quot;QuantEcon/QuantEconLecturePackages&quot;)
"><pre><code>using InstantiateFromURL
github_project("QuantEcon/QuantEconLecturePackages")
</code></pre></div>
<p>Based on <a href="https://github.com/vchuravy">Valentin Churavy</a>'s idea in <a href="https://github.com/JuliaLang/IJulia.jl/issues/673#issuecomment-425306944">https://github.com/JuliaLang/IJulia.jl/issues/673#issuecomment-425306944</a></p>
<h2><a id="user-content-overviewmethod-signature" class="anchor" aria-hidden="true" href="#overviewmethod-signature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview/Method Signature</h2>
<p>[<strong>Note</strong>] To account for changes in <code>IJulia</code> (where notebooks will now look recursively up the tree for TOML, and use either what they find or the default <code>v1.x</code> environment), we've introduced the new function/entrypoint below. The functions we had previously provided are still around, in the subsequent <strong>deprecated</strong> section.</p>
<p>The signature is:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function github_project(reponame; # e.g., &quot;QuantEcon/quantecon-notebooks-jl&quot;
    path = &quot;&quot;, # relative path within the repo (root by default)
    version = &quot;master&quot;,
    force = false,
    instantiate = false)
"><pre><code>function github_project(reponame; # e.g., "QuantEcon/quantecon-notebooks-jl"
    path = "", # relative path within the repo (root by default)
    version = "master",
    force = false,
    instantiate = false)
</code></pre></div>
<p>Where:</p>
<ul>
<li>
<p><code>reponame</code> and <code>path</code> identify the TOML on the internet. Reponame is something like <code>"QuantEcon/QuantEconLecturePackages"</code> The path refers to the path to the TOML within the source repo, and is <code>""</code> by default (i.e., referring to top-level.)</p>
</li>
<li>
<p><code>version</code> refers to a specific version of the TOML, corresponding to a <strong>github tag</strong> of the <code>reponame</code> repo.</p>
</li>
<li>
<p><code>force</code> decides whether or not we're comfortable using whatever project-specific IJulia finds (if there is any.) Essentially, <strong>the <code>force</code> parameter decides whether to use a soft or hard match.</strong></p>
</li>
<li>
<p><code>instantiate</code> decides whether or not to instantiate the project upon activation.</p>
</li>
</ul>
<p>The logic here is:</p>
<ul>
<li>
<p>If a <strong>local project</strong> is activated (i.e., if there is TOML up the source tree), use that unless <code>force = true</code>, and print intelligent information about it (e.g., if we asked for version <code>v0.2.1</code>, and version <code>v0.2.0</code> is found, it will still use <code>v0.2.0</code>, and alert you to the difference.)</p>
</li>
<li>
<p>...But, if <code>force = true</code>, then regardless of what is activated, the precise set of <code>Project.toml, Manifest.toml</code> will be pulled down to the notebook's directory from the specified internet location.</p>
</li>
</ul>
<h2><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utilities</h2>
<p>We also defined:</p>
<ul>
<li><code>packages_to_default_environment()</code>, which will take the current environment's packages, and <code>Pkg.add()</code> them to your <code>v1.x</code> environment. Useful for "seeding" or setting up new Julia installs, or making sure that deps for one project are available for other projects, etc.</li>
</ul>
<h2><a id="user-content-deprecated-methods" class="anchor" aria-hidden="true" href="#deprecated-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deprecated Methods</h2>
<p>For <code>activate_github</code>, the signature is:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function activate_github(reponame; # like &quot;QuantEcon/QuantEconLecturePackages&quot;
                        tag = nothing, # could be &quot;master&quot; or a git tag
                        sha = nothing, # could point to a specific commit
                        force = false, # will overwrite the local version of this TOML if true
                        add_default_environment = false) # will add these projects to the default (e.g., v1.1) TOML if true
"><pre><code>function activate_github(reponame; # like "QuantEcon/QuantEconLecturePackages"
                        tag = nothing, # could be "master" or a git tag
                        sha = nothing, # could point to a specific commit
                        force = false, # will overwrite the local version of this TOML if true
                        add_default_environment = false) # will add these projects to the default (e.g., v1.1) TOML if true
</code></pre></div>
<p>Example calls include:</p>
<ul>
<li><code>activate_github("QuantEcon/QuantEconLecturePackages")</code></li>
<li><code>activate_github("QuantEcon/QuantEconLecturePackages", tag = "master")</code></li>
<li><code>activate_github("QuantEcon/QuantEconLecturePackages", tag = "v0.9.5")</code></li>
<li><code>activate_github("QuantEcon/QuantEconLecturePackages", sha = "0c2985")</code></li>
</ul>
<p>For <code>activate_github_path</code>, the signature is:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="function activate_github_path(reponame; # something like &quot;QuantEcon/SimpleDifferentialOperators.jl&quot;
                                path = &quot;&quot;, # like &quot;docs/examples&quot;, or where in the (master) source tree the TOML is
                                tag = &quot;master&quot;,
                                force = false,
                                activate = true) # decide whether to `activate; instantiate; precompile` or not
"><pre><code>function activate_github_path(reponame; # something like "QuantEcon/SimpleDifferentialOperators.jl"
                                path = "", # like "docs/examples", or where in the (master) source tree the TOML is
                                tag = "master",
                                force = false,
                                activate = true) # decide whether to `activate; instantiate; precompile` or not
</code></pre></div>
<p><strong>Note:</strong> Because switching project files currently leads to repeat precompilations in Julia, <code>activate</code> will only bind if the current Project.toml (i.e., <code>Base.active_project()</code>) is in a different location than the pwd (i.e., <code>joinpath(pwd(), "Project.toml")</code>.)</p>
</article></div>