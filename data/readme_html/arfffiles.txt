<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-arfffilesjl" class="anchor" aria-hidden="true" href="#arfffilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ARFFFiles.jl</h1>
<p>Load and save <a href="https://waikato.github.io/weka-wiki/formats_and_processing/arff/" rel="nofollow">ARFF (Attribute Relation File Format)</a> files.</p>
<p>Integrated into <a href="https://github.com/JuliaData/Tables.jl"><code>Tables.jl</code></a> (for easily converting to your favourite table type) and <a href="https://github.com/JuliaIO/FileIO.jl"><code>FileIO.jl</code></a> (for generic file loading).</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add ARFFFiles
"><pre><code>] add ARFFFiles
</code></pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<p>To load an ARFF file as a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ARFFFiles, DataFrames
df = ARFFFiles.load(DataFrame, &quot;mytable.arff&quot;)
"><pre><span class="pl-k">using</span> ARFFFiles, DataFrames
df <span class="pl-k">=</span> ARFFFiles<span class="pl-k">.</span><span class="pl-c1">load</span>(DataFrame, <span class="pl-s"><span class="pl-pds">"</span>mytable.arff<span class="pl-pds">"</span></span>)</pre></div>
<p>Replace <code>DataFrame</code> with your favourite table type, or leave it out to get a vector of named tuples.</p>
<p>To save any Tables.jl-compatible table:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ARFFFiles
ARFFFiles.save(&quot;mytable.arff&quot;, df)
"><pre><span class="pl-k">using</span> ARFFFiles
ARFFFiles<span class="pl-k">.</span><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>mytable.arff<span class="pl-pds">"</span></span>, df)</pre></div>
<h2><a id="user-content-loading" class="anchor" aria-hidden="true" href="#loading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading</h2>
<ul>
<li><code>load(file)</code> loads the table in the given file as a vector of named tuples.</li>
<li><code>load(io, [own=false])</code> loads the table from the given io stream.</li>
<li><code>load(f, ...)</code> is equivalent to <code>f(loadstreaming(...))</code> but ensures the file is closed afterwards.</li>
<li><code>loadstreaming(io, [own=false])</code> returns a <code>ARFFReader</code> object <code>r</code>:
<ul>
<li><code>r.header</code> contains the header parsed from <code>io</code>.</li>
<li><code>read(r)</code> reads the whole table as a vector of named tuples.</li>
<li><code>read(r, n)</code> reads up to <code>n</code> rows.</li>
<li><code>read!(r, x)</code> reads into the pre-allocated vector <code>x</code> and returns the number of rows read.</li>
<li><code>close(r)</code> closes the underlying io stream, unless <code>own=false</code>.</li>
<li><code>r</code> satisfies the <code>Tables.jl</code> interface, so can be materialized as a table.</li>
</ul>
</li>
</ul>
<p><strong>Types.</strong> Numbers load as <code>Float64</code>, strings as <code>String</code>, dates as <code>DateTime</code> and nominals as <code>CategoricalValue{String}</code> (from <a href="https://github.com/JuliaData/CategoricalArrays.jl"><code>CategoricalArrays</code></a>).</p>
<p><strong>Keyword options.</strong></p>
<ul>
<li><code>missingcols=true</code>: By default we assume all columns can contain missing data (<code>?</code>). This option controls this behaviour. It can be <code>true</code>, <code>false</code>, a vector or set of symbols, or a function taking a symbol and returning true if that column can contain missings.</li>
<li><code>missingnan=false</code>: Convert missing values in numeric columns to NaN. This is equivalent to excluding these columns in <code>missingcols</code>.</li>
<li><code>categorical=true</code>: When false, nominal columns are converted to <code>String</code> instead of <code>CategoricalValue{String}</code>.</li>
</ul>
<h2><a id="user-content-saving" class="anchor" aria-hidden="true" href="#saving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Saving</h2>
<ul>
<li><code>save(file, table)</code> saves the Tables.jl-compatible <code>table</code> to <code>file</code> (a filename or IO stream).</li>
</ul>
<p><strong>Types.</strong> <code>Real</code> is saved as numeric, <code>AbstractString</code> as string, <code>DateTime</code> and <code>Date</code> as date, and <code>CategoricalValue{&lt;:AbstractString}</code> as nominal.</p>
<p><strong>Keyword options.</strong></p>
<ul>
<li><code>relation="data"</code>: The relation name.</li>
<li><code>comment</code>: A comment to print at the top of the file.</li>
</ul>
</article></div>