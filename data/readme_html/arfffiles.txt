<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-arfffilesjl" class="anchor" aria-hidden="true" href="#arfffilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ARFFFiles.jl</h1>
<p dir="auto">Load and save <a href="https://waikato.github.io/weka-wiki/formats_and_processing/arff/" rel="nofollow">ARFF (Attribute Relation File Format)</a> files.</p>
<p dir="auto">Integrated into <a href="https://github.com/JuliaData/Tables.jl"><code>Tables.jl</code></a> for easily converting to your favourite table types.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="] add ARFFFiles"><pre class="notranslate"><code>] add ARFFFiles
</code></pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start</h2>
<p dir="auto">To load an ARFF file as a <code>DataFrame</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ARFFFiles, DataFrames
df = ARFFFiles.load(DataFrame, &quot;mytable.arff&quot;)"><pre><span class="pl-k">using</span> ARFFFiles, DataFrames
df <span class="pl-k">=</span> ARFFFiles<span class="pl-k">.</span><span class="pl-c1">load</span>(DataFrame, <span class="pl-s"><span class="pl-pds">"</span>mytable.arff<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Replace <code>DataFrame</code> with your favourite table type, or leave it out to get an <code>ARFFTable</code>.</p>
<p dir="auto">To save any Tables.jl-compatible table:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ARFFFiles
ARFFFiles.save(&quot;mytable.arff&quot;, df)"><pre><span class="pl-k">using</span> ARFFFiles
ARFFFiles<span class="pl-k">.</span><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>mytable.arff<span class="pl-pds">"</span></span>, df)</pre></div>
<h2 dir="auto"><a id="user-content-loading" class="anchor" aria-hidden="true" href="#loading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading</h2>
<ul dir="auto">
<li><code>load(file)</code> loads the table in the given file (filename or IO stream) as an <code>ARFFTable</code>.</li>
<li><code>load(func, file)</code> is equivalent to <code>func(load(file))</code> but operates recursively on any relational columns.</li>
<li><code>loadstreaming(file)</code> returns a <code>ARFFReader</code> object <code>r</code>:
<ul dir="auto">
<li>Satisfies the <code>Tables.jl</code> interface, so can be materialized as a table.</li>
<li><code>r.header</code> contains the header parsed from <code>io</code>.</li>
<li>Iterates rows of type <code>ARFFRow</code>.</li>
<li><code>read(r)</code>, <code>read(r, n)</code> and <code>read!(r, x)</code> reads rows of the table.</li>
<li><code>readcolumns(r, [maxbytes=nothing])</code> reads the whole table into a columnar format. Specify <code>maxbytes</code> to read a portion of the rows.</li>
<li><code>close(r)</code> closes the underlying io stream, unless <code>own=false</code>.</li>
</ul>
</li>
<li><code>loadstreaming(func, file)</code> is equivalent to <code>func(loadstreaming(file))</code> but ensures the file is closed afterwards.</li>
<li><code>loadchunks(file)</code> returns an iterator of <code>ARFFTable</code>s for efficiently streaming very large tables. Equivalent to <code>Tables.partitions(loadstreaming(file))</code>.</li>
<li><code>loadchunks(func, file)</code> is equivalent to <code>func(loadchunks(file))</code> but ensures the file is closed afterwards.</li>
</ul>
<p dir="auto"><strong>Types.</strong> Numbers load as <code>Float64</code>, strings as <code>String</code>, dates as <code>DateTime</code>, nominals as <code>CategoricalValue{String}</code> (from <a href="https://github.com/JuliaData/CategoricalArrays.jl"><code>CategoricalArrays</code></a>) and relationals as <code>ARFFTable</code>.</p>
<p dir="auto"><strong>Keyword options.</strong></p>
<ul dir="auto">
<li><code>missingcols=:auto</code>: Controls which columns may contain missing data (<code>?</code>). It can be <code>:auto</code>, <code>:all</code>, <code>:none</code>, a set or vector of column names (symbols), or a function taking a symbol and returning true if that column can contain missing. If the table is being read in a streaming fashion, then <code>:auto</code> behaves the same as <code>:all</code>.</li>
<li><code>missingnan=false</code>: Convert missing values in numeric columns to NaN. This is equivalent to excluding these columns in <code>missingcols</code>.</li>
<li><code>categorical=true</code>: When false, nominal columns are converted to <code>String</code> instead of <code>CategoricalValue{String}</code>.</li>
<li><code>chunkbytes=2^26</code>: Read approximately this many bytes per chunk when iterating over chunks or rows.</li>
<li><code>own=false</code>: Signals whether or not to close the underlying IO stream when <code>close(::ARFFReader)</code> is called.</li>
</ul>
<h2 dir="auto"><a id="user-content-saving" class="anchor" aria-hidden="true" href="#saving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Saving</h2>
<ul dir="auto">
<li><code>save(file, table)</code> saves the Tables.jl-compatible <code>table</code> to <code>file</code> (a filename or IO stream).</li>
</ul>
<p dir="auto"><strong>Types.</strong> <code>Real</code> is saved as numeric, <code>AbstractString</code> as string, <code>DateTime</code> and <code>Date</code> as date, and <code>CategoricalValue{&lt;:AbstractString}</code> as nominal.</p>
<p dir="auto"><strong>Keyword options.</strong></p>
<ul dir="auto">
<li><code>relation="data"</code>: The relation name.</li>
<li><code>comment</code>: A comment to print at the top of the file.</li>
</ul>
</article></div>