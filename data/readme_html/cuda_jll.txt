<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cuda_jlljl" class="anchor" aria-hidden="true" href="#cuda_jlljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CUDA_jll.jl</h1>
<p>This is an autogenerated package constructed using <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl"><code>BinaryBuilder.jl</code></a>.</p>
<h2><a id="user-content-products" class="anchor" aria-hidden="true" href="#products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Products</h2>
<p>The code bindings within this package are autogenerated from the following <code>Products</code> defined within the <code>build_tarballs.jl</code> file that generated this package:</p>
<div class="highlight highlight-source-julia"><pre>products <span class="pl-k">=</span> [
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppitc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppitc64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppitc</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppisu<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppisu64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppisu</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppidei<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppidei64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppidei</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnvblas<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nvblas64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnvblas</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppist<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppist64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppist</span>),
    <span class="pl-c1">FileProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>share/libdevice/libdevice.10.bc<span class="pl-pds">"</span></span>], <span class="pl-c1">:libdevice</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnvToolsExt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nvToolsExt64_1<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnvtoolsext</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnvgraph<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nvgraph64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcurand</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcurand<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>curand64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcurand</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnpps<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>npps64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnpps</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppicom<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppicom64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppicom</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcusparse<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cusparse64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcusparse</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppicc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppicc64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppicc</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcusolver<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cusolver64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcusolver</span>),
    <span class="pl-c1">FileProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>lib/libcudadevrt.a<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>lib/cudadevrt.lib<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcudadevrt</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppif<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppif64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppif</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppim<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppim64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppim</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcudart<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cudart64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcudart</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppc64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppc</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcufftw<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cufftw64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcufftw</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcufft<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cufft64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcufft</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppial<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppial64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppial</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnppig<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nppig64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnppig</span>),
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>nvdisasm<span class="pl-pds">"</span></span>], <span class="pl-c1">:nvdisasm</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcupti<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cupti64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcupti</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libnvvm<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>nvvm64_32_0<span class="pl-pds">"</span></span>], <span class="pl-c1">:libnvvm</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libcublas<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>cublas64_92<span class="pl-pds">"</span></span>], <span class="pl-c1">:libcublas</span>)
]</pre></div>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage example</h2>
<p>For example purposes, we will assume that the following products were defined in the imaginary package <code>Example_jll</code>:</p>
<div class="highlight highlight-source-julia"><pre>products <span class="pl-k">=</span> [
    <span class="pl-c1">FileProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>src/data.txt<span class="pl-pds">"</span></span>, <span class="pl-c1">:data_txt</span>),
    <span class="pl-c1">LibraryProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>libdataproc<span class="pl-pds">"</span></span>, <span class="pl-c1">:libdataproc</span>),
    <span class="pl-c1">ExecutableProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>mungify<span class="pl-pds">"</span></span>, <span class="pl-c1">:mungify_exe</span>)
]</pre></div>
<p>With such products defined, <code>Example_jll</code> would contain <code>data_txt</code>, <code>libdataproc</code> and <code>mungify_exe</code> symbols exported. For <code>FileProduct</code> variables, the exported value is a string pointing to the location of the file on-disk.  For <code>LibraryProduct</code> variables, it is a string corresponding to the <code>SONAME</code> of the desired library (it will have already been <code>dlopen()</code>'ed, so typical <code>ccall()</code> usage applies), and for <code>ExecutableProduct</code> variables, the exported value is a function that can be called to set appropriate environment variables.  Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Example_jll

<span class="pl-c"><span class="pl-c">#</span> For file products, you can access its file location directly:</span>
data_lines <span class="pl-k">=</span> <span class="pl-c1">open</span>(data_txt, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">readlines</span>(io)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> For library products, you can use the exported variable name in `ccall()` invocations directly</span>
num_chars <span class="pl-k">=</span> <span class="pl-c1">ccall</span>((<span class="pl-c1">:count_characters</span>, libdataproc), Cint, (Cstring, Cint), data_lines[<span class="pl-c1">1</span>], <span class="pl-c1">length</span>(data_lines[<span class="pl-c1">1</span>]))

<span class="pl-c"><span class="pl-c">#</span> For executable products, you can use the exported variable name as a function that you can call</span>
<span class="pl-c1">mungify_exe</span>() <span class="pl-k">do</span> mungify_exe_path
    <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span><span class="pl-v">$mungify_exe_path</span> <span class="pl-v">$num_chars</span><span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
</article></div>