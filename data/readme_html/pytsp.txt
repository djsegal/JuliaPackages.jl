<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pytspjl" class="anchor" aria-hidden="true" href="#pytspjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PyTSP.jl</h1>
<p><a href="https://github.com/chkwon/PyTSP.jl/actions?query=workflow%3ACI"><img src="https://github.com/chkwon/PyTSP.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/chkwon/PyTSP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00345c5628ccd56b4aa12bd90c9048f16cdd30f2345b2cf3b7b8cd5eaf6940f7/68747470733a2f2f636f6465636f762e696f2f67682f63686b776f6e2f50795453502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chkwon/PyTSP.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This Julia package provides access to the <a href="http://www.math.uwaterloo.ca/tsp/concorde/index.html" rel="nofollow">Concorde TSP Solver</a> and the <a href="http://webhotel4.ruc.dk/~keld/research/LKH/" rel="nofollow">Lin-Kernighan-Held (LKH) solver</a> via <a href="https://github.com/jvkersch/pyconcorde">pyconcorde</a> and <a href="https://github.com/filipArena/elkai">elkai</a>, respectively.</p>
<p>As both PyConcorde and elkai are Python libraries, this package merely provides a Julia wrapper using <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a>.</p>
<p>In Windows, this package does not work. Consider using Windows Subsystem for Linux (WSL).</p>
<p><strong>Note: Now, there are direct Julia wrappers of Concorde and LKH, which work in Windows, macOS, and Linux 64-bit systems.</strong></p>
<ul>
<li><a href="https://github.com/chkwon/Concorde.jl">Concorde.jl</a>: Julia wrapper of the <a href="http://www.math.uwaterloo.ca/tsp/concorde/index.html" rel="nofollow">Concorde TSP Solver</a>.</li>
<li><a href="https://github.com/chkwon/LKH.jl">LKH.jl</a>: Julia wrapper of the <a href="http://webhotel4.ruc.dk/~keld/research/LKH/" rel="nofollow">LKH heuristic solver</a>.</li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>MIT License only applies to PyTSP.jl. The Python parts, PyConcorde and elkai, come in difference licenses. The underlying solvers, the Conrcorde TSP Solver and LKH, require special licenses for commercial usage. Please check their websites.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p><code>] add PyTSP</code></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<h3><a id="user-content-concorde" class="anchor" aria-hidden="true" href="#concorde"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Concorde</h3>
<p>Concorde uses integers for distance calculation. Your <code>(x, y)</code> coordinate inputs should be scaled appropriately.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyTSP
n_cities = 20
factor = 1e5
x = rand(n_cities) .* factor
y = rand(n_cities) .* factor

# The Concorde TSL Solver via pyconcorde
tour, len = solve_TSP_Concorde(x, y, norm=&quot;EUC_2D&quot;)
"><pre><span class="pl-k">using</span> PyTSP
n_cities <span class="pl-k">=</span> <span class="pl-c1">20</span>
factor <span class="pl-k">=</span> <span class="pl-c1">1e5</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_cities) <span class="pl-k">.*</span> factor
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_cities) <span class="pl-k">.*</span> factor

<span class="pl-c"><span class="pl-c">#</span> The Concorde TSL Solver via pyconcorde</span>
tour, len <span class="pl-k">=</span> <span class="pl-c1">solve_TSP_Concorde</span>(x, y, norm<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>EUC_2D<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="([1, 2, 19, 13, 18, 11, 4, 14, 7, 6, 15, 10, 8, 16, 20, 5, 9, 3, 12, 17], 389803)
"><pre>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">19</span>, <span class="pl-c1">13</span>, <span class="pl-c1">18</span>, <span class="pl-c1">11</span>, <span class="pl-c1">4</span>, <span class="pl-c1">14</span>, <span class="pl-c1">7</span>, <span class="pl-c1">6</span>, <span class="pl-c1">15</span>, <span class="pl-c1">10</span>, <span class="pl-c1">8</span>, <span class="pl-c1">16</span>, <span class="pl-c1">20</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">12</span>, <span class="pl-c1">17</span>], <span class="pl-c1">389803</span>)</pre></div>
<h3><a id="user-content-lkh" class="anchor" aria-hidden="true" href="#lkh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LKH</h3>
<p>Since LKH also benefits from integer inputs, this package uses integer as default.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyTSP
n_cities = 20
factor = 1e5
x = rand(n_cities) .* factor
y = rand(n_cities) .* factor

# The LKH  heuristic solver via elkai
tour_LKH, length_LKH = solve_TSP_LKH(x, y)
"><pre><span class="pl-k">using</span> PyTSP
n_cities <span class="pl-k">=</span> <span class="pl-c1">20</span>
factor <span class="pl-k">=</span> <span class="pl-c1">1e5</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_cities) <span class="pl-k">.*</span> factor
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_cities) <span class="pl-k">.*</span> factor

<span class="pl-c"><span class="pl-c">#</span> The LKH  heuristic solver via elkai</span>
tour_LKH, length_LKH <span class="pl-k">=</span> <span class="pl-c1">solve_TSP_LKH</span>(x, y)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="([1, 2, 19, 13, 18, 11, 4, 14, 7, 6, 15, 10, 8, 16, 20, 5, 9, 3, 12, 17], 389803)
"><pre>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">19</span>, <span class="pl-c1">13</span>, <span class="pl-c1">18</span>, <span class="pl-c1">11</span>, <span class="pl-c1">4</span>, <span class="pl-c1">14</span>, <span class="pl-c1">7</span>, <span class="pl-c1">6</span>, <span class="pl-c1">15</span>, <span class="pl-c1">10</span>, <span class="pl-c1">8</span>, <span class="pl-c1">16</span>, <span class="pl-c1">20</span>, <span class="pl-c1">5</span>, <span class="pl-c1">9</span>, <span class="pl-c1">3</span>, <span class="pl-c1">12</span>, <span class="pl-c1">17</span>], <span class="pl-c1">389803</span>)</pre></div>
<p>You can also input a distance matrix, either <code>Matrix{Int}</code> or <code>Matrix{Float64}</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyTSP
n_cities = 20
factor = 1e5
x = rand(n_cities) .* factor
y = rand(n_cities) .* factor

M = distance_matrix(x, y) # returns a rounded Matrix{Int}
tour_LKH, length_LKH = solve_TSP_LKH(M)

N = distance_matrix_float(x, y) # returns a Matrix{Float64}
tour_LKH, length_LKH = solve_TSP_LKH(N)
"><pre><span class="pl-k">using</span> PyTSP
n_cities <span class="pl-k">=</span> <span class="pl-c1">20</span>
factor <span class="pl-k">=</span> <span class="pl-c1">1e5</span>
x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_cities) <span class="pl-k">.*</span> factor
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>(n_cities) <span class="pl-k">.*</span> factor

M <span class="pl-k">=</span> <span class="pl-c1">distance_matrix</span>(x, y) <span class="pl-c"><span class="pl-c">#</span> returns a rounded Matrix{Int}</span>
tour_LKH, length_LKH <span class="pl-k">=</span> <span class="pl-c1">solve_TSP_LKH</span>(M)

N <span class="pl-k">=</span> <span class="pl-c1">distance_matrix_float</span>(x, y) <span class="pl-c"><span class="pl-c">#</span> returns a Matrix{Float64}</span>
tour_LKH, length_LKH <span class="pl-k">=</span> <span class="pl-c1">solve_TSP_LKH</span>(N)</pre></div>
<h1><a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related Projects</h1>
<ul>
<li><a href="https://github.com/chkwon/Concorde.jl">Concorde.jl</a>: Julia wrapper of the <a href="http://www.math.uwaterloo.ca/tsp/concorde/index.html" rel="nofollow">Concorde TSP Solver</a>.</li>
<li><a href="https://github.com/chkwon/LKH.jl">LKH.jl</a>: Julia wrapper of the <a href="http://webhotel4.ruc.dk/~keld/research/LKH/" rel="nofollow">LKH heuristic solver</a>.</li>
<li><a href="https://github.com/matago/TSPLIB.jl">TSPLIB.jl</a>: Reads <a href="http://webhotel4.ruc.dk/~keld/research/LKH/LKH-2.0/DOC/TSPLIB_DOC.pdf" rel="nofollow">TSPLIB-format</a> files (<code>*.tsp</code>)</li>
<li><a href="https://github.com/chkwon/PyTSP.jl">PyTSP.jl</a>: Julia wrapper of Python TSP libraries: <a href="https://github.com/jvkersch/pyconcorde">pyconcorde</a> and <a href="https://github.com/filipArena/elkai">elkai</a>, which are Python wrappers of the Concorde and LKH solvers, respectively.</li>
<li><a href="https://github.com/ericphanson/TravelingSalesmanExact.jl">TravelingSalesmanExact.jl</a>: Julia implementation of <a href="https://doi.org/10.1287/opre.2.4.393" rel="nofollow">Dantzig, Fulkerson, and Johnson's Cutting-Plane Method</a>.</li>
</ul>
</article></div>