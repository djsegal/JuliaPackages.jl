<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-glove" class="anchor" aria-hidden="true" href="#glove"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Glove</h2>
<p><a href="https://travis-ci.org/domluna/GloVe.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb640467ed2602bc4970481cf56db004b2676807/68747470733a2f2f7472617669732d63692e6f72672f646f6d6c756e612f476c6f76652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/domluna/Glove.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/domluna/Glove.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/124ddc64df859511913cc17746dbc37ffcbb59c5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f646f6d6c756e612f476c6f76652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/domluna/Glove.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p>Implements <a href="http://nlp.stanford.edu/projects/glove/" rel="nofollow">Global Word Vectors</a>.</p>
<pre><code>using Pkg
Pkg.add("https://github.com/domluna/Glove.jl.git")
</code></pre>
<p>See <code>benchmark/perf.jl</code> for a usage example.</p>
<p>Here's the rough idea:</p>
<ol>
<li>
<p>Take text and make a LookupTable. This is a dictionary that has a map
from words -&gt; ids and vice-versa. Preprocessing steps should be taken
prior to this.</p>
</li>
<li>
<p>Use <code>weightedsums</code> to get the weighted co-occurence sum totals. This returns
a <code>CooccurenceDict</code>.</p>
</li>
<li>
<p>Convert the <code>CooccurenceDict</code> to a <code>CooccurenceVector</code>. The reasoning for this is faster indexing when we train the model.</p>
</li>
<li>
<p>Initialize a <code>Model</code> and train the model with the <code>CooccurenceVector</code> using
the <code>agagrad!</code> method.</p>
</li>
</ol>
<p>It's pretty fast at this point. On a single core it's roughly 3x slower than the optimized C version.</p>
<h3><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO</h3>
<ul>
<li>
<p>[  ] More docs.</p>
</li>
<li>
<p>[  ] See if precompile(args...) does anything</p>
</li>
<li>
<p>[  ] Notebook example ( has to have emojis )</p>
</li>
<li>
<p>[  ] Multi-threading</p>
</li>
</ul>
</article></div>