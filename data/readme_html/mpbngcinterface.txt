<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mpbngcinterfacejl" class="anchor" aria-hidden="true" href="#mpbngcinterfacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MPBNGCInterface.jl</h1>
<p>MPBNGCInterface.jl is a Julia module that interfaces
the Fortran77 code
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Multiobjective Proximal Bundle Method <code>MPBNGC</code></a>.</p>
<p>The <a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Multiobjective Proximal Bundle Method <code>MPBNGC</code></a>
can be applied to the nonsmooth, nonconvex multiobjective optimization problem</p>
<pre><code>	min f₁(x), ..., fₘ(x) 
	s.t. 	x ∈  Rⁿ, 
	 	lb ≤ x ≤  ub,
		lbc ≤ C' x ≤ ubc, 
		fᵢ(x) ≤ 0,		i = m+1, ..., m+ngcon,
</code></pre>
<p>where
<code>n</code>, <code>m</code>, <code>nlin</code>, <code>ngcon</code> is the number of
optimization variables,
objective functions,
linear constraints,
general constraints, respectively.
<code>lb</code> and <code>ub</code> are lower and upper bounds on <code>x</code>,
<code>lbc</code> and <code>ubc</code> are lower and upper bounds on <code>C' x</code>,
<code>C</code> is a <code>n x nlin</code>-matrix,
<code>fᵢ</code> are objective and general constraint functions,
and <code>C'</code> is the transposed of <code>C</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>You can install <code>MPBNGCInterface.jl</code> through the
<a href="https://docs.julialang.org/en/v1/stdlib/Pkg/index.html" rel="nofollow">Julia Package Manager</a>:</p>
<div class="highlight highlight-source-julia"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>milzj<span class="pl-k">/</span>MPBNGCInterface<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<p>The command should download the module and compile
the Bundle method if you have <code>gfortran</code> installed.</p>
<p>The code <code>build.jl</code> located in <code>deps</code>
when executed attempts to download the
<a href="http://napsu.karmitsa.fi/proxbundle/pb/mpbngc.tar.gz" rel="nofollow">source code</a>
of the
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Proximal Bundle Method <code>MPBNGC</code></a>
and tries to compile it together with its dependencies.</p>
<p>The module is an unregistered Julia package. It has successfully been tested
on Linux and Mac OS using <a href="https://travis-ci.com/" rel="nofollow">Travics CI</a>
with <code>julia version 1.0.5, 1.1.1, 1.2.0 and 1.3.1</code>.
Moreover, it has been tested on Windows 10 Education (version 10.0.16299) (64bit) with
<code>julia version 1.3.1</code> and <code>gfortran</code> of <code>mingw-w64 (x86_64)</code>.</p>
<h3><a id="user-content-compilation-with-gfortan" class="anchor" aria-hidden="true" href="#compilation-with-gfortan"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compilation with gfortan</h3>
<p>This code uses <code>gfortran</code> to compile the
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Proximal Bundle Method <code>MPBNGC</code></a>.</p>
<p>The interface does not support other compiles than <code>gfortan</code>.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>You can download the
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Proximal Bundle Method <code>MPBNGC</code></a>
manually and use your favourite compiler flags to compile
and build <code>mpbngc.f</code> together with its dependences.</p>
<p>You would need to create a
<a href="https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/" rel="nofollow">shared library</a>
and place it in the subdirectory <code>deps/usr</code>.</p>
<h2><a id="user-content-manual" class="anchor" aria-hidden="true" href="#manual"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Manual</h2>
<p>There is no user manual or help file available for the module.
I recommend to have a look at the examples and
tests to figure out how to use the module.</p>
<p>The objective and constraint functions <code>fᵢ</code> need to implemented
in a single function having the following signature:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">fasg!</span>(n<span class="pl-k">::</span><span class="pl-c1">Int64</span>, x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, mm<span class="pl-k">::</span><span class="pl-c1">Int64</span>, 
		f<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>, g<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span>)
</pre></div>
<p>even if you consider a single objective optimization problem.
Function and subgradient evaluations are stored in
<code>f</code> (a vector of length <code>mm</code>) and
<code>g</code> (a matrix of size <code>n x mm</code>), respectively.
<code>f[1:m]</code> are the objective function values and
<code>f[m+1:mm]</code> the general constraint function values.
("!" is optional.)</p>
<p>If you consider a bound-constrained optimization problem,
the "types" of the bounds <code>lb</code> and <code>ub</code> are stored in <code>ib</code>. Meaning,
the components of <code>ib</code> indicate whether the corresponding
component of <code>x</code> is unconstrained, fixed, bounded from below and/or
bounded from above.
The "classification" is performed by the function <code>classify_bounds</code>
called by the inner constructor
of the mutable struct <code>BundleProblem</code> according to
the rules indicated in the documentation of the function <code>classify_bounds</code>
(see <a href="./src/Bounds.jl">src/Bounds.jl</a>). The variable <code>ib</code> matches
the input variable <code>IX</code> of the Fortran code of the bundle method.</p>
<p>You can modify <code>ib</code> before calling <code>solveProblem</code>, which
calls the Fortran implemenation of the
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Proximal Bundle Method <code>MPBNGC</code></a>.</p>
<p>The bounds <code>lbc</code> and <code>ubc</code> (if present) get "classified" similarly
via the same function. The types are stored in <code>ic</code> corresponding to
the input variable <code>IC</code> of the Fortran code.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>A user manual for the
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Proximal Bundle Method <code>MPBNGC</code></a>
is provided in</p>
<p>M.M. Mäkelä: <a href="http://napsu.karmitsa.fi/publications/pbncgc_report.pdf" rel="nofollow">Multiobjective proximal bundle method for
nonconvex nonsmooth optimization: Fortran
subroutine MPBNGC 2.0</a>.
Reports of the Department of
Mathematical Information Technology, Series
B. Scientific Computing B 13/2003, University of Jyväskylä, Jyväskylä (2003)</p>
<p>Further details are provided in</p>
<p>M.M. Mäkelä, N. Karmitsa, O. Wilppu: <a href="http://napsu.karmitsa.fi/publications/pbm.pdf" rel="nofollow">Proximal Bundle Method for Nonsmooth
and Nonconvex Multiobjective Optimization</a>
in <a href="http://link.springer.com/book/10.1007/978-3-319-23564-6" rel="nofollow">Mathematical Modeling and Optimization of Complex Structures</a>.
T. Tuovinen, S. Repin and P. Neittaanmäki (eds.),
Vol. 40 of
<a href="https://link.springer.com/bookseries/6899" rel="nofollow">Computational Methods in Applied Sciences</a>,
pp. 191--204, Springer, 2016.</p>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgments</h2>
<p>I would like to thank <a href="https://www.utu.fi/en/people/marko-makela" rel="nofollow">Professor Marko M. Mäkelä</a>
for making the source code of the
<a href="http://napsu.karmitsa.fi/proxbundle/" rel="nofollow">Proximal Bundle Method <code>MPBNGC</code></a>
available online. I would like to acknowledge
<a href="https://www-m1.ma.tum.de/bin/view/Lehrstuhl/MichaelUlbrich" rel="nofollow">Prof. Dr. Michael Ulbrich</a>
and <a href="https://github.com/luchr">Dr. Christian Ludwig</a>
for explaining me how to interface Fortran code.
I appreciate very much that Christian took time to meet with me and to answer questions
I had about interfacing Fortran(77) code, and that he has allowed me to reuse
large parts of his <a href="https://github.com/luchr/ODEInterface.jl">ODEInterface.jl</a> code.</p>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>The module has been implemented by
<a href="https://www-m1.ma.tum.de/bin/view/Lehrstuhl/JohannesMilz" rel="nofollow">Johannes Milz</a>.</p>
</article></div>