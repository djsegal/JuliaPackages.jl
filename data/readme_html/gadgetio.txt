<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>License</strong></th>
<th align="center"><strong>Citation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://LudwigBoess.github.io/GadgetIO.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://LudwigBoess.github.io/GadgetIO.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/LudwigBoess/GadgetIO.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml"><img src="https://github.com/LudwigBoess/GadgetIO.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml/badge.svg" alt="Build status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/LudwigBoess/GadgetIO.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5b973b1157f48c209925ba9ea7edd27db25adaa57bb20bb0f742433eebeb235d/68747470733a2f2f636f6465636f762e696f2f67682f4c7564776967426f6573732f476164676574494f2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/gh/LudwigBoess/GadgetIO.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/34c33e2f7f61f9b82750baf175f4aa3260f774ead54e160dd013b7d818992096/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e737667" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-orange.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://zenodo.org/badge/latestdoi/270966661" rel="nofollow"><img src="https://camo.githubusercontent.com/8ee2ab7b80f896a92f0dee42c3d0f94e459b2cf5f6a86a4b5f9a1162c11258ea/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3237303936363636312e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/270966661.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h1 dir="auto"><a id="user-content-gadgetiojl" class="anchor" aria-hidden="true" href="#gadgetiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GadgetIO.jl</h1>
<p dir="auto">This package is a subproject of <a href="https://github.com/LudwigBoess/GadJet.jl">GadJet.jl</a> and provides some basic IO functionality to work with the Smoothed-Particle Hydrodynamics code <a href="https://wwwmpa.mpa-garching.mpg.de/gadget/" rel="nofollow">Gadget</a> by Volker Springel.</p>
<p dir="auto">It is taylored for working with the development version of P-Gadget3, specifically OpenGadget3 developed by <a href="https://www.usm.uni-muenchen.de/~dolag/" rel="nofollow">Klaus Dolag</a> and contributers. Development is focused on IO for Binary Format 2.
A lot of the routines are based on IDL scripts by Klaus Dolag (not public).</p>
<p dir="auto">If you use <code>GadgetIO.jl</code> in your publications please cite <a href="https://zenodo.org/badge/latestdoi/270966661" rel="nofollow">BÃ¶ss &amp; Valenzuela</a>.</p>
<p dir="auto">Please see the <a href="https://ludwigboess.github.io/GadgetIO.jl/dev/" rel="nofollow">Documentation</a> for details.</p>
<h1 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h1>
<h2 dir="auto"><a id="user-content-reading-data" class="anchor" aria-hidden="true" href="#reading-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading Data</h2>
<p dir="auto">If you want to read a simulation snapshot into memory with GadJet.jl, it's as easy as this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    data = read_snap(filename)"><pre>    data <span class="pl-k">=</span> <span class="pl-c1">read_snap</span>(filename)</pre></div>
<p dir="auto">This will return a dictionary with the header information in <code>data["Header"]</code> and the blocks sorted by particle type.</p>
<p dir="auto">As an example, this is how you would access the positions of the gas particles:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    data[&quot;Parttype0&quot;][&quot;POS&quot;]"><pre>    data[<span class="pl-s"><span class="pl-pds">"</span>Parttype0<span class="pl-pds">"</span></span>][<span class="pl-s"><span class="pl-pds">"</span>POS<span class="pl-pds">"</span></span>]</pre></div>
<p dir="auto">If you only want to read a specific block for a single particle type (e.g. positions of gas particles) you can use the function with a specified blockname and particle type like so:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    pos = read_snap(filename, &quot;POS&quot;, 0)"><pre>    pos <span class="pl-k">=</span> <span class="pl-c1">read_snap</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>POS<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">This will return an array of the datatype of your simulation, usually Float32.</p>
</article></div>