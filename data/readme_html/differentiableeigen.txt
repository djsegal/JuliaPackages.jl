<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-differentiableeigenjl" class="anchor" aria-hidden="true" href="#differentiableeigenjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>DifferentiableEigen.jl</h1>
<p dir="auto"><a href="https://github.com/ThummeTo/DifferentiableEigen.jl/actions/workflows/Test.yml"><img src="https://github.com/ThummeTo/DifferentiableEigen.jl/actions/workflows/Test.yml/badge.svg" alt="Run Tests" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ThummeTo/DifferentiableEigen.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f756b8f3c8c8680685192bfd831bdd25a310ba1b7aa0bc1fc56e285979d8f2c6/68747470733a2f2f636f6465636f762e696f2f67682f5468756d6d65546f2f446966666572656e746961626c65456967656e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ThummeTo/DifferentiableEigen.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-what-is-differentiableeigenjl" class="anchor" aria-hidden="true" href="#what-is-differentiableeigenjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is DifferentiableEigen.jl?</h2>
<p dir="auto">The current implementation of <code>LinearAlgebra.eigen</code> does not support sensitivities.
This package adds a new function <code>eigen</code>, that wraps the original function, but returns an array of reals instead of complex numbers (this is necessary, because some AD-frameworks do not support complex numbers).
This <code>eigen</code> function is differentiable by every AD-framework with support for <em>ChainRulesCore.jl</em> and <em>ForwardDiff.jl</em>.</p>
<h2 dir="auto"><a id="user-content-how-can-i-use-differentiableeigenjl" class="anchor" aria-hidden="true" href="#how-can-i-use-differentiableeigenjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How can I use DifferentiableEigen.jl?</h2>
<p dir="auto">1. Open a Julia-REPL, switch to package mode using <code>]</code>, activate your preferred environment.</p>
<p dir="auto">2. Install <a href="https://github.com/ThummeTo/DifferentiableEigen.jl"><em>DifferentiableEigen.jl</em></a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.6) pkg&gt; add DifferentiableEigen"><pre lang="julia-repl" class="notranslate"><code>(@v1.6) pkg&gt; add DifferentiableEigen
</code></pre></div>
<p dir="auto">3. If you want to check that everything works correctly, you can run the tests bundled with <a href="https://github.com/ThummeTo/DifferentiableEigen.jl"><em>DifferentiableEigen.jl</em></a>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(@v1.6) pkg&gt; test DifferentiableEigen"><pre lang="julia-repl" class="notranslate"><code>(@v1.6) pkg&gt; test DifferentiableEigen
</code></pre></div>
<h2 dir="auto"><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How does it work?</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import DifferentiableEigen
import LinearAlgebra
import ForwardDiff

A = rand(3,3)   # Random matrix 3x3 

eigvals, eigvecs = LinearAlgebra.eigen(A)   # This is the default eigen-function in Julia. Note, that eigenvalues and -vectors are complex numbers.
jac = ForwardDiff.jacobian((A) -&gt; LinearAlgebra.eigen(A)[1], A)   # That doesn't work!

eigvals, eigvecs = DifferentiableEigen.eigen(A)   # This is the differentiable eigen-function. Note, that eigenvalues and -vectors are not complex numbers, but real arrays!  
jac = ForwardDiff.jacobian((A) -&gt; DifferentiableEigen.eigen(A)[1], A)   # That does work! eigenvalue- and eigenvector-sensitvities"><pre><span class="pl-k">import</span> DifferentiableEigen
<span class="pl-k">import</span> LinearAlgebra
<span class="pl-k">import</span> ForwardDiff

A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>)   <span class="pl-c"><span class="pl-c">#</span> Random matrix 3x3 </span>

eigvals, eigvecs <span class="pl-k">=</span> LinearAlgebra<span class="pl-k">.</span><span class="pl-c1">eigen</span>(A)   <span class="pl-c"><span class="pl-c">#</span> This is the default eigen-function in Julia. Note, that eigenvalues and -vectors are complex numbers.</span>
jac <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">jacobian</span>((A) <span class="pl-k">-&gt;</span> LinearAlgebra<span class="pl-k">.</span><span class="pl-c1">eigen</span>(A)[<span class="pl-c1">1</span>], A)   <span class="pl-c"><span class="pl-c">#</span> That doesn't work!</span>

eigvals, eigvecs <span class="pl-k">=</span> DifferentiableEigen<span class="pl-k">.</span><span class="pl-c1">eigen</span>(A)   <span class="pl-c"><span class="pl-c">#</span> This is the differentiable eigen-function. Note, that eigenvalues and -vectors are not complex numbers, but real arrays!  </span>
jac <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">jacobian</span>((A) <span class="pl-k">-&gt;</span> DifferentiableEigen<span class="pl-k">.</span><span class="pl-c1">eigen</span>(A)[<span class="pl-c1">1</span>], A)   <span class="pl-c"><span class="pl-c">#</span> That does work! eigenvalue- and eigenvector-sensitvities</span></pre></div>
<h2 dir="auto"><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgement</h2>
<p dir="auto">This package was motivated by this <a href="https://discourse.julialang.org/t/native-eigenvals-for-differentiable-programming/27126" rel="nofollow">discourse thread</a>.
For now, there is no other (known) ready to use solution for differentiable eigenvalues and -vectors.
If this changes, please feel free to open a PR or discussion.</p>
<p dir="auto">The sensitivity formulas are picked from:</p>
<p dir="auto">Michael B. Giles. 2008. <strong>An extended collection of matrix derivative results for forward and reverse mode algorithmic differentiation.</strong> <a href="https://people.maths.ox.ac.uk/gilesm/files/NA-08-01.pdf" rel="nofollow">PDF</a></p>
<h2 dir="auto"><a id="user-content-how-to-cite-related-publications" class="anchor" aria-hidden="true" href="#how-to-cite-related-publications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to cite? Related publications?</h2>
<p dir="auto">Tobias Thummerer and Lars Mikelsons. 2023. <strong>Eigen-informed NeuralODEs: Dealing with stability and convergence issues of NeuralODEs.</strong> ArXiv. <a href="https://arxiv.org/abs/2302.10892" rel="nofollow">PDF</a></p>
</article></div>