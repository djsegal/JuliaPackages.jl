<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cunionjl" class="anchor" aria-hidden="true" href="#cunionjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CUnion.jl</h1>
<p><a href="https://travis-ci.org/azurefx/CUnion.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/569f1990375de28f3743b2dc1ebbbbd3c45ed095/68747470733a2f2f7472617669732d63692e6f72672f617a75726566782f43556e696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/azurefx/CUnion.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides C-style primitive union types for Julia.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Add the macro <code>@union</code> to a <code>struct</code> definition to make a C union:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@union</span> <span class="pl-k">struct</span> U
  x<span class="pl-k">::</span><span class="pl-c1">UInt8</span>
  y<span class="pl-k">::</span><span class="pl-c1">UInt16</span>
<span class="pl-k">end</span></pre></div>
<p>Then <code>U</code> can be instantiated with one of its field types:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> <span class="pl-c1">U</span>(<span class="pl-c1">Int8</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>))
<span class="pl-c1">U1</span>(<span class="pl-c1">0x00ff</span>)

julia<span class="pl-k">&gt;</span> u1<span class="pl-k">.</span>y
<span class="pl-c1">0x00ff</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reinterpret</span>(Int16, u)
<span class="pl-c1">255</span></pre></div>
<p>Nested anonymous structs are also supported. For example, the <code>LARGE_INTEGER</code> type from Win32</p>
<div class="highlight highlight-source-c++"><pre><span class="pl-k">typedef</span> <span class="pl-k">union</span> _LARGE_INTEGER {
  <span class="pl-k">struct</span> {
    DWORD LowPart;
    LONG HighPart;
  } DUMMYSTRUCTNAME;
  <span class="pl-k">struct</span> {
    DWORD LowPart;
    LONG HighPart;
  } u;
  LONGLONG QuadPart;
} LARGE_INTEGER;</pre></div>
<p>Can be written as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@union</span> <span class="pl-k">struct</span> LargeInteger
  <span class="pl-k">struct</span> u
    low<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
    high<span class="pl-k">::</span><span class="pl-c1">UInt32</span>
  <span class="pl-k">end</span>
  quad<span class="pl-k">::</span><span class="pl-c1">UInt64</span>
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> li<span class="pl-k">=</span><span class="pl-c1">LargeInteger</span>(<span class="pl-c1">0x00112233aabbccdd</span>)
<span class="pl-c1">LargeInteger</span>(<span class="pl-c1">0x00112233aabbccdd</span>)

julia<span class="pl-k">&gt;</span> li<span class="pl-k">.</span>u<span class="pl-k">.</span>high
<span class="pl-c1">0x00112233</span></pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ol>
<li>Improved reinterpret_cast performance?</li>
<li>Convenient methods to update fields?</li>
<li>Sub-typing and generic support?</li>
</ol>
</article></div>