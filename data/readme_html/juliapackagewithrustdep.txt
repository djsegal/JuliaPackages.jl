<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-juliapackagewithrustdepjl" class="anchor" aria-hidden="true" href="#juliapackagewithrustdepjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaPackageWithRustDep.jl</h1>
<p dir="auto"><a href="LICENSE"><img src="https://camo.githubusercontent.com/7f8e04a761573d054a76123e9d6af3fb839a2eb8226a8f715f1e32cdd99f9ac8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/felipenoris/JuliaPackageWithRustDep.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6298993ff7d82687df7c4662c025c95714ec0e2d7daae4bb51fae9d24e38eecf/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f66656c6970656e6f7269732f4a756c69615061636b61676557697468527573744465702e6a6c2f6d61737465722e7376673f6c6162656c3d4c696e75782b2f2b6d61634f53267374796c653d666c61742d737175617265" alt="travis" data-canonical-src="https://img.shields.io/travis/felipenoris/JuliaPackageWithRustDep.jl/master.svg?label=Linux+/+macOS&amp;style=flat-square" style="max-width: 100%;"></a></p>
<p dir="auto">This is a set of examples on how to embed a Rust library in a Julia package.
Interfacing between Julia and Rust library is done using Rust's FFI:
the Rust library is exposed as a C dynamic library, and Julia will call Rust functions using <code>ccall</code>.</p>
<p dir="auto">The build script <code>deps/build.jl</code> uses cargo to build the Rust library <code>deps/RustDylib</code>.
Julia bindings to the Rust API are implemented in <code>src/api.jl</code> file.</p>
<p dir="auto">If the Rust library build is successful during <code>Pkg.build</code>, the file <code>deps/deps.jl</code> is generated,
and the package <code>__init__</code> function will call <code>check_deps</code> to check if the Rust dynamic library
is callable. This follows the same convention used by <strong><a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a></strong>.</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<ul dir="auto">
<li>
<p dir="auto">Julia v1.0</p>
</li>
<li>
<p dir="auto">Rust Stable</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; pkg&quot;add https://github.com/felipenoris/JuliaPackageWithRustDep.jl.git&quot;

julia&gt; Pkg.test(&quot;JuliaPackageWithRustDep&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/felipenoris/JuliaPackageWithRustDep.jl.git<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaPackageWithRustDep<span class="pl-pds">"</span></span>)
</pre></div>
<h2 dir="auto"><a id="user-content-primitive-type-correspondences" class="anchor" aria-hidden="true" href="#primitive-type-correspondences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Primitive Type Correspondences</h2>
<table>
<thead>
<tr>
<th>Julia</th>
<th>Rust</th>
</tr>
</thead>
<tbody>
<tr>
<td>Int32</td>
<td>i32</td>
</tr>
<tr>
<td>Int64</td>
<td>i64</td>
</tr>
<tr>
<td>Int64</td>
<td>i64</td>
</tr>
<tr>
<td>Float32</td>
<td>f32</td>
</tr>
<tr>
<td>Float64</td>
<td>f64</td>
</tr>
<tr>
<td>Bool</td>
<td>bool</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-passing-a-julia-owned-string-to-rust" class="anchor" aria-hidden="true" href="#passing-a-julia-owned-string-to-rust"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Passing a Julia Owned String to Rust</h2>
<p dir="auto">A Julia <code>String</code> is converted to a <code>Cstring</code> and passed to Rust, which will receive it as a pointer to char.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function rustdylib_inspect_string(s::String)
    ccall((:rustdylib_inspect_string, librustdylib), Cvoid, (Cstring,), s)
end"><pre><span class="pl-k">function</span> <span class="pl-en">rustdylib_inspect_string</span>(s<span class="pl-k">::</span><span class="pl-c1">String</span>)
    <span class="pl-c1">ccall</span>((<span class="pl-c1">:rustdylib_inspect_string</span>, librustdylib), Cvoid, (Cstring,), s)
<span class="pl-k">end</span></pre></div>
<p dir="auto">In Rust, the pointer to thar <code>*const c_char</code> is converted to a <code>CStr</code>, which is a reference to a C String.
From a <code>CStr</code>, you can convert it to a regular <code>&amp;str</code>.</p>
<div class="highlight highlight-source-rust notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="use std::ffi::CStr;
use std::os::raw::c_char;

#[no_mangle]
pub extern fn rustdylib_inspect_string(cstring: *const c_char) {
    let cstr = unsafe { CStr::from_ptr(cstring) };

    match cstr.to_str() {
        Ok(s) =&gt; {
            // `s` is a regular `&amp;str`
            println!(&quot;Rust read `{:?}`.&quot;, s);
        }
        Err(_) =&gt; {
            panic!(&quot;Couldn't convert foreign Cstring to &amp;str.&quot;);
        }
    }
}"><pre><span class="pl-k">use</span> std<span class="pl-kos">::</span>ffi<span class="pl-kos">::</span><span class="pl-v">CStr</span><span class="pl-kos">;</span>
<span class="pl-k">use</span> std<span class="pl-kos">::</span>os<span class="pl-kos">::</span>raw<span class="pl-kos">::</span>c_char<span class="pl-kos">;</span>

<span class="pl-c1">#<span class="pl-kos">[</span>no_mangle<span class="pl-kos">]</span></span>
<span class="pl-k">pub</span> <span class="pl-k">extern</span> <span class="pl-k">fn</span> <span class="pl-en">rustdylib_inspect_string</span><span class="pl-kos">(</span><span class="pl-s1">cstring</span><span class="pl-kos">:</span> <span class="pl-c1">*</span><span class="pl-k">const</span> <span class="pl-smi">c_char</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">let</span> cstr = <span class="pl-k">unsafe</span> <span class="pl-kos">{</span> <span class="pl-smi">CStr</span><span class="pl-kos">::</span><span class="pl-en">from_ptr</span><span class="pl-kos">(</span>cstring<span class="pl-kos">)</span> <span class="pl-kos">}</span><span class="pl-kos">;</span>

    <span class="pl-k">match</span> cstr<span class="pl-kos">.</span><span class="pl-en">to_str</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-v">Ok</span><span class="pl-kos">(</span>s<span class="pl-kos">)</span> =&gt; <span class="pl-kos">{</span>
            <span class="pl-c">// `s` is a regular `&amp;str`</span>
            <span class="pl-en">println</span><span class="pl-en">!</span><span class="pl-kos">(</span><span class="pl-s">"Rust read `{:?}`."</span>, s<span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
        <span class="pl-v">Err</span><span class="pl-kos">(</span>_<span class="pl-kos">)</span> =&gt; <span class="pl-kos">{</span>
            <span class="pl-en">panic</span><span class="pl-en">!</span><span class="pl-kos">(</span><span class="pl-s">"Couldn't convert foreign Cstring to &amp;str."</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div>
<h2 dir="auto"><a id="user-content-returning-a-rust-owned-string-to-julia" class="anchor" aria-hidden="true" href="#returning-a-rust-owned-string-to-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Returning a Rust Owned String to Julia</h2>
<p dir="auto">In this example, the Rust generates a owned string with <code>rustdylib_generate_rust_owned_string</code>
and the ownership is transfered to the Julia process.</p>
<p dir="auto">After being consumed, the Julia process must transfer the ownership back to Rust
by calling <code>rustdylib_free_rust_owned_string</code>, to let the memory be freed.</p>
<div class="highlight highlight-source-rust notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="use std::ffi::CString;
use std::os::raw::c_char;

#[no_mangle]
pub extern fn rustdylib_generate_rust_owned_string() -&gt; *mut c_char {
    let rust_string = String::from(&quot;The bomb: 💣&quot;);
    let cstring = CString::new(rust_string).unwrap();
    cstring.into_raw() // transfers ownership to the Julia process
}

#[no_mangle]
pub unsafe extern fn rustdylib_free_rust_owned_string(s: *mut c_char) {
    if !s.is_null() {
        drop(CString::from_raw(s)) // retakes ownership of the CString and drop
    }
}"><pre><span class="pl-k">use</span> std<span class="pl-kos">::</span>ffi<span class="pl-kos">::</span><span class="pl-v">CString</span><span class="pl-kos">;</span>
<span class="pl-k">use</span> std<span class="pl-kos">::</span>os<span class="pl-kos">::</span>raw<span class="pl-kos">::</span>c_char<span class="pl-kos">;</span>

<span class="pl-c1">#<span class="pl-kos">[</span>no_mangle<span class="pl-kos">]</span></span>
<span class="pl-k">pub</span> <span class="pl-k">extern</span> <span class="pl-k">fn</span> <span class="pl-en">rustdylib_generate_rust_owned_string</span><span class="pl-kos">(</span><span class="pl-kos">)</span> -&gt; <span class="pl-c1">*</span><span class="pl-k">mut</span> <span class="pl-smi">c_char</span> <span class="pl-kos">{</span>
    <span class="pl-k">let</span> rust_string = <span class="pl-smi">String</span><span class="pl-kos">::</span><span class="pl-en">from</span><span class="pl-kos">(</span><span class="pl-s">"The bomb: 💣"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">let</span> cstring = <span class="pl-smi">CString</span><span class="pl-kos">::</span><span class="pl-en">new</span><span class="pl-kos">(</span>rust_string<span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">unwrap</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    cstring<span class="pl-kos">.</span><span class="pl-en">into_raw</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c">// transfers ownership to the Julia process</span>
<span class="pl-kos">}</span>

<span class="pl-c1">#<span class="pl-kos">[</span>no_mangle<span class="pl-kos">]</span></span>
<span class="pl-k">pub</span> <span class="pl-k">unsafe</span> <span class="pl-k">extern</span> <span class="pl-k">fn</span> <span class="pl-en">rustdylib_free_rust_owned_string</span><span class="pl-kos">(</span><span class="pl-s1">s</span><span class="pl-kos">:</span> <span class="pl-c1">*</span><span class="pl-k">mut</span> <span class="pl-smi">c_char</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">if</span> !s<span class="pl-kos">.</span><span class="pl-en">is_null</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-en">drop</span><span class="pl-kos">(</span><span class="pl-smi">CString</span><span class="pl-kos">::</span><span class="pl-en">from_raw</span><span class="pl-kos">(</span>s<span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-c">// retakes ownership of the CString and drop</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div>
<p dir="auto">In the Julia process, the pointer to string is copied to a new <code>String</code> instance using <code>unsafe_string</code> function.
Then, Julia asks Rust to free the string.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function rustdylib_free_rust_owned_string(s::Cstring)
    ccall((:rustdylib_free_rust_owned_string, librustdylib), Cvoid, (Cstring,), s)
end

function rustdylib_generate_rust_owned_string()
    ccall((:rustdylib_generate_rust_owned_string, librustdylib), Cstring, ())
end

function read_rust_owned_string() :: String
    cstring = rustdylib_generate_rust_owned_string()
    result = unsafe_string(cstring) # copies the contents of the string
    rustdylib_free_rust_owned_string(cstring) # ask Rust to free the memory
    return result
end"><pre><span class="pl-k">function</span> <span class="pl-en">rustdylib_free_rust_owned_string</span>(s<span class="pl-k">::</span><span class="pl-c1">Cstring</span>)
    <span class="pl-c1">ccall</span>((<span class="pl-c1">:rustdylib_free_rust_owned_string</span>, librustdylib), Cvoid, (Cstring,), s)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">rustdylib_generate_rust_owned_string</span>()
    <span class="pl-c1">ccall</span>((<span class="pl-c1">:rustdylib_generate_rust_owned_string</span>, librustdylib), Cstring, ())
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">read_rust_owned_string</span>() <span class="pl-k">::</span> <span class="pl-c1">String</span>
    cstring <span class="pl-k">=</span> <span class="pl-c1">rustdylib_generate_rust_owned_string</span>()
    result <span class="pl-k">=</span> <span class="pl-c1">unsafe_string</span>(cstring) <span class="pl-c"><span class="pl-c">#</span> copies the contents of the string</span>
    <span class="pl-c1">rustdylib_free_rust_owned_string</span>(cstring) <span class="pl-c"><span class="pl-c">#</span> ask Rust to free the memory</span>
    <span class="pl-k">return</span> result
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Resources</h2>
<ul dir="auto">
<li>
<p dir="auto"><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/" rel="nofollow">Exposing a Rust Library to C</a></p>
</li>
<li>
<p dir="auto"><a href="https://doc.rust-lang.org/std/ffi/index.html" rel="nofollow">std::ffi docs</a></p>
</li>
<li>
<p dir="auto"><a href="https://michael-f-bryan.github.io/rust-ffi-guide/" rel="nofollow">Rust FFI Guide</a></p>
</li>
<li>
<p dir="auto"><a href="http://jakegoulding.com/rust-ffi-omnibus" rel="nofollow">Rust FFI Omnibus</a></p>
</li>
</ul>
</article></div>