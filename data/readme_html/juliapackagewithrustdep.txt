<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-juliapackagewithrustdepjl" class="anchor" aria-hidden="true" href="#juliapackagewithrustdepjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JuliaPackageWithRustDep.jl</h1>
<p><a href="LICENSE"><img src="https://camo.githubusercontent.com/3ce76a8291b83cd2eaf305703ee718a281d09b66/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square" style="max-width:100%;"></a>
<a href="https://travis-ci.org/felipenoris/JuliaPackageWithRustDep.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4aad4bad492129ca2d6276b5d005b7a41ba173fb/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f66656c6970656e6f7269732f4a756c69615061636b61676557697468527573744465702e6a6c2f6d61737465722e7376673f6c6162656c3d4c696e75782b2f2b6d61634f53267374796c653d666c61742d737175617265" alt="travis" data-canonical-src="https://img.shields.io/travis/felipenoris/JuliaPackageWithRustDep.jl/master.svg?label=Linux+/+macOS&amp;style=flat-square" style="max-width:100%;"></a></p>
<p>This is a set of examples on how to embed a Rust library in a Julia package.
Interfacing between Julia and Rust library is done using Rust's FFI:
the Rust library is exposed as a C dynamic library, and Julia will call Rust functions using <code>ccall</code>.</p>
<p>The build script <code>deps/build.jl</code> uses cargo to build the Rust library <code>deps/RustDylib</code>.
Julia bindings to the Rust API are implemented in <code>src/api.jl</code> file.</p>
<p>If the Rust library build is successful during <code>Pkg.build</code>, the file <code>deps/deps.jl</code> is generated,
and the package <code>__init__</code> function will call <code>check_deps</code> to check if the Rust dynamic library
is callable. This follows the same convention used by <strong><a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a></strong>.</p>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements</h2>
<ul>
<li>
<p>Julia v1.0</p>
</li>
<li>
<p>Rust Stable</p>
</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add https://github.com/felipenoris/JuliaPackageWithRustDep.jl.git<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>JuliaPackageWithRustDep<span class="pl-pds">"</span></span>)
</pre></div>
<h2><a id="user-content-primitive-type-correspondences" class="anchor" aria-hidden="true" href="#primitive-type-correspondences"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Primitive Type Correspondences</h2>
<table>
<thead>
<tr>
<th>Julia</th>
<th>Rust</th>
</tr>
</thead>
<tbody>
<tr>
<td>Int32</td>
<td>i32</td>
</tr>
<tr>
<td>Int64</td>
<td>i64</td>
</tr>
<tr>
<td>Int64</td>
<td>i64</td>
</tr>
<tr>
<td>Float32</td>
<td>f32</td>
</tr>
<tr>
<td>Float64</td>
<td>f64</td>
</tr>
<tr>
<td>Bool</td>
<td>bool</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-passing-a-julia-owned-string-to-rust" class="anchor" aria-hidden="true" href="#passing-a-julia-owned-string-to-rust"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Passing a Julia Owned String to Rust</h2>
<p>A Julia <code>String</code> is converted to a <code>Cstring</code> and passed to Rust, which will receive it as a pointer to char.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">rustdylib_inspect_string</span>(s<span class="pl-k">::</span><span class="pl-c1">String</span>)
    <span class="pl-c1">ccall</span>((<span class="pl-c1">:rustdylib_inspect_string</span>, librustdylib), Cvoid, (Cstring,), s)
<span class="pl-k">end</span></pre></div>
<p>In Rust, the pointer to thar <code>*const c_char</code> is converted to a <code>CStr</code>, which is a reference to a C String.
From a <code>CStr</code>, you can convert it to a regular <code>&amp;str</code>.</p>
<div class="highlight highlight-source-rust"><pre>#[no_mangle]
<span class="pl-k">pub</span> <span class="pl-k">extern</span> <span class="pl-k">fn</span> <span class="pl-en">rustdylib_inspect_string</span>(cstring: <span class="pl-k">*</span><span class="pl-k">const</span> c_char) {
    <span class="pl-k">let</span> cstr <span class="pl-k">=</span> <span class="pl-k">unsafe</span> { CStr<span class="pl-k">::</span><span class="pl-en">from_ptr</span>(cstring) };

    <span class="pl-k">match</span> cstr.<span class="pl-en">to_str</span>() {
        <span class="pl-c1">Ok</span>(s) <span class="pl-k">=&gt;</span> {
            <span class="pl-c">// `s` is a regular `&amp;str`</span>
            <span class="pl-c1">println!</span>(<span class="pl-s">"Rust read `{:?}`."</span>, s);
        }
        <span class="pl-c1">Err</span>(_) <span class="pl-k">=&gt;</span> {
            <span class="pl-c1">panic!</span>(<span class="pl-s">"Couldn't convert foreign Cstring to &amp;str."</span>);
        }
    }
}</pre></div>
<h2><a id="user-content-returning-a-rust-owned-string-to-julia" class="anchor" aria-hidden="true" href="#returning-a-rust-owned-string-to-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Returning a Rust Owned String to Julia</h2>
<p>In this example, the Rust generates a owned string with <code>rustdylib_generate_rust_owned_string</code>
and the ownership it transfered to the Julia process.</p>
<p>After being consumed, the Julia process must transfer the ownership back to Rust
by calling <code>rustdylib_free_rust_owned_string</code>, to let the memory be freed.</p>
<div class="highlight highlight-source-rust"><pre>#[no_mangle]
<span class="pl-k">pub</span> <span class="pl-k">extern</span> <span class="pl-k">fn</span> <span class="pl-en">rustdylib_generate_rust_owned_string</span>() -&gt; <span class="pl-k">*</span><span class="pl-k">mut</span> c_char {
    <span class="pl-k">let</span> rust_string <span class="pl-k">=</span> <span class="pl-k">String</span><span class="pl-k">::</span><span class="pl-en">from</span>(<span class="pl-s">"The bomb: ðŸ’£"</span>);
    <span class="pl-k">let</span> cstring <span class="pl-k">=</span> CString<span class="pl-k">::</span><span class="pl-en">new</span>(rust_string).<span class="pl-en">unwrap</span>();
    cstring.<span class="pl-en">into_raw</span>() <span class="pl-c">// transfers ownership to the Julia process</span>
}

#[no_mangle]
<span class="pl-k">pub</span> <span class="pl-k">extern</span> <span class="pl-k">fn</span> <span class="pl-en">rustdylib_free_rust_owned_string</span>(s: <span class="pl-k">*</span><span class="pl-k">mut</span> c_char) {
    <span class="pl-k">unsafe</span> {
        <span class="pl-k">if</span> s.<span class="pl-en">is_null</span>() { <span class="pl-k">return</span> }
        CString<span class="pl-k">::</span><span class="pl-en">from_raw</span>(s) <span class="pl-c">// retakes ownership of the CString</span>
    };
}</pre></div>
<p>In the Julia process, the pointer to string is copied to a new <code>String</code> instance using <code>unsafe_string</code> function.
Then, Julia asks Rust to free the string.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">rustdylib_free_rust_owned_string</span>(s<span class="pl-k">::</span><span class="pl-c1">Cstring</span>)
    <span class="pl-c1">ccall</span>((<span class="pl-c1">:rustdylib_free_rust_owned_string</span>, librustdylib), Cvoid, (Cstring,), s)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">rustdylib_generate_rust_owned_string</span>()
    <span class="pl-c1">ccall</span>((<span class="pl-c1">:rustdylib_generate_rust_owned_string</span>, librustdylib), Cstring, ())
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">read_rust_owned_string</span>() <span class="pl-k">::</span> <span class="pl-c1">String</span>
    cstring <span class="pl-k">=</span> <span class="pl-c1">rustdylib_generate_rust_owned_string</span>()
    result <span class="pl-k">=</span> <span class="pl-c1">unsafe_string</span>(cstring) <span class="pl-c"><span class="pl-c">#</span> copies the contents of the string</span>
    <span class="pl-c1">rustdylib_free_rust_owned_string</span>(cstring) <span class="pl-c"><span class="pl-c">#</span> ask Rust to free the memory</span>
    <span class="pl-k">return</span> result
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-resources" class="anchor" aria-hidden="true" href="#resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Resources</h2>
<ul>
<li>
<p><a href="http://greyblake.com/blog/2017/08/10/exposing-rust-library-to-c/" rel="nofollow">Exposing a Rust Library to C</a></p>
</li>
<li>
<p><a href="https://doc.rust-lang.org/std/ffi/index.html" rel="nofollow">std::ffi docs</a></p>
</li>
<li>
<p><a href="https://michael-f-bryan.github.io/rust-ffi-guide/" rel="nofollow">Rust FFI Guide</a></p>
</li>
</ul>
</article></div>