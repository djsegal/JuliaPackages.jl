<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spgbox" class="anchor" aria-hidden="true" href="#spgbox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SPGBox</h1>
<p dir="auto">Implements the Spectral Projected Gradient Method for minimization
with box constraints.</p>
<p dir="auto">Algorithm reference:</p>
<p dir="auto">E. G. Birgin, J. M. Mart√≠nez and M. Raydan, "Nonmonotone spectral
projected gradient methods on convex sets", SIAM Journal on Optimization
10, pp. 1196-1211, 2000.
<a href="http://www.ime.usp.br/~egbirgin/publications/bmr.pdf" rel="nofollow">LINK</a></p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">The complete documentation can be found at: <a href="https://m3g.github.io/SPGBox.jl" rel="nofollow">https://m3g.github.io/SPGBox.jl</a></p>
<h2 dir="auto"><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to install</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(&quot;SPGBox&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SPGBox<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">or, more concisely,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add SPGBox"><pre>julia<span class="pl-k">&gt;</span> ] add SPGBox</pre></div>
<h2 dir="auto"><a id="user-content-quick-usage-example" class="anchor" aria-hidden="true" href="#quick-usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick usage example:</h2>
<p dir="auto">Define the function to compute the objective function and the gradient,
for example with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(x) = x[1]^2 + x[2]^2

julia&gt; function g!(g,x)
           g[1] = 2*x[1]
           g[2] = 2*x[2]
       end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">g!</span>(g,x)
           g[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">1</span>]
           g[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>]
       <span class="pl-k">end</span></pre></div>
<p dir="auto">And the objective function can be minimized with optional box bounds.
Here, with a lower bound of <code>2</code> for the first variable:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; x = 2 .+ rand(2)

julia&gt; spgbox!(f,g!,x,lower=[2.,-Inf])

 SPGBOX RESULT: 

 Convergence achieved. 

 Final objective function value = 4.0
 Sample of best point = Vector{Float64}[ 2.0, 0.0]
 Projected gradient norm = 0.0

 Number of iterations = 3
 Number of function evaluations = 3
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">.+</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">spgbox!</span>(f,g!,x,lower<span class="pl-k">=</span>[<span class="pl-c1">2.</span>,<span class="pl-k">-</span><span class="pl-c1">Inf</span>])

 SPGBOX RESULT<span class="pl-k">:</span> 

 Convergence achieved. 

 Final objective <span class="pl-k">function</span> value <span class="pl-k">=</span> <span class="pl-c1">4.0</span>
 Sample of best point <span class="pl-k">=</span> Vector{Float64}[ <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>]
 Projected gradient norm <span class="pl-k">=</span> <span class="pl-c1">0.0</span>

 Number of iterations <span class="pl-k">=</span> <span class="pl-c1">3</span>
 Number of <span class="pl-k">function</span> evaluations <span class="pl-k">=</span> <span class="pl-c1">3</span>
</pre></div>
<p dir="auto">The <code>spgbox!</code> function mutates the content of the input <code>x</code> vector (and will not allocate anything if the auxiliary vectors are provided as described <a href="https://m3g.github.io/SPGBox.jl/stable/options/#Memory-preallocation" rel="nofollow">here</a>). Use <code>spgbox</code>, to internaly copy the <code>x</code> array and not mutate it.</p>
</article></div>