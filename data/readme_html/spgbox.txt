<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-spgbox" class="anchor" aria-hidden="true" href="#spgbox"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SPGBox</h1>
<p>Implements the Spectral Projected Gradient Method for minimization
with box constraints.</p>
<p>Algorithm reference:</p>
<p>E. G. Birgin, J. M. Mart√≠nez and M. Raydan, "Nonmonotone spectral
projected gradient methods on convex sets", SIAM Journal on Optimization
10, pp. 1196-1211, 2000.
<a href="http://www.ime.usp.br/~egbirgin/publications/bmr.pdf" rel="nofollow">LINK</a></p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>The complete documentation can be found at:
<a href="https://m3g.github.io/SPGBox/stable/" rel="nofollow">https://m3g.github.io/SPGBox/stable/</a></p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pkg

julia&gt; Pkg.add(&quot;SPGBox&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SPGBox<span class="pl-pds">"</span></span>)</pre></div>
<p>or, more concisely,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add SPGBox

"><pre>julia<span class="pl-k">&gt;</span> ] add SPGBox
</pre></div>
<h2><a id="user-content-quick-usage-example" class="anchor" aria-hidden="true" href="#quick-usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick usage example:</h2>
<p>Define the function to compute the objective function and the gradient,
for example with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; func(x) = x[1]^2 + x[2]^2

julia&gt; function grad!(x,g)
         g[1] = 2*x[1]
         g[2] = 2*x[2]
       end
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">func</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x[<span class="pl-c1">2</span>]<span class="pl-k">^</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">grad!</span>(x,g)
         g[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">1</span>]
         g[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x[<span class="pl-c1">2</span>]
       <span class="pl-k">end</span></pre></div>
<p>And the objective function can be minimized with optional box bounds.
Here, with a lower bound of <code>2</code> for the first variable:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = 2 .+ rand(2)

julia&gt; spgbox!(x,func,grad!,l=[2.,-Inf])

 SPGBOX RESULT:

 Convergence achieved.

 Final objective function value = 4.0
 Best solution found = [ 2.0, 0.0]
 Projected gradient norm = 0.0

 Number of iterations = 2
 Number of function evaluations = 3

"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-k">.+</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">spgbox!</span>(x,func,grad!,l<span class="pl-k">=</span>[<span class="pl-c1">2.</span>,<span class="pl-k">-</span><span class="pl-c1">Inf</span>])

 SPGBOX RESULT<span class="pl-k">:</span>

 Convergence achieved.

 Final objective <span class="pl-k">function</span> value <span class="pl-k">=</span> <span class="pl-c1">4.0</span>
 Best solution found <span class="pl-k">=</span> [ <span class="pl-c1">2.0</span>, <span class="pl-c1">0.0</span>]
 Projected gradient norm <span class="pl-k">=</span> <span class="pl-c1">0.0</span>

 Number of iterations <span class="pl-k">=</span> <span class="pl-c1">2</span>
 Number of <span class="pl-k">function</span> evaluations <span class="pl-k">=</span> <span class="pl-c1">3</span>
</pre></div>
</article></div>