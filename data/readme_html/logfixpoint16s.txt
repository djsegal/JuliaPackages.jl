<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-logfixpoint16sjl" class="anchor" aria-hidden="true" href="#logfixpoint16sjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LogFixPoint16s.jl</h1>
<p dir="auto"><a href="https://github.com/milankl/LogFixPoint16s.jl/actions/workflows/CI.yml"><img src="https://github.com/milankl/LogFixPoint16s.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">Provides LogFixPoint16 - a (software-implemented) 16-bit <a href="https://en.wikipedia.org/wiki/Logarithmic_number_system" rel="nofollow">logarithmic fixed-point number</a> format with adjustable numbers of integer and fraction bits.</p>
<h3 dir="auto"><a id="user-content-example-use" class="anchor" aria-hidden="true" href="#example-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example use</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LogFixPoint16s
julia&gt; v = LogFixPoint16.(rand(Float32,5))
5-element Array{LogFixPoint16,1}:
 LogFixPoint16(0.8925083)
 LogFixPoint16(0.4919428)
 LogFixPoint16(0.69759846)
 LogFixPoint16(0.25616693)
 LogFixPoint16(0.57248604)

julia&gt; sum(v)
LogFixPoint16(2.9139352)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogFixPoint16s
julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">LogFixPoint16</span>.(<span class="pl-c1">rand</span>(Float32,<span class="pl-c1">5</span>))
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{LogFixPoint16,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">0.8925083</span>)
 <span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">0.4919428</span>)
 <span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">0.69759846</span>)
 <span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">0.25616693</span>)
 <span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">0.57248604</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(v)
<span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">2.9139352</span>)</pre></div>
<h3 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h3>
<p dir="auto">Exports <code>LogFixPoint16, iszero, isnan, signbit, zero, nan, floatmin, floatmax, one, -, inv, *, / , +, -, sqrt, nextfloat, prevfloat, ==, &lt;=, &gt;, &gt;=, show, bitstring</code> as well as conversions to and from <code>Float64, Float32, Float16, Int</code>.</p>
<p dir="auto">Although <code>LogFixPoint16</code> is always a 16-bit format, the number of fraction bits (in exchange for integer bits) can be adjusted between 7 and 11. For 7 fraction bits, <code>LogFixPoint16</code> has a similar dynamic range-precision trade-off as <code>BFloat16</code>; 10 fraction bits are similar to <code>Float16</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; LogFixPoint16s.set_nfrac(7)
┌ Warning: LogFixPoint16 was changed to 8 integer and 7 fraction bits.
└ @ Main.LogFixPoint16s ~/git/LogFixPoint16s.jl/src/LogFixPoint16s.jl:24"><pre>julia<span class="pl-k">&gt;</span> LogFixPoint16s<span class="pl-k">.</span><span class="pl-c1">set_nfrac</span>(<span class="pl-c1">7</span>)
┌ Warning<span class="pl-k">:</span> LogFixPoint16 was changed to <span class="pl-c1">8</span> integer and <span class="pl-c1">7</span> fraction bits.
└ @ Main<span class="pl-k">.</span>LogFixPoint16s <span class="pl-k">~</span><span class="pl-k">/</span>git<span class="pl-k">/</span>LogFixPoint16s<span class="pl-k">.</span>jl<span class="pl-k">/</span>src<span class="pl-k">/</span>LogFixPoint16s<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">24</span></pre></div>
<p dir="auto">Furthermode the rounding mode can be changed from round-to-nearest in linear space (default) to log space</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; LogFixPoint16s.set_rounding_mode(:log)
┌ Warning: LogFixPoint16 rounding mode changed to round to nearest in log-space.
└ @ LogFixPoint16s ~/.julia/packages/LogFixPoint16s/TGYbV/src/change_format.jl:48"><pre>julia<span class="pl-k">&gt;</span> LogFixPoint16s<span class="pl-k">.</span><span class="pl-c1">set_rounding_mode</span>(<span class="pl-c1">:log</span>)
┌ Warning<span class="pl-k">:</span> LogFixPoint16 rounding mode changed to round to nearest <span class="pl-k">in</span> log<span class="pl-k">-</span>space.
└ @ LogFixPoint16s <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>LogFixPoint16s<span class="pl-k">/</span>TGYbV<span class="pl-k">/</span>src<span class="pl-k">/</span>change_format<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">48</span></pre></div>
<p dir="auto">The two arguments <code>:lin</code> and <code>:log</code> are allowed.</p>
<h3 dir="auto"><a id="user-content-theory" class="anchor" aria-hidden="true" href="#theory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Theory</h3>
<p dir="auto">A real number <code>x</code> is encoded in LogFixPoint16 as</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = (-1)^s * 2^k"><pre class="notranslate"><code>x = (-1)^s * 2^k
</code></pre></div>
<p dir="auto">with <code>s</code> being the sign bit and <code>k = i+f</code> the fixed-point number in the exponent, consisting of a signed integer <code>i</code> and a fraction <code>f</code>, which is defined as the significant bits for floating-point numbers. E.g. the number <code>3</code> is encoded as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; bitstring(LogFixPoint16(3),:split)
&quot;0 1000001 10010110&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">bitstring</span>(<span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">3</span>),<span class="pl-c1">:split</span>)
<span class="pl-s"><span class="pl-pds">"</span>0 1000001 10010110<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">The sign bit is <code>0</code>, the sign bit of the signed integer is <code>1</code> (meaning + due to the biases <a href="https://en.wikipedia.org/wiki/Signed_number_representations#Comparison_table" rel="nofollow">excess</a> representation) such that the integer bits equal to <code>1</code>. The fraction bits are 1/2 + 1/16 + 1/64 + 1/128. Together this is</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="0 1000001 10010110 = +2^(1 + 1/2 + 1/16 + 1/64 + 1/128) = 2^1.5859375 ≈ 3"><pre class="notranslate"><code>0 1000001 10010110 = +2^(1 + 1/2 + 1/16 + 1/64 + 1/128) = 2^1.5859375 ≈ 3
</code></pre></div>
<p dir="auto">The only exceptions are the bitpatterns <code>0x0000</code> (zero) and <code>0x8000</code> (Not-a-Real, NaR). The smallest/largest representable numbers are (6 integer bits, 9 fraction bits)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; floatmin(LogFixPoint16)
LogFixPoint16(2.3314606e-10)

julia&gt; floatmax(LogFixPoint16)
LogFixPoint16(4.2891566e9)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">floatmin</span>(LogFixPoint16)
<span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">2.3314606e-10</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">floatmax</span>(LogFixPoint16)
<span class="pl-c1">LogFixPoint16</span>(<span class="pl-c1">4.2891566e9</span>)</pre></div>
<h3 dir="auto"><a id="user-content-decimal-precision" class="anchor" aria-hidden="true" href="#decimal-precision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Decimal precision</h3>
<p dir="auto">Logarithmic fixed-point numbers are placed equi-distantly on a log-scale. Consequently, their decimal precision is perfectly flat throughout the dynamic range of representable numbers. In contrast, floating-point numbers are only equi-distant in logarithmic space when the significand is held fixed; the significant bits, however, are linearly spaced.</p>
<p dir="auto">As a consequence there is no rounding error for logarithmic fixed-point numbers in multiplication, division, power of 2 or square root - similarly as there is no rounding error for fixed-point numbers for addition and subtraction - as long as no over or underflow occurs.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/decimal_precision.png?raw=true"><img src="figs/decimal_precision.png?raw=true" alt="decimal precision" title="decimal precision" style="max-width: 100%;"></a></p>
<p dir="auto">LogFixPoint16 with 10 fraction bits have a similar decimal precision / dynamic range trade-off as Float16, and 7 fraction bits are similar to BFloat16. However, these decimal precision only apply to additions, as multiplications are rounding error-free. <code>LogFixPoint16s.jl</code> also allows additionally for 8,9 or 11 fraction bits, which are not shown.</p>
<h3 dir="auto"><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmarks</h3>
<p dir="auto">Although <code>LogFixPoint16s</code> are software-emulated, they are considerably fast. Define some matrices</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LogFixPoint16s, BenchmarkTools
julia&gt; A = rand(Float32,1000,1000);
julia&gt; B = rand(Float32,1000,1000);
julia&gt; C,D = Float16.(A),Float16.(B);
julia&gt; E,F = LogFixPoint16.(A),LogFixPoint16.(B);"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LogFixPoint16s, BenchmarkTools
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>);
julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32,<span class="pl-c1">1000</span>,<span class="pl-c1">1000</span>);
julia<span class="pl-k">&gt;</span> C,D <span class="pl-k">=</span> <span class="pl-c1">Float16</span>.(A),<span class="pl-c1">Float16</span>.(B);
julia<span class="pl-k">&gt;</span> E,F <span class="pl-k">=</span> <span class="pl-c1">LogFixPoint16</span>.(A),<span class="pl-c1">LogFixPoint16</span>.(B);</pre></div>
<p dir="auto">And then benchmark via <code>@btime +($A,$B):</code> and so on. Then relative to <code>Float64</code> performance for addition:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Float64</th>
<th>Float32</th>
<th>BFloat16</th>
<th>Float16</th>
<th>LogFixPoint16</th>
</tr>
</thead>
<tbody>
<tr>
<td>Addition (+)</td>
<td>1200μs</td>
<td>500μs</td>
<td>400μs</td>
<td>1800μs</td>
<td>6500μs</td>
</tr>
<tr>
<td>Multiplication (.*)</td>
<td>1200μs</td>
<td>500μs</td>
<td>400μs</td>
<td>2500μs</td>
<td>250μs</td>
</tr>
<tr>
<td>Power (.^2)</td>
<td>700μs</td>
<td>300μs</td>
<td>2800μs</td>
<td>1000μs</td>
<td>700μs (*)</td>
</tr>
<tr>
<td>Square-root (sqrt.)</td>
<td>1800μs</td>
<td>900μs</td>
<td>1800μs</td>
<td>1200μs</td>
<td>170μs</td>
</tr>
</tbody>
</table>
<p dir="auto">On an Intel i5 (Ice Lake). (*) via <code>power2</code>.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<p dir="auto"><code>LogFixPoint16s.jl</code> is registered in the Julia Registry, so simply do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add LogFixPoint16s"><pre>julia<span class="pl-k">&gt;</span> ] add LogFixPoint16s</pre></div>
<p dir="auto">where <code>]</code> opens the package manager.</p>
</article></div>