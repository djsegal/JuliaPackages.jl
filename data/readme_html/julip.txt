<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-julip-julia-library-for-interatomic-potentials" class="anchor" aria-hidden="true" href="#julip-julia-library-for-interatomic-potentials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JuLIP: Julia Library for Interatomic Potentials</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/libAtoms/JuLIP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8c32338b5a15a0082225f909654024ad86390844/68747470733a2f2f7472617669732d63692e6f72672f6c696241746f6d732f4a754c49502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/libAtoms/JuLIP.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://gitter.im/libAtoms/JuLIP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6c22d8a371c78edc9749ac4fc9a893a096b0008/68747470733a2f2f6261646765732e6769747465722e696d2f6c696241746f6d732f4a754c49502e6a6c2e737667" alt="" data-canonical-src="https://badges.gitter.im/libAtoms/JuLIP.jl.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>

<p>A package for rapid implementation and testing of new interatomic potentials and
molecular simulation algorithms. There are versions for Julia v0.5.x, 0.6.x and
1.x. All development is for v1.x. Documentation is essentially non-existent but
the inline documentations is reasonably complete, and there are extensive tests that can be read in the absence of examples.</p>
<p>The design of <code>JuLIP</code> is heavily inspired by <a href="https://gitlab.com/ase/ase" rel="nofollow">ASE</a>.
The main motivation for <code>JuLIP</code> is that, while <code>ASE</code> is pure Python and hence
relies on external software to efficiently evaluate interatomic potentials,
Julia allows the  implementation of fast potentials in pure Julia, often in just
a few lines of code. <code>ASE</code> bindings compatible with <code>JuLIP</code> are provided by
<a href="https://github.com/cortner/ASE.jl.git">ASE.jl</a>. There are also reverse
bindings available via <a href="https://github.com/casv2/pyjulip"><code>pyjulip</code></a> which enable using <code>JuLIP</code> models from <code>ASE</code></p>
<p>Contributions are very welcome, especially for producing examples and tutorials. Any questions or suggestions, please ask on <a href="https://gitter.im/libAtoms/JuLIP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6c22d8a371c78edc9749ac4fc9a893a096b0008/68747470733a2f2f6261646765732e6769747465722e696d2f6c696241746f6d732f4a754c49502e6a6c2e737667" alt="" data-canonical-src="https://badges.gitter.im/libAtoms/JuLIP.jl.svg" style="max-width:100%;"></a>, or simply open an issue.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>The latest versions of JuLIP are no longer installed in the <code>General</code> registry.
To use these versions, you will first need to install the <a href="https://github.com/JuliaMolSim/MolSim"><code>MolSim</code> registry</a> via</p>
<div class="highlight highlight-source-julia"><pre>] registry add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaMolSim<span class="pl-k">/</span>MolSim<span class="pl-k">.</span>git</pre></div>
<p>Then, to install <code>JuLIP</code>,</p>
<div class="highlight highlight-source-julia"><pre>] add Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>JuLIP<span class="pl-pds">"</span></span>)</pre></div>
<p>and run</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>JuLIP<span class="pl-pds">"</span></span>)</pre></div>
<p>to make sure the installation succeeded. If a test fails, please open an issue.</p>
<p>Most likely you will also want to ASE bindings; please see
<a href="https://github.com/cortner/ASE.jl.git">ASE.jl</a> for more detail.</p>

<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<p>The following are some minimal examples to just get something to run.</p>
<h2><a id="user-content-vacancy-in-a-bulk-si-cell" class="anchor" aria-hidden="true" href="#vacancy-in-a-bulk-si-cell"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vacancy in a bulk Si cell</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuLIP
at <span class="pl-k">=</span> <span class="pl-c1">bulk</span>(<span class="pl-c1">:Si</span>, cubic<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">*</span> <span class="pl-c1">4</span>
<span class="pl-c1">deleteat!</span>(at, <span class="pl-c1">1</span>)
<span class="pl-c1">set_calculator!</span>(at, <span class="pl-c1">StillingerWeber</span>())
<span class="pl-c1">minimise!</span>(at)
<span class="pl-c1">@show</span> <span class="pl-c1">energy</span>(at)
<span class="pl-c"><span class="pl-c">#</span> Visualisation is current not working</span>
<span class="pl-c"><span class="pl-c">#</span> JuLIP.Visualise.draw(at)   # (this will only work in a ipynb)</span></pre></div>
<p>see the <code>BulkSilicon.ipynb</code> notebook under <code>examples</code> for an extended
example.</p>
<h2><a id="user-content-construction-of-a-buckingham-potential" class="anchor" aria-hidden="true" href="#construction-of-a-buckingham-potential"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Construction of a Buckingham potential</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuLIP
r0 <span class="pl-k">=</span> <span class="pl-c1">rnn</span>(<span class="pl-c1">:Al</span>)
pot <span class="pl-k">=</span> <span class="pl-k">let</span> A <span class="pl-k">=</span> <span class="pl-c1">4.0</span>, r0 <span class="pl-k">=</span> r0
   <span class="pl-c1">@analytic</span> r <span class="pl-k">-&gt;</span> <span class="pl-c1">6.0</span> <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span> A <span class="pl-k">*</span> (r<span class="pl-k">/</span>r0 <span class="pl-k">-</span> <span class="pl-c1">1.0</span>)) <span class="pl-k">-</span> A <span class="pl-k">*</span> (r0<span class="pl-k">/</span>r)<span class="pl-k">^</span><span class="pl-c1">6</span>
<span class="pl-k">end</span>
pot <span class="pl-k">=</span> pot <span class="pl-k">*</span> <span class="pl-c1">SplineCutoff</span>(<span class="pl-c1">2.1</span> <span class="pl-k">*</span> r0, <span class="pl-c1">3.5</span> <span class="pl-k">*</span> r0)
<span class="pl-c"><span class="pl-c">#</span> `pot` can now be used as a calculator to do something interesting ...</span>
<span class="pl-c"><span class="pl-c">#</span> ... or something boring</span>
at <span class="pl-k">=</span> <span class="pl-c1">rattle!</span>(<span class="pl-c1">bulk</span>(<span class="pl-c1">:Fe</span>, cubic<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">*</span> <span class="pl-c1">4</span>, <span class="pl-c1">0.1</span>)
<span class="pl-c1">energy</span>(pot, at)</pre></div>
<h2><a id="user-content-site-potential-with-ad" class="anchor" aria-hidden="true" href="#site-potential-with-ad"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Site Potential with AD</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JuLIP
<span class="pl-c"><span class="pl-c">#</span> and EAM-like site potential</span>
<span class="pl-en">f</span>(R) <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>( <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">sum</span>( <span class="pl-c1">exp</span>(<span class="pl-k">-</span><span class="pl-c1">norm</span>(r)) <span class="pl-k">for</span> r <span class="pl-k">in</span> R ) )
<span class="pl-c"><span class="pl-c">#</span> wrap it into a site potential type =&gt; can be used as AbstractCalculator</span>
V <span class="pl-k">=</span> <span class="pl-c1">ADPotential</span>(f)
<span class="pl-c"><span class="pl-c">#</span> evaluate V and ∇V</span>
R0 <span class="pl-k">=</span> [ <span class="pl-c1">@SVector</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>) <span class="pl-k">for</span> n <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nneigs ]
<span class="pl-c1">@show</span> <span class="pl-c1">V</span>(R0)
<span class="pl-c1">@show</span> (<span class="pl-c1">@D</span> <span class="pl-c1">V</span>(R0))</pre></div>

</article></div>