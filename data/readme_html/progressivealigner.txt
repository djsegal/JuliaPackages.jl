<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-progressivealigner" class="anchor" aria-hidden="true" href="#progressivealigner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ProgressiveAligner</h1>
<p><a href="https://gitter.im/latticetower/ProgressiveAligner.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/latticetower/ProgressiveAligner.jl" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/latticetower/ProgressiveAligner.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/24a2407cdf46752c2d339ad4519434668c2b778e/68747470733a2f2f7472617669732d63692e6f72672f6c617474696365746f7765722f50726f6772657373697665416c69676e65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/latticetower/ProgressiveAligner.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package contains progressive alignment tool for protein sequences written in Julia language (<a href="http://julialang.org/" rel="nofollow">http://julialang.org/</a>).</p>
<p>Builds phylogenetic tree with neighbour joining, UPGMA or WPGMA algorithm, then aligns protein sequences by their profiles.</p>
<p>Usage examples currently can be found in <code>test</code> folder.</p>
<h2><a id="user-content-typical-usage-pipeline" class="anchor" aria-hidden="true" href="#typical-usage-pipeline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Typical usage pipeline</h2>
<ol>
<li>call methods from <code>DataReader</code> submodule and read data from files.</li>
</ol>
<p>One way to get protein sequences - to read them from file:</p>
<pre><code>sequences = readSequences(dirname(@__FILE__()) * "/../data/input_test_sequences.faa")
</code></pre>
<p>After this call, <code>sequences</code> is an Array of <code>FastaRecord</code> objects. <code>FastaRecord</code> object can also be created directly, from description and protein sequence string:</p>
<pre><code>fasta_record  = FastaRecord("test string1", "ACGT")
</code></pre>
<p>Alignment algorithm uses alignment score matrix to score sequences; this matrix can be loaded from alignment matrix file, which can be loaded from NCBI ftp.</p>
<pre><code>matrix = readMatrix(dirname(@__FILE__()) * "/../data/blosum62.txt")
</code></pre>
<ol start="2">
<li>Convert and prepare data.</li>
</ol>
<p>Alignment algorithm don't use <code>FastaRecord</code> objects directly. It converts protein strings data to Profile objects, then merges these objects with different tree building methods to one <code>Profile</code>, which represents multiple alignment and can be converted to <code>Array</code> of <code>FastaRecord</code> objects with gaps.</p>
<p>First step is to incorporate <code>FastaRecord</code>s or strings to Array of <code>Profile</code>s:</p>
<pre><code>strToProfiles(strings :: Vector{FastaRecord}) = [Profile{Float64}(record.sequence, record.description) :: Profile{Float64} for record in strings]

profiles = strToProfiles(sequences)
</code></pre>
<p>For collection of strings, profile array creation can be done in similar way:</p>
<pre><code>start_vertices2 = [Profile{Float64}(str)::Profile{Float64} for str in
    [
      "CAP",
      "CAPT",
      "APT",
      "PPT"
      ]]
</code></pre>
<p>Second step is to set current scoring matrix. This can be done via call</p>
<pre><code>ProfileAligner.setScoringMatrix(score_matrix)
</code></pre>
<ol start="3">
<li>Define score and merge functions:</li>
</ol>
<pre><code>function scoreFunc(p1 :: Profile{Float64}, p2 :: Profile{Float64})
  ProfileAligner.scoreprofiles(p1, p2)
end

function mergeFunc(p1 :: Profile{Float64}, p2 :: Profile{Float64})
  ProfileAligner.align(p1, p2)
end
</code></pre>
<p>Score function returns best alignment score for given pair of profiles. Merge function returns resulting profile object, which can be build by best-scored alignment. The main difference between these two methods - first one can be be computed faster and can consume less memory.</p>
<p>Currently there is default implementation for both of these methods in <code>ProfileAligner</code> submodule (corresponding methods are shown in previous code example), which uses score matrix, set by <code>setScoringMatrix</code> call, to select best-scored profile alignment.</p>
<ol start="4">
<li>Select one of tree-based methods to perform multiple alignment.</li>
</ol>
<p>Currently 3 clustering algorithms are implemented - <code>NeighbourJoining</code>, <code>UPGMA</code>, <code>WPGMA</code>. They got similar signature and can be called like that:</p>
<pre><code>njResult = NeighbourJoining(profiles, scoreFunc, mergeFunc)
wpgmaResult = WPGMA(profiles, scoreFunc, mergeFunc)
upgmaResult = UPGMA(profiles, scoreFunc, mergeFunc)
</code></pre>
<p>The result of each of these calls is a single Profile object, which represents multiple alignment.</p>
<ol start="5">
<li>Convert alignment result to readable way. Save results to file.</li>
</ol>
<p><code>ProfileAligner</code> submodule provides utility method <code>getstrings</code>, which converts <code>Profile</code> representation back to array of <code>FastaRecord</code> objects (probably with gaps).</p>
<pre><code>getstrings(result)
</code></pre>
<p>There is also utility submodule <code>DataWriter</code>, which can be used to save resulting multiple sequence alignment to .fasta-like file.</p>
<pre><code>writeSequences(output_file, getstrings(result))
</code></pre>
<p>First parameter should contain file name to save these records.</p>
<p>There is no differences in file format from typical .fasta, except one - in resulting sequence alignment, each string can contain gaps, represented by '-' symbol. Descriptions are kept to make it possible to find where aligned string came from (and we know that clustering algorithms mix input nodes and can change their order).</p>
</article></div>