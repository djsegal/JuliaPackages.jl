<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-progressivealigner" class="anchor" aria-hidden="true" href="#progressivealigner"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProgressiveAligner</h1>
<p dir="auto"><a href="https://gitter.im/latticetower/ProgressiveAligner.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/latticetower/ProgressiveAligner.jl" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://travis-ci.org/latticetower/ProgressiveAligner.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a7afe8d9e39905063a5ee0c572e2c4f63e9a851d2df2ba9007fbe4f3770de593/68747470733a2f2f7472617669732d63692e6f72672f6c617474696365746f7765722f50726f6772657373697665416c69676e65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/latticetower/ProgressiveAligner.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package contains progressive alignment tool for protein sequences written in Julia language (<a href="http://julialang.org/" rel="nofollow">http://julialang.org/</a>).</p>
<p dir="auto">Builds phylogenetic tree with neighbour joining, UPGMA or WPGMA algorithm, then aligns protein sequences by their profiles.</p>
<p dir="auto">Usage examples currently can be found in <code>test</code> folder.</p>
<h2 dir="auto"><a id="user-content-typical-usage-pipeline" class="anchor" aria-hidden="true" href="#typical-usage-pipeline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Typical usage pipeline</h2>
<ol dir="auto">
<li>call methods from <code>DataReader</code> submodule and read data from files.</li>
</ol>
<p dir="auto">One way to get protein sequences - to read them from file:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="sequences = readSequences(dirname(@__FILE__()) * &quot;/../data/input_test_sequences.faa&quot;)"><pre class="notranslate"><code>sequences = readSequences(dirname(@__FILE__()) * "/../data/input_test_sequences.faa")
</code></pre></div>
<p dir="auto">After this call, <code>sequences</code> is an Array of <code>FastaRecord</code> objects. <code>FastaRecord</code> object can also be created directly, from description and protein sequence string:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="fasta_record  = FastaRecord(&quot;test string1&quot;, &quot;ACGT&quot;)"><pre class="notranslate"><code>fasta_record  = FastaRecord("test string1", "ACGT")
</code></pre></div>
<p dir="auto">Alignment algorithm uses alignment score matrix to score sequences; this matrix can be loaded from alignment matrix file, which can be loaded from NCBI ftp.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="matrix = readMatrix(dirname(@__FILE__()) * &quot;/../data/blosum62.txt&quot;)"><pre class="notranslate"><code>matrix = readMatrix(dirname(@__FILE__()) * "/../data/blosum62.txt")
</code></pre></div>
<ol start="2" dir="auto">
<li>Convert and prepare data.</li>
</ol>
<p dir="auto">Alignment algorithm don't use <code>FastaRecord</code> objects directly. It converts protein strings data to Profile objects, then merges these objects with different tree building methods to one <code>Profile</code>, which represents multiple alignment and can be converted to <code>Array</code> of <code>FastaRecord</code> objects with gaps.</p>
<p dir="auto">First step is to incorporate <code>FastaRecord</code>s or strings to Array of <code>Profile</code>s:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="strToProfiles(strings :: Vector{FastaRecord}) = [Profile{Float64}(record.sequence, record.description) :: Profile{Float64} for record in strings]

profiles = strToProfiles(sequences)"><pre class="notranslate"><code>strToProfiles(strings :: Vector{FastaRecord}) = [Profile{Float64}(record.sequence, record.description) :: Profile{Float64} for record in strings]

profiles = strToProfiles(sequences)
</code></pre></div>
<p dir="auto">For collection of strings, profile array creation can be done in similar way:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="start_vertices2 = [Profile{Float64}(str)::Profile{Float64} for str in
    [
      &quot;CAP&quot;,
      &quot;CAPT&quot;,
      &quot;APT&quot;,
      &quot;PPT&quot;
      ]]"><pre class="notranslate"><code>start_vertices2 = [Profile{Float64}(str)::Profile{Float64} for str in
    [
      "CAP",
      "CAPT",
      "APT",
      "PPT"
      ]]
</code></pre></div>
<p dir="auto">Second step is to set current scoring matrix. This can be done via call</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="ProfileAligner.setScoringMatrix(score_matrix)"><pre class="notranslate"><code>ProfileAligner.setScoringMatrix(score_matrix)
</code></pre></div>
<ol start="3" dir="auto">
<li>Define score and merge functions:</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function scoreFunc(p1 :: Profile{Float64}, p2 :: Profile{Float64})
  ProfileAligner.scoreprofiles(p1, p2)
end

function mergeFunc(p1 :: Profile{Float64}, p2 :: Profile{Float64})
  ProfileAligner.align(p1, p2)
end"><pre class="notranslate"><code>function scoreFunc(p1 :: Profile{Float64}, p2 :: Profile{Float64})
  ProfileAligner.scoreprofiles(p1, p2)
end

function mergeFunc(p1 :: Profile{Float64}, p2 :: Profile{Float64})
  ProfileAligner.align(p1, p2)
end
</code></pre></div>
<p dir="auto">Score function returns best alignment score for given pair of profiles. Merge function returns resulting profile object, which can be build by best-scored alignment. The main difference between these two methods - first one can be be computed faster and can consume less memory.</p>
<p dir="auto">Currently there is default implementation for both of these methods in <code>ProfileAligner</code> submodule (corresponding methods are shown in previous code example), which uses score matrix, set by <code>setScoringMatrix</code> call, to select best-scored profile alignment.</p>
<ol start="4" dir="auto">
<li>Select one of tree-based methods to perform multiple alignment.</li>
</ol>
<p dir="auto">Currently 3 clustering algorithms are implemented - <code>NeighbourJoining</code>, <code>UPGMA</code>, <code>WPGMA</code>. They got similar signature and can be called like that:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="njResult = NeighbourJoining(profiles, scoreFunc, mergeFunc)
wpgmaResult = WPGMA(profiles, scoreFunc, mergeFunc)
upgmaResult = UPGMA(profiles, scoreFunc, mergeFunc)"><pre class="notranslate"><code>njResult = NeighbourJoining(profiles, scoreFunc, mergeFunc)
wpgmaResult = WPGMA(profiles, scoreFunc, mergeFunc)
upgmaResult = UPGMA(profiles, scoreFunc, mergeFunc)
</code></pre></div>
<p dir="auto">The result of each of these calls is a single Profile object, which represents multiple alignment.</p>
<ol start="5" dir="auto">
<li>Convert alignment result to readable way. Save results to file.</li>
</ol>
<p dir="auto"><code>ProfileAligner</code> submodule provides utility method <code>getstrings</code>, which converts <code>Profile</code> representation back to array of <code>FastaRecord</code> objects (probably with gaps).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="getstrings(result)"><pre class="notranslate"><code>getstrings(result)
</code></pre></div>
<p dir="auto">There is also utility submodule <code>DataWriter</code>, which can be used to save resulting multiple sequence alignment to .fasta-like file.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="writeSequences(output_file, getstrings(result))"><pre class="notranslate"><code>writeSequences(output_file, getstrings(result))
</code></pre></div>
<p dir="auto">First parameter should contain file name to save these records.</p>
<p dir="auto">There is no differences in file format from typical .fasta, except one - in resulting sequence alignment, each string can contain gaps, represented by '-' symbol. Descriptions are kept to make it possible to find where aligned string came from (and we know that clustering algorithms mix input nodes and can change their order).</p>
</article></div>