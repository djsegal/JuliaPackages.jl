<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-independentcomponentanalysis" class="anchor" aria-hidden="true" href="#independentcomponentanalysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IndependentComponentAnalysis</h1>
<p><a href="https://github.com/baggepinnen/IndependentComponentAnalysis.jl/actions"><img src="https://github.com/baggepinnen/IndependentComponentAnalysis.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/IndependentComponentAnalysis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c2611e4cda9d46264b7f6570fa7838ee5b459812dcb4817f96ea7bae656e304e/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f496e646570656e64656e74436f6d706f6e656e74416e616c797369732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/baggepinnen/IndependentComponentAnalysis.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-ica" class="anchor" aria-hidden="true" href="#ica"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ICA</h2>
<p>This package modifies the implementation of the FastICA algorithm from <a href="https://github.com/JuliaStats/MultivariateStats.jl">MultivariateStats.jl</a> to make it more than 5x faster. This comes at the expense of taking an additional dependency, on <a href="https://github.com/chriselrod/LoopVectorization.jl">LoopVectorization.jl</a> and some additional compilation time.</p>
<p>This package also modifies the interface to the algorithm slightly, use it like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using IndependentComponentAnalysis
X = randn(4,100)
k = 2 # Number of components to extract
ica = fit(ICA, X, k,  alg = FastICA();
                fun       = Tanh(),
                do_whiten = true,
                maxiter   = 100,
                tol       = 1e-6,
                mean      = nothing,
                winit     = nothing
      )

Xt = transform(ica, X)
"><pre><span class="pl-k">using</span> IndependentComponentAnalysis
X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">4</span>,<span class="pl-c1">100</span>)
k <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Number of components to extract</span>
ica <span class="pl-k">=</span> <span class="pl-c1">fit</span>(ICA, X, k,  alg <span class="pl-k">=</span> <span class="pl-c1">FastICA</span>();
                fun       <span class="pl-k">=</span> <span class="pl-c1">Tanh</span>(),
                do_whiten <span class="pl-k">=</span> <span class="pl-c1">true</span>,
                maxiter   <span class="pl-k">=</span> <span class="pl-c1">100</span>,
                tol       <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>,
                mean      <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
                winit     <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
      )

Xt <span class="pl-k">=</span> <span class="pl-c1">transform</span>(ica, X)</pre></div>
<ul>
<li>The options for <code>fun</code> are <code>Tanh(a::Real)</code> and <code>Gaus()</code></li>
<li>If you have also loaded MultivariateStats, a conflict will arise, cauing you to have to qualify <code>fun</code> like this: <code>IndependentComponentAnalysis.Tanh</code> etc. If <a href="https://github.com/JuliaStats/MultivariateStats.jl/pull/122">this PR</a> is merged, this package will work better together with MultivariateStats.</li>
</ul>
<h2><a id="user-content-duet" class="anchor" aria-hidden="true" href="#duet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DUET</h2>
<p><a href="https://www.researchgate.net/publication/227143748_The_DUET_blind_source_separation_algorithm" rel="nofollow">DUET</a> (Degenerate Unmixing Estimation Technique) is an algorithm for blind source separation. It works on stereo mixtures and can separate any number of sources as long as they do not overlap in the time-frequency domain. The interface looks like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="est, H = duet( x1, x2, n_sources, n = 1024;
                    p            = 1, # amplitude power used to weight histogram
                    q            = 0, # delay power used to weight histogram
                    amax         = 0.7,
                    dmax         = 3.6,
                    abins        = 35,
                    dbins        = 50,
                    kernel_size  = 1, # Controls the smoothing of the histogram.
                    bigdelay     = false,
                    kernel_sizeδ = 1,
                    window       = hanning,
                    kwargs..., # These are sent to the stft function
)
"><pre>est, H <span class="pl-k">=</span> <span class="pl-c1">duet</span>( x1, x2, n_sources, n <span class="pl-k">=</span> <span class="pl-c1">1024</span>;
                    p            <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c"><span class="pl-c">#</span> amplitude power used to weight histogram</span>
                    q            <span class="pl-k">=</span> <span class="pl-c1">0</span>, <span class="pl-c"><span class="pl-c">#</span> delay power used to weight histogram</span>
                    amax         <span class="pl-k">=</span> <span class="pl-c1">0.7</span>,
                    dmax         <span class="pl-k">=</span> <span class="pl-c1">3.6</span>,
                    abins        <span class="pl-k">=</span> <span class="pl-c1">35</span>,
                    dbins        <span class="pl-k">=</span> <span class="pl-c1">50</span>,
                    kernel_size  <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c"><span class="pl-c">#</span> Controls the smoothing of the histogram.</span>
                    bigdelay     <span class="pl-k">=</span> <span class="pl-c1">false</span>,
                    kernel_sizeδ <span class="pl-k">=</span> <span class="pl-c1">1</span>,
                    window       <span class="pl-k">=</span> hanning,
                    kwargs<span class="pl-k">...</span>, <span class="pl-c"><span class="pl-c">#</span> These are sent to the stft function</span>
)</pre></div>
<p>The returned values are <code>est::Matrix(time, n_sources)</code> and <code>H::DUET</code>.
<code>H</code> can be plotted <code>plot(H)</code>, which shows the delay/amplitude histogram and the identified peaks. This can be used to tweak the input parameters.</p>
<ul>
<li><code>bigdelay</code> indicates whether or not the two microphones are far apart. If <code>true</code>, the delay <code>δ</code> is estimated using the differential method (see the paper sec 8.4.1) and the delay map is smoothed using <code>kernel_sizeδ</code>.</li>
</ul>
<h4><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example:</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="t  = 0:0.1:2000
x1 = sin.(t)
x2 = @. 1.3 * sign(sin(2t + 0.2) ) + 0.001 * randn()
W  = [0.3 0.7; 0.6 0.4] # Mixing matrix
R  = W * [x1 x2]'
r1, r2 = R[1, :], R[2, :]

est, H = duet( r1, r2, 2, 1024,
    dmax        = 3.5,
    amax        = 2.8,
    kernel_size = 1,
)

plotinds = 10000:10200
plot(plotinds, est[plotinds,:], lab = &quot;Estimated components&quot;, c = :blue)
plot!(plotinds, [x1 x2][plotinds,:], lab = &quot;True signal&quot;, c = :black)
plot!(plotinds, [r1 r2][plotinds,:], lab = &quot;Received signal&quot;, c = :orange) |&gt; display

plot(H) |&gt; display
"><pre>t  <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">2000</span>
x1 <span class="pl-k">=</span> <span class="pl-c1">sin</span>.(t)
x2 <span class="pl-k">=</span> <span class="pl-c1">@.</span> <span class="pl-c1">1.3</span> <span class="pl-k">*</span> <span class="pl-c1">sign</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">2</span>t <span class="pl-k">+</span> <span class="pl-c1">0.2</span>) ) <span class="pl-k">+</span> <span class="pl-c1">0.001</span> <span class="pl-k">*</span> <span class="pl-c1">randn</span>()
W  <span class="pl-k">=</span> [<span class="pl-c1">0.3</span> <span class="pl-c1">0.7</span>; <span class="pl-c1">0.6</span> <span class="pl-c1">0.4</span>] <span class="pl-c"><span class="pl-c">#</span> Mixing matrix</span>
R  <span class="pl-k">=</span> W <span class="pl-k">*</span> [x1 x2]'
r1, r2 <span class="pl-k">=</span> R[<span class="pl-c1">1</span>, :], R[<span class="pl-c1">2</span>, :]

est, H <span class="pl-k">=</span> <span class="pl-c1">duet</span>( r1, r2, <span class="pl-c1">2</span>, <span class="pl-c1">1024</span>,
    dmax        <span class="pl-k">=</span> <span class="pl-c1">3.5</span>,
    amax        <span class="pl-k">=</span> <span class="pl-c1">2.8</span>,
    kernel_size <span class="pl-k">=</span> <span class="pl-c1">1</span>,
)

plotinds <span class="pl-k">=</span> <span class="pl-c1">10000</span><span class="pl-k">:</span><span class="pl-c1">10200</span>
<span class="pl-c1">plot</span>(plotinds, est[plotinds,:], lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Estimated components<span class="pl-pds">"</span></span>, c <span class="pl-k">=</span> <span class="pl-c1">:blue</span>)
<span class="pl-c1">plot!</span>(plotinds, [x1 x2][plotinds,:], lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>True signal<span class="pl-pds">"</span></span>, c <span class="pl-k">=</span> <span class="pl-c1">:black</span>)
<span class="pl-c1">plot!</span>(plotinds, [r1 r2][plotinds,:], lab <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Received signal<span class="pl-pds">"</span></span>, c <span class="pl-k">=</span> <span class="pl-c1">:orange</span>) <span class="pl-k">|&gt;</span> display

<span class="pl-c1">plot</span>(H) <span class="pl-k">|&gt;</span> display</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="figs/signals.svg"><img src="figs/signals.svg" alt="signals" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="figs/hist.svg"><img src="figs/hist.svg" alt="hist" style="max-width:100%;"></a></p>
<h3><a id="user-content-creating-mixture-signals" class="anchor" aria-hidden="true" href="#creating-mixture-signals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating mixture signals</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="mix   = mixture(signals, amps, [delays::Vector{Int}])
mixes = mixture(signals, amps::Vector{Vector}, [delays::Vector{Vector{Int}}])
"><pre>mix   <span class="pl-k">=</span> <span class="pl-c1">mixture</span>(signals, amps, [delays<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>])
mixes <span class="pl-k">=</span> <span class="pl-c1">mixture</span>(signals, amps<span class="pl-k">::</span><span class="pl-c1">Vector{Vector}</span>, [delays<span class="pl-k">::</span><span class="pl-c1">Vector{Vector{Int}}</span>])</pre></div>
<p>Mixes together signals using amplitudes <code>amps</code> and <code>delays</code> (<code>delays</code> is specified in samples). If <code>amps</code> and the optional <code>delays</code> are vectors of vectors, then a vector of mixtures is returned. A vector of vectors is converted to a matrix using <code>M = reduce(hcat, mixes)</code>.</p>
</article></div>