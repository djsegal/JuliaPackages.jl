<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-interactivecodesearchjl---interactively-search-julia-code" class="anchor" aria-hidden="true" href="#interactivecodesearchjl---interactively-search-julia-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>InteractiveCodeSearch.jl –- Interactively search Julia code</h1>
<p><a href="https://travis-ci.org/tkf/InteractiveCodeSearch.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/37dee3e542f6698b10c2ab30f654217b9823c149/68747470733a2f2f7472617669732d63692e6f72672f746b662f496e746572616374697665436f64655365617263682e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tkf/InteractiveCodeSearch.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/tkf/InteractiveCodeSearch.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a69ed12c68de1bf93080f590ad95dcdaface2e81/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f746b662f496e746572616374697665436f64655365617263682e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/tkf/InteractiveCodeSearch.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tkf/InteractiveCodeSearch.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/21f1d1c13c75e5e3949c254d6db7604f5373d33b/687474703a2f2f636f6465636f762e696f2f6769746875622f746b662f496e746572616374697665436f64655365617263682e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tkf/InteractiveCodeSearch.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="search.gif"><img src="search.gif" alt="gif animation" title="Searching code using @search" style="max-width:100%;"></a></p>
<p>Julia has <code>@edit</code>, <code>@less</code>, etc. which are very handy for reading the implementation of functions.  However, you need to specify a "good enough" set of (type) parameters for them to find the location of the code.</p>
<p>Instead, <code>InteractiveCodeSearch</code> provides a few macros to interactively choose the code you want to read.</p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h2>
<ul>
<li>Interactively choose a method signature before opening the code location in your editor.</li>
<li>Various ways to search methods, such as: by function name <code>@search show</code>, function call expression <code>@search show(stdout, "hello")</code>, function call signature <code>@search show(::IO, ::String)</code>, module name <code>@search Base</code>, argument value <code>@searchmethods 1</code>, argument type <code>@searchmethods ::Int</code>, and return type <code>@searchreturn Int</code>.</li>
<li>Interactively search history.  It works in IJulia as well.</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> InteractiveCodeSearch
<span class="pl-c1">@search</span> show             <span class="pl-c"><span class="pl-c">#</span> search method definitions</span>
<span class="pl-c1">@searchmethods</span> <span class="pl-c1">1</span>         <span class="pl-c"><span class="pl-c">#</span> search methods defined for integer</span>
<span class="pl-c1">@searchhistory</span>           <span class="pl-c"><span class="pl-c">#</span> search history (Julia ≥ 0.7)</span>
<span class="pl-c1">@searchreturn</span> String Pkg <span class="pl-c"><span class="pl-c">#</span> search methods returning a given type (Julia ≥ 0.7)</span></pre></div>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements</h2>
<ul>
<li>
<p>Interactive matching command.  For example:</p>
<ul>
<li><a href="https://github.com/peco/peco">peco</a> (default in terminal)</li>
<li><a href="https://github.com/mooz/percol">percol</a></li>
<li><a href="https://github.com/DaveDavenport/rofi">rofi</a> (GUI; default in IJulia)</li>
</ul>
</li>
</ul>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reference</h2>
<h3><a id="user-content-search" class="anchor" aria-hidden="true" href="#search"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@search</code></h3>
<pre><code>@search x [:shallow | :s | :recursive | :r]
</code></pre>
<p>List file locations at which <code>x</code> are defined in an interactive matcher and then open the chosen location in the editor.</p>
<p>When <code>x</code> is a module, only the top-level definitions are searched.  To search all definitions in the submodule, pass <code>:recursive</code> or <code>:r</code> flag.</p>
<pre><code>@search
</code></pre>
<p>If no expression is provided, search for the method returned by the previous execution; i.e., <code>x</code> defaults to <code>ans</code>.</p>
<p><strong>Examples</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@search</span> show                      <span class="pl-c"><span class="pl-c">#</span> all method definitions</span>
<span class="pl-c1">@search</span> <span class="pl-c1">@time</span>                     <span class="pl-c"><span class="pl-c">#</span> all macro definitions</span>
<span class="pl-c1">@search</span> Base<span class="pl-k">.</span>Enums                <span class="pl-c"><span class="pl-c">#</span> methods and macros in a module</span>
<span class="pl-c1">@search</span> REPL <span class="pl-c1">:r</span>                   <span class="pl-c"><span class="pl-c">#</span> search the module recursively</span>
<span class="pl-c1">@search</span> <span class="pl-k">*</span>(<span class="pl-k">::</span><span class="pl-c1">Integer</span>, <span class="pl-k">::</span><span class="pl-c1">Integer</span>)   <span class="pl-c"><span class="pl-c">#</span> methods with specified types</span>
<span class="pl-c1">@search</span> <span class="pl-c1">dot</span>(π, ℯ)                 <span class="pl-c"><span class="pl-c">#</span> methods with inferred types</span></pre></div>
<p>Note that <code>@search</code> evaluates complex expression with <code>.</code> and <code>[]</code> such as follows and search the returned value or the type of it:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@search</span> Base<span class="pl-k">.</span>Multimedia<span class="pl-k">.</span>displays[<span class="pl-c1">2</span>]<span class="pl-k">.</span>repl</pre></div>
<h3><a id="user-content-searchmethods" class="anchor" aria-hidden="true" href="#searchmethods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@searchmethods</code></h3>
<pre><code>@searchmethods x
@searchmethods ::X
</code></pre>
<p>Interactively search through <code>methodswith(typeof(x))</code> or <code>methodswith(X)</code>.</p>
<p><strong>Examples</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@searchmethods</span> <span class="pl-c1">1</span>         <span class="pl-c"><span class="pl-c">#</span> search methods defined for integer</span>
<span class="pl-c1">@searchmethods</span> <span class="pl-k">::</span><span class="pl-c1">Int</span>     <span class="pl-c"><span class="pl-c">#</span> search methods defined for a specified type</span></pre></div>
<h3><a id="user-content-searchhistory" class="anchor" aria-hidden="true" href="#searchhistory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@searchhistory</code></h3>
<pre><code>@searchhistory
</code></pre>
<p>Search history interactively.  Interactively narrows down the code you looking for from the REPL history.</p>
<p><em>Limitation/feature in IJulia</em>: In IJulia, <code>@searchhistory</code> searches history of terminal REPL, not the history of the current IJulia session.</p>
<h3><a id="user-content-searchreturn" class="anchor" aria-hidden="true" href="#searchreturn"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@searchreturn</code></h3>
<pre><code>@searchreturn Type [Module...]
</code></pre>
<p>Search functions returning type <code>Type</code> in <code>Module</code>s.  As this search typically takes some time to finish, interactive matcher will not be launched by this command.  Instead, a "handle" to the search in background is returned which can be queried via <code>@search</code> later. Calling <code>kill</code> (<code>Base.kill</code>) on the handle cancels the search.</p>
<p><strong>Limitations</strong></p>
<ul>
<li>Running <code>@searchreturn</code> for many modules may be slow for the <em>first</em> run.  Thus, searching from all modules (i.e., not specifying <code>Module</code> arguments) may take tens of seconds to minutes, depending of what are loaded.  Searching within <code>Base</code> takes about 30 seconds. After <code>DifferentialEquations</code> is loaded, searching for all modules takes 1.5 minutes.  Note that searching from the same module for the second time is fast (a few seconds), even if different <code>Type</code> is specified.</li>
<li>The functions must be executed (JIT'ed) once for <code>@searchreturn</code> to find their returned by type.</li>
<li>Any IO operations (like printing in REPL) would be slow while the search is active in background.</li>
<li>Keyboard interruption does not work well while background search is active.  You need to hit CTRL-C multiple times to terminate a "foreground" code.  Furthermore, it will bring down the background search task as well.</li>
</ul>
<p><strong>Examples</strong></p>
<pre lang="julia-repl"><code>julia&gt; using LinearAlgebra, SparseArrays

julia&gt; spzeros(3, 3)

julia&gt; @searchreturn AbstractMatrix LinearAlgebra SparseArrays
┌ Info: Search result is stored in variable `_s1`.
│ You can interactively narrow down the search result later by
└ `@search _s1` or `@search 1`.

BackgroundSearch id=1 [active] 0 found
Searching ::AbstractArray{T,2} where T from Module[LinearAlgebra SparseArrays] recursively

julia&gt; @search _s1

julia&gt; kill(_s1)  # stop the search
</code></pre>
<p>If you prefer giving a custom name to the search result, just assign it to some variable.</p>
<pre lang="julia-repl"><code>julia&gt; my_search = @searchreturn AbstractMatrix LinearAlgebra SparseArrays
julia&gt; @search my_search
</code></pre>
<h3><a id="user-content-interactivecodesearchconfig" class="anchor" aria-hidden="true" href="#interactivecodesearchconfig"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>InteractiveCodeSearch.CONFIG</code></h3>
<p>Configuration interface for <code>InteractiveCodeSearch</code>.</p>
<p><strong>Examples</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> InteractiveCodeSearch
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>interactive_matcher <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">`</span>peco<span class="pl-pds">`</span></span>  <span class="pl-c"><span class="pl-c">#</span> default in terminal</span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>interactive_matcher <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">`</span>percol<span class="pl-pds">`</span></span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>interactive_matcher <span class="pl-k">=</span>
    <span class="pl-s"><span class="pl-pds">`</span>rofi -dmenu -i -p "🔎"<span class="pl-pds">`</span></span>  <span class="pl-c"><span class="pl-c">#</span> use GUI matcher (default in non-terminal</span>
                              <span class="pl-c"><span class="pl-c">#</span> environment like IJulia)</span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>interactive_matcher <span class="pl-k">=</span>
    <span class="pl-s"><span class="pl-pds">`</span>rofi -dmenu -i -p "🔎" -fullscreen<span class="pl-pds">`</span></span>  <span class="pl-c"><span class="pl-c">#</span> bigger screen</span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>open <span class="pl-k">=</span> edit  <span class="pl-c"><span class="pl-c">#</span> default</span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>open <span class="pl-k">=</span> less  <span class="pl-c"><span class="pl-c">#</span> use Base.less to read code</span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>auto_open <span class="pl-k">=</span> <span class="pl-c1">true</span>   <span class="pl-c"><span class="pl-c">#</span> default</span>
InteractiveCodeSearch<span class="pl-k">.</span>CONFIG<span class="pl-k">.</span>auto_open <span class="pl-k">=</span> <span class="pl-c1">false</span>  <span class="pl-c"><span class="pl-c">#</span> open matcher even when there</span>
                                                <span class="pl-c"><span class="pl-c">#</span> is only one candidate</span></pre></div>
<p><strong>Using InteractiveCodeSearch.jl by default</strong></p>
<p>Put the following code in your <code>~/.julia/config/startup.jl</code> (≥ Julia 0.7) or <code>~/.juliarc.jl</code> (Julia 0.6):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> InteractiveCodeSearch
<span class="pl-c"><span class="pl-c">#</span> InteractiveCodeSearch.CONFIG.interactive_matcher = ...</span></pre></div>

</article></div>