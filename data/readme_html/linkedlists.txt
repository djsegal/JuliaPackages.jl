<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-linkedlistsjl" class="anchor" aria-hidden="true" href="#linkedlistsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LinkedLists.jl</h1>
<p><a href="https://travis-ci.org/ChrisRackauckas/LinkedLists.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6b6e826d7d62ab8d6772371da0027ede9f97d5918891258f9d5cf01d451f4f7/68747470733a2f2f7472617669732d63692e6f72672f43687269735261636b6175636b61732f4c696e6b65644c697374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ChrisRackauckas/LinkedLists.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/linkedlists-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4760fa575ca2b2dd14ff59a40dfade3bbcb97349e0b518f801d18fb2ae99fd1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6976696b7762316438786e677276796f3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ivikwb1d8xngrvyo?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ChrisRackauckas/LinkedLists.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/49eaf4e41e7f0f7721bd6c2c6391927bb489eb7361c8c5cef28b7ea34a3ad5c4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f43687269735261636b6175636b61732f4c696e6b65644c697374732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ChrisRackauckas/LinkedLists.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>LinkedList collections for Julia</strong></p>
<p>This package provides a singly linked list and a doubly linked list
implementation, as Julia collections. Singly linked lists are
supported with <code>cons</code>, <code>car</code>, and <code>cdr</code>, but not as a standard
collection. Doubly linked lists are included in the samples but,
again, not as a collection. This doesn't do anything fancy
like create an array of nodes. Maybe it should.</p>
<h2><a id="user-content-linkedlist" class="anchor" aria-hidden="true" href="#linkedlist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LinkedList</h2>
<p><code>LinkedList</code> is a doubly linked list. Deletions happen in constant time.
If code contains an index to an item in the list, then
removing other items in the list won't invalidate that index.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = LinkedList{Int}()    # Create a list of the given type.
isempty(l)         # Test whether there are any items.
empty!(l)          # Remove all items.
length(l)          # The number of entries. An O(n) operation.
2 in l             # Test whether the given item is an entry in the list. returns Bool or missing. O(n).
eltype(l)          # Returns the item type, here Int.
indexin(a, l)      # Highest index in list for each value of a that is member.
first(l)           # First item in the list.
last(l)            # Last item in the list, the item value.
push!(l, d)        # Add item d to end of list. Returns index of item.
pop!(l, d)         # Remove and return item at end of list.
pushfirst!(l, d)   # Add item to start of list. Return index of item.
popfirst!(l)       # Remove first item and return value.
append!(l, items)  # Add items to end of list.
prepend!(l, items) # Add items to start of list.
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">LinkedList</span><span class="pl-c1">{Int}</span>()    <span class="pl-c"><span class="pl-c">#</span> Create a list of the given type.</span>
<span class="pl-c1">isempty</span>(l)         <span class="pl-c"><span class="pl-c">#</span> Test whether there are any items.</span>
<span class="pl-c1">empty!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove all items.</span>
<span class="pl-c1">length</span>(l)          <span class="pl-c"><span class="pl-c">#</span> The number of entries. An O(n) operation.</span>
<span class="pl-c1">2</span> <span class="pl-k">in</span> l             <span class="pl-c"><span class="pl-c">#</span> Test whether the given item is an entry in the list. returns Bool or missing. O(n).</span>
<span class="pl-c1">eltype</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Returns the item type, here Int.</span>
<span class="pl-c1">indexin</span>(a, l)      <span class="pl-c"><span class="pl-c">#</span> Highest index in list for each value of a that is member.</span>
<span class="pl-c1">first</span>(l)           <span class="pl-c"><span class="pl-c">#</span> First item in the list.</span>
<span class="pl-c1">last</span>(l)            <span class="pl-c"><span class="pl-c">#</span> Last item in the list, the item value.</span>
<span class="pl-c1">push!</span>(l, d)        <span class="pl-c"><span class="pl-c">#</span> Add item d to end of list. Returns index of item.</span>
<span class="pl-c1">pop!</span>(l, d)         <span class="pl-c"><span class="pl-c">#</span> Remove and return item at end of list.</span>
<span class="pl-c1">pushfirst!</span>(l, d)   <span class="pl-c"><span class="pl-c">#</span> Add item to start of list. Return index of item.</span>
<span class="pl-c1">popfirst!</span>(l)       <span class="pl-c"><span class="pl-c">#</span> Remove first item and return value.</span>
<span class="pl-c1">append!</span>(l, items)  <span class="pl-c"><span class="pl-c">#</span> Add items to end of list.</span>
<span class="pl-c1">prepend!</span>(l, items) <span class="pl-c"><span class="pl-c">#</span> Add items to start of list.</span></pre></div>
<p>There can be an index into the list. It is a reference to a list
node but can be treated as an opaque index. Two wrapper functions are provided to convert from nodes to integer positions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getindex(l, index)          # Returns value of item at this index.
setindex!(l, index, d)      # Sets item value at this index.
lastindex(l)                # Returns index of last node. An O(n) operation.
insert!(l, index, d)        # Insert item at index, pushing values back. Return index.
deleteat!(l, index)         # Delete item at index. Return list.
splice!(l, index)           # Remove value at index, returning data value.
splice!(l, index, d)        # Replace item at index with data value.
findfirst(predicate, l)     # find the index of the first element of l for which predicate returns true
indextoposition(index , l)  # Returns the position of a Node in l
indextoposition(indexes,l)  # Returns a vector of positions of Nodes in l
positiontoindex(p, l)       # Returns the node in a list at a position p
positiontoindex(ps, l)      # Returns a vector of the nodes in a list at a positions given by the elements of ps
"><pre><span class="pl-c1">getindex</span>(l, index)          <span class="pl-c"><span class="pl-c">#</span> Returns value of item at this index.</span>
<span class="pl-c1">setindex!</span>(l, index, d)      <span class="pl-c"><span class="pl-c">#</span> Sets item value at this index.</span>
<span class="pl-c1">lastindex</span>(l)                <span class="pl-c"><span class="pl-c">#</span> Returns index of last node. An O(n) operation.</span>
<span class="pl-c1">insert!</span>(l, index, d)        <span class="pl-c"><span class="pl-c">#</span> Insert item at index, pushing values back. Return index.</span>
<span class="pl-c1">deleteat!</span>(l, index)         <span class="pl-c"><span class="pl-c">#</span> Delete item at index. Return list.</span>
<span class="pl-c1">splice!</span>(l, index)           <span class="pl-c"><span class="pl-c">#</span> Remove value at index, returning data value.</span>
<span class="pl-c1">splice!</span>(l, index, d)        <span class="pl-c"><span class="pl-c">#</span> Replace item at index with data value.</span>
<span class="pl-c1">findfirst</span>(predicate, l)     <span class="pl-c"><span class="pl-c">#</span> find the index of the first element of l for which predicate returns true</span>
<span class="pl-c1">indextoposition</span>(index , l)  <span class="pl-c"><span class="pl-c">#</span> Returns the position of a Node in l</span>
<span class="pl-c1">indextoposition</span>(indexes,l)  <span class="pl-c"><span class="pl-c">#</span> Returns a vector of positions of Nodes in l</span>
<span class="pl-c1">positiontoindex</span>(p, l)       <span class="pl-c"><span class="pl-c">#</span> Returns the node in a list at a position p</span>
<span class="pl-c1">positiontoindex</span>(ps, l)      <span class="pl-c"><span class="pl-c">#</span> Returns a vector of the nodes in a list at a positions given by the elements of ps</span></pre></div>
<p>There are two kinds of iterators for <code>LinkedList</code>. One access items.
The other loops over indices.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="l = LinkedList{Int}()
prepend!(l, [2, 4, 6])
for item::Int in l
    println(item)
end

for index in keys(l)
    item=getindex(l, index)
    println(item)
end

"><pre>l <span class="pl-k">=</span> <span class="pl-c1">LinkedList</span><span class="pl-c1">{Int}</span>()
<span class="pl-c1">prepend!</span>(l, [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>])
<span class="pl-k">for</span> item<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">in</span> l
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>

<span class="pl-k">for</span> index <span class="pl-k">in</span> <span class="pl-c1">keys</span>(l)
    item<span class="pl-k">=</span><span class="pl-c1">getindex</span>(l, index)
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>
</pre></div>
<h2><a id="user-content-slinkedlist" class="anchor" aria-hidden="true" href="#slinkedlist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SLinkedList</h2>
<p><code>SLinkedList</code> is a singly linked list over items of a given type.
Appending to the end of this list takes an order of the number of
the items in the list.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a = SLinkedList{Int}()    # Create a list of the given type.
isempty(l)         # Test whether there are any items.
empty!(l)          # Remove all items.
eltype(l)          # Returns the item type, here Int.
first(l)           # First item in the list.
unshift!(l, d)     # Add item to start of list. Return index of item.
shift!(l)          # Remove first item and return value.
prepend!(l, items) # Add items to start of list.
"><pre>a <span class="pl-k">=</span> <span class="pl-c1">SLinkedList</span><span class="pl-c1">{Int}</span>()    <span class="pl-c"><span class="pl-c">#</span> Create a list of the given type.</span>
<span class="pl-c1">isempty</span>(l)         <span class="pl-c"><span class="pl-c">#</span> Test whether there are any items.</span>
<span class="pl-c1">empty!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove all items.</span>
<span class="pl-c1">eltype</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Returns the item type, here Int.</span>
<span class="pl-c1">first</span>(l)           <span class="pl-c"><span class="pl-c">#</span> First item in the list.</span>
<span class="pl-c1">unshift!</span>(l, d)     <span class="pl-c"><span class="pl-c">#</span> Add item to start of list. Return index of item.</span>
<span class="pl-c1">shift!</span>(l)          <span class="pl-c"><span class="pl-c">#</span> Remove first item and return value.</span>
<span class="pl-c1">prepend!</span>(l, items) <span class="pl-c"><span class="pl-c">#</span> Add items to start of list.</span></pre></div>
<p>There can be an index into the list. It is a reference to a list
node but can be treated as an opaque index. Two wrapper functions are provided to convert from nodes to integer positions.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getindex(l, index)          # Returns value of item at this index.
setindex!(l, index, d)      # Sets item value at this index.
insert!(l, index, d)        # Inserts *after* the given index. Returns index.
indextoposition(index , l)  # Returns the position of a Node in l
indextoposition(indexes,l)  # Returns a vector of positions of Nodes in l
positiontoindex(p, l)       # Returns the node in a list at a position p
positiontoindex(ps, l)      # Returns a vector of the nodes in a list at a positions given by the elements of ps
"><pre><span class="pl-c1">getindex</span>(l, index)          <span class="pl-c"><span class="pl-c">#</span> Returns value of item at this index.</span>
<span class="pl-c1">setindex!</span>(l, index, d)      <span class="pl-c"><span class="pl-c">#</span> Sets item value at this index.</span>
<span class="pl-c1">insert!</span>(l, index, d)        <span class="pl-c"><span class="pl-c">#</span> Inserts *after* the given index. Returns index.</span>
<span class="pl-c1">indextoposition</span>(index , l)  <span class="pl-c"><span class="pl-c">#</span> Returns the position of a Node in l</span>
<span class="pl-c1">indextoposition</span>(indexes,l)  <span class="pl-c"><span class="pl-c">#</span> Returns a vector of positions of Nodes in l</span>
<span class="pl-c1">positiontoindex</span>(p, l)       <span class="pl-c"><span class="pl-c">#</span> Returns the node in a list at a position p</span>
<span class="pl-c1">positiontoindex</span>(ps, l)      <span class="pl-c"><span class="pl-c">#</span> Returns a vector of the nodes in a list at a positions given by the elements of ps</span></pre></div>
<p>The following methods are O(n) for singly linked lists.
They are included for completeness, but needing these is an indication
that using a doubly linked list, or Vector, might be a better choice.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="length(l)                 # The number of entries.
2 in l                    # Test whether the given item is an entry in the list. Returns Bool or missing
indexin(a, l)             # Highest index in list for each value of a that is member.
last(l)                   # Last item in the list, the item value.
push!(l, d)               # Add item d to end of list. Returns index of item.
pop!(l, d)                # Remove and return item at end of list.
append!(l, items)         # Add items to end of list.
lastindex(l)              # Returns index of last node.
deleteat!(l, index)       # Delete item at index. Return list.
splice!(l, index)         # Remove value at index, returning data value.
splice!(l, index, d)      # Replace item at index with data value.
findfirst(predicate, l)   # find the index of the first element of l for which predicate returns true
"><pre><span class="pl-c1">length</span>(l)                 <span class="pl-c"><span class="pl-c">#</span> The number of entries.</span>
<span class="pl-c1">2</span> <span class="pl-k">in</span> l                    <span class="pl-c"><span class="pl-c">#</span> Test whether the given item is an entry in the list. Returns Bool or missing</span>
<span class="pl-c1">indexin</span>(a, l)             <span class="pl-c"><span class="pl-c">#</span> Highest index in list for each value of a that is member.</span>
<span class="pl-c1">last</span>(l)                   <span class="pl-c"><span class="pl-c">#</span> Last item in the list, the item value.</span>
<span class="pl-c1">push!</span>(l, d)               <span class="pl-c"><span class="pl-c">#</span> Add item d to end of list. Returns index of item.</span>
<span class="pl-c1">pop!</span>(l, d)                <span class="pl-c"><span class="pl-c">#</span> Remove and return item at end of list.</span>
<span class="pl-c1">append!</span>(l, items)         <span class="pl-c"><span class="pl-c">#</span> Add items to end of list.</span>
<span class="pl-c1">lastindex</span>(l)              <span class="pl-c"><span class="pl-c">#</span> Returns index of last node.</span>
<span class="pl-c1">deleteat!</span>(l, index)       <span class="pl-c"><span class="pl-c">#</span> Delete item at index. Return list.</span>
<span class="pl-c1">splice!</span>(l, index)         <span class="pl-c"><span class="pl-c">#</span> Remove value at index, returning data value.</span>
<span class="pl-c1">splice!</span>(l, index, d)      <span class="pl-c"><span class="pl-c">#</span> Replace item at index with data value.</span>
<span class="pl-c1">findfirst</span>(predicate, l)   <span class="pl-c"><span class="pl-c">#</span> find the index of the first element of l for which predicate returns true</span></pre></div>
<p>As with <code>LinkedList</code>, there are two kinds of iterators for <code>SLinkedList</code>. One access items.
The other loops over indices.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="l = SLinkedList{Int}()
prepend!(l, [2, 4, 6])
for item::Int in l
    println(item)
end

for index in keys(l)
    item=getindex(l, index)
    println(item)
end

"><pre>l <span class="pl-k">=</span> <span class="pl-c1">SLinkedList</span><span class="pl-c1">{Int}</span>()
<span class="pl-c1">prepend!</span>(l, [<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>])
<span class="pl-k">for</span> item<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">in</span> l
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>

<span class="pl-k">for</span> index <span class="pl-k">in</span> <span class="pl-c1">keys</span>(l)
    item<span class="pl-k">=</span><span class="pl-c1">getindex</span>(l, index)
    <span class="pl-c1">println</span>(item)
<span class="pl-k">end</span>
</pre></div>
<h2><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation Notes</h2>
<p>The code comments each time a method for these classes
differs from interfaces described for collections in
the manual. All differences stem from an assumption
that the index to a collection will be an integer.</p>
<p>If you have comments, or especially if I have the wrong idea
about how to write good code in Julia, please send me an email.</p>
<h2><a id="user-content-credit" class="anchor" aria-hidden="true" href="#credit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Credit</h2>
<p>Lots of credit goes to @adolgert as this library was adapted from his code.</p>
</article></div>