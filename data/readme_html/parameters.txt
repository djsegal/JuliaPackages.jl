<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-parameters" class="anchor" aria-hidden="true" href="#parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parameters</h1>
<p dir="auto"><a href="https://mauro3.github.io/Parameters.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://mauro3.github.io/Parameters.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/mauro3/Parameters.jl/actions"><img src="https://github.com/mauro3/Parameters.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/mauro3/parameters-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/3c8f32868f02964dfdbc382f068d655e7675fac6a3d113639bd958b8b4ea561e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6175726f332f506172616d65746572732e6a6c3f6272616e63683d6d6173746572267376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/mauro3/Parameters.jl?branch=master&amp;svg=true" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mauro3/Parameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/025abf3181b525779509e63e51f664a1a6e2174e89132abea7314110d801abc8/68747470733a2f2f636f6465636f762e696f2f67682f6d6175726f332f506172616d65746572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/mauro3/Parameters.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Parameters/ycYNs" rel="nofollow"><img src="https://camo.githubusercontent.com/50249c6536ac5f46a42e97628c4f1885170cb567ebb24929ce48aabea97c18b2/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506172616d65746572732f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/Parameters/pkgeval.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/Parameters/ycYNs?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/261e30c2fd4d6c42401b5954422517245bd696b3de44ab3608dd1fee582d3fe0/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506172616d65746572732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Parameters/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Parameters/ycYNs" rel="nofollow"><img src="https://camo.githubusercontent.com/619c7d732dc75265e30dbbbc9e1b7fc390199f8ea545282816ff0f67cfadb356/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f506172616d65746572732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Parameters/version.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This is a package I use to handle numerical-model parameters, thus the
name.  However, it should be useful otherwise too.  It has two main
features:</p>
<ul dir="auto">
<li>keyword type constructors with default values for <code>struct</code>s and <code>NamedTuples</code>,</li>
<li>unpacking and packing of composite types and dicts (mostly via <a href="https://github.com/mauro3/UnPack.jl">UnPack.jl</a>).</li>
</ul>
<p dir="auto">Checkout my ten minute JuliaCon 2018 <a href="https://youtu.be/JFrzrTYFYbU?t=1m" rel="nofollow">talk</a>.</p>
<p dir="auto">The macro <code>@with_kw</code> which decorates a type definition to
allow default values and a keyword constructor:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Parameters

julia&gt; @with_kw struct A
           a::Int = 6
           b::Float64 = -1.1
           c::UInt8
       end

julia&gt; A(c=4)
A
  a: 6
  b: -1.1
  c: 4

julia&gt; A()
ERROR: Field 'c' has no default, supply it with keyword.

julia&gt; A(c=4, a = 2)
A
  a: 2
  b: -1.1
  c: 4"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Parameters

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@with_kw</span> <span class="pl-k">struct</span> A
           a<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">6</span>
           b<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.1</span>
           c<span class="pl-k">::</span><span class="pl-c1">UInt8</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">A</span>(c<span class="pl-k">=</span><span class="pl-c1">4</span>)
A
  a<span class="pl-k">:</span> <span class="pl-c1">6</span>
  b<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1.1</span>
  c<span class="pl-k">:</span> <span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">A</span>()
ERROR<span class="pl-k">:</span> Field <span class="pl-s"><span class="pl-pds">'</span>c<span class="pl-pds">'</span></span> has no default, supply it with keyword.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">A</span>(c<span class="pl-k">=</span><span class="pl-c1">4</span>, a <span class="pl-k">=</span> <span class="pl-c1">2</span>)
A
  a<span class="pl-k">:</span> <span class="pl-c1">2</span>
  b<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1.1</span>
  c<span class="pl-k">:</span> <span class="pl-c1">4</span></pre></div>
<p dir="auto">The macro also supports constructors for named tuples with default values; e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; MyNT = @with_kw (x = 1, y = &quot;foo&quot;, z = :(bar))
(::#5) (generic function with 2 methods)

julia&gt; MyNT()
(x = 1, y = &quot;foo&quot;, z = :bar)

julia&gt; MyNT(x = 2)
(x = 2, y = &quot;foo&quot;, z = :bar)"><pre>julia<span class="pl-k">&gt;</span> MyNT <span class="pl-k">=</span> <span class="pl-c1">@with_kw</span> (x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, z <span class="pl-k">=</span> :(bar))
(<span class="pl-k">::</span><span class="pl-c"><span class="pl-c">#</span>5) (generic function with 2 methods)</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyNT</span>()
(x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, z <span class="pl-k">=</span> <span class="pl-c1">:bar</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyNT</span>(x <span class="pl-k">=</span> <span class="pl-c1">2</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">2</span>, y <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>, z <span class="pl-k">=</span> <span class="pl-c1">:bar</span>)</pre></div>
<p dir="auto">Unpacking is done with <code>@unpack</code> (<code>@pack!</code> is similar):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct B
    a
    b
    c
end
@unpack a, c = B(4,5,6)
# is equivalent to
BB = B(4,5,6)
a = BB.a
c = BB.c"><pre><span class="pl-k">struct</span> B
    a
    b
    c
<span class="pl-k">end</span>
<span class="pl-c1">@unpack</span> a, c <span class="pl-k">=</span> <span class="pl-c1">B</span>(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>)
<span class="pl-c"><span class="pl-c">#</span> is equivalent to</span>
BB <span class="pl-k">=</span> <span class="pl-c1">B</span>(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>)
a <span class="pl-k">=</span> BB<span class="pl-k">.</span>a
c <span class="pl-k">=</span> BB<span class="pl-k">.</span>c</pre></div>
<p dir="auto">Defining several constants</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@consts begin
    a = 1
    b = 2.0
    c = &quot;a&quot;
end"><pre><span class="pl-c1">@consts</span> <span class="pl-k">begin</span>
    a <span class="pl-k">=</span> <span class="pl-c1">1</span>
    b <span class="pl-k">=</span> <span class="pl-c1">2.0</span>
    c <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The features are:</p>
<ul dir="auto">
<li>a keyword constructor for the type</li>
<li>allows setting default values for the fields inside the type
definition</li>
<li>allows assertions on field values inside the type definition</li>
<li>a constructor which allows creating a type-instance taking its defaults from
another type instance</li>
<li>packing and unpacking macros for the type: <code>@unpack_*</code> where <code>*</code> is
the type name.</li>
<li>generic packing and unpacking macros <code>@pack!</code>, <code>@unpack</code> (work with
any types, via <a href="https://github.com/mauro3/UnPack.jl">UnPack.jl</a>)</li>
<li><code>@consts</code> macro to defined a bunch of constants</li>
</ul>
<p dir="auto">The keyword-constructor and default-values functionality will probably
make it into Julia
(<a href="https://github.com/JuliaLang/julia/issues/10146" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/10146/hovercard"># 10146</a>,
<a href="https://github.com/JuliaLang/julia/issues/5333" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/5333/hovercard">#533</a> and
<a href="https://github.com/JuliaLang/julia/pull/6122" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/6122/hovercard">#6122</a>) although
probably not with all the features present in this package.  I suspect
that this package should stay usable &amp; useful even after this change
lands in Julia.  Note that keyword functions are currently slow in
Julia, so these constructors should not be used in hot inner loops.
However, the normal positional constructor is also provided and could be
used in performance critical code.</p>
<p dir="auto"><a href="https://github.com/mauro3/Parameters.jl/blob/master/NEWS.md">NEWS.md</a>
keeps tabs on updates.</p>
<h1 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h1>
<p dir="auto">Documentation is here: <a href="https://mauro3.github.io/Parameters.jl/stable" rel="nofollow">stable</a> and <a href="https://mauro3.github.io/Parameters.jl/latest" rel="nofollow">latest</a>.</p>
<h1 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h1>
<p dir="auto">Complementary:</p>
<ul dir="auto">
<li><a href="https://github.com/tpapp/EponymTuples.jl">EponymTuples.jl</a> packing/unpacking
of named tuples.</li>
<li><a href="https://github.com/JeffreySarnoff/NamedTupleTools.jl">NamedTupleTools.jl</a>
has many named-tuple helper functions</li>
<li><a href="https://github.com/jw3126/Setfield.jl">Setfield.jl</a> for setting
immutable fields (i.e. similar to the here provided packing).</li>
</ul>
<p dir="auto">Implementing similar things:</p>
<ul dir="auto">
<li><code>Base.@kwdef</code> has functionality similar to <code>@with_kw</code> but more
limited.  However, with Julia v1.1 its capabilities will be much
enhanced, see <a href="https://github.com/JuliaLang/julia/pull/29316" data-hovercard-type="pull_request" data-hovercard-url="/JuliaLang/julia/pull/29316/hovercard">#29316</a>.
If that is enough, ditch the Parameters.jl dependency.</li>
<li><a href="https://github.com/cstjean/QuickTypes.jl">QuickTypes.jl</a> also
provides key-word constructors and default values.  Provides a more
compact format.  I'd say QuickTypes.jl is more suited for REPL and
other write-only code, whereas Parameters.jl may be more suited for
code which is also read.</li>
<li><a href="https://github.com/pluskid/SimpleStructs.jl">SimpleStructs.jl</a> also
provides key-word constructors, default values and assertions.  But
the syntax is less nice than Parameters.jl.</li>
<li><a href="https://github.com/carlobaldassi/ExtractMacro.jl">ExtractMacro.jl</a> also has
the <code>@unpack</code> functionality.</li>
<li><a href="https://github.com/rafaqz/FieldDefaults.jl">FieldDefaults.jl</a> also has
keyword defaults. You can use it as a minimalist replacement for Parameters.jl
with the aid of <a href="https://github.com/rafaqz/FieldMetadata.jl">FieldMetadata.jl</a>
and <a href="https://github.com/rafaqz/Flatten.jl">Flatten.jl</a>.</li>
</ul>
<h1 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h1>
<ul dir="auto">
<li>do copy of fields on (re-)construct?</li>
<li>think about mutables</li>
</ul>
</article></div>