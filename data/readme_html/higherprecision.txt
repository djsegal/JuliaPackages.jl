<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><strong>This package will not be updated for Julia 1.0 / 0.7. It is recommended to use <a href="https://github.com/JuliaMath/DoubleFloats.jl">DoubleFloats.jl</a> instead.</strong></p>
<h1><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://saschatimme.github.io/HigherPrecision.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/saschatimme/HigherPrecision.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/90e374d7bfff00a27945349280efb2fbea9c5c06/68747470733a2f2f7472617669732d63692e6f72672f73617363686174696d6d652f486967686572507265636973696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/saschatimme/HigherPrecision.jl.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://saschatimme.github.io/HigherPrecision.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/saschatimme/HigherPrecision.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7f06d72d0324f8e92390dfb6b17f3f7282ccb7aa/68747470733a2f2f636f6465636f762e696f2f67682f73617363686174696d6d652f486967686572507265636973696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/saschatimme/HigherPrecision.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>HigherPrecision defines the following subtypes of <code>AbstractFloat</code></p>
<ul>
<li><code>DoubleFloat64</code> - A 128 bit number type with around 30 digits of precision.</li>
</ul>
<p>These types are intended as a drop-in replacement for <code>Float64</code> and <code>BigFloat</code>.
Besides the basic arithmetic functions the following mathematical functions are defined:</p>
<p><code>sin</code>, <code>cos</code>, <code>inv</code>, <code>rem</code>, <code>divrem</code>, <code>mod</code>,
<code>sqrt</code>, <code>exp</code>, <code>log</code>, <code>sin</code>, <code>cos</code>, <code>tan</code>,
<code>asin</code>, <code>acos</code>, <code>atan</code>, <code>atan2</code>,
<code>sinh</code>, <code>cosh</code>, <code>sincos</code>, <code>sincosh</code>, <code>tanh</code></p>
<p>Basic arithmetic operations are significantly faster than <code>BigFloat</code>, but the above
mathematical functions can be slower than the corresponding <code>BigFloat</code> methods. In general
this still should yield a significant performance boost.</p>
<h2><a id="user-content-fma-instructions" class="anchor" aria-hidden="true" href="#fma-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FMA Instructions</h2>
<p>This library needs FMA instructions. If your processor supports these, you probably still need
to rebuild your Julia system image. This can be done as follows</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(JULIA_HOME),<span class="pl-s"><span class="pl-pds">"</span>share<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>julia<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>build_sysimg.jl<span class="pl-pds">"</span></span>)); <span class="pl-c1">build_sysimg</span>(force<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>If you are on Windows you need to run the following code first</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>WinRPM<span class="pl-pds">"</span></span>);
WinRPM<span class="pl-k">.</span><span class="pl-c1">install</span>(<span class="pl-s"><span class="pl-pds">"</span>gcc<span class="pl-pds">"</span></span>, yes<span class="pl-k">=</span><span class="pl-c1">true</span>)
WinRPM<span class="pl-k">.</span><span class="pl-c1">install</span>(<span class="pl-s"><span class="pl-pds">"</span>winpthreads-devel<span class="pl-pds">"</span></span>, yes<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Simply convert an irrational number to a DoubleFloat64</span>
double_π <span class="pl-k">=</span> <span class="pl-c1">DoubleFloat64</span>(π)

<span class="pl-c"><span class="pl-c">#</span> y is again a DoubleFloat64</span>
y <span class="pl-k">=</span> <span class="pl-c1">rand</span>() <span class="pl-k">*</span> double_π

<span class="pl-c"><span class="pl-c">#</span> You can also create a DoubleFloat64 from a Float64</span>
x <span class="pl-k">=</span> <span class="pl-c1">DoubleFloat64</span>(<span class="pl-c1">0.42</span>)

<span class="pl-c"><span class="pl-c">#</span> And use the usual functions</span>
<span class="pl-c1">sin</span>(x <span class="pl-k">*</span> y)</pre></div>
<h2><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Acknowledgement</h2>
<p>This library is a port of the <a href="http://crd.lbl.gov/~dhbailey/mpdist/" rel="nofollow">QD library</a> from Yozo Hida (U.C. Berkeley),
Xiaoye S. Li (Lawrence Berkeley National Lab) and David H. Bailey (Lawrence Berkeley National Lab)
from C++ to Julia. See COPYING for the original modified BSD license. Also see <a href="http://web.mit.edu/tabbott/Public/quaddouble-debian/qd-2.3.4-old/docs/qd.pdf" rel="nofollow">this</a> paper
for some background informations.</p>
</article></div>