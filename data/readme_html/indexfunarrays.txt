<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-indexfunarraysjl" class="anchor" aria-hidden="true" href="#indexfunarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IndexFunArrays.jl</h1>
<p>This package allows to generate complex array expressions based on the indices.
The <code>IndexFunArray</code> does not allocate memory but instead is entry-wise generated once it is accessed.
<code>IndexFunArray &lt;: AbstractArray</code> and behaves almost like a normal array.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://bionanoimaging.github.io/IndexFunArrays.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/cc6b08e8d34d9dd3cd286b76a01eea35e322fb53484b3cf1c624d63032266dcb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d6461726b677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-darkgreen.svg" style="max-width:100%;"></a> <a href="https://bionanoimaging.github.io/IndexFunArrays.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/e480e7641a2acdc69c99dea647ce01068124b5171ec2d92c72ebb25f9f7b6a26/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d70696e6b2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-pink.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/bionanoimaging/IndexFunArrays.jl/actions/workflows/ci.yml"><img src="https://github.com/bionanoimaging/IndexFunArrays.jl/actions/workflows/ci.yml/badge.svg" alt="" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/bionanoimaging/IndexFunArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/39c862c070fa64e1d024d4ee0ff05fe02c13de943a8ad8343b79d5cb78d4a36d/68747470733a2f2f636f6465636f762e696f2f67682f62696f6e616e6f696d6167696e672f496e64657846756e4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5030595943504b584931" alt="" data-canonical-src="https://codecov.io/gh/bionanoimaging/IndexFunArrays.jl/branch/master/graph/badge.svg?token=P0YYCPKXI1" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Type <code>]</code>in the REPL to get to the package manager and install it:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ] add IndexFunArrays
"><pre>julia<span class="pl-k">&gt;</span> ] add IndexFunArrays</pre></div>
<h2><a id="user-content-quick-examples" class="anchor" aria-hidden="true" href="#quick-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick Examples</h2>
<p>We ship a lot of convenient wrappers but you can also use an <code>IndexFunArray</code> directly. See below:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using IndexFunArrays

julia&gt; rr2((4,4), offset=CtrMid)  # IndexFunArray containing the square of the radius to the mid position
  4×4 IndexFunArray{Float64, 2, IndexFunArrays.var&quot;#4#5&quot;{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:
   4.5  2.5  2.5  4.5
   2.5  0.5  0.5  2.5
   2.5  0.5  0.5  2.5
   4.5  2.5  2.5  4.5

julia&gt; rr2((3, 3), offset=(1, 1)) # square distance to the top left pixel
  3×3 IndexFunArray{Float64, 2, IndexFunArrays.var&quot;#4#5&quot;{Float64, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}:
   0.0  1.0  4.0
   1.0  2.0  5.0
   4.0  5.0  8.0

julia&gt; rr((4,4), scale=ScaUnit)  # distance (not square) to the Fourier-center with unity pixel scaling
  4×4 IndexFunArray{Float64, 2, IndexFunArrays.var&quot;#9#10&quot;{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:
   2.82843  2.23607  2.0  2.23607
   2.23607  1.41421  1.0  1.41421
   2.0      1.0      0.0  1.0
   2.23607  1.41421  1.0  1.41421

julia&gt; z = IndexFunArray(x -&gt; sum(abs2.(x)), (3, 3))   # directly using the constructor and supplying a function to store in the array
  3×3 IndexFunArray{Int64, 2, var&quot;#184#185&quot;}:
    2   5  10
    5   8  13
   10  13  18

julia&gt; z[3,3] # use it like a normal array
18

julia&gt; @view z[1:1, 1:3] # for slices you need @view because we cannot assign to a IndexFunArray
1×3 view(::IndexFunArray{Int64, 2, var&quot;#1#2&quot;}, 1:1, 1:3) with eltype Int64:
 2  5  10

julia&gt; z .^ 2 # once you apply operations on it, it returns a allocated array
3×3 Matrix{Int64}:
   4   25  100
  25   64  169
 100  169  324
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IndexFunArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rr2</span>((<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), offset<span class="pl-k">=</span>CtrMid)  <span class="pl-c"><span class="pl-c">#</span> IndexFunArray containing the square of the radius to the mid position</span>
  <span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> IndexFunArray{Float64, <span class="pl-c1">2</span>, IndexFunArrays<span class="pl-k">.</span><span class="pl-c1">var"#4#5"</span>{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}<span class="pl-k">:</span>
   <span class="pl-c1">4.5</span>  <span class="pl-c1">2.5</span>  <span class="pl-c1">2.5</span>  <span class="pl-c1">4.5</span>
   <span class="pl-c1">2.5</span>  <span class="pl-c1">0.5</span>  <span class="pl-c1">0.5</span>  <span class="pl-c1">2.5</span>
   <span class="pl-c1">2.5</span>  <span class="pl-c1">0.5</span>  <span class="pl-c1">0.5</span>  <span class="pl-c1">2.5</span>
   <span class="pl-c1">4.5</span>  <span class="pl-c1">2.5</span>  <span class="pl-c1">2.5</span>  <span class="pl-c1">4.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rr2</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), offset<span class="pl-k">=</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> square distance to the top left pixel</span>
  <span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> IndexFunArray{Float64, <span class="pl-c1">2</span>, IndexFunArrays<span class="pl-k">.</span><span class="pl-c1">var"#4#5"</span>{Float64, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}<span class="pl-k">:</span>
   <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">4.0</span>
   <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>
   <span class="pl-c1">4.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">8.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rr</span>((<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), scale<span class="pl-k">=</span>ScaUnit)  <span class="pl-c"><span class="pl-c">#</span> distance (not square) to the Fourier-center with unity pixel scaling</span>
  <span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> IndexFunArray{Float64, <span class="pl-c1">2</span>, IndexFunArrays<span class="pl-k">.</span><span class="pl-c1">var"#9#10"</span>{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}<span class="pl-k">:</span>
   <span class="pl-c1">2.82843</span>  <span class="pl-c1">2.23607</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.23607</span>
   <span class="pl-c1">2.23607</span>  <span class="pl-c1">1.41421</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.41421</span>
   <span class="pl-c1">2.0</span>      <span class="pl-c1">1.0</span>      <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>
   <span class="pl-c1">2.23607</span>  <span class="pl-c1">1.41421</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.41421</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">IndexFunArray</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">sum</span>(<span class="pl-c1">abs2</span>.(x)), (<span class="pl-c1">3</span>, <span class="pl-c1">3</span>))   <span class="pl-c"><span class="pl-c">#</span> directly using the constructor and supplying a function to store in the array</span>
  <span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> IndexFunArray{Int64, <span class="pl-c1">2</span>, <span class="pl-c1">var"#184#185"</span>}<span class="pl-k">:</span>
    <span class="pl-c1">2</span>   <span class="pl-c1">5</span>  <span class="pl-c1">10</span>
    <span class="pl-c1">5</span>   <span class="pl-c1">8</span>  <span class="pl-c1">13</span>
   <span class="pl-c1">10</span>  <span class="pl-c1">13</span>  <span class="pl-c1">18</span>

julia<span class="pl-k">&gt;</span> z[<span class="pl-c1">3</span>,<span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> use it like a normal array</span>
<span class="pl-c1">18</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@view</span> z[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-c"><span class="pl-c">#</span> for slices you need @view because we cannot assign to a IndexFunArray</span>
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">3</span> <span class="pl-c1">view</span>(<span class="pl-k">::</span><span class="pl-c1">IndexFunArray{Int64, 2, var"#1#2"}</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Int64<span class="pl-k">:</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">5</span>  <span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">.^</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> once you apply operations on it, it returns a allocated array</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Int64}<span class="pl-k">:</span>
   <span class="pl-c1">4</span>   <span class="pl-c1">25</span>  <span class="pl-c1">100</span>
  <span class="pl-c1">25</span>   <span class="pl-c1">64</span>  <span class="pl-c1">169</span>
 <span class="pl-c1">100</span>  <span class="pl-c1">169</span>  <span class="pl-c1">324</span></pre></div>
<h2><a id="user-content-more-complex-examples" class="anchor" aria-hidden="true" href="#more-complex-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More complex examples</h2>
<h3><a id="user-content-assign-to-allocated-memory" class="anchor" aria-hidden="true" href="#assign-to-allocated-memory"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Assign to allocated memory</h3>
<p>If we assume the following situation where we have a large array created. We can assign the <code>IndexFunArray</code> (in this case <code>rr</code> being the distance to a reference position)
to this array without allocation of a significant amount of new memory:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @time x = randn((10000, 10000));
  0.278858 seconds (25 allocations: 762.959 MiB, 1.31% gc time)

julia&gt; @time x = randn((10000, 10000));
  0.261548 seconds (2 allocations: 762.940 MiB, 0.96% gc time)

julia&gt; using IndexFunArrays

julia&gt; @time x .= rr(size(x)); # first run contains some compilation
  0.361640 seconds (1.18 M allocations: 70.353 MiB, 46.29% compilation time)

julia&gt; @time x .= rr(size(x));
  0.194074 seconds (11 allocations: 496 bytes)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">=</span> <span class="pl-c1">randn</span>((<span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>));
  <span class="pl-c1">0.278858</span> seconds (<span class="pl-c1">25</span> allocations<span class="pl-k">:</span> <span class="pl-c1">762.959</span> MiB, <span class="pl-c1">1.31</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">=</span> <span class="pl-c1">randn</span>((<span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>));
  <span class="pl-c1">0.261548</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">762.940</span> MiB, <span class="pl-c1">0.96</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IndexFunArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">.=</span> <span class="pl-c1">rr</span>(<span class="pl-c1">size</span>(x)); <span class="pl-c"><span class="pl-c">#</span> first run contains some compilation</span>
  <span class="pl-c1">0.361640</span> seconds (<span class="pl-c1">1.18</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">70.353</span> MiB, <span class="pl-c1">46.29</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">.=</span> <span class="pl-c1">rr</span>(<span class="pl-c1">size</span>(x));
  <span class="pl-c1">0.194074</span> seconds (<span class="pl-c1">11</span> allocations<span class="pl-k">:</span> <span class="pl-c1">496</span> bytes)</pre></div>
<h3><a id="user-content-apply-further-operations-without-allocations" class="anchor" aria-hidden="true" href="#apply-further-operations-without-allocations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Apply further operations without allocations</h3>
<p>For that use, one can use <a href="https://github.com/JuliaArrays/LazyArrays.jl">LazyArrays.jl</a> which implements that efficiently.</p>
<p>Below an example (where we removed the lines with compilation calls). Thanks to LazyArrays.jl, <code>y</code> is not evaluated but at the end <code>z</code> is:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using IndexFunArrays, LazyArrays

julia&gt; @time x = rr((1000, 1000));
  0.000014 seconds (6 allocations: 240 bytes)

julia&gt; @time y = @~ exp.(x)
  0.000022 seconds (5 allocations: 336 bytes)
Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}}(exp, ([707.1067811865476 706.4000283125703 … 705.6939846704093 706.4000283125703; 706.4000283125703 705.6925676241744 … 704.985815460141 705.6925676241744; … ; 705.6939846704093 704.985815460141 … 704.2783540618013 704.985815460141; 706.4000283125703 705.6925676241744 … 704.985815460141 705.6925676241744],))

julia&gt; @time z = materialize(y);
  0.018635 seconds (2 allocations: 7.629 MiB)

julia&gt; typeof(z)
Matrix{Float64} (alias for Array{Float64, 2})
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> IndexFunArrays, LazyArrays

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">=</span> <span class="pl-c1">rr</span>((<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>));
  <span class="pl-c1">0.000014</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">240</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> y <span class="pl-k">=</span> @<span class="pl-k">~</span> <span class="pl-c1">exp</span>.(x)
  <span class="pl-c1">0.000022</span> seconds (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">336</span> bytes)
Base<span class="pl-k">.</span>Broadcast<span class="pl-k">.</span><span class="pl-c1">Broadcasted</span><span class="pl-c1">{Base.Broadcast.DefaultArrayStyle{2}}</span>(exp, ([<span class="pl-c1">707.1067811865476</span> <span class="pl-c1">706.4000283125703</span> … <span class="pl-c1">705.6939846704093</span> <span class="pl-c1">706.4000283125703</span>; <span class="pl-c1">706.4000283125703</span> <span class="pl-c1">705.6925676241744</span> … <span class="pl-c1">704.985815460141</span> <span class="pl-c1">705.6925676241744</span>; … ; <span class="pl-c1">705.6939846704093</span> <span class="pl-c1">704.985815460141</span> … <span class="pl-c1">704.2783540618013</span> <span class="pl-c1">704.985815460141</span>; <span class="pl-c1">706.4000283125703</span> <span class="pl-c1">705.6925676241744</span> … <span class="pl-c1">704.985815460141</span> <span class="pl-c1">705.6925676241744</span>],))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> z <span class="pl-k">=</span> <span class="pl-c1">materialize</span>(y);
  <span class="pl-c1">0.018635</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">7.629</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typeof</span>(z)
Matrix{Float64} (alias <span class="pl-k">for</span> Array{Float64, <span class="pl-c1">2</span>})</pre></div>
<h3><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmark</h3>
<p>We can see that there is only a small number of 496 bytes allocated and not the full memory.
The following benchmark shows that the performance is almost as good as with <code>CartesianIndices</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; include(&quot;examples/benchmark.jl&quot;)
compare_to_CartesianIndices (generic function with 1 method)

julia&gt; compare_to_CartesianIndices()
[ Info: rr2 based
  1.981 ms (18 allocations: 720 bytes)
  1.979 ms (18 allocations: 720 bytes)
[ Info: CartesianIndices based
  1.938 ms (0 allocations: 0 bytes)
  1.940 ms (0 allocations: 0 bytes)
[ Info: CartesianIndices based with initialized function
  1.941 ms (0 allocations: 0 bytes)
  1.942 ms (0 allocations: 0 bytes)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>examples/benchmark.jl<span class="pl-pds">"</span></span>)
compare_to_CartesianIndices (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">compare_to_CartesianIndices</span>()
[ Info<span class="pl-k">:</span> rr2 based
  <span class="pl-c1">1.981</span> ms (<span class="pl-c1">18</span> allocations<span class="pl-k">:</span> <span class="pl-c1">720</span> bytes)
  <span class="pl-c1">1.979</span> ms (<span class="pl-c1">18</span> allocations<span class="pl-k">:</span> <span class="pl-c1">720</span> bytes)
[ Info<span class="pl-k">:</span> CartesianIndices based
  <span class="pl-c1">1.938</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
  <span class="pl-c1">1.940</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
[ Info<span class="pl-k">:</span> CartesianIndices based with initialized <span class="pl-k">function</span>
  <span class="pl-c1">1.941</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
  <span class="pl-c1">1.942</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)</pre></div>
<h2><a id="user-content-why-this-package" class="anchor" aria-hidden="true" href="#why-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why this package?</h2>
<p>In image processing and other applications you often encounter position-dependent functions some of which can be a bit of work to code.
It helps the thinking to picture such functions as arrays, which contain the index-dependent values. A good examples are windowing functions.
Another more complicated example is a complex-valued free-space (optical) propagator.
Yet storing such arrays can be memory intensive and slow and one would ideally perform such calculations "on-the-fly", e.g. only when applying the filter
to the Fourier-transformation. Julia has a great mechanism for this: syntactic loop fusion and broadcasting (e.g. using ".*").</p>
<p>Using <code>CartesianIndices</code> it is possible to write such index-expressions yet they do not "feel" like arrays.
IndexFunArrays allow index-based calculations to look like arrays and to take part in loop fusion. This eases the writing of more complicated expressions without loss in speed
due to Julia's syntactic loop fusion mechanism.
You can think of a <code>IndexFunArray</code> of being an array that stores an expression calculating with indices inside.
This also means you cannot assing to such arrays which also precludes using range indices. However views are possible and range indices can be applied to such views.
Of course such arrays can generate any datatype. See <code>?IndexFunArray</code> for more detail.</p>
</article></div>