<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>You probably don't want to use this. I spent a few minutes writing the most naive possible fuzzer, to see if it would turn up any bugs. Turns out, this terrible method can generate bugs faster than I can debug them. However, the general approach and the specific implementation are pretty lame. If you're looking at this, you probably want something like <a href="http://embed.cs.utah.edu/csmith/" rel="nofollow">Csmith</a> or <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=jsfunfuzz" rel="nofollow">jsfunfuzz</a>.</p>
<p>I'm planning to, eventually, write a real fuzzer to see if something that generates random expressions turns up more bugs than this. Suggestions / pull requests welcome.</p>
<h3><a id="user-content-confirmeddebugged-bugs" class="anchor" aria-hidden="true" href="#confirmeddebugged-bugs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Confirmed/debugged bugs</h3>
<p><a href="https://github.com/JuliaLang/julia/issues/8353">8353: parser loses track of location when <code>parse</code> is called</a></p>
<p><a href="https://github.com/JuliaLang/julia/pull/8352">8352: underspecified type for writemime</a></p>
<p><a href="https://github.com/JuliaLang/julia/issues/8341">8341: EOF mixed up in unicode hangs parser</a></p>
<p><a href="https://github.com/JuliaLang/julia/issues/8329">8329: changing number of BLAS threads before operation causes segfault</a></p>
<p><a href="https://github.com/JuliaLang/julia/pull/8302">8302: array sized incorrectly</a></p>
<p><a href="https://github.com/JuliaLang/julia/issues/8286">8286: exponent of large number causes crashes with SIGABRT</a></p>
<p><a href="https://github.com/JuliaLang/julia/issues/8277">8277: code near exception incorrectly optimized out</a></p>
<p><a href="https://github.com/JuliaLang/julia/pull/8266">8266: hang/bad result on ndigits</a></p>
<p><a href="https://github.com/JuliaLang/julia/pull/8241">8241: hang/segfault on long symbol</a></p>
<p><a href="https://github.com/JuliaLang/julia/pull/8239">8239: segfault on code_native/code_llvm</a></p>
<h3><a id="user-content-todo-debug-these-bugs" class="anchor" aria-hidden="true" href="#todo-debug-these-bugs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TODO: debug these bugs</h3>
<p><code>searchindex</code> returns an unclear error message:</p>
<pre><code>julia&gt; searchindex("q8NWiRVEW3NRTGXW6At7qN5aU2dhJ0ZGHSMfcH50k1Xsn1HIiPNRO0NXVhafnLkEd55","wKPx3QydhlLKz3fZQK3fCVhl6ZwMoFDq18ti1Ozcswi\
Av0Yq4k9utZgoN4KhdvIJiUjQcTIFZyD1cNmdsf1PcmmXMeh10N1",-234321342423423234534534543)
ERROR: error compiling searchindex: error compiling _searchindex: cannot convert type to a julia type
 in searchindex at string.jl:307
</code></pre>
<p><code>sprandn</code> with bad args can take an arbitraily long time before erroring out.</p>
<p><code>displayable</code> psuedo-randomly hangs.</p>
<p><code>addprocs</code> of negative <code>Int128</code> causes something crazy to happen.</p>
<p><code>replace</code> on string containing bad characters errors out instead of skipping past bad character. See <code>sandbox/3</code>.</p>
<h3><a id="user-content-odd-non-bugs" class="anchor" aria-hidden="true" href="#odd-non-bugs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Odd non-bugs</h3>
<p><a href="https://groups.google.com/forum/#!topic/julia-users/ljQ-nHpXitU" rel="nofollow">Special casing of some operators</a></p>
<p>Address space randomiziation causes some methods to be randomized across invocations of julia.</p>
</article></div>