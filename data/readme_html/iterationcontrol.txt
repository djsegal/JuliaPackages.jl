<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p>IterationControl.jl</p>
<table>
<thead>
<tr>
<th align="center">Linux</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaAI/IterationControl.jl/actions"><img src="https://github.com/JuliaAI/IterationControl.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/JuliaAI/IterationControl.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2d066c54b5791d9b3462d59614e0da3b86781170e0a1df1d8bf71e07685a3d78/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c696141492f497465726174696f6e436f6e74726f6c2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaAI/IterationControl.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>A lightweight package for controlling iterative algorithms, with a
view to training and optimizing machine learning models.</p>
<p>Builds on
<a href="https://github.com/ablaom/EarlyStopping.jl">EarlyStopping.jl</a> and
inspired by
<a href="https://github.com/JuliaML/LearningStrategies.jl">LearningStrategies.jl</a>.</p>
<p>Other related software:
<a href="https://github.com/mschauer/DynamicIterators.jl">DynamicIterators.jl</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;IterationControl&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>IterationControl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-basic-idea" class="anchor" aria-hidden="true" href="#basic-idea"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic idea</h2>
<p>Suppose you have <a href="/examples/square_rooter/">some kind of object</a>,
<code>SquareRooter(x)</code>, for iteratively computing approximations to the
square root of <code>x</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = SquareRooter(9)

julia&gt; model.root
1.0

train!(model, 2) # train for 2 iterations

julia&gt; model.root
3.4

train!(model, 1) # train for 1 more iteration

julia&gt; model.root
3.023529411764706
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">SquareRooter</span>(<span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> model<span class="pl-k">.</span>root
<span class="pl-c1">1.0</span>

<span class="pl-c1">train!</span>(model, <span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> train for 2 iterations</span>

julia<span class="pl-k">&gt;</span> model<span class="pl-k">.</span>root
<span class="pl-c1">3.4</span>

<span class="pl-c1">train!</span>(model, <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> train for 1 more iteration</span>

julia<span class="pl-k">&gt;</span> model<span class="pl-k">.</span>root
<span class="pl-c1">3.023529411764706</span></pre></div>
<p>Then we can replace the integer argument <code>n</code> in <code>train!(model, n)</code>
with a number of more sophisticated <em>controls</em> by "lifting" the method
<code>train!</code> to the <code>IterationControl.train!</code> method defined in this
package:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using IterationControl
IterationControl.train!(model::SquareRooter, n) =  train!(model, n) # lifting
"><pre><span class="pl-k">using</span> IterationControl
IterationControl<span class="pl-k">.</span><span class="pl-en">train!</span>(model<span class="pl-k">::</span><span class="pl-c1">SquareRooter</span>, n) <span class="pl-k">=</span>  <span class="pl-c1">train!</span>(model, n) <span class="pl-c"><span class="pl-c">#</span> lifting</span></pre></div>
<p>By definitiion, the lifted <code>train!</code> has the same functionality as the original one:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = SquareRooter(9)
IterationControl.train!(model, 2)

julia&gt; model.root
3.4
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">SquareRooter</span>(<span class="pl-c1">9</span>)
IterationControl<span class="pl-k">.</span><span class="pl-c1">train!</span>(model, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> model<span class="pl-k">.</span>root
<span class="pl-c1">3.4</span></pre></div>
<p>But now we can also do this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; IterationControl.train!(model, Step(2), NumberLimit(3), Info(m-&gt;m.root));
[ Info: 3.4
[ Info: 3.00009155413138
[ Info: 3.0
[ Info: Stop triggered by NumberLimit(3) stopping criterion.
"><pre>julia<span class="pl-k">&gt;</span> IterationControl<span class="pl-k">.</span><span class="pl-c1">train!</span>(model, <span class="pl-c1">Step</span>(<span class="pl-c1">2</span>), <span class="pl-c1">NumberLimit</span>(<span class="pl-c1">3</span>), <span class="pl-c1">Info</span>(m<span class="pl-k">-&gt;</span>m<span class="pl-k">.</span>root));
[ Info<span class="pl-k">:</span> <span class="pl-c1">3.4</span>
[ Info<span class="pl-k">:</span> <span class="pl-c1">3.00009155413138</span>
[ Info<span class="pl-k">:</span> <span class="pl-c1">3.0</span>
[ Info<span class="pl-k">:</span> Stop triggered by <span class="pl-c1">NumberLimit</span>(<span class="pl-c1">3</span>) stopping criterion.</pre></div>
<p>Here each control is repeatedly applied in sequence until one of them
triggers a stop. The first control <code>Step(2)</code> says, "Train the model
two more iterations"; the second asks, "Have I been applied 3 times
yet?", signalling a stop (at the end of the current control cycle) if
so; and the third logs the value of the function <code>m -&gt; m.root</code>,
evaluated on <code>model</code>, to <code>Info</code>. In this example only the second
control can terminate model iteration.</p>
<p>If <code>model</code> admits a method returning a loss (in this case the
difference between <code>x</code> and the square of <code>root</code>) then we can lift
that method to <code>IterationControl.loss</code> to enable control using
loss-based stopping criteria, such as a loss threshold. In the
demonstation below, we also include a callback:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = SquareRooter(4)
train!(model, 1)

julia&gt; loss(model)
2.25

IterationControl.loss(model::SquareRooter) = loss(model) # lifting

losses = Float64[]
callback(model) = push!(losses, loss(model))

julia&gt; IterationControl.train!(model,
                               Step(1),
                               Threshold(0.0001),
                               Callback(callback));
[ Info: Stop triggered by Threshold(0.0001) stopping criterion.

julia&gt; losses
2-element Array{Float64,1}:
 0.002439396192741583
 3.716891878724482e-7
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">SquareRooter</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">train!</span>(model, <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">loss</span>(model)
<span class="pl-c1">2.25</span>

IterationControl<span class="pl-k">.</span><span class="pl-en">loss</span>(model<span class="pl-k">::</span><span class="pl-c1">SquareRooter</span>) <span class="pl-k">=</span> <span class="pl-c1">loss</span>(model) <span class="pl-c"><span class="pl-c">#</span> lifting</span>

losses <span class="pl-k">=</span> Float64[]
<span class="pl-en">callback</span>(model) <span class="pl-k">=</span> <span class="pl-c1">push!</span>(losses, <span class="pl-c1">loss</span>(model))

julia<span class="pl-k">&gt;</span> IterationControl<span class="pl-k">.</span><span class="pl-c1">train!</span>(model,
                               <span class="pl-c1">Step</span>(<span class="pl-c1">1</span>),
                               <span class="pl-c1">Threshold</span>(<span class="pl-c1">0.0001</span>),
                               <span class="pl-c1">Callback</span>(callback));
[ Info<span class="pl-k">:</span> Stop triggered by <span class="pl-c1">Threshold</span>(<span class="pl-c1">0.0001</span>) stopping criterion.

julia<span class="pl-k">&gt;</span> losses
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.002439396192741583</span>
 <span class="pl-c1">3.716891878724482e-7</span></pre></div>
<p>In many appliations to machine learning, "loss" will be an
out-of-sample loss, computed after some iterations. If <code>model</code>
additionally generates user-inspectable "training losses" (one per
iteration) then similarly lifting the appropriate access function to
<code>IterationControl.training_losses</code> enables Prechelt's
progress-modified generalization loss stopping criterion, <code>PQ</code> (see
Table 1 below).</p>
<p><code>PQ</code> is the only criterion from the
<a href="https://github.com/ablaom/EarlyStopping.jl">EarlyStopping.jl</a> package
not otherwise enabled when <code>IterationControl.loss</code> is overloaded as
above.</p>
<p><em>Reference.</em> <a href="https://link.springer.com/chapter/10.1007%2F3-540-49430-8_3" rel="nofollow">Prechelt, Lutz
(1998)</a>:
"Early Stopping - But When?", in <em>Neural Networks: Tricks of the
Trade</em>, ed. G. Orr, Springer.</p>
<p>The interface just described is sufficient for controlling
conventional machine learning models with an iteration parameter, as
<a href="/examples/tree_booster/">this</a> tree boosting example shows.</p>
<h2><a id="user-content-online-and-incremental-training" class="anchor" aria-hidden="true" href="#online-and-incremental-training"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Online and incremental training</h2>
<p>For online or incremental training, lift the method for ingesting data
into the model to <code>IterationControl.ingest!(model, datum)</code> and use the
control <code>Data(data)</code>. Here <code>data</code> is any iterator generating the
<code>datum</code> items to be ingested (one per application of the control). By
default, the <code>Data</code> control becomes passive after <code>data</code> is
exhausted. Do <code>?Data</code> for details. (See <a href="#access-to-model-through-a-wrapper">Access to model through a
wrapper</a> below on dealing with any
model wrapping necessary to implement data ingestion.)</p>
<p>A simple particle tracking example is given
<a href="/examples/particle/">here</a>.</p>
<h2><a id="user-content-verbose-logging-and-inspecting-control-reports" class="anchor" aria-hidden="true" href="#verbose-logging-and-inspecting-control-reports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Verbose logging and inspecting control reports</h2>
<p>The <code>IterationControl.train!</code> method can be given the keyword argument
<code>verbosity=...</code>, defaulting to <code>1</code>. The larger <code>verbosity</code>, the noisier.</p>
<p>The return value of <code>IterationControl.train!</code> is a tuple of <code>(control, report)</code> tuples, where <code>report</code> is generated by <code>control</code> at the end
of training. For example, the final loss can be accessed from the
report of the <code>WithLossDo()</code> control:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = SquareRooter(9)
reports = IterationControl.train!(model, Step(1), WithLossDo(println), NumberLimit(3));

julia&gt; last(reports[2])
(loss = 0.1417301038062284, done = false, log = &quot;&quot;)

julia&gt; last(reports[2]).loss
  0.1417301038062284
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">SquareRooter</span>(<span class="pl-c1">9</span>)
reports <span class="pl-k">=</span> IterationControl<span class="pl-k">.</span><span class="pl-c1">train!</span>(model, <span class="pl-c1">Step</span>(<span class="pl-c1">1</span>), <span class="pl-c1">WithLossDo</span>(println), <span class="pl-c1">NumberLimit</span>(<span class="pl-c1">3</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">last</span>(reports[<span class="pl-c1">2</span>])
(loss <span class="pl-k">=</span> <span class="pl-c1">0.1417301038062284</span>, done <span class="pl-k">=</span> <span class="pl-c1">false</span>, log <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">last</span>(reports[<span class="pl-c1">2</span>])<span class="pl-k">.</span>loss
  <span class="pl-c1">0.1417301038062284</span></pre></div>
<h2><a id="user-content-controls-provided" class="anchor" aria-hidden="true" href="#controls-provided"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Controls provided</h2>
<p>Controls are repeatedly applied in sequence until a control triggers a
stop. Each control type has a detailed doc-string. sBelow is a short
summary, with some advanced options omitted.</p>
<table>
<thead>
<tr>
<th>control</th>
<th>description</th>
<th>enabled if these are overloaded</th>
<th>can trigger a stop</th>
<th>notation in Prechelt</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Step(n=1)</code></td>
<td>Train model for <code>n</code> iterations</td>
<td><code>train!</code></td>
<td>no</td>
<td></td>
</tr>
<tr>
<td><code>Info(f=identity)</code></td>
<td>Log to <code>Info</code> the value of <code>f(model)</code></td>
<td><code>train!</code></td>
<td>no</td>
<td></td>
</tr>
<tr>
<td><code>Warn(predicate, f="")</code></td>
<td>Log to <code>Warn</code> the value of <code>f</code> or <code>f(model)</code> if <code>predicate(model)</code> holds</td>
<td><code>train!</code></td>
<td>no</td>
<td></td>
</tr>
<tr>
<td><code>Error(predicate, f="")</code></td>
<td>Log to <code>Error</code> the value of <code>f</code> or <code>f(model)</code> if <code>predicate(model)</code> holds and then stop</td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>Callback(f=_-&gt;nothing)</code></td>
<td>Call <code>f(model)</code></td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>TimeLimit(t=0.5)</code></td>
<td>Stop after <code>t</code> hours</td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>NumberLimit(n=100)</code></td>
<td>Stop after <code>n</code> applications of the control</td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>NumberSinceBest(n=6)</code></td>
<td>Stop when best loss occurred <code>n</code> control applications ago</td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>WithNumberDo(f=n-&gt;@info(n))</code></td>
<td>Call <code>f(n + 1)</code> where <code>n</code> is the number of complete control cycles so far</td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>WithLossDo(f=x-&gt;@info("loss: $x"))</code></td>
<td>Call <code>f(loss)</code> where <code>loss</code> is the current loss</td>
<td><code>train!</code>, <code>loss</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>WithTrainingLossesDo(f=v-&gt;@info(v))</code></td>
<td>Call <code>f(v)</code> where <code>v</code> is the current batch of training losses</td>
<td><code>train!</code>, <code>training_loss</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>InvalidValue()</code></td>
<td>Stop when <code>NaN</code>, <code>Inf</code> or <code>-Inf</code> loss/training loss encountered</td>
<td><code>train!</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>Threshold(value=0.0)</code></td>
<td>Stop when <code>loss &lt; value</code></td>
<td><code>train!</code>, <code>loss</code></td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td><code>GL(alpha=2.0)</code></td>
<td>Stop after "Generalization Loss" exceeds <code>alpha</code></td>
<td><code>train!</code>, <code>loss</code></td>
<td>yes</td>
<td><code>GL_α</code></td>
</tr>
<tr>
<td><code>Patience(n=5)</code></td>
<td>Stop after <code>n</code> consecutive loss increases</td>
<td><code>train!</code>, <code>loss</code></td>
<td>yes</td>
<td><code>UP_s</code></td>
</tr>
<tr>
<td><code>PQ(alpha=0.75, k=5)</code></td>
<td>Stop after "Progress-modified GL" exceeds <code>alpha</code></td>
<td><code>train!</code>, <code>loss</code>, <code>training_losses</code></td>
<td>yes</td>
<td><code>PQ_α</code></td>
</tr>
<tr>
<td><code>Data(data)</code></td>
<td>Call <code>ingest!(model, item)</code> on the next <code>item</code> in the iterable <code>data</code>.</td>
<td><code>train!</code>, <code>ingest!</code></td>
<td>yes</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Table 1. Atomic controls</p>
</blockquote>
<p><strong>Stopping option.</strong> All the following controls trigger a stop if the
provided function <code>f</code> returns <code>true</code> and <code>stop_if_true=true</code> is
specified in the constructor: <code>Callback</code>, <code>WithNumberDo</code>, <code>WithLossDo</code>,
<code>WithTrainingLossesDo</code>.</p>
<p>There are also three control wrappers to modify a control's behavior:</p>
<table>
<thead>
<tr>
<th>wrapper</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IterationControl.skip(control, predicate=1)</code></td>
<td>Apply <code>control</code> every <code>predicate</code> applications of the control wrapper (can also be a function; see doc-string)</td>
</tr>
<tr>
<td><code>IterationControl.louder(control, by=1)</code></td>
<td>Increase the verbosity level of <code>control</code> by the specified value (negative values lower verbosity)</td>
</tr>
<tr>
<td><code>IterationControl.debug(control)</code></td>
<td>Apply <code>control</code> but also log its state to <code>Info</code> (at any <code>verbosity</code> level)</td>
</tr>
<tr>
<td><code>IterationControl.composite(controls...)</code></td>
<td>Apply each <code>control</code> in <code>controls</code> in sequence; mostly for under-the-hood use</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Table 2. Wrapped controls</p>
</blockquote>
<h2><a id="user-content-access-to-model-through-a-wrapper" class="anchor" aria-hidden="true" href="#access-to-model-through-a-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Access to model through a wrapper</h2>
<p>Note that functions ordinarily applied to <code>model</code> by some control
(e.g., a <code>Callback</code>) will instead be applied to
<code>IterationControl.expose(model)</code> if <code>IterationControl.expose</code> is
appropriately overloaded.</p>
<h2><a id="user-content-implementing-new-controls" class="anchor" aria-hidden="true" href="#implementing-new-controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementing new controls</h2>
<p>There is no abstract control type; any object can be a
control. Behaviour is implemented using a functional style interface
with four methods. Only the first two are compulsory (the <code>done</code> and
<code>takedown</code> fallbacks always return <code>false</code> and <code>NamedTuple()</code>
respectively.):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="update!(control, model, verbosity, n) -&gt; state  # initialization
update!(control, model, verbosity, n, state) -&gt; state
done(control, state)::Bool
takedown(control, verbosity, state) -&gt; human_readable_named_tuple
"><pre><span class="pl-c1">update!</span>(control, model, verbosity, n) <span class="pl-k">-&gt;</span> state  <span class="pl-c"><span class="pl-c">#</span> initialization</span>
<span class="pl-c1">update!</span>(control, model, verbosity, n, state) <span class="pl-k">-&gt;</span> state
<span class="pl-c1">done</span>(control, state)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-c1">takedown</span>(control, verbosity, state) <span class="pl-k">-&gt;</span> human_readable_named_tuple</pre></div>
<p>Here <code>n</code> is the control cycle count, i.e., one more than the the
number of completed control cylcles.</p>
<p>Here's how <code>IterationControl.train!</code> calls these methods:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function train!(model, controls...; verbosity::Int=1)

    control = composite(controls...)

    # before training:
    verbosity &gt; 1 &amp;&amp; @info &quot;Using these controls: $(flat(control)). &quot;

    # first training event:
    n = 1 # counts control cycles
    state = update!(control, model, verbosity, n)
    finished = done(control, state)

    # subsequent training events:
    while !finished
        n += 1
        state = update!(control, model, verbosity, n, state)
        finished = done(control, state)
    end

    # finalization:
    return takedown(control, verbosity, state)
end
"><pre><span class="pl-k">function</span> <span class="pl-en">train!</span>(model, controls<span class="pl-k">...</span>; verbosity<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">1</span>)

    control <span class="pl-k">=</span> <span class="pl-c1">composite</span>(controls<span class="pl-k">...</span>)

    <span class="pl-c"><span class="pl-c">#</span> before training:</span>
    verbosity <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Using these controls: <span class="pl-v">$(<span class="pl-c1">flat</span>(control))</span>. <span class="pl-pds">"</span></span>

    <span class="pl-c"><span class="pl-c">#</span> first training event:</span>
    n <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> counts control cycles</span>
    state <span class="pl-k">=</span> <span class="pl-c1">update!</span>(control, model, verbosity, n)
    finished <span class="pl-k">=</span> <span class="pl-c1">done</span>(control, state)

    <span class="pl-c"><span class="pl-c">#</span> subsequent training events:</span>
    <span class="pl-k">while</span> <span class="pl-k">!</span>finished
        n <span class="pl-k">+=</span> <span class="pl-c1">1</span>
        state <span class="pl-k">=</span> <span class="pl-c1">update!</span>(control, model, verbosity, n, state)
        finished <span class="pl-k">=</span> <span class="pl-c1">done</span>(control, state)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> finalization:</span>
    <span class="pl-k">return</span> <span class="pl-c1">takedown</span>(control, verbosity, state)
<span class="pl-k">end</span></pre></div>
</article></div>