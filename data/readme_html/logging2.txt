<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-logging2" class="anchor" aria-hidden="true" href="#logging2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Logging2</h1>
<p><a href="https://github.com/c42f/Logging2.jl/actions"><img src="https://github.com/c42f/Logging2.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p><strong>Logging2</strong> is a library which extends the standard Julia
<a href="https://docs.julialang.org/en/v1/stdlib/Logging" rel="nofollow">Logging library</a> with
additional functionality. The intent of this library is to consolidate some
of the more useful "core" logging functionality from the wider Julia ecosystem,
and serve as a staging area to improve the logging standard library itself.</p>
<h2><a id="user-content-how-to" class="anchor" aria-hidden="true" href="#how-to"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How-To</h2>
<h3><a id="user-content-redirect-stdout-or-stderr-to-the-logging-system" class="anchor" aria-hidden="true" href="#redirect-stdout-or-stderr-to-the-logging-system"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Redirect stdout or stderr to the logging system</h3>
<p>Use <code>redirect_stdout</code> or <code>redirect_stderr</code> to redirect all strings written to
<code>stdout</code> or <code>stderr</code> to any <code>AbstractLogger</code> during the execution of a given
<code>do</code> block:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="logger = current_logger() # or construct one explicitly
redirect_stdout(logger) do
    println(&quot;Hi&quot;)
    run(`ls`)
end
"><pre>logger <span class="pl-k">=</span> <span class="pl-c1">current_logger</span>() <span class="pl-c"><span class="pl-c">#</span> or construct one explicitly</span>
<span class="pl-c1">redirect_stdout</span>(logger) <span class="pl-k">do</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Hi<span class="pl-pds">"</span></span>)
    <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>ls<span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Note that <code>stdout</code> and <code>stder</code> are <strong>global</strong> streams, so this logging choice
is made globally for the whole program. Therefore, you should probably only do
this at the top level of your application (certainly never in any library
code which you expect to run concurrently).</p>
<h2><a id="user-content-the-wider-julia-logging-ecosystem" class="anchor" aria-hidden="true" href="#the-wider-julia-logging-ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Wider Julia Logging Ecosystem</h2>
<p>As of mid-2020, here is a list of libraries from the Julia ecosystem which
relate to the standard logging infrastructure.</p>
<p>First off, <code>Base</code> exports the four logging frontend macros <code>@debug</code>, <code>@info</code>,
<code>@warn</code>, <code>@error</code> and the stdlib
<a href="https://docs.julialang.org/en/v1/stdlib/Logging" rel="nofollow"><code>Logging</code></a> library provides a
default logger backend <code>ConsoleLogger</code> for some basic filtering and pretty
printing of log records in the terminal. It combines convenient but
non-composable features into a single logger type.</p>
<h3><a id="user-content-frontend" class="anchor" aria-hidden="true" href="#frontend"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Frontend</h3>
<ul>
<li><a href="https://github.com/JunoLab/ProgressLogging.jl"><code>ProgressLogging.jl</code></a>
provides some convenient frontend macros including <code>@progress</code> which makes it
easy to emit log records tracking the progress of looping constructs.</li>
</ul>
<h3><a id="user-content-log-event-routing-and-transformation" class="anchor" aria-hidden="true" href="#log-event-routing-and-transformation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Log Event routing and transformation</h3>
<ul>
<li><a href="https://github.com/oxinabox/LoggingExtras.jl"><code>LoggingExtras.jl</code></a> provides
generic log transformation, filtering and routing functionality. You can use
this to mutate messages as they go through the chain, duplicate a stream of
log records into multiple streams, discard messages based on a predicate, etc.</li>
</ul>
<h3><a id="user-content-sinks" class="anchor" aria-hidden="true" href="#sinks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sinks</h3>
<ul>
<li><a href="https://github.com/c42f/TerminalLoggers.jl"><code>TerminalLoggers.jl</code></a> is a
library for advanced terminal-based pretty printing of log records, including
fancy progress bars and markdown formatting.</li>
<li><a href="https://github.com/PhilipVinc/TensorBoardLogger.jl"><code>TensorBoardLogger.jl</code></a>
can log structured numeric data to
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> as a backend.</li>
<li><a href="https://github.com/tanmaykm/LogRoller.jl"><code>LogRoller.jl</code></a> has a backend for
rotating log files once they hit a size limit.</li>
<li><a href="https://github.com/tanmaykm/SyslogLogging.jl"><code>Syslogging.jl</code></a> provides a</li>
<li>backend to direct logs to syslog.</li>
<li><a href="https://github.com/oxinabox/LoggingExtras.jl"><code>LoggingExtras.jl</code></a> provides a
simple <code>FileLogger</code> sink.</li>
</ul>
<h3><a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configuration</h3>
<ul>
<li><a href="https://github.com/tanmaykm/LogCompose.jl"><code>LogCompose.jl</code></a> provides
declarative logger configuration and an associated <code>.toml</code> file format.</li>
</ul>
</article></div>