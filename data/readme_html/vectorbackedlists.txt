<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-vectorbackedlists" class="anchor" aria-hidden="true" href="#vectorbackedlists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VectorBackedLists</h1>
<p dir="auto">Double linked lists using Vectors as memory pool.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using VectorBackedLists

d = [1,2,3,4]
dl = list(d)

s = start(dl)
_, t = next(dl, s) # t points at 2
_, n = next(dl, t) # n points at 3
_, q = next(dl, n) # q points at 4

move_before!(dl, n, t)
@assert collect(dl) == [1,3,2,4]

insert_after!(dl, q, 4)
@assert collect(dl) == [1,3,2,4,4]

insert_after!(dl, t, 100)
@assert collect(dl) == [1,3,2,100,4,4]

insert_before!(dl, t, -8)
@assert collect(dl) == [1,3,-8,2,100,4,4]

for v in dl
    println(v)
end"><pre><span class="pl-k">using</span> VectorBackedLists

d <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]
dl <span class="pl-k">=</span> <span class="pl-c1">list</span>(d)

s <span class="pl-k">=</span> <span class="pl-c1">start</span>(dl)
_, t <span class="pl-k">=</span> <span class="pl-c1">next</span>(dl, s) <span class="pl-c"><span class="pl-c">#</span> t points at 2</span>
_, n <span class="pl-k">=</span> <span class="pl-c1">next</span>(dl, t) <span class="pl-c"><span class="pl-c">#</span> n points at 3</span>
_, q <span class="pl-k">=</span> <span class="pl-c1">next</span>(dl, n) <span class="pl-c"><span class="pl-c">#</span> q points at 4</span>

<span class="pl-c1">move_before!</span>(dl, n, t)
<span class="pl-c1">@assert</span> <span class="pl-c1">collect</span>(dl) <span class="pl-k">==</span> [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>]

<span class="pl-c1">insert_after!</span>(dl, q, <span class="pl-c1">4</span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">collect</span>(dl) <span class="pl-k">==</span> [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>]

<span class="pl-c1">insert_after!</span>(dl, t, <span class="pl-c1">100</span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">collect</span>(dl) <span class="pl-k">==</span> [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">100</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>]

<span class="pl-c1">insert_before!</span>(dl, t, <span class="pl-k">-</span><span class="pl-c1">8</span>)
<span class="pl-c1">@assert</span> <span class="pl-c1">collect</span>(dl) <span class="pl-k">==</span> [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>,<span class="pl-k">-</span><span class="pl-c1">8</span>,<span class="pl-c1">2</span>,<span class="pl-c1">100</span>,<span class="pl-c1">4</span>,<span class="pl-c1">4</span>]

<span class="pl-k">for</span> v <span class="pl-k">in</span> dl
    <span class="pl-c1">println</span>(v)
<span class="pl-k">end</span></pre></div>
</article></div>