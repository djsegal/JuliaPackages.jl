<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lebedevjl" class="anchor" aria-hidden="true" href="#lebedevjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lebedev.jl</h1>
<p><a href="https://github.com/stefabat/Lebedev.jl/actions?query=workflow%3ACI"><img src="https://github.com/stefabat/Lebedev.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/stefabat/Lebedev.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/760974d09fd9d8e5315daa9fb1289b3f724d4a6ced9eac70c72625722a594b12/68747470733a2f2f636f6465636f762e696f2f67682f73746566616261742f4c6562656465762e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/stefabat/Lebedev.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A julia package to compute the <a href="https://www.wikiwand.com/en/Lebedev_quadrature" rel="nofollow">Lebedev quadrature rule</a>
over the surface of a three-dimensional unit sphere.</p>
<p>This formula allows to approximate a surface integral as follows</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1191b116ae80c4cd70c5a7ee23a9e8cc4d3f301e85cadf839e1f3a58d3dd988e/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f492866293d5c696e745f305e7b325c70697d645c7068695c696e745f305e5c70692673706163653b66285c7068692c5c7468657461295c73696e5c74686574612673706163653b645c74686574615c617070726f78345c70695c73756d5f69775f696628785f692c795f692c7a5f6929"><img src="https://camo.githubusercontent.com/1191b116ae80c4cd70c5a7ee23a9e8cc4d3f301e85cadf839e1f3a58d3dd988e/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f492866293d5c696e745f305e7b325c70697d645c7068695c696e745f305e5c70692673706163653b66285c7068692c5c7468657461295c73696e5c74686574612673706163653b645c74686574615c617070726f78345c70695c73756d5f69775f696628785f692c795f692c7a5f6929" data-canonical-src="https://latex.codecogs.com/svg.latex?I(f)=\int_0^{2\pi}d\phi\int_0^\pi&amp;space;f(\phi,\theta)\sin\theta&amp;space;d\theta\approx4\pi\sum_iw_if(x_i,y_i,z_i)" style="max-width:100%;"></a></p>
<p>where the number of points in the sum depends on the quadrature order chosen.
The coefficients generated by the Lebedev rule allow to calculate integrals of polynomials</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/a2967e15568e1377768f56186156ca956caff6bdced8009aa932028fce0a8d7a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f785e6b795e6c7a5e6d2c5c3b6b2b6c2b6d5c6c65313331"><img src="https://camo.githubusercontent.com/a2967e15568e1377768f56186156ca956caff6bdced8009aa932028fce0a8d7a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f785e6b795e6c7a5e6d2c5c3b6b2b6c2b6d5c6c65313331" data-canonical-src="https://latex.codecogs.com/svg.latex?x^ky^lz^m,\;k+l+m\le131" style="max-width:100%;"></a></p>
<p>with a relative accuracy in the order of 5⋅10⁻¹⁴. The points created by the rule
have octahedral rotation (Oₕ point group) and inversion symmetry, while the coefficients are
normalized such that they sum up to one.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The <code>Lebedev.jl</code> package is tested with Julia 1.5 on Linux, MacOS and Windows. Previous versions
of Julia starting at 1.0 might be supported as well, but are not tested; use it at your own risk.</p>
<p>To install the latest version of the package, simply enter in the Julia package manager by typing <code>]</code>
in the REPL and issue</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add Lebedev
"><pre>pkg<span class="pl-k">&gt;</span> add Lebedev</pre></div>
<p>That's it! You're good to go.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>After installing the package, type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Lebedev
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Lebedev</pre></div>
<p>in the REPL or add it to your script.</p>
<p>The <code>Lebedev.jl</code> package provides essentially two functions to generate quadrature points and weights:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="lebedev_by_points(n::Integer) -&gt; x,y,z,w
lebedev_by_order(n::Integer) -&gt; x,y,z,w
"><pre><span class="pl-c1">lebedev_by_points</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>) <span class="pl-k">-&gt;</span> x,y,z,w
<span class="pl-c1">lebedev_by_order</span>(n<span class="pl-k">::</span><span class="pl-c1">Integer</span>) <span class="pl-k">-&gt;</span> x,y,z,w</pre></div>
<p>Both of them return four one-dimensional arrays of the same length, the first three containing
the <code>x</code>, <code>y</code> and <code>z</code> Cartesian coordinates of the quadrature points (which lie on the unit sphere)
and the last one containing the associated weights <code>w</code>.
The <code>lebedev_by_points</code> function returns the points and weights corresponding to the <code>n</code>-point Lebedev
rule, while the <code>lebedev_by_order</code> function returns the points and weights ensuring "exact"
integration for a polynomial of order up to <code>n</code>.</p>
<p>Lebedev determined 65 quadrature rules ranging from order 3 up to order 131, increasing two by two
(hence only odd-numbered orders are known), however, this package only provides a subset of them.
Use the function <code>isavailable(n::Integer)</code> to know if the quadrature rule for a given order <code>n</code> is
available and the function <code>availablerules()</code> to print out all available orders and corresponding
number of points.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @time lebedev_by_points(2702);
  0.000053 seconds (8 allocations: 84.812 KiB)

julia&gt; @time lebedev_by_order(89);
  0.000035 seconds (8 allocations: 84.812 KiB)

julia&gt; f(x,y,z) = x^2 * y^4 * z^6
f (generic function with 1 method)

# we need at least a rule of order n = 2+4+6 = 12
julia&gt; isavailable(12)
false

# only odd-numbered rules are implemented, check if n = 13 is available
julia&gt; isavailable(13)
true

julia&gt; @time x,y,z,w = lebedev_by_order(13);
  0.000007 seconds (4 allocations: 2.625 KiB)

# integrates f(x,y,z) = x²y⁴z⁶ on the unit sphere
julia&gt; @time 4 * pi * dot(w,f.(x,y,z))
  0.000063 seconds (5 allocations: 768 bytes)
0.0041846055991871965
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">lebedev_by_points</span>(<span class="pl-c1">2702</span>);
  <span class="pl-c1">0.000053</span> seconds (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">84.812</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">lebedev_by_order</span>(<span class="pl-c1">89</span>);
  <span class="pl-c1">0.000035</span> seconds (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">84.812</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x,y,z) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> y<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">*</span> z<span class="pl-k">^</span><span class="pl-c1">6</span>
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

<span class="pl-c"><span class="pl-c">#</span> we need at least a rule of order n = 2+4+6 = 12</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">isavailable</span>(<span class="pl-c1">12</span>)
<span class="pl-c1">false</span>

<span class="pl-c"><span class="pl-c">#</span> only odd-numbered rules are implemented, check if n = 13 is available</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">isavailable</span>(<span class="pl-c1">13</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x,y,z,w <span class="pl-k">=</span> <span class="pl-c1">lebedev_by_order</span>(<span class="pl-c1">13</span>);
  <span class="pl-c1">0.000007</span> seconds (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">2.625</span> KiB)

<span class="pl-c"><span class="pl-c">#</span> integrates f(x,y,z) = x²y⁴z⁶ on the unit sphere</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">4</span> <span class="pl-k">*</span> <span class="pl-c1">pi</span> <span class="pl-k">*</span> <span class="pl-c1">dot</span>(w,<span class="pl-c1">f</span>.(x,y,z))
  <span class="pl-c1">0.000063</span> seconds (<span class="pl-c1">5</span> allocations<span class="pl-k">:</span> <span class="pl-c1">768</span> bytes)
<span class="pl-c1">0.0041846055991871965</span></pre></div>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference</h2>
<p>Vyacheslav Lebedev, Dmitri Laikov,
“A quadrature formula for the sphere of the 131st algebraic order of accuracy”,
<em>Doklady Mathematics</em>, <strong>59</strong> (3), 477-481 (1999).</p>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h2>
<p>The Lebedev.jl package is released under the GNU General Public License, version 3.0.
This implementation is based on a C source code developed by Dmitri Laikov and John Burkardt,
which can be found at
<a href="https://people.sc.fsu.edu/~jburkardt/c_src/sphere_lebedev_rule/sphere_lebedev_rule.html" rel="nofollow">https://people.sc.fsu.edu/~jburkardt/c_src/sphere_lebedev_rule/sphere_lebedev_rule.html</a>.</p>
</article></div>