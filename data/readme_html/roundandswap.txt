<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="./docs/src/assets/logo.png"><img src="./docs/src/assets/logo.png" width="20%" height="20%" style="max-width: 100%;"></a>
</p>
<h1 dir="auto"><a id="user-content-roundandswapjl" class="anchor" aria-hidden="true" href="#roundandswapjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RoundAndSwap.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://this-josh.github.io/RoundAndSwap.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://this-josh.github.io/RoundAndSwap.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/this-josh/RoundAndSwap.jl/actions/workflows/runtests.yml"><img src="https://github.com/this-josh/RoundAndSwap.jl/actions/workflows/runtests.yml/badge.svg" alt="" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/this-josh/RoundAndSwap.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/055d569df1df1abf344a39737631191a011a4957fbbe323bc606d4c3bc65bd1d/68747470733a2f2f636f6465636f762e696f2f67682f746869732d6a6f73682f526f756e64416e64537761702e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d68665147505a6a6c3279" alt="" data-canonical-src="https://codecov.io/gh/this-josh/RoundAndSwap.jl/branch/main/graph/badge.svg?token=hfQGPZjl2y" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><code>RoundAndSwap.jl</code> is a library which implements the Round and Swap algorithm, this implementation was inspired by Filippo Pecci's usage in <a href="https://arxiv.org/abs/2207.04897" rel="nofollow">Bounds and Convex Heuristics for Bi-Objective Sensor Placement in Water Networks</a>.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<ol dir="auto">
<li>Create your JuMP model, and optimize</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Define how many variables you want fixed
num_to_fix = 2

using JuMP, HiGHS
model = Model(HiGHS.Optimizer)
@variable(model, 0 ≤ a ≤ 1)
@variable(model, 0 ≤ b ≤ 1)
@variable(model, 0 ≤ c ≤ 1)
@variable(model, 0 ≤ d ≤ 1)
@constraint(model, a + b + c + d == num_to_fix)
@objective(model, Max, (a + b) + (2 * (b + c)) + (3 * (c - d)) + (4 * (d + a)))

# To demonstate functionality we will fix b and d
fix(b, 0.8; force=true)
fix(d, 0.8; force=true)

optimize!(model)"><pre><span class="pl-c"><span class="pl-c">#</span> Define how many variables you want fixed</span>
num_to_fix <span class="pl-k">=</span> <span class="pl-c1">2</span>

<span class="pl-k">using</span> JuMP, HiGHS
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(HiGHS<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">≤</span> a <span class="pl-k">≤</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">≤</span> b <span class="pl-k">≤</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">≤</span> c <span class="pl-k">≤</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">0</span> <span class="pl-k">≤</span> d <span class="pl-k">≤</span> <span class="pl-c1">1</span>)
<span class="pl-c1">@constraint</span>(model, a <span class="pl-k">+</span> b <span class="pl-k">+</span> c <span class="pl-k">+</span> d <span class="pl-k">==</span> num_to_fix)
<span class="pl-c1">@objective</span>(model, Max, (a <span class="pl-k">+</span> b) <span class="pl-k">+</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> (b <span class="pl-k">+</span> c)) <span class="pl-k">+</span> (<span class="pl-c1">3</span> <span class="pl-k">*</span> (c <span class="pl-k">-</span> d)) <span class="pl-k">+</span> (<span class="pl-c1">4</span> <span class="pl-k">*</span> (d <span class="pl-k">+</span> a)))

<span class="pl-c"><span class="pl-c">#</span> To demonstate functionality we will fix b and d</span>
<span class="pl-c1">fix</span>(b, <span class="pl-c1">0.8</span>; force<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">fix</span>(d, <span class="pl-c1">0.8</span>; force<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c1">optimize!</span>(model)</pre></div>
<ol start="2" dir="auto">
<li>Identify which variable we are considering making <code>1</code></li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="consider_swapping = [a,b,c,d]"><pre>consider_swapping <span class="pl-k">=</span> [a,b,c,d]</pre></div>
<ol start="3" dir="auto">
<li>Round variables closest to <code>1</code>, this will be b and d as we fixed them at <code>0.8</code>.</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RoundAndSwap
round!(consider_swapping, num_to_fix)"><pre><span class="pl-k">using</span> RoundAndSwap
<span class="pl-c1">round!</span>(consider_swapping, num_to_fix)</pre></div>
<ol start="4" dir="auto">
<li>Begin swapping</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="best_swap, swapper = swap(model, consider_swapping)"><pre>best_swap, swapper <span class="pl-k">=</span> <span class="pl-c1">swap</span>(model, consider_swapping)</pre></div>
<ol start="5" dir="auto">
<li>Review your best swap</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; best_swap
1-element Vector{Swap}:
 Swap 
    existing:           b
    new:                a
    obj_value:          10.0          
    success:            true            
    all_fixed:          [:a, :c]          
    termination_status: OPTIMAL 
    solve_time:         0.0004438320000872409
    swap_number:        7"><pre>julia<span class="pl-k">&gt;</span> best_swap
<span class="pl-c1">1</span><span class="pl-k">-</span>element Vector{Swap}<span class="pl-k">:</span>
 Swap 
    existing<span class="pl-k">:</span>           b
    new<span class="pl-k">:</span>                a
    obj_value<span class="pl-k">:</span>          <span class="pl-c1">10.0</span>          
    success<span class="pl-k">:</span>            <span class="pl-c1">true</span>            
    all_fixed<span class="pl-k">:</span>          [<span class="pl-c1">:a</span>, <span class="pl-c1">:c</span>]          
    termination_status<span class="pl-k">:</span> OPTIMAL 
    solve_time<span class="pl-k">:</span>         <span class="pl-c1">0.0004438320000872409</span>
    swap_number<span class="pl-k">:</span>        <span class="pl-c1">7</span></pre></div>
<p dir="auto">As you can see in this case we found the globally optimal solution of 10.
<em>Note:</em> Round and Swap does not provide guarantees of global optimility.</p>
<h3 dir="auto"><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>caveats</h3>
<ul dir="auto">
<li>Currently can only set variables to <code>0</code> or <code>1</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">In testing I've done 536 swaps with <code>round_and_swap</code> taking 174.1 seconds with 172.8 seconds of that being in the optimizer, giving <code>RoundAndSwap.jl</code> an overhead of 0.75%.</p>
</article></div>