<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-semiclassicalorthogonalpolynomialsjl" class="anchor" aria-hidden="true" href="#semiclassicalorthogonalpolynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SemiclassicalOrthogonalPolynomials.jl</h1>
<p dir="auto">A Julia repository for semiclassical orthogonal polynomials</p>
<p dir="auto"><a href="https://github.com/JuliaArrays/InfiniteArrays.jl/actions"><img src="https://github.com/JuliaApproximation/SemiclassicalOrthogonalPolynomials.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaArrays/InfiniteArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6277aad006fc6a713cf2d9ec4e453a4d73d8b0f1c6c4c18815b55f02015cc815/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f53656d69636c6173736963616c4f7274686f676f6e616c506f6c796e6f6d69616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/SemiclassicalOrthogonalPolynomials.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package implements <code>SemiclassicalJacobi</code>, a family of orthogonal
polynomials orthogonal with respect to the weight <code>x^a * (1-x)^b * (t-x)^c</code>.
This builds on top of <a href="https://github.com/JuliaApproximation/ClassicalOrthogonalPolynomials.jl">ClassicalOrthogonalPolynomials.jl</a> and usage is similar.</p>
<p dir="auto">For example, the following gives a half-range Chebyshev polynomial:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; T = SemiclassicalJacobi(2, -1/2, 0, -1/2)
SemiclassicalJacobi with weight x^-0.5 * (1-x)^0.0 * (2.0-x)^-0.5

julia&gt; T[0.1,1:10] # evaluate first 10 OPs at 0.1
10-element Array{Float64,1}:
  1.0
 -0.855801766003832
  0.19083013661761547
  0.5574589013555691
 -1.085921276099753
  1.181713489691121
 -0.8056271765695796
  0.10748539771183807
  0.6338334369113602
 -1.1219700834800677

julia&gt; U = SemiclassicalJacobi(2, 1/2, 0, 1/2, T) # last argument reuses computation from T
SemiclassicalJacobi with weight x^0.5 * (1-x)^0.0 * (2.0-x)^0.5"><pre>julia<span class="pl-k">&gt;</span> T <span class="pl-k">=</span> <span class="pl-c1">SemiclassicalJacobi</span>(<span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>)
SemiclassicalJacobi with weight x<span class="pl-k">^-</span><span class="pl-c1">0.5</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>x)<span class="pl-k">^</span><span class="pl-c1">0.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2.0</span><span class="pl-k">-</span>x)<span class="pl-k">^-</span><span class="pl-c1">0.5</span>

julia<span class="pl-k">&gt;</span> T[<span class="pl-c1">0.1</span>,<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>] <span class="pl-c"><span class="pl-c">#</span> evaluate first 10 OPs at 0.1</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.855801766003832</span>
  <span class="pl-c1">0.19083013661761547</span>
  <span class="pl-c1">0.5574589013555691</span>
 <span class="pl-k">-</span><span class="pl-c1">1.085921276099753</span>
  <span class="pl-c1">1.181713489691121</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8056271765695796</span>
  <span class="pl-c1">0.10748539771183807</span>
  <span class="pl-c1">0.6338334369113602</span>
 <span class="pl-k">-</span><span class="pl-c1">1.1219700834800677</span>

julia<span class="pl-k">&gt;</span> U <span class="pl-k">=</span> <span class="pl-c1">SemiclassicalJacobi</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>, T) <span class="pl-c"><span class="pl-c">#</span> last argument reuses computation from T</span>
SemiclassicalJacobi with weight x<span class="pl-k">^</span><span class="pl-c1">0.5</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>x)<span class="pl-k">^</span><span class="pl-c1">0.0</span> <span class="pl-k">*</span> (<span class="pl-c1">2.0</span><span class="pl-k">-</span>x)<span class="pl-k">^</span><span class="pl-c1">0.5</span></pre></div>
</article></div>