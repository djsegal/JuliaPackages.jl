<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lightlatticesjl" class="anchor" aria-hidden="true" href="#lightlatticesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LightLattices.jl</h1>
<p dir="auto">The package provides a convenient interface to work with Lattices with arbitrary reapeated basis cells.</p>
<p dir="auto">For the exported types of basis cells and lattices, it defines the array interface which allows to access the coordinate of specific node by its index. In addition to that, it provides a function <code>relative_coordinate</code> which allows to calculate the shortest vector connecting the two nodes.</p>
<p dir="auto"><a href="https://github.com/Gregstrq/LightLattices.jl/actions"><img src="https://github.com/Gregstrq/LightLattices.jl/workflows/CI/badge.svg" alt="Build status (Github Actions)" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/Gregstrq/LightLattices.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/17bef869db59c357fee8e46945da1f3e1ab2413abd25e03f65b5f4354dd0925b/687474703a2f2f636f6465636f762e696f2f6769746875622f47726567737472712f4c696768744c617474696365732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="codecov.io" data-canonical-src="http://codecov.io/github/Gregstrq/LightLattices.jl/coverage.svg?branch=main" style="max-width: 100%;"></a>
<a href="https://Gregstrq.github.io/LightLattices.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://Gregstrq.github.io/LightLattices.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">The package exports the type <code>RegularLattice{D,T}</code> and several types used to describe the basis cell of the lattice. All the exported types are subtypes of the abstract type <code>AbstractNodeCollection{D,T}</code>. Here, <code>D</code> refers to the dimensionality of space (number of coordinates), <code>T</code> refers to the type used to store the coordinates. For all the exported subtypes, the package defines the array interface</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="node_collection[I]"><pre>node_collection[I]</pre></div>
<p dir="auto">which allows to access the coordinate of the <code>I</code>-th node of the collection.
In addition to that, the package provides the function <code>relative_coordinate</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="relative_coordinate(node_collection::AbstractNodeCollection, I1, I2)"><pre><span class="pl-c1">relative_coordinate</span>(node_collection<span class="pl-k">::</span><span class="pl-c1">AbstractNodeCollection</span>, I1, I2)</pre></div>
<p dir="auto">which returns the vector connecting the <code>I2</code>-th node with the <code>I1</code>-th node.
In the case of <code>RegularLattice</code>-s with periodic boundary conditions, <code>relative_coordinate</code> returns the shortest connecting vector.
(Actually, in the case of complex basis cell, there can be several "shortest" vectors. The problem is resolved by a simple heuristic, described in the <a href="https://gregstrq.github.io/LightLattices.jl/dev/manual/#Lattices-with-periodic-boundaries" rel="nofollow">docs</a>).</p>
<p dir="auto">There are three available types to describe the basis cell: <code>HomogeneousCell</code>, <code>TrivialCell</code> and <code>InhomogeneousCell</code>.
<code>HomogeneousCell</code> refers to a homogeneous collection of nodes. <code>TrivialCell</code> behaves like <code>HomogeneousCell</code> with single node at the origin (zero coordinates). Finally, <code>InhomogeneousCell</code> is useful in the situation where one need to distinguish between several groups of nodes in the basis cell. For example, we can have several groupes of nodes corresponding to the different types of nuclei which occupy these nodes.</p>
<p dir="auto">For the detailed account of exported types and the interface, please look at the <a href="https://gregstrq.github.io/LightLattices.jl/dev/manual/" rel="nofollow">manual section of the docs</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<h3 dir="auto"><a id="user-content-chain" class="anchor" aria-hidden="true" href="#chain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Chain</h3>
<p dir="auto">Here we construct a periodic chain with <code>11</code> nodes. The separation between nodes is <code>1</code> by default.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LightLattices

chain = RegularLattice((11,); label=:chain)"><pre><span class="pl-k">using</span> LightLattices

chain <span class="pl-k">=</span> <span class="pl-c1">RegularLattice</span>((<span class="pl-c1">11</span>,); label<span class="pl-k">=</span><span class="pl-c1">:chain</span>)</pre></div>
<h3 dir="auto"><a id="user-content-square-lattice" class="anchor" aria-hidden="true" href="#square-lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Square Lattice</h3>
<p dir="auto">Now, let us construct a square <code>11x11</code> lattice with the size of the square equal to <code>2</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LightLattices

square_lattice = RegularLattice((11,11), 2; label = :square)"><pre><span class="pl-k">using</span> LightLattices

square_lattice <span class="pl-k">=</span> <span class="pl-c1">RegularLattice</span>((<span class="pl-c1">11</span>,<span class="pl-c1">11</span>), <span class="pl-c1">2</span>; label <span class="pl-k">=</span> <span class="pl-c1">:square</span>)</pre></div>
<h3 dir="auto"><a id="user-content-cubic-lattice" class="anchor" aria-hidden="true" href="#cubic-lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cubic Lattice</h3>
<p dir="auto">For the cubic lattice example, let us draw inspiration from the real world.
The Fluorine nuclei in <code>CaF2</code> consitute a cubic lattice with lattice parameter <code>a=2.725 Å</code>.
Let us construct fluorine sublattice of size <code>11x11x11</code> with free boundary conditions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LightLattices, Unitful

fluorine_sublattice = RegularLattice((11,11,11), 2.725u&quot;Å&quot;; label=:cubic, periodic=false)"><pre><span class="pl-k">using</span> LightLattices, Unitful

fluorine_sublattice <span class="pl-k">=</span> <span class="pl-c1">RegularLattice</span>((<span class="pl-c1">11</span>,<span class="pl-c1">11</span>,<span class="pl-c1">11</span>), <span class="pl-c1">2.725</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>; label<span class="pl-k">=</span><span class="pl-c1">:cubic</span>, periodic<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<h3 dir="auto"><a id="user-content-diamond-lattice-with-homogeneous-basis-cell" class="anchor" aria-hidden="true" href="#diamond-lattice-with-homogeneous-basis-cell"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Diamond lattice with homogeneous basis cell.</h3>
<p dir="auto">The lattice of diamond is face-centered cubic with a basis cell consisting of two nodes.
Let us take the size of cube equal to <code>1</code>. The following creates diamond lattice with <code>11x11x11</code> basis cells with periodic boundary conditions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LightLattices

fcc_pvecs = 0.5*hcat([0,1,1],[1,1,0],[1,0,1]) |&gt; SMatrix{3,3}

diamond_cell = HomogeneousCell([[0.0,0.0,0.0], [0.25,0.25,0.25]]; label = :diamond)
dimond_lattice = RegularLattice((11,11,11), fcc_pvecs, diamond_cell; label=:fcc)"><pre><span class="pl-k">using</span> LightLattices

fcc_pvecs <span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">hcat</span>([<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>],[<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]) <span class="pl-k">|&gt;</span> SMatrix{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>}

diamond_cell <span class="pl-k">=</span> <span class="pl-c1">HomogeneousCell</span>([[<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>,<span class="pl-c1">0.0</span>], [<span class="pl-c1">0.25</span>,<span class="pl-c1">0.25</span>,<span class="pl-c1">0.25</span>]]; label <span class="pl-k">=</span> <span class="pl-c1">:diamond</span>)
dimond_lattice <span class="pl-k">=</span> <span class="pl-c1">RegularLattice</span>((<span class="pl-c1">11</span>,<span class="pl-c1">11</span>,<span class="pl-c1">11</span>), fcc_pvecs, diamond_cell; label<span class="pl-k">=</span><span class="pl-c1">:fcc</span>)</pre></div>
<p dir="auto">Here, <code>HomogeneousCell</code> constructor takes the vector of coordinates of the nodes.
Coordinates can be expressed as <code>Vector</code>-s, <code>SVector</code>-s or <code>NTuple</code>-s. Under the hood, all coordinates are converted to <code>SVector</code>-s.</p>
<h3 dir="auto"><a id="user-content-magnetic-sublattice-of-fluorapatite-with-inhomogeneous-basis-cell" class="anchor" aria-hidden="true" href="#magnetic-sublattice-of-fluorapatite-with-inhomogeneous-basis-cell"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Magnetic sublattice of fluorapatite with inhomogeneous basis cell.</h3>
<p dir="auto">This example is going to be quite elaborated, but it illustrates the application of additional type of basis cell: <code>InhomogeneousCell</code>.
Fluorapatite has the hexagonal structure with the space group <code>P6_3/m</code>. The three lattice parameters are <code>a=b=9.462 Å</code> and <code>c=6.849 Å</code>.
The <strong>c</strong>-axis is orthogonal to (<strong>a</strong>, <strong>b</strong>) plane and the angle between <strong>a</strong> and <strong>b</strong> is <code>120°</code>.
Thus, we can construct the matrix of primitive vectors as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Unitful

const a = 9.462u&quot;Å&quot;
const c = 6.849u&quot;Å&quot;

fpvecs = hcat(a*[0.5, 0.5*sqrt(3), 0.0],
              a*[0.5, -0.5*sqrt(3), 0.0],
              c*[0.0, 0.0, 1.0]
             ) |&gt; SMatrix{3,3}"><pre><span class="pl-k">using</span> Unitful

<span class="pl-k">const</span> a <span class="pl-k">=</span> <span class="pl-c1">9.462</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>
<span class="pl-k">const</span> c <span class="pl-k">=</span> <span class="pl-c1">6.849</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Å<span class="pl-pds">"</span></span>

fpvecs <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(a<span class="pl-k">*</span>[<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>), <span class="pl-c1">0.0</span>],
              a<span class="pl-k">*</span>[<span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>), <span class="pl-c1">0.0</span>],
              c<span class="pl-k">*</span>[<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>]
             ) <span class="pl-k">|&gt;</span> SMatrix{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>}</pre></div>
<p dir="auto">The basis cell for magnetically active sublattice of fluorapatite contains two F nuceli at positions</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="8189d5e12776b4c61ee07b30ba108a04">$$[0.0,0.0,0.25],    [0.0,0.0,0.75]$$</math-renderer>
<p dir="auto">and six P nuclei at positions</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="8189d5e12776b4c61ee07b30ba108a04">$$[x,y,0.25],        [1-y,x-y,0.25],    [y-x,1-x,0.25],
[1-x,1-y,0.75],    [y, y-x,0.75],     [x-y, x, 0.75],$$</math-renderer>
<p dir="auto">where <code>x=0.369</code> and <code>y=0.3985</code>. All the coordinates here are relative to the set of  primitive vectors <code>fpvecs</code>.</p>
<p dir="auto">Since we have two different types of nuclei, it is a good idea somehow to separate two groups of nuclei in the basis cell. In this case, one should use <code>InhomogeneousCell</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const x = 0.369
const y = 0.3985

cell_vectors_raw1 = [[0.0, 0.0, 0.25], [0.0, 0.0, 0.75]]
cell_vectors_raw2 = [[x, y, 0.25], [-y, x-y, 0.25], [y-x, -x, 0.25],
                  [-x, -y, 0.75], [y, y-x, 0.75], [x-y, x, 0.75]]

fcell = InhomogeneousCell([fpvecs*vec for vec in cell_vectors_raw1], [fpvecs*vec for vec in cell_vectors_raw2]; label = :fluorapatite_magnetic)"><pre><span class="pl-k">const</span> x <span class="pl-k">=</span> <span class="pl-c1">0.369</span>
<span class="pl-k">const</span> y <span class="pl-k">=</span> <span class="pl-c1">0.3985</span>

cell_vectors_raw1 <span class="pl-k">=</span> [[<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.25</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.75</span>]]
cell_vectors_raw2 <span class="pl-k">=</span> [[x, y, <span class="pl-c1">0.25</span>], [<span class="pl-k">-</span>y, x<span class="pl-k">-</span>y, <span class="pl-c1">0.25</span>], [y<span class="pl-k">-</span>x, <span class="pl-k">-</span>x, <span class="pl-c1">0.25</span>],
                  [<span class="pl-k">-</span>x, <span class="pl-k">-</span>y, <span class="pl-c1">0.75</span>], [y, y<span class="pl-k">-</span>x, <span class="pl-c1">0.75</span>], [x<span class="pl-k">-</span>y, x, <span class="pl-c1">0.75</span>]]

fcell <span class="pl-k">=</span> <span class="pl-c1">InhomogeneousCell</span>([fpvecs<span class="pl-k">*</span>vec <span class="pl-k">for</span> vec <span class="pl-k">in</span> cell_vectors_raw1], [fpvecs<span class="pl-k">*</span>vec <span class="pl-k">for</span> vec <span class="pl-k">in</span> cell_vectors_raw2]; label <span class="pl-k">=</span> <span class="pl-c1">:fluorapatite_magnetic</span>)</pre></div>
<p dir="auto">Finally, we can construct the lattice. Let us choose the size of <code>11x11x11</code> basis cells and periodic boundary conditions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fluorapatite_magnetic_sublattice = RegularLattice((11,11,11), fpvecs, fcell; label = :hexagonal)"><pre>fluorapatite_magnetic_sublattice <span class="pl-k">=</span> <span class="pl-c1">RegularLattice</span>((<span class="pl-c1">11</span>,<span class="pl-c1">11</span>,<span class="pl-c1">11</span>), fpvecs, fcell; label <span class="pl-k">=</span> <span class="pl-c1">:hexagonal</span>)</pre></div>
</article></div>