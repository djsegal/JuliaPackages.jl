<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/andrewcooke/AutoTypeParameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff673dcae76dcf8489bb38325cf59337293e7715/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f4175746f54797065506172616d65746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/AutoTypeParameters.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/andrewcooke/AutoTypeParameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/71b43d265185b3ec12f22ee9cd71695d076d3883/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e64726577636f6f6b652f4175746f54797065506172616d65746572732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/andrewcooke/AutoTypeParameters.jl/badge.svg" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=AutoTypeParameters&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/ce6f6ad949d0d279349a483bcd421abca0503cd1/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175746f54797065506172616d65746572735f302e332e737667" alt="AutoTypeParameters" data-canonical-src="http://pkg.julialang.org/badges/AutoTypeParameters_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=AutoTypeParameters&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/b13874e94a17b9309fc4991bda5e0fa380f48645/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175746f54797065506172616d65746572735f302e342e737667" alt="AutoTypeParameters" data-canonical-src="http://pkg.julialang.org/badges/AutoTypeParameters_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=AutoTypeParameters&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/76f0af6b873a299729551f22a5b309e8f3952f33/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175746f54797065506172616d65746572735f302e352e737667" alt="AutoTypeParameters" data-canonical-src="http://pkg.julialang.org/badges/AutoTypeParameters_0.5.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-autotypeparameters" class="anchor" aria-hidden="true" href="#autotypeparameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AutoTypeParameters</h1>
<p>A Julia library to reversibly encode "any" value so that it can be used as a
type parameter.</p>
<h2><a id="user-content-do-i-need-this" class="anchor" aria-hidden="true" href="#do-i-need-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Do I Need This?</h2>
<p>You need this if you have an error like:</p>
<pre><code>ERROR: TypeError: apply_type: in Val, expected Type{T}, got XXX
</code></pre>
<p>when you try to create a "complicated" dependent type.</p>
<p>That error is (partly) explained
<a href="https://groups.google.com/forum/#!topic/julia-users/Ihl50vgSQxw" rel="nofollow">here</a> - it
occurs because the kinds of things that can be types in Julia is limited.
Partly for sensible reasons (you don't want a mutable type), but also because
of arbitrary implementation details.</p>
<h2><a id="user-content-what-does-it-do" class="anchor" aria-hidden="true" href="#what-does-it-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What Does It Do?</h2>
<p>This package has two functions - <code>freeze()</code> and <code>thaw()</code> - that translate
arbitrary values back and forth into a form that <em>is</em> accepted by Julia.</p>
<h2><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How Does It Work?</h2>
<p>You can choose between two encondings.</p>
<h3><a id="user-content-using-showall" class="anchor" aria-hidden="true" href="#using-showall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using showall()</h3>
<p>By default, <code>freeze()</code> takes the output from <code>showall()</code> and converts it into
a Symbol, while <code>thaw()</code> uses <code>eval()</code> to convert it back into a "real" value:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoTypeParameters

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeze</span>(<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span>)
<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP <span class="pl-cce">\"</span>a string<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">thaw</span>(eval, <span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP <span class="pl-cce">\"</span>a string<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span></pre></div>
<p>The advantage of the default approach is that the type parameter is readable.
The disadvantage, of course, is that it requires <code>showall()</code> to generate
output that <code>eval()</code> can handle.</p>
<h3><a id="user-content-using-serialize" class="anchor" aria-hidden="true" href="#using-serialize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using serialize()</h3>
<p>Alternatively (eg for values which do not have a useful <code>showall()</code> function),
the base64 encoded output from <code>serialize()</code> can be used:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoTypeParameters

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeze</span>(<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span>; format<span class="pl-k">=</span><span class="pl-c1">:serialize</span>)
<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP=JhWGYSBzdHJpbmc=<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">thaw</span>(eval, <span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP=JhWGYSBzdHJpbmc=<span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-warnings" class="anchor" aria-hidden="true" href="#warnings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Warnings</h2>
<p>Because this package uses <code>eval()</code> it should not be passed arbitrary values
rom an untrusted user.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoTypeParameters

julia<span class="pl-k">&gt;</span> type MyType{N}
           x
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyType</span><span class="pl-c1">{"strings not allowed"}</span>(<span class="pl-c1">42</span>)
ERROR<span class="pl-k">:</span> TypeError<span class="pl-k">:</span> apply_type<span class="pl-k">:</span> <span class="pl-k">in</span> MyType, expected Type{T}, got ASCIIString

julia<span class="pl-k">&gt;</span> <span class="pl-en">MyType</span>(N, x) <span class="pl-k">=</span> <span class="pl-c1">MyType</span><span class="pl-c1">{freeze(N)}</span>(x)
MyType{N}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyType</span>(<span class="pl-s"><span class="pl-pds">"</span>strings not allowed<span class="pl-pds">"</span></span>, <span class="pl-c1">42</span>)
<span class="pl-c1">MyType</span><span class="pl-c1">{symbol("ATP \"strings not allowed\"")}</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-en">extract_type</span><span class="pl-c1">{N}</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType{N}</span>) <span class="pl-k">=</span> <span class="pl-c1">thaw</span>(eval, N)
extract_type (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extract_type</span>(<span class="pl-c1">MyType</span>(<span class="pl-s"><span class="pl-pds">"</span>strings not allowed<span class="pl-pds">"</span></span>, <span class="pl-c1">42</span>))
<span class="pl-s"><span class="pl-pds">"</span>strings not allowed<span class="pl-pds">"</span></span></pre></div>
</article></div>