<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/andrewcooke/AutoTypeParameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/303e4972b1d0762712cc48f6da6f30c4e84c25290a1060b8bf954dbb45602268/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f4175746f54797065506172616d65746572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/AutoTypeParameters.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/andrewcooke/AutoTypeParameters.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c8ef8b177c32420a71a57dd93431211b8421d1473111e05da7db5f5ed2600f02/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e64726577636f6f6b652f4175746f54797065506172616d65746572732e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/andrewcooke/AutoTypeParameters.jl/badge.svg" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=AutoTypeParameters&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/d445edf8ce76dddbecea6aadc92f7970ceb346a882e611b77f818e00acc5f4c6/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175746f54797065506172616d65746572735f302e332e737667" alt="AutoTypeParameters" data-canonical-src="http://pkg.julialang.org/badges/AutoTypeParameters_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=AutoTypeParameters&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/0e141985235f7420ee9d1f08f10a219b7b42f164e9ee940eb9936743618edc75/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175746f54797065506172616d65746572735f302e342e737667" alt="AutoTypeParameters" data-canonical-src="http://pkg.julialang.org/badges/AutoTypeParameters_0.4.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=AutoTypeParameters&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/003985fafaa032c308220a259f5440f05bacb7db04bd2407b3c091d4436bff24/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4175746f54797065506172616d65746572735f302e352e737667" alt="AutoTypeParameters" data-canonical-src="http://pkg.julialang.org/badges/AutoTypeParameters_0.5.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-autotypeparameters" class="anchor" aria-hidden="true" href="#autotypeparameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AutoTypeParameters</h1>
<p>A Julia library to reversibly encode "any" value so that it can be used as a
type parameter.</p>
<h2><a id="user-content-do-i-need-this" class="anchor" aria-hidden="true" href="#do-i-need-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Do I Need This?</h2>
<p>You need this if you have an error like:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="ERROR: TypeError: apply_type: in Val, expected Type{T}, got XXX
"><pre><code>ERROR: TypeError: apply_type: in Val, expected Type{T}, got XXX
</code></pre></div>
<p>when you try to create a "complicated" dependent type.</p>
<p>That error is (partly) explained
<a href="https://groups.google.com/forum/#!topic/julia-users/Ihl50vgSQxw" rel="nofollow">here</a> - it
occurs because the kinds of things that can be types in Julia is limited.
Partly for sensible reasons (you don't want a mutable type), but also because
of arbitrary implementation details.</p>
<h2><a id="user-content-what-does-it-do" class="anchor" aria-hidden="true" href="#what-does-it-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What Does It Do?</h2>
<p>This package has two functions - <code>freeze()</code> and <code>thaw()</code> - that translate
arbitrary values back and forth into a form that <em>is</em> accepted by Julia.</p>
<h2><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How Does It Work?</h2>
<p>You can choose between two encondings.</p>
<h3><a id="user-content-using-showall" class="anchor" aria-hidden="true" href="#using-showall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using showall()</h3>
<p>By default, <code>freeze()</code> takes the output from <code>showall()</code> and converts it into
a Symbol, while <code>thaw()</code> uses <code>eval()</code> to convert it back into a "real" value:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using AutoTypeParameters

julia&gt; freeze(&quot;a string&quot;)
symbol(&quot;ATP \&quot;a string\&quot;&quot;)

julia&gt; thaw(eval, symbol(&quot;ATP \&quot;a string\&quot;&quot;))
&quot;a string&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoTypeParameters

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeze</span>(<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span>)
<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP <span class="pl-cce">\"</span>a string<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">thaw</span>(eval, <span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP <span class="pl-cce">\"</span>a string<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span></pre></div>
<p>The advantage of the default approach is that the type parameter is readable.
The disadvantage, of course, is that it requires <code>showall()</code> to generate
output that <code>eval()</code> can handle.</p>
<h3><a id="user-content-using-serialize" class="anchor" aria-hidden="true" href="#using-serialize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using serialize()</h3>
<p>Alternatively (eg for values which do not have a useful <code>showall()</code> function),
the base64 encoded output from <code>serialize()</code> can be used:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using AutoTypeParameters

julia&gt; freeze(&quot;a string&quot;; format=:serialize)
symbol(&quot;ATP=JhWGYSBzdHJpbmc=&quot;)

julia&gt; thaw(eval, symbol(&quot;ATP=JhWGYSBzdHJpbmc=&quot;))
&quot;a string&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoTypeParameters

julia<span class="pl-k">&gt;</span> <span class="pl-c1">freeze</span>(<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span>; format<span class="pl-k">=</span><span class="pl-c1">:serialize</span>)
<span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP=JhWGYSBzdHJpbmc=<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">thaw</span>(eval, <span class="pl-c1">symbol</span>(<span class="pl-s"><span class="pl-pds">"</span>ATP=JhWGYSBzdHJpbmc=<span class="pl-pds">"</span></span>))
<span class="pl-s"><span class="pl-pds">"</span>a string<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-warnings" class="anchor" aria-hidden="true" href="#warnings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warnings</h2>
<p>Because this package uses <code>eval()</code> it should not be passed arbitrary values
rom an untrusted user.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using AutoTypeParameters

julia&gt; type MyType{N}
           x
       end

julia&gt; MyType{&quot;strings not allowed&quot;}(42)
ERROR: TypeError: apply_type: in MyType, expected Type{T}, got ASCIIString

julia&gt; MyType(N, x) = MyType{freeze(N)}(x)
MyType{N}

julia&gt; MyType(&quot;strings not allowed&quot;, 42)
MyType{symbol(&quot;ATP \&quot;strings not allowed\&quot;&quot;)}(42)

julia&gt; extract_type{N}(x::MyType{N}) = thaw(eval, N)
extract_type (generic function with 1 method)

julia&gt; extract_type(MyType(&quot;strings not allowed&quot;, 42))
&quot;strings not allowed&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoTypeParameters

julia<span class="pl-k">&gt;</span> type MyType{N}
           x
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyType</span><span class="pl-c1">{"strings not allowed"}</span>(<span class="pl-c1">42</span>)
ERROR<span class="pl-k">:</span> TypeError<span class="pl-k">:</span> apply_type<span class="pl-k">:</span> <span class="pl-k">in</span> MyType, expected Type{T}, got ASCIIString

julia<span class="pl-k">&gt;</span> <span class="pl-en">MyType</span>(N, x) <span class="pl-k">=</span> <span class="pl-c1">MyType</span><span class="pl-c1">{freeze(N)}</span>(x)
MyType{N}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyType</span>(<span class="pl-s"><span class="pl-pds">"</span>strings not allowed<span class="pl-pds">"</span></span>, <span class="pl-c1">42</span>)
<span class="pl-c1">MyType</span><span class="pl-c1">{symbol("ATP \"strings not allowed\"")}</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-en">extract_type</span><span class="pl-c1">{N}</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType{N}</span>) <span class="pl-k">=</span> <span class="pl-c1">thaw</span>(eval, N)
extract_type (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">extract_type</span>(<span class="pl-c1">MyType</span>(<span class="pl-s"><span class="pl-pds">"</span>strings not allowed<span class="pl-pds">"</span></span>, <span class="pl-c1">42</span>))
<span class="pl-s"><span class="pl-pds">"</span>strings not allowed<span class="pl-pds">"</span></span></pre></div>
</article></div>