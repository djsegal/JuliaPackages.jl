<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mcts" class="anchor" aria-hidden="true" href="#mcts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MCTS</h1>
<p><a href="https://juliapomdp.github.io/MCTS.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaPOMDP/MCTS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4944b548a416c9f1f254c8032eb0b1c027b502e99b0fa495f68a8294caf3a5d/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961504f4d44502f4d4354532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPOMDP/MCTS.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaPOMDP/MCTS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2c5451fce4b3a05781c040faac01333c9d395c57b966c818f3f3e466a9dd67d5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961504f4d44502f4d4354532e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaPOMDP/MCTS.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://nbviewer.jupyter.org/github/JuliaPOMDP/MCTS.jl/blob/master/notebooks/Test_Visualization.ipynb" rel="nofollow"><img src="https://github.com/JuliaPOMDP/MCTS.jl/raw/master/img/tree.png" alt="MCTS Tree for Grid World, visualized" style="max-width:100%;"></a></p>
<p>This package implements the Monte-Carlo Tree Search algorithm in Julia for solving Markov decision processes (MDPs).
The user should define the problem according to the <a href="http://juliapomdp.github.io/POMDPs.jl/latest/generative" rel="nofollow">generative interface</a> in <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a>. Examples of problem definitions can be found in <a href="https://github.com/JuliaPOMDP/POMDPModels.jl">POMDPModels.jl</a>.</p>
<p>There is also a BeliefMCTSSolver that solves a POMDP by converting it to an MDP in the belief space.</p>
<p>Special thanks to Jon Cox for writing the original version of this code.</p>
<p>For reference, see the UCT algorithm in this paper:
Kocsis, Levente, and Csaba Szepesv√°ri. "Bandit Based Monte-Carlo planning." European Conference on Machine Learning. Springer, Berlin, Heidelberg, 2006.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In Julia, type, <code>]add MCTS</code></p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Documentation can be found on the following site: <a href="http://juliapomdp.github.io/MCTS.jl/latest/" rel="nofollow">juliapomdp.github.io/MCTS.jl/latest/</a></p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>If <code>mdp</code> is an MDP defined with the <a href="https://github.com/sisl/POMDPs.jl">POMDPs.jl</a> interface, the MCTS solver can be used to find an optimized action, <code>a</code>, for the MDP in state <code>s</code> as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using POMDPs
using POMDPModels # for the SimpleGridWorld problem
using MCTS
using StaticArrays
mdp = SimpleGridWorld()
solver = MCTSSolver(n_iterations=50, depth=20, exploration_constant=5.0)
planner = solve(solver, mdp)
a = action(planner, SA[1,2])
"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> POMDPModels <span class="pl-c"><span class="pl-c">#</span> for the SimpleGridWorld problem</span>
<span class="pl-k">using</span> MCTS
<span class="pl-k">using</span> StaticArrays
mdp <span class="pl-k">=</span> <span class="pl-c1">SimpleGridWorld</span>()
solver <span class="pl-k">=</span> <span class="pl-c1">MCTSSolver</span>(n_iterations<span class="pl-k">=</span><span class="pl-c1">50</span>, depth<span class="pl-k">=</span><span class="pl-c1">20</span>, exploration_constant<span class="pl-k">=</span><span class="pl-c1">5.0</span>)
planner <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, mdp)
a <span class="pl-k">=</span> <span class="pl-c1">action</span>(planner, SA[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])</pre></div>
<p>See <a href="https://nbviewer.jupyter.org/github/JuliaPOMDP/MCTS.jl/blob/master/notebooks/Test_Visualization.ipynb" rel="nofollow">this notebook</a> for an example of how to visualize the search tree.</p>
<p>See <a href="https://github.com/JuliaPOMDP/MCTS.jl/blob/master/notebooks/Domain_Knowledge_Example.ipynb">this notebook</a> for examples of customizing solver behavior, specifically <a href="https://github.com/JuliaPOMDP/MCTS.jl/blob/master/notebooks/Domain_Knowledge_Example.ipynb#Rollouts">the Rollouts section</a> for using heuristic rollout policies.</p>
</article></div>