<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-basicpomcp" class="anchor" aria-hidden="true" href="#basicpomcp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BasicPOMCP</h1>
<p><a href="https://travis-ci.org/JuliaPOMDP/BasicPOMCP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/701e7c14d1f91c8ca1f6ffc71171184f22fe07f4/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961504f4d44502f4261736963504f4d43502e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPOMDP/BasicPOMCP.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaPOMDP/BasicPOMCP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ade199c2f6049cbfd89a7d86f5fcabd4b8d7cef7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961504f4d44502f4261736963504f4d43502e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaPOMDP/BasicPOMCP.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaPOMDP/BasicPOMCP.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2863d34edf808169913e4682fb720584cee7b96a/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961504f4d44502f4261736963504f4d43502e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaPOMDP/BasicPOMCP.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package implements the PO-UCT online tree search algorithm for <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a>. PO-UCT is the most useful component of the POMCP algorithm described in [1]. The other component of POMCP, re-use of particles in the tree for belief updates, is not implemented for reasons described in the <a href="#belief-update">Belief Update</a> section below.</p>
<blockquote>
<p>[1] Silver, D., &amp; Veness, J. (2010). Monte-Carlo Planning in Large POMDPs. In <em>Advances in neural information processing systems</em> (pp. 2164â€“2172). Retrieved from <a href="http://discovery.ucl.ac.uk/1347369/" rel="nofollow">http://discovery.ucl.ac.uk/1347369/</a></p>
</blockquote>
<p>Problems should be specified using the <a href="https://github.com/JuliaPOMDP/POMDPs.jl">POMDPs.jl</a> interface. For more information, see the <a href="http://juliapomdp.github.io/POMDPs.jl/latest/" rel="nofollow">POMDPs.jl documentation</a>.</p>
<p>This package replaces the deprecated <a href="https://github.com/JuliaPOMDP/POMCP.jl">POMCP.jl package</a>. It has fewer features, but is much simpler.</p>
<p><a target="_blank" rel="noopener noreferrer" href="img/tree.png"><img src="img/tree.png" alt="POMCP Tree" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>In Julia 1.0 and higher, BasicPOMCP is available on the JuliaPOMDP registry (and this registry is required to automatically get the MCTS dependency):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>POMDPs<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> POMDPs
POMDPs<span class="pl-k">.</span><span class="pl-c1">add_registry</span>()
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BasicPOMCP<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> POMDPs, POMDPModels, POMDPSimulators, BasicPOMCP

pomdp <span class="pl-k">=</span> <span class="pl-c1">TigerPOMDP</span>()

solver <span class="pl-k">=</span> <span class="pl-c1">POMCPSolver</span>()
planner <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp)

<span class="pl-k">for</span> (s, a, o) <span class="pl-k">in</span> <span class="pl-c1">stepthrough</span>(pomdp, planner, <span class="pl-s"><span class="pl-pds">"</span>s,a,o<span class="pl-pds">"</span></span>, max_steps<span class="pl-k">=</span><span class="pl-c1">10</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>State was <span class="pl-v">$s</span>,<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>action <span class="pl-v">$a</span> was taken,<span class="pl-pds">"</span></span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>and observation <span class="pl-v">$o</span> was received.<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>A minimal example showing how to implement a problem for the solver to use is here: <a href="https://github.com/JuliaPOMDP/BasicPOMCP.jl/blob/master/notebooks/Minimal_Example.ipynb">https://github.com/JuliaPOMDP/BasicPOMCP.jl/blob/master/notebooks/Minimal_Example.ipynb</a></p>
<h2><a id="user-content-solver-options" class="anchor" aria-hidden="true" href="#solver-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solver Options</h2>
<p>Solver options are set with keyword arguments to the <code>BasicPOMCP</code> constructor. The options are described in the docstring which can be accessed with <code>?POMCPSolver</code>.</p>
<p>The output of <code>?POMCPSolver</code> is printed below, but may not be up to date.</p>
<blockquote>
<pre><code>POMCPSolver(#=keyword arguments=#)
</code></pre>
<p>Partially Observable Monte Carlo Planning Solver.</p>
<h2><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Keyword Arguments</h2>
<ul>
<li>
<p><code>max_depth::Int</code>
Rollouts and tree expension will stop when this depth is reached.
default: <code>20</code></p>
</li>
<li>
<p><code>c::Float64</code>
UCB exploration constant - specifies how much the solver should explore.
default: <code>1.0</code></p>
</li>
<li>
<p><code>tree_queries::Int</code>
Number of iterations during each action() call.
default: <code>1000</code></p>
</li>
<li>
<p><code>estimate_value::Any</code>
Function, object, or number used to estimate the value at the leaf nodes.
default: <code>RolloutEstimator(RandomSolver(rng))</code></p>
<ul>
<li>If this is a function <code>f</code>, <code>f(pomdp, s, h::BeliefNode, steps)</code> will be called to estimate the value.</li>
<li>If this is an object <code>o</code>, <code>estimate_value(o, pomdp, s, h::BeliefNode, steps)</code> will be called.</li>
<li>If this is a number, the value will be set to that number
Note: In many cases, the simplest way to estimate the value is to do a rollout on the fully observable MDP with a policy that is a function of the state. To do this, use <code>FORollout(policy)</code>.</li>
</ul>
</li>
<li>
<p><code>default_action::Any</code>
Function, action, or Policy used to determine the action if POMCP fails with exception <code>ex</code>.
default: <code>ExceptionRethrow()</code></p>
<ul>
<li>If this is a Function <code>f</code>, <code>f(pomdp, belief, ex)</code> will be called.</li>
<li>If this is a Policy <code>p</code>, <code>action(p, belief)</code> will be called.</li>
<li>If it is an object <code>a</code>, <code>default_action(a, pomdp, belief, ex)</code> will be called, and if this method is not implemented, <code>a</code> will be returned directly.</li>
</ul>
</li>
<li>
<p><code>rng::AbstractRNG</code>
Random number generator.
default: <code>Base.GLOBAL_RNG</code></p>
</li>
</ul>
</blockquote>
<h2><a id="user-content-belief-update" class="anchor" aria-hidden="true" href="#belief-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Belief Update</h2>
<p>This solver does not reuse decision-making simulations for the belief update as in the original Silver and Veness paper. We have found that unweighted particle filtering approach to be unuseful in practice because</p>
<ol>
<li>The number of particles that comprise the next belief is small because only the particles in the branch corresponding to the actual action and observation can be used,</li>
<li>Even in the Silver and Veness paper, domain-specific particle reinvigoration must be used, and</li>
<li>The computation time required to run a standard weighted particle filter is small compared to the amount of time needed to plan with POMCP, so reusing the simulations gives minimal benefit.</li>
</ol>
<p>Instead, a custom belief updater, or an updater from <a href="https://github.com/JuliaPOMDP/ParticleFilters.jl">ParticleFilters.jl</a> should be used.</p>
<h2><a id="user-content-tree-visualization" class="anchor" aria-hidden="true" href="#tree-visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tree Visualization</h2>
<p>The search tree can be visualized with <a href="https://github.com/sisl/D3Trees.jl">D3Trees.jl</a> after running the <code>action_info()</code> as in the example below. <strong>Note: tree_in_info must be set to true either as a solver option or as a keyword argument to action_info() for this to work</strong> (it is disabled by default because it can use a lot of memory).</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> POMDPs
<span class="pl-k">using</span> BasicPOMCP
<span class="pl-k">using</span> POMDPModels
<span class="pl-k">using</span> POMDPModelTools
<span class="pl-k">using</span> D3Trees
<span class="pl-k">using</span> Random

pomdp <span class="pl-k">=</span> <span class="pl-c1">BabyPOMDP</span>()
solver <span class="pl-k">=</span> <span class="pl-c1">POMCPSolver</span>(tree_queries<span class="pl-k">=</span><span class="pl-c1">1000</span>, c<span class="pl-k">=</span><span class="pl-c1">10.0</span>, rng<span class="pl-k">=</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">1</span>))
planner <span class="pl-k">=</span> <span class="pl-c1">solve</span>(solver, pomdp)
a, info <span class="pl-k">=</span> <span class="pl-c1">action_info</span>(planner, <span class="pl-c1">initialstate_distribution</span>(pomdp), tree_in_info<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c1">inchrome</span>(<span class="pl-c1">D3Tree</span>(info[<span class="pl-c1">:tree</span>], init_expand<span class="pl-k">=</span><span class="pl-c1">3</span>))</pre></div>
<p>This should produce the image at the top of the README.</p>
</article></div>