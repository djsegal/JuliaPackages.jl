<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-basicmd" class="anchor" aria-hidden="true" href="#basicmd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BasicMD</h1>
<p>A collection of basic routines for Molecular Dynamics simulations written in Julia.  These include</p>
<ul>
<li>Euler–Maruyama (EM)</li>
<li>Random Walk Metropolis (RWM)</li>
<li>Metropolis Adjusted Langevin (MALA)</li>
<li>Brünger, Brooks and Karplus (BBK)</li>
<li>Grønbech-Jensen and Farago (GJF)</li>
<li>ABOBA, BAOAB</li>
<li>Hamiltonian/Hybrid Monte Carlo (HMC)</li>
</ul>
<p>This is intended to be a collection for small scale problems and code
development.  Larger problems will best be handled with
<a href="https://lammps.sandia.gov/" rel="nofollow">LAMMPS</a> or <a href="http://openmm.org/" rel="nofollow">OpenMM</a></p>
<h1><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h1>
<p>This module has been significantly reorganized to better take advantage of
multiple dispatch.  The older versions are still available in <code>deprecated.jl</code> as a part of the module <code>OldBasicMD</code>, if needed.</p>
<p>This module can be added with the command:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="(@v1.XYZ) pkg&gt; add BasicMD
"><pre><code>(@v1.XYZ) pkg&gt; add BasicMD
</code></pre></div>
<p>This package was previously named <code>JuBasicMD</code>, but has since been renamed to
conform with Julia package naming recommendations.</p>
<h2><a id="user-content-sampling" class="anchor" aria-hidden="true" href="#sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sampling</h2>
<p>Each sampler is first initialized as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&gt; sampler = RWM(V, β, Δt);
"><pre><code>&gt; sampler = RWM(V, β, Δt);
</code></pre></div>
<p>or</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&gt; sampler = HMC(V, gradV!, β, M, Δt, nΔt);
"><pre><code>&gt; sampler = HMC(V, gradV!, β, M, Δt, nΔt);
</code></pre></div>
<p>depending on the type of sampler that is chosen.  Information about what is needed to define each sampler can be obtained in the REPL by calling <code>?</code> with the sampler name (<em>i.e.</em>, <code>?HMC</code>).</p>
<p>Once a sampler is constructed, sampling is then performed with either <code>sample_trajectory!</code> or <code>sample_trajectory</code>.  The former performs an in place transformation on the input state, while the latter records values along the trajectory:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="sample_trajectory!(X, sampler, options=opts);
"><pre><code>sample_trajectory!(X, sampler, options=opts);
</code></pre></div>
<p>and</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Xvals = sample_trajectory(X₀, sampler);
"><pre><code>Xvals = sample_trajectory(X₀, sampler);
</code></pre></div>
<p>For Metropolis methods, the latter form also returns the running acceptance rate,</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Xvals, avals = sample_trajectory(X₀, sampler);
"><pre><code>Xvals, avals = sample_trajectory(X₀, sampler);
</code></pre></div>
<p>The <code>sample_observables</code> routine is also included to allow for the computation of the observables directly.  This avoids storing an entire trajectory, which may be computationally expensive.  Given some set of observables, <code>f₁</code>, <code>f₂</code>, etc., storing these as a tuple, <code>obs=(f₁,f₂)</code>, they are computed directly with the command X</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="obs_vals =  sample_observables(X₀ , sampler, obs)
"><pre><code>obs_vals =  sample_observables(X₀ , sampler, obs)
</code></pre></div>
<p>This can otpionaly take the <code>MDOptions</code> in as an argument.</p>
<h2><a id="user-content-mdoptions" class="anchor" aria-hidden="true" href="#mdoptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MDOptions</h2>
<p>The number of iterations performed is determined by the optional <code>options</code>
argument.  This takes as its argument a data structure which is formatted using
the <code>MDOptions</code> function:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="opts = MDOptions(n_iters=n_iters,n_save_iters=n_save_iters)
"><pre><code>opts = MDOptions(n_iters=n_iters,n_save_iters=n_save_iters)
</code></pre></div>
<p><code>n_iters</code> is the number of iterations performed by the sampler.  <code>n_save_iters</code>
is the frequency with which samples are saved.    If n_save_iters=1, every
iteration is saved.  If n_save_iters=n_iters, only the final iteration is saved.</p>
<p>All of these methods have two versions, <code>Integrator</code> and <code>Integrator!</code>.  The <code>Integrator!</code> routine performs an in place transformation on the starting position (and momentum, where appropriate), while <code>Integrator</code> copies over the initial condition.  <code>Integrator</code> also accepts the optional argument <code>return_trajectory=true/false</code>, which will return the entire time series data.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<p>Example codes include:</p>
<ul>
<li>1D Harmonic potential</li>
<li>1D Double Well Potential</li>
<li>2D Muller Potential</li>
</ul>
<p>These examples assume that the active environment includes the <code>BasicMD</code> package.</p>
<h1><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h1>
<ul>
<li>The code assumes that the state space is vector valued.  Thus, even if the problem is one dimensional, you should have initial points and functions formatted appropriately, i.e.</li>
</ul>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&gt; x0 = [1.0]
"><pre><code>&gt; x0 = [1.0]
</code></pre></div>
<ul>
<li>
<p>The mass matrix, <code>M</code>, used in the inertial Langevin integrators and Hamiltonian methods must be diagonal and provided either as a scalar (in the isotropic case) or a vector (in the anisotropic case).  This restriction is in place for performance purposes.</p>
</li>
<li>
<p>BBK is currently implemented for a slightly different version of the Langevin SDE than ABOBA/BAOAB.  BBK requires inverting the mass matrix while ABOBA/BAOAB require its square root.</p>
</li>
<li>
<p>GJF is implemented in (q,p) coordinates as opposed to (x,v) coordinates.  Consequently, the mass term appears slightly differently than in the literature.</p>
</li>
</ul>
<p>Both will sample the associated Boltzmann distribution, but the SDE trajectories will differ when <code>M≂̸I</code>.</p>
<h1><a id="user-content-to-do" class="anchor" aria-hidden="true" href="#to-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TO DO</h1>
<p>Before reaching a 1.0, the goals are:</p>
<ul>
<li>Include GHMC samplers.</li>
<li>Add to the package registry</li>
</ul>
<h1><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgements</h1>
<p>This work was supported in part by the US National Science Foundation Grant DMS-1818716.</p>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h1>
<ol>
<li><a href="https://www.worldscientific.com/worldscibooks/10.1142/P579" rel="nofollow">Free Energy Computations: A Mathematical Perspective by Lelièvre, Rousset, and Stoltz</a></li>
<li><a href="https://www.springer.com/gp/book/9783319163741" rel="nofollow">Molecular Dynamics by Leimkuhler and Matthews</a></li>
<li><a href="https://doi.org/10.1080/00268976.2012.760055" rel="nofollow">A simple and effective Verlet-type algorithm for simulating Langevin dynamics by Grønbech-Jesnen and Farago</a></li>
</ol>
</article></div>