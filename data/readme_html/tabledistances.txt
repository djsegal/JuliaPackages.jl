<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-tabledistancesjl" class="anchor" aria-hidden="true" href="#tabledistancesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TableDistances.jl</h1>
<p dir="auto"><a href="https://github.com/juliohm/TableDistances.jl/actions"><img src="https://github.com/juliohm/TableDistances.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/juliohm/TableDistances.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8695d536cde7564b00ea3c5384e90e3079a5fa653f3a975282b0a0eb4a0130d5/68747470733a2f2f636f6465636f762e696f2f67682f6a756c696f686d2f5461626c6544697374616e6365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliohm/TableDistances.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides methods for computing distances between rows of general
<a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> tables using the ecosystem
of scientific types available in <a href="https://github.com/JuliaAI/ScientificTypes.jl">ScientificTypes.jl</a>.
It follows the <a href="https://github.com/JuliaStats/Distances.jl">Distances.jl</a> interface
as much as possible.</p>
<h2 dir="auto"><a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rationale</h2>
<p dir="auto">A common task in statistics and machine learning consists of computing distances between observations
for different purposes (e.g. clustering, kernel methods). When the data is homogeneous, i.e. all the
attributes have the same scientific type, one can use packages such as <a href="https://github.com/JuliaStats/Distances.jl">Distances.jl</a>
directly on the result of <code>Tables.matrix(table)</code>. On the other hand, when the table is heterogeneous,
one must combine different distances for the various attributes using some weighting scheme.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Get the latest stable release with Julia's package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add TableDistances"><pre>] add TableDistances</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">We follow the <a href="https://github.com/JuliaStats/Distances.jl">Distances.jl</a> interface as much as possible:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TableDistances
using ScientificTypes

# create an heterogeneous table
table = (a=1:3, b=rand(3), c=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], d=[1, 2, 4])
(a = 1:3, b = [0.7596581938450753, 0.6952806574889876, 0.6669145844749085], c = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], d = [1, 2, 4])

# adjust the scientific types
t = coerce(table, :a =&gt; Count, :b =&gt; Continuous, :c =&gt; Multiclass, :d =&gt; OrderedFactor)
(a = 1:3, b = [0.7596581938450753, 0.6952806574889876, 0.6669145844749085], c = CategoricalArrays.CategoricalValue{String, UInt32}[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], d = CategoricalArrays.CategoricalValue{Int64, UInt32}[1, 2, 4])

# compute the pairwise distance between rows
D = pairwise(TableDistance(), t)
3×3 Matrix{Float64}:
 0.0      1.09707   1.75
 1.09707  0.0       0.902927
 1.75     0.902927  0.0"><pre><span class="pl-k">using</span> TableDistances
<span class="pl-k">using</span> ScientificTypes

<span class="pl-c"><span class="pl-c">#</span> create an heterogeneous table</span>
table <span class="pl-k">=</span> (a<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, b<span class="pl-k">=</span><span class="pl-c1">rand</span>(<span class="pl-c1">3</span>), c<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>], d<span class="pl-k">=</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>])
(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, b <span class="pl-k">=</span> [<span class="pl-c1">0.7596581938450753</span>, <span class="pl-c1">0.6952806574889876</span>, <span class="pl-c1">0.6669145844749085</span>], c <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>], d <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>])

<span class="pl-c"><span class="pl-c">#</span> adjust the scientific types</span>
t <span class="pl-k">=</span> <span class="pl-c1">coerce</span>(table, <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> Count, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> Continuous, <span class="pl-c1">:c</span> <span class="pl-k">=&gt;</span> Multiclass, <span class="pl-c1">:d</span> <span class="pl-k">=&gt;</span> OrderedFactor)
(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, b <span class="pl-k">=</span> [<span class="pl-c1">0.7596581938450753</span>, <span class="pl-c1">0.6952806574889876</span>, <span class="pl-c1">0.6669145844749085</span>], c <span class="pl-k">=</span> CategoricalArrays<span class="pl-k">.</span>CategoricalValue{String, UInt32}[<span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>B<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>C<span class="pl-pds">"</span></span>], d <span class="pl-k">=</span> CategoricalArrays<span class="pl-k">.</span>CategoricalValue{Int64, UInt32}[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>])

<span class="pl-c"><span class="pl-c">#</span> compute the pairwise distance between rows</span>
D <span class="pl-k">=</span> <span class="pl-c1">pairwise</span>(<span class="pl-c1">TableDistance</span>(), t)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">3</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>      <span class="pl-c1">1.09707</span>   <span class="pl-c1">1.75</span>
 <span class="pl-c1">1.09707</span>  <span class="pl-c1">0.0</span>       <span class="pl-c1">0.902927</span>
 <span class="pl-c1">1.75</span>     <span class="pl-c1">0.902927</span>  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">Default distances from various packages such as
<a href="https://github.com/matthieugomez/StringDistances.jl">StringDistances.jl</a>
are automatically chosen depending on the table schema, and weights can
be specified for each attribute.</p>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Contributions are very welcome. Please <a href="https://github.com/JuliaML/TableDistances.jl/issues">open an issue</a> if you have questions.</p>
<h3 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h3>
<ul dir="auto">
<li><a href="https://github.com/juliohm">Júlio Hoffimann</a></li>
<li><a href="https://github.com/mrr00b00t">José Augusto</a></li>
</ul>
</article></div>