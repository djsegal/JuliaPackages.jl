<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-macho" class="anchor" aria-hidden="true" href="#macho"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MachO</h1>
<p><a href="https://travis-ci.org/Keno/MachO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e42083fb0f4a3bcb94978cad44d658d0aaa751c/68747470733a2f2f7472617669732d63692e6f72672f4b656e6f2f4d6163684f2e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/Keno/MachO.jl.png" style="max-width:100%;"></a></p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>MachO.jl implements the ObjFileBase interface.</p>
<p>To open a MachO file simply:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MachO
julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> NOTE: ObjFileBase.readmeta is reexported by MachO</span>
julia<span class="pl-k">&gt;</span> h <span class="pl-k">=</span> <span class="pl-c1">readmeta</span>(<span class="pl-s"><span class="pl-pds">"</span>/usr/lib/libz.a<span class="pl-pds">"</span></span>)
Fat Mach Handle (<span class="pl-c1">2</span> architectures)
architecture <span class="pl-c1">1</span>
        cputype X86_64
         offset <span class="pl-c1">0x00001000</span>
           size <span class="pl-c1">0x00015710</span>
          align <span class="pl-c1">12</span>

architecture <span class="pl-c1">2</span>
        cputype X86
         offset <span class="pl-c1">0x00017000</span>
           size <span class="pl-c1">0x000125b0</span>
          align <span class="pl-c1">12</span></pre></div>
<p>This will return a handle to the MachO object file. If your object file contains MachO headers for multiple
architectures (like in the example above). Simply index into the handle
to obtain a handle for the MachO object:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> mh <span class="pl-k">=</span> h[<span class="pl-c1">1</span>]
MachO handle (<span class="pl-c1">64</span><span class="pl-k">-</span>bit)</pre></div>
<h1><a id="user-content-accessing-load-commands" class="anchor" aria-hidden="true" href="#accessing-load-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing Load Commands</h1>
<p>Load commands are accessed via the iteration protocol using the iterator
<code>LoadCmds</code>. The easiest way to see all the load sections in a file is to use
<code>collect</code>:</p>
<pre><code>julia&gt; collect(LoadCmds(h[1]))
16-element Array{Any,1}:
 0x00000020:
 Load Command (SEGMENT_64):
           name __TEXT
           addr 0
           size 73728
        fileoff 0
       filesize 73728
        maxprot rwx
       initprot rx
         nsects 6
          flags (none)
[snip]
</code></pre>
<h1><a id="user-content-working-with-load-commands" class="anchor" aria-hidden="true" href="#working-with-load-commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Working with load commands</h1>
<p>Note that the object returned by the iterator is not the load command itself, but an object also containing a reference to the object file.
This is done for convenice as it prevents the need to pass the object file around at the command line.</p>
<h1><a id="user-content-accessing-the-symbols-in-a-segment" class="anchor" aria-hidden="true" href="#accessing-the-symbols-in-a-segment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Accessing the symbols in a segment</h1>
<p>As with load commands, symbols are accessed via an iterator interface,
however instead of passing the object handle into the iterator, it expects
a load section denoting a symbol table:</p>
<pre><code>julia&gt; l = filter(x-&gt;eltype(x)==MachO.symtab_command,LoadCmds(mh)) |&gt; first
0x000004c8:
 Load Command (SYMTAB):
         symoff 79552
          nsyms 87
         stroff 81104
        strsize 1056

julia&gt; Symbols(l) |&gt; collect
87-element Array{Any,1}:
 nlist_64(0x00000407,0x3c,0x00,0x0000,0x0000000005614542)
 nlist_64(0x00000004,0x0f,0x01,0x0000,0x00000000000010f0)
 nlist_64(0x0000000d,0x0f,0x01,0x0000,0x0000000000001218)
[snip]
</code></pre>
<h1><a id="user-content-finding-symbols-by-name" class="anchor" aria-hidden="true" href="#finding-symbols-by-name"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Finding symbols by name</h1>
<p>The <code>symname</code> functions can be used to get the name of a symbol:</p>
<pre><code>julia&gt; map(x-&gt;symname(l,x),Symbols(l))
87-element Array{Any,1}:
 "radr://5614542"
 "_adler32"
 "_adler32_combine"
 "_compress"

julia&gt; filter(x-&gt;symname(l,x)=="_compress",Symbols(l)) |&gt; first
nlist_64(0x0000001e,0x0f,0x01,0x0000,0x00000000000013a3)
</code></pre>
</article></div>