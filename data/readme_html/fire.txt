<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-firejl" class="anchor" aria-hidden="true" href="#firejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fire.jl</h1>
<p dir="auto"><a href="https://github.com/ylxdzsw/Fire.jl/actions"><img src="https://github.com/ylxdzsw/Fire.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Fire.jl is a library for creating simple CLI from julia function definitions.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Fire&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Fire<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h3>
<ol dir="auto">
<li>put <code>using Fire</code> into your file</li>
<li>put <code>@main</code> in front of your entry functions</li>
<li>(optional) add shebang and chmod to save a word in commandline</li>
<li>enjoy</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Fire

&quot;Your Doc String&quot;
@main function repeat_string(message::AbstractString, times::Integer=3; color::Symbol=:normal)
    times &lt; 0 &amp;&amp; throw(ArgumentError(&quot;cannot repeat negative times&quot;))
    for i in 1:times
        print_with_color(color, message)
    end
end"><pre><span class="pl-k">using</span> Fire

<span class="pl-s"><span class="pl-pds">"</span>Your Doc String<span class="pl-pds">"</span></span>
<span class="pl-c1">@main</span> <span class="pl-k">function</span> <span class="pl-en">repeat_string</span>(message<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, times<span class="pl-k">::</span><span class="pl-c1">Integer</span><span class="pl-k">=</span><span class="pl-c1">3</span>; color<span class="pl-k">::</span><span class="pl-c1">Symbol</span><span class="pl-k">=</span><span class="pl-c1">:normal</span>)
    times <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">throw</span>(<span class="pl-c1">ArgumentError</span>(<span class="pl-s"><span class="pl-pds">"</span>cannot repeat negative times<span class="pl-pds">"</span></span>))
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>times
        <span class="pl-c1">print_with_color</span>(color, message)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">Then you can call <code>repeat_string</code> at commandline (assume the file is called "example.jl")</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ julia example.jl hello
hello
hello
hello

$ julia example.jl &quot;hello world!&quot; 1
hello world!

$ julia example.jl &quot;hello world!&quot; 1 --color red
hello world!

$ julia example.jl &quot;hello world!&quot; badguy
Error parsing positional argument `times`: require `Integer`, but got &quot;badguy&quot;
`--help` for usages

$ julia example.jl --help
Your Doc String

Positional Arguments:
    str: AbstractString
    times: Integer (default: 3)

Optional Arguments:
    color: Symbol (default: normal)"><pre class="notranslate"><code>$ julia example.jl hello
hello
hello
hello

$ julia example.jl "hello world!" 1
hello world!

$ julia example.jl "hello world!" 1 --color red
hello world!

$ julia example.jl "hello world!" badguy
Error parsing positional argument `times`: require `Integer`, but got "badguy"
`--help` for usages

$ julia example.jl --help
Your Doc String

Positional Arguments:
    str: AbstractString
    times: Integer (default: 3)

Optional Arguments:
    color: Symbol (default: normal)
</code></pre></div>
<p dir="auto">Multiple entries are supported. You can call each function by name.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Fire

@main function is_odd(x::Integer)
    x == 0 ? println(&quot;false&quot;) : is_even(x-sign(x))
end

@main function is_even(x::Integer)
    x == 0 ? println(&quot;true&quot;) : is_odd(x-sign(x))
end"><pre><span class="pl-k">using</span> Fire

<span class="pl-c1">@main</span> <span class="pl-k">function</span> <span class="pl-en">is_odd</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    x <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>) <span class="pl-k">:</span> <span class="pl-c1">is_even</span>(x<span class="pl-k">-</span><span class="pl-c1">sign</span>(x))
<span class="pl-k">end</span>

<span class="pl-c1">@main</span> <span class="pl-k">function</span> <span class="pl-en">is_even</span>(x<span class="pl-k">::</span><span class="pl-c1">Integer</span>)
    x <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>) <span class="pl-k">:</span> <span class="pl-c1">is_odd</span>(x<span class="pl-k">-</span><span class="pl-c1">sign</span>(x))
<span class="pl-k">end</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ julia example.jl is_odd 3
true

$ julia example.jl is_even 3
false"><pre class="notranslate"><code>$ julia example.jl is_odd 3
true

$ julia example.jl is_even 3
false
</code></pre></div>
<h3 dir="auto"><a id="user-content-why-is-it-called-fire" class="anchor" aria-hidden="true" href="#why-is-it-called-fire"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why is it called Fire?</h3>
<p dir="auto">This package is highly inspired by <a href="https://github.com/google/python-fire">python-fire</a></p>
<h3 dir="auto"><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details</h3>
<h4 dir="auto"><a id="user-content-supported-types" class="anchor" aria-hidden="true" href="#supported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported Types</h4>
<ul dir="auto">
<li>String / AbstractString / Symbol</li>
<li>"basic" number types like <code>Int32</code>, <code>AbstractFloat</code>, etc.</li>
<li>VarArgs of above types</li>
<li>Vector of above types is allowed in optional arguments</li>
<li>Bool is allowed in optional arguments, and will be parsed as flag</li>
</ul>
</article></div>