<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lajuliautils" class="anchor" aria-hidden="true" href="#lajuliautils"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LAJuliaUtils</h1>
<p>Various utility functions for Julia.</p>
<p>Read more about them using the <code>?function</code> syntax (after the package has been installed and imported).</p>
<p>This is NOT a Julia registered package:</p>
<ul>
<li>install it with <code>] add https://github.com/sylvaticus/LAJuliaUtils.jl.git</code></li>
<li>import it with <code>using LAJuliaUtils</code></li>
</ul>
<p>Provided functions:</p>
<ul>
<li><code>addCols!(df, colsName, colsType)</code> - Adds to the DataFrame empty column(s) colsName of type(s) colsType</li>
<li><code>customSort!(df, sortops)</code>         - Sort a DataFrame by multiple cols, each specifying sort direction and custom sort order</li>
<li><code>findall(pattern,string,caseSensitive=true)</code>          - Find all the occurrences of <code>pattern</code> in <code>string</code></li>
<li><code>pivot(df::AbstractDataFrame, rowFields, colField, valuesField; &lt;kwd args&gt;)</code> - Pivot and optionally filter and sort in a single function</li>
<li><code>toDict(df, dimCols, valueCol)</code>    - Convert a DataFrame in a dictionary, specifying the dimensions to be used as key and the one to be used as value.</li>
<li><code>unzip(unzip(file,exdir="")</code>       - Unzip a zipped archive using ZipFile</li>
</ul>
<p>Julia 0.6 only:</p>
<ul>
<li><code>toDataFrame(t)</code>                   - <strong>(Julia 0.6 only)</strong> Convert an IndexedTable NDSparse table to a DataFrame, maintaining column types and (eventual) column names.</li>
<li><code>defEmptyIT(dimNames, dimTypes; &lt;kwd args&gt;)</code> - <strong>(Julia 0.6 only)</strong> Define empty IndexedTable(s) with the specific dimension(s) and type(s).</li>
<li><code>defVars(vars, df, dimensions;&lt;kwd args&gt;)</code>   - <strong>(Julia 0.6 only)</strong> Create the required IndexedTables from a common DataFrame while specifing the dimensional columns.</li>
<li><code>fillMissings!(vars, value, dimensions)</code> - <strong>(Julia 0.6 only)</strong> For each values in the specified dimensions, fill the values of IndexedTable(s) without a corresponding key.</li>
</ul>
</article></div>