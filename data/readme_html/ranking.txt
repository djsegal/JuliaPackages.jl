<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rankingjl" class="anchor" aria-hidden="true" href="#rankingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ranking.jl</h1>
<p>Julia tools for ranking entities based on records of binary comparisons.
Currently, we've implemented drafts of Elo, Bradley-Terry and TrueSkill.</p>
<h1><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage Example</h1>
<p>All of the models we use expect a data matrix, <code>D</code>, in which each row
represents a triple: ID of entity 1, ID of entity 2 and the outcome, which
is <code>1.0</code> if 1 beat 2, <code>0.0</code> if 2 beat 1 and <code>0.5</code> if there was a tie. Let's
create data now in which Player 1 beat Player 2 and also beat Player 3, then Player 2 and Player 3 played a match in which they came to a draw:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="	n_players = 3

	D = [1 2 1.0;
	     1 3 1.0;
	     2 3 0.5;]
"><pre>	n_players <span class="pl-k">=</span> <span class="pl-c1">3</span>

	D <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">0.5</span>;]</pre></div>
<p>We can then fit Elo:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="	using Ranking

	m1 = fit(Elo, D, n_players)
"><pre>	<span class="pl-k">using</span> Ranking

	m1 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Elo, D, n_players)</pre></div>
<p>And then try Bradley-Terry(-Luce):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="	m2 = fit(BradleyTerry, D, n_players)
"><pre>	m2 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(BradleyTerry, D, n_players)</pre></div>
<p>Finally, let's try TrueSkill:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    m3 = fit(TrueSkill, D, n_players)
"><pre>    m3 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(TrueSkill, D, n_players)</pre></div>
<p>As you can see, Player 1 gets the highest score, whereas Players 2 and 3 get lower (and nearly equal) scores. Let's see what happens if we switch the data so that Player 2 definitively loses to Player 3:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="	n_players = 3

	D = [1 2 1.0;
	     1 3 1.0;
	     2 3 0.0;]

	using Ranking

	m1 = fit(Elo, D, n_players)

	m2 = fit(BradleyTerry, D, n_players)

    m3 = fit(TrueSkill, D, n_players)
"><pre>	n_players <span class="pl-k">=</span> <span class="pl-c1">3</span>

	D <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">0.0</span>;]

	<span class="pl-k">using</span> Ranking

	m1 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Elo, D, n_players)

	m2 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(BradleyTerry, D, n_players)

    m3 <span class="pl-k">=</span> <span class="pl-c1">fit</span>(TrueSkill, D, n_players)</pre></div>
<p>Here you can see that the order of scores now becomes Player 1, Player 3 and Player 2, which is just what we would expect.</p>
<p>All of these examples assume that you a single group of players that compete against one another. This can be viewed as a unipartite graph.</p>
<p>Another common task in ranking comes from educational testing, where you have students completing questions that they either answer correctly (1) or incorrectly. In this case, we work with a bipartite graph. From the data perspective, what matters is that the first and second columns of our data matrix maintain completely separate indices:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="	n_students = 2
	n_questions = 5

	D = [1 1 1.0;
	     1 2 1.0;
	     1 3 1.0;
	     1 4 1.0;
	     1 5 0.0;
		 2 1 1.0;
	     2 2 1.0;
	     2 3 1.0;
	     2 4 0.0;
	     2 5 0.0;]
"><pre>	n_students <span class="pl-k">=</span> <span class="pl-c1">2</span>
	n_questions <span class="pl-k">=</span> <span class="pl-c1">5</span>

	D <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">1</span> <span class="pl-c1">5</span> <span class="pl-c1">0.0</span>;
		 <span class="pl-c1">2</span> <span class="pl-c1">1</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">1.0</span>;
	     <span class="pl-c1">2</span> <span class="pl-c1">4</span> <span class="pl-c1">0.0</span>;
	     <span class="pl-c1">2</span> <span class="pl-c1">5</span> <span class="pl-c1">0.0</span>;]</pre></div>
<p>Given this data, we can fit the Rasch model, which is like Bradley-Terry, but for bipartite data:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="	m = fit(Rasch, D, n_students, n_questions)
"><pre>	m <span class="pl-k">=</span> <span class="pl-c1">fit</span>(Rasch, D, n_students, n_questions)</pre></div>
<p>This produces separate estimates for all students and all questions, but puts them on a common scale. In reality, we could do the same thing with the Bradley-Terry model if we extended the indices to grow from <code>1</code> to <code>n_students + n_questions</code>. The Rasch model is simply more convenient when we would like to employ the "natural" ID assignment in which students and questions have independent ID counters.</p>
</article></div>