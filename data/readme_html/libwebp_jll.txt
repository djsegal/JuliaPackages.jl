<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-libwebp_jlljl" class="anchor" aria-hidden="true" href="#libwebp_jlljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>libwebp_jll.jl</h1>
<p>This is an autogenerated package constructed using <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl"><code>BinaryBuilder.jl</code></a>.</p>
<h2><a id="user-content-products" class="anchor" aria-hidden="true" href="#products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Products</h2>
<p>The code bindings within this package are autogenerated from the following <code>Products</code> defined within the <code>build_tarballs.jl</code> file that generated this package:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="products = [
    ExecutableProduct([&quot;gif2webp&quot;], :gif2webp),
    LibraryProduct([&quot;libwebpdecoder&quot;], :libwebpdecoder),
    LibraryProduct([&quot;libwebpdemux&quot;], :libwebpdemux),
    ExecutableProduct([&quot;dwebp&quot;], :dwebp),
    LibraryProduct([&quot;libwebp&quot;], :libwebp),
    ExecutableProduct([&quot;img2webp&quot;], :img2webp),
    ExecutableProduct([&quot;webpinfo&quot;], :webpinfo),
    ExecutableProduct([&quot;cwebp&quot;], :cwebp),
    ExecutableProduct([&quot;webpmux&quot;], :webpmux),
    LibraryProduct([&quot;libwebpmux&quot;], :libwebpmux)
]
"><pre>products <span class="pl-k">=</span> [
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>gif2webp<span class="pl-pds">"</span></span>], <span class="pl-c1">:gif2webp</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libwebpdecoder<span class="pl-pds">"</span></span>], <span class="pl-c1">:libwebpdecoder</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libwebpdemux<span class="pl-pds">"</span></span>], <span class="pl-c1">:libwebpdemux</span>),
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>dwebp<span class="pl-pds">"</span></span>], <span class="pl-c1">:dwebp</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libwebp<span class="pl-pds">"</span></span>], <span class="pl-c1">:libwebp</span>),
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>img2webp<span class="pl-pds">"</span></span>], <span class="pl-c1">:img2webp</span>),
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>webpinfo<span class="pl-pds">"</span></span>], <span class="pl-c1">:webpinfo</span>),
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>cwebp<span class="pl-pds">"</span></span>], <span class="pl-c1">:cwebp</span>),
    <span class="pl-c1">ExecutableProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>webpmux<span class="pl-pds">"</span></span>], <span class="pl-c1">:webpmux</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libwebpmux<span class="pl-pds">"</span></span>], <span class="pl-c1">:libwebpmux</span>)
]</pre></div>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example</h2>
<p>For example purposes, we will assume that the following products were defined in the imaginary package <code>Example_jll</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="products = [
    FileProduct(&quot;src/data.txt&quot;, :data_txt),
    LibraryProduct(&quot;libdataproc&quot;, :libdataproc),
    ExecutableProduct(&quot;mungify&quot;, :mungify_exe)
]
"><pre>products <span class="pl-k">=</span> [
    <span class="pl-c1">FileProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>src/data.txt<span class="pl-pds">"</span></span>, <span class="pl-c1">:data_txt</span>),
    <span class="pl-c1">LibraryProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>libdataproc<span class="pl-pds">"</span></span>, <span class="pl-c1">:libdataproc</span>),
    <span class="pl-c1">ExecutableProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>mungify<span class="pl-pds">"</span></span>, <span class="pl-c1">:mungify_exe</span>)
]</pre></div>
<p>With such products defined, <code>Example_jll</code> would contain <code>data_txt</code>, <code>libdataproc</code> and <code>mungify_exe</code> symbols exported. For <code>FileProduct</code> variables, the exported value is a string pointing to the location of the file on-disk.  For <code>LibraryProduct</code> variables, it is a string corresponding to the <code>SONAME</code> of the desired library (it will have already been <code>dlopen()</code>'ed, so typical <code>ccall()</code> usage applies), and for <code>ExecutableProduct</code> variables, the exported value is a function that can be called to set appropriate environment variables.  Example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Example_jll

# For file products, you can access its file location directly:
data_lines = open(data_txt, &quot;r&quot;) do io
    readlines(io)
end

# For library products, you can use the exported variable name in `ccall()` invocations directly
num_chars = ccall((:count_characters, libdataproc), Cint, (Cstring, Cint), data_lines[1], length(data_lines[1]))

# For executable products, you can use the exported variable name as a function that you can call
mungify_exe() do mungify_exe_path
    run(`$mungify_exe_path $num_chars`)
end
"><pre><span class="pl-k">using</span> Example_jll

<span class="pl-c"><span class="pl-c">#</span> For file products, you can access its file location directly:</span>
data_lines <span class="pl-k">=</span> <span class="pl-c1">open</span>(data_txt, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">readlines</span>(io)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> For library products, you can use the exported variable name in `ccall()` invocations directly</span>
num_chars <span class="pl-k">=</span> <span class="pl-c1">ccall</span>((<span class="pl-c1">:count_characters</span>, libdataproc), Cint, (Cstring, Cint), data_lines[<span class="pl-c1">1</span>], <span class="pl-c1">length</span>(data_lines[<span class="pl-c1">1</span>]))

<span class="pl-c"><span class="pl-c">#</span> For executable products, you can use the exported variable name as a function that you can call</span>
<span class="pl-c1">mungify_exe</span>() <span class="pl-k">do</span> mungify_exe_path
    <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>$mungify_exe_path $num_chars<span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
</article></div>