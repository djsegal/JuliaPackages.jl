<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-algebrapdf" class="anchor" aria-hidden="true" href="#algebrapdf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AlgebraPDF</h1>
<p><a href="https://github.com/mmikhasenko/AlgebraPDF.jl/actions"><img src="https://github.com/mmikhasenko/AlgebraPDF.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mmikhasenko/AlgebraPDF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/62b73f6b99fd2ba122e2343c2d450d2ce5f1c7f164959f49d2c0b85d3845a694/68747470733a2f2f636f6465636f762e696f2f67682f6d6d696b686173656e6b6f2f416c67656272615044462e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/mmikhasenko/AlgebraPDF.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Basic functionality:</p>
<ul>
<li>constructing a pdf object from arbitraty function:
<ul>
<li>required function format <code>myfunc(x;p)</code> where <code>p</code> is a NamedTuple of parameters</li>
<li>the normalization is computed automatically using <code>QuadGK.jl</code> in the giben <code>lims</code></li>
<li>algebra of functions with parameters: <code>*</code>, <code>+</code>, <code>-</code>, <code>/</code></li>
</ul>
</li>
<li>construction of mixed models in the form <code>f₁ PDF₁ + f₂ PDF₂ + (1-f₁-f₂) PDF₃</code>.</li>
<li>fitting data distribution using the maximum likelihood (<code>Optim.jl</code>)</li>
<li>plotting recipies</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AlgebraPDF
using Plots
theme(:wong)

# create a model
snl = aGauss((μ=1.4, σ=0.15), (0, 3))
bkg = pdf(@. (x;p) -&gt; sqrt(x)*exp(-p.α*x); p = (α=1.3,), lims=(0, 3))
bkg_f = bkg * (fb=2.5,)
pdf_sum = snl + bkg_f

# generating
const data = generate(1000, pdf_sum);

# fitting
fr = fit_llh(data, pdf_sum; init_pars=p2v(pdf_sum))
pfr = v2p(minimizer(fr), pdf_sum) # NamedTuple (parameter = value, ...)
efr = v2p(errors(fr), pdf_sum) # NamedTuple (parameter = error, ...)
mfr = v2p(measurements(fr), pdf_sum) # NamedTuple (parameter = value ± error, ...)

# plotting
let
  plot()
  plot!(x-&gt;pdf_sum(x; p=pfr), lims(pdf_sum)..., lab=&quot;fit&quot;)
  plot!(x-&gt;snl(x; p=pfr, norm_according_to=pdf_sum), lims(pdf_sum)..., lab=&quot;signal&quot;)
  plot!(x-&gt;bkg(x; p=pfr, norm_according_to=pdf_sum), lims(pdf_sum)..., lab=&quot;background&quot;)
  stephist!(data, norm=true, c=:black, bins=50, lab=&quot;data&quot;)
end

# Alternatively one can use a mixed model
model = MixedModel([snl, bkg], (fS = 0.5,))
fr = fit_llh(data, model)
pfr = v2p(minimizer(fr), pdf_sum)
fixed_model = fixpars(model, pfr)
# 
let
  Nd = length(data)
  bins = range(lims(fixed_model)..., length = 40)
  Ns = scaletobinneddata(Nd, bins)
  #
  plot(pdf_sum, Ns, lab=&quot;fit&quot;)
  plot!(pdf_sum.components[1], fractionvalues(fixed_model)[1]*Ns, lab=&quot;signal&quot;)
  plot!(pdf_sum.components[2], fractionvalues(fixed_model)[2]*Ns, lab=&quot;background&quot;)
  stephist!(data, c=:black, bins=bins, lab=&quot;data&quot;)
end
"><pre><span class="pl-k">using</span> AlgebraPDF
<span class="pl-k">using</span> Plots
<span class="pl-c1">theme</span>(<span class="pl-c1">:wong</span>)

<span class="pl-c"><span class="pl-c">#</span> create a model</span>
snl <span class="pl-k">=</span> <span class="pl-c1">aGauss</span>((μ<span class="pl-k">=</span><span class="pl-c1">1.4</span>, σ<span class="pl-k">=</span><span class="pl-c1">0.15</span>), (<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
bkg <span class="pl-k">=</span> <span class="pl-c1">pdf</span>(<span class="pl-c1">@.</span> (x;p) <span class="pl-k">-&gt;</span> <span class="pl-c1">sqrt</span>(x)<span class="pl-k">*</span><span class="pl-c1">exp</span>(<span class="pl-k">-</span>p<span class="pl-k">.</span>α<span class="pl-k">*</span>x); p <span class="pl-k">=</span> (α<span class="pl-k">=</span><span class="pl-c1">1.3</span>,), lims<span class="pl-k">=</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>))
bkg_f <span class="pl-k">=</span> bkg <span class="pl-k">*</span> (fb<span class="pl-k">=</span><span class="pl-c1">2.5</span>,)
pdf_sum <span class="pl-k">=</span> snl <span class="pl-k">+</span> bkg_f

<span class="pl-c"><span class="pl-c">#</span> generating</span>
<span class="pl-k">const</span> data <span class="pl-k">=</span> <span class="pl-c1">generate</span>(<span class="pl-c1">1000</span>, pdf_sum);

<span class="pl-c"><span class="pl-c">#</span> fitting</span>
fr <span class="pl-k">=</span> <span class="pl-c1">fit_llh</span>(data, pdf_sum; init_pars<span class="pl-k">=</span><span class="pl-c1">p2v</span>(pdf_sum))
pfr <span class="pl-k">=</span> <span class="pl-c1">v2p</span>(<span class="pl-c1">minimizer</span>(fr), pdf_sum) <span class="pl-c"><span class="pl-c">#</span> NamedTuple (parameter = value, ...)</span>
efr <span class="pl-k">=</span> <span class="pl-c1">v2p</span>(<span class="pl-c1">errors</span>(fr), pdf_sum) <span class="pl-c"><span class="pl-c">#</span> NamedTuple (parameter = error, ...)</span>
mfr <span class="pl-k">=</span> <span class="pl-c1">v2p</span>(<span class="pl-c1">measurements</span>(fr), pdf_sum) <span class="pl-c"><span class="pl-c">#</span> NamedTuple (parameter = value ± error, ...)</span>

<span class="pl-c"><span class="pl-c">#</span> plotting</span>
<span class="pl-k">let</span>
  <span class="pl-c1">plot</span>()
  <span class="pl-c1">plot!</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">pdf_sum</span>(x; p<span class="pl-k">=</span>pfr), <span class="pl-c1">lims</span>(pdf_sum)<span class="pl-k">...</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>fit<span class="pl-pds">"</span></span>)
  <span class="pl-c1">plot!</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">snl</span>(x; p<span class="pl-k">=</span>pfr, norm_according_to<span class="pl-k">=</span>pdf_sum), <span class="pl-c1">lims</span>(pdf_sum)<span class="pl-k">...</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>signal<span class="pl-pds">"</span></span>)
  <span class="pl-c1">plot!</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">bkg</span>(x; p<span class="pl-k">=</span>pfr, norm_according_to<span class="pl-k">=</span>pdf_sum), <span class="pl-c1">lims</span>(pdf_sum)<span class="pl-k">...</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>background<span class="pl-pds">"</span></span>)
  <span class="pl-c1">stephist!</span>(data, norm<span class="pl-k">=</span><span class="pl-c1">true</span>, c<span class="pl-k">=</span><span class="pl-c1">:black</span>, bins<span class="pl-k">=</span><span class="pl-c1">50</span>, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Alternatively one can use a mixed model</span>
model <span class="pl-k">=</span> <span class="pl-c1">MixedModel</span>([snl, bkg], (fS <span class="pl-k">=</span> <span class="pl-c1">0.5</span>,))
fr <span class="pl-k">=</span> <span class="pl-c1">fit_llh</span>(data, model)
pfr <span class="pl-k">=</span> <span class="pl-c1">v2p</span>(<span class="pl-c1">minimizer</span>(fr), pdf_sum)
fixed_model <span class="pl-k">=</span> <span class="pl-c1">fixpars</span>(model, pfr)
<span class="pl-c"><span class="pl-c">#</span> </span>
<span class="pl-k">let</span>
  Nd <span class="pl-k">=</span> <span class="pl-c1">length</span>(data)
  bins <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">lims</span>(fixed_model)<span class="pl-k">...</span>, length <span class="pl-k">=</span> <span class="pl-c1">40</span>)
  Ns <span class="pl-k">=</span> <span class="pl-c1">scaletobinneddata</span>(Nd, bins)
  <span class="pl-c"><span class="pl-c">#</span></span>
  <span class="pl-c1">plot</span>(pdf_sum, Ns, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>fit<span class="pl-pds">"</span></span>)
  <span class="pl-c1">plot!</span>(pdf_sum<span class="pl-k">.</span>components[<span class="pl-c1">1</span>], <span class="pl-c1">fractionvalues</span>(fixed_model)[<span class="pl-c1">1</span>]<span class="pl-k">*</span>Ns, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>signal<span class="pl-pds">"</span></span>)
  <span class="pl-c1">plot!</span>(pdf_sum<span class="pl-k">.</span>components[<span class="pl-c1">2</span>], <span class="pl-c1">fractionvalues</span>(fixed_model)[<span class="pl-c1">2</span>]<span class="pl-k">*</span>Ns, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>background<span class="pl-pds">"</span></span>)
  <span class="pl-c1">stephist!</span>(data, c<span class="pl-k">=</span><span class="pl-c1">:black</span>, bins<span class="pl-k">=</span>bins, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="plots/gaus.background.png"><img src="plots/gaus.background.png" alt="example" style="max-width:100%;"></a></p>
</article></div>