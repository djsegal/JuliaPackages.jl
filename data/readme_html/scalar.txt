<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-scalar" class="anchor" aria-hidden="true" href="#scalar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scalar</h1>
<h3 dir="auto"><a id="user-content-scalar-type-tools" class="anchor" aria-hidden="true" href="#scalar-type-tools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scalar Type Tools</h3>
<p dir="auto"><a href="https://travis-ci.org/sabjohnso/Scalar.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/abffefa7cde00a9ebbbdde2827dd32526c694da974154c734767f26a4e322e45/68747470733a2f2f7472617669732d63692e6f72672f7361626a6f686e736f2f5363616c61722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sabjohnso/Scalar.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/sabjohnso/Scalar.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3296063c5547765ef542eeb9514eb1ace2994cdee7054e58b21eb5c2c542dcf8/687474703a2f2f636f6465636f762e696f2f6769746875622f7361626a6f686e736f2f5363616c61722e6a6c2f636f6e7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/sabjohnso/Scalar.jl/converage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><code>Scalar</code> is a <a href="http://julialang.org" rel="nofollow">Julia</a> package to facilitate the generation of scalar types.  Primarily,Scalar defines an abstract type, <code>AbstractScalar</code>, and a number of methods overloaded for that for its subtypes.  The list of overloaded methods includes the following: <code>size</code>, <code>eltype</code>, <code>ndims</code>, <code>length</code>, <code>endof</code>, <code>getindex</code>, <code>first</code>, <code>last</code>, <code>start</code>, <code>next</code>, <code>done</code>, <code>isempty</code>, <code>map</code>, <code>filter</code>.  These methods are a subset of the methods defined for the abstract type <code>Number</code>, where those methods that imply a numerical nature of the subtypes are excluded.  Additionally, the method <code>filter</code> is included here, where it was not specifically defined for <code>Number</code>.</p>
<p dir="auto">Dual licensing (GPLv3, alternate commercial) - See LICENSE.md</p>
<p dir="auto"><strong>Installation</strong>: <code>julia&gt; Pkg.clone( "https://github.com/sabjohnso/Scalar.jl" )</code></p>
<h3 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting Started</h3>
<p dir="auto">To define a new scalar type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="type MyScalar &lt;: AbstractScalar
end

using Base.Test
a = MyScalar()
@test length( a ) == 1
@test size( a ) == ()
@test map( identity, a ) == a
@test filter( x-&gt;isa( x, MyScalar ), a ) == a
@test filter( x-&gt;! isa( x, MyScalar ) == nothing"><pre>type MyScalar <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractScalar</span>
<span class="pl-k">end</span>

<span class="pl-k">using</span> Base<span class="pl-k">.</span>Test
a <span class="pl-k">=</span> <span class="pl-c1">MyScalar</span>()
<span class="pl-c1">@test</span> <span class="pl-c1">length</span>( a ) <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">@test</span> <span class="pl-c1">size</span>( a ) <span class="pl-k">==</span> ()
<span class="pl-c1">@test</span> <span class="pl-c1">map</span>( identity, a ) <span class="pl-k">==</span> a
<span class="pl-c1">@test</span> <span class="pl-c1">filter</span>( x<span class="pl-k">-&gt;</span><span class="pl-c1">isa</span>( x, MyScalar ), a ) <span class="pl-k">==</span> a
<span class="pl-c1">@test</span> <span class="pl-c1">filter</span>( x<span class="pl-k">-&gt;</span><span class="pl-k">!</span> <span class="pl-c1">isa</span>( x, MyScalar ) <span class="pl-k">==</span> <span class="pl-c1">nothing</span></pre></div>
</article></div>