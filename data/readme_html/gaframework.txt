<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gaframework-a-genetic-algorithm-framework-with-multi-threading" class="anchor" aria-hidden="true" href="#gaframework-a-genetic-algorithm-framework-with-multi-threading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GAFramework: a genetic algorithm framework with multi-threading</h1>
<p dir="auto"><a href="https://github.com/vvjn/GAFramework.jl/actions/workflows/CI.yml"><img src="https://github.com/vvjn/GAFramework.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/vvjn/GAFramework.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cce63c5b67f055b1e7472a8cbcdea7320ad9fe7f24fb9e7e21dbb64599318076/68747470733a2f2f636f6465636f762e696f2f67682f76766a6e2f47414672616d65776f726b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4837766f76523143397a" alt="codecov" data-canonical-src="https://codecov.io/gh/vvjn/GAFramework.jl/branch/master/graph/badge.svg?token=H7vovR1C9z" style="max-width: 100%;"></a></p>
<p dir="auto">GAFramework is a framework for writing genetic algorithms in Julia. It
supports parallelism by calculating crossovers and fitness using
Julia's multi-threading capabilities.</p>
<p dir="auto">Since GAFramework stores the entire state of your genetic algorithm in
an object, it allows you to save the entire state to file. It allows
you to continue running your GA after you load your state from file or
after you stop at a generation.  It allows you to change parameters
such as crossover/mutation parameters after you stop at a generation
and then continue from where you stopped.</p>
<p dir="auto">GAFramework is replicable with respect to pseudo-randomness. So, if
you specify a random number generator, GAFramework will fully
replicate your GA run as long as the number of threads used is the
same for both runs.</p>
<p dir="auto">GAFramework also contains a genetic algorithm implementation that
"minimizes" any function <code>f : R^n -&gt; R</code> over a box in a Coordinate
space.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>using Pkg; Pkg.add("GAFramework")</code></p>
<h2 dir="auto"><a id="user-content-implementing-a-ga-for-a-specific-problem" class="anchor" aria-hidden="true" href="#implementing-a-ga-for-a-specific-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementing a GA for a specific problem</h2>
<p dir="auto">To create a GA for a specific problem, we need to create a concrete
sub-type of <code>GAModel</code>, and then create relevant functions for the sub-types.</p>
<p dir="auto">To demonstrate this, we create a GA for optimizing a function over a box in a
Coordinate space, i.e., a function <code>f : R^n -&gt; R</code>.</p>
<p dir="auto">First, we import the <code>GAFramework</code> module and import relevant
functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GAFramework
import GAFramework: fitness, genauxga, crossover!, mutation!, selection,
randcreature, printfitness, savecreature"><pre><span class="pl-k">using</span> GAFramework
<span class="pl-k">import</span> GAFramework<span class="pl-k">:</span> fitness, genauxga, crossover!, mutation!, selection,
randcreature, printfitness, savecreature</pre></div>
<p dir="auto">Next, we create a sub-type of <code>GAModel</code>, which contains the function
<code>f</code>, the corners of the box (<code>xmin</code> and <code>xmax</code>), and the span of
the box (<code>xspan</code>). It also contains the <code>clamp</code> field: if <code>clamp = true</code> then we will clamp mutated or crossovered points back into the
box, so that our solutions will be inside the box;
otherwise, our solutions will not be constrained.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct FunctionModel{F,T} &lt;: GAModel
    f::F
    xmin::T
    xmax::T
    xspan::T # xmax-xmin
    clamp::Bool
end

function FunctionModel(f::F,xmin,xmax,clamp::Bool=true) where {F}
        xspan = xmax .- xmin
    FunctionModel{F,typeof(xspan)}(f,xmin,xmax,xspan,clamp)
end"><pre><span class="pl-k">struct</span> FunctionModel{F,T} <span class="pl-k">&lt;:</span> <span class="pl-c1">GAModel</span>
    f<span class="pl-k">::</span><span class="pl-c1">F</span>
    xmin<span class="pl-k">::</span><span class="pl-c1">T</span>
    xmax<span class="pl-k">::</span><span class="pl-c1">T</span>
    xspan<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> xmax-xmin</span>
    clamp<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">FunctionModel</span>(f<span class="pl-k">::</span><span class="pl-c1">F</span>,xmin,xmax,clamp<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">where</span> {F}
        xspan <span class="pl-k">=</span> xmax <span class="pl-k">.-</span> xmin
    <span class="pl-c1">FunctionModel</span><span class="pl-c1">{F,typeof(xspan)}</span>(f,xmin,xmax,xspan,clamp)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Then, we create a type, which contains the
"chromosomes" of the creature (<code>value</code> field) and the objective value of the
function (<code>objvalue</code> field). We calculate the objective value when creating a
<code>CoordinateCreature{T}</code> object.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct CoordinateCreature{T}
    value :: T
    objvalue :: Float64
end

CoordinateCreature(value::T, model::FunctionModel{F,T}) where {F,T} =
    CoordinateCreature{T}(value, model.f(value))"><pre><span class="pl-k">struct</span> CoordinateCreature{T}
    value <span class="pl-k">::</span> <span class="pl-c1">T</span>
    objvalue <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-en">CoordinateCreature</span>(value<span class="pl-k">::</span><span class="pl-c1">T</span>, model<span class="pl-k">::</span><span class="pl-c1">FunctionModel{F,T}</span>) <span class="pl-k">where</span> {F,T} <span class="pl-k">=</span>
    <span class="pl-c1">CoordinateCreature</span><span class="pl-c1">{T}</span>(value, model<span class="pl-k">.</span><span class="pl-c1">f</span>(value))</pre></div>
<p dir="auto">Genetic algorithms maximize the <code>fitness</code> function.
Since we are minimizing the objective value, we set <code>fitness</code> to be
negative of the objective value. Depending on the selection function
used, <code>fitness(::CoordinateCreature)</code> might need to be non-negative, be a
probability value, etc. The bulk of the calculation should be relegated to when the
<code>CoordinateCreature{T}</code> object is created; the <code>fitness</code> function
below, since it will be repeatedly called during selection and
sorting, should be a very fast and simple function such as identity or negation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fitness(x::CoordinateCreature) = -x.objvalue"><pre><span class="pl-en">fitness</span>(x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature</span>) <span class="pl-k">=</span> <span class="pl-k">-</span>x<span class="pl-k">.</span>objvalue</pre></div>
<p dir="auto">The following creates a randomly generated <code>CoordinateCreature</code>
object. It creates a random point drawn with uniform probability
from the box. Note: <code>aux</code> is used to store auxiliary scratch space in
case we want to minimize memory allocations. <code>aux</code> can be created by
overloading the <code>genauxga(model::FunctionModel)</code> function, which is
used to produce memory-safe (with respect to multi-threading) auxiliary scratch
space. In this example, we do not need any scratch space.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="randcreature(m::FunctionModel{F,T}, aux, rng::AbstractRNG) where {F,T} =
    CoordinateCreature(m.xmin .+ m.xspan .* rand(rng,length(m.xspan)), m)"><pre><span class="pl-en">randcreature</span>(m<span class="pl-k">::</span><span class="pl-c1">FunctionModel{F,T}</span>, aux, rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>) <span class="pl-k">where</span> {F,T} <span class="pl-k">=</span>
    <span class="pl-c1">CoordinateCreature</span>(m<span class="pl-k">.</span>xmin <span class="pl-k">.+</span> m<span class="pl-k">.</span>xspan <span class="pl-k">.*</span> <span class="pl-c1">rand</span>(rng,<span class="pl-c1">length</span>(m<span class="pl-k">.</span>xspan)), m)</pre></div>
<p dir="auto">The following defines the crossover operator. We define a crossover as
the average of two points (not the greatest crossover operator). Note:
we re-use memory from the <code>z</code> object when creating
the new <code>CoordinateCreature</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function crossover!(z::CoordinateCreature{T}, x::CoordinateCreature{T},
                   y::CoordinateCreature{T}, st::GAState,
                   aux, rng::AbstractRNG) where {T}
              z.value[:] = 0.5 .* (x.value .+ y.value)
              CoordinateCreature(z.value, st.model)
end"><pre><span class="pl-k">function</span> <span class="pl-en">crossover!</span>(z<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>, x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>,
                   y<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>, st<span class="pl-k">::</span><span class="pl-c1">GAState</span>,
                   aux, rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>) <span class="pl-k">where</span> {T}
              z<span class="pl-k">.</span>value[:] <span class="pl-k">=</span> <span class="pl-c1">0.5</span> <span class="pl-k">.*</span> (x<span class="pl-k">.</span>value <span class="pl-k">.+</span> y<span class="pl-k">.</span>value)
              <span class="pl-c1">CoordinateCreature</span>(z<span class="pl-k">.</span>value, st<span class="pl-k">.</span>model)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The following defines the mutation operator. We draw a vector from a
circular normal distribution, scale it by the box, and shift the
original point with the drawn vector (again, not the greatest mutation
operator).  Clamping is optionally done to restrict points to be
inside the box.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function mutation!(x::CoordinateCreature{T}, m::FunctionModel{F,T},
                params, curgen, aux, rng) where {F,T}
    if rand(rng) &lt; params[:rate]
        x.value .+= 0.01 .* m.xspan .* randn(rng,length(x.value))
        if m.clamp
            x.value .= clamp.(x.value, m.xmin, m.xmax)
        end
        CoordinateCreature(x.value, m)
    else
        x
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">mutation!</span>(x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>, m<span class="pl-k">::</span><span class="pl-c1">FunctionModel{F,T}</span>,
                params, curgen, aux, rng) <span class="pl-k">where</span> {F,T}
    <span class="pl-k">if</span> <span class="pl-c1">rand</span>(rng) <span class="pl-k">&lt;</span> params[<span class="pl-c1">:rate</span>]
        x<span class="pl-k">.</span>value <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">0.01</span> <span class="pl-k">.*</span> m<span class="pl-k">.</span>xspan <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(rng,<span class="pl-c1">length</span>(x<span class="pl-k">.</span>value))
        <span class="pl-k">if</span> m<span class="pl-k">.</span>clamp
            x<span class="pl-k">.</span>value <span class="pl-k">.=</span> <span class="pl-c1">clamp</span>.(x<span class="pl-k">.</span>value, m<span class="pl-k">.</span>xmin, m<span class="pl-k">.</span>xmax)
        <span class="pl-k">end</span>
        <span class="pl-c1">CoordinateCreature</span>(x<span class="pl-k">.</span>value, m)
    <span class="pl-k">else</span>
        x
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">We use tournament selection as our selection operator.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="selection(pop::Vector{&lt;:CoordinateCreature}, n::Integer, rng) =
    selection(TournamentSelection(2), pop, n, rng)"><pre><span class="pl-en">selection</span>(pop<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:CoordinateCreature}</span>, n<span class="pl-k">::</span><span class="pl-c1">Integer</span>, rng) <span class="pl-k">=</span>
    <span class="pl-c1">selection</span>(<span class="pl-c1">TournamentSelection</span>(<span class="pl-c1">2</span>), pop, n, rng)</pre></div>
<p dir="auto">This defines how to print details of our creature in a compressed form.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="printfitness(curgen::Integer, x::CoordinateCreature) =
    println(&quot;curgen: $curgen value: $(x.value) obj. value: $(x.objvalue)&quot;)"><pre><span class="pl-en">printfitness</span>(curgen<span class="pl-k">::</span><span class="pl-c1">Integer</span>, x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature</span>) <span class="pl-k">=</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>curgen: <span class="pl-v">$curgen</span> value: <span class="pl-v">$(x<span class="pl-k">.</span>value)</span> obj. value: <span class="pl-v">$(x<span class="pl-k">.</span>objvalue)</span><span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This defines how to save our creature to file. <code>GAFramework</code> will save
the best creature to file using this function.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="savecreature(file_name_prefix::AbstractString, curgen::Integer,
             creature::CoordinateCreature, model::FunctionModel) =
    save(&quot;$(file_name_prefix)_creature_$(curgen).jld&quot;, &quot;creature&quot;, creature)"><pre><span class="pl-c1">savecreature</span>(file_name_prefix<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>, curgen<span class="pl-k">::</span><span class="pl-c1">Integer</span>,
             creature<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature</span>, model<span class="pl-k">::</span><span class="pl-c1">FunctionModel</span>) <span class="pl-k">=</span>
    <span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(file_name_prefix)</span>_creature_<span class="pl-v">$(curgen)</span>.jld<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>creature<span class="pl-pds">"</span></span>, creature)</pre></div>
<p dir="auto">In summary, we can implement a new GA using the following code.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module CoordinateGA

using GAFramework
import GAFramework: fitness, crossover!, mutation!, selection, randcreature
using Random

struct FunctionModel{F,T} &lt;: GAModel
    f::F
    xmin::T
    xmax::T
    xspan::T # xmax-xmin
    clamp::Bool
end

function FunctionModel(f::F,xmin,xmax,clamp::Bool=true) where {F}
        xspan = xmax .- xmin
    FunctionModel{F,typeof(xspan)}(f,xmin,xmax,xspan,clamp)
end

struct CoordinateCreature{T}
    value :: T
    objvalue :: Float64
end

CoordinateCreature(value::T, model::FunctionModel{F,T}) where {F,T} =
    CoordinateCreature{T}(value, model.f(value))

fitness(x::CoordinateCreature) = -x.objvalue

randcreature(m::FunctionModel{F,T}, aux, rng::AbstractRNG) where {F,T} =
    CoordinateCreature(m.xmin .+ m.xspan .* rand(rng,length(m.xspan)), m)

function crossover!(z::CoordinateCreature{T}, x::CoordinateCreature{T},
                   y::CoordinateCreature{T}, st::GAState,
                   aux, rng::AbstractRNG) where {T}
              z.value[:] = 0.5 .* (x.value .+ y.value)
              CoordinateCreature(z.value, st.model)
end

function mutation!(x::CoordinateCreature{T}, m::FunctionModel{F,T},
                params, curgen, aux, rng) where {F,T}
    if rand(rng) &lt; params[:rate]
        x.value .+= 0.01 .* m.xspan .* randn(rng,length(x.value))
        if m.clamp
            x.value .= clamp.(x.value, m.xmin, m.xmax)
        end
        CoordinateCreature(x.value, m)
    else
        x
    end
end

selection(pop::Vector{&lt;:CoordinateCreature}, n::Integer, rng) =
    selection(TournamentSelection(2), pop, n, rng)

end"><pre><span class="pl-k">module</span> CoordinateGA

<span class="pl-k">using</span> GAFramework
<span class="pl-k">import</span> GAFramework<span class="pl-k">:</span> fitness, crossover!, mutation!, selection, randcreature
<span class="pl-k">using</span> Random

<span class="pl-k">struct</span> FunctionModel{F,T} <span class="pl-k">&lt;:</span> <span class="pl-c1">GAModel</span>
    f<span class="pl-k">::</span><span class="pl-c1">F</span>
    xmin<span class="pl-k">::</span><span class="pl-c1">T</span>
    xmax<span class="pl-k">::</span><span class="pl-c1">T</span>
    xspan<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-c"><span class="pl-c">#</span> xmax-xmin</span>
    clamp<span class="pl-k">::</span><span class="pl-c1">Bool</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">FunctionModel</span>(f<span class="pl-k">::</span><span class="pl-c1">F</span>,xmin,xmax,clamp<span class="pl-k">::</span><span class="pl-c1">Bool</span><span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">where</span> {F}
        xspan <span class="pl-k">=</span> xmax <span class="pl-k">.-</span> xmin
    <span class="pl-c1">FunctionModel</span><span class="pl-c1">{F,typeof(xspan)}</span>(f,xmin,xmax,xspan,clamp)
<span class="pl-k">end</span>

<span class="pl-k">struct</span> CoordinateCreature{T}
    value <span class="pl-k">::</span> <span class="pl-c1">T</span>
    objvalue <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-en">CoordinateCreature</span>(value<span class="pl-k">::</span><span class="pl-c1">T</span>, model<span class="pl-k">::</span><span class="pl-c1">FunctionModel{F,T}</span>) <span class="pl-k">where</span> {F,T} <span class="pl-k">=</span>
    <span class="pl-c1">CoordinateCreature</span><span class="pl-c1">{T}</span>(value, model<span class="pl-k">.</span><span class="pl-c1">f</span>(value))

<span class="pl-en">fitness</span>(x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature</span>) <span class="pl-k">=</span> <span class="pl-k">-</span>x<span class="pl-k">.</span>objvalue

<span class="pl-en">randcreature</span>(m<span class="pl-k">::</span><span class="pl-c1">FunctionModel{F,T}</span>, aux, rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>) <span class="pl-k">where</span> {F,T} <span class="pl-k">=</span>
    <span class="pl-c1">CoordinateCreature</span>(m<span class="pl-k">.</span>xmin <span class="pl-k">.+</span> m<span class="pl-k">.</span>xspan <span class="pl-k">.*</span> <span class="pl-c1">rand</span>(rng,<span class="pl-c1">length</span>(m<span class="pl-k">.</span>xspan)), m)

<span class="pl-k">function</span> <span class="pl-en">crossover!</span>(z<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>, x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>,
                   y<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>, st<span class="pl-k">::</span><span class="pl-c1">GAState</span>,
                   aux, rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>) <span class="pl-k">where</span> {T}
              z<span class="pl-k">.</span>value[:] <span class="pl-k">=</span> <span class="pl-c1">0.5</span> <span class="pl-k">.*</span> (x<span class="pl-k">.</span>value <span class="pl-k">.+</span> y<span class="pl-k">.</span>value)
              <span class="pl-c1">CoordinateCreature</span>(z<span class="pl-k">.</span>value, st<span class="pl-k">.</span>model)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">mutation!</span>(x<span class="pl-k">::</span><span class="pl-c1">CoordinateCreature{T}</span>, m<span class="pl-k">::</span><span class="pl-c1">FunctionModel{F,T}</span>,
                params, curgen, aux, rng) <span class="pl-k">where</span> {F,T}
    <span class="pl-k">if</span> <span class="pl-c1">rand</span>(rng) <span class="pl-k">&lt;</span> params[<span class="pl-c1">:rate</span>]
        x<span class="pl-k">.</span>value <span class="pl-k">.+</span><span class="pl-k">=</span> <span class="pl-c1">0.01</span> <span class="pl-k">.*</span> m<span class="pl-k">.</span>xspan <span class="pl-k">.*</span> <span class="pl-c1">randn</span>(rng,<span class="pl-c1">length</span>(x<span class="pl-k">.</span>value))
        <span class="pl-k">if</span> m<span class="pl-k">.</span>clamp
            x<span class="pl-k">.</span>value <span class="pl-k">.=</span> <span class="pl-c1">clamp</span>.(x<span class="pl-k">.</span>value, m<span class="pl-k">.</span>xmin, m<span class="pl-k">.</span>xmax)
        <span class="pl-k">end</span>
        <span class="pl-c1">CoordinateCreature</span>(x<span class="pl-k">.</span>value, m)
    <span class="pl-k">else</span>
        x
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-en">selection</span>(pop<span class="pl-k">::</span><span class="pl-c1">Vector{&lt;:CoordinateCreature}</span>, n<span class="pl-k">::</span><span class="pl-c1">Integer</span>, rng) <span class="pl-k">=</span>
    <span class="pl-c1">selection</span>(<span class="pl-c1">TournamentSelection</span>(<span class="pl-c1">2</span>), pop, n, rng)

<span class="pl-k">end</span></pre></div>
<p dir="auto">A variation of this GA is in <code>src/models/coordinatega.jl</code>. Further examples are in <code>src/models/permga.jl</code> and <code>src/models/magnaga.jl</code>.</p>
<h2 dir="auto"><a id="user-content-running-the-ga" class="anchor" aria-hidden="true" href="#running-the-ga"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running the GA</h2>
<p dir="auto">That takes care of how to implement our problem using
<code>GAFramework</code>. Now, we define our problem by creating a
<code>FunctionModel</code>.</p>
<p dir="auto">For fun, we want to minimize the function <code>x sin(1/x)</code> over the
<code>[-1,1]</code> interval.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = FunctionModel(x -&gt; x[1]==0 ? 0.0 : x[1] * sin(1/x[1]), [-1.0], [1.0])"><pre>model <span class="pl-k">=</span> <span class="pl-c1">FunctionModel</span>(x <span class="pl-k">-&gt;</span> x[<span class="pl-c1">1</span>]<span class="pl-k">==</span><span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">0.0</span> <span class="pl-k">:</span> x[<span class="pl-c1">1</span>] <span class="pl-k">*</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>x[<span class="pl-c1">1</span>]), [<span class="pl-k">-</span><span class="pl-c1">1.0</span>], [<span class="pl-c1">1.0</span>])</pre></div>
<p dir="auto">Or, we want to minimize the function <code>&lt;x, sin(1/x)&gt;</code> in 2D
Euclidean space over the <code>[-1,1]^2</code> rectangle.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra

model = FunctionModel(x -&gt; any(x.==0) ? 0.0 : dot(x, sin.(1./x)),
                         [-1.,-1.], [1.,1.])"><pre><span class="pl-k">using</span> LinearAlgebra

model <span class="pl-k">=</span> <span class="pl-c1">FunctionModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">any</span>(x<span class="pl-k">.==</span><span class="pl-c1">0</span>) <span class="pl-k">?</span> <span class="pl-c1">0.0</span> <span class="pl-k">:</span> <span class="pl-c1">dot</span>(x, <span class="pl-c1">sin</span>.(<span class="pl-c1">1.</span><span class="pl-k">/</span>x)),
                         [<span class="pl-k">-</span><span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">1.</span>], [<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>])</pre></div>
<p dir="auto">Or, we want to minimize the function <code>|x - (0.25,0.25,0.5,0.5,0.5)|_1</code> in
5-dimensional Euclidean space over the <code>[-1,1]^5</code> box.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra

x0 = [0.25,0.25,0.5,0.5,0.5]
model = FunctionModel(x -&gt; norm(x-x0,1),
                         [-1.,-1.,-1.,-1.,-1], # minimum corner
                         [1.,1.,1.,1.,1]) # maximum corner in box"><pre><span class="pl-k">using</span> LinearAlgebra

x0 <span class="pl-k">=</span> [<span class="pl-c1">0.25</span>,<span class="pl-c1">0.25</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>,<span class="pl-c1">0.5</span>]
model <span class="pl-k">=</span> <span class="pl-c1">FunctionModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">norm</span>(x<span class="pl-k">-</span>x0,<span class="pl-c1">1</span>),
                         [<span class="pl-k">-</span><span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">1.</span>,<span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c"><span class="pl-c">#</span> minimum corner</span>
                         [<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">1.</span>,<span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span> maximum corner in box</span></pre></div>
<p dir="auto">Here, we create the GA state, with population size 1000, maximum
number of generations 100, fraction of elite creatures 0.01, and
mutation rate 0.1, printing the objective value every 10
iterations. The <code>GAState</code> function generates the population and
<code>state</code> contains all data required to start/restart a GA.  Each
generation, the GA will create children (using <code>crossover!</code>) from
selected (using <code>selection</code>) parents, replace the non-elites in the
current generation with the children (with respect to <code>fitness</code>), and
then mutate everyone in the population (using <code>mutation!</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state = GAState(model, ngen=100, npop=1000, elite_fraction=0.01,
    params = Dict(:mutation_rate =&gt;0.1, :print_fitness_iter =&gt; 10))"><pre>state <span class="pl-k">=</span> <span class="pl-c1">GAState</span>(model, ngen<span class="pl-k">=</span><span class="pl-c1">100</span>, npop<span class="pl-k">=</span><span class="pl-c1">1000</span>, elite_fraction<span class="pl-k">=</span><span class="pl-c1">0.01</span>,
    params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:mutation_rate</span> <span class="pl-k">=&gt;</span><span class="pl-c1">0.1</span>, <span class="pl-c1">:print_fitness_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>))</pre></div>
<p dir="auto">This runs the GA and we are done.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ga!(state)"><pre><span class="pl-c1">ga!</span>(state)</pre></div>
<p dir="auto"><code>state.pop[1]</code> gives you the creature with the best fitness.</p>
<p dir="auto">A version of <code>FunctionModel</code> and <code>CoordinateCreature</code> are included <code>GAFramework</code>. It can be used by executing the statement <code>using GAFramework.CoordinateGA</code>.</p>
<h2 dir="auto"><a id="user-content-restarting" class="anchor" aria-hidden="true" href="#restarting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Restarting</h2>
<p dir="auto">After we finish a GA run using <code>ga!(state)</code>, if we decide that we
want to continue optimizing for a few more generations, we can do the
following.  Here, we change maximum number of generations to 200, and
then restart the GA, continuing on from where the GA stopped earlier.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state.ngen = 200

ga!(state)"><pre>state<span class="pl-k">.</span>ngen <span class="pl-k">=</span> <span class="pl-c1">200</span>

<span class="pl-c1">ga!</span>(state)</pre></div>
<h2 dir="auto"><a id="user-content-replicability-with-respect-to-pseudo-randomness" class="anchor" aria-hidden="true" href="#replicability-with-respect-to-pseudo-randomness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Replicability with respect to pseudo-randomness</h2>
<p dir="auto">Although <code>GAFramework</code> uses pseudo-random numbers for many operations, we
can replicate a GA run using the <code>rng</code> option and by using only the random number
generators provided by the functions to generate random numbers. Setting <code>rng</code> to be an
object that is a sub-type of <code>AbstractRNG</code>
will percolate it throughout the GA, allowing us to replicate a run. By default, <code>rng</code> is
set to <code>MersenneTwister(rand(UInt))</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state1 = GAState(model, ngen=100, npop=1000, elite_fraction=0.01,
    params = Dict(:mutation_rate =&gt; 0.1, :print_fitness_iter =&gt; 10),
    rng=MersenneTwister(12))
best1 = ga!(state1)

state2 = GAState(model, ngen=100, npop=1000, elite_fraction=0.01,
    params = Dict(:mutation_rate =&gt; 0.1, :print_fitness_iter =&gt; 10),
    rng=MersenneTwister(12))
best2 = ga!(state2)

println(all([getfield(state1,x) == getfield(state2,x) for x in fieldnames(GAState)]))
# true
println(best1 == best2)
# true"><pre>state1 <span class="pl-k">=</span> <span class="pl-c1">GAState</span>(model, ngen<span class="pl-k">=</span><span class="pl-c1">100</span>, npop<span class="pl-k">=</span><span class="pl-c1">1000</span>, elite_fraction<span class="pl-k">=</span><span class="pl-c1">0.01</span>,
    params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:mutation_rate</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">:print_fitness_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>),
    rng<span class="pl-k">=</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">12</span>))
best1 <span class="pl-k">=</span> <span class="pl-c1">ga!</span>(state1)

state2 <span class="pl-k">=</span> <span class="pl-c1">GAState</span>(model, ngen<span class="pl-k">=</span><span class="pl-c1">100</span>, npop<span class="pl-k">=</span><span class="pl-c1">1000</span>, elite_fraction<span class="pl-k">=</span><span class="pl-c1">0.01</span>,
    params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:mutation_rate</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">:print_fitness_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>),
    rng<span class="pl-k">=</span><span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">12</span>))
best2 <span class="pl-k">=</span> <span class="pl-c1">ga!</span>(state2)

<span class="pl-c1">println</span>(<span class="pl-c1">all</span>([<span class="pl-c1">getfield</span>(state1,x) <span class="pl-k">==</span> <span class="pl-c1">getfield</span>(state2,x) <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">fieldnames</span>(GAState)]))
<span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c1">println</span>(best1 <span class="pl-k">==</span> best2)
<span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h2 dir="auto"><a id="user-content-saving-creature-to-file" class="anchor" aria-hidden="true" href="#saving-creature-to-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Saving creature to file</h2>
<p dir="auto">We can save the creature to file every 10 iterations using the following.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state = GAState(m, ngen=100, npop=1000, elite_fraction=0.01,
    params = Dict(:mutation_rate =&gt; 0.1, :print_fitness_iter =&gt; 10,
        :save_creature_iter =&gt; 10, :file_name_prefix=&quot;minexp_6000&quot;))"><pre>state <span class="pl-k">=</span> <span class="pl-c1">GAState</span>(m, ngen<span class="pl-k">=</span><span class="pl-c1">100</span>, npop<span class="pl-k">=</span><span class="pl-c1">1000</span>, elite_fraction<span class="pl-k">=</span><span class="pl-c1">0.01</span>,
    params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:mutation_rate</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">:print_fitness_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>,
        <span class="pl-c1">:save_creature_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>, <span class="pl-c1">:file_name_prefix</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>minexp_6000<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">After we finish a GA run using <code>ga!(state)</code>, and we decide that we
want to save the best creature to file afterwards, we can do the following.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="savecreature(&quot;minexp_6000&quot;, state.ngen, state.pop[1], model)"><pre><span class="pl-c1">savecreature</span>(<span class="pl-s"><span class="pl-pds">"</span>minexp_6000<span class="pl-pds">"</span></span>, state<span class="pl-k">.</span>ngen, state<span class="pl-k">.</span>pop[<span class="pl-c1">1</span>], model)</pre></div>
<h2 dir="auto"><a id="user-content-saving-ga-state-to-file" class="anchor" aria-hidden="true" href="#saving-ga-state-to-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Saving GA state to file</h2>
<p dir="auto">This save the full GA state to file every 100 iterations using the
following. Note: unfortunately, this doesn't work with
<code>FunctionModel{F,T}</code> since it contains the function <code>f::F</code> as a field. It should
work for other types that do not contain functions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state = GAState(m, ngen=100, npop=1000, elite_fraction=0.01,
    params = Dict(:mutation_rate =&gt; 0.1, :print_fitness_iter =&gt; 10,
        :save_creature_iter =&gt; 100, :file_name_prefix=&quot;minexp_6000&quot;))"><pre>state <span class="pl-k">=</span> <span class="pl-c1">GAState</span>(m, ngen<span class="pl-k">=</span><span class="pl-c1">100</span>, npop<span class="pl-k">=</span><span class="pl-c1">1000</span>, elite_fraction<span class="pl-k">=</span><span class="pl-c1">0.01</span>,
    params <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:mutation_rate</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">:print_fitness_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>,
        <span class="pl-c1">:save_creature_iter</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">100</span>, <span class="pl-c1">:file_name_prefix</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>minexp_6000<span class="pl-pds">"</span></span>))</pre></div>
<p dir="auto">If something happens during the middle of running <code>ga!(state)</code>, we can
reload the state from file from the 100th generation as follows, and
then restart the GA from the saved generation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="state = loadgastate(&quot;minexp_6000_state_100.jld&quot;)

ga!(state)"><pre>state <span class="pl-k">=</span> <span class="pl-c1">loadgastate</span>(<span class="pl-s"><span class="pl-pds">"</span>minexp_6000_state_100.jld<span class="pl-pds">"</span></span>)

<span class="pl-c1">ga!</span>(state)</pre></div>
<p dir="auto">We can also directly save the state using the following.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="savegastate(&quot;minexp_6000&quot;, state.ngen, state)"><pre><span class="pl-c1">savegastate</span>(<span class="pl-s"><span class="pl-pds">"</span>minexp_6000<span class="pl-pds">"</span></span>, state<span class="pl-k">.</span>ngen, state)</pre></div>
</article></div>