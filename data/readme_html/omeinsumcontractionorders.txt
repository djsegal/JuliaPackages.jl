<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-omeinsumcontractionorders" class="anchor" aria-hidden="true" href="#omeinsumcontractionorders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OMEinsumContractionOrders</h1>
<p dir="auto">This package provides <code>optimize_code</code> function for finding tensor network contraction orders.</p>
<p dir="auto"><a href="https://github.com/TensorBFS/OMEinsumContractionOrders.jl/actions"><img src="https://github.com/TensorBFS/OMEinsumContractionOrders.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/TensorBFS/OMEinsumContractionOrders.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3690973bcc3a0d25d508341854ead6d7f90c730a721fbd540a47a2585edbd456/68747470733a2f2f636f6465636f762e696f2f67682f54656e736f724246532f4f4d45696e73756d436f6e7472616374696f6e4f72646572732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d42776146306356367131" alt="codecov" data-canonical-src="https://codecov.io/gh/TensorBFS/OMEinsumContractionOrders.jl/branch/master/graph/badge.svg?token=BwaF0cV6q1" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">
OMEinsumContractionOrders is a Julia Language package. To install OMEinsumContractionOrders,
    please <a href="https://docs.julialang.org/en/v1/manual/getting-started/" rel="nofollow">open
    Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then type the following command
</p>
<p dir="auto">For stable release</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add OMEinsumContractionOrders
pkg&gt; add KaHyPar"><pre>pkg<span class="pl-k">&gt;</span> add OMEinsumContractionOrders
pkg<span class="pl-k">&gt;</span> add KaHyPar</pre></div>
<p dir="auto">The <code>KaHyPar</code> package (used in <code>KaHyParBipartite</code> optimizer) is optional because some one may have the binary issue, check <a href="https://github.com/kahypar/KaHyPar.jl/issues/12" data-hovercard-type="issue" data-hovercard-url="/kahypar/KaHyPar.jl/issues/12/hovercard">this</a> and <a href="https://github.com/kahypar/KaHyPar.jl/issues/19" data-hovercard-type="issue" data-hovercard-url="/kahypar/KaHyPar.jl/issues/19/hovercard">this</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Optimize a contraction order</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OMEinsumContractionOrders, Graphs, KaHyPar

julia&gt; function random_regular_eincode(n, k; optimize=nothing)
	    g = Graphs.random_regular_graph(n, k)
	    ixs = [[minmax(e.src,e.dst)...] for e in Graphs.edges(g)]
	    return EinCode([ixs..., [[i] for i in Graphs.vertices(g)]...], Int[])
    end
    
julia&gt; code = random_regular_eincode(200, 3);

julia&gt; optcode_tree = optimize_code(code, uniformsize(code, 2),
	TreeSA(sc_target=28, βs=0.1:0.1:10, ntrials=2, niters=100, sc_weight=3.0));

julia&gt; optcode_tree_with_slice = optimize_code(code, uniformsize(code, 2),
	TreeSA(sc_target=28, βs=0.1:0.1:10, ntrials=2, niters=100, sc_weight=3.0, nslices=5));

julia&gt; optcode_kahypar = optimize_code(code, uniformsize(code, 2), 
	KaHyParBipartite(sc_target=30, max_group_size=50));

julia&gt; optcode_sa = optimize_code(code, uniformsize(code, 2),
	SABipartite(sc_target=30, max_group_size=50));

julia&gt; timespace_complexity(code, uniformsize(code, 2))
(200.0, 0.0)

julia&gt; timespace_complexity(optcode_kahypar, uniformsize(code, 2))
(39.00774639886569, 28.0)

julia&gt; timespace_complexity(optcode_sa, uniformsize(code, 2))
(39.09524927371961, 28.0)

julia&gt; timespace_complexity(optcode_tree, uniformsize(code, 2))
(31.13883492534964, 27.0)

julia&gt; timespace_complexity(optcode_tree_with_slice, uniformsize(code, 2))
(31.292828948918775, 22.0)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OMEinsumContractionOrders, Graphs, KaHyPar

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">random_regular_eincode</span>(n, k; optimize<span class="pl-k">=</span><span class="pl-c1">nothing</span>)
	    g <span class="pl-k">=</span> Graphs<span class="pl-k">.</span><span class="pl-c1">random_regular_graph</span>(n, k)
	    ixs <span class="pl-k">=</span> [[<span class="pl-c1">minmax</span>(e<span class="pl-k">.</span>src,e<span class="pl-k">.</span>dst)<span class="pl-k">...</span>] <span class="pl-k">for</span> e <span class="pl-k">in</span> Graphs<span class="pl-k">.</span><span class="pl-c1">edges</span>(g)]
	    <span class="pl-k">return</span> <span class="pl-c1">EinCode</span>([ixs<span class="pl-k">...</span>, [[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> Graphs<span class="pl-k">.</span><span class="pl-c1">vertices</span>(g)]<span class="pl-k">.</span><span class="pl-k">..</span>], Int[])
    <span class="pl-k">end</span>
    
julia<span class="pl-k">&gt;</span> code <span class="pl-k">=</span> <span class="pl-c1">random_regular_eincode</span>(<span class="pl-c1">200</span>, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> optcode_tree <span class="pl-k">=</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>),
	<span class="pl-c1">TreeSA</span>(sc_target<span class="pl-k">=</span><span class="pl-c1">28</span>, βs<span class="pl-k">=</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, ntrials<span class="pl-k">=</span><span class="pl-c1">2</span>, niters<span class="pl-k">=</span><span class="pl-c1">100</span>, sc_weight<span class="pl-k">=</span><span class="pl-c1">3.0</span>));

julia<span class="pl-k">&gt;</span> optcode_tree_with_slice <span class="pl-k">=</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>),
	<span class="pl-c1">TreeSA</span>(sc_target<span class="pl-k">=</span><span class="pl-c1">28</span>, βs<span class="pl-k">=</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">0.1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, ntrials<span class="pl-k">=</span><span class="pl-c1">2</span>, niters<span class="pl-k">=</span><span class="pl-c1">100</span>, sc_weight<span class="pl-k">=</span><span class="pl-c1">3.0</span>, nslices<span class="pl-k">=</span><span class="pl-c1">5</span>));

julia<span class="pl-k">&gt;</span> optcode_kahypar <span class="pl-k">=</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>), 
	<span class="pl-c1">KaHyParBipartite</span>(sc_target<span class="pl-k">=</span><span class="pl-c1">30</span>, max_group_size<span class="pl-k">=</span><span class="pl-c1">50</span>));

julia<span class="pl-k">&gt;</span> optcode_sa <span class="pl-k">=</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>),
	<span class="pl-c1">SABipartite</span>(sc_target<span class="pl-k">=</span><span class="pl-c1">30</span>, max_group_size<span class="pl-k">=</span><span class="pl-c1">50</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">timespace_complexity</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>))
(<span class="pl-c1">200.0</span>, <span class="pl-c1">0.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">timespace_complexity</span>(optcode_kahypar, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>))
(<span class="pl-c1">39.00774639886569</span>, <span class="pl-c1">28.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">timespace_complexity</span>(optcode_sa, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>))
(<span class="pl-c1">39.09524927371961</span>, <span class="pl-c1">28.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">timespace_complexity</span>(optcode_tree, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>))
(<span class="pl-c1">31.13883492534964</span>, <span class="pl-c1">27.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">timespace_complexity</span>(optcode_tree_with_slice, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>))
(<span class="pl-c1">31.292828948918775</span>, <span class="pl-c1">22.0</span>)</pre></div>
<p dir="auto">It is already a part of <a href="https://github.com/under-Peter/OMEinsum.jl"><code>OMEinsum</code></a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OMEinsum

julia&gt; code = ein&quot;ij, jk, kl, il-&gt;&quot;
ij, jk, kl, il -&gt; 

julia&gt; optimize_code(code, uniformsize(code, 2), TreeSA())
SlicedEinsum{Char, NestedEinsum{DynamicEinCode{Char}}}(Char[], ki, ki -&gt; 
├─ jk, ij -&gt; ki
│  ├─ jk
│  └─ ij
└─ kl, il -&gt; ki
   ├─ kl
   └─ il
)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OMEinsum

julia<span class="pl-k">&gt;</span> code <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">ein</span>"</span>ij, jk, kl, il-&gt;<span class="pl-pds">"</span></span>
ij, jk, kl, il <span class="pl-k">-&gt;</span> 

julia<span class="pl-k">&gt;</span> <span class="pl-c1">optimize_code</span>(code, <span class="pl-c1">uniformsize</span>(code, <span class="pl-c1">2</span>), <span class="pl-c1">TreeSA</span>())
<span class="pl-c1">SlicedEinsum</span><span class="pl-c1">{Char, NestedEinsum{DynamicEinCode{Char}}}</span>(Char[], ki, ki <span class="pl-k">-&gt;</span> 
├─ jk, ij <span class="pl-k">-&gt;</span> ki
│  ├─ jk
│  └─ ij
└─ kl, il <span class="pl-k">-&gt;</span> ki
   ├─ kl
   └─ il
)</pre></div>
<h2 dir="auto"><a id="user-content-acknowledge-omeinsumomeinsumcontractionorders" class="anchor" aria-hidden="true" href="#acknowledge-omeinsumomeinsumcontractionorders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledge OMEinsum/OMEinsumContractionOrders</h2>
<p dir="auto">Since we do not have a paper to cite, we wish anyone who finds this package useful in his research can post a comment under this issue:
<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="1072584835" data-permission-text="Title is private" data-url="https://github.com/TensorBFS/OMEinsumContractionOrders.jl/issues/21" data-hovercard-type="issue" data-hovercard-url="/TensorBFS/OMEinsumContractionOrders.jl/issues/21/hovercard" href="https://github.com/TensorBFS/OMEinsumContractionOrders.jl/issues/21">#21</a></p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">If you find this package useful in your research, please cite the following papers</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@misc{Liu2022,
  doi = {10.48550/ARXIV.2205.03718},
  url = {https://arxiv.org/abs/2205.03718},
  author = {Liu, Jin-Guo and Gao, Xun and Cain, Madelyn and Lukin, Mikhail D. and Wang, Sheng-Tao},
  keywords = {Statistical Mechanics (cond-mat.stat-mech), FOS: Physical sciences, FOS: Physical sciences},
  title = {Computing solution space properties of combinatorial optimization problems via generic tensor networks},
  publisher = {arXiv},
  year = {2022},
  copyright = {Creative Commons Attribution 4.0 International}
}"><pre class="notranslate"><code>@misc{Liu2022,
  doi = {10.48550/ARXIV.2205.03718},
  url = {https://arxiv.org/abs/2205.03718},
  author = {Liu, Jin-Guo and Gao, Xun and Cain, Madelyn and Lukin, Mikhail D. and Wang, Sheng-Tao},
  keywords = {Statistical Mechanics (cond-mat.stat-mech), FOS: Physical sciences, FOS: Physical sciences},
  title = {Computing solution space properties of combinatorial optimization problems via generic tensor networks},
  publisher = {arXiv},
  year = {2022},
  copyright = {Creative Commons Attribution 4.0 International}
}
</code></pre></div>
<p dir="auto">To credit the <code>KaHyParBipartite</code> and <code>SABipartite</code> method,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@misc{Pan2021,
      title={Simulating the Sycamore quantum supremacy circuits}, 
      author={Feng Pan and Pan Zhang},
      year={2021},
      eprint={2103.03074},
      archivePrefix={arXiv},
      primaryClass={quant-ph}
}"><pre class="notranslate"><code>@misc{Pan2021,
      title={Simulating the Sycamore quantum supremacy circuits}, 
      author={Feng Pan and Pan Zhang},
      year={2021},
      eprint={2103.03074},
      archivePrefix={arXiv},
      primaryClass={quant-ph}
}
</code></pre></div>
<p dir="auto">To credit the <code>KaHyParBipartite</code> method,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@Article{10.21468/SciPostPhys.7.5.060,
	title={{Fast counting with tensor networks}},
	author={Stefanos Kourtis and Claudio Chamon and Eduardo R. Mucciolo and Andrei E. Ruckenstein},
	journal={SciPost Phys.},
	volume={7},
	issue={5},
	pages={60},
	year={2019},
	publisher={SciPost},
	doi={10.21468/SciPostPhys.7.5.060},
	url={https://scipost.org/10.21468/SciPostPhys.7.5.060},
}"><pre class="notranslate"><code>@Article{10.21468/SciPostPhys.7.5.060,
	title={{Fast counting with tensor networks}},
	author={Stefanos Kourtis and Claudio Chamon and Eduardo R. Mucciolo and Andrei E. Ruckenstein},
	journal={SciPost Phys.},
	volume={7},
	issue={5},
	pages={60},
	year={2019},
	publisher={SciPost},
	doi={10.21468/SciPostPhys.7.5.060},
	url={https://scipost.org/10.21468/SciPostPhys.7.5.060},
}
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@article{Gray2021,
   title={Hyper-optimized tensor network contraction},
   volume={5},
   ISSN={2521-327X},
   url={http://dx.doi.org/10.22331/q-2021-03-15-410},
   DOI={10.22331/q-2021-03-15-410},
   journal={Quantum},
   publisher={Verein zur Forderung des Open Access Publizierens in den Quantenwissenschaften},
   author={Gray, Johnnie and Kourtis, Stefanos},
   year={2021},
   month={Mar},
   pages={410}
}"><pre class="notranslate"><code>@article{Gray2021,
   title={Hyper-optimized tensor network contraction},
   volume={5},
   ISSN={2521-327X},
   url={http://dx.doi.org/10.22331/q-2021-03-15-410},
   DOI={10.22331/q-2021-03-15-410},
   journal={Quantum},
   publisher={Verein zur Forderung des Open Access Publizierens in den Quantenwissenschaften},
   author={Gray, Johnnie and Kourtis, Stefanos},
   year={2021},
   month={Mar},
   pages={410}
}
</code></pre></div>
<p dir="auto">To credit the <code>TreeSA</code> method,</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@misc{kalachev2021recursive,
      title={Recursive Multi-Tensor Contraction for XEB Verification of Quantum Circuits}, 
      author={Gleb Kalachev and Pavel Panteleev and Man-Hong Yung},
      year={2021},
      eprint={2108.05665},
      archivePrefix={arXiv},
      primaryClass={quant-ph}
}"><pre class="notranslate"><code>@misc{kalachev2021recursive,
      title={Recursive Multi-Tensor Contraction for XEB Verification of Quantum Circuits}, 
      author={Gleb Kalachev and Pavel Panteleev and Man-Hong Yung},
      year={2021},
      eprint={2108.05665},
      archivePrefix={arXiv},
      primaryClass={quant-ph}
}
</code></pre></div>
<h2 dir="auto"><a id="user-content-multi-gpu-computation" class="anchor" aria-hidden="true" href="#multi-gpu-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multi-GPU computation</h2>
<p dir="auto">Check this Gist:</p>
<p dir="auto"><a href="https://gist.github.com/GiggleLiu/d5b66c9883f0c5df41a440589983ab99">https://gist.github.com/GiggleLiu/d5b66c9883f0c5df41a440589983ab99</a></p>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<p dir="auto">Jin-Guo Liu and Pan Zhang</p>
</article></div>