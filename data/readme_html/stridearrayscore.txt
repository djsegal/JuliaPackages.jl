<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stridearrayscore" class="anchor" aria-hidden="true" href="#stridearrayscore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StrideArraysCore</h1>
<p dir="auto"><a href="https://JuliaSIMD.github.io/StrideArraysCore.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSIMD.github.io/StrideArraysCore.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/StrideArraysCore.jl/actions"><img src="https://github.com/JuliaSIMD/StrideArraysCore.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/StrideArraysCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/73963850fa45d7c7e2a397fbfb4734e896ce2130936ea46a26639c7acc17bab6/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f537472696465417272617973436f72652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSIMD/StrideArraysCore.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-caution" class="anchor" aria-hidden="true" href="#caution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Caution</h3>
<p dir="auto"><code>StrideArraysCore</code> (and <code>StrideArray</code>s) does not check bounds by default. To enable bounds checking (for both), define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="StrideArraysCore.boundscheck() = true"><pre>StrideArraysCore<span class="pl-k">.</span><span class="pl-en">boundscheck</span>() <span class="pl-k">=</span> <span class="pl-c1">true</span></pre></div>
<p dir="auto">Note, bounds checking is still disabled when using <code>@inbounds</code>, even if <code>boundscheck() == false</code>.
Starting Julia with <code>--check-bounds=yes</code> will automatically redefine <code>StrideArraysCore.boundscheck() = true</code>.</p>
<p dir="auto">Defines the core <code>PtrArray</code> type so that some libraries can make use of it internally without the need for circular dependencies.
<a href="https://github.com/chriselrod/StrideArrays.jl">StrideArrays</a> extends this type with many methods and functionality. It is
recommended you depend on and use <code>StrideArrays</code> instead.</p>
<p dir="auto">Example initialization:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using StrideArraysCore

julia&gt; A = StrideArray(undef, 2, 5) # `Float64` is default eltype
2×5 StrideArray{Tuple{Int64, Int64}, (true, true), Float64, 2, 1, 0, (1, 2), Tuple{StaticInt{8}, Int64}, Tuple{StaticInt{1}, StaticInt{1}}, Vector{Float64}}:
 1.5e-323  -2.0092e-237  4.94e-321   1.0e-322  1.6e-322
 1.6e-322   4.94e-322    1.235e-321  1.5e-323  2.0e-323

julia&gt; B = StrideArray{Float32}(zero, 2, 5) # can specify initialization function; function must have 1-arg method accepting eltype as argument
2×5 StrideArray{Tuple{Int64, Int64}, (true, true), Float32, 2, 1, 0, (1, 2), Tuple{StaticInt{4}, Int64}, Tuple{StaticInt{1}, StaticInt{1}}, Matrix{Float32}}:
 0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0

julia&gt; C = StrideArray{Float32}(one, static(2), 5) # sizes may optionally be static
2×5 StrideArray{Tuple{StaticInt{2}, Int64}, (true, true), Float32, 2, 1, 0, (1, 2), Tuple{StaticInt{4}, StaticInt{8}}, Tuple{StaticInt{1}, StaticInt{1}}, Vector{Float32}} with indices 1:1:2×Base.OneTo(5):
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0

julia&gt; D = StrideArray{Float32}(one, static(2), static(5)) # all sizes being static will allow the compiler to elide the allocation if the array does not escape.
2×5 StrideArraysCore.StaticStrideArray{Tuple{StaticInt{2}, StaticInt{5}}, (true, true), Float32, 2, 1, 0, (1, 2), Tuple{StaticInt{4}, StaticInt{8}}, Tuple{StaticInt{1}, StaticInt{1}}, 10} with indices 1:1:2×1:1:5:
 1.0  1.0  1.0  1.0  1.0
 1.0  1.0  1.0  1.0  1.0

julia&gt; using StrideArraysCore, BenchmarkTools

julia&gt; @inline function alloctest()
           D = StrideArray(one, static(2), static(5))
           s = 0.0
           for i in eachindex(D)
               s += D[i]
           end
           s
       end
alloctest (generic function with 1 method)

julia&gt; @btime alloctest()
  1.214 ns (0 allocations: 0 bytes)
10.0

julia&gt; @code_llvm debuginfo=:none alloctest() # compiler compiled-away function
define double @julia_alloctest_1199() #0 {
L67.9:
  ret double 1.000000e+01
}"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StrideArraysCore

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">StrideArray</span>(undef, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> `Float64` is default eltype</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> StrideArray{Tuple{Int64, Int64}, (<span class="pl-c1">true</span>, <span class="pl-c1">true</span>), Float64, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), Tuple{StaticInt{<span class="pl-c1">8</span>}, Int64}, Tuple{StaticInt{<span class="pl-c1">1</span>}, StaticInt{<span class="pl-c1">1</span>}}, Vector{Float64}}<span class="pl-k">:</span>
 <span class="pl-c1">1.5e-323</span>  <span class="pl-k">-</span><span class="pl-c1">2.0092e-237</span>  <span class="pl-c1">4.94e-321</span>   <span class="pl-c1">1.0e-322</span>  <span class="pl-c1">1.6e-322</span>
 <span class="pl-c1">1.6e-322</span>   <span class="pl-c1">4.94e-322</span>    <span class="pl-c1">1.235e-321</span>  <span class="pl-c1">1.5e-323</span>  <span class="pl-c1">2.0e-323</span>

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">StrideArray</span><span class="pl-c1">{Float32}</span>(zero, <span class="pl-c1">2</span>, <span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> can specify initialization function; function must have 1-arg method accepting eltype as argument</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> StrideArray{Tuple{Int64, Int64}, (<span class="pl-c1">true</span>, <span class="pl-c1">true</span>), Float32, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), Tuple{StaticInt{<span class="pl-c1">4</span>}, Int64}, Tuple{StaticInt{<span class="pl-c1">1</span>}, StaticInt{<span class="pl-c1">1</span>}}, Matrix{Float32}}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">StrideArray</span><span class="pl-c1">{Float32}</span>(one, <span class="pl-c1">static</span>(<span class="pl-c1">2</span>), <span class="pl-c1">5</span>) <span class="pl-c"><span class="pl-c">#</span> sizes may optionally be static</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> StrideArray{Tuple{StaticInt{<span class="pl-c1">2</span>}, Int64}, (<span class="pl-c1">true</span>, <span class="pl-c1">true</span>), Float32, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), Tuple{StaticInt{<span class="pl-c1">4</span>}, StaticInt{<span class="pl-c1">8</span>}}, Tuple{StaticInt{<span class="pl-c1">1</span>}, StaticInt{<span class="pl-c1">1</span>}}, Vector{Float32}} with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span>Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">5</span>)<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">StrideArray</span><span class="pl-c1">{Float32}</span>(one, <span class="pl-c1">static</span>(<span class="pl-c1">2</span>), <span class="pl-c1">static</span>(<span class="pl-c1">5</span>)) <span class="pl-c"><span class="pl-c">#</span> all sizes being static will allow the compiler to elide the allocation if the array does not escape.</span>
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">5</span> StrideArraysCore<span class="pl-k">.</span>StaticStrideArray{Tuple{StaticInt{<span class="pl-c1">2</span>}, StaticInt{<span class="pl-c1">5</span>}}, (<span class="pl-c1">true</span>, <span class="pl-c1">true</span>), Float32, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">0</span>, (<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), Tuple{StaticInt{<span class="pl-c1">4</span>}, StaticInt{<span class="pl-c1">8</span>}}, Tuple{StaticInt{<span class="pl-c1">1</span>}, StaticInt{<span class="pl-c1">1</span>}}, <span class="pl-c1">10</span>} with indices <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> StrideArraysCore, BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@inline</span> <span class="pl-k">function</span> <span class="pl-en">alloctest</span>()
           D <span class="pl-k">=</span> <span class="pl-c1">StrideArray</span>(one, <span class="pl-c1">static</span>(<span class="pl-c1">2</span>), <span class="pl-c1">static</span>(<span class="pl-c1">5</span>))
           s <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
           <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(D)
               s <span class="pl-k">+=</span> D[i]
           <span class="pl-k">end</span>
           s
       <span class="pl-k">end</span>
alloctest (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">alloctest</span>()
  <span class="pl-c1">1.214</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">10.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_llvm</span> debuginfo<span class="pl-k">=</span><span class="pl-c1">:none</span> <span class="pl-c1">alloctest</span>() <span class="pl-c"><span class="pl-c">#</span> compiler compiled-away function</span>
define double <span class="pl-c1">@julia_alloctest_1199</span>() <span class="pl-c"><span class="pl-c">#</span>0 {</span>
L67.<span class="pl-c1">9</span><span class="pl-k">:</span>
  ret double <span class="pl-c1">1.000000e+01</span>
}</pre></div>
</article></div>