<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-poltergeistjl" class="anchor" aria-hidden="true" href="#poltergeistjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Poltergeist.jl</h1>
<p><a href="https://travis-ci.org/wormell/Poltergeist.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46f085a9e4fc434662650452c2a1cbb0f870e434/68747470733a2f2f7472617669732d63692e6f72672f776f726d656c6c2f506f6c74657267656973742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/wormell/Poltergeist.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/wormell/Poltergeist.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7b70f12b6582a834569cd829632f095aafa49d20/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f776f726d656c6c2f506f6c74657267656973742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/wormell/Poltergeist.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Poltergeist is a package for quick, accurate and abstract approximation of statistical properties of one-dimensional chaotic dynamical systems.</p>
<p>It treats chaotic systems through the framework of spectral methods (i.e. transfer operator-based approaches to dynamical systems) and is numerically implemented via spectral methods (e.g. Fourier and Chebyshev). For the latter, Poltergeist relies on and closely interfaces with the adaptive function approximation package <a href="https://github.com/ApproxFun/ApproxFun.jl">ApproxFun</a>.</p>
<p>The use of highly accurate Fourier and Chebyshev approximations means spectrally fast convergence: one can calculate acims to 15 digits of accuracy in a fraction of a second.</p>
<p>As an example, take your favourite Markov interval map and give it digital form:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Poltergeist, ApproxFun
d <span class="pl-k">=</span> <span class="pl-c1">0..1</span>.
f1 <span class="pl-k">=</span> <span class="pl-c1">2</span>x<span class="pl-k">+</span><span class="pl-en">sin</span>(<span class="pl-c1">2</span>pi<span class="pl-k">*</span>x)<span class="pl-k">/</span><span class="pl-c1">6</span>; <span class="pl-en">f2</span>(x) <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">-</span><span class="pl-c1">2</span>x
f <span class="pl-k">=</span> <span class="pl-c1">MarkovMap</span>([f1,f2],[<span class="pl-c1">0..0.5</span>,<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">1</span>])
<span class="pl-c1">f</span>(<span class="pl-c1">0.25</span>), f<span class="pl-k">'</span>(<span class="pl-c1">0.25</span>)</pre></div>

<p>Similarly, take a circle map, or maps defined by modulo or inverse:</p>
<div class="highlight highlight-source-julia"><pre>c <span class="pl-k">=</span> <span class="pl-c1">CircleMap</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">4</span>x <span class="pl-k">+</span> <span class="pl-c1">sin</span>(<span class="pl-c1">2</span>pi<span class="pl-k">*</span>x)<span class="pl-k">/</span><span class="pl-c1">2</span>pi,<span class="pl-c1">PeriodicSegment</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))
lanford <span class="pl-k">=</span> <span class="pl-c1">modulomap</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">2</span>x<span class="pl-k">+</span>x<span class="pl-k">*</span>(<span class="pl-c1">1</span><span class="pl-k">-</span>x)<span class="pl-k">/</span><span class="pl-c1">2</span>,<span class="pl-c1">0..1</span>) <span class="pl-c"><span class="pl-c">#</span> Or call lanford()</span>
doubling <span class="pl-k">=</span> <span class="pl-c1">MarkovMap</span>([x<span class="pl-k">-&gt;</span>x<span class="pl-k">/</span><span class="pl-c1">2</span>,x<span class="pl-k">-&gt;</span>(x<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">2</span>],[<span class="pl-c1">0..0.5</span>,<span class="pl-c1">0.5</span><span class="pl-k">..</span><span class="pl-c1">1</span>],dir<span class="pl-k">=</span>Reverse) <span class="pl-c"><span class="pl-c">#</span> or doubling(0..1)</span></pre></div>

<p>Calling <code>Transfer</code> on an <code>AbstractMarkovMap</code> type automatically creates an ApproxFun <code>Operator</code>, with which you can do (numerically) all the kinds of things one expects from linear operators on function spaces:</p>
<div class="highlight highlight-source-julia"><pre>L <span class="pl-k">=</span> <span class="pl-c1">Transfer</span>(f)
f0 <span class="pl-k">=</span> <span class="pl-c1">Fun</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">sin</span>(<span class="pl-c1">3</span>pi<span class="pl-k">*</span>x),d) <span class="pl-c"><span class="pl-c">#</span>ApproxFun function</span>
f1 <span class="pl-k">=</span> L<span class="pl-k">*</span>f0
g <span class="pl-k">=</span> ((<span class="pl-c1">2</span>I<span class="pl-k">-</span>L)<span class="pl-k">\</span>f0)<span class="pl-k">'</span>
<span class="pl-c1">det</span>(I<span class="pl-k">-</span><span class="pl-c1">4</span>L) <span class="pl-c"><span class="pl-c">#</span> Fredholm determinant</span>

<span class="pl-k">using</span> Plots
<span class="pl-c1">scatter</span>(<span class="pl-c1">eigvals</span>(L,<span class="pl-c1">80</span>))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/johnwormell/Poltergeist.jl/raw/master/images/eigvals.png"><img src="https://github.com/johnwormell/Poltergeist.jl/raw/master/images/eigvals.png" width="500" style="max-width:100%;"></a></p>
<p>In particular, you can solve for many statistical properties, many of which Poltergeist has built-in commands for. Most of these commands allow you to use the <code>MarkovMap</code> directly (bad, zero caching between uses), transfer operator (caches transfer operator entries, usually the slowest step), or the <code>SolutionInv</code> operator (caches QR factorisation as well).</p>
<div class="highlight highlight-source-julia"><pre>K <span class="pl-k">=</span> <span class="pl-c1">SolutionInv</span>(L)
ρ <span class="pl-k">=</span> <span class="pl-c1">acim</span>(K)
<span class="pl-c1">@test</span> ρ <span class="pl-k">==</span> K<span class="pl-k">\</span><span class="pl-c1">Fun</span>(one,d)
<span class="pl-c1">birkhoffvar</span>(K,<span class="pl-c1">Fun</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>,d))
<span class="pl-c1">birkhoffcov</span>(K,<span class="pl-c1">Fun</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>,d),<span class="pl-c1">Fun</span>(identity,d))
dρ <span class="pl-k">=</span> <span class="pl-c1">linearresponse</span>(K,<span class="pl-c1">Fun</span>(sinpi,d))

<span class="pl-c1">plot</span>(ρ)
ε <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
<span class="pl-c1">plot!</span>(ρ <span class="pl-k">+</span> ε<span class="pl-k">*</span>dρ,title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Linear response<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">acim</span>(<span class="pl-c1">perturb</span>(M,sinpi,ϵ)))</pre></div>

<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/johnwormell/Poltergeist.jl/raw/master/images/acim.png"><img src="https://github.com/johnwormell/Poltergeist.jl/raw/master/images/acim.png" width="500" style="max-width:100%;"></a></p>
<h2><a id="user-content-publications" class="anchor" aria-hidden="true" href="#publications"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Publications</h2>
<p>This package is based on academic work. If you find this package useful in your work, please kindly cite as appropriate:</p>
<ul>
<li>C. Wormell (2017), Spectral Galerkin methods for transfer operators in uniformly expanding dynamics (<a href="https://arxiv.org/abs/1705.04431" rel="nofollow">preprint</a>)</li>
</ul>

<ul>
<li>Literature <a href="https://github.com/JuliaApproximation/ApproxFun.jl#references">on ApproxFun</a>.</li>
</ul>

</article></div>