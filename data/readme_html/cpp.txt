<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cppjl" class="anchor" aria-hidden="true" href="#cppjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cpp.jl</h1>
<p dir="auto">Simple utilities for calling C++ from Julia</p>
<p dir="auto">See also <a href="https://github.com/JuliaInterop/CxxWrap.jl">CxxWrap</a>, <a href="https://github.com/ihnorton/Clang.jl">Clang</a>, and <a href="https://github.com/Keno/Cxx.jl">Cxx</a>.
CxxWrap is the recommended solution for calling C++ and supersedes this package.</p>
<h1 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h1>
<p dir="auto"><a href="http://julialang.org" title="Julia" rel="nofollow">Julia</a> can call C code with no overhead, but it does not natively
support C++. However, the C++ <a href="http://en.wikipedia.org/wiki/Application_binary_interface" title="application binary interface" rel="nofollow">ABI</a> is essentially "C plus some extra
conventions," of which the most noteworthy is <a href="http://en.wikipedia.org/wiki/Name_mangling" title="name mangling" rel="nofollow">name mangling</a>. Name
mangling is used to support function overloading, a key C++ (and Julia) feature.
Infamously, different compilers use different mangling conventions, and this has
lead to more than a few headaches. However, in recent years there has been a
greater push for standardization of the C++ ABI, and there is <a href="http://www.agner.org/optimize/calling_conventions.pdf" title="C++ ABI" rel="nofollow">good
documentation</a> available on calling conventions of different compilers.</p>
<p dir="auto">This package provides utilities to call functions in C++ shared libraries as if
they were C. Currently it consists of a single macro, <code>@cpp</code>.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<p dir="auto">Install from the Julia prompt via <code>Pkg.add("Cpp")</code>.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">An example C++ shared library, <code>libdemo</code>, is provided in the <code>deps</code> directory.
It contains the function <code>timestwo</code>, defined for two different C++ types:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=" int timestwo(int x) {
   return 2*x;
 }

 double timestwo(double x) {
   return 2*x;
 }"><pre class="notranslate"><code> int timestwo(int x) {
   return 2*x;
 }

 double timestwo(double x) {
   return 2*x;
 }
</code></pre></div>
<p dir="auto">Within Julia, let's suppose you've defined the variable <code>libdemo</code> to be a constant string
containing the path to this library. You can use these functions by placing the
<code>@cpp</code> macro prior to a ccall, for example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content=" x = 3.5
 x2 = @cpp ccall((:timestwo, libdemo), Float64, (Float64,), x)
 y = 3
 y2 = @cpp ccall((:timestwo, libdemo), Int, (Int,), y)"><pre class="notranslate"><code> x = 3.5
 x2 = @cpp ccall((:timestwo, libdemo), Float64, (Float64,), x)
 y = 3
 y2 = @cpp ccall((:timestwo, libdemo), Int, (Int,), y)
</code></pre></div>
<p dir="auto">The macro performs C++ ABI name-mangling, using the types of the parameters, to determine the correct library symbol. On a UNIX/gcc system, the first will generate a call to
<code>_Z8timestwod</code>, and the second to <code>_Z8timestwoi</code>.</p>
<h1 dir="auto"><a id="user-content-limitationstodo" class="anchor" aria-hidden="true" href="#limitationstodo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations/TODO</h1>
<p dir="auto">Like <code>ccall</code>, this performs library calls without overhead. However, currently
it has a number of limitations:</p>
<ul dir="auto">
<li>It does not support pure-header libraries</li>
<li>Using C++ objects has not been tested, and probably won't work without additional effort</li>
<li>Currently there is no C++ namespace support</li>
<li>Currently there is no support for templated functions</li>
<li>Currently only g++ is supported</li>
</ul>
<p dir="auto">The latter three may not be difficult to <a href="http://www.agner.org/optimize/calling_conventions.pdf" title="C++ ABI" rel="nofollow">fix</a>.</p>
</article></div>