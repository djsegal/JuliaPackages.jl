<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cppjl" class="anchor" aria-hidden="true" href="#cppjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cpp.jl</h1>
<p>Simple utilities for calling C++ from Julia</p>
<p>See also <a href="https://github.com/ihnorton/Clang.jl">Clang</a> and <a href="https://github.com/Keno/Cxx.jl">Cxx</a>.
The latter is expected to be the long-term solution for calling C++.</p>
<h1><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h1>
<p><a href="http://julialang.org" title="Julia" rel="nofollow">Julia</a> can call C code with no overhead, but it does not natively
support C++. However, the C++ <a href="http://en.wikipedia.org/wiki/Application_binary_interface" title="application binary interface" rel="nofollow">ABI</a> is essentially "C plus some extra
conventions," of which the most noteworthy is <a href="http://en.wikipedia.org/wiki/Name_mangling" title="name mangling" rel="nofollow">name mangling</a>. Name
mangling is used to support function overloading, a key C++ (and Julia) feature.
Infamously, different compilers use different mangling conventions, and this has
lead to more than a few headaches. However, in recent years there has been a
greater push for standardization of the C++ ABI, and there is <a href="http://www.agner.org/optimize/calling_conventions.pdf" title="C++ ABI" rel="nofollow">good
documentation</a> available on calling conventions of different compilers.</p>
<p>This package provides utilities to call functions in C++ shared libraries as if
they were C. Currently it consists of a single macro, <code>@cpp</code>.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h1>
<p>Install from the Julia prompt via <code>Pkg.add("Cpp")</code>.</p>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<p>An example C++ shared library, <code>libdemo</code>, is provided in the <code>deps</code> directory.
It contains the function <code>timestwo</code>, defined for two different C++ types:</p>
<pre><code> int timestwo(int x) {
   return 2*x;
 }

 double timestwo(double x) {
   return 2*x;
 }
</code></pre>
<p>Within Julia, let's suppose you've defined the variable <code>libdemo</code> to be a constant string
containing the path to this library. You can use these functions by placing the
<code>@cpp</code> macro prior to a ccall, for example:</p>
<pre><code> x = 3.5
 x2 = @cpp ccall((:timestwo, libdemo), Float64, (Float64,), x)
 y = 3
 y2 = @cpp ccall((:timestwo, libdemo), Int, (Int,), y)
</code></pre>
<p>The macro performs C++ ABI name-mangling, using the types of the parameters, to determine the correct library symbol. On a UNIX/gcc system, the first will generate a call to
<code>_Z8timestwod</code>, and the second to <code>_Z8timestwoi</code>.</p>
<h1><a id="user-content-limitationstodo" class="anchor" aria-hidden="true" href="#limitationstodo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limitations/TODO</h1>
<p>Like <code>ccall</code>, this performs library calls without overhead. However, currently
it has a number of limitations:</p>
<ul>
<li>It does not support pure-header libraries</li>
<li>Using C++ objects has not been tested, and probably won't work without additional effort</li>
<li>Currently there is no C++ namespace support</li>
<li>Currently there is no support for templated functions</li>
<li>Currently only g++ is supported</li>
</ul>
<p>The latter three may not be difficult to <a href="http://www.agner.org/optimize/calling_conventions.pdf" title="C++ ABI" rel="nofollow">fix</a>.</p>
</article></div>