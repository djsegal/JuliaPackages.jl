<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mdbmjl" class="anchor" aria-hidden="true" href="#mdbmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MDBM.jl</h1>
<p><a href="http://numfocus.org" rel="nofollow"><img src="https://camo.githubusercontent.com/a8484140207659af672a0a1784c5b9277647bb79/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706f776572656425323062792d4e756d464f4355532d6f72616e67652e7376673f7374796c653d666c617426636f6c6f72413d45313532334426636f6c6f72423d303037443841" alt="Powered by NumFOCUS" data-canonical-src="https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&amp;colorA=E1523D&amp;colorB=007D8A" style="max-width:100%;"></a></p>
<p>Multi-Dimensional Bisection Method (MDBM) is an efficient and robust root-finding algorithm, which can be used to determine whole high-dimensional submanifolds (points, curves, surfacesâ€¦) of the roots of implicit non-linear equation systems, especially in cases, where the number of unknowns surpasses the number of equations.</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=f_i(x_j)=0&amp;space;\quad&amp;space;i=1...k&amp;space;\quad&amp;space;j=1...l,&amp;space;\quad&amp;space;k&amp;space;\leq&amp;space;l" rel="nofollow"><img src="https://camo.githubusercontent.com/b8d682d215ad0970dd0de905ca562a15c2483dd5/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f665f6928785f6a293d302673706163653b5c717561642673706163653b693d312e2e2e6b2673706163653b5c717561642673706163653b6a3d312e2e2e6c2c2673706163653b5c717561642673706163653b6b2673706163653b5c6c65712673706163653b6c" title="f_i(x_j)=0 \quad i=1...k \quad j=1...l, \quad k \leq l" data-canonical-src="https://latex.codecogs.com/gif.latex?f_i(x_j)=0&amp;space;\quad&amp;space;i=1...k&amp;space;\quad&amp;space;j=1...l,&amp;space;\quad&amp;space;k&amp;space;\leq&amp;space;l" style="max-width:100%;"></a></p>
<p>This type of problems can be found in many different field of science, just to mention a few:</p>
<ul>
<li>differential geometry (isolines, isosurfaces in higher dimensions)</li>
<li>analysis of linkages (mechanical: workspace of robots)</li>
<li>stability computation, stabilyzability diagrams</li>
</ul>
<p>This method is an alternative to the contour plot or to isosurfaces in higher dimension, however, it has as the advantage of being able to handle multiple functions at once. <br>
In addition, it uses far less function evaluation than the brute-force approach, making it much faster and more memory efficient, especially for complex tasks.</p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>The bisection method - or the so-called interval halving method - is one of the simplest root-finding algorithms which is used to find zeros of continuous non-linear functions.
This method is very robust and it always tends to the solution if the signs of the function values are different at the borders of the chosen initial interval.</p>
<p>Geometrically, root-finding algorithms of <strong>f</strong>(<strong>x</strong>)=0 find one intersection point of the graph of the function with the axis of the independent variable.
In many applications, this 1-dimensional intersection problem must be extended to higher dimensions, e.g.: intersections of surfaces in a 3D space (volume), which can be described as a system on non-linear implicit equations. In higher dimensions, the existence of multiple solutions becomes very important, since the intersection of two surfaces can create multiple intersection curves.</p>
<p>MDBM algorithm can handle:</p>
<ul>
<li>multiple solutions</li>
<li>arbitrary number of variable (typically: 3-6)</li>
<li>arbitrary number of implicit equations</li>
<li>multiple constraints in the parameter space</li>
<li>degenerated functions</li>
</ul>
<p>while providing the gradients of the equations for the roots by means of first order interpolation (and convergence rate).</p>
<h2><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing</h2>
<p>The software in this ecosystem was developed as part of academic research. If you use the MDBM.jl package as part of your research, teaching, or other work, I would be grateful if you could cite my corresponding publication: <a href="https://pp.bme.hu/me/article/view/1236/640" rel="nofollow">https://pp.bme.hu/me/article/view/1236/640</a></p>
<h2><a id="user-content-web" class="anchor" aria-hidden="true" href="#web"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Web:</h2>
<p><a href="https://www.mm.bme.hu/~bachrathy/research_EN.html" rel="nofollow">https://www.mm.bme.hu/~bachrathy/research_EN.html</a></p>
<h1><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h1>
<p>Preparation</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MDBM

<span class="pl-k">using</span> PyPlot;
<span class="pl-c1">pygui</span>(<span class="pl-c1">true</span>);</pre></div>
<h2><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1</h2>
<p>Computation of a circle section defined by the implicit equation <code>foo(x,y) == 0</code> and by the constraint <code>c(x,y) &gt; 0</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">foo</span>(x,y)
    x<span class="pl-k">^</span><span class="pl-c1">2.0</span><span class="pl-k">+</span>y<span class="pl-k">^</span><span class="pl-c1">2.0</span><span class="pl-k">-</span><span class="pl-c1">2.0</span><span class="pl-k">^</span><span class="pl-c1">2.0</span>
<span class="pl-k">end</span>
<span class="pl-k">function</span> <span class="pl-en">c</span>(x,y) <span class="pl-c"><span class="pl-c">#</span>only the c&gt;0 domain is analysed</span>
    x<span class="pl-k">-</span>y
<span class="pl-k">end</span>

ax1<span class="pl-k">=</span><span class="pl-c1">Axis</span>([<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-k">-</span><span class="pl-c1">2.5</span>,<span class="pl-c1">0</span>,<span class="pl-c1">2.5</span>,<span class="pl-c1">5</span>],<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> initial grid in x direction</span>
ax2<span class="pl-k">=</span><span class="pl-c1">Axis</span>(<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5.0</span>,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> initial grid in y direction</span>

mymdbm<span class="pl-k">=</span><span class="pl-c1">MDBM_Problem</span>(foo,[ax1,ax2],constraint<span class="pl-k">=</span>c)
iteration<span class="pl-k">=</span><span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span>number of refinements (resolution doubling)</span>
<span class="pl-c1">solve!</span>(mymdbm,iteration)


<span class="pl-c"><span class="pl-c">#</span>points where the function foo was evaluated</span>
x_eval,y_eval<span class="pl-k">=</span><span class="pl-c1">getevaluatedpoints</span>(mymdbm)

<span class="pl-c"><span class="pl-c">#</span>interpolated points of the solution (approximately where foo(x,y) == 0 and c(x,y)&gt;0)</span>
x_sol,y_sol<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(mymdbm)

fig <span class="pl-k">=</span> <span class="pl-c1">figure</span>(<span class="pl-c1">1</span>);<span class="pl-c1">clf</span>()
<span class="pl-c1">scatter</span>(x_eval,y_eval,s<span class="pl-k">=</span><span class="pl-c1">5</span>)
<span class="pl-c1">scatter</span>(x_sol,y_sol,s<span class="pl-k">=</span><span class="pl-c1">5</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="assets/circe_2D_points.png"><img src="assets/circe_2D_points.png" alt="solution " style="max-width:100%;"></a></p>
<p>Perform the line connection</p>
<div class="highlight highlight-source-julia"><pre>myDT1<span class="pl-k">=</span><span class="pl-c1">connect</span>(mymdbm);
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(myDT1)
    dt<span class="pl-k">=</span>myDT1[i]
    P1<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(mymdbm<span class="pl-k">.</span>ncubes[dt[<span class="pl-c1">1</span>]],mymdbm)
    P2<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(mymdbm<span class="pl-k">.</span>ncubes[dt[<span class="pl-c1">2</span>]],mymdbm)
    <span class="pl-c1">plot</span>([P1[<span class="pl-c1">1</span>],P2[<span class="pl-c1">1</span>]],[P1[<span class="pl-c1">2</span>],P2[<span class="pl-c1">2</span>]], color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="assets/circe_2D_line.png"><img src="assets/circe_2D_line.png" alt="solution " style="max-width:100%;"></a></p>
<h2><a id="user-content-example-2" class="anchor" aria-hidden="true" href="#example-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2</h2>
<p>Intersection of two sphere in 3D</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LinearAlgebra

axes<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>]

fig <span class="pl-k">=</span> <span class="pl-c1">figure</span>(<span class="pl-c1">3</span>);<span class="pl-c1">clf</span>()


<span class="pl-c"><span class="pl-c">#</span>Sphere1</span>
<span class="pl-en">fS1</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x,<span class="pl-c1">2.0</span>)<span class="pl-k">-</span><span class="pl-c1">1</span>

Sphere1mdbm<span class="pl-k">=</span><span class="pl-c1">MDBM_Problem</span>(fS1,axes)
<span class="pl-c1">solve!</span>(Sphere1mdbm,<span class="pl-c1">4</span>)
a_sol,b_sol,c_sol<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(Sphere1mdbm)
<span class="pl-c1">plot3D</span>(a_sol,b_sol,c_sol,linestyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, marker<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">1</span>);


<span class="pl-c"><span class="pl-c">#</span>Sphere2</span>
<span class="pl-en">fS2</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x <span class="pl-k">.-</span> <span class="pl-c1">0.5</span>, <span class="pl-c1">2.0</span>) <span class="pl-k">-</span><span class="pl-c1">1.0</span>

Sphere2mdbm<span class="pl-k">=</span><span class="pl-c1">MDBM_Problem</span>(fS2,axes)
<span class="pl-c1">solve!</span>(Sphere2mdbm,<span class="pl-c1">4</span>)
a_sol,b_sol,c_sol<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(Sphere2mdbm)
<span class="pl-c1">plot3D</span>(a_sol,b_sol,c_sol,linestyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, marker<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">1</span>);

<span class="pl-c"><span class="pl-c">#</span>Intersection</span>
<span class="pl-en">fS12</span>(x<span class="pl-k">...</span>) <span class="pl-k">=</span> (<span class="pl-c1">fS1</span>(x<span class="pl-k">...</span>), <span class="pl-c1">fS2</span>(x<span class="pl-k">...</span>))

Intersectmdbm<span class="pl-k">=</span><span class="pl-c1">MDBM_Problem</span>(fS12,axes)
<span class="pl-c1">solve!</span>(Intersectmdbm,<span class="pl-c1">6</span>)
a_sol,b_sol,c_sol<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(Intersectmdbm)
<span class="pl-c1">plot3D</span>(a_sol,b_sol,c_sol,color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>,linestyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, marker<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">2</span>);
</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="assets/sphere_intersection.png"><img src="assets/sphere_intersection.png" alt="solution " style="max-width:100%;"></a></p>
<h2><a id="user-content-example-3" class="anchor" aria-hidden="true" href="#example-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 3</h2>
<p>Mandelbrot set (example for a non-smooth problem)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">mandelbrot</span>(x,y)    
    c<span class="pl-k">=</span>x<span class="pl-k">+</span>y<span class="pl-k">*</span>im
    z<span class="pl-k">=</span><span class="pl-c1">Complex</span>(<span class="pl-c1">zero</span>(c))
    k<span class="pl-k">=</span><span class="pl-c1">0</span>
    maxiteration<span class="pl-k">=</span><span class="pl-c1">1000</span>
    <span class="pl-k">while</span> (k<span class="pl-k">&lt;</span>maxiteration <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">abs</span>(z)<span class="pl-k">&lt;</span><span class="pl-c1">4</span>)
            z<span class="pl-k">=</span>z<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>c
            k<span class="pl-k">=</span>k<span class="pl-k">+</span><span class="pl-c1">1</span>
        <span class="pl-k">end</span>
    <span class="pl-k">return</span> <span class="pl-c1">abs</span>(z)<span class="pl-k">-</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>

Mandelbrotmdbm<span class="pl-k">=</span><span class="pl-c1">MDBM_Problem</span>(mandelbrot,[<span class="pl-k">-</span><span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">2</span>])
<span class="pl-c1">solve!</span>(Mandelbrotmdbm,<span class="pl-c1">9</span>)
a_sol,b_sol<span class="pl-k">=</span><span class="pl-c1">getinterpolatedsolution</span>(Mandelbrotmdbm)
fig <span class="pl-k">=</span> <span class="pl-c1">figure</span>(<span class="pl-c1">3</span>);<span class="pl-c1">clf</span>()
<span class="pl-c1">plot</span>(a_sol,b_sol,linestyle<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, marker<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, markersize<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="assets/Mandelbrot.png"><img src="assets/Mandelbrot.png" alt="solution " style="max-width:100%;"></a></p>
<h2><a id="user-content-history" class="anchor" aria-hidden="true" href="#history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>History</h2>
<p>I am an assistant professor at the Budapest University of Technology and Economics, at the Faculty of Mechanical Engineering, the Department of Applied Mechanics.
During my studies and research, I have to determine stability charts of models described by delayed differential equations, which are typically formed as a "3 parameter / 2 implicit equation" problem. I have faced the difficulty that there is no applicable solution in any available software (e.g.: Mathematica, Matlab,...) which could easily be used in engineering problems.
Due to this reason, I have started to develop the Multi-Dimensional Bisection Method since 2006 in Matlab, and I have been improving it since, by adding new features from time to time.<br>
I hope that others also find this package a useful tool in their work.</p>
<p>Best regards,
Dr. Daniel Bachrathy</p>
<h1></h1>
<p><a target="_blank" rel="noopener noreferrer" href="assets/numfocus-logo.png"><img src="assets/numfocus-logo.png" alt="NumFOCUS logo" style="max-width:100%;"></a></p>
<p>MDBM is a fiscally sponsored project of <a href="https://numfocus.org" rel="nofollow">NumFOCUS</a>, a
nonprofit dedicated to supporting the open source scientific computing
community.</p>
</article></div>