<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-ulammethodjl" class="anchor" aria-hidden="true" href="#ulammethodjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>UlamMethod.jl</h1>
<p dir="auto"><a href="https://70gage70.github.io/UlamMethod.jl/" rel="nofollow"><img src="src/assets/docu.svg" alt="&quot;Documentation link&quot;" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto">This package is an implementation of Ulam's method <sup><a href="#user-content-fn-1-d02b968ac8ea5d64f76fa22d75a6b21f" id="user-content-fnref-1-d02b968ac8ea5d64f76fa22d75a6b21f" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup> <sup><a href="#user-content-fn-2-d02b968ac8ea5d64f76fa22d75a6b21f" id="user-content-fnref-2-d02b968ac8ea5d64f76fa22d75a6b21f" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup> (see also Galerkin projection <sup><a href="#user-content-fn-3-d02b968ac8ea5d64f76fa22d75a6b21f" id="user-content-fnref-3-d02b968ac8ea5d64f76fa22d75a6b21f" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup>) for the discretization of a stochastic operator using pure Julia. Given a set of two-dimensional, one-step trajectories</p>
<math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$$(x_{0, 1}, y_{0, 1}) \to  (x_{T, 1}, y_{T, 1}), (x_{0, 2}, y_{0, 2}) \to  (x_{T, 2}, y_{T, 2}) \dots$$</math-renderer>
<p dir="auto">defined in a domain, the essential goal of Ulam's method is to partition the domain into a series of non-intersecting regions and construct a transition probability matrix <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$P$</math-renderer> on these regions. In UlamMethod.jl, this is accomplished in two main steps</p>
<ol dir="auto">
<li>The user provides a polygon containing the data, and covering of the the domain is generated by polygons according to one of several different [binning algorithms](@ref binning).</li>
<li>The number of trajectories beginning in polygon <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$i$</math-renderer> and ending in polygon <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$j$</math-renderer> is used to create the entry <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$P_{i, j}$</math-renderer> of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$P$</math-renderer> such that the edges of the domain are handled by a [stochasticization algorithm](@ref stoc).</li>
</ol>
<p dir="auto">The polygons which form the covering and the transition probability matrix are the main outputs.</p>
<h2 dir="auto">
<a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In the Julia REPL, run the following code and follow the prompts:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;UlamMethod&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>UlamMethod<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Make the functions in this package available to use in your code by including the following line:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UlamMethod"><pre><span class="pl-k">using</span> UlamMethod</pre></div>
<h2 dir="auto">
<a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<p dir="auto">The core functionality is provided by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ulam_method(traj::UlamTrajectories, domain::UlamDomain)"><pre><span class="pl-c1">ulam_method</span>(traj<span class="pl-k">::</span><span class="pl-c1">UlamTrajectories</span>, domain<span class="pl-k">::</span><span class="pl-c1">UlamDomain</span>)</pre></div>
<p dir="auto">where <code>traj</code> contains information about trajectories and <code>domain</code> contains information about the domain and covering. Here are <code>10000</code> random trajectories in the domain <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$[0, 10]^2$</math-renderer></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using UlamMethod

n_data = 10000
x0, y0, xT, yT = 10*rand(n_data), 10*rand(n_data), 10*rand(n_data), 10*rand(n_data)
traj = UlamTrajectories(x0 = x0, y0 = y0, xT = xT, yT = yT)"><pre><span class="pl-k">using</span> UlamMethod

n_data <span class="pl-k">=</span> <span class="pl-c1">10000</span>
x0, y0, xT, yT <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(n_data), <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(n_data), <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(n_data), <span class="pl-c1">10</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(n_data)
traj <span class="pl-k">=</span> <span class="pl-c1">UlamTrajectories</span>(x0 <span class="pl-k">=</span> x0, y0 <span class="pl-k">=</span> y0, xT <span class="pl-k">=</span> xT, yT <span class="pl-k">=</span> yT)</pre></div>
<p dir="auto">We will take our domain to be the rectangular subset <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="d02b968ac8ea5d64f76fa22d75a6b21f">$[3, 5] \times [4, 8]$</math-renderer> and generate a covering with 40 rectangles.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xmin, xmax, ymin, ymax = 3, 5, 4, 8
domain = UlamDomain(xmin, xmax, ymin, ymax, poly_type = &quot;rec&quot;, poly_number = 40)"><pre>xmin, xmax, ymin, ymax <span class="pl-k">=</span> <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">4</span>, <span class="pl-c1">8</span>
domain <span class="pl-k">=</span> <span class="pl-c1">UlamDomain</span>(xmin, xmax, ymin, ymax, poly_type <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>rec<span class="pl-pds">"</span></span>, poly_number <span class="pl-k">=</span> <span class="pl-c1">40</span>)</pre></div>
<p dir="auto">Run Ulam's method.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ulam = ulam_method(traj, domain)    # the main calculation

ulam.P_closed                       # the transition matrix
pt = PolyTable(ulam.polys)          # PolyTable makes a simple list of nodes and edges
pt.nodes                            # |x|y| table of polygon nodes
pt.edges[:,3]                       # the index of the polygon that the i'th node belongs to"><pre>ulam <span class="pl-k">=</span> <span class="pl-c1">ulam_method</span>(traj, domain)    <span class="pl-c"><span class="pl-c">#</span> the main calculation</span>

ulam<span class="pl-k">.</span>P_closed                       <span class="pl-c"><span class="pl-c">#</span> the transition matrix</span>
pt <span class="pl-k">=</span> <span class="pl-c1">PolyTable</span>(ulam<span class="pl-k">.</span>polys)          <span class="pl-c"><span class="pl-c">#</span> PolyTable makes a simple list of nodes and edges</span>
pt<span class="pl-k">.</span>nodes                            <span class="pl-c"><span class="pl-c">#</span> |x|y| table of polygon nodes</span>
pt<span class="pl-k">.</span>edges[:,<span class="pl-c1">3</span>]                       <span class="pl-c"><span class="pl-c">#</span> the index of the polygon that the i'th node belongs to</span></pre></div>
<h2 dir="auto">
<a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<section data-footnotes="" class="footnotes"><h2 id="footnote-label" class="sr-only" dir="auto">Footnotes</h2>
<ol dir="auto">
<li id="user-content-fn-1-d02b968ac8ea5d64f76fa22d75a6b21f">
<p dir="auto">Ulam, Stanislaw M. A collection of mathematical problems. No. 8. Interscience Publishers, 1960. <a href="#user-content-fnref-1-d02b968ac8ea5d64f76fa22d75a6b21f" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-2-d02b968ac8ea5d64f76fa22d75a6b21f">
<p dir="auto">Li, Tien-Yien. "Finite approximation for the Frobenius-Perron operator. A solution to Ulam's conjecture." Journal of Approximation theory 17.2 (1976): 177-186. <a href="#user-content-fnref-2-d02b968ac8ea5d64f76fa22d75a6b21f" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
<li id="user-content-fn-3-d02b968ac8ea5d64f76fa22d75a6b21f">
<p dir="auto">Reddy, Junuthula Narasimha. Introduction to the finite element method. McGraw-Hill Education, 2019. <a href="#user-content-fnref-3-d02b968ac8ea5d64f76fa22d75a6b21f" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref"><g-emoji class="g-emoji" alias="leftwards_arrow_with_hook" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png">↩</g-emoji></a></p>
</li>
</ol>
</section>
</article></div>