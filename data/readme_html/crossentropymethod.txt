<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-crossentropymethodjl" class="anchor" aria-hidden="true" href="#crossentropymethodjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CrossEntropyMethod.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/sisl/CrossEntropyMethod.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e52fa17d6ee01df066ccf57df34c08f38e912ed1e35a77c460e7bcef48d9a74d/68747470733a2f2f7472617669732d63692e6f72672f7369736c2f43726f7373456e74726f70794d6574686f642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sisl/CrossEntropyMethod.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://coveralls.io/github/sisl/CrossEntropyMethod.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9579b75672afaf20e43fe406f8d346eb40002e5af12570937b19cd8b80b78a9a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7369736c2f43726f7373456e74726f70794d6574686f642e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/sisl/CrossEntropyMethod.jl/badge.svg?branch=master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/sisl/CrossEntropyMethod.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f3c7d7f3813e731cf368ba51cc322d9f2228fcb92eb33da05509833ceeefcaf7/68747470733a2f2f636f6465636f762e696f2f67682f7369736c2f43726f7373456e74726f70794d6574686f642e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/sisl/CrossEntropyMethod.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides an implementation of the cross entropy method for optimizing multivariate time series distributions.
Suppose we have a timeseries <code>X = {x₁, ..., xₙ}</code> where each <code>xᵢ</code> is a vector of dimension <code>m</code>. This package provides optimization for two different scenarios:</p>
<ol dir="auto">
<li>The time series is sampled IID from a single distribution <code>p</code>: <code>xᵢ ~ p(x)</code>. In this case, the distribution is represented as a <code>Dict{Symbol, Tuple{Sampleable, Int64}}</code>. The dictionary will contain <code>m</code> symbols, one for each variable in the series. The <code>Sampleable</code> object represents <code>p</code> and the integer is the length of the timeseries (<code>N</code>)</li>
<li>The time series is sampled from a different distribution at each timestep <code>pᵢ</code>: <code>xᵢ ~ pᵢ(x)</code>. In this case, the distribution is also represented as a <code>Dict{Symbol, Tuple{Sampleable, Int64}}</code>.</li>
</ol>
<p dir="auto">Note: The <code>Sampleable</code> objects must support the <code>Distributions.jl</code> function <code>logpdf</code> and <code>fit</code>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">See the <code>examples/</code> folder for an example use case.
The main function is <code>cross_entropy_method</code> and has the following parameters:</p>
<ul dir="auto">
<li><code>loss::Function</code> - The loss function. No default.</li>
<li><code>d_in</code> - The starting sampling distribution. No default.</li>
<li><code>max_iter</code> - Maximum number of iterations, No default.</li>
<li><code>N</code> - The population size. Default: <code>100</code></li>
<li><code>elite_thresh</code> - The threshold below which a sample will be considered elite. To have a fixed number of elite samples set this to <code>-Inf</code> and use the <code>min_elite_samples</code> parameter. Default: <code>-0.99</code></li>
<li><code>min_elite_samples</code> - The minimum number of elite samples. Default: <code>Int64(floor(0.1*N))</code></li>
<li><code>max_elite_samples</code> - The maximum number of allowed elite samples.  Default: <code>typemax(Int64)</code></li>
<li><code>weight_fn</code> - A function that specifies the weight of each sample. Use the likelihood ratio when trying to perform importance sampling. Default <code>(d,x) -&gt; 1</code></li>
<li><code>rng::AbstractRNG</code> - The random number generator used. Default: <code>Random.GLOBAL_RNG</code></li>
<li><code>verbose</code> - Whether or not to print progress. Default: <code>false</code></li>
<li><code>show_progress</code> - Whether or not to show the progress meter. Default: <code>false</code></li>
<li><code>batched</code> - Indicates batched loss evaluation (loss function must return an array containing loss values for each sample). Default: <code>false</code></li>
<li><code>add_entropy</code> - A function that transforms the sampling distribution after fitting. Use it to enforce a maximum level of entropy if converging too quickly. Default: <code>(x)-&gt;x</code></li>
</ul>
<p dir="auto">Maintained by Anthony Corso (<a href="mailto:acorso@stanford.edu">acorso@stanford.edu</a>)</p>
</article></div>