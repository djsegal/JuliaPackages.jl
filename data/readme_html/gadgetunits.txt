<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>License</strong></th>
<th align="center"><strong>Citation</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://LudwigBoess.github.io/GadgetUnits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://LudwigBoess.github.io/GadgetUnits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/LudwigBoess/GadgetUnits.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml"><img src="https://github.com/LudwigBoess/GadgetUnits.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml/badge.svg" alt="Run CI on master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/LudwigBoess/GadgetUnits.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9309a9ee2077a08c3f003136d9a7308df0aa10fad00d039ae63df9e2ffb1c14b/68747470733a2f2f636f6465636f762e696f2f67682f4c7564776967426f6573732f476164676574556e6974732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/gh/LudwigBoess/GadgetUnits.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/34c33e2f7f61f9b82750baf175f4aa3260f774ead54e160dd013b7d818992096/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e737667" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-orange.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://zenodo.org/badge/latestdoi/277262050" rel="nofollow"><img src="https://camo.githubusercontent.com/4be622587c3575a6b43da6f793d7757dcefe74ecead7d03ac77a7b84da9eae9c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3237373236323035302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/277262050.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h1 dir="auto"><a id="user-content-gadgetunitsjl" class="anchor" aria-hidden="true" href="#gadgetunitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GadgetUnits.jl</h1>
<p dir="auto">This package provides some basic unit conversion functionality to work with the SPH code <a href="https://wwwmpa.mpa-garching.mpg.de/gadget/" rel="nofollow">Gadget2</a> by Volker Springel.
It is based on the unit conversions listed by <a href="https://www.usm.uni-muenchen.de/~dolag/" rel="nofollow">Klaus Dolag</a> on his HowTo page (restricted).
Further functionality provides tools for cosmological simulations.</p>
<p dir="auto">If you use <code>GadgetUnits.jl</code> in publications please <a href="https://zenodo.org/badge/latestdoi/277262050" rel="nofollow">cite</a> it.</p>
<h1 dir="auto"><a id="user-content-unit-conversion" class="anchor" aria-hidden="true" href="#unit-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unit Conversion</h1>
<p dir="auto">GadgetUnits.jl uses Unitful.jl and UnitfulAstro.jl to store the unit conversion factors with actual units in place.
You can convert the internal units of Gadget into cgs units by defining the object <code>GadgetPhysicalUnits</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GU = GadgetPhysicalUnits(l_unit::T=3.085678e21, m_unit::T=1.989e43, v_unit::T=1.e5;
                         a_scale::T=1.0, hpar::T=1.0,
                         γ_th::T=5.0/3.0, γ_CR::T=4.0/3.0, xH::T=0.76) where T"><pre>GU <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysicalUnits</span>(l_unit<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">3.085678e21</span>, m_unit<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.989e43</span>, v_unit<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.e5</span>;
                         a_scale<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>, hpar<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>,
                         γ_th<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">5.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, γ_CR<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">4.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, xH<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0.76</span>) <span class="pl-k">where</span> T</pre></div>
<p dir="auto">where the keyword arguments are:</p>
<ul dir="auto">
<li><code>a_scale = 1.0</code>:  Cosmological scale factor of the simulation. Can be passed with the header <code>h</code> as <code>h.time</code>.</li>
<li><code>hpar = 1.0</code>:     Hubble constant as 'little h'. Can be passed with header <code>h</code> as <code>h.h0</code>.</li>
<li><code>γ_th = 5.0/3.0</code>: Adiabatic index of gas.</li>
<li><code>γ_CR = 4.0/3.0</code>: Adiabatic index of cosmic ray component.</li>
<li><code>xH = 0.76</code>:      Hydrogen fraction of the simulation, if run without chemical model.</li>
</ul>
<p dir="auto">This returns an object of type <code>GadgetPhysicalUnits</code> with the following properties:</p>
<table>
<thead>
<tr>
<th align="left">Field Name</th>
<th align="left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>x_cgs::T</code></td>
<td align="left">position in cm</td>
</tr>
<tr>
<td align="left"><code>x_physical::T</code></td>
<td align="left">position in kpc</td>
</tr>
<tr>
<td align="left"><code>v_cgs::T</code></td>
<td align="left">velocity in cm/s</td>
</tr>
<tr>
<td align="left"><code>v_physical::T</code></td>
<td align="left">velocity in km/s</td>
</tr>
<tr>
<td align="left"><code>m_cgs::T</code></td>
<td align="left">mass in g</td>
</tr>
<tr>
<td align="left"><code>m_msun::T</code></td>
<td align="left">mass in Msun</td>
</tr>
<tr>
<td align="left"><code>m_physical::T</code></td>
<td align="left">mass in 10^10 Msun</td>
</tr>
<tr>
<td align="left"><code>t_s::T</code></td>
<td align="left">time in sec</td>
</tr>
<tr>
<td align="left"><code>t_Myr::T</code></td>
<td align="left">time in Myr</td>
</tr>
<tr>
<td align="left"><code>E_cgs::T</code></td>
<td align="left">energy in erg</td>
</tr>
<tr>
<td align="left"><code>E_eV::T</code></td>
<td align="left">energy in eV</td>
</tr>
<tr>
<td align="left"><code>B_cgs::T</code></td>
<td align="left">magnetic field in Gauss</td>
</tr>
<tr>
<td align="left"><code>rho_physical::T</code></td>
<td align="left">density in 10^10 Msun/kpc^3</td>
</tr>
<tr>
<td align="left"><code>rho_cgs::T</code></td>
<td align="left">density in <code>g/cm^3</code></td>
</tr>
<tr>
<td align="left"><code>rho_ncm3::T</code></td>
<td align="left">density in <code>n_p/cm^3</code></td>
</tr>
<tr>
<td align="left"><code>T_K::T</code></td>
<td align="left">temperature in K</td>
</tr>
<tr>
<td align="left"><code>T_eV::T</code></td>
<td align="left">temperature in eV</td>
</tr>
<tr>
<td align="left"><code>P_th_cgs::T</code></td>
<td align="left">thermal pressure in Ba</td>
</tr>
<tr>
<td align="left"><code>P_CR_cgs::T</code></td>
<td align="left">cosmic ray pressure in Ba</td>
</tr>
</tbody>
</table>
<p dir="auto">To convert, say positions of gas particles from a cosmological simulation to physical units you can use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
h     = read_header(filename)

pos   = read_snap(filename, &quot;POS&quot;, 0)

GU    = GadgetPhysicalUnits(a_scale=h.time, hpar=h.h0)

pos .*= GU.x_cgs
"><pre>h     <span class="pl-k">=</span> <span class="pl-c1">read_header</span>(filename)

pos   <span class="pl-k">=</span> <span class="pl-c1">read_snap</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>POS<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)

GU    <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysicalUnits</span>(a_scale<span class="pl-k">=</span>h<span class="pl-k">.</span>time, hpar<span class="pl-k">=</span>h<span class="pl-k">.</span>h0)

pos <span class="pl-k">.*=</span> GU<span class="pl-k">.</span>x_cgs
</pre></div>
<p dir="auto">If you have different units than the standard Gadget ones you can call the object cunstructor with different values</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GU = GadgetPhysicalUnits(your_l_unit, your_m_unit, your_v_unit; kwargs...)"><pre>GU <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysicalUnits</span>(your_l_unit, your_m_unit, your_v_unit; kwargs<span class="pl-k">...</span>)</pre></div>
<p dir="auto">Converting the units can then be done with Unitful.jl and UnitfulAstro.jl.
So if you want to convert the position units from the default <code>cm</code> to <code>Mpc</code> you can do this as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Unitful
using UnitfulAstro

pos = read_snap(filename, &quot;POS&quot;, 0)
pos = @. pos * GU.x_cgs |&gt; u&quot;Mpc&quot;"><pre><span class="pl-k">using</span> Unitful
<span class="pl-k">using</span> UnitfulAstro

pos <span class="pl-k">=</span> <span class="pl-c1">read_snap</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>POS<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)
pos <span class="pl-k">=</span> <span class="pl-c1">@.</span> pos <span class="pl-k">*</span> GU<span class="pl-k">.</span>x_cgs <span class="pl-k">|&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Mpc<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">If you want to get rid of the units, for example if you need basic datatypes again for a function
you can use the funtion <code>ustrip</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pos = ustrip(pos)"><pre>pos <span class="pl-k">=</span> <span class="pl-c1">ustrip</span>(pos)</pre></div>
<h2 dir="auto"><a id="user-content-primitive-unit-type" class="anchor" aria-hidden="true" href="#primitive-unit-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Primitive unit type</h2>
<p dir="auto">If you want to have the same functionality, but without using <code>Unitful.jl</code> you can construct a similar object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="GU = GadgetPhysical(l_unit::T=3.085678e21, m_unit::T=1.989e43, v_unit::T=1.e5;
                    a_scale::T=1.0, hpar::T=1.0,
                    γ_th::T=5.0/3.0, γ_CR::T=4.0/3.0, xH::T=0.76) where T"><pre>GU <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysical</span>(l_unit<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">3.085678e21</span>, m_unit<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.989e43</span>, v_unit<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.e5</span>;
                    a_scale<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>, hpar<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>,
                    γ_th<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">5.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, γ_CR<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">4.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, xH<span class="pl-k">::</span><span class="pl-c1">T</span><span class="pl-k">=</span><span class="pl-c1">0.76</span>) <span class="pl-k">where</span> T</pre></div>
<p dir="auto">This uses the same conversions, but leaves out the actual unit strings.</p>
</article></div>