<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>License</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://LudwigBoess.github.io/GadgetUnits.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://LudwigBoess.github.io/GadgetUnits.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/LudwigBoess/GadgetUnits.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml"><img src="https://github.com/LudwigBoess/GadgetUnits.jl/actions/workflows/jlpkgbutler-ci-master-workflow.yml/badge.svg" alt="Run CI on master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/LudwigBoess/GadgetUnits.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9309a9ee2077a08c3f003136d9a7308df0aa10fad00d039ae63df9e2ffb1c14b/68747470733a2f2f636f6465636f762e696f2f67682f4c7564776967426f6573732f476164676574556e6974732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/gh/LudwigBoess/GadgetUnits.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="LICENSE.md"><img src="https://camo.githubusercontent.com/34c33e2f7f61f9b82750baf175f4aa3260f774ead54e160dd013b7d818992096/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e737667" alt="The MIT License" data-canonical-src="https://img.shields.io/badge/license-MIT-orange.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h1><a id="user-content-gadgetunitsjl" class="anchor" aria-hidden="true" href="#gadgetunitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GadgetUnits.jl</h1>
<p>This package is a subproject of <a href="https://github.com/LudwigBoess/GadJet.jl">GadJet.jl</a> and provides some basic unit conversion functionality to work with the SPH code "Gadget" by Volker Springel (doi:10.1111/j.1365-2966.2005.09655.x).</p>
<h1><a id="user-content-unit-conversion" class="anchor" aria-hidden="true" href="#unit-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Unit Conversion</h1>
<p>GadgetUnits.jl uses Unitful.jl and UnitfulAstro.jl to store the unit conversion factors with actual units in place.
You can convert the internal units of Gadget into cgs units by defining the object <code>GadgetPhysicalUnits</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="GU = GadgetPhysicalUnits(l_unit::Float64=3.085678e21, m_unit::Float64=1.989e43, v_unit::Float64=1.e5;
                         a_scale::Float64=1.0, hpar::Float64=1.0,
                         γ_th::Float64=5.0/3.0, γ_CR::Float64=4.0/3.0, xH::Float64=0.76)
"><pre>GU <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysicalUnits</span>(l_unit<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">3.085678e21</span>, m_unit<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.989e43</span>, v_unit<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.e5</span>;
                         a_scale<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>, hpar<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>,
                         γ_th<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">5.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, γ_CR<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">4.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, xH<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">0.76</span>)</pre></div>
<p>where the keyword arguments are:</p>
<ul>
<li><code>a_scale::Float64 = 1.0</code>:  Cosmological scale factor of the simulation. Can be passed with the header <code>h</code> as <code>h.time</code>.</li>
<li><code>hpar::Float64 = 1.0</code>:     Hubble constant as 'little h'. Can be passed with header <code>h</code> as <code>h.h0</code>.</li>
<li><code>γ_th::Float64 = 5.0/3.0</code>: Adiabatic index of gas.</li>
<li><code>γ_CR::Float64 = 4.0/3.0</code>: Adiabatic index of cosmic ray component.</li>
<li><code>xH::Float64 = 0.76</code>:      Hydrogen fraction of the simulation, if run without chemical model.</li>
</ul>
<p>This returns an object of type <code>GadgetPhysicalUnits</code> with the following properties:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="struct GadgetPhysicalUnits

    x_cgs::typeof(1.0u&quot;cm&quot;)         # position in cm
    x_kpc::typeof(1.0u&quot;kpc&quot;)        # position in kpc

    v_cgs::typeof(1.0u&quot;cm/s&quot;)       # velocity in cm/s
    v_kms::typeof(1.0u&quot;km/s&quot;)       # velocity in km/s

    m_cgs::typeof(1.0u&quot;g&quot;)          # mass in g
    m_msun::typeof(1.0u&quot;Msun&quot;)      # mass in Msun

    t_s::typeof(1.0u&quot;s&quot;)            # time in sec
    t_Myr::typeof(1.0u&quot;Myr&quot;)        # time in Myr

    E_cgs::typeof(1.0u&quot;erg&quot;)        # energy in erg
    E_eV::typeof(1.0u&quot;eV&quot;)          # energy in eV

    B_cgs::typeof(1.0u&quot;Gs&quot;)         # magnetic field in Gauss

    rho_cgs::typeof(1.0u&quot;g/cm^3&quot;)   # density in g/cm^3
    rho_ncm3::typeof(1.0u&quot;mp/cm^3&quot;) # density in mp/cm^3

    T_K::typeof(1.0u&quot;K&quot;)            # temperature in K
    T_eV::typeof(1.0u&quot;eV&quot;)          # temperature in eV

    P_th_cgs::typeof(1.0u&quot;Ba&quot;)      # thermal pressure in Ba
    P_CR_cgs::typeof(1.0u&quot;Ba&quot;)      # cosmic ray pressure in Ba

end
"><pre><span class="pl-k">struct</span> GadgetPhysicalUnits

    x_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>cm<span class="pl-pds">"</span></span>)         <span class="pl-c"><span class="pl-c">#</span> position in cm</span>
    x_kpc<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>kpc<span class="pl-pds">"</span></span>)        <span class="pl-c"><span class="pl-c">#</span> position in kpc</span>

    v_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>cm/s<span class="pl-pds">"</span></span>)       <span class="pl-c"><span class="pl-c">#</span> velocity in cm/s</span>
    v_kms<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km/s<span class="pl-pds">"</span></span>)       <span class="pl-c"><span class="pl-c">#</span> velocity in km/s</span>

    m_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>g<span class="pl-pds">"</span></span>)          <span class="pl-c"><span class="pl-c">#</span> mass in g</span>
    m_msun<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Msun<span class="pl-pds">"</span></span>)      <span class="pl-c"><span class="pl-c">#</span> mass in Msun</span>

    t_s<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>s<span class="pl-pds">"</span></span>)            <span class="pl-c"><span class="pl-c">#</span> time in sec</span>
    t_Myr<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Myr<span class="pl-pds">"</span></span>)        <span class="pl-c"><span class="pl-c">#</span> time in Myr</span>

    E_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>erg<span class="pl-pds">"</span></span>)        <span class="pl-c"><span class="pl-c">#</span> energy in erg</span>
    E_eV<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>)          <span class="pl-c"><span class="pl-c">#</span> energy in eV</span>

    B_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Gs<span class="pl-pds">"</span></span>)         <span class="pl-c"><span class="pl-c">#</span> magnetic field in Gauss</span>

    rho_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>g/cm^3<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> density in g/cm^3</span>
    rho_ncm3<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>mp/cm^3<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> density in mp/cm^3</span>

    T_K<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>K<span class="pl-pds">"</span></span>)            <span class="pl-c"><span class="pl-c">#</span> temperature in K</span>
    T_eV<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>eV<span class="pl-pds">"</span></span>)          <span class="pl-c"><span class="pl-c">#</span> temperature in eV</span>

    P_th_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Ba<span class="pl-pds">"</span></span>)      <span class="pl-c"><span class="pl-c">#</span> thermal pressure in Ba</span>
    P_CR_cgs<span class="pl-k">::</span><span class="pl-c1">typeof</span>(<span class="pl-c1">1.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Ba<span class="pl-pds">"</span></span>)      <span class="pl-c"><span class="pl-c">#</span> cosmic ray pressure in Ba</span>

<span class="pl-k">end</span></pre></div>
<p>To convert, say positions of gas particles from a cosmological simulation to physical units you can use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
h     = read_header(filename)

pos   = read_snap(filename, &quot;POS&quot;, 0)

GU    = GadgetPhysicalUnits(a_scale=h.time, hpar=h.h0)

pos .*= GU.x_cgs

"><pre>h     <span class="pl-k">=</span> <span class="pl-c1">read_header</span>(filename)

pos   <span class="pl-k">=</span> <span class="pl-c1">read_snap</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>POS<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)

GU    <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysicalUnits</span>(a_scale<span class="pl-k">=</span>h<span class="pl-k">.</span>time, hpar<span class="pl-k">=</span>h<span class="pl-k">.</span>h0)

pos <span class="pl-k">.*=</span> GU<span class="pl-k">.</span>x_cgs
</pre></div>
<p>If you have different units than the standard Gadget ones you can call the object cunstructor with different values</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="GU = GadgetPhysicalUnits(your_l_unit, your_m_unit, your_v_unit; kwargs...)
"><pre>GU <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysicalUnits</span>(your_l_unit, your_m_unit, your_v_unit; kwargs<span class="pl-k">...</span>)</pre></div>
<p>Converting the units can then be done with Unitful.jl and UnitfulAstro.jl.
So if you want to convert the position units from the default <code>cm</code> to <code>Mpc</code> you can do this as:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Unitful
using UnitfulAstro

pos = read_snap(filename, &quot;POS&quot;, 0)
pos = @. pos * GU.x_cgs |&gt; u&quot;Mpc&quot;
"><pre><span class="pl-k">using</span> Unitful
<span class="pl-k">using</span> UnitfulAstro

pos <span class="pl-k">=</span> <span class="pl-c1">read_snap</span>(filename, <span class="pl-s"><span class="pl-pds">"</span>POS<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span>)
pos <span class="pl-k">=</span> <span class="pl-c1">@.</span> pos <span class="pl-k">*</span> GU<span class="pl-k">.</span>x_cgs <span class="pl-k">|&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>Mpc<span class="pl-pds">"</span></span></pre></div>
<p>If you want to get rid of the units, for example if you need basic datatypes again for a function
you can use the funtion <code>ustrip</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pos = ustrip(pos)
"><pre>pos <span class="pl-k">=</span> <span class="pl-c1">ustrip</span>(pos)</pre></div>
<h2><a id="user-content-primitive-unit-type" class="anchor" aria-hidden="true" href="#primitive-unit-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Primitive unit type</h2>
<p>If you want to have the same functionality, but without using <code>Unitful.jl</code> you can construct a similar object:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="GU = GadgetPhysical(l_unit::Float64=3.085678e21, m_unit::Float64=1.989e43, v_unit::Float64=1.e5;
                    a_scale::Float64=1.0, hpar::Float64=1.0,
                    γ_th::Float64=5.0/3.0, γ_CR::Float64=4.0/3.0, xH::Float64=0.76)
"><pre>GU <span class="pl-k">=</span> <span class="pl-c1">GadgetPhysical</span>(l_unit<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">3.085678e21</span>, m_unit<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.989e43</span>, v_unit<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.e5</span>;
                    a_scale<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>, hpar<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">1.0</span>,
                    γ_th<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">5.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, γ_CR<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">4.0</span><span class="pl-k">/</span><span class="pl-c1">3.0</span>, xH<span class="pl-k">::</span><span class="pl-c1">Float64</span><span class="pl-k">=</span><span class="pl-c1">0.76</span>)</pre></div>
<p>This uses the same conversions, but leaves out the actual unit strings.</p>
</article></div>