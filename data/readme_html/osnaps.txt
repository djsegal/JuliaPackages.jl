<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-osnaps" class="anchor" aria-hidden="true" href="#osnaps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Osnaps</h1>
<h4 dir="auto"><a id="user-content-a-quick-start-on-the-optimization" class="anchor" aria-hidden="true" href="#a-quick-start-on-the-optimization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A quick start on the optimization</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Osnaps

# Define an objective function (using Ackley function here as an example)
function ackley(x::AbstractVector{T}) where T&lt;:Real
    arg1 = 0.0
    arg2 = 0.0
    dims = length(x)
    @inbounds for i in eachindex(x)
        arg1 += abs2(x[i])
        arg2 += cospi(2.0 * x[i])
    end
    arg1  = 0.2 * sqrt(arg1 / dims)
    arg2 /= dims
    return -20.0 * exp(-arg1) - exp(arg2) + ℯ + 20.0
end

nd  = 15
lb  = ntuple(i -&gt; -32.0, nd) # lower bounds
ub  = ntuple(i -&gt; +32.0, nd) # upper bounds
obj = optimizer(nd)          # create an object for the optimization
minimize!(obj, ackley, lb, ub, avgtimes=3)

println(obj.xsol) # print the resulted solution"><pre><span class="pl-k">using</span> Osnaps

<span class="pl-c"><span class="pl-c">#</span> Define an objective function (using Ackley function here as an example)</span>
<span class="pl-k">function</span> <span class="pl-en">ackley</span>(x<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>
    arg1 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    arg2 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    dims <span class="pl-k">=</span> <span class="pl-c1">length</span>(x)
    <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(x)
        arg1 <span class="pl-k">+=</span> <span class="pl-c1">abs2</span>(x[i])
        arg2 <span class="pl-k">+=</span> <span class="pl-c1">cospi</span>(<span class="pl-c1">2.0</span> <span class="pl-k">*</span> x[i])
    <span class="pl-k">end</span>
    arg1  <span class="pl-k">=</span> <span class="pl-c1">0.2</span> <span class="pl-k">*</span> <span class="pl-c1">sqrt</span>(arg1 <span class="pl-k">/</span> dims)
    arg2 <span class="pl-k">/=</span> dims
    <span class="pl-k">return</span> <span class="pl-k">-</span><span class="pl-c1">20.0</span> <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>arg1) <span class="pl-k">-</span> <span class="pl-c1">exp</span>(arg2) <span class="pl-k">+</span> ℯ <span class="pl-k">+</span> <span class="pl-c1">20.0</span>
<span class="pl-k">end</span>

nd  <span class="pl-k">=</span> <span class="pl-c1">15</span>
lb  <span class="pl-k">=</span> <span class="pl-c1">ntuple</span>(i <span class="pl-k">-&gt;</span> <span class="pl-k">-</span><span class="pl-c1">32.0</span>, nd) <span class="pl-c"><span class="pl-c">#</span> lower bounds</span>
ub  <span class="pl-k">=</span> <span class="pl-c1">ntuple</span>(i <span class="pl-k">-&gt;</span> <span class="pl-k">+</span><span class="pl-c1">32.0</span>, nd) <span class="pl-c"><span class="pl-c">#</span> upper bounds</span>
obj <span class="pl-k">=</span> <span class="pl-c1">optimizer</span>(nd)          <span class="pl-c"><span class="pl-c">#</span> create an object for the optimization</span>
<span class="pl-c1">minimize!</span>(obj, ackley, lb, ub, avgtimes<span class="pl-k">=</span><span class="pl-c1">3</span>)

<span class="pl-c1">println</span>(obj<span class="pl-k">.</span>xsol) <span class="pl-c"><span class="pl-c">#</span> print the resulted solution</span></pre></div>
</article></div>