<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-plutosdr" class="anchor" aria-hidden="true" href="#plutosdr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PlutoSDR</h1>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>The documentation is available on the <a href="https://juliatelecom.github.io/AdalmPluto.jl/dev/" rel="nofollow">Github Pages</a>.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h2>
<p>Using the radio through USB.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AdalmPluto;

# Opening the radio with 100MHz carrier frequency, 3MHz sampling rate, and 64dB gain.
radio = openPluto(Int(100e6), Int(3e6), 64; bandwidth=Int(20e6));

# Receive the samples
sig = zeros(ComplexF32, 1024*1024) # 1 MiS buffer
recv!(sig, radio);

# Do some treatment
# ...
# ...

# Close the radio
close(radio);
"><pre><span class="pl-k">using</span> AdalmPluto;

<span class="pl-c"><span class="pl-c">#</span> Opening the radio with 100MHz carrier frequency, 3MHz sampling rate, and 64dB gain.</span>
radio <span class="pl-k">=</span> <span class="pl-c1">openPluto</span>(<span class="pl-c1">Int</span>(<span class="pl-c1">100e6</span>), <span class="pl-c1">Int</span>(<span class="pl-c1">3e6</span>), <span class="pl-c1">64</span>; bandwidth<span class="pl-k">=</span><span class="pl-c1">Int</span>(<span class="pl-c1">20e6</span>));

<span class="pl-c"><span class="pl-c">#</span> Receive the samples</span>
sig <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(ComplexF32, <span class="pl-c1">1024</span><span class="pl-k">*</span><span class="pl-c1">1024</span>) <span class="pl-c"><span class="pl-c">#</span> 1 MiS buffer</span>
<span class="pl-c1">recv!</span>(sig, radio);

<span class="pl-c"><span class="pl-c">#</span> Do some treatment</span>
<span class="pl-c"><span class="pl-c">#</span> ...</span>
<span class="pl-c"><span class="pl-c">#</span> ...</span>

<span class="pl-c"><span class="pl-c">#</span> Close the radio</span>
<span class="pl-c1">close</span>(radio);</pre></div>
<h2><a id="user-content-running-the-examples" class="anchor" aria-hidden="true" href="#running-the-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running the examples</h2>
<h3><a id="user-content-fm-radio" class="anchor" aria-hidden="true" href="#fm-radio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FM Radio</h3>
<p>This example records a few seconds of FM radio as WAV to <code>.../AdalmPluto.jl/examples/samples/fm.wav</code>. The duration and station selection have to be modified by editing <code>.../AdalmPluto.jl/examples/fm.jl</code>.</p>
<p>To launch the example (from the root folder of the project) : <code>julia --startup-file=no --project=./examples ./examples/fm.jl</code>.</p>
<h3><a id="user-content-benchmark" class="anchor" aria-hidden="true" href="#benchmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmark</h3>
<p>The actual sampling rate has been measured using the file <code>benchmark.jl</code>. The full results of the last run is available in <code>bench_results.txt</code>.</p>
<p>The functions timed are :</p>
<ul>
<li><code>C_iio_buffer_refill</code> alone, which queries samples from the hardware.</li>
<li><code>C_iio_buffer_refill</code> and two <code>C_iio_channel_read</code> for the IQ channels. The read function demultiplexes and converts to host format the data.</li>
<li><code>AdalmPluto.refillJuliaBufferRX</code> which is the same thing as before with <code>reinterpret</code> added to convert the samples to <code>ComplexF32</code>.</li>
<li><code>recv!</code> which calls the previous function and reads from the Julia buffer into the target array.</li>
</ul>
<p>With julia lauched from the example folder :</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; include(&quot;benchmark.jl&quot;);
julia&gt; plot, results = bench_all();
julia&gt; plot # to display a (very) basic unicode plot
"><pre><code>julia&gt; include("benchmark.jl");
julia&gt; plot, results = bench_all();
julia&gt; plot # to display a (very) basic unicode plot
</code></pre></div>
<p>This takes quite a while as each results are timed separately and the radio saturates quite quickly.</p>
<p><a target="_blank" rel="noopener noreferrer" href="examples/bench_results.png"><img src="examples/bench_results.png" alt="results" style="max-width:100%;"></a></p>
<h2><a id="user-content-sending-samples" class="anchor" aria-hidden="true" href="#sending-samples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sending samples</h2>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> This is not implemented yet, those are just instructions on how you would do it.</p>
<p>The samples sent need to follow the hardware format. There is some information
<a href="https://wiki.analog.com/resources/eval/user-guides/ad-fmcomms2-ebz/software/basic_iq_datafiles#binary_format" rel="nofollow">here</a>
and an example
<a href="https://analogdevicesinc.github.io/libiio/master/libiio/ad9361-iiostream_8c-example.html" rel="nofollow">here</a>.</p>
<p>Functions that should be used :</p>
<ul>
<li><a href="https://analogdevicesinc.github.io/libiio/master/libiio/group__Debug.html#gaf0a9a659af18b62ffa0520301402eabb" rel="nofollow"><code>iio_channel_convert_inverse</code></a>
to convert data to the hardware format (endianess and bit alignement).</li>
<li><a href="https://analogdevicesinc.github.io/libiio/master/libiio/group__Debug.html#gadbb2dabfdd85c3f2c6b168f0512c7748" rel="nofollow"><code>iio_channel_get_data_format</code></a>
to get the data format if you want to do the convertion manually.</li>
<li><a href="https://analogdevicesinc.github.io/libiio/master/libiio/group__Buffer.html#ga000d2f4c8b72060db1c38ec905bf4156" rel="nofollow"><code>iio_buffer_[first|start|step|end]</code></a>
to get the pointers and distance between samples.</li>
<li><a href="https://analogdevicesinc.github.io/libiio/master/libiio/group__Buffer.html#gae7033c625d128667a56cf482aa3149bd" rel="nofollow"><code>iio_buffer_push</code></a>
to send the data to the hardware.</li>
</ul>
<h2><a id="user-content-artifact" class="anchor" aria-hidden="true" href="#artifact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Artifact</h2>
<p>The artifact used for the proof of concept is hosted <a href="https://github.com/ledoune/libiio/releases/tag/v0.21">here</a>.</p>
<p>It has been compiled using the following options :</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="git clone https://github.com/analogdevicesinc/libiio.git
cd libiio
mkdir build
cd build
cmake ../ -DCMAKE_BUILD_TYPE=Release -DWITH_LOCAL_CONFIG=OFF -DINSTALL_UDEV_RULE=OFF -DWITH_USB_BACKEND=YES -DWITH_NETWORK_BACKEND=YES -DWITH_LOCAL_BACKEND=YES -DWITH_XML_BACKEND=YES -DWITH_SERIAL_BACKEND=NO -DWITH_EXAMPLES=YES
make -j$(nproc)
tar cvzf libiio-0.21-custom.tar.gz libiio.so* tests/iio_* iiod/iiod .version
"><pre>git clone https://github.com/analogdevicesinc/libiio.git
<span class="pl-c1">cd</span> libiio
mkdir build
<span class="pl-c1">cd</span> build
cmake ../ -DCMAKE_BUILD_TYPE=Release -DWITH_LOCAL_CONFIG=OFF -DINSTALL_UDEV_RULE=OFF -DWITH_USB_BACKEND=YES -DWITH_NETWORK_BACKEND=YES -DWITH_LOCAL_BACKEND=YES -DWITH_XML_BACKEND=YES -DWITH_SERIAL_BACKEND=NO -DWITH_EXAMPLES=YES
make -j<span class="pl-s"><span class="pl-pds">$(</span>nproc<span class="pl-pds">)</span></span>
tar cvzf libiio-0.21-custom.tar.gz libiio.so<span class="pl-k">*</span> tests/iio_<span class="pl-k">*</span> iiod/iiod .version</pre></div>
<p>In order to work properly, the artifact needs a udev rule to access the USB peripherals. It is written in a volatile folder, hence the need the input the sudo password after each reboot.
The password prompt does not come from Julia and no information about the password goes through julia. See the <code>__init__</code> in <code>.../AdalmPluto.jl/src/libIIO/libIIO.jl</code> for more details.</p>
</article></div>