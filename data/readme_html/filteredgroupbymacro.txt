<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-filteredgroupbymacro" class="anchor" aria-hidden="true" href="#filteredgroupbymacro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FilteredGroupbyMacro</h1>
<p><a href="https://jkrumbiegel.github.io/FilteredGroupbyMacro.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://jkrumbiegel.github.io/FilteredGroupbyMacro.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/jkrumbiegel/FilteredGroupbyMacro.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a2492d91b5dabf752b2ee6fcad9b924cd53a69f0/68747470733a2f2f7472617669732d63692e636f6d2f6a6b72756d62696567656c2f46696c746572656447726f757062794d6163726f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jkrumbiegel/FilteredGroupbyMacro.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jkrumbiegel/FilteredGroupbyMacro.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3d3a7eb07a5bbff578c2331aed1e91698205eac5/68747470733a2f2f636f6465636f762e696f2f67682f6a6b72756d62696567656c2f46696c746572656447726f757062794d6163726f2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jkrumbiegel/FilteredGroupbyMacro.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-filtered-split-apply-combine-as-in-rs-datatable" class="anchor" aria-hidden="true" href="#filtered-split-apply-combine-as-in-rs-datatable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Filtered split-apply-combine as in R's data.table</h2>
<p>FilteredGroupbyMacro.jl offers a macro <code>@by</code> with which a concise syntax for filtered
split-apply-combine operations can be expressed concisely. It is very similar in nature
to the <code>[i,j,by]</code> indexing that the well-known package data.table in the R ecosystem uses.</p>
<p>The order is slightly different. Here, you have to specify:</p>
<p><code>[filter, grouping_keys, new_column_keyword_args...]</code></p>
<p>An example with the well-known <em>diamonds</em> dataset:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> RDatasets
<span class="pl-k">using</span> FilteredGroupbyMacro
<span class="pl-k">using</span> StatsBase

diamonds <span class="pl-k">=</span> <span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>ggplot2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>diamonds<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> filter by Price and Carat</span>
<span class="pl-c"><span class="pl-c">#</span> then group by Cut</span>
<span class="pl-c"><span class="pl-c">#</span> finally compute new columns with keyword names</span>
<span class="pl-c1">@by</span> diamonds[(<span class="pl-c1">:Price</span> <span class="pl-k">.&gt;</span> <span class="pl-c1">3000</span>) <span class="pl-k">.&amp;</span> (<span class="pl-c1">:Carat</span> <span class="pl-k">.&gt;</span> <span class="pl-c1">0.3</span>), <span class="pl-c1">:Cut</span>,
    MeanPricePerCarat <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">:Price</span>) <span class="pl-k">/</span> <span class="pl-c1">mean</span>(<span class="pl-c1">:Carat</span>),
    MostFreqColor <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">countmap</span>(<span class="pl-c1">:Color</span>)), by <span class="pl-k">=</span> last)[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>]]</pre></div>
<p>Compare this to the default DataFrames syntax:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">by</span>(diamonds[(diamonds<span class="pl-k">.</span>Price <span class="pl-k">.&gt;</span> <span class="pl-c1">3000</span>) <span class="pl-k">.&amp;</span> (diamonds<span class="pl-k">.</span>Carat <span class="pl-k">.&gt;</span> <span class="pl-c1">0.3</span>), :], <span class="pl-c1">:Cut</span>,
    MeanPricePerCarat <span class="pl-k">=</span> (<span class="pl-c1">:Price</span>, <span class="pl-c1">:Carat</span>) <span class="pl-k">=&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">mean</span>(x<span class="pl-k">.</span>Price) <span class="pl-k">/</span> <span class="pl-c1">mean</span>(x<span class="pl-k">.</span>Carat),
    MostFreqColor <span class="pl-k">=</span> <span class="pl-c1">:Color</span> <span class="pl-k">=&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-c1">sort</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">countmap</span>(x)), by <span class="pl-k">=</span> last)[<span class="pl-c1">end</span>][<span class="pl-c1">1</span>])</pre></div>
<p>You can also use assignment syntax to join the groupby result with the filtered table:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FilteredGroupbyMacro
<span class="pl-k">using</span> DataFrames
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">repeat</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">3</span>), b <span class="pl-k">=</span> <span class="pl-c1">repeat</span>(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>c<span class="pl-pds">'</span></span>, <span class="pl-c1">3</span>))
<span class="pl-c"><span class="pl-c">#</span> the result of this will be df with a new column sum_a</span>
<span class="pl-c"><span class="pl-c">#</span> that contains the same sum_a for every row in each group based on :b</span>
<span class="pl-c1">@by</span> df[<span class="pl-k">!</span>, <span class="pl-c1">:b</span>, sum_a <span class="pl-k">:=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">:a</span>)]</pre></div>
</article></div>