<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geodata" class="anchor" aria-hidden="true" href="#geodata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeoData</h1>
<p><a href="https://rafaqz.github.io/GeoData.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://rafaqz.github.io/GeoData.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/rafaqz/GeoData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/427172370e0e43773116dcdedb3ba7fee15658157405cc41be65c9a9702df145/68747470733a2f2f7472617669732d63692e636f6d2f72616661717a2f47656f446174612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/rafaqz/GeoData.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rafaqz/GeoData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1b37280735d361c6019d1db6efccafe638aafebc3a861df91f52154ee2c34b8d/68747470733a2f2f636f6465636f762e696f2f67682f72616661717a2f47656f446174612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/rafaqz/GeoData.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaTesting/Aqua.jl"><img src="https://camo.githubusercontent.com/e608d77380b4ff8adb32f31cbee4c79ea1cb5a3c7557c512c51e88785dde8e61/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417175616a6c2d2546302539462538432541322d617175612e737667" alt="Aqua.jl Quality Assurance" data-canonical-src="https://img.shields.io/badge/Aquajl-%F0%9F%8C%A2-aqua.svg" style="max-width:100%;"></a></p>
<p>GeoData.jl defines common types and methods for reading, writing and
manipulating spatial data, currently raster arrays like GeoTIFF and NetCDF,
multi-array stacks, and series of stacks or geoarrays spread over multiple files.
It provides a standardised interface that allows many source data types to be
used with identical syntax.</p>
<p>Data loaded with GeoData.jl has some special properties:</p>
<ul>
<li>Plots are always oriented the right way. Even if you reverse or permute a
<code>GeoArray</code> it will still plot the right way!</li>
<li>Regions and points selected with <code>Between</code> and <code>Contains</code> select the right
points or whole intervals no matter the order of the index or it's position in
the cell.</li>
<li>For <code>Projected</code> mode <code>GRDarray</code> and <code>GDALarray</code> You can index in any
projection you want to by setting the <code>mappedcrs</code> keyword on construction. You
don't even need to know the underlying projection, the conversion is handled
automatically. This means lat/lon <code>EPSG(4326)</code> can be used across all sources
seamlessly if you need that.</li>
<li>Packages building on GeoData.jl can treat <code>AbstractGeoSeries</code>,
<code>AbstractGeoStack</code>, and <code>AbstrackGeoArray</code> as black boxes:
<ul>
<li>The data could hold tiff or netcdf files, <code>Array</code>s in memory or <code>CuArray</code>s
on the GPU - they will all behave in the same way.</li>
<li><code>AbstractGeoStack</code> can be a Netcdf or HDF5 file, or a <code>NamedTuple</code> of
<code>GDALarray</code> holding <code>.tif</code> files, or all <code>GeoArray</code> in memory, but be
treated as if they are all the same thing.</li>
<li>Modelling packages do not have to deal with the specifics of spatial file
types directly.</li>
</ul>
</li>
</ul>
<p>GeoData.jl extends
<a href="https://github.com/rafaqz/DimensionalData.jl">DimensionalData.jl</a> so that
spatial data can be indexed using named dimensions like <code>Lat</code> and <code>Lon</code>, <code>Ti</code>
(time), which can also be used in most <code>Base</code> and <code>Statistics</code> methods like
<code>mean</code> and <code>reduce</code> where <code>dims</code> arguments are required. Much of the behaviour
is covered in the <a href="https://rafaqz.github.io/DimensionalData.jl/stable/" rel="nofollow">DimensionalData
docs</a>.</p>
<p>GeoData.jl provides general types for holding spatial data: <code>GeoArray</code>,
<code>GeoStack</code>, and <code>GeoSeries</code>, and types specific to various backends for loading
disk-based data. All can be loaded using the functions <code>geoarray</code>, <code>stack</code> and
<code>series</code>, that will guess the backend from the file type. R <code>.grd</code> files can be
loaded natively, GDAL when <a href="https://github.com/yeesian/ArchGDAL.jl">ArchGDAL.jl</a>
(v0.5 or higher) is imported, and NetCDF can be loaded when
<a href="https://github.com/Alexander-Barth/NCDatasets.jl">NCDatasets.jl</a> is imported.</p>
<p>When HDF5.jl is imported, files from the Soil Moisture Active Passive
(<a href="https://smap.jpl.nasa.gov/" rel="nofollow">SMAP</a>) dataset can be loaded with <code>stack</code> or
<code>series</code>. This is both useful for users of SMAP, and a demonstration of the
potential to build standardised interfaces for custom spatial dataset formats
like those used in SMAP.</p>
<p>Files can be written to disk in all formats using <code>write</code>, and can (with some caveats)
be written to to different formats providing file-type conversion for spatial data.</p>
<h1><a id="user-content-warning-this-is-an-mvp" class="anchor" aria-hidden="true" href="#warning-this-is-an-mvp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warning: this is an MVP.</h1>
<p>It works quite well but spatial data is very complicated. Some things may break.
Currently saving a Netcdf to a GDAL tif, or the reverse, projections are not totally accurate.</p>
<p>Eventually they will be, but converting projections and index conventions between formats
is difficult. with many edge case problems. For now, assume the index is not exactly correct.
<code>Between</code>, <code>Contains</code> and <code>bounds</code> are close approximations, but may contain errors.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>We'll load a file from disk, and do some manipulations and plotting.</p>
<p>Load GeoData, and NCDatasets, download file and load it to
an array. This netcdf file only has one layer, if it has more we
could use <code>NCDstack</code> instead.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using GeoData, NCDatasets

julia&gt; url = &quot;https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc&quot;;

julia&gt; filename = download(url, &quot;tos_O1_2001-2002.nc&quot;);

julia&gt; A = geoarray(filename)
NCDarray (named tos) with dimensions:
 Longitude (type Lon): Float64[1.0, 3.0, …, 357.0, 359.0] (Converted: Ordered Regular Intervals)
 Latitude (type Lat): Float64[-79.5, -78.5, …, 88.5, 89.5] (Converted: Ordered Regular Intervals)
 Time (type Ti): DateTime360Day[DateTime360Day(2001-01-16T00:00:00), DateTime360Day(2001-02-16T00:00:00), …, DateTime360Day(2002-11-16T00:00:00), DateTime360Day(2002-12-16T00:00:00)] (Sampled: Ordered Irregular Points)
and data: 180×170×24 Array{Union{Missing, Float32},3}
[:, :, 1]
 missing  missing     missing  …  271.437  271.445  271.459
 missing  missing     missing     271.438  271.445  271.459
...
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GeoData, NCDatasets

julia<span class="pl-k">&gt;</span> url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc<span class="pl-pds">"</span></span>;

julia<span class="pl-k">&gt;</span> filename <span class="pl-k">=</span> <span class="pl-c1">download</span>(url, <span class="pl-s"><span class="pl-pds">"</span>tos_O1_2001-2002.nc<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">geoarray</span>(filename)
NCDarray (named tos) with dimensions<span class="pl-k">:</span>
 Longitude (type Lon)<span class="pl-k">:</span> Float64[<span class="pl-c1">1.0</span>, <span class="pl-c1">3.0</span>, …, <span class="pl-c1">357.0</span>, <span class="pl-c1">359.0</span>] (Converted<span class="pl-k">:</span> Ordered Regular Intervals)
 Latitude (type Lat)<span class="pl-k">:</span> Float64[<span class="pl-k">-</span><span class="pl-c1">79.5</span>, <span class="pl-k">-</span><span class="pl-c1">78.5</span>, …, <span class="pl-c1">88.5</span>, <span class="pl-c1">89.5</span>] (Converted<span class="pl-k">:</span> Ordered Regular Intervals)
 Time (type Ti)<span class="pl-k">:</span> DateTime360Day[<span class="pl-c1">DateTime360Day</span>(<span class="pl-c1">2001</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>), <span class="pl-c1">DateTime360Day</span>(<span class="pl-c1">2001</span><span class="pl-k">-</span><span class="pl-c1">02</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>), …, <span class="pl-c1">DateTime360Day</span>(<span class="pl-c1">2002</span><span class="pl-k">-</span><span class="pl-c1">11</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>), <span class="pl-c1">DateTime360Day</span>(<span class="pl-c1">2002</span><span class="pl-k">-</span><span class="pl-c1">12</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>)] (Sampled<span class="pl-k">:</span> Ordered Irregular Points)
and data<span class="pl-k">:</span> <span class="pl-c1">180</span><span class="pl-k">×</span><span class="pl-c1">170</span><span class="pl-k">×</span><span class="pl-c1">24</span> Array{Union{Missing, Float32},<span class="pl-c1">3</span>}
[:, :, <span class="pl-c1">1</span>]
 <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>  …  <span class="pl-c1">271.437</span>  <span class="pl-c1">271.445</span>  <span class="pl-c1">271.459</span>
 <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">271.438</span>  <span class="pl-c1">271.445</span>  <span class="pl-c1">271.459</span>
<span class="pl-k">...</span></pre></div>
<p>Now plot every third month in the first year, just using the regular index:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Plots

juila&gt; A[Ti(1:3:12)] |&gt; plot
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots

juila<span class="pl-k">&gt;</span> A[<span class="pl-c1">Ti</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">12</span>)] <span class="pl-k">|&gt;</span> plot</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/four_pane_map.png"><img src="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/four_pane_map.png" alt="Global ocean surface temperatures" style="max-width:100%;"></a></p>
<p>Now plot Australia in the first month of 2001. Notice we are using lat/lon coordinates
and date/time instead of regular indexes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; A[Ti(Near(DateTime360Day(2001, 01, 17))), 
         Lat(Between(0.0, -50.0)), 
         Lon(Between(100.0, 160.0))] |&gt; plot
"><pre>julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">Ti</span>(<span class="pl-c1">Near</span>(<span class="pl-c1">DateTime360Day</span>(<span class="pl-c1">2001</span>, <span class="pl-c1">01</span>, <span class="pl-c1">17</span>))), 
         <span class="pl-c1">Lat</span>(<span class="pl-c1">Between</span>(<span class="pl-c1">0.0</span>, <span class="pl-k">-</span><span class="pl-c1">50.0</span>)), 
         <span class="pl-c1">Lon</span>(<span class="pl-c1">Between</span>(<span class="pl-c1">100.0</span>, <span class="pl-c1">160.0</span>))] <span class="pl-k">|&gt;</span> plot</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/aus.png"><img src="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/aus.png" alt="Australia regional ocean surface temperature" style="max-width:100%;"></a></p>
<p>Now get the mean over the timespan, then save it to disk, and plot it :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Statistics
julia&gt; mean_tos = mean(A; dims=Ti)
GeoArray (named tos) with dimensions:
 Longitude (type Lon): Float64[1.0, 3.0, …, 357.0, 359.0] (Converted: Ordered Regular Intervals)
 Latitude (type Lat): Float64[-79.5, -78.5, …, 88.5, 89.5] (Converted: Ordered Regular Intervals)
 Time (type Ti): DateTime360Day[2001-01-16T00:00:00] (Sampled: Ordered Irregular Points)
and data: 180×170×1 Array{Union{Missing, Float32},3}
[:, :, 1]
 missing  missing     missing     missing  …  271.434  271.443  271.454
 missing  missing     missing     missing     271.434  271.443  271.454
...

julia&gt; write(&quot;mean.ncd&quot;, NCDarray, mean_tos)
    Writing netcdf...
        key: &quot;longitude&quot; of type: Float64
        key: &quot;latitude&quot; of type: Float64
        key: &quot;time&quot; of type: DateTime360Day
        key: &quot;tos&quot; of type: Union{Missing, Float32}
&quot;mean.ncd&quot;

julia&gt; plot(mean_tos; color=:viridis) 
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Statistics
julia<span class="pl-k">&gt;</span> mean_tos <span class="pl-k">=</span> <span class="pl-c1">mean</span>(A; dims<span class="pl-k">=</span>Ti)
GeoArray (named tos) with dimensions<span class="pl-k">:</span>
 Longitude (type Lon)<span class="pl-k">:</span> Float64[<span class="pl-c1">1.0</span>, <span class="pl-c1">3.0</span>, …, <span class="pl-c1">357.0</span>, <span class="pl-c1">359.0</span>] (Converted<span class="pl-k">:</span> Ordered Regular Intervals)
 Latitude (type Lat)<span class="pl-k">:</span> Float64[<span class="pl-k">-</span><span class="pl-c1">79.5</span>, <span class="pl-k">-</span><span class="pl-c1">78.5</span>, …, <span class="pl-c1">88.5</span>, <span class="pl-c1">89.5</span>] (Converted<span class="pl-k">:</span> Ordered Regular Intervals)
 Time (type Ti)<span class="pl-k">:</span> DateTime360Day[<span class="pl-c1">2001</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>] (Sampled<span class="pl-k">:</span> Ordered Irregular Points)
and data<span class="pl-k">:</span> <span class="pl-c1">180</span><span class="pl-k">×</span><span class="pl-c1">170</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Union{Missing, Float32},<span class="pl-c1">3</span>}
[:, :, <span class="pl-c1">1</span>]
 <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>  …  <span class="pl-c1">271.434</span>  <span class="pl-c1">271.443</span>  <span class="pl-c1">271.454</span>
 <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">271.434</span>  <span class="pl-c1">271.443</span>  <span class="pl-c1">271.454</span>
<span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>mean.ncd<span class="pl-pds">"</span></span>, NCDarray, mean_tos)
    Writing netcdf<span class="pl-k">...</span>
        key<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>longitude<span class="pl-pds">"</span></span> of type<span class="pl-k">:</span> Float64
        key<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>latitude<span class="pl-pds">"</span></span> of type<span class="pl-k">:</span> Float64
        key<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>time<span class="pl-pds">"</span></span> of type<span class="pl-k">:</span> DateTime360Day
        key<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>tos<span class="pl-pds">"</span></span> of type<span class="pl-k">:</span> Union{Missing, Float32}
<span class="pl-s"><span class="pl-pds">"</span>mean.ncd<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(mean_tos; color<span class="pl-k">=</span><span class="pl-c1">:viridis</span>) </pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/mean.png"><img src="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/mean.png" alt="Mean temperatures" style="max-width:100%;"></a></p>
<p>Plotting recipes in DimensionalData.jl are the fallback for GedData.jl when
the object doesn't have both <code>Lat</code> and <code>Lon</code> dimensions. So (as a random example) we
could plot a transect of ocean surface temperature at 20 degree latitude :</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A[Lat(Near(20.0)), Ti(1)] |&gt; plot
"><pre>A[<span class="pl-c1">Lat</span>(<span class="pl-c1">Near</span>(<span class="pl-c1">20.0</span>)), <span class="pl-c1">Ti</span>(<span class="pl-c1">1</span>)] <span class="pl-k">|&gt;</span> plot</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/lat_20.png"><img src="https://raw.githubusercontent.com/rafaqz/GeoData.jl/media/lat_20.png" alt="Temperatures at lattitude 20-21" style="max-width:100%;"></a></p>
<p>GeoData.jl provides a range of other methods that are being added to over time.</p>
<ul>
<li><code>agregate</code>: aggregate data by the same or different amounts for each axis.</li>
<li><code>disaggregate</code>: disaggregate data by the same or different amounts for each axis</li>
<li><code>resample</code> can resample data to a different size and projection, and snap to
an existing <code>AbstractGeoArray</code>.</li>
</ul>
<p>For example, <code>aggregate</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; aggregate(mean, A, (Ti(12), Lat(20), Lon(20))

GeoArray (named tos) with dimensions:
 Longitude (type Lon): Float64[21.0, 61.0, …, 301.0, 341.0] (Converted: Ordered Regular Intervals)
 Latitude (type Lat): Float64[-69.5, -49.5, …, 50.5, 70.5] (Converted: Ordered Regular Intervals)
 Time (type Ti): DateTime360Day[2001-01-16T00:00:00, 2002-01-16T00:00:00] (Sampled: Ordered Irregular Points)
and data: 9×8×2 Array{Union{Missing, Float32},3}
[:, :, 1]
 missing  277.139        missing     missing     missing     missing  missing  missing
 missing  277.126        missing     missing     missing     missing  missing  missing
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">aggregate</span>(mean, A, (<span class="pl-c1">Ti</span>(<span class="pl-c1">12</span>), <span class="pl-c1">Lat</span>(<span class="pl-c1">20</span>), <span class="pl-c1">Lon</span>(<span class="pl-c1">20</span>))

GeoArray (named tos) with dimensions<span class="pl-k">:</span>
 Longitude (type Lon)<span class="pl-k">:</span> Float64[<span class="pl-c1">21.0</span>, <span class="pl-c1">61.0</span>, …, <span class="pl-c1">301.0</span>, <span class="pl-c1">341.0</span>] (Converted<span class="pl-k">:</span> Ordered Regular Intervals)
 Latitude (type Lat)<span class="pl-k">:</span> Float64[<span class="pl-k">-</span><span class="pl-c1">69.5</span>, <span class="pl-k">-</span><span class="pl-c1">49.5</span>, …, <span class="pl-c1">50.5</span>, <span class="pl-c1">70.5</span>] (Converted<span class="pl-k">:</span> Ordered Regular Intervals)
 Time (type Ti)<span class="pl-k">:</span> DateTime360Day[<span class="pl-c1">2001</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>, <span class="pl-c1">2002</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">16</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span>] (Sampled<span class="pl-k">:</span> Ordered Irregular Points)
and data<span class="pl-k">:</span> <span class="pl-c1">9</span><span class="pl-k">×</span><span class="pl-c1">8</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Union{Missing, Float32},<span class="pl-c1">3</span>}
[:, :, <span class="pl-c1">1</span>]
 <span class="pl-c1">missing</span>  <span class="pl-c1">277.139</span>        <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>
 <span class="pl-c1">missing</span>  <span class="pl-c1">277.126</span>        <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>     <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span>  <span class="pl-c1">missing</span></pre></div>
<p>These methods will also work for entire <code>GeoStacks</code> and <code>GeoSeries</code> using the same syntax.</p>
<h2><a id="user-content-works-in-progress" class="anchor" aria-hidden="true" href="#works-in-progress"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Works in progress</h2>
<ul>
<li>Integration with Vector/DataFrame spatial types and point/line/polygon data
types. It should be possible to select polygons of data, and convert between
linear datasets and array formats.</li>
<li>Standardised handling and conversion of spatial metadata between data formats</li>
<li>Handling complex projections: Affine transformation of dimensions to indices.
AffineMaps will be stored as a wrapper dimension in <code>dims</code>.</li>
<li>Load and write the NetCDF projection format.</li>
</ul>
</article></div>