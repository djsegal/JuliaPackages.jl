<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-geodata" class="anchor" aria-hidden="true" href="#geodata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GeoData</h1>
<p><a href="https://rafaqz.github.io/GeoData.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://rafaqz.github.io/GeoData.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/rafaqz/GeoData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/672e6a508cf950560dffb50a6bc51a5f2b42e320/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f47656f446174612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/GeoData.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/rafaqz/GeoData.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/da78b8f2b3569cb98b3d1d39a1728744b6440585/68747470733a2f2f636f6465636f762e696f2f67682f72616661717a2f47656f446174612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/rafaqz/GeoData.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>GeoData.jl defines common types and methods for accessing and
working with spatial data in Julia, such as 2 or multidimensional raster arrays.
It provides general types <code>GeoArray</code>, <code>GeoStack</code>, and <code>GeoSeries</code>, and
source specific types for loading GDAL, NetCDF and other file types,
available when packages like ArchGDAL.jl or NCDatasets.jl are loaded.</p>
<p>GeoData.jl is useful both as a scripting tool, and as a library of
standardised data manipulation for use in other geospatial data and
modelling packages.</p>
<p>GeoData.jl extends
<a href="https://github.com/rafaqz/DimensionalData.jl">DimensionalData.jl</a> so that data
can be indexed using named dimensions, which can also be used in most methods
like <code>mean</code> and <code>reduce</code> where dimensions are required. Most behaviour is
covered in the <a href="https://rafaqz.github.io/DimensionalData.jl/stable/" rel="nofollow">DimensionalData docs</a>.</p>
<h2><a id="user-content-goals" class="anchor" aria-hidden="true" href="#goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Goals</h2>
<ul>
<li>Standardisation: data from multiple sources has similar or identical syntax
and behaviour.</li>
<li>Easy, no-config plotting</li>
<li>Lazy loading: minimisation of memory requirements for large datasets</li>
<li>Accuracy: <code>Selector</code>s should select exact regions, and handle points both
and intervals.</li>
<li>Multi-layer, multi-file objects. <code>GeoStack</code> and <code>GeoSeries</code> facilitate
simple operations over large datasets, with detail abstracted away from
users and other packages.</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>We'll load a file from disk, and do some manipulations and plotting.</p>
<p>Load GeoData, and NCDatasets, download file and load it to
an array. This netcdf file only has one layer, if it has more we
could use <code>NCDstack</code> instead.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> GeoData, NCDatasets
filename <span class="pl-k">=</span> <span class="pl-c1">download</span>(<span class="pl-s"><span class="pl-pds">"</span>https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>tos_O1_2001-2002.nc<span class="pl-pds">"</span></span>)
A <span class="pl-k">=</span> <span class="pl-c1">NCDarrar</span>(filename)</pre></div>
<p>Now plot every third month in the first year, just using the regular index:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">pyplot</span>()
A[<span class="pl-c1">Ti</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">12</span>)] <span class="pl-k">|&gt;</span> plot</pre></div>
<p>Now plot Australia in the first month of 2001.</p>
<div class="highlight highlight-source-julia"><pre>A[<span class="pl-c1">Ti</span>(<span class="pl-c1">Contains</span>(<span class="pl-c1">DateTime360Day</span>(<span class="pl-c1">2001</span>, <span class="pl-c1">01</span>, <span class="pl-c1">17</span>))), <span class="pl-c1">Lat</span>(<span class="pl-c1">Between</span>(<span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">50</span>)), <span class="pl-c1">Lon</span>(<span class="pl-c1">Between</span>(<span class="pl-c1">100</span>, <span class="pl-c1">160</span>))] <span class="pl-k">|&gt;</span> plot</pre></div>
<p>Now plot a mean over the timespan, then save it to disk :</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">mean</span>(A; dims<span class="pl-k">=</span>Ti) <span class="pl-k">|&gt;</span> plot

<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>mean.netcdf, NCDarray, mean(A; dims=Ti)))</span></pre></div>
<p>Or a transect of ocean surface temperature along the 20 degree latitude line:</p>
<div class="highlight highlight-source-julia"><pre>A[<span class="pl-c1">Lat</span>(<span class="pl-c1">Contains</span>(<span class="pl-c1">20</span>)), <span class="pl-c1">Ti</span>(<span class="pl-c1">1</span>)] <span class="pl-k">|&gt;</span> plot</pre></div>
<h2><a id="user-content-works-in-progress" class="anchor" aria-hidden="true" href="#works-in-progress"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Works in progress</h2>
<ul>
<li>Standardised handling of metadata</li>
<li>Handling complex projections: Affine transformation of dimensions to indices.
AffineMaps will be stored as a wrapper dimension in <code>dims</code>.</li>
<li>Integration with Vector/DataFrame spatial types and point/line/polygon data
types. It should be possible to select polygons of data, and convert between
linear datasets and array formats.</li>
</ul>
</article></div>