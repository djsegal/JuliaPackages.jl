<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/matthieugomez/EconPDEs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4a69fbc8d22770c48da57287e0e21fb34ef7b4b/68747470733a2f2f7472617669732d63692e6f72672f6d61747468696575676f6d657a2f45636f6e504445732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/matthieugomez/EconPDEs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/matthieugomez/EconPDEs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/33725775d51dcd1c31d18bcf9100f6edaf266ceb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d61747468696575676f6d657a2f45636f6e504445732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/matthieugomez/EconPDEs.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides the function <code>pdesolve</code> that solves (system of) nonlinear ODEs/PDEs arising in economic models (i.e. parabolic/elliptic PDEs arising from HJB equations). It is:</p>
<ul>
<li>robust: upwinding + fully implicit time stepping (see <a href="https://github.com/matthieugomez/EconPDEs.jl/blob/master/examples/details.pdf">here</a>)</li>
<li>fast: sparse matrices + Newton acceleration</li>
<li>simple-to-use</li>
</ul>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<p>The <a href="https://github.com/matthieugomez/EconPDEs.jl/tree/master/examples">examples folder</a>  solves a variety of macro-finance models:</p>
<ul>
<li><em>Habit Model</em> (Campbell Cochrane (1999) and Wachter (2005))</li>
<li><em>Long Run Risk Model</em> (Bansal Yaron (2004))</li>
<li><em>Disaster Model</em> (Wachter (2013))</li>
<li><em>Heterogeneous Agent Models</em> (Garleanu Panageas (2015), Di Tella (2017), Haddad (2015))</li>
<li><em>Consumption with Borrowing Constraint</em> (Wang Wang Yang (2016), Achdou Han Lasry Lions Moll (2018))</li>
<li><em>Investment with Borrowing Constraint</em> (Bolton Chen Wang (2009))</li>
</ul>
<h1><a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A Simple Example</h1>
<p>For instance, to solve the PDE giving the price-dividend ratio in the Long Run Risk model with time-varying drift:</p>

<p><a target="_blank" rel="noopener noreferrer" href="img/by.png"><img src="img/by.png" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> EconPDEs

<span class="pl-c"><span class="pl-c">#</span> Define a discretized state space</span>
<span class="pl-c"><span class="pl-c">#</span> An OrderedDict in which each key corresponds to a dimension of the state space.</span>
stategrid <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(:μ <span class="pl-k">=&gt;</span> <span class="pl-c1">range</span>(<span class="pl-k">-</span><span class="pl-c1">0.05</span>, stop <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, length <span class="pl-k">=</span> <span class="pl-c1">500</span>))

<span class="pl-c"><span class="pl-c">#</span> Define an initial guess for the value functions</span>
<span class="pl-c"><span class="pl-c">#</span> An OrderedDict in which each key corresponds to a value function to solve for, </span>
<span class="pl-c"><span class="pl-c">#</span> specified as an array with the same dimension as the state space</span>
y0 <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:V</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">ones</span>(<span class="pl-c1">500</span>))

<span class="pl-c"><span class="pl-c">#</span> Define a function that encodes the PDE. </span>
<span class="pl-c"><span class="pl-c">#</span> The function takes three arguments:</span>
<span class="pl-c"><span class="pl-c">#</span> 1. A named tuple giving the current value of the state. </span>
<span class="pl-c"><span class="pl-c">#</span> 2. A named tuple giving the value function(s) (as well as its derivatives)</span>
<span class="pl-c"><span class="pl-c">#</span> at the current value of the state. </span>
<span class="pl-c"><span class="pl-c">#</span> 3. (Optional) Current time t</span>
<span class="pl-c"><span class="pl-c">#</span> It returns two tuples:</span>
<span class="pl-c"><span class="pl-c">#</span> 1. a tuple with the opposite of the time derivative of each value function</span>
<span class="pl-c"><span class="pl-c">#</span> 2. a tuple with the drift of each state variable (internally used for upwinding)</span>
<span class="pl-k">function</span> <span class="pl-en">f</span>(state<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>, sol<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>)
	μbar <span class="pl-k">=</span> <span class="pl-c1">0.018</span> ; ϑ <span class="pl-k">=</span> <span class="pl-c1">0.00073</span> ; θμ <span class="pl-k">=</span> <span class="pl-c1">0.252</span> ; νμ <span class="pl-k">=</span> <span class="pl-c1">0.528</span> ; ρ <span class="pl-k">=</span> <span class="pl-c1">0.025</span> ; ψ <span class="pl-k">=</span> <span class="pl-c1">1.5</span> ; γ <span class="pl-k">=</span> <span class="pl-c1">7.5</span>
	Vt <span class="pl-k">=</span> <span class="pl-c1">1</span>  <span class="pl-k">-</span> ρ <span class="pl-k">*</span> sol<span class="pl-k">.</span>V <span class="pl-k">+</span> (<span class="pl-c1">1</span> <span class="pl-k">-</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> ψ) <span class="pl-k">*</span> (state<span class="pl-k">.</span>μ <span class="pl-k">-</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> γ <span class="pl-k">*</span> ϑ) <span class="pl-k">*</span> sol<span class="pl-k">.</span>V <span class="pl-k">+</span> θμ <span class="pl-k">*</span> (μbar <span class="pl-k">-</span> state<span class="pl-k">.</span>μ) <span class="pl-k">*</span> sol<span class="pl-k">.</span>Vμ <span class="pl-k">+</span>
	<span class="pl-c1">0.5</span> <span class="pl-k">*</span> νμ<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span> ϑ <span class="pl-k">*</span> sol<span class="pl-k">.</span>Vμμ  <span class="pl-k">+</span> <span class="pl-c1">0.5</span> <span class="pl-k">*</span> (<span class="pl-c1">1</span> <span class="pl-k">/</span> ψ <span class="pl-k">-</span> γ) <span class="pl-k">/</span> (<span class="pl-c1">1</span><span class="pl-k">-</span> <span class="pl-c1">1</span> <span class="pl-k">/</span> ψ) <span class="pl-k">*</span> νμ<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">*</span>  ϑ <span class="pl-k">*</span> sol<span class="pl-k">.</span>Vμ<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span>sol<span class="pl-k">.</span>V
	(Vt,), (θμ <span class="pl-k">*</span> (μbar <span class="pl-k">-</span> state<span class="pl-k">.</span>μ),)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The function `pdesolve` takes four arguments:</span>
<span class="pl-c"><span class="pl-c">#</span> 1. the function encoding the PDE</span>
<span class="pl-c"><span class="pl-c">#</span> 2. the discretized state space</span>
<span class="pl-c"><span class="pl-c">#</span> 3. the initial guess for the value functions</span>
<span class="pl-c"><span class="pl-c">#</span> 4. a time grid with decreasing values </span>
<span class="pl-c1">@time</span> <span class="pl-c1">pdesolve</span>(f, stategrid, y0, <span class="pl-c1">range</span>(<span class="pl-c1">1000</span>, stop <span class="pl-k">=</span> <span class="pl-c1">0</span>, length <span class="pl-k">=</span> <span class="pl-c1">100</span>))
<span class="pl-c"><span class="pl-c">#</span>&gt; 0.220390 seconds (3.07 M allocations: 219.883 MiB, 18.28% gc time)</span>

<span class="pl-c"><span class="pl-c">#</span> To solve directly for the stationary solution, </span>
<span class="pl-c"><span class="pl-c">#</span> i.e. the solution of the PDE with ∂tV = 0,</span>
<span class="pl-c"><span class="pl-c">#</span> simply omit the time grid</span>
<span class="pl-c1">@time</span> <span class="pl-c1">pdesolve</span>(f, stategrid, y0)
<span class="pl-c"><span class="pl-c">#</span>&gt;  0.018544 seconds (301.91 k allocations: 20.860 MiB)</span></pre></div>
<p>More complicated ODEs / PDES (including PDE with two state variables or systems of multiple PDEs) can be found in the <code>examples</code> folder.</p>
<h1><a id="user-content-boundary-conditions" class="anchor" aria-hidden="true" href="#boundary-conditions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Boundary Conditions</h1>
<p>When solving a PDE using a finite scheme approach, one needs to specify the value of the solution <em>outside</em> the grid ("ghost node") to construct the second derivative and, in some cases, the first derivative <em>at</em> the boundary.</p>
<p>By default, the values at the ghost node is assumed to equal the value at the boundary node (reflecting boundaries). Specify different values for values at the ghost node using the option <code>bc</code> (see <a href="https://github.com/matthieugomez/EconPDEs.jl/blob/master/examples/InvestmentProblem/BoltonChenWang.jl">BoltonChenWang.jl</a> for an example).</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add EconPDEs</code>.</p>
</article></div>