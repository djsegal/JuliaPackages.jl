<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-clfft" class="anchor" aria-hidden="true" href="#clfft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CLFFT</h1>
<p><strong>Build status</strong>: <a href="https://gitlab.com/JuliaGPU/CLFFT.jl/pipelines" rel="nofollow"><img src="https://camo.githubusercontent.com/ad84ed0f839c57db4250d99fa6e6b99bed7cc968/68747470733a2f2f6769746c61622e636f6d2f4a756c69614750552f434c4646542e6a6c2f6261646765732f6d61737465722f706970656c696e652e737667" alt="" data-canonical-src="https://gitlab.com/JuliaGPU/CLFFT.jl/badges/master/pipeline.svg" style="max-width:100%;"></a></p>
<p>Julia bindings to AMD's clFFT library</p>
<p><strong>WARNING:</strong> Some functions in this package FAIL in tests and aren't considered stable. Please, familiarize yourself
with <a href="https://github.com/JuliaGPU/CLFFT.jl/blob/master/test/runtests.jl">tests</a> before using the package.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> OpenCL
<span class="pl-k">import</span> CLFFT

<span class="pl-k">const</span> cl <span class="pl-k">=</span> OpenCL
<span class="pl-k">const</span> clfft <span class="pl-k">=</span> CLFFT

_, ctx, queue <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">create_compute_context</span>()

N <span class="pl-k">=</span> <span class="pl-c1">100</span>
X <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Complex64, N)
bufX <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Complex64, ctx, <span class="pl-c1">:copy</span>, hostbuf<span class="pl-k">=</span>X)

p <span class="pl-k">=</span> clfft<span class="pl-k">.</span><span class="pl-c1">Plan</span>(Complex64, ctx, <span class="pl-c1">size</span>(X))
clfft<span class="pl-k">.</span><span class="pl-c1">set_layout!</span>(p, <span class="pl-c1">:interleaved</span>, <span class="pl-c1">:interleaved</span>)
clfft<span class="pl-k">.</span><span class="pl-c1">set_result!</span>(p, <span class="pl-c1">:inplace</span>)
clfft<span class="pl-k">.</span><span class="pl-c1">bake!</span>(p, queue)

clfft<span class="pl-k">.</span><span class="pl-c1">enqueue_transform</span>(p, <span class="pl-c1">:forward</span>, [queue], bufX, <span class="pl-c1">nothing</span>)  
result <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">read</span>(queue, bufX)

<span class="pl-c1">@assert</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">norm</span>(result <span class="pl-k">-</span> <span class="pl-c1">fft</span>(X)), <span class="pl-c1">zero</span>(Float32))</pre></div>
</article></div>