<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-clfft" class="anchor" aria-hidden="true" href="#clfft"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CLFFT</h1>
<p><strong>Build status</strong>: <a href="https://gitlab.com/JuliaGPU/CLFFT.jl/pipelines" rel="nofollow"><img src="https://camo.githubusercontent.com/bc32a3615ebbc5a8b6764d69a025b6c74be1c73bc986d7a0ab5519af66252db0/68747470733a2f2f6769746c61622e636f6d2f4a756c69614750552f434c4646542e6a6c2f6261646765732f6d61737465722f706970656c696e652e737667" alt="" data-canonical-src="https://gitlab.com/JuliaGPU/CLFFT.jl/badges/master/pipeline.svg" style="max-width:100%;"></a></p>
<p>Julia bindings to AMD's clFFT library</p>
<p><strong>WARNING:</strong> Some functions in this package FAIL in tests and aren't considered stable. Please, familiarize yourself
with <a href="https://github.com/JuliaGPU/CLFFT.jl/blob/master/test/runtests.jl">tests</a> before using the package.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import OpenCL
import CLFFT

const cl = OpenCL
const clfft = CLFFT

_, ctx, queue = cl.create_compute_context()

N = 100
X = ones(Complex64, N)
bufX = cl.Buffer(Complex64, ctx, :copy, hostbuf=X)

p = clfft.Plan(Complex64, ctx, size(X))
clfft.set_layout!(p, :interleaved, :interleaved)
clfft.set_result!(p, :inplace)
clfft.bake!(p, queue)

clfft.enqueue_transform(p, :forward, [queue], bufX, nothing)  
result = cl.read(queue, bufX)

@assert isapprox(norm(result - fft(X)), zero(Float32))
"><pre><span class="pl-k">import</span> OpenCL
<span class="pl-k">import</span> CLFFT

<span class="pl-k">const</span> cl <span class="pl-k">=</span> OpenCL
<span class="pl-k">const</span> clfft <span class="pl-k">=</span> CLFFT

_, ctx, queue <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">create_compute_context</span>()

N <span class="pl-k">=</span> <span class="pl-c1">100</span>
X <span class="pl-k">=</span> <span class="pl-c1">ones</span>(Complex64, N)
bufX <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(Complex64, ctx, <span class="pl-c1">:copy</span>, hostbuf<span class="pl-k">=</span>X)

p <span class="pl-k">=</span> clfft<span class="pl-k">.</span><span class="pl-c1">Plan</span>(Complex64, ctx, <span class="pl-c1">size</span>(X))
clfft<span class="pl-k">.</span><span class="pl-c1">set_layout!</span>(p, <span class="pl-c1">:interleaved</span>, <span class="pl-c1">:interleaved</span>)
clfft<span class="pl-k">.</span><span class="pl-c1">set_result!</span>(p, <span class="pl-c1">:inplace</span>)
clfft<span class="pl-k">.</span><span class="pl-c1">bake!</span>(p, queue)

clfft<span class="pl-k">.</span><span class="pl-c1">enqueue_transform</span>(p, <span class="pl-c1">:forward</span>, [queue], bufX, <span class="pl-c1">nothing</span>)  
result <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">read</span>(queue, bufX)

<span class="pl-c1">@assert</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">norm</span>(result <span class="pl-k">-</span> <span class="pl-c1">fft</span>(X)), <span class="pl-c1">zero</span>(Float32))</pre></div>
</article></div>