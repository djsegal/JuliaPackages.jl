<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-clfftjl" class="anchor" aria-hidden="true" href="#clfftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CLFFT.jl</h1>
<p dir="auto">Julia bindings to clFFT library.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import OpenCL
import CLFFT
import FFTW
using LinearAlgebra

const cl = OpenCL.cl
const clfft = CLFFT

_, ctx, queue = cl.create_compute_context()

N = 100
X = ones(ComplexF64, N)
bufX = cl.Buffer(ComplexF64, ctx, :copy, hostbuf=X)

p = clfft.Plan(ComplexF64, ctx, size(X))
clfft.set_layout!(p, :interleaved, :interleaved)
clfft.set_result!(p, :inplace)
clfft.bake!(p, queue)

clfft.enqueue_transform(p, :forward, [queue], bufX, nothing)  
result = cl.read(queue, bufX)

@assert isapprox(norm(result - FFTW.fft(X)), zero(Float32))"><pre><span class="pl-k">import</span> OpenCL
<span class="pl-k">import</span> CLFFT
<span class="pl-k">import</span> FFTW
<span class="pl-k">using</span> LinearAlgebra

<span class="pl-k">const</span> cl <span class="pl-k">=</span> OpenCL<span class="pl-k">.</span>cl
<span class="pl-k">const</span> clfft <span class="pl-k">=</span> CLFFT

_, ctx, queue <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">create_compute_context</span>()

N <span class="pl-k">=</span> <span class="pl-c1">100</span>
X <span class="pl-k">=</span> <span class="pl-c1">ones</span>(ComplexF64, N)
bufX <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">Buffer</span>(ComplexF64, ctx, <span class="pl-c1">:copy</span>, hostbuf<span class="pl-k">=</span>X)

p <span class="pl-k">=</span> clfft<span class="pl-k">.</span><span class="pl-c1">Plan</span>(ComplexF64, ctx, <span class="pl-c1">size</span>(X))
clfft<span class="pl-k">.</span><span class="pl-c1">set_layout!</span>(p, <span class="pl-c1">:interleaved</span>, <span class="pl-c1">:interleaved</span>)
clfft<span class="pl-k">.</span><span class="pl-c1">set_result!</span>(p, <span class="pl-c1">:inplace</span>)
clfft<span class="pl-k">.</span><span class="pl-c1">bake!</span>(p, queue)

clfft<span class="pl-k">.</span><span class="pl-c1">enqueue_transform</span>(p, <span class="pl-c1">:forward</span>, [queue], bufX, <span class="pl-c1">nothing</span>)  
result <span class="pl-k">=</span> cl<span class="pl-k">.</span><span class="pl-c1">read</span>(queue, bufX)

<span class="pl-c1">@assert</span> <span class="pl-c1">isapprox</span>(<span class="pl-c1">norm</span>(result <span class="pl-k">-</span> FFTW<span class="pl-k">.</span><span class="pl-c1">fft</span>(X)), <span class="pl-c1">zero</span>(Float32))</pre></div>
</article></div>