<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-adaptivemcmcjl" class="anchor" aria-hidden="true" href="#adaptivemcmcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AdaptiveMCMC.jl</h1>
<p>This package provides implementations of some general-purpose random-walk based adaptive MCMC algorithms, including the following:</p>
<ul>
<li>Adaptive Metropolis, proposal covariance adaptation, (<a href="https://projecteuclid.org/euclid.bj/1080222083" rel="nofollow">Haario, Saksman and Tamminen, 2001</a>, and <a href="http://dx.doi.org/10.1214/105051606000000286" rel="nofollow">Andrieu and Moulines, 2006</a>)</li>
<li>Adaptive scaling Metropolis, acceptance rate adaptation for scale (e.g. as in <a href="https://doi.org/10.1007/s11222-008-9110-y" rel="nofollow">Andrieu and Thoms, 2008</a>, and <a href="https://projecteuclid.org/euclid.bj/1265984706" rel="nofollow">Atchadé and Fort, 2010</a>)</li>
<li>Robust Adaptive Metropolis, acceptance rate adaptation for shape <a href="http://dx.doi.org/10.1007/s11222-011-9269-5" rel="nofollow">(Vihola, 2012)</a></li>
<li>Adaptive Parallel Tempering, acceptance rate adaptation for temperature levels <a href="http://dx.doi.org/10.1080/10618600.2013.778779" rel="nofollow">(Miasojedow, Moulines and Vihola, 2013)</a></li>
</ul>
<p>The aim of the package is to provide a simple and modular general-purpose implementation, which may be easily used to sample from a log-target density, but also used in a variety of custom settings.</p>
<p>See also <a href="https://github.com/mvihola/AdaptiveParticleMCMC.jl">AdaptiveParticleMCMC.jl</a> which uses this package with <a href="https://github.com/awllee/SequentialMonteCarlo.jl">SequentialMonteCarlo.jl</a> for adaptive particle MCMC.</p>
<h2><a id="user-content-getting-the-package" class="anchor" aria-hidden="true" href="#getting-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting the package</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AdaptiveMCMC<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Load the package</span>
<span class="pl-k">using</span> AdaptiveMCMC

<span class="pl-c"><span class="pl-c">#</span> Define a function which returns log-density values:</span>
<span class="pl-en">log_p</span>(x) <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">.5</span><span class="pl-k">*</span><span class="pl-c1">sum</span>(x<span class="pl-k">.^</span><span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Run 10k iterations of the Adaptive Metropolis:</span>
out <span class="pl-k">=</span> <span class="pl-c1">adaptive_rwm</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>), log_p, <span class="pl-c1">10_000</span>; algorithm<span class="pl-k">=</span><span class="pl-c1">:am</span>)

<span class="pl-c"><span class="pl-c">#</span> Calculate '95% credible intervals':</span>
<span class="pl-k">using</span> Statistics
<span class="pl-c1">mapslices</span>(x<span class="pl-k">-&gt;</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">mean</span>(x))</span> ± <span class="pl-v">$(<span class="pl-c1">1.96</span><span class="pl-c1">std</span>(x))</span><span class="pl-pds">"</span></span>, out<span class="pl-k">.</span>X, dims<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p>The function <code>adaptive_rwm</code> ('Adaptive Random walk Metropolis') is a simple implenentation
which does sampling for a given log-target density with the chosen method.</p>
<h2><a id="user-content-adaptive-parallel-tempering" class="anchor" aria-hidden="true" href="#adaptive-parallel-tempering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adaptive parallel tempering</h2>
<p>The <code>adaptive_rwm</code> also implements tempering, which is used if an optional argument <code>L≥2</code> (number of temperature levels) is supplied. Here is a simple multimodal distribution sampled with APT:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Multimodal target of dimension d.</span>
<span class="pl-k">function</span> <span class="pl-en">multimodalTarget</span>(d<span class="pl-k">::</span><span class="pl-c1">Int</span>, sigma2<span class="pl-k">=</span><span class="pl-c1">0.1</span><span class="pl-k">^</span><span class="pl-c1">2</span>, sigman<span class="pl-k">=</span>sigma2)
    <span class="pl-c"><span class="pl-c">#</span> The means of mixtures</span>
    m <span class="pl-k">=</span> [<span class="pl-c1">2.18</span> <span class="pl-c1">5.76</span>; <span class="pl-c1">3.25</span> <span class="pl-c1">3.47</span>; <span class="pl-c1">5.41</span> <span class="pl-c1">2.65</span>; <span class="pl-c1">4.93</span> <span class="pl-c1">1.50</span>; <span class="pl-c1">8.67</span> <span class="pl-c1">9.59</span>;
         <span class="pl-c1">1.70</span> <span class="pl-c1">0.50</span>; <span class="pl-c1">2.70</span> <span class="pl-c1">7.88</span>; <span class="pl-c1">1.83</span> <span class="pl-c1">0.09</span>; <span class="pl-c1">4.24</span> <span class="pl-c1">8.48</span>; <span class="pl-c1">4.59</span> <span class="pl-c1">5.60</span>;
         <span class="pl-c1">4.98</span> <span class="pl-c1">3.70</span>; <span class="pl-c1">2.26</span> <span class="pl-c1">0.31</span>; <span class="pl-c1">8.41</span> <span class="pl-c1">1.68</span>; <span class="pl-c1">6.91</span> <span class="pl-c1">5.81</span>; <span class="pl-c1">1.14</span> <span class="pl-c1">2.39</span>;
         <span class="pl-c1">5.54</span> <span class="pl-c1">6.86</span>; <span class="pl-c1">3.93</span> <span class="pl-c1">8.82</span>; <span class="pl-c1">6.87</span> <span class="pl-c1">5.40</span>; <span class="pl-c1">8.33</span> <span class="pl-c1">9.50</span>; <span class="pl-c1">1.69</span> <span class="pl-c1">8.11</span>]'
    n_m <span class="pl-k">=</span> <span class="pl-c1">size</span>(m,<span class="pl-c1">2</span>)
    <span class="pl-c1">@assert</span> d<span class="pl-k">&gt;=</span><span class="pl-c1">2</span> <span class="pl-s"><span class="pl-pds">"</span>Dimension should be &gt;= 2<span class="pl-pds">"</span></span>
    <span class="pl-k">let</span> m<span class="pl-k">=</span>m, n_m<span class="pl-k">=</span><span class="pl-c1">size</span>(m,<span class="pl-c1">2</span>), d<span class="pl-k">=</span>d
        <span class="pl-k">function</span> <span class="pl-en">log_p</span>(x<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)
            l_dens <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span><span class="pl-k">*</span>(<span class="pl-c1">mapslices</span>(sum, (m<span class="pl-k">.-</span>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>])<span class="pl-k">.^</span><span class="pl-c1">2</span>, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>sigma2)
            <span class="pl-k">if</span> d<span class="pl-k">&gt;</span><span class="pl-c1">2</span>
                l_dens <span class="pl-k">.-</span><span class="pl-k">=</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">mapslices</span>(sum, x[<span class="pl-c1">3</span><span class="pl-k">:</span>d]<span class="pl-k">.</span><span class="pl-k">^</span><span class="pl-c1">2</span>, dims<span class="pl-k">=</span><span class="pl-c1">1</span>)<span class="pl-k">/</span>sigman
            <span class="pl-k">end</span>
            l_max <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(l_dens) <span class="pl-c"><span class="pl-c">#</span> Prevent underflow by log-sum trick</span>
            l_max <span class="pl-k">+</span> <span class="pl-c1">log</span>(<span class="pl-c1">sum</span>(<span class="pl-c1">exp</span>.(l_dens<span class="pl-k">.-</span>l_max)))
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">using</span> AdaptiveMCMC
n <span class="pl-k">=</span> <span class="pl-c1">100_000</span>; L <span class="pl-k">=</span> <span class="pl-c1">2</span>
rwm <span class="pl-k">=</span> <span class="pl-c1">adaptive_rwm</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>), <span class="pl-c1">multimodalTarget</span>(<span class="pl-c1">2</span>), n; thin<span class="pl-k">=</span><span class="pl-c1">10</span>)
apt <span class="pl-k">=</span> <span class="pl-c1">adaptive_rwm</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>), <span class="pl-c1">multimodalTarget</span>(<span class="pl-c1">2</span>), <span class="pl-c1">div</span>(n,L); L <span class="pl-k">=</span> L, thin<span class="pl-k">=</span><span class="pl-c1">10</span>)

<span class="pl-c"><span class="pl-c">#</span> Assuming you have 'Plots' installed:</span>
<span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">scatter</span>(rwm<span class="pl-k">.</span>X[<span class="pl-c1">1</span>,:], rwm<span class="pl-k">.</span>X[<span class="pl-c1">2</span>,:], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>w/o tempering<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:none</span>),
<span class="pl-c1">scatter</span>(apt<span class="pl-k">.</span>X[<span class="pl-c1">1</span>,:], apt<span class="pl-k">.</span>X[<span class="pl-c1">2</span>,:], title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>w/ tempering<span class="pl-pds">"</span></span>, legend<span class="pl-k">=</span><span class="pl-c1">:none</span>), layout<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>))</pre></div>
<h2><a id="user-content-using-with-distributions-and-labelledarrays" class="anchor" aria-hidden="true" href="#using-with-distributions-and-labelledarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using with Distributions and LabelledArrays</h2>
<p>MCMC is often useful with hierarchical models. These may be conveniently built using <code>Distributions</code> and <code>LabelledArrays</code> packages. The following example assumes these packages to be installed.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Distributions, LabelledArrays, AdaptiveMCMC
<span class="pl-c"><span class="pl-c">#</span> Define convenience log-transform for continuous univariate distributions</span>
<span class="pl-k">struct</span> LogTransformedDistribution{Dist <span class="pl-k">&lt;:</span> <span class="pl-c1">ContinuousUnivariateDistribution</span>}
        d<span class="pl-k">::</span><span class="pl-c1">Dist</span>
<span class="pl-k">end</span>
<span class="pl-k">import</span> Distributions<span class="pl-k">.</span>logpdf
<span class="pl-en">logpdf</span>(d<span class="pl-k">::</span><span class="pl-c1">LogTransformedDistribution</span>, x) <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(d<span class="pl-k">.</span>d, <span class="pl-c1">exp</span>(x)) <span class="pl-k">+</span> x
<span class="pl-k">import</span> Base<span class="pl-k">.</span>log
<span class="pl-en">log</span>(d<span class="pl-k">::</span><span class="pl-c1">ContinuousUnivariateDistribution</span>) <span class="pl-k">=</span> <span class="pl-c1">LogTransformedDistribution</span>(d)

<span class="pl-c"><span class="pl-c">#</span> This example is modified from Turing Getting Started:</span>
<span class="pl-c"><span class="pl-c">#</span> https://turing.ml/dev/docs/using-turing/get-started</span>
<span class="pl-k">function</span> <span class="pl-en">buildModel</span>(x<span class="pl-k">=</span><span class="pl-c1">0.0</span>, y<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
    <span class="pl-k">let</span> x<span class="pl-k">=</span>x, y<span class="pl-k">=</span>y
        <span class="pl-k">function</span>(v)
            p <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
            p <span class="pl-k">+=</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">log</span>(<span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)), v<span class="pl-k">.</span>log_s)
            ss <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-c1">.5</span><span class="pl-k">*</span>v<span class="pl-k">.</span>log_s)
            p <span class="pl-k">+=</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, ss), v<span class="pl-k">.</span>m)
            p <span class="pl-k">+=</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(v<span class="pl-k">.</span>m, ss), x)
            p <span class="pl-k">+=</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(v<span class="pl-k">.</span>m, ss), y)
            p
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Initial state vector (labelled with keys `s` and `m`)</span>
x0 <span class="pl-k">=</span> <span class="pl-c1">LVector</span>(log_s<span class="pl-k">=</span><span class="pl-c1">1.0</span>, m<span class="pl-k">=</span><span class="pl-c1">0.0</span>); log_p <span class="pl-k">=</span> <span class="pl-c1">buildModel</span>(<span class="pl-c1">3.3</span>, <span class="pl-c1">4.14</span>)
<span class="pl-c"><span class="pl-c">#</span> Hint: If you do not have a good guess of the mode of log_p (which is</span>
<span class="pl-c"><span class="pl-c">#</span> a good initial value for MCMC), you may use optimisation:</span>
<span class="pl-c"><span class="pl-c">#</span>using Optim; o = optimize(x -&gt; -log_p(x), x0); x0 = o.minimizer</span>
out <span class="pl-k">=</span> <span class="pl-c1">adaptive_rwm</span>(x0, log_p, <span class="pl-c1">1_000_000</span>; thin<span class="pl-k">=</span><span class="pl-c1">20</span>)
<span class="pl-k">using</span> StatsPlots <span class="pl-c"><span class="pl-c">#</span> Assuming installed</span>
<span class="pl-c1">corrplot</span>(out<span class="pl-k">.</span>X<span class="pl-k">'</span>, labels<span class="pl-k">=</span>[<span class="pl-c1">keys</span>(x0)<span class="pl-k">...</span>])</pre></div>
<h2><a id="user-content-custom-sampler" class="anchor" aria-hidden="true" href="#custom-sampler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom sampler</h2>
<p>The package provides also simple building blocks which you can use within a 'custom' MCMC sampler. Here is an example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AdaptiveMCMC

<span class="pl-c"><span class="pl-c">#</span> Sampler in R^d</span>
<span class="pl-k">function</span> <span class="pl-en">mySampler</span>(log_p, n, x0)

    <span class="pl-c"><span class="pl-c">#</span> Initialise random walk sampler state: r.x current state, r.y proposal</span>
    r <span class="pl-k">=</span> <span class="pl-c1">RWMState</span>(x0)

    <span class="pl-c"><span class="pl-c">#</span> Initialise Adaptive Metropolis state (with default parameters)</span>
    s <span class="pl-k">=</span> <span class="pl-c1">AdaptiveMetropolis</span>(x0)
    <span class="pl-c"><span class="pl-c">#</span> Other adaptations are: AdaptiveScalingMetropolis,</span>
    <span class="pl-c"><span class="pl-c">#</span> AdaptiveScalingWithinAdaptiveMetropolis, and RobustAdaptiveMetropolis</span>

    X <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">eltype</span>(x0), <span class="pl-c1">length</span>(x0), n) <span class="pl-c"><span class="pl-c">#</span> Allocate output storage</span>
    p_x <span class="pl-k">=</span> <span class="pl-c1">log_p</span>(r<span class="pl-k">.</span>x)                     <span class="pl-c"><span class="pl-c">#</span> = log_p(x0); the initial log target</span>
    <span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n

        <span class="pl-c"><span class="pl-c">#</span> Draw new proposal r.x -&gt; r.y:</span>
        <span class="pl-c1">draw!</span>(r, s)

        p_y <span class="pl-k">=</span> <span class="pl-c1">log_p</span>(r<span class="pl-k">.</span>y)                      <span class="pl-c"><span class="pl-c">#</span> Calculate log target at proposal</span>
        alpha <span class="pl-k">=</span> <span class="pl-c1">min</span>(<span class="pl-c1">one</span>(p_x), <span class="pl-c1">exp</span>(p_y <span class="pl-k">-</span> p_x)) <span class="pl-c"><span class="pl-c">#</span> The Metropolis acceptance probability</span>

        <span class="pl-k">if</span> <span class="pl-c1">rand</span>() <span class="pl-k">&lt;=</span> alpha
            p_x <span class="pl-k">=</span> p_y

            <span class="pl-c"><span class="pl-c">#</span> This 'accepts', or interchanges r.x &lt;-&gt; r.y:</span>
            <span class="pl-c"><span class="pl-c">#</span> (NB: do not do r.x = r.y; these are (pointers to) vectors!)</span>
            <span class="pl-c1">accept!</span>(r)
        <span class="pl-k">end</span>

        <span class="pl-c"><span class="pl-c">#</span> Do the adaptation update:</span>
        <span class="pl-c1">adapt!</span>(s, r, alpha, k)

        X[:,k] <span class="pl-k">=</span> r<span class="pl-k">.</span>x   <span class="pl-c"><span class="pl-c">#</span> Save the current sample</span>
     <span class="pl-k">end</span>
    X
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Standard normal target for testing</span>
<span class="pl-en">normal_log_p</span>(x) <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">mapreduce</span>(e<span class="pl-k">-&gt;</span>e<span class="pl-k">*</span>e, <span class="pl-k">+</span>, x)<span class="pl-k">/</span><span class="pl-c1">2</span>

<span class="pl-c"><span class="pl-c">#</span> Run 1M iterations of the sampler targetting 30d standard Normal:</span>
X <span class="pl-k">=</span> <span class="pl-c1">mySampler</span>(normal_log_p, <span class="pl-c1">1_000_000</span>, <span class="pl-c1">zeros</span>(<span class="pl-c1">30</span>))</pre></div>
<h2><a id="user-content-more-information--citations" class="anchor" aria-hidden="true" href="#more-information--citations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More information &amp; citations</h2>
<p>The algorithms implemented in the package are discussed in the following reference:</p>
<ul>
<li>M. Vihola. Ergonomic and reliable Bayesian inference with adaptive Markov chain Monte Carlo. In W. W. Piegrorsch, R. Levine,  H. H. Zhang, and T. C. M. Lee, editors, <em>Handbook of Computational Statistics and Data Science</em>, Wiley, to appear.</li>
</ul>
<p>If you use the package, please cite this publication.</p>
<p>Details of the implementation, such as about arguments and options, there are help fields written to the functions, which you may access, for instance, by typing <code>? adaptive_mcmc</code> in the Julia REPL.</p>
</article></div>