<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lresolvejl" class="anchor" aria-hidden="true" href="#lresolvejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LRESolve.jl</h1>
<p>Solving Systems of Linear Rational Expectations Equations in Julia</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>These commands install the latest version of LRESolve.jl</p>
<ul>
<li><code>import Pkg; Pkg.add("https://github.com/NormannR/LRESolve.jl.git")</code></li>
<li><code>import Pkg; Pkg.add("LRESolve.jl")</code></li>
</ul>
<h2><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods</h2>
<h3><a id="user-content-sims-2001" class="anchor" aria-hidden="true" href="#sims-2001"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sims (2001)</h3>
<p><a href="https://ideas.repec.org/c/dge/qmrbcd/11.html" rel="nofollow">Sims (2001)</a> solves LRE systems of the form</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7be62e758fa4f628ec904fc77382fe38e40cfd07/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f73696d735f65715f6465662e706e67"><img src="https://camo.githubusercontent.com/7be62e758fa4f628ec904fc77382fe38e40cfd07/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f73696d735f65715f6465662e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/sims_eq_def.png" style="max-width:100%;"></a></p>
<p>where</p>
<ul>
<li>x is the vector of endogenous variables</li>
<li>z is the vector of exogenous shocks</li>
<li>η is the vector of expectation errors</li>
</ul>
<p>The solution verifies</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/f0e94ba50ff6ac75a206983e236a538cfa74d2a9/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f73696d735f736f6c2e706e67"><img src="https://camo.githubusercontent.com/f0e94ba50ff6ac75a206983e236a538cfa74d2a9/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f73696d735f736f6c2e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/sims_sol.png" style="max-width:100%;"></a></p>
<p>To solve a LRE system using this method</p>
<ol>
<li>Define the model through the <code>ModelSims</code> structure. The syntax is typically</li>
</ol>
<div class="highlight highlight-source-julia"><pre>M0 <span class="pl-k">=</span> <span class="pl-c1">ModelSims</span>(Γ₀,Γ₁,C,Ψ,Π)</pre></div>
<ol start="2">
<li>Call the <code>solve_sims</code> method over the newly created model</li>
</ol>
<div class="highlight highlight-source-julia"><pre>Θ, Θ₀, Θ₁ <span class="pl-k">=</span> <span class="pl-c1">solve_sims</span>(M0)</pre></div>
<h3><a id="user-content-uhlig-1998" class="anchor" aria-hidden="true" href="#uhlig-1998"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Uhlig (1998)</h3>
<p><a href="https://ideas.repec.org/c/dge/qmrbcd/123.html" rel="nofollow">Uhlig (1998)</a> solves LRE systems of the form</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/effa64239fec70e57546447adf9e01fe71eaedcf/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f65715f75686c69672e706e67"><img src="https://camo.githubusercontent.com/effa64239fec70e57546447adf9e01fe71eaedcf/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f65715f75686c69672e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/eq_uhlig.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8541940d6f349f2291ccad20655b49e43edd7dd5/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f65715f75686c69675f73686f636b732e706e67"><img src="https://camo.githubusercontent.com/8541940d6f349f2291ccad20655b49e43edd7dd5/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f65715f75686c69675f73686f636b732e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/eq_uhlig_shocks.png" style="max-width:100%;"></a></p>
<p>where</p>
<ul>
<li>x is the vector of endogenous variables</li>
<li>f is the vector of exogenous variables</li>
</ul>
<p>The solution takes the form</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0c27330f76eb2001b403401a5129e391ba09ea6d/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f736f6c5f75686c69672e706e67"><img src="https://camo.githubusercontent.com/0c27330f76eb2001b403401a5129e391ba09ea6d/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f736f6c5f75686c69672e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/sol_uhlig.png" style="max-width:100%;"></a></p>
<p>To solve a LRE system using this method</p>
<ol>
<li>Define the model through the <code>ModelUhlig</code> structure. The syntax is typically</li>
</ol>
<div class="highlight highlight-source-julia"><pre>M0 <span class="pl-k">=</span> <span class="pl-c1">ModelUhlig</span>(F,G,H,L,M,N)</pre></div>
<ol start="2">
<li>Call the <code>solve_uhlig</code> method over the newly created model</li>
</ol>
<div class="highlight highlight-source-julia"><pre>P,Q <span class="pl-k">=</span> <span class="pl-c1">solve_uhlig</span>(M0)</pre></div>
<h3><a id="user-content-anderson-and-moore-1985" class="anchor" aria-hidden="true" href="#anderson-and-moore-1985"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Anderson and Moore (1985)</h3>
<p><a href="https://www.sciencedirect.com/science/article/pii/0165176585902113" rel="nofollow">Anderson and Moore (1985)</a> solves systems of the form</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/7e8c85c631180f14d73c6a21264bbceebee2e22d/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f616d615f65712e706e67"><img src="https://camo.githubusercontent.com/7e8c85c631180f14d73c6a21264bbceebee2e22d/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f616d615f65712e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/ama_eq.png" style="max-width:100%;"></a></p>
<p>where</p>
<ul>
<li>x is the vector of all variables</li>
<li>τ is the number of past lags</li>
<li>θ is the number of future lags</li>
</ul>
<p>The solution is of the form</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/6a472baa976c5d20266ee1a4ead9dd7326413e3d/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f616d615f736f6c2e706e67"><img src="https://camo.githubusercontent.com/6a472baa976c5d20266ee1a4ead9dd7326413e3d/68747470733a2f2f6e6f726d616e6e72696f6e2e66722f77702d636f6e74656e742f75706c6f6164732f323031392f31312f616d615f736f6c2e706e67" alt="image" data-canonical-src="https://normannrion.fr/wp-content/uploads/2019/11/ama_sol.png" style="max-width:100%;"></a></p>
<p>To solve a system using this method</p>
<ol>
<li>Define the model through the <code>ModelAM</code> structure. The syntax is typically</li>
</ol>
<div class="highlight highlight-source-julia"><pre>M0 <span class="pl-k">=</span> <span class="pl-c1">ModelAM</span>(τ,θ,[Hmτ,<span class="pl-k">...</span>,Hθ])</pre></div>
<ol start="2">
<li>Call the <code>solve_am</code> method over the newly created model</li>
</ol>
<div class="highlight highlight-source-julia"><pre>B <span class="pl-k">=</span> <span class="pl-c1">solve_am</span>(M0)</pre></div>
<p>The different methods can be tested using Binder.</p>
<p><a href="https://mybinder.org/v2/gh/NormannR/LRESolve.jl.git/master" rel="nofollow"><img src="https://camo.githubusercontent.com/483bae47a175c24dfbfc57390edd8b6982ac5fb3/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667" alt="Binder" data-canonical-src="https://mybinder.org/badge_logo.svg" style="max-width:100%;"></a></p>
</article></div>