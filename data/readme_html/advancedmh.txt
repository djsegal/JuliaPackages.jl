<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-advancedmhjl" class="anchor" aria-hidden="true" href="#advancedmhjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AdvancedMH.jl</h1>
<p dir="auto">AdvancedMH.jl currently provides a robust implementation of random walk Metropolis-Hastings samplers.</p>
<p dir="auto">Further development aims to provide a suite of adaptive Metropolis-Hastings implementations.</p>
<p dir="auto">AdvancedMH works by allowing users to define composable <code>Proposal</code> structs in different formats.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">First, construct a <code>DensityModel</code>, which is a wrapper around the log density function for your inference problem. The <code>DensityModel</code> is then used in a <code>sample</code> call.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Import the package.
using AdvancedMH
using Distributions
using MCMCChains

using LinearAlgebra

# Generate a set of data from the posterior we want to estimate.
data = rand(Normal(0, 1), 30)

# Define the components of a basic model.
insupport(θ) = θ[2] &gt;= 0
dist(θ) = Normal(θ[1], θ[2])
density(θ) = insupport(θ) ? sum(logpdf.(dist(θ), data)) : -Inf

# Construct a DensityModel.
model = DensityModel(density)

# Set up our sampler with a joint multivariate Normal proposal.
spl = RWMH(MvNormal(zeros(2), I))

# Sample from the posterior.
chain = sample(model, spl, 100000; param_names=[&quot;μ&quot;, &quot;σ&quot;], chain_type=Chains)"><pre><span class="pl-c"><span class="pl-c">#</span> Import the package.</span>
<span class="pl-k">using</span> AdvancedMH
<span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> MCMCChains

<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Generate a set of data from the posterior we want to estimate.</span>
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), <span class="pl-c1">30</span>)

<span class="pl-c"><span class="pl-c">#</span> Define the components of a basic model.</span>
<span class="pl-en">insupport</span>(θ) <span class="pl-k">=</span> θ[<span class="pl-c1">2</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>
<span class="pl-en">dist</span>(θ) <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(θ[<span class="pl-c1">1</span>], θ[<span class="pl-c1">2</span>])
<span class="pl-en">density</span>(θ) <span class="pl-k">=</span> <span class="pl-c1">insupport</span>(θ) <span class="pl-k">?</span> <span class="pl-c1">sum</span>(<span class="pl-c1">logpdf</span>.(<span class="pl-c1">dist</span>(θ), data)) <span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>

<span class="pl-c"><span class="pl-c">#</span> Construct a DensityModel.</span>
model <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(density)

<span class="pl-c"><span class="pl-c">#</span> Set up our sampler with a joint multivariate Normal proposal.</span>
spl <span class="pl-k">=</span> <span class="pl-c1">RWMH</span>(<span class="pl-c1">MvNormal</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>), I))

<span class="pl-c"><span class="pl-c">#</span> Sample from the posterior.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, spl, <span class="pl-c1">100000</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)</pre></div>
<p dir="auto">Output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Object of type Chains, with data of type 100000×3×1 Array{Float64,3}

Iterations        = 1:100000
Thinning interval = 1
Chains            = 1
Samples per chain = 100000
internals         = lp
parameters        = μ, σ

2-element Array{ChainDataFrame,1}

Summary Statistics

│ Row │ parameters │ mean     │ std      │ naive_se    │ mcse       │ ess     │ r_hat   │
│     │ Symbol     │ Float64  │ Float64  │ Float64     │ Float64    │ Any     │ Any     │
├─────┼────────────┼──────────┼──────────┼─────────────┼────────────┼─────────┼─────────┤
│ 1   │ μ          │ 0.156152 │ 0.19963  │ 0.000631285 │ 0.00323033 │ 3911.73 │ 1.00009 │
│ 2   │ σ          │ 1.07493  │ 0.150111 │ 0.000474693 │ 0.00240317 │ 3707.73 │ 1.00027 │

Quantiles

│ Row │ parameters │ 2.5%     │ 25.0%     │ 50.0%    │ 75.0%    │ 97.5%    │
│     │ Symbol     │ Float64  │ Float64   │ Float64  │ Float64  │ Float64  │
├─────┼────────────┼──────────┼───────────┼──────────┼──────────┼──────────┤
│ 1   │ μ          │ -0.23361 │ 0.0297006 │ 0.159139 │ 0.283493 │ 0.558694 │
│ 2   │ σ          │ 0.828288 │ 0.972682  │ 1.05804  │ 1.16155  │ 1.41349  │
"><pre>Object of type Chains, with data of type <span class="pl-c1">100000</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">3</span>}

Iterations        <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100000</span>
Thinning interval <span class="pl-k">=</span> <span class="pl-c1">1</span>
Chains            <span class="pl-k">=</span> <span class="pl-c1">1</span>
Samples per chain <span class="pl-k">=</span> <span class="pl-c1">100000</span>
internals         <span class="pl-k">=</span> lp
parameters        <span class="pl-k">=</span> μ, σ

<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{ChainDataFrame,<span class="pl-c1">1</span>}

Summary Statistics

│ Row │ parameters │ mean     │ std      │ naive_se    │ mcse       │ ess     │ r_hat   │
│     │ Symbol     │ Float64  │ Float64  │ Float64     │ Float64    │ Any     │ Any     │
├─────┼────────────┼──────────┼──────────┼─────────────┼────────────┼─────────┼─────────┤
│ <span class="pl-c1">1</span>   │ μ          │ <span class="pl-c1">0.156152</span> │ <span class="pl-c1">0.19963</span>  │ <span class="pl-c1">0.000631285</span> │ <span class="pl-c1">0.00323033</span> │ <span class="pl-c1">3911.73</span> │ <span class="pl-c1">1.00009</span> │
│ <span class="pl-c1">2</span>   │ σ          │ <span class="pl-c1">1.07493</span>  │ <span class="pl-c1">0.150111</span> │ <span class="pl-c1">0.000474693</span> │ <span class="pl-c1">0.00240317</span> │ <span class="pl-c1">3707.73</span> │ <span class="pl-c1">1.00027</span> │

Quantiles

│ Row │ parameters │ <span class="pl-c1">2.5</span><span class="pl-k">%</span>     │ <span class="pl-c1">25.0</span><span class="pl-k">%</span>     │ <span class="pl-c1">50.0</span><span class="pl-k">%</span>    │ <span class="pl-c1">75.0</span><span class="pl-k">%</span>    │ <span class="pl-c1">97.5</span><span class="pl-k">%</span>    │
│     │ Symbol     │ Float64  │ Float64   │ Float64  │ Float64  │ Float64  │
├─────┼────────────┼──────────┼───────────┼──────────┼──────────┼──────────┤
│ <span class="pl-c1">1</span>   │ μ          │ <span class="pl-k">-</span><span class="pl-c1">0.23361</span> │ <span class="pl-c1">0.0297006</span> │ <span class="pl-c1">0.159139</span> │ <span class="pl-c1">0.283493</span> │ <span class="pl-c1">0.558694</span> │
│ <span class="pl-c1">2</span>   │ σ          │ <span class="pl-c1">0.828288</span> │ <span class="pl-c1">0.972682</span>  │ <span class="pl-c1">1.05804</span>  │ <span class="pl-c1">1.16155</span>  │ <span class="pl-c1">1.41349</span>  │
</pre></div>
<h3 dir="auto"><a id="user-content-usage-with-logdensityproblemsjl" class="anchor" aria-hidden="true" href="#usage-with-logdensityproblemsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage with <a href="https://github.com/tpapp/LogDensityProblems.jl"><code>LogDensityProblems.jl</code></a></h3>
<p dir="auto">Alternatively, you can define your model with the <a href="https://github.com/tpapp/LogDensityProblems.jl"><code>LogDensityProblems.jl</code></a> interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LogDensityProblems

# Use a struct instead of `typeof(density)` for sake of readability.
struct LogTargetDensity end

LogDensityProblems.logdensity(p::LogTargetDensity, θ) = density(θ)  # standard multivariate normal
LogDensityProblems.dimension(p::LogTargetDensity) = 2
LogDensityProblems.capabilities(::LogTargetDensity) = LogDensityProblems.LogDensityOrder{0}()

sample(LogTargetDensity(), spl, 100000; param_names=[&quot;μ&quot;, &quot;σ&quot;], chain_type=Chains)"><pre><span class="pl-k">using</span> LogDensityProblems

<span class="pl-c"><span class="pl-c">#</span> Use a struct instead of `typeof(density)` for sake of readability.</span>
<span class="pl-k">struct</span> LogTargetDensity <span class="pl-k">end</span>

LogDensityProblems<span class="pl-k">.</span><span class="pl-en">logdensity</span>(p<span class="pl-k">::</span><span class="pl-c1">LogTargetDensity</span>, θ) <span class="pl-k">=</span> <span class="pl-c1">density</span>(θ)  <span class="pl-c"><span class="pl-c">#</span> standard multivariate normal</span>
LogDensityProblems<span class="pl-k">.</span><span class="pl-en">dimension</span>(p<span class="pl-k">::</span><span class="pl-c1">LogTargetDensity</span>) <span class="pl-k">=</span> <span class="pl-c1">2</span>
LogDensityProblems<span class="pl-k">.</span><span class="pl-en">capabilities</span>(<span class="pl-k">::</span><span class="pl-c1">LogTargetDensity</span>) <span class="pl-k">=</span> LogDensityProblems<span class="pl-k">.</span><span class="pl-c1">LogDensityOrder</span><span class="pl-c1">{0}</span>()

<span class="pl-c1">sample</span>(<span class="pl-c1">LogTargetDensity</span>(), spl, <span class="pl-c1">100000</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)</pre></div>
<h2 dir="auto"><a id="user-content-proposals" class="anchor" aria-hidden="true" href="#proposals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proposals</h2>
<p dir="auto">AdvancedMH offers various methods of defining your inference problem. Behind the scenes, a <code>MetropolisHastings</code> sampler simply holds
some set of <code>Proposal</code> structs. AdvancedMH will return posterior samples in the "shape" of the proposal provided -- currently
supported methods are <code>Array{Proposal}</code>, <code>Proposal</code>, and <code>NamedTuple{Proposal}</code>. For example, proposals can be created as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Provide a univariate proposal.
m1 = DensityModel(x -&gt; logpdf(Normal(x,1), 1.0))
p1 = StaticProposal(Normal(0,1))
c1 = sample(m1, MetropolisHastings(p1), 100; chain_type=Vector{NamedTuple})

# Draw from a vector of distributions.
m2 = DensityModel(x -&gt; logpdf(Normal(x[1], x[2]), 1.0))
p2 = StaticProposal([Normal(0,1), InverseGamma(2,3)])
c2 = sample(m2, MetropolisHastings(p2), 100; chain_type=Vector{NamedTuple})

# Draw from a `NamedTuple` of distributions.
m3 = DensityModel(x -&gt; logpdf(Normal(x.a, x.b), 1.0))
p3 = (a=StaticProposal(Normal(0,1)), b=StaticProposal(InverseGamma(2,3)))
c3 = sample(m3, MetropolisHastings(p3), 100; chain_type=Vector{NamedTuple})

# Draw from a functional proposal.
m4 = DensityModel(x -&gt; logpdf(Normal(x,1), 1.0))
p4 = StaticProposal((x=1.0) -&gt; Normal(x, 1))
c4 = sample(m4, MetropolisHastings(p4), 100; chain_type=Vector{NamedTuple})"><pre><span class="pl-c"><span class="pl-c">#</span> Provide a univariate proposal.</span>
m1 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x,<span class="pl-c1">1</span>), <span class="pl-c1">1.0</span>))
p1 <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))
c1 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m1, <span class="pl-c1">MetropolisHastings</span>(p1), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})

<span class="pl-c"><span class="pl-c">#</span> Draw from a vector of distributions.</span>
m2 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>]), <span class="pl-c1">1.0</span>))
p2 <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>([<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), <span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)])
c2 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m2, <span class="pl-c1">MetropolisHastings</span>(p2), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})

<span class="pl-c"><span class="pl-c">#</span> Draw from a `NamedTuple` of distributions.</span>
m3 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x<span class="pl-k">.</span>a, x<span class="pl-k">.</span>b), <span class="pl-c1">1.0</span>))
p3 <span class="pl-k">=</span> (a<span class="pl-k">=</span><span class="pl-c1">StaticProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)), b<span class="pl-k">=</span><span class="pl-c1">StaticProposal</span>(<span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)))
c3 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m3, <span class="pl-c1">MetropolisHastings</span>(p3), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})

<span class="pl-c"><span class="pl-c">#</span> Draw from a functional proposal.</span>
m4 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x,<span class="pl-c1">1</span>), <span class="pl-c1">1.0</span>))
p4 <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>((x<span class="pl-k">=</span><span class="pl-c1">1.0</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">Normal</span>(x, <span class="pl-c1">1</span>))
c4 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m4, <span class="pl-c1">MetropolisHastings</span>(p4), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})</pre></div>
<h2 dir="auto"><a id="user-content-static-vs-random-walk" class="anchor" aria-hidden="true" href="#static-vs-random-walk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Static vs. Random Walk</h2>
<p dir="auto">Currently there are only two methods of inference available. Static MH simply draws from the prior, with no
conditioning on the previous sample. Random walk will add the proposal to the previously observed value.
If you are constructing a <code>Proposal</code> by hand, you can determine whether the proposal is a
<code>StaticProposal</code> or a <code>RandomWalkProposal</code> using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="static_prop = StaticProposal(Normal(0,1))
rw_prop = RandomWalkProposal(Normal(0,1))"><pre>static_prop <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))
rw_prop <span class="pl-k">=</span> <span class="pl-c1">RandomWalkProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))</pre></div>
<p dir="auto">Different methods are easily composeable. One parameter can be static and another can be a random walk,
each of which may be drawn from separate distributions.</p>
<h2 dir="auto"><a id="user-content-multiple-chains" class="anchor" aria-hidden="true" href="#multiple-chains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multiple chains</h2>
<p dir="auto">AdvancedMH.jl implements the interface of <a href="https://github.com/TuringLang/AbstractMCMC.jl/">AbstractMCMC</a> which means sampling of multiple chains is supported for free:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Sample 4 chains from the posterior serially, without thread or process parallelism.
chain = sample(model, RWMH(init_params), MCMCSerial(), 100000, 4; param_names=[&quot;μ&quot;,&quot;σ&quot;], chain_type=Chains)

# Sample 4 chains from the posterior using multiple threads.
chain = sample(model, RWMH(init_params), MCMCThreads(), 100000, 4; param_names=[&quot;μ&quot;,&quot;σ&quot;], chain_type=Chains)

# Sample 4 chains from the posterior using multiple processes.
chain = sample(model, RWMH(init_params), MCMCDistributed(), 100000, 4; param_names=[&quot;μ&quot;,&quot;σ&quot;], chain_type=Chains)"><pre><span class="pl-c"><span class="pl-c">#</span> Sample 4 chains from the posterior serially, without thread or process parallelism.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, <span class="pl-c1">RWMH</span>(init_params), <span class="pl-c1">MCMCSerial</span>(), <span class="pl-c1">100000</span>, <span class="pl-c1">4</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)

<span class="pl-c"><span class="pl-c">#</span> Sample 4 chains from the posterior using multiple threads.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, <span class="pl-c1">RWMH</span>(init_params), <span class="pl-c1">MCMCThreads</span>(), <span class="pl-c1">100000</span>, <span class="pl-c1">4</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)

<span class="pl-c"><span class="pl-c">#</span> Sample 4 chains from the posterior using multiple processes.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, <span class="pl-c1">RWMH</span>(init_params), <span class="pl-c1">MCMCDistributed</span>(), <span class="pl-c1">100000</span>, <span class="pl-c1">4</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)</pre></div>
<h2 dir="auto"><a id="user-content-metropolis-adjusted-langevin-algorithm-mala" class="anchor" aria-hidden="true" href="#metropolis-adjusted-langevin-algorithm-mala"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Metropolis-adjusted Langevin algorithm (MALA)</h2>
<p dir="auto">AdvancedMH.jl also offers an implementation of <a href="https://en.wikipedia.org/wiki/Metropolis-adjusted_Langevin_algorithm" rel="nofollow">MALA</a> if the <code>ForwardDiff</code> and <code>DiffResults</code> packages are available.</p>
<p dir="auto">A <code>MALA</code> sampler can be constructed by <code>MALA(proposal)</code> where <code>proposal</code> is a function that
takes the gradient computed at the current sample. It is required to specify an initial sample <code>init_params</code> when calling <code>sample</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Import the package.
using AdvancedMH
using Distributions
using MCMCChains
using ForwardDiff
using StructArrays

using LinearAlgebra

# Generate a set of data from the posterior we want to estimate.
data = rand(Normal(0, 1), 30)

# Define the components of a basic model.
insupport(θ) = θ[2] &gt;= 0
dist(θ) = Normal(θ[1], θ[2])
density(θ) = insupport(θ) ? sum(logpdf.(dist(θ), data)) : -Inf

# Construct a DensityModel.
model = DensityModel(density)

# Set up the sampler with a multivariate Gaussian proposal.
σ² = 0.01
spl = MALA(x -&gt; MvNormal((σ² / 2) .* x, σ² * I))

# Sample from the posterior.
chain = sample(model, spl, 100000; init_params=ones(2), chain_type=StructArray, param_names=[&quot;μ&quot;, &quot;σ&quot;])"><pre><span class="pl-c"><span class="pl-c">#</span> Import the package.</span>
<span class="pl-k">using</span> AdvancedMH
<span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> MCMCChains
<span class="pl-k">using</span> ForwardDiff
<span class="pl-k">using</span> StructArrays

<span class="pl-k">using</span> LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Generate a set of data from the posterior we want to estimate.</span>
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), <span class="pl-c1">30</span>)

<span class="pl-c"><span class="pl-c">#</span> Define the components of a basic model.</span>
<span class="pl-en">insupport</span>(θ) <span class="pl-k">=</span> θ[<span class="pl-c1">2</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>
<span class="pl-en">dist</span>(θ) <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(θ[<span class="pl-c1">1</span>], θ[<span class="pl-c1">2</span>])
<span class="pl-en">density</span>(θ) <span class="pl-k">=</span> <span class="pl-c1">insupport</span>(θ) <span class="pl-k">?</span> <span class="pl-c1">sum</span>(<span class="pl-c1">logpdf</span>.(<span class="pl-c1">dist</span>(θ), data)) <span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>

<span class="pl-c"><span class="pl-c">#</span> Construct a DensityModel.</span>
model <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(density)

<span class="pl-c"><span class="pl-c">#</span> Set up the sampler with a multivariate Gaussian proposal.</span>
σ² <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
spl <span class="pl-k">=</span> <span class="pl-c1">MALA</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">MvNormal</span>((σ² <span class="pl-k">/</span> <span class="pl-c1">2</span>) <span class="pl-k">.*</span> x, σ² <span class="pl-k">*</span> I))

<span class="pl-c"><span class="pl-c">#</span> Sample from the posterior.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, spl, <span class="pl-c1">100000</span>; init_params<span class="pl-k">=</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), chain_type<span class="pl-k">=</span>StructArray, param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>])</pre></div>
<h3 dir="auto"><a id="user-content-usage-with-logdensityproblemsjl-1" class="anchor" aria-hidden="true" href="#usage-with-logdensityproblemsjl-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage with <a href="https://github.com/tpapp/LogDensityProblems.jl"><code>LogDensityProblems.jl</code></a></h3>
<p dir="auto">As above, we can define the model with the LogDensityProblems.jl interface.
We can implement the gradient of the log density function manually, or use <a href="https://github.com/tpapp/LogDensityProblemsAD.jl"><code>LogDensityProblemsAD.jl</code></a> to provide us with the gradient computation used in MALA.
Using our implementation of the <code>LogDensityProblems.jl</code> interface above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LogDensityProblemsAD
model_with_ad = LogDensityProblemsAD.ADgradient(Val(:ForwardDiff), LogTargetDensity())
sample(model_with_ad, spl, 100000; init_params=ones(2), chain_type=StructArray, param_names=[&quot;μ&quot;, &quot;σ&quot;])"><pre><span class="pl-k">using</span> LogDensityProblemsAD
model_with_ad <span class="pl-k">=</span> LogDensityProblemsAD<span class="pl-k">.</span><span class="pl-c1">ADgradient</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">:ForwardDiff</span>), <span class="pl-c1">LogTargetDensity</span>())
<span class="pl-c1">sample</span>(model_with_ad, spl, <span class="pl-c1">100000</span>; init_params<span class="pl-k">=</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>), chain_type<span class="pl-k">=</span>StructArray, param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>])</pre></div>
</article></div>