<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-advancedmhjl" class="anchor" aria-hidden="true" href="#advancedmhjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AdvancedMH.jl</h1>
<p>AdvancedMH.jl currently provides a robust implementation of random walk Metropolis-Hastings samplers.</p>
<p>Further development aims to provide a suite of adaptive Metropolis-Hastings implementations.</p>
<p>AdvancedMH works by allowing users to define composable <code>Proposal</code> structs in different formats.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>First, construct a <code>DensityModel</code>, which is a wrapper around the log density function for your inference problem. The <code>DensityModel</code> is then used in a <code>sample</code> call.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Import the package.</span>
<span class="pl-k">using</span> AdvancedMH
<span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> MCMCChains

<span class="pl-c"><span class="pl-c">#</span> Generate a set of data from the posterior we want to estimate.</span>
data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), <span class="pl-c1">30</span>)

<span class="pl-c"><span class="pl-c">#</span> Define the components of a basic model.</span>
<span class="pl-en">insupport</span>(θ) <span class="pl-k">=</span> θ[<span class="pl-c1">2</span>] <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>
<span class="pl-en">dist</span>(θ) <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(θ[<span class="pl-c1">1</span>], θ[<span class="pl-c1">2</span>])
<span class="pl-en">density</span>(θ) <span class="pl-k">=</span> <span class="pl-c1">insupport</span>(θ) ? <span class="pl-c1">sum</span>(<span class="pl-c1">logpdf</span>.(<span class="pl-c1">dist</span>(θ), data)) : <span class="pl-k">-</span><span class="pl-c1">Inf</span>

<span class="pl-c"><span class="pl-c">#</span> Construct a DensityModel.</span>
model <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(density)

<span class="pl-c"><span class="pl-c">#</span> Set up our sampler with a joint multivariate Normal proposal.</span>
spl <span class="pl-k">=</span> <span class="pl-c1">RWMH</span>(<span class="pl-c1">MvNormal</span>(<span class="pl-c1">2</span>,<span class="pl-c1">1</span>))

<span class="pl-c"><span class="pl-c">#</span> Sample from the posterior.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, spl, <span class="pl-c1">100000</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)</pre></div>
<p>Output:</p>
<div class="highlight highlight-source-julia"><pre>Object of type Chains, with data of type <span class="pl-c1">100000</span><span class="pl-k">×</span><span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">3</span>}

Iterations        <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100000</span>
Thinning interval <span class="pl-k">=</span> <span class="pl-c1">1</span>
Chains            <span class="pl-k">=</span> <span class="pl-c1">1</span>
Samples per chain <span class="pl-k">=</span> <span class="pl-c1">100000</span>
internals         <span class="pl-k">=</span> lp
parameters        <span class="pl-k">=</span> μ, σ

<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{ChainDataFrame,<span class="pl-c1">1</span>}

Summary Statistics

│ Row │ parameters │ mean     │ std      │ naive_se    │ mcse       │ ess     │ r_hat   │
│     │ Symbol     │ Float64  │ Float64  │ Float64     │ Float64    │ Any     │ Any     │
├─────┼────────────┼──────────┼──────────┼─────────────┼────────────┼─────────┼─────────┤
│ <span class="pl-c1">1</span>   │ μ          │ <span class="pl-c1">0.156152</span> │ <span class="pl-c1">0.19963</span>  │ <span class="pl-c1">0.000631285</span> │ <span class="pl-c1">0.00323033</span> │ <span class="pl-c1">3911.73</span> │ <span class="pl-c1">1.00009</span> │
│ <span class="pl-c1">2</span>   │ σ          │ <span class="pl-c1">1.07493</span>  │ <span class="pl-c1">0.150111</span> │ <span class="pl-c1">0.000474693</span> │ <span class="pl-c1">0.00240317</span> │ <span class="pl-c1">3707.73</span> │ <span class="pl-c1">1.00027</span> │

Quantiles

│ Row │ parameters │ <span class="pl-c1">2.5</span><span class="pl-k">%</span>     │ <span class="pl-c1">25.0</span><span class="pl-k">%</span>     │ <span class="pl-c1">50.0</span><span class="pl-k">%</span>    │ <span class="pl-c1">75.0</span><span class="pl-k">%</span>    │ <span class="pl-c1">97.5</span><span class="pl-k">%</span>    │
│     │ Symbol     │ Float64  │ Float64   │ Float64  │ Float64  │ Float64  │
├─────┼────────────┼──────────┼───────────┼──────────┼──────────┼──────────┤
│ <span class="pl-c1">1</span>   │ μ          │ <span class="pl-k">-</span><span class="pl-c1">0.23361</span> │ <span class="pl-c1">0.0297006</span> │ <span class="pl-c1">0.159139</span> │ <span class="pl-c1">0.283493</span> │ <span class="pl-c1">0.558694</span> │
│ <span class="pl-c1">2</span>   │ σ          │ <span class="pl-c1">0.828288</span> │ <span class="pl-c1">0.972682</span>  │ <span class="pl-c1">1.05804</span>  │ <span class="pl-c1">1.16155</span>  │ <span class="pl-c1">1.41349</span>  │
</pre></div>
<h2><a id="user-content-proposals" class="anchor" aria-hidden="true" href="#proposals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Proposals</h2>
<p>AdvancedMH offers various methods of defining your inference problem. Behind the scenes, a <code>MetropolisHastings</code> sampler simply holds
some set of <code>Proposal</code> structs. AdvancedMH will return posterior samples in the "shape" of the proposal provided -- currently
supported methods are <code>Array{Proposal}</code>, <code>Proposal</code>, and <code>NamedTuple{Proposal}</code>. For example, proposals can be created as:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Provide a univariate proposal.</span>
m1 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x,<span class="pl-c1">1</span>), <span class="pl-c1">1.0</span>))
p1 <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))
c1 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m1, <span class="pl-c1">MetropolisHastings</span>(p1), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})

<span class="pl-c"><span class="pl-c">#</span> Draw from a vector of distributions.</span>
m2 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>]), <span class="pl-c1">1.0</span>))
p2 <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>([<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), <span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)])
c2 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m2, <span class="pl-c1">MetropolisHastings</span>(p2), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})

<span class="pl-c"><span class="pl-c">#</span> Draw from a `NamedTuple` of distributions.</span>
m3 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x<span class="pl-k">.</span>a, x<span class="pl-k">.</span>b), <span class="pl-c1">1.0</span>))
p3 <span class="pl-k">=</span> (a<span class="pl-k">=</span><span class="pl-c1">StaticProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)), b<span class="pl-k">=</span><span class="pl-c1">StaticProposal</span>(<span class="pl-c1">InverseGamma</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)))
c3 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m3, <span class="pl-c1">MetropolisHastings</span>(p3), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})

<span class="pl-c"><span class="pl-c">#</span> Draw from a functional proposal.</span>
m4 <span class="pl-k">=</span> <span class="pl-c1">DensityModel</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">logpdf</span>(<span class="pl-c1">Normal</span>(x,<span class="pl-c1">1</span>), <span class="pl-c1">1.0</span>))
p4 <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>((x<span class="pl-k">=</span><span class="pl-c1">1.0</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">Normal</span>(x, <span class="pl-c1">1</span>))
c4 <span class="pl-k">=</span> <span class="pl-c1">sample</span>(m4, <span class="pl-c1">MetropolisHastings</span>(p4), <span class="pl-c1">100</span>; chain_type<span class="pl-k">=</span>Vector{NamedTuple})</pre></div>
<h2><a id="user-content-static-vs-random-walk" class="anchor" aria-hidden="true" href="#static-vs-random-walk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Static vs. Random Walk</h2>
<p>Currently there are only two methods of inference available. Static MH simply draws from the prior, with no
conditioning on the previous sample. Random walk will add the proposal to the previously observed value.
If you are constructing a <code>Proposal</code> by hand, you can determine whether the proposal is a
<code>StaticProposal</code> or a <code>RandomWalkProposal</code> using</p>
<div class="highlight highlight-source-julia"><pre>static_prop <span class="pl-k">=</span> <span class="pl-c1">StaticProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))
rw_prop <span class="pl-k">=</span> <span class="pl-c1">RandomWalkProposal</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>))</pre></div>
<p>Different methods are easily composeable. One parameter can be static and another can be a random walk,
each of which may be drawn from separate distributions.</p>
<h2><a id="user-content-multithreaded-sampling" class="anchor" aria-hidden="true" href="#multithreaded-sampling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Multithreaded sampling</h2>
<p>AdvancedMH.jl implements the interface of <a href="https://github.com/TuringLang/AbstractMCMC.jl/">AbstractMCMC</a>, which means you get multiple chain sampling
in parallel for free:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Sample 4 chains from the posterior.</span>
chain <span class="pl-k">=</span> <span class="pl-c1">psample</span>(model, <span class="pl-c1">RWMH</span>(init_params), <span class="pl-c1">100000</span>, <span class="pl-c1">4</span>; param_names<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>μ<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>σ<span class="pl-pds">"</span></span>], chain_type<span class="pl-k">=</span>Chains)</pre></div>
</article></div>