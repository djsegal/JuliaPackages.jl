<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sdpjsolver" class="anchor" aria-hidden="true" href="#sdpjsolver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SDPJSolver</h1>
<p dir="auto">SDPJ is a native Julia <a href="https://en.wikipedia.org/wiki/Semidefinite_programming" rel="nofollow">semidefinite program</a> (SDP) solver.</p>
<ul dir="auto">
<li>Motivated by the eft/modular bootstrap programs, SDPJ is a parallelized, arbitrary precision SDP solver based on the primal-dual interior-point method.</li>
<li>SDPJ is largely inspired by <a href="https://sdpa.sourceforge.net/" rel="nofollow">SDPA</a> and <a href="https://github.com/davidsd/sdpb">SDPB</a>, with slightly different parallelization architecture.</li>
<li>The solver is still in a development stage, which is far from fully optimized and might contain bugs. Corrections and suggestions are welcome and will get serious attention : )</li>
</ul>
<h2 dir="auto"><a id="user-content-the-optimization-problem" class="anchor" aria-hidden="true" href="#the-optimization-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The optimization problem</h2>
<p dir="auto">The function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sdp(c, A, C, B, b; β = 0.1, Ωp = 1, Ωd = 1, ϵ_gap = 1e-10, ϵ_primal = 1e-10, ϵ_dual = 1e-10, iterMax = 200, prec = 300)"><pre><span class="pl-c1">sdp</span>(c, A, C, B, b; β <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, Ωp <span class="pl-k">=</span> <span class="pl-c1">1</span>, Ωd <span class="pl-k">=</span> <span class="pl-c1">1</span>, ϵ_gap <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>, ϵ_primal <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>, ϵ_dual <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>, iterMax <span class="pl-k">=</span> <span class="pl-c1">200</span>, prec <span class="pl-k">=</span> <span class="pl-c1">300</span>)</pre></div>
<p dir="auto">solves the following SDP:</p>
<h3 dir="auto"><a id="user-content-primal" class="anchor" aria-hidden="true" href="#primal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Primal</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$
\begin{aligned}
\text{Minimize } \quad &amp; c^T x \\
\text{subject to } \quad &amp; X^{(l)} = \sum_i x_i A_i^{(l)} - C^{(l)} \geq 0, \quad l = 1, 2, ..., L \\
&amp; B^T x = b
\end{aligned}
$$</math-renderer></p>
<h3 dir="auto">
<a id="user-content-dual" class="anchor" aria-hidden="true" href="#dual"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dual</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$
\begin{aligned}
\text{Maximize } \quad &amp; \sum_l tr(C^{(l)} Y^{(l)}) + b^T y \\
\text{subject to } \quad &amp; \sum_l tr(A_{\star}^{(l)} Y^{(l)}) + B y - c = 0 \\
&amp; Y^{(l)} \geq 0, \quad l = 1, 2, ..., L
\end{aligned}
$$</math-renderer></p>
<h3 dir="auto">
<a id="user-content-domain" class="anchor" aria-hidden="true" href="#domain"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Domain</h3>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$
\begin{aligned}
x &amp; \in \mathbb{R}^m \\
B &amp; \in \mathbb{R}^{m \times n} \\
b, y &amp; \in \mathbb{R}^n \\
A_i^{(l)}, C^{(l)}, X^{(l)}, Y^{(l)} &amp; \in \mathbb{S}^{k^{(l)}} \\
\end{aligned}
$$</math-renderer></p>
<h2 dir="auto">
<a id="user-content-interior-point-method" class="anchor" aria-hidden="true" href="#interior-point-method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interior-point method</h2>
<p dir="auto">In each iteration, the program solves the following deformed KKT conditions to determine the Newton step:</p>
<ul dir="auto">
<li>Primal feasibility</li>
</ul>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$ X^{(l)} = \sum_i x_i A_i^{(l)} - C^{(l)} $$</math-renderer></p>
<ul dir="auto">
<li>Dual feasibility</li>
</ul>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$ \sum_l tr(A_{\star}^{(l)} Y^{(l)}) + B y - c = 0 $$</math-renderer></p>
<ul dir="auto">
<li>Complementarity</li>
</ul>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$ X^{(l)} Y^{(l)} = \mu^{(l)} I $$</math-renderer></p>
<p dir="auto">Mehrotra's predictor-corrector method is used to accelerate convergence.</p>
<p dir="auto">After a search direction is obtained, the step size is determined by requiring that <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$X$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$Y$</math-renderer> remain positive.</p>
<h2 dir="auto">
<a id="user-content-the-feasibility-problem" class="anchor" aria-hidden="true" href="#the-feasibility-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The feasibility problem</h2>
<p dir="auto">The function</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="findFeasible(A, C, B, b; β = 0.1, Ωp = 1, Ωd = 1, ϵ_gap = 1e-10, ϵ_primal = 1e-10, ϵ_dual = 1e-10, iterMax = 200, prec = 300)"><pre><span class="pl-c1">findFeasible</span>(A, C, B, b; β <span class="pl-k">=</span> <span class="pl-c1">0.1</span>, Ωp <span class="pl-k">=</span> <span class="pl-c1">1</span>, Ωd <span class="pl-k">=</span> <span class="pl-c1">1</span>, ϵ_gap <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>, ϵ_primal <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>, ϵ_dual <span class="pl-k">=</span> <span class="pl-c1">1e-10</span>, iterMax <span class="pl-k">=</span> <span class="pl-c1">200</span>, prec <span class="pl-k">=</span> <span class="pl-c1">300</span>)</pre></div>
<p dir="auto">determines whether the SDP above is feasible. Note that the arguments are basically the same as <code>sdp()</code> except no vector <code>c</code> for the objective function is needed. The function converts the feasibility problem to the following optimization problem:</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$$
\begin{aligned}
\text{Minimize } \quad &amp; t \\
\text{subject to } \quad &amp; X^{(l)} = \sum_i x_i A_i^{(l)} - C^{(l)} + t I\geq 0, \quad l = 1, 2, ..., L \\
&amp; B^T x = b
\end{aligned}
$$</math-renderer></p>
<p dir="auto">If <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$t^* \geq 0$</math-renderer>, the problem is infeasible; otherwise, the problem is feasible.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> Known issue: It seems that <code>findFeasible()</code> will fail if the feasible set is unbounded but works fine when the problem is infeasible.</p>
<h2 dir="auto">
<a id="user-content-inputs" class="anchor" aria-hidden="true" href="#inputs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inputs</h2>
<p dir="auto"><code>prec</code>: arithemetic precision in base-10, which is equivalent to</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setprecision(prec, base = 10)"><pre><span class="pl-c1">setprecision</span>(prec, base <span class="pl-k">=</span> <span class="pl-c1">10</span>)</pre></div>
<p dir="auto">The default value of the global variable <code>T</code> is <code>BigFloat</code>, which supports arbitrary precision arithmetic.</p>
<p dir="auto">If accuracy is not a concern, the user can manually set <code>T</code> to other arithmetic types for improved performance, say <code>Float64</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="setArithmeticType(Float64)"><pre><span class="pl-c1">setArithmeticType</span>(Float64)</pre></div>
<p dir="auto"><code>c</code>: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$m$</math-renderer>-element <code>Vector{T}</code></p>
<p dir="auto"><code>A</code>: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$L$</math-renderer>-element <code>Vector{Array{T, 3}}</code></p>
<p dir="auto"><code>C</code>: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$L$</math-renderer>-element <code>Vector{Matrix{T}}</code></p>
<p dir="auto"><code>B</code>: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$m$</math-renderer> x <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$n$</math-renderer> <code>Matrix{T}</code></p>
<p dir="auto"><code>b</code>: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$n$</math-renderer>-element <code>Vector{T}</code></p>
<p dir="auto"><code>β</code>: factor of reduction in μ in each step</p>
<p dir="auto"><code>Ωp</code> and <code>Ωd</code> are initial values for the matrices X and Y: <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$X = Ω_p I, Y = Ω_d I$</math-renderer></p>
<p dir="auto"><code>mode</code>: can be either <code>"opt"</code> or <code>"feas"</code>.</p>
<p dir="auto">The iteration terminates if any of the following occurs:</p>
<ul dir="auto">
<li>The function <code>sdp()</code> is used, and the duality gap, primal infeasibility, and dual infeasibility are below <code>ϵ_gap</code>, <code>ϵ_primal</code>, and <code>ϵ_dual</code>, respectively.</li>
<li>The function <code>findFeasible()</code> is used, and the primal/dual infeasibilities reach their thresholds, with a certificate of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$t^* &amp;gt; 0$</math-renderer> or <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="669f52f0fe10046cbf19e2d4087af2ea">$t^* &amp;lt; 0$</math-renderer> found.</li>
<li>The number of iteration exceeds <code>iterMax</code>.</li>
</ul>
<h2 dir="auto">
<a id="user-content-outputs" class="anchor" aria-hidden="true" href="#outputs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Outputs</h2>
<p dir="auto">The function <code>sdp()</code> returns a dictionary with the following keys:</p>
<ul dir="auto">
<li>"x": value of the variable <code>x</code>
</li>
<li>"X": value of the variable <code>X</code>
</li>
<li>"y": value of the variable <code>y</code>
</li>
<li>"Y": value of the variable <code>Y</code>
</li>
<li>"pObj": value of the primal objective function</li>
<li>"dObj": value of the dual objective fucntion</li>
<li>"status": reports the status of optimization. Can be either
<ul dir="auto">
<li>"Optimal"</li>
<li>"Feasible"</li>
<li>"Infeasible"</li>
<li>"Cannot reach optimality (feasibility) within <code>iterMax</code> iterations."</li>
</ul>
</li>
</ul>
</article></div>