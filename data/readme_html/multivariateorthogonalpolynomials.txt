<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-multivariateorthogonalpolynomialsjl" class="anchor" aria-hidden="true" href="#multivariateorthogonalpolynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MultivariateOrthogonalPolynomials.jl</h1>
<p><a href="https://github.com/JuliaApproximation/MultivariateOrthogonalPolynomials.jl/actions"><img src="https://github.com/JuliaApproximation/MultivariateOrthogonalPolynomials.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/MultivariateOrthogonalPolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/48d325ca798568bcf93e45fb072a850cd01a5792311bfca19057422d6ab48767/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f4d756c7469766172696174654f7274686f676f6e616c506f6c796e6f6d69616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/MultivariateOrthogonalPolynomials.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This is an experimental package to add support for multivariate orthogonal polynomials on disks, spheres, triangles, and other simple
geometries to <a href="https://github.com/JuliaApproximation/ContinuumArrays.jl">ContinuumArrays.jl</a>. At the moment it primarily supports triangles. For example,
we can solve variable coefficient Helmholtz on the triangle with zero Dirichlet conditions as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using MultivariateOrthogonalPolynomials, StaticArrays, LinearAlgebra

julia&gt; P = JacobiTriangle()
JacobiTriangle(0, 0, 0)

julia&gt; x,y = first.(axes(P,1)), last.(axes(P,1));

julia&gt; u = P * (P \ (exp.(x) .* cos.(y))) # Expand in Triangle OPs
JacobiTriangle(0, 0, 0) * [1.3365085377830084, 0.5687967596428205, -0.22812040274224554, 0.07733064070637755, 0.016169744493985644, -0.08714886622738759, 0.00338435674992512, 0.01220019521126353, -0.016867598915573725, 0.003930461395801074  …  ]

julia&gt; u[SVector(0.1,0.2)] # Evaluate expansion
1.083141079608063
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MultivariateOrthogonalPolynomials, StaticArrays, LinearAlgebra

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">JacobiTriangle</span>()
<span class="pl-c1">JacobiTriangle</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)

julia<span class="pl-k">&gt;</span> x,y <span class="pl-k">=</span> <span class="pl-c1">first</span>.(<span class="pl-c1">axes</span>(P,<span class="pl-c1">1</span>)), <span class="pl-c1">last</span>.(<span class="pl-c1">axes</span>(P,<span class="pl-c1">1</span>));

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> P <span class="pl-k">*</span> (P <span class="pl-k">\</span> (<span class="pl-c1">exp</span>.(x) <span class="pl-k">.*</span> <span class="pl-c1">cos</span>.(y))) <span class="pl-c"><span class="pl-c">#</span> Expand in Triangle OPs</span>
<span class="pl-c1">JacobiTriangle</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>) <span class="pl-k">*</span> [<span class="pl-c1">1.3365085377830084</span>, <span class="pl-c1">0.5687967596428205</span>, <span class="pl-k">-</span><span class="pl-c1">0.22812040274224554</span>, <span class="pl-c1">0.07733064070637755</span>, <span class="pl-c1">0.016169744493985644</span>, <span class="pl-k">-</span><span class="pl-c1">0.08714886622738759</span>, <span class="pl-c1">0.00338435674992512</span>, <span class="pl-c1">0.01220019521126353</span>, <span class="pl-k">-</span><span class="pl-c1">0.016867598915573725</span>, <span class="pl-c1">0.003930461395801074</span>  …  ]

julia<span class="pl-k">&gt;</span> u[<span class="pl-c1">SVector</span>(<span class="pl-c1">0.1</span>,<span class="pl-c1">0.2</span>)] <span class="pl-c"><span class="pl-c">#</span> Evaluate expansion</span>
<span class="pl-c1">1.083141079608063</span></pre></div>
<p>See the examples folder for more examples, including non-zero Dirichlet conditions, Neumann conditions, and piecing together multiple triangles. In particular, the <a href="examples/triangleexamples.jl">examples</a> from Olver, Townsend &amp; Vasil 2019.</p>
<p>This code relies on Slevinsky's <a href="https://github.com/MikaelSlevinsky/FastTransforms">FastTransforms</a> C library for calculating transforms between values and coefficients. At the moment the path to the compiled FastTransforms library is hard coded in <a href="src/c_transforms.jl">c_transforms.jl</a>.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>S. Olver, A. Townsend &amp; G.M. Vasil (2019), <a href="https://arxiv.org/pdf/1902.04863.pdf" rel="nofollow">A sparse spectral method on triangles</a>, arXiv:1902.04
S. Olver &amp; Y. Xuan (2019), <a href="https://arxiv.org/abs/1906.12305.pdf" rel="nofollow">Orthogonal polynomials in and on a quadratic surface of revolution</a>, arXiv:1906.12305
G.M. Vasil, K.J. Burns, D. Lecoanet, S. Olver, B.P. Brown &amp; J.S. Oishi (2016), <a href="http://arxiv.org/pdf/1509.07624.pdf" rel="nofollow">Tensor calculus in polar coordinates using Jacobi polynomials</a>, J. Comp. Phys., 325: 53–73</p>
</article></div>