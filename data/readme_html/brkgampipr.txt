<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/docs/src/assets/logo_name_300.png"><img src="https://github.com/ceandrade/brkga_mp_ipr_julia/raw/master/docs/src/assets/logo_name_300.png" style="max-width:100%;"></a>
</div>
<h1><a id="user-content-brkgampiprjl---julia-version" class="anchor" aria-hidden="true" href="#brkgampiprjl---julia-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BrkgaMpIpr.jl - Julia version</h1>
<table>
<tbody><tr>
  <td>Travis Build Status</td>
  <td>
    <a href="https://travis-ci.org/ceandrade/BrkgaMpIpr.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/60deb0091257f20ff12ae347cece5e115c12a99f/68747470733a2f2f7472617669732d63692e6f72672f6365616e64726164652f42726b67614d704970722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/ceandrade/BrkgaMpIpr.jl.svg?branch=master" style="max-width:100%;">
    </a>
  </td>
</tr>
<tr>
  <td>AppVeyor Build Status</td>
  <td>
    <a href="https://ci.appveyor.com/project/ceandrade/brkga-mp-ipr-julia" rel="nofollow">
    <img src="https://camo.githubusercontent.com/2709257b5fc427dba3b657ffa2726ec341d2ed87/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6e656131363937716a356a74397365643f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/nea1697qj5jt9sed?svg=true" style="max-width:100%;">
    </a>
  </td>
</tr>
<tr>
  <td>Coverage Status</td>
  <td>
    <a href="https://coveralls.io/github/ceandrade/BrkgaMpIpr.jl?branch=master" rel="nofollow">
    <img src="https://camo.githubusercontent.com/7ac359a2c2c1b0a1b027f54bc8564039caf32ad7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6365616e64726164652f42726b67614d704970722e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/ceandrade/BrkgaMpIpr.jl/badge.svg?branch=master" style="max-width:100%;"></a>
    
  </td>
</tr>
<tr>
  <td>codecov.io</td>
  <td>
    <a href="http://codecov.io/github/ceandrade/BrkgaMpIpr.jl?branch=master" rel="nofollow">
    <img src="https://camo.githubusercontent.com/c773c0db9f7c27fd04618119820a7dcc4a32fc6a/687474703a2f2f636f6465636f762e696f2f6769746875622f6365616e64726164652f42726b67614d704970722e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/ceandrade/BrkgaMpIpr.jl/coverage.svg?branch=master" style="max-width:100%;">
    </a>
  </td>
</tr>
<tr>
  <td>Documentation</td>
  <td>
    <a href="https://ceandrade.github.io/BrkgaMpIpr.jl" rel="nofollow">
    <img src="https://camo.githubusercontent.com/02314bc4eed182d29e7586629e2e808c718e3514/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5475746f7269616c2d4150492d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/Tutorial-API-blue.svg" style="max-width:100%;">
    </a>
  </td>
</tr>
<tr>
  <td>License</td>
  <td>
    <a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/LICENSE.md">
    <img src="https://camo.githubusercontent.com/f1fbd0c42f6c3a16b2b47f158a9a3f5368950821/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442d2d6c696b652d626c7565" alt="License" data-canonical-src="https://img.shields.io/badge/license-BSD--like-blue" style="max-width:100%;">
    </a>
  </td>
</tr>
</tbody></table>
<p><em>BrkgaMpIpr.jl</em> provides a <em>very easy-to-use</em> framework for the
Multi-Parent Biased Random-Key Genetic Algorithm with Implict Path Relink
(<strong>BRKGA-MP-IPR</strong>). Assuming that your have a <em>decoder</em> to your problem,
we can setup, run, and extract the value of the best solution in less than
5 commands (obvisiously, you may need few other lines fo code to do a proper
test).</p>
<p>This Julia version provides a framework as fast as C/C++, as easy-to-code as
Python, and it is much cheaper (indeed, free) than Matlab. Unit and coverage
tests are fully implemented, and all pseudo-random test data were carefully
crafted to guarantee reproducibility (although it is possible that some tests
fail because of different versions of the random number generator).
Therefore, <em>BrkgaMpIpr.jl</em> should be suitable to be used in production
environments.</p>
<p>If Julia is not suitable to you, we may find useful the
<a href="https://github.com/ceandrade/brkga_mp_ipr_cpp"><strong>C++ version</strong></a>
We are also developing a
<a href="https://github.com/ceandrade/brkga_mp_ipr_python"><strong>Python version</strong></a>
which is in its earlier stages.
At this moment, we have no plans to implement the BRKGA-MP-IPR in other
languages such as Java or C#. But if you want to do so, you are must welcome.
But please, keep the API as close as possible to the C++ API (or Julia API in
case you decide go C), and use the best coding and documentation practices of
your chosen language/framework.</p>
<ul>
<li><a href="https://github.com/ceandrade/brkga_mp_ipr_cpp"><strong>C++ version</strong></a></li>
<li><a href="https://github.com/ceandrade/brkga_mp_ipr_python"><strong>Python version</strong></a></li>
</ul>
<p>If you are not familiar with how BRKGA works, take a look on
<a href="http://dx.doi.org/10.1007/s10732-010-9143-1" rel="nofollow">Standard BRKGA</a> and
<a href="http://dx.doi.org/xxx" rel="nofollow">Multi-Parent BRKGA</a>.
In the future, we will provide a <em>Prime on BRKGA-MP</em>
section.</p>
<h2><a id="user-content-computer-installation-and-tests" class="anchor" aria-hidden="true" href="#computer-installation-and-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><g-emoji class="g-emoji" alias="computer" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png">üíª</g-emoji> Installation and tests</h2>
<blockquote>
<p><g-emoji class="g-emoji" alias="information_source" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png">‚ÑπÔ∏è</g-emoji> <strong>NOTE:</strong>
<em>BrkgaMpIpr.jl</em> was developed using Julia 1.2, but it should work fine
on any Julia &gt;= 1.0. Versions &lt;= 0.6 are not supported.|</p>
</blockquote>
<p><em>BrkgaMpIpr.jl</em> can be installed using the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run</p>
<pre lang="julia-repl"><code>pkg&gt; add BrkgaMpIpr
</code></pre>
<p>Or, just use <code>Pkg</code> directly:</p>
<pre lang="julia-repl"><code>julia&gt; import Pkg; Pkg.add("BrkgaMpIpr")
</code></pre>
<p><em>BrkgaMpIpr.jl</em> also provides a thorough unit testing that aims to harden and make
the code ready for production environments. From Pkg REPL, just run</p>
<pre lang="julia-repl"><code>pkg&gt; test BrkgaMpIpr
</code></pre>
<blockquote>
<p><g-emoji class="g-emoji" alias="information_source" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png">‚ÑπÔ∏è</g-emoji> <strong>NOTE:</strong>
The tests take about 10 minutes, mainly because the permutation path relink.</p>
</blockquote>
<p>Although BrkgaMpIpr should work fine on Julia &gt;= 1.2, some tests can fail. This
issue occurs because BrkgaMpIpr uses the JLD package to save the population and
results. JLD uses the HDF5 package, which produces slightly different binaries
of different Julia versions. Although the tests may fail in those cases,
BrkgaMpIpr is functional for regular usage. In the table below, you can see
the testing fails due to JDL binary incompatibility.</p>
<table>
<thead>
<tr>
<th align="center">Julia version</th>
<th align="center">Windows</th>
<th align="center">Linux</th>
<th align="center">Mac OS X</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1.2</td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/39585ac8dde95f4ba32ac56b46806c9f305e1b61/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4661696c2d726564"><img src="https://camo.githubusercontent.com/39585ac8dde95f4ba32ac56b46806c9f305e1b61/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4661696c2d726564" alt="" data-canonical-src="https://img.shields.io/badge/-Fail-red" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center">1.3</td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center">1.4</td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
<td align="center"><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e"><img src="https://camo.githubusercontent.com/083613c592669d64f1a4bba06244d58c4bf5f451/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d506173732d677265656e" alt="" data-canonical-src="https://img.shields.io/badge/-Pass-green" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<blockquote>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">‚ö†Ô∏è</g-emoji> <strong>Warning</strong>:
Some timing tests may fail when carried out on virtual machines and
containers. The reason is that in such environments, the code runs much
slower than on bare metal, and some control loops take much time to finish
before the time stop.  Usually, the difference is a few seconds, but it is
enough to break some tests.</p>
</blockquote>
<blockquote>
<p><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">‚ö†Ô∏è</g-emoji> <strong>Warning</strong>:
It is a hard test to test algorithms that use random signals. In
<em>BrkgaMpIpr.jl</em>, the tests are carefully designed to ensure repeatability. For
that, we use the Mersenne Twister
<a href="https://en.wikipedia.org/wiki/Mersenne_Twister" rel="nofollow">[1]</a>
<a href="http://dx.doi.org/10.1145/272991.272995" rel="nofollow">[2]</a> as our standard random
generator number engine, particularly the <a href="https://docs.julialang.org/en/v1/stdlib/Random/index.html#Random.MersenneTwister" rel="nofollow">version that comes with
Julia</a>.
However, it may happen that such engine has slightly different
implementations across platforms and, therefore, the tests may fail. The
current version was tested on 64-bit platforms (Mac OS X, GNU/Linux, and
Windows 10).</p>
</blockquote>
<h2><a id="user-content-zap-usage---tldr" class="anchor" aria-hidden="true" href="#zap-usage---tldr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">‚ö°</g-emoji> Usage - TL;DR</h2>
<p>The best way to keep it short is to look in the
<a href="https://github.com/ceandrade/brkga_mp_ipr_julia/tree/master/examples/tsp"><code>examples</code></a> folder
on <a href="https://github.com/ceandrade/brkga_mp_ipr_julia">the git repo.</a>
From <a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/examples/tsp/main_minimal.jl"><code>main_minimal.jl</code></a>,
which solves the
<a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem" rel="nofollow">Travelling Salesman Problem (TSP)</a>.
This is a trimmed copy:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> BrkgaMpIpr

<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>tsp_instance.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>tsp_decoder.jl<span class="pl-pds">"</span></span>)

<span class="pl-k">if</span> <span class="pl-c1">length</span>(ARGS) <span class="pl-k">&lt;</span> <span class="pl-c1">4</span>
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Usage: julia main_minimal.jl &lt;seed&gt; &lt;config-file&gt; <span class="pl-pds">"</span></span> <span class="pl-k">*</span>
            <span class="pl-s"><span class="pl-pds">"</span>&lt;num-generations&gt; &lt;tsp-instance-file&gt;<span class="pl-pds">"</span></span>)
    <span class="pl-c1">exit</span>(<span class="pl-c1">1</span>)
<span class="pl-k">end</span>

seed <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int64, ARGS[<span class="pl-c1">1</span>])
configuration_file <span class="pl-k">=</span> ARGS[<span class="pl-c1">2</span>]
num_generations <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Int64, ARGS[<span class="pl-c1">3</span>])
instance_file <span class="pl-k">=</span> ARGS[<span class="pl-c1">4</span>]

instance <span class="pl-k">=</span> <span class="pl-c1">TSP_Instance</span>(instance_file)

brkga_data, control_params <span class="pl-k">=</span> <span class="pl-c1">build_brkga</span>(
    instance, tsp_decode!, MINIMIZE, seed, instance<span class="pl-k">.</span>num_nodes,
    configuration_file
)

<span class="pl-c1">initialize!</span>(brkga_data)

<span class="pl-c1">evolve!</span>(brkga_data, num_generations)

best_cost <span class="pl-k">=</span> <span class="pl-c1">get_best_fitness</span>(brkga_data)
<span class="pl-c1">@show</span> best_cost</pre></div>
<p>You can identify the following basic steps:</p>
<ol>
<li>
<p>Create a data structure inherited from <code>AbstractInstance</code> to hold
your input data. This object is passed to the decoder function (example
<a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/examples/tsp/tsp_instance.jl"><code>tsp_instance.jl</code></a>);</p>
</li>
<li>
<p>Implement a decoder function. This function translates a chromosome (array
of numbers in the interval [0,1]) to a solution for your problem. The decoder
must return the solution value or cost to be used as fitness by BRKGA
(example <a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/examples/tsp/tsp_decoder.jl"><code>tsp_decoder.jl</code></a>);</p>
</li>
<li>
<p>Load the instance and other relevant data;</p>
</li>
<li>
<p>Use <code>build_brkga</code> to create a <code>BrkgaData</code> that represents
the internal state of the BRKGA-MP-IPR algorithm;</p>
</li>
<li>
<p>Use <code>initialize!</code> to init the BRKGA state;</p>
</li>
<li>
<p>Call <code>evolve!</code> to optimize;</p>
</li>
<li>
<p>Call <code>get_best_fitness</code> and/or <code>get_best_chromosome</code> to
retrieve the best solution.</p>
</li>
</ol>
<p><a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/examples/tsp/main_minimal.jl"><code>main_minimal.jl</code></a>
provides a very minimal example to understand the necessary steps to use the
BRKGA-MP-IPR framework. However,
<a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/examples/tsp/main_complete.jl"><code>main_complete.jl</code></a>
provides a full-featured code, handy for scientific use, such as
experimentation and paper writing. This code allows fine-grained control of
the optimization, shows several features of BRKGA-MP-IPR such as the resets,
chromosome injection, and others. It also logs
all optimization steps, <em>creating outputs easy to be parsed.</em> <strong>You should use
this code for serious business and experimentation.</strong></p>
<h2><a id="user-content-books-tutorial-and-full-documentation" class="anchor" aria-hidden="true" href="#books-tutorial-and-full-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><g-emoji class="g-emoji" alias="books" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png">üìö</g-emoji> Tutorial and full documentation</h2>
<p>Check out the complete tutorial and API documentation:
<a href="https://ceandrade.github.io/BrkgaMpIpr.jl" rel="nofollow">https://ceandrade.github.io/BrkgaMpIpr.jl</a></p>
<h2><a id="user-content-black_nib-license-and-citing" class="anchor" aria-hidden="true" href="#black_nib-license-and-citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><g-emoji class="g-emoji" alias="black_nib" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png">‚úíÔ∏è</g-emoji> License and Citing</h2>
<p>BRKGA-MP-IPR uses a permissive BSD-like license and it can be used as it
pleases you. And since this framework is also part of an academic effort, we
kindly ask you to remember to cite the originating paper of this work.
Indeed, Clause 4 estipulates that "all publications, softwares, or any other
materials mentioning features or use of this software (as a whole package or
any parts of it) and/or the data used to test it must cite the following
article explicitly:":</p>
<blockquote>
<p>C.E. Andrade. R.F. Toso, J.F. Gon√ßalves, M.G.C. Resende. The Multi-Parent
Biased Random-key Genetic Algorithm with Implicit Path Relinking. <em>European
Journal of Operational Research</em>, To appear, 2019.
DOI <a href="https://doi.org/10.1016/j.ejor.2019.11.037" rel="nofollow">https://doi.org/10.1016/j.ejor.2019.11.037</a></p>
</blockquote>
<p><a href="https://github.com/ceandrade/brkga_mp_ipr_julia/blob/master/LICENSE.md">Check it out the full license.</a></p>
<h2><a id="user-content-pencil2-contributing" class="anchor" aria-hidden="true" href="#pencil2-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><g-emoji class="g-emoji" alias="pencil2" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png">‚úèÔ∏è</g-emoji> Contributing</h2>
<p><a href="CONTRIBUTING.md">Contribution guidelines for this project</a></p>
</article></div>