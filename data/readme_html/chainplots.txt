<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-chainplots" class="anchor" aria-hidden="true" href="#chainplots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChainPlots</h1>
<p dir="auto"><a href="https://rmsrosa.github.io/ChainPlots.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer" href="https://github.com/rmsrosa/ChainPlots.jl/workflows/CI/badge.svg"><img src="https://github.com/rmsrosa/ChainPlots.jl/workflows/CI/badge.svg" alt="Main Tests Workflow Status" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/rmsrosa/ChainPlots.jl/workflows/CI%20Nightly/badge.svg"><img src="https://github.com/rmsrosa/ChainPlots.jl/workflows/CI%20Nightly/badge.svg" alt="Nightly Tests Workflow Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/rmsrosa/ChainPlots.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/42738905db877516933e7d585e387fe3088b3b8ea014298fa71af8cd41984048/68747470733a2f2f636f6465636f762e696f2f67682f726d73726f73612f436861696e506c6f74732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/rmsrosa/ChainPlots.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a> <a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a5157b39689f5ed07def600b7e128ba52ef4806af72b81b3af8ae9eedabd4317/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f726d73726f73612f436861696e506c6f74732e6a6c"><img src="https://camo.githubusercontent.com/a5157b39689f5ed07def600b7e128ba52ef4806af72b81b3af8ae9eedabd4317/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f726d73726f73612f436861696e506c6f74732e6a6c" alt="GitHub repo size" data-canonical-src="https://img.shields.io/github/repo-size/rmsrosa/ChainPlots.jl" style="max-width: 100%;"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b6c9e475897a00f1778d8b3400256ecf48eae4c524134244b51b35e638e91887/68747470733a2f2f696d672e736869656c64732e696f2f6f73736c6966656379636c652f726d73726f73612f436861696e506c6f74732e6a6c"><img src="https://camo.githubusercontent.com/b6c9e475897a00f1778d8b3400256ecf48eae4c524134244b51b35e638e91887/68747470733a2f2f696d672e736869656c64732e696f2f6f73736c6966656379636c652f726d73726f73612f436861696e506c6f74732e6a6c" alt="OSS Lifecycle" data-canonical-src="https://img.shields.io/osslifecycle/rmsrosa/ChainPlots.jl" style="max-width: 100%;"></a></p>
<p dir="auto">Graph generator and Plot recipes of the topology of <a href="https://github.com/FluxML/Flux.jl">FluxML/Flux.jl</a>'s neural networks composed with <a href="https://fluxml.ai/Flux.jl/stable/models/layers/#Flux.Chain" rel="nofollow">Flux.Chain</a>.</p>
<h2 dir="auto"><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Description</h2>
<p dir="auto">It implements a plot recipe for <code>Flux.Chain</code> using the recipe tool from <a href="https://github.com/JuliaPlots/RecipesBase.jl">JuliaPlots/RecipesBase.jl</a>.</p>
<p dir="auto">It first generates a <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraph.jl</a> from the <code>Flux.Chain</code> and then apply a plot recipe based on the generated metagraph.</p>
<h2 dir="auto"><a id="user-content-aim" class="anchor" aria-hidden="true" href="#aim"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Aim</h2>
<p dir="auto">The aim is to obtain a pictorial representations for all types of layers implemented with <a href="https://fluxml.ai/Flux.jl/stable/models/layers/#Flux.Chain" rel="nofollow">Flux.Chain</a> and in a way similar to the representations given in the following links:</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://pub.towardsai.net/main-types-of-neural-networks-and-its-applications-tutorial-734480d7ec8e" rel="nofollow">Main Types of Neural Networks and its Applications — Tutorial</a>; and</p>
</li>
<li>
<p dir="auto"><a href="https://towardsdatascience.com/the-mostly-complete-chart-of-neural-networks-explained-3fb6f2367464" rel="nofollow">The mostly complete chart of Neural Networks, explained</a>.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-current-state" class="anchor" aria-hidden="true" href="#current-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current state</h2>
<p dir="auto">At the moment, the recipe has been tested with most of the layers in <a href="https://fluxml.ai/Flux.jl/stable/models/layers/" rel="nofollow">Flux.jl/Basic Layers</a>, as well as with a number of "functional" layers (e.g. <code>x³ = x -&gt; x .^ 3</code>, <code>dx = x -&gt; x[2:end] - x[1:end-1]</code>), and with all activation functions in <a href="https://fluxml.ai/Flux.jl/stable/models/nnlib/" rel="nofollow">Flux/NNlib</a>.</p>
<p dir="auto">There is, however, only partial support for multidimensional layers (convolutional and pooling layers, as well as data with multiple batches) in the sense that only 1d and 2d views are available, and with the 2d visualization not being that great, yet. But hopefully soon there will be a proper multidimensional visualization for them. Batches are collapsed into a single lot.</p>
<h2 dir="auto"><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How it works</h2>
<p dir="auto">There is a distinction between netwoks starting with a layer with fixed-size input (Dense and Recurrent) and networks starting with a layer with variable-size input (Convolutional, Pooling, and functional).</p>
<p dir="auto">In the former case, just passing a network <code>m = Chain(...)</code> to plot works, e.g. <code>plot(m)</code>. In the latter case, one needs to pass along an initial input <code>inp</code>, or input size <code>inpsz = size(inp)</code>, as the second argument, like <code>plot(m, inp)</code> or <code>plot(m, inpsz)</code>, so that the plot recipe can properly figure out the size of each layer.</p>
<p dir="auto">Any other argument for plot is accepted, like <code>plot(m, inp, title="Convolutional network with $(length(m)) layers", titlefont = 12)</code></p>
<p dir="auto">One can also obtain a metagraph with <code>mg = ChainPlots.chaingraph(m)</code> or <code>mg = ChainPlots.chaingraph(m, a)</code>. The current attributes can be seen in the docstring for <code>chaingraph</code>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">There are several examples in the Literated file <a href="examples/build/examples.md">examples/build/examples.md</a> (the source file is in  <a href="examples/examples.jl">examples/examples.jl</a>, with all the plots saved to the folder <a href="examples/img/">examples/img</a>).</p>
<p dir="auto">Here is a little taste of it.</p>
<p dir="auto">In all the examples below, one needs <code>Flux</code>, <code>ChainPlots</code> and <code>Plots</code>, while for the graph, one needs <code>Graphs</code> and <code>MetaGraphs</code>. One can also display the metagraph using <code>GraphPlot</code>, for which one also needs <code>Cairo</code> and <code>Compose</code>.</p>
<h3 dir="auto"><a id="user-content-dense-and-recurrent-layers" class="anchor" aria-hidden="true" href="#dense-and-recurrent-layers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dense and Recurrent layers</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nnr = Chain(Dense(2,5,σ),RNN(5,4,relu), LSTM(4,4), GRU(4,4), Dense(4,3))
Chain(Dense(2, 5, σ), Recur(RNNCell(5, 4, relu)), Recur(LSTMCell(4, 4)), Dense(4, 3))

julia&gt; plot(nnr, title=&quot;With theme default&quot;, titlefontsize=10)"><pre>julia<span class="pl-k">&gt;</span> nnr <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,σ),<span class="pl-c1">RNN</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>,relu), <span class="pl-c1">LSTM</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">GRU</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, σ), <span class="pl-c1">Recur</span>(<span class="pl-c1">RNNCell</span>(<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, relu)), <span class="pl-c1">Recur</span>(<span class="pl-c1">LSTMCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(nnr, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>With theme default<span class="pl-pds">"</span></span>, titlefontsize<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/nnr_default.png"><img src="examples/img/nnr_default.png" alt="nnr_default plot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-variable-input-layers" class="anchor" aria-hidden="true" href="#variable-input-layers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Variable-input layers</h3>
<p dir="auto">Variable-input functional layers are also accepted. If given as the first layer, then an initial input must be provided, otherwise, the input data is not needed. Here are two examples, illustrating each case.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; dx(x) = x[2:end]-x[1:end-1]
dx (generic function with 1 method)

julia&gt; x³(x) = x.^3
x³ (generic function with 1 method)

julia&gt; nna = Chain(Dense(2,5,σ), dx, RNN(4,6,relu), x³, LSTM(6,4), GRU(4,4), Dense(4,3))
Chain(Dense(2, 5, σ), dx, Recur(RNNCell(4, 6, relu)), x³, Recur(LSTMCell(6, 4)), Recur(GRUCell(4, 4)), Dense(4, 3))

julia&gt; plot(nna, title=&quot;$nna&quot;, titlefontsize=7)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">dx</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]<span class="pl-k">-</span>x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]
dx (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">x³</span>(x) <span class="pl-k">=</span> x<span class="pl-k">.^</span><span class="pl-c1">3</span>
x³ (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> nna <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,σ), dx, <span class="pl-c1">RNN</span>(<span class="pl-c1">4</span>,<span class="pl-c1">6</span>,relu), x³, <span class="pl-c1">LSTM</span>(<span class="pl-c1">6</span>,<span class="pl-c1">4</span>), <span class="pl-c1">GRU</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, σ), dx, <span class="pl-c1">Recur</span>(<span class="pl-c1">RNNCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">6</span>, relu)), x³, <span class="pl-c1">Recur</span>(<span class="pl-c1">LSTMCell</span>(<span class="pl-c1">6</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Recur</span>(<span class="pl-c1">GRUCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(nna, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$nna</span><span class="pl-pds">"</span></span>, titlefontsize<span class="pl-k">=</span><span class="pl-c1">7</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/nna.png"><img src="examples/img/nna.png" alt="nna plot" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nnx = Chain(x³, dx, LSTM(5,10), Dense(10,5))
Chain(x³, dx, Recur(LSTMCell(5, 10)), Dense(10, 5))

julia&gt; input_data = rand(6);

julia&gt; plot(nnx, input_data, title=&quot;$nnx&quot;, titlefontsize=9)"><pre>julia<span class="pl-k">&gt;</span> nnx <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(x³, dx, <span class="pl-c1">LSTM</span>(<span class="pl-c1">5</span>,<span class="pl-c1">10</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>,<span class="pl-c1">5</span>))
<span class="pl-c1">Chain</span>(x³, dx, <span class="pl-c1">Recur</span>(<span class="pl-c1">LSTMCell</span>(<span class="pl-c1">5</span>, <span class="pl-c1">10</span>)), <span class="pl-c1">Dense</span>(<span class="pl-c1">10</span>, <span class="pl-c1">5</span>))

julia<span class="pl-k">&gt;</span> input_data <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">6</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(nnx, input_data, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$nnx</span><span class="pl-pds">"</span></span>, titlefontsize<span class="pl-k">=</span><span class="pl-c1">9</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/nnx.png"><img src="examples/img/nnx.png" alt="nnx plot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-convolutional-networks" class="anchor" aria-hidden="true" href="#convolutional-networks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Convolutional networks</h3>
<p dir="auto">A neural network with a one-dimensional convolutional layer:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; reshape6x1x1(a) = reshape(a, 6,  1, 1)
reshape6x1x1 (generic function with 1 method)

julia&gt; slice(a) = a[:,1,1]
slice (generic function with 1 method)

julia&gt; nnrs = Chain(x³, Dense(3,6), reshape6x1x1, Conv((2,), 1=&gt;1), slice, Dense(5,4))
Chain(x³, Dense(3, 6), reshape6x1x1, Conv((2,), 1=&gt;1), slice, Dense(5, 4))

julia&gt; plot(nnrs, Float32.(rand(3)), title=&quot;$nnrs&quot;, titlefontsize=9)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">reshape6x1x1</span>(a) <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(a, <span class="pl-c1">6</span>,  <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
reshape6x1x1 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-en">slice</span>(a) <span class="pl-k">=</span> a[:,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]
slice (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> nnrs <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(x³, <span class="pl-c1">Dense</span>(<span class="pl-c1">3</span>,<span class="pl-c1">6</span>), reshape6x1x1, <span class="pl-c1">Conv</span>((<span class="pl-c1">2</span>,), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>), slice, <span class="pl-c1">Dense</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>))
<span class="pl-c1">Chain</span>(x³, <span class="pl-c1">Dense</span>(<span class="pl-c1">3</span>, <span class="pl-c1">6</span>), reshape6x1x1, <span class="pl-c1">Conv</span>((<span class="pl-c1">2</span>,), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>), slice, <span class="pl-c1">Dense</span>(<span class="pl-c1">5</span>, <span class="pl-c1">4</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(nnrs, <span class="pl-c1">Float32</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$nnrs</span><span class="pl-pds">"</span></span>, titlefontsize<span class="pl-k">=</span><span class="pl-c1">9</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/nnrs.png"><img src="examples/img/nnrs.png" alt="nnrs plot" style="max-width: 100%;"></a></p>
<p dir="auto">Now with a two-dimensional convolution:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; reshape4x4x1x1(a) = reshape(a, 4, 4, 1, 1)
reshape4x4x1x1 (generic function with 1 method)

julia&gt; nnrs2d = Chain(x³, Dense(4,16), reshape4x4x1x1, Conv((2,2), 1=&gt;1), slice)
Chain(x³, Dense(4, 16), reshape4x4x1x1, Conv((2, 2), 1=&gt;1), slice)

julia&gt; plot(nnrs2d, Float32.(rand(4)), title=&quot;$nnrs2d&quot;, titlefontsize=9)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">reshape4x4x1x1</span>(a) <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(a, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>)
reshape4x4x1x1 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> nnrs2d <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(x³, <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>,<span class="pl-c1">16</span>), reshape4x4x1x1, <span class="pl-c1">Conv</span>((<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>), slice)
<span class="pl-c1">Chain</span>(x³, <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>, <span class="pl-c1">16</span>), reshape4x4x1x1, <span class="pl-c1">Conv</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>), slice)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(nnrs2d, <span class="pl-c1">Float32</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$nnrs2d</span><span class="pl-pds">"</span></span>, titlefontsize<span class="pl-k">=</span><span class="pl-c1">9</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/nnrs2d.png"><img src="examples/img/nnrs2d.png" alt="nnrs2d plot" style="max-width: 100%;"></a></p>
<p dir="auto">With convolutional and pooling layers:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nncp = Chain(
           Conv((3, 3), 1=&gt;2, pad=(1,1), bias=false),
           MaxPool((2,2)),
           Conv((3, 3), 2=&gt;4, pad=SamePad(), relu),
           AdaptiveMaxPool((4,4)),
           Conv((3, 3), 4=&gt;4, relu),
           GlobalMaxPool()
       )
Chain(
  Conv((3, 3), 1 =&gt; 2, pad=1, bias=false),  # 18 parameters
  MaxPool((2, 2)),
  Conv((3, 3), 2 =&gt; 4, relu, pad=1),    # 76 parameters
  AdaptiveMaxPool((4, 4)),
  Conv((3, 3), 4 =&gt; 4, relu),           # 148 parameters
  GlobalMaxPool(),
)                   # Total: 5 arrays, 242 parameters, 2.047 KiB.

julia&gt; plot(nncp, (16, 16, 1, 1), title=&quot;Chain with convolutional and pooling layers&quot;, titlefontsize=10)"><pre>julia<span class="pl-k">&gt;</span> nncp <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(
           <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>, pad<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>), bias<span class="pl-k">=</span><span class="pl-c1">false</span>),
           <span class="pl-c1">MaxPool</span>((<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)),
           <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">2</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>, pad<span class="pl-k">=</span><span class="pl-c1">SamePad</span>(), relu),
           <span class="pl-c1">AdaptiveMaxPool</span>((<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)),
           <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">4</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>, relu),
           <span class="pl-c1">GlobalMaxPool</span>()
       )
<span class="pl-c1">Chain</span>(
  <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>, pad<span class="pl-k">=</span><span class="pl-c1">1</span>, bias<span class="pl-k">=</span><span class="pl-c1">false</span>),  <span class="pl-c"><span class="pl-c">#</span> 18 parameters</span>
  <span class="pl-c1">MaxPool</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)),
  <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>, relu, pad<span class="pl-k">=</span><span class="pl-c1">1</span>),    <span class="pl-c"><span class="pl-c">#</span> 76 parameters</span>
  <span class="pl-c1">AdaptiveMaxPool</span>((<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)),
  <span class="pl-c1">Conv</span>((<span class="pl-c1">3</span>, <span class="pl-c1">3</span>), <span class="pl-c1">4</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>, relu),           <span class="pl-c"><span class="pl-c">#</span> 148 parameters</span>
  <span class="pl-c1">GlobalMaxPool</span>(),
)                   <span class="pl-c"><span class="pl-c">#</span> Total: 5 arrays, 242 parameters, 2.047 KiB.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(nncp, (<span class="pl-c1">16</span>, <span class="pl-c1">16</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>), title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Chain with convolutional and pooling layers<span class="pl-pds">"</span></span>, titlefontsize<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/nncp.png"><img src="examples/img/nncp.png" alt="nncp plot" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-from-chain-to-metagraph" class="anchor" aria-hidden="true" href="#from-chain-to-metagraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>From Chain to MetaGraph</h3>
<p dir="auto">With <code>ChainPlots.chaingraph()</code> we can convert a <code>Flux.Chain</code> to a <code>MetaGraph</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nnr = Chain(Dense(2,5,σ),RNN(5,4,relu), LSTM(4,4), GRU(4,4), Dense(4,3))
Chain(Dense(2, 5, σ), Recur(RNNCell(5, 4, relu)), Recur(LSTMCell(4, 4)), Recur(GRUCell(4, 4)), Dense(4, 3))

julia&gt; mg_nnr = chaingraph(nnr)
{22, 74} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)

julia&gt; get_prop(mg_nnr, 1, :layer_type)
:input_layer

julia&gt; get_prop(mg_nnr, 3, :layer_type)
Dense(2, 5, σ)

julia&gt; get_prop(mg_nnr, 7, :index_in_layer)
(5,)

julia&gt; first(edges(mg_nnr)).src
1

julia&gt; first(edges(mg_nnr)).dst
3

julia&gt; outdegree(mg_nnr, 12)
8

julia&gt; get_prop.(Ref(mg_nnr), 15, [:loc_x, :loc_y])
2-element Vector{Real}:
 3.0
 0.75"><pre>julia<span class="pl-k">&gt;</span> nnr <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,σ),<span class="pl-c1">RNN</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>,relu), <span class="pl-c1">LSTM</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">GRU</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, σ), <span class="pl-c1">Recur</span>(<span class="pl-c1">RNNCell</span>(<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, relu)), <span class="pl-c1">Recur</span>(<span class="pl-c1">LSTMCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Recur</span>(<span class="pl-c1">GRUCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> mg_nnr <span class="pl-k">=</span> <span class="pl-c1">chaingraph</span>(nnr)
{<span class="pl-c1">22</span>, <span class="pl-c1">74</span>} undirected Int64 metagraph with Float64 weights defined by <span class="pl-c1">:weight</span> (default weight <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_prop</span>(mg_nnr, <span class="pl-c1">1</span>, <span class="pl-c1">:layer_type</span>)
<span class="pl-c1">:input_layer</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_prop</span>(mg_nnr, <span class="pl-c1">3</span>, <span class="pl-c1">:layer_type</span>)
<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, σ)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_prop</span>(mg_nnr, <span class="pl-c1">7</span>, <span class="pl-c1">:index_in_layer</span>)
(<span class="pl-c1">5</span>,)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(<span class="pl-c1">edges</span>(mg_nnr))<span class="pl-k">.</span>src
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">first</span>(<span class="pl-c1">edges</span>(mg_nnr))<span class="pl-k">.</span>dst
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">outdegree</span>(mg_nnr, <span class="pl-c1">12</span>)
<span class="pl-c1">8</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_prop</span>.(<span class="pl-c1">Ref</span>(mg_nnr), <span class="pl-c1">15</span>, [<span class="pl-c1">:loc_x</span>, <span class="pl-c1">:loc_y</span>])
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Real}<span class="pl-k">:</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">0.75</span></pre></div>
<h3 dir="auto"><a id="user-content-visualizing-the-metagraph" class="anchor" aria-hidden="true" href="#visualizing-the-metagraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualizing the MetaGraph</h3>
<p dir="auto">We may visualize the generated MetaGraph with <a href="https://github.com/JuliaGraphs/GraphPlot.jl">JuliaGraphs/GraphPlot.jl</a>. We use the attributes <code>:loc_x</code>, <code>:loc_y</code>, and <code>:neuron_color</code> to properly position and color every neuron.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; nnr = Chain(Dense(2,5,σ),RNN(5,4,relu), LSTM(4,4), GRU(4,4), Dense(4,3))
Chain(Dense(2, 5, σ), Recur(RNNCell(5, 4, relu)), Recur(LSTMCell(4, 4)), Recur(GRUCell(4, 4)), Dense(4, 3))

julia&gt; mg_nnr = ChainPlots.chaingraph(nnr)
{22, 65} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)

julia&gt; locs_x = [get_prop(mg_nnr, v, :loc_x) for v in vertices(mg_nnr)]
22-element Vector{Float64}:
 0.0
 0.0
 1.0
 1.0
 ⋮
 5.0
 5.0
 5.0

julia&gt; locs_y = [get_prop(mg_nnr, v, :loc_y) for v in vertices(mg_nnr)]
22-element Vector{Float64}:
 0.4166666666666667
 0.5833333333333334
 0.16666666666666666
 0.3333333333333333
 ⋮
 0.3333333333333333
 0.5
 0.6666666666666666

julia&gt; nodefillc = [parse(Colorant, get_prop(mg_nnr, v, :neuron_color)) for v in vertices(mg_nnr)]
22-element Array{RGB{N0f8},1} with eltype RGB{FixedPointNumbers.N0f8}:
 RGB{N0f8}(1.0,1.0,0.0)
 RGB{N0f8}(1.0,1.0,0.0)
 RGB{N0f8}(0.565,0.933,0.565)
 RGB{N0f8}(0.565,0.933,0.565)
 ⋮
 RGB{N0f8}(0.565,0.933,0.565)
 RGB{N0f8}(0.565,0.933,0.565)
 RGB{N0f8}(0.565,0.933,0.565)

julia&gt; draw(PNG(&quot;img/mg_nnr.png&quot;, 600, 400), gplot(mg_nnr, locs_x, locs_y, nodefillc=nodefillc))"><pre>julia<span class="pl-k">&gt;</span> nnr <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>,<span class="pl-c1">5</span>,σ),<span class="pl-c1">RNN</span>(<span class="pl-c1">5</span>,<span class="pl-c1">4</span>,relu), <span class="pl-c1">LSTM</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">GRU</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">Chain</span>(<span class="pl-c1">Dense</span>(<span class="pl-c1">2</span>, <span class="pl-c1">5</span>, σ), <span class="pl-c1">Recur</span>(<span class="pl-c1">RNNCell</span>(<span class="pl-c1">5</span>, <span class="pl-c1">4</span>, relu)), <span class="pl-c1">Recur</span>(<span class="pl-c1">LSTMCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Recur</span>(<span class="pl-c1">GRUCell</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>)), <span class="pl-c1">Dense</span>(<span class="pl-c1">4</span>, <span class="pl-c1">3</span>))

julia<span class="pl-k">&gt;</span> mg_nnr <span class="pl-k">=</span> ChainPlots<span class="pl-k">.</span><span class="pl-c1">chaingraph</span>(nnr)
{<span class="pl-c1">22</span>, <span class="pl-c1">65</span>} undirected Int64 metagraph with Float64 weights defined by <span class="pl-c1">:weight</span> (default weight <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> locs_x <span class="pl-k">=</span> [<span class="pl-c1">get_prop</span>(mg_nnr, v, <span class="pl-c1">:loc_x</span>) <span class="pl-k">for</span> v <span class="pl-k">in</span> <span class="pl-c1">vertices</span>(mg_nnr)]
<span class="pl-c1">22</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 ⋮
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>
 <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> locs_y <span class="pl-k">=</span> [<span class="pl-c1">get_prop</span>(mg_nnr, v, <span class="pl-c1">:loc_y</span>) <span class="pl-k">for</span> v <span class="pl-k">in</span> <span class="pl-c1">vertices</span>(mg_nnr)]
<span class="pl-c1">22</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.4166666666666667</span>
 <span class="pl-c1">0.5833333333333334</span>
 <span class="pl-c1">0.16666666666666666</span>
 <span class="pl-c1">0.3333333333333333</span>
 ⋮
 <span class="pl-c1">0.3333333333333333</span>
 <span class="pl-c1">0.5</span>
 <span class="pl-c1">0.6666666666666666</span>

julia<span class="pl-k">&gt;</span> nodefillc <span class="pl-k">=</span> [<span class="pl-c1">parse</span>(Colorant, <span class="pl-c1">get_prop</span>(mg_nnr, v, <span class="pl-c1">:neuron_color</span>)) <span class="pl-k">for</span> v <span class="pl-k">in</span> <span class="pl-c1">vertices</span>(mg_nnr)]
<span class="pl-c1">22</span><span class="pl-k">-</span>element Array{RGB{N0f8},<span class="pl-c1">1</span>} with eltype RGB{FixedPointNumbers<span class="pl-k">.</span>N0f8}<span class="pl-k">:</span>
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">0.0</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.565</span>,<span class="pl-c1">0.933</span>,<span class="pl-c1">0.565</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.565</span>,<span class="pl-c1">0.933</span>,<span class="pl-c1">0.565</span>)
 ⋮
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.565</span>,<span class="pl-c1">0.933</span>,<span class="pl-c1">0.565</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.565</span>,<span class="pl-c1">0.933</span>,<span class="pl-c1">0.565</span>)
 <span class="pl-c1">RGB</span><span class="pl-c1">{N0f8}</span>(<span class="pl-c1">0.565</span>,<span class="pl-c1">0.933</span>,<span class="pl-c1">0.565</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">draw</span>(<span class="pl-c1">PNG</span>(<span class="pl-s"><span class="pl-pds">"</span>img/mg_nnr.png<span class="pl-pds">"</span></span>, <span class="pl-c1">600</span>, <span class="pl-c1">400</span>), <span class="pl-c1">gplot</span>(mg_nnr, locs_x, locs_y, nodefillc<span class="pl-k">=</span>nodefillc))</pre></div>
<p dir="auto">And here is the result.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="examples/img/mg_nnr.png"><img src="examples/img/mg_nnr.png" alt="mg_nnr plot" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roadmap</h2>
<p dir="auto">There is a lot to be done:</p>
<ul dir="auto">
<li>Add Documentation.</li>
<li>Proper visualization for multidimensional layers.</li>
<li>Optimization of the plot recipe (large networks - with hundreds of neurons - take too long, and sometimes plotting seem to hang, but building just the graph works fine).</li>
<li>Add other plotting options (e.g. not annotate the plot with the type of the layer; only use circles as markers since they are accepted by all the backends).</li>
<li>Improve coverage.</li>
<li>Make it work across different backends.</li>
<li>Make sure it works with all types of layers in <code>Flux.jl</code>.</li>
</ul>
<p dir="auto">Once it is in a more polished state, this package might be transfered to the <a href="https://github.com/FluxML">FluxML organization</a>.</p>
<h2 dir="auto"><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compatibility</h2>
<p dir="auto">All the above works fine with the <code>GR</code> backend for <code>Plots.jl</code>. There are many <a href="https://docs.juliaplots.org/latest/backends/" rel="nofollow">Plots backends</a>, however, which have some issue:</p>
<ul dir="auto">
<li>
<p dir="auto">Get Warning: <code>pyplot()</code> backend does not have <code>:rtriangle</code> and seems not to scale properly.</p>
</li>
<li>
<p dir="auto">Get Error: <code>plotly()</code> and <code>plotlyjs()</code> do not support custom shapes.</p>
</li>
<li>
<p dir="auto"><code>hdf5()</code> works partially. Neurons are not showing up. On the other hand, despite saying in Plots's page that it is currently missing support for SeriesAnnotations, this seems to be working, since SeriesAnnotations is used to display the type/activation function of each layer.</p>
</li>
<li>
<p dir="auto"><code>unicodeplots()</code> does not accept custom shapes, nor :rtriangle. Should choose from: [:none, :auto, :circle].</p>
</li>
<li>
<p dir="auto">Have not tried others.</p>
</li>
</ul>
</article></div>