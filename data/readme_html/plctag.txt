<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-plctagjl" class="anchor" aria-hidden="true" href="#plctagjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PLCTag.jl</h1>
<p><a href="https://github.com/libplctag/PLCTag.jl/actions"><img src="https://github.com/libplctag/PLCTag.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>Julia wrapper for <a href="https://github.com/libplctag/libplctag">libplctag</a> to communicate with PLC's.</p>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<p>PLCTag.jl downloads and builds libplctag from a released tar file.
You must have build-essentials installed or analogous build support packages for your OS.
If you wish to override the version downloaded and built, an environment variable is the means to do that:</p>
<ol>
<li>in Julia: <code>ENV["LIBPLCTAG_VERSION"] = "2.1.8"</code></li>
<li>or Bash: <code>export LIBPLCTAG_VERSION='2.1.8'</code></li>
</ol>
<p>The environment variable must be set before installing (<code>add PLCTag</code>) or building (<code>build PLCTag</code>) with the package manager.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The libplctag C bindings that are generated with <a href="https://github.com/analytech-solutions/CBinding.jl">CBinding.jl</a> are exported in the <code>libplctag</code> module.
Additional high-level facilities are provided by PLCTag.jl for a more Julian experience.</p>
<h3><a id="user-content-low-level-usage" class="anchor" aria-hidden="true" href="#low-level-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-Level Usage</h3>
<p>The following example uses the C bindings to read and write a 32-bit integer tag called <code>some_tag</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CBinding
using PLCTag
using PLCTag.libplctag

const TAG_PATH = &quot;protocol=ab-eip&amp;gateway=192.168.2.1&amp;path=1,0&amp;cpu=compactlogix&amp;elem_size=4&amp;elem_count=1&amp;name=some_tag&amp;debug=3&quot;
const DATA_TIMEOUT = 5000

tag = plc_tag_create(TAG_PATH, DATA_TIMEOUT)
tag &lt;= 0 &amp;&amp; error(&quot;$(plc_tag_decode_error(tag)): Could not create tag!&quot;)

code = plc_tag_status(tag)
code == c&quot;PLCTAG_STATUS_OK&quot; || error(&quot;Error setting up tag internal state. Got error code $(code): $(unsafe_string(plc_tag_decode_error(code)))&quot;)

# read
code = plc_tag_read(tag, DATA_TIMEOUT)
code == c&quot;PLCTAG_STATUS_OK&quot; || error(&quot;Unable to read the data! Got error code $(code): $(unsafe_string(plc_tag_decode_error(code)))&quot;)
val = plc_tag_get_int32(tag, 0)
@info val

# write
code = plc_tag_set_int32(tag, 0, 42)
code == c&quot;PLCTAG_STATUS_OK&quot; || error(&quot;Unable to write the data! Got error code $(code): $(unsafe_string(plc_tag_decode_error(code)))&quot;)

code = plc_tag_write(tag, DATA_TIMEOUT)
code == c&quot;PLCTAG_STATUS_OK&quot; || error(&quot;Unable to write the data! Got error code $(code): $(unsafe_string(plc_tag_decode_error(code)))&quot;)

plc_tag_destroy(tag)
"><pre><span class="pl-k">using</span> CBinding
<span class="pl-k">using</span> PLCTag
<span class="pl-k">using</span> PLCTag<span class="pl-k">.</span>libplctag

<span class="pl-k">const</span> TAG_PATH <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>protocol=ab-eip&amp;gateway=192.168.2.1&amp;path=1,0&amp;cpu=compactlogix&amp;elem_size=4&amp;elem_count=1&amp;name=some_tag&amp;debug=3<span class="pl-pds">"</span></span>
<span class="pl-k">const</span> DATA_TIMEOUT <span class="pl-k">=</span> <span class="pl-c1">5000</span>

tag <span class="pl-k">=</span> <span class="pl-c1">plc_tag_create</span>(TAG_PATH, DATA_TIMEOUT)
tag <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$(<span class="pl-c1">plc_tag_decode_error</span>(tag))</span>: Could not create tag!<span class="pl-pds">"</span></span>)

code <span class="pl-k">=</span> <span class="pl-c1">plc_tag_status</span>(tag)
code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">c</span>"</span>PLCTAG_STATUS_OK<span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Error setting up tag internal state. Got error code <span class="pl-v">$(code)</span>: <span class="pl-v">$(<span class="pl-c1">unsafe_string</span>(<span class="pl-c1">plc_tag_decode_error</span>(code)))</span><span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> read</span>
code <span class="pl-k">=</span> <span class="pl-c1">plc_tag_read</span>(tag, DATA_TIMEOUT)
code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">c</span>"</span>PLCTAG_STATUS_OK<span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Unable to read the data! Got error code <span class="pl-v">$(code)</span>: <span class="pl-v">$(<span class="pl-c1">unsafe_string</span>(<span class="pl-c1">plc_tag_decode_error</span>(code)))</span><span class="pl-pds">"</span></span>)
val <span class="pl-k">=</span> <span class="pl-c1">plc_tag_get_int32</span>(tag, <span class="pl-c1">0</span>)
<span class="pl-c1">@info</span> val

<span class="pl-c"><span class="pl-c">#</span> write</span>
code <span class="pl-k">=</span> <span class="pl-c1">plc_tag_set_int32</span>(tag, <span class="pl-c1">0</span>, <span class="pl-c1">42</span>)
code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">c</span>"</span>PLCTAG_STATUS_OK<span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Unable to write the data! Got error code <span class="pl-v">$(code)</span>: <span class="pl-v">$(<span class="pl-c1">unsafe_string</span>(<span class="pl-c1">plc_tag_decode_error</span>(code)))</span><span class="pl-pds">"</span></span>)

code <span class="pl-k">=</span> <span class="pl-c1">plc_tag_write</span>(tag, DATA_TIMEOUT)
code <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">c</span>"</span>PLCTAG_STATUS_OK<span class="pl-pds">"</span></span> <span class="pl-k">||</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>Unable to write the data! Got error code <span class="pl-v">$(code)</span>: <span class="pl-v">$(<span class="pl-c1">unsafe_string</span>(<span class="pl-c1">plc_tag_decode_error</span>(code)))</span><span class="pl-pds">"</span></span>)

<span class="pl-c1">plc_tag_destroy</span>(tag)</pre></div>
<h3><a id="user-content-high-level-usage" class="anchor" aria-hidden="true" href="#high-level-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-Level Usage</h3>
<p>The high-level interface is much more pleasant to work with, and the example below is the equivalent to the low-level example above.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PLCTag

const plc = PLC(
	protocol = &quot;ab-eip&quot;,
	gateway  = &quot;192.168.2.1&quot;,
	path     = &quot;1,0&quot;,
	cpu      = &quot;compactlogix&quot;,
	debug    = 0,
)
const DATA_TIMEOUT = 5000


tag = PLCRef{Int32}(plc, &quot;some_tag&quot;; timeout = DATA_TIMEOUT)

# read &amp; fetch
read(tag)
@info fetch(tag)
# or
@info tag[]

# write &amp; flush
write(tag, 42)
flush(tag)
# or
tag[] = 42

# just for demonstration purposes, a tag's resources get cleaned
# up when it's no longer referenced and garbage collection occurs
tag = nothing
GC.gc()
"><pre><span class="pl-k">using</span> PLCTag

<span class="pl-k">const</span> plc <span class="pl-k">=</span> <span class="pl-c1">PLC</span>(
	protocol <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>ab-eip<span class="pl-pds">"</span></span>,
	gateway  <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>192.168.2.1<span class="pl-pds">"</span></span>,
	path     <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1,0<span class="pl-pds">"</span></span>,
	cpu      <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>compactlogix<span class="pl-pds">"</span></span>,
	debug    <span class="pl-k">=</span> <span class="pl-c1">0</span>,
)
<span class="pl-k">const</span> DATA_TIMEOUT <span class="pl-k">=</span> <span class="pl-c1">5000</span>


tag <span class="pl-k">=</span> <span class="pl-c1">PLCRef</span><span class="pl-c1">{Int32}</span>(plc, <span class="pl-s"><span class="pl-pds">"</span>some_tag<span class="pl-pds">"</span></span>; timeout <span class="pl-k">=</span> DATA_TIMEOUT)

<span class="pl-c"><span class="pl-c">#</span> read &amp; fetch</span>
<span class="pl-c1">read</span>(tag)
<span class="pl-c1">@info</span> <span class="pl-c1">fetch</span>(tag)
<span class="pl-c"><span class="pl-c">#</span> or</span>
<span class="pl-c1">@info</span> tag[]

<span class="pl-c"><span class="pl-c">#</span> write &amp; flush</span>
<span class="pl-c1">write</span>(tag, <span class="pl-c1">42</span>)
<span class="pl-c1">flush</span>(tag)
<span class="pl-c"><span class="pl-c">#</span> or</span>
tag[] <span class="pl-k">=</span> <span class="pl-c1">42</span>

<span class="pl-c"><span class="pl-c">#</span> just for demonstration purposes, a tag's resources get cleaned</span>
<span class="pl-c"><span class="pl-c">#</span> up when it's no longer referenced and garbage collection occurs</span>
tag <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
GC<span class="pl-k">.</span><span class="pl-c1">gc</span>()</pre></div>
</article></div>