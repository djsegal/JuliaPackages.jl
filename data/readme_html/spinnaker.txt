<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-spinnakerjl" class="anchor" aria-hidden="true" href="#spinnakerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spinnaker.jl</h1>
<p>A Julia interface to the FLIR/PointGrey <a href="https://www.ptgrey.com/spinnaker-sdk" rel="nofollow">Spinnaker SDK</a>.</p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Overview</h2>
<p>This package provides a complete wrapper of the Spinnaker SDK C API. All
functions and enumerations prefixed by <code>spin</code> are exported from the package and
can be called according to the API documentation. See <code>examples/wrapper/</code> for
examples.</p>
<p>The package also provides a high-level interface for common camera functions
which allows control from Julia with a relatively terse syntax, and for the
retrieval of images as native Julia arrays. The high-level interface is
work-in-progress, and may be subject to change.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Ensure that the Spinnaker SDK is installed, then use the Julia package manage to
install and build the package.</p>
<div class="highlight highlight-source-julia"><pre>]add Spinnaker</pre></div>
<p>NOTE: The official Julia 1.4.0 MacOS binaries appear to have an issue with notarization
which causes a failure to load the dynamic libraries. Whilst this is being resolved, either
use a previous version, or the fix detailed <a href="https://github.com/samuelpowell/Spinnaker.jl/pull/63#issuecomment-602821121">here</a>.</p>
<h2><a id="user-content-graphical-user-interface" class="anchor" aria-hidden="true" href="#graphical-user-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Graphical user interface</h2>
<p><a href="https://github.com/ianshmean/SpinnakerGUI.jl">SpinnakerGUI.jl</a> by @ianshmean uses
@Gnimuc's <a href="https://github.com/Gnimuc/CImGui.jl">CImGui.jl</a> package to implement
an experimental GUI for image capture and recording, driven by this package.</p>
<h2><a id="user-content-high-level-interface" class="anchor" aria-hidden="true" href="#high-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>High-level Interface</h2>
<p>The high-level interface provides convenience functions for more typical camera
operations, in addition to utility functions which allow the setting of camera
nodes directly.</p>
<p>Camera settings which take a numeric value, e.g., gain or exposure time, can be
provided with any number type, and this will be <em>clamped</em> to the acceptable
range, the actual value set on the camera being returned. Settings which are
boolean in nature accept Julia <code>bool</code> types. Enumeration settings require the
user to provide a member of the enumeration in string format, e.g., selecting a
12-bit ADC bit depth requires the parameter <code>"Bit12"</code>, these values can be found
in the technical reference manual for the particular camera.</p>
<p>All types and references are managed by the Julia GC - there is no need to
explicitly release resources (with the sole exception of <code>BufferImages</code>).</p>
<h3><a id="user-content-enumeration" class="anchor" aria-hidden="true" href="#enumeration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Enumeration</h3>
<p>Get a list of cameras by constructing a <code>CameraList</code> object:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> camlist <span class="pl-k">=</span> <span class="pl-c1">CameraList</span>()
CameraList with <span class="pl-c1">1</span> enumerated devices<span class="pl-k">:</span>
ID      Serial No.      Description
<span class="pl-c1">0</span>       XXXXXXX         FLIR Blackfly S BFS<span class="pl-k">-</span>U3<span class="pl-k">-</span><span class="pl-c1">16</span>S2M</pre></div>
<p>Acquire a camera by indexing a <code>CameraList</code> by ID:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> cam <span class="pl-k">=</span> camlist[<span class="pl-c1">0</span>]
FLIR Blackfly S BFS<span class="pl-k">-</span>U3<span class="pl-k">-</span><span class="pl-c1">16</span>S2M (XXXXXXXX)<span class="pl-k">:</span> stopped</pre></div>
<h3><a id="user-content-acquisition-controls" class="anchor" aria-hidden="true" href="#acquisition-controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acquisition controls</h3>
<p>Change the exposure time to 0.1s:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">exposure!</span>(cam, <span class="pl-c1">0.1e6</span>)
<span class="pl-c1">100001.0</span></pre></div>
<p>Change the framerate for continuous mode to 60 fps:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">framerate!</span>(cam, <span class="pl-c1">60</span>)
<span class="pl-c1">60.0</span></pre></div>
<p>Start an acquisition, and trigger it (if set to trigger mode):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">start!</span>(cam)
<span class="pl-c1">trigger!</span>(cam)
<span class="pl-c"><span class="pl-c">#</span> do something</span>
<span class="pl-c1">stop!</span>(cam)</pre></div>
<p>See <code>triggermode(!)</code>, <code>triggersource(!)</code>, <code>exposure(!)</code>.</p>
<h3><a id="user-content-analog-controls" class="anchor" aria-hidden="true" href="#analog-controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Analog controls</h3>
<p>Set the gain to 12dB:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">gain!</span>(cam, <span class="pl-c1">12</span>)
<span class="pl-c1">12.0</span></pre></div>
<h3><a id="user-content-image-format" class="anchor" aria-hidden="true" href="#image-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Image format</h3>
<p>Set the ADC to 12-bit mode:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">adcbits!</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>Bit12<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>Bit12<span class="pl-pds">"</span></span></pre></div>
<p>Set the image size and offset:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">imagedims!</span>(cam, (<span class="pl-c1">1024</span>, <span class="pl-c1">1024</span>))
(<span class="pl-c1">1024</span>, <span class="pl-c1">1024</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">offsetdims!</span>(cam, (<span class="pl-c1">0</span>,<span class="pl-c1">10</span>))
(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>)</pre></div>
<p>See <code>gammaenable(!)</code>, <code>pixelformat(!)</code>, <code>adcbits(!)</code>, <code>sensordims</code>, <code>imagedims(!)</code>, <code>offsetdims(!)</code>.</p>
<h3><a id="user-content-retrieving-images" class="anchor" aria-hidden="true" href="#retrieving-images"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Retrieving images</h3>
<p>All of the following functions are blocking by default, and execution will halt until an image is available. Use the keyword argument 'timeout' to specify a timeout in ms, after which an error is thrown. For each function the keyword argument <code>release=true</code> is supported which by default will release the buffer for further use. If you choose <code>release=false</code> then the buffer will not be released, allowing one to inspect the image without removing it from the stream buffer (e.g the next call to the function will return the same image).</p>
<p>Images can be retrieved in three formats:</p>
<ul>
<li>CameraImage, an abstract array interface of arbitrary type, which stores metadata about the image;</li>
<li>Array, a raw Julia array of arbitrary type, with metadata returned as additional return values;</li>
<li>SpinImage, an internal Spinnaker library image type, which can be queried for metadata.</li>
</ul>
<p><strong>The native camera format for images is row-major</strong>, to avoid performing a transposition this means that the resulting Julia matrices are of dimensions (width x height), which is transposed compared to the normal (height x width) arrangement in a column-major language such as Julia or MATLAB. Perform a transposition if this is problematic.</p>
<h4><a id="user-content-cameraimage" class="anchor" aria-hidden="true" href="#cameraimage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CameraImage</h4>
<p>If the pixel format from the camera is <em>unpacked</em> Images can be retrieved to a <code>CameraImage</code> type which provides an <code>AbstractArray</code> interface to the underlying data, in addition to storing metadata available when the image is acquired. One can acquire an image
in this way by specifying the desired data format:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">getimage</span>(cam, Gray{N0f8}, normalize<span class="pl-k">=</span><span class="pl-c1">true</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">getimage</span>(cam, Float64, normalize<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">1440</span><span class="pl-k">×</span><span class="pl-c1">1080</span> CameraImage{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">84.0</span>   <span class="pl-c1">85.0</span>  <span class="pl-c1">90.0</span>  <span class="pl-c1">90.0</span>  <span class="pl-c1">87.0</span>  <span class="pl-c1">94.0</span>  <span class="pl-c1">89.0</span>  <span class="pl-c1">92.0</span>  …  <span class="pl-c1">88.0</span>  <span class="pl-c1">79.0</span>  <span class="pl-c1">76.0</span>  <span class="pl-c1">87.0</span>  <span class="pl-c1">78.0</span> </pre></div>
<p>By specifying <code>normalize=true</code> the image data from the camera is intepreted as a
fixed point number in the range [0,1]. By combining this with a fixed point Colorant type <code>Gray{N0f8}</code>, this provides direct compatibilty with the Julia images stack. Alterantively, without normalisation the unsigned integer data returned from the camera will be supplied in its natural range, e.g., a Mono8 pixel format will result in values in the range [0, 255].</p>
<p>Mutating versions are available, where the type is determined from the input, the metadata will be updated and the underlying data array reused.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">getimage!</span>(cam, cameraimage);
<span class="pl-c1">1440</span><span class="pl-k">×</span><span class="pl-c1">1080</span> CameraImage{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">84.0</span>   <span class="pl-c1">85.0</span>  <span class="pl-c1">90.0</span>  <span class="pl-c1">90.0</span>  <span class="pl-c1">87.0</span>  <span class="pl-c1">94.0</span>  <span class="pl-c1">89.0</span>  <span class="pl-c1">92.0</span>  …  <span class="pl-c1">88.0</span>  <span class="pl-c1">79.0</span>  <span class="pl-c1">76.0</span>  <span class="pl-c1">87.0</span>  <span class="pl-c1">78.0</span> </pre></div>
<p>Metadata such as the id, timestamp, and exposure can be returned from the CameraImage:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">id</span>(<span class="pl-c1">getimage</span>(camera, Float64))
<span class="pl-c1">391050</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">id</span>(<span class="pl-c1">getimage</span>(camera, Float64))
<span class="pl-c1">391051</span></pre></div>
<h4><a id="user-content-array" class="anchor" aria-hidden="true" href="#array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Array</h4>
<p>A raw Julia array can be passed to the mutating form <code>getimage!</code>, which operates in the same way as the method which accepts the CameraImage format, however the metadata will be returned by the function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> imid, imtimestamp, imexposure <span class="pl-k">=</span> <span class="pl-c1">getimage!</span>(camera, <span class="pl-c1">Array</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">1440</span>, <span class="pl-c1">1080</span>))
(<span class="pl-c1">391055</span>, <span class="pl-c1">20685632735104</span>, <span class="pl-c1">14996.0</span>)</pre></div>
<h4><a id="user-content-spinimage" class="anchor" aria-hidden="true" href="#spinimage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SpinImage</h4>
<p>Alternatively, a <code>SpinImage</code> type can be retrieved from the camera, which supports all
possible pixel formats, including packed data. To copy the image from the camera buffer, and release the buffer for acquisition:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> image <span class="pl-k">=</span> <span class="pl-c1">getimage</span>(cam)
Spinnaker Image, (<span class="pl-c1">1440</span>, <span class="pl-c1">1080</span>), <span class="pl-c1">16</span>bpp, <span class="pl-c1">PixelFormat_Mono16</span>(<span class="pl-c1">1</span>)</pre></div>
<p>The resulting <code>SpinImage</code> type contains a handle to a Spinnaker image object. These
types can queried for metadata, converted to alternative pixel formats, saved to
disc, etc., by the Spinnaker SDK (see <code>src/SpinImage.jl</code> for details). For example, the timestamp of the image in nanoseconds since the last reset of the camera clock (i.e. at camera boot) may be read:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">timestamp</span>(image)
<span class="pl-c1">2166531583413</span></pre></div>
<p>If you havean existing <code>SpinImage</code> and wish to overwrite it in-place,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">getimage!</span>(cam, image)
Spinnaker Image, (<span class="pl-c1">1440</span>, <span class="pl-c1">1080</span>), <span class="pl-c1">16</span>bpp, <span class="pl-c1">PixelFormat_Mono16</span>(<span class="pl-c1">1</span>)</pre></div>
<p>Alternatively,
It is possible to convert a <code>SpinImage</code> to a <code>CameraImage</code> using the <code>CameraImage</code>
constructor:</p>
<pre><code>julia&gt; CameraImage(spinimage, Float64, normalize=true)
</code></pre>
<p>One may directly save an acquired image to disc:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">saveimage</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>output.png<span class="pl-pds">"</span></span>, Spinnaker<span class="pl-k">.</span>PNG)</pre></div>
<h3><a id="user-content-stream-buffer-handling" class="anchor" aria-hidden="true" href="#stream-buffer-handling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stream (buffer) handling</h3>
<p>To set the current buffer mode,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">buffermode!</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>NewestFirst<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>NewestFirst<span class="pl-pds">"</span></span></pre></div>
<p>To set the number of buffers, and move to manual buffer count mode:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">buffercount!</span>(cam, <span class="pl-c1">12</span>)
(<span class="pl-c1">12</span>, Manual)</pre></div>
<p>To return to automatic buffer count,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">buffercount!</span>(cam)</pre></div>
<p>To check for buffer underruns, or invalid buffer frames:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">bufferunderrun</span>(camera)
<span class="pl-c1">0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bufferfailed</span>(camera)
<span class="pl-c1">0</span></pre></div>
<p>Please note the <a href="https://www.ptgrey.com/tan/11174" rel="nofollow">specifics</a> of buffer handling to
understand the expected behaviour of the various buffer modes.</p>
<h3><a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Demo</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Spinnaker

julia<span class="pl-k">&gt;</span> camlist <span class="pl-k">=</span> <span class="pl-c1">CameraList</span>()
CameraList with <span class="pl-c1">1</span> enumerated devices<span class="pl-k">:</span>
ID      Serial No.      Description
<span class="pl-c1">0</span>       <span class="pl-c1">17458441</span>        FLIR Blackfly S BFS<span class="pl-k">-</span>U3<span class="pl-k">-</span><span class="pl-c1">16</span>S2M

julia<span class="pl-k">&gt;</span> cam <span class="pl-k">=</span> camlist[<span class="pl-c1">0</span>]
FLIR Blackfly S BFS<span class="pl-k">-</span>U3<span class="pl-k">-</span><span class="pl-c1">16</span>S2M (XXXXXXXX)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">triggersource!</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>Software<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>Software<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">triggermode!</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>On<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>On<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">start!</span>(cam)
FLIR Blackfly S BFS<span class="pl-k">-</span>U3<span class="pl-k">-</span><span class="pl-c1">16</span>S2M (XXXXXXXX)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">trigger!</span>(cam)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">saveimage</span>(cam, <span class="pl-c1">joinpath</span>(<span class="pl-c1">@__DIR__</span>, <span class="pl-s"><span class="pl-pds">"</span>test.png<span class="pl-pds">"</span></span>), <span class="pl-c1">spinImageFileFormat</span>(<span class="pl-c1">6</span>))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stop!</span>(cam)
FLIR Blackfly S BFS<span class="pl-k">-</span>U3<span class="pl-k">-</span><span class="pl-c1">16</span>S2M (XXXXXXXX)</pre></div>
<h2><a id="user-content-low-level-interface" class="anchor" aria-hidden="true" href="#low-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Low-level Interface</h2>
<p>The operation of this package revolves around the manipulation of <a href="https://www.ptgrey.com/tan/11153" rel="nofollow">nodes</a> defined by a camera specification. Nodes exist as part of a node map, of which there are several: the camera node map controls camera features; the stream node map controls image buffers; and the transport node map controls the specific transport layer of the device. Nodes may be integer valued, floating point valued, an enumeration, etc.</p>
<p>In Spinnaker.jl, node access functions are provided which allow manipulation through their textual names (rather than integer identifiers). For example, a nodes can be written to using the <code>set!</code>function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Spinnaker<span class="pl-k">.</span><span class="pl-c1">set!</span>(Spinnaker<span class="pl-k">.</span><span class="pl-c1">SpinEnumNode</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>TriggerSelector<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>FrameStart<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>FrameStart<span class="pl-pds">"</span></span></pre></div>
<p>This command creates a reference to an enumeration valued node with name <code>TriggerSelector</code>, and sets the value to the named enumeration element <code>FrameStart</code>. By default, nodes refer to the <em>camera</em> node map. To access a different node map, pass the appropriate singleton type to the node constructor:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">get</span>(<span class="pl-c1">SpinEnumNode</span>(cam, <span class="pl-s"><span class="pl-pds">"</span>StreamBufferHandlingMode<span class="pl-pds">"</span></span>, <span class="pl-c1">CameraTLStreamNodeMap</span>()))
<span class="pl-s"><span class="pl-pds">"</span>NewestFirst<span class="pl-pds">"</span></span></pre></div>
<p>This command creates a reference to the enumeration valued node with the name <code>StreamBufferHandlingMode</code> in the <em>transport steram node map</em>, and returns the current enuemration selection by its string representation. The available node maps are <code>CameraNodeMap</code>, <code>CameraTLStreamNodeMap</code>, and <code>CameraTLDeviceNodeMap</code>. Node types are defined for enumerations (<code>SpinEnumNode</code>), floating point values (<code>SpinFloatNode</code>), booleans (<code>SpinBoolNode</code>), and integers (<code>SpinIntegerNode</code>). Set operations on numeric node types are clamped to the range of the node, and a warning is printed if the desired setting is out of range.</p>
<p>The majority of the high level interface is defined by convenience functions which safely or logically manipualte camera nodes. If you frequently require access to specific nodes, consider creating a high level convenience function for this action, and submitting a PR.</p>
</article></div>