<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libdeflatejl" class="anchor" aria-hidden="true" href="#libdeflatejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibDeflate.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jakobnissen/LibDeflate.jl/workflows/CI/badge.svg"><img src="https://github.com/jakobnissen/LibDeflate.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jakobnissen/LibDeflate.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fccfbb233dedfb8970056867eea88d2c8682e625a044a5cde8e38c57baa68f4f/68747470733a2f2f636f6465636f762e696f2f67682f6a616b6f626e697373656e2f4c69624465666c6174652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jakobnissen/LibDeflate.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides Julia bindings for <a href="https://github.com/ebiggers/libdeflate">libdeflate</a>.</p>
<p dir="auto">Libdeflate is a heavily optimized implementation of the DEFLATE compression algorithm used in the zip, bgzip and gzip formats. Unlike libz or gzip, libdeflate does not support streaming, and so is intended for use in of files that fit in-memory or for block-compressed files like bgzip. But it is significantly faster than either libz or gzip.</p>
<p dir="auto">This package provides simple functionality for working with raw DEFLATE payloads, zlib and gzip data. It is intended for internal use by other packages, not to be used directly by users. Hence, its interface is somewhat small.</p>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> This package ONLY works with in-memory buffers, and ONLY buffers with a length &lt; 2^32 bytes <g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji></p>
<h3 dir="auto"><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface</h3>
<p dir="auto">Many functions have a  "safe" and an "unsafe" variant. The unsafe works with pointers, the safe attempts to convert Julia objects to <code>ReadableMemory</code> or <code>WriteableMemory</code>, which are simply structs containing pointers.
When possible, use the safe variants as the overhead is rather small.</p>
<p dir="auto">For more details on these functions, read their docstrings which define their API.
Functions and types without a docstring are internal.</p>
<p dir="auto">No functions here are expected to throw errors. On error, they return a <code>LibDeflateError</code> object.</p>
<p dir="auto"><strong>Common exported types</strong></p>
<ul dir="auto">
<li><code>Decompressor</code>: Create an object that decompresses using DEFLATE.</li>
<li><code>Compressor(N)</code>: Create an object that compresses using DEFLATE level <code>N</code>.</li>
<li><code>LibDeflateError</code>: An enum will all LibDeflate errors. Functions are either successful or return this.</li>
<li><code>ReadableMemory</code>: A pointer and a length. Constructable from types that are pointer-readable.</li>
<li><code>WriteableMemory</code>: A pointer and a length. Constructable from types that are pointer-writeable.</li>
</ul>
<p dir="auto"><strong>Working with DEFLATE payloads</strong></p>
<ul dir="auto">
<li><code>(unsafe_)decompress!</code>: DEFLATE decompress payload.</li>
<li><code>(unsafe_)compress!</code>: DEFLATE compress payload</li>
</ul>
<p dir="auto"><strong>Working with gzip files</strong></p>
<ul dir="auto">
<li>
<p dir="auto"><code>(unsafe_)gzip_decompress!</code>: Decompress gzip data.</p>
</li>
<li>
<p dir="auto"><code>(unsafe_)gzip_compress!</code>: Compress gzip data and/or metadata</p>
</li>
<li>
<p dir="auto"><code>(unsafe_)parse_gzip_header</code>: Parse out gzip header</p>
</li>
<li>
<p dir="auto"><code>is_valid_extra_data</code>: Check if some bytes are valid metadata for the gzip "extra" field.</p>
</li>
</ul>
<p dir="auto"><strong>Working with Libz files</strong></p>
<ul dir="auto">
<li><code>(unsafe_)zlib_decompress!</code>: Decompress zlib data.</li>
<li><code>(unsafe_)zlib_compress!</code>: Compress zlib data</li>
</ul>
<p dir="auto"><strong>Miscellaneous</strong></p>
<ul dir="auto">
<li><code>(unsafe)_crc32</code>: Compute the crc32 checksum of the bytes at <code>data</code>. Note that this is <em>not</em> the same algorithm as <code>crc32c</code>.</li>
<li><code>(unsafe)_adler32</code>: Compute the Adler32 checksum of the bytes at <code>data</code>.</li>
</ul>
</article></div>