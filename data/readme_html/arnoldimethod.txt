<div id="readme" class="md" data-path="readme.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-arnoldimethodjl" class="anchor" aria-hidden="true" href="#arnoldimethodjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ArnoldiMethod.jl</h1>
<p><a href="https://travis-ci.org/haampie/ArnoldiMethod.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9bd91784138fc0974db7020501832b49c4cf2bda/68747470733a2f2f7472617669732d63692e6f72672f6861616d7069652f41726e6f6c64694d6574686f642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/haampie/ArnoldiMethod.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/haampie/ArnoldiMethod.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/832b8caaf54f55042521af6ab215bd5741535a45/68747470733a2f2f636f6465636f762e696f2f67682f6861616d7069652f41726e6f6c64694d6574686f642e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/haampie/ArnoldiMethod.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>The Implicitly Restarted Arnoldi Method, natively in Julia.</p>
<h2><a id="user-content-docs" class="anchor" aria-hidden="true" href="#docs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Docs</h2>
<p><a href="https://haampie.github.io/ArnoldiMethod.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://haampie.github.io/ArnoldiMethod.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/cac2a442790940b1801f24428408eb5f6bceafcb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d677261792e737667" alt="Latest docs" data-canonical-src="https://img.shields.io/badge/docs-latest-gray.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-goal" class="anchor" aria-hidden="true" href="#goal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Goal</h2>
<p>Make <code>eigs</code> a native Julia function.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Open the package manager in the REPL via <code>]</code> and run</p>
<pre><code>(v1.0) pkg&gt; add ArnoldiMethod
</code></pre>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ArnoldiMethod, LinearAlgebra, SparseArrays
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">spdiagm</span>(
           <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">99</span>),
            <span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">100</span>), 
            <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">fill</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">99</span>)
       );
julia<span class="pl-k">&gt;</span> decomp, history <span class="pl-k">=</span> <span class="pl-c1">partialschur</span>(A, nev<span class="pl-k">=</span><span class="pl-c1">10</span>, tol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>, which<span class="pl-k">=</span><span class="pl-c1">SR</span>());
julia<span class="pl-k">&gt;</span> decomp
PartialSchur decomposition (Float64) of dimension <span class="pl-c1">10</span>
eigenvalues<span class="pl-k">:</span>
<span class="pl-c1">10</span><span class="pl-k">-</span>element Array{Complex{Float64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0009674354160236865</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.003868805732811139</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.008701304061962657</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.01546025527344699</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
  <span class="pl-c1">0.024139120518486677</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
    <span class="pl-c1">0.0347295035554728</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.04722115887278571</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.06160200160067088</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
    <span class="pl-c1">0.0778581192025522</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
   <span class="pl-c1">0.09597378493453936</span> <span class="pl-k">+</span> <span class="pl-c1">0.0im</span>
julia<span class="pl-k">&gt;</span> history
Converged<span class="pl-k">:</span> <span class="pl-c1">10</span> of <span class="pl-c1">10</span> eigenvalues <span class="pl-k">in</span> <span class="pl-c1">174</span> matrix<span class="pl-k">-</span>vector products
julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(A <span class="pl-k">*</span> decomp<span class="pl-k">.</span>Q <span class="pl-k">-</span> decomp<span class="pl-k">.</span>Q <span class="pl-k">*</span> decomp<span class="pl-k">.</span>R)
<span class="pl-c1">6.39386920955869e-8</span>
julia<span class="pl-k">&gt;</span> λs, X <span class="pl-k">=</span> <span class="pl-c1">partialeigen</span>(decomp);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(A <span class="pl-k">*</span> X <span class="pl-k">-</span> X <span class="pl-k">*</span> <span class="pl-c1">Diagonal</span>(λs))
<span class="pl-c1">6.393869211477937e-8</span></pre></div>
</article></div>