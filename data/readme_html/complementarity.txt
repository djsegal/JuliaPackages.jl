<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-complementarityjl" class="anchor" aria-hidden="true" href="#complementarityjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Complementarity.jl</h1>
<p dir="auto"><a href="https://github.com/chkwon/Complementarity.jl/actions?query=workflow%3ACI"><img src="https://github.com/chkwon/Complementarity.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chkwon/Complementarity.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0b01cdada359fa5dec78ef023134d06baba630662dea84303cd9c8c63b9c5adb/68747470733a2f2f636f6465636f762e696f2f67682f63686b776f6e2f436f6d706c656d656e7461726974792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chkwon/Complementarity.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides modeling language for (1) mixed complementarity problems (MCP) and (2) mathematical programs with equilibrium problems (MPEC).</p>
<p dir="auto"><strong>NOTE</strong> <code>@complmentarity</code> for MCP and <code>@complements</code> for MPEC.</p>
<h2 dir="auto"><a id="user-content-mixed-complementarity-problems-mcp" class="anchor" aria-hidden="true" href="#mixed-complementarity-problems-mcp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mixed Complementarity Problems (MCP)</h2>
<p dir="auto"><strong>NOTE:</strong> Differences between PATHSolver.jl and Complementarity.jl:</p>
<ul dir="auto">
<li><a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a> provides a wrapper for the C API of the <a href="http://pages.cs.wisc.edu/~ferris/path.html" rel="nofollow">PATH</a> solver.</li>
<li><a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a> also enables JuMP for solving MCP, but limited to linear problems.</li>
<li>Complementarity.jl provides a JuMP extension for solving MCP, both linear and nonlinear, using the C API wrapper in PATHSolver.jl.</li>
</ul>
<p dir="auto"><em><strong><a href="MCP.md">MCP Documentation</a></strong></em></p>
<ul dir="auto">
<li>This package provides a modeling and computational interface for solving <a href="https://en.wikipedia.org/wiki/Mixed_complementarity_problem" rel="nofollow">Mixed Complementarity Problems</a> (MCP): modeling by <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a> and computing by <a href="https://github.com/chkwon/PATHSolver.jl">PATHSolver.jl</a> and <a href="https://github.com/EconForge/NLsolve.jl">NLsolve.jl</a>. See <a href="MCP.md">the documentation</a>.</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="F(x) ⟂ lb ≤ x ≤ ub"><pre class="notranslate"><code>F(x) ⟂ lb ≤ x ≤ ub
</code></pre></div>
<p dir="auto">A very simple example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="(x+2) x = 0,  x ≥ 0,   x+2 ≥ 0"><pre class="notranslate"><code>(x+2) x = 0,  x ≥ 0,   x+2 ≥ 0
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Complementarity, JuMP
m = MCPModel()
@variable(m, x &gt;= 0)
@mapping(m, F, x+2)
@complementarity(m, F, x)
status = solveMCP(m)
@show result_value(x)"><pre><span class="pl-k">using</span> Complementarity, JuMP
m <span class="pl-k">=</span> <span class="pl-c1">MCPModel</span>()
<span class="pl-c1">@variable</span>(m, x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c1">@mapping</span>(m, F, x<span class="pl-k">+</span><span class="pl-c1">2</span>)
<span class="pl-c1">@complementarity</span>(m, F, x)
status <span class="pl-k">=</span> <span class="pl-c1">solveMCP</span>(m)
<span class="pl-c1">@show</span> <span class="pl-c1">result_value</span>(x)</pre></div>
<h2 dir="auto"><a id="user-content-mathematical-programs-with-equilibrium-constraints-mpec" class="anchor" aria-hidden="true" href="#mathematical-programs-with-equilibrium-constraints-mpec"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mathematical Programs with Equilibrium Constraints (MPEC)</h2>
<p dir="auto"><strong>NOTE:</strong> For solving MPEC, JuMP.jl <code>v0.21</code> has started supporting <a href="http://www.juliaopt.org/JuMP.jl/v0.21.1/constraints/#Complementarity-constraints-1" rel="nofollow">complementarity constraints</a>. At this moment, <a href="https://github.com/GAMS-dev/gams.jl">GAMS.jl</a> and <a href="https://github.com/jump-dev/KNITRO.jl">KNITRO</a> support complementarity constraints.</p>
<p dir="auto"><em><strong><a href="MPEC.md">MPEC Documentation</a></strong></em></p>
<ul dir="auto">
<li>For solving <a href="https://en.wikipedia.org/wiki/Mathematical_programming_with_equilibrium_constraints" rel="nofollow">mathematical programs with equilibrium constraints (MPEC)</a>, this package provides an extension to <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a> by providing a macro that accepts complementarity conditions as constraints.  Then it reformulates the complementarity conditions as a set of equality and inequality constraints so that a nonlinear optimization solver such as <a href="https://github.com/JuliaOpt/Ipopt.jl">Ipopt.jl</a> can solve the problem. See <a href="MPEC.md">the documentation</a>.</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="min  f(x)
s.t. g(x) ≤ 0
     F(x) ⟂ lb ≤ x ≤ ub"><pre class="notranslate"><code>min  f(x)
s.t. g(x) ≤ 0
     F(x) ⟂ lb ≤ x ≤ ub
</code></pre></div>
<p dir="auto">A very simple example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="min  x^3
s.t. (x+2) x = 0,  x ≥ 0,   x+2 ≥ 0"><pre class="notranslate"><code>min  x^3
s.t. (x+2) x = 0,  x ≥ 0,   x+2 ≥ 0
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP, Ipopt, Complementarity
m = Model(Ipopt.Optimizer)
@variable(m, x&gt;=0)
@NLobjective(m, Min, x^3)
@complements(m, 0 &lt;= x+2,   x &gt;= 0)
solve(m)
@show getvalue(x)"><pre><span class="pl-k">using</span> JuMP, Ipopt, Complementarity
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Ipopt<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">@variable</span>(m, x<span class="pl-k">&gt;=</span><span class="pl-c1">0</span>)
<span class="pl-c1">@NLobjective</span>(m, Min, x<span class="pl-k">^</span><span class="pl-c1">3</span>)
<span class="pl-c1">@complements</span>(m, <span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x<span class="pl-k">+</span><span class="pl-c1">2</span>,   x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span>)
<span class="pl-c1">solve</span>(m)
<span class="pl-c1">@show</span> <span class="pl-c1">getvalue</span>(x)</pre></div>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Complementarity&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Complementarity<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This will also install a few other packages.</p>
</article></div>