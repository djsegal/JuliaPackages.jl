<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-yaactljl" class="anchor" aria-hidden="true" href="#yaactljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>YAActL.jl</h1>
<p><em>Yet another Actor Library</em>: concurrent programming in Julia.</p>
<p><a href="https://juliaactors.github.io/YAActL.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable docs" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://juliaactors.github.io/YAActL.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="dev docs" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaActors/YAActL.jl/workflows/CI/badge.svg"><img src="https://github.com/JuliaActors/YAActL.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/juliaactors/YAActL.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a19b1ae27e3edd876cea70f4e24e5160eddfc947ae0f35fbb528bd488c3f421d/68747470733a2f2f636f6465636f762e696f2f67682f6a756c69616163746f72732f59414163744c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/juliaactors/YAActL.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>YAActL</code> is based on the <a href="https://en.wikipedia.org/wiki/Actor_model" rel="nofollow">Actor model</a>. An actor</p>
<ul>
<li>is a <em>task</em> running on a thread or a remote node which</li>
<li>receives <em>messages</em> over a <em>channel</em> and with it</li>
<li>dispatches a <em>behavior</em> function or one of its methods.</li>
</ul>
<p>Actors can represent concurrently different and changing behaviors of real world or computational objects <em>interacting</em> with each other. This makes an actor system.</p>
<h2><a id="user-content-one-single-actor" class="anchor" aria-hidden="true" href="#one-single-actor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>One Single Actor</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using YAActL, Printf

# define two functions for printing a message
function pr(msg)
    print(@sprintf(&quot;%s\n&quot;, msg))
    become(pr, &quot;Next&quot;) # change behavior
end
pr(info, msg) = print(@sprintf(&quot;%s: %s\n&quot;, info, msg))

# a function for doing arithmetic
calc(op::F, x, y) where F&lt;:Function = op(x, y)

# start an actor with the first behavior
myactor = Actor(pr)
"><pre><span class="pl-k">using</span> YAActL, Printf

<span class="pl-c"><span class="pl-c">#</span> define two functions for printing a message</span>
<span class="pl-k">function</span> <span class="pl-en">pr</span>(msg)
    <span class="pl-c1">print</span>(<span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%s<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, msg))
    <span class="pl-c1">become</span>(pr, <span class="pl-s"><span class="pl-pds">"</span>Next<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> change behavior</span>
<span class="pl-k">end</span>
<span class="pl-en">pr</span>(info, msg) <span class="pl-k">=</span> <span class="pl-c1">print</span>(<span class="pl-c1">@sprintf</span>(<span class="pl-s"><span class="pl-pds">"</span>%s: %s<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, info, msg))

<span class="pl-c"><span class="pl-c">#</span> a function for doing arithmetic</span>
<span class="pl-en">calc</span>(op<span class="pl-k">::</span><span class="pl-c1">F</span>, x, y) <span class="pl-k">where</span> F<span class="pl-k">&lt;:</span><span class="pl-c1">Function</span> <span class="pl-k">=</span> <span class="pl-c1">op</span>(x, y)

<span class="pl-c"><span class="pl-c">#</span> start an actor with the first behavior</span>
myactor <span class="pl-k">=</span> <span class="pl-c1">Actor</span>(pr)</pre></div>
<p>Now we can interact with it:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; cast!(myactor, &quot;My first actor&quot;)     # send a message to it
My first actor

julia&gt; cast!(myactor, &quot;Something else&quot;)     # send again a message
Next: Something else

julia&gt; become!(myactor, pr, &quot;New behavior&quot;) # change the behavior to another one

julia&gt; cast!(myactor, &quot;bla bla bla&quot;)        # and send again a message
New behavior: bla bla bla
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cast!</span>(myactor, <span class="pl-s"><span class="pl-pds">"</span>My first actor<span class="pl-pds">"</span></span>)     <span class="pl-c"><span class="pl-c">#</span> send a message to it</span>
My first actor

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cast!</span>(myactor, <span class="pl-s"><span class="pl-pds">"</span>Something else<span class="pl-pds">"</span></span>)     <span class="pl-c"><span class="pl-c">#</span> send again a message</span>
Next<span class="pl-k">:</span> Something <span class="pl-k">else</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">become!</span>(myactor, pr, <span class="pl-s"><span class="pl-pds">"</span>New behavior<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> change the behavior to another one</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cast!</span>(myactor, <span class="pl-s"><span class="pl-pds">"</span>bla bla bla<span class="pl-pds">"</span></span>)        <span class="pl-c"><span class="pl-c">#</span> and send again a message</span>
New behavior<span class="pl-k">:</span> bla bla bla</pre></div>
<p>The actor can also change to a completely different behavior and do some arithmetic:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; become!(myactor, calc, +, 10);       # now become a machine for adding to 10

julia&gt; call!(myactor, 5)                    # send a request to add 5 to it and to return the result
15

julia&gt; become!(myactor, ^);                 # become an exponentiation machine

julia&gt; call!(myactor, 123, 456)             # try it
2409344748064316129
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">become!</span>(myactor, calc, <span class="pl-k">+</span>, <span class="pl-c1">10</span>);       <span class="pl-c"><span class="pl-c">#</span> now become a machine for adding to 10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">call!</span>(myactor, <span class="pl-c1">5</span>)                    <span class="pl-c"><span class="pl-c">#</span> send a request to add 5 to it and to return the result</span>
<span class="pl-c1">15</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">become!</span>(myactor, <span class="pl-k">^</span>);                 <span class="pl-c"><span class="pl-c">#</span> become an exponentiation machine</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">call!</span>(myactor, <span class="pl-c1">123</span>, <span class="pl-c1">456</span>)             <span class="pl-c"><span class="pl-c">#</span> try it</span>
<span class="pl-c1">2409344748064316129</span></pre></div>
<h2><a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rationale</h2>
<ol>
<li>Actors are an important concept for <a href="https://en.wikipedia.org/wiki/Concurrent_computing" rel="nofollow">concurrent computing</a>.</li>
<li>There is no <a href="https://en.wikipedia.org/wiki/Actor_model#Actor_libraries_and_frameworks" rel="nofollow">actor library</a> in Julia.</li>
<li>Julia allows to condense the actor-concept into a  smart and fast library.</li>
<li>A community effort is needed to do it.</li>
</ol>
<p>If you agree with those points, please help with  <code>YAActL</code>'s development.</p>
</article></div>