<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-modelsanitizer" class="anchor" aria-hidden="true" href="#modelsanitizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ModelSanitizer</h1>
<p>
<a href="https://doi.org/10.5281/zenodo.3361518" rel="nofollow">
<img src="https://camo.githubusercontent.com/e44ae509d694f015181c5fc1a0008de00ae182d6d921d34126e588d862aa5f04/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333336313531382e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3361518.svg" style="max-width:100%;">
</a>
</p>
<p>
<a href="https://app.bors.tech/repositories/19368" rel="nofollow">
<img src="https://camo.githubusercontent.com/0974fbc63eeb2ed86d518ed0afaafe112e9e907ffa1c459396b0be2434c4f83b/68747470733a2f2f626f72732e746563682f696d616765732f62616467655f736d616c6c2e737667" alt="Bors enabled" data-canonical-src="https://bors.tech/images/badge_small.svg" style="max-width:100%;">
</a>
<a href="https://travis-ci.com/bcbi/ModelSanitizer.jl/branches" rel="nofollow">
<img src="https://camo.githubusercontent.com/2470012290fc9240f3c61d7d0e746ade76a2966d126bab6722ef099fb6ea8671/68747470733a2f2f7472617669732d63692e636f6d2f626362692f4d6f64656c53616e6974697a65722e6a6c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.com/bcbi/ModelSanitizer.jl.svg?branch=master" style="max-width:100%;">
</a>
<a href="https://codecov.io/gh/bcbi/ModelSanitizer.jl" rel="nofollow">
<img src="https://camo.githubusercontent.com/7d4cf39ccb642809a4eee6d4792fecb9268962765a2e8959f2cf028645373660/68747470733a2f2f636f6465636f762e696f2f67682f626362692f4d6f64656c53616e6974697a65722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" data-canonical-src="https://codecov.io/gh/bcbi/ModelSanitizer.jl/branch/master/graph/badge.svg" style="max-width:100%;">
</a>
</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>ModelSanitizer exports the <code>sanitize!</code> function and the <code>Model</code>, <code>Data</code>, and
<code>ForceSanitize</code> structs.</p>
<p>If your model is stored in <code>m</code> and your data are stored in <code>x1</code>,
<code>x2</code>, <code>x3</code>, etc. then you can sanitize your model with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sanitize!(Model(m), Data(x1), Data(x2), Data(x3), ...)
"><pre><span class="pl-c1">sanitize!</span>(<span class="pl-c1">Model</span>(m), <span class="pl-c1">Data</span>(x1), <span class="pl-c1">Data</span>(x2), <span class="pl-c1">Data</span>(x3), <span class="pl-k">...</span>)</pre></div>
<p>This will recursively search inside the model <code>m</code> for anything that resembles
your data and will delete the data that it finds.</p>
<p>If you happen to know exactly where inside a model the data are stored, you
can explicitly tell ModelSanitizer to delete those data. If your model is
stored in <code>m</code>, and you know that the fields <code>m.x1</code>, <code>m.x2</code>, <code>m.x3</code>, etc. contain
data that needs to be removed, you can force ModelSanitizer to delete those
data with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sanitize!(ForceSanitize(m.x1), ForceSanitize(m.x2), ForceSanitize(m.x3), ...)
"><pre><span class="pl-c1">sanitize!</span>(<span class="pl-c1">ForceSanitize</span>(m<span class="pl-k">.</span>x1), <span class="pl-c1">ForceSanitize</span>(m<span class="pl-k">.</span>x2), <span class="pl-c1">ForceSanitize</span>(m<span class="pl-k">.</span>x3), <span class="pl-k">...</span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ModelSanitizer

julia&gt; using Statistics

julia&gt; using Test

julia&gt; mutable struct LinearModel{T}
           X::Matrix{T}
           y::Vector{T}
           beta::Vector{T}
           function LinearModel{T}()::LinearModel{T} where T
               m::LinearModel{T} = new()
               return m
           end
       end

julia&gt; function fit!(m::LinearModel{T}, X::Matrix{T}, y::Vector{T})::LinearModel{T} where T
           m.X = deepcopy(X)
           m.y = deepcopy(y)
           m.beta = beta = (m.X'm.X)\(m.X'm.y)
           return m
       end
fit! (generic function with 1 method)

julia&gt; function predict(m::LinearModel{T}, X::Matrix{T})::Vector{T} where T
           y_hat::Vector{T} = X * m.beta
           return y_hat
       end
predict (generic function with 1 method)

julia&gt; function predict(m::LinearModel{T})::Vector{T} where T
           X::Matrix{T} = m.X
           y_hat::Vector{T} = predict(m, X)
           return y_hat
       end
predict (generic function with 2 methods)

julia&gt; function mse(y::Vector{T}, y_hat::Vector{T})::T where T
           _mse::T = mean((y .- y_hat).^2)
           return _mse
       end
mse (generic function with 1 method)

julia&gt; function mse(m::LinearModel{T}, X::Matrix{T}, y::Vector{T})::T where T
           y_hat::Vector{T} = predict(m, X)
           _mse::T = mse(y, y_hat)
           return _mse
       end
mse (generic function with 2 methods)

julia&gt; function mse(m::LinearModel{T})::T where T
           X::Matrix{T} = m.X
           y::Vector{T} = m.y
           _mse::T = mse(m, X, y)
           return _mse
       end
mse (generic function with 3 methods)

julia&gt; rmse(varargs...) = sqrt(mse(varargs...))
rmse (generic function with 1 method)

julia&gt; function r2(y::Vector{T}, y_hat::Vector{T})::T where T
           y_bar::T = mean(y)
           SS_tot::T = sum((y .- y_bar).^2)
           SS_res::T = sum((y .- y_hat).^2)
           _r2::T = 1 - SS_res/SS_tot
           return _r2
       end
r2 (generic function with 1 method)

julia&gt; function r2(m::LinearModel{T}, X::Matrix{T}, y::Vector{T})::T where T
           y_hat::Vector{T} = predict(m, X)
           _r2::T = r2(y, y_hat)
           return _r2
       end
r2 (generic function with 2 methods)

julia&gt; function r2(m::LinearModel{T})::T where T
           X::Matrix{T} = m.X
           y::Vector{T} = m.y
           _r2::T = r2(m, X, y)
           return _r2
       end
r2 (generic function with 3 methods)

julia&gt; X = randn(Float64, 5_000, 14)
5000×14 Array{Float64,2}:
  0.0956436    0.481324   -0.796437  …  -2.26483     1.57243    -1.65105
 -0.306527    -0.880146   -0.764714     -0.182449   -0.0767462  -0.939232
 -0.223116    -0.408068    0.728855      0.220045    0.785533    0.49013
 -0.336363     1.46187    -1.17633      -0.955872    0.699277    0.587961
  0.628275     0.208697   -0.522714      0.116233    0.47314     0.435968
 -0.12303     -0.964061    0.919518  …  -0.0230613  -1.12379    -0.439892
  1.06664      0.96542    -0.250164     -0.776266    1.70851    -1.08608
  0.957151     0.850486    1.31718       0.497219    1.01069    -0.558217
 -0.206168    -0.608305   -0.864631      0.969031    0.209796    1.28718
 -0.658039     1.20687     1.33288       1.54847     0.546286   -1.00404
 -0.598782    -0.193289    0.673134  …  -1.59742     0.410881   -1.61342
  0.31442      0.0199012   0.50533       1.0889     -0.0713841  -1.29933
  0.236585    -1.09804     0.945631     -0.729247   -1.10004    -0.339332
  0.122913     0.619345   -2.90947       1.09613    -0.662693   -1.03469
  1.52615      0.942471    0.262139      0.223064    0.665103    1.4081
 -0.474543     1.9466     -0.408505  …   1.01626    -0.297397   -0.0953909
  0.73664     -0.0796424  -1.84864       1.15935     0.0164378   1.32191
  0.24588      0.271068   -0.238212      0.596475    1.52617    -0.747777
  ⋮                                  ⋱
 -1.07141      0.194049   -0.350011     -0.666195    0.481406   -0.451329
 -0.00993413   0.33006    -0.985443     -0.0395822   2.36983    -0.793007
  0.610014    -0.509744   -1.06447   …   1.19769     1.129       0.397217
  0.785654    -0.361031    0.314127      0.192215    0.789262    0.725731
  0.258588    -2.06379     0.511611      0.0963516  -1.01919    -0.540021
  0.48671     -0.918205    0.264124      0.989929    2.45245    -1.39545
 -1.27085     -0.0617834   2.59491       0.291602    1.28642     0.236496
  1.4044      -1.24472    -0.205029  …   1.99366    -1.58951     0.963728
 -1.07691      0.44178    -0.602841      0.584759   -0.887116    1.36514
  1.13586      0.954756    0.44016      -2.21191    -1.14086    -0.585916
 -0.763031    -1.13348    -1.46696      -1.4121     -0.977694   -0.618883
  0.875367    -1.30925     0.183117      0.224709    0.0752964  -0.92173
  0.659502     0.71971    -1.05538   …  -0.912277   -0.736332    1.01404
 -0.809941     2.02362     1.29668       0.113623   -0.858281    0.0863472
 -1.6409       0.310551   -0.235102     -1.11232    -0.170224    0.404804
 -0.367908    -1.9062      0.245953     -0.751821   -0.794633    0.00894607
  0.380897     2.30871    -0.669909      0.282513   -0.114725   -0.253537

julia&gt; y = X * randn(Float64, 14) + randn(5_000)
5000-element Array{Float64,1}:
 -4.418867382994752
  1.0721553534178543
  2.210545604666476
 -2.5053994409702094
  2.24399399066432
  0.5993702994926247
  2.2040361967638322
 -2.4902628750358193
  4.184644001244288
  1.7688752332135804
 -4.831550352023476
 -1.068149084362266
 -0.746260929030723
  0.032933800577055417
  2.878202216460962
  2.773804353610833
  1.0288912118472482
  3.7799578982964963
  ⋮
  3.1797791441997822
  5.830717537973503
 -0.8191545280972992
  4.649281267724443
  0.9470989605451162
  5.733118456044454
  3.057352206232011
  4.791267454465988
 -4.604222639675081
 -5.755448165821573
 -0.9804279159155482
  2.2904285226467276
  2.809999802793834
  0.7773010780323945
 -2.5205742651574
  3.8866539005621092
 -4.085889556008112

julia&gt; m = LinearModel{Float64}()
LinearModel{Float64}(#undef, #undef, #undef)

julia&gt; testing_rows = 1:2:5_000
1:2:4999

julia&gt; training_rows = setdiff(1:5_000, testing_rows)
2500-element Array{Int64,1}:
    2
    4
    6
    8
   10
   12
   14
   16
   18
   20
   22
   24
   26
   28
   30
   32
   34
   36
    ⋮
 4968
 4970
 4972
 4974
 4976
 4978
 4980
 4982
 4984
 4986
 4988
 4990
 4992
 4994
 4996
 4998
 5000

julia&gt; fit!(m, X[training_rows, :], y[training_rows])
LinearModel{Float64}([-0.306527 -0.880146 … -0.0767462 -0.939232; -0.336363 1.46187 … 0.699277 0.587961; … ; -1.6409 0.310551 … -0.170224 0.404804; 0.380897 2.30871 … -0.114725 -0.253537], [1.07216, -2.5054, 0.59937, -2.49026, 1.76888, -1.06815, 0.0329338, 2.7738, 3.77996, -4.06727  …  2.81088, 3.17978, -0.819155, 0.947099, 3.05735, -4.60422, -0.980428, 2.81, -2.52057, -4.08589], [-0.532213, -1.16489, -0.414974, -0.562536, -0.440432, 0.732505, -1.06754, 0.399485, -0.67281, -1.44599, 0.835625, 0.426459, 1.20088, 0.754435])

julia&gt; @test m.X == X[training_rows, :]
Test Passed

julia&gt; @test m.y == y[training_rows]
Test Passed

julia&gt; @test all(m.X .== X[training_rows, :])
Test Passed

julia&gt; @test all(m.y .== y[training_rows])
Test Passed

julia&gt; @test !all(m.X .== 0)
Test Passed

julia&gt; @test !all(m.y .== 0)
Test Passed

julia&gt; # before sanitization, we can make predictions
       predict(m, X[testing_rows, :])
2500-element Array{Float64,1}:
 -4.513253714187381
  2.5689035333536605
  0.9939782906365846
  1.2513894159362184
  3.2007086601687353
 -5.387968774216589
 -0.1767892797746935
  3.4408813711668165
  0.4625821018811823
  1.649129884116436
 -0.8620887900500149
  0.6504970487658756
  4.287913533796443
 -2.5014166099065136
  1.1666979326633855
  0.2723098985354143
  3.2783930370766634
  2.250636815003683
  ⋮
  1.1999638265752477
  3.8377489399901084
  4.2805489451765935
 -0.5849048693472063
 -0.6574890049656816
  0.2606368302418087
 -4.197310605534758
 -3.5805273324146336
 -0.5244747588662737
  5.274904154193373
  2.7742388165636953
  5.883741172337488
  2.118699747786167
 -4.209943069147431
  2.262361580682631
 -0.5044151513387216
  4.443422779093501

julia&gt; predict(m, X[training_rows, :])
2500-element Array{Float64,1}:
  2.943212508610099
 -0.8226863248850258
  1.031068845178503
 -3.3178919274576053
  0.587046578244962
 -0.032251634503744686
  1.9123819046207888
  3.555603804394087
  2.1728937544760307
 -1.9319447549669504
 -0.7592148524301295
 -7.250437603426189
  4.982277986708986
 -1.8660967909674548
  0.29423182806971415
  0.593840341165224
 -0.26314562641917977
  1.4340414682799685
  ⋮
  1.6038174714835796
  1.3091787016871341
  4.936123830680592
  1.9812183495287048
 -0.848632475032059
  3.1553721781769157
 -5.412240178264108
  1.406559298117795
  3.6433312336276646
  0.3408165307792135
  0.2882242203753349
  1.8120206189755343
 -3.299798877655878
 -0.8793971451160698
  2.3158119962568886
 -2.4598360012327265
 -4.810128269819875

julia&gt; @show mse(m, X[training_rows, :], y[training_rows])
mse(m, X[training_rows, :], y[training_rows]) = 0.9856973993855034
0.9856973993855034

julia&gt; @show rmse(m, X[training_rows, :], y[training_rows])
rmse(m, X[training_rows, :], y[training_rows]) = 0.9928229446308658
0.9928229446308658

julia&gt; @show r2(m, X[training_rows, :], y[training_rows])
r2(m, X[training_rows, :], y[training_rows]) = 0.9044357103305194
0.9044357103305194

julia&gt; @show mse(m, X[testing_rows, :], y[testing_rows])
mse(m, X[testing_rows, :], y[testing_rows]) = 0.9480778102674918
0.9480778102674918

julia&gt; @show rmse(m, X[testing_rows, :], y[testing_rows])
rmse(m, X[testing_rows, :], y[testing_rows]) = 0.9736928726592856
0.9736928726592856

julia&gt; @show r2(m, X[testing_rows, :], y[testing_rows])
r2(m, X[testing_rows, :], y[testing_rows]) = 0.9088387716983182
0.9088387716983182

julia&gt; sanitize!(Model(m), Data(X), Data(y)) # sanitize the model with ModelSanitizer
Model{LinearModel{Float64}}(LinearModel{Float64}([0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.532213, -1.16489, -0.414974, -0.562536, -0.440432, 0.732505, -1.06754, 0.399485, -0.67281, -1.44599, 0.835625, 0.426459, 1.20088, 0.754435]))

julia&gt; @test m.X != X[training_rows, :]
Test Passed

julia&gt; @test m.y != y[training_rows]
Test Passed

julia&gt; @test !all(m.X .== X[training_rows, :])
Test Passed

julia&gt; @test !all(m.y .== y[training_rows])
Test Passed

julia&gt; @test all(m.X .== 0)
Test Passed

julia&gt; @test all(m.y .== 0)
Test Passed

julia&gt; # after sanitization, we are still able to make predictions
       predict(m, X[testing_rows, :])
2500-element Array{Float64,1}:
 -4.513253714187381
  2.5689035333536605
  0.9939782906365846
  1.2513894159362184
  3.2007086601687353
 -5.387968774216589
 -0.1767892797746935
  3.4408813711668165
  0.4625821018811823
  1.649129884116436
 -0.8620887900500149
  0.6504970487658756
  4.287913533796443
 -2.5014166099065136
  1.1666979326633855
  0.2723098985354143
  3.2783930370766634
  2.250636815003683
  ⋮
  1.1999638265752477
  3.8377489399901084
  4.2805489451765935
 -0.5849048693472063
 -0.6574890049656816
  0.2606368302418087
 -4.197310605534758
 -3.5805273324146336
 -0.5244747588662737
  5.274904154193373
  2.7742388165636953
  5.883741172337488
  2.118699747786167
 -4.209943069147431
  2.262361580682631
 -0.5044151513387216
  4.443422779093501

julia&gt; predict(m, X[training_rows, :])
2500-element Array{Float64,1}:
  2.943212508610099
 -0.8226863248850258
  1.031068845178503
 -3.3178919274576053
  0.587046578244962
 -0.032251634503744686
  1.9123819046207888
  3.555603804394087
  2.1728937544760307
 -1.9319447549669504
 -0.7592148524301295
 -7.250437603426189
  4.982277986708986
 -1.8660967909674548
  0.29423182806971415
  0.593840341165224
 -0.26314562641917977
  1.4340414682799685
  ⋮
  1.6038174714835796
  1.3091787016871341
  4.936123830680592
  1.9812183495287048
 -0.848632475032059
  3.1553721781769157
 -5.412240178264108
  1.406559298117795
  3.6433312336276646
  0.3408165307792135
  0.2882242203753349
  1.8120206189755343
 -3.299798877655878
 -0.8793971451160698
  2.3158119962568886
 -2.4598360012327265
 -4.810128269819875

julia&gt; @show mse(m, X[training_rows, :], y[training_rows])
mse(m, X[training_rows, :], y[training_rows]) = 0.9856973993855034
0.9856973993855034

julia&gt; @show rmse(m, X[training_rows, :], y[training_rows])
rmse(m, X[training_rows, :], y[training_rows]) = 0.9928229446308658
0.9928229446308658

julia&gt; @show r2(m, X[training_rows, :], y[training_rows])
r2(m, X[training_rows, :], y[training_rows]) = 0.9044357103305194
0.9044357103305194

julia&gt; @show mse(m, X[testing_rows, :], y[testing_rows])
mse(m, X[testing_rows, :], y[testing_rows]) = 0.9480778102674918
0.9480778102674918

julia&gt; @show rmse(m, X[testing_rows, :], y[testing_rows])
rmse(m, X[testing_rows, :], y[testing_rows]) = 0.9736928726592856
0.9736928726592856

julia&gt; @show r2(m, X[testing_rows, :], y[testing_rows])
r2(m, X[testing_rows, :], y[testing_rows]) = 0.9088387716983182
0.9088387716983182

julia&gt; # if you know exactly where the data are stored inside the model, you can
       # directly delete them with ForceSanitize:
       sanitize!(ForceSanitize(m.X), ForceSanitize(m.y))
(ForceSanitize{Array{Float64,2}}([0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0; … ; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0]), ForceSanitize{Array{Float64,1}}([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]))

julia&gt; # we can still make predictions even after using ForceSanitize
       predict(m, X[testing_rows, :])
2500-element Array{Float64,1}:
 -4.513253714187381
  2.5689035333536605
  0.9939782906365846
  1.2513894159362184
  3.2007086601687353
 -5.387968774216589
 -0.1767892797746935
  3.4408813711668165
  0.4625821018811823
  1.649129884116436
 -0.8620887900500149
  0.6504970487658756
  4.287913533796443
 -2.5014166099065136
  1.1666979326633855
  0.2723098985354143
  3.2783930370766634
  2.250636815003683
  ⋮
  1.1999638265752477
  3.8377489399901084
  4.2805489451765935
 -0.5849048693472063
 -0.6574890049656816
  0.2606368302418087
 -4.197310605534758
 -3.5805273324146336
 -0.5244747588662737
  5.274904154193373
  2.7742388165636953
  5.883741172337488
  2.118699747786167
 -4.209943069147431
  2.262361580682631
 -0.5044151513387216
  4.443422779093501

julia&gt; predict(m, X[training_rows, :])
2500-element Array{Float64,1}:
  2.943212508610099
 -0.8226863248850258
  1.031068845178503
 -3.3178919274576053
  0.587046578244962
 -0.032251634503744686
  1.9123819046207888
  3.555603804394087
  2.1728937544760307
 -1.9319447549669504
 -0.7592148524301295
 -7.250437603426189
  4.982277986708986
 -1.8660967909674548
  0.29423182806971415
  0.593840341165224
 -0.26314562641917977
  1.4340414682799685
  ⋮
  1.6038174714835796
  1.3091787016871341
  4.936123830680592
  1.9812183495287048
 -0.848632475032059
  3.1553721781769157
 -5.412240178264108
  1.406559298117795
  3.6433312336276646
  0.3408165307792135
  0.2882242203753349
  1.8120206189755343
 -3.299798877655878
 -0.8793971451160698
  2.3158119962568886
 -2.4598360012327265
 -4.810128269819875

julia&gt; @show mse(m, X[training_rows, :], y[training_rows])
mse(m, X[training_rows, :], y[training_rows]) = 0.9856973993855034
0.9856973993855034

julia&gt; @show rmse(m, X[training_rows, :], y[training_rows])
rmse(m, X[training_rows, :], y[training_rows]) = 0.9928229446308658
0.9928229446308658

julia&gt; @show r2(m, X[training_rows, :], y[training_rows])
r2(m, X[training_rows, :], y[training_rows]) = 0.9044357103305194
0.9044357103305194

julia&gt; @show mse(m, X[testing_rows, :], y[testing_rows])
mse(m, X[testing_rows, :], y[testing_rows]) = 0.9480778102674918
0.9480778102674918

julia&gt; @show rmse(m, X[testing_rows, :], y[testing_rows])
rmse(m, X[testing_rows, :], y[testing_rows]) = 0.9736928726592856
0.9736928726592856

julia&gt; @show r2(m, X[testing_rows, :], y[testing_rows])
r2(m, X[testing_rows, :], y[testing_rows]) = 0.9088387716983182
0.9088387716983182
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ModelSanitizer

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Statistics

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Test

julia<span class="pl-k">&gt;</span> <span class="pl-k">mutable struct</span> LinearModel{T}
           X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>
           y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>
           beta<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>
           <span class="pl-k">function</span> <span class="pl-en">LinearModel</span><span class="pl-c1">{T}</span>()<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span> <span class="pl-k">where</span> T
               m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span> <span class="pl-k">=</span> <span class="pl-c1">new</span>()
               <span class="pl-k">return</span> m
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">fit!</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>, X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span> <span class="pl-k">where</span> T
           m<span class="pl-k">.</span>X <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(X)
           m<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(y)
           m<span class="pl-k">.</span>beta <span class="pl-k">=</span> beta <span class="pl-k">=</span> (m<span class="pl-k">.</span>X<span class="pl-k">'</span>m<span class="pl-k">.</span>X)<span class="pl-k">\</span>(m<span class="pl-k">.</span>X<span class="pl-k">'</span>m<span class="pl-k">.</span>y)
           <span class="pl-k">return</span> m
       <span class="pl-k">end</span>
fit! (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">predict</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>, X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>)<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">where</span> T
           y_hat<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">=</span> X <span class="pl-k">*</span> m<span class="pl-k">.</span>beta
           <span class="pl-k">return</span> y_hat
       <span class="pl-k">end</span>
predict (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">predict</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>)<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">where</span> T
           X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span> <span class="pl-k">=</span> m<span class="pl-k">.</span>X
           y_hat<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">=</span> <span class="pl-c1">predict</span>(m, X)
           <span class="pl-k">return</span> y_hat
       <span class="pl-k">end</span>
predict (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mse</span>(y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>, y_hat<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> T
           _mse<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">mean</span>((y <span class="pl-k">.-</span> y_hat)<span class="pl-k">.^</span><span class="pl-c1">2</span>)
           <span class="pl-k">return</span> _mse
       <span class="pl-k">end</span>
mse (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mse</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>, X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> T
           y_hat<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">=</span> <span class="pl-c1">predict</span>(m, X)
           _mse<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">mse</span>(y, y_hat)
           <span class="pl-k">return</span> _mse
       <span class="pl-k">end</span>
mse (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mse</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> T
           X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span> <span class="pl-k">=</span> m<span class="pl-k">.</span>X
           y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">=</span> m<span class="pl-k">.</span>y
           _mse<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">mse</span>(m, X, y)
           <span class="pl-k">return</span> _mse
       <span class="pl-k">end</span>
mse (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-en">rmse</span>(varargs<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">mse</span>(varargs<span class="pl-k">...</span>))
rmse (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">r2</span>(y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>, y_hat<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> T
           y_bar<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">mean</span>(y)
           SS_tot<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">sum</span>((y <span class="pl-k">.-</span> y_bar)<span class="pl-k">.^</span><span class="pl-c1">2</span>)
           SS_res<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">sum</span>((y <span class="pl-k">.-</span> y_hat)<span class="pl-k">.^</span><span class="pl-c1">2</span>)
           _r2<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">-</span> SS_res<span class="pl-k">/</span>SS_tot
           <span class="pl-k">return</span> _r2
       <span class="pl-k">end</span>
r2 (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">r2</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>, X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> T
           y_hat<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">=</span> <span class="pl-c1">predict</span>(m, X)
           _r2<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">r2</span>(y, y_hat)
           <span class="pl-k">return</span> _r2
       <span class="pl-k">end</span>
r2 (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">r2</span>(m<span class="pl-k">::</span><span class="pl-c1">LinearModel{T}</span>)<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">where</span> T
           X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span> <span class="pl-k">=</span> m<span class="pl-k">.</span>X
           y<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span> <span class="pl-k">=</span> m<span class="pl-k">.</span>y
           _r2<span class="pl-k">::</span><span class="pl-c1">T</span> <span class="pl-k">=</span> <span class="pl-c1">r2</span>(m, X, y)
           <span class="pl-k">return</span> _r2
       <span class="pl-k">end</span>
r2 (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">randn</span>(Float64, <span class="pl-c1">5_000</span>, <span class="pl-c1">14</span>)
<span class="pl-c1">5000</span><span class="pl-k">×</span><span class="pl-c1">14</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.0956436</span>    <span class="pl-c1">0.481324</span>   <span class="pl-k">-</span><span class="pl-c1">0.796437</span>  …  <span class="pl-k">-</span><span class="pl-c1">2.26483</span>     <span class="pl-c1">1.57243</span>    <span class="pl-k">-</span><span class="pl-c1">1.65105</span>
 <span class="pl-k">-</span><span class="pl-c1">0.306527</span>    <span class="pl-k">-</span><span class="pl-c1">0.880146</span>   <span class="pl-k">-</span><span class="pl-c1">0.764714</span>     <span class="pl-k">-</span><span class="pl-c1">0.182449</span>   <span class="pl-k">-</span><span class="pl-c1">0.0767462</span>  <span class="pl-k">-</span><span class="pl-c1">0.939232</span>
 <span class="pl-k">-</span><span class="pl-c1">0.223116</span>    <span class="pl-k">-</span><span class="pl-c1">0.408068</span>    <span class="pl-c1">0.728855</span>      <span class="pl-c1">0.220045</span>    <span class="pl-c1">0.785533</span>    <span class="pl-c1">0.49013</span>
 <span class="pl-k">-</span><span class="pl-c1">0.336363</span>     <span class="pl-c1">1.46187</span>    <span class="pl-k">-</span><span class="pl-c1">1.17633</span>      <span class="pl-k">-</span><span class="pl-c1">0.955872</span>    <span class="pl-c1">0.699277</span>    <span class="pl-c1">0.587961</span>
  <span class="pl-c1">0.628275</span>     <span class="pl-c1">0.208697</span>   <span class="pl-k">-</span><span class="pl-c1">0.522714</span>      <span class="pl-c1">0.116233</span>    <span class="pl-c1">0.47314</span>     <span class="pl-c1">0.435968</span>
 <span class="pl-k">-</span><span class="pl-c1">0.12303</span>     <span class="pl-k">-</span><span class="pl-c1">0.964061</span>    <span class="pl-c1">0.919518</span>  …  <span class="pl-k">-</span><span class="pl-c1">0.0230613</span>  <span class="pl-k">-</span><span class="pl-c1">1.12379</span>    <span class="pl-k">-</span><span class="pl-c1">0.439892</span>
  <span class="pl-c1">1.06664</span>      <span class="pl-c1">0.96542</span>    <span class="pl-k">-</span><span class="pl-c1">0.250164</span>     <span class="pl-k">-</span><span class="pl-c1">0.776266</span>    <span class="pl-c1">1.70851</span>    <span class="pl-k">-</span><span class="pl-c1">1.08608</span>
  <span class="pl-c1">0.957151</span>     <span class="pl-c1">0.850486</span>    <span class="pl-c1">1.31718</span>       <span class="pl-c1">0.497219</span>    <span class="pl-c1">1.01069</span>    <span class="pl-k">-</span><span class="pl-c1">0.558217</span>
 <span class="pl-k">-</span><span class="pl-c1">0.206168</span>    <span class="pl-k">-</span><span class="pl-c1">0.608305</span>   <span class="pl-k">-</span><span class="pl-c1">0.864631</span>      <span class="pl-c1">0.969031</span>    <span class="pl-c1">0.209796</span>    <span class="pl-c1">1.28718</span>
 <span class="pl-k">-</span><span class="pl-c1">0.658039</span>     <span class="pl-c1">1.20687</span>     <span class="pl-c1">1.33288</span>       <span class="pl-c1">1.54847</span>     <span class="pl-c1">0.546286</span>   <span class="pl-k">-</span><span class="pl-c1">1.00404</span>
 <span class="pl-k">-</span><span class="pl-c1">0.598782</span>    <span class="pl-k">-</span><span class="pl-c1">0.193289</span>    <span class="pl-c1">0.673134</span>  …  <span class="pl-k">-</span><span class="pl-c1">1.59742</span>     <span class="pl-c1">0.410881</span>   <span class="pl-k">-</span><span class="pl-c1">1.61342</span>
  <span class="pl-c1">0.31442</span>      <span class="pl-c1">0.0199012</span>   <span class="pl-c1">0.50533</span>       <span class="pl-c1">1.0889</span>     <span class="pl-k">-</span><span class="pl-c1">0.0713841</span>  <span class="pl-k">-</span><span class="pl-c1">1.29933</span>
  <span class="pl-c1">0.236585</span>    <span class="pl-k">-</span><span class="pl-c1">1.09804</span>     <span class="pl-c1">0.945631</span>     <span class="pl-k">-</span><span class="pl-c1">0.729247</span>   <span class="pl-k">-</span><span class="pl-c1">1.10004</span>    <span class="pl-k">-</span><span class="pl-c1">0.339332</span>
  <span class="pl-c1">0.122913</span>     <span class="pl-c1">0.619345</span>   <span class="pl-k">-</span><span class="pl-c1">2.90947</span>       <span class="pl-c1">1.09613</span>    <span class="pl-k">-</span><span class="pl-c1">0.662693</span>   <span class="pl-k">-</span><span class="pl-c1">1.03469</span>
  <span class="pl-c1">1.52615</span>      <span class="pl-c1">0.942471</span>    <span class="pl-c1">0.262139</span>      <span class="pl-c1">0.223064</span>    <span class="pl-c1">0.665103</span>    <span class="pl-c1">1.4081</span>
 <span class="pl-k">-</span><span class="pl-c1">0.474543</span>     <span class="pl-c1">1.9466</span>     <span class="pl-k">-</span><span class="pl-c1">0.408505</span>  …   <span class="pl-c1">1.01626</span>    <span class="pl-k">-</span><span class="pl-c1">0.297397</span>   <span class="pl-k">-</span><span class="pl-c1">0.0953909</span>
  <span class="pl-c1">0.73664</span>     <span class="pl-k">-</span><span class="pl-c1">0.0796424</span>  <span class="pl-k">-</span><span class="pl-c1">1.84864</span>       <span class="pl-c1">1.15935</span>     <span class="pl-c1">0.0164378</span>   <span class="pl-c1">1.32191</span>
  <span class="pl-c1">0.24588</span>      <span class="pl-c1">0.271068</span>   <span class="pl-k">-</span><span class="pl-c1">0.238212</span>      <span class="pl-c1">0.596475</span>    <span class="pl-c1">1.52617</span>    <span class="pl-k">-</span><span class="pl-c1">0.747777</span>
  ⋮                                  ⋱
 <span class="pl-k">-</span><span class="pl-c1">1.07141</span>      <span class="pl-c1">0.194049</span>   <span class="pl-k">-</span><span class="pl-c1">0.350011</span>     <span class="pl-k">-</span><span class="pl-c1">0.666195</span>    <span class="pl-c1">0.481406</span>   <span class="pl-k">-</span><span class="pl-c1">0.451329</span>
 <span class="pl-k">-</span><span class="pl-c1">0.00993413</span>   <span class="pl-c1">0.33006</span>    <span class="pl-k">-</span><span class="pl-c1">0.985443</span>     <span class="pl-k">-</span><span class="pl-c1">0.0395822</span>   <span class="pl-c1">2.36983</span>    <span class="pl-k">-</span><span class="pl-c1">0.793007</span>
  <span class="pl-c1">0.610014</span>    <span class="pl-k">-</span><span class="pl-c1">0.509744</span>   <span class="pl-k">-</span><span class="pl-c1">1.06447</span>   …   <span class="pl-c1">1.19769</span>     <span class="pl-c1">1.129</span>       <span class="pl-c1">0.397217</span>
  <span class="pl-c1">0.785654</span>    <span class="pl-k">-</span><span class="pl-c1">0.361031</span>    <span class="pl-c1">0.314127</span>      <span class="pl-c1">0.192215</span>    <span class="pl-c1">0.789262</span>    <span class="pl-c1">0.725731</span>
  <span class="pl-c1">0.258588</span>    <span class="pl-k">-</span><span class="pl-c1">2.06379</span>     <span class="pl-c1">0.511611</span>      <span class="pl-c1">0.0963516</span>  <span class="pl-k">-</span><span class="pl-c1">1.01919</span>    <span class="pl-k">-</span><span class="pl-c1">0.540021</span>
  <span class="pl-c1">0.48671</span>     <span class="pl-k">-</span><span class="pl-c1">0.918205</span>    <span class="pl-c1">0.264124</span>      <span class="pl-c1">0.989929</span>    <span class="pl-c1">2.45245</span>    <span class="pl-k">-</span><span class="pl-c1">1.39545</span>
 <span class="pl-k">-</span><span class="pl-c1">1.27085</span>     <span class="pl-k">-</span><span class="pl-c1">0.0617834</span>   <span class="pl-c1">2.59491</span>       <span class="pl-c1">0.291602</span>    <span class="pl-c1">1.28642</span>     <span class="pl-c1">0.236496</span>
  <span class="pl-c1">1.4044</span>      <span class="pl-k">-</span><span class="pl-c1">1.24472</span>    <span class="pl-k">-</span><span class="pl-c1">0.205029</span>  …   <span class="pl-c1">1.99366</span>    <span class="pl-k">-</span><span class="pl-c1">1.58951</span>     <span class="pl-c1">0.963728</span>
 <span class="pl-k">-</span><span class="pl-c1">1.07691</span>      <span class="pl-c1">0.44178</span>    <span class="pl-k">-</span><span class="pl-c1">0.602841</span>      <span class="pl-c1">0.584759</span>   <span class="pl-k">-</span><span class="pl-c1">0.887116</span>    <span class="pl-c1">1.36514</span>
  <span class="pl-c1">1.13586</span>      <span class="pl-c1">0.954756</span>    <span class="pl-c1">0.44016</span>      <span class="pl-k">-</span><span class="pl-c1">2.21191</span>    <span class="pl-k">-</span><span class="pl-c1">1.14086</span>    <span class="pl-k">-</span><span class="pl-c1">0.585916</span>
 <span class="pl-k">-</span><span class="pl-c1">0.763031</span>    <span class="pl-k">-</span><span class="pl-c1">1.13348</span>    <span class="pl-k">-</span><span class="pl-c1">1.46696</span>      <span class="pl-k">-</span><span class="pl-c1">1.4121</span>     <span class="pl-k">-</span><span class="pl-c1">0.977694</span>   <span class="pl-k">-</span><span class="pl-c1">0.618883</span>
  <span class="pl-c1">0.875367</span>    <span class="pl-k">-</span><span class="pl-c1">1.30925</span>     <span class="pl-c1">0.183117</span>      <span class="pl-c1">0.224709</span>    <span class="pl-c1">0.0752964</span>  <span class="pl-k">-</span><span class="pl-c1">0.92173</span>
  <span class="pl-c1">0.659502</span>     <span class="pl-c1">0.71971</span>    <span class="pl-k">-</span><span class="pl-c1">1.05538</span>   …  <span class="pl-k">-</span><span class="pl-c1">0.912277</span>   <span class="pl-k">-</span><span class="pl-c1">0.736332</span>    <span class="pl-c1">1.01404</span>
 <span class="pl-k">-</span><span class="pl-c1">0.809941</span>     <span class="pl-c1">2.02362</span>     <span class="pl-c1">1.29668</span>       <span class="pl-c1">0.113623</span>   <span class="pl-k">-</span><span class="pl-c1">0.858281</span>    <span class="pl-c1">0.0863472</span>
 <span class="pl-k">-</span><span class="pl-c1">1.6409</span>       <span class="pl-c1">0.310551</span>   <span class="pl-k">-</span><span class="pl-c1">0.235102</span>     <span class="pl-k">-</span><span class="pl-c1">1.11232</span>    <span class="pl-k">-</span><span class="pl-c1">0.170224</span>    <span class="pl-c1">0.404804</span>
 <span class="pl-k">-</span><span class="pl-c1">0.367908</span>    <span class="pl-k">-</span><span class="pl-c1">1.9062</span>      <span class="pl-c1">0.245953</span>     <span class="pl-k">-</span><span class="pl-c1">0.751821</span>   <span class="pl-k">-</span><span class="pl-c1">0.794633</span>    <span class="pl-c1">0.00894607</span>
  <span class="pl-c1">0.380897</span>     <span class="pl-c1">2.30871</span>    <span class="pl-k">-</span><span class="pl-c1">0.669909</span>      <span class="pl-c1">0.282513</span>   <span class="pl-k">-</span><span class="pl-c1">0.114725</span>   <span class="pl-k">-</span><span class="pl-c1">0.253537</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> X <span class="pl-k">*</span> <span class="pl-c1">randn</span>(Float64, <span class="pl-c1">14</span>) <span class="pl-k">+</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5_000</span>)
<span class="pl-c1">5000</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">4.418867382994752</span>
  <span class="pl-c1">1.0721553534178543</span>
  <span class="pl-c1">2.210545604666476</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5053994409702094</span>
  <span class="pl-c1">2.24399399066432</span>
  <span class="pl-c1">0.5993702994926247</span>
  <span class="pl-c1">2.2040361967638322</span>
 <span class="pl-k">-</span><span class="pl-c1">2.4902628750358193</span>
  <span class="pl-c1">4.184644001244288</span>
  <span class="pl-c1">1.7688752332135804</span>
 <span class="pl-k">-</span><span class="pl-c1">4.831550352023476</span>
 <span class="pl-k">-</span><span class="pl-c1">1.068149084362266</span>
 <span class="pl-k">-</span><span class="pl-c1">0.746260929030723</span>
  <span class="pl-c1">0.032933800577055417</span>
  <span class="pl-c1">2.878202216460962</span>
  <span class="pl-c1">2.773804353610833</span>
  <span class="pl-c1">1.0288912118472482</span>
  <span class="pl-c1">3.7799578982964963</span>
  ⋮
  <span class="pl-c1">3.1797791441997822</span>
  <span class="pl-c1">5.830717537973503</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8191545280972992</span>
  <span class="pl-c1">4.649281267724443</span>
  <span class="pl-c1">0.9470989605451162</span>
  <span class="pl-c1">5.733118456044454</span>
  <span class="pl-c1">3.057352206232011</span>
  <span class="pl-c1">4.791267454465988</span>
 <span class="pl-k">-</span><span class="pl-c1">4.604222639675081</span>
 <span class="pl-k">-</span><span class="pl-c1">5.755448165821573</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9804279159155482</span>
  <span class="pl-c1">2.2904285226467276</span>
  <span class="pl-c1">2.809999802793834</span>
  <span class="pl-c1">0.7773010780323945</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5205742651574</span>
  <span class="pl-c1">3.8866539005621092</span>
 <span class="pl-k">-</span><span class="pl-c1">4.085889556008112</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">LinearModel</span><span class="pl-c1">{Float64}</span>()
<span class="pl-c1">LinearModel</span><span class="pl-c1">{Float64}</span>(<span class="pl-c"><span class="pl-c">#</span>undef, #undef, #undef)</span>

julia<span class="pl-k">&gt;</span> testing_rows <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5_000</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">4999</span>

julia<span class="pl-k">&gt;</span> training_rows <span class="pl-k">=</span> <span class="pl-c1">setdiff</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5_000</span>, testing_rows)
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-c1">2</span>
    <span class="pl-c1">4</span>
    <span class="pl-c1">6</span>
    <span class="pl-c1">8</span>
   <span class="pl-c1">10</span>
   <span class="pl-c1">12</span>
   <span class="pl-c1">14</span>
   <span class="pl-c1">16</span>
   <span class="pl-c1">18</span>
   <span class="pl-c1">20</span>
   <span class="pl-c1">22</span>
   <span class="pl-c1">24</span>
   <span class="pl-c1">26</span>
   <span class="pl-c1">28</span>
   <span class="pl-c1">30</span>
   <span class="pl-c1">32</span>
   <span class="pl-c1">34</span>
   <span class="pl-c1">36</span>
    ⋮
 <span class="pl-c1">4968</span>
 <span class="pl-c1">4970</span>
 <span class="pl-c1">4972</span>
 <span class="pl-c1">4974</span>
 <span class="pl-c1">4976</span>
 <span class="pl-c1">4978</span>
 <span class="pl-c1">4980</span>
 <span class="pl-c1">4982</span>
 <span class="pl-c1">4984</span>
 <span class="pl-c1">4986</span>
 <span class="pl-c1">4988</span>
 <span class="pl-c1">4990</span>
 <span class="pl-c1">4992</span>
 <span class="pl-c1">4994</span>
 <span class="pl-c1">4996</span>
 <span class="pl-c1">4998</span>
 <span class="pl-c1">5000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fit!</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-c1">LinearModel</span><span class="pl-c1">{Float64}</span>([<span class="pl-k">-</span><span class="pl-c1">0.306527</span> <span class="pl-k">-</span><span class="pl-c1">0.880146</span> … <span class="pl-k">-</span><span class="pl-c1">0.0767462</span> <span class="pl-k">-</span><span class="pl-c1">0.939232</span>; <span class="pl-k">-</span><span class="pl-c1">0.336363</span> <span class="pl-c1">1.46187</span> … <span class="pl-c1">0.699277</span> <span class="pl-c1">0.587961</span>; … ; <span class="pl-k">-</span><span class="pl-c1">1.6409</span> <span class="pl-c1">0.310551</span> … <span class="pl-k">-</span><span class="pl-c1">0.170224</span> <span class="pl-c1">0.404804</span>; <span class="pl-c1">0.380897</span> <span class="pl-c1">2.30871</span> … <span class="pl-k">-</span><span class="pl-c1">0.114725</span> <span class="pl-k">-</span><span class="pl-c1">0.253537</span>], [<span class="pl-c1">1.07216</span>, <span class="pl-k">-</span><span class="pl-c1">2.5054</span>, <span class="pl-c1">0.59937</span>, <span class="pl-k">-</span><span class="pl-c1">2.49026</span>, <span class="pl-c1">1.76888</span>, <span class="pl-k">-</span><span class="pl-c1">1.06815</span>, <span class="pl-c1">0.0329338</span>, <span class="pl-c1">2.7738</span>, <span class="pl-c1">3.77996</span>, <span class="pl-k">-</span><span class="pl-c1">4.06727</span>  …  <span class="pl-c1">2.81088</span>, <span class="pl-c1">3.17978</span>, <span class="pl-k">-</span><span class="pl-c1">0.819155</span>, <span class="pl-c1">0.947099</span>, <span class="pl-c1">3.05735</span>, <span class="pl-k">-</span><span class="pl-c1">4.60422</span>, <span class="pl-k">-</span><span class="pl-c1">0.980428</span>, <span class="pl-c1">2.81</span>, <span class="pl-k">-</span><span class="pl-c1">2.52057</span>, <span class="pl-k">-</span><span class="pl-c1">4.08589</span>], [<span class="pl-k">-</span><span class="pl-c1">0.532213</span>, <span class="pl-k">-</span><span class="pl-c1">1.16489</span>, <span class="pl-k">-</span><span class="pl-c1">0.414974</span>, <span class="pl-k">-</span><span class="pl-c1">0.562536</span>, <span class="pl-k">-</span><span class="pl-c1">0.440432</span>, <span class="pl-c1">0.732505</span>, <span class="pl-k">-</span><span class="pl-c1">1.06754</span>, <span class="pl-c1">0.399485</span>, <span class="pl-k">-</span><span class="pl-c1">0.67281</span>, <span class="pl-k">-</span><span class="pl-c1">1.44599</span>, <span class="pl-c1">0.835625</span>, <span class="pl-c1">0.426459</span>, <span class="pl-c1">1.20088</span>, <span class="pl-c1">0.754435</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> m<span class="pl-k">.</span>X <span class="pl-k">==</span> X[training_rows, :]
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> m<span class="pl-k">.</span>y <span class="pl-k">==</span> y[training_rows]
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(m<span class="pl-k">.</span>X <span class="pl-k">.==</span> X[training_rows, :])
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(m<span class="pl-k">.</span>y <span class="pl-k">.==</span> y[training_rows])
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">all</span>(m<span class="pl-k">.</span>X <span class="pl-k">.==</span> <span class="pl-c1">0</span>)
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">all</span>(m<span class="pl-k">.</span>y <span class="pl-k">.==</span> <span class="pl-c1">0</span>)
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> before sanitization, we can make predictions</span>
       <span class="pl-c1">predict</span>(m, X[testing_rows, :])
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">4.513253714187381</span>
  <span class="pl-c1">2.5689035333536605</span>
  <span class="pl-c1">0.9939782906365846</span>
  <span class="pl-c1">1.2513894159362184</span>
  <span class="pl-c1">3.2007086601687353</span>
 <span class="pl-k">-</span><span class="pl-c1">5.387968774216589</span>
 <span class="pl-k">-</span><span class="pl-c1">0.1767892797746935</span>
  <span class="pl-c1">3.4408813711668165</span>
  <span class="pl-c1">0.4625821018811823</span>
  <span class="pl-c1">1.649129884116436</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8620887900500149</span>
  <span class="pl-c1">0.6504970487658756</span>
  <span class="pl-c1">4.287913533796443</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5014166099065136</span>
  <span class="pl-c1">1.1666979326633855</span>
  <span class="pl-c1">0.2723098985354143</span>
  <span class="pl-c1">3.2783930370766634</span>
  <span class="pl-c1">2.250636815003683</span>
  ⋮
  <span class="pl-c1">1.1999638265752477</span>
  <span class="pl-c1">3.8377489399901084</span>
  <span class="pl-c1">4.2805489451765935</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5849048693472063</span>
 <span class="pl-k">-</span><span class="pl-c1">0.6574890049656816</span>
  <span class="pl-c1">0.2606368302418087</span>
 <span class="pl-k">-</span><span class="pl-c1">4.197310605534758</span>
 <span class="pl-k">-</span><span class="pl-c1">3.5805273324146336</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5244747588662737</span>
  <span class="pl-c1">5.274904154193373</span>
  <span class="pl-c1">2.7742388165636953</span>
  <span class="pl-c1">5.883741172337488</span>
  <span class="pl-c1">2.118699747786167</span>
 <span class="pl-k">-</span><span class="pl-c1">4.209943069147431</span>
  <span class="pl-c1">2.262361580682631</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5044151513387216</span>
  <span class="pl-c1">4.443422779093501</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">predict</span>(m, X[training_rows, :])
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.943212508610099</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8226863248850258</span>
  <span class="pl-c1">1.031068845178503</span>
 <span class="pl-k">-</span><span class="pl-c1">3.3178919274576053</span>
  <span class="pl-c1">0.587046578244962</span>
 <span class="pl-k">-</span><span class="pl-c1">0.032251634503744686</span>
  <span class="pl-c1">1.9123819046207888</span>
  <span class="pl-c1">3.555603804394087</span>
  <span class="pl-c1">2.1728937544760307</span>
 <span class="pl-k">-</span><span class="pl-c1">1.9319447549669504</span>
 <span class="pl-k">-</span><span class="pl-c1">0.7592148524301295</span>
 <span class="pl-k">-</span><span class="pl-c1">7.250437603426189</span>
  <span class="pl-c1">4.982277986708986</span>
 <span class="pl-k">-</span><span class="pl-c1">1.8660967909674548</span>
  <span class="pl-c1">0.29423182806971415</span>
  <span class="pl-c1">0.593840341165224</span>
 <span class="pl-k">-</span><span class="pl-c1">0.26314562641917977</span>
  <span class="pl-c1">1.4340414682799685</span>
  ⋮
  <span class="pl-c1">1.6038174714835796</span>
  <span class="pl-c1">1.3091787016871341</span>
  <span class="pl-c1">4.936123830680592</span>
  <span class="pl-c1">1.9812183495287048</span>
 <span class="pl-k">-</span><span class="pl-c1">0.848632475032059</span>
  <span class="pl-c1">3.1553721781769157</span>
 <span class="pl-k">-</span><span class="pl-c1">5.412240178264108</span>
  <span class="pl-c1">1.406559298117795</span>
  <span class="pl-c1">3.6433312336276646</span>
  <span class="pl-c1">0.3408165307792135</span>
  <span class="pl-c1">0.2882242203753349</span>
  <span class="pl-c1">1.8120206189755343</span>
 <span class="pl-k">-</span><span class="pl-c1">3.299798877655878</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8793971451160698</span>
  <span class="pl-c1">2.3158119962568886</span>
 <span class="pl-k">-</span><span class="pl-c1">2.4598360012327265</span>
 <span class="pl-k">-</span><span class="pl-c1">4.810128269819875</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">mse</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">mse</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9856973993855034</span>
<span class="pl-c1">0.9856973993855034</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">rmse</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">rmse</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9928229446308658</span>
<span class="pl-c1">0.9928229446308658</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">r2</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">r2</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9044357103305194</span>
<span class="pl-c1">0.9044357103305194</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">mse</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">mse</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9480778102674918</span>
<span class="pl-c1">0.9480778102674918</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">rmse</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">rmse</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9736928726592856</span>
<span class="pl-c1">0.9736928726592856</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">r2</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">r2</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9088387716983182</span>
<span class="pl-c1">0.9088387716983182</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sanitize!</span>(<span class="pl-c1">Model</span>(m), <span class="pl-c1">Data</span>(X), <span class="pl-c1">Data</span>(y)) <span class="pl-c"><span class="pl-c">#</span> sanitize the model with ModelSanitizer</span>
<span class="pl-c1">Model</span><span class="pl-c1">{LinearModel{Float64}}</span>(<span class="pl-c1">LinearModel</span><span class="pl-c1">{Float64}</span>([<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; … ; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>  …  <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-k">-</span><span class="pl-c1">0.532213</span>, <span class="pl-k">-</span><span class="pl-c1">1.16489</span>, <span class="pl-k">-</span><span class="pl-c1">0.414974</span>, <span class="pl-k">-</span><span class="pl-c1">0.562536</span>, <span class="pl-k">-</span><span class="pl-c1">0.440432</span>, <span class="pl-c1">0.732505</span>, <span class="pl-k">-</span><span class="pl-c1">1.06754</span>, <span class="pl-c1">0.399485</span>, <span class="pl-k">-</span><span class="pl-c1">0.67281</span>, <span class="pl-k">-</span><span class="pl-c1">1.44599</span>, <span class="pl-c1">0.835625</span>, <span class="pl-c1">0.426459</span>, <span class="pl-c1">1.20088</span>, <span class="pl-c1">0.754435</span>]))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> m<span class="pl-k">.</span>X <span class="pl-k">!=</span> X[training_rows, :]
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> m<span class="pl-k">.</span>y <span class="pl-k">!=</span> y[training_rows]
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">all</span>(m<span class="pl-k">.</span>X <span class="pl-k">.==</span> X[training_rows, :])
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-k">!</span><span class="pl-c1">all</span>(m<span class="pl-k">.</span>y <span class="pl-k">.==</span> y[training_rows])
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(m<span class="pl-k">.</span>X <span class="pl-k">.==</span> <span class="pl-c1">0</span>)
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(m<span class="pl-k">.</span>y <span class="pl-k">.==</span> <span class="pl-c1">0</span>)
Test Passed

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> after sanitization, we are still able to make predictions</span>
       <span class="pl-c1">predict</span>(m, X[testing_rows, :])
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">4.513253714187381</span>
  <span class="pl-c1">2.5689035333536605</span>
  <span class="pl-c1">0.9939782906365846</span>
  <span class="pl-c1">1.2513894159362184</span>
  <span class="pl-c1">3.2007086601687353</span>
 <span class="pl-k">-</span><span class="pl-c1">5.387968774216589</span>
 <span class="pl-k">-</span><span class="pl-c1">0.1767892797746935</span>
  <span class="pl-c1">3.4408813711668165</span>
  <span class="pl-c1">0.4625821018811823</span>
  <span class="pl-c1">1.649129884116436</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8620887900500149</span>
  <span class="pl-c1">0.6504970487658756</span>
  <span class="pl-c1">4.287913533796443</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5014166099065136</span>
  <span class="pl-c1">1.1666979326633855</span>
  <span class="pl-c1">0.2723098985354143</span>
  <span class="pl-c1">3.2783930370766634</span>
  <span class="pl-c1">2.250636815003683</span>
  ⋮
  <span class="pl-c1">1.1999638265752477</span>
  <span class="pl-c1">3.8377489399901084</span>
  <span class="pl-c1">4.2805489451765935</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5849048693472063</span>
 <span class="pl-k">-</span><span class="pl-c1">0.6574890049656816</span>
  <span class="pl-c1">0.2606368302418087</span>
 <span class="pl-k">-</span><span class="pl-c1">4.197310605534758</span>
 <span class="pl-k">-</span><span class="pl-c1">3.5805273324146336</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5244747588662737</span>
  <span class="pl-c1">5.274904154193373</span>
  <span class="pl-c1">2.7742388165636953</span>
  <span class="pl-c1">5.883741172337488</span>
  <span class="pl-c1">2.118699747786167</span>
 <span class="pl-k">-</span><span class="pl-c1">4.209943069147431</span>
  <span class="pl-c1">2.262361580682631</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5044151513387216</span>
  <span class="pl-c1">4.443422779093501</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">predict</span>(m, X[training_rows, :])
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.943212508610099</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8226863248850258</span>
  <span class="pl-c1">1.031068845178503</span>
 <span class="pl-k">-</span><span class="pl-c1">3.3178919274576053</span>
  <span class="pl-c1">0.587046578244962</span>
 <span class="pl-k">-</span><span class="pl-c1">0.032251634503744686</span>
  <span class="pl-c1">1.9123819046207888</span>
  <span class="pl-c1">3.555603804394087</span>
  <span class="pl-c1">2.1728937544760307</span>
 <span class="pl-k">-</span><span class="pl-c1">1.9319447549669504</span>
 <span class="pl-k">-</span><span class="pl-c1">0.7592148524301295</span>
 <span class="pl-k">-</span><span class="pl-c1">7.250437603426189</span>
  <span class="pl-c1">4.982277986708986</span>
 <span class="pl-k">-</span><span class="pl-c1">1.8660967909674548</span>
  <span class="pl-c1">0.29423182806971415</span>
  <span class="pl-c1">0.593840341165224</span>
 <span class="pl-k">-</span><span class="pl-c1">0.26314562641917977</span>
  <span class="pl-c1">1.4340414682799685</span>
  ⋮
  <span class="pl-c1">1.6038174714835796</span>
  <span class="pl-c1">1.3091787016871341</span>
  <span class="pl-c1">4.936123830680592</span>
  <span class="pl-c1">1.9812183495287048</span>
 <span class="pl-k">-</span><span class="pl-c1">0.848632475032059</span>
  <span class="pl-c1">3.1553721781769157</span>
 <span class="pl-k">-</span><span class="pl-c1">5.412240178264108</span>
  <span class="pl-c1">1.406559298117795</span>
  <span class="pl-c1">3.6433312336276646</span>
  <span class="pl-c1">0.3408165307792135</span>
  <span class="pl-c1">0.2882242203753349</span>
  <span class="pl-c1">1.8120206189755343</span>
 <span class="pl-k">-</span><span class="pl-c1">3.299798877655878</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8793971451160698</span>
  <span class="pl-c1">2.3158119962568886</span>
 <span class="pl-k">-</span><span class="pl-c1">2.4598360012327265</span>
 <span class="pl-k">-</span><span class="pl-c1">4.810128269819875</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">mse</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">mse</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9856973993855034</span>
<span class="pl-c1">0.9856973993855034</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">rmse</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">rmse</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9928229446308658</span>
<span class="pl-c1">0.9928229446308658</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">r2</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">r2</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9044357103305194</span>
<span class="pl-c1">0.9044357103305194</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">mse</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">mse</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9480778102674918</span>
<span class="pl-c1">0.9480778102674918</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">rmse</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">rmse</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9736928726592856</span>
<span class="pl-c1">0.9736928726592856</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">r2</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">r2</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9088387716983182</span>
<span class="pl-c1">0.9088387716983182</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> if you know exactly where the data are stored inside the model, you can</span>
       <span class="pl-c"><span class="pl-c">#</span> directly delete them with ForceSanitize:</span>
       <span class="pl-c1">sanitize!</span>(<span class="pl-c1">ForceSanitize</span>(m<span class="pl-k">.</span>X), <span class="pl-c1">ForceSanitize</span>(m<span class="pl-k">.</span>y))
(<span class="pl-c1">ForceSanitize</span><span class="pl-c1">{Array{Float64,2}}</span>([<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; … ; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> … <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>]), <span class="pl-c1">ForceSanitize</span><span class="pl-c1">{Array{Float64,1}}</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>  …  <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]))

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> we can still make predictions even after using ForceSanitize</span>
       <span class="pl-c1">predict</span>(m, X[testing_rows, :])
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">4.513253714187381</span>
  <span class="pl-c1">2.5689035333536605</span>
  <span class="pl-c1">0.9939782906365846</span>
  <span class="pl-c1">1.2513894159362184</span>
  <span class="pl-c1">3.2007086601687353</span>
 <span class="pl-k">-</span><span class="pl-c1">5.387968774216589</span>
 <span class="pl-k">-</span><span class="pl-c1">0.1767892797746935</span>
  <span class="pl-c1">3.4408813711668165</span>
  <span class="pl-c1">0.4625821018811823</span>
  <span class="pl-c1">1.649129884116436</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8620887900500149</span>
  <span class="pl-c1">0.6504970487658756</span>
  <span class="pl-c1">4.287913533796443</span>
 <span class="pl-k">-</span><span class="pl-c1">2.5014166099065136</span>
  <span class="pl-c1">1.1666979326633855</span>
  <span class="pl-c1">0.2723098985354143</span>
  <span class="pl-c1">3.2783930370766634</span>
  <span class="pl-c1">2.250636815003683</span>
  ⋮
  <span class="pl-c1">1.1999638265752477</span>
  <span class="pl-c1">3.8377489399901084</span>
  <span class="pl-c1">4.2805489451765935</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5849048693472063</span>
 <span class="pl-k">-</span><span class="pl-c1">0.6574890049656816</span>
  <span class="pl-c1">0.2606368302418087</span>
 <span class="pl-k">-</span><span class="pl-c1">4.197310605534758</span>
 <span class="pl-k">-</span><span class="pl-c1">3.5805273324146336</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5244747588662737</span>
  <span class="pl-c1">5.274904154193373</span>
  <span class="pl-c1">2.7742388165636953</span>
  <span class="pl-c1">5.883741172337488</span>
  <span class="pl-c1">2.118699747786167</span>
 <span class="pl-k">-</span><span class="pl-c1">4.209943069147431</span>
  <span class="pl-c1">2.262361580682631</span>
 <span class="pl-k">-</span><span class="pl-c1">0.5044151513387216</span>
  <span class="pl-c1">4.443422779093501</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">predict</span>(m, X[training_rows, :])
<span class="pl-c1">2500</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.943212508610099</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8226863248850258</span>
  <span class="pl-c1">1.031068845178503</span>
 <span class="pl-k">-</span><span class="pl-c1">3.3178919274576053</span>
  <span class="pl-c1">0.587046578244962</span>
 <span class="pl-k">-</span><span class="pl-c1">0.032251634503744686</span>
  <span class="pl-c1">1.9123819046207888</span>
  <span class="pl-c1">3.555603804394087</span>
  <span class="pl-c1">2.1728937544760307</span>
 <span class="pl-k">-</span><span class="pl-c1">1.9319447549669504</span>
 <span class="pl-k">-</span><span class="pl-c1">0.7592148524301295</span>
 <span class="pl-k">-</span><span class="pl-c1">7.250437603426189</span>
  <span class="pl-c1">4.982277986708986</span>
 <span class="pl-k">-</span><span class="pl-c1">1.8660967909674548</span>
  <span class="pl-c1">0.29423182806971415</span>
  <span class="pl-c1">0.593840341165224</span>
 <span class="pl-k">-</span><span class="pl-c1">0.26314562641917977</span>
  <span class="pl-c1">1.4340414682799685</span>
  ⋮
  <span class="pl-c1">1.6038174714835796</span>
  <span class="pl-c1">1.3091787016871341</span>
  <span class="pl-c1">4.936123830680592</span>
  <span class="pl-c1">1.9812183495287048</span>
 <span class="pl-k">-</span><span class="pl-c1">0.848632475032059</span>
  <span class="pl-c1">3.1553721781769157</span>
 <span class="pl-k">-</span><span class="pl-c1">5.412240178264108</span>
  <span class="pl-c1">1.406559298117795</span>
  <span class="pl-c1">3.6433312336276646</span>
  <span class="pl-c1">0.3408165307792135</span>
  <span class="pl-c1">0.2882242203753349</span>
  <span class="pl-c1">1.8120206189755343</span>
 <span class="pl-k">-</span><span class="pl-c1">3.299798877655878</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8793971451160698</span>
  <span class="pl-c1">2.3158119962568886</span>
 <span class="pl-k">-</span><span class="pl-c1">2.4598360012327265</span>
 <span class="pl-k">-</span><span class="pl-c1">4.810128269819875</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">mse</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">mse</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9856973993855034</span>
<span class="pl-c1">0.9856973993855034</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">rmse</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">rmse</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9928229446308658</span>
<span class="pl-c1">0.9928229446308658</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">r2</span>(m, X[training_rows, :], y[training_rows])
<span class="pl-en">r2</span>(m, X[training_rows, :], y[training_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9044357103305194</span>
<span class="pl-c1">0.9044357103305194</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">mse</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">mse</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9480778102674918</span>
<span class="pl-c1">0.9480778102674918</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">rmse</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">rmse</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9736928726592856</span>
<span class="pl-c1">0.9736928726592856</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">r2</span>(m, X[testing_rows, :], y[testing_rows])
<span class="pl-en">r2</span>(m, X[testing_rows, :], y[testing_rows]) <span class="pl-k">=</span> <span class="pl-c1">0.9088387716983182</span>
<span class="pl-c1">0.9088387716983182</span></pre></div>
</article></div>