<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-memoryarena" class="anchor" aria-hidden="true" href="#memoryarena"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MemoryArena</h1>
<p>A Julia module that provides a type-safe memory arena based
on the TypedArena in the Rust library.</p>
<p>This allows fast allocation of large numbers of objects of the
same type. The memory arena does not allow deallocation of individual
objects, rather all objects are cleaned up when the memory arena is
manually destroyed.</p>
<h2><a id="user-content-warnings" class="anchor" aria-hidden="true" href="#warnings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Warnings</h2>
<ol>
<li>
<p>At this point, the <code>TypedArena</code> does not support <code>Union</code> types or abstract
types. This is a planned feature.</p>
</li>
<li>
<p>You should not store objects in the arena which contain
references to objects managed by the Julia garbage collector. Doing so
will almost surely result in corrupt memory and a crashing program.</p>
</li>
<li>
<p>Type safety and program stability can be compromised if you directly
manipulate the pointer contained by the RefCell. Do so at your own risk.</p>
</li>
</ol>
</article></div>