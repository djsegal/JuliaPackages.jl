<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-traceur" class="anchor" aria-hidden="true" href="#traceur"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Traceur</h1>
<p><a href="https://travis-ci.org/JunoLab/Traceur.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/13b369fa7fd769236ab0397f70811b3590da501fe8d9f297172c835df7caa1c2/68747470733a2f2f7472617669732d63692e6f72672f4a756e6f4c61622f547261636575722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JunoLab/Traceur.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://JunoLab.github.io/Traceur.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>Traceur is essentially a codified version of the <a href="https://docs.julialang.org/en/v1/manual/performance-tips/" rel="nofollow">Julia performance tips</a>. You run your code, it tells you about any obvious performance traps.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Traceur

julia&gt; naive_relu(x) = x &lt; 0 ? 0 : x

julia&gt; @trace naive_relu(1.0)
naive_relu(::Float64) at none:1
    returns Union{Float64, Int64}
1.0

julia&gt; function naive_sum(xs)
         s = 0
         for x in xs
           s += x
         end
         return s
       end

julia&gt; @trace naive_sum([1.])
Base.indexed_next(::Tuple{Int64,Bool}, ::Int64, ::Int64) at tuple.jl:54
    returns Tuple{Union{Bool, Int64},Int64}
naive_sum(::Array{Float64,1}) at none:2
    s is assigned as Int64 at line 2
    s is assigned as Float64 at line 4
    dynamic dispatch to s + x at line 4
    returns Union{Float64, Int64}
1.0

julia&gt; y = 1

julia&gt; f(x) = x+y

julia&gt; @trace f(1)
f(::Int64) at none:1
    uses global variable Main.y
    dynamic dispatch to x + Main.y at line 1
    returns Any
2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Traceur

julia<span class="pl-k">&gt;</span> <span class="pl-en">naive_relu</span>(x) <span class="pl-k">=</span> x <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">0</span> <span class="pl-k">:</span> x

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span> <span class="pl-c1">naive_relu</span>(<span class="pl-c1">1.0</span>)
<span class="pl-c1">naive_relu</span>(<span class="pl-k">::</span><span class="pl-c1">Float64</span>) at none<span class="pl-k">:</span><span class="pl-c1">1</span>
    returns Union{Float64, Int64}
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">naive_sum</span>(xs)
         s <span class="pl-k">=</span> <span class="pl-c1">0</span>
         <span class="pl-k">for</span> x <span class="pl-k">in</span> xs
           s <span class="pl-k">+=</span> x
         <span class="pl-k">end</span>
         <span class="pl-k">return</span> s
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span> <span class="pl-c1">naive_sum</span>([<span class="pl-c1">1.</span>])
Base<span class="pl-k">.</span><span class="pl-c1">indexed_next</span>(<span class="pl-k">::</span><span class="pl-c1">Tuple{Int64,Bool}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at tuple<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">54</span>
    returns Tuple{Union{Bool, Int64},Int64}
<span class="pl-c1">naive_sum</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>) at none<span class="pl-k">:</span><span class="pl-c1">2</span>
    s is assigned as Int64 at line <span class="pl-c1">2</span>
    s is assigned as Float64 at line <span class="pl-c1">4</span>
    dynamic dispatch to s <span class="pl-k">+</span> x at line <span class="pl-c1">4</span>
    returns Union{Float64, Int64}
<span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">+</span>y

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@trace</span> <span class="pl-c1">f</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) at none<span class="pl-k">:</span><span class="pl-c1">1</span>
    uses <span class="pl-k">global</span> variable Main<span class="pl-k">.</span>y
    dynamic dispatch to x <span class="pl-k">+</span> Main<span class="pl-k">.</span>y at line <span class="pl-c1">1</span>
    returns Any
<span class="pl-c1">2</span></pre></div>
<h3><a id="user-content-mechanics" class="anchor" aria-hidden="true" href="#mechanics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mechanics</h3>
<p>The heavily lifting is done by <a href="https://github.com/MikeInnes/Traceur.jl/blob/a107a2d9646675441e4e7c8d5f3be14d8bae86ad/src/analysis.jl#L127"><code>analyse</code></a>, which takes a <code>Call</code> (essentially a <code>(f, args...)</code> tuple for each function called in the code). Most of the analysis steps work by retrieving the <code>code_typed</code> of the function, inspecting it for issues and emitting any warnings.</p>
<p>Suggestions for (or better, implementations of!) further analysis passes are welcome.</p>
</article></div>