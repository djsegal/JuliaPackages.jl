<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lcio-bindings-for-julia" class="anchor" aria-hidden="true" href="#lcio-bindings-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LCIO bindings for Julia</h1>
<p><a href="https://travis-ci.com/jstrube/LCIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/28e14e27579d3b1a627d1c1a89c4872b2e1df1fd/68747470733a2f2f7472617669732d63692e636f6d2f6a7374727562652f4c43494f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jstrube/LCIO.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://lciojl.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/f2982dd8eac140b323e36946fb65e536ef4f3551/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c63696f6a6c2f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/lciojl/badge/?version=latest" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3666947" rel="nofollow"><img src="https://camo.githubusercontent.com/826c2b7019d082529a271398bcfa226769850043/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333636363934372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3666947.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>This is a package for reading the LCIO file format, used for studies of the International Linear Collider, and other future collider concepts. See <a href="http://lcio.desy.de" rel="nofollow">http://lcio.desy.de</a> for details.</p>
<h2><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prerequisites</h2>
<ul>
<li>The julia programming language: <a href="http://julialang.org/" rel="nofollow">http://julialang.org/</a></li>
<li>A compiler that accepts the --std=c++-14 flag. Set the CXX and CC environment variables if this is different from your default compiler.
LCIO will be built from source to reduce problems with version incompatibilities.</li>
</ul>
<h2><a id="user-content-installation-instructions" class="anchor" aria-hidden="true" href="#installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation Instructions</h2>
<p>Make sure that the <code>julia</code> executable is in your <code>$PATH</code> environment variable, or your <code>$JULIA_HOME</code> variable is set to the directory that contains the <code>julia</code> executable.</p>
<pre><code>bash
julia -e 'Pkg.add("LCIO")'
</code></pre>
<p>If you want to get the latest version (which might have newer features (and bugs) than the latest release), you can run</p>
<pre><code>Pkg.checkout("LCIO")
Pkg.build("LCIO")
</code></pre>
<p>from the julia prompt; after the <code>Pkg.add</code> command.</p>
<h2><a id="user-content-philosophy" class="anchor" aria-hidden="true" href="#philosophy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Philosophy</h2>
<p>We have attempted to achieve a faithful translation of the C++ API, with method names equal to those documented on the LCIO pages. Nevertheless, attempts have been made to improve the user experience.
Examples:</p>
<ul>
<li>All collections are typed, no casting necessary</li>
<li>Methods that return a <code>float*</code> or <code>double*</code> in the C++ API return a <code>float64[]</code> instead.</li>
<li>Many of the methods on the C++ side returning pointers can return <code>nullptr</code>, so need to be wrapped in <code>if</code> clauses. The way to deal with this on the julia side is to use something like the following syntax:</li>
</ul>
<pre><code>ok, value = getReferencePoint(particle)
if ok
    println(value)
end
</code></pre>
<ul>
<li>A notable exception is <code>getPosition</code> for hits, and <code>getMomentum</code> for particles, which we assume always return valid values</li>
</ul>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h2>
<p>The basic construct for iterating over a file is this:</p>
<pre><code>using LCIO
LCIO.open("file.slcio") do reader
    for event in reader
        println(getEventNumber(event))
    end
end
</code></pre>
<p>There are more examples in the <code>examples/</code> directory.</p>
<h2><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Troubleshooting</h2>
<p>There are currently a couple of hiccups in the dependencies. Work to simplify the installation process is on-going, but in the meantime:
Ubuntu 17.10:</p>
<ul>
<li>Install zlib, cmake, g++-7 through the package manager</li>
<li>Download Julia from the julialang.org homepage</li>
<li>Set the PATH variable such that you find the julia executable</li>
<li>start julia</li>
</ul>
<pre lang="Pkg.add(&quot;CxxWrap&quot;)"><code>Pkg.checkout("CxxWrap")
Pkg.add("LCIO")
Pkg.test("LCIO")
</code></pre>
<p>If that doesn't work, please complain through the issues. I have not tested this on other systems recently.</p>
</article></div>