<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lcio-bindings-for-julia" class="anchor" aria-hidden="true" href="#lcio-bindings-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LCIO bindings for Julia</h1>
<p><a href="https://travis-ci.com/jstrube/LCIO.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/16e1cfa10fd0dab1f20742339afdf37050253a16a1f2877c95c081b8b6a3917e/68747470733a2f2f7472617669732d63692e636f6d2f6a7374727562652f4c43494f2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jstrube/LCIO.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://lciojl.readthedocs.io/en/latest/?badge=latest" rel="nofollow"><img src="https://camo.githubusercontent.com/6c15b0333cc5adcaa5a18168630d2156e7d645f15510cbaa23b004f710eff794/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c63696f6a6c2f62616467652f3f76657273696f6e3d6c6174657374" alt="Documentation Status" data-canonical-src="https://readthedocs.org/projects/lciojl/badge/?version=latest" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3666947" rel="nofollow"><img src="https://camo.githubusercontent.com/3e7c547467e0eb18191db72b0f56d783bff006d01000707f9c42564a653e9530/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333636363934372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3666947.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Introduction</h2>
<p>This is a package for reading the LCIO file format, used for studies of the International Linear Collider, and other future collider concepts. See <a href="http://lcio.desy.de" rel="nofollow">http://lcio.desy.de</a> for details.</p>
<h2><a id="user-content-installation-instructions" class="anchor" aria-hidden="true" href="#installation-instructions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation Instructions</h2>
<p>To install the latest version of the package, use the full path when adding the package. From the julia prompt you can type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]
add https://github.com/jstrube/LCIO.jl
"><pre>]
add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>jstrube<span class="pl-k">/</span>LCIO<span class="pl-k">.</span>jl</pre></div>
<h2><a id="user-content-philosophy" class="anchor" aria-hidden="true" href="#philosophy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Philosophy</h2>
<p>We have attempted to achieve a faithful translation of the C++ API, with method names equal to those documented on the LCIO pages. Nevertheless, attempts have been made to improve the user experience.
Examples:</p>
<ul>
<li>All collections are typed, no casting necessary</li>
<li>Methods that return a <code>float*</code> or <code>double*</code> in the C++ API return a <code>Float64[]</code> on the Julia side.</li>
<li>Some of the methods on the C++ side returning pointers can return <code>nullptr</code>, so need to be wrapped in <code>if</code> clauses. The way to deal with this on the julia side is to use something like the following syntax:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ok, value = getReferencePoint(particle)
if ok
    println(value)
end
"><pre>ok, value <span class="pl-k">=</span> <span class="pl-c1">getReferencePoint</span>(particle)
<span class="pl-k">if</span> ok
    <span class="pl-c1">println</span>(value)
<span class="pl-k">end</span></pre></div>
<ul>
<li>A notable exception is <code>getPosition</code> for hits, and <code>getMomentum</code> for particles, which we assume always return valid values</li>
</ul>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>The basic construct for iterating over a file is this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LCIO
LCIO.open(&quot;file.slcio&quot;) do reader
    for event in reader
        println(getEventNumber(event))
    end
end
"><pre><span class="pl-k">using</span> LCIO
LCIO<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>file.slcio<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> reader
    <span class="pl-k">for</span> event <span class="pl-k">in</span> reader
        <span class="pl-c1">println</span>(<span class="pl-c1">getEventNumber</span>(event))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>There are more examples in the <code>examples/</code> directory.</p>
</article></div>