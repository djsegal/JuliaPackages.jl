<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-parameterisedmodule" class="anchor" aria-hidden="true" href="#parameterisedmodule"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParameterisedModule</h1>
<p dir="auto"><a href="https://thautwarm.github.io/ParameterisedModule.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://thautwarm.github.io/ParameterisedModule.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/thautwarm/ParameterisedModule.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e5de23d145ddb0073b87f0387f8db3c0ef585d094b22a8d02ccf00e1bc4e52c7/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f506172616d65746572697365644d6f64756c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/ParameterisedModule.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thautwarm/ParameterisedModule.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e074db9464678d3c4b0a5b506eea01f1e946245f88a2fc4d8faca0755f6bb9f0/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f506172616d65746572697365644d6f64756c652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/ParameterisedModule.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">ML parameterised modules in Julia.</p>
<h1 dir="auto"><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>APIs</h1>
<ul dir="auto">
<li><code>@sig struct ... end</code> : define module signatures, like <code>sig</code> in OCaml.</li>
<li><code>@structure struct ... end</code> : define module structures, like <code>struct</code> in OCaml.</li>
<li><code>@open ModuleType Module</code> : using module, like <code>open</code> in OCaml.</li>
<li><code>@open ModuleType Module body</code> : using module when evaluating <code>body</code>, like <code>let open</code> in OCaml.</li>
</ul>
<h1 dir="auto"><a id="user-content-non-parametric-example" class="anchor" aria-hidden="true" href="#non-parametric-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-Parametric Example</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ParameterisedModule

# this is the module type declaration
@sig struct NatAlgebra
    struct Eltype end # this is type declaration
    succ :: Function
    zero :: Eltype
end

# make a module `num_nat`, whose module type is NatAlgebra
num_nat = @structure struct NatAlgebra
    Eltype  = Int
    succ(x) = x + 1
    zero    = 0
end

@open NatAlgebra num_nat begin
    println(succ(succ(zero))) # 2
end

println(succ(succ(zero)))
# ERROR: UndefVarError: succ not defined

str_nat = @structure struct NatAlgebra
    Eltype  = String
    succ(x) = &quot;succ($x)&quot;
    zero    = &quot;zero&quot;
end

@open NatAlgebra str_nat begin
    println(succ(succ(zero))) # succ(succ(zero))
end"><pre><span class="pl-k">using</span> ParameterisedModule

<span class="pl-c"><span class="pl-c">#</span> this is the module type declaration</span>
<span class="pl-c1">@sig</span> <span class="pl-k">struct</span> NatAlgebra
    <span class="pl-k">struct</span> Eltype <span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> this is type declaration</span>
    succ <span class="pl-k">::</span> <span class="pl-c1">Function</span>
    zero <span class="pl-k">::</span> <span class="pl-c1">Eltype</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> make a module `num_nat`, whose module type is NatAlgebra</span>
num_nat <span class="pl-k">=</span> <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> NatAlgebra
    Eltype  <span class="pl-k">=</span> Int
    <span class="pl-en">succ</span>(x) <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>
    zero    <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span>

<span class="pl-c1">@open</span> NatAlgebra num_nat <span class="pl-k">begin</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">succ</span>(<span class="pl-c1">succ</span>(zero))) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-k">end</span>

<span class="pl-c1">println</span>(<span class="pl-c1">succ</span>(<span class="pl-c1">succ</span>(zero)))
<span class="pl-c"><span class="pl-c">#</span> ERROR: UndefVarError: succ not defined</span>

str_nat <span class="pl-k">=</span> <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> NatAlgebra
    Eltype  <span class="pl-k">=</span> String
    <span class="pl-en">succ</span>(x) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>succ(<span class="pl-v">$x</span>)<span class="pl-pds">"</span></span>
    zero    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>zero<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@open</span> NatAlgebra str_nat <span class="pl-k">begin</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">succ</span>(<span class="pl-c1">succ</span>(zero))) <span class="pl-c"><span class="pl-c">#</span> succ(succ(zero))</span>
<span class="pl-k">end</span></pre></div>
<h1 dir="auto"><a id="user-content-parametric-examples" class="anchor" aria-hidden="true" href="#parametric-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parametric Examples</h1>
<p dir="auto">An example(word-algebra) from <a href="http://okmij.org/ftp/tagless-final/Algebra.html" rel="nofollow">the section <em>Algebra</em> of Oleg's tagless final lectures</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Functor = Function
@sig struct TF{Eltype}
    e :: Eltype
end

TFZero(nat :: NatAlgebra) =
    @structure struct TF{nat.Eltype}
        e = nat.zero
    end

word_algebra =
    @structure struct NatAlgebra
        Eltype = Functor
        zero = TFZero
        succ(T1) =
            function (N::NatAlgebra)
                @structure struct TF{N.Eltype}
                    e = N.succ(T1(N).e)
                end
            end
    end

@sig struct H
    h :: Function
end

HTFC(N::NatAlgebra) =
    @structure struct H
        h(T) = T(N).e
    end

using Test
@open H HTFC(num_nat) begin
    @test h(word_algebra.zero) == num_nat.zero

    case(x::Functor) =
        h(word_algebra.succ(x)) == num_nat.succ(h(x))

    words = Functor[TFZero]
    for i = 1:100
        push!(words, word_algebra.succ(words[end]))
    end
    @test all(words) do x; case(x) end
end
"><pre>Functor <span class="pl-k">=</span> Function
<span class="pl-c1">@sig</span> <span class="pl-k">struct</span> TF{Eltype}
    e <span class="pl-k">::</span> <span class="pl-c1">Eltype</span>
<span class="pl-k">end</span>

<span class="pl-en">TFZero</span>(nat <span class="pl-k">::</span> <span class="pl-c1">NatAlgebra</span>) <span class="pl-k">=</span>
    <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> TF{nat<span class="pl-k">.</span>Eltype}
        e <span class="pl-k">=</span> nat<span class="pl-k">.</span>zero
    <span class="pl-k">end</span>

word_algebra <span class="pl-k">=</span>
    <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> NatAlgebra
        Eltype <span class="pl-k">=</span> Functor
        zero <span class="pl-k">=</span> TFZero
        <span class="pl-en">succ</span>(T1) <span class="pl-k">=</span>
            <span class="pl-k">function</span> (N<span class="pl-k">::</span><span class="pl-c1">NatAlgebra</span>)
                <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> TF{N<span class="pl-k">.</span>Eltype}
                    e <span class="pl-k">=</span> N<span class="pl-k">.</span><span class="pl-c1">succ</span>(<span class="pl-c1">T1</span>(N)<span class="pl-k">.</span>e)
                <span class="pl-k">end</span>
            <span class="pl-k">end</span>
    <span class="pl-k">end</span>

<span class="pl-c1">@sig</span> <span class="pl-k">struct</span> H
    h <span class="pl-k">::</span> <span class="pl-c1">Function</span>
<span class="pl-k">end</span>

<span class="pl-en">HTFC</span>(N<span class="pl-k">::</span><span class="pl-c1">NatAlgebra</span>) <span class="pl-k">=</span>
    <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> H
        <span class="pl-en">h</span>(T) <span class="pl-k">=</span> <span class="pl-c1">T</span>(N)<span class="pl-k">.</span>e
    <span class="pl-k">end</span>

<span class="pl-k">using</span> Test
<span class="pl-c1">@open</span> H <span class="pl-c1">HTFC</span>(num_nat) <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">h</span>(word_algebra<span class="pl-k">.</span>zero) <span class="pl-k">==</span> num_nat<span class="pl-k">.</span>zero

    <span class="pl-en">case</span>(x<span class="pl-k">::</span><span class="pl-c1">Functor</span>) <span class="pl-k">=</span>
        <span class="pl-c1">h</span>(word_algebra<span class="pl-k">.</span><span class="pl-c1">succ</span>(x)) <span class="pl-k">==</span> num_nat<span class="pl-k">.</span><span class="pl-c1">succ</span>(<span class="pl-c1">h</span>(x))

    words <span class="pl-k">=</span> Functor[TFZero]
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
        <span class="pl-c1">push!</span>(words, word_algebra<span class="pl-k">.</span><span class="pl-c1">succ</span>(words[<span class="pl-c1">end</span>]))
    <span class="pl-k">end</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(words) <span class="pl-k">do</span> x; <span class="pl-c1">case</span>(x) <span class="pl-k">end</span>
<span class="pl-k">end</span>
</pre></div>
</article></div>