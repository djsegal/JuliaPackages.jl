<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-parameterisedmodule" class="anchor" aria-hidden="true" href="#parameterisedmodule"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ParameterisedModule</h1>
<p><a href="https://thautwarm.github.io/ParameterisedModule.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/ParameterisedModule.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/thautwarm/ParameterisedModule.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/65fb3aab8523f979f1a6b2be067c662e72fe9121/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f506172616d65746572697365644d6f64756c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/ParameterisedModule.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/ParameterisedModule.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/58ca4cb57efd9b2d409d1d6aa65fd35dc75aef2f/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f506172616d65746572697365644d6f64756c652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/ParameterisedModule.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>ML parameterised modules in Julia.</p>
<h1><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>APIs</h1>
<ul>
<li><code>@sig struct ... end</code> : define module signatures, like <code>sig</code> in OCaml.</li>
<li><code>@structure struct ... end</code> : define module structures, like <code>struct</code> in OCaml.</li>
<li><code>@open ModuleType Module</code> : using module, like <code>open</code> in OCaml.</li>
<li><code>@open ModuleType Module body</code> : using module when evaluating <code>body</code>, like <code>let open</code> in OCaml.</li>
</ul>
<h1><a id="user-content-non-parametric-example" class="anchor" aria-hidden="true" href="#non-parametric-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Non-Parametric Example</h1>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ParameterisedModule

<span class="pl-c"><span class="pl-c">#</span> this is the module type declaration</span>
<span class="pl-c1">@sig</span> <span class="pl-k">struct</span> NatAlgebra
    <span class="pl-k">struct</span> Eltype <span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> this is type declaration</span>
    succ <span class="pl-k">::</span> <span class="pl-c1">Function</span>
    zero <span class="pl-k">::</span> <span class="pl-c1">Eltype</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> make a module `num_nat`, whose module type is NatAlgebra</span>
num_nat <span class="pl-k">=</span> <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> NatAlgebra
    Eltype  <span class="pl-k">=</span> Int
    <span class="pl-en">succ</span>(x) <span class="pl-k">=</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>
    zero    <span class="pl-k">=</span> <span class="pl-c1">0</span>
<span class="pl-k">end</span>

<span class="pl-c1">@open</span> NatAlgebra num_nat <span class="pl-k">begin</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">succ</span>(<span class="pl-c1">succ</span>(zero))) <span class="pl-c"><span class="pl-c">#</span> 2</span>
<span class="pl-k">end</span>

<span class="pl-c1">println</span>(<span class="pl-c1">succ</span>(<span class="pl-c1">succ</span>(zero)))
<span class="pl-c"><span class="pl-c">#</span> ERROR: UndefVarError: succ not defined</span>

str_nat <span class="pl-k">=</span> <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> NatAlgebra
    Eltype  <span class="pl-k">=</span> String
    <span class="pl-en">succ</span>(x) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>succ(<span class="pl-v">$x</span>)<span class="pl-pds">"</span></span>
    zero    <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>zero<span class="pl-pds">"</span></span>
<span class="pl-k">end</span>

<span class="pl-c1">@open</span> NatAlgebra str_nat <span class="pl-k">begin</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">succ</span>(<span class="pl-c1">succ</span>(zero))) <span class="pl-c"><span class="pl-c">#</span> succ(succ(zero))</span>
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-parametric-examples" class="anchor" aria-hidden="true" href="#parametric-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parametric Examples</h1>
<p>An example(word-algebra) from <a href="http://okmij.org/ftp/tagless-final/Algebra.html" rel="nofollow">the section <em>Algebra</em> of Oleg's tagless final lectures</a>.</p>
<div class="highlight highlight-source-julia"><pre>Functor <span class="pl-k">=</span> Function
<span class="pl-c1">@sig</span> <span class="pl-k">struct</span> TF{Eltype}
    e <span class="pl-k">::</span> <span class="pl-c1">Eltype</span>
<span class="pl-k">end</span>

<span class="pl-en">TFZero</span>(nat <span class="pl-k">::</span> <span class="pl-c1">NatAlgebra</span>) <span class="pl-k">=</span>
    <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> TF{nat<span class="pl-k">.</span>Eltype}
        e <span class="pl-k">=</span> nat<span class="pl-k">.</span>zero
    <span class="pl-k">end</span>

word_algebra <span class="pl-k">=</span>
    <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> NatAlgebra
        Eltype <span class="pl-k">=</span> Functor
        zero <span class="pl-k">=</span> TFZero
        <span class="pl-en">succ</span>(T1) <span class="pl-k">=</span>
            <span class="pl-k">function</span> (N<span class="pl-k">::</span><span class="pl-c1">NatAlgebra</span>)
                <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> TF{N<span class="pl-k">.</span>Eltype}
                    e <span class="pl-k">=</span> N<span class="pl-k">.</span><span class="pl-c1">succ</span>(<span class="pl-c1">T1</span>(N)<span class="pl-k">.</span>e)
                <span class="pl-k">end</span>
            <span class="pl-k">end</span>
    <span class="pl-k">end</span>

<span class="pl-c1">@sig</span> <span class="pl-k">struct</span> H
    h <span class="pl-k">::</span> <span class="pl-c1">Function</span>
<span class="pl-k">end</span>

<span class="pl-en">HTFC</span>(N<span class="pl-k">::</span><span class="pl-c1">NatAlgebra</span>) <span class="pl-k">=</span>
    <span class="pl-c1">@structure</span> <span class="pl-k">struct</span> H
        <span class="pl-en">h</span>(T) <span class="pl-k">=</span> <span class="pl-c1">T</span>(N)<span class="pl-k">.</span>e
    <span class="pl-k">end</span>

<span class="pl-k">using</span> Test
<span class="pl-c1">@open</span> H <span class="pl-c1">HTFC</span>(num_nat) <span class="pl-k">begin</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">h</span>(word_algebra<span class="pl-k">.</span>zero) <span class="pl-k">==</span> num_nat<span class="pl-k">.</span>zero

    <span class="pl-en">case</span>(x<span class="pl-k">::</span><span class="pl-c1">Functor</span>) <span class="pl-k">=</span>
        <span class="pl-c1">h</span>(word_algebra<span class="pl-k">.</span><span class="pl-c1">succ</span>(x)) <span class="pl-k">==</span> num_nat<span class="pl-k">.</span><span class="pl-c1">succ</span>(<span class="pl-c1">h</span>(x))

    words <span class="pl-k">=</span> Functor[TFZero]
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
        <span class="pl-c1">push!</span>(words, word_algebra<span class="pl-k">.</span><span class="pl-c1">succ</span>(words[<span class="pl-c1">end</span>]))
    <span class="pl-k">end</span>
    <span class="pl-c1">@test</span> <span class="pl-c1">all</span>(words) <span class="pl-k">do</span> x; <span class="pl-c1">case</span>(x) <span class="pl-k">end</span>
<span class="pl-k">end</span>
</pre></div>
</article></div>