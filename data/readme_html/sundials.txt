<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sundialsjl" class="anchor" aria-hidden="true" href="#sundialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sundials.jl</h1>
<p><a href="https://gitter.im/JuliaDiffEq/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/063a520f1733d1b53d1e2fdb37b70a8016dd36f6/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c69614469666645712f4c6f6262792e737667" alt="Join the chat at https://gitter.im/JuliaDiffEq/Lobby" data-canonical-src="https://badges.gitter.im/JuliaDiffEq/Lobby.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaDiffEq/Sundials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02be617670ad8a63f0fb4087348e413397db0298/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614469666645712f53756e6469616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaDiffEq/Sundials.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/ChrisRackauckas/sundials-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/a48691fbd961f16c6911a90317a549b127921e5c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f73313463346931736433323278366b6f2f6272616e63682f6d61737465723f7376673d74727565" alt="AppVoyer" data-canonical-src="https://ci.appveyor.com/api/projects/status/s14c4i1sd322x6ko/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaDiffEq/Sundials.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9e5bd89e10ecd73f3ea4505e99c04a0656229022/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614469666645712f53756e6469616c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaDiffEq/Sundials.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Sundials" rel="nofollow"><img src="https://camo.githubusercontent.com/4fef3f9f76f8fb2688b3872ae8ab74e2c8e48df5/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f53756e6469616c735f302e362e737667" alt="Sundials" data-canonical-src="http://pkg.julialang.org/badges/Sundials_0.6.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>Sundials.jl is a Julia package that interfaces to the
<a href="https://computation.llnl.gov/casc/sundials/main.html" rel="nofollow">Sundials</a>
library. Sundials (the C library and this package) provides the
following:</p>
<ul>
<li><em>CVODES</em> - for integration and sensitivity analysis of ODEs.
CVODES treats stiff and nonstiff ODE systems of the form
<code>y' = f(t,y,p), y(t0) = y0(p)</code>,
where <code>p</code> is a set of parameters.</li>
<li><em>ARKODE</em> - for integration of non-stiff, stiff, and mixed mode
ODEs via its explicit, implicit, and IMEX Runge-Kutta
methods on ODEs of the form <code>My' = f(t,y,p), y(t0) = y0(p)</code>
for a set of parameters <code>p</code>.</li>
<li><em>IDAS</em>   - for integration and sensitivity analysis of DAEs.
IDAS treats DAE systems of the form
<code>F(t,y,y',p) = 0, y(t0) = y0(p), y'(t0) = y0'(p)</code></li>
<li><em>KINSOL</em> - for solution of nonlinear algebraic systems.
KINSOL treats nonlinear systems of the form
<code>F(u) = 0</code></li>
</ul>
<p>Note that <em>CVODES</em> and <em>IDAS</em> contain all functions provided by <em>CVODE</em> and <em>IDA</em> (for integration
without sensitivity analysis). If you need to use the latter, you can set <code>enable_sensitivities=false</code>
in <code>deps/build.jl</code> and (re)build the package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Within Julia, use the package manager:</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Sundials<span class="pl-pds">"</span></span>)</pre></div>
<p>This should download and install the Sundials libraries and register the package. On Windows <a href="http://sourceforge.net/projects/juliadeps-win/files" rel="nofollow">precompiled binaries</a>
are used, while on Unix and OSX Sundials is built from its sources (provided the necessary tools are
available). If you have Sundials already installed, make sure that Julia can find it, e.g., via</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">push!</span>(Base<span class="pl-k">.</span>DL_LOAD_PATH, <span class="pl-s"><span class="pl-pds">"</span>/opt/local/lib<span class="pl-pds">"</span></span>)</pre></div>
<p>before you install the package. Downloading and/or re-building of the library can be triggered by <code>Pkg.build("Sundials")</code>
if anything goes wrong.</p>
<p>To test the installation use</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">test</span>(<span class="pl-s"><span class="pl-pds">"</span>Sundials<span class="pl-pds">"</span></span>)</pre></div>
<p>which currently runs some of the examples in the <code>examples</code> directory.</p>
<h2><a id="user-content-common-interface-api" class="anchor" aria-hidden="true" href="#common-interface-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Common Interface API</h2>
<p>This package is part of the JuliaDiffEq common interface. This is documented in <a href="http://docs.juliadiffeq.org/latest/index.html" rel="nofollow">the DifferentialEquaitons.jl documentation</a>. Thus <a href="http://docs.juliadiffeq.org/latest/tutorials/ode_example.html" rel="nofollow">the ODE tutorial</a> applies. For example, the Lorenz attractor can be solved with <code>CVODE_Adams</code> as follows:</p>
<pre lang="juila"><code>using Sundials
function lorenz(du,u,p,t)
 du[1] = 10.0(u[2]-u[1])
 du[2] = u[1]*(28.0-u[3]) - u[2]
 du[3] = u[1]*u[2] - (8/3)*u[3]
end
u0 = [1.0;0.0;0.0]
tspan = (0.0,100.0)
prob = ODEProblem(lorenz,u0,tspan)
sol = solve(prob,CVODE_Adams())
using Plots; plot(sol,vars=(1,2,3))
</code></pre>
<p>Sundials.jl exports the <code>CVODE_BDF</code>, <code>CVODE_Adams</code>, and <code>ARKODE</code> methods for
ODEs which are documented
<a href="http://docs.juliadiffeq.org/latest/solvers/ode_solve.html#Sundials.jl-1" rel="nofollow">in the ODE Solvers page</a>, and <code>IDA</code> which is documented
<a href="http://docs.juliadiffeq.org/latest/solvers/dae_solve.html" rel="nofollow">in the DAE solvers page</a>.
Additionally, the <code>ARKODE</code> method can be used
<a href="http://docs.juliadiffeq.org/latest/solvers/split_ode_solve.html#Implicit-Explicit-(IMEX)-ODE-1" rel="nofollow">on <code>SplitODEProblem</code>s</a>
to solve ODEs in IMEX form.</p>
<h2><a id="user-content-kinsol-high-level-api" class="anchor" aria-hidden="true" href="#kinsol-high-level-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>KINSOL High Level API</h2>
<p>Along with the ODE solvers, Sundials contains the KINSOL nonlinear solver.
It's called via:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">kinsol</span>(f, y0<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>;
                userdata<span class="pl-k">::</span><span class="pl-c1">Any</span> <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
                linear_solver<span class="pl-k">=</span><span class="pl-c1">:Dense</span>, jac_upper<span class="pl-k">=</span><span class="pl-c1">0</span>, jac_lower<span class="pl-k">=</span><span class="pl-c1">0</span>,
                stored_upper <span class="pl-k">=</span> jac_upper <span class="pl-k">+</span> jac_lower)</pre></div>
<p>where <code>f(res,y)</code> is an in-place function that computes the residual <code>f(y)-res=0</code>,
and KINSOL attempts to find <code>y</code> such that <code>res=0</code>. This method is generally
quite fast and the choice <code>linear_solver=:Band</code> is well-suited for problems
with a banded Jacobian (you must specify the upper and lower band sizes). However,
this is not as robust as many other techniques like trust-region methods, and
thus we recommend <a href="https://github.com/JuliaNLSolvers/NLsolve.jl">NLsolve.jl</a> for
more general nonlinear solving.</p>
<h2><a id="user-content-direct-api" class="anchor" aria-hidden="true" href="#direct-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Direct API</h2>
<p>This package closely follows the Sundials C API. At a slightly higher
level, many (but not all) Sundials.jl functions support passing Julia
objects (like <code>Array</code>s) instead of Sundials objects (like <code>N_Vector</code>s).
The Julia package <a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a> was
used to wrap Sundials. This directly uses Sundials' headers sort-of
like SWIG. Thus the general
<a href="https://computation.llnl.gov/casc/sundials/documentation/documentation.html" rel="nofollow">C documentation</a>
is the documentation for the direct API. See the
<a href="https://github.com/JuliaLang/Sundials.jl/blob/master/test">test directory</a> for usage examples
of the direct interface.</p>
<p>For the wrapping
code, see
<a href="https://github.com/JuliaLang/Sundials.jl/blob/master/src/wrap_sundials.jl">src/wrap_sundials.jl</a>.
Because of Clang.jl, Sundials.jl provides almost full coverage of the Sundials library
(the serial version). A few things to note:</p>
<ul>
<li>Macros like <code>DENSE_ELEM</code> are not available.</li>
<li>Nothing is exported from the module. You need to put <code>Sundials.</code>
in front of everything.</li>
<li>The parallel versions of Sundials which require different <code>N_Vector</code>
types have not been wrapped.</li>
</ul>
<h2><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Citing</h2>
<p>If you use this library, please cite both Sundials and the JuliaDiffEq project.</p>
<ul>
<li>
<p>Rackauckas, C. &amp; Nie, Q., (2017). DifferentialEquations.jl – A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia. Journal of Open Research Software. 5(1), p.15. DOI: <a href="http://doi.org/10.5334/jors.151" rel="nofollow">http://doi.org/10.5334/jors.151</a></p>
</li>
<li>
<p>A. C. Hindmarsh, P. N. Brown, K. E. Grant, S. L. Lee, R. Serban, D. E. Shumaker, and C. S. Woodward, “SUNDIALS: Suite of Nonlinear and Differential/Algebraic Equation Solvers,” ACM Transactions on Mathematical Software, 31(3), pp. 363-396, 2005. Also available as LLNL technical report UCRL-JP-200037.</p>
</li>
</ul>
</article></div>