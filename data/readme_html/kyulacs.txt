<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kyulacsjl" class="anchor" aria-hidden="true" href="#kyulacsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a href="https://github.com/AtelierArith/Kyulacs.jl">Kyulacs.jl</a></h1>
<p dir="auto"><a href="https://github.com/AtelierArith/Kyulacs.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/AtelierArith/Kyulacs.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://AtelierArith.github.io/Kyulacs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://AtelierArith.github.io/Kyulacs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Unofficial Julia interface for <a href="https://github.com/qulacs/qulacs">qulacs</a>.</p>
<h1 dir="auto"><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prerequisites</h1>
<ol dir="auto">
<li>Install Python and <code>qulacs</code> &gt;= 0.5.1, <code>qulacsvis</code> &gt;= 0.3.2 via</li>
</ol>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip3 install qulacs qulacsvis"><pre>$ <span class="pl-s1">pip3 install qulacs qulacsvis</span></pre></div>
<ol start="2" dir="auto">
<li>Install Julia. If you're Julian, you can skip this step.</li>
</ol>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ pip3 install jill # A cross-platform installer for Pythonista
$ jill install 1.8"><pre>$ <span class="pl-s1">pip3 install jill <span class="pl-c"><span class="pl-c">#</span> A cross-platform installer for Pythonista</span></span>
$ <span class="pl-s1">jill install 1.8</span></pre></div>
<p dir="auto">After that you're supposed to add <code>${HOME}/.local/bin</code> to your <code>$PATH</code> environment variable. You'll see the result below:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ which julia
$ ~/.local/bin/julia
$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia&gt; println(&quot;Hello&quot;)
Hello

julia&gt; exit()"><pre>$ <span class="pl-s1">which julia</span>
$ <span class="pl-s1"><span class="pl-k">~</span>/.local/bin/julia</span>
$ <span class="pl-s1">julia</span>
<span class="pl-c1">               _</span>
<span class="pl-c1">   _       _ _(_)_     |  Documentation: https://docs.julialang.org</span>
<span class="pl-c1">  (_)     | (_) (_)    |</span>
<span class="pl-c1">   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.</span>
<span class="pl-c1">  | | | | | | |/ _` |  |</span>
<span class="pl-c1">  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)</span>
<span class="pl-c1"> _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release</span>
<span class="pl-c1">|__/                   |</span>

<span class="pl-c1">julia&gt; println("Hello")</span>
<span class="pl-c1">Hello</span>

<span class="pl-c1">julia&gt; exit()</span></pre></div>
<ol start="3" dir="auto">
<li>Install PyCall</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia&gt; ENV[&quot;PYTHON&quot;] = Sys.which(&quot;python3&quot;)
julia&gt; using Pkg; Pkg.add(&quot;PyCall&quot;)"><pre lang="conosle" class="notranslate"><code>$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia&gt; ENV["PYTHON"] = Sys.which("python3")
julia&gt; using Pkg; Pkg.add("PyCall")
</code></pre></div>
<p dir="auto">Having trouble with the error messages <code>ImportError: No module named site</code>? Did you install Python via <code>pyenv</code> or <code>asdf</code>? Please re-install or install another Python again with <code>CONFIGURE_OPTS="--enable-shared"</code> option. Namely run one of the following:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ CONFIGURE_OPTS=&quot;--enable-shared&quot; pyenv 3.8.11
$ CONFIGURE_OPTS=&quot;--enable-shared&quot; asdf install python 3.8.11"><pre class="notranslate"><code>$ CONFIGURE_OPTS="--enable-shared" pyenv 3.8.11
$ CONFIGURE_OPTS="--enable-shared" asdf install python 3.8.11
</code></pre></div>
<ol start="4" dir="auto">
<li>Install Kyulacs.jl</li>
</ol>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ git clone https://github.com/AtelierArith/Kyulacs.jl.git
$ cd Kyulacs.jl
$ julia --project=@. -e 'using Pkg; Pkg.instantiate()'
$ julia --project=@. -e 'using Pkg; Pkg.test()'"><pre lang="conosle" class="notranslate"><code>$ git clone https://github.com/AtelierArith/Kyulacs.jl.git
$ cd Kyulacs.jl
$ julia --project=@. -e 'using Pkg; Pkg.instantiate()'
$ julia --project=@. -e 'using Pkg; Pkg.test()'
</code></pre></div>
<h1 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use</h1>
<p dir="auto">Let's assume you've written a Python code which is similar to <a href="https://github.com/qulacs/qulacs#python-sample-code">Python sample code</a> given by qulacs.</p>
<div class="highlight highlight-source-python notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# examples/readme_example.py
from qulacs import Observable, QuantumCircuit, QuantumState
from qulacs.gate import Y, CNOT, merge

state = QuantumState(3)
seed = 0  # set random seed
state.set_Haar_random_state(seed)

circuit = QuantumCircuit(3)
circuit.add_X_gate(0)
merged_gate = merge(CNOT(0, 1), Y(1))
circuit.add_gate(merged_gate)
circuit.add_RX_gate(1, 0.5)
circuit.update_quantum_state(state)

observable = Observable(3)
observable.add_operator(2.0, &quot;X 2 Y 1 Z 0&quot;)
observable.add_operator(-3.0, &quot;Z 2&quot;)
value = observable.get_expectation_value(state)
print(value)
"><pre><span class="pl-c"># examples/readme_example.py</span>
<span class="pl-k">from</span> <span class="pl-s1">qulacs</span> <span class="pl-k">import</span> <span class="pl-v">Observable</span>, <span class="pl-v">QuantumCircuit</span>, <span class="pl-v">QuantumState</span>
<span class="pl-k">from</span> <span class="pl-s1">qulacs</span>.<span class="pl-s1">gate</span> <span class="pl-k">import</span> <span class="pl-v">Y</span>, <span class="pl-v">CNOT</span>, <span class="pl-s1">merge</span>

<span class="pl-s1">state</span> <span class="pl-c1">=</span> <span class="pl-v">QuantumState</span>(<span class="pl-c1">3</span>)
<span class="pl-s1">seed</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span>  <span class="pl-c"># set random seed</span>
<span class="pl-s1">state</span>.<span class="pl-en">set_Haar_random_state</span>(<span class="pl-s1">seed</span>)

<span class="pl-s1">circuit</span> <span class="pl-c1">=</span> <span class="pl-v">QuantumCircuit</span>(<span class="pl-c1">3</span>)
<span class="pl-s1">circuit</span>.<span class="pl-en">add_X_gate</span>(<span class="pl-c1">0</span>)
<span class="pl-s1">merged_gate</span> <span class="pl-c1">=</span> <span class="pl-en">merge</span>(<span class="pl-v">CNOT</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), <span class="pl-v">Y</span>(<span class="pl-c1">1</span>))
<span class="pl-s1">circuit</span>.<span class="pl-en">add_gate</span>(<span class="pl-s1">merged_gate</span>)
<span class="pl-s1">circuit</span>.<span class="pl-en">add_RX_gate</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>)
<span class="pl-s1">circuit</span>.<span class="pl-en">update_quantum_state</span>(<span class="pl-s1">state</span>)

<span class="pl-s1">observable</span> <span class="pl-c1">=</span> <span class="pl-v">Observable</span>(<span class="pl-c1">3</span>)
<span class="pl-s1">observable</span>.<span class="pl-en">add_operator</span>(<span class="pl-c1">2.0</span>, <span class="pl-s">"X 2 Y 1 Z 0"</span>)
<span class="pl-s1">observable</span>.<span class="pl-en">add_operator</span>(<span class="pl-c1">-</span><span class="pl-c1">3.0</span>, <span class="pl-s">"Z 2"</span>)
<span class="pl-s1">value</span> <span class="pl-c1">=</span> <span class="pl-s1">observable</span>.<span class="pl-en">get_expectation_value</span>(<span class="pl-s1">state</span>)
<span class="pl-en">print</span>(<span class="pl-s1">value</span>)</pre></div>
<p dir="auto">You can try this code out of the box even if you are not familiar with quantum computing.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ cd /path/to/this/repository
$ julia --project=@. examples/readme_example.jl"><pre lang="conosle" class="notranslate"><code>$ cd /path/to/this/repository
$ julia --project=@. examples/readme_example.jl
</code></pre></div>
<p dir="auto">In Julia, we can achieve the same functionality with <code>Kyulacs</code> package.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# examples/readme_example.jl
using Kyulacs: Observable, QuantumCircuit, QuantumState
using Kyulacs.Gate: CNOT, Y, merge

state = QuantumState(3)
seed = 0  # set random seed
state.set_Haar_random_state(seed)

circuit = QuantumCircuit(3)
circuit.add_X_gate(0)
merged_gate = merge(CNOT(0, 1), Y(1))
circuit.add_gate(merged_gate)
circuit.add_RX_gate(1, 0.5)
circuit.update_quantum_state(state)

observable = Observable(3)
observable.add_operator(2.0, &quot;X 2 Y 1 Z 0&quot;)
observable.add_operator(-3.0, &quot;Z 2&quot;)
value = observable.get_expectation_value(state)
println(value)"><pre><span class="pl-c"><span class="pl-c">#</span> examples/readme_example.jl</span>
<span class="pl-k">using</span> Kyulacs<span class="pl-k">:</span> Observable, QuantumCircuit, QuantumState
<span class="pl-k">using</span> Kyulacs<span class="pl-k">.</span>Gate<span class="pl-k">:</span> CNOT, Y, merge

state <span class="pl-k">=</span> <span class="pl-c1">QuantumState</span>(<span class="pl-c1">3</span>)
seed <span class="pl-k">=</span> <span class="pl-c1">0</span>  <span class="pl-c"><span class="pl-c">#</span> set random seed</span>
state<span class="pl-k">.</span><span class="pl-c1">set_Haar_random_state</span>(seed)

circuit <span class="pl-k">=</span> <span class="pl-c1">QuantumCircuit</span>(<span class="pl-c1">3</span>)
circuit<span class="pl-k">.</span><span class="pl-c1">add_X_gate</span>(<span class="pl-c1">0</span>)
merged_gate <span class="pl-k">=</span> <span class="pl-c1">merge</span>(<span class="pl-c1">CNOT</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>), <span class="pl-c1">Y</span>(<span class="pl-c1">1</span>))
circuit<span class="pl-k">.</span><span class="pl-c1">add_gate</span>(merged_gate)
circuit<span class="pl-k">.</span><span class="pl-c1">add_RX_gate</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0.5</span>)
circuit<span class="pl-k">.</span><span class="pl-c1">update_quantum_state</span>(state)

observable <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-c1">3</span>)
observable<span class="pl-k">.</span><span class="pl-c1">add_operator</span>(<span class="pl-c1">2.0</span>, <span class="pl-s"><span class="pl-pds">"</span>X 2 Y 1 Z 0<span class="pl-pds">"</span></span>)
observable<span class="pl-k">.</span><span class="pl-c1">add_operator</span>(<span class="pl-k">-</span><span class="pl-c1">3.0</span>, <span class="pl-s"><span class="pl-pds">"</span>Z 2<span class="pl-pds">"</span></span>)
value <span class="pl-k">=</span> observable<span class="pl-k">.</span><span class="pl-c1">get_expectation_value</span>(state)
<span class="pl-c1">println</span>(value)</pre></div>
<p dir="auto">Have a try!!!</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ cd /path/to/this/repository
$ julia -e &quot;using InteractiveUtils; versioninfo()&quot;
Julia Version 1.7.2
Commit bf53498635 (2022-02-06 15:21 UTC)
Platform Info:
  OS: macOS (x86_64-apple-darwin19.5.0)
  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-12.0.1 (ORCJIT, skylake)
$ julia --project=@. examples/readme_example.jl"><pre>$ <span class="pl-s1"><span class="pl-c1">cd</span> /path/to/this/repository</span>
$ <span class="pl-s1">julia -e <span class="pl-s"><span class="pl-pds">"</span>using InteractiveUtils; versioninfo()<span class="pl-pds">"</span></span></span>
<span class="pl-c1">Julia Version 1.7.2</span>
<span class="pl-c1">Commit bf53498635 (2022-02-06 15:21 UTC)</span>
<span class="pl-c1">Platform Info:</span>
<span class="pl-c1">  OS: macOS (x86_64-apple-darwin19.5.0)</span>
<span class="pl-c1">  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz</span>
<span class="pl-c1">  WORD_SIZE: 64</span>
<span class="pl-c1">  LIBM: libopenlibm</span>
<span class="pl-c1">  LLVM: libLLVM-12.0.1 (ORCJIT, skylake)</span>
$ <span class="pl-s1">julia --project=@. examples/readme_example.jl</span></pre></div>
<p dir="auto">These are pretty much the same thing. In fact, <code>diff</code> tells these are almost same.</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ diff readme_example.py readme_example.jl
1,3c1,3
&lt; # readme_example.py
&lt; from qulacs import Observable, QuantumCircuit, QuantumState
&lt; from qulacs.gate import Y, CNOT, merge
---
&gt; # readme_example.jl
&gt; using Kyulacs: Observable, QuantumCircuit, QuantumState
&gt; using Kyulacs.Gate: CNOT, Y, merge
21c21
&lt; print(value)
---
&gt; println(value)"><pre>$ <span class="pl-s1">diff readme_example.py readme_example.jl</span>
<span class="pl-c1">1,3c1,3</span>
<span class="pl-c1">&lt; # readme_example.py</span>
<span class="pl-c1">&lt; from qulacs import Observable, QuantumCircuit, QuantumState</span>
<span class="pl-c1">&lt; from qulacs.gate import Y, CNOT, merge</span>
<span class="pl-c1">---</span>
&gt; <span class="pl-s1"><span class="pl-c"><span class="pl-c">#</span> readme_example.jl</span></span>
&gt; <span class="pl-s1">using Kyulacs: Observable, QuantumCircuit, QuantumState</span>
&gt; <span class="pl-s1">using Kyulacs.Gate: CNOT, Y, merge</span>
<span class="pl-c1">21c21</span>
<span class="pl-c1">&lt; print(value)</span>
<span class="pl-c1">---</span>
&gt; <span class="pl-s1">println(value)</span></pre></div>
<h1 dir="auto"><a id="user-content-code-design" class="anchor" aria-hidden="true" href="#code-design"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Code Design</h1>
<p dir="auto">When you want migrate your code from Python to Julia, the following table may help you:</p>
<table>
<thead>
<tr>
<th>Python</th>
<th>Julia</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>from qulacs import something</code></td>
<td><code>using Kyulacs: something</code></td>
</tr>
<tr>
<td><code>from qulacs.circuit import something</code></td>
<td><code>using Kyulacs.Gate: something</code></td>
</tr>
<tr>
<td><code>from qulacs.gate import something</code></td>
<td><code>using Kyulacs.Gate: something</code></td>
</tr>
<tr>
<td><code>from qulacs.observable import something</code></td>
<td><code>using Kyulacs.ObservableFunctions: something</code></td>
</tr>
<tr>
<td><code>from qulacs.quantum_operator import something</code></td>
<td><code>using Kyulacs.QuantumOperator: something</code></td>
</tr>
<tr>
<td><code>from qulacs.state import something</code></td>
<td><code>using Kyulacs.State: something</code></td>
</tr>
<tr>
<td><code>from qulacsvis.visualization import something</code></td>
<td><code>using Kyulacs.Vis: something</code></td>
</tr>
</tbody>
</table>
<p dir="auto">If you feel <code>using Kyulacs.ObservableFunctions</code> is too exaggerated. Please send your feedback/idea to <a href="https://github.com/AtelierArith/Kyulacs.jl/issues">our issue tracker</a>.</p>
<h1 dir="auto"><a id="user-content-gpu-api" class="anchor" aria-hidden="true" href="#gpu-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GPU API</h1>
<p dir="auto"><code>using Kyulacs.GPU</code> will export <code>StateVectorGpu</code> and <code>QuantumStateGpu</code> that wraps <code>qulacs.StateVectorGpu</code> and <code>qulacs.QuantumStateGpu</code> respectively.</p>
<h1 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h1>
<p dir="auto">Kyulacs.jl also supports <code>qulacsvis</code> integration. The statement <code>using Kyulacs.Vis</code> allows us to use Python API under <code>qulacsvis.visualization</code>. Consider the following Julia code:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Kyulacs: ParametricQuantumCircuit

# exports `circuit_drawer`
using Kyulacs.Vis

nqubits = 2
circuit = ParametricQuantumCircuit(nqubits)
circuit.add_parametric_RY_gate(0, 0.0)
circuit.add_parametric_RY_gate(1, 0.0)

circuit.add_parametric_RY_gate(0, 0.0)
circuit.add_CNOT_gate(0, 1)
circuit.add_parametric_RY_gate(0, 0.0)

circuit_drawer(circuit)"><pre><span class="pl-k">using</span> Kyulacs<span class="pl-k">:</span> ParametricQuantumCircuit

<span class="pl-c"><span class="pl-c">#</span> exports `circuit_drawer`</span>
<span class="pl-k">using</span> Kyulacs<span class="pl-k">.</span>Vis

nqubits <span class="pl-k">=</span> <span class="pl-c1">2</span>
circuit <span class="pl-k">=</span> <span class="pl-c1">ParametricQuantumCircuit</span>(nqubits)
circuit<span class="pl-k">.</span><span class="pl-c1">add_parametric_RY_gate</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0.0</span>)
circuit<span class="pl-k">.</span><span class="pl-c1">add_parametric_RY_gate</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0.0</span>)

circuit<span class="pl-k">.</span><span class="pl-c1">add_parametric_RY_gate</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0.0</span>)
circuit<span class="pl-k">.</span><span class="pl-c1">add_CNOT_gate</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
circuit<span class="pl-k">.</span><span class="pl-c1">add_parametric_RY_gate</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0.0</span>)

<span class="pl-c1">circuit_drawer</span>(circuit)</pre></div>
<p dir="auto">We'll get:</p>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="   ___     ___             ___
  |pRY|   |pRY|           |pRY|
--|   |---|   |-----●-----|   |--
  |___|   |___|     |     |___|
   ___             _|_
  |pRY|           |CX |
--|   |-----------|   |----------
  |___|           |___|
"><pre><span class="pl-c1">   ___     ___             ___</span>
<span class="pl-c1">  |pRY|   |pRY|           |pRY|</span>
<span class="pl-c1">--|   |---|   |-----●-----|   |--</span>
<span class="pl-c1">  |___|   |___|     |     |___|</span>
<span class="pl-c1">   ___             _|_</span>
<span class="pl-c1">  |pRY|           |CX |</span>
<span class="pl-c1">--|   |-----------|   |----------</span>
<span class="pl-c1">  |___|           |___|</span>
</pre></div>
<h1 dir="auto"><a id="user-content-docker" class="anchor" aria-hidden="true" href="#docker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Docker</h1>
<ul dir="auto">
<li>You can run Kyulacs.jl out of the box inside the official Julia Docker container:</li>
</ul>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ docker run --rm -it julia:1.8.3
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia&gt; using Pkg
julia&gt; pkg&quot;registry add General https://github.com/AtelierArith/Gallery.git&quot;
julia&gt; Pkg.add(&quot;Conda&quot;) # Install Conda.jl
julia&gt; using Conda
julia&gt; Conda.pip_interop(true)
julia&gt; Conda.pip(&quot;install&quot;, &quot;qulacs&quot;)
julia&gt; Conda.pip(&quot;install&quot;, &quot;qulacsvis&quot;)
julia&gt; using Kyulacs: Observable, QuantumCircuit, QuantumState
julia&gt; using Kyulacs.Gate: CNOT, Y, merge
julia&gt; state = QuantumState(3)
julia&gt; seed = 0  # set random seed
julia&gt; state.set_Haar_random_state(seed)
julia&gt; circuit = QuantumCircuit(3)
julia&gt; circuit.add_X_gate(0)
julia&gt; merged_gate = merge(CNOT(0, 1), Y(1))
julia&gt; circuit.add_gate(merged_gate)
julia&gt; circuit.add_RX_gate(1, 0.5)
julia&gt; circuit.update_quantum_state(state)
julia&gt; observable = Observable(3)
julia&gt; observable.add_operator(2.0, &quot;X 2 Y 1 Z 0&quot;)
julia&gt; observable.add_operator(-3.0, &quot;Z 2&quot;)
julia&gt; value = observable.get_expectation_value(state)"><pre>$ <span class="pl-s1">docker run --rm -it julia:1.8.3</span>
<span class="pl-c1">               _</span>
<span class="pl-c1">   _       _ _(_)_     |  Documentation: https://docs.julialang.org</span>
<span class="pl-c1">  (_)     | (_) (_)    |</span>
<span class="pl-c1">   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.</span>
<span class="pl-c1">  | | | | | | |/ _` |  |</span>
<span class="pl-c1">  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)</span>
<span class="pl-c1"> _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release</span>
<span class="pl-c1">|__/                   |</span>

<span class="pl-c1">julia&gt; using Pkg</span>
<span class="pl-c1">julia&gt; pkg"registry add General https://github.com/AtelierArith/Gallery.git"</span>
<span class="pl-c1">julia&gt; Pkg.add("Conda") # Install Conda.jl</span>
<span class="pl-c1">julia&gt; using Conda</span>
<span class="pl-c1">julia&gt; Conda.pip_interop(true)</span>
<span class="pl-c1">julia&gt; Conda.pip("install", "qulacs")</span>
<span class="pl-c1">julia&gt; Conda.pip("install", "qulacsvis")</span>
<span class="pl-c1">julia&gt; using Kyulacs: Observable, QuantumCircuit, QuantumState</span>
<span class="pl-c1">julia&gt; using Kyulacs.Gate: CNOT, Y, merge</span>
<span class="pl-c1">julia&gt; state = QuantumState(3)</span>
<span class="pl-c1">julia&gt; seed = 0  # set random seed</span>
<span class="pl-c1">julia&gt; state.set_Haar_random_state(seed)</span>
<span class="pl-c1">julia&gt; circuit = QuantumCircuit(3)</span>
<span class="pl-c1">julia&gt; circuit.add_X_gate(0)</span>
<span class="pl-c1">julia&gt; merged_gate = merge(CNOT(0, 1), Y(1))</span>
<span class="pl-c1">julia&gt; circuit.add_gate(merged_gate)</span>
<span class="pl-c1">julia&gt; circuit.add_RX_gate(1, 0.5)</span>
<span class="pl-c1">julia&gt; circuit.update_quantum_state(state)</span>
<span class="pl-c1">julia&gt; observable = Observable(3)</span>
<span class="pl-c1">julia&gt; observable.add_operator(2.0, "X 2 Y 1 Z 0")</span>
<span class="pl-c1">julia&gt; observable.add_operator(-3.0, "Z 2")</span>
<span class="pl-c1">julia&gt; value = observable.get_expectation_value(state)</span></pre></div>
<h1 dir="auto"><a id="user-content-appendix" class="anchor" aria-hidden="true" href="#appendix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Appendix</h1>
<h2 dir="auto"><a id="user-content-docker-1" class="anchor" aria-hidden="true" href="#docker-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Docker</h2>
<div class="highlight highlight-text-shell-session notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ git clone https://github.com/AtelierArith/Kyulacs.jl.git
$ cd Kyulacs.jl
$ make &amp;&amp; make test
$ make build-gpu &amp;&amp; make test-gpu # for gpu version"><pre>$ <span class="pl-s1">git clone https://github.com/AtelierArith/Kyulacs.jl.git</span>
$ <span class="pl-s1"><span class="pl-c1">cd</span> Kyulacs.jl</span>
$ <span class="pl-s1">make <span class="pl-k">&amp;&amp;</span> make <span class="pl-c1">test</span></span>
$ <span class="pl-s1">make build-gpu <span class="pl-k">&amp;&amp;</span> make test-gpu <span class="pl-c"><span class="pl-c">#</span> for gpu version</span></span></pre></div>
<h2 dir="auto"><a id="user-content-blog-post" class="anchor" aria-hidden="true" href="#blog-post"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Blog post</h2>
<ul dir="auto">
<li><a href="https://zenn.dev/terasakisatoshi/articles/983a7401524251" rel="nofollow">Zenn: (Japanese blog post)</a></li>
<li><a href="https://qiita.com/SatoshiTerasaki/items/9daca044ee4026f19a02" rel="nofollow">Qiita: (Japanese blog post)</a></li>
</ul>
<h1 dir="auto"><a id="user-content-sponsorship" class="anchor" aria-hidden="true" href="#sponsorship"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sponsorship</h1>
<p dir="auto">If you want to see more of our work, consider sponsoring us via <a href="https://github.com/sponsors/terasakisatoshi">Github sponsors</a>.</p>
</article></div>