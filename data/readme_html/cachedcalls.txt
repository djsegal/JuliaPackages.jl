<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cachedcalls" class="anchor" aria-hidden="true" href="#cachedcalls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CachedCalls</h1>
<p><a href="https://github.com/mzgubic/CachedCalls.jl/actions"><img src="https://github.com/mzgubic/CachedCalls.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width:100%;"></a></p>
<p>Functions that take a long time to run can slow down experimentation and code development.
Instead of running the same function with the same inputs multiple times, the result can be cached to disk and fetched when the function is run with the same arguments again.
A simple macro provides this functionality:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CachedCalls

variable = @cached_call f(args; kwargs)
"><pre><span class="pl-k">using</span> CachedCalls

variable <span class="pl-k">=</span> <span class="pl-c1">@cached_call</span> <span class="pl-c1">f</span>(args; kwargs)</pre></div>
<p>It works by hashing the macro name, values of arguments, and names and values of keyword arguments.</p>
<h2><a id="user-content-gotchas" class="anchor" aria-hidden="true" href="#gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gotchas</h2>
<p>A few things to consider before using the macro:</p>
<ul>
<li>Is <code>f</code> accessing global variables?</li>
</ul>
<p>The second time the macro is used the returned result may be unexpected (if the global variable has changed)</p>
<ul>
<li>Is <code>f</code> mutating its inputs or global variables?</li>
</ul>
<p>The second time the macro is used the inputs/globals will not be mutated.</p>
<ul>
<li>The inputs to the macro are considered the same if their hashes are the same.</li>
</ul>
<p>Notably, <code>hash(1) == hash(1.0)</code>, and similarly for <code>DataFrame</code>s that differ only by column names.
Additionally, function arguments are differentiated by name only.</p>
</article></div>