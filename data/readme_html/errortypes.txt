<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-errortypes" class="anchor" aria-hidden="true" href="#errortypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ErrorTypes</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jakobnissen/ErrorTypes.jl/workflows/CI/badge.svg"><img src="https://github.com/jakobnissen/ErrorTypes.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jakobnissen/ErrorTypes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cf27774af234e5cb9e549f30b5b7868b463042a046214b4dab5ce3d151d7def3/68747470733a2f2f636f6465636f762e696f2f67682f6a616b6f626e697373656e2f4572726f7254797065732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/jakobnissen/ErrorTypes.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://jakobnissen.github.io/ErrorTypes.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Rust-like safe error handling in Julia</em></p>
<p dir="auto">ErrorTypes is a simple implementation of Rust-like error handling in Julia. Its goal is to increase safety of Julia code internally in packages by providing easy-to-use, zero-cost handling for recoverable errors.</p>
<p dir="auto">Read more in the documentation.</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example usage</h2>
<p dir="auto">This simple example shows a function that has one obvious error state, namely that there is no second field. This can be modelled with the <code>Option</code> type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function second_csv_field(s::Union{String, SubString{String}})::Option{SubString{String}}
    p = nothing
    for i in 1:ncodeunits(s)
        if codeunit(s, i) == UInt8(',')
            isnothing(p) || return some(SubString(s, p, prevind(s, i))) 
            p = i + 1
        end
    end
    (isnothing(p) | (p == ncodeunits(s) + 1)) ? none : some(SubString(s, p, ncodeunits(s)))
end"><pre><span class="pl-k">function</span> <span class="pl-en">second_csv_field</span>(s<span class="pl-k">::</span><span class="pl-c1">Union{String, SubString{String}}</span>)<span class="pl-k">::</span><span class="pl-c1">Option{SubString{String}}</span>
    p <span class="pl-k">=</span> <span class="pl-c1">nothing</span>
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">ncodeunits</span>(s)
        <span class="pl-k">if</span> <span class="pl-c1">codeunit</span>(s, i) <span class="pl-k">==</span> <span class="pl-c1">UInt8</span>(<span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>)
            <span class="pl-c1">isnothing</span>(p) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">some</span>(<span class="pl-c1">SubString</span>(s, p, <span class="pl-c1">prevind</span>(s, i))) 
            p <span class="pl-k">=</span> i <span class="pl-k">+</span> <span class="pl-c1">1</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    (<span class="pl-c1">isnothing</span>(p) <span class="pl-k">|</span> (p <span class="pl-k">==</span> <span class="pl-c1">ncodeunits</span>(s) <span class="pl-k">+</span> <span class="pl-c1">1</span>)) <span class="pl-k">?</span> none <span class="pl-k">:</span> <span class="pl-c1">some</span>(<span class="pl-c1">SubString</span>(s, p, <span class="pl-c1">ncodeunits</span>(s)))
<span class="pl-k">end</span></pre></div>
<p dir="auto">This example shows usage of the type <code>Result</code>. When there are multiple error modes, we may encode the error state however we want, here in an <code>Enum</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# corresponds to the error codes of libdeflate
@enum DecompressError::UInt8 BadData TooShort TooLong

function decompress(outbytes, inbytes)::Result{Int32, DecompressError}
    (n_bytes, errorcode) = ccall( ... ) # Call omitted here, returns an (Int32, Int32)
    if !iszero(errorcode)
        return Err(DecompressError(errorcode - 1))
    else
        return Ok(n_bytes)
    end
end"><pre><span class="pl-c"><span class="pl-c">#</span> corresponds to the error codes of libdeflate</span>
<span class="pl-c1">@enum</span> DecompressError<span class="pl-k">::</span><span class="pl-c1">UInt8</span> BadData TooShort TooLong

<span class="pl-k">function</span> <span class="pl-en">decompress</span>(outbytes, inbytes)<span class="pl-k">::</span><span class="pl-c1">Result{Int32, DecompressError}</span>
    (n_bytes, errorcode) <span class="pl-k">=</span> <span class="pl-c1">ccall</span>( <span class="pl-k">...</span> ) <span class="pl-c"><span class="pl-c">#</span> Call omitted here, returns an (Int32, Int32)</span>
    <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">iszero</span>(errorcode)
        <span class="pl-k">return</span> <span class="pl-c1">Err</span>(<span class="pl-c1">DecompressError</span>(errorcode <span class="pl-k">-</span> <span class="pl-c1">1</span>))
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> <span class="pl-c1">Ok</span>(n_bytes)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">You can of course mix and match regular exceptions and error types. That is useful when you have both <em>unrecoverable</em> and <em>recoverable</em> errors. In the following example, I'm getting the first field of first row of a comma separated file. We expect the file and its header to be present, and the second row to be tab-separated, and will error if it's not, but a valid CSV file may contain no rows other than the header:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function first_field(io::IO)::Option{String}
    lines = eachline(io)
    if! startswith(first(iterate(lines)), &quot;#Name\t&quot;)
        error(&quot;In file, expected header to begin with: \&quot;#Name\\t\&quot;&quot;)
    end
    nextit = iterate(lines)
    isnothing(nextit) &amp;&amp; return none
    line = first(nextit)
    isempty(line) &amp;&amp; return none
    tab_pos::Int = findfirst(isequal('\t'), line)
    some(line[1:tab_pos-1])
end"><pre><span class="pl-k">function</span> <span class="pl-en">first_field</span>(io<span class="pl-k">::</span><span class="pl-c1">IO</span>)<span class="pl-k">::</span><span class="pl-c1">Option{String}</span>
    lines <span class="pl-k">=</span> <span class="pl-c1">eachline</span>(io)
    <span class="pl-k">if</span>! <span class="pl-c1">startswith</span>(<span class="pl-c1">first</span>(<span class="pl-c1">iterate</span>(lines)), <span class="pl-s"><span class="pl-pds">"</span>#Name<span class="pl-cce">\t</span><span class="pl-pds">"</span></span>)
        <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>In file, expected header to begin with: <span class="pl-cce">\"</span>#Name<span class="pl-cce">\\</span>t<span class="pl-cce">\"</span><span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    nextit <span class="pl-k">=</span> <span class="pl-c1">iterate</span>(lines)
    <span class="pl-c1">isnothing</span>(nextit) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> none
    line <span class="pl-k">=</span> <span class="pl-c1">first</span>(nextit)
    <span class="pl-c1">isempty</span>(line) <span class="pl-k">&amp;&amp;</span> <span class="pl-k">return</span> none
    tab_pos<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">findfirst</span>(<span class="pl-c1">isequal</span>(<span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\t</span><span class="pl-pds">'</span></span>), line)
    <span class="pl-c1">some</span>(line[<span class="pl-c1">1</span><span class="pl-k">:</span>tab_pos<span class="pl-k">-</span><span class="pl-c1">1</span>])
<span class="pl-k">end</span></pre></div>
<p dir="auto">Again, please read the documentation.</p>
</article></div>