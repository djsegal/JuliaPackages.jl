<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-iprofilejl" class="anchor" aria-hidden="true" href="#iprofilejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IProfile.jl</h1>
<p dir="auto">This package contains an "instrumenting profiler" for the <a href="http://julialang.org" title="Julia" rel="nofollow">Julia</a> language. Profilers
are mainly used for code optimization, particularly to find bottlenecks.</p>
<h3 dir="auto"><a id="user-content-sampling-profiler-is-now-in-base" class="anchor" aria-hidden="true" href="#sampling-profiler-is-now-in-base"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sampling profiler is now in base</h3>
<p dir="auto">This package used to contain a sampling profiler, but that has been moved to Julia proper.
The built-in sampling profiler has far fewer limitations than this package, and is recommended
over this one in essentially all cases.
See the <a href="http://docs.julialang.org/en/latest/manual/profile/" rel="nofollow">documentation</a> and <a href="http://docs.julialang.org/en/latest/stdlib/profile/" rel="nofollow">API reference</a>.</p>
<p dir="auto">Because the sampling profiler is so much better, I am not fixing bugs in this package anymore.
However, I am happy to accept pull requests.</p>
<h3 dir="auto"><a id="user-content-instrumenting-profiler" class="anchor" aria-hidden="true" href="#instrumenting-profiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Instrumenting profiler</h3>
<p dir="auto">The instrumenting profiler provides detailed information, including the number
of times each line gets executed and the total run time spent on that line.
However, the instrumenting profiler requires that your code be (automatically)
modified, by encapsulating it in "@iprofile begin...end". It also has a
significant performance cost.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Within Julia, use the package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;IProfile&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>IProfile<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">This starts similarly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using IProfile"><pre><span class="pl-k">using</span> IProfile</pre></div>
<p dir="auto">Here you encapsulate your code in a macro call:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@iprofile begin
function f1(x::Int)
  z = 0
  for j = 1:x
    z += j^2
  end
  return z
end

function f1(x::Float64)
  return x+2
end

function f1{T}(x::T)
  return x+5
end

f2(x) = 2*x
end     # @iprofile begin"><pre><span class="pl-c1">@iprofile</span> <span class="pl-k">begin</span>
<span class="pl-k">function</span> <span class="pl-en">f1</span>(x<span class="pl-k">::</span><span class="pl-c1">Int</span>)
  z <span class="pl-k">=</span> <span class="pl-c1">0</span>
  <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>x
    z <span class="pl-k">+=</span> j<span class="pl-k">^</span><span class="pl-c1">2</span>
  <span class="pl-k">end</span>
  <span class="pl-k">return</span> z
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">f1</span>(x<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
  <span class="pl-k">return</span> x<span class="pl-k">+</span><span class="pl-c1">2</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">f1</span><span class="pl-c1">{T}</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>)
  <span class="pl-k">return</span> x<span class="pl-k">+</span><span class="pl-c1">5</span>
<span class="pl-k">end</span>

<span class="pl-en">f2</span>(x) <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>x
<span class="pl-k">end</span>     <span class="pl-c"><span class="pl-c">#</span> @iprofile begin</span></pre></div>
<p dir="auto">Now load the file and execute the code you want to profile, e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f1(215)
for i = 1:100
  f1(3.5)
end
for i = 1:150
  f1(uint8(7))
end
for i = 1:125
  f2(11)
end"><pre><span class="pl-c1">f1</span>(<span class="pl-c1">215</span>)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
  <span class="pl-c1">f1</span>(<span class="pl-c1">3.5</span>)
<span class="pl-k">end</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">150</span>
  <span class="pl-c1">f1</span>(<span class="pl-c1">uint8</span>(<span class="pl-c1">7</span>))
<span class="pl-k">end</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">125</span>
  <span class="pl-c1">f2</span>(<span class="pl-c1">11</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">To view the execution times, type <code>@iprofile report</code>.</p>
<p dir="auto">Here are the various options you have for controlling profiling:</p>
<ul dir="auto">
<li><code>@iprofile report</code>: display cumulative profiling results</li>
<li><code>@iprofile clear</code>: clear all timings accumulated thus far (start from zero)</li>
<li><code>@iprofile off</code>: turn profiling off (there is no need to remove @iprofile begin ... end blocks)</li>
<li><code>@iprofile on</code>: turn profiling back on</li>
</ul>
<h3 dir="auto"><a id="user-content-tips-on-using-the-instrumenting-profiler" class="anchor" aria-hidden="true" href="#tips-on-using-the-instrumenting-profiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tips on using the instrumenting profiler</h3>
<p dir="auto">You should always discard the results of your first run: it may include the overhead needed to JIT-compile some of the subfunctions.</p>
<p dir="auto">The primary source of variability is the garbage collector---if it runs between two instrumentation lines, its execution time gets added to the time that your own line of code contributes. This can make a fast-running line seem puzzlingly slow. One good way to reduce the variance is to run gc() before profiling. However, if your code tends to accumulate a bunch of temporaries that need to be cleaned up in the middle of the run, then calling <code>gc()</code> at the beginning can cause the collector to run at the same point in the code each time, a misleading but consistent result. A different approach is to use multiple runs (without an explicit <code>gc()</code>) and hope that the collector runs at different points in each run. The cost of a given line is probably best reflected in those runs with shortest time for that line.</p>
<h3 dir="auto"><a id="user-content-limitations-of-the-instrumenting-profiler" class="anchor" aria-hidden="true" href="#limitations-of-the-instrumenting-profiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations of the instrumenting profiler</h3>
<p dir="auto">Instrumenting profiling adds a performance overhead which can be significant. You can prevent a subsection of your code from being profiled by encapsulating it inside a <code>begin ... end</code> block; in this case, the block as a whole is profiled, but the individual lines inside the block are not separately timed.</p>
<p dir="auto">The profiler tries to compensate for its overhead in the reported times. This naturally leads to some degree of uncertainty about the execution time of individual lines. More significantly, currently the profiler does not compensate for its own instrumentation in profiled subfunctions. Consequently, it’s recommended that you avoid profiling nested code as a chunk---you probably want to pick out individual functions or groups of functions to profile separately.</p>
<p dir="auto">Both limitations are addressed by the sampling profiler. Consequently, it's probably best to start with the sampling profiler, and then use the instrumenting profiler when detailed attention to a particular function is warranted.</p>
</article></div>