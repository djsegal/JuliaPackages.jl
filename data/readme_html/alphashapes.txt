<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-alphashapesjl" class="anchor" aria-hidden="true" href="#alphashapesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AlphaShapes.jl</h1>
<p>Basic implementation of alpha shapes in 2+ dimensions</p>
<table>
<thead>
<tr>
<th>Travis</th>
<th>CodeCov</th>
<th>Doc</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://travis-ci.com/harveydevereux/AlphaShapes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ac3429816bc7a78b640b7a353b68a69144cff35f14f3b5aab9acc04eec10d3bc/68747470733a2f2f7472617669732d63692e636f6d2f68617276657964657665726575782f416c7068615368617065732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/harveydevereux/AlphaShapes.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td><a href="https://codecov.io/gh/harveydevereux/AlphaShapes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/542ad3e84b99c32a95379993479d52f9b993a5fd47fc406561b0e3d3460f76c8/68747470733a2f2f636f6465636f762e696f2f67682f68617276657964657665726575782f416c7068615368617065732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/harveydevereux/AlphaShapes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
<td><a href="https://harveydevereux.github.io/AlphaShapes.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h3><a id="user-content-functionality" class="anchor" aria-hidden="true" href="#functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functionality:</h3>
<p>AlphaShape is a function which returns the alpha shape from a set of N dimensional points</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AlphaShape(X;α=nothing,search=(0.0, 10.0),MaxSteps=100)
"><pre><span class="pl-c1">AlphaShape</span>(X;α<span class="pl-k">=</span><span class="pl-c1">nothing</span>,search<span class="pl-k">=</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>),MaxSteps<span class="pl-k">=</span><span class="pl-c1">100</span>)</pre></div>
<p>Returns a list of triangles (3 by N+1) arrays with vertices addressed by [v,:].</p>
<p>Search is a tuple passed to the optimiser as the range of alpha values to search, whilst MaxSteps is the soft maximum
number of steps the optimiser takes (may take many more if each iteration is very quick)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="AlphaShapeArea(A)
"><pre><span class="pl-c1">AlphaShapeArea</span>(A)</pre></div>
<p>Computes the area of the alpha shape from the triangulation returned from AlphaShape</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage:</h3>
<p>Given a set of N-D points, X ~ npoints by N, compute the alpha shape (by automatically optimising alpha) using</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = AlphaShape(X)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">AlphaShape</span>(X)</pre></div>
<p>To choose an alpha value simply pass it</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = AlphaShape(X,α=1.0)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">AlphaShape</span>(X,α<span class="pl-k">=</span><span class="pl-c1">1.0</span>)</pre></div>
<h3><a id="user-content-deps" class="anchor" aria-hidden="true" href="#deps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deps:</h3>
<ul>
<li><a href="https://github.com/gridap/MiniQhull.jl">MiniQhull.jl</a> for Delaunay Triangulations in any dimension</li>
<li><a href="https://github.com/robertfeldt/BlackBoxOptim.jl">BlackBoxOptim.jl</a> for alpha value optimisation</li>
</ul>
<h3><a id="user-content-normal-donut-example" class="anchor" aria-hidden="true" href="#normal-donut-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>"Normal donut" <a href="https://github.com/harveydevereux/AlphaShapes.jl/blob/master/examples/examples.jl">Example</a></h3>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/harveydevereux/AlphaShapes.jl/blob/master/examples/Example.png"><img src="https://github.com/harveydevereux/AlphaShapes.jl/raw/master/examples/Example.png" alt="example" style="max-width:100%;"></a></p>
</article></div>