<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-lorentzvectorsjl" class="anchor" aria-hidden="true" href="#lorentzvectorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LorentzVectors.jl</h1>
<p><a href="https://travis-ci.org/JLTastet/LorentzVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5e3942ebbc3b88cffbd268625e08c17cc1bb8d99/68747470733a2f2f7472617669732d63692e6f72672f4a4c5461737465742f4c6f72656e747a566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JLTastet/LorentzVectors.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JLTastet/LorentzVectors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3dfe25fec7cefd970158d402d801f39859505d4a/687474703a2f2f636f6465636f762e696f2f6769746875622f4a4c5461737465742f4c6f72656e747a566563746f72732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JLTastet/LorentzVectors.jl/coverage.svg?branch=master" style="max-width:100%;"></a>
<a href="https://www.tidyverse.org/lifecycle/#maturing" rel="nofollow"><img src="https://camo.githubusercontent.com/646b448bd38200d1c7f3cd622b3cb9aa79d5abe0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width:100%;"></a></p>
<p>This package defines the <code>LorentzVector{T}</code> and <code>SpatialVector{T}</code> types for use in computations involving Special Relativity. These types are statically allocated and should therefore be very fast.</p>
<p>The usual algebraic operations are implemented, as well as some domain-specific functions (such as <code>boost</code>) and many convenience methods.</p>
<p>The signature of the Minkowski metric (used for the inner product) is <code>+,-,-,-</code>.</p>
<h2><a id="user-content-arrow_down-installing" class="anchor" aria-hidden="true" href="#arrow_down-installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><g-emoji class="g-emoji" alias="arrow_down" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png">⬇️</g-emoji> Installing</h2>
<p>This package is now registered. To install it, just issue the following command from the Julia REPL:</p>
<pre><code>(v1.0) pkg&gt; add LorentzVectors
</code></pre>
<h2><a id="user-content-information_source-usage" class="anchor" aria-hidden="true" href="#information_source-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><g-emoji class="g-emoji" alias="information_source" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png">ℹ️</g-emoji> Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LorentzVectors

p1 <span class="pl-k">=</span> <span class="pl-c1">Vec4</span>(<span class="pl-c1">10</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">10</span>)
p2 <span class="pl-k">=</span> <span class="pl-c1">Vec4</span>(<span class="pl-c1">7</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>, <span class="pl-c1">5</span>)

m1 <span class="pl-k">=</span> <span class="pl-k">√</span>(p1<span class="pl-k">⋅</span>p1)
<span class="pl-c1">@assert</span> m1 <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-c"><span class="pl-c">#</span> p1 is lightlike, so its mass must be zero</span>
m2 <span class="pl-k">=</span> <span class="pl-k">√</span>(p2<span class="pl-k">⋅</span>p2)
<span class="pl-c1">@assert</span> m2 <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>

β<span class="pl-c1">1</span> <span class="pl-k">=</span> <span class="pl-c1">Vec3</span>(p1<span class="pl-k">/</span>p1<span class="pl-k">.</span>t)
<span class="pl-c1">@assert</span> <span class="pl-c1">norm</span>(β<span class="pl-c1">1</span>) <span class="pl-k">≈</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> Check that p1 travels at the speed of light</span>

p2_rest <span class="pl-k">=</span> <span class="pl-c1">boost</span>(p2, p2<span class="pl-k">/</span>p2<span class="pl-k">.</span>t) <span class="pl-c"><span class="pl-c">#</span> Boost p2 to its rest frame</span>
<span class="pl-c1">@assert</span> p2_rest<span class="pl-k">.</span>t <span class="pl-k">≈</span> m2 <span class="pl-c"><span class="pl-c">#</span> Check that its energy at rest is equal to its mass</span>

<span class="pl-c1">@assert</span> <span class="pl-c1">boost</span>(p2, <span class="pl-c1">zero</span>(Vec3)) <span class="pl-k">≈</span> p2 <span class="pl-c"><span class="pl-c">#</span> Identity boost</span>

p_tot <span class="pl-k">=</span> p1 <span class="pl-k">+</span> p2
β_cm <span class="pl-k">=</span> p_tot<span class="pl-k">/</span>p_tot<span class="pl-k">.</span>t <span class="pl-c"><span class="pl-c">#</span> Compute the velocity of the center of mass (CM)</span>
p1_cm <span class="pl-k">=</span> <span class="pl-c1">boost</span>(p1, β_cm) <span class="pl-c"><span class="pl-c">#</span> Boost p1 and p2 to the CM frame</span>
p2_cm <span class="pl-k">=</span> <span class="pl-c1">boost</span>(p2, β_cm)
<span class="pl-c1">@assert</span> <span class="pl-c1">norm</span>(<span class="pl-c1">Vec3</span>(p1_cm <span class="pl-k">+</span> p2_cm)) <span class="pl-k">&lt;</span> <span class="pl-c1">1e-12</span> <span class="pl-c"><span class="pl-c">#</span> Check that the spatial parts cancel in the CM</span>

u1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Vec3{Float64}) <span class="pl-c"><span class="pl-c">#</span> Generate a random 3-vector on the unit sphere</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">norm</span>(u1) <span class="pl-k">≈</span> <span class="pl-c1">1</span>
u2 <span class="pl-k">=</span> <span class="pl-c1">normalize</span>(<span class="pl-c1">Vec3</span>(p2)) <span class="pl-c"><span class="pl-c">#</span> Extract the spatial direction of p2</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">norm</span>(u2) <span class="pl-k">≈</span> <span class="pl-c1">1</span>

<span class="pl-c1">@assert</span> Vec4 <span class="pl-k">===</span> LorentzVector <span class="pl-c"><span class="pl-c">#</span> Long forms</span>
<span class="pl-c1">@assert</span> Vec3 <span class="pl-k">===</span> SpatialVector

x <span class="pl-k">=</span> <span class="pl-c1">Vec3</span>(<span class="pl-c1">1</span>f0, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>) <span class="pl-c"><span class="pl-c">#</span> Float64 is used by default, but it can be overriden</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">typeof</span>(x) <span class="pl-k">==</span> Vec3{Float32}</pre></div>
<p>For more examples, have a look in the <code>test</code> directory.</p>
<h2><a id="user-content-heart-contributing" class="anchor" aria-hidden="true" href="#heart-contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><g-emoji class="g-emoji" alias="heart" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png">❤️</g-emoji> Contributing</h2>
<p>All contributions and suggestions are welcome ! Just open an issue or directly send a PR.</p>
</article></div>