<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/tiagopereira/WENO4.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/tiagopereira/WENO4.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tiagopereira/WENO4.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2e2a78c97715ba70ed97db7c9e3d0b82246c4b3404923da8cfb4b77e95b01888/68747470733a2f2f636f6465636f762e696f2f67682f746961676f706572656972612f57454e4f342e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tiagopereira/WENO4.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-weno4jl" class="anchor" aria-hidden="true" href="#weno4jl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WENO4.jl</h1>
<p dir="auto">A package to perform interpolation using the 4th order Weighted Essentially Non-Oscillatory (WENO) scheme of <a href="https://ui.adsabs.harvard.edu/abs/2019A%26A...624A.104J/abstract" rel="nofollow">Janett et al (2019)</a>. Based on <a href="https://github.com/Goobley/Weno4Interpolation">Weno4Interpolation</a> by Chris Osborne.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">From the Julia REPL:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;WENO4&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>WENO4<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h2>
<p dir="auto">Create a grid <code>xp</code> and an array <code>fp</code> of values to be interpolated</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xp = 1:0.2:5
f(x) = log(x)
fp = f.(xp)"><pre>xp <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">5</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">log</span>(x)
fp <span class="pl-k">=</span> <span class="pl-c1">f</span>.(xp)</pre></div>
<p dir="auto">Interpolate to a new set of points <code>xs</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xs = [1.1, 2.1, 3.1, 4.1]
result = interpolate_weno4(xs, xp, fp)"><pre>xs <span class="pl-k">=</span> [<span class="pl-c1">1.1</span>, <span class="pl-c1">2.1</span>, <span class="pl-c1">3.1</span>, <span class="pl-c1">4.1</span>]
result <span class="pl-k">=</span> <span class="pl-c1">interpolate_weno4</span>(xs, xp, fp)</pre></div>
<h2 dir="auto"><a id="user-content-example-results" class="anchor" aria-hidden="true" href="#example-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example results</h2>
<p dir="auto">The following comparison shows how WENO4 performs compared with linear and Monotonic interpolation (from <a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a>) and a cubic spline (from <a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a>) for different functions randomly sampled at 17 points.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/comparison_plots.png"><img src="docs/src/assets/comparison_plots.png" alt="interpolation examples" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Performance</h2>
<p dir="auto">WENO4's performance is very competitive, especially for irregular grids where it performs in many cases as fast as linear interpolation from Interpolations.jl. The following table shows some benchmarks comparing the median times of different interpolation methods for different numbers of randomly-spaced input nodes (<code>Npoints</code>) and equidistant points to interpolate (<code>Ninterp</code>):</p>
<table>
<thead>
<tr>
<th align="right"><code>Npoints</code></th>
<th align="right"><code>Ninterp</code></th>
<th align="right">Linear</th>
<th align="right">WENO4</th>
<th align="right">Monotonic</th>
<th align="right">Cubic spline</th>
</tr>
</thead>
<tbody>
<tr>
<td align="right">10</td>
<td align="right">10</td>
<td align="right">0.21</td>
<td align="right">0.09</td>
<td align="right">0.18</td>
<td align="right">0.69</td>
</tr>
<tr>
<td align="right">10</td>
<td align="right">100</td>
<td align="right">0.44</td>
<td align="right">0.55</td>
<td align="right">0.67</td>
<td align="right">1.54</td>
</tr>
<tr>
<td align="right">100</td>
<td align="right">100</td>
<td align="right">1.00</td>
<td align="right">1.06</td>
<td align="right">1.42</td>
<td align="right">4.35</td>
</tr>
<tr>
<td align="right">100</td>
<td align="right">10000</td>
<td align="right">76.96</td>
<td align="right">68.43</td>
<td align="right">93.52</td>
<td align="right">122.74</td>
</tr>
<tr>
<td align="right">500</td>
<td align="right">500</td>
<td align="right">4.50</td>
<td align="right">7.43</td>
<td align="right">10.90</td>
<td align="right">26.41</td>
</tr>
<tr>
<td align="right">500</td>
<td align="right">10000</td>
<td align="right">83.60</td>
<td align="right">90.00</td>
<td align="right">121.49</td>
<td align="right">141.00</td>
</tr>
</tbody>
</table>
<p dir="auto">The times were normalised to the linear interpolation times for the case of <code>(Npoints=100, Ninterp=100)</code>. Linear interpolation was performed using Interpolations.jl. Monotonic interpolation was performed using Interpolations.jl, using <code>SteffenMonotonicInterpolation</code>. Cubic spline interpolation was performed using Dierckx.jl. All timings include the creation of an interpolant and performing the interpolation at the required points.</p>
</article></div>