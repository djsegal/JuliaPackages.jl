<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-josekijl---no-longer-maintained" class="anchor" aria-hidden="true" href="#josekijl---no-longer-maintained"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Joseki.jl - no longer maintained</h1>
<p dir="auto"><em>Joseki.jl is not longer maintained. For a similar framework that works with the latest versions of the HTTP library I recommend <a href="https://github.com/ndortega/Oxygen.jl">Oxygen.jl</a>.</em></p>
<p dir="auto">Want to make an API in Julia but not sure where to start?  Newer versions of
<a href="https://github.com/JuliaWeb/HTTP.jl">HTTP.jl</a> have everything you need to build one from scratch,
but getting started can be a bit intimidating at the moment.  Joseki.jl is a set of examples and
tools to help you on your way.  It's inspired by <a href="https://github.com/JuliaWeb/Mux.jl">Mux.jl</a> and
<a href="https://expressjs.com/" rel="nofollow">Express</a>.</p>
<p dir="auto">Add it to your project with <code>] add Joseki</code> from the REPL, or <code>using Pkg; Pkg.add("Joseki")</code>.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://joseki-jl.github.io/Joseki.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/553e88c7c3cd9035e8ec133c22bcdf30cdfa475407b847deb507eb8dd6c1ee3c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width: 100%;"></a> <a href="https://joseki-jl.github.io/Joseki.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/joseki-jl/Joseki.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d2333afa1a4107859a7d0c67ad52dfc908ea62bd816507adbcea5724f33bf90a/68747470733a2f2f7472617669732d63692e636f6d2f6a6f73656b692d6a6c2f4a6f73656b692e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/joseki-jl/Joseki.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/joseki-jl/Joseki.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1993208230dcdf33e28f86805f867f6b6ad4415be274c046c6474f0031261772/68747470733a2f2f636f6465636f762e696f2f67682f6a6f73656b692d6a6c2f4a6f73656b692e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/joseki-jl/Joseki.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-the-basics" class="anchor" aria-hidden="true" href="#the-basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The basics</h2>
<p dir="auto">Middleware in Joseki is any function that takes a <code>HTTP.Request</code> and modifies it (and the associated
response).  Endpoints are functions that accept a <code>HTTP.Request</code> and returns a modified version of
its associated <code>HTTP.Response</code>.  Typically any request is passed through the same set of middleware
layers before being routed to a single endpoint.</p>
<p dir="auto">You combine a set of middleware, endpoints, and optionally an error-handling function with
<code>Joseki.router(endpoints; middleware=default_middleware error_fn=error_responder)</code> to create a
<code>HTTP.Router</code>.  This can be used with standard <code>HTTP.jl</code> methods to create a server.</p>
<h2 dir="auto"><a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A simple example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Joseki, JSON, HTTP

### Create some endpoints

# This function takes two numbers x and y from the query string and returns x^y
# In this case they need to be identified by name and it should be called with
# something like 'http://localhost:8000/pow/?x=2&amp;y=3'
function pow(req::HTTP.Request)
    j = HTTP.queryparams(HTTP.URI(req.target))
    has_all_required_keys([&quot;x&quot;, &quot;y&quot;], j) || return error_responder(req, &quot;You need to specify values for x and y!&quot;)
    # Try to parse the values as numbers.  If there's an error here the generic
    # error handler will deal with it.
    x = parse(Float32, j[&quot;x&quot;])
    y = parse(Float32, j[&quot;y&quot;])
    json_responder(req, x^y)
end

# This function takes two numbers n and k from a JSON-encoded request
# body and returns binomial(n, k)
function bin(req::HTTP.Request)
    j = try
        body_as_dict(req)
    catch err
        return error_responder(req, &quot;I was expecting a json request body!&quot;)
    end
    has_all_required_keys([&quot;n&quot;, &quot;k&quot;], j) || return error_responder(req, &quot;You need to specify values for n and k!&quot;)
    json_responder(req, binomial(j[&quot;n&quot;],j[&quot;k&quot;]))
end

### Create and run the server

# Make a router and add routes for our endpoints.
endpoints = [
    (pow, &quot;GET&quot;, &quot;/pow&quot;),
    (bin, &quot;POST&quot;, &quot;/bin&quot;)
]
r = Joseki.router(endpoints)

# Fire up the server
HTTP.serve(r, &quot;127.0.0.1&quot;, 8000; verbose=false)"><pre><span class="pl-k">using</span> Joseki, JSON, HTTP

<span class="pl-c"><span class="pl-c">#</span>## Create some endpoints</span>

<span class="pl-c"><span class="pl-c">#</span> This function takes two numbers x and y from the query string and returns x^y</span>
<span class="pl-c"><span class="pl-c">#</span> In this case they need to be identified by name and it should be called with</span>
<span class="pl-c"><span class="pl-c">#</span> something like 'http://localhost:8000/pow/?x=2&amp;y=3'</span>
<span class="pl-k">function</span> <span class="pl-en">pow</span>(req<span class="pl-k">::</span><span class="pl-c1">HTTP.Request</span>)
    j <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">queryparams</span>(HTTP<span class="pl-k">.</span><span class="pl-c1">URI</span>(req<span class="pl-k">.</span>target))
    <span class="pl-c1">has_all_required_keys</span>([<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>], j) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">error_responder</span>(req, <span class="pl-s"><span class="pl-pds">"</span>You need to specify values for x and y!<span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span> Try to parse the values as numbers.  If there's an error here the generic</span>
    <span class="pl-c"><span class="pl-c">#</span> error handler will deal with it.</span>
    x <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Float32, j[<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>])
    y <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Float32, j[<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>])
    <span class="pl-c1">json_responder</span>(req, x<span class="pl-k">^</span>y)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> This function takes two numbers n and k from a JSON-encoded request</span>
<span class="pl-c"><span class="pl-c">#</span> body and returns binomial(n, k)</span>
<span class="pl-k">function</span> <span class="pl-en">bin</span>(req<span class="pl-k">::</span><span class="pl-c1">HTTP.Request</span>)
    j <span class="pl-k">=</span> <span class="pl-k">try</span>
        <span class="pl-c1">body_as_dict</span>(req)
    <span class="pl-k">catch</span> err
        <span class="pl-k">return</span> <span class="pl-c1">error_responder</span>(req, <span class="pl-s"><span class="pl-pds">"</span>I was expecting a json request body!<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    <span class="pl-c1">has_all_required_keys</span>([<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>], j) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">error_responder</span>(req, <span class="pl-s"><span class="pl-pds">"</span>You need to specify values for n and k!<span class="pl-pds">"</span></span>)
    <span class="pl-c1">json_responder</span>(req, <span class="pl-c1">binomial</span>(j[<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>],j[<span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>]))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>## Create and run the server</span>

<span class="pl-c"><span class="pl-c">#</span> Make a router and add routes for our endpoints.</span>
endpoints <span class="pl-k">=</span> [
    (pow, <span class="pl-s"><span class="pl-pds">"</span>GET<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/pow<span class="pl-pds">"</span></span>),
    (bin, <span class="pl-s"><span class="pl-pds">"</span>POST<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/bin<span class="pl-pds">"</span></span>)
]
r <span class="pl-k">=</span> Joseki<span class="pl-k">.</span><span class="pl-c1">router</span>(endpoints)

<span class="pl-c"><span class="pl-c">#</span> Fire up the server</span>
HTTP<span class="pl-k">.</span><span class="pl-c1">serve</span>(r, <span class="pl-s"><span class="pl-pds">"</span>127.0.0.1<span class="pl-pds">"</span></span>, <span class="pl-c1">8000</span>; verbose<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p dir="auto">If you run this example you can try it out by going to <a href="http://localhost:8000/pow/?x=2&amp;y=3" rel="nofollow">http://localhost:8000/pow/?x=2&amp;y=3</a>.  You
should see a response like:</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{&quot;error&quot;: false, &quot;result&quot;: 8.0}"><pre>{<span class="pl-ent">"error"</span>: <span class="pl-c1">false</span>, <span class="pl-ent">"result"</span>: <span class="pl-c1">8.0</span>}</pre></div>
<p dir="auto">In order to test the 2nd endpoint, you can make a POST request from within a different Julia
session:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HTTP, JSON
HTTP.post(&quot;http://localhost/bin&quot;, [], JSON.json(Dict(&quot;n&quot; =&gt; 4, &quot;k&quot; =&gt; 3)))"><pre><span class="pl-k">using</span> HTTP, JSON
HTTP<span class="pl-k">.</span><span class="pl-c1">post</span>(<span class="pl-s"><span class="pl-pds">"</span>http://localhost/bin<span class="pl-pds">"</span></span>, [], JSON<span class="pl-k">.</span><span class="pl-c1">json</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)))</pre></div>
<p dir="auto">You can also do this from the command line with cURL:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="curl -X POST \
  http://localhost:8000/bin \
  -H 'Cache-Control: no-cache' \
  -H 'Content-Type: application/json' \
  -d '{&quot;n&quot;: 4, &quot;k&quot;: 3}'"><pre>curl -X POST \
  http://localhost:8000/bin \
  -H <span class="pl-s"><span class="pl-pds">'</span>Cache-Control: no-cache<span class="pl-pds">'</span></span> \
  -H <span class="pl-s"><span class="pl-pds">'</span>Content-Type: application/json<span class="pl-pds">'</span></span> \
  -d <span class="pl-s"><span class="pl-pds">'</span>{"n": 4, "k": 3}<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">or use a tool like <a href="https://www.getpostman.com/" rel="nofollow">Postman</a>.</p>
<h2 dir="auto"><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Next steps</h2>
<p dir="auto">You can modify or add to the default middleware stack, write your own responders, or create
additional endpoints.</p>
<h2 dir="auto"><a id="user-content-containers-and-deploying" class="anchor" aria-hidden="true" href="#containers-and-deploying"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Containers and deploying</h2>
<p dir="auto">In many cases you will want to deploy your API as a Docker container.  This makes it possible to
deploy to most hosting services.  This folder contains a Dockerfile that demonstrates hosting the
example above (with a few minor modifications to make it work in Docker).</p>
<p dir="auto">To build the image you can run</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="docker build -t joseki ."><pre>docker build -t joseki <span class="pl-c1">.</span></pre></div>
<p dir="auto">from this folder and then run</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="docker run --rm -p 8000:8000 joseki"><pre>docker run --rm -p 8000:8000 joseki</pre></div>
<p dir="auto">to start the server.  If you need to debug anything you can start an interactive session with</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="docker run --rm -p 8000:8000 -it --entrypoint=/bin/bash joseki"><pre>docker run --rm -p 8000:8000 -it --entrypoint=/bin/bash joseki</pre></div>
<p dir="auto">This runs Joseki from within its own package environment, but a more common use case would be to
create a new project that adds Joseki as a dependency.  You can find examples that do this in separate repositories within the <a href="https://github.com/Joseki-jl">Joseki org</a>.</p>
</article></div>