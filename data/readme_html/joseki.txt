<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-josekijl" class="anchor" aria-hidden="true" href="#josekijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Joseki.jl</h1>
<p>Want to make an API in Julia but not sure where to start?  Newer versions of
<a href="https://github.com/JuliaWeb/HTTP.jl">HTTP.jl</a> have everything you need to build one from scratch,
but getting started can be a bit intimidating at the moment.  Joseki.jl is a set of examples and
tools to help you on your way.  It's inspired by <a href="https://github.com/JuliaWeb/Mux.jl">Mux.jl</a> and
<a href="https://expressjs.com/" rel="nofollow">Express</a>.</p>
<p>Add it to your project with <code>] add Joseki</code> from the REPL, or <code>using Pkg; Pkg.add("Joseki")</code>.</p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://joseki-jl.github.io/Joseki.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/2e8800b94760f1109db10b41f13c9894b1f8dac9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-green.svg" style="max-width:100%;"></a> <a href="https://joseki-jl.github.io/Joseki.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/joseki-jl/Joseki.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7acbab2cfebeb40b8fa1cfc9a5d1bc98e2ea9ef6/68747470733a2f2f7472617669732d63692e636f6d2f6a6f73656b692d6a6c2f4a6f73656b692e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/joseki-jl/Joseki.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/joseki-jl/Joseki.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/70c3da24def582aa70f4df30c26592a66700a21d/68747470733a2f2f636f6465636f762e696f2f67682f6a6f73656b692d6a6c2f4a6f73656b692e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/joseki-jl/Joseki.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-the-basics" class="anchor" aria-hidden="true" href="#the-basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The basics</h2>
<p>Middleware in Joseki is any function that takes a <code>HTTP.Request</code> and modifies it (and the associated
response).  Endpoints are functions that accept a <code>HTTP.Request</code> and returns a modified version of
its associated <code>HTTP.Response</code>.  Typically any request is passed through the same set of middleware
layers before being routed to a single endpoint.</p>
<p>You combine a set of middleware, endpoints, and optionally an error-handling function with
<code>Joseki.router(endpoints; middleware=default_middleware error_fn=error_responder)</code> to create a
<code>HTTP.Router</code>.  This can be used with standard <code>HTTP.jl</code> methods to create a server.</p>
<h2><a id="user-content-a-simple-example" class="anchor" aria-hidden="true" href="#a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A simple example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Joseki, JSON, HTTP

<span class="pl-c"><span class="pl-c">#</span>## Create some endpoints</span>

<span class="pl-c"><span class="pl-c">#</span> This function takes two numbers x and y from the query string and returns x^y</span>
<span class="pl-c"><span class="pl-c">#</span> In this case they need to be identified by name and it should be called with</span>
<span class="pl-c"><span class="pl-c">#</span> something like 'http://localhost:8000/pow/?x=2&amp;y=3'</span>
<span class="pl-k">function</span> <span class="pl-en">pow</span>(req<span class="pl-k">::</span><span class="pl-c1">HTTP.Request</span>)
    j <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">queryparams</span>(HTTP<span class="pl-k">.</span><span class="pl-c1">URI</span>(req<span class="pl-k">.</span>target))
    <span class="pl-c1">has_all_required_keys</span>([<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>], j) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">error_responder</span>(req, <span class="pl-s"><span class="pl-pds">"</span>You need to specify values for x and y!<span class="pl-pds">"</span></span>)
    <span class="pl-c"><span class="pl-c">#</span> Try to parse the values as numbers.  If there's an error here the generic</span>
    <span class="pl-c"><span class="pl-c">#</span> error handler will deal with it.</span>
    x <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Float32, j[<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>])
    y <span class="pl-k">=</span> <span class="pl-c1">parse</span>(Float32, j[<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>])
    <span class="pl-c1">json_responder</span>(req, x<span class="pl-k">^</span>y)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> This function takes two numbers n and k from a JSON-encoded request</span>
<span class="pl-c"><span class="pl-c">#</span> body and returns binomial(n, k)</span>
<span class="pl-k">function</span> <span class="pl-en">bin</span>(req<span class="pl-k">::</span><span class="pl-c1">HTTP.Request</span>)
    j <span class="pl-k">=</span> <span class="pl-k">try</span>
        <span class="pl-c1">body_as_dict</span>(req)
    <span class="pl-k">catch</span> err
        <span class="pl-k">return</span> <span class="pl-c1">error_responder</span>(req, <span class="pl-s"><span class="pl-pds">"</span>I was expecting a json request body!<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    <span class="pl-c1">has_all_required_keys</span>([<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>], j) <span class="pl-k">||</span> <span class="pl-k">return</span> <span class="pl-c1">error_responder</span>(req, <span class="pl-s"><span class="pl-pds">"</span>You need to specify values for n and k!<span class="pl-pds">"</span></span>)
    <span class="pl-c1">json_responder</span>(req, <span class="pl-c1">binomial</span>(j[<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span>],j[<span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span>]))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>## Create and run the server</span>

<span class="pl-c"><span class="pl-c">#</span> Make a router and add routes for our endpoints.</span>
endpoints <span class="pl-k">=</span> [
    (pow, <span class="pl-s"><span class="pl-pds">"</span>GET<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/pow<span class="pl-pds">"</span></span>),
    (bin, <span class="pl-s"><span class="pl-pds">"</span>POST<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>/bin<span class="pl-pds">"</span></span>)
]
r <span class="pl-k">=</span> Joseki<span class="pl-k">.</span><span class="pl-c1">router</span>(endpoints)

<span class="pl-c"><span class="pl-c">#</span> Fire up the server</span>
HTTP<span class="pl-k">.</span><span class="pl-c1">serve</span>(r, <span class="pl-s"><span class="pl-pds">"</span>127.0.0.1<span class="pl-pds">"</span></span>, <span class="pl-c1">8000</span>; verbose<span class="pl-k">=</span><span class="pl-c1">false</span>)</pre></div>
<p>If you run this example you can try it out by going to <a href="http://localhost:8000/pow/?x=2&amp;y=3" rel="nofollow">http://localhost:8000/pow/?x=2&amp;y=3</a>.  You
should see a response like:</p>
<div class="highlight highlight-source-json"><pre>{<span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>: <span class="pl-c1">false</span>, <span class="pl-s"><span class="pl-pds">"</span>result<span class="pl-pds">"</span></span>: <span class="pl-c1">8.0</span>}</pre></div>
<p>In order to test the 2nd endpoint, you can make a POST request from within a different Julia
session:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> HTTP, JSON
HTTP<span class="pl-k">.</span><span class="pl-c1">post</span>(<span class="pl-s"><span class="pl-pds">"</span>http://localhost/bin<span class="pl-pds">"</span></span>, [], JSON<span class="pl-k">.</span><span class="pl-c1">json</span>(<span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>n<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>, <span class="pl-s"><span class="pl-pds">"</span>k<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">3</span>)))</pre></div>
<p>You can also do this from the command line with cURL:</p>
<div class="highlight highlight-source-shell"><pre>curl -X POST \
  http://localhost:8000/bin \
  -H <span class="pl-s"><span class="pl-pds">'</span>Cache-Control: no-cache<span class="pl-pds">'</span></span> \
  -H <span class="pl-s"><span class="pl-pds">'</span>Content-Type: application/json<span class="pl-pds">'</span></span> \
  -d <span class="pl-s"><span class="pl-pds">'</span>{"n": 4, "k": 3}<span class="pl-pds">'</span></span></pre></div>
<p>or use a tool like <a href="https://www.getpostman.com/" rel="nofollow">Postman</a>.</p>
<h2><a id="user-content-next-steps" class="anchor" aria-hidden="true" href="#next-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Next steps</h2>
<p>You can modify or add to the default middleware stack, write your own responders, or create
additional endpoints.</p>
<h2><a id="user-content-containers-and-deploying" class="anchor" aria-hidden="true" href="#containers-and-deploying"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Containers and deploying</h2>
<p>In many cases you will want to deploy your API as a Docker container.  This makes it possible to
deploy to most hosting services.  This folder contains a Dockerfile that demonstrates hosting the
example above (with a few minor modifications to make it work in Docker).</p>
<p>To build the image you can run</p>
<div class="highlight highlight-source-shell"><pre>docker build -t joseki <span class="pl-c1">.</span></pre></div>
<p>from this folder and then run</p>
<div class="highlight highlight-source-shell"><pre>docker run --rm -p 8000:8000 joseki</pre></div>
<p>to start the server.  If you need to debug anything you can start an interactive session with</p>
<div class="highlight highlight-source-shell"><pre>docker run --rm -p 8000:8000 -it --entrypoint=/bin/bash joseki</pre></div>
<p>This runs Joseki from within its own package environment, but a more common use case would be to
create a new project that adds Joseki as a dependency.  You can find examples that do this in separate repositories within the <a href="https://github.com/Joseki-jl">Joseki org</a>.</p>
</article></div>