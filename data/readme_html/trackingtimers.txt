<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-trackingtimers" class="anchor" aria-hidden="true" href="#trackingtimers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TrackingTimers</h1>
<p><a href="https://ericphanson.github.io/TrackingTimers.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://ericphanson.github.io/TrackingTimers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/ericphanson/TrackingTimers.jl/actions/workflows/CI.yml"><img src="https://github.com/ericphanson/TrackingTimers.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ericphanson/TrackingTimers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5c288eae664212db08ea2bf94ac5c634a60fcdd66460eddfdb64bdcfcb462f4/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f547261636b696e6754696d6572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/ericphanson/TrackingTimers.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Provides a simple utility for collecting timing information from functions even in the presence of parallelism.
Inspired by <a href="https://github.com/KristofferC/TimerOutputs.jl">TimerOutputs.jl</a>, which I recommend for serial code.</p>
<p><code>TrackingTimers.@timeit</code> supports the same API as <code>TimerOutputs.@timeit</code>, providing a simple way to store the timing results from executing an expression in a timer object, a <code>TrackingTimer</code> (which is the sole export of this package). However, <code>TrackingTimer</code>s are very simple; while calls to log to the same timer may be nested, the <code>TrackingTimer</code> simply logs each call in a flat table. This makes it easy to support multiprocess and multithreaded code. <code>TrackingTimer</code>s supports the Tables.jl interface (as a row table), which provides a simple means for the user to take a closer look at the timing data, and e.g. aggregate over calls to the same function.</p>
<p><code>TrackingTimer</code>s also support a call syntax, allowing one to easily instrument a function, so that any call to the instrumented version of the function automatically logs a timing entry to the timer object. See the examples below.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TrackingTimers

julia&gt; t = TrackingTimer()
TrackingTimer: 0.00 s since creation (0% measured).
No entries.

julia&gt; TrackingTimers.@timeit t &quot;testing: sleep&quot; sleep(1)

julia&gt; t
TrackingTimer: 1.05 s since creation (96% measured).
      name        time   gctime  n_allocs   allocs    thread ID  proc ID 
─────────────────────────────────────────────────────────────────────────
 testing: sleep  1.00 s      0%         4  128 bytes          1        1

julia&gt; func(x) = x+1
func (generic function with 1 method)

julia&gt; func_inst = t(func)
(::TrackingTimers.InstrumentedFunction{typeof(func)}) (generic function with 1 method)

julia&gt; func_inst(5)
6

julia&gt; t
TrackingTimer: 1.08 s since creation (93% measured).
      name        time   gctime  n_allocs   allocs    thread ID  proc ID 
─────────────────────────────────────────────────────────────────────────
 testing: sleep  1.00 s      0%         4  128 bytes          1        1
 func            0.00 s      0%         0    0 bytes          1        1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TrackingTimers

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">TrackingTimer</span>()
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">0.00</span> s since creation (<span class="pl-c1">0</span><span class="pl-k">%</span> measured).
No entries.

julia<span class="pl-k">&gt;</span> TrackingTimers<span class="pl-k">.</span><span class="pl-c1">@timeit</span> t <span class="pl-s"><span class="pl-pds">"</span>testing: sleep<span class="pl-pds">"</span></span> <span class="pl-c1">sleep</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> t
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">1.05</span> s since creation (<span class="pl-c1">96</span><span class="pl-k">%</span> measured).
      name        time   gctime  n_allocs   allocs    thread ID  proc ID 
─────────────────────────────────────────────────────────────────────────
 testing<span class="pl-k">:</span> sleep  <span class="pl-c1">1.00</span> s      <span class="pl-c1">0</span><span class="pl-k">%</span>         <span class="pl-c1">4</span>  <span class="pl-c1">128</span> bytes          <span class="pl-c1">1</span>        <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">func</span>(x) <span class="pl-k">=</span> x<span class="pl-k">+</span><span class="pl-c1">1</span>
func (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> func_inst <span class="pl-k">=</span> <span class="pl-c1">t</span>(func)
(<span class="pl-k">::</span><span class="pl-c1">TrackingTimers.InstrumentedFunction{typeof(func)}</span>) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">func_inst</span>(<span class="pl-c1">5</span>)
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> t
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">1.08</span> s since creation (<span class="pl-c1">93</span><span class="pl-k">%</span> measured).
      name        time   gctime  n_allocs   allocs    thread ID  proc ID 
─────────────────────────────────────────────────────────────────────────
 testing<span class="pl-k">:</span> sleep  <span class="pl-c1">1.00</span> s      <span class="pl-c1">0</span><span class="pl-k">%</span>         <span class="pl-c1">4</span>  <span class="pl-c1">128</span> bytes          <span class="pl-c1">1</span>        <span class="pl-c1">1</span>
 func            <span class="pl-c1">0.00</span> s      <span class="pl-c1">0</span><span class="pl-k">%</span>         <span class="pl-c1">0</span>    <span class="pl-c1">0</span> bytes          <span class="pl-c1">1</span>        <span class="pl-c1">1</span></pre></div>
<h3><a id="user-content-threaded-example" class="anchor" aria-hidden="true" href="#threaded-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Threaded example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using TrackingTimers, ThreadsX, LinearAlgebra

julia&gt; t = TrackingTimer()
TrackingTimer: 0.03 s since creation (0% measured).
No entries.

julia&gt; xs = 1:2
1:2

julia&gt; expensive_function(i) = norm(big.(randn(i, i)))
expensive_function (generic function with 1 method)

julia&gt; instrumented_fun = t(expensive_function)
(::TrackingTimers.InstrumentedFunction{typeof(expensive_function)}) (generic function with 1 method)

julia&gt; result = ThreadsX.map(instrumented_fun, 1000:100:1500)
6-element Vector{BigFloat}:
 1000.044535870264540807714716029272380072359744688303289140287700941397780730317
 1099.621613467886456092200351321349092989369319781554075855193975305734925337306
 1200.160425251366463083085189603332616730336307297852815966102953629237891121993
 1300.109241847853807385664372197135060201125417086855868596616484800661239594506
 1399.572257779217012297991715825651075215168607390190375753707375897223959998925
 1499.967376120230484827902676300684847759014653732263746767025105628459031638143

julia&gt; t
TrackingTimer: 5.69 s since creation (99% measured).
        name          time   gctime  n_allocs    allocs     thread ID  proc ID 
───────────────────────────────────────────────────────────────────────────────
 expensive_function  1.34 s     72%  37334279    1.999 GiB          2        1
 expensive_function  1.20 s     39%  31436022    1.702 GiB          1        1
 expensive_function  1.15 s     34%  24886121    1.360 GiB          2        1
 expensive_function  0.71 s     18%  15721283  880.679 MiB          1        1
 expensive_function  0.66 s     36%  18870866    1.024 GiB          1        1
 expensive_function  0.58 s     16%  14264890  784.059 MiB          2        1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> TrackingTimers, ThreadsX, LinearAlgebra

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">TrackingTimer</span>()
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">0.03</span> s since creation (<span class="pl-c1">0</span><span class="pl-k">%</span> measured).
No entries.

julia<span class="pl-k">&gt;</span> xs <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-en">expensive_function</span>(i) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(<span class="pl-c1">big</span>.(<span class="pl-c1">randn</span>(i, i)))
expensive_function (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> instrumented_fun <span class="pl-k">=</span> <span class="pl-c1">t</span>(expensive_function)
(<span class="pl-k">::</span><span class="pl-c1">TrackingTimers.InstrumentedFunction{typeof(expensive_function)}</span>) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> ThreadsX<span class="pl-k">.</span><span class="pl-c1">map</span>(instrumented_fun, <span class="pl-c1">1000</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">1500</span>)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{BigFloat}<span class="pl-k">:</span>
 <span class="pl-c1">1000.044535870264540807714716029272380072359744688303289140287700941397780730317</span>
 <span class="pl-c1">1099.621613467886456092200351321349092989369319781554075855193975305734925337306</span>
 <span class="pl-c1">1200.160425251366463083085189603332616730336307297852815966102953629237891121993</span>
 <span class="pl-c1">1300.109241847853807385664372197135060201125417086855868596616484800661239594506</span>
 <span class="pl-c1">1399.572257779217012297991715825651075215168607390190375753707375897223959998925</span>
 <span class="pl-c1">1499.967376120230484827902676300684847759014653732263746767025105628459031638143</span>

julia<span class="pl-k">&gt;</span> t
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">5.69</span> s since creation (<span class="pl-c1">99</span><span class="pl-k">%</span> measured).
        name          time   gctime  n_allocs    allocs     thread ID  proc ID 
───────────────────────────────────────────────────────────────────────────────
 expensive_function  <span class="pl-c1">1.34</span> s     <span class="pl-c1">72</span><span class="pl-k">%</span>  <span class="pl-c1">37334279</span>    <span class="pl-c1">1.999</span> GiB          <span class="pl-c1">2</span>        <span class="pl-c1">1</span>
 expensive_function  <span class="pl-c1">1.20</span> s     <span class="pl-c1">39</span><span class="pl-k">%</span>  <span class="pl-c1">31436022</span>    <span class="pl-c1">1.702</span> GiB          <span class="pl-c1">1</span>        <span class="pl-c1">1</span>
 expensive_function  <span class="pl-c1">1.15</span> s     <span class="pl-c1">34</span><span class="pl-k">%</span>  <span class="pl-c1">24886121</span>    <span class="pl-c1">1.360</span> GiB          <span class="pl-c1">2</span>        <span class="pl-c1">1</span>
 expensive_function  <span class="pl-c1">0.71</span> s     <span class="pl-c1">18</span><span class="pl-k">%</span>  <span class="pl-c1">15721283</span>  <span class="pl-c1">880.679</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">1</span>
 expensive_function  <span class="pl-c1">0.66</span> s     <span class="pl-c1">36</span><span class="pl-k">%</span>  <span class="pl-c1">18870866</span>    <span class="pl-c1">1.024</span> GiB          <span class="pl-c1">1</span>        <span class="pl-c1">1</span>
 expensive_function  <span class="pl-c1">0.58</span> s     <span class="pl-c1">16</span><span class="pl-k">%</span>  <span class="pl-c1">14264890</span>  <span class="pl-c1">784.059</span> MiB          <span class="pl-c1">2</span>        <span class="pl-c1">1</span></pre></div>
<h3><a id="user-content-distributed-example" class="anchor" aria-hidden="true" href="#distributed-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Distributed example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Distributed

julia&gt; addprocs(2)
2-element Vector{Int64}:
 2
 3

julia&gt; @everywhere using TrackingTimers, LinearAlgebra

julia&gt; t = TrackingTimer()
TrackingTimer: 1.13 s since creation (0% measured).
No entries.

julia&gt; @everywhere expensive_function(i) = norm(big.(randn(i, i)))

julia&gt; instrumented_fun = t(expensive_function)
(::TrackingTimers.InstrumentedFunction{typeof(expensive_function)}) (generic function with 1 method)

julia&gt; result = pmap(instrumented_fun, 1000:100:1500)
6-element Vector{BigFloat}:
  999.3400434505995581074342593748743616158636434344468541490681472178697961023743
 1099.00165758571901999414118783850318868603547862200331037349314999751473860877
 1200.665671521870570295977221776311554666404776867075257827116985832523690068542
 1299.098003099051425268090436142914593167431536776385646086568449446658084891494
 1400.026473159472270359947791624394367075116800578307064157908754557301584756459
 1498.256323158788435294406273058988870732250411479016050182811541955477979434318

julia&gt; t
TrackingTimer: 5.70 s since creation (93% measured).
        name          time   gctime  n_allocs    allocs     thread ID  proc ID 
───────────────────────────────────────────────────────────────────────────────
 expensive_function  1.35 s     69%  18000012  995.637 MiB          1        2
 expensive_function  1.11 s     49%  15680012  867.310 MiB          1        3
 expensive_function  1.00 s     31%  13520012  747.834 MiB          1        2
 expensive_function  0.75 s     14%  11520012  637.208 MiB          1        3
 expensive_function  0.70 s     18%   9680012  535.431 MiB          1        3
 expensive_function  0.61 s     13%   8000012  442.505 MiB          1        2
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> TrackingTimers, LinearAlgebra

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">TrackingTimer</span>()
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">1.13</span> s since creation (<span class="pl-c1">0</span><span class="pl-k">%</span> measured).
No entries.

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-en">expensive_function</span>(i) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(<span class="pl-c1">big</span>.(<span class="pl-c1">randn</span>(i, i)))

julia<span class="pl-k">&gt;</span> instrumented_fun <span class="pl-k">=</span> <span class="pl-c1">t</span>(expensive_function)
(<span class="pl-k">::</span><span class="pl-c1">TrackingTimers.InstrumentedFunction{typeof(expensive_function)}</span>) (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> result <span class="pl-k">=</span> <span class="pl-c1">pmap</span>(instrumented_fun, <span class="pl-c1">1000</span><span class="pl-k">:</span><span class="pl-c1">100</span><span class="pl-k">:</span><span class="pl-c1">1500</span>)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{BigFloat}<span class="pl-k">:</span>
  <span class="pl-c1">999.3400434505995581074342593748743616158636434344468541490681472178697961023743</span>
 <span class="pl-c1">1099.00165758571901999414118783850318868603547862200331037349314999751473860877</span>
 <span class="pl-c1">1200.665671521870570295977221776311554666404776867075257827116985832523690068542</span>
 <span class="pl-c1">1299.098003099051425268090436142914593167431536776385646086568449446658084891494</span>
 <span class="pl-c1">1400.026473159472270359947791624394367075116800578307064157908754557301584756459</span>
 <span class="pl-c1">1498.256323158788435294406273058988870732250411479016050182811541955477979434318</span>

julia<span class="pl-k">&gt;</span> t
TrackingTimer<span class="pl-k">:</span> <span class="pl-c1">5.70</span> s since creation (<span class="pl-c1">93</span><span class="pl-k">%</span> measured).
        name          time   gctime  n_allocs    allocs     thread ID  proc ID 
───────────────────────────────────────────────────────────────────────────────
 expensive_function  <span class="pl-c1">1.35</span> s     <span class="pl-c1">69</span><span class="pl-k">%</span>  <span class="pl-c1">18000012</span>  <span class="pl-c1">995.637</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">2</span>
 expensive_function  <span class="pl-c1">1.11</span> s     <span class="pl-c1">49</span><span class="pl-k">%</span>  <span class="pl-c1">15680012</span>  <span class="pl-c1">867.310</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">3</span>
 expensive_function  <span class="pl-c1">1.00</span> s     <span class="pl-c1">31</span><span class="pl-k">%</span>  <span class="pl-c1">13520012</span>  <span class="pl-c1">747.834</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">2</span>
 expensive_function  <span class="pl-c1">0.75</span> s     <span class="pl-c1">14</span><span class="pl-k">%</span>  <span class="pl-c1">11520012</span>  <span class="pl-c1">637.208</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">3</span>
 expensive_function  <span class="pl-c1">0.70</span> s     <span class="pl-c1">18</span><span class="pl-k">%</span>   <span class="pl-c1">9680012</span>  <span class="pl-c1">535.431</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">3</span>
 expensive_function  <span class="pl-c1">0.61</span> s     <span class="pl-c1">13</span><span class="pl-k">%</span>   <span class="pl-c1">8000012</span>  <span class="pl-c1">442.505</span> MiB          <span class="pl-c1">1</span>        <span class="pl-c1">2</span></pre></div>
<h2><a id="user-content-table-interface" class="anchor" aria-hidden="true" href="#table-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Table interface</h2>
<p>Continuing the previous example, we can use the fact that <code>TimingTracker</code>'s support
the Tables.jl interface to do further analysis of the results.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; cheap_fn(x) = x+1
cheap_fn (generic function with 1 method)

julia&gt; map(t(cheap_fn), 10:15)
6-element Vector{Int64}:
 11
 12
 13
 14
 15
 16

julia&gt; using DataFrames, Statistics

julia&gt; df = DataFrame(t)
12×7 DataFrame
 Row │ name                time      gctime    n_allocs  bytes       thread_id  pid   
     │ String              Float64   Float64   Int64     Int64       Int64      Int64 
─────┼────────────────────────────────────────────────────────────────────────────────
   1 │ expensive_function  0.612077  0.176828   8000012   464000560          1      2
   2 │ expensive_function  0.701691  0.200751   9680012   561440560          1      3
   3 │ expensive_function  0.748993  0.139915  11520012   668160560          1      3
   4 │ expensive_function  0.99935   0.234239  13520012   784160560          1      2
   5 │ expensive_function  1.11177   0.343141  15680012   909440560          1      3
   6 │ expensive_function  1.34677   0.422423  18000012  1044000560          1      2
   7 │ cheap_fn            1.67e-7   0.0              0           0          1      1
   8 │ cheap_fn            4.1e-8    0.0              0           0          1      1
   9 │ cheap_fn            0.0       0.0              0           0          1      1
  10 │ cheap_fn            4.1e-8    0.0              0           0          1      1
  11 │ cheap_fn            0.0       0.0              0           0          1      1
  12 │ cheap_fn            4.2e-8    0.0              0           0          1      1

julia&gt; combine(groupby(df, :name), :time =&gt; mean)
2×2 DataFrame
 Row │ name                time_mean 
     │ String              Float64   
─────┼───────────────────────────────
   1 │ expensive_function   0.920108
   2 │ cheap_fn             4.85e-8
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">cheap_fn</span>(x) <span class="pl-k">=</span> x<span class="pl-k">+</span><span class="pl-c1">1</span>
cheap_fn (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">map</span>(<span class="pl-c1">t</span>(cheap_fn), <span class="pl-c1">10</span><span class="pl-k">:</span><span class="pl-c1">15</span>)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Vector{Int64}<span class="pl-k">:</span>
 <span class="pl-c1">11</span>
 <span class="pl-c1">12</span>
 <span class="pl-c1">13</span>
 <span class="pl-c1">14</span>
 <span class="pl-c1">15</span>
 <span class="pl-c1">16</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DataFrames, Statistics

julia<span class="pl-k">&gt;</span> df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(t)
<span class="pl-c1">12</span><span class="pl-k">×</span><span class="pl-c1">7</span> DataFrame
 Row │ name                time      gctime    n_allocs  bytes       thread_id  pid   
     │ String              Float64   Float64   Int64     Int64       Int64      Int64 
─────┼────────────────────────────────────────────────────────────────────────────────
   <span class="pl-c1">1</span> │ expensive_function  <span class="pl-c1">0.612077</span>  <span class="pl-c1">0.176828</span>   <span class="pl-c1">8000012</span>   <span class="pl-c1">464000560</span>          <span class="pl-c1">1</span>      <span class="pl-c1">2</span>
   <span class="pl-c1">2</span> │ expensive_function  <span class="pl-c1">0.701691</span>  <span class="pl-c1">0.200751</span>   <span class="pl-c1">9680012</span>   <span class="pl-c1">561440560</span>          <span class="pl-c1">1</span>      <span class="pl-c1">3</span>
   <span class="pl-c1">3</span> │ expensive_function  <span class="pl-c1">0.748993</span>  <span class="pl-c1">0.139915</span>  <span class="pl-c1">11520012</span>   <span class="pl-c1">668160560</span>          <span class="pl-c1">1</span>      <span class="pl-c1">3</span>
   <span class="pl-c1">4</span> │ expensive_function  <span class="pl-c1">0.99935</span>   <span class="pl-c1">0.234239</span>  <span class="pl-c1">13520012</span>   <span class="pl-c1">784160560</span>          <span class="pl-c1">1</span>      <span class="pl-c1">2</span>
   <span class="pl-c1">5</span> │ expensive_function  <span class="pl-c1">1.11177</span>   <span class="pl-c1">0.343141</span>  <span class="pl-c1">15680012</span>   <span class="pl-c1">909440560</span>          <span class="pl-c1">1</span>      <span class="pl-c1">3</span>
   <span class="pl-c1">6</span> │ expensive_function  <span class="pl-c1">1.34677</span>   <span class="pl-c1">0.422423</span>  <span class="pl-c1">18000012</span>  <span class="pl-c1">1044000560</span>          <span class="pl-c1">1</span>      <span class="pl-c1">2</span>
   <span class="pl-c1">7</span> │ cheap_fn            <span class="pl-c1">1.67e-7</span>   <span class="pl-c1">0.0</span>              <span class="pl-c1">0</span>           <span class="pl-c1">0</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">8</span> │ cheap_fn            <span class="pl-c1">4.1e-8</span>    <span class="pl-c1">0.0</span>              <span class="pl-c1">0</span>           <span class="pl-c1">0</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span>
   <span class="pl-c1">9</span> │ cheap_fn            <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>              <span class="pl-c1">0</span>           <span class="pl-c1">0</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span>
  <span class="pl-c1">10</span> │ cheap_fn            <span class="pl-c1">4.1e-8</span>    <span class="pl-c1">0.0</span>              <span class="pl-c1">0</span>           <span class="pl-c1">0</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span>
  <span class="pl-c1">11</span> │ cheap_fn            <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>              <span class="pl-c1">0</span>           <span class="pl-c1">0</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span>
  <span class="pl-c1">12</span> │ cheap_fn            <span class="pl-c1">4.2e-8</span>    <span class="pl-c1">0.0</span>              <span class="pl-c1">0</span>           <span class="pl-c1">0</span>          <span class="pl-c1">1</span>      <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">combine</span>(<span class="pl-c1">groupby</span>(df, <span class="pl-c1">:name</span>), <span class="pl-c1">:time</span> <span class="pl-k">=&gt;</span> mean)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
 Row │ name                time_mean 
     │ String              Float64   
─────┼───────────────────────────────
   <span class="pl-c1">1</span> │ expensive_function   <span class="pl-c1">0.920108</span>
   <span class="pl-c1">2</span> │ cheap_fn             <span class="pl-c1">4.85e-8</span></pre></div>
<p>Similarly, the timing results can be serialized by e.g. <code>CSV.write(path, t)</code> or <code>Arrow.write(path, t)</code>, thanks again to the Tables.jl interface.</p>
</article></div>