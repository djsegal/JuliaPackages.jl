<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chainjl" class="anchor" aria-hidden="true" href="#chainjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Chain.jl</h1>
<p>A <a href="https://julialang.org/packages/" rel="nofollow">Julia package</a> for piping a value through a series of transformation expressions using a more convenient syntax than Julia's native <a href="https://docs.julialang.org/en/v1/manual/functions/#Function-composition-and-piping" rel="nofollow">piping functionality</a>.</p>
<table>
<tbody><tr><th>Chain.jl</th><th>Base Julia</th></tr>
<tr>
<td>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@chain df begin
  dropmissing
  filter(:id =&gt; &gt;(6), _)
  groupby(:group)
  combine(:age =&gt; sum)
end
"><pre><span class="pl-c1">@chain</span> df <span class="pl-k">begin</span>
  dropmissing
  <span class="pl-c1">filter</span>(<span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">6</span>), _)
  <span class="pl-c1">groupby</span>(<span class="pl-c1">:group</span>)
  <span class="pl-c1">combine</span>(<span class="pl-c1">:age</span> <span class="pl-k">=&gt;</span> sum)
<span class="pl-k">end</span></pre></div>
</td>
<td>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="df |&gt;
  dropmissing |&gt;
  x -&gt; filter(:id =&gt; &gt;(6), x) |&gt;
  x -&gt; groupby(x, :group) |&gt;
  x -&gt; combine(x, :age =&gt; sum)
"><pre>df <span class="pl-k">|&gt;</span>
  dropmissing <span class="pl-k">|&gt;</span>
  x <span class="pl-k">-&gt;</span> <span class="pl-c1">filter</span>(<span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">6</span>), x) <span class="pl-k">|&gt;</span>
  x <span class="pl-k">-&gt;</span> <span class="pl-c1">groupby</span>(x, <span class="pl-c1">:group</span>) <span class="pl-k">|&gt;</span>
  x <span class="pl-k">-&gt;</span> <span class="pl-c1">combine</span>(x, <span class="pl-c1">:age</span> <span class="pl-k">=&gt;</span> sum)</pre></div>
</td>
</tr>
<tr>
<th><a href="https://github.com/oxinabox/Pipe.jl">Pipe.jl</a></th>
<th><a href="https://github.com/MikeInnes/Lazy.jl">Lazy.jl</a></th>
</tr>
<tr>
<td>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@pipe df |&gt;
  dropmissing |&gt;
  filter(:id =&gt; &gt;(6), _)|&gt;
  groupby(_, :group) |&gt;
  combine(_, :age =&gt; sum)
"><pre><span class="pl-c1">@pipe</span> df <span class="pl-k">|&gt;</span>
  dropmissing <span class="pl-k">|&gt;</span>
  <span class="pl-c1">filter</span>(<span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">6</span>), _)<span class="pl-k">|&gt;</span>
  <span class="pl-c1">groupby</span>(_, <span class="pl-c1">:group</span>) <span class="pl-k">|&gt;</span>
  <span class="pl-c1">combine</span>(_, <span class="pl-c1">:age</span> <span class="pl-k">=&gt;</span> sum)</pre></div>
</td>
<td>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@&gt; df begin
  dropmissing
  x -&gt; filter(:id =&gt; &gt;(6), x)
  groupby(:group)
  combine(:age =&gt; sum)
end
"><pre>@<span class="pl-k">&gt;</span> df <span class="pl-k">begin</span>
  dropmissing
  x <span class="pl-k">-&gt;</span> <span class="pl-c1">filter</span>(<span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-k">&gt;</span>(<span class="pl-c1">6</span>), x)
  <span class="pl-c1">groupby</span>(<span class="pl-c1">:group</span>)
  <span class="pl-c1">combine</span>(<span class="pl-c1">:age</span> <span class="pl-k">=&gt;</span> sum)
<span class="pl-k">end</span></pre></div>
</td>
</tr>

</tbody></table>
<h2><a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build Status</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/jkrumbiegel/Chain.jl/workflows/Run%20tests/badge.svg"><img src="https://github.com/jkrumbiegel/Chain.jl/workflows/Run%20tests/badge.svg" alt="Run tests" style="max-width:100%;"></a></p>
<h2><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary</h2>
<p>Chain.jl defines the <code>@chain</code> macro. It takes a start value and a <code>begin ... end</code> block of expressions.</p>
<p>The result of each expression is fed into the next one using one of two rules:</p>
<ol>
<li><strong>There is at least one underscore in the expression</strong></li>
</ol>
<ul>
<li>every <code>_</code> is replaced with the result of the previous expression</li>
</ul>
<ol start="2">
<li><strong>There is no underscore</strong></li>
</ol>
<ul>
<li>the result of the previous expression is used as the first argument in the current expression, as long as it is a function call, a macro call or a symbol representing a function.</li>
</ul>
<p>Lines that are prefaced with <code>@aside</code> are executed, but their result is not fed into the next pipeline step.
This is very useful to inspect pipeline state during debugging, for example.</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<ul>
<li>The implicit first argument insertion is useful for many data pipeline scenarios, like <code>groupby</code>, <code>transform</code> and <code>combine</code> in DataFrames.jl</li>
<li>The <code>_</code> syntax is there to either increase legibility or to use functions like <code>filter</code> or <code>map</code> which need the previous result as the second argument</li>
<li>There is no need to type <code>|&gt;</code> over and over</li>
<li>Any line can be commented out or in without breaking syntax, there is no problem with dangling <code>|&gt;</code> symbols</li>
<li>The state of the pipeline can easily be checked with the <code>@aside</code> macro</li>
<li>The <code>begin ... end</code> block marks very clearly where the macro is applied and works well with auto-indentation</li>
<li>Because everything is just lines with separate expressions and not one huge function call, IDEs can show exactly in which line errors happened</li>
<li>Pipe is a name defined by Base Julia which can lead to conflicts</li>
</ul>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>An example with a DataFrame:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DataFrames, Chain

df = DataFrame(group = [1, 2, 1, 2, missing], weight = [1, 3, 5, 7, missing])

result = @chain df begin
    dropmissing
    filter(r -&gt; r.weight &lt; 6, _)
    groupby(:group)
    combine(:weight =&gt; sum =&gt; :total_weight)
end
"><pre><span class="pl-k">using</span> DataFrames, Chain

df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(group <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">missing</span>], weight <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">5</span>, <span class="pl-c1">7</span>, <span class="pl-c1">missing</span>])

result <span class="pl-k">=</span> <span class="pl-c1">@chain</span> df <span class="pl-k">begin</span>
    dropmissing
    <span class="pl-c1">filter</span>(r <span class="pl-k">-&gt;</span> r<span class="pl-k">.</span>weight <span class="pl-k">&lt;</span> <span class="pl-c1">6</span>, _)
    <span class="pl-c1">groupby</span>(<span class="pl-c1">:group</span>)
    <span class="pl-c1">combine</span>(<span class="pl-c1">:weight</span> <span class="pl-k">=&gt;</span> sum <span class="pl-k">=&gt;</span> <span class="pl-c1">:total_weight</span>)
<span class="pl-k">end</span></pre></div>
<p>The pipeless block is equivalent to this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="result = let
    var1 = dropmissing(df)
    var2 = filter(r -&gt; r.weight &lt; 6, var1)
    var3 = groupby(var2, :group)
    var4 = combine(var3, :weight =&gt; sum =&gt; :total_weight)
end
"><pre>result <span class="pl-k">=</span> <span class="pl-k">let</span>
    var1 <span class="pl-k">=</span> <span class="pl-c1">dropmissing</span>(df)
    var2 <span class="pl-k">=</span> <span class="pl-c1">filter</span>(r <span class="pl-k">-&gt;</span> r<span class="pl-k">.</span>weight <span class="pl-k">&lt;</span> <span class="pl-c1">6</span>, var1)
    var3 <span class="pl-k">=</span> <span class="pl-c1">groupby</span>(var2, <span class="pl-c1">:group</span>)
    var4 <span class="pl-k">=</span> <span class="pl-c1">combine</span>(var3, <span class="pl-c1">:weight</span> <span class="pl-k">=&gt;</span> sum <span class="pl-k">=&gt;</span> <span class="pl-c1">:total_weight</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-alternative-one-argument-syntax" class="anchor" aria-hidden="true" href="#alternative-one-argument-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternative one-argument syntax</h2>
<p>If your initial argument name is long and / or the chain's result is assigned to a long variable, it can look cleaner if the initial value is moved into the chain.
Here is such a long expression:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a_long_result_variable_name = @chain a_long_input_variable_name begin
    do_something
	do_something_else(parameter)
    do_other_thing(parameter, _)
end
"><pre>a_long_result_variable_name <span class="pl-k">=</span> <span class="pl-c1">@chain</span> a_long_input_variable_name <span class="pl-k">begin</span>
    do_something
	<span class="pl-c1">do_something_else</span>(parameter)
    <span class="pl-c1">do_other_thing</span>(parameter, _)
<span class="pl-k">end</span></pre></div>
<p>This is equivalent to the following expression:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="a_long_result_variable_name = @chain begin
    a_long_input_variable_name
    do_something
	do_something_else(parameter)
    do_other_thing(parameter, _)
end
"><pre>a_long_result_variable_name <span class="pl-k">=</span> <span class="pl-c1">@chain</span> <span class="pl-k">begin</span>
    a_long_input_variable_name
    do_something
	<span class="pl-c1">do_something_else</span>(parameter)
    <span class="pl-c1">do_other_thing</span>(parameter, _)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-one-liner-syntax" class="anchor" aria-hidden="true" href="#one-liner-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>One-liner syntax</h2>
<p>You can also use <code>@chain</code> as a one-liner, where no begin-end block is necessary.
This works well for short sequences that are still easy to parse visually without being on separate lines.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@chain 1:10 filter(isodd, _) sum sqrt
"><pre><span class="pl-c1">@chain</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-c1">filter</span>(isodd, _) sum sqrt</pre></div>
<h2><a id="user-content-the-aside-macro" class="anchor" aria-hidden="true" href="#the-aside-macro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>@aside</code> macro</h2>
<p>For debugging, it's often useful to look at values in the middle of a pipeline.
You can use the <code>@aside</code> macro to mark expressions that should not pass on their result.
For these expressions there is no implicit first argument spliced in if there is no <code>_</code>, because that would be impractical for most purposes.</p>
<p>If for example, we wanted to know how many groups were created after step 3, we could do this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="result = @chain df begin
    dropmissing
    filter(r -&gt; r.weight &lt; 6, _)
    groupby(:group)
    @aside println(&quot;There are $(length(_)) groups after step 3.&quot;)
    combine(:weight =&gt; sum =&gt; :total_weight)
end
"><pre>result <span class="pl-k">=</span> <span class="pl-c1">@chain</span> df <span class="pl-k">begin</span>
    dropmissing
    <span class="pl-c1">filter</span>(r <span class="pl-k">-&gt;</span> r<span class="pl-k">.</span>weight <span class="pl-k">&lt;</span> <span class="pl-c1">6</span>, _)
    <span class="pl-c1">groupby</span>(<span class="pl-c1">:group</span>)
    <span class="pl-c1">@aside</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>There are <span class="pl-v">$(<span class="pl-c1">length</span>(_))</span> groups after step 3.<span class="pl-pds">"</span></span>)
    <span class="pl-c1">combine</span>(<span class="pl-c1">:weight</span> <span class="pl-k">=&gt;</span> sum <span class="pl-k">=&gt;</span> <span class="pl-c1">:total_weight</span>)
<span class="pl-k">end</span></pre></div>
<p>Which is again equivalent to this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="result = let
    var1 = dropmissing(df)
    var2 = filter(r -&gt; r.weight &lt; 6, var1)
    var3 = groupby(var2, :group)
    println(&quot;There are $(length(var3)) groups after step 3.&quot;)
    var4 = combine(var3, :weight =&gt; sum =&gt; :total_weight)
end
"><pre>result <span class="pl-k">=</span> <span class="pl-k">let</span>
    var1 <span class="pl-k">=</span> <span class="pl-c1">dropmissing</span>(df)
    var2 <span class="pl-k">=</span> <span class="pl-c1">filter</span>(r <span class="pl-k">-&gt;</span> r<span class="pl-k">.</span>weight <span class="pl-k">&lt;</span> <span class="pl-c1">6</span>, var1)
    var3 <span class="pl-k">=</span> <span class="pl-c1">groupby</span>(var2, <span class="pl-c1">:group</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>There are <span class="pl-v">$(<span class="pl-c1">length</span>(var3))</span> groups after step 3.<span class="pl-pds">"</span></span>)
    var4 <span class="pl-k">=</span> <span class="pl-c1">combine</span>(var3, <span class="pl-c1">:weight</span> <span class="pl-k">=&gt;</span> sum <span class="pl-k">=&gt;</span> <span class="pl-c1">:total_weight</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-nested-chains" class="anchor" aria-hidden="true" href="#nested-chains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nested Chains</h2>
<p>The <code>@chain</code> macro replaces all underscores in the following block, unless it encounters another <code>@chain</code> macrocall.
In that case, the only underscore that is still replaced by the outer macro is the first argument of the inner <code>@chain</code>.
You can use this, for example, in combination with the <code>@aside</code> macro if you need to process a side result further.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@chain df begin
    dropmissing
    filter(r -&gt; r.weight &lt; 6, _)
    @aside @chain _ begin
            select(:group)
            CSV.write(&quot;filtered_groups.csv&quot;, _)
        end
    groupby(:group)
    combine(:weight =&gt; sum =&gt; :total_weight)
end
"><pre><span class="pl-c1">@chain</span> df <span class="pl-k">begin</span>
    dropmissing
    <span class="pl-c1">filter</span>(r <span class="pl-k">-&gt;</span> r<span class="pl-k">.</span>weight <span class="pl-k">&lt;</span> <span class="pl-c1">6</span>, _)
    <span class="pl-c1">@aside</span> <span class="pl-c1">@chain</span> _ <span class="pl-k">begin</span>
            <span class="pl-c1">select</span>(<span class="pl-c1">:group</span>)
            CSV<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>filtered_groups.csv<span class="pl-pds">"</span></span>, _)
        <span class="pl-k">end</span>
    <span class="pl-c1">groupby</span>(<span class="pl-c1">:group</span>)
    <span class="pl-c1">combine</span>(<span class="pl-c1">:weight</span> <span class="pl-k">=&gt;</span> sum <span class="pl-k">=&gt;</span> <span class="pl-c1">:total_weight</span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-rewriting-rules" class="anchor" aria-hidden="true" href="#rewriting-rules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rewriting Rules</h2>
<p>Here is a list of equivalent expressions, where <code>_</code> is replaced by <code>prev</code> and the new variable is <code>next</code>.
In reality, each new variable simply gets a new name via <code>gensym</code>, which is guaranteed not to conflict with anything else.</p>
<table>
<thead>
<tr>
<th align="left"><strong>Before</strong></th>
<th align="left"><strong>After</strong></th>
<th align="left"><strong>Comment</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>sum</code></td>
<td align="left"><code>next = sum(prev)</code></td>
<td align="left">Symbol gets expanded into function call</td>
</tr>
<tr>
<td align="left"><code>sum()</code></td>
<td align="left"><code>next = sum(prev)</code></td>
<td align="left">First argument is inserted</td>
</tr>
<tr>
<td align="left"><code>sum(_)</code></td>
<td align="left"><code>next = sum(prev)</code></td>
<td align="left">Call expression gets <code>_</code> replaced</td>
</tr>
<tr>
<td align="left"><code>_ + 3</code></td>
<td align="left"><code>next = prev + 3</code></td>
<td align="left">Infix call expressions work the same way as other calls</td>
</tr>
<tr>
<td align="left"><code>+(3)</code></td>
<td align="left"><code>next = prev + 3</code></td>
<td align="left">Infix notation with _ would look better, but this is also possible</td>
</tr>
<tr>
<td align="left"><code>1 + 2</code></td>
<td align="left"><code>next = prev + 1 + 2</code></td>
<td align="left">This might feel weird, but <code>1 + 2</code> is a normal call expression</td>
</tr>
<tr>
<td align="left"><code>filter(isodd, _)</code></td>
<td align="left"><code>next = filter(isodd, prev)</code></td>
<td align="left">Underscore can go anywhere</td>
</tr>
<tr>
<td align="left"><code>@aside println(_)</code></td>
<td align="left"><code>println(prev)</code></td>
<td align="left"><code>println</code> without affecting the pipeline; using <code>_</code></td>
</tr>
<tr>
<td align="left"><code>@aside println("hello")</code></td>
<td align="left"><code>println("hello")</code></td>
<td align="left"><code>println</code> without affecting the pipeline; no implicit first arg</td>
</tr>
<tr>
<td align="left"><code>@. sin</code></td>
<td align="left"><code>next = sin.(prev)</code></td>
<td align="left">Special-cased alternative to <code>sin.()</code></td>
</tr>
<tr>
<td align="left"><code>sin.()</code></td>
<td align="left"><code>next = sin.(prev)</code></td>
<td align="left">First argument is prepended for broadcast calls as well</td>
</tr>
<tr>
<td align="left"><code>somefunc.(x)</code></td>
<td align="left"><code>next = somefunc.(prev, x)</code></td>
<td align="left">First argument is prepended for broadcast calls as well</td>
</tr>
<tr>
<td align="left"><code>@somemacro</code></td>
<td align="left"><code>next = @somemacro(prev)</code></td>
<td align="left">Macro calls without arguments get an argument spliced in</td>
</tr>
<tr>
<td align="left"><code>@somemacro(x)</code></td>
<td align="left"><code>next = @somemacro(prev, x)</code></td>
<td align="left">First argument splicing is the same as with functions</td>
</tr>
<tr>
<td align="left"><code>@somemacro(x, _)</code></td>
<td align="left"><code>next = @somemacro(x, prev)</code></td>
<td align="left">Also underscore behavior</td>
</tr>
</tbody>
</table>
</article></div>