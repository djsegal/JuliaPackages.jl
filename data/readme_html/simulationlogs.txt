<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simulationlogsjl" class="anchor" aria-hidden="true" href="#simulationlogsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimulationLogs.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="assets/logs.png"><img src="assets/logs.png" alt="" style="max-width:100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://jonniedie.github.io/SimulationLogs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/jonniedie/SimulationLogs.jl/actions/workflows/CI"><img src="https://camo.githubusercontent.com/2abe60f29cfd763ffb9814874652387d956042c69ab117bec87fda1e030c290b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6a6f6e6e69656469652f53696d756c6174696f6e4c6f67732e6a6c2f4349" alt="" data-canonical-src="https://img.shields.io/github/workflow/status/jonniedie/SimulationLogs.jl/CI" style="max-width:100%;"></a> <a href="https://codecov.io/gh/jonniedie/SimulationLogs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c579c6e5086bcb4ec7ae1311dae144f8574e37b0bc76255e0a632235c81a6cbe/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6a6f6e6e69656469652f53696d756c6174696f6e4c6f67732e6a6c" alt="" data-canonical-src="https://img.shields.io/codecov/c/github/jonniedie/SimulationLogs.jl" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>SimulationLogs lets you log variables from within a DifferentialEquations.jl ODE simulation.</p>
<h2><a id="user-content-the-basics" class="anchor" aria-hidden="true" href="#the-basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Basics</h2>
<p>To log a variable, use the <code>@log</code> macro before an existing variable declaration in the simulation. The syntax for this looks like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@log x = u[1]+u[3]
"><pre><span class="pl-c1">@log</span> x <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">+</span>u[<span class="pl-c1">3</span>]</pre></div>
<p>To log an expression to an output variable without creating that variable in the simulation use the following syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@log x u[1]+u[3]
"><pre><span class="pl-c1">@log</span> x u[<span class="pl-c1">1</span>]<span class="pl-k">+</span>u[<span class="pl-c1">3</span>]</pre></div>
<p>To extract logged values from a simulation, either use the <code>logged_solve</code> function to obtain a <code>Logged</code> solution or call the <code>get_log</code> function on an existing solution object.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DifferentialEquations
using SimulationLogs

function lorenz!(du, u, p, t)
    @log a = u[2]-u[1]
    @log b u[3]+a
    du[1] = p[1]*a
    du[2] = u[1]*(p[2]-u[3]) - u[2]
    du[3] = u[1]*u[2] - p[3]*u[3]
end

p = [10.0, 28.0, 8/3]
u0 = [1.0, 0.0, 0.0]
tspan = (0.0, 100.0)

prob = ODEProblem(lorenz!, u0, tspan, p)
sol = solve(prob)
"><pre><span class="pl-k">using</span> DifferentialEquations
<span class="pl-k">using</span> SimulationLogs

<span class="pl-k">function</span> <span class="pl-en">lorenz!</span>(du, u, p, t)
    <span class="pl-c1">@log</span> a <span class="pl-k">=</span> u[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">1</span>]
    <span class="pl-c1">@log</span> b u[<span class="pl-c1">3</span>]<span class="pl-k">+</span>a
    du[<span class="pl-c1">1</span>] <span class="pl-k">=</span> p[<span class="pl-c1">1</span>]<span class="pl-k">*</span>a
    du[<span class="pl-c1">2</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>(p[<span class="pl-c1">2</span>]<span class="pl-k">-</span>u[<span class="pl-c1">3</span>]) <span class="pl-k">-</span> u[<span class="pl-c1">2</span>]
    du[<span class="pl-c1">3</span>] <span class="pl-k">=</span> u[<span class="pl-c1">1</span>]<span class="pl-k">*</span>u[<span class="pl-c1">2</span>] <span class="pl-k">-</span> p[<span class="pl-c1">3</span>]<span class="pl-k">*</span>u[<span class="pl-c1">3</span>]
<span class="pl-k">end</span>

p <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">28.0</span>, <span class="pl-c1">8</span><span class="pl-k">/</span><span class="pl-c1">3</span>]
u0 <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.0</span>, <span class="pl-c1">100.0</span>)

prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(lorenz!, u0, tspan, p)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob)</pre></div>
<p>Now we can extract the simulation log with <code>get_log</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; out = get_log(sol)
SimulationLog with signals:
  a :: Float64
  b :: Float64

julia&gt; out.a
1278-element Vector{Float64}:
 -1.0
 -0.9986446507807255
 -0.9851391500213387
 -0.8795890363074045
  ⋮
  5.072093963230147
  5.402915814211024
  2.8508213179241197
  1.1035303908083802

julia&gt; out.b
1278-element Vector{Float64}:
 -1.0
 -0.9986446329663776
 -0.9851370030659728
 -0.8794452356321748
  ⋮
 40.76318830048574
 37.12952959918623
 29.24474520341088
 23.899870630658324
"><pre>julia<span class="pl-k">&gt;</span> out <span class="pl-k">=</span> <span class="pl-c1">get_log</span>(sol)
SimulationLog with signals<span class="pl-k">:</span>
  a <span class="pl-k">::</span> <span class="pl-c1">Float64</span>
  b <span class="pl-k">::</span> <span class="pl-c1">Float64</span>

julia<span class="pl-k">&gt;</span> out<span class="pl-k">.</span>a
<span class="pl-c1">1278</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9986446507807255</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9851391500213387</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8795890363074045</span>
  ⋮
  <span class="pl-c1">5.072093963230147</span>
  <span class="pl-c1">5.402915814211024</span>
  <span class="pl-c1">2.8508213179241197</span>
  <span class="pl-c1">1.1035303908083802</span>

julia<span class="pl-k">&gt;</span> out<span class="pl-k">.</span>b
<span class="pl-c1">1278</span><span class="pl-k">-</span>element Vector{Float64}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9986446329663776</span>
 <span class="pl-k">-</span><span class="pl-c1">0.9851370030659728</span>
 <span class="pl-k">-</span><span class="pl-c1">0.8794452356321748</span>
  ⋮
 <span class="pl-c1">40.76318830048574</span>
 <span class="pl-c1">37.12952959918623</span>
 <span class="pl-c1">29.24474520341088</span>
 <span class="pl-c1">23.899870630658324</span></pre></div>
<p>We can also use <code>scope</code> to visually inspect signals from the simulation. This requires using the Plots.jl library. For an interactive scope (pan, zoom, etc.), use the PlotlyJS backend of Plots by calling <code>plotlyjs()</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots; plotlyjs()

scope(sol, [:a, :b])
"><pre><span class="pl-k">using</span> Plots; <span class="pl-c1">plotlyjs</span>()

<span class="pl-c1">scope</span>(sol, [<span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>])</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="assets/scope.svg"><img src="assets/scope.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-news" class="anchor" aria-hidden="true" href="#news"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>News</h2>
<p>As of version 0.3.0, we can now handle cases where parameters change in <code>DiscreteCallback</code>s. The callback or callback set must be passed into the <code>get_log</code> function through the keyword <code>callback</code>. Alternatively, just replace your <code>solve</code> with <code>logged_solve</code> and everything will be handled automatically. The logged variables from a <code>logged_solve</code> can be accessed in a solution object <code>sol</code> as <code>sol.log</code>.</p>
<h2><a id="user-content-faqs" class="anchor" aria-hidden="true" href="#faqs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FAQs</h2>
<h3><a id="user-content-how-does-this-work-with-time-stepping-and-variable-caches-and-all-that" class="anchor" aria-hidden="true" href="#how-does-this-work-with-time-stepping-and-variable-caches-and-all-that"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How does this work with time stepping and variable caches and all that?</h3>
<p>Despite the name, <code>@log</code> doesn't actually log anything while the simulation is running. The "logging" actually happens by calculating values from the stored solutions when <code>get_log</code> is called.</p>
<h3><a id="user-content-wait-how-does-that-work" class="anchor" aria-hidden="true" href="#wait-how-does-that-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Wait, how does that work?</h3>
<p>There is a global <code>SimulationLog</code> that is turned off by default. When it is off, the <code>@log</code> macro basically doesn't do anything. The <code>get_log</code> function turns on the global log and then calls your simulation function (derivative function, vector field... whatever you want to call it) for each time point (these can be supplied, but will default to the saved time points). A copy of the global simulation log is passed as an output to the user, after which the global log then gets erased and turned back off.</p>
<h3><a id="user-content-will-logging-variables-slow-my-simulation-down" class="anchor" aria-hidden="true" href="#will-logging-variables-slow-my-simulation-down"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Will logging variables slow my simulation down?</h3>
<p>Nope. There is no runtime overhead because no logging is actually happening during the simulation.</p>
<h3><a id="user-content-how-does-this-work-when-the-same-log-gets-called-multiple-times-in-the-same-time-step-eg-in-a-subfunction-that-gets-called-more-than-once" class="anchor" aria-hidden="true" href="#how-does-this-work-when-the-same-log-gets-called-multiple-times-in-the-same-time-step-eg-in-a-subfunction-that-gets-called-more-than-once"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How does this work when the same <code>@log</code> gets called multiple times in the same time step (e.g. in a subfunction that gets called more than once)?</h3>
<p>The logged solution will then be a <code>n</code> x <code>m</code> <code>Matrix</code> where <code>n</code> is the number of time steps and <code>m</code> is the number of times the <code>@log</code> macro was called in a single time step.</p>
<h3><a id="user-content-what-if-my-parameters-are-changed-during-the-simulation" class="anchor" aria-hidden="true" href="#what-if-my-parameters-are-changed-during-the-simulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What if my parameters are changed during the simulation?</h3>
<p>If you do this, <em>you must include the callback you used to change the parameters</em> in the <code>get_log</code> function as a keyword argument <code>callback</code>. If you changed the parameters without using a callback, the results will be incorrect (but in general you shouldn't be changing parameters without a callback anyway).</p>
<h3><a id="user-content-what-if-my-simulation-depends-on-some-changing-global-state" class="anchor" aria-hidden="true" href="#what-if-my-simulation-depends-on-some-changing-global-state"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What if my simulation depends on some changing global state?</h3>
<p>Solutions that changed global state cannot be handled (or, rather, <code>@log</code> will most likely give you incorrect results).</p>
<h2><a id="user-content-attributions" class="anchor" aria-hidden="true" href="#attributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Attributions</h2>
<div>Icons made by <a href="https://www.freepik.com" title="Freepik" rel="nofollow">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon" rel="nofollow">www.flaticon.com</a></div>
</article></div>