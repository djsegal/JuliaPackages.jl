<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 align="center"><a id="user-content-----classicalciphersjl" class="anchor" aria-hidden="true" href="#----classicalciphersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>
    ClassicalCiphers.jl
</h1>

<p><a href="https://Smaug123.github.io/ClassicalCiphers.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/Smaug123/ClassicalCiphers.jl/actions?query=workflow%3ACI"><img src="https://github.com/invenia/PkgTemplates.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/Smaug123/ClassicalCiphers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/47d96fcd6274b703ff89c9aac646dd1581c29e55061d762ed1577b195d0ea6a2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f536d6175673132332f436c6173736963616c436970686572732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/Smaug123/ClassicalCiphers.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-main-features" class="anchor" aria-hidden="true" href="#main-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Main Features</h2>
<p>Provides access to encryption and decryption of strings according to a variety of classical algorithms.  Classical ciphers were created before computers, and thus work on letters rather than bits.</p>
<p>The Solitaire cipher is included for completeness, though it is perhaps not strictly classical.</p>
<h2><a id="user-content-currently-implemented" class="anchor" aria-hidden="true" href="#currently-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Currently Implemented</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Caesar_cipher" rel="nofollow">Caesar</a></li>
<li><a href="https://en.wikipedia.org/wiki/Affine_cipher" rel="nofollow">Affine</a></li>
<li><a href="https://en.wikipedia.org/wiki/Substitution_cipher" rel="nofollow">Monoalphabetic substitution</a></li>
<li><a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" rel="nofollow">Vigen√®re</a></li>
<li><a href="http://practicalcryptography.com/ciphers/porta-cipher/" rel="nofollow">Portas</a></li>
<li><a href="https://en.wikipedia.org/wiki/Hill_cipher" rel="nofollow">Hill</a></li>
<li><a href="https://en.wikipedia.org/wiki/Playfair_cipher" rel="nofollow">Playfair</a></li>
<li><a href="https://en.wikipedia.org/wiki/Enigma_machine" rel="nofollow">Enigma (M3 Army)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Solitaire_(cipher)" rel="nofollow">Solitaire</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rail_fence_cipher" rel="nofollow">Rail Fence</a></li>
<li><a href="https://en.wikipedia.org/wiki/Atbash" rel="nofollow">Atbash</a></li>
</ul>
<h2><a id="user-content-gotchas" class="anchor" aria-hidden="true" href="#gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Gotchas</h2>
<p>In general, <code>encrypt</code> functions turn text upper-case, while <code>decrypt</code> functions
turn text lower-case.
This is consistent with convention, but may not be expected.</p>
<h2><a id="user-content-code-samples" class="anchor" aria-hidden="true" href="#code-samples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Code samples</h2>
<p>This is the last section of the readme. Nothing appears after this section.</p>
<h3><a id="user-content-caesar-cipher" class="anchor" aria-hidden="true" href="#caesar-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caesar cipher</h3>
<p>Encrypt the text "Hello, World!" with a Caesar offset of 3 (that is, sending
'a' to 'd'):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_caesar(&quot;Hello, World!&quot;, 3)
# outputs &quot;KHOOR, ZRUOG!&quot;
"><pre><span class="pl-c1">encrypt_caesar</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "KHOOR, ZRUOG!"</span></pre></div>
<p>Notice that <code>encrypt_caesar</code> turns everything upper-case, but retains symbols.</p>
<p>Decrypt the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_caesar(&quot;Khoor, Zruog!&quot;, 3)
# outputs &quot;hello, world!&quot;
"><pre><span class="pl-c1">decrypt_caesar</span>(<span class="pl-s"><span class="pl-pds">"</span>Khoor, Zruog!<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "hello, world!"</span></pre></div>
<p>Likewise, <code>decrypt_caesar</code> turns everything lower-case, but retains symbols.</p>
<p>Automatically crack the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="crack_caesar(&quot;Khoor, Zruog!&quot;)
# outputs (&quot;hello, world!&quot;, 3)
"><pre><span class="pl-c1">crack_caesar</span>(<span class="pl-s"><span class="pl-pds">"</span>Khoor, Zruog!<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs ("hello, world!", 3)</span></pre></div>
<h3><a id="user-content-affine-cipher" class="anchor" aria-hidden="true" href="#affine-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Affine cipher</h3>
<p>Encrypt the text "Hello, World!" with the function <code>x -&gt; 3x+4</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_affine(&quot;Hello, World!&quot;, 3, 4)
# outputs &quot;ZQLLU, SUDLN!&quot;
"><pre><span class="pl-c1">encrypt_affine</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "ZQLLU, SUDLN!"</span></pre></div>
<p>Notice that <code>encrypt_affine</code> turns everything upper-case, but retains symbols.
The multiplier is the second argument, and the additive constant is the third.</p>
<p>The multiplier must be coprime to 26, or an error is thrown.</p>
<p>Decrypt the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_affine(&quot;ZQLLU, SUDLN!&quot;, 3, 4)
# outputs &quot;hello, world!&quot;
"><pre><span class="pl-c1">decrypt_affine</span>(<span class="pl-s"><span class="pl-pds">"</span>ZQLLU, SUDLN!<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "hello, world!"</span></pre></div>
<p>Crack the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="crack_affine(&quot;ZQLLU, SUDLN!&quot;)
# outputs (&quot;hello, world!&quot;, (3, 4))
"><pre><span class="pl-c1">crack_affine</span>(<span class="pl-s"><span class="pl-pds">"</span>ZQLLU, SUDLN!<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs ("hello, world!", (3, 4))</span></pre></div>
<p>You can provide <code>mult=</code> or <code>add=</code> options to <code>crack_affine</code>, if they are known,
to help it out.</p>
<h3><a id="user-content-monoalphabetic-cipher" class="anchor" aria-hidden="true" href="#monoalphabetic-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Monoalphabetic cipher</h3>
<p>Encrypt the text "Hello, World!" with the same Caesar cipher, but
viewed as a monoalphabetic substitution:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_monoalphabetic(&quot;Hello, World!&quot;, &quot;DEFGHIJKLMNOPQRSTUVWXYZABC&quot;)
# outputs &quot;KHOOR, ZRUOG!&quot;
"><pre><span class="pl-c1">encrypt_monoalphabetic</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DEFGHIJKLMNOPQRSTUVWXYZABC<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "KHOOR, ZRUOG!"</span></pre></div>
<p>Decrypt the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_monoalphabetic(&quot;Khoor, Zruog!&quot;, &quot;DEFGHIJKLMNOPQRSTUVWXYZABC&quot;)
# outputs &quot;hello, world!&quot;
"><pre><span class="pl-c1">decrypt_monoalphabetic</span>(<span class="pl-s"><span class="pl-pds">"</span>Khoor, Zruog!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>DEFGHIJKLMNOPQRSTUVWXYZABC<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "hello, world!"</span></pre></div>
<p>Encrypt using a Dict:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_monoalphabetic(&quot;aBcbDd&quot;, Dict{Char, Char}('a' =&gt; '5', 'B' =&gt; '@', 'b' =&gt; 'o'))
# outputs &quot;5@coDd&quot;
"><pre><span class="pl-c1">encrypt_monoalphabetic</span>(<span class="pl-s"><span class="pl-pds">"</span>aBcbDd<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span><span class="pl-c1">{Char, Char}</span>(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>5<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>@<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>o<span class="pl-pds">'</span></span>))
<span class="pl-c"><span class="pl-c">#</span> outputs "5@coDd"</span></pre></div>
<p>Notice that <code>encrypt_monoalphabetic</code> <em>does not</em> convert its input to uppercase
when a Dict key is supplied.
It simply makes all specified changes, and leaves the rest of the string unchanged.</p>
<p>Cracking a cipher:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="crack_monoalphabetic(str, chatty=0, rounds=10)
# outputs (decrypted_string, key)
"><pre><span class="pl-c1">crack_monoalphabetic</span>(str, chatty<span class="pl-k">=</span><span class="pl-c1">0</span>, rounds<span class="pl-k">=</span><span class="pl-c1">10</span>)
<span class="pl-c"><span class="pl-c">#</span> outputs (decrypted_string, key)</span></pre></div>
<p>The various optional arguments to <code>crack_monoalphabetic</code> are:</p>
<ul>
<li><code>starting_key=""</code>, which when specified (for example, as "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
starts the simulation at the given key. The default causes it to start with the most
common characters being decrypted to the most common English characters.</li>
<li><code>min_temp=0.0001</code>, which is the temperature at which we stop the simulation.</li>
<li><code>temp_factor=0.97</code>, which is the factor by which the temperature decreases each step.</li>
<li><code>chatty=0</code>, which can be set to 1 to print whenever the key is updated, or 2 to print
whenever any new key is considered.</li>
<li><code>rounds=1</code>, which sets the number of repetitions we perform. Each round starts with the
best key we've found so far.</li>
<li><code>acceptance_prob=((e, ep, t) -&gt; ep&gt;e ? 1 : exp(-(e-ep)/t))</code>, which is the probability
with which we accept new key of fitness ep, given that the current key has fitness e,
at temperature t.</li>
</ul>
<p>The simulation is set up to start each round off at a successively lower temperature.</p>
<h3><a id="user-content-vigen√®re-cipher" class="anchor" aria-hidden="true" href="#vigen√®re-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vigen√®re cipher</h3>
<p>Encrypt the text "Hello, World!" with a Vigen√®re cipher of key "ab":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_vigenere(&quot;Hello, World!&quot;, &quot;ab&quot;)
# outputs &quot;HFLMOXOSLE&quot;
"><pre><span class="pl-c1">encrypt_vigenere</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ab<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "HFLMOXOSLE"</span></pre></div>
<p>Decrypt the same text with the offsets given as an array:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_vigenere(&quot;HFLMOXOSLE&quot;, [0, 1])
# outputs &quot;helloworld&quot;
"><pre><span class="pl-c1">decrypt_vigenere</span>(<span class="pl-s"><span class="pl-pds">"</span>HFLMOXOSLE<span class="pl-pds">"</span></span>, [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>])
<span class="pl-c"><span class="pl-c">#</span> outputs "helloworld"</span></pre></div>
<p>Notice that the offset <code>0</code> corresponds to the key <code>a</code>.</p>
<p>Crack a text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="crack_vigenere(str)
"><pre><span class="pl-c1">crack_vigenere</span>(str)</pre></div>
<p>This attempts to use the index of coincidence to find the keylength,
and then performs frequency analysis to derive the key.
It returns (key, decrypted text).</p>
<p>If the keylength is known, specifying it as <code>crack_vigenere(str, keylength=6)</code>
may aid decryption.</p>
<h3><a id="user-content-portas-cipher" class="anchor" aria-hidden="true" href="#portas-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Portas cipher</h3>
<p>Encrypt the text "Hello, World!" with a Portas cipher of key "ab":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_portas(&quot;Hello, World!&quot;, &quot;ab&quot;)
# outputs &quot;URYYB, JBEYQ!&quot;
"><pre><span class="pl-c1">encrypt_portas</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ab<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "URYYB, JBEYQ!"</span></pre></div>
<p>Note that the input has been made uppercase, but symbols have been preserved.
The key is expected to be letters only; it is converted to uppercase and symbols
are stripped out before use.</p>
<p>Decrypt the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_portas(&quot;URYYB, JBEYQ!&quot;, &quot;ab&quot;)
# outputs &quot;hello, world!&quot;
"><pre><span class="pl-c1">decrypt_portas</span>(<span class="pl-s"><span class="pl-pds">"</span>URYYB, JBEYQ!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ab<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "hello, world!"</span></pre></div>
<p>Notice that the input has been made lowercase.</p>
<h3><a id="user-content-hill-cipher" class="anchor" aria-hidden="true" href="#hill-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hill cipher</h3>
<p>Encrypt the text "Hello, World!" with a Hill key of matrix <code>[1 2; 5 7]</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_hill(&quot;Hello, World!&quot;, [1 2; 5 7])
# outputs &quot;PHHRGUWQRV&quot;
"><pre><span class="pl-c1">encrypt_hill</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">5</span> <span class="pl-c1">7</span>])
<span class="pl-c"><span class="pl-c">#</span> outputs "PHHRGUWQRV"</span></pre></div>
<p>Notice that the input has been made uppercase and symbols have been stripped out.</p>
<p>The key matrix must be invertible mod 26. That is, its determinant must be
coprime to 26.</p>
<p>Encrypt the same text with the same key, this time represented as a string:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_hill(&quot;Hello, World!&quot;, &quot;bcfh&quot;)
# outputs &quot;PLHCGQWHRY&quot;
"><pre><span class="pl-c1">encrypt_hill</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bcfh<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "PLHCGQWHRY"</span></pre></div>
<p>If the plaintext-length is not a multiple of the dimension of the key matrix,
it is padded with X:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_hill(&quot;Hello&quot;, &quot;bcfh&quot;)
# outputs &quot;PLHCIX&quot;

decrypt_hill(&quot;PLHCIX&quot;, &quot;bcfh&quot;)
# outputs &quot;hellox&quot;
"><pre><span class="pl-c1">encrypt_hill</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bcfh<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "PLHCIX"</span>

<span class="pl-c1">decrypt_hill</span>(<span class="pl-s"><span class="pl-pds">"</span>PLHCIX<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bcfh<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "hellox"</span></pre></div>
<p>Decrypt the text "PLHCGQWHRY" with key of <code>[1 2; 5 7]</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_hill(&quot;PLHCGQWHRY&quot;, [1 2; 5 7])
# outputs &quot;helloworld&quot;
"><pre><span class="pl-c1">decrypt_hill</span>(<span class="pl-s"><span class="pl-pds">"</span>PLHCGQWHRY<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span> <span class="pl-c1">2</span>; <span class="pl-c1">5</span> <span class="pl-c1">7</span>])
<span class="pl-c"><span class="pl-c">#</span> outputs "helloworld"</span></pre></div>
<p>Do the same, but using the string representation of the key:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_hill(&quot;PLHCGQWHRY&quot;, &quot;bcfh&quot;)
# outputs &quot;helloworld&quot;
"><pre><span class="pl-c1">decrypt_hill</span>(<span class="pl-s"><span class="pl-pds">"</span>PLHCGQWHRY<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>bcfh<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "helloworld"</span></pre></div>
<h3><a id="user-content-playfair-cipher" class="anchor" aria-hidden="true" href="#playfair-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Playfair cipher</h3>
<p>Encrypt the text "Hello, World!" with the Playfair cipher, key "playfair example":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_playfair(&quot;Hello, World!&quot;, &quot;playfair example&quot;)
# outputs &quot;DMYRANVQCRGE&quot;
"><pre><span class="pl-c1">encrypt_playfair</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>playfair example<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "DMYRANVQCRGE"</span></pre></div>
<p>The key is converted to "PLAYFIREXM", removing duplicate letters and punctuation.
The padding character used to separate double letters, and to ensure the final
plaintext is of even length, is 'X'; the backup character is 'Z' (used for separating
consecutive 'X's).</p>
<p>Encrypt the same text using an explicitly specified keysquare:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="arr = ['P' 'L' 'A' 'Y' 'F'; 'I' 'R' 'E' 'X' 'M'; 'B' 'C' 'D' 'G' 'H'; 'K' 'N' 'O' 'Q' 'S'; 'T' 'U' 'V' 'W' 'Z']
encrypt_playfair(&quot;Hello, World!&quot;, arr)
# outputs &quot;DMYRANVQCRGE&quot;
"><pre>arr <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>P<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>L<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>Y<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>; <span class="pl-s"><span class="pl-pds">'</span>I<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>R<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>X<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>M<span class="pl-pds">'</span></span>; <span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>D<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>G<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>H<span class="pl-pds">'</span></span>; <span class="pl-s"><span class="pl-pds">'</span>K<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>N<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>O<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>Q<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>S<span class="pl-pds">'</span></span>; <span class="pl-s"><span class="pl-pds">'</span>T<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>U<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>V<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>W<span class="pl-pds">'</span></span> <span class="pl-s"><span class="pl-pds">'</span>Z<span class="pl-pds">'</span></span>]
<span class="pl-c1">encrypt_playfair</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, arr)
<span class="pl-c"><span class="pl-c">#</span> outputs "DMYRANVQCRGE"</span></pre></div>
<p>Note that the keysquare must be 25 letters, in a 5x5 array.</p>
<p>Optionally specify the two letters which are to be combined (default 'I','J'):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_playfair(&quot;IJXYZA&quot;, &quot;PLAYFIREXM&quot;, combined=('I', 'J'))
# outputs &quot;RMRMFWYE&quot;
encrypt_playfair(&quot;IJXYZA&quot;, &quot;PLAYFIREXM&quot;, combined=('X', 'Z'))
# outputs &quot;BSGXEY&quot;
"><pre><span class="pl-c1">encrypt_playfair</span>(<span class="pl-s"><span class="pl-pds">"</span>IJXYZA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>PLAYFIREXM<span class="pl-pds">"</span></span>, combined<span class="pl-k">=</span>(<span class="pl-s"><span class="pl-pds">'</span>I<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>J<span class="pl-pds">'</span></span>))
<span class="pl-c"><span class="pl-c">#</span> outputs "RMRMFWYE"</span>
<span class="pl-c1">encrypt_playfair</span>(<span class="pl-s"><span class="pl-pds">"</span>IJXYZA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>PLAYFIREXM<span class="pl-pds">"</span></span>, combined<span class="pl-k">=</span>(<span class="pl-s"><span class="pl-pds">'</span>X<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Z<span class="pl-pds">'</span></span>))
<span class="pl-c"><span class="pl-c">#</span> outputs "BSGXEY"</span></pre></div>
<p>In this case, the letters are combined in the plaintext, and then treated as one throughout.</p>
<p>Decrypt the same text:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_playfair(&quot;RMRMFWYE&quot;, &quot;playfair example&quot;)
# outputs &quot;ixixyzax&quot;
"><pre><span class="pl-c1">decrypt_playfair</span>(<span class="pl-s"><span class="pl-pds">"</span>RMRMFWYE<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>playfair example<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "ixixyzax"</span></pre></div>
<p>The decrypting function does not attempt to delete padding letters.
Note that in the above example, the text originally encrypted was "IJXYZA";
the 'J' was transcribed as 'I', as specified by the default <code>combined=('I', 'J')</code>,
and then padding 'X's were introduced to ensure no digraph was a double letter.
Finally, an 'X' was appended to the string, to ensure that the string was not of odd
length.</p>
<h3><a id="user-content-enigma" class="anchor" aria-hidden="true" href="#enigma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Enigma</h3>
<p>The variant of Enigma implemented is the M3 Army version.
This has five possible rotors, of which three are chosen in some distinct order.</p>
<p>The plugboard may be specified either as a <code>Array{Tuple{Char, Char}}</code> or a string.
For example, both the following plugboards have the same effect:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="&quot;ABCDEF&quot;
[('A', 'B'), ('C', 'D'), ('E', 'F')]
"><pre><span class="pl-s"><span class="pl-pds">"</span>ABCDEF<span class="pl-pds">"</span></span>
[(<span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>), (<span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>D<span class="pl-pds">'</span></span>), (<span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>)]</pre></div>
<p>For no plugboard, use <code>Tuple{Char, Char}[]</code> or <code>""</code>.</p>
<p>The rotor order may be specified as <code>[5, 1, 2]</code> indicating that the leftmost rotor should be rotor 5, the middle should be rotor 1, and the rightmost should be rotor 2.
That is, when a letter goes into Enigma, it passes first through rotor 2, then rotor 1, then rotor 5.
(That is, letters move through the machine from right to left, before being reflected.)</p>
<p>The ring settings may be specified as a three-character string.
For example, <code>"AAA"</code> indicates no adjustment to the rings.
TODO: expand this.</p>
<p>The initial key may be specified as a three-character string.
For example, <code>"AQY"</code> indicates that the leftmost rotor should start at position <code>'A'</code>, the middle rotor at position <code>'Q'</code>, and the rightmost at position <code>'Y'</code>.</p>
<p>Three reflectors are given; they may be specified with <code>reflector_id='A'</code> or <code>'B'</code> or <code>'C'</code>.
Alternatively, specify <code>reflector_id="YRUHQSLDPXNGOKMIEBFZCWVJAT"</code> to use a custom reflector; this particular example happens to be reflector <code>'B'</code>, so is equivalent to <code>reflector_id='B'</code>.</p>
<p>For example, the following encrypts <code>"AAA"</code> with rotors 1, 2, 3, with key <code>"ABC"</code>, an empty plugboard, the default <code>'B'</code> reflector, and ring <code>"AAA"</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_enigma(&quot;AAA&quot;, [1,2,3], &quot;ABC&quot;)
# outputs &quot;CXT&quot;
"><pre><span class="pl-c1">encrypt_enigma</span>(<span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds">"</span>ABC<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "CXT"</span></pre></div>
<p>This is synonymous with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_enigma(&quot;AAA&quot;, [1,2,3], &quot;ABC&quot;, ring=&quot;AAA&quot;, reflector_id='B', stecker=&quot;&quot;)
"><pre><span class="pl-c1">encrypt_enigma</span>(<span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds">"</span>ABC<span class="pl-pds">"</span></span>, ring<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, reflector_id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>, stecker<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p>And also with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_enigma(&quot;AAA&quot;, [1,2,3], &quot;ABC&quot;, ring=&quot;AAA&quot;, reflector_id=&quot;YRUHQSLDPXNGOKMIEBFZCWVJAT&quot;, stecker=&quot;&quot;)
"><pre><span class="pl-c1">encrypt_enigma</span>(<span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds">"</span>ABC<span class="pl-pds">"</span></span>, ring<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, reflector_id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>YRUHQSLDPXNGOKMIEBFZCWVJAT<span class="pl-pds">"</span></span>, stecker<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p>And also with:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_enigma(&quot;AAA&quot;, [1,2,3], &quot;ABC&quot;, ring=&quot;AAA&quot;, reflector_id='B', stecker=Tuple{Char, Char}[])
"><pre><span class="pl-c1">encrypt_enigma</span>(<span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>], <span class="pl-s"><span class="pl-pds">"</span>ABC<span class="pl-pds">"</span></span>, ring<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>AAA<span class="pl-pds">"</span></span>, reflector_id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>B<span class="pl-pds">'</span></span>, stecker<span class="pl-k">=</span>Tuple{Char, Char}[])</pre></div>
<p>The arguments to <code>decrypt_enigma</code> are identical.
(In fact, <code>decrypt_enigma</code> and <code>encrypt_enigma</code> are essentially the same function, because Enigma is reversible.)
As ever, <code>encrypt_enigma</code> uppercases its input, and <code>decrypt_enigma</code> lowercases it.</p>
<h3><a id="user-content-solitaire-cipher" class="anchor" aria-hidden="true" href="#solitaire-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Solitaire cipher</h3>
<p>Encrypt the text "Hello, World!" with the Solitaire cipher, key "crypto":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_solitaire(&quot;Hello, World!&quot;, &quot;crypto&quot;)
# outputs &quot;GRNNQISRYA&quot;
"><pre><span class="pl-c1">encrypt_solitaire</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>crypto<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> outputs "GRNNQISRYA"</span></pre></div>
<p>Decrypt text with an initial deck specified:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="decrypt_solitaire(&quot;EXKYI ZSGEH UNTIQ&quot;, collect(1:54))
# outputs &quot;aaaaaaaaaaaaaaa&quot;, as per https://www.schneier.com/code/sol-test.txt
"><pre><span class="pl-c1">decrypt_solitaire</span>(<span class="pl-s"><span class="pl-pds">"</span>EXKYI ZSGEH UNTIQ<span class="pl-pds">"</span></span>, <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">54</span>))
<span class="pl-c"><span class="pl-c">#</span> outputs "aaaaaaaaaaaaaaa", as per https://www.schneier.com/code/sol-test.txt</span></pre></div>
<h3><a id="user-content-rail-fence-cipher" class="anchor" aria-hidden="true" href="#rail-fence-cipher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rail Fence cipher</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; construct_railfence(&quot;WE ARE DISCOVERED. FLEE AT ONCE&quot;, 3)
3√ó26 Array{Char,2}:
 'W'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'E'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'C'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'R'  ‚Ä¶  '‚ñ°'  '‚ñ°'  'F'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'A'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'C'  '‚ñ°'
 '‚ñ°'  'E'  '‚ñ°'  'R'  '‚ñ°'  'D'  '‚ñ°'  'S'  '‚ñ°'  'O'  '‚ñ°'  'E'  '‚ñ°'     '‚ñ°'  '.'  '‚ñ°'  'L'  '‚ñ°'  'E'  '‚ñ°'  'T'  '‚ñ°'  'N'  '‚ñ°'  'E'
 '‚ñ°'  '‚ñ°'  'A'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'I'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'V'  '‚ñ°'  '‚ñ°'     'D'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'E'  '‚ñ°'  '‚ñ°'  '‚ñ°'  'O'  '‚ñ°'  '‚ñ°'  '‚ñ°'

julia&gt; encrypt_railfence(&quot;WE ARE DISCOVERED. FLEE AT ONCE&quot;, 3) # this reads the above matrix row by row
&quot;WECRFACERDSOEE.LETNEAIVDEO&quot;

julia&gt; decrypt_railfence(&quot;WECRFACERDSOEE.LETNEAIVDEO&quot;, 3)
&quot;wearediscovered.fleeatonce&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">construct_railfence</span>(<span class="pl-s"><span class="pl-pds">"</span>WE ARE DISCOVERED. FLEE AT ONCE<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">√ó</span><span class="pl-c1">26</span> Array{Char,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-s"><span class="pl-pds">'</span>W<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>R<span class="pl-pds">'</span></span>  ‚Ä¶  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>F<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>C<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>R<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>D<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>S<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>O<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>     <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>.<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>L<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>T<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>N<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>
 <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>A<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>I<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>V<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>     <span class="pl-s"><span class="pl-pds">'</span>D<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>E<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>O<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>  <span class="pl-s"><span class="pl-pds">'</span>‚ñ°<span class="pl-pds">'</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">encrypt_railfence</span>(<span class="pl-s"><span class="pl-pds">"</span>WE ARE DISCOVERED. FLEE AT ONCE<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> this reads the above matrix row by row</span>
<span class="pl-s"><span class="pl-pds">"</span>WECRFACERDSOEE.LETNEAIVDEO<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">decrypt_railfence</span>(<span class="pl-s"><span class="pl-pds">"</span>WECRFACERDSOEE.LETNEAIVDEO<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span>)
<span class="pl-s"><span class="pl-pds">"</span>wearediscovered.fleeatonce<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-atbash" class="anchor" aria-hidden="true" href="#atbash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Atbash</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="encrypt_atbash(&quot;hello this is plaintext&quot;, &quot;abcdefghijklmnopqrstuvwxyz&quot;) == encrypt_substitution(&quot;hello this is plaintext&quot;, &quot;abcdefghijklmnopqrstuvwxyz&quot;, &quot;zyxwvutsrqponmlkjihgfedcba&quot;)
"><pre><span class="pl-c1">encrypt_atbash</span>(<span class="pl-s"><span class="pl-pds">"</span>hello this is plaintext<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>abcdefghijklmnopqrstuvwxyz<span class="pl-pds">"</span></span>) <span class="pl-k">==</span> <span class="pl-c1">encrypt_substitution</span>(<span class="pl-s"><span class="pl-pds">"</span>hello this is plaintext<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>abcdefghijklmnopqrstuvwxyz<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>zyxwvutsrqponmlkjihgfedcba<span class="pl-pds">"</span></span>)</pre></div>
</article></div>