<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pysyntax--" class="anchor" aria-hidden="true" href="#pysyntax--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PySyntax <a href="https://travis-ci.org/kdheepak/PySyntax.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cc42c730bb76366bde21d413b507a67dc041b3c99883a65a5b01452b16eab9f7/68747470733a2f2f7472617669732d63692e6f72672f6b6468656570616b2f507953796e7461782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis-CI Build Status" data-canonical-src="https://travis-ci.org/kdheepak/PySyntax.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/kdheepak/pysyntax-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8a3e1b21667b5110f1f983b362e5226d0e0ecb1e156fb3017ca3fbe8f5101186/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f63692f6772756e746a732f6772756e742e737667" alt="AppVeyor" data-canonical-src="https://img.shields.io/appveyor/ci/gruntjs/grunt.svg" style="max-width:100%;"></a></h1>
<p><strong>This package is deprecated:</strong></p>
<ul>
<li><a href="https://github.com/JuliaLang/julia/issues/1974">JuliaLang/julia#1974</a> ("allow overloading of a.b field access syntax") has been fixed with the merging of <a href="https://github.com/JuliaLang/julia/pull/24960">JuliaLang/julia#24960</a>;</li>
<li>The dot-overloading functionality it enabled has since been implemented in PyCall.jl, with the merge of <a href="https://github.com/JuliaPy/PyCall.jl/pull/517">JuliaPy/PyCall.jl#517</a>.</li>
</ul>
<hr>
<p>PySyntax.jl enables using Python-like syntax in <a href="https://github.com/JuliaLang/julia">Julia</a>.
It provides a light wrapper on top of <a href="https://github.com/JuliaPy/PyCall.jl">PyCall.jl</a>, in the form of a macro.</p>
<p><a target="_blank" rel="noopener noreferrer" href="./img/screenshot.png"><img src="./img/screenshot.png" alt="" style="max-width:100%;"></a></p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>Within Julia, just use the package manager to run <code>Pkg.clone("https://github.com/kdheepak/PySyntax.jl")</code> to install the files.
Julia 0.5 or later is recommended.</p>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h3>
<p>In a session, type the following to export the <code>@py</code> macro.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PySyntax
"><pre><span class="pl-k">using</span> PySyntax</pre></div>
<p>The <code>@py</code> macro allows Python-like syntax</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@pyimport pandas as pd
df = pd.DataFrame(
    Dict(
        &quot;name&quot;=&gt;[&quot;John&quot;, &quot;Jane&quot;, &quot;Zack&quot;, &quot;Zoey&quot;],
        &quot;salary&quot;=&gt;[100000, 100000, 100000, 100000]
        )
)
@py df = df.set_index(&quot;name&quot;)
@py df[&quot;John&quot;:&quot;Jane&quot;]
"><pre><span class="pl-c1">@pyimport</span> pandas as pd
df <span class="pl-k">=</span> pd<span class="pl-k">.</span><span class="pl-c1">DataFrame</span>(
    <span class="pl-c1">Dict</span>(
        <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Jane<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Zack<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Zoey<span class="pl-pds">"</span></span>],
        <span class="pl-s"><span class="pl-pds">"</span>salary<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-c1">100000</span>, <span class="pl-c1">100000</span>, <span class="pl-c1">100000</span>, <span class="pl-c1">100000</span>]
        )
)
<span class="pl-c1">@py</span> df <span class="pl-k">=</span> df<span class="pl-k">.</span><span class="pl-c1">set_index</span>(<span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span>)
<span class="pl-c1">@py</span> df[<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>:<span class="pl-s"><span class="pl-pds">"</span>Jane<span class="pl-pds">"</span></span>]</pre></div>
<p>See <a href="./notebooks/PySyntax.jl.ipynb">notebooks</a> for examples. See <a href="https://github.com/JuliaPy/PyCall.jl/issues/86">JuliaPy/PyCall.jl#86</a> for the discussion on this subject.</p>
<p>Improvements, suggestions or contributions welcome!</p>
</article></div>