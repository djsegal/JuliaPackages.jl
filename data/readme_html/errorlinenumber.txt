<div id="readme" class="rst" data-path="README.rst"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-errorlinenumber-package" class="anchor" aria-hidden="true" href="#errorlinenumber-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ErrorLineNumber package</h1>
<p dir="auto">The purpose of this package to address one or more unfixed bugs
in Julia 0.4 that cause the run-time error system to report the
location of the error at the
wrong source-file line number in some cases.  Suppose a source
file has a function <code>reduceMatrix</code> that generates an <code>BoundsError</code>
due to an array subscript out of range.  Suppose you suspect that Julia
displays the wrong line number for the error.  This
package instruments a source file with a second scheme for
tracking line numbers.  To use it, first install the package via:</p>
<pre>Pkg.clone("https://github.com/StephenVavasis/ErrorLineNumber.jl")
</pre>
<p dir="auto">and then declare:</p>
<pre>using ErrorLineNumber.@errorlinenumber
</pre>
<p dir="auto">somewhere
at the beginning of your source file.
Next replace your <code>function</code> declaration, e.g.,:</p>
<pre>function reduceMatrix(a::Array{Float64,2}, i::Int)
. . .
end
</pre>
<p dir="auto">by:</p>
<pre>@errorlinenumber function reduceMatrix(a::Array{Float64,2}, i::Int)
. . .
end
</pre>
<p dir="auto">and re-run the code. The macro will cause the line with the error
message to be displayed, encased with rows of exclamation points, before
the Julia backtrace error message.</p>
<p dir="auto">The additional statements for instrumentation
degrade performance, so once the debugging is
finished, the macro call <code>@errorlinenumber</code> should be removed.</p>
<p dir="auto">Here is an example of an actual printout (not included in the test cases)
showing that the (correct) line number (359) reported by this macro differs
from the erroneous line number (236) reported by the backtrace system:</p>
<pre>julia&gt; Meshgen.testcase1()
    !!!!!!!!!!!!!!!!!
ERROR LINE number = geometryPreprocess.359
    !!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!
ERROR LINE number = testcase1.1169
    !!!!!!!!!!!!!!!!!
ERROR: BoundsError: attempt to access 0-element Array{Meshgen.PCAGarcaux,1}
  at index [3]
 [inlined code] from c:\Users\vavasis\Documents\Projects\qmg21\src_jl\meshgen\..
/geo/geo_pcag.jl:239
 in geometryPreprocess at no file:236
 [inlined code] from c:\Users\vavasis\Documents\Projects\qmg21\src_jl\meshgen\me
shgen.jl:1169
 in testcase1 at no file:1168
</pre>
<p dir="auto">Note that if function <code>f1</code> invokes <code>f2</code>, which generates
the run-time error, and both are instrumented by this
macro, then both functions print the line number of the error (in the case
of <code>f1</code>, it is the location of the call to <code>f2</code>).</p>

</article></div>