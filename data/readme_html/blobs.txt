<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-blobs" class="anchor" aria-hidden="true" href="#blobs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Blobs</h1>
<p>Blobs makes it easy to lay out complex data-structures within a single memory region. Data-structures built using this library:</p>
<ul>
<li>are relocatable - internal pointers are converted to offsets, so the entire memory region can be written to / read from disk or sent over the network without pointer patching</li>
<li>require no deserialization - they can be directly read/written without first copying the data into a Julia-native data-structure</li>
<li>require no additional heap allocation - field access is just pointer arithmetic and every field read/write returns an <code>isbitstype</code> type which can stored on the stack</li>
</ul>
<p>This makes them ideal for implementing out-of-core data-structures or for DMA to co-processors.</p>
<h2><a id="user-content-safety" class="anchor" aria-hidden="true" href="#safety"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Safety</h2>
<p>This library does not protect against:</p>
<ul>
<li>giving an incorrect length when creating a <code>Blob</code></li>
<li>using a <code>Blob</code> after freeing the underlying allocation</li>
</ul>
<p>Apart from that, all other operations are safe. User error or invalid data can cause <code>AssertionError</code> or <code>BoundsError</code> but cannot segfault the program or modify memory outside the blob.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Acquire a <code>Ptr{Nothing}</code> from somewhere:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct Foo
       x::Int64
       y::Bool
       end

julia&gt; p = Libc.malloc(sizeof(Foo))
Ptr{Nothing} @0x0000000006416020
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo
       x<span class="pl-k">::</span><span class="pl-c1">Int64</span>
       y<span class="pl-k">::</span><span class="pl-c1">Bool</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> Libc<span class="pl-k">.</span><span class="pl-c1">malloc</span>(<span class="pl-c1">sizeof</span>(Foo))
Ptr{Nothing} @<span class="pl-c1">0x0000000006416020</span></pre></div>
<p>We can interpret this pointer as any <code>isbitstype</code> Julia struct:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; foo = Blob{Foo}(p, 0, sizeof(Foo))
Blobs.Blob{Foo}(Ptr{Nothing} @0x0000000004de87c0, 0, 16)
"><pre>julia<span class="pl-k">&gt;</span> foo <span class="pl-k">=</span> <span class="pl-c1">Blob</span><span class="pl-c1">{Foo}</span>(p, <span class="pl-c1">0</span>, <span class="pl-c1">sizeof</span>(Foo))
Blobs<span class="pl-k">.</span><span class="pl-c1">Blob</span><span class="pl-c1">{Foo}</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004de87c0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">16</span>)</pre></div>
<p>(See <code>Blobs.malloc_and_init</code> for a safer way to create a fresh blob).</p>
<p>We can access references to fields of Foo using the fieldnames directly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; foo.x
Blobs.Blob{Int64}(Ptr{Nothing} @0x0000000004de87c0, 0, 16)

julia&gt; foo.y
Blobs.Blob{Bool}(Ptr{Nothing} @0x0000000004de87c0, 8, 16)
"><pre>julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>x
Blobs<span class="pl-k">.</span><span class="pl-c1">Blob</span><span class="pl-c1">{Int64}</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004de87c0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">16</span>)

julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>y
Blobs<span class="pl-k">.</span><span class="pl-c1">Blob</span><span class="pl-c1">{Bool}</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004de87c0</span>, <span class="pl-c1">8</span>, <span class="pl-c1">16</span>)</pre></div>
<p>And use <code>[]</code> to derefence Blobs:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; foo[]
Foo(114974496, true)

julia&gt; foo.x[]
114974496

julia&gt; foo.y[]
true

julia&gt; y = foo.y
Blobs.Blob{Bool}(Ptr{Nothing} @0x0000000004de87c0, 8, 16)

julia&gt; y[]
true
"><pre>julia<span class="pl-k">&gt;</span> foo[]
<span class="pl-c1">Foo</span>(<span class="pl-c1">114974496</span>, <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>x[]
<span class="pl-c1">114974496</span>

julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>y[]
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> foo<span class="pl-k">.</span>y
Blobs<span class="pl-k">.</span><span class="pl-c1">Blob</span><span class="pl-c1">{Bool}</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004de87c0</span>, <span class="pl-c1">8</span>, <span class="pl-c1">16</span>)

julia<span class="pl-k">&gt;</span> y[]
<span class="pl-c1">true</span></pre></div>
<p>Similarly for setting values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; foo[] = Foo(12, true)
Foo(12, true)

julia&gt; foo[]
Foo(12, true)

julia&gt; foo.y[] = false
false

julia&gt; foo.y[]
false

julia&gt; x = foo.x
Blobs.Blob{Int64}(Ptr{Nothing} @0x0000000004de87c0, 0, 16)

julia&gt; x[] = 42
42

julia&gt; x[]
42

julia&gt; foo.x[]
42
"><pre>julia<span class="pl-k">&gt;</span> foo[] <span class="pl-k">=</span> <span class="pl-c1">Foo</span>(<span class="pl-c1">12</span>, <span class="pl-c1">true</span>)
<span class="pl-c1">Foo</span>(<span class="pl-c1">12</span>, <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> foo[]
<span class="pl-c1">Foo</span>(<span class="pl-c1">12</span>, <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>y[] <span class="pl-k">=</span> <span class="pl-c1">false</span>
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>y[]
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> foo<span class="pl-k">.</span>x
Blobs<span class="pl-k">.</span><span class="pl-c1">Blob</span><span class="pl-c1">{Int64}</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000004de87c0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">16</span>)

julia<span class="pl-k">&gt;</span> x[] <span class="pl-k">=</span> <span class="pl-c1">42</span>
<span class="pl-c1">42</span>

julia<span class="pl-k">&gt;</span> x[]
<span class="pl-c1">42</span>

julia<span class="pl-k">&gt;</span> foo<span class="pl-k">.</span>x[]
<span class="pl-c1">42</span></pre></div>
<p>The various data-structures provided can be nested arbitrarily. See the <a href="https://github.com/RelationalAI-oss/Blobs.jl/blob/master/test/runtests.jl">tests</a> for examples.</p>
<h2><a id="user-content-compatibility-with-previous-versions" class="anchor" aria-hidden="true" href="#compatibility-with-previous-versions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility with Previous Versions</h2>
<p>In the previous versions of this library, two macros <code>@v</code> and <code>@</code> were used and we keep them for compatibility reasons. This macros bypass some of the bound-checkings and safety measures that are in-place in the normal usage of <code>Blobs</code>. In this section, we will introduce their usage.</p>
<p>Assume that we have the following <code>Foo</code> struct:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; struct Foo
       x::Int64
       y::Bool
       end

julia&gt; m = Blobs.malloc_and_init(Foo)
Blob{Foo}(Ptr{Nothing} @0x00007fa0b84234e0, 0, 9)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> Foo
       x<span class="pl-k">::</span><span class="pl-c1">Int64</span>
       y<span class="pl-k">::</span><span class="pl-c1">Bool</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> Blobs<span class="pl-k">.</span><span class="pl-c1">malloc_and_init</span>(Foo)
<span class="pl-c1">Blob</span><span class="pl-c1">{Foo}</span>(Ptr{Nothing} @<span class="pl-c1">0x00007fa0b84234e0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">9</span>)</pre></div>
<p>Use the <code>@a</code> (for address) macro to obtain pointers to the fields of this struct:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @a m.x
Blob{Int64}(Ptr{Nothing} @0x00007fa0b84234e0, 0, 9)

julia&gt; @a m.y
Blob{Bool}(Ptr{Nothing} @0x00007fa0b84234e0, 8, 9)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@a</span> m<span class="pl-k">.</span>x
<span class="pl-c1">Blob</span><span class="pl-c1">{Int64}</span>(Ptr{Nothing} @<span class="pl-c1">0x00007fa0b84234e0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@a</span> m<span class="pl-k">.</span>y
<span class="pl-c1">Blob</span><span class="pl-c1">{Bool}</span>(Ptr{Nothing} @<span class="pl-c1">0x00007fa0b84234e0</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)</pre></div>
<p>Or the <code>@v</code> (for value) macro to dereference those pointers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @v m.x
44307392

julia&gt; @v m.y
false

julia&gt; y = @a m.y
Blob{Bool}(Ptr{Nothing} @0x00007fa0b84234e0, 8, 9)

julia&gt; @v y
false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> m<span class="pl-k">.</span>x
<span class="pl-c1">44307392</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> m<span class="pl-k">.</span>y
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">@a</span> m<span class="pl-k">.</span>y
<span class="pl-c1">Blob</span><span class="pl-c1">{Bool}</span>(Ptr{Nothing} @<span class="pl-c1">0x00007fa0b84234e0</span>, <span class="pl-c1">8</span>, <span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> y
<span class="pl-c1">false</span></pre></div>
<p>The <code>@v</code> macro also allows setting the value of a pointer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @v m.y = true
true

julia&gt; @v m.y
true

julia&gt; x = @a m.x
Blob{Int64}(Ptr{Nothing} @0x00007fa0b84234e0, 0, 9)

julia&gt; @v x = 42
42

julia&gt; @v x
42

julia&gt; @v m.x
42
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> m<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">true</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> m<span class="pl-k">.</span>y
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">@a</span> m<span class="pl-k">.</span>x
<span class="pl-c1">Blob</span><span class="pl-c1">{Int64}</span>(Ptr{Nothing} @<span class="pl-c1">0x00007fa0b84234e0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">9</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> x <span class="pl-k">=</span> <span class="pl-c1">42</span>
<span class="pl-c1">42</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> x
<span class="pl-c1">42</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@v</span> m<span class="pl-k">.</span>x
<span class="pl-c1">42</span></pre></div>
<p>Also in this case, data-structures can be nested arbitrarily. See the <a href="https://github.com/RelationalAI-oss/Blobs.jl/blob/master/test/compat-tests.jl">compat-tests</a> for examples.</p>
</article></div>