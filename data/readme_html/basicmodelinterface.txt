<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-basicmodelinterface" class="anchor" aria-hidden="true" href="#basicmodelinterface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BasicModelInterface</h1>
<p dir="auto"><a href="https://github.com/Deltares/BasicModelInterface.jl/actions"><img src="https://github.com/Deltares/BasicModelInterface.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://bmi.readthedocs.io/" rel="nofollow">Basic Model Interface</a> (BMI) specification for the
<a href="https://julialang.org/" rel="nofollow">Julia programming language</a>. This package contains all 41 functions
that are part of the BMI 2.0 specification. These functions are declared without any
methods, like so: <code>function initialize end</code>. They do have documentation that shows how they
should be used.</p>
<p dir="auto">It is up to model specific implementations to extend the functions defined here, adding
methods for their own model type, such as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import BasicModelInterface as BMI

# any type you created to represent your model
struct MyModel end

function BMI.update(model::MyModel)
    # write MyModel update implementation here
end"><pre><span class="pl-k">import</span> BasicModelInterface <span class="pl-k">as</span> BMI

<span class="pl-c"><span class="pl-c">#</span> any type you created to represent your model</span>
<span class="pl-k">struct</span> MyModel <span class="pl-k">end</span>

<span class="pl-k">function</span> BMI<span class="pl-k">.</span><span class="pl-en">update</span>(model<span class="pl-k">::</span><span class="pl-c1">MyModel</span>)
    <span class="pl-c"><span class="pl-c">#</span> write MyModel update implementation here</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">This package is currently being developed independently of
<a href="https://csdms.colorado.edu/wiki/Main_Page" rel="nofollow">Community Surface Dynamics Modeling System</a>(CSDMS).
After it has been proven successful with several Julia BMI implementations, we should
consider proposing CSDMS adoption as well, to join the existing C, C++, Fortran and Python
specifications.</p>
<h2 dir="auto"><a id="user-content-summary-of-bmi-functions" class="anchor" aria-hidden="true" href="#summary-of-bmi-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Summary of BMI functions</h2>
<p dir="auto">Table below taken from <a href="https://bmi.readthedocs.io/en/latest/#the-basic-model-interface" rel="nofollow">https://bmi.readthedocs.io/en/latest/#the-basic-model-interface</a>.</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>initialize</td>
<td>Perform startup tasks for the model.</td>
</tr>
<tr>
<td>update</td>
<td>Advance model state by one time step.</td>
</tr>
<tr>
<td>update_until</td>
<td>Advance model state until the given time.</td>
</tr>
<tr>
<td>finalize</td>
<td>Perform tear-down tasks for the model.</td>
</tr>
<tr>
<td>get_component_name</td>
<td>Name of the model.</td>
</tr>
<tr>
<td>get_input_item_count</td>
<td>Count of a model's input variables.</td>
</tr>
<tr>
<td>get_output_item_count</td>
<td>Count of a model's output variables.</td>
</tr>
<tr>
<td>get_input_var_names</td>
<td>List of a model's input variables.</td>
</tr>
<tr>
<td>get_output_var_names</td>
<td>List of a model's output variables.</td>
</tr>
<tr>
<td>get_var_grid</td>
<td>Get the grid identifier for a variable.</td>
</tr>
<tr>
<td>get_var_type</td>
<td>Get the data type of a variable.</td>
</tr>
<tr>
<td>get_var_units</td>
<td>Get the units of a variable.</td>
</tr>
<tr>
<td>get_var_itemsize</td>
<td>Get the size (in bytes) of one element of a variable.</td>
</tr>
<tr>
<td>get_var_nbytes</td>
<td>Get the total size (in bytes) of a variable.</td>
</tr>
<tr>
<td>get_var_location</td>
<td>Get the grid element type of a variable.</td>
</tr>
<tr>
<td>get_current_time</td>
<td>Current time of the model.</td>
</tr>
<tr>
<td>get_start_time</td>
<td>Start time of the model.</td>
</tr>
<tr>
<td>get_end_time</td>
<td>End time of the model.</td>
</tr>
<tr>
<td>get_time_units</td>
<td>Time units used in the model.</td>
</tr>
<tr>
<td>get_time_step</td>
<td>Time step used in the model.</td>
</tr>
<tr>
<td>get_value</td>
<td>Get a copy of values of a given variable.</td>
</tr>
<tr>
<td>get_value_ptr</td>
<td>Get a reference to the values of a given variable.</td>
</tr>
<tr>
<td>get_value_at_indices</td>
<td>Get variable values at specific locations.</td>
</tr>
<tr>
<td>set_value</td>
<td>Set the values of a given variable.</td>
</tr>
<tr>
<td>set_value_at_indices</td>
<td>Set the values of a variable at specific locations.</td>
</tr>
<tr>
<td>get_grid_rank</td>
<td>Get the number of dimensions of a computational grid.</td>
</tr>
<tr>
<td>get_grid_size</td>
<td>Get the total number of elements of a computational grid.</td>
</tr>
<tr>
<td>get_grid_type</td>
<td>Get the grid type as a string.</td>
</tr>
<tr>
<td>get_grid_shape</td>
<td>Get the dimensions of a computational grid.</td>
</tr>
<tr>
<td>get_grid_spacing</td>
<td>Get the spacing between grid nodes.</td>
</tr>
<tr>
<td>get_grid_origin</td>
<td>Get the origin of a grid.</td>
</tr>
<tr>
<td>get_grid_x</td>
<td>Get the locations of a grid's nodes in dimension 1.</td>
</tr>
<tr>
<td>get_grid_y</td>
<td>Get the locations of a grid's nodes in dimension 2.</td>
</tr>
<tr>
<td>get_grid_z</td>
<td>Get the locations of a grid's nodes in dimension 3.</td>
</tr>
<tr>
<td>get_grid_node_count</td>
<td>Get the number of nodes in the grid.</td>
</tr>
<tr>
<td>get_grid_edge_count</td>
<td>Get the number of edges in the grid.</td>
</tr>
<tr>
<td>get_grid_face_count</td>
<td>Get the number of faces in the grid.</td>
</tr>
<tr>
<td>get_grid_edge_nodes</td>
<td>Get the edge-node connectivity.</td>
</tr>
<tr>
<td>get_grid_face_edges</td>
<td>Get the face-edge connectivity.</td>
</tr>
<tr>
<td>get_grid_face_nodes</td>
<td>Get the face-node connectivity.</td>
</tr>
<tr>
<td>get_grid_nodes_per_face</td>
<td>Get the number of nodes for each face.</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-notes-and-open-questions" class="anchor" aria-hidden="true" href="#notes-and-open-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes and open questions</h2>
<p dir="auto">This specification is adopted from the <a href="https://github.com/csdms/bmi-python/blob/v2.0/bmipy/bmi.py">BMI 2.0 Python specification</a>.
Instead of Python's class methods, the Julia specification expects a <code>model</code> parameter
as the first argument. Julia will dispatch to the right implementation based on the type
of the <code>model</code> parameter.</p>
<p dir="auto">We do not apply the Julia convention to put a ! after mutating function names, to keep
the function names consistent with the other languages.</p>
<ul dir="auto">
<li>Time must be a float.</li>
<li>Grid is an integer grid identifier.</li>
<li>Units should be string.</li>
</ul>
<p dir="auto">See if we can instead use richer types that keep more information,
yet still convert to the right <code>Int64</code>, <code>Float64</code>, <code>String</code>, etc.</p>
<p dir="auto"><code>get_grid_shape</code>: Instead of passing in a <code>Vector</code> to fill, do not require a shape argument,
and return a <code>Tuple</code>, like the <code>size</code> function.</p>
<p dir="auto"><a href="https://bmi.readthedocs.io/en/latest/bmi.best_practices.html#best-practices" rel="nofollow">https://bmi.readthedocs.io/en/latest/bmi.best_practices.html#best-practices</a></p>
<blockquote>
<p dir="auto">Constructs and features that are natural for the language should be used when implementing
a BMI. BMI strives to be developer-friendly.</p>
</blockquote>
<blockquote>
<p dir="auto">BMI functions always use flattened, one-dimensional arrays. This avoids any issues stemming
from row/column-major indexing when coupling models written in different languages. It’s the
developer's responsibility to ensure that array information is flattened/redimensionalized
in the correct order.</p>
</blockquote>
<p dir="auto">From the above and the <a href="https://bmi.readthedocs.io/en/latest/#get-grid-shape" rel="nofollow">get_grid_shape</a>
docs it is not quite clear yet what the correct order is. Flattening a row-array and a
column-major array will result in the same size but different order array.</p>
<blockquote>
<p dir="auto">“ij” indexing (as opposed to “xy”)</p>
</blockquote>
<p dir="auto">Does <code>i</code> here stand for the first dimension, regardless of row/column-major indexing?</p>
<blockquote>
<p dir="auto">the length of the z-dimension, nz, would be listed first.</p>
</blockquote>
<p dir="auto">If the z-dimension needs to go first, that means different z at the same xy location will
be close in memory for column-major, and far in memory for row-major.</p>
</article></div>