<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-funcpipelines" class="anchor" aria-hidden="true" href="#funcpipelines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FuncPipelines</h1>
<p dir="auto"><a href="https://chengchingwen.github.io/FuncPipelines.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://chengchingwen.github.io/FuncPipelines.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/chengchingwen/FuncPipelines.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/chengchingwen/FuncPipelines.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chengchingwen/FuncPipelines.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/246f89d7f8e1f4592761e2c0e4ebf9db3983aacc169101aaf02eb85b61fedf07/68747470733a2f2f636f6465636f762e696f2f67682f6368656e676368696e6777656e2f46756e63506970656c696e65732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/chengchingwen/FuncPipelines.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-pipelines" class="anchor" aria-hidden="true" href="#pipelines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipelines</h1>
<p dir="auto">The Pipeline api help you define a series of functions that can easily be decomposed and then combined with
other function to form a new pipeline. A function (<code>Pipeline</code>) is tagged with one (or multiple) <code>Symbol</code>s.
The return values of that <code>Pipeline</code> will be bound to those symbols storing in a <code>NamedTuple</code>. Precisely,
A <code>Pipeline</code> take two inputs, a regular input value (<code>source</code>) and a <code>NamedTuple</code> (<code>target</code>) that stores
the results, applying the function to them, and then store the result with the name it carried with into <code>target</code>.
We can then chaining multiple <code>Pipeline</code>s into a <code>Pipelines</code>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; pipes = Pipeline{:x}(identity, 1) |&gt; Pipeline{(:sinx, :cosx)}((x,y)-&gt;sincos(x))

julia&gt; pipes(0.3)
(x = 0.3, sinx = 0.29552020666133955, cosx = 0.955336489125606)

# define a series of function
julia&gt; pipes = Pipeline{:θ}(Base.Fix1(*, 2), 1) |&gt;
           Pipeline{(:sinθ, :cosθ)}(sincos, :θ) |&gt;
           Pipeline{:tanθ}(2) do target
               target.sinθ / target.cosθ
           end

Pipelines:
  target[θ] := *(2, source)
  target[(sinθ, cosθ)] := sincos(target.θ)
  target[tanθ] := #68(target)

# get the wanted results
julia&gt; pipes2 = pipes |&gt; PipeGet{(:tanθ, :θ)}()
Pipelines:
  target[θ] := *(2, source)
  target[(sinθ, cosθ)] := sincos(target.θ)
  target[tanθ] := #68(target)
  target := (target.tanθ, target.θ)

julia&gt; pipes2(ℯ)
(tanθ = -1.1306063769531505, θ = 5.43656365691809)

# replace some functions in pipeline
julia&gt; pipes3 = pipes2[1] |&gt; Pipeline{:tanθ}(tan, :θ) |&gt; pipes2[end]
Pipelines:
  target[θ] := *(2, source)
  target[tanθ] := tan(target.θ)
  target := (target.tanθ, target.θ)

julia&gt; pipes3(ℯ)
(tanθ = -1.1306063769531507, θ = 5.43656365691809)

# and the pipelines is type stable
julia&gt; using Test; @inferred pipes3(ℯ)
(tanθ = -1.1306063769531507, θ = 5.43656365691809)
"><pre>julia<span class="pl-k">&gt;</span> pipes <span class="pl-k">=</span> <span class="pl-c1">Pipeline</span><span class="pl-c1">{:x}</span>(identity, <span class="pl-c1">1</span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">Pipeline</span><span class="pl-c1">{(:sinx, :cosx)}</span>((x,y)<span class="pl-k">-&gt;</span><span class="pl-c1">sincos</span>(x))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pipes</span>(<span class="pl-c1">0.3</span>)
(x <span class="pl-k">=</span> <span class="pl-c1">0.3</span>, sinx <span class="pl-k">=</span> <span class="pl-c1">0.29552020666133955</span>, cosx <span class="pl-k">=</span> <span class="pl-c1">0.955336489125606</span>)

<span class="pl-c"><span class="pl-c">#</span> define a series of function</span>
julia<span class="pl-k">&gt;</span> pipes <span class="pl-k">=</span> <span class="pl-c1">Pipeline</span><span class="pl-c1">{:θ}</span>(Base<span class="pl-k">.</span><span class="pl-c1">Fix1</span>(<span class="pl-k">*</span>, <span class="pl-c1">2</span>), <span class="pl-c1">1</span>) <span class="pl-k">|&gt;</span>
           <span class="pl-c1">Pipeline</span><span class="pl-c1">{(:sinθ, :cosθ)}</span>(sincos, <span class="pl-c1">:θ</span>) <span class="pl-k">|&gt;</span>
           <span class="pl-c1">Pipeline</span><span class="pl-c1">{:tanθ}</span>(<span class="pl-c1">2</span>) <span class="pl-k">do</span> target
               target<span class="pl-k">.</span>sinθ <span class="pl-k">/</span> target<span class="pl-k">.</span>cosθ
           <span class="pl-k">end</span>

Pipelines<span class="pl-k">:</span>
  target[θ] <span class="pl-k">:=</span> <span class="pl-k">*</span>(<span class="pl-c1">2</span>, source)
  target[(sinθ, cosθ)] <span class="pl-k">:=</span> <span class="pl-c1">sincos</span>(target<span class="pl-k">.</span>θ)
  target[tanθ] <span class="pl-k">:=</span> <span class="pl-c"><span class="pl-c">#</span>68(target)</span>

<span class="pl-c"><span class="pl-c">#</span> get the wanted results</span>
julia<span class="pl-k">&gt;</span> pipes2 <span class="pl-k">=</span> pipes <span class="pl-k">|&gt;</span> <span class="pl-c1">PipeGet</span><span class="pl-c1">{(:tanθ, :θ)}</span>()
Pipelines<span class="pl-k">:</span>
  target[θ] <span class="pl-k">:=</span> <span class="pl-k">*</span>(<span class="pl-c1">2</span>, source)
  target[(sinθ, cosθ)] <span class="pl-k">:=</span> <span class="pl-c1">sincos</span>(target<span class="pl-k">.</span>θ)
  target[tanθ] <span class="pl-k">:=</span> <span class="pl-c"><span class="pl-c">#</span>68(target)</span>
  target <span class="pl-k">:=</span> (target<span class="pl-k">.</span>tanθ, target<span class="pl-k">.</span>θ)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pipes2</span>(ℯ)
(tanθ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.1306063769531505</span>, θ <span class="pl-k">=</span> <span class="pl-c1">5.43656365691809</span>)

<span class="pl-c"><span class="pl-c">#</span> replace some functions in pipeline</span>
julia<span class="pl-k">&gt;</span> pipes3 <span class="pl-k">=</span> pipes2[<span class="pl-c1">1</span>] <span class="pl-k">|&gt;</span> <span class="pl-c1">Pipeline</span><span class="pl-c1">{:tanθ}</span>(tan, <span class="pl-c1">:θ</span>) <span class="pl-k">|&gt;</span> pipes2[<span class="pl-c1">end</span>]
Pipelines<span class="pl-k">:</span>
  target[θ] <span class="pl-k">:=</span> <span class="pl-k">*</span>(<span class="pl-c1">2</span>, source)
  target[tanθ] <span class="pl-k">:=</span> <span class="pl-c1">tan</span>(target<span class="pl-k">.</span>θ)
  target <span class="pl-k">:=</span> (target<span class="pl-k">.</span>tanθ, target<span class="pl-k">.</span>θ)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pipes3</span>(ℯ)
(tanθ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.1306063769531507</span>, θ <span class="pl-k">=</span> <span class="pl-c1">5.43656365691809</span>)

<span class="pl-c"><span class="pl-c">#</span> and the pipelines is type stable</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Test; <span class="pl-c1">@inferred</span> <span class="pl-c1">pipes3</span>(ℯ)
(tanθ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.1306063769531507</span>, θ <span class="pl-k">=</span> <span class="pl-c1">5.43656365691809</span>)
</pre></div>
</article></div>