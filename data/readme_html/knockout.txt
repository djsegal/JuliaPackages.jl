<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-knockout" class="anchor" aria-hidden="true" href="#knockout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Knockout</h1>
<p><a href="https://travis-ci.org/JuliaGizmos/Knockout.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ed592f03afeb33918b576f0f51180ea1f5e8c5eb/68747470733a2f2f7472617669732d63692e6f72672f4a756c696147697a6d6f732f4b6e6f636b6f75742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGizmos/Knockout.jl.svg?branch=master" style="max-width:100%;"></a>  <a href="https://codecov.io/gh/JuliaGizmos/Knockout.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8170fc62901c4290eba19a63966e95a5964d822b/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696147697a6d6f732f4b6e6f636b6f75742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGizmos/Knockout.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A Julia wrapper for <a href="http://knockoutjs.com/" rel="nofollow">Knockout.js</a>. It uses <a href="https://github.com/JuliaGizmos/WebIO.jl">WebIO</a> to load JavaScript and to do Julia to JS communication. <a href="https://github.com/JuliaGizmos/WebIO.jl/blob/master/README.md">Go here</a> to get started with WebIO.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The package exports a single <code>knockout</code> function:</p>
<h3><a id="user-content-knockouttemplate-data-options" class="anchor" aria-hidden="true" href="#knockouttemplate-data-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>knockout(template, data; options...)</code></h3>
<ul>
<li><code>template</code> acts as the "structre" of the UI. It's normal HTML, but can use variables from <code>data</code>. See the <a href="http://knockoutjs.com/documentation/introduction.html" rel="nofollow">Knockout documentation</a> for more details. You can compose the template (like any HTML) <a href="https://github.com/JuliaGizmos/WebIO.jl#composing-content">using WebIO</a>.</li>
<li><code>data</code> is an iterable of <code>propertyName =&gt; value</code> pairs (e.g. a <code>Dict</code>) which populates the template.</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Knockout, WebIO

template <span class="pl-k">=</span> <span class="pl-c1">node</span>(<span class="pl-c1">:p</span>, <span class="pl-s"><span class="pl-pds">"</span>{{message}}<span class="pl-pds">"</span></span>, attributes <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>data-bind<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>visible : visible<span class="pl-pds">"</span></span>))
<span class="pl-c1">knockout</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-c1">:visible</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>])</pre></div>
<p>If a property's value is an observable, this function syncs the property and the observable. Here's how you can update the properties bound to the template from Julia.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Observables
ob <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)
<span class="pl-c1">knockout</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span>ob, <span class="pl-c1">:visible</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>])</pre></div>
<p>Now if at any time you run <code>ob[] = "hey there!"</code> on Julia, you should see the contents of the message update in the UI. Try making an observable for <code>:visible</code> property and set it to true or false, you should see the message toggle in and out of view!</p>
<p>To initiate JS to Julia communication you must set an event handler on <code>scope[propertyName]</code> (by calling <code>on(f, scope[propertyName])</code>)  <em>before</em> rendering the scope.</p>
<p>Here's an example of JS to Julia communication:</p>
<div class="highlight highlight-source-julia"><pre>incoming <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">on</span>(println, incoming) <span class="pl-c"><span class="pl-c">#</span> print to console on every update</span>

template <span class="pl-k">=</span> <span class="pl-c1">node</span>(<span class="pl-c1">:input</span>, attributes <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>text<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data-bind<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>value : message<span class="pl-pds">"</span></span>))()
<span class="pl-c1">knockout</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span>incoming])</pre></div>
<p>This will cause the value of the textbox to flow back to Julia, and should get printed to STDOUT since we have a listener to print it. The value only gets updated on <code>change</code> (meaning when the widget loses focus). To update it on <code>input</code> (meaning whenever the user interacts with the widget) use:</p>
<div class="highlight highlight-source-julia"><pre>incoming <span class="pl-k">=</span> <span class="pl-c1">Observable</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">on</span>(println, incoming) <span class="pl-c"><span class="pl-c">#</span> print to console on every update</span>

template <span class="pl-k">=</span> <span class="pl-c1">node</span>(<span class="pl-c1">:input</span>, attributes <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>text<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>data-bind<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>value : message, valueUpdate : 'input'<span class="pl-pds">"</span></span>))()
<span class="pl-c1">knockout</span>(template, [<span class="pl-c1">:message</span><span class="pl-k">=&gt;</span>incoming])</pre></div>
<p>You can specify that you want some knockout observable to be computed as a function of other observables,
e.g <code>knockout(...; computed = Dict(:fullName =&gt; @js function(){this.firstName() + ' ' + this.lastName()}))</code>.
You can pass functions that you want available in the Knockout scope as keyword arguments to
<code>knockout</code> E.g. <code>knockout(...; methods=Dict(:sayhello=&gt;@js function(){ alert("hello!") }))</code> (Tip: use <a href="https://github.com/JuliaGizmos/JSExpr.jl">JSExpr.jl</a> for the <code>@js</code> macro)</p>
<h2><a id="user-content-acknowledgments" class="anchor" aria-hidden="true" href="#acknowledgments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgments</h2>
<p>This package is strongly inspired by <a href="https://github.com/JuliaGizmos/Vue.jl">Vue.jl</a>. It basically is a word by word translation of Vue.jl for Knockout.js. Knockout.js solves one major technical difficulty of Vue.js: the impossibility of nesting instances.</p>
</article></div>