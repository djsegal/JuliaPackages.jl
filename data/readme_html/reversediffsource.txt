<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-reversediffsourcejl" class="anchor" aria-hidden="true" href="#reversediffsourcejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ReverseDiffSource.jl</h1>
<p dir="auto"><em>Reverse automated differentiation from an expression or a function</em></p>
<table>
<thead>
<tr>
<th align="center">Julia 0.3</th>
<th align="center">Julia 0.4</th>
<th align="center">Julia 0.5</th>
<th align="center">master (on nightly + release)</th>
<th align="center">Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="http://pkg.julialang.org/?pkg=ReverseDiffSource&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/b6d83f4026c56e5d3ace9baf40716830c27fc74c10601b1c365c6d333e94e9c9/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5265766572736544696666536f757263655f302e332e737667" alt="ReverseDiffSource" data-canonical-src="http://pkg.julialang.org/badges/ReverseDiffSource_0.3.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=ReverseDiffSource&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/077e3b0274cc66ca22beaf84ced855997e03d73e0260a4f0df15e70f45f76056/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5265766572736544696666536f757263655f302e342e737667" alt="ReverseDiffSource" data-canonical-src="http://pkg.julialang.org/badges/ReverseDiffSource_0.4.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="http://pkg.julialang.org/?pkg=ReverseDiffSource&amp;ver=0.5" rel="nofollow"><img src="https://camo.githubusercontent.com/073d579663f85ef309f6bc96f2ff29a8084974f9cc0848a9d243c9b943e19b37/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f5265766572736544696666536f757263655f302e352e737667" alt="ReverseDiffSource" data-canonical-src="http://pkg.julialang.org/badges/ReverseDiffSource_0.5.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaDiff/ReverseDiffSource.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aae98394a83369e67e47bea7b055bfd1a72365737d2bf3851cc9801d4c8c308a/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961446966662f5265766572736544696666536f757263652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaDiff/ReverseDiffSource.jl.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://coveralls.io/r/JuliaDiff/ReverseDiffSource.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e5f5f6a13678e519031c43b048feaf9fd79cc8bfce19c2a3d2c13cad48a6b284/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961446966662f5265766572736544696666536f757263652e6a6c2f62616467652e706e673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaDiff/ReverseDiffSource.jl/badge.png?branch=master" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">This package provides a function <code>rdiff()</code> that generates valid Julia code for the calculation of derivatives up to any order for a user supplied expression or generic function. Install with <code>Pkg.add("ReverseDiffSource")</code>. Package documentation and examples can be found <a href="http://reversediffsourcejl.readthedocs.org/en/master/index.html" rel="nofollow">here</a>.</p>
<p dir="auto">This version of automated differentiation operates at the source level (provided either in an expression or a generic function) to output Julia code calculating the derivatives (in a expression or a function respectively). Compared to other automated differentiation methods it does not rely on method overloading or new types and should, in principle, produce fast code.</p>
<p dir="auto">Usage examples:</p>
<ul dir="auto">
<li>derivative of xÂ³</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    julia&gt; rdiff( :(x^3) , x=Float64)  # 'x=Float64' indicates the type of x to rdiff
    :(begin
        (x^3,3 * x^2.0)  # expression calculates a tuple of (value, derivate)
        end)"><pre class="notranslate"><code>    julia&gt; rdiff( :(x^3) , x=Float64)  # 'x=Float64' indicates the type of x to rdiff
    :(begin
        (x^3,3 * x^2.0)  # expression calculates a tuple of (value, derivate)
        end)
</code></pre></div>
<ul dir="auto">
<li>first 10 derivatives of <code>sin(x)</code>  (notice the simplifications)</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    julia&gt; rdiff( :(sin(x)) , order=10, x=Float64)  # derivatives up to order 10
    :(begin
            _tmp1 = sin(x)
            _tmp2 = cos(x)
            _tmp3 = -_tmp1
            _tmp4 = -_tmp2
            _tmp5 = -_tmp3
            (_tmp1,_tmp2,_tmp3,_tmp4,_tmp5,_tmp2,_tmp3,_tmp4,_tmp5,_tmp2,_tmp3)
        end)"><pre class="notranslate"><code>    julia&gt; rdiff( :(sin(x)) , order=10, x=Float64)  # derivatives up to order 10
    :(begin
            _tmp1 = sin(x)
            _tmp2 = cos(x)
            _tmp3 = -_tmp1
            _tmp4 = -_tmp2
            _tmp5 = -_tmp3
            (_tmp1,_tmp2,_tmp3,_tmp4,_tmp5,_tmp2,_tmp3,_tmp4,_tmp5,_tmp2,_tmp3)
        end)
</code></pre></div>
<ul dir="auto">
<li>works on functions too</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="	julia&gt; rosenbrock(x) = (1 - x[1])^2 + 100(x[2] - x[1]^2)^2   # function to be derived
	julia&gt; rosen2 = rdiff(rosenbrock, (Vector{Float64},), order=2)       # orders up to 2
		(anonymous function)"><pre class="notranslate"><code>	julia&gt; rosenbrock(x) = (1 - x[1])^2 + 100(x[2] - x[1]^2)^2   # function to be derived
	julia&gt; rosen2 = rdiff(rosenbrock, (Vector{Float64},), order=2)       # orders up to 2
		(anonymous function)
</code></pre></div>
<ul dir="auto">
<li>gradient calculation of a 3 hidden layer neural network for backpropagation</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    # w1-w3 are the hidden layer weight matrices, x1 the input vector
    function ann(w1, w2, w3, x1)
        x2 = w1 * x1
        x2 = log(1. + exp(x2))   # soft RELU unit
        x3 = w2 * x2
        x3 = log(1. + exp(x3))   # soft RELU unit
        x4 = w3 * x3
        1. / (1. + exp(-x4[1]))  # sigmoid output
    end

    w1, w2, w3 = randn(10,10), randn(10,10), randn(1,10)
    x1 = randn(10)
    dann = m.rdiff(ann, (Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Vector{Float64}))
    dann(w1, w2, w3, x1) # network output + gradient on w1, w2, w3 and x1"><pre class="notranslate"><code>    # w1-w3 are the hidden layer weight matrices, x1 the input vector
    function ann(w1, w2, w3, x1)
        x2 = w1 * x1
        x2 = log(1. + exp(x2))   # soft RELU unit
        x3 = w2 * x2
        x3 = log(1. + exp(x3))   # soft RELU unit
        x4 = w3 * x3
        1. / (1. + exp(-x4[1]))  # sigmoid output
    end

    w1, w2, w3 = randn(10,10), randn(10,10), randn(1,10)
    x1 = randn(10)
    dann = m.rdiff(ann, (Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Vector{Float64}))
    dann(w1, w2, w3, x1) # network output + gradient on w1, w2, w3 and x1
</code></pre></div>
</article></div>