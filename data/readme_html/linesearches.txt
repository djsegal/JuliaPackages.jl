<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-linesearches" class="anchor" aria-hidden="true" href="#linesearches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LineSearches</h1>
<p><a href="https://travis-ci.org/JuliaNLSolvers/LineSearches.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/00b62d6b2fd7694c84d0d42a80592ace27e89026/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614e4c536f6c766572732f4c696e6553656172636865732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaNLSolvers/LineSearches.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaNLSolvers/LineSearches.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/626b9f377f4e747a99c5380593db347ac8b7e49f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f4a756c69614e4c536f6c766572732f4c696e6553656172636865732e6a6c2f6d61737465722e7376673f6d61784167653d32353932303030" alt="Codecov branch" data-canonical-src="https://img.shields.io/codecov/c/github/JuliaNLSolvers/LineSearches.jl/master.svg?maxAge=2592000" style="max-width:100%;"></a>
<a href="https://julianlsolvers.github.io/LineSearches.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Description</h2>
<p>This package provides an interface to line search algorithms implemented in Julia.
The code was originally written as part of <a href="https://github.com/JuliaNLSolvers/Optim.jl">Optim</a>,
but has now been separated out to its own package.</p>
<h3><a id="user-content-available-line-search-algorithms" class="anchor" aria-hidden="true" href="#available-line-search-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Available line search algorithms</h3>
<p>In <a href="https://julianlsolvers.github.io/LineSearches.jl/latest/examples/generated/optim_linesearch.html" rel="nofollow">the docs</a> we show how to choose between the line search algorithms
in <code>Optim</code>.</p>
<ul>
<li><code>HagerZhang</code> (Taken from the Conjugate Gradient implementation
by Hager and Zhang, 2006)</li>
<li><code>MoreThuente</code> (From the algorithm in More and Thuente, 1994)</li>
<li><code>BackTracking</code> (Described in Nocedal and Wright, 2006)</li>
<li><code>StrongWolfe</code> (Nocedal and Wright)</li>
<li><code>Static</code> (Takes the proposed initial step length.)</li>
</ul>
<h3><a id="user-content-available-initial-step-length-procedures" class="anchor" aria-hidden="true" href="#available-initial-step-length-procedures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Available initial step length procedures</h3>
<p>The package provides some procedures to calculate the initial step
length that is passed to the line search algorithm. See <a href="https://julianlsolvers.github.io/LineSearches.jl/latest/examples/generated/optim_initialstep.html" rel="nofollow">the docs</a> for
its usage in <code>Optim</code>.</p>
<ul>
<li><code>InitialPrevious</code> (Use the step length from the previous
optimization iteration)</li>
<li><code>InitialStatic</code> (Use the same initial step length each time)</li>
<li><code>InitialHagerZhang</code> (Taken from Hager and Zhang, 2006)</li>
<li><code>InitialQuadratic</code> (Propose initial step length based on a quadratic
interpolation)</li>
<li><code>InitialConstantChange</code> (Propose initial step length assuming
constant change in step length)</li>
</ul>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>For more details and options, see the documentation</p>
<ul>
<li><a href="https://julianlsolvers.github.io/LineSearches.jl/stable" rel="nofollow">STABLE</a> — most recently tagged version of the documentation.</li>
<li><a href="https://julianlsolvers.github.io/LineSearches.jl/latest" rel="nofollow">LATEST</a> — in-development version of the documentation.</li>
</ul>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example usage</h2>
<p>Here is how to get a simple linesearch for a one-dimensional function working:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LineSearches

ϕ(x) <span class="pl-k">=</span> (x <span class="pl-k">-</span> π)<span class="pl-k">^</span><span class="pl-c1">4</span>
dϕ(x) <span class="pl-k">=</span> <span class="pl-c1">4</span><span class="pl-k">*</span>(x<span class="pl-k">-</span>π)<span class="pl-k">^</span><span class="pl-c1">3</span>
ϕdϕ(x) <span class="pl-k">=</span> ϕ(x),dϕ(x)

α<span class="pl-c1">0</span> <span class="pl-k">=</span> <span class="pl-c1">9.0</span>
ϕ<span class="pl-c1">0</span> <span class="pl-k">=</span> ϕ(<span class="pl-c1">0.0</span>)
dϕ<span class="pl-c1">0</span> <span class="pl-k">=</span> dϕ(<span class="pl-c1">0.0</span>)

<span class="pl-k">for</span> ls <span class="pl-k">in</span> (Static,BackTracking,HagerZhang,MoreThuente,StrongWolfe)
    res <span class="pl-k">=</span> (<span class="pl-c1">ls</span>())(ϕ, dϕ, ϕdϕ, α<span class="pl-c1">0</span>, ϕ<span class="pl-c1">0</span>,dϕ<span class="pl-c1">0</span>)
    <span class="pl-c1">println</span>(ls, <span class="pl-s"><span class="pl-pds">"</span>: <span class="pl-pds">"</span></span>, res)
<span class="pl-k">end</span></pre></div>
<p>For more examples, see the documentation.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<ul>
<li>W. W. Hager and H. Zhang (2006) "Algorithm 851: CG_DESCENT, a conjugate gradient method with guaranteed descent." ACM Transactions on Mathematical Software 32: 113-137.</li>
<li>Moré, Jorge J., and David J. Thuente. "Line search algorithms with guaranteed sufficient decrease." ACM Transactions on Mathematical Software (TOMS) 20.3 (1994): 286-307.</li>
<li>Nocedal, Jorge, and Stephen Wright. "Numerical optimization." Springer Science &amp; Business Media, 2006.</li>
</ul>
</article></div>