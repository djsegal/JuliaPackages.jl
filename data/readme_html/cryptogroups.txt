<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cryptogroups" class="anchor" aria-hidden="true" href="#cryptogroups"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CryptoGroups</h1>
<p dir="auto"><a href="https://travis-ci.com/PeaceFounder/CryptoGroups.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6f27050a9f23c982ba1f44e74233c66e002cbeb90ab30b5d87ec505d5f6ebb4/68747470733a2f2f7472617669732d63692e636f6d2f5065616365466f756e6465722f43727970746f47726f7570732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/PeaceFounder/CryptoGroups.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Cryptographic groups are a fundamental building block for digital signatures, key exhange algorithm, assymetric encryption and many other exciting algorithms of practical importance.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/PeaceFounder/CryptoGroups.jl/b7e6d4b8be1807e124422229428bb4c289523769/doc/assets/CryptoGroups%20types.svg"><img src="https://raw.githubusercontent.com/PeaceFounder/CryptoGroups.jl/b7e6d4b8be1807e124422229428bb4c289523769/doc/assets/CryptoGroups%20types.svg" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ToDo</h2>
<ul class="contains-task-list">
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Import and fix tests</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Add a <code>spec</code> function with which specs can be retrieved as <code>spec(:P_192)</code>, <code>spec(:OakleyV1)</code> or <code>spec(:B_163, :PB)</code>.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Introuce abstract type <code>Spec</code></p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Rename <code>crs</code> to <code>rand</code> and in <code>ShuffleProofs</code>, <code>gen_verificatum_prg</code>.</p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Rename <code>solidify</code> as <code>specialize</code></p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Rename <code>incurve</code> to <code>oncurve</code></p>
</li>
<li class="task-list-item">
<p dir="auto"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> According to <a href="https://safecurves.cr.yp.to/complete.html" rel="nofollow">https://safecurves.cr.yp.to/complete.html</a></p>
<blockquote>
<p dir="auto">... the standard Weierstrass addition formulas fail if Q happens to match -P. This will not be caught by random tests.</p>
</blockquote>
</li>
</ul>
<p dir="auto">as well as identical points can not be summed. Could be partially addressed at the higher level of <code>ECGroup</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&gt; An implementor can stop a small-subgroup attack by rejecting any Q for which hQ = 0"><pre class="notranslate"><code>&gt; An implementor can stop a small-subgroup attack by rejecting any Q for which hQ = 0
</code></pre></div>
<p dir="auto">This may be addressed at constructor level, but requires to know the cofactor.</p>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Adding accessor methods to <code>AffinePoint</code> as <code>_a</code> and <code>_b</code> and acessor methods to curves <code>a</code> and <code>b</code></li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Implement independent basis generation for elliptic curves
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Add a square root function for elliptic curves (Imported from CryptoUtils)</li>
</ul>
</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Make a prg iterator for numbers</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Fix the <code>UndefVarError(:P)</code> in the show method</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Add point, field, integer conversions as specified in X9.62 section 4.3</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Specify cofactors in the elliptic curve specs and encode cofactor assertions in <code>ECPoint</code></li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Does order needs to be computed from <code>n</code> by divifing with cofactor <code>h</code>?</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add some docs</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Consider better alternatives for internal data representation of <code>F2GNB</code> and <code>F2PB</code> to improve performance.</li>
</ul>
</article></div>