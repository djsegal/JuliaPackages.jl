<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-seismodelsjl" class="anchor" aria-hidden="true" href="#seismodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SeisModels.jl</h1>
<h2><a id="user-content-build-status" class="anchor" aria-hidden="true" href="#build-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build status</h2>
<p><a href="https://travis-ci.org/anowacki/SeisModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2f4c2a18479d38deb3873435491afeb64ece6c25a4a489c5cf3cae8117339b8c/68747470733a2f2f7472617669732d63692e6f72672f616e6f7761636b692f536569734d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/anowacki/SeisModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/AndyNowacki/seismodels-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b59a3f7bfcf92963bf154a2f3011e3f4957fdba0208c24ac54fc7ef6d1ee0ea3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f323670723672676e37316a62347962323f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/26pr6rgn71jb4yb2?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/anowacki/SeisModels.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/081dfbe6c6c39c22b529c66b819b1c2a1e094a3ca86dcf8c4aee64ea64a66f43/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616e6f7761636b692f536569734d6f64656c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/anowacki/SeisModels.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p><a href="https://anowacki.github.io/SeisModels.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://anowacki.github.io/SeisModels.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-publication-status" class="anchor" aria-hidden="true" href="#publication-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Publication status</h2>
<p><a href="https://doi.org/10.21105/joss.02043" rel="nofollow"><img src="https://camo.githubusercontent.com/624d4b7d830f4aabd862aa1e3f9ecb4959e53ceeb0d4161de29b51cfe3a55b03/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30323034332f7374617475732e737667" alt="DOI" data-canonical-src="https://joss.theoj.org/papers/10.21105/joss.02043/status.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-what-is-seismodelsjl" class="anchor" aria-hidden="true" href="#what-is-seismodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is SeisModels.jl?</h2>
<p>A <a href="http://julialang.org" rel="nofollow">Julia</a> package for dealing with models of the Earth's
(and other quasi-1D planets') seismic properties.</p>
<p>Currently, only three kinds of one-dimensional models are supported, but all model
parameterisations and models are acceptable for inclusion.  Contributions
are welcome.</p>
<p>Built in models are <a href="https://anowacki.github.io/SeisModels.jl/dev/inbuilt_models/" rel="nofollow">listed in the documentation</a>.</p>
<h2><a id="user-content-how-to-install" class="anchor" aria-hidden="true" href="#how-to-install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to install</h2>
<p>SeisModels.jl can be added to your Julia install like so:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;SeisModels&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SeisModels<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to use</h2>
<h3><a id="user-content-model-types" class="anchor" aria-hidden="true" href="#model-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Model types</h3>
<p>The module defines the SeisModel type and subtypes of this specify the kind of
model (i.e., symmetry, nature of basis function, etc.).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using SeisModels

julia&gt; subtypes(SeisModel)
1-element Array{Any,1}:
 SeisModel1D

julia&gt; subtypes(SeisModel1D)
3-element Array{Any,1}:
 LinearLayeredModel
 PREMPolyModel
 SteppedLayeredModel
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SeisModels

julia<span class="pl-k">&gt;</span> <span class="pl-c1">subtypes</span>(SeisModel)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 SeisModel1D

julia<span class="pl-k">&gt;</span> <span class="pl-c1">subtypes</span>(SeisModel1D)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 LinearLayeredModel
 PREMPolyModel
 SteppedLayeredModel</pre></div>
<p>So, there are currently three types of models implemented, all 1D models, with
polynomial, linear or constant basis within each layer.</p>
<h3><a id="user-content-calculating-properties" class="anchor" aria-hidden="true" href="#calculating-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Calculating properties</h3>
<p>You can either create your own models by creating a new instance of one of the
immutable types, or use the inbuilt models.  For instance, for PREM, one can
evaluate at an arbitrary radius:</p>
<ul>
<li><em>V</em><sub>P</sub></li>
<li><em>V</em><sub>S</sub></li>
<li>density <em>ρ</em></li>
<li>anisotropic parameters <em>V</em><sub>PH</sub>, <em>V</em><sub>PV</sub>, <em>V</em><sub>SH</sub>,
<em>V</em><sub>SV</sub> and <em>η</em></li>
</ul>
<p>Calculate these by calling the function with the model as the first argument:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; vp(PREM, 3500)
13.71171655163979

julia&gt; Qκ(PREM, 1000)
1327.7

julia&gt; density(AK135, radius(AK135, 20))
2.449
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">vp</span>(PREM, <span class="pl-c1">3500</span>)
<span class="pl-c1">13.71171655163979</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Qκ</span>(PREM, <span class="pl-c1">1000</span>)
<span class="pl-c1">1327.7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">density</span>(AK135, <span class="pl-c1">radius</span>(AK135, <span class="pl-c1">20</span>))
<span class="pl-c1">2.449</span></pre></div>
<p>In the last example, we used the <code>radius</code> function to convert depth in the AK135 model
to radius and calculate the density at 20 km depth.  Some functions also accept the
<code>depth</code> keyword argument to instead evaluate properties at a point below the surface:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; density(AK135, radius(AK135, 20)) == density(AK135, 20, depth=true)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">density</span>(AK135, <span class="pl-c1">radius</span>(AK135, <span class="pl-c1">20</span>)) <span class="pl-k">==</span> <span class="pl-c1">density</span>(AK135, <span class="pl-c1">20</span>, depth<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">true</span></pre></div>
<p>You can also evaluate values programmatically (i.e., where the parameter of
interest is a variable) by using the exported <code>evaluate</code> function, and broadcast
the call to get multiple values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; evaluate(AK135, :vp, 3580)
13.653094354838709

julia&gt; parameters = (:vp, :vs, :density);

julia&gt; evaluate.(AK135, parameters, 3680)
(13.591187999999999, 7.226264, 5.4003499999999995)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>(AK135, <span class="pl-c1">:vp</span>, <span class="pl-c1">3580</span>)
<span class="pl-c1">13.653094354838709</span>

julia<span class="pl-k">&gt;</span> parameters <span class="pl-k">=</span> (<span class="pl-c1">:vp</span>, <span class="pl-c1">:vs</span>, <span class="pl-c1">:density</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>.(AK135, parameters, <span class="pl-c1">3680</span>)
(<span class="pl-c1">13.591187999999999</span>, <span class="pl-c1">7.226264</span>, <span class="pl-c1">5.4003499999999995</span>)</pre></div>
<h3><a id="user-content-model-input-and-output" class="anchor" aria-hidden="true" href="#model-input-and-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Model input and output</h3>
<p>Support for reading and writing model files is currently limited.  However, SeisModels
does support reading and writing of
<a href="https://geodynamics.org/cig/software/mineos/" rel="nofollow">Mineos</a>-format ‘tabular’ models
(i.e., <code>SteppedLayeredModel</code>s) via the <code>read_mineos</code> and <code>write_mineos</code> functions.</p>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference</h2>
<h3><a id="user-content-exported-types" class="anchor" aria-hidden="true" href="#exported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exported types</h3>
<ul>
<li><code>SeisModel</code>: Abstract supertype of all models
<ul>
<li><code>SeisModel1D</code>: Abstract supertype of 1D models
<ul>
<li><code>LinearLayeredModel</code>: 1D model with linearly-varying properties between node points</li>
<li><code>PREMPolyModel</code>: 1D model defined by PREM-style polynomials (of arbitrary degree)</li>
<li><code>SteppedLayeredModel</code>: 1D model with constant properties between node points</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><a id="user-content-exported-model-instances" class="anchor" aria-hidden="true" href="#exported-model-instances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exported model instances</h3>
<ul>
<li>Earth
<ul>
<li><code>AK135</code></li>
<li><code>IASP91</code></li>
<li><code>PREM</code></li>
<li><code>PREM_NOOCEAN</code></li>
<li><code>STW105</code></li>
</ul>
</li>
<li>Moon
<ul>
<li><code>MOON_WEBER_2011</code></li>
</ul>
</li>
</ul>
<h3><a id="user-content-exported-functions" class="anchor" aria-hidden="true" href="#exported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exported functions</h3>
<h4><a id="user-content-model-properties" class="anchor" aria-hidden="true" href="#model-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Model properties</h4>
<ul>
<li><code>depth</code>: Return depth in km given a radius and model</li>
<li><code>hasattenuation</code>: Whether a model includes attenuation</li>
<li><code>hasdensity</code>: Whether a model includes density</li>
<li><code>isanisotropic</code>: Whether a model is anisotropic</li>
<li><code>radius</code>: Return radius in km given a depth and model</li>
<li><code>surface_radius</code>: Radius in km of planet</li>
</ul>
<h4><a id="user-content-evaluation-functions" class="anchor" aria-hidden="true" href="#evaluation-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluation functions</h4>
<ul>
<li><code>evaluate</code>: Evaluate a given field for a model at any radius</li>
<li><code>vp</code>: P-wave velocity in km/s</li>
<li><code>vs</code>: S-wave velocity in km/s</li>
<li><code>density</code>: Density in g/cm^3</li>
<li><code>vph</code>: Horizontal P-wave velocity in km/s</li>
<li><code>vpv</code>: Vertical (radial) P-wave velocity in km/s</li>
<li><code>vsh</code>: Horizontally-polarised S-wave velocity in km/s</li>
<li><code>vsv</code>: Vertically-polarised S-wave velocity in km/s</li>
<li><code>eta</code>: Anisotropic parameter</li>
<li><code>Qμ</code>, <code>Qmu</code>: Shear quality factor</li>
<li><code>Qκ</code>, <code>Qkappa</code>: Bulk quality factor</li>
</ul>
<h4><a id="user-content-derived-properties" class="anchor" aria-hidden="true" href="#derived-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Derived properties</h4>
<ul>
<li><code>bulk_modulus</code>: Bulk modulus (<em>K</em>) in Pa</li>
<li><code>gravity</code>: Acceleration due to gravity in m/s^2 at a given radius</li>
<li><code>mass</code>: Mass in kg from centre of model to a given radius</li>
<li><code>moment_of_inertia</code>: MOI in kg m^2</li>
<li><code>poissons_ratio</code>: Poisson's ratio</li>
<li><code>pressure</code>: Pressure in Pa</li>
<li><code>shear_modulus</code>: Shear modulus (<em>G</em>) in Pa</li>
<li><code>surface_mass</code>: Mass between two radii</li>
<li><code>youngs_modulus</code>: Young's modulus in Pa</li>
</ul>
<h4><a id="user-content-io" class="anchor" aria-hidden="true" href="#io"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>IO</h4>
<ul>
<li><code>read_mineos</code>: Read Mineos tabular-format file</li>
<li><code>write_mineos</code>: Write Mineos tabular-format file</li>
<li><code>read_tvel</code>: Write tvel-format file</li>
<li><code>write_tvel</code>: Write tvel-format file</li>
</ul>
<h2><a id="user-content-getting-help" class="anchor" aria-hidden="true" href="#getting-help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting help</h2>
<p>Types and methods are documented, so at the REPL type <code>?</code> to get a <code>help?&gt;</code>
prompt, and type the name of the function:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="help?&gt; PREMPolyModel
search: PREMPolyModel

  PREMPolyModel &lt;: SeisModel1D

  Type describing the Earth as a set of layers within which properties vary according to a set of
  polynomials.

  Physical parameters are represented by arrays of size (order+1,n), where n is the number of
  layers, and order is the order of polynomial which is used to represent the parameter. Hence a
  constant layer has size (1,n), and to compute the value of x in layer i, for an Earth radius of
  a km, at a radius of r km, the expression is:

  val_x = x[i,1] + (r/a)*x[i,2] + (r/a)^2*x[i,3] ... (r/a)^order*x[i,order+1]

"><pre>help?<span class="pl-k">&gt;</span> PREMPolyModel
search<span class="pl-k">:</span> PREMPolyModel

  PREMPolyModel <span class="pl-k">&lt;:</span> <span class="pl-c1">SeisModel1D</span>

  Type describing the Earth as a set of layers within which properties vary according to a set of
  polynomials.

  Physical parameters are represented by arrays of size (order<span class="pl-k">+</span><span class="pl-c1">1</span>,n), <span class="pl-k">where</span> n is the number of
  layers, and order is the order of polynomial which is used to represent the parameter. Hence a
  constant layer has size (<span class="pl-c1">1</span>,n), and to compute the value of x <span class="pl-k">in</span> layer i, <span class="pl-k">for</span> an Earth radius of
  a km, at a radius of r km, the expression is<span class="pl-k">:</span>

  val_x <span class="pl-k">=</span> x[i,<span class="pl-c1">1</span>] <span class="pl-k">+</span> (r<span class="pl-k">/</span>a)<span class="pl-k">*</span>x[i,<span class="pl-c1">2</span>] <span class="pl-k">+</span> (r<span class="pl-k">/</span>a)<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>x[i,<span class="pl-c1">3</span>] <span class="pl-k">...</span> (r<span class="pl-k">/</span>a)<span class="pl-k">^</span>order<span class="pl-k">*</span>x[i,order<span class="pl-k">+</span><span class="pl-c1">1</span>]
</pre></div>
<h2><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing</h2>
<p>If you use SeisModels.jl for your work, please cite the following paper:</p>
<ul>
<li>Nowacki, A., 2020. SeisModels.jl: A Julia package for models of the
Earth’s interior. Journal of Open Source Software 5, 2043.
doi:<a href="https://doi.org/10.21105/joss.02043" rel="nofollow">10.21105/joss.02043</a></li>
</ul>
</article></div>