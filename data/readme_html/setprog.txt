<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-setprog" class="anchor" aria-hidden="true" href="#setprog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SetProg</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://blegat.github.io/SetProg.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://github.com/blegat/SetProg.jl/actions?query=workflow%3ACI"><img src="https://github.com/blegat/SetProg.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a></td>
<td align="center"><a href="https://gitter.im/JuliaPolyhedra/Lobby?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" rel="nofollow"><img src="https://camo.githubusercontent.com/2582a79bfe63bdaade11f0b4fc2d21f5de95a095783e9a741162acb40adf89f4/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c6961506f6c7968656472612f4c6f6262792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/JuliaPolyhedra/Lobby.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://blegat.github.io/SetProg.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="http://codecov.io/github/blegat/SetProg.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/957b1416dd7f74084a1680a9037a8923efdc923d3b9d62eadf213a6f27be1899/687474703a2f2f636f6465636f762e696f2f6769746875622f626c656761742f53657450726f672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/blegat/SetProg.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow"><img src="https://camo.githubusercontent.com/f8462892b313c50a43156c23b37fd7e732af7b406ad01b816528b3d2dc776d48/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61662f446973636f757273655f6c6f676f2e706e672f37393970782d446973636f757273655f6c6f676f2e706e67" width="64" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Discourse_logo.png/799px-Discourse_logo.png" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>JuMP extension for Set Programming : optimization with set variables and inclusion/containment constraints. This package allows the formulation of a mathematical programming involving both classical variables and constraints supported by JuMP and set variables and constraints.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<ul>
<li><a href="https://blegat.github.io/SetProg.jl/stable" rel="nofollow"><strong>STABLE</strong></a> — <strong>most recently tagged version of the documentation.</strong></li>
<li><a href="https://blegat.github.io/SetProg.jl/dev" rel="nofollow"><strong>LATEST</strong></a> — <em>in-development version of the documentation.</em></li>
</ul>
<h2><a id="user-content-variables" class="anchor" aria-hidden="true" href="#variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Variables</h2>
<p>The variables can either be</p>
<ul>
<li>a <code>Polytope</code>;</li>
<li>an <code>Ellipsoid</code>, or a piecewise semi-ellipsoid;</li>
<li>a <code>Polyset</code>, that is the 1-sublevel set of a polynomial of degree <code>2d</code>.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@variable model S Polytope(piecewise=p) # polytope defined over the pieces defined by `p`
@variable model S Ellipsoid()
@variable model S Ellipsoid(piecewise=p) # piecewise semi-ellipsoid defined over the pieces defined by `p`
@variable model S PolySet(d) # 1-sublevel set of a polynomial of degree 2d
@variable model S PolySet(d, convex=true) # Convex 1-sublevel set of a polynomial of degree 2d
@variable model S PolySet(d, symmetric=true) # 1-sublevel set of a polynomial of degree 2d symmetric around the origin
@variable model S PolySet(d, symmetric=true, point=SetProg.CenterPoint([1, 0])) # 1-sublevel set of a polynomial of degree 2d symmetric around the [1, 0]
"><pre><span class="pl-c1">@variable</span> model S <span class="pl-c1">Polytope</span>(piecewise<span class="pl-k">=</span>p) <span class="pl-c"><span class="pl-c">#</span> polytope defined over the pieces defined by `p`</span>
<span class="pl-c1">@variable</span> model S <span class="pl-c1">Ellipsoid</span>()
<span class="pl-c1">@variable</span> model S <span class="pl-c1">Ellipsoid</span>(piecewise<span class="pl-k">=</span>p) <span class="pl-c"><span class="pl-c">#</span> piecewise semi-ellipsoid defined over the pieces defined by `p`</span>
<span class="pl-c1">@variable</span> model S <span class="pl-c1">PolySet</span>(d) <span class="pl-c"><span class="pl-c">#</span> 1-sublevel set of a polynomial of degree 2d</span>
<span class="pl-c1">@variable</span> model S <span class="pl-c1">PolySet</span>(d, convex<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> Convex 1-sublevel set of a polynomial of degree 2d</span>
<span class="pl-c1">@variable</span> model S <span class="pl-c1">PolySet</span>(d, symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> 1-sublevel set of a polynomial of degree 2d symmetric around the origin</span>
<span class="pl-c1">@variable</span> model S <span class="pl-c1">PolySet</span>(d, symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>, point<span class="pl-k">=</span>SetProg<span class="pl-k">.</span><span class="pl-c1">CenterPoint</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>])) <span class="pl-c"><span class="pl-c">#</span> 1-sublevel set of a polynomial of degree 2d symmetric around the [1, 0]</span></pre></div>
<h2><a id="user-content-expressions" class="anchor" aria-hidden="true" href="#expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Expressions</h2>
<p>The following operations are allowed:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>A*S</td>
<td>Linear mapping</td>
</tr>
</tbody>
</table>
<p>But more operations are planned to be added:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>S + x</td>
<td>Translation of <code>S</code> by <code>x</code></td>
</tr>
<tr>
<td>S1 + S2</td>
<td>Minkowski sum</td>
</tr>
<tr>
<td>S1 ∩ S2</td>
<td>Intersection of <code>S1</code> and <code>S2</code></td>
</tr>
<tr>
<td>S1 ∪ S2</td>
<td>Union of <code>S1</code> and <code>S2</code></td>
</tr>
<tr>
<td>polar(S)</td>
<td>Polar of S</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-constraints" class="anchor" aria-hidden="true" href="#constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constraints</h2>
<p>The following constraints are implemented</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>x ∈ S</td>
<td><code>x</code> is contained in <code>S</code></td>
</tr>
<tr>
<td>S1 ⊆ S2</td>
<td><code>S1</code> is included in <code>S2</code></td>
</tr>
<tr>
<td>S1 ⊇ S2</td>
<td><code>S1</code> is included in <code>S2</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<p>Consider a polytope</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Polyhedra
diamond = HalfSpace([1, 1], 1) ∩ HalfSpace([-1, -1], 1) ∩ HalfSpace([1, -1], 1) ∩ HalfSpace([-1, 1], 1)
simplex = HalfSpace([1, 1], 1) ∩ HalfSpace([-1, 0], 0) ∩ HalfSpace([0, -1], 0)
"><pre><span class="pl-k">using</span> Polyhedra
diamond <span class="pl-k">=</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>], <span class="pl-c1">1</span>)
simplex <span class="pl-k">=</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>], <span class="pl-c1">0</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">0</span>)</pre></div>
<p>Pick an SDP solver (see <a href="https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1" rel="nofollow">here</a> for a list)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CSDP # Optimizer
optimizer_constructor = CSDP.Optimizer
"><pre><span class="pl-k">using</span> CSDP <span class="pl-c"><span class="pl-c">#</span> Optimizer</span>
optimizer_constructor <span class="pl-k">=</span> CSDP<span class="pl-k">.</span>Optimizer</pre></div>
<p>To compute the maximal symmetric ellipsoid contained in the polytope <code>diamond</code> defined above (i.e. <a href="https://github.com/rdeits/LoewnerJohnEllipsoids.jl">Löwner-John ellipsoid</a>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SetProg
model = Model(optimizer_constructor)
@variable(model, S, Ellipsoid(symmetric=true))
@constraint(model, S ⊆ diamond)
@objective(model, Max, nth_root(volume(S)))
optimize!(model)
"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">nth_root</span>(<span class="pl-c1">volume</span>(S)))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>We specify in the example that the ellipsoid is symmetric around the origin to
simplify the computation as the solver does not need to look for the center so
the SDP problem that need to be solved has a smaller size.</p>
<p>We can visualize the result with <a href="http://juliaplots.org/" rel="nofollow">Plots</a> as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots
plot(polyhedron(diamond), ratio=1)
plot!(value(S))
"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">polyhedron</span>(diamond), ratio<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">value</span>(S))</pre></div>
<p>To compute the maximal ellipsoid contained in <code>simplex</code>, we don't need to specify
the center but at least a point in the interior of the ellipsoid. The SDP
formulation used will then determine the center and shape of the ellipsoid
simultaneously in the same SDP. For the interior point, we take the chebyshev
center of the simplex (which can be found by solving an LP). This the center of
the sphere of maximal volume in the simplex so one might rightly guess that is is
in the interior of the maximal ellispoid contained in the simplex.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SetProg
cheby_center, cheby_radius = chebyshevcenter(simplex, optimizer_constructor)
interior_point = SetProg.InteriorPoint(cheby_center)

model = Model(optimizer_constructor)
@variable(model, S, Ellipsoid(point=interior_point))
@constraint(model, S ⊆ simplex)
@objective(model, Max, nth_root(volume(S)))
optimize!(model)
"><pre><span class="pl-k">using</span> SetProg
cheby_center, cheby_radius <span class="pl-k">=</span> <span class="pl-c1">chebyshevcenter</span>(simplex, optimizer_constructor)
interior_point <span class="pl-k">=</span> SetProg<span class="pl-k">.</span><span class="pl-c1">InteriorPoint</span>(cheby_center)

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(point<span class="pl-k">=</span>interior_point))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> simplex)
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">nth_root</span>(<span class="pl-c1">volume</span>(S)))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>We now visualize the result:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots
plot(polyhedron(simplex), ratio=1)
plot!(value(S))
"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">polyhedron</span>(simplex), ratio<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">value</span>(S))</pre></div>
<p>To compute the maximal invariant set contained in a polytope (<em>not yet implemented</em>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SetProg
model = Model(optimizer_constructor)
@variable(model, S, Polyhedron())
@constraint(model, S ⊆ diamond)
@constraint(model, A*S ⊆ S) # Invariance constraint
@objective(model, Max, volume(S))
optimize!(model)
"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Polyhedron</span>())
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>S <span class="pl-k">⊆</span> S) <span class="pl-c"><span class="pl-c">#</span> Invariance constraint</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">volume</span>(S))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>To compute the maximal invariant ellipsoid contained in the polytope <code>diamond</code> defined above:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SetProg
model = Model(optimizer_constructor)
@variable(model, S, Ellipsoid(symmetric=true))
@constraint(model, S ⊆ diamond)
@constraint(model, A*S ⊆ S) # Invariance constraint
@objective(model, Max, nth_root(volume(S)))
optimize!(model)
"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>S <span class="pl-k">⊆</span> S) <span class="pl-c"><span class="pl-c">#</span> Invariance constraint</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">nth_root</span>(<span class="pl-c1">volume</span>(S)))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>To compute the maximal algebraic-invariant ellipsoid (i.e. <code>AS ⊆ ES</code>) contained in the polytope <code>diamond</code> defined above:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using SetProg
model = Model(optimizer_constructor)
@variable(model, S, Ellipsoid(symmetric=true)))
@constraint(model, S ⊆ diamond)
@constraint(model, A*S ⊆ E*S) # Invariance constraint
@objective(model, Max, L1_heuristic(volume(S), ones(Polyhedra.fulldim(P))))
optimize!(model)
"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>)))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>S <span class="pl-k">⊆</span> E<span class="pl-k">*</span>S) <span class="pl-c"><span class="pl-c">#</span> Invariance constraint</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">L1_heuristic</span>(<span class="pl-c1">volume</span>(S), <span class="pl-c1">ones</span>(Polyhedra<span class="pl-k">.</span><span class="pl-c1">fulldim</span>(P))))
<span class="pl-c1">optimize!</span>(model)</pre></div>
</article></div>