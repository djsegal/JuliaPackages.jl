<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-setprog" class="anchor" aria-hidden="true" href="#setprog"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SetProg</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Social</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://travis-ci.org/blegat/SetProg.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/965f7d41d0c493f688488e7bcca5c54ad52f1cb9/68747470733a2f2f7472617669732d63692e6f72672f626c656761742f53657450726f672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/blegat/SetProg.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://gitter.im/JuliaPolyhedra/Lobby?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" rel="nofollow"><img src="https://camo.githubusercontent.com/ca0698757a674bcbd46464d1846724bec5a304c5/68747470733a2f2f6261646765732e6769747465722e696d2f4a756c6961506f6c7968656472612f4c6f6262792e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/JuliaPolyhedra/Lobby.svg" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="http://codecov.io/github/blegat/SetProg.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b499da5b55e23fe131ecf1c9127cd3fa61cdd939/687474703a2f2f636f6465636f762e696f2f6769746875622f626c656761742f53657450726f672e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/blegat/SetProg.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://discourse.julialang.org/c/domain/opt" rel="nofollow"><img src="https://camo.githubusercontent.com/844580b76167bd89eb6ec484c60c71856712a94e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61662f446973636f757273655f6c6f676f2e706e672f37393970782d446973636f757273655f6c6f676f2e706e67" width="64" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Discourse_logo.png/799px-Discourse_logo.png" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>JuMP extension for Set Programming : optimization with set variables and inclusion/containment constraints. This package allows the formulation of a mathematical programming involving both classical variables and constraints supported by JuMP and set variables and constraints.</p>
<p>Three options exist to solve Set Programming:</p>
<ul>
<li><a href="https://github.com/JuliaPolyhedra/Polyhedra.jl">Polyhedral Computation</a>.</li>
<li>Automatically reformulation into a semidefinite program using <a href="https://github.com/JuliaOpt/SumOfSquares.jl">Sum-Of-Squares Programming</a> and the S-procedure.</li>
<li><a href="https://github.com/JuliaStochOpt/StructDualDynProg.jl">Dual Dynamic Programming</a>.</li>
</ul>
<p>In fact, the option to use can be automatically chosen depending on the variables created and the objective function set:</p>
<table>
<thead>
<tr>
<th>Variable/Objective</th>
<th>Volume of set</th>
<th>Affine of point</th>
</tr>
</thead>
<tbody>
<tr>
<td>Polyhedron</td>
<td>Polyhedral</td>
<td>Dual Dynamic</td>
</tr>
<tr>
<td>Ellipsoid/PolySet</td>
<td>Sum-of-Squares</td>
<td>Sum-of-Squares</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-variables" class="anchor" aria-hidden="true" href="#variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variables</h2>
<p>The variables can either be</p>
<ul>
<li>an Ellipsoid or more generally the 1-sublevel set of a polynomial of degree <code>2d</code>;</li>
<li>a polyhedron (<em>not yet implemented</em>);</li>
<li>a quadratic cone or more generally the 0-sublevel set of a polynomial of degree <code>2d</code> (<em>not yet implemented</em>).</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@variable</span> m S <span class="pl-c1">Ellipsoid</span>()
<span class="pl-c1">@variable</span> m S <span class="pl-c1">PolySet</span>(d) <span class="pl-c"><span class="pl-c">#</span> 1-sublevel set of a polynomial of degree 2d</span>
<span class="pl-c1">@variable</span> m S <span class="pl-c1">PolySet</span>(d, convex<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> Convex 1-sublevel set of a polynomial of degree 2d</span>
<span class="pl-c1">@variable</span> m S <span class="pl-c1">PolySet</span>(d, symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> 1-sublevel set of a polynomial of degree 2d symmetric around the origin</span>
<span class="pl-c1">@variable</span> m S <span class="pl-c1">PolySet</span>(d, symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>, point<span class="pl-k">=</span>SetProg<span class="pl-k">.</span><span class="pl-c1">CenterPoint</span>([<span class="pl-c1">1</span>, <span class="pl-c1">0</span>])) <span class="pl-c"><span class="pl-c">#</span> 1-sublevel set of a polynomial of degree 2d symmetric around the [1, 0]</span></pre></div>
<p><em>not yet implemented</em>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@variable</span> m S <span class="pl-c1">Polyhedron</span>()
<span class="pl-c1">@variable</span> m S <span class="pl-c1">QuadCone</span>()  <span class="pl-c"><span class="pl-c">#</span> Quadratic cone</span>
<span class="pl-c1">@variable</span> m S <span class="pl-c1">PolyCone</span>(d) <span class="pl-c"><span class="pl-c">#</span> 0-sublevel set of a polynomial of degree 2d</span></pre></div>
<h2><a id="user-content-expressions" class="anchor" aria-hidden="true" href="#expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Expressions</h2>
<p>The following operations are allowed:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>A*S</td>
<td>Linear mapping</td>
</tr>
</tbody>
</table>
<p>But more operations are planned to be added:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>S + x</td>
<td>Translation of <code>S</code> by <code>x</code></td>
</tr>
<tr>
<td>S1 + S2</td>
<td>Minkowski sum</td>
</tr>
<tr>
<td>S1 ∩ S2</td>
<td>Intersection of <code>S1</code> and <code>S2</code></td>
</tr>
<tr>
<td>S1 ∪ S2</td>
<td>Union of <code>S1</code> and <code>S2</code></td>
</tr>
<tr>
<td>polar(S)</td>
<td>Polar of S</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-constraints" class="anchor" aria-hidden="true" href="#constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constraints</h2>
<p>The following constraints are implemented</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>x ∈ S</td>
<td><code>x</code> is contained in <code>S</code></td>
</tr>
<tr>
<td>S1 ⊆ S2</td>
<td><code>S1</code> is included in <code>S2</code></td>
</tr>
<tr>
<td>S1 ⊇ S2</td>
<td><code>S1</code> is included in <code>S2</code></td>
</tr>
</tbody>
</table>
<p>But more are planned to be added:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>S1 == S2</td>
<td><code>S1</code> is equal to <code>S2</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<p>Consider a polytope</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Polyhedra
diamond <span class="pl-k">=</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>], <span class="pl-c1">1</span>)
simplex <span class="pl-k">=</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">1</span>, <span class="pl-c1">1</span>], <span class="pl-c1">1</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">0</span>], <span class="pl-c1">0</span>) <span class="pl-k">∩</span> <span class="pl-c1">HalfSpace</span>([<span class="pl-c1">0</span>, <span class="pl-k">-</span><span class="pl-c1">1</span>], <span class="pl-c1">0</span>)</pre></div>
<p>Pick an SDP solver (see <a href="https://www.juliaopt.org/JuMP.jl/stable/installation/#Getting-Solvers-1" rel="nofollow">here</a> for a list)</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CSDP <span class="pl-c"><span class="pl-c">#</span> Optimizer</span>
optimizer_constructor <span class="pl-k">=</span> CSDP<span class="pl-k">.</span>Optimizer</pre></div>
<p>To compute the maximal symmetric ellipsoid contained in the polytope <code>diamond</code> defined above (i.e. <a href="https://github.com/rdeits/LoewnerJohnEllipsoids.jl">Löwner-John ellipsoid</a>):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">nth_root</span>(<span class="pl-c1">volume</span>(S)))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>We specify in the example that the ellipsoid is symmetric around the origin to
simplify the computation as the solver does not need to look for the center so
the SDP problem that need to be solved has a smaller size.</p>
<p>We can visualize the result with <a href="http://juliaplots.org/" rel="nofollow">Plots</a> as follows:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">polyhedron</span>(diamond), ratio<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">value</span>(S))</pre></div>
<p>To compute the maximal ellipsoid contained in <code>simplex</code>, we don't need to specify
the center but at least a point in the interior of the ellipsoid. The SDP
formulation used will then determine the center and shape of the ellipsoid
simultaneously in the same SDP. For the interior point, we take the chebyshev
center of the simplex (which can be found by solving an LP). This the center of
the sphere of maximal volume in the simplex so one might rightly guess that is is
in the interior of the maximal ellispoid contained in the simplex.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SetProg
cheby_center, cheby_radius <span class="pl-k">=</span> <span class="pl-c1">chebyshevcenter</span>(simplex, optimizer_constructor)
interior_point <span class="pl-k">=</span> SetProg<span class="pl-k">.</span><span class="pl-c1">InteriorPoint</span>(cheby_center)

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(point<span class="pl-k">=</span>interior_point))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> simplex)
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">nth_root</span>(<span class="pl-c1">volume</span>(S)))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>We now visualize the result:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Plots
<span class="pl-c1">plot</span>(<span class="pl-c1">polyhedron</span>(simplex), ratio<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-c1">plot!</span>(<span class="pl-c1">value</span>(S))</pre></div>
<p>To compute the maximal invariant set contained in a polytope (<em>not yet implemented</em>):</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Polyhedron</span>())
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>S <span class="pl-k">⊆</span> S) <span class="pl-c"><span class="pl-c">#</span> Invariance constraint</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">volume</span>(S))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>To compute the maximal invariant ellipsoid contained in the polytope <code>diamond</code> defined above:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>S <span class="pl-k">⊆</span> S) <span class="pl-c"><span class="pl-c">#</span> Invariance constraint</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">nth_root</span>(<span class="pl-c1">volume</span>(S)))
<span class="pl-c1">optimize!</span>(model)</pre></div>
<p>To compute the maximal algebraic-invariant ellipsoid (i.e. <code>AS ⊆ ES</code>) contained in the polytope <code>diamond</code> defined above:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SetProg
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(optimizer_constructor)
<span class="pl-c1">@variable</span>(model, S, <span class="pl-c1">Ellipsoid</span>(symmetric<span class="pl-k">=</span><span class="pl-c1">true</span>)))
<span class="pl-c1">@constraint</span>(model, S <span class="pl-k">⊆</span> diamond)
<span class="pl-c1">@constraint</span>(model, A<span class="pl-k">*</span>S <span class="pl-k">⊆</span> E<span class="pl-k">*</span>S) <span class="pl-c"><span class="pl-c">#</span> Invariance constraint</span>
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">L1_heuristic</span>(<span class="pl-c1">volume</span>(S), <span class="pl-c1">ones</span>(Polyhedra<span class="pl-k">.</span><span class="pl-c1">fulldim</span>(P))))
<span class="pl-c1">optimize!</span>(model)</pre></div>
</article></div>