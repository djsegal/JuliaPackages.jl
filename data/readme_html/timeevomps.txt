<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-timeevomps" class="anchor" aria-hidden="true" href="#timeevomps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TimeEvoMPS</h1>
<p><a href="https://travis-ci.org/orialb/TimeEvoMPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99bc3226ecff73b30021d1a4840290b3a35afc4290758e4f02db9c017d92ce2e/68747470733a2f2f7472617669732d63692e6f72672f6f7269616c622f54696d6545766f4d50532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/orialb/TimeEvoMPS.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/orialb/TimeEvoMPS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6752956f9ecbdcfef06a89fd2bb137a03ac02724a381837111b7af11dc6b4703/68747470733a2f2f636f6465636f762e696f2f67682f6f7269616c622f54696d6545766f4d50532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/orialb/TimeEvoMPS.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>The goal of this package is to provide implementations of time-evolution algorithms for matrix-product states using
<a href="https://github.com/ITensor/ITensors.jl">ITensors.jl</a>.</p>
<p>The package is currently at an initial stage. Contributions and suggestions are very welcome.</p>
<p>Algorithms currently implemented:</p>
<ul>
<li>TEBD (with 2nd and 4th order Trotter decomposition) [1]</li>
<li>TDVP (two-site variant) [2]</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In order to use this package you will need to have ITensors.jl installed, run the following in the Julia REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add ITensors
"><pre><code>] add ITensors
</code></pre></div>
<p>This package is not yet registered, in order to install it run the following in the Julia REPL:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="] add https://github.com/orialb/TimeEvoMPS.jl
"><pre><code>] add https://github.com/orialb/TimeEvoMPS.jl
</code></pre></div>
<h1><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h1>
<p>The following code example shows how to evolve an MPS for a spin-half chain with the transverse-field Ising Hamiltonian, starting from a fully polarized state (functionality to perform measurements during time evolution is still missing, but will be added very soon).</p>
<p>First we setup the initial state</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ITensors, TimeEvoMPS

N=10
J = 1.
h = 0.5

# Use ITensors to define initial fully-polarized MPS
sites = siteinds(&quot;S=1/2&quot;,N)
psi = productMPS(ComplexF64,sites, fill(&quot;↑&quot;,N))
"><pre><span class="pl-k">using</span> ITensors, TimeEvoMPS

N<span class="pl-k">=</span><span class="pl-c1">10</span>
J <span class="pl-k">=</span> <span class="pl-c1">1.</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.5</span>

<span class="pl-c"><span class="pl-c">#</span> Use ITensors to define initial fully-polarized MPS</span>
sites <span class="pl-k">=</span> <span class="pl-c1">siteinds</span>(<span class="pl-s"><span class="pl-pds">"</span>S=1/2<span class="pl-pds">"</span></span>,N)
psi <span class="pl-k">=</span> <span class="pl-c1">productMPS</span>(ComplexF64,sites, <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>↑<span class="pl-pds">"</span></span>,N))</pre></div>
<h2><a id="user-content-tebd" class="anchor" aria-hidden="true" href="#tebd"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TEBD</h2>
<p>Define our Hamiltonian as a <code>BondOperator</code> which is an object that represents
an operator composed of a sum of two-site gates H = Σᵢ h_{i,i+1} (calling <code>gates(bo::BondOperator)</code> builds
the actual gates).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Build Hamiltonian
H = BondOperator(sites)
for b in 1:N-1
    #add two-site term at bond b
    add!(H,-J,&quot;Sz&quot;,&quot;Sz&quot;,b)
    #add single-site term at site b
    add!(H,-h,&quot;Sx&quot;,b)
end
add!(H,-h,&quot;Sx&quot;,N)
"><pre><span class="pl-c"><span class="pl-c">#</span> Build Hamiltonian</span>
H <span class="pl-k">=</span> <span class="pl-c1">BondOperator</span>(sites)
<span class="pl-k">for</span> b <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>N<span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-c"><span class="pl-c">#</span>add two-site term at bond b</span>
    <span class="pl-c1">add!</span>(H,<span class="pl-k">-</span>J,<span class="pl-s"><span class="pl-pds">"</span>Sz<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Sz<span class="pl-pds">"</span></span>,b)
    <span class="pl-c"><span class="pl-c">#</span>add single-site term at site b</span>
    <span class="pl-c1">add!</span>(H,<span class="pl-k">-</span>h,<span class="pl-s"><span class="pl-pds">"</span>Sx<span class="pl-pds">"</span></span>,b)
<span class="pl-k">end</span>
<span class="pl-c1">add!</span>(H,<span class="pl-k">-</span>h,<span class="pl-s"><span class="pl-pds">"</span>Sx<span class="pl-pds">"</span></span>,N)</pre></div>
<p>Now we can run TEBD, by default 2nd order Trotter decomposition is used.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Set maximal bond dimension during evolution.
# Other truncation parmeters supported by ITensors.jl are possible, see 
# documentation of `apply_gate!`
maxdim = 10
#time step and total evolution time 
dt = 0.01
tf =1.
#evolve
tebd!(psi,H,dt,tf, maxdim=maxdim)
"><pre><span class="pl-c"><span class="pl-c">#</span> Set maximal bond dimension during evolution.</span>
<span class="pl-c"><span class="pl-c">#</span> Other truncation parmeters supported by ITensors.jl are possible, see </span>
<span class="pl-c"><span class="pl-c">#</span> documentation of `apply_gate!`</span>
maxdim <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-c"><span class="pl-c">#</span>time step and total evolution time </span>
dt <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
tf <span class="pl-k">=</span><span class="pl-c1">1.</span>
<span class="pl-c"><span class="pl-c">#</span>evolve</span>
<span class="pl-c1">tebd!</span>(psi,H,dt,tf, maxdim<span class="pl-k">=</span>maxdim)</pre></div>
<p>Alternatively we could use 4th order Trotter decomposition</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tebd!(psi,H,dt,tf,TEBD4(), maxdim=maxdim)
"><pre><span class="pl-c1">tebd!</span>(psi,H,dt,tf,<span class="pl-c1">TEBD4</span>(), maxdim<span class="pl-k">=</span>maxdim)</pre></div>
<h2><a id="user-content-tdvp" class="anchor" aria-hidden="true" href="#tdvp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TDVP</h2>
<p>We could also use TDVP to evolve our state. For this we first need to build an MPO representation
of the Hamiltonian. This is easily done using the AutoMPO functionality from ITensors.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ampo = AutoMPO()
for j=1:length(sites)-1
    add!(ampo,-J,&quot;Sz&quot;,j,&quot;Sz&quot;,j+1)
    add!(ampo,-h,&quot;Sx&quot;,j)
end
add!(ampo,-h,&quot;Sx&quot;,length(sites))
H= MPO(ampo,sites)
"><pre>ampo <span class="pl-k">=</span> <span class="pl-c1">AutoMPO</span>()
<span class="pl-k">for</span> j<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(sites)<span class="pl-k">-</span><span class="pl-c1">1</span>
    <span class="pl-c1">add!</span>(ampo,<span class="pl-k">-</span>J,<span class="pl-s"><span class="pl-pds">"</span>Sz<span class="pl-pds">"</span></span>,j,<span class="pl-s"><span class="pl-pds">"</span>Sz<span class="pl-pds">"</span></span>,j<span class="pl-k">+</span><span class="pl-c1">1</span>)
    <span class="pl-c1">add!</span>(ampo,<span class="pl-k">-</span>h,<span class="pl-s"><span class="pl-pds">"</span>Sx<span class="pl-pds">"</span></span>,j)
<span class="pl-k">end</span>
<span class="pl-c1">add!</span>(ampo,<span class="pl-k">-</span>h,<span class="pl-s"><span class="pl-pds">"</span>Sx<span class="pl-pds">"</span></span>,<span class="pl-c1">length</span>(sites))
H<span class="pl-k">=</span> <span class="pl-c1">MPO</span>(ampo,sites)</pre></div>
<p>Now we can run time-evolution using TDVP.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="tdvp!(psi,H,dt,tf,maxdim=maxdim)
"><pre><span class="pl-c1">tdvp!</span>(psi,H,dt,tf,maxdim<span class="pl-k">=</span>maxdim)</pre></div>
<h2><a id="user-content-callbacks-ie-performing-measurements-during-time-evolution-wip" class="anchor" aria-hidden="true" href="#callbacks-ie-performing-measurements-during-time-evolution-wip"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Callbacks (i.e. performing measurements during time-evolution) (WIP)</h2>
<p>Probably you will be interested in measuring some observables at different time
points during the evolution. This is possible using the callback mechanism which
allows you to access the state of the system at each point of the evolution
(including steps in the middle of the TEBD/TDVP sweep). Callbacks can also be
used to stop the time-evolution if certain criteria have been met (e.g.
convergence of some observables). You could use one of the implemented callbacks
or implement a callback of your own (the callback mechanism is still work in
progress, so the API might change).</p>
<h3><a id="user-content-local-measurements-callback" class="anchor" aria-hidden="true" href="#local-measurements-callback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Local measurements callback</h3>
<p>Currently a <code>LocalMeasurmentCallback</code> is implemented which allows measuring single-site operators.
Here is how you would use it to measure the expectation values of <code>Sz,Sx,Sy</code>, with measurement interval <code>dt=0.2</code>
(time evolving with the MPO <code>H</code> defined in the previous section):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="psi = productMPS(sites, fill(&quot;↑&quot;,N))
cb = LocalMeasurementCallback([&quot;Sz&quot;,&quot;Sx&quot;,&quot;Sy&quot;], sites,0.2)
tdvp!(psi,H,0.1,5,maxdim=30,callback=cb)
"><pre>psi <span class="pl-k">=</span> <span class="pl-c1">productMPS</span>(sites, <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>↑<span class="pl-pds">"</span></span>,N))
cb <span class="pl-k">=</span> <span class="pl-c1">LocalMeasurementCallback</span>([<span class="pl-s"><span class="pl-pds">"</span>Sz<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Sx<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Sy<span class="pl-pds">"</span></span>], sites,<span class="pl-c1">0.2</span>)
<span class="pl-c1">tdvp!</span>(psi,H,<span class="pl-c1">0.1</span>,<span class="pl-c1">5</span>,maxdim<span class="pl-k">=</span><span class="pl-c1">30</span>,callback<span class="pl-k">=</span>cb)</pre></div>
<p>note that the measurment interval must be commensurate with the time-evolution step (here <code>0.1</code>).</p>
<p>Now you can extract the measurement results from the callback calling <code>measurements(cb)</code>. For example here is how you could plot
the measurements, using e.g. PyPlot.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyPlot
ts = measurement_ts(cb)
for o in [&quot;x&quot;,&quot;y&quot;,&quot;z&quot;]
    S5 = getindex.(measurements(cb)[&quot;S$o&quot;],5)
    plot(ts,S5,&quot;-o&quot;,label=&quot;\$S^$(o)_5\$&quot;)
end
legend()
xlabel(&quot;t&quot;)
"><pre><span class="pl-k">using</span> PyPlot
ts <span class="pl-k">=</span> <span class="pl-c1">measurement_ts</span>(cb)
<span class="pl-k">for</span> o <span class="pl-k">in</span> [<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>y<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>z<span class="pl-pds">"</span></span>]
    S5 <span class="pl-k">=</span> <span class="pl-c1">getindex</span>.(<span class="pl-c1">measurements</span>(cb)[<span class="pl-s"><span class="pl-pds">"</span>S<span class="pl-v">$o</span><span class="pl-pds">"</span></span>],<span class="pl-c1">5</span>)
    <span class="pl-c1">plot</span>(ts,S5,<span class="pl-s"><span class="pl-pds">"</span>-o<span class="pl-pds">"</span></span>,label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\$</span>S^<span class="pl-v">$(o)</span>_5<span class="pl-cce">\$</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>
<span class="pl-c1">legend</span>()
<span class="pl-c1">xlabel</span>(<span class="pl-s"><span class="pl-pds">"</span>t<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-implementing-a-custom-callback-todo" class="anchor" aria-hidden="true" href="#implementing-a-custom-callback-todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementing a custom callback (TODO)</h3>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>[1] Vidal, G. (2004). Efficient Simulation of One-Dimensional Quantum Many-Body
Systems. Physical Review Letters, 93(4), 040502.
<a href="https://doi.org/10.1103/PhysRevLett.93.040502" rel="nofollow">https://doi.org/10.1103/PhysRevLett.93.040502</a></p>
<p>[2] Haegeman, J., Lubich, C., Oseledets, I., Vandereycken, B., &amp; Verstraete,
F. (2016). Unifying time evolution and optimization with matrix product states.
Physical Review B, 94(16). <a href="https://doi.org/10.1103/PhysRevB.94.165116" rel="nofollow">https://doi.org/10.1103/PhysRevB.94.165116</a></p>
</article></div>