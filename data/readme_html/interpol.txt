<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-interpol" class="anchor" aria-hidden="true" href="#interpol"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InterPol</h1>
<p>Given values of a function y=y(x) <code>y=[...]</code> at points <code>x=[...]</code> we can
generate an interpolating polynomial p(x).  This package provides two
functions: <code>interpolateAt</code> and
<code>interpolateDerivativeAt</code>.  <code>interpolateAt[x,y,x0]</code> gives the value of
the interpolating polynomial p at the point
x0.  <code>interpolateDerivativeAt[x,y,x0]</code> evaluates p' at the point x0.  For example</p>
<pre><code>julia&gt; interpolateAt([0,1,2],[0,1,4],1)
1.0
julia&gt; interpolateDerivativeAt([0,1,2],[0,1,4],1)
2.0
</code></pre>
<p><a href="https://travis-ci.org/pwl/InterPol.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/048bc69f1066617f40e41a1f4aac2521f942e6de/68747470733a2f2f7472617669732d63692e6f72672f70776c2f496e746572506f6c2e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/pwl/InterPol.jl.svg" style="max-width:100%;"></a></p>
</article></div>