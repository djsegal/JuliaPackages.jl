<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-testextras" class="anchor" aria-hidden="true" href="#testextras"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TestExtras</h1>
<p dir="auto"><a href="https://github.com/Jutho/TestExtras.jl/actions"><img src="https://github.com/Jutho/TestExtras.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Jutho/TestExtras.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/76cf5f708db29a5c2cc952c7ceb393d3b615aa768e3c8d62cbca23a8801ea7fb/68747470733a2f2f636f6465636f762e696f2f67682f4a7574686f2f546573744578747261732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Jutho/TestExtras.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package adds useful additions to the functionality provided by <code>Test</code>, the Julia
standard library for writing tests.</p>
<p dir="auto">The first addition is a new type of <code>TestSet</code>, namely <code>TimedTestSet</code>, which behaves
identical to <code>Test.DefaultTestSet</code> except that it prints the total time it took to execute
the test set, together with the number of passed, failed and broken tests. While this
service should not be used as a finetuned performance regression detection mechanism, it
can provide a first hint of possible regressions in case there is a significant discrepancy
in the time of a testset in comparison to previous runs. There is a simple macro
<code>@timedtestset</code> to facilitate using this testset. The name <code>TimedTestSet</code> is itself not
exported, so one either does</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test, TestExtras
@timedtestset &quot;some optional name&quot; begin
    ...
end"><pre><span class="pl-k">using</span> Test, TestExtras
<span class="pl-c1">@timedtestset</span> <span class="pl-s"><span class="pl-pds">"</span>some optional name<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test, TestExtras
using TestExtras: TimedTestSet
@testset TimedTestSet &quot;some optional name&quot; begin
    ...
end"><pre><span class="pl-k">using</span> Test, TestExtras
<span class="pl-k">using</span> TestExtras<span class="pl-k">:</span> TimedTestSet
<span class="pl-c1">@testset</span> TimedTestSet <span class="pl-s"><span class="pl-pds">"</span>some optional name<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
    <span class="pl-k">...</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The second macro exported by TestExtras.jl is <code>@constinferred</code>, which is a replacement of
<code>Test.@inferred</code> but with two major differences.</p>
<ol dir="auto">
<li>
<p dir="auto">Unlike <code>Test.@inferred</code>, the comparison between the actual and inferred runtype is a
proper test which contributes to the total number of passed or failed tests.</p>
</li>
<li>
<p dir="auto">Unlike <code>Test.@inferred</code>, <code>@constinferred</code> will test whether the return value of a
function call can be inferred in combination with constant propagation. For
<code>@inferred</code>, both <code>@inferred f(3, ...)</code> and <code>x=3; @inferred f(x, ...)</code> will yield the
same result, based on probing <code>Base.return_types(f,(Int,...))</code>. In contrast
<code>@constinferred f(3,...)</code> will wrap the function call in a new function in which the
value <code>3</code> is hard-coded, and test whether the return type of this wrapper function can
be inferred, so as to let constant propagation do its work. This is true for all
arguments (positional and keyword) whose value is a literal constants of type
<code>Integer</code>, <code>Char</code> or <code>Symbol</code>. Generic arguments will instead also be arguments to the
wrapper function and will thus not trigger constant propagation. However, sometimes it
is useful to test for successful constant propagation of a certain variable, even
though you want to keep it as a symbol in the test, for example because you want to
loop over possible values. In that case, you can interpolate the value into the
<code>@constinferred</code> expression.</p>
</li>
</ol>
<p dir="auto">Some example is probably more insightful. We define a new function <code>mysqrt</code> that is type-unstable with respect to real values of the argument <code>x</code>, at least if the keyword argument <code>complex = true</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Test, TestExtras

julia&gt; mysqrt(x; complex = true) = x &gt;= 0 ? sqrt(x) : (complex ? im*sqrt(-x) : throw(DomainError(x, &quot;Enable complex return values to take square roots of negative numbers&quot;)))
mysqrt (generic function with 1 method)

julia&gt; x = 3.
3.0

julia&gt; @inferred mysqrt(x)
ERROR: return type Float64 does not match inferred return type Union{Complex{Float64}, Float64}
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] top-level scope at REPL[5]:1

julia&gt; @inferred mysqrt(3.)
ERROR: return type Float64 does not match inferred return type Union{Complex{Float64}, Float64}
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] top-level scope at REPL[6]:1

julia&gt; @inferred mysqrt(-3.)
ERROR: return type Complex{Float64} does not match inferred return type Union{Complex{Float64}, Float64}
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] top-level scope at REPL[7]:1

julia&gt; @inferred mysqrt(x; complex = false)
ERROR: return type Float64 does not match inferred return type Union{Complex{Float64}, Float64}
Stacktrace:
 [1] error(::String) at ./error.jl:33
 [2] top-level scope at REPL[8]:1

julia&gt; @constinferred mysqrt(x)
Test Failed at REPL[10]:1
  Expression: @constinferred mysqrt(x)
   Evaluated: Float64 != Union{Complex{Float64}, Float64}
ERROR: There was an error during testing

julia&gt; @constinferred mysqrt($x)
1.7320508075688772

julia&gt; @constinferred mysqrt(3.)
1.7320508075688772

julia&gt; @constinferred mysqrt(-3.)
0.0 + 1.7320508075688772im

julia&gt; @constinferred mysqrt(x; complex = false)
1.7320508075688772"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Test, TestExtras

julia<span class="pl-k">&gt;</span> <span class="pl-en">mysqrt</span>(x; complex <span class="pl-k">=</span> <span class="pl-c1">true</span>) <span class="pl-k">=</span> x <span class="pl-k">&gt;=</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">sqrt</span>(x) <span class="pl-k">:</span> (complex <span class="pl-k">?</span> im<span class="pl-k">*</span><span class="pl-c1">sqrt</span>(<span class="pl-k">-</span>x) <span class="pl-k">:</span> <span class="pl-c1">throw</span>(<span class="pl-c1">DomainError</span>(x, <span class="pl-s"><span class="pl-pds">"</span>Enable complex return values to take square roots of negative numbers<span class="pl-pds">"</span></span>)))
mysqrt (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">3.</span>
<span class="pl-c1">3.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@inferred</span> <span class="pl-c1">mysqrt</span>(x)
ERROR<span class="pl-k">:</span> <span class="pl-k">return</span> type Float64 does not match inferred <span class="pl-k">return</span> type Union{Complex{Float64}, Float64}
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">error</span>(<span class="pl-k">::</span><span class="pl-c1">String</span>) at <span class="pl-k">./</span>error<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">5</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@inferred</span> <span class="pl-c1">mysqrt</span>(<span class="pl-c1">3.</span>)
ERROR<span class="pl-k">:</span> <span class="pl-k">return</span> type Float64 does not match inferred <span class="pl-k">return</span> type Union{Complex{Float64}, Float64}
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">error</span>(<span class="pl-k">::</span><span class="pl-c1">String</span>) at <span class="pl-k">./</span>error<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">6</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@inferred</span> <span class="pl-c1">mysqrt</span>(<span class="pl-k">-</span><span class="pl-c1">3.</span>)
ERROR<span class="pl-k">:</span> <span class="pl-k">return</span> type Complex{Float64} does not match inferred <span class="pl-k">return</span> type Union{Complex{Float64}, Float64}
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">error</span>(<span class="pl-k">::</span><span class="pl-c1">String</span>) at <span class="pl-k">./</span>error<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">7</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@inferred</span> <span class="pl-c1">mysqrt</span>(x; complex <span class="pl-k">=</span> <span class="pl-c1">false</span>)
ERROR<span class="pl-k">:</span> <span class="pl-k">return</span> type Float64 does not match inferred <span class="pl-k">return</span> type Union{Complex{Float64}, Float64}
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">error</span>(<span class="pl-k">::</span><span class="pl-c1">String</span>) at <span class="pl-k">./</span>error<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">33</span>
 [<span class="pl-c1">2</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">8</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@constinferred</span> <span class="pl-c1">mysqrt</span>(x)
Test Failed at REPL[<span class="pl-c1">10</span>]<span class="pl-k">:</span><span class="pl-c1">1</span>
  Expression<span class="pl-k">:</span> <span class="pl-c1">@constinferred</span> <span class="pl-c1">mysqrt</span>(x)
   Evaluated<span class="pl-k">:</span> Float64 <span class="pl-k">!=</span> Union{Complex{Float64}, Float64}
ERROR<span class="pl-k">:</span> There was an error during testing

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@constinferred</span> <span class="pl-c1">mysqrt</span>(<span class="pl-k">$</span>x)
<span class="pl-c1">1.7320508075688772</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@constinferred</span> <span class="pl-c1">mysqrt</span>(<span class="pl-c1">3.</span>)
<span class="pl-c1">1.7320508075688772</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@constinferred</span> <span class="pl-c1">mysqrt</span>(<span class="pl-k">-</span><span class="pl-c1">3.</span>)
<span class="pl-c1">0.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.7320508075688772im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@constinferred</span> <span class="pl-c1">mysqrt</span>(x; complex <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-c1">1.7320508075688772</span></pre></div>
<p dir="auto">Note, firstly, that the case where <code>@constinferred</code> detects that the return type cannot be
inferred for a general argument of type <code>Float64</code>, it reports the error as an actual test
failure rather than a generic error. Secondly, note that while the <code>@constinferred</code> macro
seems to work for all versions of Julia from version 1 onwards, the result can depend on
the specific Julia version, as changes in the compiler affect constant propagation. In
particular, the constant propagation for the keyword argument in the last test only leads
to an inferred return type on Julia 1.5 (and beyond?).</p>
</article></div>