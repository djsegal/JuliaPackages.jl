<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-enhancedgjk" class="anchor" aria-hidden="true" href="#enhancedgjk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>EnhancedGJK</h1>
<p dir="auto"><a href="https://github.com/JuliaRobotics/EnhancedGJK.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaRobotics/EnhancedGJK.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaRobotics/EnhancedGJK.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0efaaa28ec04bf91fa9359f526d29058a4a9f9057e5b3e8397f49f0ca0c1ea97/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961526f626f746963732f456e68616e636564474a4b2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaRobotics/EnhancedGJK.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This package contains a pure-Julia implementation of the enhanced version of the Gilbert, Johnson, and Keerthi algorithm for computing distance between convex bodies. The algorithm is described in detail by Stephen Cameron in [1].</p>
<h2 dir="auto"><a id="user-content-why-julia" class="anchor" aria-hidden="true" href="#why-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why Julia?</h2>
<p dir="auto">GJK implementations are numerous and well-tested, but a pure-Julia implementation may have benefits that other languages cannot offer. This implementation of GJK is entirely agnostic to the data types which describe both the geometries and their positions in space. This means that, for example, gradients of distances can easily be computed using the automatic differentiation provided by ForwardDiff.jl's DualNumber type. But there may be other applications as well, such as geometries or transformations with rational or variable-precision arithmetic. A pure-Julia implementation makes it easy to experiment with new data types without sacrificing performance.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">The easiest way to use this package is the <code>gjk()</code> function. <code>gjk()</code> takes two geometries and, optionally, Transformation types specifying the pose of each geometry:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EnhancedGJK
import GeometryTypes: HyperRectangle, HyperSphere, Vec, Point

c1 = HyperRectangle(Vec(0., 0, 0), Vec(1., 1, 1))
c2 = HyperRectangle(Vec(3., 0, 0), Vec(1., 1, 1))
result = gjk(c1, c2)"><pre><span class="pl-k">using</span> EnhancedGJK
<span class="pl-k">import</span> GeometryTypes<span class="pl-k">:</span> HyperRectangle, HyperSphere, Vec, Point

c1 <span class="pl-k">=</span> <span class="pl-c1">HyperRectangle</span>(<span class="pl-c1">Vec</span>(<span class="pl-c1">0.</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>), <span class="pl-c1">Vec</span>(<span class="pl-c1">1.</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
c2 <span class="pl-k">=</span> <span class="pl-c1">HyperRectangle</span>(<span class="pl-c1">Vec</span>(<span class="pl-c1">3.</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>), <span class="pl-c1">Vec</span>(<span class="pl-c1">1.</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>))
result <span class="pl-k">=</span> <span class="pl-c1">gjk</span>(c1, c2)</pre></div>
<p dir="auto">The return type of <code>gjk()</code> is a <code>GJKResult</code>, from which you can extract the signed distance between the two bodies:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @show separation_distance(result)
separation_distance(result) = 2.0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@show</span> <span class="pl-c1">separation_distance</span>(result)
<span class="pl-en">separation_distance</span>(result) <span class="pl-k">=</span> <span class="pl-c1">2.0</span></pre></div>
<p dir="auto">You can also access the closest point in each body to the other:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; result.closest_point_in_body.a
3-element StaticArrays.SVector{3,Float64}:
 1.0
 0.0
 0.0

julia&gt; result.closest_point_in_body.b
3-element StaticArrays.SVector{3,Float64}:
 3.0
 0.0
 0.0"><pre>julia<span class="pl-k">&gt;</span> result<span class="pl-k">.</span>closest_point_in_body<span class="pl-k">.</span>a
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">3</span>,Float64}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> result<span class="pl-k">.</span>closest_point_in_body<span class="pl-k">.</span>b
<span class="pl-c1">3</span><span class="pl-k">-</span>element StaticArrays<span class="pl-k">.</span>SVector{<span class="pl-c1">3</span>,Float64}<span class="pl-k">:</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span></pre></div>
<h2 dir="auto"><a id="user-content-going-faster" class="anchor" aria-hidden="true" href="#going-faster"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Going Faster</h2>
<p dir="auto">When simulating physics, we often want to compute the distance between two bodies over and over while those bodies move slightly. In that case, we can cache some of the intermediate results to make each distance computation faster and free of memory allocations:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using EnhancedGJK
import StaticArrays: SVector
import CoordinateTransformations: IdentityTransformation, Translation

# Construct two geometries: a simplex and a single point:
simplex = SVector{3}(SVector{2, Float64}[[1., 0], [2., 0], [1., 1]])
pt = SVector(0., 0)

# The CollisionCache stores both geometries and also remembers
# information about the GJK simplex used to check for collisions
# between them. Using the same cache later will make subsequent
# computations faster.
cache = CollisionCache(simplex, pt);

# Run the GJK algorithm. Each geometry can also be given a
# transformation to describe its position and orientation in the
# world frame.
result = gjk!(cache, IdentityTransformation(), IdentityTransformation())

# Check whether the geometries are in collision:
@show result.in_collision

# If the geometries are not in collision, an accurate distance between
# the objects can be computed using
@show separation_distance(result)

# If the geometries *are* in collision, the GJK algorithm by itself cannot
# compute an accurate measure of penetration distance. However, we can at
# least obtain the distance to the nearest face of the simplex used in the
# GJK algorithm to prove penetration, which is an underestimate of penetration
# distance and can in certain cases be used as a proxy for it. This value can
# be obtained using
# simplex_penetration_distance(result)

# We can perturb one of the geometries by changing its transformation.
# Reusing the same cache will make this computation faster, expecially
# for complex geometries when the change in transformation is small.
result = gjk!(cache, Translation(SVector(0.1, 0)), IdentityTransformation())

@show result.in_collision
@show separation_distance(result)"><pre><span class="pl-k">using</span> EnhancedGJK
<span class="pl-k">import</span> StaticArrays<span class="pl-k">:</span> SVector
<span class="pl-k">import</span> CoordinateTransformations<span class="pl-k">:</span> IdentityTransformation, Translation

<span class="pl-c"><span class="pl-c">#</span> Construct two geometries: a simplex and a single point:</span>
simplex <span class="pl-k">=</span> <span class="pl-c1">SVector</span><span class="pl-c1">{3}</span>(SVector{<span class="pl-c1">2</span>, Float64}[[<span class="pl-c1">1.</span>, <span class="pl-c1">0</span>], [<span class="pl-c1">2.</span>, <span class="pl-c1">0</span>], [<span class="pl-c1">1.</span>, <span class="pl-c1">1</span>]])
pt <span class="pl-k">=</span> <span class="pl-c1">SVector</span>(<span class="pl-c1">0.</span>, <span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> The CollisionCache stores both geometries and also remembers</span>
<span class="pl-c"><span class="pl-c">#</span> information about the GJK simplex used to check for collisions</span>
<span class="pl-c"><span class="pl-c">#</span> between them. Using the same cache later will make subsequent</span>
<span class="pl-c"><span class="pl-c">#</span> computations faster.</span>
cache <span class="pl-k">=</span> <span class="pl-c1">CollisionCache</span>(simplex, pt);

<span class="pl-c"><span class="pl-c">#</span> Run the GJK algorithm. Each geometry can also be given a</span>
<span class="pl-c"><span class="pl-c">#</span> transformation to describe its position and orientation in the</span>
<span class="pl-c"><span class="pl-c">#</span> world frame.</span>
result <span class="pl-k">=</span> <span class="pl-c1">gjk!</span>(cache, <span class="pl-c1">IdentityTransformation</span>(), <span class="pl-c1">IdentityTransformation</span>())

<span class="pl-c"><span class="pl-c">#</span> Check whether the geometries are in collision:</span>
<span class="pl-c1">@show</span> result<span class="pl-k">.</span>in_collision

<span class="pl-c"><span class="pl-c">#</span> If the geometries are not in collision, an accurate distance between</span>
<span class="pl-c"><span class="pl-c">#</span> the objects can be computed using</span>
<span class="pl-c1">@show</span> <span class="pl-c1">separation_distance</span>(result)

<span class="pl-c"><span class="pl-c">#</span> If the geometries *are* in collision, the GJK algorithm by itself cannot</span>
<span class="pl-c"><span class="pl-c">#</span> compute an accurate measure of penetration distance. However, we can at</span>
<span class="pl-c"><span class="pl-c">#</span> least obtain the distance to the nearest face of the simplex used in the</span>
<span class="pl-c"><span class="pl-c">#</span> GJK algorithm to prove penetration, which is an underestimate of penetration</span>
<span class="pl-c"><span class="pl-c">#</span> distance and can in certain cases be used as a proxy for it. This value can</span>
<span class="pl-c"><span class="pl-c">#</span> be obtained using</span>
<span class="pl-c"><span class="pl-c">#</span> simplex_penetration_distance(result)</span>

<span class="pl-c"><span class="pl-c">#</span> We can perturb one of the geometries by changing its transformation.</span>
<span class="pl-c"><span class="pl-c">#</span> Reusing the same cache will make this computation faster, expecially</span>
<span class="pl-c"><span class="pl-c">#</span> for complex geometries when the change in transformation is small.</span>
result <span class="pl-k">=</span> <span class="pl-c1">gjk!</span>(cache, <span class="pl-c1">Translation</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">0.1</span>, <span class="pl-c1">0</span>)), <span class="pl-c1">IdentityTransformation</span>())

<span class="pl-c1">@show</span> result<span class="pl-k">.</span>in_collision
<span class="pl-c1">@show</span> <span class="pl-c1">separation_distance</span>(result)</pre></div>
<h2 dir="auto"><a id="user-content-meshes" class="anchor" aria-hidden="true" href="#meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Meshes</h2>
<p dir="auto"><code>gjk()</code> and <code>gjk!()</code> support meshes, represented as GeometryTypes.jl HomogenousMesh objects:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MeshIO
using FileIO
mesh = load(&quot;test/meshes/r_foot_chull.obj&quot;)
result = EnhancedGJK.gjk(mesh, mesh, IdentityTransformation(), Translation(SVector(5., 0, 0)))
@show separation_distance(result)"><pre><span class="pl-k">using</span> MeshIO
<span class="pl-k">using</span> FileIO
mesh <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test/meshes/r_foot_chull.obj<span class="pl-pds">"</span></span>)
result <span class="pl-k">=</span> EnhancedGJK<span class="pl-k">.</span><span class="pl-c1">gjk</span>(mesh, mesh, <span class="pl-c1">IdentityTransformation</span>(), <span class="pl-c1">Translation</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">5.</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)))
<span class="pl-c1">@show</span> <span class="pl-c1">separation_distance</span>(result)</pre></div>
<p dir="auto">Note that this package <em>does not</em> check if the mesh is convex. Non-convex meshes may produce incorrect distance measurements.</p>
<p dir="auto">GJK can be run even faster on complex meshes by pre-computing the neighbors of each vertex in the mesh. The <code>NeighborMesh</code> type handles this for you:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="neighbormesh = NeighborMesh(mesh)
result = gjk(neighbormesh, neighbormesh, IdentityTransformation(), Translation(SVector(5., 0, 0)))"><pre>neighbormesh <span class="pl-k">=</span> <span class="pl-c1">NeighborMesh</span>(mesh)
result <span class="pl-k">=</span> <span class="pl-c1">gjk</span>(neighbormesh, neighbormesh, <span class="pl-c1">IdentityTransformation</span>(), <span class="pl-c1">Translation</span>(<span class="pl-c1">SVector</span>(<span class="pl-c1">5.</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)))</pre></div>
<p dir="auto">This pre-computation of mesh vertex neighbors is the "enhanced" part of Enhanced GJK.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">[1] S. Cameron, “Enhancing GJK: computing minimum and penetration distances between convex polyhedra,” in , 1997 IEEE International Conference on Robotics and Automation, 1997. Proceedings, 1997, vol. 4, pp. 3112–3117 vol.4.</p>
</article></div>