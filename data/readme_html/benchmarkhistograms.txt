<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://github.com/ericphanson/BenchmarkHistograms.jl/actions/workflows/CI.yml"><img src="https://github.com/ericphanson/BenchmarkHistograms.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ericphanson/BenchmarkHistograms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c3bcef2e206c3fb4831c8256f068d63d57c062322aa9b966f992c6ebf02097cb/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f42656e63686d61726b486973746f6772616d732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d76306163613839785269" alt="codecov" data-canonical-src="https://codecov.io/gh/ericphanson/BenchmarkHistograms.jl/branch/main/graph/badge.svg?token=v0aca89xRi" style="max-width:100%;"></a></p>
<h1><a id="user-content-benchmarkhistograms" class="anchor" aria-hidden="true" href="#benchmarkhistograms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BenchmarkHistograms</h1>
<p>Wraps <a href="https://github.com/JuliaCI/BenchmarkTools.jl/">BenchmarkTools.jl</a> to provide a UnicodePlots.jl-powered <code>show</code> method for <code>@benchmark</code>. This is accomplished by a custom <code>@benchmark</code> method which wraps the output in a <code>BenchmarkPlot</code> struct with a custom show method.</p>
<p>This means one should not call <code>using</code> on both BenchmarkHistograms and BenchmarkTools in the same namespace, or else these <code>@benchmark</code> macros will conflict ("WARNING: using <code>BenchmarkTools.@benchmark</code> in module Main conflicts with an existing identifier.")</p>
<p>However, BenchmarkHistograms re-exports all of BenchmarkTools (including the module <code>BenchmarkTools</code> itself), so you can simply call <code>using BenchmarkHistograms</code> instead.</p>
<p>Providing this functionality in BenchmarkTools itself was discussed in <a href="https://github.com/JuliaCI/BenchmarkTools.jl/pull/180">https://github.com/JuliaCI/BenchmarkTools.jl/pull/180</a>.</p>
<p>Use the setting <code>BenchmarkHistograms.NBINS[]</code> to change the number of histogram bins used, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="BenchmarkHistograms.NBINS[] = 10
"><pre>BenchmarkHistograms<span class="pl-k">.</span>NBINS[] <span class="pl-k">=</span> <span class="pl-c1">10</span></pre></div>
<p>to use 10 bins.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>One just uses <code>BenchmarkHistograms</code> instead of <code>BenchmarkTools</code>, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BenchmarkHistograms

@benchmark sin(x) setup=(x=rand())
"><pre><span class="pl-k">using</span> BenchmarkHistograms

<span class="pl-c1">@benchmark</span> <span class="pl-c1">sin</span>(x) setup<span class="pl-k">=</span>(x<span class="pl-k">=</span><span class="pl-c1">rand</span>())</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="samples: 10000; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
                   ┌                                        ┐ 
      [ 4.0,  6.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 7823   
      [ 6.0,  8.0) ┤▇▇▇▇▇▇▇ 1643                              
      [ 8.0, 10.0) ┤▇▇ 529                                    
      [10.0, 12.0) ┤ 2                                        
      [12.0, 14.0) ┤ 2                                        
   ns [14.0, 16.0) ┤ 0                                        
      [16.0, 18.0) ┤ 0                                        
      [18.0, 20.0) ┤ 0                                        
      [20.0, 22.0) ┤ 0                                        
      [22.0, 24.0) ┤ 0                                        
      [24.0, 26.0) ┤ 0                                        
      [26.0, 28.0) ┤ 1                                        
                   └                                        ┘ 
                                    Counts
min: 4.916 ns (0.00% GC); mean: 5.724 ns (0.00% GC); median: 5.208 ns (0.00% GC); max: 27.458 ns (0.00% GC).
"><pre><code>samples: 10000; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
                   ┌                                        ┐ 
      [ 4.0,  6.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 7823   
      [ 6.0,  8.0) ┤▇▇▇▇▇▇▇ 1643                              
      [ 8.0, 10.0) ┤▇▇ 529                                    
      [10.0, 12.0) ┤ 2                                        
      [12.0, 14.0) ┤ 2                                        
   ns [14.0, 16.0) ┤ 0                                        
      [16.0, 18.0) ┤ 0                                        
      [18.0, 20.0) ┤ 0                                        
      [20.0, 22.0) ┤ 0                                        
      [22.0, 24.0) ┤ 0                                        
      [24.0, 26.0) ┤ 0                                        
      [26.0, 28.0) ┤ 1                                        
                   └                                        ┘ 
                                    Counts
min: 4.916 ns (0.00% GC); mean: 5.724 ns (0.00% GC); median: 5.208 ns (0.00% GC); max: 27.458 ns (0.00% GC).
</code></pre></div>
<p>That benchmark does not have a very interesting distribution, but it's not hard to find more interesting cases.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@benchmark 5 ∈ v setup=(v = sort(rand(1:10000, 10000)))
"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">5</span> <span class="pl-k">∈</span> v setup<span class="pl-k">=</span>(v <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>)))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="samples: 3192; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
                       ┌                                        ┐ 
      [   0.0,  500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 2036   
      [ 500.0, 1000.0) ┤ 0                                        
      [1000.0, 1500.0) ┤ 0                                        
   ns [1500.0, 2000.0) ┤ 0                                        
      [2000.0, 2500.0) ┤ 0                                        
      [2500.0, 3000.0) ┤ 0                                        
      [3000.0, 3500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1156                  
                       └                                        ┘ 
                                        Counts
min: 1.875 ns (0.00% GC); mean: 1.141 μs (0.00% GC); median: 4.521 ns (0.00% GC); max: 3.315 μs (0.00% GC).
"><pre><code>samples: 3192; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
                       ┌                                        ┐ 
      [   0.0,  500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 2036   
      [ 500.0, 1000.0) ┤ 0                                        
      [1000.0, 1500.0) ┤ 0                                        
   ns [1500.0, 2000.0) ┤ 0                                        
      [2000.0, 2500.0) ┤ 0                                        
      [2500.0, 3000.0) ┤ 0                                        
      [3000.0, 3500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1156                  
                       └                                        ┘ 
                                        Counts
min: 1.875 ns (0.00% GC); mean: 1.141 μs (0.00% GC); median: 4.521 ns (0.00% GC); max: 3.315 μs (0.00% GC).
</code></pre></div>
<p>Here, we see a bimodal distribution; in the case <code>5</code> is indeed in the vector, we find it very quickly, in the 0-1000 ns range (thanks to <code>sort</code> which places it at the front). In the case 5 is not present, we need to check every entry to be sure, and we end up in the 3000-4000 ns range.</p>
<p>Without the <code>sort</code>, we end up with more of a uniform distribution:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@benchmark 5 ∈ v setup=(v = rand(1:10000, 10000))
"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">5</span> <span class="pl-k">∈</span> v setup<span class="pl-k">=</span>(v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>))</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="samples: 2461; evals/sample: 999; memory estimate: 0 bytes; allocs estimate: 0
                       ┌                                        ┐ 
      [   0.0,  500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 364                        
      [ 500.0, 1000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇ 327                          
      [1000.0, 1500.0) ┤▇▇▇▇▇▇▇▇▇▇ 266                            
   ns [1500.0, 2000.0) ┤▇▇▇▇▇▇▇▇ 214                              
      [2000.0, 2500.0) ┤▇▇▇▇▇▇▇▇ 213                              
      [2500.0, 3000.0) ┤▇▇▇▇▇ 146                                 
      [3000.0, 3500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 931   
                       └                                        ┘ 
                                        Counts
min: 8.842 ns (0.00% GC); mean: 1.972 μs (0.00% GC); median: 2.154 μs (0.00% GC); max: 3.364 μs (0.00% GC).
"><pre><code>samples: 2461; evals/sample: 999; memory estimate: 0 bytes; allocs estimate: 0
                       ┌                                        ┐ 
      [   0.0,  500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 364                        
      [ 500.0, 1000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇ 327                          
      [1000.0, 1500.0) ┤▇▇▇▇▇▇▇▇▇▇ 266                            
   ns [1500.0, 2000.0) ┤▇▇▇▇▇▇▇▇ 214                              
      [2000.0, 2500.0) ┤▇▇▇▇▇▇▇▇ 213                              
      [2500.0, 3000.0) ┤▇▇▇▇▇ 146                                 
      [3000.0, 3500.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 931   
                       └                                        ┘ 
                                        Counts
min: 8.842 ns (0.00% GC); mean: 1.972 μs (0.00% GC); median: 2.154 μs (0.00% GC); max: 3.364 μs (0.00% GC).
</code></pre></div>
<p>This function gives a somewhat more Gaussian distribution of times, kindly supplied by Mason Protter:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f() = sum((sin(i) for i in 1:round(Int, 1000 + 100*randn())))

@benchmark f()
"><pre><span class="pl-en">f</span>() <span class="pl-k">=</span> <span class="pl-c1">sum</span>((<span class="pl-c1">sin</span>(i) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">round</span>(Int, <span class="pl-c1">1000</span> <span class="pl-k">+</span> <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">randn</span>())))

<span class="pl-c1">@benchmark</span> <span class="pl-c1">f</span>()</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="samples: 10000; evals/sample: 1; memory estimate: 0 bytes; allocs estimate: 0
                         ┌                                        ┐ 
      [ 8000.0,  9000.0) ┤ 12                                       
      [ 9000.0, 10000.0) ┤▇ 117                                     
      [10000.0, 11000.0) ┤▇▇▇▇▇▇▇ 635                               
      [11000.0, 12000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1810                
      [12000.0, 13000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 2959   
      [13000.0, 14000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 2460         
   ns [14000.0, 15000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1451                    
      [15000.0, 16000.0) ┤▇▇▇▇▇ 456                                 
      [16000.0, 17000.0) ┤▇ 89                                      
      [17000.0, 18000.0) ┤ 9                                        
      [18000.0, 19000.0) ┤ 1                                        
      [19000.0, 20000.0) ┤ 0                                        
      [20000.0, 21000.0) ┤ 1                                        
                         └                                        ┘ 
                                          Counts
min: 8.109 μs (0.00% GC); mean: 12.865 μs (0.00% GC); median: 12.820 μs (0.00% GC); max: 20.459 μs (0.00% GC).
"><pre><code>samples: 10000; evals/sample: 1; memory estimate: 0 bytes; allocs estimate: 0
                         ┌                                        ┐ 
      [ 8000.0,  9000.0) ┤ 12                                       
      [ 9000.0, 10000.0) ┤▇ 117                                     
      [10000.0, 11000.0) ┤▇▇▇▇▇▇▇ 635                               
      [11000.0, 12000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1810                
      [12000.0, 13000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 2959   
      [13000.0, 14000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 2460         
   ns [14000.0, 15000.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1451                    
      [15000.0, 16000.0) ┤▇▇▇▇▇ 456                                 
      [16000.0, 17000.0) ┤▇ 89                                      
      [17000.0, 18000.0) ┤ 9                                        
      [18000.0, 19000.0) ┤ 1                                        
      [19000.0, 20000.0) ┤ 0                                        
      [20000.0, 21000.0) ┤ 1                                        
                         └                                        ┘ 
                                          Counts
min: 8.109 μs (0.00% GC); mean: 12.865 μs (0.00% GC); median: 12.820 μs (0.00% GC); max: 20.459 μs (0.00% GC).
</code></pre></div>
<p>See also <a href="https://tratt.net/laurie/blog/entries/minimum_times_tend_to_mislead_when_benchmarking.html" rel="nofollow">https://tratt.net/laurie/blog/entries/minimum_times_tend_to_mislead_when_benchmarking.html</a> for another example of where looking at the whole histogram can be useful in benchmarking.</p>
<hr>
<p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>