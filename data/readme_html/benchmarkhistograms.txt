<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/ericphanson/BenchmarkHistograms.jl/actions/workflows/CI.yml"><img src="https://github.com/ericphanson/BenchmarkHistograms.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ericphanson/BenchmarkHistograms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c3bcef2e206c3fb4831c8256f068d63d57c062322aa9b966f992c6ebf02097cb/68747470733a2f2f636f6465636f762e696f2f67682f657269637068616e736f6e2f42656e63686d61726b486973746f6772616d732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d76306163613839785269" alt="codecov" data-canonical-src="https://codecov.io/gh/ericphanson/BenchmarkHistograms.jl/branch/main/graph/badge.svg?token=v0aca89xRi" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-benchmarkhistograms" class="anchor" aria-hidden="true" href="#benchmarkhistograms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BenchmarkHistograms</h1>
<h2 dir="auto"><a id="user-content-note-benchmarktools-now-prints-very-pretty-histograms-automatically-for-benchmark-this-package-is-therefore-obsolete" class="anchor" aria-hidden="true" href="#note-benchmarktools-now-prints-very-pretty-histograms-automatically-for-benchmark-this-package-is-therefore-obsolete"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note: BenchmarkTools <a href="https://github.com/JuliaCI/BenchmarkTools.jl/pull/217" data-hovercard-type="pull_request" data-hovercard-url="/JuliaCI/BenchmarkTools.jl/pull/217/hovercard">now</a> prints very pretty histograms automatically for <code>@benchmark</code>. This package is therefore obsolete.</h2>
<p dir="auto">Wraps <a href="https://github.com/JuliaCI/BenchmarkTools.jl/">BenchmarkTools.jl</a> to provide a unicode histogram <code>show</code> method for <code>@benchmark</code>. This is accomplished by a custom <code>@benchmark</code> method which wraps the output in a <code>BenchmarkPlot</code> struct with a custom show method.</p>
<p dir="auto">This means one should not call <code>using</code> on both BenchmarkHistograms and BenchmarkTools in the same namespace, or else these <code>@benchmark</code> macros will conflict ("WARNING: using <code>BenchmarkTools.@benchmark</code> in module Main conflicts with an existing identifier.")</p>
<p dir="auto">However, BenchmarkHistograms re-exports all the export of BenchmarkTools, so you can simply call <code>using BenchmarkHistograms</code>.</p>
<p dir="auto">Providing this functionality in BenchmarkTools itself was discussed in <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="723852233" data-permission-text="Title is private" data-url="https://github.com/JuliaCI/BenchmarkTools.jl/issues/180" data-hovercard-type="pull_request" data-hovercard-url="/JuliaCI/BenchmarkTools.jl/pull/180/hovercard" href="https://github.com/JuliaCI/BenchmarkTools.jl/pull/180">JuliaCI/BenchmarkTools.jl#180</a>.
Thanks to @brenhinkeller for providing the initial plotting code there.</p>
<p dir="auto">Use the setting <code>BenchmarkHistograms.NBINS</code> to change the number of histogram bins used, e.g. <code>BenchmarkHistograms.NBINS[] = 10</code> for 10 bins.</p>
<p dir="auto">Likewise use the setting <code>BenchmarkHistograms.OUTLIER_QUANTILE</code> to tweak which values count as outliers and may be grouped into a single bin.
For example, <code>BenchmarkHistograms.OUTLIER_QUANTILE[] = 0.99</code> counts any values past the 99 percentile as possible outliers. This value defaults to <code>0.999</code> and is disabled by setting it to <code>1.0</code>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">One just uses <code>BenchmarkHistograms</code> instead of <code>BenchmarkTools</code>, e.g.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkHistograms

@benchmark sin(x) setup=(x=rand())"><pre><span class="pl-k">using</span> BenchmarkHistograms

<span class="pl-c1">@benchmark</span> <span class="pl-c1">sin</span>(x) setup<span class="pl-k">=</span>(x<span class="pl-k">=</span><span class="pl-c1">rand</span>())</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="samples: 10000; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
ns

 (8.04  - 8.53 ]  ██████████████████████████████▏7673
 (8.53  - 9.02 ]  ▌109
 (9.02  - 9.51 ]  ▏3
 (9.51  - 10.01]   0
 (10.01 - 10.5 ]   0
 (10.5  - 10.99]  █████▋1431
 (10.99 - 11.48]  ██▌624
 (11.48 - 11.97]  ▍70
 (11.97 - 12.46]  ▎38
 (12.46 - 12.95]  ▏4
 (12.95 - 13.44]  ▏1
 (13.44 - 13.93]  ▏2
 (13.93 - 14.42]  ▏7
 (14.42 - 14.92]  ▏22
 (14.92 - 21.88]  ▏16

                  Counts

min: 8.041 ns (0.00% GC); mean: 8.812 ns (0.00% GC); median: 8.166 ns (0.00% GC); max: 21.875 ns (0.00% GC)."><pre class="notranslate"><code>samples: 10000; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
ns

 (8.04  - 8.53 ]  ██████████████████████████████▏7673
 (8.53  - 9.02 ]  ▌109
 (9.02  - 9.51 ]  ▏3
 (9.51  - 10.01]   0
 (10.01 - 10.5 ]   0
 (10.5  - 10.99]  █████▋1431
 (10.99 - 11.48]  ██▌624
 (11.48 - 11.97]  ▍70
 (11.97 - 12.46]  ▎38
 (12.46 - 12.95]  ▏4
 (12.95 - 13.44]  ▏1
 (13.44 - 13.93]  ▏2
 (13.93 - 14.42]  ▏7
 (14.42 - 14.92]  ▏22
 (14.92 - 21.88]  ▏16

                  Counts

min: 8.041 ns (0.00% GC); mean: 8.812 ns (0.00% GC); median: 8.166 ns (0.00% GC); max: 21.875 ns (0.00% GC).
</code></pre></div>
<p dir="auto">That benchmark does not have a very interesting distribution, but it's not hard to find more interesting cases.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark 5 ∈ v setup=(v = sort(rand(1:10000, 10000)))"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">5</span> <span class="pl-k">∈</span> v setup<span class="pl-k">=</span>(v <span class="pl-k">=</span> <span class="pl-c1">sort</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>)))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="samples: 3110; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
ns

 (0.0    - 280.0 ]  ██████████████████████████████ 1964
 (280.0  - 570.0 ]   0
 (570.0  - 850.0 ]   0
 (850.0  - 1130.0]   0
 (1130.0 - 1410.0]   0
 (1410.0 - 1690.0]   0
 (1690.0 - 1970.0]   0
 (1970.0 - 2250.0]   0
 (2250.0 - 2540.0]   0
 (2540.0 - 2820.0]   0
 (2820.0 - 3100.0]   0
 (3100.0 - 3380.0]  █████████████████1105
 (3380.0 - 3660.0]  ▊41

                  Counts

min: 2.500 ns (0.00% GC); mean: 1.181 μs (0.00% GC); median: 5.334 ns (0.00% GC); max: 3.663 μs (0.00% GC)."><pre class="notranslate"><code>samples: 3110; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
ns

 (0.0    - 280.0 ]  ██████████████████████████████ 1964
 (280.0  - 570.0 ]   0
 (570.0  - 850.0 ]   0
 (850.0  - 1130.0]   0
 (1130.0 - 1410.0]   0
 (1410.0 - 1690.0]   0
 (1690.0 - 1970.0]   0
 (1970.0 - 2250.0]   0
 (2250.0 - 2540.0]   0
 (2540.0 - 2820.0]   0
 (2820.0 - 3100.0]   0
 (3100.0 - 3380.0]  █████████████████1105
 (3380.0 - 3660.0]  ▊41

                  Counts

min: 2.500 ns (0.00% GC); mean: 1.181 μs (0.00% GC); median: 5.334 ns (0.00% GC); max: 3.663 μs (0.00% GC).
</code></pre></div>
<p dir="auto">Here, we see a bimodal distribution; in the case <code>5</code> is indeed in the vector, we find it very quickly, in the 0-1000 ns range (thanks to <code>sort</code> which places it at the front). In the case 5 is not present, we need to check every entry to be sure, and we end up in the 3000-4000 ns range.</p>
<p dir="auto">Without the <code>sort</code>, we end up with more of a uniform distribution:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@benchmark 5 ∈ v setup=(v = rand(1:10000, 10000))"><pre><span class="pl-c1">@benchmark</span> <span class="pl-c1">5</span> <span class="pl-k">∈</span> v setup<span class="pl-k">=</span>(v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10000</span>, <span class="pl-c1">10000</span>))</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="samples: 2393; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
ns

 (0.0    - 310.0 ]  ███████▏214
 (310.0  - 610.0 ]  ██████▍191
 (610.0  - 910.0 ]  █████▊173
 (910.0  - 1220.0]  █████▊174
 (1220.0 - 1520.0]  █████▏155
 (1520.0 - 1830.0]  ████▍133
 (1830.0 - 2130.0]  ████119
 (2130.0 - 2430.0]  ███▍100
 (2430.0 - 2740.0]  ██▉86
 (2740.0 - 3040.0]  ███▍102
 (3040.0 - 3350.0]  ██████████████████████████████ 912
 (3350.0 - 3650.0]  █30
 (3650.0 - 5870.0]  ▎4

                  Counts

min: 2.334 ns (0.00% GC); mean: 2.037 μs (0.00% GC); median: 2.236 μs (0.00% GC); max: 5.869 μs (0.00% GC)."><pre class="notranslate"><code>samples: 2393; evals/sample: 1000; memory estimate: 0 bytes; allocs estimate: 0
ns

 (0.0    - 310.0 ]  ███████▏214
 (310.0  - 610.0 ]  ██████▍191
 (610.0  - 910.0 ]  █████▊173
 (910.0  - 1220.0]  █████▊174
 (1220.0 - 1520.0]  █████▏155
 (1520.0 - 1830.0]  ████▍133
 (1830.0 - 2130.0]  ████119
 (2130.0 - 2430.0]  ███▍100
 (2430.0 - 2740.0]  ██▉86
 (2740.0 - 3040.0]  ███▍102
 (3040.0 - 3350.0]  ██████████████████████████████ 912
 (3350.0 - 3650.0]  █30
 (3650.0 - 5870.0]  ▎4

                  Counts

min: 2.334 ns (0.00% GC); mean: 2.037 μs (0.00% GC); median: 2.236 μs (0.00% GC); max: 5.869 μs (0.00% GC).
</code></pre></div>
<p dir="auto">This function gives a somewhat more Gaussian distribution of times, kindly supplied by Mason Protter:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f() = sum((sin(i) for i in 1:round(Int, 1000 + 100*randn())))

@benchmark f()"><pre><span class="pl-en">f</span>() <span class="pl-k">=</span> <span class="pl-c1">sum</span>((<span class="pl-c1">sin</span>(i) <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">round</span>(Int, <span class="pl-c1">1000</span> <span class="pl-k">+</span> <span class="pl-c1">100</span><span class="pl-k">*</span><span class="pl-c1">randn</span>())))

<span class="pl-c1">@benchmark</span> <span class="pl-c1">f</span>()</pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="samples: 10000; evals/sample: 3; memory estimate: 0 bytes; allocs estimate: 0
ns

 (7030.0  - 7480.0 ]  ▏11
 (7480.0  - 7930.0 ]  █▍128
 (7930.0  - 8380.0 ]  ████████▏788
 (8380.0  - 8830.0 ]  █████████████████████▏2044
 (8830.0  - 9280.0 ]  ██████████████████████████████ 2916
 (9280.0  - 9730.0 ]  ███████████████████████▉2309
 (9730.0  - 10180.0]  ████████████▎1182
 (10180.0 - 10630.0]  ████▎413
 (10630.0 - 11080.0]  █▌140
 (11080.0 - 11530.0]  ▌44
 (11530.0 - 11980.0]  ▏6
 (11980.0 - 12430.0]  ▏3
 (12430.0 - 12880.0]   0
 (12880.0 - 13330.0]  ▏5
 (13330.0 - 18330.0]  ▏11

                  Counts

min: 7.028 μs (0.00% GC); mean: 9.184 μs (0.00% GC); median: 9.153 μs (0.00% GC); max: 18.333 μs (0.00% GC)."><pre class="notranslate"><code>samples: 10000; evals/sample: 3; memory estimate: 0 bytes; allocs estimate: 0
ns

 (7030.0  - 7480.0 ]  ▏11
 (7480.0  - 7930.0 ]  █▍128
 (7930.0  - 8380.0 ]  ████████▏788
 (8380.0  - 8830.0 ]  █████████████████████▏2044
 (8830.0  - 9280.0 ]  ██████████████████████████████ 2916
 (9280.0  - 9730.0 ]  ███████████████████████▉2309
 (9730.0  - 10180.0]  ████████████▎1182
 (10180.0 - 10630.0]  ████▎413
 (10630.0 - 11080.0]  █▌140
 (11080.0 - 11530.0]  ▌44
 (11530.0 - 11980.0]  ▏6
 (11980.0 - 12430.0]  ▏3
 (12430.0 - 12880.0]   0
 (12880.0 - 13330.0]  ▏5
 (13330.0 - 18330.0]  ▏11

                  Counts

min: 7.028 μs (0.00% GC); mean: 9.184 μs (0.00% GC); median: 9.153 μs (0.00% GC); max: 18.333 μs (0.00% GC).
</code></pre></div>
<p dir="auto">See also <a href="https://tratt.net/laurie/blog/entries/minimum_times_tend_to_mislead_when_benchmarking.html" rel="nofollow">https://tratt.net/laurie/blog/entries/minimum_times_tend_to_mislead_when_benchmarking.html</a> for another example of where looking at the whole histogram can be useful in benchmarking.</p>
<hr>
<p dir="auto"><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl">Literate.jl</a>.</em></p>
</article></div>