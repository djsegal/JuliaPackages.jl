<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-actuarialscience----v011" class="anchor" aria-hidden="true" href="#actuarialscience----v011"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ActuarialScience -  v0.1.1</h1>
<h2><a id="user-content-a-new-actuarial-modeling-library" class="anchor" aria-hidden="true" href="#a-new-actuarial-modeling-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A new actuarial modeling library</h2>
<h4><a id="user-content-code-review---" class="anchor" aria-hidden="true" href="#code-review---"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Code Review: <a href="https://travis-ci.org/alecloudenback/ActuarialScience.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/94ec60ce2b64407fb5b6acd7c98757540fc4c604/68747470733a2f2f7472617669732d63692e6f72672f616c65636c6f7564656e6261636b2f41637475617269616c536369656e63652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/alecloudenback/ActuarialScience.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/alecloudenback/ActuarialScience.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4759694a99f0463c401beddc1ea7909f7c9d748c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616c65636c6f7564656e6261636b2f41637475617269616c536369656e63652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/alecloudenback/ActuarialScience.jl/badge.svg?branch=master" style="max-width:100%;"></a> <a href="http://codecov.io/github/alecloudenback/ActuarialScience.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0f5aa40aa9dbeef56891779f050c502bdb76e249/687474703a2f2f636f6465636f762e696f2f6769746875622f616c65636c6f7564656e6261636b2f41637475617269616c536369656e63652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/alecloudenback/ActuarialScience.jl/coverage.svg?branch=master" style="max-width:100%;"></a></h4>
<p>A library to bring actuarial science to Julia.</p>
<h2><a id="user-content-project-goals" class="anchor" aria-hidden="true" href="#project-goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Project Goals</h2>
<p>The goal is ultimately to build out a modeling package, capable of doing much more than simple commutations.</p>
<h2><a id="user-content-new-in-this-version" class="anchor" aria-hidden="true" href="#new-in-this-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>New in this version</h2>
<ul>
<li>Refine interest rate periods:
<ul>
<li>Period <code>0</code> now is meaningless, period <code>1</code> now refers to the time period <code>(0,1]</code></li>
</ul>
</li>
<li>Add ability to use serial correlation to interest rates (see interest rate section for example)</li>
<li>Add memory of functional interest rates
<ul>
<li>Prior calls to interest rates record the interst rate, so each call to a stochastic interest rate function don't generate an entirely new stream of interest rates, even if it's the same interest rate object</li>
</ul>
</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ActuarialScience
<span class="pl-k">using</span> Plots
<span class="pl-c1">plotlyjs</span>()
<span class="pl-k">using</span> Distributions</pre></div>
<h2><a id="user-content-mortality" class="anchor" aria-hidden="true" href="#mortality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mortality</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> ActuarialScience will have a number of mortality tables built into the package</span>
<span class="pl-c"><span class="pl-c">#</span> for now, there are two Social Security tables built in, maleMort and femaleMort</span>
<span class="pl-c"><span class="pl-c">#</span> e.g. femaleMort = femaleMort = [0.005728,0.000373,0.000241,...]</span>

<span class="pl-c"><span class="pl-c">#</span> to turn a vector into an interactable mortality table object, create a MortalityTable Object</span>
m <span class="pl-k">=</span> <span class="pl-c1">MortalityTable</span>(maleMort)
f <span class="pl-k">=</span> <span class="pl-c1">MortalityTable</span>(femaleMort)

t <span class="pl-k">=</span> <span class="pl-c1">MortalityTable</span>(maleMort)



<span class="pl-c"><span class="pl-c">#</span># Examples ##</span>

<span class="pl-c1">0.00699</span> <span class="pl-k">≈</span> <span class="pl-c1">qx</span>(t,<span class="pl-c1">0</span>)
<span class="pl-c1">0.000447</span> <span class="pl-k">≈</span> <span class="pl-c1">qx</span>(t,<span class="pl-c1">1</span>)
<span class="pl-c1">1000.0</span> <span class="pl-k">==</span> <span class="pl-c1">lx</span>(t,<span class="pl-c1">0</span>)  <span class="pl-c"><span class="pl-c">#</span> the convention is that lx is based on 1000 lives</span>
<span class="pl-c1">993.010</span> <span class="pl-k">≈</span> <span class="pl-c1">lx</span>(t,<span class="pl-c1">1</span>)
<span class="pl-c1">1000.0</span><span class="pl-k">-</span><span class="pl-c1">1000</span><span class="pl-k">*</span><span class="pl-c1">qx</span>(t,<span class="pl-c1">0</span>) <span class="pl-k">≈</span> <span class="pl-c1">lx</span>(t,<span class="pl-c1">1</span>)
<span class="pl-c1">992.5661245</span> <span class="pl-k">≈</span> <span class="pl-c1">lx</span>(t,<span class="pl-c1">2</span>)
<span class="pl-c1">120</span> <span class="pl-k">==</span> <span class="pl-c1">w</span>(t)
<span class="pl-c1">0</span> <span class="pl-k">==</span> <span class="pl-c1">dx</span>(t,<span class="pl-c1">150</span>)
<span class="pl-c1">6.99</span> <span class="pl-k">≈</span> <span class="pl-c1">dx</span>(t,<span class="pl-c1">0</span>)
<span class="pl-c1">76.8982069</span> <span class="pl-k">≈</span> <span class="pl-c1">ex</span>(t,<span class="pl-c1">0</span>)
<span class="pl-c1">tpx</span>(t,<span class="pl-c1">15</span>,<span class="pl-c1">3</span>) <span class="pl-k">&gt;=</span> <span class="pl-c1">tpx</span>(t,<span class="pl-c1">15</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">tqx</span>(t,<span class="pl-c1">16</span>,<span class="pl-c1">2</span>) <span class="pl-k">&gt;=</span> <span class="pl-c1">tqx</span>(t,<span class="pl-c1">15</span>,<span class="pl-c1">2</span>)
<span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> <span class="pl-c1">ex</span>(t,<span class="pl-c1">15</span>)
<span class="pl-c1">0.003664839851</span> <span class="pl-k">≈</span> <span class="pl-c1">tpx</span>(t,<span class="pl-c1">22</span>,<span class="pl-c1">80</span>)

<span class="pl-c"><span class="pl-c">#</span> also supports joint last survivor</span>
<span class="pl-c1">tqxy</span>(table, table, age_x, age_y,time), e<span class="pl-k">.</span>g.
<span class="pl-c1">tqxy</span>(t,t,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>) <span class="pl-k">≈</span> <span class="pl-c1">0.0000488601000</span>
tqx̅y̅(t,t,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>) <span class="pl-k">≈</span> <span class="pl-c1">0.0000488601000</span> <span class="pl-c"><span class="pl-c">#</span>overbar notation is an option</span></pre></div>
<h2><a id="user-content-interest" class="anchor" aria-hidden="true" href="#interest"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interest</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> ActuarialScience provides an easy way to specify interest rates:</span>

i <span class="pl-k">=</span> <span class="pl-c1">InterestRate</span>(<span class="pl-c1">.05</span>) <span class="pl-c"><span class="pl-c">#</span> you can pass interest rate a decimal value, a vector, or a function that returns a value </span>

<span class="pl-c"><span class="pl-c">#</span> ActuarialScience currently lets you use a basic stochastic interest rate form</span>

i2 <span class="pl-k">=</span> <span class="pl-c1">InterestRate</span>((x <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">.05</span>,<span class="pl-c1">.01</span>))))  <span class="pl-c"><span class="pl-c">#</span> anonymous function provides an easy way to add a stochastic interest rate</span>

<span class="pl-c"><span class="pl-c">#</span> Serial correlation is also allowed:</span>
i3 <span class="pl-k">=</span> <span class="pl-c1">InterestRate</span>((x <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">i</span>(i3,<span class="pl-k">-</span><span class="pl-c1">1</span>),<span class="pl-c1">0.01</span>))), <span class="pl-c1">.05</span>)
<span class="pl-c"><span class="pl-c">#</span> InterestRate(f,x...) where x is the first x... interest rates</span>
<span class="pl-c"><span class="pl-c">#</span> i(i3,-1) returns the prior period's interest rate</span>

<span class="pl-c"><span class="pl-c">#</span> Julia's power as a language comes in really handy here!</span></pre></div>
<h2><a id="user-content-modeling" class="anchor" aria-hidden="true" href="#modeling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Modeling</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># the assumptions are joined with a "LifeInsurance" Object</span>
insM <span class="pl-k">=</span> <span class="pl-c1">LifeInsurance</span>(m,i2)
insF <span class="pl-k">=</span> <span class="pl-c1">LifeInsurance</span>(f,i2)

<span class="pl-c"><span class="pl-c">#</span># from there, you can calculate a number of actuarial commutations:</span>

ins <span class="pl-k">=</span> <span class="pl-c1">LifeInsurance</span>(t,i)
<span class="pl-c"><span class="pl-c">#</span> Ax(ins,0) ≈ 0.04223728223</span>

<span class="pl-c"><span class="pl-c">#</span> Axn(ins,26,1) ≈ 0.001299047619</span>
<span class="pl-c"><span class="pl-c">#</span> Ax(ins,26) ≈ 0.1082172434</span>
<span class="pl-c"><span class="pl-c">#</span> äx(ins,26) = 18.727437887738578 # Julia lets you use unicode characters, so you can use the a-dot-dot as the actual function</span>
<span class="pl-c"><span class="pl-c">#</span> äx(ins,26) = 18.727437887738578 # many code editors make the unicode characters really easy, but helper functions provide compatibility</span></pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> calculating the net premium for a whole life policy for males and females</span>
<span class="pl-c"><span class="pl-c">#</span> using a random interest rate on</span>


<span class="pl-c1">plot</span>([<span class="pl-c1">map</span>((x<span class="pl-k">-&gt;</span><span class="pl-c1">1000000</span><span class="pl-k">*</span><span class="pl-c1">Ax</span>(insM,x)<span class="pl-k">/</span>ä<span class="pl-c1">x</span>(insM,x)),<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">100</span>),<span class="pl-c1">map</span>((x<span class="pl-k">-&gt;</span><span class="pl-c1">1000000</span><span class="pl-k">*</span><span class="pl-c1">Ax</span>(insF,x)<span class="pl-k">/</span>ä<span class="pl-c1">x</span>(insF,x)),<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">100</span>)],xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Age<span class="pl-pds">"</span></span>,ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Yearly Cost<span class="pl-pds">"</span></span>,yscale <span class="pl-k">=</span> <span class="pl-c1">:log10</span>)</pre></div>
<h4><a id="user-content-the-annual-net-premium-for-a-whole-life-policy-by-age-with-a-random-discount-rate" class="anchor" aria-hidden="true" href="#the-annual-net-premium-for-a-whole-life-policy-by-age-with-a-random-discount-rate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The annual net premium for a whole life policy, by age, with a random discount rate.</h4>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d54e79a79358df7db988e9872be76e72187c8f02/687474703a2f2f692e696d6775722e636f6d2f55626a725763692e706e67"><img src="https://camo.githubusercontent.com/d54e79a79358df7db988e9872be76e72187c8f02/687474703a2f2f692e696d6775722e636f6d2f55626a725763692e706e67" alt="plot of insurance premiums" data-canonical-src="http://i.imgur.com/UbjrWci.png" style="max-width:100%;"></a></p>
<p><em>This is different than what you'd actually pay for a policy, which is called a "gross premium".</em></p>
<h2><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Roadmap</h2>
<ul>
<li>Continue building out basic life and annuity functions</li>
<li>Implement lapses</li>
<li>Add reserves</li>
<li>Docs</li>
<li>More robust tests</li>
<li>More built-in mortality tables</li>
<li>TBD</li>
</ul>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>Sources for help with the commutation functions (since I have long since taken MLC)</p>
<ul>
<li><a href="https://www.soa.org/files/pdf/edu-2009-fall-ea-sn-com.pdf" rel="nofollow">https://www.soa.org/files/pdf/edu-2009-fall-ea-sn-com.pdf</a></li>
<li><a href="http://www.math.umd.edu/~evs/s470/BookChaps/Chp6.pdf" rel="nofollow">www.math.umd.edu/~evs/s470/BookChaps/Chp6.pdf</a></li>
<li><a href="http://www.macs.hw.ac.uk/~angus/papers/eas_offprints/commfunc.pdf" rel="nofollow">www.macs.hw.ac.uk/~angus/papers/eas_offprints/commfunc.pdf</a></li>
</ul>
<p>Shout out to a similar Python project, whose Readme I one day hope to live up to and provided inspiration, including some of the function syntax.</p>
<ul>
<li><a href="https://github.com/franciscogarate/pyliferisk">https://github.com/franciscogarate/pyliferisk</a></li>
</ul>
<h2><a id="user-content-disclaimer" class="anchor" aria-hidden="true" href="#disclaimer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Disclaimer</h2>
<p>I provide no warranty or guarantees. This is an open source project and I encourage you to submit feedback or pull requests. It's my first foray into the promising language of Juilia, so I encourage feedback about the package desgin and code architecture.</p>
</article></div>