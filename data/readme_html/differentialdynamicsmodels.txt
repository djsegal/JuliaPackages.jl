<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-differentialdynamicsmodelsjl" class="anchor" aria-hidden="true" href="#differentialdynamicsmodelsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DifferentialDynamicsModels.jl</h1>
<p><a href="https://travis-ci.org/schmrlng/DifferentialDynamicsModels.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4c1dbfb97b50791b98d89599218d11a100ef60beb6f39419f7d1b71b6ef1d87b/68747470733a2f2f7472617669732d63692e6f72672f7363686d726c6e672f446966666572656e7469616c44796e616d6963734d6f64656c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/schmrlng/DifferentialDynamicsModels.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/schmrlng/differentialdynamicsmodels-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cf462809a44d8005abd1e9a32e542213cefd5563c8f307c297b2f44d00cf6ff5/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f707076783767386370743034667576793f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ppvx7g8cpt04fuvy?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/schmrlng/DifferentialDynamicsModels.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/3384a6f6e813a5e0347803e661ae543e36ba12ef0c4bfca932001d5293490a3a/687474703a2f2f636f6465636f762e696f2f6769746875622f7363686d726c6e672f446966666572656e7469616c44796e616d6963734d6f64656c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/schmrlng/DifferentialDynamicsModels.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Originally written to support <a href="https://github.com/schmrlng/MotionPlanning.jl">MotionPlanning.jl</a>, this package contains a core set of abstractions for working with dynamical systems of the form <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d1685259db1824bd18857ee7e4eb8cfe93bd5a7fed34d65bf14020ed5a7e6d0f/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e65253230253543646f7425374278253744253238742532392532302533442532306625323878253238742532392532432532307525323874253239253239"><img src="https://camo.githubusercontent.com/d1685259db1824bd18857ee7e4eb8cfe93bd5a7fed34d65bf14020ed5a7e6d0f/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e65253230253543646f7425374278253744253238742532392532302533442532306625323878253238742532392532432532307525323874253239253239" alt="differential dynamics model" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdot%7Bx%7D%28t%29%20%3D%20f%28x%28t%29%2C%20u%28t%29%29" style="max-width:100%;"></a>, where <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/04cce286e8c9ac2de0cefb4a54f9222dc64a0032f644ea489af4dc6fe531bab2/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323078"><img src="https://camo.githubusercontent.com/04cce286e8c9ac2de0cefb4a54f9222dc64a0032f644ea489af4dc6fe531bab2/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323078" alt="x" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20x" style="max-width:100%;"></a> and <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4c42b6ba2df685f739fdbf8e323776919f94965871ed422932ba80195e101c66/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323075"><img src="https://camo.githubusercontent.com/4c42b6ba2df685f739fdbf8e323776919f94965871ed422932ba80195e101c66/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323075" alt="u" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20u" style="max-width:100%;"></a> represent the state and control input of the system, respectively. This package is not intended to be a substitute for more comprehensive/domain-specific packages (e.g., <a href="https://github.com/JuliaDynamics/DynamicalSystems.jl">DynamicalSystems.jl</a>, <a href="https://github.com/JuliaRobotics/RigidBodyDynamics.jl">RigidBodyDynamics.jl</a>, or <a href="https://github.com/JuliaDiffEq/DifferentialEquations.jl">DifferentialEquations.jl</a>); instead it aims to be as lightweight as possible while offering an extensible framework for operations on state/control trajectories relevant to robot trajectory planning.</p>
<p>DifferentialDynamicsModels.jl exports the following types:</p>
<ul>
<li><code>DifferentialDynamics</code> — abstract type representing the <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ff793767935b4b2a034c99d1fa5481ac26d71e5643aa1656e8a2278111e8e3bf/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066"><img src="https://camo.githubusercontent.com/ff793767935b4b2a034c99d1fa5481ac26d71e5643aa1656e8a2278111e8e3bf/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066" alt="f" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20f" style="max-width:100%;"></a> in <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ef2446ff20c4cd83e9ac3db7c592541b9e49947a14513ca38891d76d16297763/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e65253230253543646f7425374278253744253230253344253230662532387825324375253239"><img src="https://camo.githubusercontent.com/ef2446ff20c4cd83e9ac3db7c592541b9e49947a14513ca38891d76d16297763/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e65253230253543646f7425374278253744253230253344253230662532387825324375253239" alt="differential dynamics model" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdot%7Bx%7D%20%3D%20f%28x%2Cu%29" style="max-width:100%;"></a>. Instances of concrete subtypes should be <a href="https://docs.julialang.org/en/latest/manual/methods/#Function-like-objects-1" rel="nofollow">callable</a>, i.e., implement <code>(::MyDynamics)(x, u)</code>. Examples include:
<ul>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L150"><code>SingleIntegratorDynamics{N}</code></a> defined in this package. Implements the dynamics <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/e59320a34863ecb7841044dda94a359c465b217446a9928fdb79583511a2c686/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066253238782532432532307525323925323025334425323075"><img src="https://camo.githubusercontent.com/e59320a34863ecb7841044dda94a359c465b217446a9928fdb79583511a2c686/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066253238782532432532307525323925323025334425323075" alt="single integrator dynamics" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20f%28x%2C%20u%29%20%3D%20u" style="max-width:100%;"></a>. The type parameter <code>N</code> denotes the state and control dimension.</li>
<li><a href="https://github.com/schmrlng/LinearDynamicsModels.jl/blob/4f63c2be8c57b59a5c46f243ed0ad47213eac4de/src/LinearDynamicsModels.jl#L19"><code>LinearDynamics{Dx,Du}</code></a> defined in <a href="https://github.com/schmrlng/LinearDynamicsModels.jl">LinearDynamicsModels.jl</a>. Implements the dynamics <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/2a31a4031df2518d755021cd3df094ce5fbf3b5b31a27c2aba6ceb1bc234687a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066253238782532432532307525323925323025334425323041782532302b25323042752532302b25323063"><img src="https://camo.githubusercontent.com/2a31a4031df2518d755021cd3df094ce5fbf3b5b31a27c2aba6ceb1bc234687a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323066253238782532432532307525323925323025334425323041782532302b25323042752532302b25323063" alt="linear dynamics" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20f%28x%2C%20u%29%20%3D%20Ax%20+%20Bu%20+%20c" style="max-width:100%;"></a>. The type parameters <code>Dx</code> and <code>Du</code> denote the state and control dimension respectively.</li>
<li><a href="https://github.com/schmrlng/SimpleCarModels.jl/blob/8d9a97467b7b3c01733c71b46e829d0b25e6acb6/src/models.jl#L9"><code>SimpleCarDynamics{Dv,Dκ}</code></a> defined in <a href="https://github.com/schmrlng/SimpleCarModels.jl">SimpleCarModels.jl</a>. Implements unicycle dynamics extended by <code>Dv</code> and <code>Dκ</code> integrators in the speed and curvature controls respectively.</li>
<li><a href="https://github.com/StanfordASL/Pigeon.jl/blob/48c479a801b0bc6bf11b59d312922e228d9e3481/src/vehicle_dynamics.jl#L90"><code>BicycleModel</code></a> defined in <a href="https://github.com/StanfordASL/Pigeon.jl">Pigeon.jl</a>. Implements a single-track (i.e., "bicycle") vehicle model for use in QP-based model predictive control.</li>
</ul>
</li>
<li><code>ControlInterval</code> — abstract type representing a control function defined over a time interval. Concrete subtypes include:
<ul>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L67"><code>StepControl</code></a> (a.k.a. <code>ZeroOrderHoldControl</code>) — constant control input over a time interval.</li>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L86"><code>RampControl</code></a> (a.k.a. <code>FirstOrderHoldControl</code>) — linear interpolation between two control inputs over a time interval.</li>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L107"><code>BVPControl</code></a> — a wrapper around state/control trajectory functions produced, e.g., by an external boundary value problem solver.</li>
</ul>
</li>
<li><code>CostFunctional</code> - abstract type representing an objective for optimal control. Concrete subtypes include:
<ul>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L25"><code>Time</code></a> — trajectory duration <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/5a432104fcf6476cd6c9bee50460e2bf9677f4f632e5afd7255178307b8c90cd/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323054"><img src="https://camo.githubusercontent.com/5a432104fcf6476cd6c9bee50460e2bf9677f4f632e5afd7255178307b8c90cd/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323054" alt="T" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20T" style="max-width:100%;"></a>.</li>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L26"><code>TimePlusQuadraticControl</code></a> — mixed time/control effort penalty <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/41e585e1c0fc8a45c018cc801a2865f5a1a57dea99e8bf256c373d4d9227d3c4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f253543696e6c696e65253230253543696e745f3025354554253230253238312532302b2532307525323874253239253545542532305225323075253238742532392532392532302535436d6174686f702537422537442535432532312535436d617468726d2537426425374474"><img src="https://camo.githubusercontent.com/41e585e1c0fc8a45c018cc801a2865f5a1a57dea99e8bf256c373d4d9227d3c4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f253543696e6c696e65253230253543696e745f3025354554253230253238312532302b2532307525323874253239253545542532305225323075253238742532392532392532302535436d6174686f702537422537442535432532312535436d617468726d2537426425374474" alt="time plus quadratic control" data-canonical-src="https://latex.codecogs.com/svg.latex?%5Cinline%20%5Cint_0%5ET%20%281%20+%20u%28t%29%5ET%20R%20u%28t%29%29%20%5Cmathop%7B%7D%5C%21%5Cmathrm%7Bd%7Dt" style="max-width:100%;"></a>.</li>
</ul>
</li>
<li><code>SteeringBVP{D&lt;:DifferentialDynamics,C&lt;:CostFunctional,SC&lt;:SteeringConstraints,SD&lt;:SteeringCache}</code> — concrete type that serves as a container that both defines a two-point boundary value problem (i.e., "steering problem" connecting two states in robot motion planning parlance) and provides the means to solve it. Instances should be callable, i.e., users should define <code>(::SteeringBVP{MyDynamics,MyCostFunctional,MySteeringConstraints,MySteeringCache})</code> returning a named tuple <code>(cost=..., controls=...)</code>, leveraging Julia's multiple-dispatch on the <code>SteeringBVP</code> type parameters to select the right implementation. Examples include:
<ul>
<li><a href="https://github.com/schmrlng/DifferentialDynamicsModels.jl/blob/5111999292477f159eb444a2908ad85287185256/src/DifferentialDynamicsModels.jl#L160"><code>GeometricSteering</code></a> — <code>SingleIntegratorDynamics</code> with a <code>Time</code> optimization objective and <code>BoundedControlNorm</code> control constraint (equivalent to optimizing Euclidean arc length).</li>
<li><a href="https://github.com/schmrlng/LinearDynamicsModels.jl/blob/master/src/LinearDynamicsModels.jl#L63"><code>LinearQuadraticSteering</code></a> — <code>LinearDynamics</code> with a <code>TimePlusQuadraticControl</code> optimization objective and no control constraints.</li>
<li><a href="https://github.com/schmrlng/SimpleCarModels.jl"><code>DubinsSteering</code> and <code>ReedsSheppSteering</code></a> — minimum arc length <a href="http://planning.cs.uiuc.edu/node821.html" rel="nofollow">Dubins</a> and <a href="http://planning.cs.uiuc.edu/node822.html" rel="nofollow">Reeds-Shepp</a> steering for a simple car with minimum turning radius.</li>
</ul>
</li>
</ul>
<p>DifferentialDynamicsModels.jl defines the following functions that can and should be extended by dependent packages if applicable:</p>
<ul>
<li><code>state_dim(::DifferentialDynamics)</code> — dimension of the state <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/04cce286e8c9ac2de0cefb4a54f9222dc64a0032f644ea489af4dc6fe531bab2/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323078"><img src="https://camo.githubusercontent.com/04cce286e8c9ac2de0cefb4a54f9222dc64a0032f644ea489af4dc6fe531bab2/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323078" alt="x" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20x" style="max-width:100%;"></a>.</li>
<li><code>control_dim(::DifferentialDynamics)</code> — dimension of the control input <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/4c42b6ba2df685f739fdbf8e323776919f94965871ed422932ba80195e101c66/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323075"><img src="https://camo.githubusercontent.com/4c42b6ba2df685f739fdbf8e323776919f94965871ed422932ba80195e101c66/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f253543696e6c696e6525323075" alt="u" data-canonical-src="https://latex.codecogs.com/png.latex?%5Cinline%20u" style="max-width:100%;"></a>.</li>
<li><code>duration(controls)</code> — length of the time interval over which <code>controls</code> is defined; <code>controls</code> may be a single <code>ControlInterval</code> or an iterable container (e.g., a <code>Vector</code>) of <code>ControlInterval</code>s.</li>
<li><code>propagate(f::DifferentialDynamics, x::State, controls, ts)</code> — propagates the dynamics ODE <code>f</code> starting from <code>x</code> to return a state or sequence of states at times <code>ts</code>. <code>controls</code> may be a single <code>ControlInterval</code> or an iterable of <code>ControlInterval</code>s. <code>ts</code> may be a single <code>Number</code>, an iterable of <code>Number</code>s, or not be included as an argument at all, in which case it defaults to <code>duration(controls)</code>.</li>
<li><code>waypoints(f::DifferentialDynamics, x::State, controls, dt_or_N)</code> — similar to <code>propagate</code> but returns equally spaced states (in time) along the controlled trajectory. <code>dt_or_N</code> may be an <code>AbstractFloat</code> or an <code>Int</code>, corresponding to a desired spacing <code>dt</code> or a desired total number of waypoints <code>N</code>.</li>
<li><code>instantaneous_control(controls, ts)</code> — similar to <code>propagate</code> but returns the control input instead of the state at <code>ts</code>.</li>
</ul>
<p>Performance-oriented users may note that the last three functions allocate and return <code>Vector</code>s in the case that <code>ts</code> is an iterable; this package also defines the <code>Propagate</code> and <code>InstantaneousControl</code> <a href="https://docs.julialang.org/en/latest/manual/interfaces/#man-interface-iteration-1" rel="nofollow">iterators</a> constructed in the same ways that their function counterparts are called (<code>waypoints_itr</code> also exists, and returns a <code>Propagate</code> iterator).</p>
</article></div>