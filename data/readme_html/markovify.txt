<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-markovify" class="anchor" aria-hidden="true" href="#markovify"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Markovify</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/2ff6a06f2f6e08b17783133ca7ebc23ce1f8ac4415eee8e835647b57048a8f0d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667"><img src="https://camo.githubusercontent.com/2ff6a06f2f6e08b17783133ca7ebc23ce1f8ac4415eee8e835647b57048a8f0d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667" alt="" data-canonical-src="https://img.shields.io/github/license/mashape/apistatus.svg" style="max-width: 100%;"></a>
<a href="https://eugleo.github.io/Markovify.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/2ac9f11cf1e45276acf568fc3bd4ff2a0d12f5130225dc37098df68099942731/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d627269676874677265656e2e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-brightgreen.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Simple text generation in Julia.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install this package by using the Julia package manager. From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and run:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add Markovify"><pre class="notranslate"><code>pkg&gt; add Markovify
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage examples</h2>
<p dir="auto">All functions in this package are documented. You can view the documentation of the public symbols <a href="https://eugleo.github.io/Markovify.jl/public/" rel="nofollow">here</a>.</p>
<p dir="auto">Let's say we want to build a simplistic <a href="https://cs.wikipedia.org/wiki/Lorem_ipsum" rel="nofollow">Lorem ipsum</a> generator. We can use Markovify for that; the whole process can be split into three main steps:</p>
<ol dir="auto">
<li>Loading the training texts from a file (or multiple files) and splitting it into tokens.</li>
<li>Training the model on the tokens.</li>
<li>Walking through the model and generating random texts.</li>
</ol>
<p dir="auto">Let's assume we have our training files in the directory <code>files</code>, named <code>src1</code>, <code>src2</code> and <code>src3</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Markovify
using Tokenizer

# For each supplied file, make a model, and return an iterator of all such models
# This function actually performs both step 1 and step 2
function loadfiles(filenames)
    return (
        open(filename) do file
            text = read(file, String)
            # Tokenize on words (we could also tokenize on letters/lines etc.)
            # That means: split the text to sentences and then those sentences to words
            tokens = tokenize(text; on=words)
            return Model(tokens; order=1)
        end
        for filename in filenames
    )
end

# Print n sentences generated with the model
# This function performs step 3
function gensentences(model, n)
    sentences = []
    # Stop only after n sentences were generated
    # and passed through the length test
    while length(sentences) &lt; n
        seq = walk(model)
        # Add the sentence to the array iff its length is ok
        if length(seq) &gt; 5 &amp;&amp; length(seq) &lt; 15
            push!(sentences, join(seq, &quot; &quot;))
        end
    end
end

# Now we just put them together
FILENAMES = [&quot;files/src1.txt&quot;, &quot;files/src2.txt&quot;, &quot;files/src3.txt&quot;]
MODEL = combine(loadfiles(FILENAMES)...)
gensentences(MODEL, 4)"><pre><span class="pl-k">using</span> Markovify
<span class="pl-k">using</span> Tokenizer

<span class="pl-c"><span class="pl-c">#</span> For each supplied file, make a model, and return an iterator of all such models</span>
<span class="pl-c"><span class="pl-c">#</span> This function actually performs both step 1 and step 2</span>
<span class="pl-k">function</span> <span class="pl-en">loadfiles</span>(filenames)
    <span class="pl-k">return</span> (
        <span class="pl-c1">open</span>(filename) <span class="pl-k">do</span> file
            text <span class="pl-k">=</span> <span class="pl-c1">read</span>(file, String)
            <span class="pl-c"><span class="pl-c">#</span> Tokenize on words (we could also tokenize on letters/lines etc.)</span>
            <span class="pl-c"><span class="pl-c">#</span> That means: split the text to sentences and then those sentences to words</span>
            tokens <span class="pl-k">=</span> <span class="pl-c1">tokenize</span>(text; on<span class="pl-k">=</span>words)
            <span class="pl-k">return</span> <span class="pl-c1">Model</span>(tokens; order<span class="pl-k">=</span><span class="pl-c1">1</span>)
        <span class="pl-k">end</span>
        <span class="pl-k">for</span> filename <span class="pl-k">in</span> filenames
    )
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Print n sentences generated with the model</span>
<span class="pl-c"><span class="pl-c">#</span> This function performs step 3</span>
<span class="pl-k">function</span> <span class="pl-en">gensentences</span>(model, n)
    sentences <span class="pl-k">=</span> []
    <span class="pl-c"><span class="pl-c">#</span> Stop only after n sentences were generated</span>
    <span class="pl-c"><span class="pl-c">#</span> and passed through the length test</span>
    <span class="pl-k">while</span> <span class="pl-c1">length</span>(sentences) <span class="pl-k">&lt;</span> n
        seq <span class="pl-k">=</span> <span class="pl-c1">walk</span>(model)
        <span class="pl-c"><span class="pl-c">#</span> Add the sentence to the array iff its length is ok</span>
        <span class="pl-k">if</span> <span class="pl-c1">length</span>(seq) <span class="pl-k">&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-c1">length</span>(seq) <span class="pl-k">&lt;</span> <span class="pl-c1">15</span>
            <span class="pl-c1">push!</span>(sentences, <span class="pl-c1">join</span>(seq, <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>))
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Now we just put them together</span>
FILENAMES <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>files/src1.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>files/src2.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>files/src3.txt<span class="pl-pds">"</span></span>]
MODEL <span class="pl-k">=</span> <span class="pl-c1">combine</span>(<span class="pl-c1">loadfiles</span>(FILENAMES)<span class="pl-k">...</span>)
<span class="pl-c1">gensentences</span>(MODEL, <span class="pl-c1">4</span>)</pre></div>
<p dir="auto">And the output is 4 lines of random sentences, similar to this example generated from three random French texts on <a href="http://www.gutenberg.org" rel="nofollow">Project Gutenberg</a>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Mais elle exposa froidement le pria quelquun à dîner.
Les animaux guérissent quelquefois, la duchesse et les mères.
cest une fortune en souriant ses rivaux.
Mais la spécialité des hommes vraiment forts, évitait de Paris."><pre class="notranslate"><code>Mais elle exposa froidement le pria quelquun à dîner.
Les animaux guérissent quelquefois, la duchesse et les mères.
cest une fortune en souriant ses rivaux.
Mais la spécialité des hommes vraiment forts, évitait de Paris.
</code></pre></div>
<p dir="auto">The most complicated step is 1: tokenizing. The constructor <code>Model</code> expects an array of arrays of tokens, so keep that in mind. There is also another method of <code>Model</code>, which can build a full model object from just the nodes dictionary (read more on nodes in the docs) — you can thus save the nodes of an existing model to a JSON file, for example, and restore it later.</p>
</article></div>