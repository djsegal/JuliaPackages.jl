<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/perrutquist/TriangularIndices.jl/actions"><img src="https://github.com/perrutquist/TriangularIndices.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-triangularindicesjl" class="anchor" aria-hidden="true" href="#triangularindicesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TriangularIndices.jl</h1>
<p dir="auto">This small package is intended to help with iterating over the indices of triangular matrices. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TriangularIndices

z = zeros(Int, (3,3))
for (k, (i,j)) in enumerate(UpperTriangularIndices(z))
    z[i,j] = k
end"><pre><span class="pl-k">using</span> TriangularIndices

z <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, (<span class="pl-c1">3</span>,<span class="pl-c1">3</span>))
<span class="pl-k">for</span> (k, (i,j)) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">UpperTriangularIndices</span>(z))
    z[i,j] <span class="pl-k">=</span> k
<span class="pl-k">end</span></pre></div>
<p dir="auto">will result in</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z == [ 1  2  4
       0  3  5
       0  0  6 ]"><pre>z <span class="pl-k">==</span> [ <span class="pl-c1">1</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>
       <span class="pl-c1">0</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span>
       <span class="pl-c1">0</span>  <span class="pl-c1">0</span>  <span class="pl-c1">6</span> ]</pre></div>
<p dir="auto">Of course, the above code could just as easily have been written</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="z = zeros(Int, (3,3))
k = 1
for j in 1:size(z,1)
    for i in 1:j
        z[i,j] = k
        k += 1
    end
end"><pre>z <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, (<span class="pl-c1">3</span>,<span class="pl-c1">3</span>))
k <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(z,<span class="pl-c1">1</span>)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>j
        z[i,j] <span class="pl-k">=</span> k
        k <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">which would not require the use of TriangularIndices.jl, and which might even be faster for single-threaded code. However, <code>UpperTriangularIndices</code> objects support <code>length</code> as well as partitioning using <code>getindex</code>, which makes them
useful with macros that distribute the iterator over threads or processes, such as <code>@distributed</code> from <a href="https://docs.julialang.org/en/v1/manual/distributed-computing/" rel="nofollow">Distributed</a>, <code>@threads</code> from <a href="https://docs.julialang.org/en/v1/manual/multi-threading/" rel="nofollow">Threads</a>, or <code>@floop</code> from <a href="https://github.com/JuliaFolds/FLoops.jl">FLoops</a>.</p>
<p dir="auto">For reverse indexing, there is a fast specialization of <code>findfirst</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="findfirst(==((2,3)), UpperTriangularIndices(3)) # returns 5"><pre><span class="pl-c1">findfirst</span>(<span class="pl-k">==</span>((<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)), <span class="pl-c1">UpperTriangularIndices</span>(<span class="pl-c1">3</span>)) <span class="pl-c"><span class="pl-c">#</span> returns 5</span></pre></div>
<p dir="auto">Note: There's currently no corresponding implementation of <code>LowerTriangularIndices</code>. If somebody is interested in writing one, the linear-to-cartesian indexing operation could use <a href="https://discourse.julialang.org/t/iterating-over-elements-of-upper-triangular-matrix-but-cartesian-indices-are-needed/65498/3" rel="nofollow">this code</a>.</p>
</article></div>