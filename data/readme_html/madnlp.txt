<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="" class="anchor" aria-hidden="true" href="#"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><a target="_blank" rel="noopener noreferrer" href="logo-full.svg"><img src="logo-full.svg" alt="Logo" style="max-width: 100%;"></a></h2>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Coverage</strong></th>
<th align="center"><strong>DOI</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://madnlp.github.io/MadNLP.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="doc" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/MadNLP/MadNLP.jl/actions?query=workflow%3Abuild"><img src="https://github.com/MadNLP/MadNLP.jl/workflows/build/badge.svg?branch=dev%2Fgithub_actions" alt="build" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/MadNLP/MadNLP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b66c10484fc57d1d15a93cc70b394c4c5f3851fe6f6f8f8ecc1a479aaf90c4c6/68747470733a2f2f636f6465636f762e696f2f67682f4d61644e4c502f4d61644e4c502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4d42784832414175385a" alt="codecov" data-canonical-src="https://codecov.io/gh/MadNLP/MadNLP.jl/branch/master/graph/badge.svg?token=MBxH2AAu8Z" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://doi.org/10.5281/zenodo.5825776" rel="nofollow"><img src="https://camo.githubusercontent.com/657a6864854a3eaebdd120bfadfee0b74060a75c31741175d6de550144d07334/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e353832353737362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.5825776.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">MadNLP is a <a href="https://en.wikipedia.org/wiki/Nonlinear_programming" rel="nofollow">nonlinear programming</a> (NLP) solver, purely implemented in <a href="https://julialang.org/" rel="nofollow">Julia</a>. MadNLP implements a filter line-search algorithm, as that used in <a href="https://github.com/coin-or/Ipopt">Ipopt</a>. MadNLP seeks to streamline the development of modeling and algorithmic paradigms in order to exploit structures and to make efficient use of high-performance computers.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add MadNLP"><pre>pkg<span class="pl-k">&gt;</span> add MadNLP</pre></div>
<p dir="auto">Optionally, various extension packages can be installed together:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add MadNLPHSL, MadNLPPardiso, MadNLPMumps, MadNLPGPU, MadNLPGraph, MadNLPKrylov"><pre>pkg<span class="pl-k">&gt;</span> add MadNLPHSL, MadNLPPardiso, MadNLPMumps, MadNLPGPU, MadNLPGraph, MadNLPKrylov</pre></div>
<p dir="auto">These packages are stored in the <code>lib</code> subdirectory within the main MadNLP repository. Some extension packages may require additional dependencies or specific hardware. For the instructions for the build procedure, see the following links: <a href="https://github.com/MadNLP/MadNLP.jl/tree/master/lib/MadNLPHSL">MadNLPHSL</a>, <a href="https://github.com/MadNLP/MadNLP.jl/tree/master/lib/MadNLPHSL">MadNLPPardiso</a>, <a href="https://github.com/MadNLP/MadNLP.jl/tree/master/lib/MadNLPGPU">MadNLPGPU</a>.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<h3 dir="auto"><a id="user-content-interfaces" class="anchor" aria-hidden="true" href="#interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interfaces</h3>
<p dir="auto">MadNLP is interfaced with modeling packages:</p>
<ul dir="auto">
<li><a href="https://github.com/jump-dev/JuMP.jl">JuMP</a></li>
<li><a href="https://github.com/zavalab/Plasmo.jl">Plasmo</a></li>
<li><a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels</a>.
Users can pass various options to MadNLP also through the modeling packages. The interface-specific syntaxes are shown below. To see the list of MadNLP solver options, check the <a href="https://github.com/MadNLP/MadNLP/blob/master/OPTIONS.md">OPTIONS.md</a> file.</li>
</ul>
<h4 dir="auto"><a id="user-content-jump-interface" class="anchor" aria-hidden="true" href="#jump-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuMP interface</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, JuMP

model = Model(()-&gt;MadNLP.Optimizer(print_level=MadNLP.INFO, max_iter=100))
@variable(model, x, start = 0.0)
@variable(model, y, start = 0.0)
@NLobjective(model, Min, (1 - x)^2 + 100 * (y - x^2)^2)

optimize!(model)
"><pre><span class="pl-k">using</span> MadNLP, JuMP

model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(print_level<span class="pl-k">=</span>MadNLP<span class="pl-k">.</span>INFO, max_iter<span class="pl-k">=</span><span class="pl-c1">100</span>))
<span class="pl-c1">@variable</span>(model, x, start <span class="pl-k">=</span> <span class="pl-c1">0.0</span>)
<span class="pl-c1">@variable</span>(model, y, start <span class="pl-k">=</span> <span class="pl-c1">0.0</span>)
<span class="pl-c1">@NLobjective</span>(model, Min, (<span class="pl-c1">1</span> <span class="pl-k">-</span> x)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">100</span> <span class="pl-k">*</span> (y <span class="pl-k">-</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>)

<span class="pl-c1">optimize!</span>(model)
</pre></div>
<h4 dir="auto"><a id="user-content-nlpmodels-interface" class="anchor" aria-hidden="true" href="#nlpmodels-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NLPModels interface</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, CUTEst
model = CUTEstModel(&quot;PRIMALC1&quot;)
madnlp(model, print_level=MadNLP.WARN, max_wall_time=3600)"><pre><span class="pl-k">using</span> MadNLP, CUTEst
model <span class="pl-k">=</span> <span class="pl-c1">CUTEstModel</span>(<span class="pl-s"><span class="pl-pds">"</span>PRIMALC1<span class="pl-pds">"</span></span>)
<span class="pl-c1">madnlp</span>(model, print_level<span class="pl-k">=</span>MadNLP<span class="pl-k">.</span>WARN, max_wall_time<span class="pl-k">=</span><span class="pl-c1">3600</span>)</pre></div>
<h4 dir="auto"><a id="user-content-plasmo-interface-requires-extension-madnlpgraph" class="anchor" aria-hidden="true" href="#plasmo-interface-requires-extension-madnlpgraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Plasmo interface (requires extension <code>MadNLPGraph</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, MadNLPGraph, Plasmo

graph = OptiGraph()
@optinode(graph,n1)
@optinode(graph,n2)
@variable(n1,0 &lt;= x &lt;= 2)
@variable(n1,0 &lt;= y &lt;= 3)
@constraint(n1,x+y &lt;= 4)
@objective(n1,Min,x)
@variable(n2,x)
@NLnodeconstraint(n2,exp(x) &gt;= 2)
@linkconstraint(graph,n1[:x] == n2[:x])

MadNLP.optimize!(graph; print_level=MadNLP.DEBUG, max_iter=100)
"><pre><span class="pl-k">using</span> MadNLP, MadNLPGraph, Plasmo

graph <span class="pl-k">=</span> <span class="pl-c1">OptiGraph</span>()
<span class="pl-c1">@optinode</span>(graph,n1)
<span class="pl-c1">@optinode</span>(graph,n2)
<span class="pl-c1">@variable</span>(n1,<span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> x <span class="pl-k">&lt;=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">@variable</span>(n1,<span class="pl-c1">0</span> <span class="pl-k">&lt;=</span> y <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>)
<span class="pl-c1">@constraint</span>(n1,x<span class="pl-k">+</span>y <span class="pl-k">&lt;=</span> <span class="pl-c1">4</span>)
<span class="pl-c1">@objective</span>(n1,Min,x)
<span class="pl-c1">@variable</span>(n2,x)
<span class="pl-c1">@NLnodeconstraint</span>(n2,<span class="pl-c1">exp</span>(x) <span class="pl-k">&gt;=</span> <span class="pl-c1">2</span>)
<span class="pl-c1">@linkconstraint</span>(graph,n1[<span class="pl-c1">:x</span>] <span class="pl-k">==</span> n2[<span class="pl-c1">:x</span>])

MadNLP<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(graph; print_level<span class="pl-k">=</span>MadNLP<span class="pl-k">.</span>DEBUG, max_iter<span class="pl-k">=</span><span class="pl-c1">100</span>)
</pre></div>
<h3 dir="auto"><a id="user-content-linear-solvers" class="anchor" aria-hidden="true" href="#linear-solvers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Solvers</h3>
<p dir="auto">MadNLP is interfaced with non-Julia sparse/dense linear solvers:</p>
<ul dir="auto">
<li><a href="https://people.engr.tamu.edu/davis/suitesparse.html" rel="nofollow">Umfpack</a></li>
<li><a href="https://software.intel.com/content/www/us/en/develop/documentation/mkl-developer-reference-fortran/top/sparse-solver-routines/intel-mkl-pardiso-parallel-direct-sparse-solver-interface.html" rel="nofollow">MKL-Pardiso</a></li>
<li><a href="https://software.intel.com/content/www/us/en/develop/documentation/mkl-developer-reference-fortran/top/lapack-routines.html" rel="nofollow">MKL-Lapack</a></li>
<li><a href="http://www.hsl.rl.ac.uk/ipopt/" rel="nofollow">HSL solvers</a> (requires extension)</li>
<li><a href="https://www.pardiso-project.org/" rel="nofollow">Pardiso</a> (requires extension)</li>
<li><a href="http://mumps.enseeiht.fr/" rel="nofollow">Mumps</a>  (requires extension)</li>
<li><a href="https://docs.nvidia.com/cuda/cusolver/index.html" rel="nofollow">cuSOLVER</a> (requires extension)</li>
</ul>
<p dir="auto">Each linear solver in MadNLP is a Julia type, and the <code>linear_solver</code> option should be specified by the actual type. Note that the linear solvers are always exported to <code>Main</code>.</p>
<h4 dir="auto"><a id="user-content-built-in-solvers-umfpack-pardisomkl-lapackcpu" class="anchor" aria-hidden="true" href="#built-in-solvers-umfpack-pardisomkl-lapackcpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Built-in Solvers: Umfpack, PardisoMKL, LapackCPU</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, JuMP
# ...
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=UmfpackSolver)) # default
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=LapackCPUSolver))"><pre><span class="pl-k">using</span> MadNLP, JuMP
<span class="pl-c"><span class="pl-c">#</span> ...</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>UmfpackSolver)) <span class="pl-c"><span class="pl-c">#</span> default</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>LapackCPUSolver))</pre></div>
<h4 dir="auto"><a id="user-content-hsl-requires-extension-madnlphsl" class="anchor" aria-hidden="true" href="#hsl-requires-extension-madnlphsl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HSL (requires extension <code>MadNLPHSL</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, MadNLPHSL, JuMP
# ...
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=Ma27Solver))
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=Ma57Solver))
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=Ma77Solver))
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=Ma86Solver))
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=Ma97Solver))"><pre><span class="pl-k">using</span> MadNLP, MadNLPHSL, JuMP
<span class="pl-c"><span class="pl-c">#</span> ...</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>Ma27Solver))
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>Ma57Solver))
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>Ma77Solver))
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>Ma86Solver))
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>Ma97Solver))</pre></div>
<h4 dir="auto"><a id="user-content-mumps-requires-extension-madnlpmumps" class="anchor" aria-hidden="true" href="#mumps-requires-extension-madnlpmumps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mumps (requires extension <code>MadNLPMumps</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, MadNLPMumps, JuMP
# ...
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=MumpsSolver))"><pre><span class="pl-k">using</span> MadNLP, MadNLPMumps, JuMP
<span class="pl-c"><span class="pl-c">#</span> ...</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>MumpsSolver))</pre></div>
<h4 dir="auto"><a id="user-content-pardiso-requires-extension-madnlppardiso" class="anchor" aria-hidden="true" href="#pardiso-requires-extension-madnlppardiso"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pardiso (requires extension <code>MadNLPPardiso</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, MadNLPPardiso, JuMP
# ...
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=PardisoSolver))
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=PardisoMKLSolver))"><pre><span class="pl-k">using</span> MadNLP, MadNLPPardiso, JuMP
<span class="pl-c"><span class="pl-c">#</span> ...</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>PardisoSolver))
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>PardisoMKLSolver))</pre></div>
<h4 dir="auto"><a id="user-content-lapackgpu-requires-extension-madnlpgpu" class="anchor" aria-hidden="true" href="#lapackgpu-requires-extension-madnlpgpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LapackGPU (requires extension <code>MadNLPGPU</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, MadNLPGPU, JuMP
# ...
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=LapackGPUSolver))"><pre><span class="pl-k">using</span> MadNLP, MadNLPGPU, JuMP
<span class="pl-c"><span class="pl-c">#</span> ...</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>LapackGPUSolver))</pre></div>
<h4 dir="auto"><a id="user-content-schur-and-schwarz-requires-extension-madnlpgraph" class="anchor" aria-hidden="true" href="#schur-and-schwarz-requires-extension-madnlpgraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Schur and Schwarz (requires extension <code>MadNLPGraph</code>)</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MadNLP, MadNLPGraph, JuMP
# ...
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=MadNLPSchwarz))
model = Model(()-&gt;MadNLP.Optimizer(linear_solver=MadNLPSchur))"><pre><span class="pl-k">using</span> MadNLP, MadNLPGraph, JuMP
<span class="pl-c"><span class="pl-c">#</span> ...</span>
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>MadNLPSchwarz))
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(()<span class="pl-k">-&gt;</span>MadNLP<span class="pl-k">.</span><span class="pl-c1">Optimizer</span>(linear_solver<span class="pl-k">=</span>MadNLPSchur))</pre></div>
<p dir="auto">The solvers in <code>MadNLPGraph</code> (<code>Schur</code> and <code>Schwarz</code>) use multi-thread parallelism; thus, Julia session should be started with <code>-t</code> flag.</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia -t 16 # to use 16 threads"><pre>julia -t 16 <span class="pl-c"><span class="pl-c">#</span> to use 16 threads</span></pre></div>
<h2 dir="auto"><a id="user-content-citing-madnlpjl" class="anchor" aria-hidden="true" href="#citing-madnlpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing MadNLP.jl</h2>
<p dir="auto">If you use MadNLP.jl in your research, we would greatly appreciate your citing it.</p>
<div class="highlight highlight-text-bibtex notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@article{shin2020graph,
  title={Graph-Based Modeling and Decomposition of Energy Infrastructures},
  author={Shin, Sungho and Coffrin, Carleton and Sundar, Kaarthik and Zavala, Victor M},
  journal={arXiv preprint arXiv:2010.02404},
  year={2020}
}"><pre><span class="pl-k">@article</span>{<span class="pl-en">shin2020graph</span>,
  <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>Graph-Based Modeling and Decomposition of Energy Infrastructures<span class="pl-pds">}</span></span>,
  <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Shin, Sungho and Coffrin, Carleton and Sundar, Kaarthik and Zavala, Victor M<span class="pl-pds">}</span></span>,
  <span class="pl-s">journal</span>=<span class="pl-s"><span class="pl-pds">{</span>arXiv preprint arXiv:2010.02404<span class="pl-pds">}</span></span>,
  <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2020<span class="pl-pds">}</span></span>
}</pre></div>
<h2 dir="auto"><a id="user-content-bug-reports-and-support" class="anchor" aria-hidden="true" href="#bug-reports-and-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Bug reports and support</h2>
<p dir="auto">Please report issues and feature requests via the <a href="https://github.com/MadNLP/MadNLP.jl/issues">Github issue tracker</a>.</p>
</article></div>