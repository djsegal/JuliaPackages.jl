<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-philipshue" class="anchor" aria-hidden="true" href="#philipshue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PhilipsHue</h1>
<p><a target="_blank" rel="noopener noreferrer" href="images/logo.png"><img src="images/logo.png" alt="juliaphilips logo" style="max-width:100%;"></a></p>
<p>Functions to control Philips Hue light bulbs from Julia.</p>
<p>Uses JSON, HTTP, and Colors packages.</p>
<h2><a id="user-content-summary" class="anchor" aria-hidden="true" href="#summary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Summary</h2>
<p>To access and control the bridge you need to know its IP address, and register and obtain a 'username' (a string of hex) which you can use in subsequent sessions.</p>
<h3><a id="user-content-if-you-havent-used-your-philipshue-bridge-before" class="anchor" aria-hidden="true" href="#if-you-havent-used-your-philipshue-bridge-before"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>If you haven't used your PhilipsHue bridge before</h3>
<p>For the very first run:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using PhilipsHue
B = PhilipsHueBridge(&quot;192.168.1.2&quot;)
initialize(B, devicetype=&quot;juliascript#user1&quot;)
"><pre><code>using PhilipsHue
B = PhilipsHueBridge("192.168.1.2")
initialize(B, devicetype="juliascript#user1")
</code></pre></div>
<p>You'll now have to run to the Hue bridge and hit the button:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; initialize(B, devicetype=&quot;juliascript#user1&quot;)
initialize(): Trying to get the IP address of the Philips bridge.
initialize(): Found bridge at 192.168.1.2.
initialize(): Trying to register juliascript#user1 with the bridge at 192.168.1.2...
register(): Quick, you have ten seconds to press the button on the bridge!
register(): Successfully registered juliascript#user1 with the bridge at 192.168.1.2
register(): username is KbZxj8G5nBDsDYgqOmHicytLC-aTALLSEaJN
initialize(): Registration successful
your username is KbZxj8G5nBDsDYgqOmHicytLC-aTALLSEaJN
true
"><pre><code>julia&gt; initialize(B, devicetype="juliascript#user1")
initialize(): Trying to get the IP address of the Philips bridge.
initialize(): Found bridge at 192.168.1.2.
initialize(): Trying to register juliascript#user1 with the bridge at 192.168.1.2...
register(): Quick, you have ten seconds to press the button on the bridge!
register(): Successfully registered juliascript#user1 with the bridge at 192.168.1.2
register(): username is KbZxj8G5nBDsDYgqOmHicytLC-aTALLSEaJN
initialize(): Registration successful
your username is KbZxj8G5nBDsDYgqOmHicytLC-aTALLSEaJN
true
</code></pre></div>
<p>and the 'username' should also be stored in a field of B. Remember it!</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="testlights(B)
"><pre><code>testlights(B)
</code></pre></div>
<p><code>B</code> now refers to your bridge, and most of the functions require this as the first argument.</p>
<h3><a id="user-content-once-you-know-your-username" class="anchor" aria-hidden="true" href="#once-you-know-your-username"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Once you know your username</h3>
<p>In a subsequent Julia session, or if you already know your 'username', you don't have to do this initialization, and can simply do:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using PhilipsHue
B = PhilipsHueBridge(&quot;192.168.1.2&quot;, &quot;KbZxj8G5nBDsDYgqOmHicytLC-aTALLSEaJN&quot;)
testlights(B)
"><pre><code>using PhilipsHue
B = PhilipsHueBridge("192.168.1.2", "KbZxj8G5nBDsDYgqOmHicytLC-aTALLSEaJN")
testlights(B)
</code></pre></div>
<p>since you remembered that 'username'.</p>
<h2><a id="user-content-try-it-out" class="anchor" aria-hidden="true" href="#try-it-out"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Try it out</h2>
<p>You can now try:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="isinitialized(B) # returns true if correctly initialized

getbridgeinfo(B) # returns a dictionary with information about the bridge

getlight(B, 1)   # return a dictionary of information about light #1

getlights(B) # return a dictionary with info about all lights on the bridge

getlightnumbers(B) # return array of the &quot;logical&quot; light numbers

# set the color of light #1:
setlight(B, 1, Dict(&quot;sat&quot; =&gt; 128, &quot;on&quot; =&gt; true, &quot;hue&quot; =&gt; 20000, &quot;bri&quot; =&gt; 200))

using Colors
setlight(B, 1, colorant&quot;Pink&quot;)

# set all the lights to the same settings
setlights(B, Dict(&quot;sat&quot; =&gt; 128, &quot;on&quot; =&gt; true, &quot;hue&quot; =&gt; 20000, &quot;bri&quot; =&gt; 200))

# quickly test lights for say 20 repetitions
testlights(B, 20)

# cycle colors for all colored lights with delay 1 repetitions 10
randomcolors(B, 1, 10)
"><pre><span class="pl-c1">isinitialized</span>(B) <span class="pl-c"><span class="pl-c">#</span> returns true if correctly initialized</span>

<span class="pl-c1">getbridgeinfo</span>(B) <span class="pl-c"><span class="pl-c">#</span> returns a dictionary with information about the bridge</span>

<span class="pl-c1">getlight</span>(B, <span class="pl-c1">1</span>)   <span class="pl-c"><span class="pl-c">#</span> return a dictionary of information about light #1</span>

<span class="pl-c1">getlights</span>(B) <span class="pl-c"><span class="pl-c">#</span> return a dictionary with info about all lights on the bridge</span>

<span class="pl-c1">getlightnumbers</span>(B) <span class="pl-c"><span class="pl-c">#</span> return array of the "logical" light numbers</span>

<span class="pl-c"><span class="pl-c">#</span> set the color of light #1:</span>
<span class="pl-c1">setlight</span>(B, <span class="pl-c1">1</span>, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>sat<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">128</span>, <span class="pl-s"><span class="pl-pds">"</span>on<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>, <span class="pl-s"><span class="pl-pds">"</span>hue<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">20000</span>, <span class="pl-s"><span class="pl-pds">"</span>bri<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">200</span>))

<span class="pl-k">using</span> Colors
<span class="pl-c1">setlight</span>(B, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>Pink<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> set all the lights to the same settings</span>
<span class="pl-c1">setlights</span>(B, <span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>sat<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">128</span>, <span class="pl-s"><span class="pl-pds">"</span>on<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>, <span class="pl-s"><span class="pl-pds">"</span>hue<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">20000</span>, <span class="pl-s"><span class="pl-pds">"</span>bri<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">200</span>))

<span class="pl-c"><span class="pl-c">#</span> quickly test lights for say 20 repetitions</span>
<span class="pl-c1">testlights</span>(B, <span class="pl-c1">20</span>)

<span class="pl-c"><span class="pl-c">#</span> cycle colors for all colored lights with delay 1 repetitions 10</span>
<span class="pl-c1">randomcolors</span>(B, <span class="pl-c1">1</span>, <span class="pl-c1">10</span>)</pre></div>
<h2><a id="user-content-setting-light-parameters" class="anchor" aria-hidden="true" href="#setting-light-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Setting light parameters</h2>
<p>To set the parameters of a light, pass a dictionary with one or more key/value pairs to one of the <code>set</code> functions. Typically this dict is something like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Dict{Any,Any}(&quot;bri&quot; =&gt; rand(0:255), &quot;hue&quot; =&gt; rand(1:65000), &quot;sat&quot; =&gt; rand(1:255))
"><pre><code>Dict{Any,Any}("bri" =&gt; rand(0:255), "hue" =&gt; rand(1:65000), "sat" =&gt; rand(1:255))
</code></pre></div>
<p>where "sat" and "bri" values are saturation and brightness from 0 to 255, and "hue" is from 0 to 65280 (?), where 0 is red, yellow is 12750, green is 25500, blue is 46920, etc. If any keys are omitted, that aspect of the light won't be changed. Keys are strings, values can be numeric and will get converted to strings.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="setlight(B, 1, Dict(&quot;on&quot; =&gt; false))
setlight(B, 1, Dict(&quot;on&quot; =&gt; true, &quot;hue&quot; =&gt; 10000))

setlights(B,   Dict(&quot;sat&quot; =&gt; 255, &quot;bri&quot; =&gt; 255, &quot;hue&quot; =&gt; 20000, &quot;on&quot; =&gt; true))
setlights(B,   Dict(&quot;sat&quot; =&gt; 25,  &quot;on&quot; =&gt; true))
setlights(B,   Dict(&quot;sat&quot; =&gt; &quot;25&quot;,  &quot;on&quot; =&gt; true))
"><pre><code>setlight(B, 1, Dict("on" =&gt; false))
setlight(B, 1, Dict("on" =&gt; true, "hue" =&gt; 10000))

setlights(B,   Dict("sat" =&gt; 255, "bri" =&gt; 255, "hue" =&gt; 20000, "on" =&gt; true))
setlights(B,   Dict("sat" =&gt; 25,  "on" =&gt; true))
setlights(B,   Dict("sat" =&gt; "25",  "on" =&gt; true))
</code></pre></div>
<p>Using the definitions and conversions in Colors.jl, you can do things like this:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Colors
setlight(B, 1, RGB(1, 0.3, 0.6))
setlight(B, 1, colorant&quot;Pink&quot;)
"><pre><code>using Colors
setlight(B, 1, RGB(1, 0.3, 0.6))
setlight(B, 1, colorant"Pink")
</code></pre></div>
<h2><a id="user-content-getting-information" class="anchor" aria-hidden="true" href="#getting-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting information</h2>
<p>Note that light numbers are not necessarily consecutive, or numbered from 1. For example, if you have four lights, their numbers might be <code>[1, 3, 6, 9]</code>. You can use <code>getlightnumbers()</code> to get the numbers of lights connected to the bridge:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="getlightnumbers(bridge::PhilipsHueBridge)
"><pre><code>getlightnumbers(bridge::PhilipsHueBridge)
</code></pre></div>
<p>which returns eg:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="[1, 3, 5, 6]
"><pre><code>[1, 3, 5, 6]
</code></pre></div>
<p>Get information for a specific light. For example:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="getlight(B, 2)
"><pre><code>getlight(B, 2)
</code></pre></div>
<p>returns <code>(true,25,254,15000)</code> - On, Saturation, Brightness, Hue</p>
<p>Get the bridge's current registered IP address (which can usually be read from <code>http://meethue.com</code> using <code>get("https://www.meethue.com/api/nupnp")</code>):</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="getIP()
"><pre><code>getIP()
</code></pre></div>
<p>Get the current bridge configuration:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="getbridgeconfig(B)
"><pre><code>getbridgeconfig(B)
</code></pre></div>
<p>which returns a dictionary with keys such as "timezone", "apiversion", "paddles", "whitelist", and so on. You can obtain specific values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getbridgeinfo(B)[&quot;apiversion&quot;]
"><pre><span class="pl-c1">getbridgeinfo</span>(B)[<span class="pl-s"><span class="pl-pds">"</span>apiversion<span class="pl-pds">"</span></span>]</pre></div>
<p>returns</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;1.29.0&quot;
"><pre><code>"1.29.0"
</code></pre></div>
<p>A list of current approved apps and users is stored in the whitelist:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getbridgeinfo(B, &quot;config&quot;)[&quot;whitelist&quot;]
"><pre><span class="pl-c1">getbridgeinfo</span>(B, <span class="pl-s"><span class="pl-pds">"</span>config<span class="pl-pds">"</span></span>)[<span class="pl-s"><span class="pl-pds">"</span>whitelist<span class="pl-pds">"</span></span>]</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Dict{AbstractString,Any} with 25 entries:
  &quot;lSsXQfrm7rC32SQ0&quot;                 =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;fred’s iPhone&quot;,&quot;last use date&quot;=&gt;&quot;2015-08-27T10:32:24&quot;,&quot;create date&quot;=&gt;&quot;2013-12-31T14:05:05&quot;)
  &quot;352f5a4637d93da7121471aa39dc2db&quot;  =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;Harmony&quot;,&quot;last use date&quot;=&gt;&quot;2014-10-13T04:56:30&quot;,&quot;create date&quot;=&gt;&quot;2014-09-06T12:15:28&quot;)
  &quot;5F062ECE840DB0FE8D468855570D2EB9&quot; =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;QuickHue&quot;,&quot;last use date&quot;=&gt;&quot;2014-01-09T14:47:13&quot;,&quot;create date&quot;=&gt;&quot;2014-01-01T12:24:36&quot;)
  &quot;0f607264fc6318a92b9e13c65db7cd3c&quot; =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;fred’s iPad&quot;,&quot;last use date&quot;=&gt;&quot;2014-01-03T00:13:28&quot;,&quot;create date&quot;=&gt;&quot;2013-12-31T13:10:36&quot;)
  &quot;hue-js-JkRkZIa8Lasd&quot;              =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;Philips hue JavaScript&quot;,&quot;last use date&quot;=&gt;&quot;2015-06-12T13:34:00&quot;,&quot;create date&quot;=&gt;&quot;2015-06-12T13:26:00&quot;)
  &quot;newjuliauser2&quot;                    =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;test developer&quot;,&quot;last use date&quot;=&gt;&quot;2014-09-21T14:30:18&quot;,&quot;create date&quot;=&gt;&quot;2014-09-21T13:40:11&quot;)
  &quot;q3a619KRfwoS6suF&quot;                 =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;HueForAppleWatch#fred’s iPhone 6&quot;,&quot;last use date&quot;=&gt;&quot;2015-08-20T22:47:41&quot;,&quot;create date&quot;=&gt;&quot;2015-08-20T16:50:32&quot;)
  &quot;juliauser1&quot;                       =&gt; Dict{AbstractString,Any}(&quot;name&quot;=&gt;&quot;juliascript&quot;,&quot;last use date&quot;=&gt;&quot;2015-08-27T15:06:43&quot;,&quot;create date&quot;=&gt;&quot;2014-09-21T10:30:53&quot;)
  ...
"><pre><code>Dict{AbstractString,Any} with 25 entries:
  "lSsXQfrm7rC32SQ0"                 =&gt; Dict{AbstractString,Any}("name"=&gt;"fred’s iPhone","last use date"=&gt;"2015-08-27T10:32:24","create date"=&gt;"2013-12-31T14:05:05")
  "352f5a4637d93da7121471aa39dc2db"  =&gt; Dict{AbstractString,Any}("name"=&gt;"Harmony","last use date"=&gt;"2014-10-13T04:56:30","create date"=&gt;"2014-09-06T12:15:28")
  "5F062ECE840DB0FE8D468855570D2EB9" =&gt; Dict{AbstractString,Any}("name"=&gt;"QuickHue","last use date"=&gt;"2014-01-09T14:47:13","create date"=&gt;"2014-01-01T12:24:36")
  "0f607264fc6318a92b9e13c65db7cd3c" =&gt; Dict{AbstractString,Any}("name"=&gt;"fred’s iPad","last use date"=&gt;"2014-01-03T00:13:28","create date"=&gt;"2013-12-31T13:10:36")
  "hue-js-JkRkZIa8Lasd"              =&gt; Dict{AbstractString,Any}("name"=&gt;"Philips hue JavaScript","last use date"=&gt;"2015-06-12T13:34:00","create date"=&gt;"2015-06-12T13:26:00")
  "newjuliauser2"                    =&gt; Dict{AbstractString,Any}("name"=&gt;"test developer","last use date"=&gt;"2014-09-21T14:30:18","create date"=&gt;"2014-09-21T13:40:11")
  "q3a619KRfwoS6suF"                 =&gt; Dict{AbstractString,Any}("name"=&gt;"HueForAppleWatch#fred’s iPhone 6","last use date"=&gt;"2015-08-20T22:47:41","create date"=&gt;"2015-08-20T16:50:32")
  "juliauser1"                       =&gt; Dict{AbstractString,Any}("name"=&gt;"juliascript","last use date"=&gt;"2015-08-27T15:06:43","create date"=&gt;"2014-09-21T10:30:53")
  ...
</code></pre></div>
<p>Get information for all lights:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getlights(B)
"><pre><span class="pl-c1">getlights</span>(B)</pre></div>
<p>For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="getlights(B)
"><pre><span class="pl-c1">getlights</span>(B)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Dict{String,Any} with 3 entries:
  &quot;1&quot; =&gt; [&quot;name&quot;=&gt;&quot;Hue Lamp&quot;,&quot;swversion&quot;=&gt;&quot;66010820&quot;,&quot;pointsymbol&quot;=&gt;[&quot;8&quot;=&gt;&quot;none&quot;,&quot;4&quot;=&gt;&quot;none&quot;,&quot;1&quot;=&gt;&quot;none&quot;,&quot;5&quot;=&gt;&quot;none&quot;,…
  &quot;2&quot; =&gt; [&quot;name&quot;=&gt;&quot;Hue Lamp 1&quot;,&quot;swversion&quot;=&gt;&quot;66010820&quot;,&quot;pointsymbol&quot;=&gt;[&quot;8&quot;=&gt;&quot;none&quot;,&quot;4&quot;=&gt;&quot;none&quot;,&quot;1&quot;=&gt;&quot;none&quot;,&quot;5&quot;=&gt;&quot;none…
  &quot;3&quot; =&gt; [&quot;name&quot;=&gt;&quot;Hue Lamp 2&quot;,&quot;swversion&quot;=&gt;&quot;66010820&quot;,&quot;pointsymbol&quot;=&gt;[&quot;8&quot;=&gt;&quot;none&quot;,&quot;4&quot;=&gt;&quot;none&quot;,&quot;1&quot;=&gt;&quot;none&quot;,&quot;5&quot;=&gt;&quot;none…
"><pre><code>Dict{String,Any} with 3 entries:
  "1" =&gt; ["name"=&gt;"Hue Lamp","swversion"=&gt;"66010820","pointsymbol"=&gt;["8"=&gt;"none","4"=&gt;"none","1"=&gt;"none","5"=&gt;"none",…
  "2" =&gt; ["name"=&gt;"Hue Lamp 1","swversion"=&gt;"66010820","pointsymbol"=&gt;["8"=&gt;"none","4"=&gt;"none","1"=&gt;"none","5"=&gt;"none…
  "3" =&gt; ["name"=&gt;"Hue Lamp 2","swversion"=&gt;"66010820","pointsymbol"=&gt;["8"=&gt;"none","4"=&gt;"none","1"=&gt;"none","5"=&gt;"none…
</code></pre></div>
</article></div>