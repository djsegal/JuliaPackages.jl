<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-graphsignalsjl" class="anchor" aria-hidden="true" href="#graphsignalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GraphSignals.jl</h1>
<p dir="auto"><a href="https://yuehhua.github.io/GraphSignals.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://yuehhua.github.io/GraphSignals.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/yuehhua/GraphSignals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5cf8cf8ef049f29b4d63f399152924ac97b51268e8aae83e6ead8c99488e17b6/68747470733a2f2f7472617669732d63692e6f72672f797565686875612f47726170685369676e616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/yuehhua/GraphSignals.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://gitlab.com/JuliaGPU/GraphSignals.jl/commits/master" rel="nofollow"><img src="https://camo.githubusercontent.com/2a2f12d4510722b17826400ae9ff895341a940cfd4c5be37c6a298e23fc6b118/68747470733a2f2f6769746c61622e636f6d2f4a756c69614750552f47726170685369676e616c732e6a6c2f6261646765732f6d61737465722f636f7665726167652e737667" alt="coverage report" data-canonical-src="https://gitlab.com/JuliaGPU/GraphSignals.jl/badges/master/coverage.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A generic graph representation for combining graph signals (or features) and graph topology (or graph structure). It supports the graph structure defined in JuliaGraphs packages (i.e. LightGraphs and SimpleWeightedGraphs) and compatible with APIs in JuliaGraphs packages. Graph signals are usually features, including node feautres, edge features and graph features. Features are contained in arrays and CuArrays are supported via CUDA.jl.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using GraphSignals, LightGraphs

julia&gt; N = 4
4

julia&gt; ug = SimpleGraph(N)
{4, 0} undirected simple Int64 graph

julia&gt; add_edge!(ug, 1, 2); add_edge!(ug, 1, 3); add_edge!(ug, 1, 4);

julia&gt; add_edge!(ug, 2, 3); add_edge!(ug, 3, 4);

julia&gt; fg = FeaturedGraph(ug)
FeaturedGraph(
	Undirected graph with (#V=4, #E=5) in adjacency matrix,
)

julia&gt; N = 4
4

julia&gt; E = 5
5

julia&gt; nf = rand(3, N);

julia&gt; ef = rand(5, E);

julia&gt; gf = rand(7);

julia&gt; fg = FeaturedGraph(ug, nf=nf, ef=ef, gf=gf)
FeaturedGraph(
	Undirected graph with (#V=4, #E=5) in adjacency matrix,
	Node feature:	ℝ^3 &lt;Matrix{Float64}&gt;,
	Edge feature:	ℝ^5 &lt;Matrix{Float64}&gt;,
	Global feature:	ℝ^7 &lt;Vector{Float64}&gt;,
)

julia&gt; nf = rand(3, 7);

julia&gt; fg = FeaturedGraph(ug, nf=nf)
ERROR: DimensionMismatch(&quot;number of nodes must match between graph (4) and node features (7)&quot;)
..."><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GraphSignals, LightGraphs

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> ug <span class="pl-k">=</span> <span class="pl-c1">SimpleGraph</span>(N)
{<span class="pl-c1">4</span>, <span class="pl-c1">0</span>} undirected simple Int64 graph

julia<span class="pl-k">&gt;</span> <span class="pl-c1">add_edge!</span>(ug, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>); <span class="pl-c1">add_edge!</span>(ug, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>); <span class="pl-c1">add_edge!</span>(ug, <span class="pl-c1">1</span>, <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">add_edge!</span>(ug, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>); <span class="pl-c1">add_edge!</span>(ug, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> fg <span class="pl-k">=</span> <span class="pl-c1">FeaturedGraph</span>(ug)
<span class="pl-c1">FeaturedGraph</span>(
	Undirected graph with (<span class="pl-c"><span class="pl-c">#</span>V=4, #E=5) in adjacency matrix,</span>
)

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">4</span>
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">5</span>
<span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> nf <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, N);

julia<span class="pl-k">&gt;</span> ef <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">5</span>, E);

julia<span class="pl-k">&gt;</span> gf <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">7</span>);

julia<span class="pl-k">&gt;</span> fg <span class="pl-k">=</span> <span class="pl-c1">FeaturedGraph</span>(ug, nf<span class="pl-k">=</span>nf, ef<span class="pl-k">=</span>ef, gf<span class="pl-k">=</span>gf)
<span class="pl-c1">FeaturedGraph</span>(
	Undirected graph with (<span class="pl-c"><span class="pl-c">#</span>V=4, #E=5) in adjacency matrix,</span>
	Node feature<span class="pl-k">:</span>	ℝ<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">&lt;</span>Matrix{Float64}<span class="pl-k">&gt;</span>,
	Edge feature<span class="pl-k">:</span>	ℝ<span class="pl-k">^</span><span class="pl-c1">5</span> <span class="pl-k">&lt;</span>Matrix{Float64}<span class="pl-k">&gt;</span>,
	Global feature<span class="pl-k">:</span>	ℝ<span class="pl-k">^</span><span class="pl-c1">7</span> <span class="pl-k">&lt;</span>Vector{Float64}<span class="pl-k">&gt;</span>,
)

julia<span class="pl-k">&gt;</span> nf <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">7</span>);

julia<span class="pl-k">&gt;</span> fg <span class="pl-k">=</span> <span class="pl-c1">FeaturedGraph</span>(ug, nf<span class="pl-k">=</span>nf)
ERROR<span class="pl-k">:</span> <span class="pl-c1">DimensionMismatch</span>(<span class="pl-s"><span class="pl-pds">"</span>number of nodes must match between graph (4) and node features (7)<span class="pl-pds">"</span></span>)
<span class="pl-k">...</span></pre></div>
<h2 dir="auto"><a id="user-content-apis" class="anchor" aria-hidden="true" href="#apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>APIs</h2>
<h3 dir="auto"><a id="user-content-graph-related-apis" class="anchor" aria-hidden="true" href="#graph-related-apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Graph-related APIs</h3>
<ul dir="auto">
<li><code>graph</code></li>
<li><code>node_feature</code></li>
<li><code>edge_feature</code></li>
<li><code>global_feature</code></li>
<li><code>mask</code></li>
<li><code>has_graph</code></li>
<li><code>has_node_feature</code></li>
<li><code>has_edge_feature</code></li>
<li><code>has_global_feature</code></li>
<li><code>nv</code></li>
<li><code>ne</code></li>
<li><code>adjacency_list</code></li>
<li><code>is_directed</code></li>
<li><code>fetch_graph</code></li>
</ul>
<h3 dir="auto"><a id="user-content-linear-algebraic-apis" class="anchor" aria-hidden="true" href="#linear-algebraic-apis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear algebraic APIs</h3>
<ul dir="auto">
<li><code>adjacency_matrix</code></li>
<li><code>degrees</code></li>
<li><code>degree_matrix</code></li>
<li><code>inv_sqrt_degree_matrix</code></li>
<li><code>laplacian_matrix</code>, <code>laplacian_matrix!</code></li>
<li><code>normalized_laplacian</code>, <code>normalized_laplacian!</code></li>
<li><code>scaled_laplacian</code>, <code>scaled_laplacian!</code></li>
</ul>
</article></div>