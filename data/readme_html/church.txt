<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-church" class="anchor" aria-hidden="true" href="#church"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Church</h1>
<p><a href="https://travis-ci.org/LaurenceA/Church.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/50fdbebb94d5ed3e5011d83104f004b45ad96bd3/68747470733a2f2f7472617669732d63692e6f72672f4c617572656e6365412f4368757263682e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/LaurenceA/Church.jl.png" style="max-width:100%;"></a></p>
<p>Chuch.jl aims to make it easy for anyone to perform MCMC inference in complex, and simple, probabilistic models.
We aim to be:</p>
<ul>
<li>Fast
<ul>
<li>Church.jl considers only the bits of the model that need to be updated during MCMC.</li>
</ul>
</li>
<li>Practical
<ul>
<li>Easy to install and use.</li>
</ul>
</li>
<li>General
<ul>
<li>Define new, arbitrarily complex distributions, within Church.jl.</li>
<li>Allows you to define stochastic, recursive, and non-parametric distributions.</li>
<li>Uses all distributions available in Distributions.jl.</li>
<li>Includes a probabilistic garbage collector - so you define large models without running out of memory.</li>
</ul>
</li>
</ul>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting started</h2>
<p>To install, use</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Church<span class="pl-pds">"</span></span>)</pre></div>
<p>To load, use</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Church</pre></div>
<h2><a id="user-content-constructing-a-model" class="anchor" aria-hidden="true" href="#constructing-a-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructing a model</h2>
<p>You can define a random variable simply by calling a function,</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">normal</span>()</pre></div>
<p>Church.jl contains all the distributions in Distributions.jl - with function names that are just lowercase versions of the distribution names.</p>
<p>You can apply standard operators (e.g. <code>+</code>) directly to samples,</p>
<div class="highlight highlight-source-julia"><pre>b <span class="pl-k">=</span> <span class="pl-c1">normal</span>() <span class="pl-k">*</span> <span class="pl-c1">normal</span>()</pre></div>
<p>To apply other functions to random variables, you must first "lift" the function.
This overloads the function, so that it can deal with random variables.
For instance,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@lift</span>(cosh, <span class="pl-c1">1</span>)
c <span class="pl-k">=</span> <span class="pl-c1">cosh</span>(<span class="pl-c1">normal</span>())</pre></div>
<p>Note that the second argument to lift is the number of arguments, which, in this case, is 1.</p>
<p>Combining these, we could write,</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">normal</span>()
b <span class="pl-k">=</span> a <span class="pl-k">*</span> a
<span class="pl-c1">@lift</span>(cosh, <span class="pl-c1">1</span>)
c <span class="pl-k">=</span> <span class="pl-c1">cosh</span>(a)
d <span class="pl-k">=</span> <span class="pl-c1">normal</span>(a, c)</pre></div>
<p>To sample these random variables, we use <code>resample()</code>, which performs a single MCMC step, and use <code>value(a)</code> to report the value of <code>a</code> for the current sample.
Note that <code>value(a)</code> is ONLY provided for recording or printing the value of samples.
Any other is liable to give meaningless quantities in the best case, or cause the algorithm to no longer sample the correct distribution in the worst case.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>
  <span class="pl-c"><span class="pl-c">#</span>Do 5 MCMC steps.</span>
  <span class="pl-c1">resample</span>(<span class="pl-c1">5</span>)
  <span class="pl-c"><span class="pl-c">#</span>value(a) returns the value of a for the current sample.</span>
  <span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>a:% .3f, b:% .3f, c:% .3f, d:% .3f<span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>(a), <span class="pl-c1">value</span>(b), <span class="pl-c1">value</span>(c), <span class="pl-c1">value</span>(d)); <span class="pl-c1">println</span>()
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>Prints:</span>
<span class="pl-c"><span class="pl-c">#</span>a: 0.978, b: 0.957, c: 1.518, d:-0.240</span>
<span class="pl-c"><span class="pl-c">#</span>a: 0.262, b: 0.069, c: 1.035, d:-1.598</span>
<span class="pl-c"><span class="pl-c">#</span>a: 0.262, b: 0.069, c: 1.035, d:-1.065</span>
<span class="pl-c"><span class="pl-c">#</span>a: 0.262, b: 0.069, c: 1.035, d:-0.458</span>
<span class="pl-c"><span class="pl-c">#</span>a:-0.182, b: 0.033, c: 1.017, d:-0.112</span></pre></div>
<h2><a id="user-content-conditioning" class="anchor" aria-hidden="true" href="#conditioning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Conditioning</h2>
<p>So far, we haven't done anything interesting - you could sample <code>a</code> and <code>b</code> in the previous sections by simply using <code>a = rand(Normal(0, 1))</code> and <code>b = a*a</code>.
In Church.jl, you can condition these draws on known data, using the keyword argument <code>condition</code>,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">normal</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>; condition<span class="pl-k">=</span><span class="pl-c1">3</span>)</pre></div>
<p>In a more complete example, to sample P(a| c=10), where c ~ Normal(b, 0.1), and a ~ Normal(0, 1),</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Church

<span class="pl-c1">@lift</span>(abs, <span class="pl-c1">1</span>)

a <span class="pl-k">=</span> <span class="pl-c1">normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span>)
b <span class="pl-k">=</span> <span class="pl-c1">abs</span>(a)
c <span class="pl-k">=</span> <span class="pl-c1">normal</span>(b, <span class="pl-c1">0.1</span>; condition<span class="pl-k">=</span><span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span>Now that we're doing inference, we need to perform many sampling steps, </span>
<span class="pl-c"><span class="pl-c">#</span>for the model to converge to the correct distribution.  This is known as burn-in.</span>
<span class="pl-c1">resample</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">3</span>)
<span class="pl-c1">println</span>(<span class="pl-c1">value</span>(a))

<span class="pl-c"><span class="pl-c">#</span>Prints:</span>
<span class="pl-c"><span class="pl-c">#</span>-2.7382930822004345</span></pre></div>
<h2><a id="user-content-examples-mixture-model---fixed-number-of-components" class="anchor" aria-hidden="true" href="#examples-mixture-model---fixed-number-of-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples: mixture model - fixed number of components.</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Church

<span class="pl-c"><span class="pl-c">#</span>Generate some data</span>
data <span class="pl-k">=</span> [<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)<span class="pl-k">+</span><span class="pl-c1">6</span>, <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)<span class="pl-k">-</span><span class="pl-c1">6</span>]

<span class="pl-c"><span class="pl-c">#</span>The model parameters</span>
K <span class="pl-k">=</span> <span class="pl-c1">2</span>
ms <span class="pl-k">=</span> [<span class="pl-c1">normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>K]
vs <span class="pl-k">=</span> [<span class="pl-c1">gamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>K]
ps <span class="pl-k">=</span> <span class="pl-c1">dirichlet</span>(<span class="pl-c1">ones</span>(K))

<span class="pl-c"><span class="pl-c">#</span>Which mixture component does each data item belong to?</span>
ks <span class="pl-k">=</span> [<span class="pl-c1">categorical</span>(ps) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(data)]

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(data)
  <span class="pl-c"><span class="pl-c">#</span>Condition on the data.</span>
  <span class="pl-c1">normal</span>(ms[ks[i]], vs[ks[i]]; condition<span class="pl-k">=</span>data[i])
<span class="pl-k">end</span>

<span class="pl-c1">resample</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>)
<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span>m1:% .3f, m2:% .3f, v1:% .3f, v2:% .3f<span class="pl-pds">"</span></span>, <span class="pl-c1">value</span>(ms[<span class="pl-c1">1</span>]), <span class="pl-c1">value</span>(ms[<span class="pl-c1">2</span>]), <span class="pl-c1">value</span>(vs[<span class="pl-c1">1</span>]), <span class="pl-c1">value</span>(vs[<span class="pl-c1">2</span>]))
<span class="pl-c1">println</span>()
<span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">print</span>(<span class="pl-c1">value</span>(x)), ks)
<span class="pl-c1">println</span>()
<span class="pl-c1">println</span>((<span class="pl-c1">value</span>(ps)[<span class="pl-c1">1</span>], <span class="pl-c1">value</span>(ps)[<span class="pl-c1">2</span>]))

<span class="pl-c"><span class="pl-c">#</span>Prints:</span>
<span class="pl-c"><span class="pl-c">#</span>m1:-5.575, m2: 6.024, v1: 0.947, v2: 0.940</span>
<span class="pl-c"><span class="pl-c">#</span>22222222221111111111</span>
<span class="pl-c"><span class="pl-c">#</span>(0.43393275606877524,0.5660672439312248)</span></pre></div>
<p>Note that the inferred parameters are sensible, given the data.</p>
<h2><a id="user-content-garbage-collecting-unused-mixture-components" class="anchor" aria-hidden="true" href="#garbage-collecting-unused-mixture-components"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Garbage collecting unused mixture components</h2>
<p>We might want to define a mixture model with a variable number of components, for instance,</p>
<div class="highlight highlight-source-julia"><pre>K <span class="pl-k">=</span> <span class="pl-c1">poisson</span>(<span class="pl-c1">3</span>)
ms <span class="pl-k">=</span> [<span class="pl-c1">normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>K]</pre></div>
<p>However, you cannot do this, because the list comprehension needs K to be an integer, not a sample.
Instead, you can use a large number of components, then exploit the lazy datastructures and garbage collector in Church.jl to avoid instantiating unused mixture components.
For instance,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Church
<span class="pl-k">using</span> Distributions

<span class="pl-c"><span class="pl-c">#</span>Generate some data</span>
data <span class="pl-k">=</span> [<span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)<span class="pl-k">+</span><span class="pl-c1">6</span>, <span class="pl-c1">randn</span>(<span class="pl-c1">10</span>)<span class="pl-k">-</span><span class="pl-c1">6</span>]

<span class="pl-c"><span class="pl-c">#</span>The model parameters</span>
ms <span class="pl-k">=</span> <span class="pl-c1">Mem</span>((i<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>))
vs <span class="pl-k">=</span> <span class="pl-c1">Mem</span>((i<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">-&gt;</span> <span class="pl-c1">gamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))
ps <span class="pl-k">=</span> <span class="pl-c1">dirichlet</span>(<span class="pl-c1">10</span>, <span class="pl-c1">1.</span>; sampler<span class="pl-k">=</span>(d,v)<span class="pl-k">-&gt;</span><span class="pl-c1">Dirichlet</span>(<span class="pl-c1">3</span><span class="pl-k">*</span>v<span class="pl-k">+</span><span class="pl-c1">0.001</span>))

<span class="pl-c"><span class="pl-c">#</span>Which mixture component does each data item belong to?</span>
ks <span class="pl-k">=</span> [<span class="pl-c1">categorical</span>(ps) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(data)]


<span class="pl-c"><span class="pl-c">#</span>Condition on the data.</span>
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(data)
    <span class="pl-c1">normal</span>(ms[ks[i]], vs[ks[i]]; condition<span class="pl-k">=</span>data[i])
<span class="pl-k">end</span>

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">3</span>
  <span class="pl-c1">resample</span>(<span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">3</span>)
  <span class="pl-c1">gc_church</span>()
<span class="pl-k">end</span>
<span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">print</span>(<span class="pl-c1">value</span>(x)), ks)

<span class="pl-c"><span class="pl-c">#</span>Prints:</span>
<span class="pl-c"><span class="pl-c">#</span>89998788884444444444</span></pre></div>
<p>So the model is only using 4 components.
Looking at the value of <code>ms</code>, we see that the parameters for the other components have not been instansiated.
The other components, that have been created at some point during the sampling, have been cleaned up.</p>
<h2><a id="user-content-defining-new-distributions" class="anchor" aria-hidden="true" href="#defining-new-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Defining new distributions</h2>
<p>In Church.jl, a distribution is just a function, so to define a new distributioon, we just need to define a function.  A very simple example, is a mixture of normal distributions with different standard deviations,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">gsm</span>(m<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> <span class="pl-c1">normal</span>(m, <span class="pl-c1">gamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>))</pre></div>
<p>We can also allow conditioning on new distributions, if the final call also allows conditioning.  In this case,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">gsm</span>(m<span class="pl-k">::</span><span class="pl-c1">Real</span>; condition<span class="pl-k">=</span>nocond) <span class="pl-k">=</span> <span class="pl-c1">normal</span>(m, <span class="pl-c1">gamma</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>); condition<span class="pl-k">=</span>condition)</pre></div>
<p>Now <code>gsm</code> can be conditioned just like any other distribution.  Note that you should use nocond as the default value of condition - this is the special value indicating that the distribution is not conditioned.</p>
<p>In another example, we could use recursion to write down a distribution,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">geom</span>(p<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">=</span> <span class="pl-c1">@If</span>(<span class="pl-c1">bernoulli</span>(p), <span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">geom</span>(), <span class="pl-c1">1</span>).</pre></div>
<p>The macro <code>@If</code> returns <code>1+geom()</code> if <code>bernoulli(p)</code> is <code>1</code>, and returns <code>1</code> if <code>bernoulli(p)</code> is <code>0</code>.
It only evaluates its arguments as necassery, so we do not get infinite recursive calls to <code>geom</code>.</p>
<p>Finally, you can write down random distributions.
For instance, the dirichlet distribution can be thought of as returning a vector, whose elements are positive and sum to 1, or it can be thought of as returning a categorical distribution.
The <code>dirichlet</code> distribution returns a vector, in Church.jl.
However, we could define <code>fdirichlet</code>, which does return a distribution,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">fdirichlet</span>(args<span class="pl-k">...</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    ps <span class="pl-k">=</span> <span class="pl-c1">dirichlet</span>(args<span class="pl-k">...</span>)
    () <span class="pl-k">-&gt;</span> <span class="pl-c1">categorical</span>(ps)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>dir is a categorical distribution</span>
dir <span class="pl-k">=</span> <span class="pl-c1">fdirichlet</span>(<span class="pl-c1">9</span>, <span class="pl-c1">0.1</span>)

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">print</span>(<span class="pl-c1">value</span>(<span class="pl-c1">dir</span>()))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>Prints</span>
<span class="pl-c"><span class="pl-c">#</span>4444448444</span></pre></div>
<p>This mechanism allows you to write down a dirichlet process, which, again, is a distribution over random distributions,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">dp</span>(concentration<span class="pl-k">::</span><span class="pl-c1">Real</span>, base_measure<span class="pl-k">::</span><span class="pl-c1">Function</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    sticks <span class="pl-k">=</span> <span class="pl-c1">Mem</span>(i<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">-&gt;</span> <span class="pl-c1">beta</span>(<span class="pl-c1">1.</span>, concentration))
    atoms  <span class="pl-k">=</span> <span class="pl-c1">Mem</span>(i<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">-&gt;</span> <span class="pl-c1">base_measure</span>())
    <span class="pl-en">loop</span>(i<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">=</span> 
        <span class="pl-c1">@If</span>(<span class="pl-c1">bernoulli</span>(sticks[i]), atoms[i], <span class="pl-c1">loop</span>(i<span class="pl-k">+</span><span class="pl-c1">1</span>))
    d <span class="pl-k">=</span> () <span class="pl-k">-&gt;</span> <span class="pl-c1">loop</span>(<span class="pl-c1">1</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>d is a DP</span>
d <span class="pl-k">=</span> <span class="pl-c1">dp</span>(<span class="pl-c1">1.</span>, normal)

<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>
    <span class="pl-c1">println</span>(<span class="pl-c1">value</span>(<span class="pl-c1">d</span>()))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>Prints</span>
<span class="pl-c"><span class="pl-c">#</span>-0.8241868921220118</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span>
<span class="pl-c"><span class="pl-c">#</span>0.7481036918602126</span>
<span class="pl-c"><span class="pl-c">#</span>1.4163485859423797</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span>
<span class="pl-c"><span class="pl-c">#</span>1.2419259288985225</span></pre></div>
</article></div>