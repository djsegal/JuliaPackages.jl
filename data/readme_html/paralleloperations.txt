<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-paralleloperationsjl" class="anchor" aria-hidden="true" href="#paralleloperationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ParallelOperations.jl</h1>
<p><em>Basic parallel algorithms for Julia</em></p>
<p><a href="https://codecov.io/gh/JuliaAstroSim/ParallelOperations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be3a2017cdb99fbb4450347e6d203a6881c50afb/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417374726f53696d2f506172616c6c656c4f7065726174696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaAstroSim/ParallelOperations.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Features:</p>
<ul>
<li>User-friendly interface</li>
<li>100% auto-test coverage</li>
<li>All of the operations could be executed on <strong>specified Modules</strong></li>
<li>Commonly used operations</li>
<li>Send function methods to remote at runtime</li>
</ul>
<h2><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia"><pre>]add ParallelOperations</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaAstroSim<span class="pl-k">/</span>ParallelOperations<span class="pl-k">.</span>jl</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Test
<span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">4</span>)

<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ParallelOperations

<span class="pl-c"><span class="pl-c">#</span>!!! Notice</span>
<span class="pl-c"><span class="pl-c">#</span> User struct</span>
<span class="pl-c1">@everywhere</span> <span class="pl-c1">procs</span>() <span class="pl-k">struct</span> TestStruct
    x
    y
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define iterater methods to use REDUCE operations</span>
<span class="pl-c1">@everywhere</span> <span class="pl-en">iterate</span>(p<span class="pl-k">::</span><span class="pl-c1">TestStruct</span>) <span class="pl-k">=</span> (p, <span class="pl-c1">nothing</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-en">iterate</span>(p<span class="pl-k">::</span><span class="pl-c1">TestStruct</span>, st) <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

<span class="pl-c"><span class="pl-c">#</span> Functions to execute on remote workers should be known by target worker</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">function</span> <span class="pl-en">f!</span>(a<span class="pl-k">::</span><span class="pl-c1">Array</span>)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(a)
        a[i] <span class="pl-k">=</span> <span class="pl-c1">sin</span>(a[i])
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-point-to-point" class="anchor" aria-hidden="true" href="#point-to-point"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Point-to-point</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span># Define a variable on worker and get it back</span>
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>)
<span class="pl-c1">@test</span> b <span class="pl-k">==</span> <span class="pl-c1">1.0</span>

<span class="pl-c"><span class="pl-c">#</span># Specify module (optional)</span>
<span class="pl-c"><span class="pl-c">#</span>!!! Default module is Main</span>
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, ParallelOperations)
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>, ParallelOperations)

<span class="pl-c"><span class="pl-c">#</span># Get &amp; Set data by Expr</span>
<span class="pl-c1">@everywhere</span> <span class="pl-c1">2</span> s <span class="pl-k">=</span> <span class="pl-c1">TestStruct</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
b <span class="pl-k">=</span> <span class="pl-c1">123.0</span>

<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, :(s<span class="pl-k">.</span>x), b)

<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, :(s<span class="pl-k">.</span>y), <span class="pl-c1">456.0</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">2</span> <span class="pl-c1">@show</span> s

<span class="pl-c"><span class="pl-c">#</span># Transfer data from worker 2 to worker 3, and change symbol name</span>
<span class="pl-c1">transfer</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">3</span> <span class="pl-c1">@show</span> b</pre></div>
<p>Notice that functions would evaluate the parameter before sending them to remote workers. That means:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">myid</span>())
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>)</pre></div>
<p>would return <code>b = 1</code> instead of <code>2</code>, because function <code>myid</code> is executed on master process.</p>
<p>To send commands to remote, use macros:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@sendto</span> <span class="pl-c1">2</span> a <span class="pl-k">=</span> <span class="pl-c1">myid</span>()
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>)
<span class="pl-c"><span class="pl-c">#</span> b = 2</span></pre></div>
<p>Here <code>myid</code> is executed on process 2.</p>
<p>This also works with <code>bcast</code> and <code>@bcast</code> (in fact <code>@bcast</code> and <code>@sendto</code> have identical codes)</p>
<h3><a id="user-content-broadcast" class="anchor" aria-hidden="true" href="#broadcast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>broadcast</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:c</span>, <span class="pl-c1">1.0</span>, Parallel)

<span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), c <span class="pl-k">=</span> [pi<span class="pl-k">/</span><span class="pl-c1">2</span>])

<span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), f!, <span class="pl-c1">:c</span>)</pre></div>
<h3><a id="user-content-gather" class="anchor" aria-hidden="true" href="#gather"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>gather</h3>
<p>Gathering is executed in the order of the first parameter</p>
<div class="highlight highlight-source-julia"><pre>d <span class="pl-k">=</span> <span class="pl-c1">gather</span>(<span class="pl-c1">workers</span>(), :(c[<span class="pl-c1">1</span>]))
<span class="pl-c1">@test</span> d <span class="pl-k">==</span> <span class="pl-c1">4.0</span>


<span class="pl-c1">bcast</span>(pids, a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)
<span class="pl-c1">allgather</span>(pids, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>) <span class="pl-c"><span class="pl-c">#</span> allgather data to new symbol (option)</span>
                        <span class="pl-c"><span class="pl-c">#</span> If ok with unstable type, you could use `allgather(pids, :a)`</span>
b <span class="pl-k">=</span> <span class="pl-c1">gather</span>(pids, <span class="pl-c1">:b</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">sum</span>(<span class="pl-c1">sum</span>(b)) <span class="pl-k">==</span> <span class="pl-c1">16.0</span></pre></div>
<h3><a id="user-content-reduce" class="anchor" aria-hidden="true" href="#reduce"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>reduce</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@everywhere</span> <span class="pl-c1">workers</span>() teststruct <span class="pl-k">=</span> <span class="pl-c1">TestStruct</span>(<span class="pl-c1">myid</span>(), <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">.+</span> <span class="pl-c1">myid</span>())
M <span class="pl-k">=</span> <span class="pl-c1">reduce</span>(max, <span class="pl-c1">workers</span>(), :(teststruct<span class="pl-k">.</span>b))


<span class="pl-c1">@everywhere</span> pids a <span class="pl-k">=</span> <span class="pl-c1">myid</span>()
<span class="pl-c1">allreduce</span>(max, pids, <span class="pl-c1">:a</span>) <span class="pl-c"><span class="pl-c">#</span> allreduce data. Use allreduce(max, pids, :a, :b) for new symbol :b</span>
b <span class="pl-k">=</span> <span class="pl-c1">gather</span>(pids, <span class="pl-c1">:a</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">sum</span>(b) <span class="pl-k">==</span> <span class="pl-c1">20.0</span></pre></div>
<h3><a id="user-content-scatter" class="anchor" aria-hidden="true" href="#scatter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Scatter</h3>
<p>The array to scatter should have the same length as workers to receive</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>)
<span class="pl-c1">scatter</span>(<span class="pl-c1">workers</span>(), a, <span class="pl-c1">:b</span>, Main)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">workers</span>() <span class="pl-c1">@show</span> b</pre></div>
<h3><a id="user-content-commonly-used-functions" class="anchor" aria-hidden="true" href="#commonly-used-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Commonly used functions</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@everywhere</span> <span class="pl-c1">workers</span>() x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

<span class="pl-c1">sum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">allsum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">maximum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">allmaximum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">minimum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">allminimum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)</pre></div>
<h3><a id="user-content-send-function-to-workers" class="anchor" aria-hidden="true" href="#send-function-to-workers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Send function to workers</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">fun</span>() <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, fun)
<span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, :(<span class="pl-c1">fun</span>()))

<span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), fun)
<span class="pl-c1">gather</span>(<span class="pl-c1">workers</span>(), :(<span class="pl-c1">fun</span>()))</pre></div>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Check remotecall functions</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Benchmark and optimization</li>
</ul>
<h2><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Similar packages</h2>
<p><a href="https://github.com/ChrisRackauckas/ParallelDataTransfer.jl">ParallelDataTransfer</a></p>
</article></div>