<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-paralleloperationsjl" class="anchor" aria-hidden="true" href="#paralleloperationsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParallelOperations.jl</h1>
<p dir="auto"><em>Basic parallel algorithms for Julia</em></p>
<p dir="auto"><a href="https://codecov.io/gh/JuliaAstroSim/ParallelOperations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fca09375b27193a60ce30639b0a8e8e030d52d36fbd25e8e95442ca6b07881b6/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417374726f53696d2f506172616c6c656c4f7065726174696f6e732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaAstroSim/ParallelOperations.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Features:</p>
<ul dir="auto">
<li>User-friendly interface</li>
<li>100% auto-test coverage</li>
<li>All of the operations could be executed on <strong>specified Modules</strong></li>
<li>Commonly used operations</li>
<li>Send function methods to remote at runtime</li>
</ul>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add ParallelOperations"><pre>]add ParallelOperations</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add https://github.com/JuliaAstroSim/ParallelOperations.jl"><pre>]add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>JuliaAstroSim<span class="pl-k">/</span>ParallelOperations<span class="pl-k">.</span>jl</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Test
using Distributed
addprocs(4)

@everywhere using ParallelOperations

#!!! Notice
# User struct
@everywhere procs() struct TestStruct
    x
    y
end

# Define iterater methods to use REDUCE operations
@everywhere iterate(p::TestStruct) = (p, nothing)
@everywhere iterate(p::TestStruct, st) = nothing

# Functions to execute on remote workers should be known by target worker
@everywhere function f!(a::Array)
    for i in eachindex(a)
        a[i] = sin(a[i])
    end
end"><pre><span class="pl-k">using</span> Test
<span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">4</span>)

<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ParallelOperations

<span class="pl-c"><span class="pl-c">#</span>!!! Notice</span>
<span class="pl-c"><span class="pl-c">#</span> User struct</span>
<span class="pl-c1">@everywhere</span> <span class="pl-c1">procs</span>() <span class="pl-k">struct</span> TestStruct
    x
    y
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Define iterater methods to use REDUCE operations</span>
<span class="pl-c1">@everywhere</span> <span class="pl-en">iterate</span>(p<span class="pl-k">::</span><span class="pl-c1">TestStruct</span>) <span class="pl-k">=</span> (p, <span class="pl-c1">nothing</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-en">iterate</span>(p<span class="pl-k">::</span><span class="pl-c1">TestStruct</span>, st) <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

<span class="pl-c"><span class="pl-c">#</span> Functions to execute on remote workers should be known by target worker</span>
<span class="pl-c1">@everywhere</span> <span class="pl-k">function</span> <span class="pl-en">f!</span>(a<span class="pl-k">::</span><span class="pl-c1">Array</span>)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(a)
        a[i] <span class="pl-k">=</span> <span class="pl-c1">sin</span>(a[i])
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-point-to-point" class="anchor" aria-hidden="true" href="#point-to-point"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Point-to-point</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="## Define a variable on worker and get it back
sendto(2, a = 1.0)
b = getfrom(2, :a)
@test b == 1.0

## Specify module (optional)
#!!! Default module is Main
sendto(2, a = 1.0, ParallelOperations)
b = getfrom(2, :a, ParallelOperations)

## Get &amp; Set data by Expr
@everywhere 2 s = TestStruct(0.0, 0.0)
b = 123.0

sendto(2, :(s.x), b)

sendto(2, :(s.y), 456.0)
@everywhere 2 @show s

## Transfer data from worker 2 to worker 3, and change symbol name
transfer(2, 3, :a, :b)
@everywhere 3 @show b"><pre><span class="pl-c"><span class="pl-c">#</span># Define a variable on worker and get it back</span>
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>)
<span class="pl-c1">@test</span> b <span class="pl-k">==</span> <span class="pl-c1">1.0</span>

<span class="pl-c"><span class="pl-c">#</span># Specify module (optional)</span>
<span class="pl-c"><span class="pl-c">#</span>!!! Default module is Main</span>
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, ParallelOperations)
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>, ParallelOperations)

<span class="pl-c"><span class="pl-c">#</span># Get &amp; Set data by Expr</span>
<span class="pl-c1">@everywhere</span> <span class="pl-c1">2</span> s <span class="pl-k">=</span> <span class="pl-c1">TestStruct</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
b <span class="pl-k">=</span> <span class="pl-c1">123.0</span>

<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, :(s<span class="pl-k">.</span>x), b)

<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, :(s<span class="pl-k">.</span>y), <span class="pl-c1">456.0</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">2</span> <span class="pl-c1">@show</span> s

<span class="pl-c"><span class="pl-c">#</span># Transfer data from worker 2 to worker 3, and change symbol name</span>
<span class="pl-c1">transfer</span>(<span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">3</span> <span class="pl-c1">@show</span> b</pre></div>
<p dir="auto">Notice that functions would evaluate the parameter before sending them to remote workers. That means:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sendto(2, a = myid())
b = getfrom(2, :a)"><pre><span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, a <span class="pl-k">=</span> <span class="pl-c1">myid</span>())
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>)</pre></div>
<p dir="auto">would return <code>b = 1</code> instead of <code>2</code>, because function <code>myid</code> is executed on master process.</p>
<p dir="auto">To send commands to remote, use macros:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@sendto 2 a = myid()
b = getfrom(2, :a)
# b = 2"><pre><span class="pl-c1">@sendto</span> <span class="pl-c1">2</span> a <span class="pl-k">=</span> <span class="pl-c1">myid</span>()
b <span class="pl-k">=</span> <span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>)
<span class="pl-c"><span class="pl-c">#</span> b = 2</span></pre></div>
<p dir="auto">Here <code>myid</code> is executed on process 2.</p>
<p dir="auto">This also works with <code>bcast</code> and <code>@bcast</code> (in fact <code>@bcast</code> and <code>@sendto</code> have identical codes)</p>
<h3 dir="auto"><a id="user-content-broadcast" class="anchor" aria-hidden="true" href="#broadcast"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>broadcast</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bcast(workers(), :c, 1.0, ParallelOperations)

bcast(workers(), c = [pi/2])

bcast(workers(), f!, :c)"><pre><span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:c</span>, <span class="pl-c1">1.0</span>, ParallelOperations)

<span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), c <span class="pl-k">=</span> [<span class="pl-c1">pi</span><span class="pl-k">/</span><span class="pl-c1">2</span>])

<span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), f!, <span class="pl-c1">:c</span>)</pre></div>
<h3 dir="auto"><a id="user-content-gather" class="anchor" aria-hidden="true" href="#gather"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>gather</h3>
<p dir="auto">Gathering is executed in the order of the first parameter</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = gather(workers(), :(c[1]))
@test d == 4.0


bcast(pids, a = 1.0)
allgather(pids, :a, :b) # allgather data to new symbol (option)
                        # If ok with unstable type, you could use `allgather(pids, :a)`
b = gather(pids, :b)
@test sum(sum(b)) == 16.0"><pre>d <span class="pl-k">=</span> <span class="pl-c1">gather</span>(<span class="pl-c1">workers</span>(), :(c[<span class="pl-c1">1</span>]))
<span class="pl-c1">@test</span> d <span class="pl-k">==</span> <span class="pl-c1">4.0</span>


<span class="pl-c1">bcast</span>(pids, a <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)
<span class="pl-c1">allgather</span>(pids, <span class="pl-c1">:a</span>, <span class="pl-c1">:b</span>) <span class="pl-c"><span class="pl-c">#</span> allgather data to new symbol (option)</span>
                        <span class="pl-c"><span class="pl-c">#</span> If ok with unstable type, you could use `allgather(pids, :a)`</span>
b <span class="pl-k">=</span> <span class="pl-c1">gather</span>(pids, <span class="pl-c1">:b</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">sum</span>(<span class="pl-c1">sum</span>(b)) <span class="pl-k">==</span> <span class="pl-c1">16.0</span></pre></div>
<h3 dir="auto"><a id="user-content-reduce" class="anchor" aria-hidden="true" href="#reduce"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>reduce</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere workers() teststruct = TestStruct(myid(), collect(1:5) .+ myid())
M = reduce(max, workers(), :(teststruct.b))


@everywhere pids a = myid()
allreduce(max, pids, :a) # allreduce data. Use allreduce(max, pids, :a, :b) for new symbol :b
b = gather(pids, :a)
@test sum(b) == 20.0"><pre><span class="pl-c1">@everywhere</span> <span class="pl-c1">workers</span>() teststruct <span class="pl-k">=</span> <span class="pl-c1">TestStruct</span>(<span class="pl-c1">myid</span>(), <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">.+</span> <span class="pl-c1">myid</span>())
M <span class="pl-k">=</span> <span class="pl-c1">reduce</span>(max, <span class="pl-c1">workers</span>(), :(teststruct<span class="pl-k">.</span>b))


<span class="pl-c1">@everywhere</span> pids a <span class="pl-k">=</span> <span class="pl-c1">myid</span>()
<span class="pl-c1">allreduce</span>(max, pids, <span class="pl-c1">:a</span>) <span class="pl-c"><span class="pl-c">#</span> allreduce data. Use allreduce(max, pids, :a, :b) for new symbol :b</span>
b <span class="pl-k">=</span> <span class="pl-c1">gather</span>(pids, <span class="pl-c1">:a</span>)
<span class="pl-c1">@test</span> <span class="pl-c1">sum</span>(b) <span class="pl-k">==</span> <span class="pl-c1">20.0</span></pre></div>
<h3 dir="auto"><a id="user-content-scatter" class="anchor" aria-hidden="true" href="#scatter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scatter</h3>
<p dir="auto">The array to scatter should have the same length as workers to receive</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="a = collect(1:4)
scatterto(workers(), a, :b, Main)
@everywhere workers() @show b"><pre>a <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>)
<span class="pl-c1">scatterto</span>(<span class="pl-c1">workers</span>(), a, <span class="pl-c1">:b</span>, Main)
<span class="pl-c1">@everywhere</span> <span class="pl-c1">workers</span>() <span class="pl-c1">@show</span> b</pre></div>
<h3 dir="auto"><a id="user-content-commonly-used-functions" class="anchor" aria-hidden="true" href="#commonly-used-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Commonly used functions</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere workers() x = 1.0

sum(workers(), :x)
allsum(workers(), :x)
maximum(workers(), :x)
allmaximum(workers(), :x)
minimum(workers(), :x)
allminimum(workers(), :x)"><pre><span class="pl-c1">@everywhere</span> <span class="pl-c1">workers</span>() x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>

<span class="pl-c1">sum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">allsum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">maximum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">allmaximum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">minimum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)
<span class="pl-c1">allminimum</span>(<span class="pl-c1">workers</span>(), <span class="pl-c1">:x</span>)</pre></div>
<h3 dir="auto"><a id="user-content-send-function-to-workers" class="anchor" aria-hidden="true" href="#send-function-to-workers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Send function to workers</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere fun() = 1

sendto(2, fun)
getfrom(2, :(fun()))

bcast(workers(), fun)
gather(workers(), :(fun()))"><pre><span class="pl-c1">@everywhere</span> <span class="pl-en">fun</span>() <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, fun)
<span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, :(<span class="pl-c1">fun</span>()))

<span class="pl-c1">bcast</span>(<span class="pl-c1">workers</span>(), fun)
<span class="pl-c1">gather</span>(<span class="pl-c1">workers</span>(), :(<span class="pl-c1">fun</span>()))</pre></div>
<p dir="auto">Functions with multiple arguments:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@everywhere m(x,y,z) = x+y+z
sendto(2, m, :((1,2,3)...))"><pre><span class="pl-c1">@everywhere</span> <span class="pl-en">m</span>(x,y,z) <span class="pl-k">=</span> x<span class="pl-k">+</span>y<span class="pl-k">+</span>z
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, m, :((<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)<span class="pl-k">.</span><span class="pl-k">..</span>))</pre></div>
<p dir="auto">Arguments can also be passed by <code>args</code> keyword, which is more user-friendly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = 1
sendto(2, m, args = (1,2,3))
sendto(2, m, :($x), args = (2, 3))
gather(m, [1,2], args = (1,2,3))
bcast([1,2], m, args = (1,2,3))"><pre>x <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, m, args <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">sendto</span>(<span class="pl-c1">2</span>, m, :(<span class="pl-k">$</span>x), args <span class="pl-k">=</span> (<span class="pl-c1">2</span>, <span class="pl-c1">3</span>))
<span class="pl-c1">gather</span>(m, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], args <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))
<span class="pl-c1">bcast</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], m, args <span class="pl-k">=</span> (<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))</pre></div>
<h3 dir="auto"><a id="user-content-type-stable" class="anchor" aria-hidden="true" href="#type-stable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Type-stable</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs(1)
@everywhere using ParallelOperations

function testPO()
    @sendto 2 a=5
    a = (@getfrom 2 a)::Int64 # This will restrict the type of a, making both a and b type-stable

    b = a+1
end

function testPOunstable()
    @sendto 2 a=5
    a = @getfrom 2 a

    b = a+1
end

function testPOfun()
    @sendto 2 a=5
    a = (getfrom(2, :a))::Int64 # This will restrict the type of a, making both a and b type-stable

    b = a+1
end

@code_warntype testPO()
@code_warntype testPOunstable()
@code_warntype testPOfun()"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ParallelOperations

<span class="pl-k">function</span> <span class="pl-en">testPO</span>()
    <span class="pl-c1">@sendto</span> <span class="pl-c1">2</span> a<span class="pl-k">=</span><span class="pl-c1">5</span>
    a <span class="pl-k">=</span> (<span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> a)<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-c"><span class="pl-c">#</span> This will restrict the type of a, making both a and b type-stable</span>

    b <span class="pl-k">=</span> a<span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">testPOunstable</span>()
    <span class="pl-c1">@sendto</span> <span class="pl-c1">2</span> a<span class="pl-k">=</span><span class="pl-c1">5</span>
    a <span class="pl-k">=</span> <span class="pl-c1">@getfrom</span> <span class="pl-c1">2</span> a

    b <span class="pl-k">=</span> a<span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">testPOfun</span>()
    <span class="pl-c1">@sendto</span> <span class="pl-c1">2</span> a<span class="pl-k">=</span><span class="pl-c1">5</span>
    a <span class="pl-k">=</span> (<span class="pl-c1">getfrom</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:a</span>))<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-c"><span class="pl-c">#</span> This will restrict the type of a, making both a and b type-stable</span>

    b <span class="pl-k">=</span> a<span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-k">end</span>

<span class="pl-c1">@code_warntype</span> <span class="pl-c1">testPO</span>()
<span class="pl-c1">@code_warntype</span> <span class="pl-c1">testPOunstable</span>()
<span class="pl-c1">@code_warntype</span> <span class="pl-c1">testPOfun</span>()</pre></div>
<h2 dir="auto"><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TODO</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Check remotecall functions</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Benchmark and optimization</li>
</ul>
<h2 dir="auto"><a id="user-content-similar-packages" class="anchor" aria-hidden="true" href="#similar-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Similar packages</h2>
<p dir="auto"><a href="https://github.com/ChrisRackauckas/ParallelDataTransfer.jl">ParallelDataTransfer</a></p>
<h2 dir="auto"><a id="user-content-package-ecosystem" class="anchor" aria-hidden="true" href="#package-ecosystem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package ecosystem</h2>
<ul dir="auto">
<li>Basic data structure: <a href="https://github.com/JuliaAstroSim/PhysicalParticles.jl">PhysicalParticles.jl</a></li>
<li>File I/O: <a href="https://github.com/JuliaAstroSim/AstroIO.jl">AstroIO.jl</a></li>
<li>Initial Condition: <a href="https://github.com/JuliaAstroSim/AstroIC.jl">AstroIC.jl</a></li>
<li>Parallelism: <a href="https://github.com/JuliaAstroSim/ParallelOperations.jl">ParallelOperations.jl</a></li>
<li>Trees: <a href="https://github.com/JuliaAstroSim/PhysicalTrees.jl">PhysicalTrees.jl</a></li>
<li>Meshes: <a href="https://github.com/JuliaAstroSim/PhysicalMeshes.jl">PhysicalMeshes.jl</a></li>
<li>Plotting: <a href="https://github.com/JuliaAstroSim/AstroPlot.jl">AstroPlot.jl</a></li>
<li>Simulation: <a href="https://github.com/JuliaAstroSim/ISLENT">ISLENT</a></li>
</ul>
</article></div>