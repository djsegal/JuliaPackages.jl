<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-concurrentcollections" class="anchor" aria-hidden="true" href="#concurrentcollections"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ConcurrentCollections</h1>
<p dir="auto"><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">ConcurrentCollections.jl provides the following concurrent collections for Julia
â‰¥ 1.7. Most of their operations are (almost) lock-free whenever appropriate.</p>
<ul dir="auto">
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.DualLinkedConcurrentRingQueue" rel="nofollow"><code>DualLinkedConcurrentRingQueue</code></a></li>
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.DualLinkedQueue" rel="nofollow"><code>DualLinkedQueue</code></a></li>
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.LinkedConcurrentRingQueue" rel="nofollow"><code>LinkedConcurrentRingQueue</code></a></li>
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.ConcurrentQueue" rel="nofollow"><code>ConcurrentQueue</code></a></li>
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.ConcurrentStack" rel="nofollow"><code>ConcurrentStack</code></a></li>
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.WorkStealingDeque" rel="nofollow"><code>WorkStealingDeque</code></a></li>
<li><a href="https://juliaconcurrent.github.io/ConcurrentCollections.jl/dev/#ConcurrentCollections.ConcurrentDict" rel="nofollow"><code>ConcurrentDict</code></a></li>
</ul>
<p dir="auto"><strong>NOTE</strong>: If you are trying to find a way to improve performance (especially
the <em>throughput</em>) of your program, it is highly recommended to look for ways to
<strong>avoid</strong> using concurrent collections first.  In particular, consider applying
the <a href="https://juliafolds.github.io/data-parallelism/" rel="nofollow">data-parallel</a> pattern to
dodge the difficulties in concurrent programming.  For example, it is often a
better idea to use task-local <strong>non</strong>-thread-safe <code>Dict</code>s instead of a
<code>ConcurrentDict</code> shared across tasks.  One of the most important techniques in
data-parallel programming is how to merge such task-local states.  For more
information, see, e.g., <a href="https://juliafolds.github.io/data-parallelism/tutorials/mutations/" rel="nofollow">Efficient and safe approaches to mutation in data
parallelism</a>.</p>
</article></div>