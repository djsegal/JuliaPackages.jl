<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-cbftoolboxjl" class="anchor" aria-hidden="true" href="#cbftoolboxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CBFToolbox.jl</h1>
<p dir="auto">A package for implementing control barrier functions (CBFs) and control Lyapunov functions (CLFs) in Julia.</p>
<h2 dir="auto"><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview</h2>
<p dir="auto">This toolbox provides utilities to construct nonlinear systems and control policies based on control barrier functions (CBFs) and control Lyapunov functions (CLFs). The utilities in this toolbox make heavy use of Julia's multiple dispatch functionality and are intended to provide a lightweight base for more complex projects that may leverage CBFs and CLFs. This package is under active development, and things may change somewhat frequently.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To download this package open the Julia REPL, enter the package manager (type <code>]</code> into the REPL) and run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add https://github.com/maxhcohen/CBFToolbox.jl.git"><pre class="notranslate"><code>add https://github.com/maxhcohen/CBFToolbox.jl.git
</code></pre></div>
<h2 dir="auto"><a id="user-content-quick-tutorial" class="anchor" aria-hidden="true" href="#quick-tutorial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick tutorial</h2>
<p dir="auto">The typical workflow when using this package is to define a system and controller, and then simulate the system and/or analyze the properties of the closed-loop system. The following code shows a simple example.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Import packages
using CBFToolbox
using LinearAlgebra
using Plots
using LaTeXStrings
default(grid=false, framestyle=:box, fontfamily=&quot;Computer Modern&quot;, label=&quot;&quot;)

# First we need to define a control affine system

n = 2 # State dimension
m = 2 # Control dimension
f(x) = zeros(2) # Drift dynamics
g(x) = diagm(ones(2)) # Control directions
Σ = ControlAffineSystem(n, m, f, g) # Construct ControlAffineSystem

# Next we need to define CBFs - we'll consider CBFs for two circular obstacles

# CBF for first obstacle
xo = [-1.5, 1.5] # Center of obstacle
ro = 0.4 # Obstacle radius
h(x) = norm(x - xo)^2 - ro^2 # Function defining the CBF
α(s) = s^3 # Extended class K function
CBF = ControlBarrierFunction(h, α) # Construct a Control Barrier function

# Repeat same steps for the other obstacle
xo2 = [-0.7, -0.2]
ro2 = 0.4
h2(x) = norm(x - xo2)^2 - ro2^2
CBF2 = ControlBarrierFunction(h2, α)

# To reach the goal we define a CLF
V(x) = 0.5x'x # Lyapunov candidate
γ(x) = V(x) # Negative definite function defining the rate of CLF decay V̇(x) ≤ -γ(x)
CLF = ControlLyapunovFunction(V, γ) # Construct a ControlLyapunovFunction

# Now we can use the CBF and CLF to define different control policies
k0 = CLFQuadProg(Σ, CLF) # CLF-QP
k = CBFQuadProg(Σ, [CBF, CBF2], k0) # CBF-QP using the CLF-QP as a nominal policy

# Start plotting some stuff

# Vector field coordinates
xx = -3:0.2:1
yy = -1:0.2:3

# Initial conditions for phase portrait
xx_phase = -3.0:1.0:1.0
yy_phase = -1.0:1.0:3.0
T = 20.0

# Plot vector field and phase portrait
fig = plot(xlabel=L&quot;x_1&quot;, ylabel=L&quot;x_2&quot;)
plot_phase_portrait!(xx_phase, yy_phase, Σ, k, T, lw=2)
plot_vector_field!(xx, yy, Σ, k)
plot_circle!(xo[1], xo[2], ro)
plot_circle!(xo2[1], xo2[2], ro2)
xlims!(-3.1, 1.0)
display(fig)"><pre><span class="pl-c"><span class="pl-c">#</span> Import packages</span>
<span class="pl-k">using</span> CBFToolbox
<span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> Plots
<span class="pl-k">using</span> LaTeXStrings
<span class="pl-c1">default</span>(grid<span class="pl-k">=</span><span class="pl-c1">false</span>, framestyle<span class="pl-k">=</span><span class="pl-c1">:box</span>, fontfamily<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Computer Modern<span class="pl-pds">"</span></span>, label<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> First we need to define a control affine system</span>

n <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> State dimension</span>
m <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Control dimension</span>
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> Drift dynamics</span>
<span class="pl-en">g</span>(x) <span class="pl-k">=</span> <span class="pl-c1">diagm</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> Control directions</span>
Σ <span class="pl-k">=</span> <span class="pl-c1">ControlAffineSystem</span>(n, m, f, g) <span class="pl-c"><span class="pl-c">#</span> Construct ControlAffineSystem</span>

<span class="pl-c"><span class="pl-c">#</span> Next we need to define CBFs - we'll consider CBFs for two circular obstacles</span>

<span class="pl-c"><span class="pl-c">#</span> CBF for first obstacle</span>
xo <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.5</span>, <span class="pl-c1">1.5</span>] <span class="pl-c"><span class="pl-c">#</span> Center of obstacle</span>
ro <span class="pl-k">=</span> <span class="pl-c1">0.4</span> <span class="pl-c"><span class="pl-c">#</span> Obstacle radius</span>
<span class="pl-en">h</span>(x) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x <span class="pl-k">-</span> xo)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> ro<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> Function defining the CBF</span>
<span class="pl-en">α</span>(s) <span class="pl-k">=</span> s<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> Extended class K function</span>
CBF <span class="pl-k">=</span> <span class="pl-c1">ControlBarrierFunction</span>(h, α) <span class="pl-c"><span class="pl-c">#</span> Construct a Control Barrier function</span>

<span class="pl-c"><span class="pl-c">#</span> Repeat same steps for the other obstacle</span>
xo2 <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.7</span>, <span class="pl-k">-</span><span class="pl-c1">0.2</span>]
ro2 <span class="pl-k">=</span> <span class="pl-c1">0.4</span>
<span class="pl-en">h2</span>(x) <span class="pl-k">=</span> <span class="pl-c1">norm</span>(x <span class="pl-k">-</span> xo2)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> ro2<span class="pl-k">^</span><span class="pl-c1">2</span>
CBF2 <span class="pl-k">=</span> <span class="pl-c1">ControlBarrierFunction</span>(h2, α)

<span class="pl-c"><span class="pl-c">#</span> To reach the goal we define a CLF</span>
<span class="pl-en">V</span>(x) <span class="pl-k">=</span> <span class="pl-c1">0.5</span>x<span class="pl-k">'</span>x <span class="pl-c"><span class="pl-c">#</span> Lyapunov candidate</span>
<span class="pl-en">γ</span>(x) <span class="pl-k">=</span> <span class="pl-c1">V</span>(x) <span class="pl-c"><span class="pl-c">#</span> Negative definite function defining the rate of CLF decay V̇(x) ≤ -γ(x)</span>
CLF <span class="pl-k">=</span> <span class="pl-c1">ControlLyapunovFunction</span>(V, γ) <span class="pl-c"><span class="pl-c">#</span> Construct a ControlLyapunovFunction</span>

<span class="pl-c"><span class="pl-c">#</span> Now we can use the CBF and CLF to define different control policies</span>
k0 <span class="pl-k">=</span> <span class="pl-c1">CLFQuadProg</span>(Σ, CLF) <span class="pl-c"><span class="pl-c">#</span> CLF-QP</span>
k <span class="pl-k">=</span> <span class="pl-c1">CBFQuadProg</span>(Σ, [CBF, CBF2], k0) <span class="pl-c"><span class="pl-c">#</span> CBF-QP using the CLF-QP as a nominal policy</span>

<span class="pl-c"><span class="pl-c">#</span> Start plotting some stuff</span>

<span class="pl-c"><span class="pl-c">#</span> Vector field coordinates</span>
xx <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">1</span>
yy <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> Initial conditions for phase portrait</span>
xx_phase <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">3.0</span><span class="pl-k">:</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">1.0</span>
yy_phase <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">1.0</span><span class="pl-k">:</span><span class="pl-c1">3.0</span>
T <span class="pl-k">=</span> <span class="pl-c1">20.0</span>

<span class="pl-c"><span class="pl-c">#</span> Plot vector field and phase portrait</span>
fig <span class="pl-k">=</span> <span class="pl-c1">plot</span>(xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x_1<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">L</span>"</span>x_2<span class="pl-pds">"</span></span>)
<span class="pl-c1">plot_phase_portrait!</span>(xx_phase, yy_phase, Σ, k, T, lw<span class="pl-k">=</span><span class="pl-c1">2</span>)
<span class="pl-c1">plot_vector_field!</span>(xx, yy, Σ, k)
<span class="pl-c1">plot_circle!</span>(xo[<span class="pl-c1">1</span>], xo[<span class="pl-c1">2</span>], ro)
<span class="pl-c1">plot_circle!</span>(xo2[<span class="pl-c1">1</span>], xo2[<span class="pl-c1">2</span>], ro2)
<span class="pl-c1">xlims!</span>(<span class="pl-k">-</span><span class="pl-c1">3.1</span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">display</span>(fig)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/maxhcohen/CBFToolbox.jl/blob/main/cbf_example.png"><img src="https://github.com/maxhcohen/CBFToolbox.jl/raw/main/cbf_example.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-questions-and-contributions" class="anchor" aria-hidden="true" href="#questions-and-contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Questions and Contributions</h2>
<p dir="auto">If you have any questions about the toolbox, have suggestions for improvements, or would like to make your own contribution to the toolbox feel free to reach out to the repo's owner at <a href="mailto:maxcohen@bu.edu">maxcohen@bu.edu</a>.</p>
</article></div>