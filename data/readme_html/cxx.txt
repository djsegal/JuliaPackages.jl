<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-cxxjl" class="anchor" aria-hidden="true" href="#cxxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cxx.jl</h2>
<p><a href="https://travis-ci.org/JuliaInterop/Cxx.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dc922f65f949cdf02fd24bf7f777e218ef3abeaf/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961496e7465726f702f4378782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaInterop/Cxx.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/JuliaInterop/cxx-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/912760475c1477c2332e1ae791a8ee5254a706a3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75696d7632623473687362356e64636a2f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/uimv2b4shsb5ndcj/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaInterop/Cxx.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/91d32db21b21f8cebd903f8b3fdcedc46f60ceb7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961496e7465726f702f4378782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaInterop/Cxx.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://JuliaInterop.github.io/Cxx.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaInterop.github.io/Cxx.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></p>
<p>The Julia C++ Foreign Function Interface (FFI) and REPL.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/screenshot.png"><img src="docs/screenshot.png" alt="REPL Screenshot" title="C++ REPL Screenshot" style="max-width:100%;"></a></p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>Now, this package provides an out-of-box installation experience on 64-bit Linux, macOS and Windows.</p>
<pre><code>pkg&gt; add Cxx
</code></pre>
<p>Note that Windows support is still in its early stage, so feel free to submit feedback in the issue tracker.</p>
<h3><a id="user-content-build-from-source" class="anchor" aria-hidden="true" href="#build-from-source"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build from source</h3>
<h4><a id="user-content-build-requirements" class="anchor" aria-hidden="true" href="#build-requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Build requirements</h4>
<p>In addition to the <a href="https://github.com/JuliaLang/julia#required-build-tools-and-external-libraries">system requirements</a> to build julia itself, the following are required:</p>
<ul>
<li><em>Debian/Ubuntu</em>: <code>libedit-dev</code>, <code>libncurses5-dev</code></li>
<li><em>RedHat/CentOS</em>: <code>libedit-devel</code></li>
</ul>
<h4><a id="user-content-building-cxx" class="anchor" aria-hidden="true" href="#building-cxx"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Building Cxx</h4>
<p>Launch Julia (version 1.0 or later), and in the terminal type</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> build Cxx</pre></div>
<h3><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How it works</h3>
<p>The main interface provided by Cxx.jl is the @cxx macro. It supports two main usages:</p>
<ul>
<li>Static function call
@cxx mynamespace::func(args...)</li>
<li>Membercall (where m is a CppPtr, CppRef or CppValue)
@cxx m-&gt;foo(args...)</li>
</ul>
<p>To embed C++ functions in Julia, there are two main approaches:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Using @cxx (e.g.):   </span>
<span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1"> <span class="pl-k">void</span> <span class="pl-en">cppfunction</span>(args){ . . .} </span><span class="pl-pds">"""</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">@cxx</span> <span class="pl-c1">cppfunction</span>(args)

<span class="pl-c"><span class="pl-c">#</span> Using icxx (e.g.):</span>
julia_function (args) <span class="pl-c1">icxx</span><span class="pl-pds">"""</span><span class="pl-s1"> *code here*  </span><span class="pl-pds">"""</span> <span class="pl-k">end</span></pre></div>
<h3><a id="user-content-the-c-repl" class="anchor" aria-hidden="true" href="#the-c-repl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The C++ REPL</h3>
<p>This package contains an experimental C++ REPL feature. Using the package
will automatically add a new pane to your REPL that is accessible by pressing the
<code>&lt;</code> key.</p>
<h3><a id="user-content-using-cxxjl" class="anchor" aria-hidden="true" href="#using-cxxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>Using Cxx.jl:</strong></h3>
<h4><a id="user-content-example-1-embedding-a-simple-c-function-in-julia" class="anchor" aria-hidden="true" href="#example-1-embedding-a-simple-c-function-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1: Embedding a simple C++ function in Julia</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> include headers</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Cxx
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1"> #include&lt;iostream&gt; </span><span class="pl-pds">"""</span>  

<span class="pl-c"><span class="pl-c">#</span> Declare the function</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1">  </span>
<span class="pl-s1">         <span class="pl-k">void</span> <span class="pl-en">mycppfunction</span>() {   </span>
<span class="pl-s1">            int z <span class="pl-k">=</span> <span class="pl-c1">0</span>;</span>
<span class="pl-s1">            int y <span class="pl-k">=</span> <span class="pl-c1">5</span>;</span>
<span class="pl-s1">            int x <span class="pl-k">=</span> <span class="pl-c1">10</span>;</span>
<span class="pl-s1">            z <span class="pl-k">=</span> x<span class="pl-k">*</span>y <span class="pl-k">+</span> <span class="pl-c1">2</span>;</span>
<span class="pl-s1">            std<span class="pl-k">::</span><span class="pl-c1">cout</span> <span class="pl-k">&lt;&lt;</span> <span class="pl-s"><span class="pl-pds">"</span>The number is <span class="pl-pds">"</span></span> <span class="pl-k">&lt;&lt;</span> z <span class="pl-k">&lt;&lt;</span> std<span class="pl-k">::</span><span class="pl-c1">endl</span>;</span>
<span class="pl-s1">         }</span>
<span class="pl-s1">      </span><span class="pl-pds">"""</span>
<span class="pl-c"><span class="pl-c">#</span> Convert C++ to Julia function</span>
julia<span class="pl-k">&gt;</span> <span class="pl-en">julia_function</span>() <span class="pl-k">=</span> <span class="pl-c1">@cxx</span> <span class="pl-c1">mycppfunction</span>()
julia_function (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

<span class="pl-c"><span class="pl-c">#</span> Run the function</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">julia_function</span>()
The number is <span class="pl-c1">52</span></pre></div>
<h4><a id="user-content-example-2-pass-numeric-arguments-from-julia-to-c" class="anchor" aria-hidden="true" href="#example-2-pass-numeric-arguments-from-julia-to-c"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2: Pass numeric arguments from Julia to C++</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> jnum <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">           <span class="pl-k">void</span> <span class="pl-en">printme</span>(int x) {</span>
<span class="pl-s1">              std<span class="pl-k">::</span><span class="pl-c1">cout</span> <span class="pl-k">&lt;&lt;</span> x <span class="pl-k">&lt;&lt;</span> std<span class="pl-k">::</span><span class="pl-c1">endl</span>;</span>
<span class="pl-s1">           }</span>
<span class="pl-s1">       </span><span class="pl-pds">"""</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cxx</span> <span class="pl-c1">printme</span>(jnum)
<span class="pl-c1">10</span></pre></div>
<h4><a id="user-content-example-3-pass-strings-from-julia-to-c" class="anchor" aria-hidden="true" href="#example-3-pass-strings-from-julia-to-c"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 3: Pass strings from Julia to C++</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">         <span class="pl-k">void</span> <span class="pl-en">printme</span>(<span class="pl-k">const</span> char <span class="pl-k">*</span>name) {</span>
<span class="pl-s1">            <span class="pl-k">//</span> <span class="pl-k">const</span> char<span class="pl-k">*</span> <span class="pl-k">=&gt;</span> std<span class="pl-k">::</span><span class="pl-c1">string</span></span>
<span class="pl-s1">            std<span class="pl-k">::</span><span class="pl-c1">string</span> sname <span class="pl-k">=</span> name;</span>
<span class="pl-s1">            <span class="pl-k">//</span> print it out</span>
<span class="pl-s1">            std<span class="pl-k">::</span><span class="pl-c1">cout</span> <span class="pl-k">&lt;&lt;</span> sname <span class="pl-k">&lt;&lt;</span> std<span class="pl-k">::</span><span class="pl-c1">endl</span>;</span>
<span class="pl-s1">         }</span>
<span class="pl-s1">     </span><span class="pl-pds">"""</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cxx</span> <span class="pl-c1">printme</span>(<span class="pl-c1">pointer</span>(<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>))
   John</pre></div>
<h4><a id="user-content-example-4-pass-a-julia-expression-to-c" class="anchor" aria-hidden="true" href="#example-4-pass-a-julia-expression-to-c"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 4: Pass a Julia expression to C++</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">          <span class="pl-k">void</span> <span class="pl-en">testJuliaPrint</span>() {</span>
<span class="pl-s1">              <span class="pl-k">$</span>:(<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>To end this test, press any key<span class="pl-pds">"</span></span>)<span class="pl-k">::</span><span class="pl-c1">Nothing</span>);</span>
<span class="pl-s1">          }</span>
<span class="pl-s1">       </span><span class="pl-pds">"""</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cxx</span> <span class="pl-c1">testJuliaPrint</span>()
       To <span class="pl-k">end</span> this test, press any key</pre></div>
<h4><a id="user-content-example-5-embedding-c-code-inside-a-julia-function" class="anchor" aria-hidden="true" href="#example-5-embedding-c-code-inside-a-julia-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 5: Embedding C++ code inside a Julia function</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">playing</span>()
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>
        <span class="pl-c1">icxx</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">            <span class="pl-k">int</span> tellme;</span>
<span class="pl-s1">            std::cout&lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>Please enter a number: <span class="pl-pds">"</span></span> &lt;&lt; std::endl;</span>
<span class="pl-s1">            std::cin &gt;&gt; tellme;</span>
<span class="pl-s1">            std::cout&lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>Your number is <span class="pl-pds">"</span></span>&lt;&lt; tellme &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span> &lt;&lt;std::endl;</span>
<span class="pl-s1">        </span><span class="pl-pds">"""</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c1">playing</span>();</pre></div>
<h4><a id="user-content-example-6-using-c-enums" class="anchor" aria-hidden="true" href="#example-6-using-c-enums"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 6: Using C++ enums</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1"></span>
<span class="pl-s1">       <span class="pl-k">class</span> <span class="pl-en">Klassy</span> {</span>
<span class="pl-s1">           public<span class="pl-k">:</span></span>
<span class="pl-s1">               enum Foo { Bar, Baz };</span>
<span class="pl-s1">               <span class="pl-k">static</span> Foo <span class="pl-en">exec</span>(Foo x) { <span class="pl-k">return</span> x; }</span>
<span class="pl-s1">       };</span>
<span class="pl-s1">       </span><span class="pl-pds">"""</span>
<span class="pl-c"><span class="pl-c">#</span> Access enum</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cxx</span> Klassy<span class="pl-k">::</span><span class="pl-c1">Bar</span>
<span class="pl-c1">CppEnum</span><span class="pl-c1">{Symbol("Klassy::Foo")}</span>(<span class="pl-c1">0</span>)

<span class="pl-c"><span class="pl-c">#</span> Pass enum as an argument</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cxx</span> Klassy<span class="pl-k">::</span><span class="pl-c1">exec</span>(<span class="pl-c1">@cxx</span>(Klassy<span class="pl-k">::</span><span class="pl-c1">Baz</span>))
<span class="pl-c1">CppEnum</span><span class="pl-c1">{Symbol("Klassy::Foo")}</span>(<span class="pl-c1">1</span>)</pre></div>
<h4><a id="user-content-example-7-c-hello-world-class" class="anchor" aria-hidden="true" href="#example-7-c-hello-world-class"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 7: C++ Hello World class</h4>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Cxx
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxx</span><span class="pl-pds">"""</span><span class="pl-s1">#include &lt;iostream&gt;</span>
<span class="pl-s1">       <span class="pl-k">class</span> <span class="pl-en">Hello</span></span>
<span class="pl-s1">       {</span>
<span class="pl-s1">           public<span class="pl-k">:</span></span>
<span class="pl-s1">               void <span class="pl-c1">hello_world</span>(<span class="pl-k">const</span> char <span class="pl-k">*</span>now){</span>
<span class="pl-s1">                   std<span class="pl-k">::</span><span class="pl-c1">string</span> snow <span class="pl-k">=</span> now;</span>
<span class="pl-s1">                   std<span class="pl-k">::</span><span class="pl-c1">cout</span> <span class="pl-k">&lt;&lt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello World! Now is <span class="pl-pds">"</span></span> <span class="pl-k">&lt;&lt;</span> snow <span class="pl-k">&lt;&lt;</span> std<span class="pl-k">::</span><span class="pl-c1">endl</span>;</span>
<span class="pl-s1">               }<span class="pl-ii"></span></span>
<span class="pl-s1">        };</span><span class="pl-pds">"""</span>
julia<span class="pl-k">&gt;</span> hello_class <span class="pl-k">=</span> <span class="pl-c1">@cxxnew</span> <span class="pl-c1">Hello</span>()
julia<span class="pl-k">&gt;</span> tstamp <span class="pl-k">=</span> <span class="pl-c1">string</span>(Dates<span class="pl-k">.</span><span class="pl-c1">now</span>())
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cxx</span> hello_class <span class="pl-k">-&gt;</span> <span class="pl-c1">hello_world</span>(<span class="pl-c1">pointer</span>(tstamp))
Hello World! Now is <span class="pl-c1">2015</span><span class="pl-k">-</span><span class="pl-c1">06</span><span class="pl-k">-</span><span class="pl-c1">19</span>T11<span class="pl-k">:</span><span class="pl-c1">20</span><span class="pl-k">:</span><span class="pl-c1">31</span>
</pre></div>
<h4><a id="user-content-example-8-using-c-with-shared-libraries" class="anchor" aria-hidden="true" href="#example-8-using-c-with-shared-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 8: Using C++ with shared libraries</h4>
<p>ArrayMaker.h</p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">ifndef</span> ARRAYMAKER_H
#<span class="pl-k">define</span> <span class="pl-en">ARRAYMAKER_H</span>

<span class="pl-k">class</span> <span class="pl-en">ArrayMaker</span>
{
    <span class="pl-k">private:</span>
        <span class="pl-k">int</span> iNumber;
        <span class="pl-k">float</span> <span class="pl-smi">fNumber</span>;
        <span class="pl-k">float</span>* <span class="pl-smi">fArr</span>;
    <span class="pl-k">public:</span>
        <span class="pl-en">ArrayMaker</span>(<span class="pl-k">int</span>, <span class="pl-k">float</span>);
        <span class="pl-k">float</span>* <span class="pl-en">fillArr</span>();
};

#<span class="pl-k">endif</span></pre></div>
<p>ArrayMaker.cpp</p>
<div class="highlight highlight-source-c++"><pre>#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">"</span>ArrayMaker.h<span class="pl-pds">"</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span>

<span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span><span class="pl-k">;</span>

<span class="pl-en">ArrayMaker::ArrayMaker</span>(<span class="pl-k">int</span> iNum, <span class="pl-k">float</span> <span class="pl-smi">fNum</span>) {
    cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>Got arguments: <span class="pl-pds">"</span></span> &lt;&lt; iNum &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>, and <span class="pl-pds">"</span></span> &lt;&lt; <span class="pl-smi">fNum</span> &lt;&lt; endl;
    iNumber = iNum;
    <span class="pl-smi">fNumber</span> = <span class="pl-smi">fNum</span>;
    <span class="pl-smi">fArr</span> = <span class="pl-k">new</span> <span class="pl-k">float</span>[iNumber];
}

<span class="pl-k">float</span>* <span class="pl-en">ArrayMaker::fillArr</span>() {
    cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>Filling the array<span class="pl-pds">"</span></span> &lt;&lt; endl;
    <span class="pl-k">for</span> (<span class="pl-k">int</span> i=<span class="pl-c1">0</span>; i &lt; iNumber; i++) {
        <span class="pl-smi">fArr</span>[i] = <span class="pl-smi">fNumber</span>;
        <span class="pl-smi">fNumber</span> *= <span class="pl-c1">2</span>;
    }
    <span class="pl-k">return</span> <span class="pl-smi">fArr</span>;
}</pre></div>
<p>Compiling into shared library</p>
<pre><code>&gt;&gt; g++ -shared -fPIC ArrayMaker.cpp -o libArrayMaker.so
</code></pre>
<p>Using in Julia</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Cxx
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Libdl

<span class="pl-c"><span class="pl-c">#</span> Importing shared library and header file</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> path_to_lib <span class="pl-k">=</span> <span class="pl-c1">pwd</span>()
julia<span class="pl-k">&gt;</span> <span class="pl-c1">addHeaderDir</span>(path_to_lib, kind<span class="pl-k">=</span>C_System)
julia<span class="pl-k">&gt;</span> Libdl<span class="pl-k">.</span><span class="pl-c1">dlopen</span>(path_to_lib <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>/libArrayMaker.so<span class="pl-pds">"</span></span>, Libdl<span class="pl-k">.</span>RTLD_GLOBAL)
Ptr{Cvoid} @<span class="pl-c1">0x000000000728e6d0</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">cxxinclude</span>(<span class="pl-s"><span class="pl-pds">"</span>ArrayMaker.h<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Creating class object</span>
julia<span class="pl-k">&gt;</span> maker <span class="pl-k">=</span> <span class="pl-c1">@cxxnew</span> <span class="pl-c1">ArrayMaker</span>(<span class="pl-c1">5</span>, <span class="pl-c1">2.0</span>)
Got arguments<span class="pl-k">:</span> <span class="pl-c1">5</span>, and <span class="pl-c1">2</span>
Cxx<span class="pl-k">.</span><span class="pl-c1">CppPtr</span><span class="pl-c1">{Cxx.CppValue{Cxx.CppBaseType{:ArrayMaker},(false,false,false)},(false,false,false)}</span>(Ptr{Cvoid} @<span class="pl-c1">0x00000000060ab570</span>)

julia<span class="pl-k">&gt;</span> arr <span class="pl-k">=</span> <span class="pl-c1">@cxx</span> maker<span class="pl-k">-&gt;</span><span class="pl-c1">fillArr</span>()
Filling the array

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unsafe_wrap</span>(Array, arr, <span class="pl-c1">5</span>)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float32,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.0</span>
  <span class="pl-c1">4.0</span>
  <span class="pl-c1">8.0</span>
 <span class="pl-c1">16.0</span>
 <span class="pl-c1">32.0</span></pre></div>
<h3><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Troubleshooting</h3>
<h4><a id="user-content-replacement-the-current-compiler-instance" class="anchor" aria-hidden="true" href="#replacement-the-current-compiler-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Replacement the current compiler instance</h4>
<p>As of now Cxx.jl does not allow redefinition of a function. In order to allow defining the same function multiple times the current compiler instance can be replaced by typing</p>
<div class="highlight highlight-source-julia"><pre>__current_compiler__ <span class="pl-k">=</span> Cxx<span class="pl-k">.</span><span class="pl-c1">new_clang_instance</span>()</pre></div>
</article></div>