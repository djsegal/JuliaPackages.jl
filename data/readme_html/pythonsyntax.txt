<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pythonsyntax" class="anchor" aria-hidden="true" href="#pythonsyntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PythonSyntax</h1>
<p><a href="https://travis-ci.org/TotalVerb/PythonSyntax.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8aca322b87321b1f5e5344503c111a31fd58de73/68747470733a2f2f7472617669732d63692e6f72672f546f74616c566572622f507974686f6e53796e7461782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/TotalVerb/PythonSyntax.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/TotalVerb/PythonSyntax.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/24d1e7b7896d2f43908469e8367195432ad386b3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f546f74616c566572622f507974686f6e53796e7461782e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/TotalVerb/PythonSyntax.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/TotalVerb/PythonSyntax.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/435ae401c02d32870b2f31a787853dcdf31c5737/687474703a2f2f636f6465636f762e696f2f6769746875622f546f74616c566572622f507974686f6e53796e7461782e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/TotalVerb/PythonSyntax.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package is under development and anything might change at any time. It also currently doesn't work on any release version of Julia, except for 0.5.2.</p>
<p>PythonSyntax.jl is a little like <a href="https://github.com/swadey/LispSyntax.jl">LispSyntax.jl</a>, where this package gets its inspiration. But this isn't lisp syntax, it's Python syntax.</p>
<p>You need to use Python 3 with, e.g. by (and then restarting Julia after):</p>
<pre><code>ENV["PYTHON"] = "/usr/bin/python3"
Pkg.build("PyCall")
</code></pre>
<p>The easiest way to use this package is to define modules:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> PythonSyntax

<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pymodule</span>"""</span></span>
<span class="pl-s">FizzBuzz</span>
<span class="pl-s"></span>
<span class="pl-s">def fizzbuzz(n):</span>
<span class="pl-s">    # this is still Julia, even though it looks like Python!</span>
<span class="pl-s">    # so range includes 1 and has length n â€” very different from Python.</span>
<span class="pl-s">    for i in range(1, n):</span>
<span class="pl-s">        if i % 15 == 0:</span>
<span class="pl-s">            println("FizzBuzz")</span>
<span class="pl-s">        elif i % 3 == 0:</span>
<span class="pl-s">            println("Fizz")</span>
<span class="pl-s">        elif i % 5 == 0:</span>
<span class="pl-s">            println("Buzz")</span>
<span class="pl-s">        else:</span>
<span class="pl-s">            println(i)</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

FizzBuzz<span class="pl-k">.</span><span class="pl-c1">fizzbuzz</span>(<span class="pl-c1">10</span>)</pre></div>
<p>Remember: this is Julia, not Python. The syntax is Pythonic but the semantics are Julian.</p>
<h2><a id="user-content-rewriting" class="anchor" aria-hidden="true" href="#rewriting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rewriting</h2>
<p>Some identifiers are rewritten. Currently, the only rewriting is that <code>_b</code> suffixes in Python get mapped to <code>!</code> suffixes in Julia.</p>
<h2><a id="user-content-magic-syntax" class="anchor" aria-hidden="true" href="#magic-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Magic Syntax</h2>
<p><code>PythonSyntax</code> introduces some magic syntax that is unlike anything else in the Python language.</p>
<ul>
<li><code>__jl__("2:2:10")</code> escapes to Julia syntax. This can be useful if something has no clean way of being expressed pythonically. Note that this is not a runtime method: only string literals, and not strings computed at runtime, can be used.</li>
<li><code>__mc__(time, [i**2 for i in range(1, 10)])</code> allows calling Julia macros. Any number of arguments can be provided; they are given to the macro as expressions and are not evaluated, exactly as in Julia.</li>
</ul>
</article></div>