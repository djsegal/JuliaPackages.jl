<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-periodicgraphequilibriumplacement" class="anchor" aria-hidden="true" href="#periodicgraphequilibriumplacement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PeriodicGraphEquilibriumPlacement</h1>
<p dir="auto"><a href="https://github.com/Liozou/PeriodicGraphEquilibriumPlacement.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/Liozou/PeriodicGraphEquilibriumPlacement.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Liozou/PeriodicGraphEquilibriumPlacement.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/100437b3cc4a7ca536ca886fddb36f1f2593300864026461f5accaaea019be05/68747470733a2f2f636f6465636f762e696f2f67682f4c696f7a6f752f506572696f6469634772617068457175696c69627269756d506c6163656d656e742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Liozou/PeriodicGraphEquilibriumPlacement.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for computing the <em>equilibrium</em>, or <em>barycentric</em>, placement of vertices
of a periodic graph, as defined by <a href="https://doi.org/10.1107/S0108767303012017" rel="nofollow">Olaf Delgado-Friedrichs and Michael O'Keeffe</a>.
It is accessible through the <code>equilibrium</code> exported function, which returns a matrix of
rational coordinates that can be fed to the <a href="https://liozou.github.io/PeriodicGraphEmbeddings.jl/dev/types/#PeriodicGraphEmbeddings.PeriodicGraphEmbedding-Union%7BTuple%7BT%7D,%20Tuple%7BD%7D,%20Tuple%7BPeriodicGraph%7BD%7D,%20AbstractMatrix%7BT%7D,%20Cell%7D%7D%20where%20%7BD,%20T%7D" rel="nofollow"><code>PeriodicGraphEmbedding</code></a>
or
<a href="https://liozou.github.io/PeriodicGraphEmbeddings.jl/dev/types/#PeriodicGraphEmbeddings.SortedPeriodicGraphEmbedding-Union%7BTuple%7BT%7D,%20Tuple%7BD%7D,%20Tuple%7BPeriodicGraph%7BD%7D,%20AbstractMatrix%7BT%7D%20where%20T,%20Cell%7D%7D%20where%20%7BD,%20T%7D" rel="nofollow"><code>SortedPeriodicGraphEmbedding</code></a>
methods from <a href="https://github.com/Liozou/PeriodicGraphEmbeddings.jl">PeriodicGraphEmbeddings.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; tbo = PeriodicGraph3D(&quot;3 1 2 0 0 0 1 3 0 0 0 1 4 0 0 0 2 5 0 0 0 2 6 0 0 0 2 7 0 0 0 3 6 0 0 1 3 8 0 0 0 3 9 0 0 0 4 6 1 0 0 4 10 0 0 0 4 11 0 0 0 5 12 0 0 0 5 13 0 0 0 7 12 1 1 -1 7 13 0 1 0 8 12 0 0 0 8 14 0 0 0 9 12 1 1 0 9 14 0 1 0 10 13 0 0 0 10 14 0 0 0 11 13 1 1 0 11 14 1 1 -1&quot;);

julia&gt; equilibrium(tbo)
3×14 Matrix{Rational{Int64}}:
 0//1  -1//6  -1//6   1//3  -1//3  -1//3   0//1  -1//3  0//1   0//1   2//3  -2//3  -1//6  -1//6
 0//1   0//1   0//1   0//1  -1//3   0//1   1//3  -1//3  1//3  -1//3   1//3  -1//2  -1//2  -1//2
 0//1  -1//6   1//3  -1//6   0//1  -1//3  -1//3   1//3  1//3   0//1  -1//3   1//3  -1//6   1//3"><pre>julia<span class="pl-k">&gt;</span> tbo <span class="pl-k">=</span> <span class="pl-c1">PeriodicGraph3D</span>(<span class="pl-s"><span class="pl-pds">"</span>3 1 2 0 0 0 1 3 0 0 0 1 4 0 0 0 2 5 0 0 0 2 6 0 0 0 2 7 0 0 0 3 6 0 0 1 3 8 0 0 0 3 9 0 0 0 4 6 1 0 0 4 10 0 0 0 4 11 0 0 0 5 12 0 0 0 5 13 0 0 0 7 12 1 1 -1 7 13 0 1 0 8 12 0 0 0 8 14 0 0 0 9 12 1 1 0 9 14 0 1 0 10 13 0 0 0 10 14 0 0 0 11 13 1 1 0 11 14 1 1 -1<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">equilibrium</span>(tbo)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">14</span> Matrix{Rational{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>   <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>
 <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">2</span>
 <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>   <span class="pl-c1">0</span><span class="pl-k">//</span><span class="pl-c1">1</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>  <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">6</span>   <span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span></pre></div>
<p dir="auto">The implementation is optimized through a custom solver specialized for the exact
resolution of sparse integer linear system through <a href="https://doi.org/10.1007/bf01459082" rel="nofollow">Dixon's algorithm</a>.
The solver is directly accessible through the <code>dixon_solve</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = sparse([-3 0 2 0; 0 -5 2 3; 2 2 -2 0; 0 3 0 -3]);

julia&gt; Y = [1 1; 0 2; 1 -1; 0 0];

julia&gt; A * dixon_solve(Val(2), A, Y) == Y
true"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">sparse</span>([<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-c1">0</span> <span class="pl-c1">2</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">5</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>; <span class="pl-c1">2</span> <span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-c1">0</span>; <span class="pl-c1">0</span> <span class="pl-c1">3</span> <span class="pl-c1">0</span> <span class="pl-k">-</span><span class="pl-c1">3</span>]);

julia<span class="pl-k">&gt;</span> Y <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">2</span>; <span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0</span>];

julia<span class="pl-k">&gt;</span> A <span class="pl-k">*</span> <span class="pl-c1">dixon_solve</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">2</span>), A, Y) <span class="pl-k">==</span> Y
<span class="pl-c1">true</span></pre></div>
<p dir="auto">The first argument of <code>dixon_solve</code> must be <code>Val(size(Y)[2])</code> and the second must be square.</p>
<p dir="auto">The package also exposes a <code>rational_solve</code> function which solves the same systems through
a simpler LU decomposition approach. It serves as fallback to <code>dixon_solve</code> when Dixon's
algorithm fails, but can also be used as-is with the same API. Its performance is in
general lower than <code>dixon_solve</code>, often significantly so.</p>
<p dir="auto">See also:</p>
<ul dir="auto">
<li><a href="https://github.com/Liozou/PeriodicGraphs.jl">PeriodicGraphs.jl</a> for the
underlying library and the API of the <code>PeriodicGraph</code> type.</li>
<li><a href="https://github.com/coudertlab/CrystalNets.jl">CrystalNets.jl</a> for a dependent package
specialized on crystal nets.</li>
</ul>
</article></div>