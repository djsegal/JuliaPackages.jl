<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-muxjl" class="anchor" aria-hidden="true" href="#muxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mux.jl</h1>
<p><a href="https://travis-ci.org/JuliaWeb/Mux.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/47e21ff8bc3de91bfa4a0a6a553021e916dd081c/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f4d75782e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/Mux.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/shashi/mux-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/39afb1bc6530f43acb9f6fc2406f72e7a3775c61/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f69757970356a727265377339303561792f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/iuyp5jrre7s905ay/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JuliaWeb/Mux.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/aba2aa67ce7f5c918a8ea58f7b35fb44b81d75d6/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a756c69615765622f4d75782e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="https://codecov.io/github/JuliaWeb/Mux.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=Mux" rel="nofollow"><img src="https://camo.githubusercontent.com/632a3a46098d3b2d5085a2099af1c7b4f4728551/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d75785f302e332e737667" alt="Mux" data-canonical-src="http://pkg.julialang.org/badges/Mux_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Mux" rel="nofollow"><img src="https://camo.githubusercontent.com/b401e377f330830feb0db08166022a3aa0c7d6ed/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4d75785f302e342e737667" alt="Mux" data-canonical-src="http://pkg.julialang.org/badges/Mux_0.4.svg" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Mux<span class="pl-pds">"</span></span>)</pre></div>
<p>Mux.jl gives your Julia web services some closure. Mux allows you to
define servers in terms of highly modular and composable components
called middleware, with the aim of making both simple and complex
servers as simple as possible to throw together.</p>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Mux

<span class="pl-c1">@app</span> test <span class="pl-k">=</span> (
  Mux<span class="pl-k">.</span>defaults,
  <span class="pl-c1">page</span>(<span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt;Hello World!&lt;/h1&gt;<span class="pl-pds">"</span></span>)),
  <span class="pl-c1">page</span>(<span class="pl-s"><span class="pl-pds">"</span>/about<span class="pl-pds">"</span></span>,
       <span class="pl-c1">probabilty</span>(<span class="pl-c1">0.1</span>, <span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt;Boo!&lt;/h1&gt;<span class="pl-pds">"</span></span>)),
       <span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt;About Me&lt;/h1&gt;<span class="pl-pds">"</span></span>)),
  <span class="pl-c1">page</span>(<span class="pl-s"><span class="pl-pds">"</span>/user/:user<span class="pl-pds">"</span></span>, req <span class="pl-k">-&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt;Hello, <span class="pl-v">$(req[<span class="pl-c1">:params</span>][<span class="pl-c1">:user</span>])</span>!&lt;/h1&gt;<span class="pl-pds">"</span></span>),
  Mux<span class="pl-k">.</span><span class="pl-c1">notfound</span>())

<span class="pl-c1">serve</span>(test)</pre></div>
<p>You can run this demo by entering the successive forms into the Julia
REPL. The code displays a "hello, world" at <code>localhost:8000</code>, with an
about page at <code>/about</code> and another hello at <code>/user/[your name]</code>.</p>
<p>The <code>@app</code> macro allows the server to be redefined on the fly, and you
can test this by editing the <code>hello</code> text and re-evaluating. (don't
re-evalute <code>serve(test)</code>)</p>
<h2><a id="user-content-technical-overview" class="anchor" aria-hidden="true" href="#technical-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Technical Overview</h2>
<p>Mux.jl is at heart a control flow library, with a <a href="https://github.com/one-more-minute/Mux.jl/blob/master/src/Mux.jl#L7-L16">very small core</a>. It's not important to understand that code exactly as long as you understand what it achieves.</p>
<p>There are three concepts core to Mux.jl: Middleware (which should be familiar
from the web libraries of other languages), stacking, and branching.</p>
<h3><a id="user-content-apps-and-middleware" class="anchor" aria-hidden="true" href="#apps-and-middleware"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Apps and Middleware</h3>
<p>An <em>app</em> or <em>endpoint</em> is simply a function of a request which produces
a response:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">myapp</span>(req)
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;h1&gt;Hello, <span class="pl-v">$(req[<span class="pl-c1">:params</span>][<span class="pl-c1">:user</span>])</span>!&lt;/h1&gt;<span class="pl-pds">"</span></span>
<span class="pl-k">end</span></pre></div>
<p>In principle this should say "hi" to our lovely user. But we have a
problem – where does the user's name come from? Ideally, our app
function doesn't need to know – it's simply handled at some point up the
chain (just the same as we don't parse the raw HTTP data, for example).</p>
<p>One way to solve this is via <em>middleware</em>. Say we get <code>:user</code> from a cookie:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">username</span>(app, req)
  req[<span class="pl-c1">:params</span>][<span class="pl-c1">:user</span>] <span class="pl-k">=</span> req[<span class="pl-c1">:cookies</span>][<span class="pl-c1">:user</span>]
  <span class="pl-k">return</span> <span class="pl-c1">app</span>(req) <span class="pl-c"><span class="pl-c">#</span> We could also alter the response, but don't want to here</span>
<span class="pl-k">end</span></pre></div>
<p>Middleware simply takes our request and modifies it appropriately, so
that data needed later on is available. This example is pretty trivial,
but we could equally have middleware which handles authentication and
encryption, processes cookies or file uploads, provides default headers,
and more.</p>
<p>We can then call our new version of the app like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">username</span>(myapp, req)</pre></div>
<p>In fact, we can generate a whole new version of the app which has username
support built in:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">app2</span>(req)
  <span class="pl-k">return</span> <span class="pl-c1">username</span>(myapp, req)
<span class="pl-k">end</span></pre></div>
<p>But if we have a lot of middleware, we're going to end up with a lot of <code>appX</code> functions.
For that reason we can use the <code>mux</code> function instead, which creates the new app for us:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">mux</span>(username, myapp)</pre></div>
<p>This returns a <em>new</em> function which is equivalent to <code>app2</code> above. We
just didn't have to write it by hand.</p>
<h3><a id="user-content-stacking" class="anchor" aria-hidden="true" href="#stacking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stacking</h3>
<p>Now suppose you have lots of middleware – one to parse the HTTP request into
a dict of properties, one to check user authentication, one to catches errors,
etc. <code>mux</code> handles this too – just pass it multiple arguments:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">mux</span>(todict, auth, catch_errors, app)</pre></div>
<p>Again, <code>mux</code> returns a whole new app (a <code>request -&gt; response</code> function)
for us, this time wrapped with the three middlewares we provided.
<code>todict</code> will be the first to make changes to the incoming request, and
the last to alter the outgoing response.</p>
<p>Another neat thing we can do is to compose middleware into more middleware:</p>
<div class="highlight highlight-source-julia"><pre>mymidware <span class="pl-k">=</span> <span class="pl-c1">stack</span>(todict, auth, catch_errors)
<span class="pl-c1">mux</span>(mymidware, app)</pre></div>
<p>This is effectively equivalent to the <code>mux</code> call above, but creating a
new middleware function from independent parts means we're able to
factor out our service to make things more readable. For example, Mux
provides the <code>Mux.default</code> middleware which is actually just a stack of
useful tools.</p>
<p><code>stack</code> is self-flattening, i.e.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">stack</span>(a, b, c, d) <span class="pl-k">==</span> <span class="pl-c1">stack</span>(a, <span class="pl-c1">stack</span>(b, c), d) <span class="pl-k">==</span> <span class="pl-c1">stack</span>(<span class="pl-c1">stack</span>(a, b, c), d)</pre></div>
<p>etc.</p>
<h3><a id="user-content-branching" class="anchor" aria-hidden="true" href="#branching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Branching</h3>
<p>Mux.jl goes further with middleware, and expresses routing and decisions
as middleware themselves. The key to this is the <code>branch</code> function,
which takes</p>
<ol>
<li>a predicate to apply to the incoming request, and</li>
<li>an endpoint to run on the request if the predicate returns true.</li>
</ol>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">mux</span>(<span class="pl-c1">branch</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)),
    <span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>Hi<span class="pl-pds">"</span></span>))</pre></div>
<p>In this example, we ignore the request and simply return true 10% of the time.
You can test this in the repl by calling</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">mux</span>(<span class="pl-c1">branch</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> <span class="pl-c1">0.1</span>, <span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)),
    <span class="pl-c1">respond</span>(<span class="pl-s"><span class="pl-pds">"</span>Hi<span class="pl-pds">"</span></span>))(<span class="pl-c1">nothing</span>)</pre></div>
<p>(since the request is ignored anyway, it doesn't matter if we set it to <code>nothing</code>).</p>
<p>We can also define a function to wrap the branch</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">probabilty</span>(x, app) <span class="pl-k">=</span> <span class="pl-c1">branch</span>(_ <span class="pl-k">-&gt;</span> <span class="pl-c1">rand</span>() <span class="pl-k">&lt;</span> x, app)</pre></div>
<h3><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Utilities</h3>
<p>Despite the fact that endpoints and middleware are so important in Mux,
it's common to not write them by hand. For example, <code>respond("hi")</code>
creates a function <code>_ -&gt; "hi"</code> which can be used as an endpoint.
Equally, functions like <code>status(404)</code> will create middleware which
applies the given status to the response. Mux.jl's "not found" endpoint
is therefore defined as</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">notfound</span>(s <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Not found<span class="pl-pds">"</span></span>) <span class="pl-k">=</span> <span class="pl-c1">mux</span>(<span class="pl-c1">status</span>(<span class="pl-c1">404</span>), <span class="pl-c1">respond</span>(s))</pre></div>
<p>which is a much more declarative approach.</p>
<p>For example:</p>
<ul>
<li><code>respond(x)</code> – creates an endpoint that responds with <code>x</code>, regardless of the request.</li>
<li><code>route("/path/here", app)</code> – branches to <code>app</code> if the request location matches <code>"/path/here"</code>.</li>
<li><code>page("/path/here", app)</code> – branches to <code>app</code> if the request location <em>exactly</em> matches <code>"/path/here"</code></li>
</ul>
<h2><a id="user-content-serving-static-files-from-a-package" class="anchor" aria-hidden="true" href="#serving-static-files-from-a-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Serving static files from a package</h2>
<p>Please use <a href="https://github.com/JuliaGizmos/AssetRegistry.jl">AssetRegistry.jl</a> to
register an assets directory.</p>
<p><strong>DEPRECATED</strong>: The <code>Mux.pkgfiles</code> middleware (included in <code>Mux.defaults</code>) serves static
files under the <code>assets</code> directory in any Julia package at <code>/pkg/&lt;PACKAGE&gt;/</code>.</p>
<h2><a id="user-content-integrate-with-websocket" class="anchor" aria-hidden="true" href="#integrate-with-websocket"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Integrate with WebSocket</h2>
<p>You can easily integrate a general HTTP server and a WebSocket server with Mux, here is an example:</p>
<p>Firstly, let's import some modules:</p>
<pre><code>using Mux
import Mux.WebSockets
</code></pre>
<p>Next, let's define the behavior of HTTP server and WebSocket server:</p>
<pre><code>@app h = (
    Mux.defaults,
    page("/", respond("&lt;h1&gt;Hello World!&lt;/h1&gt;")),
    Mux.notfound());
    
function ws_io(x)
    conn = x[:socket]

    while !eof(conn)
        data = WebSockets.readguarded(conn)
        data_str = String(data[1])
        println("Received data: " * data_str)

        WebSockets.writeguarded(conn, "Hey, I've received " * data_str)
    end
end

@app w = (
    Mux.wdefaults,
    route("/ws_io", ws_io),
    Mux.wclose,
    Mux.notfound());
</code></pre>
<p>Run the server:</p>
<pre><code>WebSockets.serve(
    WebSockets.ServerWS(
        Mux.http_handler(h),
        Mux.ws_handler(w),
    ), 2333);
</code></pre>
<p>And finally, in a separate Julia process, run a client:</p>
<pre><code>using Mux
import Mux.WebSockets

WebSockets.open("ws://localhost:2333/ws_io") do ws_client
    WebSockets.writeguarded(ws_client, "Hello World")
    data, success = WebSockets.readguarded(ws_client)
    if success
        println(stderr, ws_client, " received:", String(data))
    end
end
</code></pre>
<p>Now, if you run both programs, you'll see a <code>Hello World</code> message, as the
server is replying the same message back to the client.</p>
<h2><a id="user-content-using-mux-in-production" class="anchor" aria-hidden="true" href="#using-mux-in-production"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using Mux in Production</h2>
<p>While Mux should be perfectly useable in a Production environment, it is not
recommended to use the <code>Mux.defaults</code> stack for a Production application. The
<code>basiccatch</code> middleware it includes will dump potentially sensitive stacktraces
to the client on error, which is probably not what you want to be serving to
your clients! An alternative <code>Mux.prod_defaults</code> stack is available for
Production applications, which is just <code>Mux.defaults</code> with a <code>stderrcatch</code>
middleware instead (which dumps errors to stderr).</p>
</article></div>