<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-libftd2xx" class="anchor" aria-hidden="true" href="#libftd2xx"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibFTD2XX</h1>
<p dir="auto"><a href="https://coveralls.io/github/Gowerlabs/LibFTD2XX.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/508ccac26cbb603a0d6dadd2ca3b4d146015ab2fc78ad091b8b8b22fc9ecc216/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f476f7765726c6162732f4c69624654443258582e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/Gowerlabs/LibFTD2XX.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Gowerlabs/LibFTD2XX.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6a4bebe4c34e8c1bb59cf722d119d1c7301ca93b473b929de805bdfecd49950f/68747470733a2f2f636f6465636f762e696f2f67682f476f7765726c6162732f4c69624654443258582e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/Gowerlabs/LibFTD2XX.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/Gowerlabs/LibFTD2XX.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4903d1da7b29675b0c3a56db661eefac8f8181289ef2b4b477b025f4af743604/68747470733a2f2f7472617669732d63692e6f72672f476f7765726c6162732f4c69624654443258582e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/Gowerlabs/LibFTD2XX.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/samuelpowell/libftd2xx-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/0e8a01baf0964b629bb6fbc222fbfb885057142bc509fb70c2461608982362b0/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f756938706c6e69683738356c77346a672f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ui8plnih785lw4jg/branch/master?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">Julia wrapper for the FTDIchip FTD2XX driver.</p>
<h1 dir="auto"><a id="user-content-installation--platforms" class="anchor" aria-hidden="true" href="#installation--platforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation &amp; Platforms</h1>
<p dir="auto">Install LibFTD2XX using the package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add LibFTD2XX"><pre>]add LibFTD2XX</pre></div>
<table>
<thead>
<tr>
<th>Platform</th>
<th>Architecture</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linux (x86)</td>
<td>32-bit and 64-bit</td>
<td>64-bit tested locally (<a href="https://github.com/Gowerlabs/LibFTD2XX.jl/issues/35" data-hovercard-type="issue" data-hovercard-url="/Gowerlabs/LibFTD2XX.jl/issues/35/hovercard">No CI</a>)</td>
</tr>
<tr>
<td>Linux (ARM)</td>
<td>ARMv7 HF and AArch64 (ARMv8)</td>
<td>Tested locally (No CI)</td>
</tr>
<tr>
<td>MacOS</td>
<td>64-bit</td>
<td>CI active (without hardware)</td>
</tr>
<tr>
<td>Windows</td>
<td>64-bit</td>
<td>CI active (without hardware)</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-linux-driver-details" class="anchor" aria-hidden="true" href="#linux-driver-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linux driver details</h2>
<p dir="auto">It is likely that the kernel will automatically load VCP drivers when running on linux, which will prevent the D2XX drivers from accessing the device. Follow the guidance in the FTDI Linux driver <a href="https://www.ftdichip.com/Drivers/D2XX/Linux/ReadMe-linux.txt" rel="nofollow">README</a> to unload the <code>ftdio_sio</code> and <code>usbserial</code> kernel modules before use. These can optionally be blacklisted if appropriate. If your device has an alternate product name you may prefer to use an alternative approach detailed <a href="https://www.elektormagazine.de/news/ftdi-d2xx-and-linux-overcoming-the-big-problem-" rel="nofollow">here</a>.</p>
<p dir="auto">The D2XX drivers use raw USB access through <code>libusb</code> which may not be available to non-root users. A udev file is required to enable access to a specified group. A script to create the appropriate file and user group is available, e.g., <a href="https://stackoverflow.com/questions/13419691/accessing-a-usb-device-with-libusb-1-0-as-a-non-root-user" rel="nofollow">here</a>.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<p dir="auto">LibFTD2XX provides a high-level wrapper of the underlying library functionality, detailed below.
To access the library directly, the submodule <code>Wrapper</code> provides access to the functions detailed in the <a href="http://www.ftdichip.com/Support/Documents/ProgramGuides/D2XX_Programmer's_Guide(FT_000071).pdf" rel="nofollow">D2XX Programmer's Guide (FT_000071)</a>.</p>
<p dir="auto">The demonstration considers a port running at 2MBaud which echos what it receives.</p>
<h2 dir="auto"><a id="user-content-finding-and-configuring-devices" class="anchor" aria-hidden="true" href="#finding-and-configuring-devices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Finding and configuring devices</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using LibFTD2XX

julia&gt; devices = D2XXDevices()
4-element Array{D2XXDevice,1}:
 D2XXDevice(0, 2, 7, 67330065, 0, &quot;FT3V1RFFA&quot;, &quot;USB &lt;-&gt; Serial Converter A&quot;, Base.RefValue{FT_HANDLE}(FT_HANDLE(Ptr{Nothing} @0x0000000000000000)))
 D2XXDevice(1, 2, 7, 67330065, 0, &quot;FT3V1RFFB&quot;, &quot;USB &lt;-&gt; Serial Converter B&quot;, Base.RefValue{FT_HANDLE}(FT_HANDLE(Ptr{Nothing} @0x0000000000000000)))
 D2XXDevice(2, 2, 7, 67330065, 0, &quot;FT3V1RFFC&quot;, &quot;USB &lt;-&gt; Serial Converter C&quot;, Base.RefValue{FT_HANDLE}(FT_HANDLE(Ptr{Nothing} @0x0000000000000000)))
 D2XXDevice(3, 2, 7, 67330065, 0, &quot;FT3V1RFFD&quot;, &quot;USB &lt;-&gt; Serial Converter D&quot;, Base.RefValue{FT_HANDLE}(FT_HANDLE(Ptr{Nothing} @0x0000000000000000)))

julia&gt; isopen.(devices)
4-element BitArray{1}:
 false
 false
 false
 false

julia&gt; device = devices[1]
D2XXDevice(0, 2, 7, 67330065, 0, &quot;FT3V1RFFA&quot;, &quot;USB &lt;-&gt; Serial Converter A&quot;, Base.RefValue{FT_HANDLE}(FT_HANDLE(Ptr{Nothing} @0x0000000000000000)))

julia&gt; open(device)

julia&gt; isopen(device)
true

julia&gt; datacharacteristics(device, wordlength = BITS_8, stopbits = STOP_BITS_1, parity = PARITY_NONE)

julia&gt; baudrate(device,2000000)

julia&gt; timeout_read, timeout_wr = 200, 10; # milliseconds

julia&gt; timeouts(device, timeout_read, timeout_wr)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LibFTD2XX

julia<span class="pl-k">&gt;</span> devices <span class="pl-k">=</span> <span class="pl-c1">D2XXDevices</span>()
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{D2XXDevice,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">D2XXDevice</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>, <span class="pl-c1">67330065</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>FT3V1RFFA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USB &lt;-&gt; Serial Converter A<span class="pl-pds">"</span></span>, Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{FT_HANDLE}</span>(<span class="pl-c1">FT_HANDLE</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000000000000</span>)))
 <span class="pl-c1">D2XXDevice</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>, <span class="pl-c1">67330065</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>FT3V1RFFB<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USB &lt;-&gt; Serial Converter B<span class="pl-pds">"</span></span>, Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{FT_HANDLE}</span>(<span class="pl-c1">FT_HANDLE</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000000000000</span>)))
 <span class="pl-c1">D2XXDevice</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>, <span class="pl-c1">67330065</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>FT3V1RFFC<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USB &lt;-&gt; Serial Converter C<span class="pl-pds">"</span></span>, Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{FT_HANDLE}</span>(<span class="pl-c1">FT_HANDLE</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000000000000</span>)))
 <span class="pl-c1">D2XXDevice</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>, <span class="pl-c1">67330065</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>FT3V1RFFD<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USB &lt;-&gt; Serial Converter D<span class="pl-pds">"</span></span>, Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{FT_HANDLE}</span>(<span class="pl-c1">FT_HANDLE</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000000000000</span>)))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isopen</span>.(devices)
<span class="pl-c1">4</span><span class="pl-k">-</span>element BitArray{<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">false</span>
 <span class="pl-c1">false</span>
 <span class="pl-c1">false</span>
 <span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> device <span class="pl-k">=</span> devices[<span class="pl-c1">1</span>]
<span class="pl-c1">D2XXDevice</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>, <span class="pl-c1">7</span>, <span class="pl-c1">67330065</span>, <span class="pl-c1">0</span>, <span class="pl-s"><span class="pl-pds">"</span>FT3V1RFFA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>USB &lt;-&gt; Serial Converter A<span class="pl-pds">"</span></span>, Base<span class="pl-k">.</span><span class="pl-c1">RefValue</span><span class="pl-c1">{FT_HANDLE}</span>(<span class="pl-c1">FT_HANDLE</span>(Ptr{Nothing} @<span class="pl-c1">0x0000000000000000</span>)))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">open</span>(device)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isopen</span>(device)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">datacharacteristics</span>(device, wordlength <span class="pl-k">=</span> BITS_8, stopbits <span class="pl-k">=</span> STOP_BITS_1, parity <span class="pl-k">=</span> PARITY_NONE)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">baudrate</span>(device,<span class="pl-c1">2000000</span>)

julia<span class="pl-k">&gt;</span> timeout_read, timeout_wr <span class="pl-k">=</span> <span class="pl-c1">200</span>, <span class="pl-c1">10</span>; <span class="pl-c"><span class="pl-c">#</span> milliseconds</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">timeouts</span>(device, timeout_read, timeout_wr)</pre></div>
<h2 dir="auto"><a id="user-content-basic-io" class="anchor" aria-hidden="true" href="#basic-io"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic IO</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
julia&gt; supertype(typeof(device))
IO

julia&gt; write(device, Vector{UInt8}(codeunits(&quot;Hello&quot;)))
0x00000005

julia&gt; bytesavailable(device)
0x00000005

julia&gt; String(read(device, 5)) # read 5 bytes
&quot;Hello&quot;

julia&gt; write(device, Vector{UInt8}(codeunits(&quot;World&quot;)))
0x00000005

julia&gt; String(readavailable(device)) # read all available bytes
&quot;World&quot;

julia&gt; write(device, Vector{UInt8}(codeunits(&quot;I will be deleted.&quot;)))
0x00000012

julia&gt; bytesavailable(device)
0x00000012

julia&gt; flush(device)

julia&gt; bytesavailable(device)
0x00000000

julia&gt; # Read Timeout behaviour

julia&gt; tread = 1000 * @elapsed read(device, 5000) # nothing to read! Will timeout...
203.20976900000002

julia&gt; timeout_read &lt; 1.5*tread # 1.5*tread to allow for extra compile/run time.
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">supertype</span>(<span class="pl-c1">typeof</span>(device))
IO

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(device, <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">codeunits</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)))
<span class="pl-c1">0x00000005</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bytesavailable</span>(device)
<span class="pl-c1">0x00000005</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">String</span>(<span class="pl-c1">read</span>(device, <span class="pl-c1">5</span>)) <span class="pl-c"><span class="pl-c">#</span> read 5 bytes</span>
<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(device, <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">codeunits</span>(<span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>)))
<span class="pl-c1">0x00000005</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">String</span>(<span class="pl-c1">readavailable</span>(device)) <span class="pl-c"><span class="pl-c">#</span> read all available bytes</span>
<span class="pl-s"><span class="pl-pds">"</span>World<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(device, <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(<span class="pl-c1">codeunits</span>(<span class="pl-s"><span class="pl-pds">"</span>I will be deleted.<span class="pl-pds">"</span></span>)))
<span class="pl-c1">0x00000012</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bytesavailable</span>(device)
<span class="pl-c1">0x00000012</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">flush</span>(device)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bytesavailable</span>(device)
<span class="pl-c1">0x00000000</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Read Timeout behaviour</span>

julia<span class="pl-k">&gt;</span> tread <span class="pl-k">=</span> <span class="pl-c1">1000</span> <span class="pl-k">*</span> <span class="pl-c1">@elapsed</span> <span class="pl-c1">read</span>(device, <span class="pl-c1">5000</span>) <span class="pl-c"><span class="pl-c">#</span> nothing to read! Will timeout...</span>
<span class="pl-c1">203.20976900000002</span>

julia<span class="pl-k">&gt;</span> timeout_read <span class="pl-k">&lt;</span> <span class="pl-c1">1.5</span><span class="pl-k">*</span>tread <span class="pl-c"><span class="pl-c">#</span> 1.5*tread to allow for extra compile/run time.</span>
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-timeouts-only-tested-on-windows" class="anchor" aria-hidden="true" href="#timeouts-only-tested-on-windows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Timeouts (only tested on Windows)</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; buffer = zeros(UInt8, 5000);

julia&gt; twr = 1000 * @elapsed nb = write(device, buffer) # Will timeout before finishing write!
22.997304

julia&gt; timeout_wr &lt; 1.5*twr
true

julia&gt; nb # doesn't correctly report number written
0x00000000

julia&gt; Int(bytesavailable(device))
3584

julia&gt; timeout_wr &lt; 1.5*twr
true

julia&gt; flush(device)

julia&gt; timeout_wr = 1000; # increase write timeout

julia&gt; timeouts(device, timeout_read, timeout_wr)

julia&gt; twr = 1000 * @elapsed nb = write(device, buffer) # Won't timeout before finishing write!
15.960230999999999

julia&gt; nb # correctly reports number written
0x00001388

julia&gt; Int(bytesavailable(device))
5000

julia&gt; timeout_wr &lt; 1.5*twr
false

julia&gt; close(device)

julia&gt; isopen(device)
false"><pre class="notranslate"><code>julia&gt; buffer = zeros(UInt8, 5000);

julia&gt; twr = 1000 * @elapsed nb = write(device, buffer) # Will timeout before finishing write!
22.997304

julia&gt; timeout_wr &lt; 1.5*twr
true

julia&gt; nb # doesn't correctly report number written
0x00000000

julia&gt; Int(bytesavailable(device))
3584

julia&gt; timeout_wr &lt; 1.5*twr
true

julia&gt; flush(device)

julia&gt; timeout_wr = 1000; # increase write timeout

julia&gt; timeouts(device, timeout_read, timeout_wr)

julia&gt; twr = 1000 * @elapsed nb = write(device, buffer) # Won't timeout before finishing write!
15.960230999999999

julia&gt; nb # correctly reports number written
0x00001388

julia&gt; Int(bytesavailable(device))
5000

julia&gt; timeout_wr &lt; 1.5*twr
false

julia&gt; close(device)

julia&gt; isopen(device)
false
</code></pre></div>
</article></div>