<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-stanrun" class="anchor" aria-hidden="true" href="#stanrun"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>StanRun</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/ea6e0ff99602c3563e3dd684abf60b30edceaeef/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/tpapp/StanRun.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/634d6fa55c3f0c9f70a43991b25405adeddcaa32/68747470733a2f2f7472617669732d63692e6f72672f74706170702f5374616e52756e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/tpapp/StanRun.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tpapp/StanRun.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/354e922ec14cb9be0a01d1bebca0db3155936f73/687474703a2f2f636f6465636f762e696f2f6769746875622f74706170702f5374616e52756e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tpapp/StanRun.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A collection of routines for running <a href="https://mc-stan.org/users/interfaces/cmdstan.html" rel="nofollow">CmdStan</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>This package is registered. Install with</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add StanRun</pre></div>
<p>You need a working <a href="https://mc-stan.org/users/interfaces/cmdstan.html" rel="nofollow">CmdStan</a> installation, the path of which you should specify in <code>JULIA_CMDSTAN_HOME</code>, eg in your <code>~/.julia/config/startup.jl</code> have a line like</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> CmdStan setup</span>
ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CMDSTAN_HOME<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">expanduser</span>(<span class="pl-s"><span class="pl-pds">"</span>~/src/cmdstan-2.19.1/<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> replace with your path</span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>It is recommended that you start your Julia process with multiple worker processes to take advantage of parallel sampling, eg</p>
<div class="highlight highlight-source-shell"><pre>julia -p auto</pre></div>
<p>Otherwise, <code>stan_sample</code> will use a single process.</p>
<p>Use this package like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> StanRun
model <span class="pl-k">=</span> <span class="pl-c1">StanModel</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/model.stan<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> directory should be writable, for compilation</span>
data <span class="pl-k">=</span> (N <span class="pl-k">=</span> <span class="pl-c1">100</span>, x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N, <span class="pl-c1">1000</span>))     <span class="pl-c"><span class="pl-c">#</span> in a format supported by stan_dump</span>
chains <span class="pl-k">=</span> <span class="pl-c1">stan_sample</span>(model, data, <span class="pl-c1">5</span>)     <span class="pl-c"><span class="pl-c">#</span> 5 chain paths and log files</span></pre></div>
<p>See the docstrings (in particular <code>?StanRun</code>) for more.</p>
</article></div>