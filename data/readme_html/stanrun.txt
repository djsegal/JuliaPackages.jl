<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stanrunjl" class="anchor" aria-hidden="true" href="#stanrunjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StanRun.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/tpapp/StanRun.jl/actions?query=workflow%3ACI"><img src="https://github.com/tpapp/StanRun.jl/workflows/CI/badge.svg" alt="build" style="max-width:100%;"></a>
<a href="http://codecov.io/github/tpapp/StanRun.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/be98e7a6b27a8ea20abea895d5800c25662789b05c24fc4dc6bd19ad7d180a41/687474703a2f2f636f6465636f762e696f2f6769746875622f74706170702f5374616e52756e2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tpapp/StanRun.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>A collection of routines for running <a href="https://mc-stan.org/users/interfaces/cmdstan.html" rel="nofollow">CmdStan</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is registered. Install with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add StanRun
"><pre>pkg<span class="pl-k">&gt;</span> add StanRun</pre></div>
<p>You need a working <a href="https://mc-stan.org/users/interfaces/cmdstan.html" rel="nofollow">CmdStan</a> installation, the path of which you should specify in <code>JULIA_CMDSTAN_HOME</code>, eg in your <code>~/.julia/config/startup.jl</code> have a line like</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# CmdStan setup
ENV[&quot;JULIA_CMDSTAN_HOME&quot;] = expanduser(&quot;~/src/cmdstan-2.19.1/&quot;) # replace with your path
"><pre><span class="pl-c"><span class="pl-c">#</span> CmdStan setup</span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CMDSTAN_HOME<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-c1">expanduser</span>(<span class="pl-s"><span class="pl-pds">"</span>~/src/cmdstan-2.19.1/<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> replace with your path</span></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>It is recommended that you start your Julia process with multiple worker processes to take advantage of parallel sampling, eg</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="julia -p auto
"><pre>julia -p auto</pre></div>
<p>Otherwise, <code>stan_sample</code> will use a single process.</p>
<p>Use this package like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using StanRun
model = StanModel(&quot;/path/to/model.stan&quot;) # directory should be writable, for compilation
data = (N = 100, x = randn(N, 1000))     # in a format supported by stan_dump
chains = stan_sample(model, data, 5)     # 5 chain paths and log files
"><pre><span class="pl-k">using</span> StanRun
model <span class="pl-k">=</span> <span class="pl-c1">StanModel</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/model.stan<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> directory should be writable, for compilation</span>
data <span class="pl-k">=</span> (N <span class="pl-k">=</span> <span class="pl-c1">100</span>, x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N, <span class="pl-c1">1000</span>))     <span class="pl-c"><span class="pl-c">#</span> in a format supported by stan_dump</span>
chains <span class="pl-k">=</span> <span class="pl-c1">stan_sample</span>(model, data, <span class="pl-c1">5</span>)     <span class="pl-c"><span class="pl-c">#</span> 5 chain paths and log files</span></pre></div>
<p>See the docstrings (in particular <code>?StanRun</code>) for more.</p>
</article></div>