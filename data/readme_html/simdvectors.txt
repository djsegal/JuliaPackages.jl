<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-simdvectors" class="anchor" aria-hidden="true" href="#simdvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SIMDVectors</h1>
<p><a href="https://gitter.im/KristofferC/SIMDVectors.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow"><img src="https://camo.githubusercontent.com/94a98fceebf27ec2ce87806fc3325ab29f5bf1a0/68747470733a2f2f6261646765732e6769747465722e696d2f4b726973746f66666572432f53494d44566563746f72732e6a6c2e737667" alt="Join the chat at https://gitter.im/KristofferC/SIMDVectors.jl" data-canonical-src="https://badges.gitter.im/KristofferC/SIMDVectors.jl.svg" style="max-width:100%;"></a></p>
<p><a href="https://travis-ci.org/KristofferC/SIMDVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ef5a7a758b6a3691316ce1336d41aa00ee1ecde7/68747470733a2f2f7472617669732d63692e6f72672f4b726973746f66666572432f53494d44566563746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/KristofferC/SIMDVectors.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is an experimental package that uses the PR <a href="https://github.com/JuliaLang/julia/pull/15244">#15244</a> to create a stack allocated fixed size vector which supports SIMD operations. It is very similar in spirit to the <a href="https://github.com/eschnett/SIMD.jl">SIMD.jl</a> package excpet this is written in pure julia. It also supports type promotions and should cleanly work with "exotic" number types like <code>BigFloat</code>.</p>
<p>For this package to work, the branch above needs to be used and to actually get SIMD operations, julia needs to be started with the <code>-O3</code> flag.</p>
<p>There are currently a few ambiguity warnings when the package is loaded, This is annoying but should not cause any real problems.</p>
<h2><a id="user-content-loading-and-storing-simdvectors" class="anchor" aria-hidden="true" href="#loading-and-storing-simdvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Loading and storing <code>SIMDVector</code>s</h2>
<p>A <code>SIMDVector</code> can be created by for example using <code>load(SIMDVector{N}, v, offset=0)</code> where <code>N</code> is the length of the vector, <code>v</code> is vector to load data from and <code>offset</code> is an offset into <code>v</code> where to start loading data:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">load</span>(SIMDVector{<span class="pl-c1">7</span>}, <span class="pl-c1">rand</span>(<span class="pl-c1">12</span>))
<span class="pl-c1">7</span><span class="pl-k">-</span>element SIMDVectors<span class="pl-k">.</span>SIMDVector{<span class="pl-c1">3</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.0333167</span>
 <span class="pl-c1">0.52255</span>
 <span class="pl-c1">0.171032</span>
 <span class="pl-c1">0.667967</span>
 <span class="pl-c1">0.832219</span>
 <span class="pl-c1">0.586471</span></pre></div>
<p>A <code>SIMDVector</code> can be stored back in a normal <code>Vector</code> with the <code>store!</code> function:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> vec_store <span class="pl-k">=</span> <span class="pl-c1">similar</span>(v)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">store!</span>(vec_store, v)
<span class="pl-c1">7</span><span class="pl-k">-</span>element Array{Float64, <span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0333167</span>
 <span class="pl-c1">0.52255</span>
 <span class="pl-c1">0.171032</span>
 <span class="pl-c1">0.667967</span>
 <span class="pl-c1">0.832219</span>
 <span class="pl-c1">0.586471</span></pre></div>
<h2><a id="user-content-operations-on-and-between-simdvectors" class="anchor" aria-hidden="true" href="#operations-on-and-between-simdvectors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Operations on and between <code>SIMDVector</code>s.</h2>
<p>A <code>SIMDVector</code> looks like a normal <code>Vector</code> but internally the data is packed such that, when possible, vectorized instructions are used when operators are performed on and between <code>SIMDVector</code>'s.
If the length of the vector are such that not all numbers fit in vector registers, scalar operations are performed on the rest.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> va <span class="pl-k">=</span> <span class="pl-c1">load</span>(SIMDVector{<span class="pl-c1">9</span>}, <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">12</span>));

julia<span class="pl-k">&gt;</span> vb <span class="pl-k">=</span> <span class="pl-c1">load</span>(SIMDVector{<span class="pl-c1">9</span>}, <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">12</span>));


julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_native</span> va <span class="pl-k">+</span> vb
<span class="pl-k">...</span>
    vaddps  (<span class="pl-k">%</span>rdx), <span class="pl-k">%</span>xmm0, <span class="pl-k">%</span>xmm0   <span class="pl-c"><span class="pl-c">#</span> One packed add for the first set of four Float32s</span>
    vaddps  <span class="pl-c1">16</span>(<span class="pl-k">%</span>rdx), <span class="pl-k">%</span>xmm1, <span class="pl-k">%</span>xmm1 <span class="pl-c"><span class="pl-c">#</span> Second packed add for second set of four Float32s</span>
    vmovss  <span class="pl-c1">32</span>(<span class="pl-k">%</span>rsi), <span class="pl-k">%</span>xmm2
    vaddss  <span class="pl-c1">32</span>(<span class="pl-k">%</span>rdx), <span class="pl-k">%</span>xmm2, <span class="pl-k">%</span>xmm2 <span class="pl-c"><span class="pl-c">#</span> One scalar add for the rest</span>
<span class="pl-k">...</span></pre></div>
<p>Reduction (<code>sum</code>, <code>prod</code>, <code>maximum</code>, <code>minimum</code>) are also available:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(va)
<span class="pl-c1">4.901259</span>f0

julia<span class="pl-k">&gt;</span> <span class="pl-c1">maximum</span>(va)
<span class="pl-c1">0.93982494</span>f0</pre></div>
<h2><a id="user-content-promotions" class="anchor" aria-hidden="true" href="#promotions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Promotions</h2>
<p>Operators between two different types will convert like normal vectors:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> va <span class="pl-k">=</span> <span class="pl-c1">load</span>(SIMDVector{<span class="pl-c1">9</span>}, <span class="pl-c1">rand</span>(Float64, <span class="pl-c1">12</span>));

julia<span class="pl-k">&gt;</span> vb <span class="pl-k">=</span> <span class="pl-c1">load</span>(SIMDVector{<span class="pl-c1">9</span>}, <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">12</span>));

julia<span class="pl-k">&gt;</span> va <span class="pl-k">+</span> vb
<span class="pl-c1">9</span><span class="pl-k">-</span>element SIMDVectors<span class="pl-k">.</span>SIMDVector{<span class="pl-c1">4</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,Float64}<span class="pl-k">:</span>
 <span class="pl-c1">0.648343</span>
 <span class="pl-c1">1.02155</span>
 <span class="pl-c1">0.676522</span>
 <span class="pl-c1">0.92291</span>
 <span class="pl-c1">1.14035</span>
 <span class="pl-c1">1.46949</span>
 <span class="pl-c1">0.599293</span>
 <span class="pl-c1">1.1952</span>
 <span class="pl-c1">1.02997</span></pre></div>
<h2><a id="user-content-user-defined-number-types" class="anchor" aria-hidden="true" href="#user-defined-number-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>User defined number types</h2>
<p><code>SIMDVector</code>'s' should gracefully handle arbitrary julia number types. This makes it so that a <code>SIMDVector</code> can be used even if you are unsure what data it will hold.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">load</span>(SIMDVector{<span class="pl-c1">4</span>}, <span class="pl-c1">big</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">12</span>))); <span class="pl-c"><span class="pl-c">#</span> Load Big floats into a SIMDVector</span>

julia<span class="pl-k">&gt;</span> a<span class="pl-k">+</span>a <span class="pl-c"><span class="pl-c">#</span> Works fine</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element SIMDVectors<span class="pl-k">.</span>SIMDVector{<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">4</span>,BigFloat}<span class="pl-k">:</span>
 <span class="pl-c1">2.531343636343290626200541737489402294158935546875000000000000000000000000000000e-01</span>
 <span class="pl-c1">3.366090705330369026171410951064899563789367675781250000000000000000000000000000e-01</span>
 <span class="pl-c1">1.697265196033196144043131425860337913036346435546875000000000000000000000000000</span>
 <span class="pl-c1">1.206431829930139532081057041068561375141143798828125000000000000000000000000000</span></pre></div>
</article></div>