<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-casacorejl" class="anchor" aria-hidden="true" href="#casacorejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Casacore.jl</h1>
<p dir="auto"><a href="https://github.com/torrance/Casacore.jl/actions/workflows/stable.yml"><img src="https://github.com/torrance/Casacore.jl/actions/workflows/stable.yml/badge.svg" alt="Stable" style="max-width: 100%;"></a> <a href="https://github.com/torrance/Casacore.jl/actions/workflows/dev.yml"><img src="https://github.com/torrance/Casacore.jl/actions/workflows/dev.yml/badge.svg" alt="Dev" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a high-level interface to use Casacore from Julia.</p>
<p dir="auto"><a href="https://casacore.github.io" rel="nofollow">Casacore</a> is a popular library used primarily in radio astronomy. Amongst other things, its tables functionality is used to store and manipulate visibility data, whilst its measures interface allows for conversion between different reference frames based on ephemeris data.</p>
<p dir="auto">This package uses <a href="https://github.com/torrance/casacorecxx">casacorecxx</a> which uses <a href="https://github.com/JuliaInterop/CxxWrap.jl">CxxWrap</a> to wrap the C++ Casacore codebase. These raw objects and methods are available in <code>Casacore.LibCasacore</code>.</p>
<p dir="auto">This package is under active development. Casacore is a very large package, and this Julia interface has been developed with specific use cases in mind, limited by the author's own experience. Issues and pull requests are very welcome to help expand on functionality and use cases.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Casacore.jl is installable in the usual way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add Casacore"><pre>] add Casacore</pre></div>
<p dir="auto">Casacore.jl will install all of its own dependencies including Casacore itself.</p>
<p dir="auto">Casacore.jl is limited to the currently supported architectures of <code>casacore_jll</code>.</p>
<h2 dir="auto"><a id="user-content-updating-the-ephemeris-data" class="anchor" aria-hidden="true" href="#updating-the-ephemeris-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Updating the ephemeris data</h2>
<p dir="auto">When installing Casacore.jl, the build step downloads and installs the latest ephemeris data for use in <code>Casacore.Measures</code>. To update this dataset with a later version, the build step can be manually rerun:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] build Casacore"><pre>] build Casacore</pre></div>
<h2 dir="auto"><a id="user-content-casacoretables" class="anchor" aria-hidden="true" href="#casacoretables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Casacore.Tables</h2>
<h3 dir="auto"><a id="user-content-opening-and-creating-new-tables" class="anchor" aria-hidden="true" href="#opening-and-creating-new-tables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Opening and creating new tables</h3>
<p dir="auto">Tables can be opened or created in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Casacore.Tables: Tables, Table

# Open existing table, read only
table = Table(&quot;/path/to/my/table.ms&quot;, Tables.Old)

# Open existing table, read/write
table = Table(&quot;/path/to/my/table.ms&quot;, Tables.Update)

# Create a new, empty table
table = Table(&quot;/path/to/my/table.ms&quot;, Tables.New)"><pre><span class="pl-k">using</span> Casacore<span class="pl-k">.</span>Tables<span class="pl-k">:</span> Tables, Table

<span class="pl-c"><span class="pl-c">#</span> Open existing table, read only</span>
table <span class="pl-k">=</span> <span class="pl-c1">Table</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/my/table.ms<span class="pl-pds">"</span></span>, Tables<span class="pl-k">.</span>Old)

<span class="pl-c"><span class="pl-c">#</span> Open existing table, read/write</span>
table <span class="pl-k">=</span> <span class="pl-c1">Table</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/my/table.ms<span class="pl-pds">"</span></span>, Tables<span class="pl-k">.</span>Update)

<span class="pl-c"><span class="pl-c">#</span> Create a new, empty table</span>
table <span class="pl-k">=</span> <span class="pl-c1">Table</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/my/table.ms<span class="pl-pds">"</span></span>, Tables<span class="pl-k">.</span>New)</pre></div>
<p dir="auto">Other TableOptions are listed below:</p>
<table>
<thead>
<tr>
<th>TableOptions</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Old</td>
<td>Open existing table read only</td>
</tr>
<tr>
<td>Update</td>
<td>Open existing table read/write</td>
</tr>
<tr>
<td>New</td>
<td>Create new table</td>
</tr>
<tr>
<td>NewNoReplace</td>
<td>Create new table but error if it already exists</td>
</tr>
<tr>
<td>Scratch</td>
<td>Create new table, but delete when it falls out of scope</td>
</tr>
</tbody>
</table>
<p dir="auto">A table contains certain metadata about its size, columns and subtables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Get table size
size(table) == (260000, 25)  # rows x columns
# list of columns
keys(table) == (:UVW, :DATA, ...)
# list of subtables
propertynames(table) == (:ANTENNA, :FIELD, ...)"><pre><span class="pl-c"><span class="pl-c">#</span> Get table size</span>
<span class="pl-c1">size</span>(table) <span class="pl-k">==</span> (<span class="pl-c1">260000</span>, <span class="pl-c1">25</span>)  <span class="pl-c"><span class="pl-c">#</span> rows x columns</span>
<span class="pl-c"><span class="pl-c">#</span> list of columns</span>
<span class="pl-c1">keys</span>(table) <span class="pl-k">==</span> (<span class="pl-c1">:UVW</span>, <span class="pl-c1">:DATA</span>, <span class="pl-k">...</span>)
<span class="pl-c"><span class="pl-c">#</span> list of subtables</span>
<span class="pl-c1">propertynames</span>(table) <span class="pl-k">==</span> (<span class="pl-c1">:ANTENNA</span>, <span class="pl-c1">:FIELD</span>, <span class="pl-k">...</span>)</pre></div>
<h3 dir="auto"><a id="user-content-addingremoving-rows" class="anchor" aria-hidden="true" href="#addingremoving-rows"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding/removing rows</h3>
<p dir="auto">Table rows can be added or removed using the <code>resize!()</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="size(table) == (260000, 25)

# Expand total rows to 300,000
# New rows will be filled with default values
resize!(table, 300000)
size(table) == (300000, 25)

# Truncate number of rows
resize!(table, 100000)
size(table) == (100000, 25)"><pre><span class="pl-c1">size</span>(table) <span class="pl-k">==</span> (<span class="pl-c1">260000</span>, <span class="pl-c1">25</span>)

<span class="pl-c"><span class="pl-c">#</span> Expand total rows to 300,000</span>
<span class="pl-c"><span class="pl-c">#</span> New rows will be filled with default values</span>
<span class="pl-c1">resize!</span>(table, <span class="pl-c1">300000</span>)
<span class="pl-c1">size</span>(table) <span class="pl-k">==</span> (<span class="pl-c1">300000</span>, <span class="pl-c1">25</span>)

<span class="pl-c"><span class="pl-c">#</span> Truncate number of rows</span>
<span class="pl-c1">resize!</span>(table, <span class="pl-c1">100000</span>)
<span class="pl-c1">size</span>(table) <span class="pl-k">==</span> (<span class="pl-c1">100000</span>, <span class="pl-c1">25</span>)</pre></div>
<p dir="auto">Additionally, specific rows may be deleted using <code>deleteat!()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Delete row 100
deleteat!(table, 100)

# Delete every second row
deleteat!(table, 1:2:size(table, 1))"><pre><span class="pl-c"><span class="pl-c">#</span> Delete row 100</span>
<span class="pl-c1">deleteat!</span>(table, <span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> Delete every second row</span>
<span class="pl-c1">deleteat!</span>(table, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">size</span>(table, <span class="pl-c1">1</span>))</pre></div>
<h3 dir="auto"><a id="user-content-subtables" class="anchor" aria-hidden="true" href="#subtables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Subtables</h3>
<p dir="auto">Subtables can be accessed as properties of the the <code>Table</code> object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="propertynames(table)  # =&gt; (:ANTENNA, :FIELD, ...)

subtable = table.ANTENNA"><pre><span class="pl-c1">propertynames</span>(table)  <span class="pl-c"><span class="pl-c">#</span> =&gt; (:ANTENNA, :FIELD, ...)</span>

subtable <span class="pl-k">=</span> table<span class="pl-k">.</span>ANTENNA</pre></div>
<p dir="auto">Subtables are opened with the same locking and write attributes as their parents.</p>
<p dir="auto">New subtables can be added by simply assigning a new table object:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="subtable = Table()  # with no path, creates a temporary table
resize!(subtable, 128)  # set rows to 128

# Add some columns to our table
subtable[:ID] = 1:128
subtable[:X] = rand(128)
subtable[:Y] = rand(128)
subtable[:Z] = rand(128)

# Finally, set our table as a subtable
table.ANTENNA = subtable  # this results in a copy"><pre>subtable <span class="pl-k">=</span> <span class="pl-c1">Table</span>()  <span class="pl-c"><span class="pl-c">#</span> with no path, creates a temporary table</span>
<span class="pl-c1">resize!</span>(subtable, <span class="pl-c1">128</span>)  <span class="pl-c"><span class="pl-c">#</span> set rows to 128</span>

<span class="pl-c"><span class="pl-c">#</span> Add some columns to our table</span>
subtable[<span class="pl-c1">:ID</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">128</span>
subtable[<span class="pl-c1">:X</span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>)
subtable[<span class="pl-c1">:Y</span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>)
subtable[<span class="pl-c1">:Z</span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">128</span>)

<span class="pl-c"><span class="pl-c">#</span> Finally, set our table as a subtable</span>
table<span class="pl-k">.</span>ANTENNA <span class="pl-k">=</span> subtable  <span class="pl-c"><span class="pl-c">#</span> this results in a copy</span></pre></div>
<p dir="auto">Note that the subtable is copied into the parent table, and future modifications to the <code>subtable</code> object in the example above will not affect <code>table.ANTENNA</code>.</p>
<p dir="auto">Subtables can be deleted using <code>delete!()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delete!(table, :ANTENNA)"><pre><span class="pl-c1">delete!</span>(table, <span class="pl-c1">:ANTENNA</span>)</pre></div>
<h3 dir="auto"><a id="user-content-columns" class="anchor" aria-hidden="true" href="#columns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Columns</h3>
<p dir="auto">Columns are accessed as keys on <code>Table</code> objects:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="keys(table)  # =&gt; [:UVW, :WEIGHT, :DATA, ...]

# Load a column
uvwcol = table[:UVW]  # &lt;: Column{Float32, 2}"><pre><span class="pl-c1">keys</span>(table)  <span class="pl-c"><span class="pl-c">#</span> =&gt; [:UVW, :WEIGHT, :DATA, ...]</span>

<span class="pl-c"><span class="pl-c">#</span> Load a column</span>
uvwcol <span class="pl-k">=</span> table[<span class="pl-c1">:UVW</span>]  <span class="pl-c"><span class="pl-c">#</span> &lt;: Column{Float32, 2}</span></pre></div>
<p dir="auto">Like native <code>Array{T, N}</code> types, columns also store their element type and dimensionality as <code>Column{T, N}</code>.</p>
<p dir="auto">Casacore allows for a range of column types, including some degenerative array columns with unknown shape or even unknown dimensionality. The below table lists these different types and their representation in Casacore.jl:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Scalar</td>
<td>Simple vector column</td>
<td><code>Column{T, 1}</code></td>
</tr>
<tr>
<td>Fixed array</td>
<td>Array column with known dimension and size</td>
<td><code>Column{T, N}</code></td>
</tr>
<tr>
<td>Fixed dimension</td>
<td>Array column with fixed dimension but variable size per row</td>
<td><code>Column{Array{T, N - 1}, 1}</code></td>
</tr>
<tr>
<td>Free array</td>
<td>Array column unknown dimension and size</td>
<td><code>Column{Array{T}, 1}</code></td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-column-indexing" class="anchor" aria-hidden="true" href="#column-indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Column Indexing</h3>
<p dir="auto">Columns may be indexed to retrieve or set their data:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Retrieve data from column as Julia array
data = uvwcol[:, 1:100]  # Get the first 100 rows

# Write to column
uvwcol[:, 1:100] = rand(Float32, 3, 100)"><pre><span class="pl-c"><span class="pl-c">#</span> Retrieve data from column as Julia array</span>
data <span class="pl-k">=</span> uvwcol[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>]  <span class="pl-c"><span class="pl-c">#</span> Get the first 100 rows</span>

<span class="pl-c"><span class="pl-c">#</span> Write to column</span>
uvwcol[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>] <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">3</span>, <span class="pl-c1">100</span>)</pre></div>
<p dir="auto">Indexing operations are limited to single values, unit ranges (e.g. <code>3:300</code>), and colons. More complicated indexes such as with strided ranges (e.g. <code>1:2:100</code>) or with bitmasks are not supported.</p>
<p dir="auto">A note on performance: whilst the <code>Column{T, N}</code> object provides an indexing interface, this is an expensive operation that involves searching and reading from the disk. We do not provide an iterable or AbstractArray interface to this object to discourage its use in this way. Instead, it is recommended to index from a <code>Column{T, N}</code> object infrequently, loading large amounts of data at a time, possibly using batching operations to manage memory usage.</p>
<p dir="auto">For scalar columns and arrays with a fixed size, indexing operations and the resulting array types will be intuitive. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="flags = table[:FLAG_ROW]  # &lt;: Column{Bool, 1}
size(flags) == (260000,)
flags[:] &lt;: Vector{Bool}

corrected = table[:CORRECTED_DATA]  # &lt;: Column{ComplexF64, 3}
size(corrected) == (4, 768, 260000)
corrected[:, 1:192, :] &lt;: Array{ComplexF64, 3}"><pre>flags <span class="pl-k">=</span> table[<span class="pl-c1">:FLAG_ROW</span>]  <span class="pl-c"><span class="pl-c">#</span> &lt;: Column{Bool, 1}</span>
<span class="pl-c1">size</span>(flags) <span class="pl-k">==</span> (<span class="pl-c1">260000</span>,)
flags[:] <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Bool}</span>

corrected <span class="pl-k">=</span> table[<span class="pl-c1">:CORRECTED_DATA</span>]  <span class="pl-c"><span class="pl-c">#</span> &lt;: Column{ComplexF64, 3}</span>
<span class="pl-c1">size</span>(corrected) <span class="pl-k">==</span> (<span class="pl-c1">4</span>, <span class="pl-c1">768</span>, <span class="pl-c1">260000</span>)
corrected[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">192</span>, :] <span class="pl-k">&lt;:</span> <span class="pl-c1">Array{ComplexF64, 3}</span></pre></div>
<p dir="auto">Columns that do not have a fixed size will be typed as providing arrays of arrays. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# No fixed size, but known dimension per cell
weightcol = table[:WEIGHT]  # &lt;: Column{Vector{Float64}, 1}
size(weightcol) == (260000,)
row = weightcol[2] &lt;: Vector{Float64}
size(row) == (4,)"><pre><span class="pl-c"><span class="pl-c">#</span> No fixed size, but known dimension per cell</span>
weightcol <span class="pl-k">=</span> table[<span class="pl-c1">:WEIGHT</span>]  <span class="pl-c"><span class="pl-c">#</span> &lt;: Column{Vector{Float64}, 1}</span>
<span class="pl-c1">size</span>(weightcol) <span class="pl-k">==</span> (<span class="pl-c1">260000</span>,)
row <span class="pl-k">=</span> weightcol[<span class="pl-c1">2</span>] <span class="pl-k">&lt;:</span> <span class="pl-c1">Vector{Float64}</span>
<span class="pl-c1">size</span>(row) <span class="pl-k">==</span> (<span class="pl-c1">4</span>,)</pre></div>
<p dir="auto">These small array allocations for every row are not great for performance, but are required since we cannot know the size (and sometimes the dimension) of the rows ahead of time.</p>
<p dir="auto">As a shorthand, the full contents of the array may be loaded using the empty index which can be useful for exploratory work without having to first check the dimensions of a column. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="corrected[] == corrected[:, :, :]
weightcol[] == weightcol[:]"><pre>corrected[] <span class="pl-k">==</span> corrected[:, :, :]
weightcol[] <span class="pl-k">==</span> weightcol[:]</pre></div>
<h4 dir="auto"><a id="user-content-forced-multidimensional-indexing" class="anchor" aria-hidden="true" href="#forced-multidimensional-indexing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Forced multidimensional indexing</h4>
<p dir="auto">If you <em>know</em> that that your column with no fixed size actually contains constant-sized arrays, you can force Casacore to attempt to load these as one contiguous array:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="data = weightcol[1:4, :]::Matrix{Float64}"><pre>data <span class="pl-k">=</span> weightcol[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>, :]<span class="pl-k">::</span><span class="pl-c1">Matrix{Float64}</span></pre></div>
<p dir="auto">In this example, we are telling Casacore that weightcol is 2-dimensional, and contains at least 4 values in each row. If these assumptions are not true, this will fail.</p>
<h3 dir="auto"><a id="user-content-addingremoving-columns" class="anchor" aria-hidden="true" href="#addingremoving-columns"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adding/removing columns</h3>
<h4 dir="auto"><a id="user-content-explicit-construction" class="anchor" aria-hidden="true" href="#explicit-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Explicit construction</h4>
<p dir="auto">Columns may be added in two ways. The first is by construction of a <code>ColumnDesc</code> object. When we assign this to the <code>Table</code> object, we cause the column to be created:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create scalar column
coldesc = ScalarColumnDesc{Float64}(comment=&quot;My special data&quot;)
table[:NEWCOL] = coldesc
typeof(table[:NEWCOL]) &lt;: Column{Float64, 1}

# Create array column, with each cell having 2 dimensions
# and fixed shape
coldesc = ArrayColumnDesc{Int, 2}((4, 768))
table[:NEWCOL] = coldesc
typeof(table[:NEWCOL]) &lt;: Column{Int, 3}"><pre><span class="pl-c"><span class="pl-c">#</span> Create scalar column</span>
coldesc <span class="pl-k">=</span> <span class="pl-c1">ScalarColumnDesc</span><span class="pl-c1">{Float64}</span>(comment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>My special data<span class="pl-pds">"</span></span>)
table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> coldesc
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Float64, 1}</span>

<span class="pl-c"><span class="pl-c">#</span> Create array column, with each cell having 2 dimensions</span>
<span class="pl-c"><span class="pl-c">#</span> and fixed shape</span>
coldesc <span class="pl-k">=</span> <span class="pl-c1">ArrayColumnDesc</span><span class="pl-c1">{Int, 2}</span>((<span class="pl-c1">4</span>, <span class="pl-c1">768</span>))
table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> coldesc
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Int, 3}</span></pre></div>
<p dir="auto">Note that the dimensionality <code>N</code> of the <code>ArrayColumnDesc{T, N}</code> refers to the dimensionality of the cell. The dimensionality of the column additionally includes the rows.</p>
<p dir="auto">The degenerate column types may also be created in this way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Unknown size, known dimension
coldesc = ArrayColumnDesc{ComplexF64, 2}()
table[:NEWCOL] = coldesc
typeof(table[:NEWCOL]) &lt;: Column{Array{ComplexF64, 2}, 1}

# Unknown dimension and size
coldesc = ArrayColumnDesc{Int16}()
table[:NEWCOL] = coldesc
typeof(table[:NEWCOL]) &lt;: Column{Array{Int16}, 1}"><pre><span class="pl-c"><span class="pl-c">#</span> Unknown size, known dimension</span>
coldesc <span class="pl-k">=</span> <span class="pl-c1">ArrayColumnDesc</span><span class="pl-c1">{ComplexF64, 2}</span>()
table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> coldesc
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Array{ComplexF64, 2}, 1}</span>

<span class="pl-c"><span class="pl-c">#</span> Unknown dimension and size</span>
coldesc <span class="pl-k">=</span> <span class="pl-c1">ArrayColumnDesc</span><span class="pl-c1">{Int16}</span>()
table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> coldesc
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Array{Int16}, 1}</span></pre></div>
<p dir="auto">Explicit column construction in this way allows adding comments to the column as well as controlling the storage manager and storage groups.</p>
<h4 dir="auto"><a id="user-content-implicit-construction" class="anchor" aria-hidden="true" href="#implicit-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implicit construction</h4>
<p dir="auto">Columns may also be added by simply assigning an array to your table where the type of the array will determine the type of the column. This will additionally populate the column with the contents of the array.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="size(table) = (1000, 4)  # has 1,000 rows

table[:NEWCOL] = zeros(Int, 1000)::Vector{Int}
typeof(table[:NEWCOL]) &lt;: Column{Int, 1}

table[:NEWCOL] = zeros(Int, 3, 1000)::Array{Int, 3}
typeof(table[:NEWCOL]) &lt;: Column{Int, 3}

# No fixed sized
table[:NEWCOL] = [rand(rand(UInt8, 2)...) for _ in 1:1000]::Vector{Matrix{Float64}}
typeof(table[:NEWCOL]) &lt;: Column{Matrix{Float64}, 1}

# No fixed dimension or size
table[:NEWCOL] = [rand(rand(UInt8, rand([1, 2, 3]))...) for _ in 1:1000]::Vector{Array{Float64}}
typeof(table[:NEWCOL]) &lt;: Column{Array{Float64}, 1}"><pre><span class="pl-en">size</span>(table) <span class="pl-k">=</span> (<span class="pl-c1">1000</span>, <span class="pl-c1">4</span>)  <span class="pl-c"><span class="pl-c">#</span> has 1,000 rows</span>

table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">1000</span>)<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Int, 1}</span>

table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">3</span>, <span class="pl-c1">1000</span>)<span class="pl-k">::</span><span class="pl-c1">Array{Int, 3}</span>
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Int, 3}</span>

<span class="pl-c"><span class="pl-c">#</span> No fixed sized</span>
table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">rand</span>(UInt8, <span class="pl-c1">2</span>)<span class="pl-k">...</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>]<span class="pl-k">::</span><span class="pl-c1">Vector{Matrix{Float64}}</span>
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Matrix{Float64}, 1}</span>

<span class="pl-c"><span class="pl-c">#</span> No fixed dimension or size</span>
table[<span class="pl-c1">:NEWCOL</span>] <span class="pl-k">=</span> [<span class="pl-c1">rand</span>(<span class="pl-c1">rand</span>(UInt8, <span class="pl-c1">rand</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]))<span class="pl-k">...</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>]<span class="pl-k">::</span><span class="pl-c1">Vector{Array{Float64}}</span>
<span class="pl-c1">typeof</span>(table[<span class="pl-c1">:NEWCOL</span>]) <span class="pl-k">&lt;:</span> <span class="pl-c1">Column{Array{Float64}, 1}</span></pre></div>
<p dir="auto">Note that the table row length must match last dimension of the array being assigned.</p>
<h4 dir="auto"><a id="user-content-deletion" class="anchor" aria-hidden="true" href="#deletion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Deletion</h4>
<p dir="auto">Columns may be deleted using the <code>delete!()</code> function. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delete!(table, :NEWCOL)"><pre><span class="pl-c1">delete!</span>(table, <span class="pl-c1">:NEWCOL</span>)</pre></div>
<h3 dir="auto"><a id="user-content-taql" class="anchor" aria-hidden="true" href="#taql"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TaQL</h3>
<p dir="auto">Casascore implements a query language that allows selecting, sorting, filtering and joining tables to produce derived tables, as described in <a href="https://casacore.github.io/casacore-notes/199.html" rel="nofollow">Note 199</a>. With the exception of <code>CALC</code> operations, this is available by calling <code>taql(command, table1, [table2, ...])</code>. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="derived = taql(
    raw&quot;SELECT max(ANTENNA1, ANTENNA2) as MAXANT FROM $1 WHERE ANTENNA1 &lt;&gt; ANTENNA2 AND NOT FLAG_ROW&quot;,
    table
)

size(derived[:MAXANT]) == (228780,)"><pre>derived <span class="pl-k">=</span> <span class="pl-c1">taql</span>(
    <span class="pl-s"><span class="pl-c1">raw</span><span class="pl-pds">"</span>SELECT max(ANTENNA1, ANTENNA2) as MAXANT FROM $1 WHERE ANTENNA1 &lt;&gt; ANTENNA2 AND NOT FLAG_ROW<span class="pl-pds">"</span></span>,
    table
)

<span class="pl-c1">size</span>(derived[<span class="pl-c1">:MAXANT</span>]) <span class="pl-k">==</span> (<span class="pl-c1">228780</span>,)</pre></div>
<p dir="auto">Command accepts a standard Julia <code>String</code>, however note that in this case we've prefixed the string with <code>raw"..."</code> which stops Julia attempting to interpolate the <code>$1</code> table identifier. If you use a standard string literal, ensure such identifiers are properly escaped.</p>
<h2 dir="auto"><a id="user-content-casacoremeasures" class="anchor" aria-hidden="true" href="#casacoremeasures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Casacore.Measures</h2>
<p dir="auto">Measures allow constructing objects that contain a value with respect to a particular reference frame. Examples include: an Altitude/Azimuth frame with respect to a particular location and time on Earth; a Right Ascension/Declination on the sky with respect to the J2000 system; or a time in UTC timezone.</p>
<p dir="auto">In Casacore, Measures are primarily implemented to allow conversions between types, and in Casacore.jl this is the primary use case for which we have designed their use.</p>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<p dir="auto">An example converting a Direction from J2000 to local Aziumth/Elevation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Casacore.Measures
using Unitful  # provides @str_u macro for units, e.g. 1u&quot;m&quot;

# We want to convert this RA/Dec direction to Azimuth/Elevation
direction = Measures.Direction(
    Measures.Directions.J2000, 0u&quot;rad&quot;, 0u&quot;rad&quot;
)

# A local Az/El requires knowledge of our position on Earth and the time
pos = Measures.Position(
    Measures.Positions.ITRF, 5000u&quot;km&quot;, 1000u&quot;km&quot;, 100u&quot;km&quot;
)
time = Measures.Epoch(Measures.Epochs.UTC, 1234567u&quot;d&quot;)

# Perform conversion by passing in desired type, as well as
# any additional measures as a reference frame required for the conversion
# newdirection = mconvert(newtype, olddirection, [measures...])
direction = mconvert(
    Measures.Directions.AZEL, direction, pos, time
)

direction.long, direction.lat  # -1.2469808464138252 rad, 0.48889373998953756 rad"><pre><span class="pl-k">using</span> Casacore<span class="pl-k">.</span>Measures
<span class="pl-k">using</span> Unitful  <span class="pl-c"><span class="pl-c">#</span> provides @str_u macro for units, e.g. 1u"m"</span>

<span class="pl-c"><span class="pl-c">#</span> We want to convert this RA/Dec direction to Azimuth/Elevation</span>
direction <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Direction</span>(
    Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>J2000, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>rad<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>rad<span class="pl-pds">"</span></span>
)

<span class="pl-c"><span class="pl-c">#</span> A local Az/El requires knowledge of our position on Earth and the time</span>
pos <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Position</span>(
    Measures<span class="pl-k">.</span>Positions<span class="pl-k">.</span>ITRF, <span class="pl-c1">5000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>, <span class="pl-c1">1000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>, <span class="pl-c1">100</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>
)
time <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Epoch</span>(Measures<span class="pl-k">.</span>Epochs<span class="pl-k">.</span>UTC, <span class="pl-c1">1234567</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>d<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Perform conversion by passing in desired type, as well as</span>
<span class="pl-c"><span class="pl-c">#</span> any additional measures as a reference frame required for the conversion</span>
<span class="pl-c"><span class="pl-c">#</span> newdirection = mconvert(newtype, olddirection, [measures...])</span>
direction <span class="pl-k">=</span> <span class="pl-c1">mconvert</span>(
    Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>AZEL, direction, pos, time
)

direction<span class="pl-k">.</span>long, direction<span class="pl-k">.</span>lat  <span class="pl-c"><span class="pl-c">#</span> -1.2469808464138252 rad, 0.48889373998953756 rad</span></pre></div>
<p dir="auto">An example converting a frequency from its REST frame to observed frequency based on additional information about its radial velocity:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create radial velocity measure with a direction
direction = Measures.Direction(Measures.Directions.J2000, 45u&quot;°&quot;, 20u&quot;°&quot;)
# Provide additional frame information for a measure as additional measures
# during construction.
# e.g. RadialVelocity(::Type, ::Unitful.Velocity, ::AbstractMeasure...)
rv = Measures.RadialVelocity(
    Measures.RadialVelocities.LSRD, 20_000u&quot;km/s&quot;, direction
)

freq = Measures.Frequency(
    Measures.Frequencies.REST, 1420u&quot;MHz&quot;, direction
)

# Now calculate the redshifted frequency
freqshifted = mconvert(Measures.Frequencies.LSRD, freq, rv)
freqshifted.freq  # 1328 MHz"><pre><span class="pl-c"><span class="pl-c">#</span> Create radial velocity measure with a direction</span>
direction <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Direction</span>(Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>J2000, <span class="pl-c1">45</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>, <span class="pl-c1">20</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Provide additional frame information for a measure as additional measures</span>
<span class="pl-c"><span class="pl-c">#</span> during construction.</span>
<span class="pl-c"><span class="pl-c">#</span> e.g. RadialVelocity(::Type, ::Unitful.Velocity, ::AbstractMeasure...)</span>
rv <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">RadialVelocity</span>(
    Measures<span class="pl-k">.</span>RadialVelocities<span class="pl-k">.</span>LSRD, <span class="pl-c1">20_000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km/s<span class="pl-pds">"</span></span>, direction
)

freq <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Frequency</span>(
    Measures<span class="pl-k">.</span>Frequencies<span class="pl-k">.</span>REST, <span class="pl-c1">1420</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>MHz<span class="pl-pds">"</span></span>, direction
)

<span class="pl-c"><span class="pl-c">#</span> Now calculate the redshifted frequency</span>
freqshifted <span class="pl-k">=</span> <span class="pl-c1">mconvert</span>(Measures<span class="pl-k">.</span>Frequencies<span class="pl-k">.</span>LSRD, freq, rv)
freqshifted<span class="pl-k">.</span>freq  <span class="pl-c"><span class="pl-c">#</span> 1328 MHz</span></pre></div>
<h3 dir="auto"><a id="user-content-measure-construction" class="anchor" aria-hidden="true" href="#measure-construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Measure Construction</h3>
<p dir="auto">In general, a Measure is constructed in the following way</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Measure(::Type, initval..., ::AbstractMeasures...; offset)"><pre><span class="pl-c1">Measure</span>(<span class="pl-k">::</span><span class="pl-c1">Type</span>, initval<span class="pl-k">...</span>, <span class="pl-k">::</span><span class="pl-c1">AbstractMeasures...</span>; offset)</pre></div>
<p dir="auto">Here the <code>initval</code> differs between specific Measures. For example, for <code>Direction</code> it consists two angle values; for <code>Epoch</code> it is a single time value. See below for full list.</p>
<p dir="auto">The optional list of <code>AbstractMeasures</code> will be added as a reference frame for the Measure, and the optional <code>offset</code> can be entered as an origin point for the Measure. These concepts map directly to the underlying Casacore library.</p>
<p dir="auto">The supported Measures and their properties are:</p>
<table>
<thead>
<tr>
<th>Measure</th>
<th>Properties</th>
<th>Quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>Baseline</td>
<td><code>:x :y :z</code></td>
<td><code>Unitful.Length</code></td>
</tr>
<tr>
<td>Direction</td>
<td><code>:long :lat</code></td>
<td><code>Unitful.Angle</code></td>
</tr>
<tr>
<td>Doppler</td>
<td><code>:doppler</code></td>
<td><code>Union{Float64, Unitful.Velocity}</code></td>
</tr>
<tr>
<td>EarthMagnetic</td>
<td><code>:x :y :z</code></td>
<td><code>Unitful.Bfield</code></td>
</tr>
<tr>
<td>Epoch</td>
<td><code>:time</code></td>
<td><code>Unitful.Time</code></td>
</tr>
<tr>
<td>Frequency</td>
<td><code>:freq</code></td>
<td><code>Unitful.Frequency</code></td>
</tr>
<tr>
<td>Position</td>
<td><code>:x :y :z</code></td>
<td><code>Unitful.Length</code></td>
</tr>
<tr>
<td>RadialVelocity</td>
<td><code>velocity</code></td>
<td><code>Unitful.Velocity</code></td>
</tr>
<tr>
<td>UVW</td>
<td><code>:u :v :w</code></td>
<td><code>Unitful.Length</code></td>
</tr>
</tbody>
</table>
<p dir="auto">As an example, we might construct an EarthMagnetic vector in the following way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Pass in each of x, y, z vector components in milli Tesla
em = Measures.EarthMagnetic(
    Measures.EarthMagnetics.AZEL, 1u&quot;mT&quot;, 2u&quot;mT&quot;, 3u&quot;mT&quot;
)

em.y == 0.002u&quot;T&quot;"><pre><span class="pl-c"><span class="pl-c">#</span> Pass in each of x, y, z vector components in milli Tesla</span>
em <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">EarthMagnetic</span>(
    Measures<span class="pl-k">.</span>EarthMagnetics<span class="pl-k">.</span>AZEL, <span class="pl-c1">1</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>mT<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>mT<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>mT<span class="pl-pds">"</span></span>
)

em<span class="pl-k">.</span>y <span class="pl-k">==</span> <span class="pl-c1">0.002</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>T<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">A more complicated example might be to provide a direction with respect to Jupiter at a particular time:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Set up frame
time = Measures.Epoch(Measures.Epochs.UTC, 60_000u&quot;d&quot;)

# Create Jupiter direction with addtional Epoch
jupiter = mconvert(
    Measures.Directions.J2000,
    Measures.Direction(Measures.Directions.JUPITER, 0u&quot;°&quot;, 0u&quot;°&quot;, time)
)

# Create direction offset from Jupiter
direction = Measures.Direction(
    Measures.Directions.J2000, 5u&quot;°&quot;, 10u&quot;°&quot;; offset=jupiter
)"><pre><span class="pl-c"><span class="pl-c">#</span> Set up frame</span>
time <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Epoch</span>(Measures<span class="pl-k">.</span>Epochs<span class="pl-k">.</span>UTC, <span class="pl-c1">60_000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>d<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Create Jupiter direction with addtional Epoch</span>
jupiter <span class="pl-k">=</span> <span class="pl-c1">mconvert</span>(
    Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>J2000,
    Measures<span class="pl-k">.</span><span class="pl-c1">Direction</span>(Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>JUPITER, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>, time)
)

<span class="pl-c"><span class="pl-c">#</span> Create direction offset from Jupiter</span>
direction <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Direction</span>(
    Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>J2000, <span class="pl-c1">5</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>°<span class="pl-pds">"</span></span>; offset<span class="pl-k">=</span>jupiter
)</pre></div>
<h3 dir="auto"><a id="user-content-conversions" class="anchor" aria-hidden="true" href="#conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Conversions</h3>
<p dir="auto">Conversions between types can be handled by the <code>mconvert()</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Direction conversions
mconvert(
    type::Directions.Types, dir::Direction, measures::AbstractMeasures...
)"><pre><span class="pl-c"><span class="pl-c">#</span> Direction conversions</span>
<span class="pl-c1">mconvert</span>(
    type<span class="pl-k">::</span><span class="pl-c1">Directions.Types</span>, dir<span class="pl-k">::</span><span class="pl-c1">Direction</span>, measures<span class="pl-k">::</span><span class="pl-c1">AbstractMeasures...</span>
)</pre></div>
<p dir="auto">This will convert <code>dir</code> to the type <code>type</code>, with optional measures provided as part of the reference frame that might be necessary for the conversion.</p>
<p dir="auto">For large numbers of conversions of the same type, using the same reference frame, it is recommended to reuse Measure and Conversion objects for maximal performance, as the construction of these objects has some overhead. This can be done using `mconvert!() which has the signature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mconvert!(in::T, out::T, c:Converter) where {T &lt;: AbstractMeasure}"><pre><span class="pl-c1">mconvert!</span>(in<span class="pl-k">::</span><span class="pl-c1">T</span>, out<span class="pl-k">::</span><span class="pl-c1">T</span>, c<span class="pl-k">:</span>Converter) <span class="pl-k">where</span> {T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractMeasure</span>}</pre></div>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# Set up 100,000 random RA/Dec coordinates to transform to AZEL
radecs = rand(2, 100_000) * Unitful.rad

# Reference frame
time = Measures.Epoch(Measures.Epochs.UTC, 60000u&quot;d&quot;)
pos = Measures.Position(
    Measures.Positions.ITRF, 6000u&quot;km&quot;, 0u&quot;km&quot;, 0u&quot;km&quot;
)

# Create conversion engine just once and reuse
# Converter(in::type, out::type, measures::AbstractMeasures...)
c = Measures.Converter(
    Measures.Directions.J2000, Measures.Directions.AZEL, time, pos
)

# Create template direction which we will mutate for each conversion
dir = zero(Measures.Direction)

azels = map(eachcol(radecs)) do (ra, dec)
    dir.type = Measures.Directions.J2000
    dir.long = ra
    dir.lat = dec
    mconvert!(dir, dir, c)
    return dir.long, dir.lat
end"><pre><span class="pl-c"><span class="pl-c">#</span> Set up 100,000 random RA/Dec coordinates to transform to AZEL</span>
radecs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">2</span>, <span class="pl-c1">100_000</span>) <span class="pl-k">*</span> Unitful<span class="pl-k">.</span>rad

<span class="pl-c"><span class="pl-c">#</span> Reference frame</span>
time <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Epoch</span>(Measures<span class="pl-k">.</span>Epochs<span class="pl-k">.</span>UTC, <span class="pl-c1">60000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>d<span class="pl-pds">"</span></span>)
pos <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Position</span>(
    Measures<span class="pl-k">.</span>Positions<span class="pl-k">.</span>ITRF, <span class="pl-c1">6000</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>, <span class="pl-c1">0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>km<span class="pl-pds">"</span></span>
)

<span class="pl-c"><span class="pl-c">#</span> Create conversion engine just once and reuse</span>
<span class="pl-c"><span class="pl-c">#</span> Converter(in::type, out::type, measures::AbstractMeasures...)</span>
c <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Converter</span>(
    Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>J2000, Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>AZEL, time, pos
)

<span class="pl-c"><span class="pl-c">#</span> Create template direction which we will mutate for each conversion</span>
dir <span class="pl-k">=</span> <span class="pl-c1">zero</span>(Measures<span class="pl-k">.</span>Direction)

azels <span class="pl-k">=</span> <span class="pl-c1">map</span>(<span class="pl-c1">eachcol</span>(radecs)) <span class="pl-k">do</span> (ra, dec)
    dir<span class="pl-k">.</span>type <span class="pl-k">=</span> Measures<span class="pl-k">.</span>Directions<span class="pl-k">.</span>J2000
    dir<span class="pl-k">.</span>long <span class="pl-k">=</span> ra
    dir<span class="pl-k">.</span>lat <span class="pl-k">=</span> dec
    <span class="pl-c1">mconvert!</span>(dir, dir, c)
    <span class="pl-k">return</span> dir<span class="pl-k">.</span>long, dir<span class="pl-k">.</span>lat
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-observatories" class="anchor" aria-hidden="true" href="#observatories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Observatories</h3>
<p dir="auto">A limited set of observatories are known by Casacore and their positions can be loaded by name rather than explicitly providing coordinates.</p>
<p dir="auto">The full list of known observatories can be queried:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Measures.Positions.observatories()

# 47-element Vector{Symbol}:
#  :ALMA
#  :ARECIBO
#  ⋮
#  :MWA32T
#  Symbol(&quot;AMI-LA&quot;)"><pre>Measures<span class="pl-k">.</span>Positions<span class="pl-k">.</span><span class="pl-c1">observatories</span>()

<span class="pl-c"><span class="pl-c">#</span> 47-element Vector{Symbol}:</span>
<span class="pl-c"><span class="pl-c">#</span>  :ALMA</span>
<span class="pl-c"><span class="pl-c">#</span>  :ARECIBO</span>
<span class="pl-c"><span class="pl-c">#</span>  ⋮</span>
<span class="pl-c"><span class="pl-c">#</span>  :MWA32T</span>
<span class="pl-c"><span class="pl-c">#</span>  Symbol("AMI-LA")</span></pre></div>
<p dir="auto">An observatory position can be constructed using the observatory name:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="obs1 = Measures.Position(:ALMA)
# Position(:type=WGS84, :x=1761.86 m, :y=-4307.63 m, :z=-1977.70 m)

obs2 = Measures.Position(:ATCA)
# Position(:type=ITRF, :x=-4.75091e6 m, :y=2.79290e6 m, :z=-3.20048e6 m)"><pre>obs1 <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Position</span>(<span class="pl-c1">:ALMA</span>)
<span class="pl-c"><span class="pl-c">#</span> Position(:type=WGS84, :x=1761.86 m, :y=-4307.63 m, :z=-1977.70 m)</span>

obs2 <span class="pl-k">=</span> Measures<span class="pl-k">.</span><span class="pl-c1">Position</span>(<span class="pl-c1">:ATCA</span>)
<span class="pl-c"><span class="pl-c">#</span> Position(:type=ITRF, :x=-4.75091e6 m, :y=2.79290e6 m, :z=-3.20048e6 m)</span></pre></div>
<h2 dir="auto"><a id="user-content-casacorelibcasacore" class="anchor" aria-hidden="true" href="#casacorelibcasacore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Casacore.LibCasacore</h2>
<p dir="auto">All objects and methods that are exposed by CxxWrap are available in LibCasacore. This is not a stable API and may be subject to change.</p>
</article></div>