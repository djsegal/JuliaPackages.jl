<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-bloomjl" class="anchor" aria-hidden="true" href="#bloomjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bloom.jl</h1>
<p><a href="https://travis-ci.org/boydgreenfield/bloom.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ded320c46a800ce9c0c2aa87b7f4d5399cffb2e8/68747470733a2f2f7472617669732d63692e6f72672f626f7964677265656e6669656c642f626c6f6f6d2e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/boydgreenfield/bloom.jl.png" style="max-width:100%;"></a></p>
<p>Bloom filter implementation in Julia. Supports insertion (<code>add!</code>) and probabilistic membership queries (<code>contains</code>) for sets of strings using an in-memory or mmap'd bit array. When an element <code>x</code> is inserted into a Bloom filter, set membership queries will always correctly return <code>true</code> for <code>x</code> (i.e., there are no false negatives). Bloom filter membership queries do, however, occassionally return <code>true</code> for a <code>y</code> not inserted into the data structure (i.e., false positives are possible). With this cost comes remarkable space efficiency: Bloom filters can store set membership using only 10 bits per element at a 1.00% error rate or 20 bits per element at a 0.01% error rate. This space requirement is irrespective of the size or length of the inserted elements (e.g., one can store a set of URLs using only a handful of bits per URL).</p>
<p>Forthcoming features include:</p>
<ul>
<li>Support for additional types (requires additional Julia hash() methods that take a second seed parameter)</li>
<li>Support for iterables with the <code>add!</code> method</li>
<li>Better persistence (saving information on the Bloom filter and not just the mmap array)</li>
</ul>
<h1><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickstart</h1>
<p>Quick functionality demo:</p>
<pre><code>using Bloom


bf = BloomFilter(1000, 0.001)  # Create an in-memory Bloom filter
							   # with a capacity of 1K elements and
							   # expected error rate of 1%

add!(bf, "My first element.")
contains(bf, "My first element.")   # Returns true
contains(bf, "My second element.")  # Returns false
show(bf)

# Prints:
# Bloom filter with capacity 1000, error rate of 0.10, and k of 10.
# Total bits required: 15000 (15.0 / element).
# Bloom filter is in-memory.

</code></pre>
<p>By default, the Bloom filter will be constructed using an optimal number of k hash functions, which minimizes the expected false positive rate per required bit of storage. In many cases, however, it may be advantegous to specify a smaller valeu of k in order to save time hashing and performing subsequent memory accesses. Alternatively, one may want to explicitly set the number of bits to use per element <em>and</em> k, rather than constructing the filter by passing a target error rate.</p>
<p>The <code>Bloom</code> module supports all 3 of these patterns:</p>
<pre><code># Constructor pattern #1: Pass capacity and error rate
bf1 = BloomFilter(1000, 0.001)

# Constructor pattern #2: Pass capacity, error rate, and k
bf2 = BloomFilter(1000, 0.001, 6)  # vs. the optimal number of 10 if not specified as in bf1

# Constructor pattern #3: Pass capacity, bits per element, and k, but not the error rate
bf3 = BloomFilter(1000, 16, 6)  # Same as bf2, but will *not* compute the error rate and display NaN when show() is called
</code></pre>
<p>In addition to this, basic persistence support is provided via optionally using an mmap-backed bit array. This works with each of the above methods by either passing a string of the mmap filepath or an <code>IOStream</code>:</p>
<pre><code>### With an IOStream
# Note that "w+" needs to be passed as the second argument to open() if creating
# a new mmap-backed Bloom filter, or "r+" if opening an already created one
bf4 = BloomFilter(open("/tmp/small_bloom_filter.array", "w+"), 1000, 0.001)

### With a string filepath
# Note this creates the bit array if it doesn't exist or opens it if previously created
bf5 = BloomFilter("/tmp/small_bloom_filter_two.array", 1000, 0.001)

show(bf5)

# Prints:
# Bloom filter with capacity 1000, error rate of 0.10, and k of 10.
# Total bits required: 15000 (15.0 / element).
# Bloom filter is backed by mmap at &lt;file /tmp/small_bloom_filter_two.array&gt;.
</code></pre>
</article></div>