<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/JuliaMath/FastPow.jl/actions"><img src="https://github.com/JuliaMath/FastPow.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-fastpow" class="anchor" aria-hidden="true" href="#fastpow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastPow</h1>
<p dir="auto">This package provides a macro <code>@fastpow</code> that can speed up
the computation of <em>integer powers</em> in any Julia expression
by transforming them into <em>optimal sequences of multiplications</em>,
with a slight sacrifice in accuracy compared to Julia's built-in
<code>x^n</code> function.   It also optimizes powers of the form <code>1^p</code>, <code>(-1)^p</code>, <code>2^p</code>, and <code>10^p</code>.</p>
<p dir="auto">In particular, it uses optimal <a href="https://en.wikipedia.org/wiki/Addition-chain_exponentiation" rel="nofollow">addition-chain exponentiation</a> for (literal) integer powers up to 255, and for larger powers uses <a href="https://en.wikipedia.org/wiki/Exponentiation_by_squaring" rel="nofollow">repeated
squaring</a>
to first reduce the power to ≤ 255 and then use addition chains.</p>
<p dir="auto">For example, <code>@fastpow z^25</code> requires 6 multiplications, and for <code>z = 0.73</code> it gives the correct answer to a relative error of <code>≈ 1.877e-15</code> (about 8 <a href="https://en.wikipedia.org/wiki/Unit_in_the_last_place" rel="nofollow">ulps</a>), vs. the default <code>z^25</code> which gives the correct answer to a relative error of <code>≈ 6.03e-16</code> (about 3 ulps) but is about 10× slower.</p>
<p dir="auto">Note that you can apply the <code>@fastpow</code> macro to a whole <em>block</em>
of Julia code at once.  For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@fastpow function foo(x,y)
    z = sin(x)^3 + sqrt(y)
    return z^7 - 4x^5.3 + 3y^12
end"><pre><span class="pl-c1">@fastpow</span> <span class="pl-k">function</span> <span class="pl-en">foo</span>(x,y)
    z <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">sqrt</span>(y)
    <span class="pl-k">return</span> z<span class="pl-k">^</span><span class="pl-c1">7</span> <span class="pl-k">-</span> <span class="pl-c1">4</span>x<span class="pl-k">^</span><span class="pl-c1">5.3</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>y<span class="pl-k">^</span><span class="pl-c1">12</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">applies the <code>@fastpow</code> transformation to <em>every</em> literal integer
exponent (<code>^3</code>, <code>^7</code>, and <code>^12</code>) in the function <code>foo</code>.</p>
<p dir="auto">An alternative to <code>@fastpow</code> is to use Julia's built-in
<a href="https://docs.julialang.org/en/v1/base/math/#Base.FastMath.@fastmath" rel="nofollow"><code>@fastmath</code></a> macro, which enables various LLVM optimizations
including, in some cases, faster integer powers using
repeated multiplication.  The advantages of <code>@fastpow</code> are that
it <em>guarantees</em> optimal addition-chain exponentiation
and that it works for exponentiating <em>any</em> Julia type
(e.g. complex numbers, matrices, …), whereas LLVM will only
optimize a small set of hardware numeric types.</p>
</article></div>