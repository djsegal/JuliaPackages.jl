<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-samplingrb" class="anchor" aria-hidden="true" href="#samplingrb"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SamplingRB</h1>
<p dir="auto">SamplingRB is a package designed to calculate long-only weights for
coherent Risk Parity and Risk Budgeting portfolios,
given arbitrary simulations of relative losses of each asset.</p>
<p dir="auto">It provides a general cutting plane algorithm for a coherent risk measures.
Special risk measures, such as CVaR and distortion risk measures are
already provided for ease of use.</p>
<p dir="auto">In the special case of CVaR, it implements a cutting plane algorithm
with dedicated initialization for numerical stability and performance,
allowing for several thousand simulations.
It also implements two stochastic gradient algorithms,
taking samples from a user-defined function that allows for
arbitrary distributions.
One is based on the Lagrangian reformulation of the problem,
while the other is a projected version into the feasible domain.</p>
<h1 dir="auto"><a id="user-content-simple-usage" class="anchor" aria-hidden="true" href="#simple-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple usage</h1>
<p dir="auto">We generate a simple <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="0a29e7c20ba3b6547d041147baff3e92">$3 \times 10$</math-renderer> matrix of simulations,
and evaluate the 0.9-CV@R risk parity portfolio (<code>B = ones</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Random: MersenneTwister
using SamplingRB

rng = MersenneTwister(1)

# Parameters
d    = 3  # dimension
nsim = 10 # Nb of simulations

B = ones(d)
alpha = 0.90
relative_losses = randn(rng, d, nsim)

status, w = cvar_rbp(B, alpha, relative_losses)
@assert status == 0
@assert isapprox(w, [0.2280, 0.2706, 0.5014]; atol=1e-4)"><pre><span class="pl-k">using</span> Random<span class="pl-k">:</span> MersenneTwister
<span class="pl-k">using</span> SamplingRB

rng <span class="pl-k">=</span> <span class="pl-c1">MersenneTwister</span>(<span class="pl-c1">1</span>)

<span class="pl-c"><span class="pl-c">#</span> Parameters</span>
d    <span class="pl-k">=</span> <span class="pl-c1">3</span>  <span class="pl-c"><span class="pl-c">#</span> dimension</span>
nsim <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> Nb of simulations</span>

B <span class="pl-k">=</span> <span class="pl-c1">ones</span>(d)
alpha <span class="pl-k">=</span> <span class="pl-c1">0.90</span>
relative_losses <span class="pl-k">=</span> <span class="pl-c1">randn</span>(rng, d, nsim)

status, w <span class="pl-k">=</span> <span class="pl-c1">cvar_rbp</span>(B, alpha, relative_losses)
<span class="pl-c1">@assert</span> status <span class="pl-k">==</span> <span class="pl-c1">0</span>
<span class="pl-c1">@assert</span> <span class="pl-c1">isapprox</span>(w, [<span class="pl-c1">0.2280</span>, <span class="pl-c1">0.2706</span>, <span class="pl-c1">0.5014</span>]; atol<span class="pl-k">=</span><span class="pl-c1">1e-4</span>)</pre></div>
<h1 dir="auto">
<a id="user-content-example-using-juliacall-from-r" class="anchor" aria-hidden="true" href="#example-using-juliacall-from-r"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example using JuliaCall from R</h1>
</article></div>