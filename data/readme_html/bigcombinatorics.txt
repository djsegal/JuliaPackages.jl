<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-bigcombinatorics" class="anchor" aria-hidden="true" href="#bigcombinatorics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BigCombinatorics</h1>
<p><a href="https://travis-ci.org/scheinerman/BigCombinatorics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51a0c915fa51b19c7f6cd826fb5b425610c8382c/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f426967436f6d62696e61746f726963732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/BigCombinatorics.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/BigCombinatorics.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a0d3699fd90055cc1be274d44264aef59ee3f982/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f426967436f6d62696e61746f726963732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/BigCombinatorics.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This is an implementation of various combinatorial functions.
These functions <em>always</em> return <code>BigInt</code> values. This convention
is signaled by the fact that these functions' names begin
with a capital letter.</p>
<h2><a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rationale</h2>
<p>If we want to calculate 20!, it's easy enough to do this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">20</span>)
<span class="pl-c1">2432902008176640000</span></pre></div>
<p>However, for 100!, we see this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">100</span>)
ERROR<span class="pl-k">:</span> OverflowError<span class="pl-k">:</span> <span class="pl-c1">100</span> is too large to look up <span class="pl-k">in</span> the table
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">factorial_lookup</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>combinatorics<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">19</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">factorial</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>combinatorics<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">27</span>
 [<span class="pl-c1">3</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span></pre></div>
<p>The problem is that 100! is too big to fit in an <code>Int</code> answer. Of course,
we could resolve this problem this way:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">big</span>(<span class="pl-c1">100</span>))
<span class="pl-c1">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span></pre></div>
<p>We take a different approach. We shouldn't have to worry about how large
our arguments may be before a combinatorial function overflows. Instead,
let's assume the result is <em>always</em> of type <code>BigInt</code> so the calculation
will not be hampered by this problem.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions</h2>
<ul>
<li><code>Fibonacci(n)</code> returns the <code>n</code>-th Fibonacci number with <code>Fibonacci(0)==0</code>
and <code>Fibonacci(1)==1</code>.</li>
<li><code>Factorial(n)</code> returns <code>n!</code> and <code>Factorial(n,k)</code> returns <code>n!/k!</code>.</li>
<li><code>FallingFactorial(n,k)</code> returns <code>n*(n-1)*(n-2)*...*(n-k+1)</code>.</li>
<li><code>RisingFactorial(n,k)</code> returns <code>n*(n+1)*(n+2)*...*(n+k-1)</code>.</li>
<li><code>DoubleFactorial(n)</code> returns <code>n!!</code>.</li>
<li><code>Catalan(n)</code> returns the <code>n</code>-th Catalan number.</li>
<li><code>Derangements(n)</code> returns the number of derangements of
an <code>n</code>-element set.</li>
<li><code>Binomial(n,k)</code> returns the number of <code>k</code>-element subsets
of an <code>n</code>-element set.</li>
<li><code>MultiChoose(n,k)</code> returns the number of <code>k</code>-element
<em>multisets</em> that can be formed using the elements of
an <code>n</code>-element set. <strong>Warning</strong>: This is not the same
as <code>Multinomial</code>.</li>
<li><code>Multnomial(vals)</code> returns the multinomial coefficient where
the top index is the sum of <code>vals</code>. Here, <code>vals</code> may either be a
vector of integers or a comma separated list of arguments.
In other words, both <code>Multinomial([3,3,3])</code> and <code>Multinomial(3,3,3)</code>
return the multinomial coefficient with top index <code>9</code> and bottom
indices <code>3,3,3</code>. The result is <code>1680</code>. <strong>Warning</strong>: This is
not the same as <code>MultiChoose</code>.</li>
<li><code>Bell(n)</code> returns the <code>n</code>-th Bell number, i.e., the number
of partitions of an <code>n</code>-element set.</li>
<li><code>Stirling1(n,k)</code> returns the <em>signed</em> Stirling number of the
first kind.</li>
<li><code>Stirling2(n,k)</code> returns the Stirling number of the second
kind, i.e., the number of partitions of an <code>n</code>-element set into
<code>k</code>-parts (nonempty).</li>
<li><code>Fibonacci(n)</code> returns the <code>n</code>-th Fibonacci number
with <code>Fibonacci(0)==0</code> and <code>Fibonacci(1)==1</code>.</li>
<li><code>IntPartitions(n)</code> returns the number of partitions of the integer <code>n</code>
and <code>IntPartitions(n,k)</code> returns the number of partitions of the integer
<code>n</code> with exactly <code>k</code> parts.</li>
<li><code>IntPartitionsDistinct(n)</code> returns the number of partitions of <code>n</code> into
<em>distinct</em> parts and <code>IntPartitionsDistinct(n,k)</code> returns the number of
partitions of <code>n</code> into <code>k</code> <em>distinct</em> parts.</li>
<li><code>Euler(n)</code> returns the <code>n</code>-th Euler number.</li>
<li><code>Eulerian(n,k)</code> returns the number of permutations of <code>1:n</code> with <code>k</code>
ascents.</li>
<li><code>PowerSum(n,k)</code> returns the sum <code>1^k + 2^k + ... + n^k</code>.</li>
</ul>
<h2><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implementation</h2>
<p>These function have nice recursive properties that we
exploit to make the code as simple as possible.
In many (but not all) of these functions we cache the result
of the calculation to avoid combinatorial explosion in the
recursion. In those cases, we don't compute the same result twice.</p>
<p>The following functions can be used to manage the saved values.</p>
<ul>
<li><code>BigCombinatorics.cache_report()</code> prints out the number of values
stored in the cache for each function.</li>
<li><code>BigCombinatorics.cache_clear(func)</code> clears all values stored for
a specific function.</li>
<li><code>BigCombinatorics.cache_clear()</code> clears all values in the cache.</li>
</ul>
</article></div>