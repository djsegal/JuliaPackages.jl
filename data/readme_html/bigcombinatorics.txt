<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bigcombinatorics" class="anchor" aria-hidden="true" href="#bigcombinatorics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BigCombinatorics</h1>
<p dir="auto"><a href="https://travis-ci.com/scheinerman/BigCombinatorics.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cc2fe7e382175f0a76479212f243d46275a5d25f33920c257737b5cb3767f203/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f426967436f6d62696e61746f726963732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/BigCombinatorics.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">This is an implementation of various combinatorial functions.
These functions <em>always</em> return <code>BigInt</code> values. This convention
is signaled by the fact that these functions' names begin
with a capital letter.</p>
<h2 dir="auto"><a id="user-content-overview-and-rationale" class="anchor" aria-hidden="true" href="#overview-and-rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Overview and Rationale</h2>
<h3 dir="auto"><a id="user-content-always-big" class="anchor" aria-hidden="true" href="#always-big"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Always big</h3>
<p dir="auto">If we want to calculate 20!, it's easy enough to do this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; factorial(20)
2432902008176640000"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">20</span>)
<span class="pl-c1">2432902008176640000</span></pre></div>
<p dir="auto">However, for 100!, we see this:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; factorial(100)
ERROR: OverflowError: 100 is too large to look up in the table
Stacktrace:
 [1] factorial_lookup(::Int64, ::Array{Int64,1}, ::Int64) at ./combinatorics.jl:19
 [2] factorial(::Int64) at ./combinatorics.jl:27
 [3] top-level scope at none:0"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">100</span>)
ERROR<span class="pl-k">:</span> OverflowError<span class="pl-k">:</span> <span class="pl-c1">100</span> is too large to look up <span class="pl-k">in</span> the table
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">factorial_lookup</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>, <span class="pl-k">::</span><span class="pl-c1">Array{Int64,1}</span>, <span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>combinatorics<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">19</span>
 [<span class="pl-c1">2</span>] <span class="pl-c1">factorial</span>(<span class="pl-k">::</span><span class="pl-c1">Int64</span>) at <span class="pl-k">./</span>combinatorics<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">27</span>
 [<span class="pl-c1">3</span>] top<span class="pl-k">-</span>level scope at none<span class="pl-k">:</span><span class="pl-c1">0</span></pre></div>
<p dir="auto">The problem is that 100! is too big to fit in an <code>Int</code> answer. Of course,
we could resolve this problem this way:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; factorial(big(100))
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">factorial</span>(<span class="pl-c1">big</span>(<span class="pl-c1">100</span>))
<span class="pl-c1">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span></pre></div>
<p dir="auto">This limitation on factorials causes problems for functions such as <code>stirlings1</code> in the <code>Combinatorics</code> package:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Combinatorics

julia&gt; stirlings1(30,1)
ERROR: OverflowError: 29 is too large to look up in the table; consider using `factorial(big(29))` instead
Stacktrace:
 [1] factorial_lookup
   @ ./combinatorics.jl:19 [inlined]
 [2] factorial
   @ ./combinatorics.jl:27 [inlined]
 [3] stirlings1(n::Int64, k::Int64, signed::Bool)
   @ Combinatorics ~/.julia/packages/Combinatorics/Udg6X/src/numbers.jl:142
 [4] stirlings1(n::Int64, k::Int64)
   @ Combinatorics ~/.julia/packages/Combinatorics/Udg6X/src/numbers.jl:129
 [5] top-level scope
   @ REPL[25]:1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Combinatorics

julia<span class="pl-k">&gt;</span> <span class="pl-c1">stirlings1</span>(<span class="pl-c1">30</span>,<span class="pl-c1">1</span>)
ERROR<span class="pl-k">:</span> OverflowError<span class="pl-k">:</span> <span class="pl-c1">29</span> is too large to look up <span class="pl-k">in</span> the table; consider <span class="pl-k">using</span> <span class="pl-s"><span class="pl-pds">`</span>factorial(big(29))<span class="pl-pds">`</span></span> instead
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] factorial_lookup
   @ <span class="pl-k">./</span>combinatorics<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">19</span> [inlined]
 [<span class="pl-c1">2</span>] factorial
   @ <span class="pl-k">./</span>combinatorics<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">27</span> [inlined]
 [<span class="pl-c1">3</span>] <span class="pl-c1">stirlings1</span>(n<span class="pl-k">::</span><span class="pl-c1">Int64</span>, k<span class="pl-k">::</span><span class="pl-c1">Int64</span>, signed<span class="pl-k">::</span><span class="pl-c1">Bool</span>)
   @ Combinatorics <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>Combinatorics<span class="pl-k">/</span>Udg6X<span class="pl-k">/</span>src<span class="pl-k">/</span>numbers<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">142</span>
 [<span class="pl-c1">4</span>] <span class="pl-c1">stirlings1</span>(n<span class="pl-k">::</span><span class="pl-c1">Int64</span>, k<span class="pl-k">::</span><span class="pl-c1">Int64</span>)
   @ Combinatorics <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>Combinatorics<span class="pl-k">/</span>Udg6X<span class="pl-k">/</span>src<span class="pl-k">/</span>numbers<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">129</span>
 [<span class="pl-c1">5</span>] top<span class="pl-k">-</span>level scope
   @ REPL[<span class="pl-c1">25</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">We take a different approach. We shouldn't have to worry about how large
our arguments may be before a combinatorial function overflows. Instead,
let's assume the result is <em>always</em> of type <code>BigInt</code> so the calculation
will not be hampered by this problem.</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BigCombinatorics

julia&gt; Stirling1(30,1)
-8841761993739701954543616000000"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BigCombinatorics

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Stirling1</span>(<span class="pl-c1">30</span>,<span class="pl-c1">1</span>)
<span class="pl-k">-</span><span class="pl-c1">8841761993739701954543616000000</span></pre></div>
<h3 dir="auto"><a id="user-content-remember-everything" class="anchor" aria-hidden="true" href="#remember-everything"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Remember everything</h3>
<p dir="auto">When calculating the <code>n</code>-th Fibonnaci number (or <code>n!</code>), one implicitly calculates all the
Fibonacci numbers (or factorials) up through <code>n</code>. This module saves the results of all those calculations so that subsequent invocations of these functions use the previously stored values.</p>
<p dir="auto">In some cases, the built-in Julia functions with similar names are sufficiently speedy that we don't bother saving the results, but rather simply wrap those functions in ours.</p>
<p dir="auto">For a single, one-time evaluation of a combinatorial function, the methods in <code>Combinatorics</code> are likely to be the best option. But for repeated calls to the same function, <code>BigCombinatorics</code> may perform better:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Combinatorics, BigCombinatorics

julia&gt; @time x = [bellnum(k) for k=1:1000];
 50.067243 seconds (333.34 M allocations: 62.504 GiB, 13.83% gc time)

julia&gt; @time y = [Bell(k) for k=1:1000];
  4.222006 seconds (28.25 M allocations: 914.731 MiB, 3.18% gc time, 3.78% compilation time)

julia&gt; @time x = [bellnum(k) for k=1:1000];  # second time is no faster
 53.210110 seconds (333.34 M allocations: 62.504 GiB, 14.18% gc time)

julia&gt; @time y = [Bell(k) for k=1:1000];   # values cached so much faster
  0.000849 seconds (2.20 k allocations: 42.312 KiB)

julia&gt; x == y
true"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Combinatorics, BigCombinatorics

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">=</span> [<span class="pl-c1">bellnum</span>(k) <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>];
 <span class="pl-c1">50.067243</span> seconds (<span class="pl-c1">333.34</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">62.504</span> GiB, <span class="pl-c1">13.83</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> y <span class="pl-k">=</span> [<span class="pl-c1">Bell</span>(k) <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>];
  <span class="pl-c1">4.222006</span> seconds (<span class="pl-c1">28.25</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">914.731</span> MiB, <span class="pl-c1">3.18</span><span class="pl-k">%</span> gc time, <span class="pl-c1">3.78</span><span class="pl-k">%</span> compilation time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">=</span> [<span class="pl-c1">bellnum</span>(k) <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>];  <span class="pl-c"><span class="pl-c">#</span> second time is no faster</span>
 <span class="pl-c1">53.210110</span> seconds (<span class="pl-c1">333.34</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">62.504</span> GiB, <span class="pl-c1">14.18</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> y <span class="pl-k">=</span> [<span class="pl-c1">Bell</span>(k) <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1000</span>];   <span class="pl-c"><span class="pl-c">#</span> values cached so much faster</span>
  <span class="pl-c1">0.000849</span> seconds (<span class="pl-c1">2.20</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">42.312</span> KiB)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">==</span> y
<span class="pl-c1">true</span></pre></div>
<h3 dir="auto"><a id="user-content-using-recursion-wisely" class="anchor" aria-hidden="true" href="#using-recursion-wisely"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using recursion wisely</h3>
<p dir="auto">Functions such as factorial, Stirling numbers, and so forth obey nice recurrence relations that are mathematically elegant but can be computationally problematic.</p>
<p dir="auto">When we compute values via these recurrence relations we always save previously computed results and thereby avoid combinatorial explosion. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Combinatorics, BigCombinatorics

julia&gt; @time stirlings2(34,17)
  5.532814 seconds
1482531184316650855  # this is incorrect because arithmetic was done with Int64 values

julia&gt; @time Stirling2(34,17)
  0.000920 seconds (3.69 k allocations: 115.836 KiB)
118144018577011378596484455

julia&gt; @time Stirling2(34,17)   # second call is even faster because value was cached
  0.000011 seconds (2 allocations: 64 bytes)
118144018577011378596484455"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Combinatorics, BigCombinatorics

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">stirlings2</span>(<span class="pl-c1">34</span>,<span class="pl-c1">17</span>)
  <span class="pl-c1">5.532814</span> seconds
<span class="pl-c1">1482531184316650855</span>  <span class="pl-c"><span class="pl-c">#</span> this is incorrect because arithmetic was done with Int64 values</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">Stirling2</span>(<span class="pl-c1">34</span>,<span class="pl-c1">17</span>)
  <span class="pl-c1">0.000920</span> seconds (<span class="pl-c1">3.69</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">115.836</span> KiB)
<span class="pl-c1">118144018577011378596484455</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">Stirling2</span>(<span class="pl-c1">34</span>,<span class="pl-c1">17</span>)   <span class="pl-c"><span class="pl-c">#</span> second call is even faster because value was cached</span>
  <span class="pl-c1">0.000011</span> seconds (<span class="pl-c1">2</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64</span> bytes)
<span class="pl-c1">118144018577011378596484455</span></pre></div>
<p dir="auto">For univariate functions, we do not use recursive code and so we avoid stack overflow. (Multivariate functions may still suffer from stack overflows.)</p>
<h3 dir="auto"><a id="user-content-light-weight" class="anchor" aria-hidden="true" href="#light-weight"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Light weight</h3>
<p dir="auto">This module is self-contained and does not rely on others. In particular, we use neither <code>Combinatorics</code> (which provides many of these functions, but with a different design philosopy) nor <code>Memoize</code> (which also provides caching of previous results but does not give a way to delete stored values).</p>
<hr>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<ul dir="auto">
<li><code>Fibonacci(n)</code> returns the <code>n</code>-th Fibonacci number with <code>Fibonacci(0)==0</code> and <code>Fibonacci(1)==1</code>.</li>
<li><code>Factorial(n)</code> returns <code>n!</code> and <code>Factorial(n,k)</code> returns <code>n!/k!</code>.</li>
<li><code>FallingFactorial(n,k)</code> returns <code>n*(n-1)*(n-2)*...*(n-k+1)</code>.</li>
<li><code>RisingFactorial(n,k)</code> returns <code>n*(n+1)*(n+2)*...*(n+k-1)</code>.</li>
<li><code>DoubleFactorial(n)</code> returns <code>n!!</code>.</li>
<li><code>HyperFactorial(n)</code> returns <code>1^1 * 2^2 * ... * n^n</code>.</li>
<li><code>Catalan(n)</code> returns the <code>n</code>-th Catalan number.</li>
<li><code>Derangements(n)</code> returns the number of derangements of
an <code>n</code>-element set.</li>
<li><code>Binomial(n,k)</code> returns the number of <code>k</code>-element subsets
of an <code>n</code>-element set.</li>
<li><code>MultiChoose(n,k)</code> returns the number of <code>k</code>-element
<em>multisets</em> that can be formed using the elements of
an <code>n</code>-element set. <strong>Warning</strong>: This is not the same
as <code>Multinomial</code>.</li>
<li><code>Multinomial(vals)</code> returns the multinomial coefficient where
the top index is the sum of <code>vals</code>. Here, <code>vals</code> may either be a
vector of integers or a comma separated list of arguments.
In other words, both <code>Multinomial([3,3,3])</code> and <code>Multinomial(3,3,3)</code>
return the multinomial coefficient with top index <code>9</code> and bottom
indices <code>3,3,3</code>. The result is <code>1680</code>. <strong>Warning</strong>: This is
not the same as <code>MultiChoose</code>.</li>
<li><code>Bell(n)</code> returns the <code>n</code>-th Bell number, i.e., the number
of partitions of an <code>n</code>-element set.</li>
<li><code>Stirling1(n,k)</code> returns the <em>signed</em> Stirling number of the
first kind.</li>
<li><code>Stirling2(n,k)</code> returns the Stirling number of the second
kind, i.e., the number of partitions of an <code>n</code>-element set into
<code>k</code>-parts (nonempty).</li>
<li><code>Fibonacci(n)</code> returns the <code>n</code>-th Fibonacci number
with <code>Fibonacci(0)==0</code> and <code>Fibonacci(1)==1</code>.</li>
<li><code>IntPartitions(n)</code> returns the number of partitions of the integer <code>n</code>
and <code>IntPartitions(n,k)</code> returns the number of partitions of the integer
<code>n</code> with exactly <code>k</code> parts.</li>
<li><code>IntPartitionsDistinct(n)</code> returns the number of partitions of <code>n</code> into
<em>distinct</em> parts and <code>IntPartitionsDistinct(n,k)</code> returns the number of
partitions of <code>n</code> into <code>k</code> <em>distinct</em> parts.</li>
<li><code>Euler(n)</code> returns the <code>n</code>-th Euler number.</li>
<li><code>Eulerian(n,k)</code> returns the number of permutations of <code>1:n</code> with <code>k</code>
ascents.</li>
<li><code>PowerSum(n,k)</code> returns the sum <code>1^k + 2^k + ... + n^k</code>.</li>
<li><code>Menage(n)</code> returns the number of solutions to the Menage problem with <code>n</code> male/female couples.</li>
</ul>
<h2 dir="auto"><a id="user-content-managing-stored-values" class="anchor" aria-hidden="true" href="#managing-stored-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Managing Stored Values</h2>
<p dir="auto">For most of these functions we save the values we have computed and often values for smaller arguments. For example, when we compute <code>Fibonacci(10)</code> we have computed and saved the value of <code>Fibonacci(n)</code> for all values of <code>n</code> up to 10.</p>
<p dir="auto"><strong>Calling one of these functions with no arguments reinitializes the table of stored values for that function.</strong> Most of the stored values are lost.</p>
<p dir="auto">The function <code>BigCombinatorics.cache_clear()</code> reinitializes all the tables.</p>
<p dir="auto">The function <code>BigCombinatorics.cache_report()</code> prints out the number of values
stored  for each function. (Note that some functions don't save any values.)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Bell(10)
115975

julia&gt; Fibonacci(20)
6765

julia&gt; BigCombinatorics.cache_report()
2       Derangements
0       Stirling2
0       Eulerian
1       Euler
3       DoubleFactorial
0       Stirling1
0       PowerSum
2       HyperFactorial
11      Bell
0       IntPartitions
21      Fibonacci

40      Total entries

julia&gt; Fibonacci()

julia&gt; BigCombinatorics.cache_report()
2       Derangements
0       Stirling2
0       Eulerian
1       Euler
3       DoubleFactorial
0       Stirling1
0       PowerSum
2       HyperFactorial
11      Bell
0       IntPartitions
2       Fibonacci

21      Total entries"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Bell</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">115975</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fibonacci</span>(<span class="pl-c1">20</span>)
<span class="pl-c1">6765</span>

julia<span class="pl-k">&gt;</span> BigCombinatorics<span class="pl-k">.</span><span class="pl-c1">cache_report</span>()
<span class="pl-c1">2</span>       Derangements
<span class="pl-c1">0</span>       Stirling2
<span class="pl-c1">0</span>       Eulerian
<span class="pl-c1">1</span>       Euler
<span class="pl-c1">3</span>       DoubleFactorial
<span class="pl-c1">0</span>       Stirling1
<span class="pl-c1">0</span>       PowerSum
<span class="pl-c1">2</span>       HyperFactorial
<span class="pl-c1">11</span>      Bell
<span class="pl-c1">0</span>       IntPartitions
<span class="pl-c1">21</span>      Fibonacci

<span class="pl-c1">40</span>      Total entries

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Fibonacci</span>()

julia<span class="pl-k">&gt;</span> BigCombinatorics<span class="pl-k">.</span><span class="pl-c1">cache_report</span>()
<span class="pl-c1">2</span>       Derangements
<span class="pl-c1">0</span>       Stirling2
<span class="pl-c1">0</span>       Eulerian
<span class="pl-c1">1</span>       Euler
<span class="pl-c1">3</span>       DoubleFactorial
<span class="pl-c1">0</span>       Stirling1
<span class="pl-c1">0</span>       PowerSum
<span class="pl-c1">2</span>       HyperFactorial
<span class="pl-c1">11</span>      Bell
<span class="pl-c1">0</span>       IntPartitions
<span class="pl-c1">2</span>       Fibonacci

<span class="pl-c1">21</span>      Total entries</pre></div>
</article></div>