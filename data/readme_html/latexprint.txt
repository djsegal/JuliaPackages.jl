<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-latexprint" class="anchor" aria-hidden="true" href="#latexprint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LatexPrint</h1>
<p>Print Julia objects in LaTeX form.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Enter the package manager by typing a close bracket: <code>]</code> and then</p>
<pre><code>pkg&gt; add https://github.com/scheinerman/LatexPrint.jl
</code></pre>
<h2><a id="user-content-key-functions" class="anchor" aria-hidden="true" href="#key-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Key functions</h2>
<p>This module provides functions for converting Julia objects into
string representations for use in LaTeX mathematics mode. The primary
function is <code>laprintln</code> which behaves precisely like <code>println</code> except
Julia objects are first converted to a form suitable for
LaTeX. Because <code>laprintln</code> is a lot to type, we also provide the
abbreviation <code>lap</code>.</p>
<pre><code>julia&gt; using LatexPrint

julia&gt; x = 2//6
1//3

julia&gt; lap(x)
\frac{1}{3}
</code></pre>
<p>We also provide the function <code>laprint</code> which does not append a new
line (just like <code>print</code>).</p>
<p>These functions rely on <code>latex_form</code> which converts a Julia object
into an <code>String</code> representation in its LaTeX form:</p>
<pre><code>julia&gt; latex_form(x)
"\\frac{1}{3}"
</code></pre>
<p>The double backslash in the output of <code>latex_form</code> is converted to a
single backslash when run through a <code>print</code> function.</p>
<h2><a id="user-content-supported-types" class="anchor" aria-hidden="true" href="#supported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported Types</h2>
<h3><a id="user-content-numbers" class="anchor" aria-hidden="true" href="#numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Numbers</h3>
<h4><a id="user-content-integers-and-floating-point-numbers" class="anchor" aria-hidden="true" href="#integers-and-floating-point-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integers and floating point numbers</h4>
<p><code>FloatingPoint</code> and <code>Integer</code> numbers are printed unchanged.</p>
<pre><code>julia&gt; lap(sqrt(2))
1.4142135623730951

julia&gt; lap(23)
23
</code></pre>
<p>However, infinite and invalid values are printed as follows:</p>
<pre><code>julia&gt; lap(1/0)
\infty

julia&gt; lap(-1/0)
-\infty

julia&gt; lap(0/0)
\text{NaN}
</code></pre>
<p>Julia's <code>MathConst</code> numbers are printed using their expected LaTeX
form:</p>
<pre><code>julia&gt; lap(pi)
\pi
</code></pre>
<h4><a id="user-content-rational-numbers" class="anchor" aria-hidden="true" href="#rational-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Rational numbers</h4>
<p>Rational numbers are printed as fractions (unless the denominator
happens to be 1, in which case we print as an integer).</p>
<pre><code>julia&gt; lap(10//4)
\frac{5}{2}

julia&gt; lap(10//2)
5
</code></pre>
<h4><a id="user-content-complex-numbers" class="anchor" aria-hidden="true" href="#complex-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Complex numbers</h4>
<p>Complex numbers always include a real and an imaginary part, even if
either part equals zero:</p>
<pre><code>julia&gt; z = 1+im
1 + 1im

julia&gt; lap(z)
1+1i

julia&gt; lap(z*z)
0+2i

julia&gt; lap(im^im)
0.20787957635076193+0.0i
</code></pre>
<h3><a id="user-content-boolean-values" class="anchor" aria-hidden="true" href="#boolean-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Boolean values</h3>
<p>The <code>Bool</code> values <code>true</code> and <code>false</code> output like this:</p>
<pre><code>julia&gt; lap(true)
\mathrm{T}

julia&gt; lap(false)
\mathrm{F}
</code></pre>
<h3><a id="user-content-nothing" class="anchor" aria-hidden="true" href="#nothing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>nothing</code></h3>
<p>A <code>nothing</code> value is rendered as <code>\mathrm{nothing}</code>.</p>
<h3><a id="user-content-text" class="anchor" aria-hidden="true" href="#text"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Text</h3>
<p>The LaTeX version of an <code>String</code> is wrapped in the command
<code>\text</code> (which requires the <code>amsmath</code> package in LaTeX). The rationale
is that we always want to able to paste the output of <code>lap</code> directly
into mathematics mode in LaTeX.</p>
<pre><code>julia&gt; lap("Hello, world!")
\text{Hello, world!}
</code></pre>
<h3><a id="user-content-arrays" class="anchor" aria-hidden="true" href="#arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arrays</h3>
<p>Vectors (one-dimensional arrays) and matrices (two-dimensional arrays)
are converted into LaTeX <code>array</code> environments bounded by square
brackets with centering alignment. (These default options can be
changed; see "Customizing existing types" later in this document.)</p>
<pre><code>julia&gt; x = [1,2,3]
3-element Array{Int64,1}:
 1
 2
 3

julia&gt; lap(x)
\left[
\begin{array}{c}
1 \\
2 \\
3 \\
\end{array}
\right]

julia&gt; A = eye(3)
3x3 Array{Float64,2}:
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0

julia&gt; lap(A)
\left[
\begin{array}{ccc}
1.0 &amp; 0.0 &amp; 0.0 \\
0.0 &amp; 1.0 &amp; 0.0 \\
0.0 &amp; 0.0 &amp; 1.0 \\
\end{array}
\right]
</code></pre>
<p>Vectors are, by default, rendered as a column. To typeset a vector as
a row, simply take its transpose:</p>
<pre><code>julia&gt; x = [2//3, 4//3, 6//3]
3-element Array{Rational{Int64},1}:
 2//3
 4//3
 2//1

julia&gt; lap(x')
\left[
\begin{array}{ccc}
\frac{2}{3} &amp; \frac{4}{3} &amp; 2 \\
\end{array}
\right]
</code></pre>
<h3><a id="user-content-sets" class="anchor" aria-hidden="true" href="#sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sets</h3>
<p>Julia <code>Set</code> and <code>IntSet</code> objects are rendered as a comma separated
list between curly braces. The elements are sorted into ascending
order (if possible). An empty set is returned as <code>\emptyset</code> (unless
another form is specified using <code>set_empty</code>).</p>
<pre><code>julia&gt; A = Set({3.5, 2, -5})
Set{Any}({2,-5,3.5})

julia&gt; lap(A)
\left\{-5,2,3.5\right\}

julia&gt; B = IntSet(4,5,1)
IntSet([1, 4, 5])

julia&gt; lap(B)
\left\{1,4,5\right\}

julia&gt; C = Set()
Set{Any}({})

julia&gt; lap(C)
\emptyset
</code></pre>
<h2><a id="user-content-the-tabular-function" class="anchor" aria-hidden="true" href="#the-tabular-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The <code>tabular</code> function</h2>
<p>If <code>A</code> is a matrix (two-dimensional array), then <code>laprintln(A)</code> (or
<code>lap(A)</code>) prints the LaTeX code for that matrix (complete with
bounding delimeters) for inclusion in LaTeX's mathematics mode.</p>
<p>As an alternative, we also provide the function <code>tabular</code> that prints
the array for inclusion in LaTeX's text mode in the <code>tabular</code>
environment.</p>
<pre><code>julia&gt; A = Array{Any}(nothing,2,2);

julia&gt; A[1,1] = 1; A[1,2] = 3+im; A[2,1]=5//2; A[2,2] = 1/0;

julia&gt; tabular(A)
\begin{tabular}{cc}
$1$ &amp; $3+1i$\\
$\frac{5}{2}$ &amp; $\infty$
\end{tabular}
</code></pre>
<p>Notice that each entry is encased in dollar signs.</p>
<p>By default, each column is center aligned. This can be modified in
two ways. See the <code>set_align</code> function described below or by calling
<code>tabular</code> with the named <code>alignment</code> argument, like this:</p>
<pre><code>julia&gt; tabular(A,alignment="l|r")
\begin{tabular}{l|r}
$1$ &amp; $3+1i$\\
$\frac{5}{2}$ &amp; $\infty$
\end{tabular}
</code></pre>
<p>In addition, the end-of-line command <code>\\</code> can be changed to
<code>\\ \hline</code> (so LaTeX inserts a horizontal line between rows)
by means of the named <code>hlines</code> argument:</p>
<pre><code>julia&gt; tabular(A,hlines=true)
\begin{tabular}{cc}
$1$ &amp; $3+1i$\\ \hline
$\frac{5}{2}$ &amp; $\infty$
\end{tabular}
</code></pre>
<p>Note that the last row of the array does not include an <code>\hline</code>.</p>
<h2><a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Customization</h2>
<h3><a id="user-content-customizing-existing-types" class="anchor" aria-hidden="true" href="#customizing-existing-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Customizing existing types</h3>
<p>The <code>LatexPrint</code> module comes with default LaTeX representations for
infinity, not-a-number, and so forth. Some of these can be modified by
the following functions.</p>
<ul>
<li>
<p><code>set_inf</code> is used to set the representation of infinity. The default
creates the output <code>\infty</code> but here's how it can be changed.</p>
<pre><code> julia&gt; lap(1/0)
 \infty

 julia&gt; set_inf("\\text{inf}")  # note the double backslash
 "\\text{inf}"

 julia&gt; lap(1/0)
 \text{inf}
</code></pre>
</li>
<li>
<p><code>set_nan</code> is used to set the LaTeX for not-a-number:</p>
<pre><code>julia&gt; lap(0/0)
\text{NaN}

julia&gt; set_nan("\\text{nan}")
"\\text{nan}"

julia&gt; lap(0/0)
\text{nan}
</code></pre>
</li>
<li>
<p><code>set_bool</code> is used to set the LaTeX form of <code>true</code> and <code>false</code>. By
default, these output <code>\textrm{T}</code> and <code>\textrm{F}</code>. This is how
these can be changed:</p>
<pre><code>julia&gt; lap(true)
\mathrm{T}

julia&gt; set_bool("\\textsf{true}", "\\textsf{false}")
("\\textsf{true}","\\textsf{false}")

julia&gt; lap(true)
\textsf{true}
</code></pre>
</li>
<li>
<p><code>set_im</code> changes the symbol used for the imaginary unit. Some folks
like <em>j</em> instead of <em>i</em>:</p>
<pre><code>julia&gt; z = 3+2im
3 + 2im

julia&gt; lap(z)
3+2i

julia&gt; set_im("j")
"j"

julia&gt; lap(z)
3+2j
</code></pre>
</li>
<li>
<p><code>set_emptyset</code> is used to specify how an empty set should be
rendered.</p>
<pre><code>julia&gt; C = Set()
Set{Any}({})

julia&gt; lap(C)
\emptyset

julia&gt; set_emptyset("\\{ \\}")
"\\{ \\}"

julia&gt; lap(C)
\{ \}
</code></pre>
<p>Users might like to try <code>\varnothing</code> as a nice alternative to
<code>\empytset</code>. In that case, the Julia command would be
<code>set_emptyset("\\varnothing")</code>.</p>
</li>
<li>
<p><code>set_align</code> is used to specify the alignment character for
arrays. By default elements of columns are aligned to their
center. Use one of <code>l</code>, <code>r</code>, or <code>c</code> as the alignment character.</p>
<pre><code>julia&gt; lap(A)
\left[
\begin{array}{c}
2 \\
10 \\
-544 \\
\end{array}
\right]

julia&gt; set_align("r")

julia&gt; lap(A)
\left[
\begin{array}{r}
2 \\
10 \\
-544 \\
\end{array}
\right]
</code></pre>
</li>
<li>
<p><code>set_delims</code> is used to specify the left and right delimiters used
for vectors and matrices.</p>
<pre><code>julia&gt; A = int(eye(2))
2x2 Array{Int64,2}:
 1  0
 0  1

julia&gt; lap(A)
\left[
\begin{array}{cc}
1 &amp; 0 \\
0 &amp; 1 \\
\end{array}
\right]

julia&gt; set_delims("(", ")")  # set delimiters to be open/close parens
("(",")")

julia&gt; lap(A)
\left(
\begin{array}{cc}
1 &amp; 0 \\
0 &amp; 1 \\
\end{array}
\right)
</code></pre>
</li>
</ul>
<ul>
<li><code>set_nothing</code> is used to specify the output of a <code>nothing</code> value. For
example, to output an em-dash, we can do this:
<pre><code>julia&gt; lap(nothing)
\mathrm{nothing}

julia&gt; set_nothing("\\mathrm{---}")
"\\mathrm{---}"

julia&gt; lap(nothing)
\mathrm{---}
</code></pre>
</li>
</ul>
<h3><a id="user-content-adding-new-types" class="anchor" aria-hidden="true" href="#adding-new-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding new types</h3>
<p>There are other Julia types (such as <code>UnitRange</code>) for which
we have not implemented a conversion to LaTeX. In this
case <code>lap</code> (and our other functions) simply convert the type
to an <code>String</code>.</p>
<pre><code>julia&gt; lap(1:10)
1:10
</code></pre>
<p>If we want to create a LaTeX representation, then we
need to define a suitable version of <code>latex_form</code> like this:</p>
<pre><code>julia&gt; import LatexPrint.latex_form

julia&gt; latex_form(x::UnitRange) = "[" * string(x.start) * "," * string(x.stop) * "]"
latex_form (generic function with xxx methods)

julia&gt; lap(1:10)
[1,10]
</code></pre>
</article></div>