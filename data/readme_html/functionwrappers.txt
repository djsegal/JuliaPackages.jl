<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-functionwrappersjl-type-stable-and-efficient-wrapper-of-arbitrary-functions" class="anchor" aria-hidden="true" href="#functionwrappersjl-type-stable-and-efficient-wrapper-of-arbitrary-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FunctionWrappers.jl: Type stable and efficient wrapper of arbitrary functions</h1>
<p><a href="https://travis-ci.org/yuyichao/FunctionWrappers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c2e558dcbade7149aef5c14e7f3cfa8310b2f566/68747470733a2f2f7472617669732d63692e6f72672f797579696368616f2f46756e6374696f6e57726170706572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/yuyichao/FunctionWrappers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/yuyichao/functionwrappers-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/ffebfcfe092668cddd2c71f216eae3fdfa0d6f71/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6d676561726c736a6c6c75346d6474642f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/mgearlsjllu4mdtd/branch/master?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/yuyichao/FunctionWrappers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8d17e4c33eeaecaafd64ac731a1f5cd1cdd5f76a/687474703a2f2f636f6465636f762e696f2f6769746875622f797579696368616f2f46756e6374696f6e57726170706572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/yuyichao/FunctionWrappers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Proof of principle implementation of <a href="https://github.com/JuliaLang/julia/issues/13984">JuliaLang/julia#13984</a>.</p>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limitations</h2>
<ol>
<li>
<p>Does not handle more than 128 arguments without jlcall wrapper</p>
<p>128 is an arbitrary limit. Should be high enough for all practical cases</p>
</li>
<li>
<p>Does not support vararg argument types</p>
</li>
<li>
<p>Wrapper Object cannot be serialized by <code>dump.c</code> and therefore the
precompilation of <code>FunctionWrappers</code> is done using a runtime branch
and by making the wrapper type mutable.</p>
</li>
</ol>
<h2><a id="user-content-compared-to-cfunction" class="anchor" aria-hidden="true" href="#compared-to-cfunction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Compared to <code>@cfunction</code></h2>
<p>This does not require LLVM trampoline support, which is not currently supported by LLVM
on all the architectures julia runs on (<a href="https://github.com/JuliaLang/julia/issues/27174">JuliaLang/julia#27174</a>).
Other than this issue <code>@cfunction</code> should cover all of the use cases.</p>
</article></div>