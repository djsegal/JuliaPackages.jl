<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-functionwrappersjl-type-stable-and-efficient-wrapper-of-arbitrary-functions" class="anchor" aria-hidden="true" href="#functionwrappersjl-type-stable-and-efficient-wrapper-of-arbitrary-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionWrappers.jl: Type stable and efficient wrapper of arbitrary functions</h1>
<p dir="auto"><a href="https://github.com/yuyichao/FunctionWrappers.jl/actions"><img src="https://github.com/yuyichao/FunctionWrappers.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/yuyichao/FunctionWrappers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46692827bb8c859856264d93095efaaa98d3cb608ade7c2ba130d34e52857759/68747470733a2f2f7472617669732d63692e6f72672f797579696368616f2f46756e6374696f6e57726170706572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/yuyichao/FunctionWrappers.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/yuyichao/functionwrappers-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/872874442c0fa7156df29f9745cefdff494a5491aaa63698d342e20a8821ad05/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6d676561726c736a6c6c75346d6474642f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/mgearlsjllu4mdtd/branch/master?svg=true" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/yuyichao/FunctionWrappers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f98eb5ebb63ef8aa1714598f72d3971067a49362bc8e4494add8f8927195565b/687474703a2f2f636f6465636f762e696f2f6769746875622f797579696368616f2f46756e6374696f6e57726170706572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/yuyichao/FunctionWrappers.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Proof of principle implementation of <a href="https://github.com/JuliaLang/julia/issues/13984" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/13984/hovercard">JuliaLang/julia#13984</a>.</p>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<ol dir="auto">
<li>
<p dir="auto">Does not handle more than 128 arguments without jlcall wrapper</p>
<p dir="auto">128 is an arbitrary limit. Should be high enough for all practical cases</p>
</li>
<li>
<p dir="auto">Does not support vararg argument types</p>
</li>
<li>
<p dir="auto">Wrapper Object cannot be serialized by <code>dump.c</code> and therefore the
precompilation of <code>FunctionWrappers</code> is done using a runtime branch
and by making the wrapper type mutable.</p>
</li>
</ol>
<h2 dir="auto"><a id="user-content-compared-to-cfunction" class="anchor" aria-hidden="true" href="#compared-to-cfunction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compared to <code>@cfunction</code></h2>
<p dir="auto">This does not require LLVM trampoline support, which is not currently supported by LLVM
on all the architectures julia runs on (<a href="https://github.com/JuliaLang/julia/issues/27174" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/27174/hovercard">JuliaLang/julia#27174</a>).
Other than this issue <code>@cfunction</code> should cover all of the use cases.</p>
<h2 dir="auto"><a id="user-content-simple-usage-example" class="anchor" aria-hidden="true" href="#simple-usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple Usage Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FunctionWrappers
import FunctionWrappers: FunctionWrapper

# For a function that sends (x1::T1, x2::T2, ...) -&gt; ::TN, you use
# a FunctionWrapper{TN, Tuple{T1, T2, ...}}.
struct TypeStableStruct 
  fun::FunctionWrapper{Float64, Tuple{Float64, Float64}}
  second_arg::Float64
end

evaluate_strfun(str, arg) = str.fun(arg, str.second_arg)

example = TypeStableStruct(hypot, 1.0)

@code_warntype evaluate_strfun(example, 1.5) # all good"><pre><span class="pl-k">using</span> FunctionWrappers
<span class="pl-k">import</span> FunctionWrappers<span class="pl-k">:</span> FunctionWrapper

<span class="pl-c"><span class="pl-c">#</span> For a function that sends (x1::T1, x2::T2, ...) -&gt; ::TN, you use</span>
<span class="pl-c"><span class="pl-c">#</span> a FunctionWrapper{TN, Tuple{T1, T2, ...}}.</span>
<span class="pl-k">struct</span> TypeStableStruct 
  fun<span class="pl-k">::</span><span class="pl-c1">FunctionWrapper{Float64, Tuple{Float64, Float64}}</span>
  second_arg<span class="pl-k">::</span><span class="pl-c1">Float64</span>
<span class="pl-k">end</span>

<span class="pl-en">evaluate_strfun</span>(str, arg) <span class="pl-k">=</span> str<span class="pl-k">.</span><span class="pl-c1">fun</span>(arg, str<span class="pl-k">.</span>second_arg)

example <span class="pl-k">=</span> <span class="pl-c1">TypeStableStruct</span>(hypot, <span class="pl-c1">1.0</span>)

<span class="pl-c1">@code_warntype</span> <span class="pl-c1">evaluate_strfun</span>(example, <span class="pl-c1">1.5</span>) <span class="pl-c"><span class="pl-c">#</span> all good</span></pre></div>
</article></div>