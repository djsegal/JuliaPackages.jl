<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content--snakeiteratorjl" class="anchor" aria-hidden="true" href="#-snakeiteratorjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><g-emoji class="g-emoji" alias="snake" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png">üêç</g-emoji> SnakeIterator.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/tlnagy/SnakeIterator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/85e6a514c4856961821b5c26b83b77ce4034229139a3f576859c63a139d87e17/68747470733a2f2f7472617669732d63692e636f6d2f746c6e6167792f536e616b654974657261746f722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tlnagy/SnakeIterator.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tlnagy/SnakeIterator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/978a422d6a07dd65a9eaee198aa1b5b61d94b2615ce5186efbf61f06f5b1c7bf/68747470733a2f2f636f6465636f762e696f2f67682f746c6e6167792f536e616b654974657261746f722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tlnagy/SnakeIterator.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A micropackage implementing a snaking iterator for use with 2D arrays.</p>
<h2 dir="auto"><a id="user-content-what" class="anchor" aria-hidden="true" href="#what"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What?</h2>
<p dir="auto">See the diagram below for a comparison of normal column-wise (Julia default)
iteration versus snaking iteration. It can handle iteration of arbitrary 2D
arrays.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="snake_vs_normal_iteration.png"><img src="snake_vs_normal_iteration.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-why" class="anchor" aria-hidden="true" href="#why"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why?</h2>
<p dir="auto">A common use case is minimizing the time spent on physical movement between
consecutive wells when iterating over a multiwell plate. This is useful for
programming robots to handle 96-well or 386-well plates during microscopy,
liquid handling, etc</p>
<h2 dir="auto"><a id="user-content-how" class="anchor" aria-hidden="true" href="#how"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How?</h2>
<p dir="auto">First, install the package from the General registry</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg

Pkg.add(&quot;SnakeIterator&quot;)"><pre><span class="pl-k">using</span> Pkg

Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>SnakeIterator<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The only exported function is <code>snake</code> and it constructs a <code>SnakeIterator</code> that
should just work (tm) like any other iterator.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SnakeIterator

arr = reshape(1:16, 4, 4)

for i in snake(arr)
    @show i
end"><pre><span class="pl-k">using</span> SnakeIterator

arr <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">16</span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>)

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">snake</span>(arr)
    <span class="pl-c1">@show</span> i
<span class="pl-k">end</span></pre></div>
</article></div>