<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jobschedulersjl" class="anchor" aria-hidden="true" href="#jobschedulersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JobSchedulers.jl</h1>
<p><em>A Julia-based job scheduler and workload manager inspired by Slurm and PBS.</em></p>
<h2><a id="user-content-package-features" class="anchor" aria-hidden="true" href="#package-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package Features</h2>
<ul>
<li>Job and task scheduler.</li>
<li>Local workload manager.</li>
<li>Support CPU, memory, run time management.</li>
<li>Support running a job at specific time, or a period after creating (schedule).</li>
<li>Support deferring a job until specific jobs reach specific states (dependency).</li>
<li>Support automatic backup and reload.</li>
</ul>
<h2><a id="user-content-future-development" class="anchor" aria-hidden="true" href="#future-development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future development</h2>
<ul>
<li>Support command-line scheduler by using DaemonMode.jl.</li>
<li>Use Documenter.jl for documentation.</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>JobSchedulers.jl can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add JobSchedulers
"><pre>pkg<span class="pl-k">&gt;</span> add JobSchedulers</pre></div>
<p>To use the package, type</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JobSchedulers
"><pre><span class="pl-k">using</span> JobSchedulers</pre></div>
<h2><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using JobSchedulers, Dates
"><pre><span class="pl-k">using</span> JobSchedulers, Dates</pre></div>
<h3><a id="user-content-scheduler-controls" class="anchor" aria-hidden="true" href="#scheduler-controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Scheduler Controls</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="scheduler_start()
# [ Info: Scheduler starts.

scheduler_status()
# ┌ Info: Scheduler is running.
# │   SCHEDULER_MAX_CPU = 32
# │   SCHEDULER_MAX_MEM = 121278191616
# │   SCHEDULER_UPDATE_SECOND = 5.0
# │   JOB_QUEUE_MAX_LENGTH = 10000
# └   SCHEDULER_TASK = Task (runnable) @0x00007fe205052e60

# scheduler_stop()  # NO RUN
"><pre><span class="pl-c1">scheduler_start</span>()
<span class="pl-c"><span class="pl-c">#</span> [ Info: Scheduler starts.</span>

<span class="pl-c1">scheduler_status</span>()
<span class="pl-c"><span class="pl-c">#</span> ┌ Info: Scheduler is running.</span>
<span class="pl-c"><span class="pl-c">#</span> │   SCHEDULER_MAX_CPU = 32</span>
<span class="pl-c"><span class="pl-c">#</span> │   SCHEDULER_MAX_MEM = 121278191616</span>
<span class="pl-c"><span class="pl-c">#</span> │   SCHEDULER_UPDATE_SECOND = 5.0</span>
<span class="pl-c"><span class="pl-c">#</span> │   JOB_QUEUE_MAX_LENGTH = 10000</span>
<span class="pl-c"><span class="pl-c">#</span> └   SCHEDULER_TASK = Task (runnable) @0x00007fe205052e60</span>

<span class="pl-c"><span class="pl-c">#</span> scheduler_stop()  # NO RUN</span></pre></div>
<h3><a id="user-content-scheduler-settings" class="anchor" aria-hidden="true" href="#scheduler-settings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Scheduler Settings</h3>
<p>Set the <strong>maximum CPU</strong> that the scheduler can use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_scheduler_max_cpu()     # use all available CPUs
set_scheduler_max_cpu(4)    # use 4 CPUs
set_scheduler_max_cpu(0.5)  # use 50% of CPUs
"><pre><span class="pl-c1">set_scheduler_max_cpu</span>()     <span class="pl-c"><span class="pl-c">#</span> use all available CPUs</span>
<span class="pl-c1">set_scheduler_max_cpu</span>(<span class="pl-c1">4</span>)    <span class="pl-c"><span class="pl-c">#</span> use 4 CPUs</span>
<span class="pl-c1">set_scheduler_max_cpu</span>(<span class="pl-c1">0.5</span>)  <span class="pl-c"><span class="pl-c">#</span> use 50% of CPUs</span></pre></div>
<p>Set the <strong>maximum RAM</strong> the scheduler can use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_scheduler_max_mem()             # use 80% of total memory

set_scheduler_max_mem(4GB)          # use 4GB memory
set_scheduler_max_mem(4096MB)
set_scheduler_max_mem(4194304KB)
set_scheduler_max_mem(4294967296B)

set_scheduler_max_mem(0.5)          # use 50% of total memory
"><pre><span class="pl-c1">set_scheduler_max_mem</span>()             <span class="pl-c"><span class="pl-c">#</span> use 80% of total memory</span>

<span class="pl-c1">set_scheduler_max_mem</span>(<span class="pl-c1">4</span>GB)          <span class="pl-c"><span class="pl-c">#</span> use 4GB memory</span>
<span class="pl-c1">set_scheduler_max_mem</span>(<span class="pl-c1">4096</span>MB)
<span class="pl-c1">set_scheduler_max_mem</span>(<span class="pl-c1">4194304</span>KB)
<span class="pl-c1">set_scheduler_max_mem</span>(<span class="pl-c1">4294967296</span>B)

<span class="pl-c1">set_scheduler_max_mem</span>(<span class="pl-c1">0.5</span>)          <span class="pl-c"><span class="pl-c">#</span> use 50% of total memory</span></pre></div>
<p>Set the update interval of job queue:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_scheduler_update_second(5.0)  # update job queue every 5 seconds
"><pre><span class="pl-c1">set_scheduler_update_second</span>(<span class="pl-c1">5.0</span>)  <span class="pl-c"><span class="pl-c">#</span> update job queue every 5 seconds</span></pre></div>
<p>Set the maximum number of finished jobs:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_scheduler_max_job(10000)  # If number of finished jobs &gt; 10000, the oldest ones will be removed.
                              # It does not affect queuing or running jobs.
"><pre><span class="pl-c1">set_scheduler_max_job</span>(<span class="pl-c1">10000</span>)  <span class="pl-c"><span class="pl-c">#</span> If number of finished jobs &gt; 10000, the oldest ones will be removed.</span>
                              <span class="pl-c"><span class="pl-c">#</span> It does not affect queuing or running jobs.</span></pre></div>
<h3><a id="user-content-job-controls" class="anchor" aria-hidden="true" href="#job-controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Job Controls</h3>
<p>A <code>Job</code> is the wrapper of <code>AbstractCmd</code> or <code>Task</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="command_job = Job(
    `echo command job done`    # AbstractCmd to run
)

task_job = Job(
    @task(println(&quot;task job done&quot;))  # Task to run
)

job_with_args = Job(
    @task(println(&quot;job_with_args done&quot;)); # Task to run
    name = &quot;job_with_args&quot;,               # job name.
    user = &quot;me&quot;,                # Job owner.
    ncpu = 1,                   # Number of CPU required.
    mem = 1KB,                  # Number of memory required (unit: TB, GB, MB, KB, B).
    schedule_time = Second(3),  # Run after 3 seconds; can be DateTime or Period.
    wall_time = Hour(1),        # The maximum wall time to run the job.
    priority = 20,              # Lower = higher priority.
    dependency = [              # Defer job until some jobs reach some states.
        DONE =&gt; command_job.id,   # Left can be DONE, FAILED, CANCELLED, or even
        DONE =&gt; task_job.id       # QUEUING, RUNNING.
    ]                             # Right is the job id.
)
"><pre>command_job <span class="pl-k">=</span> <span class="pl-c1">Job</span>(
    <span class="pl-s"><span class="pl-pds">`</span>echo command job done<span class="pl-pds">`</span></span>    <span class="pl-c"><span class="pl-c">#</span> AbstractCmd to run</span>
)

task_job <span class="pl-k">=</span> <span class="pl-c1">Job</span>(
    <span class="pl-c1">@task</span>(<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>task job done<span class="pl-pds">"</span></span>))  <span class="pl-c"><span class="pl-c">#</span> Task to run</span>
)

job_with_args <span class="pl-k">=</span> <span class="pl-c1">Job</span>(
    <span class="pl-c1">@task</span>(<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>job_with_args done<span class="pl-pds">"</span></span>)); <span class="pl-c"><span class="pl-c">#</span> Task to run</span>
    name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>job_with_args<span class="pl-pds">"</span></span>,               <span class="pl-c"><span class="pl-c">#</span> job name.</span>
    user <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>me<span class="pl-pds">"</span></span>,                <span class="pl-c"><span class="pl-c">#</span> Job owner.</span>
    ncpu <span class="pl-k">=</span> <span class="pl-c1">1</span>,                   <span class="pl-c"><span class="pl-c">#</span> Number of CPU required.</span>
    mem <span class="pl-k">=</span> <span class="pl-c1">1</span>KB,                  <span class="pl-c"><span class="pl-c">#</span> Number of memory required (unit: TB, GB, MB, KB, B).</span>
    schedule_time <span class="pl-k">=</span> <span class="pl-c1">Second</span>(<span class="pl-c1">3</span>),  <span class="pl-c"><span class="pl-c">#</span> Run after 3 seconds; can be DateTime or Period.</span>
    wall_time <span class="pl-k">=</span> <span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>),        <span class="pl-c"><span class="pl-c">#</span> The maximum wall time to run the job.</span>
    priority <span class="pl-k">=</span> <span class="pl-c1">20</span>,              <span class="pl-c"><span class="pl-c">#</span> Lower = higher priority.</span>
    dependency <span class="pl-k">=</span> [              <span class="pl-c"><span class="pl-c">#</span> Defer job until some jobs reach some states.</span>
        DONE <span class="pl-k">=&gt;</span> command_job<span class="pl-k">.</span>id,   <span class="pl-c"><span class="pl-c">#</span> Left can be DONE, FAILED, CANCELLED, or even</span>
        DONE <span class="pl-k">=&gt;</span> task_job<span class="pl-k">.</span>id       <span class="pl-c"><span class="pl-c">#</span> QUEUING, RUNNING.</span>
    ]                             <span class="pl-c"><span class="pl-c">#</span> Right is the job id.</span>
)</pre></div>
<p>Submit a job to queue:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="submit!(command_job)
submit!(task_job)
submit!(job_with_args)
"><pre><span class="pl-c1">submit!</span>(command_job)
<span class="pl-c1">submit!</span>(task_job)
<span class="pl-c1">submit!</span>(job_with_args)</pre></div>
<p>Cancel or interrupt a job:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="cancel!(command_job)
"><pre><span class="pl-c1">cancel!</span>(command_job)</pre></div>
<p>Get the returned result:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="result(job_with_args)
"><pre><span class="pl-c1">result</span>(job_with_args)</pre></div>
<h3><a id="user-content-queue" class="anchor" aria-hidden="true" href="#queue"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Queue</h3>
<p>Show queue (all jobs):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="all_queue()
queue(all=true)
# 3×16 DataFrame. Omitted printing of 10 columns
# │ Row │ id              │ name          │ user   │ ncpu  │ mem   │ schedule_time           │
# │     │ Int64           │ String        │ String │ Int64 │ Int64 │ DateTime                │
# ├─────┼─────────────────┼───────────────┼────────┼───────┼───────┼─────────────────────────┤
# │ 1   │ 314268209759432 │               │        │ 1     │ 0     │ 0000-01-01T00:00:00     │
# │ 2   │ 314268298112225 │               │        │ 1     │ 0     │ 0000-01-01T00:00:00     │
# │ 3   │ 314268353241057 │ job_with_args │ me     │ 1     │ 1024  │ 2021-04-16T12:02:37.511 │
"><pre><span class="pl-c1">all_queue</span>()
<span class="pl-c1">queue</span>(all<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c"><span class="pl-c">#</span> 3×16 DataFrame. Omitted printing of 10 columns</span>
<span class="pl-c"><span class="pl-c">#</span> │ Row │ id              │ name          │ user   │ ncpu  │ mem   │ schedule_time           │</span>
<span class="pl-c"><span class="pl-c">#</span> │     │ Int64           │ String        │ String │ Int64 │ Int64 │ DateTime                │</span>
<span class="pl-c"><span class="pl-c">#</span> ├─────┼─────────────────┼───────────────┼────────┼───────┼───────┼─────────────────────────┤</span>
<span class="pl-c"><span class="pl-c">#</span> │ 1   │ 314268209759432 │               │        │ 1     │ 0     │ 0000-01-01T00:00:00     │</span>
<span class="pl-c"><span class="pl-c">#</span> │ 2   │ 314268298112225 │               │        │ 1     │ 0     │ 0000-01-01T00:00:00     │</span>
<span class="pl-c"><span class="pl-c">#</span> │ 3   │ 314268353241057 │ job_with_args │ me     │ 1     │ 1024  │ 2021-04-16T12:02:37.511 │</span></pre></div>
<p>Show queue (running and queuing jobs only):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="queue()
# 0×16 DataFrame
"><pre><span class="pl-c1">queue</span>()
<span class="pl-c"><span class="pl-c">#</span> 0×16 DataFrame</span></pre></div>
<h3><a id="user-content-job-query" class="anchor" aria-hidden="true" href="#job-query"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Job Query</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="job_query(314268353241057)
job_query_by_id(314268353241057)
# Job:
#   id            → 314268353241057
#   name          → &quot;job_with_args&quot;
#   user          → &quot;me&quot;
#   ncpu          → 1
#   mem           → 1024
#   schedule_time → 2021-04-16T12:02:37.511
#   create_time   → 2021-04-16T12:02:40.587
#   start_time    → 2021-04-16T12:02:49.786
#   stop_time     → 2021-04-16T12:02:54.803
#   wall_time     → 1 hour
#   state         → :done
#   priority      → 20
#   dependency    → 2-element Array{Pair{Symbol,Int64},1}:
#  :done =&gt; 314268209759432
#  :done =&gt; 314268298112225
#   task          → Task (done) @0x00007fe7c027bd00
#   stdout_file   → &quot;&quot;
#   stderr_file   → &quot;&quot;
"><pre><span class="pl-c1">job_query</span>(<span class="pl-c1">314268353241057</span>)
<span class="pl-c1">job_query_by_id</span>(<span class="pl-c1">314268353241057</span>)
<span class="pl-c"><span class="pl-c">#</span> Job:</span>
<span class="pl-c"><span class="pl-c">#</span>   id            → 314268353241057</span>
<span class="pl-c"><span class="pl-c">#</span>   name          → "job_with_args"</span>
<span class="pl-c"><span class="pl-c">#</span>   user          → "me"</span>
<span class="pl-c"><span class="pl-c">#</span>   ncpu          → 1</span>
<span class="pl-c"><span class="pl-c">#</span>   mem           → 1024</span>
<span class="pl-c"><span class="pl-c">#</span>   schedule_time → 2021-04-16T12:02:37.511</span>
<span class="pl-c"><span class="pl-c">#</span>   create_time   → 2021-04-16T12:02:40.587</span>
<span class="pl-c"><span class="pl-c">#</span>   start_time    → 2021-04-16T12:02:49.786</span>
<span class="pl-c"><span class="pl-c">#</span>   stop_time     → 2021-04-16T12:02:54.803</span>
<span class="pl-c"><span class="pl-c">#</span>   wall_time     → 1 hour</span>
<span class="pl-c"><span class="pl-c">#</span>   state         → :done</span>
<span class="pl-c"><span class="pl-c">#</span>   priority      → 20</span>
<span class="pl-c"><span class="pl-c">#</span>   dependency    → 2-element Array{Pair{Symbol,Int64},1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  :done =&gt; 314268209759432</span>
<span class="pl-c"><span class="pl-c">#</span>  :done =&gt; 314268298112225</span>
<span class="pl-c"><span class="pl-c">#</span>   task          → Task (done) @0x00007fe7c027bd00</span>
<span class="pl-c"><span class="pl-c">#</span>   stdout_file   → ""</span>
<span class="pl-c"><span class="pl-c">#</span>   stderr_file   → ""</span></pre></div>
<h3><a id="user-content-backup" class="anchor" aria-hidden="true" href="#backup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Backup</h3>
<p>Set backup file:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_scheduler_backup(&quot;/path/to/backup/file&quot;)
"><pre><span class="pl-c1">set_scheduler_backup</span>(<span class="pl-s"><span class="pl-pds">"</span>/path/to/backup/file<span class="pl-pds">"</span></span>)</pre></div>
<blockquote>
<p>JobSchedulers writes to the backup file at exit.
If the file exists, scheduler settings and job queue will be recovered from it automatically.</p>
</blockquote>
<p>Stop backup and <code>delete_old</code> backup:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_scheduler_backup(delete_old=true)
"><pre><span class="pl-c1">set_scheduler_backup</span>(delete_old<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p>Backup immediately:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="backup()
"><pre><span class="pl-c1">backup</span>()</pre></div>
<h3><a id="user-content-compatibility-with-pipelinesjl" class="anchor" aria-hidden="true" href="#compatibility-with-pipelinesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility with Pipelines.jl</h3>
<p>You can also create a <code>Job</code> by using <code>Program</code> types from Pipelines.jl:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Job(p::Program; kwargs...)
Job(p::Program, inputs::Dict{String}; kwargs...)
Job(p::Program, inputs::Dict{String}, outputs::Dict{String}; kwargs...)
"><pre><span class="pl-c1">Job</span>(p<span class="pl-k">::</span><span class="pl-c1">Program</span>; kwargs<span class="pl-k">...</span>)
<span class="pl-c1">Job</span>(p<span class="pl-k">::</span><span class="pl-c1">Program</span>, inputs<span class="pl-k">::</span><span class="pl-c1">Dict{String}</span>; kwargs<span class="pl-k">...</span>)
<span class="pl-c1">Job</span>(p<span class="pl-k">::</span><span class="pl-c1">Program</span>, inputs<span class="pl-k">::</span><span class="pl-c1">Dict{String}</span>, outputs<span class="pl-k">::</span><span class="pl-c1">Dict{String}</span>; kwargs<span class="pl-k">...</span>)</pre></div>
<p><code>kwargs...</code> include keyword arguments of <code>Job(::Union{Base.AbstractCmd,Task}, ...)</code> and <code>run(::Program, ...)</code>. Details can be found by typing</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Pipelines, JobSchedulers
julia&gt; ?Job
julia&gt; ?run
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pipelines, JobSchedulers
julia<span class="pl-k">&gt;</span> ?Job
julia<span class="pl-k">&gt;</span> ?run</pre></div>
<h4><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h4>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pipelines, JobSchedulers

scheduler_start()

p = CmdProgram(
    inputs = [&quot;IN1&quot;, &quot;IN2&quot;],
    outputs = [&quot;OUT&quot;],
    cmd = pipeline(`echo inputs are: IN1 and IN2` &amp; `echo outputs are: OUT`)
)

inputs = Dict(
    &quot;IN1&quot; =&gt; `in1`,
    &quot;IN2&quot; =&gt; 2
)

outputs = Dict(
    &quot;OUT&quot; =&gt; &quot;out&quot;
)

# native Pipelines.jl method to run the program
run(p, inputs, outputs;
    touch_run_id_file = false  # do not create a file which indicates the job is done and avoids re-run.
)
# inputs are: in1 and 2
# outputs are: out
# (true, Dict(&quot;OUT&quot; =&gt; &quot;out&quot;))

# run the program by submitting to JobSchedulers.jl
program_job = Job(p, inputs, outputs; touch_run_id_file = false)
submit!(program_job)
# inputs are: in1 and 2
# outputs are: out

# get the returned result
result(program_job)
# (true, Dict(&quot;OUT&quot; =&gt; &quot;out&quot;))
"><pre><span class="pl-k">using</span> Pipelines, JobSchedulers

<span class="pl-c1">scheduler_start</span>()

p <span class="pl-k">=</span> <span class="pl-c1">CmdProgram</span>(
    inputs <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>IN1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>IN2<span class="pl-pds">"</span></span>],
    outputs <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>OUT<span class="pl-pds">"</span></span>],
    cmd <span class="pl-k">=</span> <span class="pl-c1">pipeline</span>(<span class="pl-s"><span class="pl-pds">`</span>echo inputs are: IN1 and IN2<span class="pl-pds">`</span></span> <span class="pl-k">&amp;</span> <span class="pl-s"><span class="pl-pds">`</span>echo outputs are: OUT<span class="pl-pds">`</span></span>)
)

inputs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>IN1<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">`</span>in1<span class="pl-pds">`</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>IN2<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
)

outputs <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-s"><span class="pl-pds">"</span>OUT<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>out<span class="pl-pds">"</span></span>
)

<span class="pl-c"><span class="pl-c">#</span> native Pipelines.jl method to run the program</span>
<span class="pl-c1">run</span>(p, inputs, outputs;
    touch_run_id_file <span class="pl-k">=</span> <span class="pl-c1">false</span>  <span class="pl-c"><span class="pl-c">#</span> do not create a file which indicates the job is done and avoids re-run.</span>
)
<span class="pl-c"><span class="pl-c">#</span> inputs are: in1 and 2</span>
<span class="pl-c"><span class="pl-c">#</span> outputs are: out</span>
<span class="pl-c"><span class="pl-c">#</span> (true, Dict("OUT" =&gt; "out"))</span>

<span class="pl-c"><span class="pl-c">#</span> run the program by submitting to JobSchedulers.jl</span>
program_job <span class="pl-k">=</span> <span class="pl-c1">Job</span>(p, inputs, outputs; touch_run_id_file <span class="pl-k">=</span> <span class="pl-c1">false</span>)
<span class="pl-c1">submit!</span>(program_job)
<span class="pl-c"><span class="pl-c">#</span> inputs are: in1 and 2</span>
<span class="pl-c"><span class="pl-c">#</span> outputs are: out</span>

<span class="pl-c"><span class="pl-c">#</span> get the returned result</span>
<span class="pl-c1">result</span>(program_job)
<span class="pl-c"><span class="pl-c">#</span> (true, Dict("OUT" =&gt; "out"))</span></pre></div>
</article></div>