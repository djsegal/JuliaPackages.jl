<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-configsjl--" class="anchor" aria-hidden="true" href="#configsjl--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Configs.jl <a href="https://travis-ci.org/citkane/Configs" rel="nofollow"><img src="https://camo.githubusercontent.com/dc27671bf706b59b0fea401ca62abc52c2f954c0fa76e43cc1164461c97401cc/68747470733a2f2f7472617669732d63692e6f72672f6369746b616e652f436f6e666967732e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/citkane/Configs.svg?branch=master" style="max-width:100%;"></a> <a href="https://coveralls.io/github/citkane/Configs?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fc4f4d47d5caf100ed29ce70d912b2ec3eb71ecba1775109a5ee208531111c5f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6369746b616e652f436f6e666967732f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/citkane/Configs/badge.svg?branch=master" style="max-width:100%;"></a></h1>
<h2><a id="user-content-opinionated-tool-for-managing-deployment-configurations" class="anchor" aria-hidden="true" href="#opinionated-tool-for-managing-deployment-configurations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Opinionated tool for managing deployment configurations</h2>
<p>Deployment configurations are loaded by cascading overrides.
Overrides are inputed in order of:</p>
<ol>
<li>Configuration files placed in a configurable folder location</li>
<li>ENV variable mapping</li>
<li>Function calls</li>
</ol>
<p>The syntax for accessing configurations:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs
password = getconfig(&quot;database.credentials.password&quot;)
username = getconfig(&quot;database.credentials.username&quot;)
# OR
credentials = getconfig(&quot;database.credentials&quot;)
username = credentials.username
password = credentials.password
"><pre><span class="pl-k">using</span> Configs
password <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>database.credentials.password<span class="pl-pds">"</span></span>)
username <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>database.credentials.username<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> OR</span>
credentials <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>database.credentials<span class="pl-pds">"</span></span>)
username <span class="pl-k">=</span> credentials<span class="pl-k">.</span>username
password <span class="pl-k">=</span> credentials<span class="pl-k">.</span>password</pre></div>
<p>Accessing non-existent configurations will throw an error, so:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs
if hasconfig(&quot;optional.setting&quot;)
    setting = getconfig(&quot;optional.setting&quot;)
end
"><pre><span class="pl-k">using</span> Configs
<span class="pl-k">if</span> <span class="pl-c1">hasconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>optional.setting<span class="pl-pds">"</span></span>)
    setting <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>optional.setting<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Setting configurations from external sources:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs
port = myexternalcall(...)
setconfig!(&quot;database.connection.port&quot;, port)
"><pre><span class="pl-k">using</span> Configs
port <span class="pl-k">=</span> <span class="pl-c1">myexternalcall</span>(<span class="pl-k">...</span>)
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>database.connection.port<span class="pl-pds">"</span></span>, port)</pre></div>
<p><strong>Immutability:</strong><br>
After the first call to <code>getconfig</code> or <code>hasconfig</code>, the configuration is immutable. Thus, you can not call <code>setconfig!</code> after calling <code>getconfig</code> or <code>hasconfig</code>. It will throw an error.</p>
<p>Conversely stated, you must complete all your <code>setconfig!</code> calls before accessing with <code>getconfig</code> or <code>hasconfig</code>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$&gt; cd my/project/rootdir
$&gt; julia --project=.
julia&gt; ]add Configs
"><pre>$<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span> my/project/rootdir
$<span class="pl-k">&gt;</span> julia --project=.
julia<span class="pl-k">&gt;</span> ]add Configs</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Create a <code>configs</code> directory in the project root.</p>
<p>The default configs folder is expected to be at <code>&lt;project rootdir&gt;/configs</code>.<br>
Configs will throw an error if no folder is found at the default path or a custom path is not explicitly provided.</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$&gt; cd my/project/rootdir
$&gt; mkdir configs
"><pre>$<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span> my/project/rootdir
$<span class="pl-k">&gt;</span> mkdir configs</pre></div>
<p>OR..</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$&gt; cd my/project/rootdir
$&gt; export DEPLOYMENT_KEY=MY_ENV
$&gt; export CONFIGS_DIRECTORY=&quot;/opt/configs/myproject&quot;
$&gt; julia --project=. src/project.jl
"><pre>$<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span> my/project/rootdir
$<span class="pl-k">&gt;</span> <span class="pl-k">export</span> DEPLOYMENT_KEY=MY_ENV
$<span class="pl-k">&gt;</span> <span class="pl-k">export</span> CONFIGS_DIRECTORY=<span class="pl-s"><span class="pl-pds">"</span>/opt/configs/myproject<span class="pl-pds">"</span></span>
$<span class="pl-k">&gt;</span> julia --project=. src/project.jl</pre></div>
<p>OR...</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs

initconfig(; deployment_key=&quot;MY_ENV&quot;, configs_directory=&quot;customdir&quot;)
"><pre><span class="pl-k">using</span> Configs

<span class="pl-c1">initconfig</span>(; deployment_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>MY_ENV<span class="pl-pds">"</span></span>, configs_directory<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>customdir<span class="pl-pds">"</span></span>)</pre></div>
<p>WHERE:</p>
<p><strong><code>CONFIGS_DIRECTORY</code></strong> / <strong><code>configs_directory</code></strong><br>
defines a custom path to the configs directory. This can be input as absolute path or relative to the project root. The default is <code>&lt;project root&gt;/configs</code></p>
<p><strong><code>DEPLOYMENT_KEY</code></strong> / <strong><code>deployment_key</code></strong><br>
defines which <code>ENV</code> key you intend to use to state the deployment environment [development, staging, production, etc...]. The default is <code>ENV["DEPLOYMENT"]</code>.</p>
<p>Then manipulate and access your configs:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs

value = myexternalcall(...)

setconfig!(&quot;path.to.new&quot;, value)
setconfig!(&quot;path.to.override&quot;, value)

newvalue = getconfig(&quot;path.to.new&quot;)
overriddenvalue = getconfig(&quot;path.to.override&quot;)

connection = getconfig(&quot;database.connection&quot;)
port = connection.port
# OR
conf = getconfig()
connection = conf.database.connection
port = connection.port
url = connection.url

if hasconfig(&quot;optional.setting&quot;)
    option = getconfig(&quot;optional.setting&quot;)
end

# After the first call to getconfig or hasconfig, configs are immutable, so:
setconfig!(&quot;database.connection.port&quot;, 8000) # Throws an error if called here
"><pre><span class="pl-k">using</span> Configs

value <span class="pl-k">=</span> <span class="pl-c1">myexternalcall</span>(<span class="pl-k">...</span>)

<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>path.to.new<span class="pl-pds">"</span></span>, value)
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>path.to.override<span class="pl-pds">"</span></span>, value)

newvalue <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>path.to.new<span class="pl-pds">"</span></span>)
overriddenvalue <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>path.to.override<span class="pl-pds">"</span></span>)

connection <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>database.connection<span class="pl-pds">"</span></span>)
port <span class="pl-k">=</span> connection<span class="pl-k">.</span>port
<span class="pl-c"><span class="pl-c">#</span> OR</span>
conf <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>()
connection <span class="pl-k">=</span> conf<span class="pl-k">.</span>database<span class="pl-k">.</span>connection
port <span class="pl-k">=</span> connection<span class="pl-k">.</span>port
url <span class="pl-k">=</span> connection<span class="pl-k">.</span>url

<span class="pl-k">if</span> <span class="pl-c1">hasconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>optional.setting<span class="pl-pds">"</span></span>)
    option <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>optional.setting<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> After the first call to getconfig or hasconfig, configs are immutable, so:</span>
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>database.connection.port<span class="pl-pds">"</span></span>, <span class="pl-c1">8000</span>) <span class="pl-c"><span class="pl-c">#</span> Throws an error if called here</span></pre></div>
<h2><a id="user-content-file-definitions" class="anchor" aria-hidden="true" href="#file-definitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>File definitions:</h2>
<p>Configurations can be independantly defined in any of the following file formats:</p>
<ul>
<li>JSON <code>.json</code></li>
<li>YAML <code>.yml</code></li>
<li>Julia <code>.jl</code></li>
</ul>
<p>These provide cascading overrides in the order shown below:</p>
<h3><a id="user-content-1-configsdefaultyml" class="anchor" aria-hidden="true" href="#1-configsdefaultyml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>[1] <code>configs/</code><strong>default</strong><code>.yml</code></h3>
<p>Define public configs. This is suitable for eg. storing in a public code repository.</p>
<div class="highlight highlight-source-yaml position-relative" data-snippet-clipboard-copy-content="timestamp: 2020-09-03T14:18:45.633
database:
    connection:
        url: &quot;http://localhost&quot;
        port: 3600
    credentials:
        username: &quot;guest&quot;
        password: &quot;guestuserdefault&quot;
otherstuff:
    defaultmessage: &quot;Hello new user&quot;
"><pre><span class="pl-ent">timestamp</span>: <span class="pl-s">2020-09-03T14:18:45.633</span>
<span class="pl-ent">database</span>:
    <span class="pl-ent">connection</span>:
        <span class="pl-ent">url</span>: <span class="pl-s"><span class="pl-pds">"</span>http://localhost<span class="pl-pds">"</span></span>
        <span class="pl-ent">port</span>: <span class="pl-c1">3600</span>
    <span class="pl-ent">credentials</span>:
        <span class="pl-ent">username</span>: <span class="pl-s"><span class="pl-pds">"</span>guest<span class="pl-pds">"</span></span>
        <span class="pl-ent">password</span>: <span class="pl-s"><span class="pl-pds">"</span>guestuserdefault<span class="pl-pds">"</span></span>
<span class="pl-ent">otherstuff</span>:
    <span class="pl-ent">defaultmessage</span>: <span class="pl-s"><span class="pl-pds">"</span>Hello new user<span class="pl-pds">"</span></span></pre></div>
<p>Configs does not support multi-doc yaml files.</p>
<h3><a id="user-content-2-configsdeploymentjl" class="anchor" aria-hidden="true" href="#2-configsdeploymentjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>[2] <code>configs/</code><strong>&lt;deployment&gt;</strong><code>.jl</code></h3>
<p>Typically, would be:</p>
<ul>
<li>development.jl</li>
<li>staging.jl</li>
<li>production.jl</li>
<li>testing.jl</li>
</ul>
<p>Define semi private, deployment specific overrides. This would typically have a .gitignore exclusion, or be stored in a private repository only.</p>
<p>The file is named in lowercase to correspond with any <code>ENV["DEPLOYMENT"]</code> found at runtime. Thus, running:</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$&gt; export DEPLOYMENT=PrOdUcTiOn
$&gt; julia --project=. src/myproject.jl
"><pre>$<span class="pl-k">&gt;</span> <span class="pl-k">export</span> DEPLOYMENT=PrOdUcTiOn
$<span class="pl-k">&gt;</span> julia --project=. src/myproject.jl</pre></div>
<p>would merge the configuration defined in <code>production.jl</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(
    timestamp = now(),
    database = (
        connection = (
            url = &quot;https://secureserver.me/staging&quot;,
            port = 3601,
        ),
        credentials = (
            username = &quot;stagingadmin&quot;,
            pasword = &quot;&quot;,
        )
    )
)
"><pre>(
    timestamp <span class="pl-k">=</span> <span class="pl-c1">now</span>(),
    database <span class="pl-k">=</span> (
        connection <span class="pl-k">=</span> (
            url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://secureserver.me/staging<span class="pl-pds">"</span></span>,
            port <span class="pl-k">=</span> <span class="pl-c1">3601</span>,
        ),
        credentials <span class="pl-k">=</span> (
            username <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>stagingadmin<span class="pl-pds">"</span></span>,
            pasword <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>,
        )
    )
)</pre></div>
<p>For <code>.jl</code> configuration files, any valid Julia collections [ <code>Array</code>, <code>Tuple</code>, <code>NamedTuple</code>, <code>Dict</code> ] may be used in any combination.</p>
<p>Valid <code>Dates</code> methods may be used in the configuration file.</p>
<h3><a id="user-content-3-configscustom-environment-variablesjson" class="anchor" aria-hidden="true" href="#3-configscustom-environment-variablesjson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>[3] <code>configs/</code><strong>custom-environment-variables</strong><code>.json</code></h3>
<p>Define private overrides. This maps ENV variables to configuration variables.</p>
<div class="highlight highlight-source-json position-relative" data-snippet-clipboard-copy-content="{
    &quot;database&quot;: {
        &quot;credentials&quot;: {
            &quot;password&quot;: &quot;DATABASE_PASSWORD&quot;
        }
    }
}
"><pre>{
    <span class="pl-s"><span class="pl-pds">"</span>database<span class="pl-pds">"</span></span>: {
        <span class="pl-s"><span class="pl-pds">"</span>credentials<span class="pl-pds">"</span></span>: {
            <span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span>: <span class="pl-s"><span class="pl-pds">"</span>DATABASE_PASSWORD<span class="pl-pds">"</span></span>
        }
    }
}</pre></div>
<p>Private variables are thus passed in explicitly by, for example, defining the environment variable in BASH.</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$&gt; export DATABASE_PASSWORD=mysupersecretpasword
$&gt; julia --project=. src/myproject.jl
"><pre>$<span class="pl-k">&gt;</span> <span class="pl-k">export</span> DATABASE_PASSWORD=mysupersecretpasword
$<span class="pl-k">&gt;</span> julia --project=. src/myproject.jl</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs
password = getconfig(&quot;database.credentials.password&quot;)
# password === &quot;mysupersecretpasword&quot;
"><pre><span class="pl-k">using</span> Configs
password <span class="pl-k">=</span> <span class="pl-c1">getconfig</span>(<span class="pl-s"><span class="pl-pds">"</span>database.credentials.password<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> password === "mysupersecretpasword"</span></pre></div>
<h2><a id="user-content-advanced-usaging" class="anchor" aria-hidden="true" href="#advanced-usaging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced usaging</h2>
<p><code>setconfig!</code> has flexible input parameter types:</p>
<ul>
<li>Bool, Number, String</li>
<li>JSON String</li>
<li>Dict, Array</li>
<li>Tuple, NamedTuple</li>
</ul>
<p>(with any depth / combination of nesting)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Configs

# Thus
setconfig!(&quot;project&quot;, &quot;&quot;&quot;{
    &quot;credentials&quot;: {
        &quot;username&quot;: &quot;user&quot;,
        &quot;password&quot;: &quot;userpass&quot;
    },
    &quot;pages&quot;: [1, 2, 3]
}&quot;&quot;&quot;)

# Is the same as
setconfig!(&quot;project&quot;, ( 
    credentials= ( 
        username=&quot;user&quot;,
        password=&quot;userpass&quot;,
    ), 
    pages=(1,2,3)
))

# Is the same as
setconfig!(&quot;project&quot;, Dict(
    :credentials =&gt; Dict(
        :username =&gt; &quot;user&quot;,
        :password =&gt; &quot;userpass&quot;
    ),
    :pages =&gt; [1, 2, 3]
))

# Is the same as
setconfig!(&quot;project.credentials.username&quot;, &quot;user&quot;)
setconfig!(&quot;project.credentials.password&quot;, &quot;userpass&quot;)
setconfig!(&quot;project.pages&quot;, [1, 2, 3])
"><pre><span class="pl-k">using</span> Configs

<span class="pl-c"><span class="pl-c">#</span> Thus</span>
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>project<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"""</span>{</span>
<span class="pl-s">    "credentials": {</span>
<span class="pl-s">        "username": "user",</span>
<span class="pl-s">        "password": "userpass"</span>
<span class="pl-s">    },</span>
<span class="pl-s">    "pages": [1, 2, 3]</span>
<span class="pl-s">}<span class="pl-pds">"""</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Is the same as</span>
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>project<span class="pl-pds">"</span></span>, ( 
    credentials<span class="pl-k">=</span> ( 
        username<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>user<span class="pl-pds">"</span></span>,
        password<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>userpass<span class="pl-pds">"</span></span>,
    ), 
    pages<span class="pl-k">=</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
))

<span class="pl-c"><span class="pl-c">#</span> Is the same as</span>
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>project<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:credentials</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(
        <span class="pl-c1">:username</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>user<span class="pl-pds">"</span></span>,
        <span class="pl-c1">:password</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>userpass<span class="pl-pds">"</span></span>
    ),
    <span class="pl-c1">:pages</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]
))

<span class="pl-c"><span class="pl-c">#</span> Is the same as</span>
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>project.credentials.username<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>user<span class="pl-pds">"</span></span>)
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>project.credentials.password<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>userpass<span class="pl-pds">"</span></span>)
<span class="pl-c1">setconfig!</span>(<span class="pl-s"><span class="pl-pds">"</span>project.pages<span class="pl-pds">"</span></span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>])</pre></div>
<h2><a id="user-content-footnote" class="anchor" aria-hidden="true" href="#footnote"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Footnote</h2>
<p>This is a deployment methodology cloned from the excellent node.js <a href="https://www.npmjs.com/package/config" rel="nofollow">config</a> package.</p>
</article></div>