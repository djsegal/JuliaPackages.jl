<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bson" class="anchor" aria-hidden="true" href="#bson"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BSON</h1>
<p dir="auto"><a href="https://github.com/JuliaIO/BSON.jl/actions/workflows/ci.yml"><img src="https://github.com/JuliaIO/BSON.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">BSON.jl is a Julia package for working with the <a href="http://bsonspec.org/" rel="nofollow">Binary JSON</a> serialisation format. It can be used as a general store for Julia data structures, with the following features:</p>
<ul dir="auto">
<li><strong>Lightweight and ubiquitous</strong>, with a simple JSON-like data model and clients in many languages.</li>
<li><strong>Efficient</strong> for binary data (eg. arrays of floats).</li>
<li><strong>Flexible</strong> enough to handle anything you throw at it – closures, custom types, circular data structures, etc.</li>
<li><strong>Backwards compatible</strong>, so that if data layout changes old files will still load.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BSON

julia&gt; bson(&quot;test.bson&quot;, Dict(:a =&gt; [1+2im, 3+4im], :b =&gt; &quot;Hello, World!&quot;))

julia&gt; BSON.load(&quot;test.bson&quot;)
Dict{Symbol,Any} with 2 entries:
  :a =&gt; Complex{Int64}[1+2im, 3+4im]
  :b =&gt; &quot;Hello, World!&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BSON

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bson</span>(<span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>, <span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">4im</span>], <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span>))

julia<span class="pl-k">&gt;</span> BSON<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span>)
Dict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> Complex{Int64}[<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">2im</span>, <span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">4im</span>]
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello, World!<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">(Note that the top-level object in BSON is always a <code>Dict{Symbol,Any}</code>).</p>
<blockquote>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <span class="color-fg-attention"><svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>Warning</span>: Loading BSON files is not safe from malicious or erroneously constructed data. Loading BSON files can cause arbitrary code to execute on your machine. Do not load files from unknown or untrusted sources.</p>
</blockquote>
<p dir="auto">There a few utility methods for working with BSON files.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BSON

julia&gt; bson(&quot;test.bson&quot;, a = 1, b = 2)

julia&gt; BSON.load(&quot;test.bson&quot;)
Dict{Symbol,Any} with 2 entries:
  :a =&gt; 1
  :b =&gt; 2

julia&gt; using BSON: @save, @load

julia&gt; a, b = 1, 2
(1, 2)

julia&gt; @save &quot;test.bson&quot; a b # Same as above

julia&gt; @load &quot;test.bson&quot; a b # Loads `a` and `b` back into the workspace"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BSON

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bson</span>(<span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span>, a <span class="pl-k">=</span> <span class="pl-c1">1</span>, b <span class="pl-k">=</span> <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> BSON<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span>)
Dict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BSON<span class="pl-k">:</span> <span class="pl-c1">@save</span>, <span class="pl-c1">@load</span>

julia<span class="pl-k">&gt;</span> a, b <span class="pl-k">=</span> <span class="pl-c1">1</span>, <span class="pl-c1">2</span>
(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@save</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> a b <span class="pl-c"><span class="pl-c">#</span> Same as above</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@load</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> a b <span class="pl-c"><span class="pl-c">#</span> Loads `a` and `b` back into the workspace</span></pre></div>
<p dir="auto">For external files you can use <code>BSON.parse</code> to load raw BSON data structures
without any Julia-specific interpretation. In basic cases, this will look that
same, but Julia-specific types will be stored in a more complex format.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; BSON.parse(&quot;test.bson&quot;)
Dict{Symbol,Any} with 2 entries:
  :a =&gt; 1
  :b =&gt; 2

julia&gt; BSON.parse(&quot;test.bson&quot;)[:data]
Dict{Symbol,Any} with 4 entries:
  :tag  =&gt; &quot;array&quot;
  :type =&gt; Dict(:tag=&gt;&quot;datatype&quot;,:params=&gt;Any[],:name=&gt;[&quot;Core&quot;,&quot;Int64&quot;])
  :size =&gt; [3]
  :data =&gt; UInt8[0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00  …  ]"><pre>julia<span class="pl-k">&gt;</span> BSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span>)
Dict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> BSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span>)[<span class="pl-c1">:data</span>]
Dict{Symbol,Any} with <span class="pl-c1">4</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:tag</span>  <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>array<span class="pl-pds">"</span></span>
  <span class="pl-c1">:type</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:tag</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>datatype<span class="pl-pds">"</span></span>,<span class="pl-c1">:params</span><span class="pl-k">=&gt;</span>Any[],<span class="pl-c1">:name</span><span class="pl-k">=&gt;</span>[<span class="pl-s"><span class="pl-pds">"</span>Core<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>Int64<span class="pl-pds">"</span></span>])
  <span class="pl-c1">:size</span> <span class="pl-k">=&gt;</span> [<span class="pl-c1">3</span>]
  <span class="pl-c1">:data</span> <span class="pl-k">=&gt;</span> UInt8[<span class="pl-c1">0x01</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x00</span>, <span class="pl-c1">0x02</span>, <span class="pl-c1">0x00</span>  …  ]</pre></div>
<p dir="auto">This is also how the data will appear to readers in other languages, should you
wish to move data outside of Julia.</p>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<p dir="auto">Below is some semi-official documentation on more advanced usage.</p>
<h3 dir="auto"><a id="user-content-loading-custom-data-types-within-modules" class="anchor" aria-hidden="true" href="#loading-custom-data-types-within-modules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading custom data types within modules</h3>
<p dir="auto">For packages that use BSON.jl to load data, just writing <code>BSON.load("mydata.bson")</code> will not work with custom data types. Here's a simple example of that for DataFrames.jl:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module A
  using DataFrames, BSON
  d = DataFrame(a = 1:10, b = 5:14)
  bson(&quot;data.bson&quot;, Dict(:d=&gt;d))
  d2 = BSON.load(&quot;data.bson&quot;) # this will throw an error
end"><pre><span class="pl-k">module</span> A
  <span class="pl-k">using</span> DataFrames, BSON
  d <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(a <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>, b <span class="pl-k">=</span> <span class="pl-c1">5</span><span class="pl-k">:</span><span class="pl-c1">14</span>)
  <span class="pl-c1">bson</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bson<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-c1">:d</span><span class="pl-k">=&gt;</span>d))
  d2 <span class="pl-k">=</span> BSON<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bson<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> this will throw an error</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">In these cases, you can specify the namespace under which to resolve types like so:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d2 = BSON.load(&quot;data.bson&quot;, @__MODULE__)"><pre>d2 <span class="pl-k">=</span> BSON<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bson<span class="pl-pds">"</span></span>, <span class="pl-c1">@__MODULE__</span>)</pre></div>
<p dir="auto">This will use the current module's namespace when loading the data. You could also pass any module name as the second argument (though almost all cases will use <code>@__MODULE__</code>). By default, the namespace is <code>Main</code> (i.e. the REPL).</p>
</article></div>