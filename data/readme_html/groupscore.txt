<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-groupscore" class="anchor" aria-hidden="true" href="#groupscore"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GroupsCore</h1>
<p dir="auto"><a href="https://kalmarek.github.io/GroupsCore.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://kalmarek.github.io/GroupsCore.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kalmarek/GroupsCore.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c55d77f6e1367d83491607c6a5ef8c73a23c0aab2cd23f5ad708506ea45f1890/68747470733a2f2f636f6465636f762e696f2f67682f6b616c6d6172656b2f47726f757073436f72652e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4557376a47714b356959" alt="codecov" data-canonical-src="https://codecov.io/gh/kalmarek/GroupsCore.jl/branch/main/graph/badge.svg?token=EW7jGqK5iY" style="max-width: 100%;"></a>
<a href="https://github.com/kalmarek/GroupsCore.jl/actions?query=workflow%3ACI"><img src="https://github.com/kalmarek/GroupsCore.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a></p>
<hr>
<p dir="auto">The aim of this package is to standardize common assumptions on and functions for groups, i.e. to create
Group interface.
Packages using it include:</p>
<ul dir="auto">
<li><a href="https://github.com/kalmarek/Groups.jl">Groups.jl</a>,</li>
<li><a href="https://github.com/kalmarek/SymbolicWedderburn.jl">SymbolicWedderburn.jl</a>,</li>
<li><a href="https://github.com/oscar-system/Oscar.jl">Oscar</a> project.</li>
</ul>
<h2 dir="auto"><a id="user-content-examples-and-conformance-testing" class="anchor" aria-hidden="true" href="#examples-and-conformance-testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples and Conformance testing</h2>
<p dir="auto">For an implemented interface please have a look at <code>/test</code> folder, where several
example implementations are tested against the conformance test suite:</p>
<ul dir="auto">
<li><a href="https://github.com/kalmarek/GroupsCore.jl/blob/main/test/cyclic.jl"><code>CyclicGroup</code></a></li>
<li><a href="https://github.com/kalmarek/GroupsCore.jl/blob/main/test/infinite_cyclic.jl"><code>InfCyclicGroup</code></a></li>
<li><a href="https://github.com/kalmarek/GroupsCore.jl/blob/main/src/constructions/direct_product.jl"><code>DirectProduct</code></a></li>
<li><a href="https://github.com/kalmarek/GroupsCore.jl/blob/main/src/constructions/wreath_product.jl"><code>WreathProduct</code></a></li>
</ul>
<p dir="auto">To test the conformance of a group implementation one can run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GroupsCore
include(joinpath(pathof(GroupsCore), &quot;..&quot;, &quot;..&quot;, &quot;test&quot;, &quot;conformance_test.jl&quot;))
include(&quot;my_group.jl&quot;)
let G = MyFancyGroup(...)
    test_Group_interface(G)
    test_GroupElement_interface(rand(G, 2)...)
    nothing
end"><pre><span class="pl-k">using</span> GroupsCore
<span class="pl-c1">include</span>(<span class="pl-c1">joinpath</span>(<span class="pl-c1">pathof</span>(GroupsCore), <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>..<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>conformance_test.jl<span class="pl-pds">"</span></span>))
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>my_group.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">let</span> G <span class="pl-k">=</span> <span class="pl-c1">MyFancyGroup</span>(<span class="pl-k">...</span>)
    <span class="pl-c1">test_Group_interface</span>(G)
    <span class="pl-c1">test_GroupElement_interface</span>(<span class="pl-c1">rand</span>(G, <span class="pl-c1">2</span>)<span class="pl-k">...</span>)
    <span class="pl-c1">nothing</span>
<span class="pl-k">end</span></pre></div>
</article></div>