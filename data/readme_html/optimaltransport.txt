<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-optimaltransportjl" class="anchor" aria-hidden="true" href="#optimaltransportjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OptimalTransport.jl</h1>
<hr>
<p>Optimal transport algorithms for Julia.</p>
<p><a href="https://travis-ci.com/zsteve/OptimalTransport.jl.svg?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0773796af848332c4947bef6e56e7363a5340739/68747470733a2f2f7472617669732d63692e636f6d2f7a73746576652f4f7074696d616c5472616e73706f72742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/zsteve/OptimalTransport.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="example.png"><img src="example.png" alt="example histogram" style="max-width:100%;"></a></p>
<p>This package provides some implementations of optimal transport algorithms, including the Sinkhorn scaling algorithm and variants.</p>
<h2><a id="user-content-supported-algorithms" class="anchor" aria-hidden="true" href="#supported-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported algorithms</h2>
<p>Currently, Earth Mover's Distance (solution to exact problem) is wrapped via PyCall using the excellent <a href="https://pythonot.github.io/" rel="nofollow">POT (Python Optimal Transport)</a> library. The hope is that <em>gradually</em>, more and more functionality will be implemented in native Julia.</p>
<p>However, the following algorithms are offered natively:</p>
<ul>
<li>Sinkhorn algorithm (<code>sinkhorn</code>, <code>sinkhorn2</code>)</li>
<li>Log-stabilized Sinkhorn algorithm (<code>sinkhorn_stabilized</code>)</li>
<li>Epsilon-scaling stabilized Sinkhorn algorithm (<code>sinkhorn_stabilized_epsscaling</code>)</li>
<li>Unbalanced Sinkhorn algorithm (<code>sinkhorn_unbalanced</code>)</li>
</ul>
<p>See the documentation pages for further documentation. Most calling conventions are analogous to those in the Python Optimal Transport library.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h2>
<p>Read the <a href="http://zsteve.phatcode.net/OptimalTransportDocs/" rel="nofollow">documentation</a></p>
<h2><a id="user-content-basic-usage-and-examples" class="anchor" aria-hidden="true" href="#basic-usage-and-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage and examples</h2>
<p>Example: Sinkhorn algorithm via <code>sinkhorn</code></p>
<div class="highlight highlight-source-julia"><pre>N <span class="pl-k">=</span> <span class="pl-c1">200</span>; M <span class="pl-k">=</span> <span class="pl-c1">200</span>
μ_spt <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N)
ν_spt <span class="pl-k">=</span> <span class="pl-c1">rand</span>(M)

μ <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>N, N)
ν <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">1</span><span class="pl-k">/</span>M, M) 
C <span class="pl-k">=</span> <span class="pl-c1">pairwise</span>(<span class="pl-c1">SqEuclidean</span>(), μ_spt<span class="pl-k">'</span>, ν_spt<span class="pl-k">'</span>)
ϵ <span class="pl-k">=</span> <span class="pl-c1">0.01</span>

γ <span class="pl-k">=</span> <span class="pl-c1">sinkhorn</span>(μ, ν, C, ϵ)</pre></div>
<p>See <code>examples/examples.jl</code> for a small collection of optimal transport examples using OptimalTransport.jl.</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>Peyré, G. and Cuturi, M., 2019. Computational optimal transport. Foundations and Trends® in Machine Learning, 11(5-6), pp.355-607.</p>
</article></div>