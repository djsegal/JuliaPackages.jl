<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-printtreesjl" class="anchor" aria-hidden="true" href="#printtreesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PrintTrees.jl</h1>
<p>Use <a href="https://github.com/Keno/AbstractTrees.jl">AbstracTrees.jl</a> to print various standard Julia types.</p>
<p>Currently just supports <code>DataType</code> and <code>Dict</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PringTrees
julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(Real)
Real
├─ AbstractFloat
│  ├─ BigFloat
│  ├─ Float16
│  ├─ Float32
│  └─ Float64
├─ AbstractIrrational
│  └─ Irrational
├─ Integer
│  ├─ Bool
│  ├─ Signed
│  │  ├─ BigInt
│  │  ├─ Int128
│  │  ├─ Int16
│  │  ├─ Int32
│  │  ├─ Int64
│  │  └─ Int8
│  └─ Unsigned
│     ├─ UInt128
│     ├─ UInt16
│     ├─ UInt32
│     ├─ UInt64
│     └─ UInt8
└─ Rational

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>,<span class="pl-c1">:d</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">4</span>,<span class="pl-c1">:c</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>),<span class="pl-c1">:e</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>)
Dict{Symbol,Any} with <span class="pl-c1">3</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span>
  <span class="pl-c1">:d</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Symbol,Any}</span>(<span class="pl-c1">:b</span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>,<span class="pl-c1">:c</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)
  <span class="pl-c1">:e</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_tree</span>(d)
Dict{Symbol,Any}
├─ a<span class="pl-k">:</span> <span class="pl-c1">2</span>
├─ d<span class="pl-k">:</span>
│  ├─ b<span class="pl-k">:</span> <span class="pl-c1">4</span>
│  └─ c<span class="pl-k">:</span> Hello
└─ e<span class="pl-k">:</span> <span class="pl-c1">5.0</span></pre></div>
</article></div>