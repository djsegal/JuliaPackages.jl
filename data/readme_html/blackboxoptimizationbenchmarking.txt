<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-blackboxoptimizationbenchmarkingjl" class="anchor" aria-hidden="true" href="#blackboxoptimizationbenchmarkingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BlackBoxOptimizationBenchmarking.jl</h1>
<p dir="auto"><a href="https://github.com/jonathanBieler/BlackBoxOptimizationBenchmarking.jl/actions/workflows/CI.yml"><img src="https://github.com/jonathanBieler/BlackBoxOptimizationBenchmarking.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia implementation of the <a href="http://coco.gforge.inria.fr" rel="nofollow">Black-Box-Optimization-Benchmarking</a> (BBOB) functions.</p>
<h3 dir="auto"><a id="user-content-benchmark-results" class="anchor" aria-hidden="true" href="#benchmark-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Benchmark results</h3>
<p dir="auto">The average sucess rate (meaning the optimizer reached the minimum + 1e-6) in function of the number of objective function evaluations :</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./data/plots/mean_succ.png"><img src="./data/plots/mean_succ.png" alt="benchmark" style="max-width: 100%;"></a></p>
<p dir="auto">Since some global optimizers have poor final convergence, they were chained into a Nelder-Mead using 10% of the objective function evaluation budget.</p>
<h4 dir="auto"><a id="user-content-the-average-sucess-rate-across-the-dimension-of-the-function" class="anchor" aria-hidden="true" href="#the-average-sucess-rate-across-the-dimension-of-the-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The average sucess rate across the dimension of the function:</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./data/plots/per_dimension/mean_succ_3.png"><img src="./data/plots/per_dimension/mean_succ_3.png" alt="benchmark" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./data/plots/per_dimension/mean_succ_6.png"><img src="./data/plots/per_dimension/mean_succ_6.png" alt="benchmark" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./data/plots/per_dimension/mean_succ_12.png"><img src="./data/plots/per_dimension/mean_succ_12.png" alt="benchmark" style="max-width: 100%;"></a></p>
<h4 dir="auto"><a id="user-content-the-total-relative-run-time-of-each-optimizer" class="anchor" aria-hidden="true" href="#the-total-relative-run-time-of-each-optimizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The total relative run time of each optimizer</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="./data/plots/runtime.png"><img src="./data/plots/runtime.png" alt="benchmark" style="max-width: 100%;"></a></p>
<p dir="auto">Note that the Python algorithms are called from Julia, which might cause some overhead.</p>
<h3 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h3>
<p dir="auto">Functions can be accessed as <code>BlackBoxOptimizationBenchmarking.F1</code>, which returns a <code>BBOBFunction</code> with fields <code>f</code> containing the function itself, <code>f_opt</code> its minimal value, and <code>x_opt</code> its minimizer, i.e. <code>f(x_opt) = f_opt</code>.</p>
<p dir="auto">Functions can be listed using <code>list_functions()</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; BlackBoxOptimizationBenchmarking.list_functions()
20-element Array{BlackBoxOptimizationBenchmarking.BBOBFunction,1}:
 Sphere                                           
 Ellipsoidal Function                             
 Discus Function                                  
 Bent Cigar Function                              
 Sharp Ridge Function                             
 Different Powers Function                        
 Rastrigin Function                               
 Weierstrass Function                             
 Schaffers F7 Function                            
 Schaffers F7 Function, moderately ill-conditioned
 Composite Griewank-Rosenbrock Function F8F2      
 Ellipsoidal                                      
 Schwefel Function                                
 Rastrigin                                        
 Buche-Rastrigin                                  
 Linear Slope                                     
 Attractive Sector                                
 Step Ellipsoidal Function                        
 Rosenbrock Function, original                    
 Rosenbrock Function, rotated"><pre>julia<span class="pl-k">&gt;</span> BlackBoxOptimizationBenchmarking<span class="pl-k">.</span><span class="pl-c1">list_functions</span>()
<span class="pl-c1">20</span><span class="pl-k">-</span>element Array{BlackBoxOptimizationBenchmarking<span class="pl-k">.</span>BBOBFunction,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Sphere                                           
 Ellipsoidal Function                             
 Discus Function                                  
 Bent Cigar Function                              
 Sharp Ridge Function                             
 Different Powers Function                        
 Rastrigin Function                               
 Weierstrass Function                             
 Schaffers F7 Function                            
 Schaffers F7 Function, moderately ill<span class="pl-k">-</span>conditioned
 Composite Griewank<span class="pl-k">-</span>Rosenbrock Function F8F2      
 Ellipsoidal                                      
 Schwefel Function                                
 Rastrigin                                        
 Buche<span class="pl-k">-</span>Rastrigin                                  
 Linear Slope                                     
 Attractive Sector                                
 Step Ellipsoidal Function                        
 Rosenbrock Function, original                    
 Rosenbrock Function, rotated</pre></div>
<p dir="auto">A benchmark for a single optimizer and function can be run with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="benchmark(optimizer::Any, f::BBOBFunction, run_lengths, Ntrials, dimensions, Δf)"><pre><span class="pl-c1">benchmark</span>(optimizer<span class="pl-k">::</span><span class="pl-c1">Any</span>, f<span class="pl-k">::</span><span class="pl-c1">BBOBFunction</span>, run_lengths, Ntrials, dimensions, Δf)</pre></div>
<p dir="auto">Or for a collection of optimizers with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="benchmark(optimizers::Vector{T}, funcs, run_lengths, Ntrials, dimensions, Δf)"><pre><span class="pl-c1">benchmark</span>(optimizers<span class="pl-k">::</span><span class="pl-c1">Vector{T}</span>, funcs, run_lengths, Ntrials, dimensions, Δf)</pre></div>
<p dir="auto">See <a href="test/runtests.jl">test/runtests.jl</a></p>
<p dir="auto">The optimizer must implement the methods <code>optimize</code>, <code>minimum</code> and <code>minimizer</code>, see</p>
<p dir="auto"><a href="scripts/optimizers_interface.jl">scripts/optimizers_interface.jl</a></p>
<h3 dir="auto"><a id="user-content-generating-new-instance-of-the-functions" class="anchor" aria-hidden="true" href="#generating-new-instance-of-the-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generating new instance of the functions</h3>
<p dir="auto">To avoid overfiting and test if algorithms are robust with respect to rotations of
the error function, rotation matrices are randomly generated the first time the package is used.</p>
<p dir="auto">If needed new rotations can be generated by running the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@eval BlackBoxOptimizationBenchmarking begin
    @memoize function Q(D)
        r = randn(D); r = r/norm(r)
        Q = [r nullspace(Matrix(r'))]
    end
    @memoize function R(D)
        r = randn(D); r = r/norm(r)
        R = [r nullspace(Matrix(r'))]
    end
end"><pre><span class="pl-c1">@eval</span> BlackBoxOptimizationBenchmarking <span class="pl-k">begin</span>
    <span class="pl-c1">@memoize</span> <span class="pl-k">function</span> <span class="pl-en">Q</span>(D)
        r <span class="pl-k">=</span> <span class="pl-c1">randn</span>(D); r <span class="pl-k">=</span> r<span class="pl-k">/</span><span class="pl-c1">norm</span>(r)
        Q <span class="pl-k">=</span> [r <span class="pl-c1">nullspace</span>(<span class="pl-c1">Matrix</span>(r<span class="pl-k">'</span>))]
    <span class="pl-k">end</span>
    <span class="pl-c1">@memoize</span> <span class="pl-k">function</span> <span class="pl-en">R</span>(D)
        r <span class="pl-k">=</span> <span class="pl-c1">randn</span>(D); r <span class="pl-k">=</span> r<span class="pl-k">/</span><span class="pl-c1">norm</span>(r)
        R <span class="pl-k">=</span> [r <span class="pl-c1">nullspace</span>(<span class="pl-c1">Matrix</span>(r<span class="pl-k">'</span>))]
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference:</h3>
<p dir="auto"><a href="http://coco.lri.fr/downloads/download15.01/bbobdocfunctions.pdf" rel="nofollow">http://coco.lri.fr/downloads/download15.01/bbobdocfunctions.pdf</a></p>
</article></div>