<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/FluxML/FluxJS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0f39a0a09eecdaa73957cb269d8bec46cc72ea3d/68747470733a2f2f7472617669732d63692e6f72672f466c75784d4c2f466c75784a532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/FluxML/FluxJS.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-fluxjs" class="anchor" aria-hidden="true" href="#fluxjs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Flux.JS</h1>
<p>Run <a href="https://fluxml.github.io/" rel="nofollow">Flux</a> models in the browser, via
<a href="https://js.tensorflow.org" rel="nofollow">tensorflow.js</a>.</p>
<p>Note that if you get errors running this package, you may need to run <code>Pkg.checkout("ASTInterpreter2")</code>.</p>
<h2><a id="user-content-js-output" class="anchor" aria-hidden="true" href="#js-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JS Output</h2>
<p>You can see what Flux.JS sees with <code>@code_js</code>, which works like <code>@code_typed</code> or
<code>@code_native</code>. Flux.JS simply accepts a function of arrays along with example
inputs, and generates JavaScript code for you. Here's the simplest possible
example:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-en">rand</span><span class="pl-kos">(</span><span class="pl-c1">10</span><span class="pl-kos">)</span>
<span class="pl-c1">10</span><span class="pl-c1">-</span><span class="pl-s1">element</span> <span class="pl-v">Array</span><span class="pl-kos">{</span><span class="pl-v">Float64</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">}</span>:
 <span class="pl-c1">0.299338</span>
 <span class="pl-s1">â‹®</span>
 <span class="pl-c1">0.267917</span>

<span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> @<span class="pl-s1">code_js</span> <span class="pl-en">identity</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span>
<span class="pl-k">let</span> <span class="pl-s1">model</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">let</span> <span class="pl-s1">math</span> <span class="pl-c1">=</span> <span class="pl-s1">tf</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-s1">model</span><span class="pl-kos">(</span><span class="pl-s1">kinkajou</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">kinkajou</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">flux</span><span class="pl-kos">.</span><span class="pl-en">fetchWeights</span><span class="pl-kos">(</span><span class="pl-s">"model.bson"</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">ws</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-s1">ws</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p>You can see that there's some setup code as Flux.JS expects to load some weights
for a model. But the core of it is this function, which is exactly like the
<code>identity</code> function in Julia.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">model</span><span class="pl-kos">(</span><span class="pl-s1">kinkajou</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">kinkajou</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span></pre></div>
<p>Let's try something more interesting; <code>f</code> takes two arguments and multiplies
them.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> <span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-c1">W</span><span class="pl-kos">,</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-c1">=</span> <span class="pl-c1">W</span>*<span class="pl-s1">x</span>

<span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> @<span class="pl-s1">code_js</span> <span class="pl-en">f</span><span class="pl-kos">(</span><span class="pl-en">rand</span><span class="pl-kos">(</span><span class="pl-c1">5</span><span class="pl-kos">,</span><span class="pl-c1">10</span><span class="pl-kos">)</span><span class="pl-kos">,</span><span class="pl-en">rand</span><span class="pl-kos">(</span><span class="pl-c1">10</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-k">let</span> <span class="pl-s1">model</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">let</span> <span class="pl-s1">math</span> <span class="pl-c1">=</span> <span class="pl-s1">tf</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-s1">model</span><span class="pl-kos">(</span><span class="pl-s1">bear</span><span class="pl-kos">,</span> <span class="pl-s1">giraffe</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">matrixTimesVector</span><span class="pl-kos">(</span><span class="pl-s1">bear</span><span class="pl-kos">,</span> <span class="pl-s1">giraffe</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">flux</span><span class="pl-kos">.</span><span class="pl-en">fetchWeights</span><span class="pl-kos">(</span><span class="pl-s">"model.bson"</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">ws</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-s1">ws</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p>Because Flux models are just Julia functions, we can use the same macro with
them too. You'll now notice that the weights are being used.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> <span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-v">Chain</span><span class="pl-kos">(</span><span class="pl-v">Dense</span><span class="pl-kos">(</span><span class="pl-c1">10</span><span class="pl-kos">,</span><span class="pl-c1">5</span><span class="pl-kos">,</span><span class="pl-s1">relu</span><span class="pl-kos">)</span><span class="pl-kos">,</span><span class="pl-v">Dense</span><span class="pl-kos">(</span><span class="pl-c1">5</span><span class="pl-kos">,</span><span class="pl-c1">2</span><span class="pl-kos">)</span><span class="pl-kos">,</span><span class="pl-s1">softmax</span><span class="pl-kos">)</span>

<span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> @<span class="pl-s1">code_js</span> <span class="pl-en">m</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span>
<span class="pl-k">let</span> <span class="pl-s1">model</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">let</span> <span class="pl-s1">math</span> <span class="pl-c1">=</span> <span class="pl-s1">tf</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-en">badger</span><span class="pl-kos">(</span><span class="pl-s1">eland</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">add</span><span class="pl-kos">(</span><span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">matrixTimesVector</span><span class="pl-kos">(</span><span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-s1">eland</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-en">chimpanzee</span><span class="pl-kos">(</span><span class="pl-s1">mongoose</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">relu</span><span class="pl-kos">(</span><span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">add</span><span class="pl-kos">(</span><span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">matrixTimesVector</span><span class="pl-kos">(</span><span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">2</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-s1">mongoose</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">3</span><span class="pl-kos">]</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-s1">model</span><span class="pl-kos">(</span><span class="pl-s1">shark</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">softmax</span><span class="pl-kos">(</span><span class="pl-en">badger</span><span class="pl-kos">(</span><span class="pl-en">chimpanzee</span><span class="pl-kos">(</span><span class="pl-s1">shark</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">flux</span><span class="pl-kos">.</span><span class="pl-en">fetchWeights</span><span class="pl-kos">(</span><span class="pl-s">"model.bson"</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">ws</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-s1">ws</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p>There is also early support for RNNs (we compile stateful models directly, no
unrolling).</p>
<div class="highlight highlight-source-js"><pre><span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> <span class="pl-s1">m</span> <span class="pl-c1">=</span> <span class="pl-v">Chain</span><span class="pl-kos">(</span><span class="pl-c1">RNN</span><span class="pl-kos">(</span><span class="pl-c1">10</span><span class="pl-kos">,</span><span class="pl-c1">5</span><span class="pl-kos">)</span><span class="pl-kos">)</span>

<span class="pl-s1">julia</span><span class="pl-c1">&gt;</span> @<span class="pl-s1">code_js</span> <span class="pl-en">m</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span>
<span class="pl-k">let</span> <span class="pl-s1">model</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">let</span> <span class="pl-s1">math</span> <span class="pl-c1">=</span> <span class="pl-s1">tf</span><span class="pl-kos">;</span>
  <span class="pl-k">let</span> <span class="pl-s1">init</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-c1">0.017732</span><span class="pl-kos">,</span> <span class="pl-c1">0.00991122</span><span class="pl-kos">,</span> <span class="pl-c1">-</span><span class="pl-c1">0.00712077</span><span class="pl-kos">,</span> <span class="pl-c1">-</span><span class="pl-c1">0.00161244</span><span class="pl-kos">,</span> <span class="pl-c1">-</span><span class="pl-c1">0.00232475</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-k">let</span> <span class="pl-s1">states</span> <span class="pl-c1">=</span> <span class="pl-s1">init</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-en">nightingale</span><span class="pl-kos">(</span><span class="pl-s1">seal</span><span class="pl-kos">,</span> <span class="pl-s1">mongoose</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-kos">[</span><span class="pl-s1">seal</span><span class="pl-kos">,</span> <span class="pl-s1">mongoose</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-en">cat</span><span class="pl-kos">(</span><span class="pl-s1">horse</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">let</span> <span class="pl-s1">weasel</span> <span class="pl-c1">=</span> <span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">tanh</span><span class="pl-kos">(</span><span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">add</span><span class="pl-kos">(</span><span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">add</span><span class="pl-kos">(</span><span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">matrixTimesVector</span><span class="pl-kos">(</span><span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-s1">horse</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s1">math</span><span class="pl-kos">.</span><span class="pl-en">matrixTimesVector</span><span class="pl-kos">(</span><span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-s1">states</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span><span class="pl-kos">[</span><span class="pl-c1">2</span><span class="pl-kos">]</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">let</span> <span class="pl-s1">coati</span> <span class="pl-c1">=</span> <span class="pl-en">nightingale</span><span class="pl-kos">(</span><span class="pl-s1">weasel</span><span class="pl-kos">,</span> <span class="pl-s1">weasel</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-s1">states</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-s1">coati</span><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span> <span class="pl-s1">coati</span><span class="pl-kos">[</span><span class="pl-c1">2</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-s1">model</span><span class="pl-kos">(</span><span class="pl-s1">fish</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-en">cat</span><span class="pl-kos">(</span><span class="pl-s1">fish</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">reset</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">states</span> <span class="pl-c1">=</span> <span class="pl-s1">init</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">flux</span><span class="pl-kos">.</span><span class="pl-en">fetchWeights</span><span class="pl-kos">(</span><span class="pl-s">"model.bson"</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">ws</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-s1">ws</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p>In general, the more useful entry point to the package is <code>FluxJS.compile</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> FluxJS<span class="pl-k">.</span><span class="pl-c1">compile</span>(<span class="pl-s"><span class="pl-pds">"</span>mnist<span class="pl-pds">"</span></span>, m, <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>))</pre></div>
<p>This will produce two files in the current directory: (1) <code>mnist.js</code>, which
contains the same JavaScript code as above; (2) <code>mnist.bson</code>, which contains the
model weights in a JS-loadable format.</p>
<h2><a id="user-content-browser-setup" class="anchor" aria-hidden="true" href="#browser-setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Browser Setup</h2>
<p>Firstly, you'll need the following scripts in your <code>&lt;head&gt;</code>. The <code>flux.js</code>
script can be found <a href="lib/flux.js">here</a>.</p>
<div class="highlight highlight-text-html-basic"><pre><span class="pl-kos">&lt;</span><span class="pl-ent">head</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">script</span> <span class="pl-c1">src</span>="<span class="pl-s">https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.9.0</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">script</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">script</span> <span class="pl-c1">src</span>="<span class="pl-s">https://unpkg.com/bson/browser_build/bson.js</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">script</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">script</span> <span class="pl-c1">src</span>="<span class="pl-s">flux.js</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">script</span><span class="pl-kos">&gt;</span> <span class="pl-c">&lt;!-- Or embed the script directly --&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">head</span><span class="pl-kos">&gt;</span></pre></div>
<p>From here, you can either link the generated code as another script, or embed it
directly. In real applications you'll most likely want to wait on the
<code>fetchWeights</code> promise, to avoid trying to use the model before it's ready.</p>
<div class="highlight highlight-text-html-basic"><pre><span class="pl-kos">&lt;</span><span class="pl-ent">script</span><span class="pl-kos">&gt;</span>
<span class="pl-k">let</span> <span class="pl-s1">model</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">let</span> <span class="pl-s1">math</span> <span class="pl-c1">=</span> <span class="pl-s1">tf</span><span class="pl-kos">;</span>
  <span class="pl-k">function</span> <span class="pl-s1">model</span><span class="pl-kos">(</span><span class="pl-s1">kinkajou</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">kinkajou</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">flux</span><span class="pl-kos">.</span><span class="pl-en">fetchWeights</span><span class="pl-kos">(</span><span class="pl-s">"model.bson"</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">ws</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-s1">model</span><span class="pl-kos">.</span><span class="pl-c1">weights</span> <span class="pl-c1">=</span> <span class="pl-s1">ws</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">script</span><span class="pl-kos">&gt;</span></pre></div>
<p>In the page, you can run the model from the dev tools.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">&gt;</span> <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-s1">tf</span><span class="pl-kos">.</span><span class="pl-en">tensor</span><span class="pl-kos">(</span><span class="pl-kos">[</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-c1">2</span><span class="pl-kos">,</span><span class="pl-c1">3</span><span class="pl-kos">,</span><span class="pl-c1">4</span><span class="pl-kos">,</span><span class="pl-c1">5</span><span class="pl-kos">,</span><span class="pl-c1">6</span><span class="pl-kos">,</span><span class="pl-c1">7</span><span class="pl-kos">,</span><span class="pl-c1">8</span><span class="pl-kos">,</span><span class="pl-c1">9</span><span class="pl-kos">,</span><span class="pl-c1">10</span><span class="pl-kos">]</span><span class="pl-kos">)</span>
  <span class="pl-v">Tensor</span>Â <span class="pl-kos">{</span><span class="pl-c1">isDisposed</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span> <span class="pl-c1">size</span>: <span class="pl-c1">10</span><span class="pl-kos">,</span> <span class="pl-c1">shape</span>: <span class="pl-v">Array</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-c1">dtype</span>: <span class="pl-s">"float32"</span><span class="pl-kos">,</span> <span class="pl-c1">strides</span>: <span class="pl-v">Array</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">)</span><span class="pl-kos">,</span>Â â€¦<span class="pl-kos">}</span>
<span class="pl-c1">&gt;</span> <span class="pl-k">await</span> <span class="pl-en">model</span><span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">data</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
  <span class="pl-v">Float32Array</span><span class="pl-kos">(</span><span class="pl-c1">25</span><span class="pl-kos">)</span>Â <span class="pl-kos">[</span><span class="pl-c1">0.0262143611907959</span><span class="pl-kos">,</span> <span class="pl-c1">-</span><span class="pl-c1">0.04852187633514404</span><span class="pl-kos">,</span> <span class="pl-s1">â€¦</span><span class="pl-kos">]</span></pre></div>
<p>See the <a href="https://js.tensorflow.org/api/latest/index.html" rel="nofollow">tensorflow.js docs</a> for
more information on how to work with its tensor objects.</p>
</article></div>