<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-openclblasjl" class="anchor" aria-hidden="true" href="#openclblasjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>OpenCLBLAS.jl</h1>
<p>######OpenCL BLAS library wrapper for Julia with samples</p>
<p>##What is this project?</p>
<p>This project focuses on running OpenCL BLAS with Julia matrices on GPU devices seamlessly, all OpenCL type definitions and functions were hand-typed from cl.h and clBLAS.h header.</p>
<p>Currently, I've only rewritten the example C program (single precision GEMM BLAS) provided with libclBLAS into test_sgemm.jl.
I also made a separate high level function to manages all the memory involved with calling the C function clblasSgemm().</p>
<p>As a result, the OpenCLBLAS.sgemm() function cleans up the buffers, events, contexts, and queues in the GPU memory.</p>
<p>##Usage</p>
<p>The following example shows how a user can use the GEMM function to modify a matrix C.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>sgemm.jl<span class="pl-pds">"</span></span>)

A <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array{Float32,<span class="pl-c1">2</span>}, [[<span class="pl-c1">11</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>, <span class="pl-c1">14</span>, <span class="pl-c1">15</span>]';[<span class="pl-c1">21</span>, <span class="pl-c1">22</span>, <span class="pl-c1">23</span>, <span class="pl-c1">24</span>, <span class="pl-c1">25</span>]';[<span class="pl-c1">31</span>, <span class="pl-c1">32</span>, <span class="pl-c1">33</span>, <span class="pl-c1">34</span>, <span class="pl-c1">35</span>]';[<span class="pl-c1">41</span>, <span class="pl-c1">42</span>, <span class="pl-c1">43</span>, <span class="pl-c1">44</span>, <span class="pl-c1">45</span>]'])
B <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array{Float32,<span class="pl-c1">2</span>}, [[<span class="pl-c1">11</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>]';[<span class="pl-c1">21</span>, <span class="pl-c1">22</span>, <span class="pl-c1">23</span>]';[<span class="pl-c1">31</span>, <span class="pl-c1">32</span>, <span class="pl-c1">33</span>]';[<span class="pl-c1">41</span>, <span class="pl-c1">42</span>, <span class="pl-c1">43</span>]';[<span class="pl-c1">51</span>, <span class="pl-c1">52</span>, <span class="pl-c1">53</span>]'])
C <span class="pl-k">=</span> <span class="pl-c1">convert</span>(Array{Float32,<span class="pl-c1">2</span>}, [[<span class="pl-c1">11</span>, <span class="pl-c1">12</span>, <span class="pl-c1">13</span>]';[<span class="pl-c1">21</span>, <span class="pl-c1">22</span>, <span class="pl-c1">23</span>]';[<span class="pl-c1">31</span>, <span class="pl-c1">32</span>, <span class="pl-c1">33</span>]';[<span class="pl-c1">41</span>, <span class="pl-c1">42</span>, <span class="pl-c1">43</span>]'])
OpenCLBLAS<span class="pl-k">.</span><span class="pl-c1">sgemm!</span>(<span class="pl-s"><span class="pl-pds">'</span>N<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>N<span class="pl-pds">'</span></span>,<span class="pl-c1">Float32</span>(<span class="pl-c1">10</span>),A,B, <span class="pl-c1">Float32</span>(<span class="pl-c1">20</span>), C)</pre></div>
<p>The result can be seen in this query:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> C
<span class="pl-c1">4</span>x3 Array{Float32, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">21370.0</span>  <span class="pl-c1">22040.0</span>  <span class="pl-c1">22710.0</span>
 <span class="pl-c1">37070.0</span>  <span class="pl-c1">38240.0</span>  <span class="pl-c1">39410.0</span>
 <span class="pl-c1">52770.0</span>  <span class="pl-c1">54440.0</span>  <span class="pl-c1">56110.0</span>
 <span class="pl-c1">68470.0</span>  <span class="pl-c1">70640.0</span>  <span class="pl-c1">72810.0</span>

julia<span class="pl-k">&gt;</span></pre></div>
<p>##Progress</p>
<p>I'll add more OpenCLBLAS functions as I test them myself.</p>
<p>The following functions have been tested on a Windows x64 PC with an NVIDIA GPU:<br>
-<strong>sGEMM</strong></p>
<p>#####This project is based off the work of these projects:</p>
<p><a href="https://github.com/JuliaGPU/OpenCL.jl">OpenCL.jl</a> by Jake Bolewski and Valentin Churavy<br>
<a href="https://github.com/JuliaGPU/CUBLAS.jl">CUBLAS.jl</a> by Nick Henderson</p>
<p>##License</p>
<p>The license can be found in the file 'LICENSE'.</p>
</article></div>