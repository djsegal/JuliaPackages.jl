<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-invariantsets" class="anchor" aria-hidden="true" href="#invariantsets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InvariantSets</h1>
<p><a href="https://ueliwechsler.github.io/InvariantSets.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://ueliwechsler.github.io/InvariantSets.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/ueliwechsler/InvariantSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f1f838be2ca32cd79a220fab34f68eb2e31738d30ed48141e8fe475601c7e196/68747470733a2f2f7472617669732d63692e636f6d2f75656c6977656368736c65722f496e76617269616e74536574732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ueliwechsler/InvariantSets.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ueliwechsler/InvariantSets.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bb27c1a1e543601f6e8580cfd282a9a45fab7231ee72b84942590fc8ced1f4bf/68747470733a2f2f636f6465636f762e696f2f67682f75656c6977656368736c65722f496e76617269616e74536574732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/ueliwechsler/InvariantSets.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/ueliwechsler/InvariantSets.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dcad7be47c76373e07adf3c7c9ac4843e8c0e8343a42bb88bed144b041b95c7e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f75656c6977656368736c65722f496e76617269616e74536574732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/ueliwechsler/InvariantSets.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>InvariantSets.jl</code> brings some of the set computational functionalities provided by <code>MATLAB</code> plugin  <a href="https://www.mpt3.org/" rel="nofollow">Multi-Parametric Toolbox 3 (MPT)</a> to the <code>Julia Programming Language</code> and extends it with lazy set computation features. This package enables the user to compute, approximate and display invariant sets using a similar notation as in MPT but without needing a costly <code>MATLAB</code> license.</p>
<p><code>InvariantSets.jl</code> builds upon <a href="https://github.com/JuliaReach/LazySets.jl"><code>LazySets.jl</code></a> which provides "lazy" and concrete set computation (with <code>Polyhedra.jl</code> and <code>CDDLib.jl</code> as polyhedral computation backend).
As a result, if needed, the full computational power of <code>LazySets.jl</code> can be leveraged if needed.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<h2><a id="user-content-content" class="anchor" aria-hidden="true" href="#content"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Content</h2>
<h3><a id="user-content-set-types" class="anchor" aria-hidden="true" href="#set-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Set Types</h3>
<table>
<thead>
<tr>
<th>Set Type</th>
<th>Constructor</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>HPolygon</code>/<code>HPolytope</code>/<code>HPolyhedron</code></td>
<td><code>HPolytope(A, b)</code></td>
<td><code>P = {x∈ℝⁿ: Ax≤b}</code></td>
</tr>
<tr>
<td><code>VPolygon</code>/<code>VPolytope</code>/<code>VPolyhedron</code></td>
<td><code>VPolytope(V)</code></td>
<td><code>V∈ℝⁿˣᵐ</code></td>
</tr>
<tr>
<td><code>Ballp</code>/ <code>Ball1</code> / <code>Ball2</code>/ <code>BallInf</code></td>
<td><code>Ball1(center, radius)</code></td>
<td></td>
</tr>
<tr>
<td><code>Ellipsoid</code></td>
<td><code>Ellipsoid(center, shape_matrix)</code></td>
<td></td>
</tr>
<tr>
<td><code>Zonotope</code></td>
<td><code>Zonotope(center, generator)</code></td>
<td></td>
</tr>
<tr>
<td><code>Hyperrectangle</code></td>
<td><code>Hyperrectangle(center, radius)</code></td>
<td></td>
</tr>
<tr>
<td><code> </code></td>
<td><code>Hyperrectangle(low=min, high=max)</code></td>
<td></td>
</tr>
<tr>
<td><code>Hyperplane</code> / <code>HalfSpace</code></td>
<td><code>HalfSpace(a,b)</code></td>
<td></td>
</tr>
<tr>
<td><code>Singleton</code></td>
<td><code>Singleton(element)</code></td>
<td></td>
</tr>
<tr>
<td><code>SingleEntryVector</code></td>
<td><code>SingleEntryVector(dim, idx, value)</code></td>
<td></td>
</tr>
<tr>
<td><code>Interval</code></td>
<td><code>Interval(start, end)</code></td>
<td></td>
</tr>
</tbody>
</table>
<h3><a id="user-content-concrete-set-operations" class="anchor" aria-hidden="true" href="#concrete-set-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Concrete Set Operations</h3>
<p>In <code>LazySets.jl</code> the common operator <code>+</code>, <code>*</code> and <code>∩</code> correspond to lazy set operations.
This is the same in <code>InvariantSets.jl</code>, in addition, the <strong>concrete</strong> set operators
<code>+ᶜ</code>, <code>-ᶜ</code>, <code>*ᶜ</code> and <code>∩ᶜ</code>. In most IDEs, the superscript <code>ᶜ</code> can be written with <code>\^c → tab</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Polyhedra
using CDDLib

A = [1.0  0.0;
     0.0  1.0;
    -1.0  0.0;
     0.0 -1.0;
     1.0 1.0]
b = [1.0, 2.0, 3.0, 4.0, 1.0]
origin = [0.0, 0.0]
polygon = HPolygon(A,b)
ball = Ball1(origin, 1.3)
ball2 = Ball2(origin, 1.0)
A = [2.0 0.0; 0.0 0.5]
# Scaling
ball_scaled = 2.0 *ᶜ ball
# Linear Map
ball_lm = A *ᶜ ball
# Translation of ball
ball_trans = [2.0,2.0] +ᶜ ball
# Minkowski Sum
sum = polygon +ᶜ ball
# Pontryagin Difference
diff = polygon -ᶜ ball2
# polygon_after_diff = diff + ball2
# Intersection
intersection = polygon ∩ᶜ ball
# Reflection
polygon_reflected = reflect(polygon)
# Minkowski Difference
diff_minsk = ball_trans +ᶜ reflect(polygon)
# chebyshev center
c, r = InvariantSets.chebyshev_center(polygon,  get_radius=true)
chebyball = Ball2(c, r)
"><pre><span class="pl-k">using</span> Polyhedra
<span class="pl-k">using</span> CDDLib

A <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>;
     <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>;
    <span class="pl-k">-</span><span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>;
     <span class="pl-c1">0.0</span> <span class="pl-k">-</span><span class="pl-c1">1.0</span>;
     <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">1.0</span>]
origin <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>]
polygon <span class="pl-k">=</span> <span class="pl-c1">HPolygon</span>(A,b)
ball <span class="pl-k">=</span> <span class="pl-c1">Ball1</span>(origin, <span class="pl-c1">1.3</span>)
ball2 <span class="pl-k">=</span> <span class="pl-c1">Ball2</span>(origin, <span class="pl-c1">1.0</span>)
A <span class="pl-k">=</span> [<span class="pl-c1">2.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.5</span>]
<span class="pl-c"><span class="pl-c">#</span> Scaling</span>
ball_scaled <span class="pl-k">=</span> <span class="pl-c1">2.0</span> <span class="pl-k">*</span>ᶜ ball
<span class="pl-c"><span class="pl-c">#</span> Linear Map</span>
ball_lm <span class="pl-k">=</span> A <span class="pl-k">*</span>ᶜ ball
<span class="pl-c"><span class="pl-c">#</span> Translation of ball</span>
ball_trans <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>,<span class="pl-c1">2.0</span>] <span class="pl-k">+</span>ᶜ ball
<span class="pl-c"><span class="pl-c">#</span> Minkowski Sum</span>
sum <span class="pl-k">=</span> polygon <span class="pl-k">+</span>ᶜ ball
<span class="pl-c"><span class="pl-c">#</span> Pontryagin Difference</span>
diff <span class="pl-k">=</span> polygon <span class="pl-k">-</span>ᶜ ball2
<span class="pl-c"><span class="pl-c">#</span> polygon_after_diff = diff + ball2</span>
<span class="pl-c"><span class="pl-c">#</span> Intersection</span>
intersection <span class="pl-k">=</span> polygon <span class="pl-k">∩</span>ᶜ ball
<span class="pl-c"><span class="pl-c">#</span> Reflection</span>
polygon_reflected <span class="pl-k">=</span> <span class="pl-c1">reflect</span>(polygon)
<span class="pl-c"><span class="pl-c">#</span> Minkowski Difference</span>
diff_minsk <span class="pl-k">=</span> ball_trans <span class="pl-k">+</span>ᶜ <span class="pl-c1">reflect</span>(polygon)
<span class="pl-c"><span class="pl-c">#</span> chebyshev center</span>
c, r <span class="pl-k">=</span> InvariantSets<span class="pl-k">.</span><span class="pl-c1">chebyshev_center</span>(polygon,  get_radius<span class="pl-k">=</span><span class="pl-c1">true</span>)
chebyball <span class="pl-k">=</span> <span class="pl-c1">Ball2</span>(c, r)</pre></div>
<h2><a id="user-content-invariant-sets--control-systems" class="anchor" aria-hidden="true" href="#invariant-sets--control-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Invariant Sets &amp; Control Systems</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Constructor</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>preset</code></td>
<td><code>preset(A, X)</code></td>
<td></td>
</tr>
<tr>
<td><code>state_constraints</code></td>
<td><code>state_constraints(X, U, K)</code></td>
<td></td>
</tr>
<tr>
<td><code>maximum_invariant_set</code></td>
<td><code>maximum_invariant_set(A, X, N)</code></td>
<td></td>
</tr>
<tr>
<td><code>maximum_control_invariant_set</code></td>
<td><code>maximum_control_invariant_set(A, B, X, U, N)</code></td>
<td></td>
</tr>
<tr>
<td><code>terminal_set</code></td>
<td><code>terminal_set(A, B, X, U, K)</code></td>
<td></td>
</tr>
<tr>
<td><code>feasible_set</code></td>
<td><code>feasible_set(A, B, X, U, Xf, N)</code></td>
<td></td>
</tr>
<tr>
<td><del><code>maximal_RPI_set</code></del></td>
<td><code> </code></td>
<td></td>
</tr>
<tr>
<td><del><code>minimal_RPI_set</code></del></td>
<td><code> </code></td>
<td></td>
</tr>
<tr>
<td><del><code>tightened_constraints</code></del></td>
<td><code> </code></td>
<td></td>
</tr>
</tbody>
</table>
<h3><a id="user-content-integration-with-mathematicalsystemsjl" class="anchor" aria-hidden="true" href="#integration-with-mathematicalsystemsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integration with <code>MathematicalSystems.jl</code></h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = [0.9 0.5; 0 0.9]
B = [1., 0]
X = BallInf(zeros(2), 10.)
U = BallInf(zeros(1), 1.)

K = [0.1 0.1]

autSys = @system x⁺ = A*x  x∈X
ctrlSys = @system x⁺ = A*x + B*u x∈X u∈U

IS = maximum_invariant_set(autSys)
MIL = maximum_invariant_set(ctrlSys, K)
MCI = maximum_control_invariant_set(ctrlSys)
"><pre>A <span class="pl-k">=</span> [<span class="pl-c1">0.9</span> <span class="pl-c1">0.5</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.9</span>]
B <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">0</span>]
X <span class="pl-k">=</span> <span class="pl-c1">BallInf</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>), <span class="pl-c1">10.</span>)
U <span class="pl-k">=</span> <span class="pl-c1">BallInf</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">1</span>), <span class="pl-c1">1.</span>)

K <span class="pl-k">=</span> [<span class="pl-c1">0.1</span> <span class="pl-c1">0.1</span>]

autSys <span class="pl-k">=</span> <span class="pl-c1">@system</span> x⁺ <span class="pl-k">=</span> A<span class="pl-k">*</span>x  x<span class="pl-k">∈</span>X
ctrlSys <span class="pl-k">=</span> <span class="pl-c1">@system</span> x⁺ <span class="pl-k">=</span> A<span class="pl-k">*</span>x <span class="pl-k">+</span> B<span class="pl-k">*</span>u x<span class="pl-k">∈</span>X u<span class="pl-k">∈</span>U

IS <span class="pl-k">=</span> <span class="pl-c1">maximum_invariant_set</span>(autSys)
MIL <span class="pl-k">=</span> <span class="pl-c1">maximum_invariant_set</span>(ctrlSys, K)
MCI <span class="pl-k">=</span> <span class="pl-c1">maximum_control_invariant_set</span>(ctrlSys)</pre></div>
<h3><a id="user-content-integration-with-jumpjl" class="anchor" aria-hidden="true" href="#integration-with-jumpjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Integration with <code>JuMP.jl</code></h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using InvariantSets
using JuMP
m = Model()
@variable(m, X[1:2, 1:5])
@variable(m, U[1:1, 1:2]) # U[1,1:5] does not work
constru= BallInf(zeros(size(U,1)), 2.0)
constrx = HPolyhedron([1 -2.], [1.])
InvariantSets.add_constraint!(m, X, constrx)
InvariantSets.add_constraint!(m, U, constru)
# Feasibility
# Subject to
# X[1,1] - 2 X[2,1] &lt;= 1.0
# X[1,2] - 2 X[2,2] &lt;= 1.0
# X[1,3] - 2 X[2,3] &lt;= 1.0
# X[1,4] - 2 X[2,4] &lt;= 1.0
# X[1,5] - 2 X[2,5] &lt;= 1.0
# U[1,1] &lt;= 2.0
# -U[1,1] &lt;= 2.0
# U[1,2] &lt;= 2.0
# -U[1,2] &lt;= 2.0
"><pre><span class="pl-k">using</span> InvariantSets
<span class="pl-k">using</span> JuMP
m <span class="pl-k">=</span> <span class="pl-c1">Model</span>()
<span class="pl-c1">@variable</span>(m, X[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
<span class="pl-c1">@variable</span>(m, U[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>]) <span class="pl-c"><span class="pl-c">#</span> U[1,1:5] does not work</span>
constru<span class="pl-k">=</span> <span class="pl-c1">BallInf</span>(<span class="pl-c1">zeros</span>(<span class="pl-c1">size</span>(U,<span class="pl-c1">1</span>)), <span class="pl-c1">2.0</span>)
constrx <span class="pl-k">=</span> <span class="pl-c1">HPolyhedron</span>([<span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">2.</span>], [<span class="pl-c1">1.</span>])
InvariantSets<span class="pl-k">.</span><span class="pl-c1">add_constraint!</span>(m, X, constrx)
InvariantSets<span class="pl-k">.</span><span class="pl-c1">add_constraint!</span>(m, U, constru)
<span class="pl-c"><span class="pl-c">#</span> Feasibility</span>
<span class="pl-c"><span class="pl-c">#</span> Subject to</span>
<span class="pl-c"><span class="pl-c">#</span> X[1,1] - 2 X[2,1] &lt;= 1.0</span>
<span class="pl-c"><span class="pl-c">#</span> X[1,2] - 2 X[2,2] &lt;= 1.0</span>
<span class="pl-c"><span class="pl-c">#</span> X[1,3] - 2 X[2,3] &lt;= 1.0</span>
<span class="pl-c"><span class="pl-c">#</span> X[1,4] - 2 X[2,4] &lt;= 1.0</span>
<span class="pl-c"><span class="pl-c">#</span> X[1,5] - 2 X[2,5] &lt;= 1.0</span>
<span class="pl-c"><span class="pl-c">#</span> U[1,1] &lt;= 2.0</span>
<span class="pl-c"><span class="pl-c">#</span> -U[1,1] &lt;= 2.0</span>
<span class="pl-c"><span class="pl-c">#</span> U[1,2] &lt;= 2.0</span>
<span class="pl-c"><span class="pl-c">#</span> -U[1,2] &lt;= 2.0</span></pre></div>
<h3><a id="user-content-comparison-to-matlab-and-mpt" class="anchor" aria-hidden="true" href="#comparison-to-matlab-and-mpt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Comparison to MATLAB and MPT</h3>
<h4><a id="user-content-geometric-operations-with-polyhedra" class="anchor" aria-hidden="true" href="#geometric-operations-with-polyhedra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Geometric operations with polyhedra</h4>
<p>Matlab and MPT</p>
<div class="highlight highlight-source-python position-relative" data-snippet-clipboard-copy-content="P1 = Polyhedron( 'A', [1 -2.1 -0.5; 0.8 -3.1 0.9; -1.2 0.4 -0.8], 'b', [1; 4.9; -1.8])
P1.isEmptySet()
P1.isBounded()
P1.plot()

P2 = Polyhedron('lb', [-1; -2], 'ub', [3; 4])
P2.computeVRep
P2.V

P3 = Polyhedron([4, -1; 4, 5; 8, 3])
P3.computeHRep

V = [ -1.7 -0.4; -0.4  0.7; 1.2 -0.8; 0 0.8; 1.3 0.9; -0.3 0.6];
P4 = Polyhedron(V);
x0 = [0; 0];
P4.contains( x0 )
x1 = [3; 0];
P4.contains( x1 )

P5 = Polyhedron([ 1.8  -4.8; -7.2 -3.4; -4.2 1.2; 5.8  2.7]);
data = P5.chebyCenter()
"><pre><span class="pl-v">P1</span> <span class="pl-c1">=</span> <span class="pl-v">Polyhedron</span>( <span class="pl-s">'A'</span>, [<span class="pl-c1">1</span> <span class="pl-c1">-</span><span class="pl-c1">2.1</span> <span class="pl-c1">-</span><span class="pl-c1">0.5</span>; <span class="pl-c1">0.8</span> <span class="pl-c1">-</span><span class="pl-c1">3.1</span> <span class="pl-c1">0.9</span>; <span class="pl-c1">-</span><span class="pl-c1">1.2</span> <span class="pl-c1">0.4</span> <span class="pl-c1">-</span><span class="pl-c1">0.8</span>], <span class="pl-s">'b'</span>, [<span class="pl-c1">1</span>; <span class="pl-c1">4.9</span>; <span class="pl-c1">-</span><span class="pl-c1">1.8</span>])
<span class="pl-v">P1</span>.<span class="pl-en">isEmptySet</span>()
<span class="pl-v">P1</span>.<span class="pl-en">isBounded</span>()
<span class="pl-v">P1</span>.<span class="pl-en">plot</span>()

<span class="pl-v">P2</span> <span class="pl-c1">=</span> <span class="pl-v">Polyhedron</span>(<span class="pl-s">'lb'</span>, [<span class="pl-c1">-</span><span class="pl-c1">1</span>; <span class="pl-c1">-</span><span class="pl-c1">2</span>], <span class="pl-s">'ub'</span>, [<span class="pl-c1">3</span>; <span class="pl-c1">4</span>])
<span class="pl-v">P2</span>.<span class="pl-s1">computeVRep</span>
<span class="pl-v">P2</span>.<span class="pl-v">V</span>

<span class="pl-v">P3</span> <span class="pl-c1">=</span> <span class="pl-v">Polyhedron</span>([<span class="pl-c1">4</span>, <span class="pl-c1">-</span><span class="pl-c1">1</span>; <span class="pl-c1">4</span>, <span class="pl-c1">5</span>; <span class="pl-c1">8</span>, <span class="pl-c1">3</span>])
<span class="pl-v">P3</span>.<span class="pl-s1">computeHRep</span>

<span class="pl-v">V</span> <span class="pl-c1">=</span> [ <span class="pl-c1">-</span><span class="pl-c1">1.7</span> <span class="pl-c1">-</span><span class="pl-c1">0.4</span>; <span class="pl-c1">-</span><span class="pl-c1">0.4</span>  <span class="pl-c1">0.7</span>; <span class="pl-c1">1.2</span> <span class="pl-c1">-</span><span class="pl-c1">0.8</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.8</span>; <span class="pl-c1">1.3</span> <span class="pl-c1">0.9</span>; <span class="pl-c1">-</span><span class="pl-c1">0.3</span> <span class="pl-c1">0.6</span>];
<span class="pl-v">P4</span> <span class="pl-c1">=</span> <span class="pl-v">Polyhedron</span>(<span class="pl-v">V</span>);
<span class="pl-s1">x0</span> <span class="pl-c1">=</span> [<span class="pl-c1">0</span>; <span class="pl-c1">0</span>];
<span class="pl-v">P4</span>.<span class="pl-en">contains</span>( <span class="pl-s1">x0</span> )
<span class="pl-s1">x1</span> <span class="pl-c1">=</span> [<span class="pl-c1">3</span>; <span class="pl-c1">0</span>];
<span class="pl-v">P4</span>.<span class="pl-en">contains</span>( <span class="pl-s1">x1</span> )

<span class="pl-v">P5</span> <span class="pl-c1">=</span> <span class="pl-v">Polyhedron</span>([ <span class="pl-c1">1.8</span>  <span class="pl-c1">-</span><span class="pl-c1">4.8</span>; <span class="pl-c1">-</span><span class="pl-c1">7.2</span> <span class="pl-c1">-</span><span class="pl-c1">3.4</span>; <span class="pl-c1">-</span><span class="pl-c1">4.2</span> <span class="pl-c1">1.2</span>; <span class="pl-c1">5.8</span>  <span class="pl-c1">2.7</span>]);
<span class="pl-s1">data</span> <span class="pl-c1">=</span> <span class="pl-v">P5</span>.<span class="pl-en">chebyCenter</span>()</pre></div>
<p>Julia and InvariantSets</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="P1 = Polyhedron([1 -2.1 -0.5; 0.8 -3.1 0.9; -1.2 0.4 -0.8],  [1; 4.9; -1.8])
isempty(P1) # or P1 |&gt; isempty
isbounded(P1)
plot(P1)

P2 = Hyperrectangle(low=[-1, -2], high=[3,4])
P2hrep = convert(HPolytope, P2)
P2vrep =  tovrep(P2hrep)
P2vrep.vertices

P3vrep = VPolytope([4 -1; 4 5; 8 3.]);
P3hrep = HPolytope(tosimplehrep(P3vrep)...)

V = [ -1.7 -0.4; -0.4  0.7; 1.2 -0.8; 0 0.8; 1.3 0.9; -0.3 0.6];
P4 = VPolytope(V');
[0., 0.] ∈ P4
[3., 0.] ∈ P4

P5 = VPolytope([ 1.8  -4.8; -7.2 -3.4; -4.2 1.2; 5.8  2.7]');
chebyshev_center(P5)
"><pre>P1 <span class="pl-k">=</span> <span class="pl-c1">Polyhedron</span>([<span class="pl-c1">1</span> <span class="pl-k">-</span><span class="pl-c1">2.1</span> <span class="pl-k">-</span><span class="pl-c1">0.5</span>; <span class="pl-c1">0.8</span> <span class="pl-k">-</span><span class="pl-c1">3.1</span> <span class="pl-c1">0.9</span>; <span class="pl-k">-</span><span class="pl-c1">1.2</span> <span class="pl-c1">0.4</span> <span class="pl-k">-</span><span class="pl-c1">0.8</span>],  [<span class="pl-c1">1</span>; <span class="pl-c1">4.9</span>; <span class="pl-k">-</span><span class="pl-c1">1.8</span>])
<span class="pl-c1">isempty</span>(P1) <span class="pl-c"><span class="pl-c">#</span> or P1 |&gt; isempty</span>
<span class="pl-c1">isbounded</span>(P1)
<span class="pl-c1">plot</span>(P1)

P2 <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-k">-</span><span class="pl-c1">2</span>], high<span class="pl-k">=</span>[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])
P2hrep <span class="pl-k">=</span> <span class="pl-c1">convert</span>(HPolytope, P2)
P2vrep <span class="pl-k">=</span>  <span class="pl-c1">tovrep</span>(P2hrep)
P2vrep<span class="pl-k">.</span>vertices

P3vrep <span class="pl-k">=</span> <span class="pl-c1">VPolytope</span>([<span class="pl-c1">4</span> <span class="pl-k">-</span><span class="pl-c1">1</span>; <span class="pl-c1">4</span> <span class="pl-c1">5</span>; <span class="pl-c1">8</span> <span class="pl-c1">3.</span>]);
P3hrep <span class="pl-k">=</span> <span class="pl-c1">HPolytope</span>(<span class="pl-c1">tosimplehrep</span>(P3vrep)<span class="pl-k">...</span>)

V <span class="pl-k">=</span> [ <span class="pl-k">-</span><span class="pl-c1">1.7</span> <span class="pl-k">-</span><span class="pl-c1">0.4</span>; <span class="pl-k">-</span><span class="pl-c1">0.4</span>  <span class="pl-c1">0.7</span>; <span class="pl-c1">1.2</span> <span class="pl-k">-</span><span class="pl-c1">0.8</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.8</span>; <span class="pl-c1">1.3</span> <span class="pl-c1">0.9</span>; <span class="pl-k">-</span><span class="pl-c1">0.3</span> <span class="pl-c1">0.6</span>];
P4 <span class="pl-k">=</span> <span class="pl-c1">VPolytope</span>(V<span class="pl-k">'</span>);
[<span class="pl-c1">0.</span>, <span class="pl-c1">0.</span>] <span class="pl-k">∈</span> P4
[<span class="pl-c1">3.</span>, <span class="pl-c1">0.</span>] <span class="pl-k">∈</span> P4

P5 <span class="pl-k">=</span> <span class="pl-c1">VPolytope</span>([ <span class="pl-c1">1.8</span>  <span class="pl-k">-</span><span class="pl-c1">4.8</span>; <span class="pl-k">-</span><span class="pl-c1">7.2</span> <span class="pl-k">-</span><span class="pl-c1">3.4</span>; <span class="pl-k">-</span><span class="pl-c1">4.2</span> <span class="pl-c1">1.2</span>; <span class="pl-c1">5.8</span>  <span class="pl-c1">2.7</span>]');
<span class="pl-c1">chebyshev_center</span>(P5)</pre></div>
<h4><a id="user-content-maximum-control-invariant-sets" class="anchor" aria-hidden="true" href="#maximum-control-invariant-sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Maximum Control Invariant Sets</h4>
<p>Matlab and MPT:</p>
<div class="highlight highlight-source-python position-relative" data-snippet-clipboard-copy-content="% computes a control invariant set for LTI system x^+ = A*x+B*u
system = LTISystem('A', [1 1; 0 0.9], 'B', [1; 0.5]);
system.x.min = [-5; -5];
system.x.max = [5; 5];
system.u.min = -1;
system.u.max = 1;
InvSet = system.invariantSet()
InvSet.plot()
"><pre><span class="pl-c1">%</span> <span class="pl-s1">computes</span> <span class="pl-s1">a</span> <span class="pl-s1">control</span> <span class="pl-s1">invariant</span> <span class="pl-s1">set</span> <span class="pl-k">for</span> <span class="pl-v">LTI</span> <span class="pl-s1">system</span> <span class="pl-s1">x</span><span class="pl-c1">^</span><span class="pl-c1">+</span> <span class="pl-c1">=</span> <span class="pl-v">A</span><span class="pl-c1">*</span><span class="pl-s1">x</span><span class="pl-c1">+</span><span class="pl-v">B</span><span class="pl-c1">*</span><span class="pl-s1">u</span>
<span class="pl-s1">system</span> <span class="pl-c1">=</span> <span class="pl-v">LTISystem</span>(<span class="pl-s">'A'</span>, [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.9</span>], <span class="pl-s">'B'</span>, [<span class="pl-c1">1</span>; <span class="pl-c1">0.5</span>]);
<span class="pl-s1">system</span>.<span class="pl-s1">x</span>.<span class="pl-s1">min</span> <span class="pl-c1">=</span> [<span class="pl-c1">-</span><span class="pl-c1">5</span>; <span class="pl-c1">-</span><span class="pl-c1">5</span>];
<span class="pl-s1">system</span>.<span class="pl-s1">x</span>.<span class="pl-s1">max</span> <span class="pl-c1">=</span> [<span class="pl-c1">5</span>; <span class="pl-c1">5</span>];
<span class="pl-s1">system</span>.<span class="pl-s1">u</span>.<span class="pl-s1">min</span> <span class="pl-c1">=</span> <span class="pl-c1">-</span><span class="pl-c1">1</span>;
<span class="pl-s1">system</span>.<span class="pl-s1">u</span>.<span class="pl-s1">max</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span>;
<span class="pl-v">InvSet</span> <span class="pl-c1">=</span> <span class="pl-s1">system</span>.<span class="pl-en">invariantSet</span>()
<span class="pl-v">InvSet</span>.<span class="pl-en">plot</span>()</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href=""><img alt="Picture" style="max-width:100%;"></a>
Julia:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using InvariantSets, Polyhedra, CDDLib
using MathematicalSystems
using Plots
A = [1 1; 0 0.9]
B = [1; 0.5]
X = Hyperrectangle(low=[-5, -5], high=[5, 5])
U = Hyperrectangle(low=[-1], high=[1])
system = @system x⁺ = A*x + B*u x∈X u∈U
InvSet = maximum_control_invariant_set(system)
plot(InvSet)
"><pre><span class="pl-k">using</span> InvariantSets, Polyhedra, CDDLib
<span class="pl-k">using</span> MathematicalSystems
<span class="pl-k">using</span> Plots
A <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">0.9</span>]
B <span class="pl-k">=</span> [<span class="pl-c1">1</span>; <span class="pl-c1">0.5</span>]
X <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>], high<span class="pl-k">=</span>[<span class="pl-c1">5</span>, <span class="pl-c1">5</span>])
U <span class="pl-k">=</span> <span class="pl-c1">Hyperrectangle</span>(low<span class="pl-k">=</span>[<span class="pl-k">-</span><span class="pl-c1">1</span>], high<span class="pl-k">=</span>[<span class="pl-c1">1</span>])
system <span class="pl-k">=</span> <span class="pl-c1">@system</span> x⁺ <span class="pl-k">=</span> A<span class="pl-k">*</span>x <span class="pl-k">+</span> B<span class="pl-k">*</span>u x<span class="pl-k">∈</span>X u<span class="pl-k">∈</span>U
InvSet <span class="pl-k">=</span> <span class="pl-c1">maximum_control_invariant_set</span>(system)
<span class="pl-c1">plot</span>(InvSet)</pre></div>
</article></div>