<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-vptrees" class="anchor" aria-hidden="true" href="#vptrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>VPTrees</h1>
<p><a href="https://travis-ci.com/JuliaNeighbors/VPTrees.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/595a962749965b7419de67970e46161fbaf33916/68747470733a2f2f7472617669732d63692e636f6d2f4a756c69614e65696768626f72732f565054726565732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaNeighbors/VPTrees.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaNeighbors/VPTrees.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/64cc618e873357d4f5c9450c2b86775ce7ad39a6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614e65696768626f72732f565054726565732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaNeighbors/VPTrees.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Implementation of Vantage Point Trees in Julia.
A Vantage Point Tree is a metric tree which can be used for nearest neighbor or radius searches in any metric space.
See <a href="http://web.cs.iastate.edu/~honavar/nndatastructures.pdf" rel="nofollow">Data structures and algorithms for nearest neighbor search in general metric spaces</a>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example:</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> VPTrees
<span class="pl-k">using</span> StringDistances

data <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>bla<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>blub<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>asdf<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>:assd<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ast<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>baube<span class="pl-pds">"</span></span>]
vptree <span class="pl-k">=</span> <span class="pl-c1">VPTree</span>(data, <span class="pl-c1">Levenshtein</span>()))
query <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>blau<span class="pl-pds">"</span></span>
radius <span class="pl-k">=</span> <span class="pl-c1">2</span>
data[<span class="pl-c1">find</span>(vptree, query, radius)]
<span class="pl-c"><span class="pl-c">#</span> 2-element Array{String,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  "bla" </span>
<span class="pl-c"><span class="pl-c">#</span>  "blub"</span>
n_neighbors <span class="pl-k">=</span> <span class="pl-c1">3</span>
data[<span class="pl-c1">find_nearest</span>(vptree, query, n_neighbors)]
<span class="pl-c"><span class="pl-c">#</span> 3-element Array{String,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  "baube"</span>
<span class="pl-c"><span class="pl-c">#</span>  "blub" </span>
<span class="pl-c"><span class="pl-c">#</span>  "bla"</span></pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related Packages</h2>
<p>The following packages implement other data structures for use in nearest neighbor and radius search in metric space:</p>
<ul>
<li><a href="https://github.com/zgornel/BKTrees.jl">BKTrees.jl</a></li>
<li><a href="https://github.com/KristofferC/NearestNeighbors.jl">NearestNeighbors.jl</a> implementing Ball Trees</li>
</ul>
</article></div>