<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bgzfstreams" class="anchor" aria-hidden="true" href="#bgzfstreams"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BGZFStreams</h1>
<p><a href="https://travis-ci.org/BioJulia/BGZFStreams.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e47fb22f7ccb24fa2fb17a0e472141c3d34a39fb/68747470733a2f2f7472617669732d63692e6f72672f42696f4a756c69612f42475a4653747265616d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/BioJulia/BGZFStreams.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/BioJulia/BGZFStreams.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d074eadf178d814db2a816881ce03be29c31bcd9/687474703a2f2f636f6465636f762e696f2f6769746875622f42696f4a756c69612f42475a4653747265616d732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/BioJulia/BGZFStreams.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>BGZF is a compression format that supports random access using <em>virtual file offsets</em>.</p>
<p>See the SAM/BAM file format specs for the details of BGZF: <a href="https://samtools.github.io/hts-specs/SAMv1.pdf" rel="nofollow">https://samtools.github.io/hts-specs/SAMv1.pdf</a>.</p>
<h2><a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Synopsis</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> BGZFStreams

<span class="pl-c"><span class="pl-c">#</span> The first argument is a filename or an IO object (e.g. IOStream).</span>
stream <span class="pl-k">=</span> <span class="pl-c1">BGZFStream</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bgz<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> BGZFStream is a subtype of IO and works like a usual IO object.</span>
<span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(stream)
    byte <span class="pl-k">=</span> <span class="pl-c1">read</span>(stream, UInt8)
    <span class="pl-c"><span class="pl-c">#</span> do something...</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> BGZFStream is also seekable with a VirtualOffset.</span>
<span class="pl-c1">seek</span>(stream, <span class="pl-c1">VirtualOffset</span>(<span class="pl-c1">0</span>, <span class="pl-c1">2</span>))

<span class="pl-c"><span class="pl-c">#</span> The current virtual file offset is available.</span>
<span class="pl-c1">virtualoffset</span>(stream)

<span class="pl-c1">close</span>(stream)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The BGZFStreams.jl package exports three types and a function to the package user:</p>
<ul>
<li>Types:
<ul>
<li><code>BGZFStream</code>: an <code>IO</code> stream of the BGZF file format</li>
<li><code>VirtualOffset</code>: data offset in a BGZF file</li>
<li><code>BGZFDataError</code>: an error type thrown when reading a malformed byte stream</li>
</ul>
</li>
<li>Function:
<ul>
<li><code>virtualoffset(stream)</code>: returns the current virtual file offset of <code>stream</code></li>
</ul>
</li>
</ul>
<p>The <code>BGZFStream</code> type wraps an underlying <code>IO</code> object and transparently inflate
(for reading) or deflate (for writing) data. Since it is a subtype of <code>IO</code>, an
instance of it behaves like other <code>IO</code> objects, but the <code>seek</code> method takes a
virtual offset instead of a normal file offset as its second argument.</p>
<p>The <code>VirtualOffset</code> type represents a 64-bit virtual file offset as described in
the specification of the SAM file format. That is, the most significant 48-bit
integer of a virtual offset is a byte offset to the BGZF file to the beginning
position of a BGZF block and the least significant 16-bit integer is a byte
offset to the uncompressed byte(s).</p>
<p>The <code>BGZFDataError</code> type is a subtype of <code>Exception</code> and used to throw an
exception when invalid data are read.</p>
<p>The <code>virtualoffset(stream::BGZFStream)</code> returns the current virtual file offset.
More specifically, it returns the virtual offset of the next reading byte while
reading and the next writing byte while writing.</p>
<h2><a id="user-content-parallel-processing" class="anchor" aria-hidden="true" href="#parallel-processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel Processing</h2>
<p>A major bottleneck of processing a BGZF file is the inflation and deflation
process. The throughput of reading data is ~100 MiB/s, which is quite slower
than that of raw reading from a file. In order to alleviate this problem, this
package supports parallelized inflation when reading compressed data. This
requires the support of multi-threading introduced in Julia 0.5. The
<code>JULIA_NUM_THREADS</code> environmental variable sets the number of threads used for
processing.</p>
<pre><code>bash-3.2$ JULIA_NUM_THREADS=2 julia -q
julia&gt; using Base.Threads

julia&gt; nthreads()
2
</code></pre>
</article></div>