<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bolt" class="anchor" aria-hidden="true" href="#bolt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Bolt</h1>

<p><a href="https://xzackli.github.io/Bolt.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/xzackli/Bolt.jl/actions"><img src="https://github.com/xzackli/Bolt.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/xzackli/Bolt.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f6fdf8b00a0caf2e3adad8137f1c4d7f980128ab03c2f30107b1f0763966f088/68747470733a2f2f636f6465636f762e696f2f67682f787a61636b6c692f426f6c742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4e446a3968764f556b4e" alt="codecov" data-canonical-src="https://codecov.io/gh/xzackli/Bolt.jl/branch/main/graph/badge.svg?token=NDj9hvOUkN" style="max-width:100%;"></a></p>
<p><g-emoji class="g-emoji" alias="zap" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png">⚡</g-emoji> Bolt is a pure-Julia integrator for the Boltzmann equations in cosmology. It can accurately compute the gradient of the CMB power spectrum, with respect to cosmological parameters, using forward-mode automatic differentiation.</p>
<p>It needs a fair bit more physics before it can be applied to modern data. There are some examples showing accurate reproduction of some figures in <code>examples/</code>.</p>
<p>I haven't spent any time optimizing Bolt for performance yet, and in particular the naively implemented source function integrations currently dominate the spectrum cost.</p>
<p align="center">
<a target="_blank" rel="noopener noreferrer" href="docs/assets/example_spectrum.png"><img width="80%" src="docs/assets/example_spectrum.png" style="max-width:100%;"></a>
</p>
<p><em>A CMB temperature power spectrum and gradient from Bolt.jl.</em></p>
<h2><a id="user-content-example--performance" class="anchor" aria-hidden="true" href="#example--performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example / Performance</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Bolt
using ForwardDiff

# Cₗ₌₁₀₀ function of baryon density
function cl100(Ω_b::DT) where DT
    par = CosmoParams{DT}(Ω_b=Ω_b)
    bg = Background(par)
    ih = IonizationHistory(Peebles(), par, bg)
    k_grid = quadratic_k(0.1bg.H₀, 1000bg.H₀, 100)
    sf = source_grid(par, bg, ih, k_grid, BasicNewtonian())
    return cltt(100, par, bg, ih, sf)
end

Δ = 1e-3
print(&quot;Result Comparison: &quot;,
    (cl100(0.046 + Δ) - cl100(0.046 - Δ)) / 2Δ, &quot; &quot;,
    ForwardDiff.derivative(cl100, 0.046), &quot;\n&quot;)

using BenchmarkTools
print(&quot;Simple Finite Difference:\n&quot;)
@btime (cl100(0.046 + Δ) - cl100(0.046 - Δ)) / 2Δ
print(&quot;ForwardDiff:\n&quot;)
@btime ForwardDiff.derivative(cl100, 0.046)
"><pre><span class="pl-k">using</span> Bolt
<span class="pl-k">using</span> ForwardDiff

<span class="pl-c"><span class="pl-c">#</span> Cₗ₌₁₀₀ function of baryon density</span>
<span class="pl-k">function</span> <span class="pl-en">cl100</span>(Ω_b<span class="pl-k">::</span><span class="pl-c1">DT</span>) <span class="pl-k">where</span> DT
    par <span class="pl-k">=</span> <span class="pl-c1">CosmoParams</span><span class="pl-c1">{DT}</span>(Ω_b<span class="pl-k">=</span>Ω_b)
    bg <span class="pl-k">=</span> <span class="pl-c1">Background</span>(par)
    ih <span class="pl-k">=</span> <span class="pl-c1">IonizationHistory</span>(<span class="pl-c1">Peebles</span>(), par, bg)
    k_grid <span class="pl-k">=</span> <span class="pl-c1">quadratic_k</span>(<span class="pl-c1">0.1</span>bg<span class="pl-k">.</span>H₀, <span class="pl-c1">1000</span>bg<span class="pl-k">.</span>H₀, <span class="pl-c1">100</span>)
    sf <span class="pl-k">=</span> <span class="pl-c1">source_grid</span>(par, bg, ih, k_grid, <span class="pl-c1">BasicNewtonian</span>())
    <span class="pl-k">return</span> <span class="pl-c1">cltt</span>(<span class="pl-c1">100</span>, par, bg, ih, sf)
<span class="pl-k">end</span>

Δ <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Result Comparison: <span class="pl-pds">"</span></span>,
    (<span class="pl-c1">cl100</span>(<span class="pl-c1">0.046</span> <span class="pl-k">+</span> Δ) <span class="pl-k">-</span> <span class="pl-c1">cl100</span>(<span class="pl-c1">0.046</span> <span class="pl-k">-</span> Δ)) <span class="pl-k">/</span> <span class="pl-c1">2</span>Δ, <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>,
    ForwardDiff<span class="pl-k">.</span><span class="pl-c1">derivative</span>(cl100, <span class="pl-c1">0.046</span>), <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> BenchmarkTools
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Simple Finite Difference:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">@btime</span> (<span class="pl-c1">cl100</span>(<span class="pl-c1">0.046</span> <span class="pl-k">+</span> Δ) <span class="pl-k">-</span> <span class="pl-c1">cl100</span>(<span class="pl-c1">0.046</span> <span class="pl-k">-</span> Δ)) <span class="pl-k">/</span> <span class="pl-c1">2</span>Δ
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>ForwardDiff:<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">@btime</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">derivative</span>(cl100, <span class="pl-c1">0.046</span>)</pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Result Comparison: 0.00012423928229756477 0.00012423371182564182

Simple Finite Difference:
  13.539 s (26365268 allocations: 2.52 GiB)
ForwardDiff:
  11.160 s (29920717 allocations: 4.97 GiB)
"><pre><code>Result Comparison: 0.00012423928229756477 0.00012423371182564182

Simple Finite Difference:
  13.539 s (26365268 allocations: 2.52 GiB)
ForwardDiff:
  11.160 s (29920717 allocations: 4.97 GiB)
</code></pre></div>
</article></div>