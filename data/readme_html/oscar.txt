<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-oscarjl" class="anchor" aria-hidden="true" href="#oscarjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Oscar.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://oscar-system.github.io/Oscar.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://oscar-system.github.io/Oscar.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.com/oscar-system/Oscar.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e6aa19b2e78984971f5e3009c7031a4a74402176/68747470733a2f2f7472617669732d63692e636f6d2f6f736361722d73797374656d2f4f736361722e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.com/oscar-system/Oscar.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://codecov.io/gh/oscar-system/Oscar.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1088e722aef624d248a6ed43c2843d41afbd1a32/68747470733a2f2f636f6465636f762e696f2f67682f6f736361722d73797374656d2f4f736361722e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/oscar-system/Oscar.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p>Welcome to the OSCAR project, a visionary new computer algebra system
which combines the capabilities of four cornerstone systems: GAP,
Polymake, Antic and Singular.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>OSCAR requires Julia 1.3 or newer. In principle it can be installed and used
like any other Julia package; doing so will take a couple of minutes:</p>
<pre><code>julia&gt; using Pkg
julia&gt; Pkg.add("Oscar")
julia&gt; using Oscar
</code></pre>
<p>However, some of Oscar's components have additional requirements.
For more detailed information, please consult the <a href="https://oscar.computeralgebra.de/install/" rel="nofollow">installation
instructions</a> on our website.</p>
<h2><a id="user-content-examples-of-usage" class="anchor" aria-hidden="true" href="#examples-of-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples of usage</h2>
<pre><code>julia&gt; using Oscar
...
 -----    -----    -----      -      -----   
|     |  |     |  |     |    | |    |     |  
|     |  |        |         |   |   |     |  
|     |   -----   |        |     |  |-----   
|     |        |  |        |-----|  |   |    
|     |  |     |  |     |  |     |  |    |   
 -----    -----    -----   -     -  -     -  

...combining (and extending) GAP, Hecke, Nemo, Polymake and Singular
Version 0.2.0 ... 
 ... which comes with absolutely no warranty whatsoever
Type: '?Oscar' for more information
(c) 2019-2020 by The Oscar Development Team


julia&gt; k, a = quadratic_field(-5)
(Number field over Rational Field with defining polynomial x^2+5, sqrt(-5))

julia&gt; zk = maximal_order(k)
Maximal order of Number field over Rational Field with defining polynomial x^2+5
with basis nf_elem[1, sqrt(-5)]

julia&gt; factorisations(zk(6))
2-element Array{Fac{NfAbsOrdElem{AnticNumberField,nf_elem}},1}:
 -1 * (2) * (-3)
 -1 * (sqrt(-5)+1) * (sqrt(-5)-1)

julia&gt; Qx, x = PolynomialRing(QQ, :x=&gt;1:2)
(Multivariate Polynomial Ring in x1, x2 over Rational Field, fmpq_mpoly[x1, x2])

julia&gt; R = grade(Qx, [1,2])
Multivariate Polynomial Ring in x1, x2 over Rational Field graded by 
        x1 -&gt; [1]
        x2 -&gt; [2]

julia&gt; f = R(x[1]^2+x[2])
x1^2 + x2
julia&gt; degree(f)
graded by [2]

julia&gt; F = FreeModule(R, 1)
Free module of rank 1 over R, graded as R^1([0])

julia&gt; s = sub(F, [f*F[1]])
Subquotient by Array of length 1
1 -&gt; (x1^2 + x2)*e[1]

a&gt; mH(H[1])
Map with following data
Domain:
=======
s
Codomain:
=========
Subquotient of Array of length 1
1 -&gt; (1)*e[1]
 by Array of length 1
1 -&gt; (x1^2 + x2)*e[1]
defined on the Singular side

julia&gt; H, mH = hom(s, quo(F, s))
(hom of (s, Subquotient of Array of length 1
1 -&gt; (1)*e[1]
 by Array of length 1
1 -&gt; (x1^2 + x2)*e[1]
defined on the Singular side

), Map from
H to Set of all homomorphisms from Subquotient by Array of length 1
1 -&gt; (x1^2 + x2)*e[1]
defined on the Singular side

 to Subquotient of Array of length 1
1 -&gt; (1)*e[1]
 by Array of length 1
1 -&gt; (x1^2 + x2)*e[1]
defined on the Singular side

 defined by a julia-function with inverse
)

julia&gt; D = decoration(H)
GrpAb: Z

julia&gt; homogenous_component(H, D[0])
(H_[0] of dim 2, Map from
H_[0] of dim 2 to H defined by a julia-function with inverse
)
</code></pre>
<p>Of course, the cornerstones are also available directly:</p>
<pre><code>julia&gt; C = Polymake.polytope.cube(3);

julia&gt; C.F_VECTOR
pm::Vector&lt;pm::Integer&gt;
8 12 6

julia&gt; RP2 = Polymake.topaz.real_projective_plane();

julia&gt; RP2.HOMOLOGY
PropertyValue wrapping pm::Array&lt;polymake::topaz::HomologyGroup&lt;pm::Integer&gt;&gt;
({} 0)
({(2 1)} 0)
({} 0)

</code></pre>
<h2><a id="user-content-funding" class="anchor" aria-hidden="true" href="#funding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Funding</h2>
<p>The development of this Julia package is supported by the Deutsche
Forschungsgemeinschaft DFG within the
<a href="https://www.computeralgebra.de/sfb/" rel="nofollow">Collaborative Research Center TRR 195</a>.</p>
</article></div>