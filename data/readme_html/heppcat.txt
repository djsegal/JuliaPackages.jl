<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-heppcat-heteroscedastic-probabilistic-pca-technique" class="anchor" aria-hidden="true" href="#heppcat-heteroscedastic-probabilistic-pca-technique"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HePPCAT: HEteroscedastic Probabilistic PCA Technique</h1>
<p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://github.com/dahong67/HePPCAT.jl/actions"><img src="https://github.com/dahong67/HePPCAT.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/dahong67/HePPCAT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/49f11b966a3b3212da0572aebb3b517507ecb6444a6bf66fece7d1132616726f/68747470733a2f2f636f6465636f762e696f2f67682f6461686f6e6736372f486550504341542e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/dahong67/HePPCAT.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<blockquote>
<p><g-emoji class="g-emoji" alias="wave" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png">ðŸ‘‹</g-emoji> <em>This package provides research code and work is ongoing.
If you are interested in using it in your own research,
<strong>I'd love to hear from you and collaborate!</strong>
Feel free to write: <a href="mailto:dahong67@wharton.upenn.edu">dahong67@wharton.upenn.edu</a></em></p>
</blockquote>
<p>Please cite the following paper for this technique:</p>
<blockquote>
<p>David Hong, Kyle Gilman, Laura Balzano, Jeffrey A. Fessler.
"HePPCAT: Probabilistic PCA for Data with Heteroscedastic Noise", 2021.
<a href="https://arxiv.org/abs/2101.03468" rel="nofollow">https://arxiv.org/abs/2101.03468</a>.</p>
</blockquote>
<p>In BibTeX form:</p>
<div class="highlight highlight-text-bibtex position-relative" data-snippet-clipboard-copy-content="@misc{hgbf2021heppcat,
  title  = &quot;HePPCAT: Probabilistic PCA for Data with Heteroscedastic Noise&quot;, 
  author = &quot;David Hong and Kyle Gilman and Laura Balzano and Jeffrey A. Fessler&quot;,
  year   = 2021,
  url    = &quot;https://arxiv.org/abs/2101.03468&quot;,
}
"><pre><span class="pl-k">@misc</span>{<span class="pl-en">hgbf2021heppcat</span>,
  <span class="pl-s">title</span>  = <span class="pl-s"><span class="pl-pds">"</span>HePPCAT: Probabilistic PCA for Data with Heteroscedastic Noise<span class="pl-pds">"</span></span>, 
  <span class="pl-s">author</span> = <span class="pl-s"><span class="pl-pds">"</span>David Hong and Kyle Gilman and Laura Balzano and Jeffrey A. Fessler<span class="pl-pds">"</span></span>,
  <span class="pl-s">year</span>   = <span class="pl-c1">2021</span>,
  <span class="pl-s">url</span>    = <span class="pl-s"><span class="pl-pds">"</span>https://arxiv.org/abs/2101.03468<span class="pl-pds">"</span></span>,
}</pre></div>
<h2><a id="user-content-what-is-heteroscedastic-probabilistic-pca-heppcat" class="anchor" aria-hidden="true" href="#what-is-heteroscedastic-probabilistic-pca-heppcat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What is Heteroscedastic Probabilistic PCA (HePPCAT)?</h2>
<p><strong>HePPCAT</strong> is a probabilistic <strong>Principal Component Analysis (PCA)</strong> technique
<strong>for data that has samples with heterogeneous quality</strong>,
i.e., noise that is <em><a href="https://en.wikipedia.org/wiki/Heteroscedasticity" rel="nofollow">heteroscedastic</a> across samples</em>.</p>
<p><strong>Illustration:</strong>
data points
with a group of <em>noisier samples</em> (blue points)
and a group of <em>cleaner samples</em> (green points).</p>
<p><a target="_blank" rel="noopener noreferrer" href="demo/illustration-2D.png"><img src="demo/illustration-2D.png" alt="2D illustration" style="max-width:100%;"></a></p>
<p>Homoscedastic PPCA estimates <em>only one</em> noise variance for the whole data,
and treats samples as though they were all equally noisy.
Recovery of latent components can degrade a lot due to the noisier samples,
even though the rest of the samples are relatively clean.</p>
<p><strong>HePPCAT estimates latent components along with <em>separate</em> noise variances for each group.
It accounts for heterogeneous quality among the samples and is generally more robust.</strong></p>
<p><em>It's not just a <a href="https://en.wiktionary.org/wiki/hepcat" rel="nofollow">"cool cat"</a>!</em></p>
<h2><a id="user-content-quick-start-how-to-use-heppcat" class="anchor" aria-hidden="true" href="#quick-start-how-to-use-heppcat"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Quick start: how to use HePPCAT</h2>
<p><strong>Installation:</strong>
this package  can be installed
via the <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/" rel="nofollow">package manager</a>.</p>

<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(@v1.5) pkg&gt; add https://github.com/dahong67/HePPCAT.jl
"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>dahong67<span class="pl-k">/</span>HePPCAT<span class="pl-k">.</span>jl</pre></div>
<p><strong>Main function:</strong>
the main function is called <code>heppcat</code>.
Type <code>?heppcat</code> for the <a href="https://docs.julialang.org/en/v1/manual/documentation/#Accessing-Documentation" rel="nofollow">docstring</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="help?&gt; heppcat
search: heppcat HePPCAT HePPCATModel

  heppcat(Y,k,iters;init=homppca(Y,k))

  Estimate probabilistic PCA model for noise that is heteroscedastic across samples.

  Inputs are:

    â€¢    Y : list of matrices (each column is a sample)

    â€¢    k : number of factors

    â€¢    iters : number of iterations to run

    â€¢    init : initial model (will be modified in-place)

  Output is a HePPCATModel object.
"><pre>help?<span class="pl-k">&gt;</span> heppcat
search<span class="pl-k">:</span> heppcat HePPCAT HePPCATModel

  <span class="pl-c1">heppcat</span>(Y,k,iters;init<span class="pl-k">=</span><span class="pl-c1">homppca</span>(Y,k))

  Estimate probabilistic PCA model <span class="pl-k">for</span> noise that is heteroscedastic across samples.

  Inputs are<span class="pl-k">:</span>

    â€¢    Y <span class="pl-k">:</span> list of matrices (each column is a sample)

    â€¢    k <span class="pl-k">:</span> number of factors

    â€¢    iters <span class="pl-k">:</span> number of iterations to run

    â€¢    init <span class="pl-k">:</span> initial model (will be modified in<span class="pl-k">-</span>place)

  Output is a HePPCATModel object.</pre></div>
<p>It returns a <code>HePPCATModel</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="help?&gt; HePPCATModel
search: HePPCATModel

  HePPCATModel{S&lt;:Number,T&lt;:Real}

  Model parameters for probabilistic PCA with noise that is heteroscedastic across samples.
  This is the return type of heppcat(_), the corresponding estimation function.

  Properties
  â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡

    â€¢    F  :: Matrix factor matrix (computed via F = U*sqrt(Diagonal(Î»))*Vt)

    â€¢    U  :: Matrix{S} eigenvectors of factor covariance F*F'

    â€¢    Î»  :: Vector{T} eigenvalues of factor covariance F*F' (spike eigenvalues)

    â€¢    Vt :: Matrix{S} (transposed) eigenvectors of F'*F (i.e., right singular vectors of F)

    â€¢    v  :: Vector{T} noise variances
"><pre>help?<span class="pl-k">&gt;</span> HePPCATModel
search<span class="pl-k">:</span> HePPCATModel

  HePPCATModel{S<span class="pl-k">&lt;:</span><span class="pl-c1">Number</span>,T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>}

  Model parameters <span class="pl-k">for</span> probabilistic PCA with noise that is heteroscedastic across samples.
  This is the <span class="pl-k">return</span> type of <span class="pl-c1">heppcat</span>(_), the corresponding estimation <span class="pl-k">function</span>.

  Properties
  <span class="pl-k">â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡â‰¡</span>

    â€¢    F  <span class="pl-k">::</span> <span class="pl-c1">Matrix</span> factor matrix (computed via F <span class="pl-k">=</span> U<span class="pl-k">*</span><span class="pl-c1">sqrt</span>(<span class="pl-c1">Diagonal</span>(Î»))<span class="pl-k">*</span>Vt)

    â€¢    U  <span class="pl-k">::</span> <span class="pl-c1">Matrix{S}</span> eigenvectors of factor covariance F<span class="pl-k">*</span>F<span class="pl-k">'</span>

    â€¢    Î»  <span class="pl-k">::</span> <span class="pl-c1">Vector{T}</span> eigenvalues of factor covariance F<span class="pl-k">*</span>F<span class="pl-k">'</span> (spike eigenvalues)

    â€¢    Vt <span class="pl-k">::</span> <span class="pl-c1">Matrix{S}</span> (transposed) eigenvectors of F<span class="pl-k">'</span><span class="pl-k">*</span>F (i<span class="pl-k">.</span>e., right singular vectors of F)

    â€¢    v  <span class="pl-k">::</span> <span class="pl-c1">Vector{T}</span> noise variances</pre></div>
<p>See the <code>demo/</code> directory and the <a href="https://gitlab.com/dahong/heteroscedastic-probabilistic-pca" rel="nofollow">paper code repo</a> for some examples!</p>
</article></div>