<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-randombooleanmatrices" class="anchor" aria-hidden="true" href="#randombooleanmatrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RandomBooleanMatrices</h1>
<p dir="auto"><a href="https://travis-ci.org/EcoJulia/RandomBooleanMatrices.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/92b2b71d4dd3d4960c6c6945ddd7ce1763a506d75460c760b31a1735bd7b0454/68747470733a2f2f7472617669732d63692e6f72672f45636f4a756c69612f52616e646f6d426f6f6c65616e4d617472696365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/EcoJulia/RandomBooleanMatrices.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-work-in-progress-for-a-scientific-publication" class="anchor" aria-hidden="true" href="#work-in-progress-for-a-scientific-publication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Work In Progress for a scientific publication</h3>
<p dir="auto">Create random boolean matrices that maintain row and column sums. This is a very
common use case for null models in ecology.</p>
<p dir="auto">The package offers the newest and most efficient unbiased algorithms for generating
random matrices. Legacy approaches have used different forms of swapping, or some
alternative approaches like the <code>quasiswap</code> algorithm in R's vegan package. These
methods are neither efficient, nor are they guaranteed to sample the possible
distribution of boolean vectors with a given row and column sum equally.</p>
<p dir="auto">Currently, the package only offers an implementation of the <code>curveball</code> algorithm
of Strona et al. (2014). There are two forms: a <code>randomize_matrix!</code> function
that will randomize a sparse boolean <code>Matrix</code> in-place, and a generator form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SparseArrays, RandomBooleanMatrices

# in-place
m = sprand(Bool, 1000, 1000, 0.1)
randomize_matrix!(m)

# using a Matrix generator object
m = sprand(Bool, 1000, 1000, 0.1)
rmg = matrixrandomizer(m)
m1 = rand(rmg) # creates a new random matrix
m2 = rand(rmg)

# You can also avoid copying by
m3 = rand!(rmg)
# but notice that this will not create a new copy of the Matrix, so generating multiple matrices at once with this is impossible"><pre><span class="pl-k">using</span> SparseArrays, RandomBooleanMatrices

<span class="pl-c"><span class="pl-c">#</span> in-place</span>
m <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(Bool, <span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">0.1</span>)
<span class="pl-c1">randomize_matrix!</span>(m)

<span class="pl-c"><span class="pl-c">#</span> using a Matrix generator object</span>
m <span class="pl-k">=</span> <span class="pl-c1">sprand</span>(Bool, <span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>, <span class="pl-c1">0.1</span>)
rmg <span class="pl-k">=</span> <span class="pl-c1">matrixrandomizer</span>(m)
m1 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(rmg) <span class="pl-c"><span class="pl-c">#</span> creates a new random matrix</span>
m2 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(rmg)

<span class="pl-c"><span class="pl-c">#</span> You can also avoid copying by</span>
m3 <span class="pl-k">=</span> <span class="pl-c1">rand!</span>(rmg)
<span class="pl-c"><span class="pl-c">#</span> but notice that this will not create a new copy of the Matrix, so generating multiple matrices at once with this is impossible</span></pre></div>
<h3 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h3>
<p dir="auto">Strona, G., Nappo, D., Boccacci, F., Fattorini, S. &amp; San-Miguel-Ayanz, J. (2014)
A fast and unbiased procedure to randomize ecological binary matrices with fixed row and column totals.
Nature Communications, 5, 4114.</p>
</article></div>