<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-semiringalgebrajl" class="anchor" aria-hidden="true" href="#semiringalgebrajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SemiringAlgebra.jl</h1>
<p>The <code>doc/</code> directory includes a paper <a href="https://dspace.mit.edu/openaccess-disseminate/1721.1/115964" rel="nofollow">Novel Algebras for Advanced Analytics in Julia</a>, which describes the motivation for this package and its design.</p>
<p>Example usage, see the <a href="https://github.com/JuliaComputing/SemiringAlgebra.jl/blob/af67f6705bc531a85c61bc4e270be90fb8a54b24/src/SemiringAlgebra.jl#L37">bench()</a> function in SemringAlgebra.jl.</p>
<pre><code>julia&gt; using SemiringAlgebra

100x100 Float64 array
  0.000345 seconds (2 allocations: 78.203 KiB)
100x100 MPNumber{Float64} array
  0.002951 seconds (8 allocations: 78.531 KiB)

100x100 Int64 array
  0.000643 seconds (8 allocations: 78.531 KiB)
100x100 MPNumber{Int64} array
  0.000465 seconds (8 allocations: 78.531 KiB)

100x100 sparse Float64 array (dense array in sparse format)
  0.116772 seconds (198.15 k allocations: 9.675 MiB)
100x100 sparse MPNumber{Float64} array (dense array in sparse format)
  0.102237 seconds (199.09 k allocations: 9.695 MiB)

100000x100000 sparse Float64 array (sprand(n,n,1/n))
  0.007495 seconds (20 allocations: 10.677 MiB)
100000x100000 sparse MPNumber{Float64} array (sprand(n,n,1/n))
  0.007558 seconds (20 allocations: 10.677 MiB)

100000x100000 sparse Float64 array (sprand(n,n,5/n))
  0.147927 seconds (22 allocations: 65.650 MiB, 4.86% gc time)
100000x100000 sparse MPNumber{Float64} array (sprand(n,n,5/n))
  0.146088 seconds (22 allocations: 65.650 MiB, 4.94% gc time)
</code></pre>
</article></div>