<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-randomizedpreconditioners" class="anchor" aria-hidden="true" href="#randomizedpreconditioners"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RandomizedPreconditioners</h1>
<p dir="auto"><a href="https://github.com/tjdiamandis/RandomizedPreconditioners.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/tjdiamandis/RandomizedPreconditioners.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tjdiamandis/RandomizedPreconditioners.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/05011299560696507f676c1160ad3f71ea0c97881a3306b60c4bf9ac652144e7/68747470733a2f2f636f6465636f762e696f2f67682f746a6469616d616e6469732f52616e646f6d697a6564507265636f6e646974696f6e6572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tjdiamandis/RandomizedPreconditioners.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package contains several <em>randomized preconditioners</em>, which use
randomized numerical linear algebra to construct approximate inverses of matrices.
These approximate inverses can dramatically speed up iterative linear system solvers.</p>
<h2 dir="auto"><a id="user-content-preconditioners" class="anchor" aria-hidden="true" href="#preconditioners"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Preconditioners</h2>
<h3 dir="auto"><a id="user-content-positive-definite-systems-randomized-nyström-preconditioner-1" class="anchor" aria-hidden="true" href="#positive-definite-systems-randomized-nyström-preconditioner-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Positive Definite Systems: Randomized Nyström Preconditioner [1]</h3>
<p dir="auto">Given a positive semidefinite matrix <code>A</code>, the Nyström Sketch <code>Â ≈ A</code> is constructed by</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RandomizedPreconditioners
Â = NystromSketch(A, k, r)"><pre><span class="pl-k">using</span> RandomizedPreconditioners
Â <span class="pl-k">=</span> <span class="pl-c1">NystromSketch</span>(A, k, r)</pre></div>
<p dir="auto">where <code>k</code> and <code>r</code> are parameters with <code>k ≤ r</code>.</p>
<p dir="auto">We can use <code>Â</code> to construct a preconditioner <code>P ≈ A + μ*I</code> for the system
<code>(A + μ*I)x = b</code>, which is solved by conjugate gradients.</p>
<p dir="auto">If you need <code>P</code> (e.g., <code>IterativeSolvers.jl</code>), use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="P = NystromPreconditioner(Â, μ)"><pre>P <span class="pl-k">=</span> <span class="pl-c1">NystromPreconditioner</span>(Â, μ)</pre></div>
<p dir="auto">If you need <code>P⁻¹</code> (e.g., <code>Krylov.jl</code>), use</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pinv = NystromPreconditionerInverse(Anys, μ)"><pre>Pinv <span class="pl-k">=</span> <span class="pl-c1">NystromPreconditionerInverse</span>(Anys, μ)</pre></div>
<p dir="auto">These preconditioners can be simply passed into the solvers, for example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Krylov
x, stats = cg(A+μ*I, b; M=Pinv)"><pre><span class="pl-k">using</span> Krylov
x, stats <span class="pl-k">=</span> <span class="pl-c1">cg</span>(A<span class="pl-k">+</span>μ<span class="pl-k">*</span>I, b; M<span class="pl-k">=</span>Pinv)</pre></div>
<p dir="auto">The package <a href="https://github.com/SciML/LinearSolve.jl"><code>LinearSolve.jl</code></a> defines
a convenient common interface to access all the Krylov implementations, which
makes testing very easy.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RandomizedPreconditioners, LinearSolve
Â = NystromSketch(A, k, r)
P = NystromPreconditioner(Â, μ)

prob = LinearProblem(A, b)
sol = solve(prob, IterativeSolversJL_CG(), Pl=P)"><pre><span class="pl-k">using</span> RandomizedPreconditioners, LinearSolve
Â <span class="pl-k">=</span> <span class="pl-c1">NystromSketch</span>(A, k, r)
P <span class="pl-k">=</span> <span class="pl-c1">NystromPreconditioner</span>(Â, μ)

prob <span class="pl-k">=</span> <span class="pl-c1">LinearProblem</span>(A, b)
sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob, <span class="pl-c1">IterativeSolversJL_CG</span>(), Pl<span class="pl-k">=</span>P)</pre></div>
<h2 dir="auto"><a id="user-content-sketches" class="anchor" aria-hidden="true" href="#sketches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Sketches</h2>
<p dir="auto">The sketching algorithms below use a rank <code>r</code> sketching matrix and have complexity
<code>O(n²r)</code>. The parameter <code>k ≤ r</code> truncates the sketch, which can improve numerical
performance. Possible choices include <code>k = r - 10</code> and <code>k = round(Int, 0.95*r)</code>.
Sketches allow for faster (approximate) multiplication (<code>*</code> and <code>mul!</code>) and are
used to construct preconditioners.</p>
<h3 dir="auto"><a id="user-content-positive-semidefinite-matrices-nyström-sketch-2-alg-16" class="anchor" aria-hidden="true" href="#positive-semidefinite-matrices-nyström-sketch-2-alg-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Positive Semidefinite Matrices: Nyström Sketch [2, Alg. 16]</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RandomizedPreconditioners
Â = NystromSketch(A, k, r)"><pre><span class="pl-k">using</span> RandomizedPreconditioners
Â <span class="pl-k">=</span> <span class="pl-c1">NystromSketch</span>(A, k, r)</pre></div>
<h3 dir="auto"><a id="user-content-symmetric-matrices-eigen-sketch--generalized-nyström-sketch" class="anchor" aria-hidden="true" href="#symmetric-matrices-eigen-sketch--generalized-nyström-sketch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Symmetric Matrices: Eigen Sketch / Generalized Nyström Sketch</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RandomizedPreconditioners
Â = EigenSketch(A, k, r)"><pre><span class="pl-k">using</span> RandomizedPreconditioners
Â <span class="pl-k">=</span> <span class="pl-c1">EigenSketch</span>(A, k, r)</pre></div>
<h3 dir="auto"><a id="user-content-general-matrices-randomized-svd-2-alg-8" class="anchor" aria-hidden="true" href="#general-matrices-randomized-svd-2-alg-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General Matrices: Randomized SVD [2, Alg. 8]</h3>
<p dir="auto">The Randomized SVD uses the powered randomized rangefinder [2, Alg. 9] with
powering parameter <code>q</code>. Small values of <code>q</code> (e.g., <code>5</code>) seem to perform
well. Note that the complexity increases to <code>O(n²rq)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RandomizedPreconditioners
Â = RandomizedSVD(A, k, r; q=10)"><pre><span class="pl-k">using</span> RandomizedPreconditioners
Â <span class="pl-k">=</span> <span class="pl-c1">RandomizedSVD</span>(A, k, r; q<span class="pl-k">=</span><span class="pl-c1">10</span>)</pre></div>
<h2 dir="auto"><a id="user-content-eigenvalues" class="anchor" aria-hidden="true" href="#eigenvalues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Eigenvalues</h2>
<p dir="auto">We implement two algorithms for a randomized estimate of the maximum eigenvalue
for a PSD matrix: the power method and the Lanczos method.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using RandomizedPreconditioners
const RP = RandomizedPreconditioners

λmax_power =  RP.eigmax_power(A)
λmax_lanczos = RP.eigmax_lanczos(A)
λmin_lanczos = RP.eigmin_lanczos(A)"><pre><span class="pl-k">using</span> RandomizedPreconditioners
<span class="pl-k">const</span> RP <span class="pl-k">=</span> RandomizedPreconditioners

λmax_power <span class="pl-k">=</span>  RP<span class="pl-k">.</span><span class="pl-c1">eigmax_power</span>(A)
λmax_lanczos <span class="pl-k">=</span> RP<span class="pl-k">.</span><span class="pl-c1">eigmax_lanczos</span>(A)
λmin_lanczos <span class="pl-k">=</span> RP<span class="pl-k">.</span><span class="pl-c1">eigmin_lanczos</span>(A)</pre></div>
<p dir="auto">The Lanczos method can estimate the maximum and minimum eigenvalue simultaneously:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="λmax, λmin = RP.eig_lanczos(A; eigtype=0)"><pre>λmax, λmin <span class="pl-k">=</span> RP<span class="pl-k">.</span><span class="pl-c1">eig_lanczos</span>(A; eigtype<span class="pl-k">=</span><span class="pl-c1">0</span>)</pre></div>
<h2 dir="auto"><a id="user-content-test-matrices" class="anchor" aria-hidden="true" href="#test-matrices"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test Matrices</h2>
<p dir="auto">There are several choices for the random embedding used in the algorithms.
By default, this package uses Gaussian embeddings (and Gaussian test matrices),
but it also includes the <code>SSFT</code> and the ability to add new test matrices by
implementing the <code>TestMatrix</code> interface.</p>
<p dir="auto">A <code>TestMatrix</code>, <code>Ω</code>, should implement matrix multiplication for itself and its
adjoint by implementing the <code>!mul</code> method.
See Martinsson and Tropp [2] Section 9 for more.</p>
<h2 dir="auto"><a id="user-content-roadmap" class="anchor" aria-hidden="true" href="#roadmap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roadmap</h2>
<ul dir="auto">
<li>Test Matrices
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> TestMatrix type</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Sparse maps</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Subsampled trigonometric transform</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> DCT &amp; Hartley option for SSRFT</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Tensor product maps</li>
</ul>
</li>
<li>Rangefinders
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Lanzcos randomized rangefinder</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Chebyshev randomized rangefinder</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Incremental rangefinder with updating</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Subsequent orthogonalization</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> A posteriori error estimation</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Incremental rangefinder with powering</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Incremental rangefinder for sparse matrices</li>
</ul>
</li>
<li>Sketches &amp; Factorizations
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Powering option / incorporating rangefinder into Nystrom sketch</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> powerURV (w. re-orthonormalization)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> CPQR decomposition</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Improve randomized SVD</li>
</ul>
</li>
<li>Preconditioners
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Add preconditioner for symmetric systems</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Preconditioner for least squares</li>
</ul>
</li>
<li>Performance
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Avoid redoing computations in adaptive sketch</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> General performance</li>
</ul>
</li>
<li>Documentation
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> More complete general docs</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Least squares example (sketch &amp; solve, iterative sketching, sketch &amp; precondition)</li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">[1] Zachary Frangella, Joel A Tropp, and Madeleine Udell. “Randomized Nyström Preconditioning.” In:arXiv preprint arXiv:2110.02820(2021). <a href="https://arxiv.org/abs/2110.02820" rel="nofollow">https://arxiv.org/abs/2110.02820</a></p>
<p dir="auto">[2] PG Martinsson and JA Tropp. “Randomized numerical linear algebra: foundations &amp; algorithms (2020).” In: arXiv preprint arXiv:2002.01387. <a href="https://arxiv.org/abs/2002.01387" rel="nofollow">https://arxiv.org/abs/2002.01387</a></p>
</article></div>