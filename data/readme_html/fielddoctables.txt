<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fielddoctables" class="anchor" aria-hidden="true" href="#fielddoctables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FieldDocTables</h1>
<p dir="auto"><a href="https://travis-ci.org/rafaqz/FieldDocTables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/48b28da64678ee30ae8f2cb4683b0fb23e311d619fcaff21a701f8f38f0b2384/68747470733a2f2f7472617669732d63692e6f72672f72616661717a2f4669656c64446f635461626c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rafaqz/FieldDocTables.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/rafaqz/FieldDocTables.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ebca9a5af9aeeb00567087b0be1ab279208a7c9493c2eb5fd7a254084f78aff5/687474703a2f2f636f6465636f762e696f2f6769746875622f72616661717a2f4669656c64446f635461626c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rafaqz/FieldDocTables.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">FieldDocTables uses <a href="https://github.com/JuliaDocs/DocStringExtensions.jl">DocStringExtensions.jl</a>
and <a href="https://github.com/ronisbr/PrettyTables.jl">PrettyTables.jl</a> to print field names and field
docs in a table in the docs for a type (defaults to unfenced markdown).</p>
<p dir="auto">But the main reason to use this package is to add additional columns to the
field documentation, such as from <a href="https://github.com/rafaqz/FieldMetadata.jl">FieldMetadata.jl</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FieldDocTables, FieldMetadata

import FieldMetadata: @default, default, @bounds, bounds, @description, description

# Declare the doc abbreviation for your doc table
const FIELDDOCTABLE = FieldDocTable((Description=description, Default=default, Bounds=bounds))

&quot;&quot;
The docs and metadata for this type are printed as a markdown table:
$(FIELDDOCTABLE)
&quot;&quot;&quot;
@description @bounds @default mutable struct TestStruct
   &quot;Field a docs&quot;
   a::Int     | 2   | (1, 10)     | &quot;an Int&quot;
   &quot;Field b docs&quot;
   b::Float64 | 4.0 | (2.0, 20.0) | &quot;a Float &quot;
end

help?&gt; TestStruct
search: TestStruct

  The docs and metadata for this type are printed as a markdown table:

Field Description Default      Bounds    Docs
––––– ––––––––––– ––––––– ––––––––––– –––––––
    a      an Int       2     (1, 10) Field a
    b     a Float     4.0 (2.0, 20.0) Field b"><pre><span class="pl-k">using</span> FieldDocTables, FieldMetadata

<span class="pl-k">import</span> FieldMetadata<span class="pl-k">:</span> <span class="pl-c1">@default</span>, default, <span class="pl-c1">@bounds</span>, bounds, <span class="pl-c1">@description</span>, description

<span class="pl-c"><span class="pl-c">#</span> Declare the doc abbreviation for your doc table</span>
<span class="pl-k">const</span> FIELDDOCTABLE <span class="pl-k">=</span> <span class="pl-c1">FieldDocTable</span>((Description<span class="pl-k">=</span>description, Default<span class="pl-k">=</span>default, Bounds<span class="pl-k">=</span>bounds))

<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>
The docs and metadata <span class="pl-k">for</span> this type are printed <span class="pl-k">as</span> a markdown table<span class="pl-k">:</span>
<span class="pl-k">$</span>(FIELDDOCTABLE)
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">@description @bounds @default mutable struct TestStruct</span>
<span class="pl-s">   "Field a docs"</span>
<span class="pl-s">   a::Int     | 2   | (1, 10)     | "an Int"</span>
<span class="pl-s">   "Field b docs"</span>
<span class="pl-s">   b::Float64 | 4.0 | (2.0, 20.0) | "a Float "</span>
<span class="pl-s">end</span>
<span class="pl-s"></span>
<span class="pl-s">help?&gt; TestStruct</span>
<span class="pl-s">search: TestStruct</span>
<span class="pl-s"></span>
<span class="pl-s">  The docs and metadata for this type are printed as a markdown table:</span>
<span class="pl-s"></span>
<span class="pl-s">Field Description Default      Bounds    Docs</span>
<span class="pl-s">––––– ––––––––––– ––––––– ––––––––––– –––––––</span>
<span class="pl-s">    a      an Int       2     (1, 10) Field a</span>
<span class="pl-s">    b     a Float     4.0 (2.0, 20.0) Field b</span></pre></div>
<p dir="auto">You could additionally set the truncation length for each field, or use another
table format. Table formats besides markdown should be fenced:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="const FIELDDOCTABLE = FieldDocTable((:Description=description, :Default=default, :Bounds=bounds);
                                    truncation=(100,40,70),
                                    tableformat=PrettyTableFormat(unicode_rounded),
                                    fenced=true)"><pre><span class="pl-k">const</span> FIELDDOCTABLE <span class="pl-k">=</span> <span class="pl-c1">FieldDocTable</span>((<span class="pl-c1">:Description</span><span class="pl-k">=</span>description, <span class="pl-c1">:Default</span><span class="pl-k">=</span>default, <span class="pl-c1">:Bounds</span><span class="pl-k">=</span>bounds);
                                    truncation<span class="pl-k">=</span>(<span class="pl-c1">100</span>,<span class="pl-c1">40</span>,<span class="pl-c1">70</span>),
                                    tableformat<span class="pl-k">=</span><span class="pl-c1">PrettyTableFormat</span>(unicode_rounded),
                                    fenced<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">Note that formats besides markdown will not translate to good html tables in browser documentation.</p>
<p dir="auto">Custom functions can also be passed to the field doc constructor <code>FieldDocTable()</code>. They must accept
a type argument and return a vector or tuple of the same length as the number of fields in the type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="somemethod(::Type{&lt;:TypeToDocument}) = (&quot;doc&quot;, &quot;for&quot;, &quot;each&quot;, &quot;field&quot;)"><pre><span class="pl-en">somemethod</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:TypeToDocument}</span>) <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>doc<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>for<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>each<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>field<span class="pl-pds">"</span></span>)</pre></div>
</article></div>