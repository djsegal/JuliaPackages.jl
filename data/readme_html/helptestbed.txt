<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-helptestbedjl" class="anchor" aria-hidden="true" href="#helptestbedjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HelpTestbed.jl</h1>
<p>This package is for exploring options for help in Julia.</p>
<h2><a id="user-content-updates" class="anchor" aria-hidden="true" href="#updates"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Updates</h2>
<h2><a id="user-content-the-main-idea" class="anchor" aria-hidden="true" href="#the-main-idea"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The main idea</h2>
<p>The main idea is that everything is decentralized. Nothing needs to be
generated when you add a package. Help commands and browser-based help
both go looking for help. From the REPL, you could ask for help in
several ways:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@help</span> mydataframe[<span class="pl-s"><span class="pl-pds">"</span>col1<span class="pl-pds">"</span></span>]   <span class="pl-c"><span class="pl-c">#</span> figures out the function name and package based on the function call</span>
<span class="pl-c1">@help</span> DataFrames<span class="pl-k">.</span>ref        <span class="pl-c"><span class="pl-c">#</span> lookup by module and keyword name (must be loaded)</span>
<span class="pl-c1">@help</span> DataFrames ref        <span class="pl-c"><span class="pl-c">#</span> lookup by package and keyword name</span>
<span class="pl-c1">help</span>(DataFrames<span class="pl-k">.</span>ref)        <span class="pl-c"><span class="pl-c">#</span> same but from a function definition </span>
<span class="pl-c1">help</span>(<span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ref<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> string-based lookups</span></pre></div>
<p>All of the above end up calling the same function: <code>help("DataFrames", "ref")</code>. The main mapping is by package and then keyword. Keywords
would normally be defined for every exported function and type. They
could also be used for constants, data sets, vignettes, and
documentation sections.</p>
<p>Single-argument help calls might do the following:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@help</span> DataFrames   <span class="pl-c"><span class="pl-c">#</span> does what help() does now then looks for packages and/or modules named "DataFrames"</span>
<span class="pl-c1">help</span>(<span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>)
<span class="pl-c1">apropos</span>(<span class="pl-s"><span class="pl-pds">"</span>DataFrames<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>within<span class="pl-pds">"</span></span>)   <span class="pl-c"><span class="pl-c">#</span> looks up the keyword within in the DataFrames package </span>
<span class="pl-c1">apropos</span>(<span class="pl-s"><span class="pl-pds">"</span>within<span class="pl-pds">"</span></span>)      <span class="pl-c"><span class="pl-c">#</span> looks up the keyword in base and then all packages </span></pre></div>
<p>Help for a package might look for a specific file (like
"ModuleName.txt" or "README.md"). <code>@help package</code> could show the given
help file, and it could also show help keywords available within the
package.</p>
<h2><a id="user-content-browser-based-help" class="anchor" aria-hidden="true" href="#browser-based-help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Browser-based help</h2>
<p>We could feed web pages to the browser from the Julia webserver. Using
live feeds from our own local webserver could allow us to do the following:</p>
<ul>
<li>
<p><em>Common header</em> -- We could splice in a header with links to the
Julia home page, github, and more.</p>
</li>
<li>
<p><em>Cross referencing between packages</em> -- Cross references of the form
<code>/foo/bar</code> can be interpretted as package <code>foo</code> and keyword <code>bar</code>.</p>
</li>
<li>
<p><em>Search bar</em> -- This could be similar to the arguments for <code>@help</code>.</p>
</li>
<li>
<p><em>On-the fly conversion of Markdown or reStructuredText</em> -- This
could be done on the Julia side or in Javascript. (I'm not sure this
is wise, but it's possible.)</p>
</li>
</ul>
<h2><a id="user-content-package-metadata" class="anchor" aria-hidden="true" href="#package-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Package metadata</h2>
<p>A key question is when one does <code>@help packagename keyword</code> or clicks
a link for <code>/packagename/keyword</code> in the browser, where are the files
stored, and what format are they in?</p>
<p>Here's one option that's pretty easy. The <code>doc/_JL_INDEX_</code> is an
indexing file with one row per keyword with the following three pieces
of information.</p>
<pre><code>keyword filename one-line description of the module/function/doc/whatever
</code></pre>
<p>Here is the start of the <code>_JL_INDEX_</code> file for
<a href="https://github.com/johnmyleswhite/RDatasets.jl">RDatasets.jl</a>:</p>
<pre><code>RDatasets  README  A package with datasets originally distributed with R or R add-on packages
BOD  datasets/BOD  Biochemical Oxygen Demand
Formaldehyde  datasets/Formaldehyde  Determination of Formaldehyde
HairEyeColor  datasets/HairEyeColor  Hair and Eye Color of Statistics Students
InsectSprays  datasets/InsectSprays  Effectiveness of Insect Sprays
</code></pre>
<p><code>filename</code> could be looked up by the REPL or the webserver, and
multiple formats could be supported. A simple package with just a few
functions could have a <code>_JL_INDEX_</code> file where all keywords point to
one README.md file. The one-liner is especially useful for searching
with <code>apropos</code>.</p>
<p><code>filename</code> could be treated several ways. The extension could be left
off, optional, or required. There could also be a bookmark or line
number indicator to reference one part of a file.</p>
<h2><a id="user-content-testbed" class="anchor" aria-hidden="true" href="#testbed"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Testbed</h2>
<p>There are many help files stashed in <code>doc/</code>. These were generated from
help for the <a href="http://www.modelica.org" rel="nofollow">Modelica Standard Library</a>. I
chose this example because this library is huge, and because I'm
working on a lite version of this for Julia:
<a href="https://github.com/tshort/Sims.jl">Sims.jl</a>.</p>
<p>Files were converted from html by
<a href="http://johnmacfarlane.net/pandoc/" rel="nofollow">pandoc</a>. I also used pandoc to
create reStructuredText (in <code>doc/</code>), plain text (in <code>doc/txt</code>), html
(in <code>doc/html</code>), and Markdown (in <code>doc/md</code>). The idea is that we can
use this as a testbed on a ridiculously large package with help in
different formats. Most of the files in this library document multiple
objects. Keywords are repeated.</p>
<h2><a id="user-content-packages-that-support-this-format" class="anchor" aria-hidden="true" href="#packages-that-support-this-format"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Packages that support this format</h2>
<ul>
<li><a href="https://github.com/johnmyleswhite/RDatasets.jl">RDatasets.jl</a> --
hundreds of datasets documented</li>
</ul>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>HelpTestbed<span class="pl-pds">"</span></span>); <span class="pl-k">using</span> Help

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@help</span> sin
Loading help data<span class="pl-k">...</span>
Base<span class="pl-k">.</span><span class="pl-c1">sin</span>(x)

   Compute sine of <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@help</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">sin</span>(Real,) at math<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">86</span>

Base<span class="pl-k">.</span><span class="pl-c1">sin</span>(x)

   Compute sine of <span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> Modelica<span class="pl-k">.</span><span class="pl-c1">MyType</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">MyType</span>(<span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@help</span> <span class="pl-c1">sin</span>(m)
<span class="pl-c1">sin</span>(MyType,) at <span class="pl-k">/</span>home<span class="pl-k">/</span>tshort<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>HelpTestbed<span class="pl-k">/</span>src<span class="pl-k">/</span>HelpTestbed<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">166</span>

Package <span class="pl-s"><span class="pl-pds">`</span>HelpTestbed<span class="pl-pds">`</span></span>,  sin

Miscellaneous trig functions

<span class="pl-c"><span class="pl-c">#</span> Basic trig operations</span>

<span class="pl-c1">sin</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType</span>)
<span class="pl-c1">cos</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType</span>)

That<span class="pl-k">'</span>s it<span class="pl-k">...</span>

Package <span class="pl-s"><span class="pl-pds">`</span>HelpTestbed<span class="pl-pds">`</span></span>,  sin

Sine of complex number

Modelica<span class="pl-k">.</span>ComplexMath



Modelica<span class="pl-k">.</span>ComplexMath
<span class="pl-k">====================</span>

Library of complex mathematical functions (e<span class="pl-k">.</span>g., sin, cos) and of
functions operating on copmlex vectors and matrices

<span class="pl-k">--</span> [long output truncated by hand] <span class="pl-k">--</span>



julia<span class="pl-k">&gt;</span> <span class="pl-c1">@help</span> m[<span class="pl-c1">1</span>]
<span class="pl-c1">ref</span>(MyType,Int64) at <span class="pl-k">/</span>home<span class="pl-k">/</span>tshort<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>HelpTestbed<span class="pl-k">/</span>src<span class="pl-k">/</span>HelpTestbed<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">171</span>

Package <span class="pl-s"><span class="pl-pds">`</span>HelpTestbed<span class="pl-pds">`</span></span>,  ref

Referencing <span class="pl-k">for</span> MyType<span class="pl-k">'</span>s

<span class="pl-c"><span class="pl-c">#</span> Test help file for referencing MyType's</span>

<span class="pl-c1">ref</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType</span>)
<span class="pl-c1">ref</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType</span>, a) 
<span class="pl-c1">ref</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType</span>, a<span class="pl-k">::</span><span class="pl-c1">Int</span>)
<span class="pl-c1">ref</span>(x<span class="pl-k">::</span><span class="pl-c1">MyType</span>, a, b) 

That<span class="pl-k">'</span>s it<span class="pl-k">...</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">apropos</span>(<span class="pl-s"><span class="pl-pds">"</span>regression<span class="pl-pds">"</span></span>)
Base<span class="pl-k">.</span><span class="pl-c1">linreg</span>(x, y)
Base<span class="pl-k">.</span><span class="pl-c1">linreg</span>(x, y, w)

 <span class="pl-k">--</span> Package documentation available <span class="pl-k">--</span> 

DataFrames		model_matrix		A ModelMatrix type used <span class="pl-k">for</span> regression modeling
RDatasets		anscombe		Anscombe<span class="pl-k">'</span>s Quartet of <span class="pl-s"><span class="pl-pds">'</span>Identical<span class="pl-pds">'</span></span> Simple Linear Regressions
RDatasets		longley		Longley<span class="pl-k">'</span>s Economic Regression Data
RDatasets		exAM		Example Data of Antille and May <span class="pl-k">-</span> <span class="pl-k">for</span> Simple Regression
RDatasets		Quartet		Four Regression Datasets
RDatasets		bivariate		Sample data <span class="pl-k">for</span> bivariate probit regression
RDatasets		grunfeld		Simulation Data <span class="pl-k">for</span> model Seemingly Unrelated Regression (sur) that corresponds to method SUR of systemfit


julia<span class="pl-k">&gt;</span> <span class="pl-c1">apropos</span>(<span class="pl-s"><span class="pl-pds">"</span>HelpTestbed<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>leakage<span class="pl-pds">"</span></span>)
HelpTestbed		LeakageWithCoefficient		Leakage reluctance with respect to the reluctance of a useful flux path (not <span class="pl-k">for</span> dynamic simulation of actuators)
HelpTestbed		PartialLeakage		Base class <span class="pl-k">for</span> leakage flux tubes with position<span class="pl-k">-</span>independent permeance and hence no force generation; mu<span class="pl-k">\</span>_r<span class="pl-k">=</span><span class="pl-c1">1</span>
HelpTestbed		LeakageAroundPoles		Leakage flux tube around cylindrical or prismatic poles
HelpTestbed		QuarterCylinder		Leakage flux from one edge to the opposite plane through a quarter cylinder
HelpTestbed		QuarterHollowCylinder		Leakage flux <span class="pl-k">in</span> circumferential direction through a quarter hollow cylinder
HelpTestbed		HalfCylinder		Leakage flux through the edges of a half cylinder
HelpTestbed		HalfHollowCylinder		Leakage flux <span class="pl-k">in</span> circumferential direction through a half hollow cylinder
HelpTestbed		QuarterSphere		Leakage flux through the corners of a quarter sphere
HelpTestbed		QuarterHollowSphere		Leakage flux through the edges of a qarter hollow sphere
HelpTestbed		EighthOfSphere		Leakage flux through one edge and the opposite plane of an eighth of a sphere
HelpTestbed		EighthOfHollowSphere		Leakage flux through one edge and the opposite plane of an eighth of a hollow sphere
HelpTestbed		CoaxCylindersEndFaces		Leakage flux between the <span class="pl-k">end</span> planes of a inner solid cylinder and a coaxial outer hollow cylinder
HelpTestbed		Leakage		Leakage flux tubes with position<span class="pl-k">-</span>independent permeance and hence no force generation; mu<span class="pl-k">\</span>_r<span class="pl-k">=</span><span class="pl-c1">1</span>



julia<span class="pl-k">&gt;</span> <span class="pl-c1">help</span>(<span class="pl-s"><span class="pl-pds">"</span>HelpTestbed<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Analog<span class="pl-pds">"</span></span>)
Package <span class="pl-s"><span class="pl-pds">`</span>HelpTestbed<span class="pl-pds">`</span></span>,  Analog

Library <span class="pl-k">for</span> analog electrical models

Modelica<span class="pl-k">.</span>Electrical<span class="pl-k">.</span>Analog<span class="pl-k">:</span> Modelica<span class="pl-k">.</span>Electrical<span class="pl-k">.</span>Analog



Library <span class="pl-k">for</span> analog electrical models

Information
<span class="pl-k">===========</span>

<span class="pl-k">::</span>

This package contains packages <span class="pl-k">for</span> analog electrical components<span class="pl-k">:</span>

<span class="pl-k">-</span>   Basic<span class="pl-k">:</span> basic components (resistor, capacitor, conductor, inductor,
    transformer, gyrator)
<span class="pl-k">-</span>   Semiconductors<span class="pl-k">:</span> semiconductor devices (diode, bipolar and MOS
    transistors)
<span class="pl-k">-</span>   Lines<span class="pl-k">:</span> transmission lines (lossy and lossless)
<span class="pl-k">-</span>   Ideal<span class="pl-k">:</span> ideal elements (switches, diode, transformer, idle, short,
    <span class="pl-k">...</span>)
<span class="pl-k">-</span>   Sources<span class="pl-k">:</span> time<span class="pl-k">-</span>dependend and controlled voltage and current sources
<span class="pl-k">-</span>   Sensors<span class="pl-k">:</span> sensors to measure potential, voltage, and current

<span class="pl-k">--</span> [long output truncated by hand] <span class="pl-k">--</span>
</pre></div>
<h2><a id="user-content-handling-multiple-dispatch" class="anchor" aria-hidden="true" href="#handling-multiple-dispatch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Handling multiple dispatch</h2>
<p>With the <code>@help</code> macro, we can find the signature of a function call.
We can use that to find the package. That narrows down the mapping
from a function signature to a documentation keyword.</p>
<p>That doesn't cover the case where functions refer to different things
within one package. For example, Tim Holy's
<a href="https://github.com/timholy/julia_hdf5">HDF5</a> has <code>read</code> for plain
HDF5 files, Matlab HDF5 files, and JLD (Julia data) files. If these
are documented all in one place, the existing approach works fine.</p>
<p>We could go a step further and allow packagers to enter the function
signature as part of the <code>_JL_INDEX_</code> file. This would allow separate
documentation of the different versions of <code>read</code> within a package.
Entering many function signatures might be too tedious, especially
since Julia code can tend to have lots of versions of a function
defined.</p>
<p>If it's better to document these in separate places, the packager could
offer different keywords: "read_jld", "read_plain", "read_matio", and
"read" which is a short description pointing to the other keywords.</p>
<p>We could also allow a keyword to point to the file. Every function
signature has a pointer back to the file it was written in. We could
allow function keywords of the form "read#matio" and "read#jld"
where matio points to "src/matio.jl". The following would try to open
help for "read#matio"</p>
<pre lang="jul"><code>file = jldopen("mydata.jld", "r")
@help read(file, "A")
</code></pre>
<h2><a id="user-content-aliases" class="anchor" aria-hidden="true" href="#aliases"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Aliases</h2>
<p>Aliases might help for cases where multiple keywords point to the same
thing. We could have a <code>_JL_ALIASES_</code> file in addition to
<code>_JL_INDEX_</code>. This could map from keyword to main keyword. Here is an
example:</p>
<pre><code>_JL_INDEX_:
ref_dataframe   dataframe  Indexing DataFrames
ref_datavec     datavec    Indexing DataVecs

_JL_ALIASES_:
ref           ref_dataframe
ref#dataframe ref_dataframe
ref#datavec   ref_datavec  
</code></pre>
<h2><a id="user-content-what-we-can-learn-from-rs-help" class="anchor" aria-hidden="true" href="#what-we-can-learn-from-rs-help"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>What we can learn from R's help</h2>
<p>R generally has comprehensive documentation. Here are it's main
strengths and how that might apply to Julia:</p>
<ul>
<li>
<p><em>Functions well documented</em> -- Almost every function points to a
documentation page. Each of these has a consistent structure. Two
things may help Julia achieve this: (1) making it as easy as
possible to document things, and (2) have some sort of
<code>Pkg.check(packagename)</code> that runs to make sure every exported
function has a documentation entry.</p>
</li>
<li>
<p><em>Examples</em> -- Most function documentation has an "Examples" section.
You can also run examples with <code>example(mean)</code>. For Julia, we can
encourage having an "Examples" documentation section. To get the
equivalent of <code>example(mean)</code>, we may need to specify exactly how to
bookmark example sections.</p>
</li>
<li>
<p><em>Multiple backends</em> -- Users can access help in multiple ways:
in the REPL, HTML help, PDF files of help, and Emacs/ESS help. This
should be straightforward to implement in Julia.</p>
</li>
<li>
<p><em>Nice HTML interface</em> -- R includes a built-in webserver that
organizes and feeds results to the browser. It allows on-the-fly
lookup of help keywords. It provides a really nice interface. We
could use Julia's webserver to do something similar.</p>
</li>
</ul>
<p>Here are some weaknesses with R's help system and how we might improve upon
them in Julia:</p>
<ul>
<li>
<p><em>Packages have awful default documentation</em> -- The default package
documentation is just a straight listing of the help for individual
functions and data in the package with no organization. Julia and
most Julia packages already do a better job of providing the "big picture".</p>
</li>
<li>
<p><em>Little connection between user's manuals, vignettes, and function
documentation</em> -- In Julia, it would be nice to have ways to
cross-reference between these.</p>
</li>
<li>
<p><em>Poor documentation for S4 classes</em> -- S4 is R's advanced type
system that supports multiple dispatch. I can never figure out help
for packages that use S4. For Julia to handle documentation for
multiple dispatch, tying function calls to documentation keywords
is key. The <code>@help</code> macro can help with that.</p>
</li>
<li>
<p><em>No graphics support</em> -- Help files and manuals don't include
graphics. R's documentation format is rather "old-fashioned". HTML,
Markdown, or reStructuredText shouldn't have these problems. One
question is whether we should try to support vector graphic formats.</p>
</li>
</ul>
<p>R's system is a decentralized system. Each package has a
"help/AnIndex" or "help/aliases.rds" (binary) file that gives a
keyword lookups. There's also a main "Index" file with keyword entries
and one-line descriptions. The help system does lookups of these on
the fly. It is relatively speedy even with many packages. R's indexing
files are generated when a package is installed. I'm proposing to
leave that up to the package manager. Tools like Sphinx could be set
up to generate that file automatically. We could provide a function
that can check the <code>_JL_INDEX_</code> file to make sure that all keywords
point to documentation in one of the required formats.</p>
<h2><a id="user-content-status" class="anchor" aria-hidden="true" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Status</h2>
<p>This is mainly just a playground so far.</p>
<p>Browser-based help hasn't been started.</p>
<p>Code is MIT licensed. The help files are were released by
the Modelica organization under the Modelica license v2.</p>
</article></div>