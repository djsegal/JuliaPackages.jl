<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-dierckxjl" class="anchor" aria-hidden="true" href="#dierckxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dierckx.jl</h1>
<p dir="auto"><em>Julia library for 1-d and 2-d splines</em></p>
<p dir="auto"><a href="https://github.com/kbarbary/Dierckx.jl/actions?query=workflow%3ACI"><img src="https://camo.githubusercontent.com/d176f68c9f5f80c033ebc05bb019deb1d7a21e93d1382f95ef3e1b54c91310ff/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b626172626172792f44696572636b782e6a6c2e7376673f7374796c653d666c61742d737175617265266c6f676f3d676974687562266c6162656c3d4349" alt="Build Status" data-canonical-src="https://img.shields.io/travis/kbarbary/Dierckx.jl.svg?style=flat-square&amp;logo=github&amp;label=CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/kbarbary/Dierckx.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/928fc0f898ac0d4255d740b639642c9cd9b7bb584596b56167767ec25fd4de95/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6b626172626172792f44696572636b782e6a6c2e7376673f7374796c653d666c61742d737175617265" alt="Coverage Status" data-canonical-src="http://img.shields.io/coveralls/kbarbary/Dierckx.jl.svg?style=flat-square" style="max-width: 100%;"></a></p>
<p dir="auto">This is a Julia wrapper for the
<a href="http://www.netlib.org/dierckx/index.html" rel="nofollow">dierckx</a> Fortran library,
the same library underlying the spline classes in scipy.interpolate.
Some of the functionality here overlaps with
<a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a>,
a pure-Julia interpolation package.  Take a look at it if you have a
use case not covered here.</p>
<p dir="auto">All new development on <code>Dierckx.jl</code> will be for Julia v1.3 and above.
The <code>master</code> branch is therefore incompatible with earlier versions
of Julia.</p>
<h3 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h3>
<ul dir="auto">
<li>Implements B-splines (basis splines).</li>
<li>Splines from first order to fifth order; default is third order (cubic).</li>
<li>Fit and evaluate 1-d and 2-d splines on irregular grids.</li>
<li>Fit and evaluate 2-d splines at unstructured points.</li>
<li>Fit "smooth" (non-interpolating) splines with adjustable smoothing factor s.</li>
<li>Derivatives, integrals and roots of 1-d splines.</li>
<li>Parametric B-splines.</li>
</ul>
<h2 dir="auto"><a id="user-content-install-julia-13-and-later" class="anchor" aria-hidden="true" href="#install-julia-13-and-later"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install (Julia 1.3 and later)</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="(v1.3) pkg&gt; add Dierckx"><pre>(v1.<span class="pl-c1">3</span>) pkg<span class="pl-k">&gt;</span> add Dierckx</pre></div>
<p dir="auto">(Type <code>]</code> to enter package mode.)</p>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dierckx"><pre><span class="pl-k">using</span> Dierckx</pre></div>
<p dir="auto">Fit a 1-d spline to some input data (points can be unevenly spaced):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = [0., 1., 2., 3., 4.]
y = [-1., 0., 7., 26., 63.]  # x.^3 - 1.
spl = Spline1D(x, y)"><pre>x <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">1.</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>, <span class="pl-c1">4.</span>]
y <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">1.</span>, <span class="pl-c1">0.</span>, <span class="pl-c1">7.</span>, <span class="pl-c1">26.</span>, <span class="pl-c1">63.</span>]  <span class="pl-c"><span class="pl-c">#</span> x.^3 - 1.</span>
spl <span class="pl-k">=</span> <span class="pl-c1">Spline1D</span>(x, y)</pre></div>
<p dir="auto">Evaluate the spline at some new points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="spl([1.5, 2.5])  # result = [2.375, 14.625]
spl(1.5)  # result = 2.375"><pre><span class="pl-c1">spl</span>([<span class="pl-c1">1.5</span>, <span class="pl-c1">2.5</span>])  <span class="pl-c"><span class="pl-c">#</span> result = [2.375, 14.625]</span>
<span class="pl-c1">spl</span>(<span class="pl-c1">1.5</span>)  <span class="pl-c"><span class="pl-c">#</span> result = 2.375</span></pre></div>
<p dir="auto">Equivalent to the above:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evaluate(spl, [1.5, 2.5])
evaluate(spl, 1.5)"><pre><span class="pl-c1">evaluate</span>(spl, [<span class="pl-c1">1.5</span>, <span class="pl-c1">2.5</span>])
<span class="pl-c1">evaluate</span>(spl, <span class="pl-c1">1.5</span>)</pre></div>
<p dir="auto">Evaluate derivative, integral, or roots:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="derivative(spl, 1.5)  # derivate at x=1.5; result is 5.75
integrate(spl, 0., 4.)  # integrate from x=0 to x=4; result is 60.0
roots(spl)  # result is [1.0]"><pre><span class="pl-c1">derivative</span>(spl, <span class="pl-c1">1.5</span>)  <span class="pl-c"><span class="pl-c">#</span> derivate at x=1.5; result is 5.75</span>
<span class="pl-c1">integrate</span>(spl, <span class="pl-c1">0.</span>, <span class="pl-c1">4.</span>)  <span class="pl-c"><span class="pl-c">#</span> integrate from x=0 to x=4; result is 60.0</span>
<span class="pl-c1">roots</span>(spl)  <span class="pl-c"><span class="pl-c">#</span> result is [1.0]</span></pre></div>
<p dir="auto"><em>Note that <code>roots()</code> only works for cubic splines (k=3).</em></p>
<p dir="auto">Fit a 2-d spline to data on a (possibly irregular) grid:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = [0.5, 2., 3., 4., 5.5, 8.]
y = [0.5, 2., 3., 4.]
z = [1. 2. 1. 2.;  # size is (length(x), length(y))
     1. 2. 1. 2.;
     1. 2. 3. 2.;
     1. 2. 2. 2.;
     1. 2. 1. 2.;
     1. 2. 3. 1.]

spline = Spline2D(x, y, z)"><pre>x <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>, <span class="pl-c1">4.</span>, <span class="pl-c1">5.5</span>, <span class="pl-c1">8.</span>]
y <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">2.</span>, <span class="pl-c1">3.</span>, <span class="pl-c1">4.</span>]
z <span class="pl-k">=</span> [<span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">1.</span> <span class="pl-c1">2.</span>;  <span class="pl-c"><span class="pl-c">#</span> size is (length(x), length(y))</span>
     <span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">1.</span> <span class="pl-c1">2.</span>;
     <span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">3.</span> <span class="pl-c1">2.</span>;
     <span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">2.</span> <span class="pl-c1">2.</span>;
     <span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">1.</span> <span class="pl-c1">2.</span>;
     <span class="pl-c1">1.</span> <span class="pl-c1">2.</span> <span class="pl-c1">3.</span> <span class="pl-c1">1.</span>]

spline <span class="pl-k">=</span> <span class="pl-c1">Spline2D</span>(x, y, z)</pre></div>
<p dir="auto"><em>Note that if you consider <code>z</code> as a matrix, <code>x</code> refers to row
coordinates and <code>y</code> refers to column coordinates.</em></p>
<p dir="auto">Evaluate at element-wise points:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xi = [1., 1.5, 2.3, 4.5, 3.3, 3.2, 3.]
yi = [1., 2.3, 5.3, 0.5, 3.3, 1.2, 3.]
zi = spline(xi, yi)  # 1-d array of length 7
zi = evaluate(spline, xi, yi)  # equivalent to previous line"><pre>xi <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.3</span>, <span class="pl-c1">4.5</span>, <span class="pl-c1">3.3</span>, <span class="pl-c1">3.2</span>, <span class="pl-c1">3.</span>]
yi <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">2.3</span>, <span class="pl-c1">5.3</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">3.3</span>, <span class="pl-c1">1.2</span>, <span class="pl-c1">3.</span>]
zi <span class="pl-k">=</span> <span class="pl-c1">spline</span>(xi, yi)  <span class="pl-c"><span class="pl-c">#</span> 1-d array of length 7</span>
zi <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(spline, xi, yi)  <span class="pl-c"><span class="pl-c">#</span> equivalent to previous line</span></pre></div>
<p dir="auto">Evaluate at grid spanned by input arrays:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="xi = [1., 1.5, 2.3, 4.5]
yi = [1., 2.3, 5.3]
zi = evalgrid(spline, xi, yi)  # 2-d array of size (4, 3)"><pre>xi <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">2.3</span>, <span class="pl-c1">4.5</span>]
yi <span class="pl-k">=</span> [<span class="pl-c1">1.</span>, <span class="pl-c1">2.3</span>, <span class="pl-c1">5.3</span>]
zi <span class="pl-k">=</span> <span class="pl-c1">evalgrid</span>(spline, xi, yi)  <span class="pl-c"><span class="pl-c">#</span> 2-d array of size (4, 3)</span></pre></div>
<h2 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference</h2>
<h3 dir="auto"><a id="user-content-1-d-splines" class="anchor" aria-hidden="true" href="#1-d-splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1-d Splines</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Spline1D(x, y; w=ones(length(x)), k=3, bc=&quot;nearest&quot;, s=0.0)
Spline1D(x, y, xknots; w=ones(length(x)), k=3, bc=&quot;nearest&quot;)"><pre><span class="pl-c1">Spline1D</span>(x, y; w<span class="pl-k">=</span><span class="pl-c1">ones</span>(<span class="pl-c1">length</span>(x)), k<span class="pl-k">=</span><span class="pl-c1">3</span>, bc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>nearest<span class="pl-pds">"</span></span>, s<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
<span class="pl-c1">Spline1D</span>(x, y, xknots; w<span class="pl-k">=</span><span class="pl-c1">ones</span>(<span class="pl-c1">length</span>(x)), k<span class="pl-k">=</span><span class="pl-c1">3</span>, bc<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>nearest<span class="pl-pds">"</span></span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">Create a spline of degree <code>k</code> (1 = linear, 2 = quadratic, 3 = cubic,
up to 5) from 1-d arrays <code>x</code> and <code>y</code>. The parameter <code>bc</code> specifies
the behavior when evaluating the spline outside the support domain,
which is <code>(minimum(x), maximum(x))</code>. The allowed values are
<code>"nearest"</code>, <code>"zero"</code>, <code>"extrapolate"</code>, <code>"error"</code>.</p>
<p dir="auto">In the first form, the number and positions of knots are chosen
automatically. The smoothness of the spline is then achieved by
minimizing the discontinuity jumps of the <code>k</code>th derivative of the
spline at the knots. The amount of smoothness is determined by the
condition that <code>sum((w[i]*(y[i]-spline(x[i])))**2) &lt;= s</code>, with <code>s</code> a
given non-negative constant, called the smoothing factor. The number
of knots is increased until the condition is satisfied. By means of
this parameter, the user can control the tradeoff between closeness
of fit and smoothness of fit of the approximation.  if <code>s</code> is too
large, the spline will be too smooth and signal will be lost ; if
<code>s</code> is too small the spline will pick up too much noise. in the
extreme cases the program will return an interpolating spline if
<code>s=0.0</code> and the weighted least-squares polynomial of degree <code>k</code> if
<code>s</code> is very large.</p>
<p dir="auto">In the second form, the knots are supplied by the user. There is no
smoothing parameter in this form. The program simply minimizes the
discontinuity jumps of the <code>k</code>th derivative of the spline at the
given knots.</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evaluate(spl, x)"><pre><span class="pl-c1">evaluate</span>(spl, x)</pre></div>
<ul dir="auto">
<li>Evaluate the 1-d spline <code>spl</code> at points given in <code>x</code>, which can be a
1-d array or scalar. If a 1-d array, the values must be monotonically
increasing.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="derivative(spl, x; nu=1)"><pre><span class="pl-c1">derivative</span>(spl, x; nu<span class="pl-k">=</span><span class="pl-c1">1</span>)</pre></div>
<ul dir="auto">
<li>Evaluate the <code>nu</code>-th derivative of the spline at points in <code>x</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="integrate(spl, a, b)"><pre><span class="pl-c1">integrate</span>(spl, a, b)</pre></div>
<ul dir="auto">
<li>Definite integral of spline between <code>x=a</code> and <code>x=b</code>.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="roots(spl; maxn=8)"><pre><span class="pl-c1">roots</span>(spl; maxn<span class="pl-k">=</span><span class="pl-c1">8</span>)</pre></div>
<ul dir="auto">
<li>For cubic splines (<code>k=3</code>) only, find roots. Only up to <code>maxn</code> roots
are returned. A warning is issued if the spline has more roots than
the number returned.</li>
</ul>
<h3 dir="auto"><a id="user-content-parametric-splines" class="anchor" aria-hidden="true" href="#parametric-splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Parametric Splines</h3>
<p dir="auto">These are the B-spline representation of a curve through N-dimensional space.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ParametricSpline(X; s=0.0, ...)
ParametricSpline(u, X; s=0.0, ...)
ParametricSpline(X, knots, ...)
ParametricSpline(u, X, knots, ...)"><pre><span class="pl-c1">ParametricSpline</span>(X; s<span class="pl-k">=</span><span class="pl-c1">0.0</span>, <span class="pl-k">...</span>)
<span class="pl-c1">ParametricSpline</span>(u, X; s<span class="pl-k">=</span><span class="pl-c1">0.0</span>, <span class="pl-k">...</span>)
<span class="pl-c1">ParametricSpline</span>(X, knots, <span class="pl-k">...</span>)
<span class="pl-c1">ParametricSpline</span>(u, X, knots, <span class="pl-k">...</span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto"><code>X</code> is a 2-d array with size <code>(N, m)</code>: <code>N</code> is the number of dimensions
of the space (must be between 1 and 10) and <code>m</code> is the number of points.
<code>X[:, i]</code> gives the coordinates of the <code>i</code>th point.</p>
</li>
<li>
<p dir="auto"><code>u</code> is a 1-d array giving parameter values at each of the <code>m</code> points. If not
given, values are calculated automatically.</p>
</li>
<li>
<p dir="auto"><code>knots</code> is a 1-d array giving user-specified knots, if desired.</p>
</li>
</ul>
<p dir="auto">Keyword arguments common to all constructor methods:</p>
<ul dir="auto">
<li><code>w</code>: weight applied to each point (length <code>m</code> 1-d array).</li>
<li><code>k</code>: Spline order (between 1 and 5; default 3).</li>
<li><code>bc</code>: Boundary condition (default <code>'nearest'</code>).</li>
<li><code>periodic</code>: Treat curve as periodic? (Default is <code>false</code>).</li>
</ul>
<h3 dir="auto"><a id="user-content-2-d-splines" class="anchor" aria-hidden="true" href="#2-d-splines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2-d Splines</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Spline2D(x, y, z; w=ones(length(x)), kx=3, ky=3, s=0.0)
Spline2D(x, y, z; kx=3, ky=3, s=0.0)"><pre><span class="pl-c1">Spline2D</span>(x, y, z; w<span class="pl-k">=</span><span class="pl-c1">ones</span>(<span class="pl-c1">length</span>(x)), kx<span class="pl-k">=</span><span class="pl-c1">3</span>, ky<span class="pl-k">=</span><span class="pl-c1">3</span>, s<span class="pl-k">=</span><span class="pl-c1">0.0</span>)
<span class="pl-c1">Spline2D</span>(x, y, z; kx<span class="pl-k">=</span><span class="pl-c1">3</span>, ky<span class="pl-k">=</span><span class="pl-c1">3</span>, s<span class="pl-k">=</span><span class="pl-c1">0.0</span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">Fit a 2-d spline to the input data. <code>x</code> and <code>y</code> must be 1-d arrays.</p>
<p dir="auto">If <code>z</code> is also a 1-d array, the inputs are assumed to represent
unstructured data, with <code>z[i]</code> being the function value at point
<code>(x[i], y[i])</code>. In this case, the lengths of all inputs must match.</p>
<p dir="auto">If <code>z</code> is a 2-d array, the data are assumed to be gridded: <code>z[i, j]</code>
is the function value at <code>(x[i], y[j])</code>. In this case, it is
required that <code>size(z) == (length(x), length(y))</code>. (Note that when
interpreting <code>z</code> as a matrix, <code>x</code> gives the row coordinates and <code>y</code>
gives the column coordinates.)</p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evaluate(spl, x, y)"><pre><span class="pl-c1">evaluate</span>(spl, x, y)</pre></div>
<ul dir="auto">
<li>Evaluate the 2-d spline <code>spl</code> at points <code>(x[i], y[i])</code>. Inputs can be
Vectors or scalars. Points outside the domain of the spline are set to
the values at the boundary.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="evalgrid(spl, x, y)"><pre><span class="pl-c1">evalgrid</span>(spl, x, y)</pre></div>
<ul dir="auto">
<li>Evaluate the 2-d spline <code>spl</code> at the grid points spanned by the
coordinate arrays <code>x</code> and <code>y</code>. The input arrays must be
monotonically increasing. The output is a 2-d array with size
<code>(length(x), length(y))</code>: <code>output[i, j]</code> is the function value at
<code>(x[i], y[j])</code>. In other words, when interpreting the result as a
matrix, <code>x</code> gives the row coordinates and <code>y</code> gives the column
coordinates.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="derivative(spl, x, y; nux = 1, nuy = 1)"><pre><span class="pl-c1">derivative</span>(spl, x, y; nux <span class="pl-k">=</span> <span class="pl-c1">1</span>, nuy <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<ul dir="auto">
<li>
<p dir="auto">Evaluate the partial derivative of the 2-d spline <code>spl</code> at the
grid points spanned by the coordinate arrays <code>x</code> and <code>y</code>.
Note that <code>x</code> refers to the row coordinates, and <code>y</code> to the column
ones. The order of the derivatives may be between <code>0</code> and <code>kx-1</code> for <code>x</code>
and <code>0</code> and <code>ky-1</code> for <code>y</code>.</p>
</li>
<li>
<p dir="auto">integral of a 2-d spline over the domain <code>[x0, x1]*[y0, y1]</code></p>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="integrate(spl, x0, x1, y0, y1)"><pre><span class="pl-c1">integrate</span>(spl, x0, x1, y0, y1)</pre></div>
<h2 dir="auto"><a id="user-content-translation-from-scipyinterpolate" class="anchor" aria-hidden="true" href="#translation-from-scipyinterpolate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Translation from scipy.interpolate</h2>
<p dir="auto">The <code>Spline</code> classes in scipy.interpolate are also thin wrappers
for the Dierckx Fortran library. The performance of Dierckx.jl should
be similar or better than the scipy.interpolate classes. (Better for
small arrays where Python overhead is more significant.) The
equivalent of a specific classes in scipy.interpolate:</p>
<table>
<thead>
<tr>
<th>scipy.interpolate class</th>
<th>Dierckx.jl constructor method</th>
</tr>
</thead>
<tbody>
<tr>
<td>UnivariateSpline</td>
<td><code>Spline1D(x, y; s=length(x))</code></td>
</tr>
<tr>
<td>InterpolatedUnivariateSpline</td>
<td><code>Spline1D(x, y; s=0.0)</code></td>
</tr>
<tr>
<td>LSQUnivariateSpline</td>
<td><code>Spline1D(x, y, xknots)</code></td>
</tr>
<tr>
<td>SmoothBivariateSpline</td>
<td><code>Spline2D(x, y, z; s=length(x))</code></td>
</tr>
<tr>
<td>LSQBivariateSpline</td>
<td></td>
</tr>
<tr>
<td>RectBivariateSpline</td>
<td><code>Spline2D(x, y, z; s=0.0)</code> (z = 2-d array)</td>
</tr>
<tr>
<td>SmoothSphereBivariateSpline</td>
<td></td>
</tr>
<tr>
<td>LSQSphereBivariateSpline</td>
<td></td>
</tr>
<tr>
<td>RectSphereBivariateSpline</td>
<td></td>
</tr>
</tbody>
</table>
<p dir="auto">Parametric splines:</p>
<table>
<thead>
<tr>
<th>scipy.interpolate function</th>
<th>Dierckx.jl constructor method</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>splprep(X)</code></td>
<td><code>ParametricSpline(X)</code></td>
</tr>
<tr>
<td><code>splprep(X, u=...)</code></td>
<td><code>ParametricSpline(u, X)</code></td>
</tr>
<tr>
<td><code>splprep(X, t=...)</code></td>
<td><code>ParametricSpline(X, t)</code>  (t = knots)</td>
</tr>
<tr>
<td><code>splprep(X, u=..., t=...)</code></td>
<td><code>ParametricSpline(u, X, t)</code></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">Dierckx.jl is distributed under a 3-clause BSD license. See LICENSE.md
for details. The real*8 version of the Dierckx Fortran library as well as
some test cases and error messages are copied from the scipy package,
which is distributed under this license.</p>
<h2 dir="auto"><a id="user-content-citation" class="anchor" aria-hidden="true" href="#citation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citation</h2>
<p dir="auto">If you use this package in a pulication and wish to cite it, you may want to cite the original <a href="http://www.netlib.org/dierckx/" rel="nofollow">Fortran dierckx library</a>:</p>
<blockquote>
<p dir="auto">Paul Dierckx, Curve and Surface Fitting with Splines, Oxford University Press, 1993</p>
</blockquote>
<p dir="auto">If convenient, you can also include a link to the github repository for this package: <a href="https://github.com/kbarbary/Dierckx.jl">https://github.com/kbarbary/Dierckx.jl</a>.</p>
</article></div>