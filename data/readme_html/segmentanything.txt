<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-segmentanything" class="anchor" aria-hidden="true" href="#segmentanything"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SegmentAnything</h1>
<p dir="auto">A thin wrapper for installing and using
<a href="https://github.com/facebookresearch/segment-anything">segment-anything</a>
in Julia.</p>
<p dir="auto">It provides <code>SamPredictor</code> and a <code>predict</code> function and
<code>SamAutomaticMaskGenerator</code> and <code>generate</code>, as in segment-anything.</p>
<p dir="auto"><code>predict</code> and <code>generate</code> return the raw outputs of their namesake python methods.</p>
<p dir="auto"><code>ImageMask</code> provides a more julia wrapper for <code>SamPredictor</code> and <code>predict</code>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SegmentAnything, GLMakie, FileIO

# Load the predictor model
predictor = SamPredictor()

# Download an image
using Downloads
url = &quot;https://upload.wikimedia.org/wikipedia/commons/a/a1/Beagle_and_sleeping_black_and_white_kitty-01.jpg&quot;
Downloads.download(url, &quot;pic.jpg&quot;)
img = load(&quot;pic.jpg&quot;)

# Plot it
p = Makie.image(rotr90(img); transparency=true)
p.axis.autolimitaspect = 1
hidedecorations!(p.axis)

# Mask the kitten, and plot
mask1 = ImageMask(predictor, img; 
  point_coords=[(400, 800)],
  point_labels=[true],
)
m1 = rotr90(map(mask1.masks[2, :, :]) do x
     x ? RGBAf(1, 0, 0, 1) : RGBAf(0, 0, 0, 0)
end)
image!(p.axis, m1; transparency=true)

# Now mask the beagle, and plot
mask2 = ImageMask(predictor, img; 
  point_coords=[(400, 600)],
  point_labels=[true],
)
m2 = rotr90(map(mask2.masks[2, :, :]) do x
     x ? RGBAf(0, 0.0, 1.0, 1) : RGBAf(0, 0, 0, 0)
end)
image!(p.axis, m2; transparency=true)

save(&quot;beagle_and_kitten.png&quot;, p.figure)"><pre><span class="pl-k">using</span> SegmentAnything, GLMakie, FileIO

<span class="pl-c"><span class="pl-c">#</span> Load the predictor model</span>
predictor <span class="pl-k">=</span> <span class="pl-c1">SamPredictor</span>()

<span class="pl-c"><span class="pl-c">#</span> Download an image</span>
<span class="pl-k">using</span> Downloads
url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://upload.wikimedia.org/wikipedia/commons/a/a1/Beagle_and_sleeping_black_and_white_kitty-01.jpg<span class="pl-pds">"</span></span>
Downloads<span class="pl-k">.</span><span class="pl-c1">download</span>(url, <span class="pl-s"><span class="pl-pds">"</span>pic.jpg<span class="pl-pds">"</span></span>)
img <span class="pl-k">=</span> <span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>pic.jpg<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Plot it</span>
p <span class="pl-k">=</span> Makie<span class="pl-k">.</span><span class="pl-c1">image</span>(<span class="pl-c1">rotr90</span>(img); transparency<span class="pl-k">=</span><span class="pl-c1">true</span>)
p<span class="pl-k">.</span>axis<span class="pl-k">.</span>autolimitaspect <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-c1">hidedecorations!</span>(p<span class="pl-k">.</span>axis)

<span class="pl-c"><span class="pl-c">#</span> Mask the kitten, and plot</span>
mask1 <span class="pl-k">=</span> <span class="pl-c1">ImageMask</span>(predictor, img; 
  point_coords<span class="pl-k">=</span>[(<span class="pl-c1">400</span>, <span class="pl-c1">800</span>)],
  point_labels<span class="pl-k">=</span>[<span class="pl-c1">true</span>],
)
m1 <span class="pl-k">=</span> <span class="pl-c1">rotr90</span>(<span class="pl-c1">map</span>(mask1<span class="pl-k">.</span>masks[<span class="pl-c1">2</span>, :, :]) <span class="pl-k">do</span> x
     x <span class="pl-k">?</span> <span class="pl-c1">RGBAf</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">1</span>) <span class="pl-k">:</span> <span class="pl-c1">RGBAf</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
<span class="pl-k">end</span>)
<span class="pl-c1">image!</span>(p<span class="pl-k">.</span>axis, m1; transparency<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Now mask the beagle, and plot</span>
mask2 <span class="pl-k">=</span> <span class="pl-c1">ImageMask</span>(predictor, img; 
  point_coords<span class="pl-k">=</span>[(<span class="pl-c1">400</span>, <span class="pl-c1">600</span>)],
  point_labels<span class="pl-k">=</span>[<span class="pl-c1">true</span>],
)
m2 <span class="pl-k">=</span> <span class="pl-c1">rotr90</span>(<span class="pl-c1">map</span>(mask2<span class="pl-k">.</span>masks[<span class="pl-c1">2</span>, :, :]) <span class="pl-k">do</span> x
     x <span class="pl-k">?</span> <span class="pl-c1">RGBAf</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1</span>) <span class="pl-k">:</span> <span class="pl-c1">RGBAf</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)
<span class="pl-k">end</span>)
<span class="pl-c1">image!</span>(p<span class="pl-k">.</span>axis, m2; transparency<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>beagle_and_kitten.png<span class="pl-pds">"</span></span>, p<span class="pl-k">.</span>figure)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/2534009/234685142-9483bd40-1af0-4912-bb25-6024ed0e06fa.png"><img src="https://user-images.githubusercontent.com/2534009/234685142-9483bd40-1af0-4912-bb25-6024ed0e06fa.png" alt="beagle_and_kitten" style="max-width: 100%;"></a></p>
<p dir="auto">We can also use the automatic mask generator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using SegmentAnything, GLMakie, FileIO, PythonCall
p = Makie.image(rotr90(img); transparency=true)

# Load the predictor model
generator = SamAutomaticMaskGenerator()
out = generate(generator, img)

# Create an array of zeros to write into
segments = rotr90(PythonCall.pyconvert(Array, out[1][&quot;segmentation&quot;])) .* 0

# Loop over the returned objects, which is an array of python dictionaries.
for (n, x) in enumerate(out)
    A = rotr90(PythonCall.pyconvert(Array, x[&quot;segmentation&quot;]))
    for i in eachindex(A)
        if A[i] 
           segments[i] = n
        end
    end
end
Makie.image!(p.axis, segments; transparency=true, colormap=(:tableau_20, 2.0))

save(&quot;auto_segmentation.png&quot;, p.figure)"><pre><span class="pl-k">using</span> SegmentAnything, GLMakie, FileIO, PythonCall
p <span class="pl-k">=</span> Makie<span class="pl-k">.</span><span class="pl-c1">image</span>(<span class="pl-c1">rotr90</span>(img); transparency<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Load the predictor model</span>
generator <span class="pl-k">=</span> <span class="pl-c1">SamAutomaticMaskGenerator</span>()
out <span class="pl-k">=</span> <span class="pl-c1">generate</span>(generator, img)

<span class="pl-c"><span class="pl-c">#</span> Create an array of zeros to write into</span>
segments <span class="pl-k">=</span> <span class="pl-c1">rotr90</span>(PythonCall<span class="pl-k">.</span><span class="pl-c1">pyconvert</span>(Array, out[<span class="pl-c1">1</span>][<span class="pl-s"><span class="pl-pds">"</span>segmentation<span class="pl-pds">"</span></span>])) <span class="pl-k">.*</span> <span class="pl-c1">0</span>

<span class="pl-c"><span class="pl-c">#</span> Loop over the returned objects, which is an array of python dictionaries.</span>
<span class="pl-k">for</span> (n, x) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(out)
    A <span class="pl-k">=</span> <span class="pl-c1">rotr90</span>(PythonCall<span class="pl-k">.</span><span class="pl-c1">pyconvert</span>(Array, x[<span class="pl-s"><span class="pl-pds">"</span>segmentation<span class="pl-pds">"</span></span>]))
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(A)
        <span class="pl-k">if</span> A[i] 
           segments[i] <span class="pl-k">=</span> n
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
Makie<span class="pl-k">.</span><span class="pl-c1">image!</span>(p<span class="pl-k">.</span>axis, segments; transparency<span class="pl-k">=</span><span class="pl-c1">true</span>, colormap<span class="pl-k">=</span>(<span class="pl-c1">:tableau_20</span>, <span class="pl-c1">2.0</span>))

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>auto_segmentation.png<span class="pl-pds">"</span></span>, p<span class="pl-k">.</span>figure)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/2534009/236788199-974810dc-8e44-496c-8095-bd38d4078f07.png"><img src="https://user-images.githubusercontent.com/2534009/236788199-974810dc-8e44-496c-8095-bd38d4078f07.png" alt="auto_segmentation" style="max-width: 100%;"></a></p>
</article></div>