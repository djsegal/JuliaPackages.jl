<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stablehashtraits" class="anchor" aria-hidden="true" href="#stablehashtraits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>StableHashTraits</h1>
<p dir="auto"><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width: 100%;"></a>
<a href="https://github.com/beacon-biosignals/StableHashTraits.jl/actions/workflows/ci.yml"><img src="https://github.com/beacon-biosignals/StableHashTraits.jl/workflows/CI/badge.svg" alt="GitHub Actions" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/beacon-biosignals/StableHashTraits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/57544b9f27c3d8ecfd659c293fe7c80b8a6c200ba564935c95a6cfc96ad6e9ee/68747470733a2f2f636f6465636f762e696f2f67682f626561636f6e2d62696f7369676e616c732f537461626c65486173685472616974732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d344f31594f30474d4e4d" alt="codecov" data-canonical-src="https://codecov.io/gh/beacon-biosignals/StableHashTraits.jl/branch/main/graph/badge.svg?token=4O1YO0GMNM" style="max-width: 100%;"></a>
<a href="https://github.com/jrevels/YASGu"><img src="https://camo.githubusercontent.com/1fbd9ec0fa9c8e14c4960591bab07507da2ae468c5b17356491731b8c130c0e0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7961732d76696f6c65742e737667" alt="Code Style: YASGuide" data-canonical-src="https://img.shields.io/badge/code%20style-yas-violet.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The aim of StableHashTraits is to make it easy to compute a stable hash of any Julia value
with minimal boilerplate using trait-based dispatch; here, "stable" means the value will not
change across Julia versions (or between Julia sessions).</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct MyType
   a
   b
end
StableHashTraits.hash_method(::MyType) = UseProperties()

stable_hash(MyType(1,2)) == stable_hash((a=1, b=2)) # true"><pre><span class="pl-k">struct</span> MyType
   a
   b
<span class="pl-k">end</span>
StableHashTraits<span class="pl-k">.</span><span class="pl-en">hash_method</span>(<span class="pl-k">::</span><span class="pl-c1">MyType</span>) <span class="pl-k">=</span> <span class="pl-c1">UseProperties</span>()

<span class="pl-c1">stable_hash</span>(<span class="pl-c1">MyType</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>)) <span class="pl-k">==</span> <span class="pl-c1">stable_hash</span>((a<span class="pl-k">=</span><span class="pl-c1">1</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<h2 dir="auto"><a id="user-content-why-use-stable_hash-instead-of-basehash" class="anchor" aria-hidden="true" href="#why-use-stable_hash-instead-of-basehash"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Why use <code>stable_hash</code> instead of <code>Base.hash</code>?</h2>
<p dir="auto">This package can be useful when:</p>
<ul dir="auto">
<li>you want to be ensure the hash value will not change when you update Julia or start a new session, OR</li>
<li>you want to compute a hash for an object that does not have <code>hash</code> defined.</li>
</ul>
<p dir="auto">This is useful for content-addressed caching, in which e.g. some function of a value is stored at a location determined by a hash. Given the value, one can recompute the hash to determine where to look to see if the function evaluation on that value has already been cached.</p>
<p dir="auto">It isn't intended for secure hashing.</p>
<h2 dir="auto"><a id="user-content-details" class="anchor" aria-hidden="true" href="#details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Details</h2>
<p dir="auto">There is one exported method: <code>stable_hash</code>. You call this on any number of
objects and the returned value is a hash of those objects (the argument order
matters).</p>
<p dir="auto">You can customize its behavior for particular types by implementing the trait
<code>StableHashTraits.hash_method</code>. Any method of <code>hash_method</code> should simply return one of the following values.</p>
<ol dir="auto">
<li><code>UseWrite()</code>: writes the object to a binary format using <code>StableHashTraits.write(io, x)</code>
and takes a hash of that (this is the default behavior). <code>StableHashTraits.write(io, x)</code>
falls back to <code>Base.write(io, x)</code> if no specialized methods are defined for x.</li>
<li><code>UseIterate()</code>: assumes the object is iterable and finds a hash of all elements</li>
<li><code>UseProperties()</code>: assumes a struct of some type and uses <code>propertynames</code> and
<code>getproperty</code> to compute a hash of all fields. You can further customize its behavior by
passing the symbol <code>:ByOrder</code> (to hash properties in the order they are listed by
<code>propertynames</code>), which is the default, or <code>:ByName</code> (sorting properties by their name
before hashing).</li>
<li><code>UseTable()</code>: assumes the object is a <code>Tables.istable</code> and uses <code>Tables.columns</code> and
<code>Tables.columnnames</code> to compute a hash of each columns content and name, ala
<code>UseProperties</code>. This method should rarely need to be specified by the user, as the
fallback method for <code>Any</code> should normally handle this case.</li>
<li><code>UseQualifiedName()</code>: hash the string <code>parentmodule(T).nameof(T)</code> where <code>T</code> is the type
of the object. Throws an error if the name includes <code>#</code> (e.g. an anonymous function). If
you wish to include this qualified name <em>and</em> another method, pass one of the other
methods as an arugment (e.g. <code>UseQualifiedName(UseProperties())</code>). This can be used to
include the type as part of the hash. Do you want a named tuple with the same properties
as your custom struct to hash to the same value? If you don't, then use
<code>UseQualifiedName</code>.</li>
<li><code>UseSize(method)</code>: hash the result of calling <code>size</code> on the object and use <code>method</code> to
hash the contents of the value (e.g. <code>UseIterate</code>).</li>
</ol>
<p dir="auto">Your hash will be stable if the output for the given method remains the same: e.g. if
<code>write</code> is the same for an object that uses <code>UseWrite</code>, its hash will be the same; if the
properties are the same for <code>UseProperties</code>, the hash will be the same; etc...</p>
<h2 dir="auto"><a id="user-content-implemented-methods-of-hash_method" class="anchor" aria-hidden="true" href="#implemented-methods-of-hash_method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implemented methods of <code>hash_method</code></h2>
<ul dir="auto">
<li><code>Any</code>: either
<ul dir="auto">
<li><code>UseWrite()</code> OR</li>
<li><code>UseTable()</code> for any object <code>x</code> where <code>Tables.istable(x)</code> is true</li>
</ul>
</li>
<li><code>Function</code>: <code>UseQualifiedName()</code></li>
<li><code>NamedTuples</code>: <code>UseProperties()</code></li>
<li><code>AbstractVector</code>, <code>Tuple</code>, <code>Pair</code>: <code>UseIterate()</code></li>
<li><code>AbstractArray</code>: <code>UseSize(UseIterate())</code></li>
<li><code>Missing</code>, <code>Nothing</code>: <code>UseQualifiedNamed()</code></li>
<li><code>VersionNumber</code>: <code>UseProperties()</code></li>
<li><code>UUID</code>: <code>UseProperties()</code></li>
<li><code>Dates.AbstractTime</code>: <code>UseProperties()</code></li>
</ul>
<p dir="auto">For more complicated scenarios where impleneting <code>hash_method</code> will not suffice, refer to
the documentaiton of <code>transform</code> and <code>write</code>. For instance <code>Set</code> objects are supported using
<code>transform</code>.</p>
<h2 dir="auto"><a id="user-content-breaking-changes" class="anchor" aria-hidden="true" href="#breaking-changes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Breaking changes</h2>
<h3 dir="auto"><a id="user-content-in-03" class="anchor" aria-hidden="true" href="#in-03"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>In 0.3:</h3>
<p dir="auto">To prevent reshaped arrays from having the same hash (<code>stable_hash([1 2; 3 4]) == stable_hash(vec([1 2; 3 4]))</code>) the hashes for all arrays with more than 1 dimension have
changed.</p>
<h3 dir="auto"><a id="user-content-in-02" class="anchor" aria-hidden="true" href="#in-02"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>In 0.2:</h3>
<p dir="auto">To support hasing of all tables (<code>Tables.istable(x) == true</code>), hashes have changed for such
objects when:</p>
<ol dir="auto">
<li>calling <code>stable_hash(x)</code> did not previously error</li>
<li><code>x</code> is not a <code>DataFrame</code> (these previosuly errored)</li>
<li><code>x</code> is not a <code>NamedTuple</code> of tables columns (these have the same hash as before)</li>
<li><code>x</code> is not an <code>AbstractArray</code> of <code>NamedTuple</code> rows (these have the same hash as before)</li>
<li><code>x</code> can be succefully written to an IO buffer via <code>Base.write</code> or
<code>StableHashTraits.write</code> (otherwise it previosuly errored)</li>
<li><code>x</code> has no specialized <code>stable_hash</code> method defined for it (otherwise
the hash will be the same)</li>
</ol>
<p dir="auto">Any such table now uses the method <code>UseTable</code>, rather than <code>UseWrite</code>, and so would have the
same hash as a <code>DataFrame</code> or <code>NamedTuple</code> with the same column contents instead of its
previous hash value. For example if you had a custom table type <code>MyCustomTable</code> for which
you only defined a <code>StableHashTraits.write</code> method and no <code>hash_method</code>, its hash will be
changed unless you now define <code>hash_method(::MyCustomTable) = UseWrite()</code>.</p>
<h2 dir="auto"><a id="user-content-avoiding-type-piracy" class="anchor" aria-hidden="true" href="#avoiding-type-piracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Avoiding Type Piracy</h2>
<p dir="auto">It can be very tempting to define <code>hash_method</code> for types that were defined by another
package or from Base. This is type piracy, and can easily lead to two different packags
defining the same method: in this case, the method which gets used depends on the order of
<code>using</code> statements... yuck.</p>
<p dir="auto">To avoid this problem, it is possible to define a version of any method you specialize (e.g.
<code>hash_method</code>, <code>transform</code> and/or <code>write</code>) with one additional argument. This final argument
can be anything you want, so long as it is a type you have defined. For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using DataFrames
struct MyContext end
StableHashTraits.hash_method(::DataFrame, ::MyContext) = UseProperties(:ByOrder)
stable_hash(DataFrames(a=1:2, b=1:2); context=MyContext())"><pre class="notranslate"><code>using DataFrames
struct MyContext end
StableHashTraits.hash_method(::DataFrame, ::MyContext) = UseProperties(:ByOrder)
stable_hash(DataFrames(a=1:2, b=1:2); context=MyContext())
</code></pre></div>
<p dir="auto">By default the context is <code>StableHashTraits.GlobalContext</code> and fall back methods are defined
that pass through to the methods without a context argument (e.g. <code>hash_method(x, context) = hash_method(x)</code>)</p>
<p dir="auto">In this way, you only need to define methods for the types that have non-default behavior
for your context; furthermore, those who have no need of a particular context objects can
simply define methods without it.</p>
<h2 dir="auto"><a id="user-content-hashing-gotchas" class="anchor" aria-hidden="true" href="#hashing-gotchas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hashing gotcha's</h2>
<p dir="auto">Here-in is a list of hash collisions that have been deemed to be acceptable in practice:</p>
<ul dir="auto">
<li><code>stable_hash(sin) == stable_hash("Base.sin")</code></li>
<li><code>stable_hash([1,2,3]) == stable_hash((1,2,3))</code></li>
<li><code>stable_hash(DataFrame(x=1:10)) == stable_hash((; x=collect(1:10)))</code></li>
<li><code>stable_hash(1:10) == stable_hash((;start=1, stop=10))</code></li>
</ul>
</article></div>