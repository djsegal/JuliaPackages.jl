<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mcanalyzer" class="anchor" aria-hidden="true" href="#mcanalyzer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MCAnalyzer</h1>
<p><a href="https://travis-ci.org/vchuravy/MCAnalyzer.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b95678a8ce0e6d108fa5df993287f964504d7f71/68747470733a2f2f7472617669732d63692e6f72672f76636875726176792f4d43416e616c797a65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/vchuravy/MCAnalyzer.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><code>MCAnalyzer.jl</code> provides a interface to the <a href="https://software.intel.com/en-us/articles/intel-architecture-code-analyzer" rel="nofollow"><em>Intel Architecture Code Analyzer</em></a> and <a href="https://www.llvm.org/docs/CommandGuide/llvm-mca.html" rel="nofollow"><em>LLVM MCA</em></a> for Julia functions.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>First manually install <code>iaca</code> from <a href="https://software.intel.com/en-us/articles/intel-architecture-code-analyzer" rel="nofollow">https://software.intel.com/en-us/articles/intel-architecture-code-analyzer</a> and then install this package.
If <code>iaca</code> is not on your path set the environment variable <code>IACA_PATH=...</code> to point to the <code>iaca</code> binary that you downloaded from Intel.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><code>MCAnalyzer.jl</code> provides the two functions <code>mark_start</code> and <code>mark_end</code>  both will insert some special markers into you code.
<code>iaca</code> will then analyse the generated object file and only analyse the parts in between the two markers.</p>
<p>To invoke <code>iaca</code> on a specific method that has been annotated use <code>analyze(func, tt)</code> where <code>tt</code> is a tuple of types that gives the type signature of the method.</p>
<h3><a id="user-content-supported-architectures" class="anchor" aria-hidden="true" href="#supported-architectures"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported architectures</h3>
<ul>
<li><code>HSW</code>: Haswell</li>
<li><code>BDW</code>: Broadwell</li>
<li><code>SKL</code>: Skylake</li>
<li><code>SKX</code>: Skylake-X</li>
</ul>
<p>By default <code>analyse</code> will use <code>SKL</code>, but you can supply a target architecture through <code>analyze(func, tt, :SKX)</code></p>
<h3><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h3>
<p><code>iaca</code> 3.0 currently only supports <em>throughput</em> analysis. This means that currently it is only useful to analyze loops.
<code>mark_start()</code> has to be in the beginning of the loop body and <code>mark_end()</code> has to be after the loop. <code>iaca</code> will then treat the loop as an infite loop.</p>
<p>It is recommended to use <code>@code_llvm</code>/<code>@code_native</code> to inspect the IR/assembly and check that the annotations are
in the expected place.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MCAnalyzer

<span class="pl-k">function</span> <span class="pl-en">mysum</span>(A)
    acc <span class="pl-k">=</span> <span class="pl-c1">zero</span>(<span class="pl-c1">eltype</span>(A))
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(A)
        <span class="pl-c1">mark_start</span>()
        <span class="pl-c1">@inbounds</span> acc <span class="pl-k">+=</span> A[i]
    <span class="pl-k">end</span>
    <span class="pl-c1">mark_end</span>()
    <span class="pl-k">return</span> acc
<span class="pl-k">end</span>

<span class="pl-c1">analyze</span>(mysum, Tuple{Vector{Float64}})</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MCAnalyzer

<span class="pl-k">function</span> <span class="pl-en">f</span>(y<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
        <span class="pl-c1">mark_start</span>()
        x <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>i
    <span class="pl-k">end</span>
    <span class="pl-c1">mark_end</span>()
    x
<span class="pl-k">end</span>

<span class="pl-c1">analyze</span>(f, Tuple{Float64})</pre></div>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MCAnalyzer

<span class="pl-k">function</span> <span class="pl-en">g</span>(y<span class="pl-k">::</span><span class="pl-c1">Float64</span>)
    x1 <span class="pl-k">=</span> x2 <span class="pl-k">=</span> x3 <span class="pl-k">=</span> x4 <span class="pl-k">=</span> x5 <span class="pl-k">=</span> x6 <span class="pl-k">=</span> x7 <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span><span class="pl-k">:</span><span class="pl-c1">100</span>
        <span class="pl-c1">mark_start</span>()
        x1 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>i
        x2 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>(i<span class="pl-k">+</span><span class="pl-c1">1</span>)
        x3 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>(i<span class="pl-k">+</span><span class="pl-c1">2</span>)
        x4 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>(i<span class="pl-k">+</span><span class="pl-c1">3</span>)
        x5 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>(i<span class="pl-k">+</span><span class="pl-c1">4</span>)
        x6 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>(i<span class="pl-k">+</span><span class="pl-c1">5</span>)
        x7 <span class="pl-k">+=</span> <span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">*</span>(i<span class="pl-k">+</span><span class="pl-c1">6</span>)
    <span class="pl-k">end</span>
    <span class="pl-c1">mark_end</span>()
    x1 <span class="pl-k">+</span> x2 <span class="pl-k">+</span> x3 <span class="pl-k">+</span> x4 <span class="pl-k">+</span> x5 <span class="pl-k">+</span> x6 <span class="pl-k">+</span> x7
<span class="pl-k">end</span>

<span class="pl-c1">analyze</span>(g, Tuple{Float64})</pre></div>
<h3><a id="user-content-advanced-usage" class="anchor" aria-hidden="true" href="#advanced-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Advanced usage</h3>
<h4><a id="user-content-switching-opt-level" class="anchor" aria-hidden="true" href="#switching-opt-level"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Switching opt-level</h4>
<div class="highlight highlight-source-julia"><pre>MCAnalyzer<span class="pl-k">.</span>optlevel[] <span class="pl-k">=</span> <span class="pl-c1">3</span>
<span class="pl-c1">analyze</span>(mysum, Tuple{Vector{Float64}}, <span class="pl-c1">:SKL</span>)</pre></div>
<h4><a id="user-content-changing-the-optimization-pipeline" class="anchor" aria-hidden="true" href="#changing-the-optimization-pipeline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changing the optimization pipeline</h4>
<div class="highlight highlight-source-julia"><pre><span class="pl-en">myoptimize!</span>(tm, mod) <span class="pl-k">=</span> <span class="pl-k">...</span>
<span class="pl-c1">analyze</span>(mysum. Tuple{Vector{Float64}}, <span class="pl-c1">:SKL</span>, <span class="pl-c"><span class="pl-c">#=</span>optimize!<span class="pl-c">=#</span></span> myoptimize!)</pre></div>
<h4><a id="user-content-changing-the-analyzer-tool" class="anchor" aria-hidden="true" href="#changing-the-analyzer-tool"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Changing the analyzer tool</h4>
<div class="highlight highlight-source-julia"><pre>MCAnalyzer<span class="pl-k">.</span>analyzer[] <span class="pl-k">=</span> MCAnalyzer<span class="pl-k">.</span>llvm_mca
<span class="pl-c1">analyze</span>(mysum, Tuple{Vector{Float64}})</pre></div>
<h2><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notes</h2>
<p><code>MCAnalyzer.jl</code> only supports version 3.0 of <code>iaca</code>. The <a href="https://software.intel.com/sites/default/files/managed/3d/23/intel-architecture-code-analyzer-3.0-users-guide.pdf" rel="nofollow">online documentation for version 3.0</a> is easily available, and contains a more detailed explanation and a few more examples.</p>
<ul>
<li>Version 3.0 only support [<code>Throughput Analysis</code>](<a href="https://software.intel.com/en-us/articles/intel-architecture-code-analyzer#Throughput" rel="nofollow">https://software.intel.com/en-us/articles/intel-architecture-code-analyzer#Throughput</a> Analysis)</li>
<li>The user guide for version 2.0 is available at <a href="https://progforperf.github.io/MCAnalyzer-Guide.pdf" rel="nofollow">https://progforperf.github.io/MCAnalyzer-Guide.pdf</a></li>
<li><a href="http://www.agner.org/optimize/" rel="nofollow">http://www.agner.org/optimize/</a></li>
</ul>
<h2><a id="user-content-acknowledgment" class="anchor" aria-hidden="true" href="#acknowledgment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgment</h2>
<ul>
<li>@maleadt for <a href="https://github.com/maleadt/LLVM.jl">LLVM.jl</a></li>
<li>@carnaval for <a href="https://github.com/carnaval/IACA.jl">IACA.jl</a> the original inspiration for this project</li>
</ul>
</article></div>