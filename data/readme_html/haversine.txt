<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-haversinejl" class="anchor" aria-hidden="true" href="#haversinejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Haversine.jl</h1>
<p><a href="https://travis-ci.com/techshot25/Haversine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/519976e6f876c7d300da6a0c26475fb2dbadd2e4ab39c5b89fb2a99b502d66ae/68747470733a2f2f7472617669732d63692e636f6d2f7465636873686f7432352f486176657273696e652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/techshot25/Haversine.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/techshot25/haversine-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cbad292513cc32aaa2ddb45922f7a74c01cbb21be961ced72d6e4f53c8fcb0cd/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7232386e75376768617372776777636a3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/r28nu7ghasrwgwcj?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/techshot25/Haversine.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/edfcd996b7bddd3fa0de9942b7da51d9facc5c95f41c1b5c8440592f1f17fcee/68747470733a2f2f636f6465636f762e696f2f67682f7465636873686f7432352f486176657273696e652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d5730564d364b44304357" alt="codecov" data-canonical-src="https://codecov.io/gh/techshot25/Haversine.jl/branch/master/graph/badge.svg?token=W0VM6KD0CW" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/techshot25/Haversine.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0a2ffe03438fdad903bda6f31f3a4691f8b70da4b845a6a06b45e41270a8104b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7465636873686f7432352f486176657273696e652e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/techshot25/Haversine.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<hr>
<p>Haversine (Great Circle) distance tools for Julia</p>
<p>This project contains helper geospatial tools using Haversine which assume a perfectly spherical earth to compute special geospatial functions. All the functions included are using pairwise distance and will require mapping to work on arrays. Contributions are welcome, submit a PR and I will review it as soon as I can.</p>
<h3><a id="user-content-haversinedistance" class="anchor" aria-hidden="true" href="#haversinedistance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HaversineDistance</h3>
<p>This uses the great circle distance to find the approximate distance between two coordinates assuming a perfectly spherical earth</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Haversine

p1 = [1, 2] # (lon, lat) in degrees
p2 = [3, 4]

# returns distance in meters
HaversineDistance(p1, p2)
&gt;&gt;&gt; 314283.25507368386
"><pre><span class="pl-k">using</span> Haversine

p1 <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> (lon, lat) in degrees</span>
p2 <span class="pl-k">=</span> [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]

<span class="pl-c"><span class="pl-c">#</span> returns distance in meters</span>
<span class="pl-c1">HaversineDistance</span>(p1, p2)
<span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">314283.25507368386</span></pre></div>
<h3><a id="user-content-haversinebearing" class="anchor" aria-hidden="true" href="#haversinebearing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HaversineBearing</h3>
<p>This returns the bearing/heading between from point 1 to point 2 in degrees</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Haversine

p1 = [1, 2] # (lon, lat) in degrees
p2 = [3, 4]

# returns heading in degrees
HaversineBearing(p1, p2)
&gt;&gt;&gt; 44.91272645906142
"><pre><span class="pl-k">using</span> Haversine

p1 <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> (lon, lat) in degrees</span>
p2 <span class="pl-k">=</span> [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]

<span class="pl-c"><span class="pl-c">#</span> returns heading in degrees</span>
<span class="pl-c1">HaversineBearing</span>(p1, p2)
<span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">44.91272645906142</span></pre></div>
<h3><a id="user-content-haversinedestination" class="anchor" aria-hidden="true" href="#haversinedestination"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>HaversineDestination</h3>
<p>Given a point, bearing, and distance, show the coordinates of the final destination</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Haversine

p = [1, 2] # (lon, lat) in degrees
θ = 30 # heading in degrees
d = 2 # distance in meters

# returns destination coordinates as Array[lon, lat]
HaversineDestination(p, θ, d)
&gt;&gt;&gt; 2-element Array{Float64,1}:
&gt;&gt;&gt;  1.0000089986979082
&gt;&gt;&gt;  2.000015576707113
"><pre><span class="pl-k">using</span> Haversine

p <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>] <span class="pl-c"><span class="pl-c">#</span> (lon, lat) in degrees</span>
θ <span class="pl-k">=</span> <span class="pl-c1">30</span> <span class="pl-c"><span class="pl-c">#</span> heading in degrees</span>
d <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> distance in meters</span>

<span class="pl-c"><span class="pl-c">#</span> returns destination coordinates as Array[lon, lat]</span>
<span class="pl-c1">HaversineDestination</span>(p, θ, d)
<span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
<span class="pl-k">&gt;&gt;&gt;</span>  <span class="pl-c1">1.0000089986979082</span>
<span class="pl-k">&gt;&gt;&gt;</span>  <span class="pl-c1">2.000015576707113</span></pre></div>
<h3><a id="user-content-broadcasting" class="anchor" aria-hidden="true" href="#broadcasting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Broadcasting</h3>
<p>All functions as of version 1.0.0 can now support broadcasting. Arguments can broadcast to support array-like inputs</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Haversine

p = [5, 4] # initial location
θ = [30, 60] # multiple headings
d = [10, 900000] # destination for each heading

HaversineDestination(p, θ, d)
&gt;&gt;&gt; 2-element Array{Array{Float64,1},1}:
&gt;&gt;&gt;  [5.000045075887166, 4.0000778835344555]
&gt;&gt;&gt;  [12.072951161820168, 8.006647216172182]
"><pre><span class="pl-k">using</span> Haversine

p <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">4</span>] <span class="pl-c"><span class="pl-c">#</span> initial location</span>
θ <span class="pl-k">=</span> [<span class="pl-c1">30</span>, <span class="pl-c1">60</span>] <span class="pl-c"><span class="pl-c">#</span> multiple headings</span>
d <span class="pl-k">=</span> [<span class="pl-c1">10</span>, <span class="pl-c1">900000</span>] <span class="pl-c"><span class="pl-c">#</span> destination for each heading</span>

<span class="pl-c1">HaversineDestination</span>(p, θ, d)
<span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Array{Float64,<span class="pl-c1">1</span>},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
<span class="pl-k">&gt;&gt;&gt;</span>  [<span class="pl-c1">5.000045075887166</span>, <span class="pl-c1">4.0000778835344555</span>]
<span class="pl-k">&gt;&gt;&gt;</span>  [<span class="pl-c1">12.072951161820168</span>, <span class="pl-c1">8.006647216172182</span>]</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Haversine

p1 = [[1, 2], [3, 4]] # multiple points
p2 = [[5, 1], [0, 9]]

HaversineBearing(p1, p2)
&gt;&gt;&gt; 2-element Array{Float64,1}:
&gt;&gt;&gt;  126.81261556373533
&gt;&gt;&gt;  -11.186184406292147
"><pre><span class="pl-k">using</span> Haversine

p1 <span class="pl-k">=</span> [[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">3</span>, <span class="pl-c1">4</span>]] <span class="pl-c"><span class="pl-c">#</span> multiple points</span>
p2 <span class="pl-k">=</span> [[<span class="pl-c1">5</span>, <span class="pl-c1">1</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">9</span>]]

<span class="pl-c1">HaversineBearing</span>(p1, p2)
<span class="pl-k">&gt;&gt;&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
<span class="pl-k">&gt;&gt;&gt;</span>  <span class="pl-c1">126.81261556373533</span>
<span class="pl-k">&gt;&gt;&gt;</span>  <span class="pl-k">-</span><span class="pl-c1">11.186184406292147</span></pre></div>
</article></div>