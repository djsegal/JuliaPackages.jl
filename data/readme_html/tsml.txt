<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto"> 
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fc5b0d1f49c6d81bb9e9d04b4d0a5b08f536a33e24bab663ef5135e3165ddf32/68747470733a2f2f76697369746f722d62616467652e6c616f62692e6963752f62616467653f706167655f69643d7070616c6d65732e54534d4c2e6a6c"><img src="https://camo.githubusercontent.com/fc5b0d1f49c6d81bb9e9d04b4d0a5b08f536a33e24bab663ef5135e3165ddf32/68747470733a2f2f76697369746f722d62616467652e6c616f62692e6963752f62616467653f706167655f69643d7070616c6d65732e54534d4c2e6a6c" alt="Visitor" data-canonical-src="https://visitor-badge.laobi.icu/badge?page_id=ppalmes.TSML.jl" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/4fc9db0c0dd8c4a412e795b8269e7cabb408329883b134f4fd1334711f518948/68747470733a2f2f69626d2e6769746875622e696f2f54534d4c2e6a6c2f74736d6c6c6f676f2f74736d6c6c6f676f31332e706e67"><img src="https://camo.githubusercontent.com/4fc9db0c0dd8c4a412e795b8269e7cabb408329883b134f4fd1334711f518948/68747470733a2f2f69626d2e6769746875622e696f2f54534d4c2e6a6c2f74736d6c6c6f676f2f74736d6c6c6f676f31332e706e67" alt="TSML Logo" width="250" data-canonical-src="https://ibm.github.io/TSML.jl/tsmllogo/tsmllogo13.png" style="max-width: 100%;"></a>
</p>
<p dir="auto"><a href="https://bestpractices.coreinfrastructure.org/projects/7094" rel="nofollow"><img src="https://camo.githubusercontent.com/dfd323c7a5ac117c81ccf3fc95d40ad797d482f97ab4e0e343056cf438cf50bc/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f373039342f6261646765" alt="OpenSSF Best Practices" data-canonical-src="https://bestpractices.coreinfrastructure.org/projects/7094/badge" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bd2787d9352ff2aa0ea7e595e07f764eae9d889c7d301e85a40b64fdfcb5ef6e/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d7070616c6d657326636f756e745f707269766174653d747275652673686f775f69636f6e733d7472756526686964653d636f6e7472696273"><img src="https://camo.githubusercontent.com/bd2787d9352ff2aa0ea7e595e07f764eae9d889c7d301e85a40b64fdfcb5ef6e/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d7070616c6d657326636f756e745f707269766174653d747275652673686f775f69636f6e733d7472756526686964653d636f6e7472696273" alt="Overall Stats" data-canonical-src="https://github-readme-stats.vercel.app/api?username=ppalmes&amp;count_private=true&amp;show_icons=true&amp;hide=contribs" style="max-width: 100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Help</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://ibm.github.io/TSML.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://ibm.github.io/TSML.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/IBM/TSML.jl/actions/workflows/ci.yml"><img src="https://github.com/IBM/TSML.jl/actions/workflows/ci.yml/badge.svg" alt="" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://julialang.slack.com" rel="nofollow"><img src="https://camo.githubusercontent.com/c192b6b30d22427a9ad86f7832a70c27f8dcbb028dae7dc2ca07181ef7dd9e13/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230736c61636b2d79656c6c6f772e737667" alt="" data-canonical-src="https://img.shields.io/badge/chat-on%20slack-yellow.svg" style="max-width: 100%;"></a> <a href="https://gitter.im/TSMLearning/community" rel="nofollow"><img src="https://camo.githubusercontent.com/6e67a683ed2377edfcc3fe7895b2878789000869c9d9fd6b4a3b3f3ef5e2284f/68747470733a2f2f6261646765732e6769747465722e696d2f7070616c6d65732f54534d4c2e6a6c2e737667" alt="" data-canonical-src="https://badges.gitter.im/ppalmes/TSML.jl.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
</div>
<h4 dir="auto"><a id="user-content-stargazers-over-time" class="anchor" aria-hidden="true" href="#stargazers-over-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stargazers over time</h4>
<p dir="auto"><a href="https://starchart.cc/IBM/TSML.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af82da2cbab7ffc5e92d06d80a2b0e1c8cd9744813bb6e81f5da5044064acffb/68747470733a2f2f7374617263686172742e63632f49424d2f54534d4c2e6a6c2e737667" alt="Stargazers over time" data-canonical-src="https://starchart.cc/IBM/TSML.jl.svg" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-tsml-timeseries-machine-learning-" class="anchor" aria-hidden="true" href="#tsml-timeseries-machine-learning-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TSML (Timeseries Machine Learning) <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fc5b0d1f49c6d81bb9e9d04b4d0a5b08f536a33e24bab663ef5135e3165ddf32/68747470733a2f2f76697369746f722d62616467652e6c616f62692e6963752f62616467653f706167655f69643d7070616c6d65732e54534d4c2e6a6c"><img src="https://camo.githubusercontent.com/fc5b0d1f49c6d81bb9e9d04b4d0a5b08f536a33e24bab663ef5135e3165ddf32/68747470733a2f2f76697369746f722d62616467652e6c616f62692e6963752f62616467653f706167655f69643d7070616c6d65732e54534d4c2e6a6c" alt="Visitor" data-canonical-src="https://visitor-badge.laobi.icu/badge?page_id=ppalmes.TSML.jl" style="max-width: 100%;"></a></h3>
<hr>
<p dir="auto"><strong>TSML</strong> is a package for time series data
processing, classification, clustering,
and prediction. It combines ML libraries
from Python's ScikitLearn (thru its complementary
<a href="https://github.com/IBM/AutoMLPipeline.jl">AutoMLPipeline</a>
package) and Julia MLs using
a common API and allows seamless ensembling
and integration of heterogenous ML libraries
to create complex models for robust time-series prediction.
The design/framework of this package is influenced heavily
by Samuel Jenkins' <a href="https://github.com/svs14/Orchestra.jl">Orchestra.jl</a>
and <a href="https://github.com/ppalmes/CombineML.jl">CombineML.jl</a> packages.
<strong>TSML</strong> is actively developed and tested in <code>Julia 1.0</code>
and above for Linux, MacOS, and Windows.</p>
<p dir="auto">Links to <strong>TSML</strong> demo, tutorial, and published JuliaCon paper:</p>
<ul dir="auto">
<li><a href="https://mybinder.org/v2/gh/IBM/TSML.jl/binder_support" rel="nofollow">TSML Binder Notebooks Live Demo</a></li>
<li><a href="https://github.com/IBM/TSML.jl/blob/master/docs/notebooks/StaticPlotting.jl.ipynb">Jupyter Notebook TSML Demo</a></li>
<li><a href="https://doi.org/10.21105/jcon.00051" rel="nofollow">JuliaCon 2019 Proceedings Paper</a> <a href="https://doi.org/10.21105/jcon.00051" rel="nofollow"><img src="https://camo.githubusercontent.com/303c979e0f3c53cbba9d56b09c3c64ce2669c4cb1c9632b654804cfd887e6aa0/68747470733a2f2f70726f63656564696e67732e6a756c6961636f6e2e6f72672f7061706572732f31302e32313130352f6a636f6e2e30303035312f7374617475732e737667" alt="DOI" data-canonical-src="https://proceedings.juliacon.org/papers/10.21105/jcon.00051/status.svg" style="max-width: 100%;"></a></li>
</ul>
<h4 dir="auto"><a id="user-content-package-features" class="anchor" aria-hidden="true" href="#package-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package Features</h4>
<ul dir="auto">
<li>Support for symbolic pipeline composition of transformers and learners</li>
<li>TS data type clustering/classification for automatic data discovery</li>
<li>TS aggregation based on date/time interval</li>
<li>TS imputation based on <code>symmetric</code> Nearest Neighbors</li>
<li>TS statistical metrics for data quality assessment</li>
<li>TS ML wrapper with more than 100+ libraries from scikitlearn and julia</li>
<li>TS date/value matrix conversion of 1-D TS using sliding windows for ML input</li>
<li>Common API wrappers for ML libs from JuliaML, PyCall, and RCall</li>
<li>Pipeline API allows high-level description of the processing workflow</li>
<li>Specific cleaning/normalization workflow based on data type</li>
<li>Automatic selection of optimised ML model</li>
<li>Automatic segmentation of time-series data into matrix form for ML training and  prediction</li>
<li>Easily extensible architecture by using just two main interfaces: fit and transform</li>
<li>Meta-ensembles for robust prediction</li>
<li>Support for threads and distributed computation for scalability, and speed</li>
</ul>
<h4 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h4>
<p dir="auto"><strong>TSML</strong> is in the Julia Official package registry.
The latest release can be installed at the Julia
prompt using Julia's package management
which is triggered by pressing <code>]</code> at the Julia prompt:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]
(v1.1) pkg&gt; add TSML"><pre>julia<span class="pl-k">&gt;</span> ]
(v1.<span class="pl-c1">1</span>) pkg<span class="pl-k">&gt;</span> add TSML</pre></div>
<p dir="auto">Or, equivalently, via the <code>Pkg</code> API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(&quot;TSML&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>TSML<span class="pl-pds">"</span></span>)</pre></div>
<h4 dir="auto"><a id="user-content-motivations" class="anchor" aria-hidden="true" href="#motivations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivations</h4>
<p dir="auto">Over the past years, the industrial sector has seen
many innovations brought about by automation.
Inherent in this automation is the installation of
sensor networks for status monitoring and data collection.
One of the major challenges in these data-rich
environments is how to extract and exploit
information from these large volume of data to
detect anomalies, discover patterns to reduce
downtimes and manufacturing errors, reduce energy usage, etc.</p>
<p dir="auto">To address these issues, we developed <strong>TSML</strong> package.
It leverages AI and ML libraries from ScikitLearn
and Julia as building blocks in processing huge amount of
industrial times series data. It has the following characteristics
described below.</p>
<h4 dir="auto"><a id="user-content-main-workflow" class="anchor" aria-hidden="true" href="#main-workflow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Main Workflow</h4>
<p dir="auto">The package assumes a two-column input composed of Dates and Values.
The first part of the workflow aggregates values based on the specified
date/time interval which minimizes occurrence of missing values and noise.
The aggregated data is then left-joined to the complete sequence of dates
in a specified date/time interval. Remaining missing values are replaced
by <code>k</code> nearest neighbors where <code>k</code> is the <code>symmetric</code> distance from the
location of missing value. This approach can be called several times until
there are no more missing values.</p>
<p dir="auto"><strong>TSML</strong> uses a pipeline of filters and transformers which iteratively calls
the <code>fit!</code> and <code>transform!</code> families of functions relying on multiple
dispatch to select the correct algorithm from the steps outlined above.</p>
<p dir="auto"><strong>TSML</strong> supports transforming time series data into matrix form for
ML training and prediction. <code>Dateifier</code> filter extracts the date
features and convert the values into matrix form parameterized by
the <em>size</em> and <em>stride</em> of the sliding window representing the
dimension of the input for ML training and prediction. Similar
workflow is done by the <code>Matrifier</code> filter to convert the time
series values into matrix form.</p>
<p dir="auto">The final part combines the dates matrix with the values matrix to
become input of the ML with the output representing the values
of the time periods to be predicted ahead of time.</p>
<p dir="auto">Machine learning functions in <strong>TSML</strong> are wrappers to the
corresponding Scikit-learn and native Julia ML libraries.
There are more than hundred classifiers and regression
functions available using a common API. In order to access these
Scikit-learn wrappers, one should load the related package
called <a href="https://github.com/IBM/AutoMLPipeline.jl">AutoMLPipeline</a>.</p>
<p dir="auto">Below are examples of the <code>Pipeline</code> workflow.</p>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-load-tsml-and-setup-filterstransformers" class="anchor" aria-hidden="true" href="#load-tsml-and-setup-filterstransformers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load TSML and setup filters/transformers</h5>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Setup source data and filters to aggregate and impute hourly
using TSML 

fname        = joinpath(dirname(pathof(TSML)),&quot;../data/testdata.csv&quot;)
csvread      = CSVDateValReader(Dict(:filename=&gt;fname,:dateformat=&gt;&quot;dd/mm/yyyy HH:MM&quot;))
aggregate    = DateValgator(Dict(:dateinterval=&gt;Dates.Hour(1)))   # aggregator
impute       = DateValNNer(Dict(:dateinterval=&gt;Dates.Hour(1)))    # imputer
chkstats     = Statifier(Dict(:processmissing=&gt;true))             # get statistics
normtonic    = Monotonicer(Dict()) # normalize monotonic data
chkoutlier   = Outliernicer(Dict(:dateinterval =&gt; Dates.Hour(1))) # normalize outliers"><pre><span class="pl-c"><span class="pl-c">#</span> Setup source data and filters to aggregate and impute hourly</span>
<span class="pl-k">using</span> TSML 

fname        <span class="pl-k">=</span> <span class="pl-c1">joinpath</span>(<span class="pl-c1">dirname</span>(<span class="pl-c1">pathof</span>(TSML)),<span class="pl-s"><span class="pl-pds">"</span>../data/testdata.csv<span class="pl-pds">"</span></span>)
csvread      <span class="pl-k">=</span> <span class="pl-c1">CSVDateValReader</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:filename</span><span class="pl-k">=&gt;</span>fname,<span class="pl-c1">:dateformat</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>dd/mm/yyyy HH:MM<span class="pl-pds">"</span></span>))
aggregate    <span class="pl-k">=</span> <span class="pl-c1">DateValgator</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:dateinterval</span><span class="pl-k">=&gt;</span>Dates<span class="pl-k">.</span><span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>)))   <span class="pl-c"><span class="pl-c">#</span> aggregator</span>
impute       <span class="pl-k">=</span> <span class="pl-c1">DateValNNer</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:dateinterval</span><span class="pl-k">=&gt;</span>Dates<span class="pl-k">.</span><span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>)))    <span class="pl-c"><span class="pl-c">#</span> imputer</span>
chkstats     <span class="pl-k">=</span> <span class="pl-c1">Statifier</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:processmissing</span><span class="pl-k">=&gt;</span><span class="pl-c1">true</span>))             <span class="pl-c"><span class="pl-c">#</span> get statistics</span>
normtonic    <span class="pl-k">=</span> <span class="pl-c1">Monotonicer</span>(<span class="pl-c1">Dict</span>()) <span class="pl-c"><span class="pl-c">#</span> normalize monotonic data</span>
chkoutlier   <span class="pl-k">=</span> <span class="pl-c1">Outliernicer</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:dateinterval</span> <span class="pl-k">=&gt;</span> Dates<span class="pl-k">.</span><span class="pl-c1">Hour</span>(<span class="pl-c1">1</span>))) <span class="pl-c"><span class="pl-c">#</span> normalize outliers</span></pre></div>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-pipeline-to-load-csv-data" class="anchor" aria-hidden="true" href="#pipeline-to-load-csv-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipeline to load csv data</h5>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pipexpr = csvread
data    = fit_transform!(pipexpr)
first(data,5)

5×2 DataFrame
│ Row │ Date                │ Value   │
│     │ DateTime            │ Float64 │
├─────┼─────────────────────┼─────────┤
│ 1   │ 2014-01-01T00:06:00 │ 10.0    │
│ 2   │ 2014-01-01T00:18:00 │ 10.0    │
│ 3   │ 2014-01-01T00:29:00 │ 10.0    │
│ 4   │ 2014-01-01T00:40:00 │ 9.9     │
│ 5   │ 2014-01-01T00:51:00 │ 9.9     │"><pre>pipexpr <span class="pl-k">=</span> csvread
data    <span class="pl-k">=</span> <span class="pl-c1">fit_transform!</span>(pipexpr)
<span class="pl-c1">first</span>(data,<span class="pl-c1">5</span>)

<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
│ Row │ Date                │ Value   │
│     │ DateTime            │ Float64 │
├─────┼─────────────────────┼─────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">06</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>    │
│ <span class="pl-c1">2</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">18</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>    │
│ <span class="pl-c1">3</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">29</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>    │
│ <span class="pl-c1">4</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">40</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">9.9</span>     │
│ <span class="pl-c1">5</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">51</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">9.9</span>     │</pre></div>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-pipeline-to-aggregate-and-check-statistics" class="anchor" aria-hidden="true" href="#pipeline-to-aggregate-and-check-statistics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipeline to aggregate and check statistics</h5>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pipexpr = csvread |&gt; aggregate |&gt; chkstats
stats   = fit_transform!(pipexpr)

1×26 DataFrame. Omitted printing of 19 columns
│ Row │ tstart              │ tend                │ sfreq    │ count │ max     │ min     │ median  │
│     │ DateTime            │ DateTime            │ Float64  │ Int64 │ Float64 │ Float64 │ Float64 │
├─────┼─────────────────────┼─────────────────────┼──────────┼───────┼─────────┼─────────┼─────────┤
│ 1   │ 2014-01-01T00:00:00 │ 2015-01-01T00:00:00 │ 0.999886 │ 3830  │ 18.8    │ 8.5     │ 10.35   │"><pre>pipexpr <span class="pl-k">=</span> csvread <span class="pl-k">|&gt;</span> aggregate <span class="pl-k">|&gt;</span> chkstats
stats   <span class="pl-k">=</span> <span class="pl-c1">fit_transform!</span>(pipexpr)

<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">26</span> DataFrame. Omitted printing of <span class="pl-c1">19</span> columns
│ Row │ tstart              │ tend                │ sfreq    │ count │ max     │ min     │ median  │
│     │ DateTime            │ DateTime            │ Float64  │ Int64 │ Float64 │ Float64 │ Float64 │
├─────┼─────────────────────┼─────────────────────┼──────────┼───────┼─────────┼─────────┼─────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">2015</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">0.999886</span> │ <span class="pl-c1">3830</span>  │ <span class="pl-c1">18.8</span>    │ <span class="pl-c1">8.5</span>     │ <span class="pl-c1">10.35</span>   │</pre></div>
<p dir="auto">Note: <code>fit_transform!</code> is equivalent to calling in sequence <code>fit!</code> and <code>transform!</code> functions.</p>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-pipeline-to-aggregate-impute-and-check-stats" class="anchor" aria-hidden="true" href="#pipeline-to-aggregate-impute-and-check-stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipeline to aggregate, impute, and check stats</h5>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pipexpr = csvread |&gt; aggregate |&gt; impute |&gt; chkstats
stats2  = fit_transform!(pipexpr)

1×26 DataFrame. Omitted printing of 19 columns
│ Row │ tstart              │ tend                │ sfreq    │ count │ max     │ min     │ median  │
│     │ DateTime            │ DateTime            │ Float64  │ Int64 │ Float64 │ Float64 │ Float64 │
├─────┼─────────────────────┼─────────────────────┼──────────┼───────┼─────────┼─────────┼─────────┤
│ 1   │ 2014-01-01T00:00:00 │ 2015-01-01T00:00:00 │ 0.999886 │ 8761  │ 18.8    │ 8.5     │ 10.0    │"><pre>pipexpr <span class="pl-k">=</span> csvread <span class="pl-k">|&gt;</span> aggregate <span class="pl-k">|&gt;</span> impute <span class="pl-k">|&gt;</span> chkstats
stats2  <span class="pl-k">=</span> <span class="pl-c1">fit_transform!</span>(pipexpr)

<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">26</span> DataFrame. Omitted printing of <span class="pl-c1">19</span> columns
│ Row │ tstart              │ tend                │ sfreq    │ count │ max     │ min     │ median  │
│     │ DateTime            │ DateTime            │ Float64  │ Int64 │ Float64 │ Float64 │ Float64 │
├─────┼─────────────────────┼─────────────────────┼──────────┼───────┼─────────┼─────────┼─────────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">2015</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">0.999886</span> │ <span class="pl-c1">8761</span>  │ <span class="pl-c1">18.8</span>    │ <span class="pl-c1">8.5</span>     │ <span class="pl-c1">10.0</span>    │</pre></div>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-pipeline-to-aggregate-impute-and-normalize-monotonic-data" class="anchor" aria-hidden="true" href="#pipeline-to-aggregate-impute-and-normalize-monotonic-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pipeline to aggregate, impute, and normalize monotonic data</h5>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pipexpr = csvread |&gt; aggregate |&gt; impute |&gt; normtonic  
fit_transform!(pipexpr)

8761×2 DataFrame
│ Row  │ Date                │ Value    │
│      │ DateTime            │ Float64? │
├──────┼─────────────────────┼──────────┤
│ 1    │ 2014-01-01T00:00:00 │ 10.0     │
│ 2    │ 2014-01-01T01:00:00 │ 9.9      │
│ 3    │ 2014-01-01T02:00:00 │ 10.0     │
│ 4    │ 2014-01-01T03:00:00 │ 10.0     │
│ 5    │ 2014-01-01T04:00:00 │ 10.0     │
│ 6    │ 2014-01-01T05:00:00 │ 10.0     │
│ 7    │ 2014-01-01T06:00:00 │ 10.0     │
⋮"><pre>pipexpr <span class="pl-k">=</span> csvread <span class="pl-k">|&gt;</span> aggregate <span class="pl-k">|&gt;</span> impute <span class="pl-k">|&gt;</span> normtonic  
<span class="pl-c1">fit_transform!</span>(pipexpr)

<span class="pl-c1">8761</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
│ Row  │ Date                │ Value    │
│      │ DateTime            │ Float64? │
├──────┼─────────────────────┼──────────┤
│ <span class="pl-c1">1</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>     │
│ <span class="pl-c1">2</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T01<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">9.9</span>      │
│ <span class="pl-c1">3</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T02<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>     │
│ <span class="pl-c1">4</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T03<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>     │
│ <span class="pl-c1">5</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T04<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>     │
│ <span class="pl-c1">6</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T05<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>     │
│ <span class="pl-c1">7</span>    │ <span class="pl-c1">2014</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T06<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">10.0</span>     │
⋮</pre></div>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-transforming-timeseries-data-into-matrix-form-for-ml-modeling" class="anchor" aria-hidden="true" href="#transforming-timeseries-data-into-matrix-form-for-ml-modeling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Transforming timeseries data into matrix form for ML Modeling</h5>
</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# create artificial timeseries data
datets  = DateTime(2018,1,1):Dates.Day(1):DateTime(2019,1,31) |&gt; collect
valuets = rand(1:100,length(datets))
ts      = DataFrame(Date=datets,Value=valuets)
@show first(ts,5);

5×2 DataFrame
│ Row │ Date                │ Value │
│     │ DateTime            │ Int64 │
├─────┼─────────────────────┼───────┤
│ 1   │ 2018-01-01T00:00:00 │ 56    │
│ 2   │ 2018-01-02T00:00:00 │ 93    │
│ 3   │ 2018-01-03T00:00:00 │ 40    │
│ 4   │ 2018-01-04T00:00:00 │ 15    │
│ 5   │ 2018-01-05T00:00:00 │ 78    │"><pre><span class="pl-c"><span class="pl-c">#</span> create artificial timeseries data</span>
datets  <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2018</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)<span class="pl-k">:</span>Dates<span class="pl-k">.</span><span class="pl-c1">Day</span>(<span class="pl-c1">1</span>)<span class="pl-k">:</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2019</span>,<span class="pl-c1">1</span>,<span class="pl-c1">31</span>) <span class="pl-k">|&gt;</span> collect
valuets <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>,<span class="pl-c1">length</span>(datets))
ts      <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(Date<span class="pl-k">=</span>datets,Value<span class="pl-k">=</span>valuets)
<span class="pl-c1">@show</span> <span class="pl-c1">first</span>(ts,<span class="pl-c1">5</span>);

<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">2</span> DataFrame
│ Row │ Date                │ Value │
│     │ DateTime            │ Int64 │
├─────┼─────────────────────┼───────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">2018</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">56</span>    │
│ <span class="pl-c1">2</span>   │ <span class="pl-c1">2018</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">02</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">93</span>    │
│ <span class="pl-c1">3</span>   │ <span class="pl-c1">2018</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">03</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">40</span>    │
│ <span class="pl-c1">4</span>   │ <span class="pl-c1">2018</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">04</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">15</span>    │
│ <span class="pl-c1">5</span>   │ <span class="pl-c1">2018</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">05</span>T00<span class="pl-k">:</span><span class="pl-c1">00</span><span class="pl-k">:</span><span class="pl-c1">00</span> │ <span class="pl-c1">78</span>    │</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Pipeline to concatinate matrified value and date series
args     = Dict(:ahead =&gt; 24,:size =&gt; 24,:stride =&gt; 5)
datemtr  = Dateifier(args)
valuemtr = Matrifier(args)
ppl      = datemtr + valuemtr
dateval  = fit_transform!(ppl,ts)
first(dateval,5)

5×33 DataFrame. Omitted printing of 21 columns
│ Row │ year  │ month │ day   │ hour  │ week  │ dow   │ doq   │ qoy   │ x1    │ x2    │ x3    │ x4    │
│     │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │
├─────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤
│ 1   │ 2019  │ 1     │ 7     │ 0     │ 2     │ 1     │ 7     │ 1     │ 94    │ 97    │ 18    │ 76    │
│ 2   │ 2019  │ 1     │ 2     │ 0     │ 1     │ 3     │ 2     │ 1     │ 99    │ 93    │ 65    │ 68    │
│ 3   │ 2018  │ 12    │ 28    │ 0     │ 52    │ 5     │ 89    │ 4     │ 88    │ 8     │ 59    │ 1     │
│ 4   │ 2018  │ 12    │ 23    │ 0     │ 51    │ 7     │ 84    │ 4     │ 76    │ 5     │ 6     │ 92    │
│ 5   │ 2018  │ 12    │ 18    │ 0     │ 51    │ 2     │ 79    │ 4     │ 6     │ 54    │ 66    │ 72    │"><pre><span class="pl-c"><span class="pl-c">#</span> Pipeline to concatinate matrified value and date series</span>
args     <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">:ahead</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">24</span>,<span class="pl-c1">:size</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">24</span>,<span class="pl-c1">:stride</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">5</span>)
datemtr  <span class="pl-k">=</span> <span class="pl-c1">Dateifier</span>(args)
valuemtr <span class="pl-k">=</span> <span class="pl-c1">Matrifier</span>(args)
ppl      <span class="pl-k">=</span> datemtr <span class="pl-k">+</span> valuemtr
dateval  <span class="pl-k">=</span> <span class="pl-c1">fit_transform!</span>(ppl,ts)
<span class="pl-c1">first</span>(dateval,<span class="pl-c1">5</span>)

<span class="pl-c1">5</span><span class="pl-k">×</span><span class="pl-c1">33</span> DataFrame. Omitted printing of <span class="pl-c1">21</span> columns
│ Row │ year  │ month │ day   │ hour  │ week  │ dow   │ doq   │ qoy   │ x1    │ x2    │ x3    │ x4    │
│     │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │
├─────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤
│ <span class="pl-c1">1</span>   │ <span class="pl-c1">2019</span>  │ <span class="pl-c1">1</span>     │ <span class="pl-c1">7</span>     │ <span class="pl-c1">0</span>     │ <span class="pl-c1">2</span>     │ <span class="pl-c1">1</span>     │ <span class="pl-c1">7</span>     │ <span class="pl-c1">1</span>     │ <span class="pl-c1">94</span>    │ <span class="pl-c1">97</span>    │ <span class="pl-c1">18</span>    │ <span class="pl-c1">76</span>    │
│ <span class="pl-c1">2</span>   │ <span class="pl-c1">2019</span>  │ <span class="pl-c1">1</span>     │ <span class="pl-c1">2</span>     │ <span class="pl-c1">0</span>     │ <span class="pl-c1">1</span>     │ <span class="pl-c1">3</span>     │ <span class="pl-c1">2</span>     │ <span class="pl-c1">1</span>     │ <span class="pl-c1">99</span>    │ <span class="pl-c1">93</span>    │ <span class="pl-c1">65</span>    │ <span class="pl-c1">68</span>    │
│ <span class="pl-c1">3</span>   │ <span class="pl-c1">2018</span>  │ <span class="pl-c1">12</span>    │ <span class="pl-c1">28</span>    │ <span class="pl-c1">0</span>     │ <span class="pl-c1">52</span>    │ <span class="pl-c1">5</span>     │ <span class="pl-c1">89</span>    │ <span class="pl-c1">4</span>     │ <span class="pl-c1">88</span>    │ <span class="pl-c1">8</span>     │ <span class="pl-c1">59</span>    │ <span class="pl-c1">1</span>     │
│ <span class="pl-c1">4</span>   │ <span class="pl-c1">2018</span>  │ <span class="pl-c1">12</span>    │ <span class="pl-c1">23</span>    │ <span class="pl-c1">0</span>     │ <span class="pl-c1">51</span>    │ <span class="pl-c1">7</span>     │ <span class="pl-c1">84</span>    │ <span class="pl-c1">4</span>     │ <span class="pl-c1">76</span>    │ <span class="pl-c1">5</span>     │ <span class="pl-c1">6</span>     │ <span class="pl-c1">92</span>    │
│ <span class="pl-c1">5</span>   │ <span class="pl-c1">2018</span>  │ <span class="pl-c1">12</span>    │ <span class="pl-c1">18</span>    │ <span class="pl-c1">0</span>     │ <span class="pl-c1">51</span>    │ <span class="pl-c1">2</span>     │ <span class="pl-c1">79</span>    │ <span class="pl-c1">4</span>     │ <span class="pl-c1">6</span>     │ <span class="pl-c1">54</span>    │ <span class="pl-c1">66</span>    │ <span class="pl-c1">72</span>    │</pre></div>
<ul dir="auto">
<li>
<h5 dir="auto"><a id="user-content-ml-modeling-and-prediction" class="anchor" aria-hidden="true" href="#ml-modeling-and-prediction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ML Modeling and Prediction</h5>
</li>
</ul>
<p dir="auto">We can use the matrified dateval as input features for prediction/classication.
Let's create a dummy response consisting of <code>yes</code> or <code>no</code> and use Random Forest
to learn the mapping. More examples of ML modeling can be found in TSML's
complementary packages: <a href="https://github.com/IBM/AutoMLPipeline.jl">AutoMLPipeline</a> and
<a href="https://github.com/IBM/AMLPipelineBase.jl">AMLPipelineBase</a>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="target        = rand([&quot;yes&quot;,&quot;no&quot;],nrow(dateval))
rf            = RandomForest()
accuracy(x,y) = score(:accuracy,x,y)
crossvalidate(rf,dateval,target,accuracy)

fold: 1, 14.285714285714285
fold: 2, 57.14285714285714
fold: 3, 71.42857142857143
fold: 4, 85.71428571428571
fold: 5, 57.14285714285714
fold: 6, 57.14285714285714
fold: 7, 57.14285714285714
fold: 8, 71.42857142857143
fold: 9, 42.857142857142854
fold: 10, 71.42857142857143
(mean = 58.57142857142857, std = 19.57600456294711, folds = 10)"><pre>target        <span class="pl-k">=</span> <span class="pl-c1">rand</span>([<span class="pl-s"><span class="pl-pds">"</span>yes<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>no<span class="pl-pds">"</span></span>],<span class="pl-c1">nrow</span>(dateval))
rf            <span class="pl-k">=</span> <span class="pl-c1">RandomForest</span>()
<span class="pl-en">accuracy</span>(x,y) <span class="pl-k">=</span> <span class="pl-c1">score</span>(<span class="pl-c1">:accuracy</span>,x,y)
<span class="pl-c1">crossvalidate</span>(rf,dateval,target,accuracy)

fold<span class="pl-k">:</span> <span class="pl-c1">1</span>, <span class="pl-c1">14.285714285714285</span>
fold<span class="pl-k">:</span> <span class="pl-c1">2</span>, <span class="pl-c1">57.14285714285714</span>
fold<span class="pl-k">:</span> <span class="pl-c1">3</span>, <span class="pl-c1">71.42857142857143</span>
fold<span class="pl-k">:</span> <span class="pl-c1">4</span>, <span class="pl-c1">85.71428571428571</span>
fold<span class="pl-k">:</span> <span class="pl-c1">5</span>, <span class="pl-c1">57.14285714285714</span>
fold<span class="pl-k">:</span> <span class="pl-c1">6</span>, <span class="pl-c1">57.14285714285714</span>
fold<span class="pl-k">:</span> <span class="pl-c1">7</span>, <span class="pl-c1">57.14285714285714</span>
fold<span class="pl-k">:</span> <span class="pl-c1">8</span>, <span class="pl-c1">71.42857142857143</span>
fold<span class="pl-k">:</span> <span class="pl-c1">9</span>, <span class="pl-c1">42.857142857142854</span>
fold<span class="pl-k">:</span> <span class="pl-c1">10</span>, <span class="pl-c1">71.42857142857143</span>
(mean <span class="pl-k">=</span> <span class="pl-c1">58.57142857142857</span>, std <span class="pl-k">=</span> <span class="pl-c1">19.57600456294711</span>, folds <span class="pl-k">=</span> <span class="pl-c1">10</span>)</pre></div>
<h2 dir="auto"><a id="user-content-extending-tsml" class="anchor" aria-hidden="true" href="#extending-tsml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extending TSML</h2>
<p dir="auto">If you want to add your own filter or transformer or learner,
take note that <code>filters</code> and <code>transformers</code> process the
input features but ignores the output argument. On the other hand,
<code>learners</code> process both their input and output arguments during <code>fit!</code>
while <code>transform!</code> expects one input argument in all cases.</p>
<p dir="auto">The first step is to import the abstract types and define your own mutable structure
as subtype of either Learner or Transformer. Next is to import the <code>fit!</code> and
<code>transform!</code> functions so that you can overload them. Also, you must
load the DataFrames package because it is the main format for data processing.
Finally, implement your own <code>fit</code> and <code>transform</code> and export them.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  using DataFrames
  using TSML.AbsTypes

  # import functions for overloading
  import TSML.AbsTypes: fit!, transform!

  # export the new definitions for dynamic dispatch
  export fit!, transform!, MyFilter

  # define your filter structure
  mutable struct MyFilter &lt;: Transformer
    name::String
    model::Dict
    args::Dict
    function MyFilter(args::Dict())
        ....
    end
  end

# define your fit! function.
  function fit!(fl::MyFilter, inputfeatures::DataFrame, target::Vector=Vector())
       ....
  end

  #define your transform! function
  function transform!(fl::MyFilter, inputfeatures::DataFrame)::DataFrame
       ....
  end"><pre>  <span class="pl-k">using</span> DataFrames
  <span class="pl-k">using</span> TSML<span class="pl-k">.</span>AbsTypes

  <span class="pl-c"><span class="pl-c">#</span> import functions for overloading</span>
  <span class="pl-k">import</span> TSML<span class="pl-k">.</span>AbsTypes<span class="pl-k">:</span> fit!, transform!

  <span class="pl-c"><span class="pl-c">#</span> export the new definitions for dynamic dispatch</span>
  <span class="pl-k">export</span> fit!, transform!, MyFilter

  <span class="pl-c"><span class="pl-c">#</span> define your filter structure</span>
  <span class="pl-k">mutable struct</span> MyFilter <span class="pl-k">&lt;:</span> <span class="pl-c1">Transformer</span>
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
    model<span class="pl-k">::</span><span class="pl-c1">Dict</span>
    args<span class="pl-k">::</span><span class="pl-c1">Dict</span>
    <span class="pl-k">function</span> <span class="pl-en">MyFilter</span>(args<span class="pl-k">::</span><span class="pl-c1">Dict</span>())
        <span class="pl-k">....</span>
    <span class="pl-k">end</span>
  <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> define your fit! function.</span>
  <span class="pl-k">function</span> <span class="pl-en">fit!</span>(fl<span class="pl-k">::</span><span class="pl-c1">MyFilter</span>, inputfeatures<span class="pl-k">::</span><span class="pl-c1">DataFrame</span>, target<span class="pl-k">::</span><span class="pl-c1">Vector</span><span class="pl-k">=</span><span class="pl-c1">Vector</span>())
       <span class="pl-k">....</span>
  <span class="pl-k">end</span>

  <span class="pl-c"><span class="pl-c">#</span>define your transform! function</span>
  <span class="pl-k">function</span> <span class="pl-en">transform!</span>(fl<span class="pl-k">::</span><span class="pl-c1">MyFilter</span>, inputfeatures<span class="pl-k">::</span><span class="pl-c1">DataFrame</span>)<span class="pl-k">::</span><span class="pl-c1">DataFrame</span>
       <span class="pl-k">....</span>
  <span class="pl-k">end</span></pre></div>
<p dir="auto">Remember that the main format to exchange data is dataframe which requires <code>transform!</code>
output to return a dataframe. The features as input for fit! and transform! shall
be in dataframe format too. This is necessary so that
the pipeline passes the dataframe format consistently to
its corresponding filters or transformers or learners. Once you have
create this transformer, you can use plug is as part of the pipeline element
together with the other learners and transformers.</p>
<h2 dir="auto"><a id="user-content-feature-requests-and-contributions" class="anchor" aria-hidden="true" href="#feature-requests-and-contributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Feature Requests and Contributions</h2>
<p dir="auto">We welcome contributions, feature requests, and suggestions. Here is the link to open an <a href="https://github.com/IBM/TSML.jl/issues">issue</a> for any problems you encounter. If you want to contribute, please follow the guidelines in <a href="https://github.com/IBM/TSML.jl/blob/master/CONTRIBUTORS.md">contributors page</a>.</p>
<h2 dir="auto"><a id="user-content-help-usage" class="anchor" aria-hidden="true" href="#help-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Help usage</h2>
<p dir="auto">Usage questions can be posted in:</p>
<ul dir="auto">
<li><a href="https://julialang.org/community/" rel="nofollow">Julia Community</a></li>
<li><a href="https://gitter.im/TSMLearning/community" rel="nofollow">Gitter TSML Community</a></li>
<li><a href="https://discourse.julialang.org/" rel="nofollow">Julia Discourse forum</a></li>
</ul>
</article></div>