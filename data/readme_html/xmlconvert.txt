<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-xmlconvert" class="anchor" aria-hidden="true" href="#xmlconvert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>XMLconvert</h1>
<h1><a id="user-content-this-package-is-deprecated-and-no-longer-maintained" class="anchor" aria-hidden="true" href="#this-package-is-deprecated-and-no-longer-maintained"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This package is deprecated and no longer maintained.</h1>
<p><a href="https://travis-ci.org/bcbi/XMLconvert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff055d803c1a789610a78f3478924e0bc8c48a701194d35460c1e385453d7bdd/68747470733a2f2f7472617669732d63692e6f72672f626362692f584d4c636f6e766572742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/bcbi/XMLconvert.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/bcbi/XMLconvert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/75b0437aad635e2817f23f86426f0089ece7b9512344af5662ebb08add3da1b7/68747470733a2f2f636f6465636f762e696f2f67682f626362692f584d4c636f6e766572742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/bcbi/XMLconvert.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements a few simple XML conversions. As of now, we can convert XMLs into nested <code>MultiDict</code> objects from the <a href="https://github.com/JuliaLang/DataStructures.jl">DataStructures</a> package. We can also take an XML that has been converted to a         nested <code>MultiDict</code> and "flatten" the hierarchical structure into a non-nested <code>Dict</code>. Additionally, we can convert XMLs to JSONs using the nested <code>MultiDict</code> objects as an intermediary. Note that as of this writing, we drop the attributes of the XML.</p>
<h3><a id="user-content-initial-setup" class="anchor" aria-hidden="true" href="#initial-setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Initial Setup</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;XMLconvert&quot;)
"><pre lang="{Julia}"><code>Pkg.add("XMLconvert")
</code></pre></div>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h3>
<p>For our examples we consider the following simple XML document. This toy example was borrowed (with slight modification) from the <a href="https://github.com/JuliaLang/LightXML.jl">LightXML</a> package.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;bookstore&gt;
  &lt;book&gt;
    &lt;title&gt;Biography of John Adams&lt;/title&gt;
    &lt;author&gt;David Smith&lt;/author&gt;
    &lt;author&gt;James Jones&lt;/author&gt;
    &lt;year&gt;2005&lt;/year&gt;
    &lt;price&gt;30.00&lt;/price&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;Introduction to Templates in C++&lt;/title&gt;
    &lt;author&gt;Samantha Black&lt;/author&gt;
    &lt;year&gt;2005&lt;/year&gt;
    &lt;price&gt;29.99&lt;/price&gt;
  &lt;/book&gt;
  &lt;owner&gt;
    &lt;name&gt;Henry&lt;/name&gt;
    &lt;address&gt;
      &lt;state&gt;CA&lt;/state&gt;
      &lt;street&gt;123 Jones Avenue&lt;/street&gt;
      &lt;zip&gt;12345&lt;/zip&gt;
    &lt;/address&gt;
    &lt;age&gt;59&lt;/age&gt;
  &lt;/owner&gt;
&lt;/bookstore&gt;
"><pre lang="{XML}"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;bookstore&gt;
  &lt;book&gt;
    &lt;title&gt;Biography of John Adams&lt;/title&gt;
    &lt;author&gt;David Smith&lt;/author&gt;
    &lt;author&gt;James Jones&lt;/author&gt;
    &lt;year&gt;2005&lt;/year&gt;
    &lt;price&gt;30.00&lt;/price&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;Introduction to Templates in C++&lt;/title&gt;
    &lt;author&gt;Samantha Black&lt;/author&gt;
    &lt;year&gt;2005&lt;/year&gt;
    &lt;price&gt;29.99&lt;/price&gt;
  &lt;/book&gt;
  &lt;owner&gt;
    &lt;name&gt;Henry&lt;/name&gt;
    &lt;address&gt;
      &lt;state&gt;CA&lt;/state&gt;
      &lt;street&gt;123 Jones Avenue&lt;/street&gt;
      &lt;zip&gt;12345&lt;/zip&gt;
    &lt;/address&gt;
    &lt;age&gt;59&lt;/age&gt;
  &lt;/owner&gt;
&lt;/bookstore&gt;
</code></pre></div>
<p>Suppose we copy and paste the above into a file called <code>ex1.xml</code>.</p>
<h3><a id="user-content-reading-in-xml-document" class="anchor" aria-hidden="true" href="#reading-in-xml-document"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading in XML document</h3>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using XMLconvert

filename = &quot;ex1.xml&quot;

# Read in XML and get its root
xdoc = parse_file(filename)
xroot = root(xdoc)

display(xroot)
"><pre lang="{Julia}"><code>using XMLconvert

filename = "ex1.xml"

# Read in XML and get its root
xdoc = parse_file(filename)
xroot = root(xdoc)

display(xroot)
</code></pre></div>
<p>Alternatively, when working with small XMLs, we can parse directly from a string rather than from the .xml file on disk. Note that we must escape out the quotation marks in the XML document.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content=" # Note the need to escape out quotation marks
xmlstr = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;
&lt;bookstore&gt;
  &lt;book&gt;
    &lt;title&gt;Introduction to Templates in C++&lt;/title&gt;
    &lt;author&gt;Samantha Black&lt;/author&gt;
    &lt;year&gt;2005&lt;/year&gt;
    &lt;price&gt;29.99&lt;/price&gt;
  &lt;/book&gt;
  &lt;owner&gt;
    &lt;name&gt;Henry&lt;/name&gt;
  &lt;/owner&gt;
&lt;/bookstore&gt;
&quot;
xdoc = parse_string(xmlstr)
"><pre lang="{Julia}"><code> # Note the need to escape out quotation marks
xmlstr = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;bookstore&gt;
  &lt;book&gt;
    &lt;title&gt;Introduction to Templates in C++&lt;/title&gt;
    &lt;author&gt;Samantha Black&lt;/author&gt;
    &lt;year&gt;2005&lt;/year&gt;
    &lt;price&gt;29.99&lt;/price&gt;
  &lt;/book&gt;
  &lt;owner&gt;
    &lt;name&gt;Henry&lt;/name&gt;
  &lt;/owner&gt;
&lt;/bookstore&gt;
"
xdoc = parse_string(xmlstr)
</code></pre></div>
<br>
<h3><a id="user-content-converting-xml-to-multidict" class="anchor" aria-hidden="true" href="#converting-xml-to-multidict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Converting XML to <code>MultiDict</code></h3>
<p>In many cases, it is desirable to convert an XML to a more native Julia object. This can be useful for unpacking elements of the XML and flattening out the structure of data. The <code>xml2dict()</code> function takes an XML's root (from above example) and converts the XML to a nested <code>MultiDict</code> object.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# convert to MultiDict
mdict = xml2dict(xroot)
"><pre lang="{Julia}"><code># convert to MultiDict
mdict = xml2dict(xroot)
</code></pre></div>
<p>We can take a look at the structure of of the <code>MultiDict</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="# print key structure of the MultiDict
show_key_structure(mdict)
"><pre lang="{Julia}"><code># print key structure of the MultiDict
show_key_structure(mdict)
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="-book
    -author
    -author
    -price
    -year
    -title
-book
    -author
    -price
    -year
    -title
-owner
    -name
    -age
    -address
        -zip
        -street
        -state
"><pre><code>-book
    -author
    -author
    -price
    -year
    -title
-book
    -author
    -price
    -year
    -title
-owner
    -name
    -age
    -address
        -zip
        -street
        -state
</code></pre></div>
<br>
<h3><a id="user-content-extracting-elements-from-multidict" class="anchor" aria-hidden="true" href="#extracting-elements-from-multidict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extracting Elements from <code>MultiDict</code></h3>
<p>Knowing the key structure of the XML we have parsed into a <code>MultiDict</code>, we can now access the elements much like we would using a standard <code>Dict</code> from Base Julia.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="mdict[&quot;book&quot;][2][&quot;title&quot;][1]        # &quot;Introduction to Templates in C++&quot;
"><pre lang="{Julia}"><code>mdict["book"][2]["title"][1]        # "Introduction to Templates in C++"
</code></pre></div>
<br>
<h3><a id="user-content-flattening-nested-multidict" class="anchor" aria-hidden="true" href="#flattening-nested-multidict"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Flattening Nested <code>MultiDict</code></h3>
<p>It is also frequently useful to take the hierarchical structure of an XML and "flatten" it to some data format with fewer dimensions. This makes accessing elements much simpler. This is implemented in the <code>flatten()</code> function, which when given a nested <code>MultiDict</code> object returns a single "flat" <code>Dict</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="xdoc = parse_file(filename)
xroot = root(xdoc)
mdict = xml2dict(xroot)

fdict = flatten(mdict)
display(fdict)
"><pre lang="{Julia}"><code>xdoc = parse_file(filename)
xroot = root(xdoc)
mdict = xml2dict(xroot)

fdict = flatten(mdict)
display(fdict)
</code></pre></div>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Dict{Any,Any} with 9 entries:
  &quot;book-price&quot;           =&gt; Any[30.0,29.99]
  &quot;book-author&quot;          =&gt; Any[&quot;David Smith&quot;,&quot;James Jones&quot;,&quot;Samantha Black&quot;]
  &quot;book-year&quot;            =&gt; Any[2005,2005]
  &quot;owner-address-zip&quot;    =&gt; Any[12345]
  &quot;owner-address-street&quot; =&gt; Any[&quot;123 Jones Avenue&quot;]
  &quot;owner-name&quot;           =&gt; Any[&quot;Henry&quot;]
  &quot;owner-age&quot;            =&gt; Any[59]
  &quot;book-title&quot;           =&gt; Any[&quot;Biography of John Adams&quot;,&quot;Introduction to Templa…
  &quot;owner-address-state&quot;  =&gt; Any[&quot;CA&quot;]
"><pre><code>Dict{Any,Any} with 9 entries:
  "book-price"           =&gt; Any[30.0,29.99]
  "book-author"          =&gt; Any["David Smith","James Jones","Samantha Black"]
  "book-year"            =&gt; Any[2005,2005]
  "owner-address-zip"    =&gt; Any[12345]
  "owner-address-street" =&gt; Any["123 Jones Avenue"]
  "owner-name"           =&gt; Any["Henry"]
  "owner-age"            =&gt; Any[59]
  "book-title"           =&gt; Any["Biography of John Adams","Introduction to Templa…
  "owner-address-state"  =&gt; Any["CA"]
</code></pre></div>
<p>As we can see above, this produces a single (non-nested) <code>Dict</code> where the keys are a string concatenation of the keys in the <code>MultiDict</code> corresponding to the hierarchical paths of their respective elements. And of course, the elements are simply the elements from the nested <code>MultiDict</code> (e.g., <code>Array</code>s of strings or numeric values).</p>
<p>Although this kind of flattening is very often useful, we note that removing the original hierarchical structure loses some information. For example, as we see above, the returned <code>Dict</code> no longer conveys the information about authorship of the two books in our example. The authors and books are both listed, but we can't say who wrote which book.</p>
<br>
<h3><a id="user-content-converting-xml-to-json" class="anchor" aria-hidden="true" href="#converting-xml-to-json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Converting XML to JSON</h3>
<p>If we wanted to convert the above XML to JSON we simply pass the parsed XML's root to the <code>xml2json()</code> function.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="xdoc = parse_file(filename)
xroot = root(xdoc)

json_string = xml2json(xroot)
print(json_string)
"><pre lang="{Julia}"><code>xdoc = parse_file(filename)
xroot = root(xdoc)

json_string = xml2json(xroot)
print(json_string)
</code></pre></div>
<p>This produces a the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="{
&quot;bookstore&quot;:

    {
    &quot;book&quot;:[
        {
        &quot;author&quot;:[&quot;David Smith&quot;,&quot;James Jones&quot;],
        &quot;price&quot;:30.0,
        &quot;year&quot;:2005,
        &quot;title&quot;:&quot;Biography of John Adams&quot;
        },
        {
        &quot;author&quot;:&quot;Samantha Black&quot;,
        &quot;price&quot;:29.99,
        &quot;year&quot;:2005,
        &quot;title&quot;:&quot;Introduction to Templates in C++&quot;
        }
    ],
    &quot;owner&quot;:
        {
        &quot;name&quot;:&quot;Henry&quot;,
        &quot;age&quot;:59,
        &quot;address&quot;:
            {
            &quot;zip&quot;:12345,
            &quot;street&quot;:&quot;123 Jones Avenue&quot;,
            &quot;state&quot;:&quot;CA&quot;
            }
        }
    }
}
"><pre lang="{JSON}"><code>{
"bookstore":

    {
    "book":[
        {
        "author":["David Smith","James Jones"],
        "price":30.0,
        "year":2005,
        "title":"Biography of John Adams"
        },
        {
        "author":"Samantha Black",
        "price":29.99,
        "year":2005,
        "title":"Introduction to Templates in C++"
        }
    ],
    "owner":
        {
        "name":"Henry",
        "age":59,
        "address":
            {
            "zip":12345,
            "street":"123 Jones Avenue",
            "state":"CA"
            }
        }
    }
}
</code></pre></div>
<br>
<h3><a id="user-content-write-json-to-disk" class="anchor" aria-hidden="true" href="#write-json-to-disk"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Write JSON to Disk</h3>
<p>Finally, we can simply write that string to disk using Julia's standard <code>write()</code> function.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="f = open(&quot;ex1.json&quot;, &quot;w&quot;)
write(f, json_string)
close(f)
"><pre lang="{Julia}"><code>f = open("ex1.json", "w")
write(f, json_string)
close(f)
</code></pre></div>
<br>
<h3><a id="user-content-spacing-and-newline-characters" class="anchor" aria-hidden="true" href="#spacing-and-newline-characters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Spacing and Newline Characters</h3>
<p>Note that the <code>xml2json()</code> function takes two optional arguments. The first controls the spacing of the indentation in the resulting JSON; this defaults to 4 (some prefer 8). The second optional argument (and therefore, third positional argument) controls how newline characters are handled. By default, this replaces <code>\n</code> with <code>\\n</code> in the JSON's text fields. This produces valid JSON documents.</p>
<br>
<h3><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><em>Caveats</em></h3>
<p>This package is under active development. Please notify us of bugs or proposed improvements by submitting an issue or pull request.</p>
</article></div>