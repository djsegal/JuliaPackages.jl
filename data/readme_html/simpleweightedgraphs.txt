<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-simpleweightedgraphs" class="anchor" aria-hidden="true" href="#simpleweightedgraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SimpleWeightedGraphs</h1>
<p><a href="https://travis-ci.org/JuliaGraphs/SimpleWeightedGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4aa14d922c2cc63c14e07155ffa5a7c7d3de090/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614772617068732f53696d706c6557656967687465644772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphs/SimpleWeightedGraphs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaGraphs/SimpleWeightedGraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9a77c3d0d24f0f4355f7427e457c317554917027/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614772617068732f53696d706c6557656967687465644772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGraphs/SimpleWeightedGraphs.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Edge-Weighted Graphs for <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a>.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LightGraphs, SimpleWeightedGraphs

g <span class="pl-k">=</span> <span class="pl-c1">SimpleWeightedGraph</span>(<span class="pl-c1">3</span>)  <span class="pl-c"><span class="pl-c">#</span> or use `SimpleWeightedDiGraph` for directed graphs</span>
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.5</span>)
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">0.8</span>)
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>, <span class="pl-c1">2.0</span>)

<span class="pl-c"><span class="pl-c">#</span> find the shortest path from vertex 1 to vertex 3 taking weights into account.</span>
<span class="pl-c1">enumerate_paths</span>(<span class="pl-c1">dijkstra_shortest_paths</span>(g, <span class="pl-c1">1</span>), <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> reweight the edge from 1 to 2</span>
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">1.6</span>)

<span class="pl-c"><span class="pl-c">#</span> rerun the shortest path calculation from 1 to 3</span>
<span class="pl-c1">enumerate_paths</span>(<span class="pl-c1">dijkstra_shortest_paths</span>(g, <span class="pl-c1">1</span>), <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> it's possible to build the graph from arrays of sources, destinations and weights</span>
sources <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
destinations <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">3</span>]
weights <span class="pl-k">=</span> [<span class="pl-c1">0.5</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">2.0</span>]
g <span class="pl-k">=</span> <span class="pl-c1">SimpleWeightedGraph</span>(sources, destinations, weights)

<span class="pl-c"><span class="pl-c">#</span> the combine keyword handles repeated pairs (sum by default)</span>
g <span class="pl-k">=</span> <span class="pl-c1">SimpleWeightedGraph</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>], [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], [<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]; combine <span class="pl-k">=</span> <span class="pl-k">+</span>)
g<span class="pl-k">.</span>weights[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>] <span class="pl-k">==</span> g<span class="pl-k">.</span>weights[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">3</span> <span class="pl-c"><span class="pl-c">#</span> true</span>

<span class="pl-c"><span class="pl-c">#</span> WARNING: unexpected results might occur with non-associative combine functions</span>

<span class="pl-c"><span class="pl-c">#</span> notice that weights are indexed by [destination, source]</span>
s <span class="pl-k">=</span> <span class="pl-c1">SimpleWeightedDiGraph</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">1</span>], [<span class="pl-c1">2</span>,<span class="pl-c1">1</span>,<span class="pl-c1">2</span>], [<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]; combine <span class="pl-k">=</span> <span class="pl-k">+</span>)
s<span class="pl-k">.</span>weights[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">==</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> true</span>
s<span class="pl-k">.</span>weights[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> true</span></pre></div>
<p>Please pay attention to the fact that zero-weight edges are discarded by <code>add_edge!</code>.
This is due to the way the graph is stored (a sparse matrix). <a href="https://stackoverflow.com/questions/48977068/how-to-add-free-edge-to-graph-in-lightgraphs-julia/48994712#48994712" rel="nofollow">A possible workaround
is to set a very small weight instead</a>.</p>
<p>Note that adding or removing vertices or edges from these graph types is not particularly performant;
see <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs.jl</a> for possible alternatives.</p>
</article></div>