<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-simpleweightedgraphs" class="anchor" aria-hidden="true" href="#simpleweightedgraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SimpleWeightedGraphs</h1>
<p><a href="https://travis-ci.org/JuliaGraphs/SimpleWeightedGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c4aa14d922c2cc63c14e07155ffa5a7c7d3de090/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614772617068732f53696d706c6557656967687465644772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGraphs/SimpleWeightedGraphs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaGraphs/SimpleWeightedGraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9a77c3d0d24f0f4355f7427e457c317554917027/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614772617068732f53696d706c6557656967687465644772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaGraphs/SimpleWeightedGraphs.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Edge-Weighted Graphs for <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs.jl</a>.</p>
<p>Usage:</p>
<pre><code>using LightGraphs, SimpleWeightedGraphs

g = SimpleWeightedGraph(3)  # or use `SimpleWeightedDiGraph` for directed graphs
add_edge!(g, 1, 2, 0.5)
add_edge!(g, 2, 3, 0.8)
add_edge!(g, 1, 3, 2.0)

# find the shortest path from vertex 1 to vertex 3 taking weights into account.
enumerate_paths(dijkstra_shortest_paths(g, 1), 3)
3-element Array{Int64,1}:
 1
 2
 3

# reweight the edge from 1 to 2
add_edge!(g, 1, 2, 1.6)

# rerun the shortest path calculation from 1 to 3
enumerate_paths(dijkstra_shortest_paths(g, 1), 3)
2-element Array{Int64,1}:
 1
 3

# it's possible to build the graph from arrays of sources, destinations and weights
sources = [1,2,1]
destinations = [2,3,3]
weights = [0.5, 0.8, 2.0]
g = SimpleWeightedGraph(sources, destinations, weights)

# the combine keyword handles repeated pairs (sum by default)
g = SimpleWeightedGraph([1,2,1], [2,1,2], [1,1,1]; combine = +)
g.weights[2,1] == g.weights[1,2] == 3 # true

# WARNING: unexpected results might occur with non-associative combine functions

# notice that weights are indexed by [destination, source]
s = SimpleWeightedDiGraph([1,2,1], [2,1,2], [1,1,1]; combine = +)
s.weights[1,2] == 1 # true
s.weights[2,1] == 2 # true
</code></pre>
<p>Please pay attention to the fact that zero-weight edges are discarded by <code>add_edge!</code>.
This is due to the way the graph is stored (a sparse matrix). <a href="https://stackoverflow.com/questions/48977068/how-to-add-free-edge-to-graph-in-lightgraphs-julia/48994712#48994712" rel="nofollow">A possible workaround
is to set a very small weight instead</a>.</p>
<p>Note that adding or removing vertices or edges from these graph types is not particularly performant;
see <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs.jl</a> for possible alternatives.</p>
</article></div>