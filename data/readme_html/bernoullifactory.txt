<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-bernoullifactoryjl" class="anchor" aria-hidden="true" href="#bernoullifactoryjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BernoulliFactory.jl</h1>
<p><a href="https://travis-ci.org/awllee/BernoulliFactory.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2c73a88de6c4b123f7f35e04afc67c7702373ea8/68747470733a2f2f7472617669732d63692e6f72672f61776c6c65652f4265726e6f756c6c69466163746f72792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/awllee/BernoulliFactory.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/awllee/bernoullifactory-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/6a1976ef846b586d9e5ae2dff4d098ceb9b48bd2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f783577316b6564616c666e33663677702f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/x5w1kedalfn3f6wp/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/awllee/BernoulliFactory.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5c67e7174f7dba28445890fdc56ea52da6bd34e0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f61776c6c65652f4265726e6f756c6c69466163746f72792e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/awllee/BernoulliFactory.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/awllee/BernoulliFactory.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/59e96f918a0012ccac860a5d2e23cc0e00fc8066/687474703a2f2f636f6465636f762e696f2f6769746875622f61776c6c65652f4265726e6f756c6c69466163746f72792e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/awllee/BernoulliFactory.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides some Bernoulli factory algorithms, and a constrained, unbiased estimation algorithm.</p>
<p>Given a function g such that g() returns a Bernoulli(p) variate, and a function f mapping [0,1] -&gt; [0,1] a Bernoulli factory algorithm should use calls to g produce a Bernoulli(f(p)) variate. Not all functions f admit an algorithm (Keane &amp; O'Brien, 1994), and some algorithms require additional information.</p>
<h2><a id="user-content-currently-implemented" class="anchor" aria-hidden="true" href="#currently-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Currently implemented</h2>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>f(p) = exp(-λp), λ &gt;= 0</td>
<td><code>expMinus(g, λ)</code></td>
</tr>
<tr>
<td>f(p) = p⁠^a, a &gt;= 0</td>
<td><code>power(g, a)</code></td>
</tr>
<tr>
<td>f(p) = C*p / (1+C*p), C &gt; 0</td>
<td><code>logistic(g, C)</code></td>
</tr>
<tr>
<td>f(p) = C*p, ϵ ∈ (0, 1-C*p)</td>
<td><code>linear(g, C, ϵ)</code></td>
</tr>
<tr>
<td>f(p) = C/p, ϵ ∈ (0, p-C)</td>
<td><code>inverse(g, C, ϵ)</code></td>
</tr>
<tr>
<td>f(p1, p2) = C1*p1 / (C1*p1 + C2*p2)</td>
<td><code>twocoin(g1, g2, C1, C2)</code></td>
</tr>
</tbody>
</table>
<h3><a id="user-content-constrained-unbiased-estimation" class="anchor" aria-hidden="true" href="#constrained-unbiased-estimation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constrained, unbiased estimation</h3>
<p>Also implemented is a variant of signed estimation, <code>signedEstimate(μ, φ, a, b, δ, c, n)</code>:</p>
<p>Let X ~ μ and real-valued φ satisfy</p>
<p>a &lt;= inf_x φ(x) &lt; b &lt; δ &lt;= E[φ(X)] &lt; sup_x φ(x) &lt;= c,</p>
<p>with known (a, b, δ, c). If simulation from μ and evaluation of φ is feasible, one can simulate W satisfying</p>
<ol>
<li>E[W] = E[φ(X)]</li>
<li>Pr(b &lt;= W &lt;= max{2b-a,c}) = 1</li>
</ol>
<p>The random variable W is the product of two independent random variables, X and Z, and the positive integer parameter <code>n</code> specifies a number of averages to use to define X.</p>
<h2><a id="user-content-algorithms-used" class="anchor" aria-hidden="true" href="#algorithms-used"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Algorithms used</h2>
<p><code>expMinus</code> is an obvious extension of the approach described in Wastlund (1999) for λ=1.</p>
<p><code>power</code> is from Mendo (2016).</p>
<p><code>logistic</code> is from Huber (2017).</p>
<p><code>linear</code> is from Huber (2016), and for a large range of parameter settings appears to use the least expected flips of all algorithms for this problem.</p>
<p><code>inverse</code> is described in Lee, Doucet &amp; Łatuszyński (2014).</p>
<p><code>twocoin</code> is described in Gonçalves, Łatuszyński &amp; Roberts (2017).</p>
<p><code>signedEstimate</code> is described in Appendix C of Lee, Doucet &amp; Łatuszyński (2014).</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>All Bernoulli factory algorithms return a tuple <code>(X, flips)</code> where <code>X</code> is true or false and <code>flips</code> is the number of calls of <code>g()</code> by the algorithms.</p>
<p><code>signedEstimate</code> returns a tuple <code>(X, flips, calls)</code> where <code>X</code> is true or false, <code>flips</code> is the number of Bernoulli factory flips and <code>calls</code> is the number of calls of <code>μ()</code> by the algorithms. <code>calls</code> is typically much larger thatn <code>flips</code></p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<p>Gonçalves, F.B., Łatuszyński, K.G. and Roberts, G.O., 2017. Exact Monte Carlo likelihood-based inference for jump-diffusion processes. arXiv:1707.00332</p>
<p>Huber, M., 2016. Nearly optimal Bernoulli factories for linear functions. Combinatorics, Probability and Computing, 25(4), pp.577-591.</p>
<p>Huber, M., 2017. Optimal linear Bernoulli factories for small mean problems. Methodology and Computing in Applied Probability, 19(2), pp.631-645.</p>
<p>Keane, M.S. and O'Brien, G.L., 1994. A Bernoulli factory. ACM Transactions on Modeling and Computer Simulation (TOMACS), 4(2), pp.213-219.</p>
<p>Lee, A., Doucet, A. and Łatuszyński, K., 2014. Perfect simulation using atomic regeneration with application to Sequential Monte Carlo. arXiv:1407.5770</p>
<p>Mendo, L., 2016. An asymptotically optimal Bernoulli factory for certain functions that can be expressed as power series. arXiv:1612.08923</p>
<p>Wästlund, J., 1999. Functions arising by coin flipping. Technical Report, KTH, Stockholm.</p>
</article></div>