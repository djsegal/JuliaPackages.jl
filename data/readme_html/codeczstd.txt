<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-codeczstdjl" class="anchor" aria-hidden="true" href="#codeczstdjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CodecZstd.jl</h1>
<p><a href="https://travis-ci.org/bicycle1885/CodecZstd.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/15c3de01da477ec5e319c5dc4fced19f4b9ca1f8cfa7606f3b4b3f68573c037c/68747470733a2f2f7472617669732d63692e6f72672f62696379636c65313838352f436f6465635a7374642e6a6c2e7376673f6272616e63683d6d6173746572" alt="TravisCI Status" data-canonical-src="https://travis-ci.org/bicycle1885/CodecZstd.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/bicycle1885/codeczstd-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6c8382562ed9c4f3a366f72a0e257a4b22626c80b97a74666f5e562fd1e983fd/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75353876333279656e716631397832613f7376673d74727565" alt="AppVeyor Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/u58v32yenqf19x2a?svg=true" style="max-width:100%;"></a>
<a href="http://codecov.io/github/bicycle1885/CodecZstd.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/46b2c73ca5cfb4ee3926a24ae38fb23252c28bc744a5e14a3ef84aef41a118a4/687474703a2f2f636f6465636f762e696f2f6769746875622f62696379636c65313838352f436f6465635a7374642e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/bicycle1885/CodecZstd.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;CodecZstd&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CodecZstd<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CodecZstd

# Some text.
text = &quot;&quot;&quot;
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sollicitudin
mauris non nisi consectetur, a dapibus urna pretium. Vestibulum non posuere
erat. Donec luctus a turpis eget aliquet. Cras tristique iaculis ex, eu
malesuada sem interdum sed. Vestibulum ante ipsum primis in faucibus orci luctus
et ultrices posuere cubilia Curae; Etiam volutpat, risus nec gravida ultricies,
erat ex bibendum ipsum, sed varius ipsum ipsum vitae dui.
&quot;&quot;&quot;

# Streaming API.
stream = ZstdCompressorStream(IOBuffer(text))
for line in eachline(ZstdDecompressorStream(stream))
    println(line)
end
close(stream)

# Array API.
compressed = transcode(ZstdCompressor, text)
@assert sizeof(compressed) &lt; sizeof(text)
@assert transcode(ZstdDecompressor, compressed) == Vector{UInt8}(text)
"><pre><span class="pl-k">using</span> CodecZstd

<span class="pl-c"><span class="pl-c">#</span> Some text.</span>
text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sollicitudin</span>
<span class="pl-s">mauris non nisi consectetur, a dapibus urna pretium. Vestibulum non posuere</span>
<span class="pl-s">erat. Donec luctus a turpis eget aliquet. Cras tristique iaculis ex, eu</span>
<span class="pl-s">malesuada sem interdum sed. Vestibulum ante ipsum primis in faucibus orci luctus</span>
<span class="pl-s">et ultrices posuere cubilia Curae; Etiam volutpat, risus nec gravida ultricies,</span>
<span class="pl-s">erat ex bibendum ipsum, sed varius ipsum ipsum vitae dui.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-c"><span class="pl-c">#</span> Streaming API.</span>
stream <span class="pl-k">=</span> <span class="pl-c1">ZstdCompressorStream</span>(<span class="pl-c1">IOBuffer</span>(text))
<span class="pl-k">for</span> line <span class="pl-k">in</span> <span class="pl-c1">eachline</span>(<span class="pl-c1">ZstdDecompressorStream</span>(stream))
    <span class="pl-c1">println</span>(line)
<span class="pl-k">end</span>
<span class="pl-c1">close</span>(stream)

<span class="pl-c"><span class="pl-c">#</span> Array API.</span>
compressed <span class="pl-k">=</span> <span class="pl-c1">transcode</span>(ZstdCompressor, text)
<span class="pl-c1">@assert</span> <span class="pl-c1">sizeof</span>(compressed) <span class="pl-k">&lt;</span> <span class="pl-c1">sizeof</span>(text)
<span class="pl-c1">@assert</span> <span class="pl-c1">transcode</span>(ZstdDecompressor, compressed) <span class="pl-k">==</span> <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(text)</pre></div>
<p>This package exports following codecs and streams:</p>
<table>
<thead>
<tr>
<th>Codec</th>
<th>Stream</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ZstdCompressor</code></td>
<td><code>ZstdCompressorStream</code></td>
</tr>
<tr>
<td><code>ZstdDecompressor</code></td>
<td><code>ZstdDecompressorStream</code></td>
</tr>
</tbody>
</table>
<p>See docstrings and <a href="https://github.com/bicycle1885/TranscodingStreams.jl">TranscodingStreams.jl</a> for details.</p>
</article></div>