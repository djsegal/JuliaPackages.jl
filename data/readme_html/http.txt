<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-http" class="anchor" aria-hidden="true" href="#http"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HTTP</h1>
<p dir="auto"><em>HTTP client and server functionality for Julia</em></p>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://JuliaWeb.github.io/HTTP.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://JuliaWeb.github.io/HTTP.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/JuliaWeb/HTTP.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaWeb/HTTP.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaWeb/HTTP.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/af9cebedec503050c28399a85de3208bb44f7e2115b5ba7eef4e977e4607fb89/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69615765622f485454502e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaWeb/HTTP.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed with Julia's package manager,
either by using the Pkg REPL mode (press <code>]</code> to enter):</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add HTTP"><pre class="notranslate"><code>pkg&gt; add HTTP
</code></pre></div>
<p dir="auto">or by using Pkg functions</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;HTTP&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>HTTP<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Status</h2>
<p dir="auto">The package has matured and is used in many production systems.
But as with all open-source software, please try it out and report your experience.</p>
<p dir="auto">The package is tested against current Julia LTS (1.6), and current master on Linux, macOS, and Windows.</p>
<h2 dir="auto"><a id="user-content-contributing-and-questions" class="anchor" aria-hidden="true" href="#contributing-and-questions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing and Questions</h2>
<p dir="auto">Contributions are very welcome, as are feature requests and suggestions. Please open an
<a href="https://github.com/JuliaWeb/HTTP.jl/issues">issue</a> if you encounter any problems or would just like to ask a question.</p>
<h2 dir="auto"><a id="user-content-client-examples" class="anchor" aria-hidden="true" href="#client-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Client Examples</h2>
<p dir="auto"><a href="https://juliaweb.github.io/HTTP.jl/stable/index.html#HTTP.request-Tuple%7BString,HTTP.URIs.URI,Array%7BPair%7BSubString%7BString%7D,SubString%7BString%7D%7D,1%7D,Any%7D" rel="nofollow"><code>HTTP.request</code></a>
sends a HTTP Request Message and returns a Response Message.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r = HTTP.request(&quot;GET&quot;, &quot;http://httpbin.org/ip&quot;)
println(r.status)
println(String(r.body))"><pre>r <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">request</span>(<span class="pl-s"><span class="pl-pds">"</span>GET<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>http://httpbin.org/ip<span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(r<span class="pl-k">.</span>status)
<span class="pl-c1">println</span>(<span class="pl-c1">String</span>(r<span class="pl-k">.</span>body))</pre></div>
<p dir="auto"><a href="https://juliaweb.github.io/HTTP.jl/stable/index.html#HTTP.open" rel="nofollow"><code>HTTP.open</code></a>
sends a HTTP Request Message and
opens an <code>IO</code> stream from which the Response can be read.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="HTTP.open(:GET, &quot;https://tinyurl.com/bach-cello-suite-1-ogg&quot;) do http
    open(`vlc -q --play-and-exit --intf dummy -`, &quot;w&quot;) do vlc
        write(vlc, http)
    end
end"><pre>HTTP<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-c1">:GET</span>, <span class="pl-s"><span class="pl-pds">"</span>https://tinyurl.com/bach-cello-suite-1-ogg<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> http
    <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">`</span>vlc -q --play-and-exit --intf dummy -<span class="pl-pds">`</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> vlc
        <span class="pl-c1">write</span>(vlc, http)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-server-examples" class="anchor" aria-hidden="true" href="#server-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Server Examples</h2>
<p dir="auto"><a href="https://juliaweb.github.io/HTTP.jl/stable/index.html#HTTP.Servers.listen" rel="nofollow"><code>HTTP.Servers.listen</code></a>:</p>
<p dir="auto">The server will start listening on 127.0.0.1:8081 by default.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HTTP

# start a blocking server
HTTP.listen() do http::HTTP.Stream
    @show http.message
    @show HTTP.header(http, &quot;Content-Type&quot;)
    while !eof(http)
        println(&quot;body data: &quot;, String(readavailable(http)))
    end
    HTTP.setstatus(http, 404)
    HTTP.setheader(http, &quot;Foo-Header&quot; =&gt; &quot;bar&quot;)
    HTTP.startwrite(http)
    write(http, &quot;response body&quot;)
    write(http, &quot;more response body&quot;)
end"><pre><span class="pl-k">using</span> HTTP

<span class="pl-c"><span class="pl-c">#</span> start a blocking server</span>
HTTP<span class="pl-k">.</span><span class="pl-c1">listen</span>() <span class="pl-k">do</span> http<span class="pl-k">::</span><span class="pl-c1">HTTP.Stream</span>
    <span class="pl-c1">@show</span> http<span class="pl-k">.</span>message
    <span class="pl-c1">@show</span> HTTP<span class="pl-k">.</span><span class="pl-c1">header</span>(http, <span class="pl-s"><span class="pl-pds">"</span>Content-Type<span class="pl-pds">"</span></span>)
    <span class="pl-k">while</span> <span class="pl-k">!</span><span class="pl-c1">eof</span>(http)
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>body data: <span class="pl-pds">"</span></span>, <span class="pl-c1">String</span>(<span class="pl-c1">readavailable</span>(http)))
    <span class="pl-k">end</span>
    HTTP<span class="pl-k">.</span><span class="pl-c1">setstatus</span>(http, <span class="pl-c1">404</span>)
    HTTP<span class="pl-k">.</span><span class="pl-c1">setheader</span>(http, <span class="pl-s"><span class="pl-pds">"</span>Foo-Header<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>bar<span class="pl-pds">"</span></span>)
    HTTP<span class="pl-k">.</span><span class="pl-c1">startwrite</span>(http)
    <span class="pl-c1">write</span>(http, <span class="pl-s"><span class="pl-pds">"</span>response body<span class="pl-pds">"</span></span>)
    <span class="pl-c1">write</span>(http, <span class="pl-s"><span class="pl-pds">"</span>more response body<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto"><a href="https://juliaweb.github.io/HTTP.jl/stable/index.html#HTTP.Handlers.serve" rel="nofollow"><code>HTTP.Handlers.serve</code></a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using HTTP

# HTTP.listen! and HTTP.serve! are the non-blocking versions of HTTP.listen/HTTP.serve
server = HTTP.serve!() do request::HTTP.Request
   @show request
   @show request.method
   @show HTTP.header(request, &quot;Content-Type&quot;)
   @show request.body
   try
       return HTTP.Response(&quot;Hello&quot;)
   catch e
       return HTTP.Response(400, &quot;Error: $e&quot;)
   end
end
# HTTP.serve! returns an `HTTP.Server` object that we can close manually
close(server)"><pre><span class="pl-k">using</span> HTTP

<span class="pl-c"><span class="pl-c">#</span> HTTP.listen! and HTTP.serve! are the non-blocking versions of HTTP.listen/HTTP.serve</span>
server <span class="pl-k">=</span> HTTP<span class="pl-k">.</span><span class="pl-c1">serve!</span>() <span class="pl-k">do</span> request<span class="pl-k">::</span><span class="pl-c1">HTTP.Request</span>
   <span class="pl-c1">@show</span> request
   <span class="pl-c1">@show</span> request<span class="pl-k">.</span>method
   <span class="pl-c1">@show</span> HTTP<span class="pl-k">.</span><span class="pl-c1">header</span>(request, <span class="pl-s"><span class="pl-pds">"</span>Content-Type<span class="pl-pds">"</span></span>)
   <span class="pl-c1">@show</span> request<span class="pl-k">.</span>body
   <span class="pl-k">try</span>
       <span class="pl-k">return</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)
   <span class="pl-k">catch</span> e
       <span class="pl-k">return</span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">400</span>, <span class="pl-s"><span class="pl-pds">"</span>Error: <span class="pl-v">$e</span><span class="pl-pds">"</span></span>)
   <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-c"><span class="pl-c">#</span> HTTP.serve! returns an `HTTP.Server` object that we can close manually</span>
<span class="pl-c1">close</span>(server)</pre></div>
<h2 dir="auto"><a id="user-content-websocket-examples" class="anchor" aria-hidden="true" href="#websocket-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>WebSocket Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using HTTP.WebSockets
julia&gt; server = WebSockets.listen!(&quot;127.0.0.1&quot;, 8081) do ws
        for msg in ws
            send(ws, msg)
        end
    end

julia&gt; WebSockets.open(&quot;ws://127.0.0.1:8081&quot;) do ws
           send(ws, &quot;Hello&quot;)
           s = receive(ws)
           println(s)
       end;
Hello

julia&gt; close(server)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> HTTP<span class="pl-k">.</span>WebSockets
julia<span class="pl-k">&gt;</span> server <span class="pl-k">=</span> WebSockets<span class="pl-k">.</span><span class="pl-c1">listen!</span>(<span class="pl-s"><span class="pl-pds">"</span>127.0.0.1<span class="pl-pds">"</span></span>, <span class="pl-c1">8081</span>) <span class="pl-k">do</span> ws
        <span class="pl-k">for</span> msg <span class="pl-k">in</span> ws
            <span class="pl-c1">send</span>(ws, msg)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> WebSockets<span class="pl-k">.</span><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>ws://127.0.0.1:8081<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> ws
           <span class="pl-c1">send</span>(ws, <span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>)
           s <span class="pl-k">=</span> <span class="pl-c1">receive</span>(ws)
           <span class="pl-c1">println</span>(s)
       <span class="pl-k">end</span>;
Hello

julia<span class="pl-k">&gt;</span> <span class="pl-c1">close</span>(server)</pre></div>
</article></div>