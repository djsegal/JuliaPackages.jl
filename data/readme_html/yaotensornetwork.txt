<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-yaotensornetwork" class="anchor" aria-hidden="true" href="#yaotensornetwork"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>YaoTensorNetwork</h1>
<p><a href="https://travis-ci.com/QuantumBFS/YaoTensorNetwork.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/76bb18a4ac313ad80c506139e17737acd6007af7/68747470733a2f2f7472617669732d63692e636f6d2f5175616e74756d4246532f59616f54656e736f724e6574776f726b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/QuantumBFS/YaoTensorNetwork.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Converting a Quantum Circuit in Yao@v0.6 to a tensor network.</p>
<p>To start, open a Julia REPL and type <code>]</code> to enter pkg mode, install dependancies by</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add Yao LuxurySparse BitBasis DelimitedFiles OMEinsum
pkg<span class="pl-k">&gt;</span> dev YaoExtensions
pkg<span class="pl-k">&gt;</span> dev git<span class="pl-c1">@github</span><span class="pl-k">.</span>com<span class="pl-k">:</span>QuantumBFS<span class="pl-k">/</span>YaoTensorNetwork<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<p>If the second line does not work, please try clone and <code>pkg&gt; dev .</code> at top level folder.</p>
<h2><a id="user-content-learn-by-example" class="anchor" aria-hidden="true" href="#learn-by-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Learn by Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Yao, YaoExtensions, YaoTensorNetwork

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">dispatch!</span>(<span class="pl-c1">variational_circuit</span>(<span class="pl-c1">2</span>, <span class="pl-c1">1</span>, [<span class="pl-c1">1</span><span class="pl-k">=&gt;</span><span class="pl-c1">2</span>]), <span class="pl-c1">:random</span>);

julia<span class="pl-k">&gt;</span> eg <span class="pl-k">=</span> <span class="pl-c1">circuit2tn</span>(c; initial_config<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">bit</span>"</span>00<span class="pl-pds">"</span></span>, final_config<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">bit</span>"</span>11<span class="pl-pds">"</span></span>)
EinGraph{Complex{Float64},Array{Complex{Float64},N} <span class="pl-k">where</span> N}
 T[<span class="pl-c1">1</span>](<span class="pl-c1">2</span>)
 T[<span class="pl-c1">2</span>](<span class="pl-c1">2</span>)
 T[<span class="pl-c1">1</span>,<span class="pl-c1">3</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">3</span>,<span class="pl-c1">4</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">2</span>,<span class="pl-c1">5</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">5</span>,<span class="pl-c1">6</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">4</span>,<span class="pl-c1">7</span>,<span class="pl-c1">8</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">6</span>,<span class="pl-c1">9</span>,<span class="pl-c1">8</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">7</span>,<span class="pl-c1">10</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">10</span>,<span class="pl-c1">11</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">9</span>,<span class="pl-c1">12</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">12</span>,<span class="pl-c1">13</span>](<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)
 T[<span class="pl-c1">11</span>](<span class="pl-c1">2</span>)
 T[<span class="pl-c1">13</span>](<span class="pl-c1">2</span>)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">dump_graph</span>(<span class="pl-s"><span class="pl-pds">"</span>_test<span class="pl-pds">"</span></span>, eg);

julia<span class="pl-k">&gt;</span> eg2 <span class="pl-k">=</span> <span class="pl-c1">load_graph</span>(<span class="pl-c1">eltype</span>(eg), <span class="pl-s"><span class="pl-pds">"</span>_test<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OMEinsum

julia<span class="pl-k">&gt;</span> res <span class="pl-k">=</span> <span class="pl-c1">contract</span>(eg)
<span class="pl-k">-</span><span class="pl-c1">0.005533928306495697</span> <span class="pl-k">-</span> <span class="pl-c1">0.21124814706199962im</span></pre></div>
<p>Here, <code>circuit2tn</code> convert a circuit to a "generalized tensor network" (or factor graph).
In order to general reasonable structures, we suggestion using <code>simplify_blocktypes(c)</code> before dumping.
<code>dump_graph</code> dumps this generated tensor network (the <code>EinGraph</code> instance) to three files, <code>_test.labels.dat</code>, <code>_test.sizes.dat</code> and <code>_test.tensors.dat</code> in plain text format. One can use <code>load_graph</code> to read these files.
This package conditionally depends on <code>OMEinsum</code>, which is able to evaluate the tensor network directly utilizing <code>@tensoropt</code> defined in <code>TensorOperations.jl</code>.
One can also load the data to python with the script in the example folder.</p>
<p>For more examples, see <a href="example/">example</a> folder.</p>
</article></div>