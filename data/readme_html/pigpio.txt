<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pigpiojl" class="anchor" aria-hidden="true" href="#pigpiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PiGPIO.jl</h1>
<h4><a id="user-content-control-gpio-pins-on-the-raspberry-pi-from-julia" class="anchor" aria-hidden="true" href="#control-gpio-pins-on-the-raspberry-pi-from-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Control GPIO pins on the Raspberry Pi from Julia</h4>
<p><a href="https://juliahub.com/docs/PiGPIO/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<p><a href="https://www.youtube.com/watch?v=UmSQjkaATk8" rel="nofollow"><img src="https://camo.githubusercontent.com/8ab249d5b072c0784e3357a73762584455bb37b91cf279129118cc499b4502ef/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f556d53516a6b6141546b382f302e6a7067" alt="PiGPIO" data-canonical-src="https://img.youtube.com/vi/UmSQjkaATk8/0.jpg" style="max-width:100%;"></a></p>
<p>PiGPIO.jl is a Julia package for the Raspberry which communicates with the pigpio
daemon to allow control of the general purpose
input outputs (GPIO).</p>
<p>This package is an effective translation of the python package for the same.
Which can be found <a href="http://abyz.me.uk/rpi/pigpio/python.html" rel="nofollow">here</a></p>
<p>Click <a href="https://medium.com/@imkimfung/using-julia-to-control-leds-on-a-raspberry-pi-b320be83e503" rel="nofollow">here</a> for an <strong>in-depth tutorial</strong> on how you can control GPIO pins such as LEDs from Julia on the Raspberry Pi.</p>
<h3><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h3>
<ul>
<li>OS independent. Only Julia 1.0+ required.</li>
<li>Controls one or more Pi's.</li>
<li>Hardware timed pulse width modulation.</li>
<li>Hardware timed servo pulse.</li>
<li>Callbacks when any of GPIO change state.</li>
<li>Create and transmit precise waveforms.</li>
<li>Read/Write GPIO and set their modes.</li>
<li>Wrappers for I2C, SPI, and serial links.</li>
</ul>
<p>Once a pigpio daemon is launched on the pi this package can connect to
it and communicate with it to manipulate the GPIO pins of the pi. The actual
work is done by the daemon. One benefit of working this way is that you can
remotely access the pi over a network and multiple instances can be connected
to the daemon simultaneously.</p>
<h2><a id="user-content-launching-the-daemon" class="anchor" aria-hidden="true" href="#launching-the-daemon"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Launching the Daemon</h2>
<p>Launching the daemon requires sudo privileges. Launch by typing <code>sudo pigpiod</code>
in the terminal.</p>
<h2><a id="user-content-installation-and-usage" class="anchor" aria-hidden="true" href="#installation-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation and Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;PiGPIO&quot;)

using PiGPIO

pi=Pi() #connect to pigpiod daemon on localhost
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>PiGPIO<span class="pl-pds">"</span></span>)

<span class="pl-k">using</span> PiGPIO

<span class="pl-c1">pi</span><span class="pl-k">=</span><span class="pl-c1">Pi</span>() <span class="pl-c"><span class="pl-c">#</span>connect to pigpiod daemon on localhost</span></pre></div>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="set_mode(p::Pi, pin::Int, mode)
get_mode(p::Pi, pin::Int)
# mode can be INPUT or OUTPUT

PiGPIO.read(p, pin)
PiGPIO.write(p, pin, state)
#state can be HIGH, LOW, ON, OFF

PiGPIO.set_PWM_dutycycle(p, pin, dutycyle)
#dutycyle defaults to a range 0-255
"><pre><span class="pl-c1">set_mode</span>(p<span class="pl-k">::</span><span class="pl-c1">Pi</span>, pin<span class="pl-k">::</span><span class="pl-c1">Int</span>, mode)
<span class="pl-c1">get_mode</span>(p<span class="pl-k">::</span><span class="pl-c1">Pi</span>, pin<span class="pl-k">::</span><span class="pl-c1">Int</span>)
<span class="pl-c"><span class="pl-c">#</span> mode can be INPUT or OUTPUT</span>

PiGPIO<span class="pl-k">.</span><span class="pl-c1">read</span>(p, pin)
PiGPIO<span class="pl-k">.</span><span class="pl-c1">write</span>(p, pin, state)
<span class="pl-c"><span class="pl-c">#</span>state can be HIGH, LOW, ON, OFF</span>

PiGPIO<span class="pl-k">.</span><span class="pl-c1">set_PWM_dutycycle</span>(p, pin, dutycyle)
<span class="pl-c"><span class="pl-c">#</span>dutycyle defaults to a range 0-255</span></pre></div>
</article></div>