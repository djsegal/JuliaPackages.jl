<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-npcfsjl" class="anchor" aria-hidden="true" href="#npcfsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NPCFs.jl</h1>
<p dir="auto">Efficient computation of isotropic N-point correlation function (NPCF) in Julia. This implements two algorithms to compute the NPCF of n particles in D dimensions: (1) a naive count over N-tuplets of particles, with complexity O(n^N), and (2) the O(n^2) algorithm of <a href="https://arxiv.org/abs/2106.10278" rel="nofollow">Philcox &amp; Slepian 2021</a>, which makes use of hyperspherical harmonics to convert the computation into a pair count. In both cases, we compute the NPCF in the N-point basis discussed in <a href="https://arxiv.org/abs/2106.10278" rel="nofollow">Philcox &amp; Slepian 2021</a>.</p>
<h4 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h4>
<ul dir="auto">
<li>N-Point Correlation Functions with N = 2, 3, 4, 5</li>
<li>Cartesian geometries in D = 2, 3, 4 dimensions, optionally with periodic boundary conditions</li>
<li>Spherical geometries in D = 2 dimensions</li>
<li>Arbitrary particle weights</li>
<li>Distributed computation over arbitrary numbers of processors</li>
</ul>
<h4 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h4>
<ul dir="auto">
<li>In spherical coordinates, we parametrize by <code>phi, theta</code> polar coordinates with <code>phi</code> in [0, 2pi), <code>theta</code> in [0, pi).</li>
<li>Radial bins are equally spaced in <code>cos(sigma)</code> where <code>sigma</code> is the great-circle angle between two points on the 2-sphere</li>
<li>For each primary particle, all secondary particles are shifted to put the primary particle at the origin</li>
<li>For <code>D=2</code>, we use only real basis functions (<em>i.e.</em> those with <code>ell^(1) + ell^(2) + ... &gt;= 0</code>)</li>
</ul>
<h4 dir="auto"><a id="user-content-current-limitations" class="anchor" aria-hidden="true" href="#current-limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Current Limitations</h4>
<ul dir="auto">
<li>Only even-parity basis functions are computed (<em>i.e.</em> those with even <code>ell^(1) + ell^(2) + ...</code>)</li>
<li>As yet, support is not included for <em>anisotropic</em> basis functions</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install the <code>NPCFs.jl</code> package simply run the following in a Julia terminal:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add NPCFs"><pre>]add NPCFs</pre></div>
<p dir="auto">(Alternatively, one can use <code>]add "https://github.com/oliverphilcox/NPCFs.jl.git</code> to download from source.) The package can then be loaded using <code>using NPCFs</code>, as usual. To run the test suite, use the command <code>]test NPCFs</code>.</p>
<h2 dir="auto"><a id="user-content-quickstart-examples" class="anchor" aria-hidden="true" href="#quickstart-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart Examples</h2>
<h4 dir="auto"><a id="user-content-1-compute-the-3pcf-of-3d-particles-on-a-single-node" class="anchor" aria-hidden="true" href="#1-compute-the-3pcf-of-3d-particles-on-a-single-node"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>1) Compute the 3PCF of 3D particles on a single node</h4>
<p dir="auto">We first load the relevant modules:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Load the NPCF code
using NPCFs

# Load additional packages for testing
using Statistics, Random, Printf"><pre><span class="pl-c"><span class="pl-c">#</span> Load the NPCF code</span>
<span class="pl-k">using</span> NPCFs

<span class="pl-c"><span class="pl-c">#</span> Load additional packages for testing</span>
<span class="pl-k">using</span> Statistics, Random, Printf</pre></div>
<p dir="auto">Next, initialize the NPCF structure with the relevant parameters. Here, we'll assume a 3D periodic box of size 1000 in Cartesian coordinates. We'll use 10 radial bins in the range [50, 200], and <code>lmax</code> of 5.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="boxsize = 1000
npcf = NPCF(N=3,D=3,verb=true,periodic=true,volume=boxsize^3,
            coords=&quot;cartesian&quot;,r_min=50,r_max=200,nbins=10,lmax=5);"><pre>boxsize <span class="pl-k">=</span> <span class="pl-c1">1000</span>
npcf <span class="pl-k">=</span> <span class="pl-c1">NPCF</span>(N<span class="pl-k">=</span><span class="pl-c1">3</span>,D<span class="pl-k">=</span><span class="pl-c1">3</span>,verb<span class="pl-k">=</span><span class="pl-c1">true</span>,periodic<span class="pl-k">=</span><span class="pl-c1">true</span>,volume<span class="pl-k">=</span>boxsize<span class="pl-k">^</span><span class="pl-c1">3</span>,
            coords<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>cartesian<span class="pl-pds">"</span></span>,r_min<span class="pl-k">=</span><span class="pl-c1">50</span>,r_max<span class="pl-k">=</span><span class="pl-c1">200</span>,nbins<span class="pl-k">=</span><span class="pl-c1">10</span>,lmax<span class="pl-k">=</span><span class="pl-c1">5</span>);</pre></div>
<p dir="auto">Now let's create some data (i.e. particle positions and weights) with the above specifications. Let's use 500 particles:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pos = hcat(rand(500,3)*boxsize,ones(500)); # columns: [x, y, z, weight]"><pre>pos <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">500</span>,<span class="pl-c1">3</span>)<span class="pl-k">*</span>boxsize,<span class="pl-c1">ones</span>(<span class="pl-c1">500</span>)); <span class="pl-c"><span class="pl-c">#</span> columns: [x, y, z, weight]</span></pre></div>
<p dir="auto">We can now run the code, using both simple and pairwise estimators:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="npcf_output1 = compute_npcf_simple(pos, npcf);
npcf_output2 = compute_npcf_pairwise(pos, npcf);

# Compute the error
mean_err = mean(npcf_output1-npcf_output2)/mean(npcf_output2);
std_err = std(npcf_output1-npcf_output2)/mean(npcf_output2);
@printf(&quot;\nFractional Error: %.1e +- %.1e&quot;,mean_err,std_err)"><pre>npcf_output1 <span class="pl-k">=</span> <span class="pl-c1">compute_npcf_simple</span>(pos, npcf);
npcf_output2 <span class="pl-k">=</span> <span class="pl-c1">compute_npcf_pairwise</span>(pos, npcf);

<span class="pl-c"><span class="pl-c">#</span> Compute the error</span>
mean_err <span class="pl-k">=</span> <span class="pl-c1">mean</span>(npcf_output1<span class="pl-k">-</span>npcf_output2)<span class="pl-k">/</span><span class="pl-c1">mean</span>(npcf_output2);
std_err <span class="pl-k">=</span> <span class="pl-c1">std</span>(npcf_output1<span class="pl-k">-</span>npcf_output2)<span class="pl-k">/</span><span class="pl-c1">mean</span>(npcf_output2);
<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>Fractional Error: %.1e +- %.1e<span class="pl-pds">"</span></span>,mean_err,std_err)</pre></div>
<p dir="auto">Now we wait for the code to run and look at the output. This is an array of shape <code>(nbins, nbins, n_angular)</code> for the 3PCF, where the first two columns give the index of the first and second radial bin (filling only entries with <code>bin2&gt;bin1</code>), and the final column gives the angular information (here indexing the <code>l</code> array).</p>
<p dir="auto">Two other functions might be of use:</p>
<ol dir="auto">
<li><code>summarize(npcf)</code>: Print a summary of the <code>NPCF</code> parameters in use</li>
<li><code>angular_indices(npcf)</code>: Return lists of the angular indices used in the final column of the <code>npcf_output{X}</code> arrays. For example, for the 3PCF (4PCF), this returns a list of <code>l</code> (<code>l1</code>, <code>l2</code> and <code>l3</code>), in flattened form.</li>
</ol>
<h4 dir="auto"><a id="user-content-2-compute-the-4pcf-of-2d-particles-on-a-sphere-with-distributed-computing" class="anchor" aria-hidden="true" href="#2-compute-the-4pcf-of-2d-particles-on-a-sphere-with-distributed-computing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>2) Compute the 4PCF of 2D particles on a sphere, with distributed computing</h4>
<p dir="auto">To use distributed computing, we'll need to load the <code>NPCFs</code> module both on the main process and 4 workers:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed
addprocs(4) # add 4 workers
println(&quot;Using $nworkers() workers&quot;)

# Load the NPCF code both locally and on workers.
using NPCFs
@everywhere using NPCFs

# Load additional packages for testing
using Statistics, Random, Printf"><pre><span class="pl-k">using</span> Distributed
<span class="pl-c1">addprocs</span>(<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> add 4 workers</span>
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Using <span class="pl-v">$nworkers</span>() workers<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Load the NPCF code both locally and on workers.</span>
<span class="pl-k">using</span> NPCFs
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> NPCFs

<span class="pl-c"><span class="pl-c">#</span> Load additional packages for testing</span>
<span class="pl-k">using</span> Statistics, Random, Printf</pre></div>
<p dir="auto">Next, we initialize the NPCF structure and create some data, here spherical coordinates (<code>theta</code> and <code>phi</code>) of particles randomly positioned on the 2-sphere. The radial bins are now equal to the cosine of the angular distance along the two-sphere connecting two points, and are restricted to [-1,1]:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="npcf = NPCF(N=4,D=2,verb=true,periodic=false,volume=4pi,coords=&quot;spherical&quot;,r_min=-0.5,r_max=0.5,nbins=10,lmax=2);

Npart = 500
phi_arr = rand(Npart)*2pi # uniform in [0, 2pi)
theta_arr = acos.(rand(Npart).*2 .-1) # cos(theta) is uniform in [-1, 1)
pos = hcat(phi_arr,theta_arr,ones(Npart));"><pre>npcf <span class="pl-k">=</span> <span class="pl-c1">NPCF</span>(N<span class="pl-k">=</span><span class="pl-c1">4</span>,D<span class="pl-k">=</span><span class="pl-c1">2</span>,verb<span class="pl-k">=</span><span class="pl-c1">true</span>,periodic<span class="pl-k">=</span><span class="pl-c1">false</span>,volume<span class="pl-k">=</span><span class="pl-c1">4pi</span>,coords<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>spherical<span class="pl-pds">"</span></span>,r_min<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">0.5</span>,r_max<span class="pl-k">=</span><span class="pl-c1">0.5</span>,nbins<span class="pl-k">=</span><span class="pl-c1">10</span>,lmax<span class="pl-k">=</span><span class="pl-c1">2</span>);

Npart <span class="pl-k">=</span> <span class="pl-c1">500</span>
phi_arr <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Npart)<span class="pl-k">*</span><span class="pl-c1">2pi</span> <span class="pl-c"><span class="pl-c">#</span> uniform in [0, 2pi)</span>
theta_arr <span class="pl-k">=</span> <span class="pl-c1">acos</span>.(<span class="pl-c1">rand</span>(Npart)<span class="pl-k">.*</span><span class="pl-c1">2</span> <span class="pl-k">.-</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> cos(theta) is uniform in [-1, 1)</span>
pos <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(phi_arr,theta_arr,<span class="pl-c1">ones</span>(Npart));</pre></div>
<p dir="auto">Now run the code as before. No additional information is required to specify that we're using distributed computing; the code will figure this out automatically, and chunk the operations across all available workers.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="npcf_output1 = compute_npcf_simple(pos, npcf);
npcf_output2 = compute_npcf_pairwise(pos, npcf);

# Compute the error
mean_err = mean(npcf_output1-npcf_output2)/mean(npcf_output2)
std_err = std(npcf_output1-npcf_output2)/mean(npcf_output2)
@printf(&quot;\nFractional Error: %.1e +- %.1e&quot;,mean_err,std_err)"><pre>npcf_output1 <span class="pl-k">=</span> <span class="pl-c1">compute_npcf_simple</span>(pos, npcf);
npcf_output2 <span class="pl-k">=</span> <span class="pl-c1">compute_npcf_pairwise</span>(pos, npcf);

<span class="pl-c"><span class="pl-c">#</span> Compute the error</span>
mean_err <span class="pl-k">=</span> <span class="pl-c1">mean</span>(npcf_output1<span class="pl-k">-</span>npcf_output2)<span class="pl-k">/</span><span class="pl-c1">mean</span>(npcf_output2)
std_err <span class="pl-k">=</span> <span class="pl-c1">std</span>(npcf_output1<span class="pl-k">-</span>npcf_output2)<span class="pl-k">/</span><span class="pl-c1">mean</span>(npcf_output2)
<span class="pl-c1">@printf</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span>Fractional Error: %.1e +- %.1e<span class="pl-pds">"</span></span>,mean_err,std_err)</pre></div>
<p dir="auto">The output takes a similar form to before; an array of size <code>(nbins, nbins, nbins, n_angular)</code>, where the first three columns give the radial bins (with <code>bin3&gt;bin2&gt;bin1</code>), and the fourth gives the angular index, which can be translated to <code>l1, l2, l3</code> indices using <code>l1, l2, l3 = angular_indices(npcf)</code>.</p>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<ul dir="auto">
<li><a href="mailto:ohep2@cantab.ac.uk">Oliver Philcox</a> (Princeton / IAS)</li>
</ul>
</article></div>