<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-registrycli" class="anchor" aria-hidden="true" href="#registrycli"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RegistryCLI</h1>
<p dir="auto">This package provides <code>jlreg</code>, a very lightweight tool helping manage private
Julia registries from the command line. It heavily relies on
<a href="https://github.com/GunnarFarneback/LocalRegistry.jl">LocalRegistry.jl</a>, which
actually performs all the registry bookkeeping.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<ol dir="auto">
<li>
<p dir="auto">Install the <code>RegistryCLI</code> package from julia's package manager:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add RegistryCLI"><pre class="notranslate"><code>pkg&gt; add RegistryCLI
</code></pre></div>
</li>
<li>
<p dir="auto">Install the command-line interface:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; import RegistryCLI; RegistryCLI.install()
[ Info: Installed jlreg to `/home/francois/.julia/bin/jlreg`"><pre class="notranslate"><code>julia&gt; import RegistryCLI; RegistryCLI.install()
[ Info: Installed jlreg to `/home/francois/.julia/bin/jlreg`
</code></pre></div>
<p dir="auto">Optional arguments can be provided to fine-tune the behavior of
<code>RegistryCLI.install</code>. From the docstring:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="help?&gt; RegistryCLI.install
  RegistryCLI.install(; kwargs)

  Install the jlreg script for use in a terminal.

  Keyword arguments:

    •    julia: path to the julia executable. Defaults to the currently running julia.

    •    flags: command-line flags for julia. Defaults to --color=yes --startup-file=no --compile=min -O0.

    •    destdir: directory where to install the executable script. Should be writable and available in PATH. Defaults to ~/.julia.

    •    command: name of the executable script. Defaults to jlreg.

    •    perms: permissions of the executable script. Defaults to 0o755 (i.e. &quot;-rwxr-xr-x&quot;).

    •    force: allow overwriting an existing file. Defaults to false."><pre class="notranslate"><code>help?&gt; RegistryCLI.install
  RegistryCLI.install(; kwargs)

  Install the jlreg script for use in a terminal.

  Keyword arguments:

    •    julia: path to the julia executable. Defaults to the currently running julia.

    •    flags: command-line flags for julia. Defaults to --color=yes --startup-file=no --compile=min -O0.

    •    destdir: directory where to install the executable script. Should be writable and available in PATH. Defaults to ~/.julia.

    •    command: name of the executable script. Defaults to jlreg.

    •    perms: permissions of the executable script. Defaults to 0o755 (i.e. "-rwxr-xr-x").

    •    force: allow overwriting an existing file. Defaults to false.
</code></pre></div>
</li>
<li>
<p dir="auto">Ensure that the script directory (<code>destdir</code> above, by default <code>~/.julia/bin</code>)
is available in the <code>PATH</code>. Add it if necessary:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="shell$ export PATH=$PATH:$HOME/.julia/bin"><pre class="notranslate"><code>shell$ export PATH=$PATH:$HOME/.julia/bin
</code></pre></div>
</li>
</ol>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ jlreg --help
usage: jlreg [-v] [-h] {create|add}

Manage a local Julia Registry from the command line.

commands:
  create         Create and populate a local clone of a new, empty Registry
  add            Publish a new version of a package in the Registry

optional arguments:
  -v, --verbose  Print informative messages at each step
  -h, --help     show this help message and exit"><pre class="notranslate"><code>$ jlreg --help
usage: jlreg [-v] [-h] {create|add}

Manage a local Julia Registry from the command line.

commands:
  create         Create and populate a local clone of a new, empty Registry
  add            Publish a new version of a package in the Registry

optional arguments:
  -v, --verbose  Print informative messages at each step
  -h, --help     show this help message and exit
</code></pre></div>
<h3 dir="auto"><a id="user-content-create-a-private-registry" class="anchor" aria-hidden="true" href="#create-a-private-registry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Create a private registry</h3>
<ol dir="auto">
<li>
<p dir="auto">Create a git repository to host the registry. This repo should initially be
empty, and should be accessible to anyone in your organization. In the
following, <code>REG_URL</code> refers to the URL of this repo.</p>
</li>
<li>
<p dir="auto">Choose a local path on your machine, where a clone of the registry will be
downloaded. This local clone is where every change made by <code>jlreg</code> will
happen; it is expected that the commits made automatically to this local
clone are checked before being pushed to the "real" registry. In the
following, <code>REG_PATH</code> refers to the path to the local registry clone. Do not
create the clone yourself; instead, use <code>jlreg</code> to do it:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ jlreg create REG_URL REG_PATH
[ Info: Created registry in directory REG_PATH"><pre class="notranslate"><code>$ jlreg create REG_URL REG_PATH
[ Info: Created registry in directory REG_PATH
</code></pre></div>
</li>
<li>
<p dir="auto">Check that the initial commit in <code>REG_PATH</code> is sane, before pushing it to the
"real" registry:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ cd REG_PATH
$ git push origin master"><pre class="notranslate"><code>$ cd REG_PATH
$ git push origin master
</code></pre></div>
</li>
</ol>
<h3 dir="auto"><a id="user-content-publish-a-new-version-of-a-package" class="anchor" aria-hidden="true" href="#publish-a-new-version-of-a-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Publish a new (version of a) package</h3>
<ol dir="auto">
<li>
<p dir="auto">The steps described here should be performed from within the local registry
clone. If you still have a local clone from the previous step, simply <code>cd</code> to
it. If not, just locally clone the registry:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ git clone REG_URL REG_PATH
$ cd REG_PATH"><pre class="notranslate"><code>$ git clone REG_URL REG_PATH
$ cd REG_PATH
</code></pre></div>
</li>
<li>
<p dir="auto">Registering a new package in the registry or registering a new version of an
existing package is performed in the same way. In the following, <code>PACKAGE_URL</code>
refers to the URL of the git repository hosting the package to be registered.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ jlreg add PACKAGE_URL
┌ Info: Registering package
│   package_path = &quot;/tmp/jl_EV3XPI/package&quot;
│   package_repo = &quot;PACKAGE_URL&quot;
│   registry_path = &quot;REG_PATH&quot;
│   uuid = UUID(&quot;7876af07-990d-54b4-ab0e-23690620f79a&quot;)
│   version = v&quot;0.5.4&quot;
│   tree_hash = &quot;837d87d3b25c237b06c6e468be3d147a242be7a8&quot;
└   subdir = &quot;&quot;"><pre class="notranslate"><code>$ jlreg add PACKAGE_URL
┌ Info: Registering package
│   package_path = "/tmp/jl_EV3XPI/package"
│   package_repo = "PACKAGE_URL"
│   registry_path = "REG_PATH"
│   uuid = UUID("7876af07-990d-54b4-ab0e-23690620f79a")
│   version = v"0.5.4"
│   tree_hash = "837d87d3b25c237b06c6e468be3d147a242be7a8"
└   subdir = ""
</code></pre></div>
</li>
<li>
<p dir="auto">As always, a commit should have been added in the local registry
clone. Please inspect it carefully before pushing it to the "real" registry:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ git push origin master"><pre class="notranslate"><code>$ git push origin master
</code></pre></div>
</li>
</ol>
<h2 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference</h2>
<p dir="auto">Check the inline help in order to get the full list of available options:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="$ jlreg create --help
usage: jlreg create [--description DESCRIPTION] [-h] URL PATH

positional arguments:
  URL         public URL of the Registry (should be an empty git repo)
  PATH        where a local clone of the Registry should be created

optional arguments:
  --description DESCRIPTION
              description of the Registry
  -h, --help  show this help message and exit




$ jlreg add --help
usage: jlreg add [--ref REF] [-h] URL

positional arguments:
  URL         public URL of the package

optional arguments:
  --ref REF   git reference identifying the version to publish
  -h, --help  show this help message and exit"><pre class="notranslate"><code>$ jlreg create --help
usage: jlreg create [--description DESCRIPTION] [-h] URL PATH

positional arguments:
  URL         public URL of the Registry (should be an empty git repo)
  PATH        where a local clone of the Registry should be created

optional arguments:
  --description DESCRIPTION
              description of the Registry
  -h, --help  show this help message and exit




$ jlreg add --help
usage: jlreg add [--ref REF] [-h] URL

positional arguments:
  URL         public URL of the package

optional arguments:
  --ref REF   git reference identifying the version to publish
  -h, --help  show this help message and exit
</code></pre></div>
</article></div>