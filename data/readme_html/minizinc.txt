<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-minizincjl" class="anchor" aria-hidden="true" href="#minizincjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MiniZinc.jl</h1>
<p dir="auto"><a href="https://github.com/jump-dev/MiniZinc.jl">MiniZinc.jl</a> is a wrapper for the
<a href="https://www.minizinc.org" rel="nofollow">MiniZinc</a> constraint modeling language.</p>
<p dir="auto">It provides a way to write MathOptInterface models to <code>.mzn</code> files, and a way to
interact with <code>libminizinc</code>.</p>
<h2 dir="auto"><a id="user-content-affiliation" class="anchor" aria-hidden="true" href="#affiliation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Affiliation</h2>
<p dir="auto">This wrapper is maintained by the JuMP community and is not part of the MiniZinc
project.</p>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto"><code>MiniZinc.jl</code> is licensed under the <a href="https://github.com/jump-dev/MiniZinc.jl/blob/master/LICENSE.md">MIT License</a>.</p>
<p dir="auto">The underlying project, <a href="https://github.com/MiniZinc/libminizinc">MiniZinc/libminizinc</a>,
is licensed under the <a href="https://github.com/MiniZinc/libminizinc/blob/master/LICENSE.txt">MPL 2.0 license</a>.</p>
<h2 dir="auto"><a id="user-content-install" class="anchor" aria-hidden="true" href="#install"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install</h2>
<p dir="auto">Install MiniZinc.jl using the Julia package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;MiniZinc&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MiniZinc<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><strong>Windows</strong></p>
<p dir="auto">On Linux and macOS, this package automatically installs <code>libminizinc</code>. However,
we're still working out problems with the install on Windows. To use
MiniZinc.jl, you'll need to manually install a copy of <code>libminizinc</code> from
<a href="https://www.minizinc.org" rel="nofollow">minizinc.org</a> or compile one yourself from
<a href="https://github.com/MiniZinc/libminizinc">MiniZinc/libminizinc</a>.</p>
<p dir="auto">To teach MiniZinc.jl where to look for <code>libminizinc</code>, set the
<code>JULIA_LIBMINIZINC_DIR</code> environment variable. For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_LIBMINIZINC_DIR&quot;] = &quot;C:\\Program Files\\MiniZinc&quot;"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_LIBMINIZINC_DIR<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>Program Files<span class="pl-cce">\\</span>MiniZinc<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-use-with-mathoptinterface" class="anchor" aria-hidden="true" href="#use-with-mathoptinterface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with MathOptInterface</h2>
<p dir="auto">MiniZinc.jl supports the <a href="https://jump.dev/MathOptInterface.jl/stable/reference/standard_form/#Constraint-programming-sets" rel="nofollow">constraint programming sets</a>
defined in MathOptInterface, as well as (in)equality constraints.</p>
<p dir="auto">The following example solves the following constraint program:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="xᵢ ∈ {1, 2, 3} ∀i=1,2,3
zⱼ ∈ {0, 1}    ∀j=1,2
z₁ &lt;-&gt; x₁ != x₂
z₂ &lt;-&gt; x₂ != x₃
z₁ + z₂ = 1"><pre class="notranslate"><code>xᵢ ∈ {1, 2, 3} ∀i=1,2,3
zⱼ ∈ {0, 1}    ∀j=1,2
z₁ &lt;-&gt; x₁ != x₂
z₂ &lt;-&gt; x₂ != x₃
z₁ + z₂ = 1
</code></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import MiniZinc

julia&gt; const MOI = MiniZinc.MOI
MathOptInterface

julia&gt; function main()
           model = MOI.Utilities.CachingOptimizer(
               MiniZinc.Model{Int}(),
               MiniZinc.Optimizer{Int}(MiniZinc.Chuffed()),
           )
           # xᵢ ∈ {1, 2, 3} ∀i=1,2,3
           x = MOI.add_variables(model, 3)
           MOI.add_constraint.(model, x, MOI.Interval(1, 3))
           MOI.add_constraint.(model, x, MOI.Integer())
           # zⱼ ∈ {0, 1}    ∀j=1,2
           z = MOI.add_variables(model, 2)
           MOI.add_constraint.(model, z, MOI.ZeroOne())
           # z₁ &lt;-&gt; x₁ != x₂
           MOI.add_constraint(
               model,
               MOI.VectorOfVariables([z[1], x[1], x[2]]),
               MOI.Reified(MOI.AllDifferent(2)),
           )
           # z₂ &lt;-&gt; x₂ != x₃
           MOI.add_constraint(
               model,
               MOI.VectorOfVariables([z[2], x[2], x[3]]),
               MOI.Reified(MOI.AllDifferent(2)),
           )
           # z₁ + z₂ = 1
           MOI.add_constraint(model, 1 * z[1] + x[2], MOI.EqualTo(1))
           MOI.optimize!(model)
           x_star = MOI.get(model, MOI.VariablePrimal(), x)
           z_star = MOI.get(model, MOI.VariablePrimal(), z)
           return x_star, z_star
       end
main (generic function with 1 method)

julia&gt; main()
([1, 1, 3], [0, 1])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> MiniZinc

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> MOI <span class="pl-k">=</span> MiniZinc<span class="pl-k">.</span>MOI
MathOptInterface

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">main</span>()
           model <span class="pl-k">=</span> MOI<span class="pl-k">.</span>Utilities<span class="pl-k">.</span><span class="pl-c1">CachingOptimizer</span>(
               MiniZinc<span class="pl-k">.</span><span class="pl-c1">Model</span><span class="pl-c1">{Int}</span>(),
               MiniZinc<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Int}</span>(MiniZinc<span class="pl-k">.</span><span class="pl-c1">Chuffed</span>()),
           )
           <span class="pl-c"><span class="pl-c">#</span> xᵢ ∈ {1, 2, 3} ∀i=1,2,3</span>
           x <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variables</span>(model, <span class="pl-c1">3</span>)
           MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>.(model, x, MOI<span class="pl-k">.</span><span class="pl-c1">Interval</span>(<span class="pl-c1">1</span>, <span class="pl-c1">3</span>))
           MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>.(model, x, MOI<span class="pl-k">.</span><span class="pl-c1">Integer</span>())
           <span class="pl-c"><span class="pl-c">#</span> zⱼ ∈ {0, 1}    ∀j=1,2</span>
           z <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">add_variables</span>(model, <span class="pl-c1">2</span>)
           MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>.(model, z, MOI<span class="pl-k">.</span><span class="pl-c1">ZeroOne</span>())
           <span class="pl-c"><span class="pl-c">#</span> z₁ &lt;-&gt; x₁ != x₂</span>
           MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(
               model,
               MOI<span class="pl-k">.</span><span class="pl-c1">VectorOfVariables</span>([z[<span class="pl-c1">1</span>], x[<span class="pl-c1">1</span>], x[<span class="pl-c1">2</span>]]),
               MOI<span class="pl-k">.</span><span class="pl-c1">Reified</span>(MOI<span class="pl-k">.</span><span class="pl-c1">AllDifferent</span>(<span class="pl-c1">2</span>)),
           )
           <span class="pl-c"><span class="pl-c">#</span> z₂ &lt;-&gt; x₂ != x₃</span>
           MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(
               model,
               MOI<span class="pl-k">.</span><span class="pl-c1">VectorOfVariables</span>([z[<span class="pl-c1">2</span>], x[<span class="pl-c1">2</span>], x[<span class="pl-c1">3</span>]]),
               MOI<span class="pl-k">.</span><span class="pl-c1">Reified</span>(MOI<span class="pl-k">.</span><span class="pl-c1">AllDifferent</span>(<span class="pl-c1">2</span>)),
           )
           <span class="pl-c"><span class="pl-c">#</span> z₁ + z₂ = 1</span>
           MOI<span class="pl-k">.</span><span class="pl-c1">add_constraint</span>(model, <span class="pl-c1">1</span> <span class="pl-k">*</span> z[<span class="pl-c1">1</span>] <span class="pl-k">+</span> x[<span class="pl-c1">2</span>], MOI<span class="pl-k">.</span><span class="pl-c1">EqualTo</span>(<span class="pl-c1">1</span>))
           MOI<span class="pl-k">.</span><span class="pl-c1">optimize!</span>(model)
           x_star <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), x)
           z_star <span class="pl-k">=</span> MOI<span class="pl-k">.</span><span class="pl-c1">get</span>(model, MOI<span class="pl-k">.</span><span class="pl-c1">VariablePrimal</span>(), z)
           <span class="pl-k">return</span> x_star, z_star
       <span class="pl-k">end</span>
main (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">main</span>()
([<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">3</span>], [<span class="pl-c1">0</span>, <span class="pl-c1">1</span>])</pre></div>
<h2 dir="auto"><a id="user-content-use-with-jump" class="anchor" aria-hidden="true" href="#use-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Use with JuMP</h2>
<p dir="auto">You can also call MiniZinc from JuMP, using any solver that <code>libminizinc</code>
supports. For example, if you have Gurobi installed:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using JuMP
import MiniZinc
model = Model(() -&gt; MiniZinc.Optimizer{Float64}(&quot;gurobi&quot;))
@variable(model, 1 &lt;= x[1:3] &lt;= 3, Int)
@constraint(model, x in MOI.AllDifferent(3))
@objective(model, Max, sum(i * x[i] for i in 1:3))
optimize!(model)
@show value.(x)"><pre><span class="pl-k">using</span> JuMP
<span class="pl-k">import</span> MiniZinc
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(() <span class="pl-k">-&gt;</span> MiniZinc<span class="pl-k">.</span><span class="pl-c1">Optimizer</span><span class="pl-c1">{Float64}</span>(<span class="pl-s"><span class="pl-pds">"</span>gurobi<span class="pl-pds">"</span></span>))
<span class="pl-c1">@variable</span>(model, <span class="pl-c1">1</span> <span class="pl-k">&lt;=</span> x[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">3</span>, Int)
<span class="pl-c1">@constraint</span>(model, x <span class="pl-k">in</span> MOI<span class="pl-k">.</span><span class="pl-c1">AllDifferent</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">@objective</span>(model, Max, <span class="pl-c1">sum</span>(i <span class="pl-k">*</span> x[i] <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>))
<span class="pl-c1">optimize!</span>(model)
<span class="pl-c1">@show</span> <span class="pl-c1">value</span>.(x)</pre></div>
<h2 dir="auto"><a id="user-content-mathoptinterface-api" class="anchor" aria-hidden="true" href="#mathoptinterface-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MathOptInterface API</h2>
<p dir="auto">The MiniZinc optimizer supports the following constraints and attributes.</p>
<p dir="auto">List of supported objective functions:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.ScalarQuadraticFunction{Float64}}</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveFunction{MOI.VariableIndex}</code></a></li>
</ul>
<p dir="auto">List of supported variable types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.Reals</code></a></li>
</ul>
<p dir="auto">List of supported constraint types:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.Integer</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.Interval{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.ScalarAffineFunction{Float64}</code></a> in <a href="@ref"><code>MOI.ZeroOne</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.EqualTo{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.GreaterThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Integer</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Interval{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.LessThan{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Parameter{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Semicontinuous{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.Semiinteger{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VariableIndex</code></a> in <a href="@ref"><code>MOI.ZeroOne</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.AllDifferent</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.BinPacking{Float64}</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.Circuit</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.CountAtLeast</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.CountBelongs</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.CountDistinct</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.CountGreaterThan</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.Cumulative</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.Path</code></a></li>
<li><a href="@ref"><code>MOI.VectorOfVariables</code></a> in <a href="@ref"><code>MOI.Table{Float64}</code></a></li>
</ul>
<p dir="auto">List of supported model attributes:</p>
<ul dir="auto">
<li><a href="@ref"><code>MOI.NLPBlock()</code></a></li>
<li><a href="@ref"><code>MOI.Name()</code></a></li>
<li><a href="@ref"><code>MOI.ObjectiveSense()</code></a></li>
</ul>
<h2 dir="auto"><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Options</h2>
<p dir="auto">Set options using <a href="@ref"><code>MOI.RawOptimizerAttribute</code></a> in MOI or
<a href="@ref"><code>set_attribute</code></a> in JuMP.</p>
<p dir="auto"><code>MiniZinc.jl</code> supports the following options:</p>
<ul dir="auto">
<li><code>model_filename::String = ""</code>: the location at which to write out the <code>.mzn</code>
file during optimization. This option can be helpful during debugging. If
left empty, a temporary file will be used instead.</li>
</ul>
</article></div>