<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img align="center" src="docs/src/assets/logo.png" alt="Streamfall.jl" style="max-width: 100%;"></a></p>
<p dir="auto">Streamfall: An experimental graph-based streamflow modelling system written in Julialang.</p>
<p dir="auto"><a href="https://connectedsystems.github.io/Streamfall.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/345341654" rel="nofollow"><img src="https://camo.githubusercontent.com/1888e24be099d01dde87a2f24169f140b9fbfeb8fc1bc08e3037727ca9824c87/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3334353334313635342e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/345341654.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Aims of the project are to leverage the Julia language and ecosystem to support:</p>
<ul dir="auto">
<li>Quick application and exploratory analysis</li>
<li>Use of different rainfall-runoff models and their ensembles in tandem</li>
<li>Modelling and assessment of interacting systems</li>
<li>Parallel scenario runs</li>
</ul>
<p dir="auto">Streamfall now includes tentative implementations of GR4J, HyMod, IHACRES, and SYMHYD.
The IHACRES rainfall-runoff model is implemented with <a href="https://github.com/ConnectedSystems/ihacres_nim">ihacres_nim</a>.</p>
<p dir="auto"><a href="https://github.com/JuliaGraphs/Graphs.jl">Graphs</a> and <a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs</a> are used underneath for network traversal/analysis.</p>
<p dir="auto">Development version of the documentation can be found <a href="https://connectedsystems.github.io/Streamfall.jl/dev" rel="nofollow">here</a>.</p>
<blockquote>
<p dir="auto">[NOTE] Streamfall is currently in its early stages and under active development. Although it is fairly usable for small networks and single node analyses, things may change drastically and unexpectedly.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h2>
<p dir="auto">To build locally:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ julia --project=.
julia&gt;] build"><pre>$ julia --project=.
julia<span class="pl-k">&gt;</span>] build</pre></div>
<p dir="auto">To run tests:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt;] test"><pre>julia<span class="pl-k">&gt;</span>] <span class="pl-c1">test</span></pre></div>
<h2 dir="auto"><a id="user-content-quick-start-prep" class="anchor" aria-hidden="true" href="#quick-start-prep"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start (prep)</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using YAML, DataFrames, CSV, Plots
using Statistics
using Streamfall, BlackBoxOptim


# Load observations
date_format = &quot;YYYY-mm-dd&quot;

# Load file which holds streamflow, precipitation and PET data
obs_data = CSV.File(&quot;example_data.csv&quot;,
                    comment=&quot;#&quot;,
                    dateformat=date_format) |&gt; DataFrame

# Historic observations
Qo = obs_data[:, [&quot;Date&quot;, &quot;Gauge_Q&quot;]]

# Create climate data interface (all climate data are expected to have a &quot;Date&quot; column)
climate_data = obs_data[:, [&quot;Date&quot;, &quot;Gauge_P&quot;, &quot;Gauge_PET&quot;]]
climate = Climate(climate_data, &quot;_P&quot;, &quot;_PET&quot;)"><pre><span class="pl-k">using</span> YAML, DataFrames, CSV, Plots
<span class="pl-k">using</span> Statistics
<span class="pl-k">using</span> Streamfall, BlackBoxOptim


<span class="pl-c"><span class="pl-c">#</span> Load observations</span>
date_format <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>YYYY-mm-dd<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Load file which holds streamflow, precipitation and PET data</span>
obs_data <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>example_data.csv<span class="pl-pds">"</span></span>,
                    comment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span>,
                    dateformat<span class="pl-k">=</span>date_format) <span class="pl-k">|&gt;</span> DataFrame

<span class="pl-c"><span class="pl-c">#</span> Historic observations</span>
Qo <span class="pl-k">=</span> obs_data[:, [<span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Gauge_Q<span class="pl-pds">"</span></span>]]

<span class="pl-c"><span class="pl-c">#</span> Create climate data interface (all climate data are expected to have a "Date" column)</span>
climate_data <span class="pl-k">=</span> obs_data[:, [<span class="pl-s"><span class="pl-pds">"</span>Date<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Gauge_P<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Gauge_PET<span class="pl-pds">"</span></span>]]
climate <span class="pl-k">=</span> <span class="pl-c1">Climate</span>(climate_data, <span class="pl-s"><span class="pl-pds">"</span>_P<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>_PET<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-quick-start-single-node" class="anchor" aria-hidden="true" href="#quick-start-single-node"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start (single node)</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create a node (node type, node_name, sub-catchment area)
hymod_node = create_node(SimpleHyModNode, &quot;Gauge&quot;, 129.2)
# gr4j_node = create_node(GR4JNode, &quot;Gauge&quot;, 129.2)
# ihacres_node = create_node(BilinearNode, &quot;Gauge&quot;, 129.2)

# Calibrate a node for 30 seconds (uses the BlackBoxOptim package)
# Default metric used is RMSE
calibrate!(hymod_node, climate, Qo; MaxTime=30)

# Basic overview plot (shows time series and Q-Q plot)
# Uses a 365 day offset (e.g., 1 year burn-in period)
run_node!(hymod_node, climate)
quickplot(Qo[:, &quot;Gauge_Q&quot;], hymod_node, climate, &quot;HyMod&quot;; burn_in=366, limit=nothing)

# save figure
savefig(&quot;quick_example.png&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Create a node (node type, node_name, sub-catchment area)</span>
hymod_node <span class="pl-k">=</span> <span class="pl-c1">create_node</span>(SimpleHyModNode, <span class="pl-s"><span class="pl-pds">"</span>Gauge<span class="pl-pds">"</span></span>, <span class="pl-c1">129.2</span>)
<span class="pl-c"><span class="pl-c">#</span> gr4j_node = create_node(GR4JNode, "Gauge", 129.2)</span>
<span class="pl-c"><span class="pl-c">#</span> ihacres_node = create_node(BilinearNode, "Gauge", 129.2)</span>

<span class="pl-c"><span class="pl-c">#</span> Calibrate a node for 30 seconds (uses the BlackBoxOptim package)</span>
<span class="pl-c"><span class="pl-c">#</span> Default metric used is RMSE</span>
<span class="pl-c1">calibrate!</span>(hymod_node, climate, Qo; MaxTime<span class="pl-k">=</span><span class="pl-c1">30</span>)

<span class="pl-c"><span class="pl-c">#</span> Basic overview plot (shows time series and Q-Q plot)</span>
<span class="pl-c"><span class="pl-c">#</span> Uses a 365 day offset (e.g., 1 year burn-in period)</span>
<span class="pl-c1">run_node!</span>(hymod_node, climate)
<span class="pl-c1">quickplot</span>(Qo[:, <span class="pl-s"><span class="pl-pds">"</span>Gauge_Q<span class="pl-pds">"</span></span>], hymod_node, climate, <span class="pl-s"><span class="pl-pds">"</span>HyMod<span class="pl-pds">"</span></span>; burn_in<span class="pl-k">=</span><span class="pl-c1">366</span>, limit<span class="pl-k">=</span><span class="pl-c1">nothing</span>)

<span class="pl-c"><span class="pl-c">#</span> save figure</span>
<span class="pl-c1">savefig</span>(<span class="pl-s"><span class="pl-pds">"</span>quick_example.png<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-quick-start-network-of-nodes" class="anchor" aria-hidden="true" href="#quick-start-network-of-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick start (network of nodes)</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Load and generate stream network
network_spec = YAML.load_file(&quot;network.yml&quot;)
sn = create_network(&quot;Example Network&quot;, network_spec)

# Show figure of network
plot_network(sn)

# Calibrate network using the BlackBoxOptim package
# keyword arguments will be passed to the `bboptimize()` function
calibrate!(sn, climate, Qo; MaxTime=180.0)

# Run stream network
# There is also `run_catchment!()` which does the same thing
run_basin!(sn, climate)

# Get a specific node in network
node = sn[1]  # get node 1

# Could also get node by name
# which will also return its position in the network:
# nid, node = sn[&quot;node1&quot;]

# Compare &quot;goodness-of-fit&quot;
Streamfall.RMSE(obs_streamflow, node.outflow)

# Save calibrated network spec to file
Streamfall.save_network_spec(sn, &quot;calibrated_example.yml&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> Load and generate stream network</span>
network_spec <span class="pl-k">=</span> YAML<span class="pl-k">.</span><span class="pl-c1">load_file</span>(<span class="pl-s"><span class="pl-pds">"</span>network.yml<span class="pl-pds">"</span></span>)
sn <span class="pl-k">=</span> <span class="pl-c1">create_network</span>(<span class="pl-s"><span class="pl-pds">"</span>Example Network<span class="pl-pds">"</span></span>, network_spec)

<span class="pl-c"><span class="pl-c">#</span> Show figure of network</span>
<span class="pl-c1">plot_network</span>(sn)

<span class="pl-c"><span class="pl-c">#</span> Calibrate network using the BlackBoxOptim package</span>
<span class="pl-c"><span class="pl-c">#</span> keyword arguments will be passed to the `bboptimize()` function</span>
<span class="pl-c1">calibrate!</span>(sn, climate, Qo; MaxTime<span class="pl-k">=</span><span class="pl-c1">180.0</span>)

<span class="pl-c"><span class="pl-c">#</span> Run stream network</span>
<span class="pl-c"><span class="pl-c">#</span> There is also `run_catchment!()` which does the same thing</span>
<span class="pl-c1">run_basin!</span>(sn, climate)

<span class="pl-c"><span class="pl-c">#</span> Get a specific node in network</span>
node <span class="pl-k">=</span> sn[<span class="pl-c1">1</span>]  <span class="pl-c"><span class="pl-c">#</span> get node 1</span>

<span class="pl-c"><span class="pl-c">#</span> Could also get node by name</span>
<span class="pl-c"><span class="pl-c">#</span> which will also return its position in the network:</span>
<span class="pl-c"><span class="pl-c">#</span> nid, node = sn["node1"]</span>

<span class="pl-c"><span class="pl-c">#</span> Compare "goodness-of-fit"</span>
Streamfall<span class="pl-k">.</span><span class="pl-c1">RMSE</span>(obs_streamflow, node<span class="pl-k">.</span>outflow)

<span class="pl-c"><span class="pl-c">#</span> Save calibrated network spec to file</span>
Streamfall<span class="pl-k">.</span><span class="pl-c1">save_network_spec</span>(sn, <span class="pl-s"><span class="pl-pds">"</span>calibrated_example.yml<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">To display an overview of a node or network:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; node
Name: 406219 [BilinearNode]
Area: 1985.73
┌──────────────┬───────────┬─────────────┬─────────────┐
│    Parameter │     Value │ Lower Bound │ Upper Bound │
├──────────────┼───────────┼─────────────┼─────────────┤
│            d │   84.2802 │        10.0 │       550.0 │
│           d2 │   2.42241 │      0.0001 │        10.0 │
│            e │  0.812959 │         0.1 │         1.5 │
│            f │   2.57928 │        0.01 │         3.0 │
│            a │   5.92338 │         0.1 │        10.0 │
│            b │ 0.0989926 │       0.001 │         0.1 │
│ storage_coef │   1.86134 │     1.0e-10 │        10.0 │
│        alpha │  0.727905 │      1.0e-5 │         1.0 │
└──────────────┴───────────┴─────────────┴─────────────┘"><pre>julia<span class="pl-k">&gt;</span> node
Name<span class="pl-k">:</span> <span class="pl-c1">406219</span> [BilinearNode]
Area<span class="pl-k">:</span> <span class="pl-c1">1985.73</span>
┌──────────────┬───────────┬─────────────┬─────────────┐
│    Parameter │     Value │ Lower Bound │ Upper Bound │
├──────────────┼───────────┼─────────────┼─────────────┤
│            d │   <span class="pl-c1">84.2802</span> │        <span class="pl-c1">10.0</span> │       <span class="pl-c1">550.0</span> │
│           d2 │   <span class="pl-c1">2.42241</span> │      <span class="pl-c1">0.0001</span> │        <span class="pl-c1">10.0</span> │
│            e │  <span class="pl-c1">0.812959</span> │         <span class="pl-c1">0.1</span> │         <span class="pl-c1">1.5</span> │
│            f │   <span class="pl-c1">2.57928</span> │        <span class="pl-c1">0.01</span> │         <span class="pl-c1">3.0</span> │
│            a │   <span class="pl-c1">5.92338</span> │         <span class="pl-c1">0.1</span> │        <span class="pl-c1">10.0</span> │
│            b │ <span class="pl-c1">0.0989926</span> │       <span class="pl-c1">0.001</span> │         <span class="pl-c1">0.1</span> │
│ storage_coef │   <span class="pl-c1">1.86134</span> │     <span class="pl-c1">1.0e-10</span> │        <span class="pl-c1">10.0</span> │
│        alpha │  <span class="pl-c1">0.727905</span> │      <span class="pl-c1">1.0e-5</span> │         <span class="pl-c1">1.0</span> │
└──────────────┴───────────┴─────────────┴─────────────┘</pre></div>
<h3 dir="auto"><a id="user-content-more-information" class="anchor" aria-hidden="true" href="#more-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>More information</h3>
<p dir="auto">Stream networks are specified as Dictionaries, with an entry for each node.</p>
<p dir="auto">An example spec from a YAML file is shown here, with connectivity between nodes defined by their names.</p>
<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
# ... Partial snippet of stream definition as an example ...

Node3:
    node_type: IHACRESNode  # node type, typically tied to the attached model
    inlets:  # nodes that contribute incoming streamflow
        - Node1
        - Node2
    outlets: Node4  # node that this node flows to
    area: 150.0  # subcatchment area in km^2
    parameters:
        # model specific parameters defined here
        ..."><pre><span class="pl-c"><span class="pl-c">#</span> ... Partial snippet of stream definition as an example ...</span>

<span class="pl-ent">Node3</span>:
    <span class="pl-ent">node_type</span>: <span class="pl-s">IHACRESNode  </span><span class="pl-c"><span class="pl-c">#</span> node type, typically tied to the attached model</span>
    <span class="pl-ent">inlets</span>:  <span class="pl-c"><span class="pl-c">#</span> nodes that contribute incoming streamflow</span>
        - <span class="pl-s">Node1</span>
        - <span class="pl-s">Node2</span>
    <span class="pl-ent">outlets</span>: <span class="pl-s">Node4  </span><span class="pl-c"><span class="pl-c">#</span> node that this node flows to</span>
    <span class="pl-ent">area</span>: <span class="pl-c1">150.0</span>  <span class="pl-c"><span class="pl-c">#</span> subcatchment area in km^2</span>
    <span class="pl-ent">parameters</span>:
        <span class="pl-c"><span class="pl-c">#</span> model specific parameters defined here</span>
        <span class="pl-s">...</span></pre></div>
<p dir="auto">A full example of the spec is available <a href="https://github.com/ConnectedSystems/Streamfall.jl/blob/main/test/data/campaspe/campaspe_network.yml">here</a>. The snippet above defines <code>Node 3</code> in the diagram below.</p>
<p dir="auto"><a href="https://mermaid-js.github.io/mermaid-live-editor/edit##eyJjb2RlIjoiZ3JhcGggTFJcbiAgICBBKChOb2RlIDEpKSAtLT4gQygoTm9kZSAzKSlcbiAgICBCKChOb2RlIDIpKSAtLT4gQ1xuICAgIEMgLS0-IEQoKE5vZGUgKSlcbiAgICBcbiAgIiwibWVybWFpZCI6IntcbiAgXCJ0aGVtZVwiOiBcImRlZmF1bHRcIlxufSIsInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjpmYWxzZX0" rel="nofollow"><img src="https://camo.githubusercontent.com/c821d5e632a0a7f8f5b322798348754a9c515e24e6a919dbce4246f13bba9f48/68747470733a2f2f6d65726d6169642e696e6b2f696d672f65794a6a6232526c496a6f695a334a686347676754464a6362694167494342424b43684f6232526c494445704b5341744c5434675179676f546d396b5a53417a4b536c6362694167494342434b43684f6232526c494449704b5341744c543467513178754943416749454d674c53302d4945516f4b4535765a4755674e436b7058473467494341675847346749434973496d316c636d3168615751694f6e73696447686c625755694f694a6b5a575a6864577830496e3073496e56775a4746305a55566b61585276636949365a6d467363325573496d4631644739546557356a496a7030636e566c4c434a3163475268644756456157466e636d4674496a706d5957787a5a5830" alt="" data-canonical-src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggTFJcbiAgICBBKChOb2RlIDEpKSAtLT4gQygoTm9kZSAzKSlcbiAgICBCKChOb2RlIDIpKSAtLT4gQ1xuICAgIEMgLS0-IEQoKE5vZGUgNCkpXG4gICAgXG4gICIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjpmYWxzZX0" style="max-width: 100%;"></a></p>
<p dir="auto">Each node defines a subcatchment and holds the relevant parameter values for the associated model. In the future, it will be possible to read in stream network information from other formats (e.g., GeoPackage).</p>
<h2 dir="auto"><a id="user-content-running-a-network" class="anchor" aria-hidden="true" href="#running-a-network"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running a network</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using YAML, DataFrames, CSV, Plots
using Streamfall


# Load and generate stream network
# Creates a graph representation of the stream with associated metadata.
network = YAML.load_file(&quot;../test/data/campaspe/campaspe_network.yml&quot;)

# Name of network/catchment and its specification
sn = create_network(&quot;Example Network&quot;, network)

# Load climate data - in this case from a CSV file with data for all nodes.
climate_data = CSV.File(&quot;../test/data/campaspe/climate/climate_historic.csv&quot;,
                        comment=&quot;#&quot;,
                        dateformat=&quot;YYYY-mm-dd&quot;) |&gt; DataFrame

# Indicate which columns are precipitation and evaporation data based on partial identifiers
climate = Climate(climate_data, &quot;_rain&quot;, &quot;_evap&quot;)


# This runs an entire stream network
@info &quot;Running an example stream...&quot;
run_catchment!(sn, climate)

@info &quot;Displaying outflow from node 406219&quot;
node_id, node = sn[&quot;406219&quot;]
plot(node.outflow)"><pre><span class="pl-k">using</span> YAML, DataFrames, CSV, Plots
<span class="pl-k">using</span> Streamfall


<span class="pl-c"><span class="pl-c">#</span> Load and generate stream network</span>
<span class="pl-c"><span class="pl-c">#</span> Creates a graph representation of the stream with associated metadata.</span>
network <span class="pl-k">=</span> YAML<span class="pl-k">.</span><span class="pl-c1">load_file</span>(<span class="pl-s"><span class="pl-pds">"</span>../test/data/campaspe/campaspe_network.yml<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Name of network/catchment and its specification</span>
sn <span class="pl-k">=</span> <span class="pl-c1">create_network</span>(<span class="pl-s"><span class="pl-pds">"</span>Example Network<span class="pl-pds">"</span></span>, network)

<span class="pl-c"><span class="pl-c">#</span> Load climate data - in this case from a CSV file with data for all nodes.</span>
climate_data <span class="pl-k">=</span> CSV<span class="pl-k">.</span><span class="pl-c1">File</span>(<span class="pl-s"><span class="pl-pds">"</span>../test/data/campaspe/climate/climate_historic.csv<span class="pl-pds">"</span></span>,
                        comment<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>#<span class="pl-pds">"</span></span>,
                        dateformat<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>YYYY-mm-dd<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame

<span class="pl-c"><span class="pl-c">#</span> Indicate which columns are precipitation and evaporation data based on partial identifiers</span>
climate <span class="pl-k">=</span> <span class="pl-c1">Climate</span>(climate_data, <span class="pl-s"><span class="pl-pds">"</span>_rain<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>_evap<span class="pl-pds">"</span></span>)


<span class="pl-c"><span class="pl-c">#</span> This runs an entire stream network</span>
<span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Running an example stream...<span class="pl-pds">"</span></span>
<span class="pl-c1">run_catchment!</span>(sn, climate)

<span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Displaying outflow from node 406219<span class="pl-pds">"</span></span>
node_id, node <span class="pl-k">=</span> sn[<span class="pl-s"><span class="pl-pds">"</span>406219<span class="pl-pds">"</span></span>]
<span class="pl-c1">plot</span>(node<span class="pl-k">.</span>outflow)</pre></div>
<p dir="auto">Individual nodes can be run for more fine-grain control.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Run up to a point in the stream for all time steps.
# All nodes upstream will be run as well (but not those downstream)
node_id, node = sn[&quot;406219&quot;]
run_node!(sn, node_id, climate)

# Reset a node (clears stored states)
reset!(node)

# Run a specific node, and only a specific node, for all time steps
inflow = ...      # array of inflows for each time step
extractions = ... # extractions from stream for each time step
gw_flux = ...     # forced groundwater interactions for each time step
run_node!(node, climate; inflow=inflow, extraction=extractions, exchange=gw_flux)"><pre><span class="pl-c"><span class="pl-c">#</span> Run up to a point in the stream for all time steps.</span>
<span class="pl-c"><span class="pl-c">#</span> All nodes upstream will be run as well (but not those downstream)</span>
node_id, node <span class="pl-k">=</span> sn[<span class="pl-s"><span class="pl-pds">"</span>406219<span class="pl-pds">"</span></span>]
<span class="pl-c1">run_node!</span>(sn, node_id, climate)

<span class="pl-c"><span class="pl-c">#</span> Reset a node (clears stored states)</span>
<span class="pl-c1">reset!</span>(node)

<span class="pl-c"><span class="pl-c">#</span> Run a specific node, and only a specific node, for all time steps</span>
inflow <span class="pl-k">=</span> <span class="pl-k">...</span>      <span class="pl-c"><span class="pl-c">#</span> array of inflows for each time step</span>
extractions <span class="pl-k">=</span> <span class="pl-k">...</span> <span class="pl-c"><span class="pl-c">#</span> extractions from stream for each time step</span>
gw_flux <span class="pl-k">=</span> <span class="pl-k">...</span>     <span class="pl-c"><span class="pl-c">#</span> forced groundwater interactions for each time step</span>
<span class="pl-c1">run_node!</span>(node, climate; inflow<span class="pl-k">=</span>inflow, extraction<span class="pl-k">=</span>extractions, exchange<span class="pl-k">=</span>gw_flux)</pre></div>
<p dir="auto">Another approach is to identify the outlets for a given network...</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="inlets, outlets = find_inlets_and_outlets(sn)"><pre>inlets, outlets <span class="pl-k">=</span> <span class="pl-c1">find_inlets_and_outlets</span>(sn)</pre></div>
<p dir="auto">... and call <code>run_node!</code> for each outlet (with relevant climate data), which will recurse through all relevant nodes upstream.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@info &quot;Running example stream...&quot;
timesteps = sim_length(climate)
for ts in (1:timesteps)
    for outlet in outlets
        run_node!(sn, outlet, climate, ts)
    end
end"><pre><span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Running example stream...<span class="pl-pds">"</span></span>
timesteps <span class="pl-k">=</span> <span class="pl-c1">sim_length</span>(climate)
<span class="pl-k">for</span> ts <span class="pl-k">in</span> (<span class="pl-c1">1</span><span class="pl-k">:</span>timesteps)
    <span class="pl-k">for</span> outlet <span class="pl-k">in</span> outlets
        <span class="pl-c1">run_node!</span>(sn, outlet, climate, ts)
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">See the <a href="https://connectedsystems.github.io/Streamfall.jl/dev" rel="nofollow">docs</a> for an overview and example applications.</p>
<p dir="auto">Further preliminary usage examples are provided in the <a href="https://github.com/ConnectedSystems/Streamfall.jl/tree/main/examples">examples</a> directory.</p>
</article></div>