<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-playingcards52" class="anchor" aria-hidden="true" href="#playingcards52"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PlayingCards52</h1>
<p>Cards from a standard deck of fifty two.</p>
<p><a href="https://travis-ci.com/scheinerman/PlayingCards52.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/50c7a76c332ef4ad64d4cd74236faa6acb6862832fbb12b56804a497602c92af/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f506c6179696e67436172647335322e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/PlayingCards52.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-pick-a-card" class="anchor" aria-hidden="true" href="#pick-a-card"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Pick a Card</h2>
<p>A <code>Card</code> is a standard playing card from a fifty-two card deck. The
following functions return a <code>Card</code>:</p>
<ul>
<li><code>Card(suit,rank)</code> where <code>suit</code> is one of the symbols <code>:clubs</code>, <code>:diamonds</code>,
<code>:hearts</code>, or <code>:spades</code> and <code>rank</code> is an integer from <code>1</code> (for Ace) to
<code>13</code> (for King).</li>
<li><code>Card(index)</code> where <code>index</code> is an integer from <code>1</code> (for the Ace of Clubs)
to <code>52</code> (for the King of Spades).</li>
<li><code>Card()</code> returns a random card.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PlayingCards

julia&gt; Card(:diamonds,12)
Q♢

julia&gt; Card(49)
T♠

julia&gt; Card()
Q♠
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PlayingCards

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:diamonds</span>,<span class="pl-c1">12</span>)
Q♢

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">49</span>)
T♠

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>()
Q♠</pre></div>
<p>The function <code>string</code> returns a two-character representation of the
<code>Card</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; string(Card(22))
&quot;9♢&quot;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">string</span>(<span class="pl-c1">Card</span>(<span class="pl-c1">22</span>))
<span class="pl-s"><span class="pl-pds">"</span>9♢<span class="pl-pds">"</span></span></pre></div>
<h3><a id="user-content-alternative-input" class="anchor" aria-hidden="true" href="#alternative-input"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternative input</h3>
<p>Cards can be entered via their two-character representation. For example, the nine of diamonds can be entered as <code>9♢</code>. That is, type <code>9</code> then <code>\diamondsuit</code> and then TAB.</p>
<p>Face cards, tens, and aces can also be entered in this way (using the capital letters T, J, K, Q, and A followed by the suit symbol):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; c = K♠;

julia&gt; println(c)
K♠

julia&gt; T♡ == Card(:hearts,10)
true
"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> K♠;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(c)
K♠

julia<span class="pl-k">&gt;</span> T♡ <span class="pl-k">==</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:hearts</span>,<span class="pl-c1">10</span>)
<span class="pl-c1">true</span></pre></div>
<p>These cards can also be entered with a leading 1, 10, 11, 12, or 13:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; 10♢
T♢

julia&gt; 13♠
K♠

julia&gt; 1♣
A♣
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">10</span>♢
T♢

julia<span class="pl-k">&gt;</span> <span class="pl-c1">13</span>♠
K♠

julia<span class="pl-k">&gt;</span> <span class="pl-c1">1</span>♣
A♣</pre></div>
<p>Note that the four suit symbols are defined as objects of type <code>PlayingCards52.Suit</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ♠    # type \spadesuit and then TAB
PlayingCards52.Suit(:spades)
"><pre>julia<span class="pl-k">&gt;</span> ♠    <span class="pl-c"><span class="pl-c">#</span> type \spadesuit and then TAB</span>
PlayingCards52<span class="pl-k">.</span><span class="pl-c1">Suit</span>(<span class="pl-c1">:spades</span>)</pre></div>
<p>Cards can be created either using either <code>:spades</code> or <code>♠</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = Card(:spades,5)
5♠

julia&gt; b = Card(♠,5)
5♠

julia&gt; a==b
true
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:spades</span>,<span class="pl-c1">5</span>)
<span class="pl-c1">5</span>♠

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">Card</span>(♠,<span class="pl-c1">5</span>)
<span class="pl-c1">5</span>♠

julia<span class="pl-k">&gt;</span> a<span class="pl-k">==</span>b
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-determine-properties" class="anchor" aria-hidden="true" href="#determine-properties"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Determine Properties</h2>
<p>The functions <code>suit</code> and <code>rank</code> return the suit (as a <code>Symbol</code>) and the
rank (as an <code>Int</code>) of the card.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; c = Card()
J♣

julia&gt; suit(c)
:clubs

julia&gt; rank(c)
11
"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Card</span>()
J♣

julia<span class="pl-k">&gt;</span> <span class="pl-c1">suit</span>(c)
<span class="pl-c1">:clubs</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rank</span>(c)
<span class="pl-c1">11</span></pre></div>
<p>The function <code>index</code> returns a distinct integer value (from <code>1</code> to <code>52</code>)
for the card.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; c = Card(17)
4♢

julia&gt; index(c)
17
"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">Card</span>(<span class="pl-c1">17</span>)
<span class="pl-c1">4</span>♢

julia<span class="pl-k">&gt;</span> <span class="pl-c1">index</span>(c)
<span class="pl-c1">17</span></pre></div>
<p>Use <code>color</code> to determine if the <code>Card</code> is red or black:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; C = Card(:clubs,9)
9♣

julia&gt; color(C)
:black

julia&gt; color(Card(27))  # this is the Ace of Hearts
:red
"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:clubs</span>,<span class="pl-c1">9</span>)
<span class="pl-c1">9</span>♣

julia<span class="pl-k">&gt;</span> <span class="pl-c1">color</span>(C)
<span class="pl-c1">:black</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">color</span>(<span class="pl-c1">Card</span>(<span class="pl-c1">27</span>))  <span class="pl-c"><span class="pl-c">#</span> this is the Ace of Hearts</span>
<span class="pl-c1">:red</span></pre></div>
<h2><a id="user-content-ordering" class="anchor" aria-hidden="true" href="#ordering"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ordering</h2>
<p>Two <code>Card</code>s can be compared with the usual ordering operators (such as <code>&lt;</code>).
The ordering of cards is determined first by rank and, if of the same rank,
by suit (alphabetically, as in bridge).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Card(:diamonds,10) &lt; Card(:hearts,10)
true

julia&gt; Card(:diamonds,10) &lt; Card(:clubs,10)
false
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:diamonds</span>,<span class="pl-c1">10</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:hearts</span>,<span class="pl-c1">10</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:diamonds</span>,<span class="pl-c1">10</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:clubs</span>,<span class="pl-c1">10</span>)
<span class="pl-c1">false</span></pre></div>
<p>The <code>ace_high</code> function is used to determine if an Ace is higher
or lower than the other ranks. Use <code>ace_high(true)</code> or <code>ace_high(false)</code>
to set your preference. A call to <code>ace_high()</code> returns the current setting.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; ace_high()
true

julia&gt; Card(:spades,1) &lt; Card(:diamonds,5)
false

julia&gt; ace_high(false)
false

julia&gt; Card(:spades,1) &lt; Card(:diamonds,5)
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ace_high</span>()
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:spades</span>,<span class="pl-c1">1</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:diamonds</span>,<span class="pl-c1">5</span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ace_high</span>(<span class="pl-c1">false</span>)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:spades</span>,<span class="pl-c1">1</span>) <span class="pl-k">&lt;</span> <span class="pl-c1">Card</span>(<span class="pl-c1">:diamonds</span>,<span class="pl-c1">5</span>)
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-dealing" class="anchor" aria-hidden="true" href="#dealing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Dealing</h2>
<p>The function <code>deck()</code> returns a 52-long array containing all possible
cards in random order. Use <code>deck(false)</code> for them to be returned in a
"new box" order.</p>
<p>Use the function <code>print_deck()</code> to see all 52 cards in four lines of
thirteen cards each.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d = deck(); print_deck(d)
2♠ J♢ K♠ 3♣ Q♢ 6♢ K♡ 9♣ A♠ 8♢ 7♡ J♣ 4♠
8♣ T♢ T♣ 2♢ 4♣ 3♡ T♡ 6♡ Q♣ A♣ 4♢ 8♡ 8♠
3♠ 3♢ 5♣ J♠ 5♢ 6♣ A♢ T♠ Q♡ 7♣ 9♠ 7♠ 6♠
Q♠ J♡ 7♢ 2♡ A♡ 9♢ 2♣ 4♡ 5♡ K♣ 9♡ 5♠ K♢

julia&gt; d = deck(false); print_deck(d)
A♣ 2♣ 3♣ 4♣ 5♣ 6♣ 7♣ 8♣ 9♣ T♣ J♣ Q♣ K♣
A♢ 2♢ 3♢ 4♢ 5♢ 6♢ 7♢ 8♢ 9♢ T♢ J♢ Q♢ K♢
A♡ 2♡ 3♡ 4♡ 5♡ 6♡ 7♡ 8♡ 9♡ T♡ J♡ Q♡ K♡
A♠ 2♠ 3♠ 4♠ 5♠ 6♠ 7♠ 8♠ 9♠ T♠ J♠ Q♠ K♠
"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">deck</span>(); <span class="pl-c1">print_deck</span>(d)
<span class="pl-c1">2</span>♠ J♢ K♠ <span class="pl-c1">3</span>♣ Q♢ <span class="pl-c1">6</span>♢ K♡ <span class="pl-c1">9</span>♣ A♠ <span class="pl-c1">8</span>♢ <span class="pl-c1">7</span>♡ J♣ <span class="pl-c1">4</span>♠
<span class="pl-c1">8</span>♣ T♢ T♣ <span class="pl-c1">2</span>♢ <span class="pl-c1">4</span>♣ <span class="pl-c1">3</span>♡ T♡ <span class="pl-c1">6</span>♡ Q♣ A♣ <span class="pl-c1">4</span>♢ <span class="pl-c1">8</span>♡ <span class="pl-c1">8</span>♠
<span class="pl-c1">3</span>♠ <span class="pl-c1">3</span>♢ <span class="pl-c1">5</span>♣ J♠ <span class="pl-c1">5</span>♢ <span class="pl-c1">6</span>♣ A♢ T♠ Q♡ <span class="pl-c1">7</span>♣ <span class="pl-c1">9</span>♠ <span class="pl-c1">7</span>♠ <span class="pl-c1">6</span>♠
Q♠ J♡ <span class="pl-c1">7</span>♢ <span class="pl-c1">2</span>♡ A♡ <span class="pl-c1">9</span>♢ <span class="pl-c1">2</span>♣ <span class="pl-c1">4</span>♡ <span class="pl-c1">5</span>♡ K♣ <span class="pl-c1">9</span>♡ <span class="pl-c1">5</span>♠ K♢

julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">deck</span>(<span class="pl-c1">false</span>); <span class="pl-c1">print_deck</span>(d)
A♣ <span class="pl-c1">2</span>♣ <span class="pl-c1">3</span>♣ <span class="pl-c1">4</span>♣ <span class="pl-c1">5</span>♣ <span class="pl-c1">6</span>♣ <span class="pl-c1">7</span>♣ <span class="pl-c1">8</span>♣ <span class="pl-c1">9</span>♣ T♣ J♣ Q♣ K♣
A♢ <span class="pl-c1">2</span>♢ <span class="pl-c1">3</span>♢ <span class="pl-c1">4</span>♢ <span class="pl-c1">5</span>♢ <span class="pl-c1">6</span>♢ <span class="pl-c1">7</span>♢ <span class="pl-c1">8</span>♢ <span class="pl-c1">9</span>♢ T♢ J♢ Q♢ K♢
A♡ <span class="pl-c1">2</span>♡ <span class="pl-c1">3</span>♡ <span class="pl-c1">4</span>♡ <span class="pl-c1">5</span>♡ <span class="pl-c1">6</span>♡ <span class="pl-c1">7</span>♡ <span class="pl-c1">8</span>♡ <span class="pl-c1">9</span>♡ T♡ J♡ Q♡ K♡
A♠ <span class="pl-c1">2</span>♠ <span class="pl-c1">3</span>♠ <span class="pl-c1">4</span>♠ <span class="pl-c1">5</span>♠ <span class="pl-c1">6</span>♠ <span class="pl-c1">7</span>♠ <span class="pl-c1">8</span>♠ <span class="pl-c1">9</span>♠ T♠ J♠ Q♠ K♠</pre></div>
<p>Deal a random poker hand like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ShowSet

julia&gt; Set(deck()[1:5])
{2♠,6♢,6♡,T♠,K♣}
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ShowSet

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Set</span>(<span class="pl-c1">deck</span>()[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>])
{<span class="pl-c1">2</span>♠,<span class="pl-c1">6</span>♢,<span class="pl-c1">6</span>♡,T♠,K♣}</pre></div>
<h2><a id="user-content-shuffling" class="anchor" aria-hidden="true" href="#shuffling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Shuffling</h2>
<p>The <code>deck()</code> function returns a randomly shuffled deck of cards with all 52!
possible orderings equally likely.
However, if one wishes to manually randomize the deck, or to randomize an ordered deck
as returned by <code>deck(false)</code>, we provide the functions <code>shuffle</code>, <code>riffle</code>, and <code>cut</code>.
These functions are typically applied to a full deck of 52 cards, but may be used
on any list.</p>
<h3><a id="user-content-shuffle" class="anchor" aria-hidden="true" href="#shuffle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Shuffle</h3>
<p>The functions <code>shuffle</code> and <code>shuffle!</code> from the <code>Random</code> module are
imported and so may be applied to card decks. These functions apply a random
permutation to the cards (all orders equally likely). The function <code>shuffle</code>
returns a new deck, leaving the original deck unchanged. The function <code>shuffle!</code>
overwrites the deck in the new order.</p>
<h3><a id="user-content-riffle" class="anchor" aria-hidden="true" href="#riffle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Riffle</h3>
<p>The functions <code>riffle</code> and <code>riffle!</code> apply a random riffle shuffle to the deck
using the <a href="https://en.wikipedia.org/wiki/Gilbert%E2%80%93Shannon%E2%80%93Reeds_model" rel="nofollow">Gilbert–Shannon–Reeds model</a>. The former leaves the original
deck unchanged and the latter overwrites the deck.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d = deck(false); print_deck(d)
A♣ 2♣ 3♣ 4♣ 5♣ 6♣ 7♣ 8♣ 9♣ T♣ J♣ Q♣ K♣
A♢ 2♢ 3♢ 4♢ 5♢ 6♢ 7♢ 8♢ 9♢ T♢ J♢ Q♢ K♢
A♡ 2♡ 3♡ 4♡ 5♡ 6♡ 7♡ 8♡ 9♡ T♡ J♡ Q♡ K♡
A♠ 2♠ 3♠ 4♠ 5♠ 6♠ 7♠ 8♠ 9♠ T♠ J♠ Q♠ K♠

julia&gt; riffle!(d); print_deck(d)
A♣ 4♡ 5♡ 6♡ 2♣ 3♣ 4♣ 7♡ 8♡ 9♡ T♡ J♡ Q♡
K♡ A♠ 2♠ 5♣ 6♣ 7♣ 8♣ 9♣ T♣ J♣ Q♣ K♣ A♢
3♠ 4♠ 5♠ 6♠ 7♠ 2♢ 3♢ 8♠ 4♢ 5♢ 6♢ 7♢ 9♠
8♢ 9♢ T♠ T♢ J♢ Q♢ J♠ K♢ Q♠ A♡ 2♡ K♠ 3♡
"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">deck</span>(<span class="pl-c1">false</span>); <span class="pl-c1">print_deck</span>(d)
A♣ <span class="pl-c1">2</span>♣ <span class="pl-c1">3</span>♣ <span class="pl-c1">4</span>♣ <span class="pl-c1">5</span>♣ <span class="pl-c1">6</span>♣ <span class="pl-c1">7</span>♣ <span class="pl-c1">8</span>♣ <span class="pl-c1">9</span>♣ T♣ J♣ Q♣ K♣
A♢ <span class="pl-c1">2</span>♢ <span class="pl-c1">3</span>♢ <span class="pl-c1">4</span>♢ <span class="pl-c1">5</span>♢ <span class="pl-c1">6</span>♢ <span class="pl-c1">7</span>♢ <span class="pl-c1">8</span>♢ <span class="pl-c1">9</span>♢ T♢ J♢ Q♢ K♢
A♡ <span class="pl-c1">2</span>♡ <span class="pl-c1">3</span>♡ <span class="pl-c1">4</span>♡ <span class="pl-c1">5</span>♡ <span class="pl-c1">6</span>♡ <span class="pl-c1">7</span>♡ <span class="pl-c1">8</span>♡ <span class="pl-c1">9</span>♡ T♡ J♡ Q♡ K♡
A♠ <span class="pl-c1">2</span>♠ <span class="pl-c1">3</span>♠ <span class="pl-c1">4</span>♠ <span class="pl-c1">5</span>♠ <span class="pl-c1">6</span>♠ <span class="pl-c1">7</span>♠ <span class="pl-c1">8</span>♠ <span class="pl-c1">9</span>♠ T♠ J♠ Q♠ K♠

julia<span class="pl-k">&gt;</span> <span class="pl-c1">riffle!</span>(d); <span class="pl-c1">print_deck</span>(d)
A♣ <span class="pl-c1">4</span>♡ <span class="pl-c1">5</span>♡ <span class="pl-c1">6</span>♡ <span class="pl-c1">2</span>♣ <span class="pl-c1">3</span>♣ <span class="pl-c1">4</span>♣ <span class="pl-c1">7</span>♡ <span class="pl-c1">8</span>♡ <span class="pl-c1">9</span>♡ T♡ J♡ Q♡
K♡ A♠ <span class="pl-c1">2</span>♠ <span class="pl-c1">5</span>♣ <span class="pl-c1">6</span>♣ <span class="pl-c1">7</span>♣ <span class="pl-c1">8</span>♣ <span class="pl-c1">9</span>♣ T♣ J♣ Q♣ K♣ A♢
<span class="pl-c1">3</span>♠ <span class="pl-c1">4</span>♠ <span class="pl-c1">5</span>♠ <span class="pl-c1">6</span>♠ <span class="pl-c1">7</span>♠ <span class="pl-c1">2</span>♢ <span class="pl-c1">3</span>♢ <span class="pl-c1">8</span>♠ <span class="pl-c1">4</span>♢ <span class="pl-c1">5</span>♢ <span class="pl-c1">6</span>♢ <span class="pl-c1">7</span>♢ <span class="pl-c1">9</span>♠
<span class="pl-c1">8</span>♢ <span class="pl-c1">9</span>♢ T♠ T♢ J♢ Q♢ J♠ K♢ Q♠ A♡ <span class="pl-c1">2</span>♡ K♠ <span class="pl-c1">3</span>♡</pre></div>
<p>Note that a single riffle shuffle does a poor job at randomizing
the deck.</p>
<h3><a id="user-content-cut" class="anchor" aria-hidden="true" href="#cut"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cut</h3>
<p>The functions <code>cut</code> and <code>cut!</code> are used to cut the deck.</p>
<ul>
<li><code>cut!(d,idx)</code> moves cards <code>1</code> through <code>idx</code> to the back of the deck; the
new first card is the one formerly at position <code>idx+1</code>.</li>
<li><code>cut!(d)</code> cuts the deck a random index.  If the deck has <code>n</code> cards,
then the cut location is given by the binomial random variable <code>B(n,1/2)</code>.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; d = deck(false);

julia&gt; cut!(d)

julia&gt; print_deck(d)
Q♢ K♢ A♡ 2♡ 3♡ 4♡ 5♡ 6♡ 7♡ 8♡ 9♡ T♡ J♡
Q♡ K♡ A♠ 2♠ 3♠ 4♠ 5♠ 6♠ 7♠ 8♠ 9♠ T♠ J♠
Q♠ K♠ A♣ 2♣ 3♣ 4♣ 5♣ 6♣ 7♣ 8♣ 9♣ T♣ J♣
Q♣ K♣ A♢ 2♢ 3♢ 4♢ 5♢ 6♢ 7♢ 8♢ 9♢ T♢ J♢
"><pre>julia<span class="pl-k">&gt;</span> d <span class="pl-k">=</span> <span class="pl-c1">deck</span>(<span class="pl-c1">false</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cut!</span>(d)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">print_deck</span>(d)
Q♢ K♢ A♡ <span class="pl-c1">2</span>♡ <span class="pl-c1">3</span>♡ <span class="pl-c1">4</span>♡ <span class="pl-c1">5</span>♡ <span class="pl-c1">6</span>♡ <span class="pl-c1">7</span>♡ <span class="pl-c1">8</span>♡ <span class="pl-c1">9</span>♡ T♡ J♡
Q♡ K♡ A♠ <span class="pl-c1">2</span>♠ <span class="pl-c1">3</span>♠ <span class="pl-c1">4</span>♠ <span class="pl-c1">5</span>♠ <span class="pl-c1">6</span>♠ <span class="pl-c1">7</span>♠ <span class="pl-c1">8</span>♠ <span class="pl-c1">9</span>♠ T♠ J♠
Q♠ K♠ A♣ <span class="pl-c1">2</span>♣ <span class="pl-c1">3</span>♣ <span class="pl-c1">4</span>♣ <span class="pl-c1">5</span>♣ <span class="pl-c1">6</span>♣ <span class="pl-c1">7</span>♣ <span class="pl-c1">8</span>♣ <span class="pl-c1">9</span>♣ T♣ J♣
Q♣ K♣ A♢ <span class="pl-c1">2</span>♢ <span class="pl-c1">3</span>♢ <span class="pl-c1">4</span>♢ <span class="pl-c1">5</span>♢ <span class="pl-c1">6</span>♢ <span class="pl-c1">7</span>♢ <span class="pl-c1">8</span>♢ <span class="pl-c1">9</span>♢ T♢ J♢</pre></div>
<h2><a id="user-content-acknowledgement" class="anchor" aria-hidden="true" href="#acknowledgement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Acknowledgement</h2>
<p>Developed  with input from <a href="https://github.com/charleskawczynski">@charleskawczynski</a>
and in parallel with his
<a href="https://github.com/charleskawczynski/PlayingCards.jl">PlayingCards.jl</a>.</p>
</article></div>