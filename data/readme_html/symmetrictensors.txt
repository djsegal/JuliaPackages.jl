<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-symmetrictensorsjl" class="anchor" aria-hidden="true" href="#symmetrictensorsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SymmetricTensors.jl</h1>
<p><a href="https://coveralls.io/github/iitis/SymmetricTensors.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c2c41ee4e80bf9ee34ad9672d8effdac83a3df7cf036426e8303d131ac79c3c1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f69697469732f53796d6d657472696354656e736f72732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/iitis/SymmetricTensors.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3430780" rel="nofollow"><img src="https://camo.githubusercontent.com/34db292ba7080ca3120c6d9760326de130aa289a8b2a0c0e916188fdd773da50/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333433303738302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3430780.svg" style="max-width:100%;"></a></p>
<p>SymmetricTensors.jl provides the <code>SymmetricTensors{T, N}</code> type used to store fully symmetric tensors in more efficient way,
without most of redundant repetitions. It uses blocks of <code>Array{T, N}</code> stored in <code>Union{Array{Float,N}, Nothing}</code> structure.
Repeated blocks are replaced by <code>Void</code>. The module introduces <code>SymmetricTensors{T, N}</code> type and some basic operations on this type.
As of 01/01/2017 <a href="https://github.com/kdomino">@kdomino</a> is the lead maintainer of this package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, just use run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add SymmetricTensors
"><pre>pkg<span class="pl-k">&gt;</span> add SymmetricTensors</pre></div>
<p>to install the files. Julia 1.0 or later is required.</p>
<h2><a id="user-content-constructor" class="anchor" aria-hidden="true" href="#constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Constructor</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; data = ones(4,4);


julia&gt; SymmetricTensor{Float64,2}(Union{Nothing, Array{Float64,2}}[[1.0 1.0; 1.0 1.0] [1.0 1.0; 1.0 1.0]; nothing [1.0 1.0; 1.0 1.0]], 2, 2, 4, true)


"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>);


julia<span class="pl-k">&gt;</span> <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">true</span>)

</pre></div>
<h2><a id="user-content-converting" class="anchor" aria-hidden="true" href="#converting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Converting</h2>
<p>From <code>Array{T, N}</code> to <code>SymmetricTensors{T, N}</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; SymmetricTensors(data::Array{T, N}, bls::Int = 2)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">SymmetricTensors</span>(data<span class="pl-k">::</span><span class="pl-c1">Array{T, N}</span>, bls<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">2</span>)</pre></div>
<p>where bls is the size of a block. It is a parameter affecting the compuational speed of cumulants. The block size must fulfill <code>bls âˆˆ {1, 2,..., dats}</code> where <code>dats = size(data, 1) = ... = size(data, N)</code> otherwise error is risen.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; data = ones(4,4);


julia&gt; convert(SymmetricTensor, data, 2)
SymmetricTensor{Float64,2}(Union{Nothing, Array{Float64,2}}[[1.0 1.0; 1.0 1.0] [1.0 1.0; 1.0 1.0]; nothing [1.0 1.0; 1.0 1.0]], 2, 2, 4, true)

"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>);


julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(SymmetricTensor, data, <span class="pl-c1">2</span>)
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">true</span>)
</pre></div>
<p>From <code>SymmetricTensors{T, N}</code> to <code>Array{T, N}</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Array(st::SymmetricTensors{T, N})
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(st<span class="pl-k">::</span><span class="pl-c1">SymmetricTensors{T, N}</span>)</pre></div>
<p>Wrong block size:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; SymmetricTensor(ones(4,4), 5)
ERROR: DimensionMismatch(&quot;bad block size 5 &gt; 4&quot;)
"><pre><code>julia&gt; SymmetricTensor(ones(4,4), 5)
ERROR: DimensionMismatch("bad block size 5 &gt; 4")
</code></pre></div>
<h2><a id="user-content-fields" class="anchor" aria-hidden="true" href="#fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fields</h2>
<ul>
<li><code>frame::ArrayNArrays{T,N}</code>: stores data, where <code>ArrayNArrays{T,N} = Array{Union{Array{T, N}, Nothing}, N}</code></li>
<li><code>bls::Int</code>: size of a block,</li>
<li><code>bln::Int</code>: number of blocks,</li>
<li><code>dats::Int</code>: size of data,</li>
<li><code>sqr::Bool</code>: shows if the last block is squared.</li>
</ul>
<h2><a id="user-content-operations" class="anchor" aria-hidden="true" href="#operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Operations</h2>
<p>Elementwise addition: <code>+, -</code> is supported between many <code>SymmetricTensors{T, N}</code> while elementwise substraction: <code>-</code> between two <code>SymmetricTensors{T, N}</code>. Addition substraction multiplication and division <code>+, -, *, /</code>
is supported between <code>SymmetricTensors{T, N}</code> and a number.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; x = SymmetricTensor(ones(4,4));

julia&gt; y = SymmetricTensor(2*ones(4,4));

julia&gt; x+y
SymmetricTensor{Float64,2}(Union{Nothing, Array{Float64,2}}[[3.0 3.0; 3.0 3.0] [3.0 3.0; 3.0 3.0]; #undef [3.0 3.0; 3.0 3.0]], 2, 2, 4, true)

julia&gt; x*10
SymmetricTensor{Float64,2}(Union{Nothing, Array{Float64,2}}[[10.0 10.0; 10.0 10.0] [10.0 10.0; 10.0 10.0]; #undef [10.0 10.0; 10.0 10.0]], 2, 2, 4, true)
"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">SymmetricTensor</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>));

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">SymmetricTensor</span>(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>));

julia<span class="pl-k">&gt;</span> x<span class="pl-k">+</span>y
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">3.0</span> <span class="pl-c1">3.0</span>; <span class="pl-c1">3.0</span> <span class="pl-c1">3.0</span>] [<span class="pl-c1">3.0</span> <span class="pl-c1">3.0</span>; <span class="pl-c1">3.0</span> <span class="pl-c1">3.0</span>]; <span class="pl-c"><span class="pl-c">#</span>undef [3.0 3.0; 3.0 3.0]], 2, 2, 4, true)</span>

julia<span class="pl-k">&gt;</span> x<span class="pl-k">*</span><span class="pl-c1">10</span>
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">10.0</span> <span class="pl-c1">10.0</span>; <span class="pl-c1">10.0</span> <span class="pl-c1">10.0</span>] [<span class="pl-c1">10.0</span> <span class="pl-c1">10.0</span>; <span class="pl-c1">10.0</span> <span class="pl-c1">10.0</span>]; <span class="pl-c"><span class="pl-c">#</span>undef [10.0 10.0; 10.0 10.0]], 2, 2, 4, true)</span></pre></div>
<p>The function diag returns a Vector{T}, of all super-diagonal elements of a SymmetricTensor.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; data = ones(5,5,5,5);

julia&gt; st = SymmetricTensor(data);

julia&gt; diag(st)
5-element Array{Float64,1}:
 1.0
 1.0
 1.0
 1.0
 1.0
"><pre>julia<span class="pl-k">&gt;</span> data <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">5</span>,<span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> st <span class="pl-k">=</span> <span class="pl-c1">SymmetricTensor</span>(data);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">diag</span>(st)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span></pre></div>
<h2><a id="user-content-random-symmetric-tensor-generation" class="anchor" aria-hidden="true" href="#random-symmetric-tensor-generation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Random Symmetric Tensor generation</h2>
<p>To generate random Symmetric Tensor with random elements of typer <code>T</code> form a uniform distribution on <code>[0,1)</code> use <code>rand(SymmetricTensor{T, N}, n::Int, b::Int = 2)</code>. Here n denotes data size and b denotes block size.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Random

julia&gt; Random.seed!(42)

julia&gt; rand(SymmetricTensor{Float64, 2}, 2)
SymmetricTensor{Float64,2}(Union{Nothing, Array{Float64,2}}[[0.533183 0.454029; 0.454029 0.0176868]], 2, 1, 2, true)

"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand</span>(SymmetricTensor{Float64, <span class="pl-c1">2</span>}, <span class="pl-c1">2</span>)
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">0.533183</span> <span class="pl-c1">0.454029</span>; <span class="pl-c1">0.454029</span> <span class="pl-c1">0.0176868</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">true</span>)
</pre></div>
<h2><a id="user-content-getindex-and-setindex" class="anchor" aria-hidden="true" href="#getindex-and-setindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>getindex and setindex!</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Random

julia&gt; Random.seed!(42)

julia&gt; st = rand(SymmetricTensor{Float64, 2}, 2)
SymmetricTensor{Float64,2}(Union{Nothing, Array{Float64,2}}[[0.533183 0.454029; 0.454029 0.0176868]], 2, 1, 2, true)

julia&gt; st[1,2]
0.4540291355871424

julia&gt; st[2,1]
0.4540291355871424
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random

julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">42</span>)

julia<span class="pl-k">&gt;</span> st <span class="pl-k">=</span> <span class="pl-c1">rand</span>(SymmetricTensor{Float64, <span class="pl-c1">2</span>}, <span class="pl-c1">2</span>)
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">0.533183</span> <span class="pl-c1">0.454029</span>; <span class="pl-c1">0.454029</span> <span class="pl-c1">0.0176868</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> st[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
<span class="pl-c1">0.4540291355871424</span>

julia<span class="pl-k">&gt;</span> st[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">0.4540291355871424</span></pre></div>
<p><code>setindex!(st::SymmetricTensor, x::Float, mulind::Int...)</code> changes all symmetric tensor's elements indexed by <code>mulind</code> to <code>x</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; st[1,2] = 10.

julia&gt; convert(Array, st)
2Ã—2 Array{Float64,2}:
  0.533183  10.0      
 10.0        0.0176868

"><pre>julia<span class="pl-k">&gt;</span> st[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">10.</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">convert</span>(Array, st)
<span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.533183</span>  <span class="pl-c1">10.0</span>      
 <span class="pl-c1">10.0</span>        <span class="pl-c1">0.0176868</span>
</pre></div>
<h2><a id="user-content-auxiliary-function" class="anchor" aria-hidden="true" href="#auxiliary-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Auxiliary function</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; unfold(data::Array{T,N}, mode::Int)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">unfold</span>(data<span class="pl-k">::</span><span class="pl-c1">Array{T,N}</span>, mode<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<p>unfolds <code>data</code> in a given mode</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = reshape(collect(1.:8.), (2,2,2))
2Ã—2Ã—2 Array{Float64,3}:
[:, :, 1] =
 1.0  3.0
 2.0  4.0

[:, :, 2] =
 5.0  7.0
 6.0  8.0

julia&gt; unfold(a, 1)
2Ã—4 Array{Float64,2}:
 1.0  3.0  5.0  7.0
 2.0  4.0  6.0  8.0

julia&gt; unfold(a, 2)
2Ã—4 Array{Float64,2}:
 1.0  2.0  5.0  6.0
 3.0  4.0  7.0  8.0

julia&gt; unfold(a, 3)
2Ã—4 Array{Float64,2}:
 1.0  2.0  3.0  4.0
 5.0  6.0  7.0  8.0
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">reshape</span>(<span class="pl-c1">collect</span>(<span class="pl-c1">1.</span>:<span class="pl-c1">8.</span>), (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>))
<span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">2</span> Array{Float64,<span class="pl-c1">3</span>}<span class="pl-k">:</span>
[:, :, <span class="pl-c1">1</span>] <span class="pl-k">=</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">3.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>

[:, :, <span class="pl-c1">2</span>] <span class="pl-k">=</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">7.0</span>
 <span class="pl-c1">6.0</span>  <span class="pl-c1">8.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unfold</span>(a, <span class="pl-c1">1</span>)
<span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">3.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">7.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">8.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unfold</span>(a, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">5.0</span>  <span class="pl-c1">6.0</span>
 <span class="pl-c1">3.0</span>  <span class="pl-c1">4.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">8.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unfold</span>(a, <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">Ã—</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">3.0</span>  <span class="pl-c1">4.0</span>
 <span class="pl-c1">5.0</span>  <span class="pl-c1">6.0</span>  <span class="pl-c1">7.0</span>  <span class="pl-c1">8.0</span></pre></div>
<h2><a id="user-content-block-structure" class="anchor" aria-hidden="true" href="#block-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Block structure</h2>
<p>The block usage is motivated by the paper M. D. Schatz, T. M. Low, R. A. van de Geijn, and T. G. Kolda, "Exploiting symmetry in tensors for high performance: Multiplication with symmetric tensors", SIAM Journal on Scientific Computing, 36 (2014), pp. C453â€“C479 <a href="https://doi.org/10.1137/130907215" rel="nofollow">https://doi.org/10.1137/130907215</a>. There only the meaningful part of the symmetric tensor is stored in blocks to decrease the memory and computational overhead. The selection of the optimal block size is not straight forward, however in most cases concerning cumulants one can use <code>2</code> or <code>3</code>.</p>
<p>This project was partially financed by the National Science Centre, Poland â€“ project number 2014/15/B/ST6/05204.</p>
</article></div>