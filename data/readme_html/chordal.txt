<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-chordaldecomp" class="anchor" aria-hidden="true" href="#chordaldecomp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ChordalDecomp</h1>
<p><a href="https://github.com/tjdiamandis/ChordalDecomp.jl/actions"><img src="https://github.com/tjdiamandis/ChordalDecomp.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/tjdiamandis/ChordalDecomp.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/027a4be3bcd687cdc9083229a11c5f7e6e461342fd73bfcb7cba101fc34df3da/68747470733a2f2f636f6465636f762e696f2f67682f746a6469616d616e6469732f43686f7264616c4465636f6d702e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tjdiamandis/ChordalDecomp.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-todos" class="anchor" aria-hidden="true" href="#todos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODOs</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Performance and type stability</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Unit tests -- ensure data structure change worked</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> PSD matrix completion</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Implement maximal cliques algorithm to avoid LightGraphs dep?</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Implement different pre-cholesky reorderings</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Implement clique tree algorithms</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Allow user-specified weight algorithm for clique graph merging</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Test with larger problems</li>
</ul>
<h2><a id="user-content-chordal-decomposition-steps" class="anchor" aria-hidden="true" href="#chordal-decomposition-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Chordal Decomposition Steps</h2>
<ol>
<li>Reorder the vertex set <code>V = {1, 2, ..., n}</code> via some heuristics, e.g.,
<ul>
<li>multi-level nested dissection</li>
<li>minimum degree
<ul>
<li>P. R. Amestoy, T. A. Davis, and I. S Duﬀ. An approximate minimum degree ordering algorithm. SIAM Journal on Matrix Analysis and Applications, 17(4):886905, 1996.</li>
</ul>
</li>
<li>Can be handled by step 2 below with certain Cholesky implementations</li>
</ul>
</li>
<li>Symbolic Cholesky factorization
<ul>
<li>This provides the <strong>chordal extension</strong> (get edge set <code>E</code> from <code>L</code>)</li>
</ul>
</li>
<li>Merge cliques into larger blocks
<ul>
<li>form clique graph or tree</li>
<li>choose heuristic merging algorithm</li>
</ul>
</li>
<li>Index selector matrices</li>
</ol>
<h3><a id="user-content-clique-merging-strategies" class="anchor" aria-hidden="true" href="#clique-merging-strategies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clique Merging Strategies</h3>
<h4><a id="user-content-clique-tree-based-vandenberghe-paper" class="anchor" aria-hidden="true" href="#clique-tree-based-vandenberghe-paper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clique Tree Based (Vandenberghe paper)</h4>
<ol>
<li>Form the clique tree
<ul>
<li><strong>Clique intersection property (CIP):</strong> For each pair of cliques, their intersection is contained in every vertex on the unique path connection them in the tree</li>
<li>Can be efficiently computed from the chordal graph, see:
<ul>
<li>Blair, J.R.S., Peyton, B. (1993):An introduction to chordal graphs and clique trees. In: George,A., Gilbert, J.R., Liu, J.W.H. (eds.), Graph Theory and Sparse Matrix Computation. Springer-Verlag, pp 1–29</li>
<li>Tarjan, R.E., Yannakakis, M. (1984): Simple linear-time algorithms to test chordality of graphs, test acyclicity of hypergraphs, and selectively reduce acyclic hypergraphs. SIAM J. Comput. 13(3), 566–579</li>
<li>Lewis, J.G., Peyton, B.W., Pothen, A. (1989): A fast algorithm for reordering sparse matrices for parallel factorization. SIAM J. Sci. Statist. Comput. 10(6), 1146–1173</li>
<li><a href="https://www.cs.cornell.edu/info/people/csun/papers/cct.ps" rel="nofollow">https://www.cs.cornell.edu/info/people/csun/papers/cct.ps</a></li>
</ul>
</li>
</ul>
</li>
<li>Pick an arbitrary clique as the root. Form a topological ordering (number ea. child before parent) that satisfies the running intersection property to get a perfect elimination ordering</li>
</ol>
<h4><a id="user-content-clique-graph-based-garstka-et-al-implemented-in-cosmojl" class="anchor" aria-hidden="true" href="#clique-graph-based-garstka-et-al-implemented-in-cosmojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Clique Graph based (<a href="https://arxiv.org/abs/1911.05615" rel="nofollow">Garstka et al.</a>, implemented in <a href="https://github.com/oxfordcontrol/COSMO.jl">COSMO.jl</a>)</h4>
<ol>
<li>Create clique graph
<ul>
<li>Compute weight function e(C_i, C_j) = w_{ij}</li>
<li>If eigenvalue is dominant step, can use <code>e(Ci, Cj) = |Ci|^3 + |Cj|^3 − |Ci ∪ Cj|^3</code>.</li>
<li>See Section 3 of paper</li>
</ul>
</li>
<li>Algorithm (greedy):
<ol>
<li>Merge cliques connected by edge with highest positive weight</li>
<li>Recompute weights</li>
<li>If there are more positive weights, repeat. Else, break.</li>
</ol>
</li>
</ol>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li>Lieven Vandenberghe and Martin Andersen's <a href="https://www.seas.ucla.edu/~vandenbe/publications/chordalsdp.pdf" rel="nofollow">Chordal Graphs and Semidefinite Optimization</a> provides an excellent overview of this area.</li>
<li>The clique graph implementation follows <a href="https://arxiv.org/abs/1911.05615" rel="nofollow">Garstka et al.</a>. The accompanying solver <a href="https://github.com/oxfordcontrol/COSMO.jl">COSMO.jl</a> has chordal decomposition built-in and several great customization features.</li>
</ul>
</article></div>