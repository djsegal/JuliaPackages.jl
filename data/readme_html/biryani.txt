<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-biryani" class="anchor" aria-hidden="true" href="#biryani"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Biryani</h1>
<p dir="auto">A data conversion and validation toolbox, written in Julia.</p>
<p dir="auto"><a href="https://travis-ci.org/eraviart/Biryani.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/733aa1a65db1cefb37270e76dde501a0848274783a65b8229388241159b5179c/68747470733a2f2f7472617669732d63692e6f72672f65726176696172742f42697279616e692e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/eraviart/Biryani.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/r/eraviart/Biryani.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e5239bd629cd10a4db95781a609b01683ae2d4ac80f85d8e37df206d46e22a48/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f65726176696172742f42697279616e692e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/eraviart/Biryani.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://pkg.julialang.org/?pkg=Biryani&amp;ver=release" rel="nofollow"><img src="https://camo.githubusercontent.com/ad9370a8866f252c35b83843500fe168bb44cd46de2e0ef47ac877600d632e48/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f42697279616e695f72656c656173652e737667" alt="Biryani" data-canonical-src="http://pkg.julialang.org/badges/Biryani_release.svg" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Pkg.add(&quot;Biryani&quot;)

julia&gt; using Biryani"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Biryani<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Biryani</pre></div>
<h2 dir="auto"><a id="user-content-usage-examples" class="anchor" aria-hidden="true" href="#usage-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage Examples</h2>
<h3 dir="auto"><a id="user-content-example-1-email-validator" class="anchor" aria-hidden="true" href="#example-1-email-validator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Email validator</h3>
<p dir="auto">Before starting a conversion or validation, the value to convert must be wrapped in a <code>Convertible</code> object. A <code>Convertible</code> contains 3 fields:</p>
<ul dir="auto">
<li>The value</li>
<li>A conversion context</li>
<li>An error</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; convertible = Convertible(&quot;John@DOE.name&quot;)
Convertible(&quot;John@DOE.name&quot;,EmptyContext(),nothing)"><pre>julia<span class="pl-k">&gt;</span> convertible <span class="pl-k">=</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>)
<span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>,<span class="pl-c1">EmptyContext</span>(),<span class="pl-c1">nothing</span>)</pre></div>
<p dir="auto">Every converter accepts a <code>Convertible</code> as argument and returns another Convertible:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; input_to_email(convertible)
Convertible(&quot;john@doe.name&quot;,EmptyContext(),nothing)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">input_to_email</span>(convertible)
<span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">EmptyContext</span>(),<span class="pl-c1">nothing</span>)</pre></div>
<p dir="auto">Operations can be chained using the <code>|&gt;</code> operator:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;John@DOE.name&quot;) |&gt; input_to_email
Convertible(&quot;john@doe.name&quot;,EmptyContext(),nothing)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email
<span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">EmptyContext</span>(),<span class="pl-c1">nothing</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;   \n  &quot;) |&gt; input_to_email
Convertible(nothing,EmptyContext(),nothing)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>   <span class="pl-cce">\n</span>  <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email
<span class="pl-c1">Convertible</span>(<span class="pl-c1">nothing</span>,<span class="pl-c1">EmptyContext</span>(),<span class="pl-c1">nothing</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;John.DOE.name&quot;) |&gt; input_to_email
Convertible(&quot;john.doe.name&quot;,EmptyContext(),&quot;An email must contain exactly one \&quot;@\&quot;.&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John.DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email
<span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>john.doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">EmptyContext</span>(),<span class="pl-s"><span class="pl-pds">"</span>An email must contain exactly one <span class="pl-cce">\"</span>@<span class="pl-cce">\"</span>.<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The value of a convertible can be extracted using the <code>to_value</code> function:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;John@DOE.name&quot;) |&gt; input_to_email |&gt; to_value
&quot;john@doe.name&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> to_value
<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">When conversion has failed (the convertible has an <code>error</code> field), <code>to_value</code> throws an exception instead of returning the value:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;John.DOE.name&quot;) |&gt; input_to_email |&gt; to_value
ERROR: An email must contain exactly one &quot;@&quot;.
Value: john.doe.name
 in to_value at .../Biryani.jl:571
 in |&gt; at ./operators.jl:178"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John.DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> to_value
ERROR<span class="pl-k">:</span> An email must contain exactly one <span class="pl-s"><span class="pl-pds">"</span>@<span class="pl-pds">"</span></span>.
Value<span class="pl-k">:</span> john<span class="pl-k">.</span>doe<span class="pl-k">.</span>name
 <span class="pl-k">in</span> to_value at <span class="pl-k">...</span><span class="pl-k">/</span>Biryani<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">571</span>
 <span class="pl-k">in</span> <span class="pl-k">|&gt;</span> at <span class="pl-k">./</span>operators<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">178</span></pre></div>
<p dir="auto">When you don't want an exception to be thrown, use the <code>to_value_error</code> function instead of <code>to_value</code>. It returns a couple <code>(value, error)</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; value, error = Convertible(&quot;John@DOE.name&quot;) |&gt; input_to_email |&gt; to_value_error
(&quot;john@doe.name&quot;,nothing)

julia&gt; value, error = Convertible(&quot;John.DOE.name&quot;) |&gt; input_to_email |&gt; to_value_error
(&quot;john.doe.name&quot;,&quot;An email must contain exactly one \&quot;@\&quot;.&quot;)"><pre>julia<span class="pl-k">&gt;</span> value, error <span class="pl-k">=</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">nothing</span>)

julia<span class="pl-k">&gt;</span> value, error <span class="pl-k">=</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John.DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john.doe.name<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>An email must contain exactly one <span class="pl-cce">\"</span>@<span class="pl-cce">\"</span>.<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-example-2-required-email-validator" class="anchor" aria-hidden="true" href="#example-2-required-email-validator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Required email validator</h3>
<p dir="auto">Converters can be combined together to form more complex converters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;John@DOE.name&quot;) |&gt; input_to_email |&gt; require |&gt; to_value_error
(&quot;john@doe.name&quot;,nothing)

julia&gt; Convertible(&quot;   \n  &quot;) |&gt; input_to_email |&gt; require |&gt; to_value_error
(nothing,&quot;Missing value.&quot;)

julia&gt; Convertible(&quot;John.DOE.name&quot;) |&gt; input_to_email |&gt; require |&gt; to_value_error
(&quot;john.doe.name&quot;,&quot;An email must contain exactly one \&quot;@\&quot;.&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> require <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">nothing</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>   <span class="pl-cce">\n</span>  <span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> require <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-c1">nothing</span>,<span class="pl-s"><span class="pl-pds">"</span>Missing value.<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John.DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_email <span class="pl-k">|&gt;</span> require <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john.doe.name<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>An email must contain exactly one <span class="pl-cce">\"</span>@<span class="pl-cce">\"</span>.<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The <code>pipe</code> converter can also be used to chain conversions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Convertible(&quot;John@DOE.name&quot;) |&gt; pipe(input_to_email, require) |&gt; to_value_error
(&quot;john@doe.name&quot;,nothing)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> <span class="pl-c1">pipe</span>(input_to_email, require) <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">nothing</span>)</pre></div>
<p dir="auto">You can easily create new converters by combining existing ones:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; input_to_required_email = pipe(input_to_email, require)
(anonymous function)

julia&gt; Convertible(&quot;John@DOE.name&quot;) |&gt; input_to_required_email |&gt; to_value_error
(&quot;john@doe.name&quot;,nothing)

julia&gt; Convertible(&quot;John.DOE.name&quot;) |&gt; input_to_required_email |&gt; to_value_error
(&quot;john.doe.name&quot;,&quot;An email must contain exactly one \&quot;@\&quot;.&quot;)"><pre>julia<span class="pl-k">&gt;</span> input_to_required_email <span class="pl-k">=</span> <span class="pl-c1">pipe</span>(input_to_email, require)
(anonymous <span class="pl-k">function</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_required_email <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>,<span class="pl-c1">nothing</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Convertible</span>(<span class="pl-s"><span class="pl-pds">"</span>John.DOE.name<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> input_to_required_email <span class="pl-k">|&gt;</span> to_value_error
(<span class="pl-s"><span class="pl-pds">"</span>john.doe.name<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>An email must contain exactly one <span class="pl-cce">\"</span>@<span class="pl-cce">\"</span>.<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-example-3-web-form-validator" class="anchor" aria-hidden="true" href="#example-3-web-form-validator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: Web form validator</h3>
<p dir="auto">A sample validator for a web form containing the following fields:</p>
<ul dir="auto">
<li>Username</li>
<li>Password (twice)</li>
<li>Email</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; validate_form = struct(
         [
           &quot;username&quot; =&gt; pipe(strip, require),
           &quot;password&quot; =&gt; pipe(
             test(passwords -&gt; length(passwords) == 2 &amp;&amp; passwords[1] == passwords[2], error = &quot;Password mismatch.&quot;),
             call(passwords -&gt; passwords[1]),
           ),
           &quot;email&quot; =&gt; input_to_email,
         ],
       )

julia&gt; input_data = [
         &quot;username&quot; =&gt; &quot;   John Doe\n  &quot;,
         &quot;password&quot; =&gt; [&quot;secret&quot;, &quot;secret&quot;],
         &quot;email&quot; =&gt; &quot;John@DOE.name&quot;,
       ]

julia&gt; result, errors = Convertible(input_data) |&gt; validate_form |&gt; to_value_error
([&quot;password&quot;=&gt;&quot;secret&quot;,&quot;username&quot;=&gt;&quot;John Doe&quot;,&quot;email&quot;=&gt;&quot;john@doe.name&quot;],nothing)"><pre>julia<span class="pl-k">&gt;</span> validate_form <span class="pl-k">=</span> <span class="pl-c1">struct</span>(
         [
           <span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">pipe</span>(strip, require),
           <span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">pipe</span>(
             <span class="pl-c1">test</span>(passwords <span class="pl-k">-&gt;</span> <span class="pl-c1">length</span>(passwords) <span class="pl-k">==</span> <span class="pl-c1">2</span> <span class="pl-k">&amp;&amp;</span> passwords[<span class="pl-c1">1</span>] <span class="pl-k">==</span> passwords[<span class="pl-c1">2</span>], error <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Password mismatch.<span class="pl-pds">"</span></span>),
             <span class="pl-c1">call</span>(passwords <span class="pl-k">-&gt;</span> passwords[<span class="pl-c1">1</span>]),
           ),
           <span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> input_to_email,
         ],
       )

julia<span class="pl-k">&gt;</span> input_data <span class="pl-k">=</span> [
         <span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>   John Doe<span class="pl-cce">\n</span>  <span class="pl-pds">"</span></span>,
         <span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>secret<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>secret<span class="pl-pds">"</span></span>],
         <span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>John@DOE.name<span class="pl-pds">"</span></span>,
       ]

julia<span class="pl-k">&gt;</span> result, errors <span class="pl-k">=</span> <span class="pl-c1">Convertible</span>(input_data) <span class="pl-k">|&gt;</span> validate_form <span class="pl-k">|&gt;</span> to_value_error
([<span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>secret<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>John Doe<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>],<span class="pl-c1">nothing</span>)</pre></div>
<p dir="auto"><strong>Note:</strong> The same validation using the classic composition of functions instead of <code>|&gt;</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; result, errors = to_value_error(validate_form(Convertible(input_data)))
([&quot;password&quot;=&gt;&quot;secret&quot;,&quot;username&quot;=&gt;&quot;John Doe&quot;,&quot;email&quot;=&gt;&quot;john@doe.name&quot;],nothing)

julia&gt; to_value_error(validate_form(Convertible(
         [
           &quot;password&quot; =&gt; [&quot;secret&quot;, &quot;other secret&quot;],
           &quot;email&quot; =&gt; &quot;   John@DOE.name\n  &quot;,
         ],
       )))
([&quot;password&quot;=&gt;ASCIIString[&quot;secret&quot;,&quot;other secret&quot;],&quot;username&quot;=&gt;nothing,&quot;email&quot;=&gt;&quot;john@doe.name&quot;],[&quot;password&quot;=&gt;&quot;Password mismatch.&quot;,&quot;username&quot;=&gt;&quot;Missing value.&quot;])"><pre>julia<span class="pl-k">&gt;</span> result, errors <span class="pl-k">=</span> <span class="pl-c1">to_value_error</span>(<span class="pl-c1">validate_form</span>(<span class="pl-c1">Convertible</span>(input_data)))
([<span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>secret<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>John Doe<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>],<span class="pl-c1">nothing</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">to_value_error</span>(<span class="pl-c1">validate_form</span>(<span class="pl-c1">Convertible</span>(
         [
           <span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> [<span class="pl-s"><span class="pl-pds">"</span>secret<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>other secret<span class="pl-pds">"</span></span>],
           <span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>   John@DOE.name<span class="pl-cce">\n</span>  <span class="pl-pds">"</span></span>,
         ],
       )))
([<span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>ASCIIString[<span class="pl-s"><span class="pl-pds">"</span>secret<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>other secret<span class="pl-pds">"</span></span>],<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">nothing</span>,<span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>john@doe.name<span class="pl-pds">"</span></span>],[<span class="pl-s"><span class="pl-pds">"</span>password<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Password mismatch.<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>username<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Missing value.<span class="pl-pds">"</span></span>])</pre></div>
</article></div>