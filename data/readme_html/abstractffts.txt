<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-abstractfftsjl" class="anchor" aria-hidden="true" href="#abstractfftsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AbstractFFTs.jl</h1>
<p dir="auto">A general framework for fast Fourier transforms (FFTs) in Julia.</p>
<p dir="auto"><a href="https://github.com/JuliaMath/AbstractFFTs.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/JuliaMath/AbstractFFTs.jl/workflows/CI/badge.svg" alt="GHA" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaMath/AbstractFFTs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/89878a028a3d5aea2cbd0989bc315cefe93ed4bb1995de6f7b89dce42591f5dc/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614d6174682f4162737472616374464654732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov" data-canonical-src="http://codecov.io/github/JuliaMath/AbstractFFTs.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Documentation:
<a href="https://JuliaMath.github.io/AbstractFFTs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaMath.github.io/AbstractFFTs.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is mainly not intended to be used directly.
Instead, developers of packages that implement FFTs (such as <a href="https://github.com/JuliaMath/FFTW.jl">FFTW.jl</a> or <a href="https://github.com/JuliaApproximation/FastTransforms.jl">FastTransforms.jl</a>)
extend the types/functions defined in <code>AbstractFFTs</code>.
This allows multiple FFT packages to co-exist with the same underlying <code>fft(x)</code> and <code>plan_fft(x)</code> interface.</p>
<h2 dir="auto"><a id="user-content-developer-information" class="anchor" aria-hidden="true" href="#developer-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Developer information</h2>
<p dir="auto">To define a new FFT implementation in your own module, you should</p>
<ul dir="auto">
<li>
<p dir="auto">Define a new subtype (e.g. <code>MyPlan</code>) of <code>AbstractFFTs.Plan{T}</code> for FFTs and related transforms on arrays of <code>T</code>.
This must have a <code>pinv::Plan</code> field, initially undefined when a <code>MyPlan</code> is created, that is used for caching the
inverse plan.</p>
</li>
<li>
<p dir="auto">Define a new method <code>AbstractFFTs.plan_fft(x, region; kws...)</code> that returns a <code>MyPlan</code> for at least some types of
<code>x</code> and some set of dimensions <code>region</code>.   The <code>region</code> (or a copy thereof) should be accessible via <code>fftdims(p::MyPlan)</code> (which defaults to <code>p.region</code>).</p>
</li>
<li>
<p dir="auto">Define a method of <code>LinearAlgebra.mul!(y, p::MyPlan, x)</code> (or <code>A_mul_B!(y, p::MyPlan, x)</code> on Julia prior to
0.7.0-DEV.3204) that computes the transform <code>p</code> of <code>x</code> and stores the result in <code>y</code>.</p>
</li>
<li>
<p dir="auto">Define a method of <code>*(p::MyPlan, x)</code>, which can simply call your <code>mul!</code> (or <code>A_mul_B!</code>) method.
This is not defined generically in this package due to subtleties that arise for in-place and real-input FFTs.</p>
</li>
<li>
<p dir="auto">If the inverse transform is implemented, you should also define <code>plan_inv(p::MyPlan)</code>, which should construct the
inverse plan to <code>p</code>, and <code>plan_bfft(x, region; kws...)</code> for an unnormalized inverse ("backwards") transform of <code>x</code>.</p>
</li>
<li>
<p dir="auto">You can also define similar methods of <code>plan_rfft</code> and <code>plan_brfft</code> for real-input FFTs.</p>
</li>
</ul>
<p dir="auto">The normalization convention for your FFT should be that it computes <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a1061ced07b79373b13587cf0647c4d0">$y_k = \sum_j \exp(-2 \pi i \cdot \frac{j k}{n}) x_j$</math-renderer>
for a transform of length <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a1061ced07b79373b13587cf0647c4d0">$n$</math-renderer>, and the "backwards" (unnormalized inverse) transform computes the same thing but with
<math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a1061ced07b79373b13587cf0647c4d0">$\exp(+2 \pi i \cdot \frac{j k}{n})$</math-renderer>.</p>
</article></div>