<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-abstractfftsjl" class="anchor" aria-hidden="true" href="#abstractfftsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractFFTs.jl</h1>
<p>A general framework for fast Fourier transforms (FFTs) in Julia.</p>
<p><a href="https://travis-ci.org/JuliaMath/AbstractFFTs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81ed4e69afa09cdcc3f5b0dae75a3c9e2923d48f/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f4162737472616374464654732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaMath/AbstractFFTs.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/JuliaMath/AbstractFFTs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d70e98390a70c6a5adb7735c57b14195cdf7d9f6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c69614d6174682f4162737472616374464654732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/JuliaMath/AbstractFFTs.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Documentation:
<a href="https://JuliaMath.github.io/AbstractFFTs.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaMath.github.io/AbstractFFTs.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>This package is mainly not intended to be used directly.
Instead, developers of packages that implement FFTs (such as <a href="https://github.com/JuliaMath/FFTW.jl">FFTW.jl</a>)
extend the types/functions defined in <code>AbstractFFTs</code>.
This allows multiple FFT packages to co-exist with the same underlying <code>fft(x)</code> and <code>plan_fft(x)</code> interface.</p>
<h2><a id="user-content-developer-information" class="anchor" aria-hidden="true" href="#developer-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Developer information</h2>
<p>To define a new FFT implementation in your own module, you should</p>
<ul>
<li>
<p>Define a new subtype (e.g. <code>MyPlan</code>) of <code>AbstractFFTs.Plan{T}</code> for FFTs and related transforms on arrays of <code>T</code>.
This must have a <code>pinv::Plan</code> field, initially undefined when a <code>MyPlan</code> is created, that is used for caching the
inverse plan.</p>
</li>
<li>
<p>Define a new method <code>AbstractFFTs.plan_fft(x, region; kws...)</code> that returns a <code>MyPlan</code> for at least some types of
<code>x</code> and some set of dimensions <code>region</code>.</p>
</li>
<li>
<p>Define a method of <code>LinearAlgebra.mul!(y, p::MyPlan, x)</code> (or <code>A_mul_B!(y, p::MyPlan, x)</code> on Julia prior to
0.7.0-DEV.3204) that computes the transform <code>p</code> of <code>x</code> and stores the result in <code>y</code>.</p>
</li>
<li>
<p>Define a method of <code>*(p::MyPlan, x)</code>, which can simply call your <code>mul!</code> (or <code>A_mul_B!</code>) method.
This is not defined generically in this package due to subtleties that arise for in-place and real-input FFTs.</p>
</li>
<li>
<p>If the inverse transform is implemented, you should also define <code>plan_inv(p::MyPlan)</code>, which should construct the
inverse plan to <code>p</code>, and <code>plan_bfft(x, region; kws...)</code> for an unnormalized inverse ("backwards") transform of <code>x</code>.</p>
</li>
<li>
<p>You can also define similar methods of <code>plan_rfft</code> and <code>plan_brfft</code> for real-input FFTs.</p>
</li>
</ul>
<p>The normalization convention for your FFT should be that it computes yₖ = ∑ⱼ xⱼ exp(-2πi jk/n) for a transform of
length n, and the "backwards" (unnormalized inverse) transform computes the same thing but with exp(+2πi jk/n).</p>
</article></div>