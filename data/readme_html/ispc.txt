<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-ispcjl" class="anchor" aria-hidden="true" href="#ispcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ISPC.jl</h1>
<p><a href="https://travis-ci.org/damiendr/ISPC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dd741052e02aa1cf697b5c8fc2a254c974032cda/68747470733a2f2f7472617669732d63692e6f72672f64616d69656e64722f495350432e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/damiendr/ISPC.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><strong>Note: <a href="https://github.com/JuliaLang/julia/pull/13412">recent changes</a> in the way Julia represents functions and closures require a redesign of this package, which will be published when the 0.5 IR stabilises a bit more.</strong></p>
<p>ISPC.jl uses the <a href="http://ispc.github.io" rel="nofollow">Intel ISPC compiler</a> to compile fragments
of ISPC-C or Julia code to vector code (eg. SSE/AVX on Intel CPUs) at runtime.
It is similar to the standard <code>@simd</code> macro but supports control statements and a
number of math functions.</p>
<p>Speedups of 2x-8x compared to plain Julia code can be achieved (single core).</p>
<ul>
<li>high-level interface: translates Julia to ISPC</li>
<li>low-level interface: compiles and loads ISPC programs</li>
</ul>
<h2><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Requirements</h2>
<ul>
<li>Julia 0.4 or 0.5-dev up to <a href="https://github.com/JuliaLang/julia/commit/cf93d6fa9544995f1c402734894e99397167bf50">cf93d6f (2016-01-29 02:19 UTC)</a></li>
<li><code>ispc</code> (must be found in $PATH)</li>
<li><code>libtool</code> or <code>g++</code> (must be found in $PATH)</li>
<li>(optional) <code>llvm_dis</code> for looking at ISPC llvm assembly.</li>
</ul>
<h2><a id="user-content-high-level-interface" class="anchor" aria-hidden="true" href="#high-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>High-level interface</h2>
<p><em>Work in progress! The high-level interface is fairly functional already,
but bugs and the odd missing math function should be expected.
More documentation to come.</em></p>
<p>See the <a href="https://github.com/damiendr/ISPC.jl/blob/master/examples/ISPC-mandelbrot.ipynb">example notebook</a> for an overview.</p>
<p>The high-level interface translates Julia code that has been annotated with
a set of macros into code compiled by ISPC on-the-fly. Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ISPC

<span class="pl-c1">@inline</span> <span class="pl-k">function</span> <span class="pl-en">mandel</span>(c_re, c_im, count)
    z_re <span class="pl-k">=</span> c_re
    z_im <span class="pl-k">=</span> c_im
    i <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">while</span> i <span class="pl-k">&lt;</span> count
        <span class="pl-k">if</span> (z_re <span class="pl-k">*</span> z_re <span class="pl-k">+</span> z_im <span class="pl-k">*</span> z_im <span class="pl-k">&gt;</span> <span class="pl-c1">4.0</span>f0)
            <span class="pl-k">break</span>
        <span class="pl-k">end</span>
        new_re <span class="pl-k">=</span> z_re<span class="pl-k">*</span>z_re <span class="pl-k">-</span> z_im<span class="pl-k">*</span>z_im
        new_im <span class="pl-k">=</span> <span class="pl-c1">2.0</span>f0 <span class="pl-k">*</span> z_re <span class="pl-k">*</span> z_im
        z_re <span class="pl-k">=</span> c_re <span class="pl-k">+</span> new_re
        z_im <span class="pl-k">=</span> c_im <span class="pl-k">+</span> new_im
        i <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> i
<span class="pl-k">end</span>

<span class="pl-c1">@ispc</span> <span class="pl-k">function</span> <span class="pl-en">mandelbrot_ispc</span>(x0, y0, x1, y1, output, max_iters)
    height, width <span class="pl-k">=</span> <span class="pl-c1">size</span>(output)
    dx <span class="pl-k">=</span> (x1 <span class="pl-k">-</span> x0) <span class="pl-k">/</span> width
    dy <span class="pl-k">=</span> (y1 <span class="pl-k">-</span> y0) <span class="pl-k">/</span> height
    <span class="pl-c1">@kernel</span>(<span class="pl-s"><span class="pl-pds">`</span>--target=avx1-i32x8<span class="pl-pds">`</span></span>) <span class="pl-k">do</span>
        <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>width
            <span class="pl-c1">@foreach</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>height) <span class="pl-k">do</span> j
                x <span class="pl-k">=</span> x0 <span class="pl-k">+</span> i <span class="pl-k">*</span> dx
                y <span class="pl-k">=</span> y0 <span class="pl-k">+</span> j <span class="pl-k">*</span> dy
                output[j,i] <span class="pl-k">=</span> <span class="pl-c1">mandel</span>(x, y, max_iters)
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
    output
<span class="pl-k">end</span>;</pre></div>
<p>Supported ISPC constructs:</p>
<ul>
<li><code>@foreach</code></li>
<li><code>@foreach(:active)</code> (untested)</li>
<li><code>@unmasked</code> (untested)</li>
<li><code>@coherent</code> (untested)</li>
</ul>
<h3><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limitations</h3>
<p>The high-level interface is meant to be used with numerical kernels only.
Not all of Julia's syntax and types are supported:</p>
<ul>
<li>
<p>Arrays can only be indexed with integers, providing either a single
index (linear indexing) or one index per dimension (multi-dimensional
arrays). Indexing must yield an array element, not a sub-array.</p>
</li>
<li>
<p>All outer variables ("kernel arguments") must be primitive types
or arrays of primitive types.</p>
</li>
<li>
<p>Simple composite types like <code>UnitRange</code> are supported inside kernels
(eg. in <code>for</code> loops) but not as kernel arguments at the moment.</p>
</li>
<li>
<p>Only functions that have a direct translation to ISPC are supported
inside kernels. User-defined functions may be used if they are declared
<code>@inline</code>. This restriction may be lifted in the future.</p>
</li>
<li>
<p>Inner functions, exceptions, task switching, I/O etc. are not supported.</p>
</li>
</ul>
<p>ISPC task-level constructs are not yet supported.</p>
<h2><a id="user-content-low-level-interface" class="anchor" aria-hidden="true" href="#low-level-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Low-level interface</h2>
<p>The low-level interface allows you to load and call fragments of ISPC code:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ISPC

<span class="pl-c"><span class="pl-c">#</span> A basic ISPC kernel:</span>
code <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">export void simple(uniform float vin[], uniform float vout[],</span>
<span class="pl-s">                   uniform int count) {</span>
<span class="pl-s">    foreach (index = 0 ... count) {</span>
<span class="pl-s">        float v = vin[index];</span>
<span class="pl-s">        if (v &lt; 0.5)</span>
<span class="pl-s">            v = v * v;</span>
<span class="pl-s">        else</span>
<span class="pl-s">            v = sqrt(v);</span>
<span class="pl-s">        vout[index] = v;</span>
<span class="pl-s">    }</span>
<span class="pl-s">}</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-c"><span class="pl-c">#</span> Compile the code and get a function pointer to our kernel:</span>
lib <span class="pl-k">=</span> <span class="pl-c1">load_ispc</span>(code, <span class="pl-s"><span class="pl-pds">`</span>--target=avx1-i32x8<span class="pl-pds">`</span></span>)
fptr <span class="pl-k">=</span> Libdl<span class="pl-k">.</span><span class="pl-c1">dlsym</span>(lib, <span class="pl-s"><span class="pl-pds">"</span>simple<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Call the kernel:</span>
vin <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">1000</span>);
vout <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float32, <span class="pl-c1">1000</span>);
<span class="pl-c1">ccall</span>(fptr, Void, (Ref{Float32}, Ref{Float32}, UInt64), vin, vout, <span class="pl-c1">length</span>(vout))</pre></div>
<h2><a id="user-content-how-it-works" class="anchor" aria-hidden="true" href="#how-it-works"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How it works</h2>
<ol>
<li>The <code>@kernel</code> macro creates a lambda function containing the kernel code.</li>
<li><code>code_lowered()</code> or <code>code_typed()</code> is run on the main <code>@ispc</code> function to get
information about closure variables captured by the kernel lambda. These become
kernel arguments.</li>
<li>Kernel fragments in the main function are replaced by calls to a <code>@generated</code>
<code>kernel_call</code> function.</li>
<li>When <code>kernel_call</code> is called for the first time, type inference is run on the
kernel fragment. This gives us types for local variables and inlines functions
that can be inlined.</li>
<li>The lowered and typed AST is transformed to <em>un-lower</em> <code>goto</code>s back into <code>if</code>
and <code>while</code> statements (ISPC does not support varying <code>goto</code>s)</li>
<li>The transformed AST is translated to ISPC C</li>
<li>The resulting code is compiled with <code>ispc</code>, loaded with <code>Libdl</code> and called with <code>ccall</code>.</li>
</ol>
</article></div>