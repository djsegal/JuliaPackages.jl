<div id="readme" class="md" data-path="Readme.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-andtraitsjl" class="anchor" aria-hidden="true" href="#andtraitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AndTraits.jl</h1>
<p dir="auto">A system for dispatching on conjunctions of traits.</p>
<p dir="auto">Basic idea:</p>
<ol dir="auto">
<li>Type hierarchies are oppresive — we'd rather simply specify that values and types have particular properties.  For instance that the type is indexable.  Sometimes these kinds of properties are called <a href="https://en.wikipedia.org/wiki/Trait_(computer_programming)" rel="nofollow">traits</a>.</li>
<li>Often we want to write methods that are specific to particular combinations of traits.  That is, we want to say:</li>
<li>do something if type has trait A</li>
<li>do something else if type has trait A and B</li>
<li>do something else if type has trait A and B and C</li>
</ol>
<p dir="auto">There are many implementations of traits in Julia which do 1 but as far as I am aware this is the first approach that supports conjunctions of traits.</p>
<h2 dir="auto"><a id="user-content-how-to-use-it" class="anchor" aria-hidden="true" href="#how-to-use-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use it</h2>
<p dir="auto">First make some traits</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# This is a trait
const Iterable = Trait{:Iterable}"><pre><span class="pl-c"><span class="pl-c">#</span> This is a trait</span>
<span class="pl-k">const</span> Iterable <span class="pl-k">=</span> Trait{<span class="pl-c1">:Iterable</span>}</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# This is another trait
const Indexable = Trait{:Indexable}"><pre><span class="pl-c"><span class="pl-c">#</span> This is another trait</span>
<span class="pl-k">const</span> Indexable <span class="pl-k">=</span> Trait{<span class="pl-c1">:Indexable</span>}</pre></div>
<p dir="auto">Now let's give some types these traits</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="AndTraits.traits(::Vector) = Iterable ∧ Indexable
AndTraits.traits(::Set) = Iterable"><pre>AndTraits<span class="pl-k">.</span><span class="pl-en">traits</span>(<span class="pl-k">::</span><span class="pl-c1">Vector</span>) <span class="pl-k">=</span> Iterable ∧ Indexable
AndTraits<span class="pl-k">.</span><span class="pl-en">traits</span>(<span class="pl-k">::</span><span class="pl-c1">Set</span>) <span class="pl-k">=</span> Iterable</pre></div>
<p dir="auto">Now let's define some methods that use these trarts</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="g(x) = g(traits(x), x)
g(::traitmatch(Iterable), x) = &quot;This is a string&quot;
g(::traitmatch(Iterable, Indexable), x) = 21"><pre class="notranslate"><code>g(x) = g(traits(x), x)
g(::traitmatch(Iterable), x) = "This is a string"
g(::traitmatch(Iterable, Indexable), x) = 21
</code></pre></div>
<p dir="auto">Now let's evaluate <code>g</code> on some different inputs</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@test g(x) == 21
@test g(Set([1,2,3])) == &quot;This is a string&quot;"><pre><span class="pl-c1">@test</span> <span class="pl-c1">g</span>(x) <span class="pl-k">==</span> <span class="pl-c1">21</span>
<span class="pl-c1">@test</span> <span class="pl-c1">g</span>(<span class="pl-c1">Set</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])) <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>This is a string<span class="pl-pds">"</span></span></pre></div>
<h1 dir="auto"><a id="user-content-how-does-this-compare-to" class="anchor" aria-hidden="true" href="#how-does-this-compare-to"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How does this compare to?</h1>
<h2 dir="auto"><a id="user-content-abstract-types" class="anchor" aria-hidden="true" href="#abstract-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Abstract Types</h2>
<p dir="auto">A type can belong to many traits</p>
<h2 dir="auto"><a id="user-content-holy-traits" class="anchor" aria-hidden="true" href="#holy-traits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Holy Traits</h2>
<p dir="auto">Holy traits (which have been syntactically sugared in <a href="https://github.com/mauro3/SimpleTraits.jl">SimpleTraits.jl</a>) allow you to add multiple traits to a type.
But, when you use the traits, you have to decide at the point of dispatch which trait you care about.</p>
<p dir="auto">So for example we can define the trait <code>SomeTrait</code> as above, but we also need to define a trait dispatch method <code>hasSomeTrait</code>, such that <code>hasSomeTrait(t)</code>
So you right methods of the form:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(x) = f(hasSomeTrait(x), x) 
f(::SomeTrait, x) = ..."><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">hasSomeTrait</span>(x), x) 
<span class="pl-en">f</span>(<span class="pl-k">::</span><span class="pl-c1">SomeTrait</span>, x) <span class="pl-k">=</span> <span class="pl-k">...</span></pre></div>
<p dir="auto">This is fine, but it inhibits extensibility.</p>
</article></div>