<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-petscbinaryiojl" class="anchor" aria-hidden="true" href="#petscbinaryiojl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PETScBinaryIO.jl</h1>
<p dir="auto">A Julia package for reading and writing sparse matrices in a format PETSc understands.</p>
<h2 dir="auto"><a id="user-content-exported-functions" class="anchor" aria-hidden="true" href="#exported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exported Functions</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="writepetsc(filename, objs :: Vector{Union{SparseMatrixCSC, Vector}})
writepetsc(filename, mat :: SparseMatrixCSC)
writepetsc(filename, vec :: Vector)"><pre><span class="pl-c1">writepetsc</span>(filename, objs <span class="pl-k">::</span> <span class="pl-c1">Vector{Union{SparseMatrixCSC, Vector}}</span>)
<span class="pl-c1">writepetsc</span>(filename, mat <span class="pl-k">::</span> <span class="pl-c1">SparseMatrixCSC</span>)
<span class="pl-c1">writepetsc</span>(filename, vec <span class="pl-k">::</span> <span class="pl-c1">Vector</span>)</pre></div>
<p dir="auto">Write a sparse matrix to <code>filename</code> in a format PETSc can understand.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="readpetsc(filename) :: Vector{Union{SparseMatrixCSC, Vector}}"><pre><span class="pl-c1">readpetsc</span>(filename) <span class="pl-k">::</span> <span class="pl-c1">Vector{Union{SparseMatrixCSC, Vector}}</span></pre></div>
<p dir="auto">Read a sparse matrix in PETSc's binary format from <code>filename</code>.</p>
</article></div>