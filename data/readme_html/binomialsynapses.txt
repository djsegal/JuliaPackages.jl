<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-binomialsynapses" class="anchor" aria-hidden="true" href="#binomialsynapses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BinomialSynapses</h1>
<p dir="auto"><a href="https://github.com/Theoretical-Neuroscience-Group/BinomialSynapses.jl/actions/workflows/ci.yaml"><img src="https://github.com/Theoretical-Neuroscience-Group/BinomialSynapses.jl/actions/workflows/ci.yml/badge.svg" alt="ci" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Theoretical-Neuroscience-Group/BinomialSynapses.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/34344d7176ac9980b6f6b2a753dfe6d92c71018a0895fa3eea52cfe18329d889/68747470733a2f2f636f6465636f762e696f2f67682f5468656f7265746963616c2d4e6575726f736369656e63652d47726f75702f42696e6f6d69616c53796e61707365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/Theoretical-Neuroscience-Group/BinomialSynapses.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://theoretical-neuroscience-group.github.io/BinomialSynapses.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://theoretical-neuroscience-group.github.io/BinomialSynapses.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>


<p dir="auto">This is a package for performing filering and active learning for a binomial synaptic model using nested particle filters.
Performance is achieved by providing a CUDA GPU implementation, but the code also runs (much more slowly) on the CPU.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package needs at least Julia 1.6.1.
In a Julia REPL, activate an environment and type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]add BinomialSynapses"><pre>]add BinomialSynapses</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">User API is work in progress. This is a minimal working example for running the nested particle filter on synthetic data and producing a plot of the observation trace and the posterior histograms.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BinomialSynapses

sim = NestedFilterSimulation(
        10, 0.85, 1.0, 0.2, 0.2,   # ground truth parameters
        1:20,                      # parameter ranges for filter
        LinRange(0.05, 0.95, 100), # .
        LinRange(0.10, 2.00, 100), # .
        LinRange(0.05, 2.00, 100), # .
        LinRange(0.05, 2.00, 100), # .
        2048, 512,                 # outer and inner number of particles
        12                         # jittering kernel width
      )

times, epsps = run!(sim, T = 1000)

posterior_plot(sim.fstate, times, epsps, truemodel = sim.hmodel)"><pre><span class="pl-k">using</span> BinomialSynapses

sim <span class="pl-k">=</span> <span class="pl-c1">NestedFilterSimulation</span>(
        <span class="pl-c1">10</span>, <span class="pl-c1">0.85</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.2</span>,   <span class="pl-c"><span class="pl-c">#</span> ground truth parameters</span>
        <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>,                      <span class="pl-c"><span class="pl-c">#</span> parameter ranges for filter</span>
        <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.05</span>, <span class="pl-c1">0.95</span>, <span class="pl-c1">100</span>), <span class="pl-c"><span class="pl-c">#</span> .</span>
        <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.10</span>, <span class="pl-c1">2.00</span>, <span class="pl-c1">100</span>), <span class="pl-c"><span class="pl-c">#</span> .</span>
        <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.05</span>, <span class="pl-c1">2.00</span>, <span class="pl-c1">100</span>), <span class="pl-c"><span class="pl-c">#</span> .</span>
        <span class="pl-c1">LinRange</span>(<span class="pl-c1">0.05</span>, <span class="pl-c1">2.00</span>, <span class="pl-c1">100</span>), <span class="pl-c"><span class="pl-c">#</span> .</span>
        <span class="pl-c1">2048</span>, <span class="pl-c1">512</span>,                 <span class="pl-c"><span class="pl-c">#</span> outer and inner number of particles</span>
        <span class="pl-c1">12</span>                         <span class="pl-c"><span class="pl-c">#</span> jittering kernel width</span>
      )

times, epsps <span class="pl-k">=</span> <span class="pl-c1">run!</span>(sim, T <span class="pl-k">=</span> <span class="pl-c1">1000</span>)

<span class="pl-c1">posterior_plot</span>(sim<span class="pl-k">.</span>fstate, times, epsps, truemodel <span class="pl-k">=</span> sim<span class="pl-k">.</span>hmodel)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="posteriors.png"><img src="posteriors.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<ul dir="auto">
<li>On the nested particle filter: Crisan, Dan, and Joaquin Miguez. "Nested particle filters for online parameter estimation in discrete-time state-space Markov models." Bernoulli 24.4A (2018): 3039-3086.</li>
<li>On the model of stochastic synapse: Gontier, Camille, and Jean-Pascal Pfister. "Identifiability of a Binomial Synapse." Frontiers in computational neuroscience 14 (2020): 86.</li>
</ul>
</article></div>