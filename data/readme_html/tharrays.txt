<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-tharrays" class="anchor" aria-hidden="true" href="#tharrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ThArrays</h1>
<p>A Julia interface for PyTorch's C++ backend.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/TuringLang/ThArrays.jl/workflows/Unit%20Testing/badge.svg?branch=master"><img src="https://github.com/TuringLang/ThArrays.jl/workflows/Unit%20Testing/badge.svg?branch=master" alt="Unit Testing" style="max-width:100%;"></a></p>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Features</h2>
<ul>
<li><code>ThArrays.Tensor</code>: PyTorch Tensor as an Array-like data type in
Julia</li>
<li><code>ThArrays.ThAD</code>: AD using PyTorch C++ backend</li>
<li><code>ThArrays.TrackerAD</code>: AD using Tracker.jl and PyTorch C++
backend mixed, on your choice.</li>
</ul>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started</h2>
<ol>
<li>
<p>Build the package: run <code>] build ThArrays</code>. The build script will
download the libtorch zip file, compile the shared library, and
generate many Julia methods in module <code>ThArrays.ThC</code>.</p>
</li>
<li>
<p>Run an example:</p>
<div class="highlight highlight-source-julia"><pre> julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ThArrays

 julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">Tensor</span>( <span class="pl-k">-</span><span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">3</span>) )
 PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.1428</span> <span class="pl-k">-</span><span class="pl-c1">0.7099</span> <span class="pl-k">-</span><span class="pl-c1">0.1446</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3447</span> <span class="pl-k">-</span><span class="pl-c1">0.0686</span> <span class="pl-k">-</span><span class="pl-c1">0.8287</span>
 <span class="pl-k">-</span><span class="pl-c1">0.2692</span> <span class="pl-k">-</span><span class="pl-c1">0.0501</span> <span class="pl-k">-</span><span class="pl-c1">0.2092</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">abs</span>(t)
 PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.1428</span>  <span class="pl-c1">0.7099</span>  <span class="pl-c1">0.1446</span>
  <span class="pl-c1">0.3447</span>  <span class="pl-c1">0.0686</span>  <span class="pl-c1">0.8287</span>
  <span class="pl-c1">0.2692</span>  <span class="pl-c1">0.0501</span>  <span class="pl-c1">0.2092</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">sin</span>(t)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">cos</span>(t)<span class="pl-k">^</span><span class="pl-c1">2</span>
 PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1.0000</span>  <span class="pl-c1">1.0000</span>  <span class="pl-c1">1.0000</span>
  <span class="pl-c1">1.0000</span>  <span class="pl-c1">1.0000</span>  <span class="pl-c1">1.0000</span>
  <span class="pl-c1">1.0000</span>  <span class="pl-c1">1.0000</span>  <span class="pl-c1">1.0000</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]

 julia<span class="pl-k">&gt;</span> t
 PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.1428</span> <span class="pl-k">-</span><span class="pl-c1">0.7099</span> <span class="pl-k">-</span><span class="pl-c1">0.1446</span>
 <span class="pl-k">-</span><span class="pl-c1">0.3447</span> <span class="pl-k">-</span><span class="pl-c1">0.0686</span> <span class="pl-k">-</span><span class="pl-c1">0.8287</span>
 <span class="pl-k">-</span><span class="pl-c1">0.2692</span> <span class="pl-k">-</span><span class="pl-c1">0.0501</span> <span class="pl-k">-</span><span class="pl-c1">0.2092</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]

 julia<span class="pl-k">&gt;</span> ThC<span class="pl-k">.</span><span class="pl-c1">abs!</span>(t)
 PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.1428</span>  <span class="pl-c1">0.7099</span>  <span class="pl-c1">0.1446</span>
  <span class="pl-c1">0.3447</span>  <span class="pl-c1">0.0686</span>  <span class="pl-c1">0.8287</span>
  <span class="pl-c1">0.2692</span>  <span class="pl-c1">0.0501</span>  <span class="pl-c1">0.2092</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]

 julia<span class="pl-k">&gt;</span> t
 PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">0.1428</span>  <span class="pl-c1">0.7099</span>  <span class="pl-c1">0.1446</span>
  <span class="pl-c1">0.3447</span>  <span class="pl-c1">0.0686</span>  <span class="pl-c1">0.8287</span>
  <span class="pl-c1">0.2692</span>  <span class="pl-c1">0.0501</span>  <span class="pl-c1">0.2092</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]

 julia<span class="pl-k">&gt;</span> ThAD<span class="pl-k">.</span><span class="pl-c1">gradient</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">sum</span>(<span class="pl-c1">sin</span>(x)<span class="pl-k">+</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>,<span class="pl-c1">3</span>))
 (PyTorch<span class="pl-k">.</span>Tensor{Float64, <span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">2.3776</span>  <span class="pl-c1">1.5465</span>  <span class="pl-c1">2.0206</span>
  <span class="pl-c1">1.2542</span>  <span class="pl-c1">1.2081</span>  <span class="pl-c1">2.1156</span>
  <span class="pl-c1">2.1034</span>  <span class="pl-c1">1.1568</span>  <span class="pl-c1">2.2599</span>
 [ CPUDoubleType{<span class="pl-c1">3</span>,<span class="pl-c1">3</span>} ]
 ,)

 julia<span class="pl-k">&gt;</span>
</pre></div>
<p>See the test directory for more examples.</p>
</li>
</ol>
</article></div>