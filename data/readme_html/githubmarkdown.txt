<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-githubmarkdownjl" class="anchor" aria-hidden="true" href="#githubmarkdownjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GithubMarkdown.jl</h1>
<p dir="auto"><a href="https://github.com/pfitzseb/GithubMarkdown.jl/actions/workflows/CI.yml"><img src="https://github.com/pfitzseb/GithubMarkdown.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/pfitzseb/GithubMarkdown.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6d65d8176904dff748ea4977f44ef8e1323cce46a22d503c95e1dc3e502feec5/68747470733a2f2f636f6465636f762e696f2f67682f706669747a7365622f4769746875624d61726b646f776e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/pfitzseb/GithubMarkdown.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Render a markdown file (conforming to the <a href="https://github.github.com/gfm/">gfm spec</a>) to an <code>IOBuffer</code> or directly to a file.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rendergfm(fileout::AbstractString, file::AbstractString; documenter = false, format=&quot;html&quot;)
rendergfm(io, file::AbstractString; documenter = false, format=&quot;html&quot;)"><pre class="notranslate"><code>rendergfm(fileout::AbstractString, file::AbstractString; documenter = false, format="html")
rendergfm(io, file::AbstractString; documenter = false, format="html")
</code></pre></div>
<p dir="auto">Render the markdown document <code>file</code> to <code>fileout</code> or <code>io</code>, following the cmark-gfm spec.</p>
<ul dir="auto">
<li><code>documenter</code>: Wraps the output in a Documenter <code>@raw</code>-block of the specified format.</li>
<li><code>format</code>: Can be one of <code>html</code>, <code>xml</code>, <code>man</code>, <code>commonmark</code>, <code>plaintext</code>, <code>latex</code>.</li>
</ul>
<p dir="auto">You can also use <code>rendergfm</code> to work with strings directly:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; &quot;a **b** c `def` [g](https://julialang.org)&quot; |&gt; rendergfm
&quot;&lt;p&gt;a &lt;strong&gt;b&lt;/strong&gt; c &lt;code&gt;def&lt;/code&gt; &lt;a href=\&quot;https://julialang.org\&quot;&gt;g&lt;/a&gt;&lt;/p&gt;\n&quot;"><pre class="notranslate"><code>julia&gt; "a **b** c `def` [g](https://julialang.org)" |&gt; rendergfm
"&lt;p&gt;a &lt;strong&gt;b&lt;/strong&gt; c &lt;code&gt;def&lt;/code&gt; &lt;a href=\"https://julialang.org\"&gt;g&lt;/a&gt;&lt;/p&gt;\n"
</code></pre></div>
</article></div>