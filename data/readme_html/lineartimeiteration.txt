<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-linear-time-iteration-2017" class="anchor" aria-hidden="true" href="#linear-time-iteration-2017"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Time Iteration (2017)</h1>
<p dir="auto">The package uses the Linear Time Iteration method from <a href="https://www.ihs.ac.at/publications/eco/es-330.pdf" rel="nofollow">Rendahl (2017)</a> for solving linear rational expectation models like those typically found in DSGE models.</p>
<p dir="auto">To install simply open your Julia terminal, go to the package manager by inputting <code>]</code> and then copying in:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="add https://github.com/HariharanJayashankar/LinearTimeIteration.jl"><pre class="notranslate"><code>add https://github.com/HariharanJayashankar/LinearTimeIteration.jl
</code></pre></div>
<p dir="auto">Package was built because it seemed like there was no quick way of playing around with big macro models.</p>
<p dir="auto">Using the package is simple. All you need to do is define a function <code>equations(Xl, X, Xf, ϵ, ϵ_sd ...)</code> which outputs the residuals of the equiblibrium equations of the model. <code>Xf</code> are supposed to be the one period forward variables, <code>X</code> the current variables, and <code>Xl</code> the lagged variables. <code>ϵ</code> should contain all the shocks of the model.</p>
<p dir="auto"><code>ϵ_sd</code> contains the standard deviations to all the shocks. This value is a bit important as it determines what the final solution will look like. By default this is 1. (<em>A problem here at the moment is that the default is always a scalar of 1 instead of having a vector which scales with the input type</em>)</p>
<p dir="auto"><code>args</code> are optional arguments you may want to pass in like parameters the model needs.</p>
<h1 dir="auto"><a id="user-content-an-example---a-simple-rbc-model" class="anchor" aria-hidden="true" href="#an-example---a-simple-rbc-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>An Example - A simple RBC Model</h1>
<h2 dir="auto"><a id="user-content-setting-up" class="anchor" aria-hidden="true" href="#setting-up"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Setting Up</h2>
<p dir="auto">For example the <code>equations</code> function for an RBC model might look like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function equations(Xl, X, Xf, ϵ, ϵ_sd, params)

    Cf, Rf, Kf, Yf, Zf = Xf
    C, R, K, Y, Z = X
    Cl, Rl, Kl, Yl, Zl = Xl
    
    @unpack β, α, γ, δ, ρ = params
    
    ϵ = ϵ[1] * ϵ_sd[1]
    
    # RBC Equations
    residual = [1.0 - β * Rf * Cf^(-γ) * C^(γ);
                R - α*Z*Kl^(α-1) - 1 + δ;
                K - (1-δ)*Kl - Y + C;
                Y - Z*Kl^α;
                log(Z) - ρ*log(Zl) - ϵ]
    
    return residual
    
end"><pre><span class="pl-k">function</span> <span class="pl-en">equations</span>(Xl, X, Xf, ϵ, ϵ_sd, params)

    Cf, Rf, Kf, Yf, Zf <span class="pl-k">=</span> Xf
    C, R, K, Y, Z <span class="pl-k">=</span> X
    Cl, Rl, Kl, Yl, Zl <span class="pl-k">=</span> Xl
    
    <span class="pl-c1">@unpack</span> β, α, γ, δ, ρ <span class="pl-k">=</span> params
    
    ϵ <span class="pl-k">=</span> ϵ[<span class="pl-c1">1</span>] <span class="pl-k">*</span> ϵ_sd[<span class="pl-c1">1</span>]
    
    <span class="pl-c"><span class="pl-c">#</span> RBC Equations</span>
    residual <span class="pl-k">=</span> [<span class="pl-c1">1.0</span> <span class="pl-k">-</span> β <span class="pl-k">*</span> Rf <span class="pl-k">*</span> Cf<span class="pl-k">^</span>(<span class="pl-k">-</span>γ) <span class="pl-k">*</span> C<span class="pl-k">^</span>(γ);
                R <span class="pl-k">-</span> α<span class="pl-k">*</span>Z<span class="pl-k">*</span>Kl<span class="pl-k">^</span>(α<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">-</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> δ;
                K <span class="pl-k">-</span> (<span class="pl-c1">1</span><span class="pl-k">-</span>δ)<span class="pl-k">*</span>Kl <span class="pl-k">-</span> Y <span class="pl-k">+</span> C;
                Y <span class="pl-k">-</span> Z<span class="pl-k">*</span>Kl<span class="pl-k">^</span>α;
                <span class="pl-c1">log</span>(Z) <span class="pl-k">-</span> ρ<span class="pl-k">*</span><span class="pl-c1">log</span>(Zl) <span class="pl-k">-</span> ϵ]
    
    <span class="pl-k">return</span> residual
    
<span class="pl-k">end</span></pre></div>
<p dir="auto">As you can see the function has an additional argument at the end called <code>parameters</code>. In this case it is the tuple of parameters which the model will read. It is constructed with the help of <a href="https://github.com/mauro3/Parameters.jl">Parameters.jl</a>. For reference here is how it is constructed in this case:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rbc = @with_kw (
    β = 0.96,
    α = 0.33,
    γ = 2.0,
    δ = 0.1,
    ρ = 0.9
)

params = rbc()"><pre>rbc <span class="pl-k">=</span> <span class="pl-c1">@with_kw</span> (
    β <span class="pl-k">=</span> <span class="pl-c1">0.96</span>,
    α <span class="pl-k">=</span> <span class="pl-c1">0.33</span>,
    γ <span class="pl-k">=</span> <span class="pl-c1">2.0</span>,
    δ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>,
    ρ <span class="pl-k">=</span> <span class="pl-c1">0.9</span>
)

params <span class="pl-k">=</span> <span class="pl-c1">rbc</span>()</pre></div>
<p dir="auto">But how you wish to pass in the parameters is totally up to you!</p>
<h2 dir="auto"><a id="user-content-solving" class="anchor" aria-hidden="true" href="#solving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solving</h2>
<p dir="auto">Solving the model is straightforward. We use the <code>solve</code> function to get out a <code>Solution</code> object with the fields <code>(resultmessage, F, Q, xss, equations, A, B, C, E)</code>. <code>F</code> and <code>Q</code> define the solution to the system. <code>xss</code> are the steady state values of the variables. <code>equations</code> stores the function which outputs the residual of the equilibrium equations. <code>A, B, C, E</code> correspond to their namesakes in the paper.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sol = solve(equations, [params], ones(5))"><pre>sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(equations, [params], <span class="pl-c1">ones</span>(<span class="pl-c1">5</span>))</pre></div>
<p dir="auto"><code>sol</code> has everything we need to understand our model.</p>
<p dir="auto">If you want to simulate some data you can use the <code>simdata</code> function provided:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sim = simdata(sol, 200)
plot(sim', layout = 5, title = [&quot;Consumption&quot;, &quot;Interest Rate&quot;, &quot;Capital&quot;, &quot;Output&quot;, &quot;Z&quot;])"><pre>sim <span class="pl-k">=</span> <span class="pl-c1">simdata</span>(sol, <span class="pl-c1">200</span>)
<span class="pl-c1">plot</span>(sim<span class="pl-k">'</span>, layout <span class="pl-k">=</span> <span class="pl-c1">5</span>, title <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Consumption<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Interest Rate<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Capital<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Output<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Z<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32820850/123622733-3b4c1500-d82a-11eb-929f-ac445f1b460c.png"><img src="https://user-images.githubusercontent.com/32820850/123622733-3b4c1500-d82a-11eb-929f-ac445f1b460c.png" alt="Simulation" style="max-width: 100%;"></a></p>
<p dir="auto">Similarly if you want to look at how the IRF's look:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="irf = compute_irfs(sol, 100)
plot(irf', layout = 5, title = [&quot;Consumption&quot;, &quot;Interest Rate&quot;, &quot;Capital&quot;, &quot;Output&quot;, &quot;Z&quot;], labels = &quot;&quot;)"><pre>irf <span class="pl-k">=</span> <span class="pl-c1">compute_irfs</span>(sol, <span class="pl-c1">100</span>)
<span class="pl-c1">plot</span>(irf<span class="pl-k">'</span>, layout <span class="pl-k">=</span> <span class="pl-c1">5</span>, title <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>Consumption<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Interest Rate<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Capital<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Output<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Z<span class="pl-pds">"</span></span>], labels <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/32820850/123622746-3e470580-d82a-11eb-8a7e-0b678b2ee097.png"><img src="https://user-images.githubusercontent.com/32820850/123622746-3e470580-d82a-11eb-8a7e-0b678b2ee097.png" alt="IRF" style="max-width: 100%;"></a></p>
</article></div>