<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-particleincelljl" class="anchor" aria-hidden="true" href="#particleincelljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ParticleInCell.jl</h1>
<p dir="auto"><a href="https://juliavlasov.github.io/ParticleInCell.jl/dev" rel="nofollow"><img src="https://github.com/juliavlasov/ParticleInCell.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width: 100%;"></a></p>
<p dir="auto">Particle In Cell code in Julia</p>
<p dir="auto">This software is developed in order to experiment optimizations and to try the best way to have an efficient package for particle-mesh numerical methods for plasmas.</p>
<p dir="auto">It is a work in progress, you can find first tests in the documentation.</p>
<p dir="auto">I compared performances of this Julia code with a Fortran version that
solves same equation with same parameters and same numerical method.
You can find it <a href="https://github.com/pnavaro/vm_nonunif">here</a>. This is an old code written in 2005 with Régine Barthelmé and even is is not well optimized, it takes only 6 seconds with 204800 particles. I note here times of this Julia code and what I have done to speed-up things.</p>
<ul dir="auto">
<li>323 seconds : First version</li>
<li>303 seconds : Use julia -O3 --check-bounds=no</li>
<li>302 seconds : change shape of positions and velocities arrays for particles</li>
<li>156 seconds : Regroup ex, ey, and bz in a same array eb(3,nx,ny)</li>
<li>176 seconds : put the array ebj in fdtd type</li>
<li>140 seconds : put the particles data in one array, the particle push_v is now very fast.</li>
<li>077 seconds : replace the julia interpolation function by a call to the fortran subroutine.</li>
<li>019 seconds : replace the julia deposition by a call to the fortran subroutine</li>
<li>006 seconds : vectorize and use views in function push_x instead of a loop</li>
<li>135 seconds : back to julia functions for particles but without <code>mod1</code> calls.</li>
<li>003 seconds : back to julia functions, I set the types of struct members. I let some of them with the type <code>Any</code>, very bad idea...</li>
</ul>
<p dir="auto">Now I increase the number of particles to 1024000 and begin to parallelize particles motion.</p>
<ul dir="auto">
<li>58 seconds : First serial time, It spends 24 seconds in <code>push_x</code>, we can do better.</li>
<li>46 seconds : Move interpolation step inside the <code>push_v</code> function and reduce memory print.</li>
<li>31 seconds : Add @threads in <code>push_x</code> and <code>push_v</code> functions. My CPU has 4 cores.</li>
<li>17 seconds : by adding @threads in <code>compute_current</code></li>
</ul>
<h2 dir="auto"><a id="user-content-other-julia-pic-codes" class="anchor" aria-hidden="true" href="#other-julia-pic-codes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other Julia PIC codes</h2>
<ul dir="auto">
<li><a href="https://github.com/adamslc/ParticleInCell.jl">ParticleInCell.jl</a> by Luke Adams.</li>
<li><a href="https://github.com/adamslc/MPIParticleInCell.jl">MPIParticleInCell.jl</a> by Luke Adams.</li>
<li><a href="https://github.com/jwscook/ElectrostaticPIC1D.jl">ElectrostaticPIC1D.jl</a> by James Cook.</li>
<li><a href="https://discourse.julialang.org/t/pic-particle-in-cell-space-charge-tracking-simulation/" rel="nofollow">Julia discourse thread</a></li>
</ul>
</article></div>