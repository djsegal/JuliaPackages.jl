<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geointerfacejl" class="anchor" aria-hidden="true" href="#geointerfacejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeoInterface.jl</h1>
<p>A Julia Protocol for Geospatial Data</p>
<h2><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Motivation</h2>
<p>To support operations or visualization of multiple (but similar) implementations of vector data (across <code>GeoJSON.jl</code>, <code>LibGEOS.jl</code>, etc). As a starting point, it will follow the <a href="https://gist.github.com/sgillies/2217756">GEO interface</a> [1] in Python (which in turn borrows its design from the <a href="http://geojson.org/" rel="nofollow">GeoJSON specification</a> [2]).</p>
<h2><a id="user-content-geo-interface" class="anchor" aria-hidden="true" href="#geo-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GEO Interface</h2>
<h3><a id="user-content-abstractposition" class="anchor" aria-hidden="true" href="#abstractposition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractPosition</h3>
<p>A position can be thought of as a tuple of numbers. There must be at least two elements, and may be more. The order of elements must follow <code>x</code>, <code>y</code>, <code>z</code> order (e.g. easting, northing, altitude for coordinates in a projected coordinate reference system, or longitude, latitude, altitude for coordinates in a geographic coordinate reference system). It requires the following methods:</p>
<ul>
<li><code>xcoord(::AbstractPosition)::Float64</code></li>
<li><code>ycoord(::AbstractPosition)::Float64</code></li>
<li><code>zcoord(::AbstractPosition)::Float64</code></li>
<li><code>hasz(::AbstractPosition)::Bool</code> (<code>false</code> by default)</li>
</ul>
<p>Remark: Although the specification allows the representation of up to 3 dimensions, not all algorithms support require all 3 dimensions. Also, if you are working with an arbitrary <code>obj::AbstractPosition</code>, you should call <code>hasz(obj)</code> before calling <code>zcoord(obj)</code>.</p>
<h3><a id="user-content-abstractgeometry" class="anchor" aria-hidden="true" href="#abstractgeometry"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractGeometry</h3>
<p>Represents vector geometry, and encompasses the following abstract types: <code>AbstractPoint, AbstractMultiPoint, AbstractLineString, AbstractMultiLineString, AbstractMultiPolygon, AbstractPolygon</code>. It requires the <code>coordinates</code> method, where</p>
<ul>
<li><code>coordinates(::AbstractPoint)</code> returns a single position.</li>
<li><code>coordinates(::AbstractMultiPoint)</code> returns a vector of positions.</li>
<li><code>coordinates(::AbstractLineString)</code> returns a vector of positions.</li>
<li><code>coordinates(::AbstractMultiLineString)</code> returns a vector of linestrings.</li>
<li><code>coordinates(::AbstractPolygon)</code> returns a vector of linestrings.</li>
<li><code>coordinates(::AbstractMultiPolygon)</code> returns a vector of polygons.</li>
</ul>
<h3><a id="user-content-abstractgeometrycollection" class="anchor" aria-hidden="true" href="#abstractgeometrycollection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractGeometryCollection</h3>
<p>Represents a collection of geometries, and requires the <code>geometries</code> method, which returns a vector of geometries. Is also a subtype of <code>AbstractGeometry</code>.</p>
<h3><a id="user-content-abstractfeature" class="anchor" aria-hidden="true" href="#abstractfeature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractFeature</h3>
<p>Represents a geometry with additional attributes, and requires the following methods</p>
<ul>
<li><code>geometry(::AbstractFeature)::AbstractGeometry</code> returns the corresponding geometry</li>
<li><code>properties(::AbstractFeature)::Dict{AbstractString,Any}</code> returns a dictionary of the properties</li>
</ul>
<p>Optionally, you can also provide the following methods</p>
<ul>
<li><code>bbox(::AbstractFeature)::AbstractGeometry</code> returns the bounding box for that feature</li>
<li><code>crs(::AbstractFeature)::Dict{AbstractString,Any}</code> returns the coordinate reference system</li>
</ul>
<h2><a id="user-content-geospatial-geometries" class="anchor" aria-hidden="true" href="#geospatial-geometries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Geospatial Geometries</h2>
<p>If you don't need to provide your own user types, GeoInterface also provides a set of geometries (below), which implements the GEO Interface:</p>
<ul>
<li><code>CRS</code></li>
<li><code>Position</code></li>
<li><code>Geometry &lt;: AbstractGeometry</code>
<ul>
<li><code>Point &lt;: AbstractPoint &lt;: AbstractGeometry</code></li>
<li><code>MultiPoint &lt;: AbstractMultiPoint &lt;: AbstractGeometry</code></li>
<li><code>LineString &lt;: AbstractLineString &lt;: AbstractGeometry</code></li>
<li><code>MultiLineString &lt;: AbstractMultiLineString &lt;: AbstractGeometry</code></li>
<li><code>Polygon &lt;: AbstractPolygon &lt;: AbstractGeometry</code></li>
<li><code>MultiPolygon &lt;: AbstractMultiPolygon &lt;: AbstractGeometry</code></li>
<li><code>GeometryCollection &lt;: AbstractGeometryCollection &lt;: AbstractGeometry</code></li>
</ul>
</li>
<li><code>Feature &lt;: AbstractFeature</code></li>
<li><code>FeatureCollection &lt;: AbstractFeatureCollection</code></li>
</ul>
<h2><a id="user-content-remarks" class="anchor" aria-hidden="true" href="#remarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Remarks</h2>
<p>Conceptually,</p>
<ul>
<li>an <code>::AbstractGeometryCollection</code> maps to a <code>DataArray{::AbstractGeometry}</code>, and</li>
<li>an <code>::AbstractFeatureCollection</code> maps to a <code>DataFrame</code>, where each row is an <code>AbstractFeature</code></li>
</ul>
<p>The design of the types in GeoInterface differs from the GeoJSON specification in the following ways:</p>
<ul>
<li>Julia Geometries do not provide a <code>bbox</code> and <code>crs</code> method. If you wish to provide a <code>bbox</code> or <code>crs</code> attribute, wrap the geometry into a <code>Feature</code> or <code>FeatureCollection</code>.</li>
<li>Features do not have special fields for <code>id</code>, <code>bbox</code>, and <code>crs</code>. These are to be provided (or found) in the <code>properties</code> field, under the keys <code>featureid</code>, <code>bbox</code>, and <code>crs</code> respectively (if they exist).</li>
</ul>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>[1]: A Python Protocol for Geospatial Data (<a href="https://gist.github.com/sgillies/2217756">gist</a>)</p>
<p>[2]: GeoJSON Specification (<a href="http://geojson.org/" rel="nofollow">website</a>)</p>
</article></div>