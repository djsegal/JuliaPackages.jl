<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-leftchildrightsiblingtrees" class="anchor" aria-hidden="true" href="#leftchildrightsiblingtrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LeftChildRightSiblingTrees</h1>
<p>A <a href="https://en.wikipedia.org/wiki/Left-child_right-sibling_binary_tree" rel="nofollow">left child, right sibling tree</a>
(frequently abbreviated as "LCRS")
is a rooted tree data structure that allows a parent node to have multiple child nodes.
Rather than maintain a list of children (which requires one array per node),
instead it is represented as a binary tree, where the "left" branch is the first child,
whose "right" branch points to its first sibling.</p>
<p>Concretely, suppose a particular node, <code>A</code>, has 3 children, <code>a</code>, <code>b</code>, and <code>c</code>. Then:</p>
<ul>
<li><code>a</code>, <code>b</code>, and <code>c</code> link to <code>A</code> as their parent.</li>
<li><code>A</code> links <code>a</code> as its child (via <code>A</code>'s left branch); <code>a</code> links <code>b</code> as its sibling
(via <code>a</code>'s right branch), and <code>b</code> links <code>c</code> as its sibling (via <code>b</code>'s right branch).</li>
<li><code>A</code>'s right branch would link to any of its siblings (e.g., <code>B</code>), if they exist.</li>
<li>Any missing links (e.g., <code>c</code> does not have a sibling) link back to itself
(<code>c.sibling == c</code>).</li>
</ul>
<h2><a id="user-content-tradeoffs" class="anchor" aria-hidden="true" href="#tradeoffs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tradeoffs</h2>
<p>An LCRS tree is typically more memory efficient than an equivalent multi-way tree
representation that uses an array to store the children of each node.
However, for certain tasks it can be less performant, because some operations that modify
the tree structure require iterating over all the children of a node.</p>
<h2><a id="user-content-demo" class="anchor" aria-hidden="true" href="#demo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Demo</h2>
<h3><a id="user-content-creating-a-tree" class="anchor" aria-hidden="true" href="#creating-a-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating a Tree</h3>
<p>Can <code>addchild</code> or <code>addsibling</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LeftChildRightSiblingTrees

julia<span class="pl-k">&gt;</span> mum <span class="pl-k">=</span> <span class="pl-c1">Node</span>(<span class="pl-s"><span class="pl-pds">"</span>Mum<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> me <span class="pl-k">=</span> <span class="pl-c1">addchild</span>(mum, <span class="pl-s"><span class="pl-pds">"</span>Me<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> son <span class="pl-k">=</span> <span class="pl-c1">addchild</span>(me, <span class="pl-s"><span class="pl-pds">"</span>Son<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> daughter <span class="pl-k">=</span> <span class="pl-c1">addchild</span>(me, <span class="pl-s"><span class="pl-pds">"</span>Daughter<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> brother <span class="pl-k">=</span> <span class="pl-c1">addsibling</span>(me, <span class="pl-s"><span class="pl-pds">"</span>Brother<span class="pl-pds">"</span></span>);  <span class="pl-c"><span class="pl-c">#</span> equivalent: to `addchild(mum, "Brother")`</span></pre></div>
<h3><a id="user-content-querying-about-nodes" class="anchor" aria-hidden="true" href="#querying-about-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Querying about nodes:</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lastsibling</span>(me)
<span class="pl-c1">Node</span>(Brother)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isroot</span>(mum)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isleaf</span>(me)
<span class="pl-c1">false</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">isleaf</span>(daughter)
<span class="pl-c1">true</span></pre></div>
<h3><a id="user-content-iterating-the-treenodes" class="anchor" aria-hidden="true" href="#iterating-the-treenodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Iterating the Tree/Nodes</h3>
<p>Iteration goes through all (direct) children.
The <code>.data</code> field holds the information put in the tree.
we can use this to draw a simple visualization of the tree via recursion.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> child <span class="pl-k">in</span> mum
           <span class="pl-c1">println</span>(child)
       <span class="pl-k">end</span>
<span class="pl-c1">Node</span>(Me)
<span class="pl-c1">Node</span>(Brother)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">showtree</span>(node, indent<span class="pl-k">=</span><span class="pl-c1">0</span>)
           <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\t</span><span class="pl-pds">"</span></span><span class="pl-k">^</span>indent, node<span class="pl-k">.</span>data)
           <span class="pl-k">for</span> child <span class="pl-k">in</span> node
               <span class="pl-c1">showtree</span>(child, indent <span class="pl-k">+</span> <span class="pl-c1">1</span>)
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
showtree (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">showtree</span>(mum)
Mum
        Me
                Son
                Daughter
        Brother</pre></div>
<p>LeftChildRightSiblingTrees also has a built in function for showing this kind of info:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> LeftChildRightSiblingTrees<span class="pl-k">.</span><span class="pl-c1">showedges</span>(mum)
Mum has the following children<span class="pl-k">:</span> Me    Brother
Me has the following children<span class="pl-k">:</span> Son    Daughter
Son has no children
Daughter has no children
Brother has no children</pre></div>
<h2><a id="user-content-manipulating-the-tree" class="anchor" aria-hidden="true" href="#manipulating-the-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Manipulating the tree</h2>
<p>See the docstrings for <code>graftchildren!</code> and <code>prunebranch!</code>.</p>
<h2><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credits</h2>
<p>This existed as an internal component of
<a href="https://github.com/timholy/ProfileView.jl">ProfileView</a>
since its inception until it was split out as an independent package.</p>
</article></div>