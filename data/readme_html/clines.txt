<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-clines" class="anchor" aria-hidden="true" href="#clines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Clines</h1>
<p dir="auto">A <a href="https://en.wikipedia.org/wiki/Generalised_circle" rel="nofollow">cline</a> is a circle or a line in the plane.</p>
<h2 dir="auto"><a id="user-content-construction" class="anchor" aria-hidden="true" href="#construction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Construction</h2>
<p dir="auto">A cline is specified by three points in the plane represented by complex numbers. If the three points are collinear, then a line is created. Otherwise, there is a unique circle containing those three points and that is what is returned.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Clines

julia&gt; Cline(2-im, 3im, 1-im)
Circle(1.5, 1.25, 2.3048861143232218)

julia&gt; L = Cline(0, 1+im, -1-im)
Line(1.0 + 1.0im, -1.0 - 1.0im)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Clines

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Cline</span>(<span class="pl-c1">2</span><span class="pl-k">-</span>im, <span class="pl-c1">3im</span>, <span class="pl-c1">1</span><span class="pl-k">-</span>im)
<span class="pl-c1">Circle</span>(<span class="pl-c1">1.5</span>, <span class="pl-c1">1.25</span>, <span class="pl-c1">2.3048861143232218</span>)

julia<span class="pl-k">&gt;</span> L <span class="pl-k">=</span> <span class="pl-c1">Cline</span>(<span class="pl-c1">0</span>, <span class="pl-c1">1</span><span class="pl-k">+</span>im, <span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">-</span>im)
<span class="pl-c1">Line</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span>)</pre></div>
<p dir="auto"><strong>Notes</strong></p>
<ul dir="auto">
<li>
<p dir="auto">If two of the arguments to <code>Cline</code> are equal, then a <code>Line</code> is created through the two distince points.</p>
</li>
<li>
<p dir="auto">If one of the arguments to <code>Cline</code> is infinite, a <code>Line</code> is created through the two (finite) points.</p>
</li>
<li>
<p dir="auto">Note that the <code>Clines</code> module defines two data types: <code>Circle</code> and <code>Line</code>, and these are subtypes of the abstract type <code>Cline</code>.</p>
</li>
<li>
<p dir="auto">A <code>Circle</code> can be directly constructed by specifying a center <code>z</code> and a radius <code>r</code> like this: <code>Circle(z,r)</code>.</p>
</li>
<li>
<p dir="auto">A <code>Line</code> can be directly constructed by specifying two points <code>w</code> and <code>z</code> like this: <code>Line(w,z)</code>.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-inspection" class="anchor" aria-hidden="true" href="#inspection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inspection</h2>
<p dir="auto">For any cline <code>C</code>, the function <code>three_points(C)</code> returns a list of three complex numbers that are distinct points on <code>C</code>.</p>
<ul dir="auto">
<li>In the case of a circle, the three points are equally spaced around the circle at 0, 120, and 240 degrees starting from the far right.</li>
<li>For a line, the three points are the two points used to define the line and their midpoint.</li>
</ul>
<p dir="auto">For a circle <code>C</code>, we have the following:</p>
<ul dir="auto">
<li><code>center(C)</code> returns the center of the circle as a complex number.</li>
<li><code>radius(C)</code> returns the radius of the circle.</li>
<li><code>area(C)</code> returns the area of the circle.</li>
<li><code>circumference(C)</code> returns the circumference.</li>
</ul>
<p dir="auto">For a line <code>L</code>, we have the following:</p>
<ul dir="auto">
<li><code>slope(L)</code> returns the slope of the line (possibly <code>Inf</code>).</li>
<li><code>dilate(L,factor=2)</code> creates a new <code>Line</code> object that is equal to <code>L</code> but whose defining points are further apart by a factor of <code>factor</code>.</li>
</ul>
<h2 dir="auto"><a id="user-content-pairs" class="anchor" aria-hidden="true" href="#pairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Pairs</h2>
<h3 dir="auto"><a id="user-content-intersection" class="anchor" aria-hidden="true" href="#intersection"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Intersection</h3>
<p dir="auto">Given two clines <code>C</code> and <code>D</code> use <code>intersect(C,D)</code> or <code>C ∩ D</code> to return a set of points that are common to the two clines. This set may have zero, one, or two elements.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = Circle(0im, 1)
Circle(0.0, 0.0, 1.0)

julia&gt; D = Circle(0.5im,1)
Circle(0.0, 0.5, 1.0)

julia&gt; C ∩ D
Set{ComplexF64} with 2 elements:
  -0.9682458365518543 + 0.25im
  0.9682458365518543 + 0.25im"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(<span class="pl-c1">0im</span>, <span class="pl-c1">1</span>)
<span class="pl-c1">Circle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(<span class="pl-c1">0.5im</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">Circle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> C <span class="pl-k">∩</span> D
Set{ComplexF64} with <span class="pl-c1">2</span> elements<span class="pl-k">:</span>
  <span class="pl-k">-</span><span class="pl-c1">0.9682458365518543</span> <span class="pl-k">+</span> <span class="pl-c1">0.25im</span>
  <span class="pl-c1">0.9682458365518543</span> <span class="pl-k">+</span> <span class="pl-c1">0.25im</span></pre></div>
<p dir="auto"><strong>Note</strong>: If the two clines are equal, a warning is issued and the emptyset it returned.</p>
<h3 dir="auto"><a id="user-content-angle" class="anchor" aria-hidden="true" href="#angle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Angle</h3>
<p dir="auto">For two clines, <code>angle(C,D)</code> computes the angle of intersection in the range <code>[0,π/2]</code>. If the clines do not intersect, an error is thrown. Note that parallel lines are considered to intersect at infinity and their angle is reported as <code>0</code>.</p>
<h3 dir="auto"><a id="user-content-containment" class="anchor" aria-hidden="true" href="#containment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Containment</h3>
<p dir="auto">For a point <code>z</code> and a cline <code>C</code>, use <code>in(z,C)</code> or <code>z ∈ C</code> to test of if <code>z</code> lies on <code>C</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = Circle(0im,1)
Circle(0.0, 0.0, 1.0)

julia&gt; z = 0.6 + 0.8im
0.6 + 0.8im

julia&gt; z ∈ C
true"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(<span class="pl-c1">0im</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">Circle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">0.6</span> <span class="pl-k">+</span> <span class="pl-c1">0.8im</span>
<span class="pl-c1">0.6</span> <span class="pl-k">+</span> <span class="pl-c1">0.8im</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">∈</span> C
<span class="pl-c1">true</span></pre></div>
<p dir="auto">For two circles <code>C</code> and <code>D</code>, use <code>issubset(C,D)</code> or <code>C ⊆ D</code> to test if the circle <code>C</code> is contained inside circle <code>D</code>.</p>
<h2 dir="auto"><a id="user-content-linear-fractional-möbius-transformations" class="anchor" aria-hidden="true" href="#linear-fractional-möbius-transformations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Fractional (Möbius) Transformations</h2>
<p dir="auto">Clines can be used to define and to be transformed by <a href="https://github.com/scheinerman/LinearFractionalTransformations.jl">Linear Fractional Transformations</a>.</p>
<p dir="auto">If <code>F</code> is a linear fractional transformation, then <code>F(C)</code> is the result of applying <code>F</code> to the cline <code>C</code>.</p>
<p dir="auto">Given a cline <code>C</code>, calling <code>LFT(C)</code> returns a linear fractional transformation that maps <code>C</code> to the x-axis.</p>
<p dir="auto">Given two clines <code>C</code> and <code>D</code>, calling <code>LFT(C,D)</code> returns a linear fractional transformation that maps <code>C</code> to <code>D</code>.</p>
<h2 dir="auto"><a id="user-content-inversion" class="anchor" aria-hidden="true" href="#inversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Inversion</h2>
<p dir="auto">To find the <a href="https://en.wikipedia.org/wiki/Inversive_geometry" rel="nofollow">inversion</a> of a point or a cline through another cline, use <code>inv</code>:</p>
<ul dir="auto">
<li><code>inv(C,z)</code> finds the image of the point <code>z</code> by inversion through <code>C</code>.</li>
<li><code>inv(C,D)</code> finds the image of cline <code>D</code> by inversion through <code>C</code>.</li>
</ul>
<p dir="auto">Calling <code>inv(C)</code> returns a function <code>F</code> with the property that <code>F(x)</code> gives <code>inv(C,x)</code>.</p>
<h2 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h2>
<p dir="auto">The function <code>draw</code> will draw a <code>Cline</code> on the screen using
<a href="https://github.com/scheinerman/SimpleDrawing.jl">SimpleDrawing</a> in conjunction with
<a href="https://github.com/JuliaPlots/Plots.jl">Plots</a>.</p>
<h3 dir="auto"><a id="user-content-drawing-circles" class="anchor" aria-hidden="true" href="#drawing-circles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Drawing circles</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SimpleDrawing, Plots

julia&gt; C = Circle(0,0,1)
Circle(0.0, 0.0, 1.0)

julia&gt; D = Circle(0.25,.5,1.25)
Circle(0.25, 0.5, 1.25)

julia&gt; E = Circle(.2,.2,.5)
Circle(0.2, 0.2, 0.5)

julia&gt; newdraw(); draw(C); draw(D,linecolor=:red); draw(E,fill=true,color=:yellow)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SimpleDrawing, Plots

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">Circle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(<span class="pl-c1">0.25</span>,.<span class="pl-c1">5</span>,<span class="pl-c1">1.25</span>)
<span class="pl-c1">Circle</span>(<span class="pl-c1">0.25</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">1.25</span>)

julia<span class="pl-k">&gt;</span> E <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(.<span class="pl-c1">2</span>,.<span class="pl-c1">2</span>,.<span class="pl-c1">5</span>)
<span class="pl-c1">Circle</span>(<span class="pl-c1">0.2</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.5</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">newdraw</span>(); <span class="pl-c1">draw</span>(C); <span class="pl-c1">draw</span>(D,linecolor<span class="pl-k">=</span><span class="pl-c1">:red</span>); <span class="pl-c1">draw</span>(E,fill<span class="pl-k">=</span><span class="pl-c1">true</span>,color<span class="pl-k">=</span><span class="pl-c1">:yellow</span>)</pre></div>
<p dir="auto">Here is the result:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="three-circles.png"><img src="three-circles.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-drawing-lines" class="anchor" aria-hidden="true" href="#drawing-lines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Drawing lines</h2>
<p dir="auto">For a line <code>L</code>, the result of <code>draw(L)</code> is a line segment (with arrows at each end) drawn between the two points used to define <code>L</code>. To extend <code>L</code>, use the <code>dilate</code> function like this <code>L=dilate(L)</code>. This doubles the distance between the two points that define <code>L</code>. Use <code>dilate(L,factor)</code> to dilate by a different amount.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; L = Line(-1-im, 1+im)
Line(-1.0 - 1.0im, 1.0 + 1.0im)

julia&gt; LL = dilate(L,3)
Line(-3.0 - 3.0im, 3.0 + 3.0im)

julia&gt; L == LL
true"><pre>julia<span class="pl-k">&gt;</span> L <span class="pl-k">=</span> <span class="pl-c1">Line</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">-</span>im, <span class="pl-c1">1</span><span class="pl-k">+</span>im)
<span class="pl-c1">Line</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span> <span class="pl-k">-</span> <span class="pl-c1">1.0im</span>, <span class="pl-c1">1.0</span> <span class="pl-k">+</span> <span class="pl-c1">1.0im</span>)

julia<span class="pl-k">&gt;</span> LL <span class="pl-k">=</span> <span class="pl-c1">dilate</span>(L,<span class="pl-c1">3</span>)
<span class="pl-c1">Line</span>(<span class="pl-k">-</span><span class="pl-c1">3.0</span> <span class="pl-k">-</span> <span class="pl-c1">3.0im</span>, <span class="pl-c1">3.0</span> <span class="pl-k">+</span> <span class="pl-c1">3.0im</span>)

julia<span class="pl-k">&gt;</span> L <span class="pl-k">==</span> LL
<span class="pl-c1">true</span></pre></div>
<h2 dir="auto"><a id="user-content-roundoff-problems" class="anchor" aria-hidden="true" href="#roundoff-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Roundoff Problems</h2>
<p dir="auto">Most of the operations in this module subject to roundoff errors. For example, to test if a point <code>z</code> lies on a circle <code>C</code> we would compute the distance from <code>z</code> to the center of <code>C</code> and check if that equals the radius. However, because of roundoff errors, a strict test for equality may yield <code>false</code> when mathematically the result should be <code>true</code>.</p>
<p dir="auto">We provide the following funtions for dealing with roundoff errors:</p>
<ul dir="auto">
<li><code>set_tolerance(tol)</code> sets the tolerance for roundoff errors to <code>tol</code>. Without an argument, we set the tolerance to the module's default value.</li>
<li><code>get_tolerance()</code> returns the current tolerance setting.</li>
</ul>
<p dir="auto">For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; C = Circle(0,0,sqrt(2));   # circle of radius sqrt(2)

julia&gt; z = sqrt(2) * exp(im);     # mathematically, this is a point on C

julia&gt; z ∈ C                      # success
true

julia&gt; set_tolerance(1e-100)      # make tolerance unreasonably small
1.0e-100

julia&gt; z ∈ C                      # test fails
false"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Circle</span>(<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>));   <span class="pl-c"><span class="pl-c">#</span> circle of radius sqrt(2)</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>) <span class="pl-k">*</span> <span class="pl-c1">exp</span>(im);     <span class="pl-c"><span class="pl-c">#</span> mathematically, this is a point on C</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">∈</span> C                      <span class="pl-c"><span class="pl-c">#</span> success</span>
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_tolerance</span>(<span class="pl-c1">1e-100</span>)      <span class="pl-c"><span class="pl-c">#</span> make tolerance unreasonably small</span>
<span class="pl-c1">1.0e-100</span>

julia<span class="pl-k">&gt;</span> z <span class="pl-k">∈</span> C                      <span class="pl-c"><span class="pl-c">#</span> test fails</span>
<span class="pl-c1">false</span></pre></div>
<h2 dir="auto"><a id="user-content-kissing-circles" class="anchor" aria-hidden="true" href="#kissing-circles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Kissing Circles</h2>
<p dir="auto">Given three (noncollinear) points <code>a</code>, <code>b</code>, and <code>c</code>, the function <code>kiss(a,b,c)</code> returns a list of three circles whose centers are <code>a</code>, <code>b</code>, and <code>c</code> that are pairwise tangent.</p>
<p dir="auto">Then, given three mutually tangent circles, the function <code>soddy</code> returns a circle that is tangent to all three and nestled in the space between them.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; CC = kiss(-1,2im,1-im)
3-element Vector{Circle}:
 Circle(-1.0, 0.0, 0.6549291474156)
 Circle(0.0, 2.0, 1.5811388300841898)
 Circle(1.0, -1.0, 1.5811388300841898)

julia&gt; S = soddy(CC...)
Circle(-0.21638837510877562, 0.26120387496374137, 0.17107003113165417)

julia&gt; newdraw(); draw.(CC); draw(S,fill=true,color=:red); finish()"><pre>julia<span class="pl-k">&gt;</span> CC <span class="pl-k">=</span> <span class="pl-c1">kiss</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-c1">2im</span>,<span class="pl-c1">1</span><span class="pl-k">-</span>im)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Circle}<span class="pl-k">:</span>
 <span class="pl-c1">Circle</span>(<span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.6549291474156</span>)
 <span class="pl-c1">Circle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">1.5811388300841898</span>)
 <span class="pl-c1">Circle</span>(<span class="pl-c1">1.0</span>, <span class="pl-k">-</span><span class="pl-c1">1.0</span>, <span class="pl-c1">1.5811388300841898</span>)

julia<span class="pl-k">&gt;</span> S <span class="pl-k">=</span> <span class="pl-c1">soddy</span>(CC<span class="pl-k">...</span>)
<span class="pl-c1">Circle</span>(<span class="pl-k">-</span><span class="pl-c1">0.21638837510877562</span>, <span class="pl-c1">0.26120387496374137</span>, <span class="pl-c1">0.17107003113165417</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">newdraw</span>(); <span class="pl-c1">draw</span>.(CC); <span class="pl-c1">draw</span>(S,fill<span class="pl-k">=</span><span class="pl-c1">true</span>,color<span class="pl-k">=</span><span class="pl-c1">:red</span>); <span class="pl-c1">finish</span>()</pre></div>
<p dir="auto">Here is the result:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="soddy-pic.png"><img src="soddy-pic.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-other" class="anchor" aria-hidden="true" href="#other"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other</h2>
<ul dir="auto">
<li><code>collinear(a,b,c)</code> determines if the points specified by the three complex numbers are collinear.</li>
</ul>
</article></div>