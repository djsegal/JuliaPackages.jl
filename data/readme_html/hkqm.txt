<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hkqm-helmholtz-kernel-quantum-mechanics" class="anchor" aria-hidden="true" href="#hkqm-helmholtz-kernel-quantum-mechanics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HKQM (Helmholtz Kernel Quantum Mechanics)</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://tjjarvinen.github.io/HKQM.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://github.com/tjjarvinen/HKQM.jl/actions?query=workflow%3ACI"><img src="https://github.com/tjjarvinen/HKQM.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/tjjarvinen/HKQM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/48848c5c1fab86509462595bbf239688969853fea9c444896dd8424343f0bfa1/68747470733a2f2f636f6465636f762e696f2f67682f746a6a617276696e656e2f484b514d2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/tjjarvinen/HKQM.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">This package is under development and not all of the functionality is ready.
You are free to try it though.</p>
<p dir="auto">The name is a working name and will change for the final program.</p>
<h2 dir="auto"><a id="user-content-what-is-it" class="anchor" aria-hidden="true" href="#what-is-it"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What is it?</h2>
<p dir="auto">This is an electronic structure code on isolated molecules.
It uses new method to solve scf-equations (Helmholtz equation Greens function) and Kohn-Sham equations.</p>
<p dir="auto">The program is designed so that it will have massive parallelization on GPUs,
while still being more simple than standard Gaussian orbital based methods.</p>
<p dir="auto">The code is based on earlier Fortran code <a href="https://github.com/dagesundholm/DAGE">DAGE</a> described in <a href="http://dx.doi.org/10.1063/1.4976557" rel="nofollow">chem.phys. 146, 084102 (2017)</a>.</p>
<p dir="auto">This Julia based next generation implementation includes upgrades for accuracy, advanced functionality like automatic differentiation and general operator manipulations, while also being significantly faster and able to run on GPUs from multiple vendors.</p>
<h2 dir="auto"><a id="user-content-development-plan" class="anchor" aria-hidden="true" href="#development-plan"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development Plan</h2>
<p dir="auto">The aim is to run this code on <a href="https://www.lumi-supercomputer.eu/" rel="nofollow">LUMI</a> supercomputer.</p>
<p dir="auto">The plan is that the program is functional with DFT using pseudopotentials.</p>
<p dir="auto">Later on we will add support for all electron calculations with <a href="http://dx.doi.org/10.1021/acs.jctc.8b00456" rel="nofollow">Bubbles</a> framework.</p>
<h2 dir="auto"><a id="user-content-how-does-it-work" class="anchor" aria-hidden="true" href="#how-does-it-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How Does it Work</h2>
<p dir="auto">The main idea here is to transform 3D Coulomb Integral to four one dimensional
integrals and thus massively reduce the computational time. This allows solving
Poisson equation. Helmholtz equation can then be solved using Greens function
the same way as Poisson equation, by only adding an extra constant term.</p>
<p dir="auto">From the 4 one dimensional integrals 3 can be calculated as a tensor contraction
that parallelizes well on GPUs. The final integral can be parallelized over different GPUs. This should result in a program that can parallelize over tens of GPUs, for large systems.</p>
<p dir="auto">THe main method also means that differential equation is solved as integral equation.
Thus the basis set is chosen to give the best accuracy for general numerical
integrals, which means Gauss-Legendre polynomials. The system is also divided to
elements in order to reduce the maximum order of Gauss-Legendre polynomials.</p>
<h2 dir="auto"><a id="user-content-highlighted-features-when-complete" class="anchor" aria-hidden="true" href="#highlighted-features-when-complete"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Highlighted Features (when complete)</h2>
<ul dir="auto">
<li>Solve Poisson equation (3D) - ready</li>
<li>Solve Helmholtz equation (3D) - ready</li>
<li>Solve Schrödinger equation with Helmholtz kernel Greens function - (1 particle) ready</li>
<li>General Hartree-Fock calculation (including electronic structure) - ready</li>
<li>Parallelization on CPUs across different nodes - ready</li>
<li>GPU calculations - Nvidia, AMD, Intel and Apple GPUs work</li>
<li>Solve electronic structure with DFT - (needs KS Hamiltonian implementation and XC functionals that work with GPU, but CPU should work with libxc)</li>
<li>Calculate magnetic field effects on electronic structure - (HF) ready</li>
<li>Full automatic differentiation support - (forward mode working with TensorOperations backend, reverse needs special pullbacks for tensor contractions)</li>
</ul>
<h2 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h2>
<p dir="auto">Not yet ready for general use. There is an issue with
integral accuracy. Meaning that Helmholtz equation
accuracy is about 1E-4, which is not enough for solving
Schrödinger equation. There is a fix on this incoming.</p>
</article></div>