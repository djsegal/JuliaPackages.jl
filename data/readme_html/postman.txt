<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-postmanjl" class="anchor" aria-hidden="true" href="#postmanjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Postman.jl</h1>
<p dir="auto">The primary purpose of this project is to allow the reuse of <a href="https://www.postman.com/" rel="nofollow">Postman's manually created requests</a> for web services in Julia applications and unit tests.</p>
<p dir="auto">The project implements a simple parser/runner of the Postman collections with minimal coverage of the Postman collection format.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Postman
using HTTP

collection = Postman.load(&quot;postman_collection.json&quot;)

for item in collection
    @info &quot;Process item: &quot; * item.name # filter by name if required

    @time response::HTTP.Messages.Response = Postman.run(
        item, variables=Dict(&quot;port&quot; =&gt; PORT)
    )

    dump(response)
end"><pre><span class="pl-k">using</span> Postman
<span class="pl-k">using</span> HTTP

collection <span class="pl-k">=</span> Postman<span class="pl-k">.</span><span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>postman_collection.json<span class="pl-pds">"</span></span>)

<span class="pl-k">for</span> item <span class="pl-k">in</span> collection
    <span class="pl-c1">@info</span> <span class="pl-s"><span class="pl-pds">"</span>Process item: <span class="pl-pds">"</span></span> <span class="pl-k">*</span> item<span class="pl-k">.</span>name <span class="pl-c"><span class="pl-c">#</span> filter by name if required</span>

    <span class="pl-c1">@time</span> response<span class="pl-k">::</span><span class="pl-c1">HTTP.Messages.Response</span> <span class="pl-k">=</span> Postman<span class="pl-k">.</span><span class="pl-c1">run</span>(
        item, variables<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>port<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> PORT)
    )

    <span class="pl-c1">dump</span>(response)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Variables might be used for URLs only. For a string with <code>{{va1}}</code> markup all the occurrences will be removed or replaced by values of the same variables names provided through <code>variables</code> keyword argument.</p>
<h2 dir="auto"><a id="user-content-note" class="anchor" aria-hidden="true" href="#note"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Note</h2>
<p dir="auto">Postman.jl is implemented for Postman collection schema 2.1.0 only. See the <a href="test/data/postman_collection_2_1_0.json">sample collection</a>.</p>
<p dir="auto">If you want to use previous versions, please import and export them with <a href="https://www.postman.com/" rel="nofollow">Postman</a> application.</p>
<p dir="auto">By default, schema 2.1.0 will be applied for all unknown collection formats.</p>
<p dir="auto">If you have a newer version, don't hesitate to add a new converter to the <a href="src/collection_common.jl">internal representation</a>. All the converters should be added into <a href="src/decoders">the directory</a> with appropriate <a href="test/decoders/test_schema_2_1.jl">test of the format</a>.</p>
</article></div>