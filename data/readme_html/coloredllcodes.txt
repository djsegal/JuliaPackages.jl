<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-coloredllcodes" class="anchor" aria-hidden="true" href="#coloredllcodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ColoredLLCodes</h1>
<p><a href="https://github.com/kimikage/ColoredLLCodes.jl/actions"><img src="https://github.com/kimikage/ColoredLLCodes.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/13e5356a645c1bd67a29afb309a271d44001678349751fd65e63ad53f0836ab0/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f432f436f6c6f7265644c4c436f6465732e737667" alt="Build Status" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/C/ColoredLLCodes.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/kimikage/ColoredLLCodes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/04a1fe33949187b8c20c79ada73231cc009ccf6ee16f83b6a29a8f9f93b53a95/68747470733a2f2f636f6465636f762e696f2f67682f6b696d696b6167652f436f6c6f7265644c4c436f6465732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="coverage" data-canonical-src="https://codecov.io/gh/kimikage/ColoredLLCodes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>The feature of this package has been incorporated into <code>InteractiveUtils</code>
of Julia v1.6. You can use this package to enable syntax highlighting of
<code>code_llvm</code> and <code>code_native</code>, even on Julia v1.5 or earlier.</p>
<h2><a id="user-content-screenshots" class="anchor" aria-hidden="true" href="#screenshots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Screenshots</h2>
<p><a target="_blank" rel="noopener noreferrer" href="images/terminal_llvm.png"><img src="images/terminal_llvm.png" alt="code_llvm in Windows Terminal" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="images/jupyter_native.png"><img src="images/jupyter_native.png" alt="code_native in Jupyter" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;ColoredLLCodes&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ColoredLLCodes<span class="pl-pds">"</span></span>)</pre></div>
<p>or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ColoredLLCodes
"><pre>pkg<span class="pl-k">&gt;</span> add ColoredLLCodes</pre></div>
<h2><a id="user-content-customizing-colorscheme" class="anchor" aria-hidden="true" href="#customizing-colorscheme"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Customizing colorscheme</h2>
<p>You can customize the printing styles by overwriting the dictionary
<code>ColoredLLCodes.llstyle</code>. Each style is specified by a tuple of the bold flag
and the color keyword or ANSI color code (0-255).
For example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Monokai256
ColoredLLCodes.llstyle[:default]     = (false, :normal)
ColoredLLCodes.llstyle[:comment]     = (false, 101)
ColoredLLCodes.llstyle[:label]       = (false, :normal)
ColoredLLCodes.llstyle[:instruction] = ( true, 197)
ColoredLLCodes.llstyle[:type]        = (false, 81)
ColoredLLCodes.llstyle[:number]      = (false, 141)
ColoredLLCodes.llstyle[:bracket]     = (false, :normal)
ColoredLLCodes.llstyle[:variable]    = (false, 208)
ColoredLLCodes.llstyle[:keyword]     = (false, 197)
ColoredLLCodes.llstyle[:funcname]    = (false, 208)
"><pre><span class="pl-c"><span class="pl-c">#</span> Monokai256</span>
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:default</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:normal</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:comment</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">101</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:label</span>]       <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:normal</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:instruction</span>] <span class="pl-k">=</span> ( <span class="pl-c1">true</span>, <span class="pl-c1">197</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:type</span>]        <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">81</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:number</span>]      <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">141</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:bracket</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:normal</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:variable</span>]    <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">208</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:keyword</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">197</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:funcname</span>]    <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">208</span>)</pre></div>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Classic (used in the screenshots above)
ColoredLLCodes.llstyle[:default]     = (false, :light_black)
ColoredLLCodes.llstyle[:comment]     = (false, :green)
ColoredLLCodes.llstyle[:label]       = (false, :light_red)
ColoredLLCodes.llstyle[:instruction] = ( true, :light_cyan)
ColoredLLCodes.llstyle[:type]        = (false, :cyan)
ColoredLLCodes.llstyle[:number]      = (false, :yellow)
ColoredLLCodes.llstyle[:bracket]     = (false, :yellow)
ColoredLLCodes.llstyle[:variable]    = (false, :normal)
ColoredLLCodes.llstyle[:keyword]     = (false, :light_magenta)
ColoredLLCodes.llstyle[:funcname]    = (false, :light_yellow)
"><pre><span class="pl-c"><span class="pl-c">#</span> Classic (used in the screenshots above)</span>
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:default</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:light_black</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:comment</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:green</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:label</span>]       <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:light_red</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:instruction</span>] <span class="pl-k">=</span> ( <span class="pl-c1">true</span>, <span class="pl-c1">:light_cyan</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:type</span>]        <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:cyan</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:number</span>]      <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:yellow</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:bracket</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:yellow</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:variable</span>]    <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:normal</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:keyword</span>]     <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:light_magenta</span>)
ColoredLLCodes<span class="pl-k">.</span>llstyle[<span class="pl-c1">:funcname</span>]    <span class="pl-k">=</span> (<span class="pl-c1">false</span>, <span class="pl-c1">:light_yellow</span>)</pre></div>
</article></div>