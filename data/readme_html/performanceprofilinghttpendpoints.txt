<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-profileendpoints" class="anchor" aria-hidden="true" href="#profileendpoints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProfileEndpoints</h1>
<p dir="auto">Provides HTTP endpoints (and an optional HTTP server) that wrap the profiling
functionality exposed from existing Julia packages, to allow introspecting a live-running
Julia process to interrogate its performance characteristics.</p>
<h2 dir="auto"><a id="user-content-endpoints" class="anchor" aria-hidden="true" href="#endpoints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Endpoints</h2>
<p dir="auto"><strong>CPU Profile</strong></p>
<ul dir="auto">
<li><code>/profile</code> endpoint to record a CPU profile for a given duration using <code>Profile.@profile</code>.
<ul dir="auto">
<li>Default query params: <code>/profile?n=1e8&amp;delay=0.01&amp;duration=10&amp;pprof=true</code></li>
</ul>
</li>
<li><code>/profile_start</code> to start the CPU profiler (without specifying a duration to run for).
<ul dir="auto">
<li>Default query params: <code>/profile_start?n=1e8&amp;delay=0.01</code></li>
</ul>
</li>
<li><code>/profile_stop</code> to stop the CPU profiler and return the profile.
<ul dir="auto">
<li>Default query params: <code>/profile_stop?pprof=true</code></li>
</ul>
</li>
</ul>
<p dir="auto"><strong>Allocation Profile</strong></p>
<ul dir="auto">
<li><code>/allocs_profile</code> endpoint to record an allocations profile for a given duration using <code>Profile.Allocs.@profile</code>.
<ul dir="auto">
<li>Default query params: <code>/allocs_profile?sample_rate=0.0001&amp;duration=10</code></li>
</ul>
</li>
<li><code>/allocs_profile_start</code> to start the allocation profiler (without specifying a duration to run for).
<ul dir="auto">
<li>Default query params: <code>/allocs_profile_start?sample_rate=0.0001</code></li>
</ul>
</li>
<li><code>/allocs_profile_stop</code> to stop the allocation profiler and return the profile.
<ul dir="auto">
<li>Takes no query params.</li>
</ul>
</li>
</ul>
<p dir="auto"><strong>Heap Snapshot</strong></p>
<ul dir="auto">
<li><code>/heap_snapshot</code> endpoint to take a heap snapshot with <code>Profile.take_heap_snapshot</code>.
<ul dir="auto">
<li>Default query params: <code>/heap_snapshot?all_one=false</code></li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Start the server on your production process</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Threads.nthreads()
4

julia&gt; t = @async ProfileEndpoints.serve_profiling_server()  # Start the profiling server in the background
[ Info: Starting HTTP profiling server on port 16825
Task (runnable) @0x0000000113c8d660

julia&gt; for _ in 1:100 peakflops() end  # run stuff to profile (locks up the REPL)"><pre>julia<span class="pl-k">&gt;</span> Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>()
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> t <span class="pl-k">=</span> <span class="pl-c1">@async</span> ProfileEndpoints<span class="pl-k">.</span><span class="pl-c1">serve_profiling_server</span>()  <span class="pl-c"><span class="pl-c">#</span> Start the profiling server in the background</span>
[ Info<span class="pl-k">:</span> Starting HTTP profiling server on port <span class="pl-c1">16825</span>
Task (runnable) @<span class="pl-c1">0x0000000113c8d660</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span> <span class="pl-c1">peakflops</span>() <span class="pl-c1">end</span>  <span class="pl-c"><span class="pl-c">#</span> run stuff to profile (locks up the REPL)</span></pre></div>
<h3 dir="auto"><a id="user-content-cpu-profile" class="anchor" aria-hidden="true" href="#cpu-profile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CPU Profile</h3>
<p dir="auto">Collect a CPU profile:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ curl '127.0.0.1:16825/profile?delay=0.01&amp;duration=3' --output prof1.pb.gz"><pre>$ curl <span class="pl-s"><span class="pl-pds">'</span>127.0.0.1:16825/profile?delay=0.01&amp;duration=3<span class="pl-pds">'</span></span> --output prof1.pb.gz</pre></div>
<p dir="auto">And view it in PProf:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PProf

julia&gt; PProf.refresh(file=&quot;./prof1.pb.gz&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PProf

julia<span class="pl-k">&gt;</span> PProf<span class="pl-k">.</span><span class="pl-c1">refresh</span>(file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>./prof1.pb.gz<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-allocation-profile" class="anchor" aria-hidden="true" href="#allocation-profile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Allocation Profile</h3>
<p dir="auto">Collect an allocation profile (requires Julia v1.8+):</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ curl '127.0.0.1:16825/allocs_profile?sample_rate=0.0001&amp;duration=3' --output allocs_prof1.pb.gz"><pre>$ curl <span class="pl-s"><span class="pl-pds">'</span>127.0.0.1:16825/allocs_profile?sample_rate=0.0001&amp;duration=3<span class="pl-pds">'</span></span> --output allocs_prof1.pb.gz</pre></div>
<p dir="auto">And view it in PProf:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using PProf

julia&gt; PProf.refresh(file=&quot;./allocs_prof1.pb.gz&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PProf

julia<span class="pl-k">&gt;</span> PProf<span class="pl-k">.</span><span class="pl-c1">refresh</span>(file<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>./allocs_prof1.pb.gz<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-heap-snapshot" class="anchor" aria-hidden="true" href="#heap-snapshot"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Heap Snapshot</h3>
<p dir="auto">Take a heap snapshot (requires Julia v1.9+):</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="$ curl '127.0.0.1:16825/heap_snapshot?all_one=false' --output prof1.heapsnapshot"><pre>$ curl <span class="pl-s"><span class="pl-pds">'</span>127.0.0.1:16825/heap_snapshot?all_one=false<span class="pl-pds">'</span></span> --output prof1.heapsnapshot</pre></div>
<p dir="auto">And upload it in the <a href="https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots/#view_snapshots" rel="nofollow">Chrome DevTools snapshot viewer</a> to explore the heap.
In Chrome <code>View &gt; Developer &gt; Developer Tools</code>, select the <code>Memory</code> tab, and press the <code>Load</code> button to upload the file.</p>
</article></div>