<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-suffixtreesjl" class="anchor" aria-hidden="true" href="#suffixtreesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SuffixTrees.jl</h1>
<p dir="auto">Julia implementation of the Ukkonen suffix tree algorithm</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/wherrera10/SuffixTrees.jl/blob/master/docs/src/stree.png"><img src="https://github.com/wherrera10/SuffixTrees.jl/raw/master/docs/src/stree.png" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mutable struct Node
    children::Dict{Char,Int}
    start::Int
    ending::Int
    suffixlink::Int
    suffixindex::Int
    Node(strt = 0, endng = oo) = new(Dict{Char,Int}(), strt, endng, 0, -1)
end"><pre class="notranslate"><code>mutable struct Node
    children::Dict{Char,Int}
    start::Int
    ending::Int
    suffixlink::Int
    suffixindex::Int
    Node(strt = 0, endng = oo) = new(Dict{Char,Int}(), strt, endng, 0, -1)
end
</code></pre></div>
<p dir="auto">The suffix-tree's node and default constructor.</p>
<p dir="auto">Note that these are referenced not by pointer but by an index into an array of nodes.
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mutable struct SuffixTree
    nodes::Vector{Node}
    text::Vector{Char}
    root::Int
    position::Int
    currentnode::Int
    needsuffixlink::Int
    remainder::Int
    activenode::Int
    activelength::Int
    activeedge::Int
end"><pre class="notranslate"><code>mutable struct SuffixTree
    nodes::Vector{Node}
    text::Vector{Char}
    root::Int
    position::Int
    currentnode::Int
    needsuffixlink::Int
    remainder::Int
    activenode::Int
    activelength::Int
    activeedge::Int
end
</code></pre></div>
<p dir="auto">The SuffixTree struct.
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function SuffixTree(str::String, addterminator = true, terminatorchar = Char(65129))"><pre class="notranslate"><code>function SuffixTree(str::String, addterminator = true, terminatorchar = Char(65129))
</code></pre></div>
<p dir="auto">SuffixTree constructor from string. Note that the string should have a terminator character at its end, usually '$' or '#'.
If addterminator is true (default) and the last character is not a unique terminator, will add one from a Unicode page (default is '﹩').
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="edgelength(st, n::Node)"><pre class="notranslate"><code>edgelength(st, n::Node)
</code></pre></div>
<p dir="auto">Return length of edge of a node (the portion of the sequence it covers) """
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function newnode(st, start, ending)"><pre class="notranslate"><code>function newnode(st, start, ending)
</code></pre></div>
<p dir="auto">Make a node for the tree
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function addsuffixlink(st, nodenum::Int)"><pre class="notranslate"><code>function addsuffixlink(st, nodenum::Int)
</code></pre></div>
<p dir="auto">Add a link to tree
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="activeedge(st)"><pre class="notranslate"><code>activeedge(st)
</code></pre></div>
<p dir="auto">Return active edge of tree
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function walkdown!(st, currnode::Int)"><pre class="notranslate"><code>function walkdown!(st, currnode::Int)
</code></pre></div>
<p dir="auto">Walk down the tree to its active length
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function extendsuffixtree(st, pos)"><pre class="notranslate"><code>function extendsuffixtree(st, pos)
</code></pre></div>
<p dir="auto">Extend tree at pos
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function setsuffixindexbyDFS(st, node, labelheight, verbose=false)"><pre class="notranslate"><code>function setsuffixindexbyDFS(st, node, labelheight, verbose=false)
</code></pre></div>
<p dir="auto">Set the index of the leaves of the tree within the sequence
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function dotraversal(st)"><pre class="notranslate"><code>function dotraversal(st)
</code></pre></div>
<p dir="auto">Traverse the suffix tree
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="function getlongestrepeatedsubstring(st::SuffixTree, label=&quot;&quot;, printresult=true)"><pre class="notranslate"><code>function getlongestrepeatedsubstring(st::SuffixTree, label="", printresult=true)
</code></pre></div>
<p dir="auto">Find the longest repeated suffix of the tree
<br><br></p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using SuffixTrees

examples = [
    (&quot;CAAAABAAAABD\$&quot;, &quot;AAAAB&quot;),
    (&quot;GEEKSFORGEEKS\$&quot;, &quot;GEEKS&quot;),
    (&quot;AAAAAAAAAA\$&quot;, &quot;AAAAAAAAA&quot;),
    (&quot;ABCDEFG\$&quot;, &quot;&quot;),
    (&quot;ABABABA\$&quot;, &quot;ABABA&quot;),
    (&quot;ATCGATCGA\$&quot;, &quot;ATCGA&quot;),
    (&quot;banana\$&quot;, &quot;ana&quot;),
    (&quot;abcpqrabpqpq\$&quot;, &quot;ab (or) pq&quot;),
    (&quot;pqrpqpqabab\$&quot;, &quot;ab (or) pq&quot;),
    (&quot;CAAAABDAAAABD\$&quot;, &quot;AAAABD&quot;),
        (&quot;CAAAABDAAAABD&quot;, &quot;AAAABD&quot;),  # this one gets an added terminator ﹩ by default
]

println(&quot;Test Longest Repeated Substring in:\n&quot;)
for (ex, ans) in examples
    st = SuffixTree(ex)
    println(&quot;Check: &quot;, getlongestrepeatedsubstring(st), &quot; == $ans&quot;)
end"><pre class="notranslate"><code>using SuffixTrees

examples = [
    ("CAAAABAAAABD\$", "AAAAB"),
    ("GEEKSFORGEEKS\$", "GEEKS"),
    ("AAAAAAAAAA\$", "AAAAAAAAA"),
    ("ABCDEFG\$", ""),
    ("ABABABA\$", "ABABA"),
    ("ATCGATCGA\$", "ATCGA"),
    ("banana\$", "ana"),
    ("abcpqrabpqpq\$", "ab (or) pq"),
    ("pqrpqpqabab\$", "ab (or) pq"),
    ("CAAAABDAAAABD\$", "AAAABD"),
        ("CAAAABDAAAABD", "AAAABD"),  # this one gets an added terminator ﹩ by default
]

println("Test Longest Repeated Substring in:\n")
for (ex, ans) in examples
    st = SuffixTree(ex)
    println("Check: ", getlongestrepeatedsubstring(st), " == $ans")
end
</code></pre></div>
</article></div>