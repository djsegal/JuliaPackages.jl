<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bsdiff" class="anchor" aria-hidden="true" href="#bsdiff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BSDiff</h1>
<p dir="auto"><a href="https://travis-ci.org/JuliaIO/BSDiff.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/02b1a406a19741d932c32ff3d8e229b0e6dbd2f7430796048a7b4d11fe88378e/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f4253446966662e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/BSDiff.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/BSDiff.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ce272deb03e2b078d6d9bf8b42436dbb11513d816c55021677bf7642826caba3/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f4253446966662e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaIO/BSDiff.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The BSDiff package is a pure Julia implementation of the bsdiff tool for
computing and applying binary diffs of files. It supports reading and writing
both Colin Percival's <a href="http://www.daemonology.net/bsdiff/" rel="nofollow">classic bsdiff</a>
format and Matthew Endsley's <a href="https://github.com/mendsley/bsdiff">modified
format</a>. The package offers the same API as
the command-line tools:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bsdiff(old, new, [ patch ])
bspatch(old, [ new, ] patch)"><pre><span class="pl-c1">bsdiff</span>(old, new, [ patch ])
<span class="pl-c1">bspatch</span>(old, [ new, ] patch)</pre></div>
<p dir="auto">The <code>bsdiff</code> command computes a patch file given <code>old</code> and <code>new</code> files. By
default it generates patch files in the classic <code>bsdiff</code> format. This format
emits control data, diff data and new data in three separately compressed
sections and is typically more compact than the Endsley format. The Endsley
format interleaves control, diff and new data in a single compressed section,
which means that it can be can be written and applied in a fully streamed
fashion, but the patch files tend to be slightly larger. The format can be
selected by passing the <code>format = :classic</code> or <code>format = :endsley</code> option.</p>
<p dir="auto">The <code>bspatch</code> command applies a patch file to an <code>old</code> file to produce a <code>new</code>
file. It can auto-detect the patch file format from the magic string in the
patch header, so it is generally not necessary to specifiy the format. If you
only want to apply a specific format of patch, you can pass the same <code>format</code>
option and <code>bspatch</code> will error unless the patch has the expected format.</p>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto">The public API for the <code>BSDiff</code> package consists of the following functions:</p>

<h3 dir="auto"><a id="user-content-bsdiff-1" class="anchor" aria-hidden="true" href="#bsdiff-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>bsdiff</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bsdiff(old, new, [ patch ]; format = [ :classic | :endsley ]) -&gt; patch"><pre><span class="pl-c1">bsdiff</span>(old, new, [ patch ]; format <span class="pl-k">=</span> [ <span class="pl-c1">:classic</span> <span class="pl-k">|</span> <span class="pl-c1">:endsley</span> ]) <span class="pl-k">-&gt;</span> patch</pre></div>
<p dir="auto">Compute a binary patch that will transform the content of <code>old</code> into the content
of <code>new</code>. All arguments can be strings or IO handles. If no <code>patch</code> argument is
provided, the patch data is written to a temporary file whose path is returned.</p>
<p dir="auto">The <code>old</code> argument can also be a 2-tuple of strings and/or IO handles, in which
case the first is used as the old data and the second is used as a precomputed
index of the old data, as computed by <a href="@ref"><code>bsindex</code></a>. Since indexing the old
data is the slowest part of generating a diff, precomputing this and reusing it
can significantly speed up generting diffs from the same old file to multiple
different new files.</p>
<p dir="auto">The <code>format</code> keyword argument allows selecting a patch format to generate. The
value must be one of the symbols <code>:classic</code> or <code>:endsley</code> indicating a bsdiff
patch format. The classic patch format is generated by default, but the Endsley
format can be selected with <code>bsdiff(old, new, patch, format = :endsley)</code>.</p>
<h3 dir="auto"><a id="user-content-bspatch" class="anchor" aria-hidden="true" href="#bspatch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>bspatch</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bspatch(old, [ new, ] patch; format = [ :classic | :endsley ]) -&gt; new"><pre><span class="pl-c1">bspatch</span>(old, [ new, ] patch; format <span class="pl-k">=</span> [ <span class="pl-c1">:classic</span> <span class="pl-k">|</span> <span class="pl-c1">:endsley</span> ]) <span class="pl-k">-&gt;</span> new</pre></div>
<p dir="auto">Apply a binary patch given by the <code>patch</code> argument to the content of <code>old</code> to
produce the content of <code>new</code>. All arguments can be strings or IO handles. If no
<code>new</code> argument is provided, the new data is written to a temporary file whose
path is returned.</p>
<p dir="auto">Note that the optional argument is the middle argument, which is a bit unusual
but makes the argument order when passing all three paths consistent with the
<code>bspatch</code> command and with the <code>bsdiff</code> function.</p>
<p dir="auto">By default <code>bspatch</code> auto-detects the patch format, so the <code>format</code> keyword
argument is usually unnecessary. If you wish to restrict the format of patch
that will be accepted, however, you can use this keyword argument: <code>bspatch</code>
will raise an error unless the patch file has indicated format.</p>
<h3 dir="auto"><a id="user-content-bsindex" class="anchor" aria-hidden="true" href="#bsindex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>bsindex</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bsindex(old, [ index ]) -&gt; index"><pre><span class="pl-c1">bsindex</span>(old, [ index ]) <span class="pl-k">-&gt;</span> index</pre></div>
<p dir="auto">Save index data (a sorted suffix array) for the content of <code>old</code> into <code>index</code>.
All arguments can be strings or IO handles. If no <code>index</code> argument is provided,
the index data is saved to a temporary file whose path is returned.</p>
<p dir="auto">The index can be passed to <code>bsdiff</code> to speed up the diff computation by passing
<code>(old, index)</code> as the first argument instead of just <code>old</code>. Since indexing the
old data is the slowest part of generating a diff, precomputing this and reusing
it can significantly speed up generting diffs from the same old file to multiple
different new files.</p>

<h2 dir="auto"><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; cd(mktempdir())

julia&gt; open(&quot;goodbye.txt&quot;, write=true) do io
           println(io, &quot;Goodbye, world.&quot;)
       end

julia&gt; open(&quot;hello.txt&quot;, write=true) do io
           println(io, &quot;Hello, world!&quot;)
       end

julia&gt; using BSDiff

julia&gt; patch = bsdiff(&quot;goodbye.txt&quot;, &quot;hello.txt&quot;);

julia&gt; bspatch(&quot;goodbye.txt&quot;, &quot;hello_copy.txt&quot;, patch)
&quot;hello_copy.txt&quot;

julia&gt; read(ans, String)
&quot;Hello, world!\n&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cd</span>(<span class="pl-c1">mktempdir</span>())

julia<span class="pl-k">&gt;</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>goodbye.txt<span class="pl-pds">"</span></span>, write<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">do</span> io
           <span class="pl-c1">println</span>(io, <span class="pl-s"><span class="pl-pds">"</span>Goodbye, world.<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>hello.txt<span class="pl-pds">"</span></span>, write<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-k">do</span> io
           <span class="pl-c1">println</span>(io, <span class="pl-s"><span class="pl-pds">"</span>Hello, world!<span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BSDiff

julia<span class="pl-k">&gt;</span> patch <span class="pl-k">=</span> <span class="pl-c1">bsdiff</span>(<span class="pl-s"><span class="pl-pds">"</span>goodbye.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello.txt<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">bspatch</span>(<span class="pl-s"><span class="pl-pds">"</span>goodbye.txt<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>hello_copy.txt<span class="pl-pds">"</span></span>, patch)
<span class="pl-s"><span class="pl-pds">"</span>hello_copy.txt<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">read</span>(ans, String)
<span class="pl-s"><span class="pl-pds">"</span>Hello, world!<span class="pl-cce">\n</span><span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-reproducibility" class="anchor" aria-hidden="true" href="#reproducibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reproducibility</h2>
<p dir="auto">Even though this package produces patch files that are compatible with the
classic and Endsley <code>bsdiff</code> tools, the patch files it generates may not be
identical for a few reasons:</p>
<ol dir="auto">
<li>
<p dir="auto">The bzip2 compression used by the package and by the commands may have
different settings and produce different results—in general compression
libraries like bzip2 don't guarantee perfect reproducibility.</p>
</li>
<li>
<p dir="auto">The uncompressed patch produced by this package is sometimes better than
the one produced by the command line tool due to a bug in the way the
command uses <code>memcmp</code> to do string comparison. See
<a href="https://github.com/JuliaIO/BSDiff.jl/pull/8" data-hovercard-type="pull_request" data-hovercard-url="/JuliaIO/BSDiff.jl/pull/8/hovercard">this pull request</a> for details.</p>
</li>
</ol>
<p dir="auto">The exact output produced by this library will also not necessarily remain
identical in the future—there are many valid patches for the same <code>old</code> and
<code>new</code> data. Improvements to the speed and quality of the patch generation
algorithm may lead to different outputs in the future. However, the patch format
is simple and stable: it is guaranteed that newer versions of the package will
be able to apply patches produced by older versions and vice versa.</p>
</article></div>