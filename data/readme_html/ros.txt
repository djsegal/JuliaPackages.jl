<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/logo.png"><img src="docs/src/assets/logo.png" alt="ROS.jl" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://travis-ci.com/gstavrinos/ROS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0c726a22454a628762f93957f1f2a6e126da7fe46017ecd886832518b4173f5d/68747470733a2f2f7472617669732d63692e636f6d2f677374617672696e6f732f524f532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/gstavrinos/ROS.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/gstavrinos/ROS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bf40d42017d27e53d6c423c2337fc5451b05a1609c252422e561302f5f4c1c44/68747470733a2f2f636f6465636f762e696f2f67682f677374617672696e6f732f524f532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4469626e496542687161" alt="Code Coverage" data-canonical-src="https://codecov.io/gh/gstavrinos/ROS.jl/branch/master/graph/badge.svg?token=DibnIeBhqa" style="max-width: 100%;"></a>
<a href="https://gstavrinos.github.io/ROS.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">ROS.jl is a Julia wrapper of the ROS C++ client.</p>
<h3 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h3>
<ul dir="auto">
<li>Julia 1.3 (due to current Cxx limitations)</li>
</ul>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add ROS"><pre>pkg<span class="pl-k">&gt;</span> add ROS</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;ROS&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ROS<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-importing-the-ros-client-wrapper" class="anchor" aria-hidden="true" href="#importing-the-ros-client-wrapper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Importing the ROS client wrapper</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROS"><pre><span class="pl-k">using</span> ROS</pre></div>
<h3 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h3>
<ul dir="auto">
<li>Automatic/Dynamic Julia msg and srv type generation</li>
<li>NodeHandles</li>
<li>Publishers and Subscribers</li>
<li>Service Servers and Clients</li>
<li>Action Servers and Clients</li>
<li>ROS Package</li>
<li>ROS Time</li>
<li>TF2</li>
</ul>
<h3 dir="auto"><a id="user-content-naming-conventions" class="anchor" aria-hidden="true" href="#naming-conventions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Naming conventions</h3>
<ul dir="auto">
<li>All message and service names replace the C++ namespace symbol <code>::</code> with an underscore <code>_</code>. Thus for example, <code>geometry_msgs::PoseStamped</code> would be translated in Julia to <code>geometry_msgs_PoseStamped</code>.</li>
<li>All generated ROS types have the same name as their contructor without the parentheses <code>()</code>. Thus for example, in Julia <code>geometry_msgs_PoseStamped()</code> will create a <code>PoseStamped</code> object but <code>geometry_msgs_PoseStamped</code> holds the C++ type of the <code>PoseStamped</code> object. This is useful for templated C++ ROS functions (callbacks etc).</li>
</ul>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<p dir="auto">All the following examples assume that the <code>@genNew</code> or the <code>@updateAll</code> macro was called.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROS
ROS.@genNew"><pre><span class="pl-k">using</span> ROS
ROS<span class="pl-k">.</span><span class="pl-c1">@genNew</span></pre></div>
<h2 dir="auto"><a id="user-content-minimum-publisher--subscriber-combination-example" class="anchor" aria-hidden="true" href="#minimum-publisher--subscriber-combination-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimum Publisher &amp; Subscriber combination example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROS
ROS.@include std_msgs: Float64MultiArray

pub = nothing

function init()
    ROS.init(&quot;julia_pub_sub&quot;)
    nh = ROS.NodeHandle()

    global pub = ROS.advertise(nh, &quot;test_pub&quot;, ROS.std_msgs_Float64MultiArray, 1)
    sub = ROS.subscribe(nh, &quot;test_sub&quot;, 1, ROS.std_msgs_Float64MultiArray, callback)

    while ROS.ok()
        ROS.spinOnce()
    end
end

function callback(t)
    t.data = [1,2,3,4]
    ROS.publish(pub,t)
end

init()"><pre><span class="pl-k">using</span> ROS
ROS<span class="pl-k">.</span><span class="pl-c1">@include</span> std_msgs<span class="pl-k">:</span> Float64MultiArray

pub <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

<span class="pl-k">function</span> <span class="pl-en">init</span>()
    ROS<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>julia_pub_sub<span class="pl-pds">"</span></span>)
    nh <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">NodeHandle</span>()

    <span class="pl-k">global</span> pub <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">advertise</span>(nh, <span class="pl-s"><span class="pl-pds">"</span>test_pub<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span>std_msgs_Float64MultiArray, <span class="pl-c1">1</span>)
    sub <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">subscribe</span>(nh, <span class="pl-s"><span class="pl-pds">"</span>test_sub<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>, ROS<span class="pl-k">.</span>std_msgs_Float64MultiArray, callback)

    <span class="pl-k">while</span> ROS<span class="pl-k">.</span><span class="pl-c1">ok</span>()
        ROS<span class="pl-k">.</span><span class="pl-c1">spinOnce</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">callback</span>(t)
    t<span class="pl-k">.</span>data <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]
    ROS<span class="pl-k">.</span><span class="pl-c1">publish</span>(pub,t)
<span class="pl-k">end</span>

<span class="pl-c1">init</span>()</pre></div>
<p dir="auto">Note how both the <code>advertise</code> and <code>subscribe</code> functions include the type of the message as the third parameter.</p>
<h2 dir="auto"><a id="user-content-minimum-service-client--server-combination-example" class="anchor" aria-hidden="true" href="#minimum-service-client--server-combination-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimum Service Client &amp; Server combination example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROS
ROS.@include std_srvs: SetBool
ROS.@include roscpp_tutorials: TwoInts 

srvc = nothing

function init()
    ROS.init(&quot;test_services&quot;)
    nh = ROS.NodeHandle()

    global srvc = ROS.serviceClient(nh, &quot;add_two_ints&quot;, ROS.roscpp_tutorials_TwoInts);
    srv = ROS.advertiseService(nh, &quot;test_srv&quot;, ROS.std_srvs_SetBool_Request, ROS.std_srvs_SetBool_Response, srv_callback)
    while ROS.ok()
        ROS.spinOnce()
    end
end

function srv_callback(req,res)
    res.success = true
    res.message = &quot;:D&quot;
    st = ROS.roscpp_tutorials_TwoInts()
    st.request.a = 1
    st.request.b = 3
    ROS.call(srvc, st)
    return true
end

init()"><pre><span class="pl-k">using</span> ROS
ROS<span class="pl-k">.</span><span class="pl-c1">@include</span> std_srvs<span class="pl-k">:</span> SetBool
ROS<span class="pl-k">.</span><span class="pl-c1">@include</span> roscpp_tutorials<span class="pl-k">:</span> TwoInts 

srvc <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

<span class="pl-k">function</span> <span class="pl-en">init</span>()
    ROS<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>test_services<span class="pl-pds">"</span></span>)
    nh <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">NodeHandle</span>()

    <span class="pl-k">global</span> srvc <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">serviceClient</span>(nh, <span class="pl-s"><span class="pl-pds">"</span>add_two_ints<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span>roscpp_tutorials_TwoInts);
    srv <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">advertiseService</span>(nh, <span class="pl-s"><span class="pl-pds">"</span>test_srv<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span>std_srvs_SetBool_Request, ROS<span class="pl-k">.</span>std_srvs_SetBool_Response, srv_callback)
    <span class="pl-k">while</span> ROS<span class="pl-k">.</span><span class="pl-c1">ok</span>()
        ROS<span class="pl-k">.</span><span class="pl-c1">spinOnce</span>()
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">srv_callback</span>(req,res)
    res<span class="pl-k">.</span>success <span class="pl-k">=</span> <span class="pl-c1">true</span>
    res<span class="pl-k">.</span>message <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>:D<span class="pl-pds">"</span></span>
    st <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">roscpp_tutorials_TwoInts</span>()
    st<span class="pl-k">.</span>request<span class="pl-k">.</span>a <span class="pl-k">=</span> <span class="pl-c1">1</span>
    st<span class="pl-k">.</span>request<span class="pl-k">.</span>b <span class="pl-k">=</span> <span class="pl-c1">3</span>
    ROS<span class="pl-k">.</span><span class="pl-c1">call</span>(srvc, st)
    <span class="pl-k">return</span> <span class="pl-c1">true</span>
<span class="pl-k">end</span>

<span class="pl-c1">init</span>()</pre></div>
<p dir="auto">Note how both the <code>serviceClient</code> and <code>advertiseService</code> functions include the type of the service as the third parameter (and the fourth parameter in the case of <code>advertiseService</code>.</p>
<h2 dir="auto"><a id="user-content-minimum-action-client--server-combination-example" class="anchor" aria-hidden="true" href="#minimum-action-client--server-combination-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Minimum Action Client &amp; Server combination example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROS
ROS.@include actionlib_tutorials: FibonacciAction, FibonacciFeedback, FibonacciResult, FibonacciGoal

action_server = nothing

function init()
    ROS.init(&quot;test_actions&quot;)
    nh = ROS.NodeHandle()

    global action_server = ROS.actionlib.SimpleActionServer(&quot;test_action_server&quot;, ROS.actionlib_tutorials_FibonacciAction)
    ROS.actionlib.start(action_server)
    ROS.actionlib.registerGoalCallback(action_server, execute_cb)

    action_client = ROS.actionlib.SimpleActionClient(&quot;test_action_server&quot;, ROS.actionlib_tutorials_FibonacciAction)
    ROS.actionlib.sendGoal(action_client, ROS.actionlib_tutorials_FibonacciGoal())
    ROS.actionlib.waitForResult(action_client, ROS.Duration(3))

    action_result_called = ROS.actionlib.getResult(action_client)

    while ROS.ok()
        state = ROS.actionlib.getState(action_client)
        println(state)
        ROS.spinOnce()
    end

function execute_cb()
    goal = ROS.actionlib.acceptNewGoal(action_server)
    action_feedback = ROS.actionlib_tutorials_FibonacciFeedback()
    f::Vector{Number} = []
    for i in 1:100
        push!(f,i)
        action_feedback.sequence = f
        ROS.actionlib.publishFeedback(action_server, action_feedback)
    end
    action_result = ROS.actionlib_tutorials_FibonacciResult()
    action_result.sequence = f
    ROS.actionlib.setSucceeded(action_server, action_result, &quot;:)&quot;)
end

init()"><pre><span class="pl-k">using</span> ROS
ROS<span class="pl-k">.</span><span class="pl-c1">@include</span> actionlib_tutorials<span class="pl-k">:</span> FibonacciAction, FibonacciFeedback, FibonacciResult, FibonacciGoal

action_server <span class="pl-k">=</span> <span class="pl-c1">nothing</span>

<span class="pl-k">function</span> <span class="pl-en">init</span>()
    ROS<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>test_actions<span class="pl-pds">"</span></span>)
    nh <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">NodeHandle</span>()

    <span class="pl-k">global</span> action_server <span class="pl-k">=</span> ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">SimpleActionServer</span>(<span class="pl-s"><span class="pl-pds">"</span>test_action_server<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span>actionlib_tutorials_FibonacciAction)
    ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">start</span>(action_server)
    ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">registerGoalCallback</span>(action_server, execute_cb)

    action_client <span class="pl-k">=</span> ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">SimpleActionClient</span>(<span class="pl-s"><span class="pl-pds">"</span>test_action_server<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span>actionlib_tutorials_FibonacciAction)
    ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">sendGoal</span>(action_client, ROS<span class="pl-k">.</span><span class="pl-c1">actionlib_tutorials_FibonacciGoal</span>())
    ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">waitForResult</span>(action_client, ROS<span class="pl-k">.</span><span class="pl-c1">Duration</span>(<span class="pl-c1">3</span>))

    action_result_called <span class="pl-k">=</span> ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">getResult</span>(action_client)

    <span class="pl-k">while</span> ROS<span class="pl-k">.</span><span class="pl-c1">ok</span>()
        state <span class="pl-k">=</span> ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">getState</span>(action_client)
        <span class="pl-c1">println</span>(state)
        ROS<span class="pl-k">.</span><span class="pl-c1">spinOnce</span>()
    <span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">execute_cb</span>()
    goal <span class="pl-k">=</span> ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">acceptNewGoal</span>(action_server)
    action_feedback <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">actionlib_tutorials_FibonacciFeedback</span>()
    f<span class="pl-k">::</span><span class="pl-c1">Vector{Number}</span> <span class="pl-k">=</span> []
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
        <span class="pl-c1">push!</span>(f,i)
        action_feedback<span class="pl-k">.</span>sequence <span class="pl-k">=</span> f
        ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">publishFeedback</span>(action_server, action_feedback)
    <span class="pl-k">end</span>
    action_result <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">actionlib_tutorials_FibonacciResult</span>()
    action_result<span class="pl-k">.</span>sequence <span class="pl-k">=</span> f
    ROS<span class="pl-k">.</span>actionlib<span class="pl-k">.</span><span class="pl-c1">setSucceeded</span>(action_server, action_result, <span class="pl-s"><span class="pl-pds">"</span>:)<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">init</span>()</pre></div>
<h2 dir="auto"><a id="user-content-tf-example" class="anchor" aria-hidden="true" href="#tf-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TF example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ROS
ROS.@include geometry_msgs: TransformStamped, PoseStamped

function init()
    ROS.init(&quot;testTF&quot;)
    nh = ROS.NodeHandle()

    b = ROS.tf.TransformBroadcaster()
    sb = ROS.tf.StaticTransformBroadcaster()
    bf = ROS.tf.Buffer()
    tl = ROS.tf.TransformListener(bf)
    ts = ROS.geometry_msgs_TransformStamped()
    ts.header.stamp = ROS.now()
    ts.header.frame_id = &quot;base_link&quot;
    ts.child_frame_id = &quot;gps_link&quot;
    ts.transform.translation.x = 2.3
    ts.transform.translation.y = 1.6
    ts.transform.rotation.w = 1
    ts2 = ROS.geometry_msgs_TransformStamped()
    ts2.header.stamp = ROS.now()
    ts2.header.frame_id = &quot;base_link&quot;
    ts2.child_frame_id = &quot;camera_link&quot;
    ts2.transform.translation.x = 0.3
    ts2.transform.translation.y = 1
    ts2.transform.rotation.w = 1

    ROS.tf.sendTransform(b, ts)

    # Send multiple TFs at once
    tss = [ts,ts2]
    ROS.tf.sendTransform(sb, tss)

    if ROS.tf.canTransform(bf, &quot;base_link&quot;, &quot;camera_link&quot;, ROS.Time(0), ROS.Duration(1))
        stamped = ROS.tf.lookupTransform(bf, &quot;base_link&quot;, &quot;camera_link&quot;, ROS.Time(0), ROS.Duration(1))
        println(stamped.transform.translation.x)
        println(stamped.header.frame_id)

        p = ROS.geometry_msgs_PoseStamped()
        p.header.frame_id = &quot;camera_link&quot;
        p.pose.position.x = 1
        p.pose.position.y = 0.6
        p.pose.orientation.w = 1
        try
            transformed = ROS.tf.transform(bf, p, &quot;base_link&quot;, ROS.Time(0), &quot;gps_link&quot;, ROS.Duration(1))
            println(transformed.pose.position.x)
        catch
            println(&quot;TF Exception :(&quot;)
        end
    end
end

init()"><pre><span class="pl-k">using</span> ROS
ROS<span class="pl-k">.</span><span class="pl-c1">@include</span> geometry_msgs<span class="pl-k">:</span> TransformStamped, PoseStamped

<span class="pl-k">function</span> <span class="pl-en">init</span>()
    ROS<span class="pl-k">.</span><span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>testTF<span class="pl-pds">"</span></span>)
    nh <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">NodeHandle</span>()

    b <span class="pl-k">=</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">TransformBroadcaster</span>()
    sb <span class="pl-k">=</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">StaticTransformBroadcaster</span>()
    bf <span class="pl-k">=</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">Buffer</span>()
    tl <span class="pl-k">=</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">TransformListener</span>(bf)
    ts <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">geometry_msgs_TransformStamped</span>()
    ts<span class="pl-k">.</span>header<span class="pl-k">.</span>stamp <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">now</span>()
    ts<span class="pl-k">.</span>header<span class="pl-k">.</span>frame_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>base_link<span class="pl-pds">"</span></span>
    ts<span class="pl-k">.</span>child_frame_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>gps_link<span class="pl-pds">"</span></span>
    ts<span class="pl-k">.</span>transform<span class="pl-k">.</span>translation<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">2.3</span>
    ts<span class="pl-k">.</span>transform<span class="pl-k">.</span>translation<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">1.6</span>
    ts<span class="pl-k">.</span>transform<span class="pl-k">.</span>rotation<span class="pl-k">.</span>w <span class="pl-k">=</span> <span class="pl-c1">1</span>
    ts2 <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">geometry_msgs_TransformStamped</span>()
    ts2<span class="pl-k">.</span>header<span class="pl-k">.</span>stamp <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">now</span>()
    ts2<span class="pl-k">.</span>header<span class="pl-k">.</span>frame_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>base_link<span class="pl-pds">"</span></span>
    ts2<span class="pl-k">.</span>child_frame_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>camera_link<span class="pl-pds">"</span></span>
    ts2<span class="pl-k">.</span>transform<span class="pl-k">.</span>translation<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">0.3</span>
    ts2<span class="pl-k">.</span>transform<span class="pl-k">.</span>translation<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">1</span>
    ts2<span class="pl-k">.</span>transform<span class="pl-k">.</span>rotation<span class="pl-k">.</span>w <span class="pl-k">=</span> <span class="pl-c1">1</span>

    ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">sendTransform</span>(b, ts)

    <span class="pl-c"><span class="pl-c">#</span> Send multiple TFs at once</span>
    tss <span class="pl-k">=</span> [ts,ts2]
    ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">sendTransform</span>(sb, tss)

    <span class="pl-k">if</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">canTransform</span>(bf, <span class="pl-s"><span class="pl-pds">"</span>base_link<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>camera_link<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span><span class="pl-c1">Time</span>(<span class="pl-c1">0</span>), ROS<span class="pl-k">.</span><span class="pl-c1">Duration</span>(<span class="pl-c1">1</span>))
        stamped <span class="pl-k">=</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">lookupTransform</span>(bf, <span class="pl-s"><span class="pl-pds">"</span>base_link<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>camera_link<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span><span class="pl-c1">Time</span>(<span class="pl-c1">0</span>), ROS<span class="pl-k">.</span><span class="pl-c1">Duration</span>(<span class="pl-c1">1</span>))
        <span class="pl-c1">println</span>(stamped<span class="pl-k">.</span>transform<span class="pl-k">.</span>translation<span class="pl-k">.</span>x)
        <span class="pl-c1">println</span>(stamped<span class="pl-k">.</span>header<span class="pl-k">.</span>frame_id)

        p <span class="pl-k">=</span> ROS<span class="pl-k">.</span><span class="pl-c1">geometry_msgs_PoseStamped</span>()
        p<span class="pl-k">.</span>header<span class="pl-k">.</span>frame_id <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>camera_link<span class="pl-pds">"</span></span>
        p<span class="pl-k">.</span>pose<span class="pl-k">.</span>position<span class="pl-k">.</span>x <span class="pl-k">=</span> <span class="pl-c1">1</span>
        p<span class="pl-k">.</span>pose<span class="pl-k">.</span>position<span class="pl-k">.</span>y <span class="pl-k">=</span> <span class="pl-c1">0.6</span>
        p<span class="pl-k">.</span>pose<span class="pl-k">.</span>orientation<span class="pl-k">.</span>w <span class="pl-k">=</span> <span class="pl-c1">1</span>
        <span class="pl-k">try</span>
            transformed <span class="pl-k">=</span> ROS<span class="pl-k">.</span>tf<span class="pl-k">.</span><span class="pl-c1">transform</span>(bf, p, <span class="pl-s"><span class="pl-pds">"</span>base_link<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span><span class="pl-c1">Time</span>(<span class="pl-c1">0</span>), <span class="pl-s"><span class="pl-pds">"</span>gps_link<span class="pl-pds">"</span></span>, ROS<span class="pl-k">.</span><span class="pl-c1">Duration</span>(<span class="pl-c1">1</span>))
            <span class="pl-c1">println</span>(transformed<span class="pl-k">.</span>pose<span class="pl-k">.</span>position<span class="pl-k">.</span>x)
        <span class="pl-k">catch</span>
            <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>TF Exception :(<span class="pl-pds">"</span></span>)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">init</span>()</pre></div>
<p dir="auto">Note the multiple included types using the <code>@include</code> macro.</p>
</article></div>