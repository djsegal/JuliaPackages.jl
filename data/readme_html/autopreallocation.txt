<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-autopreallocation" class="anchor" aria-hidden="true" href="#autopreallocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AutoPreallocation</h1>
<p><a href="https://travis-ci.com/oxinabox/AutoPreallocation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7dfb607b36d57251ee952dd348f3f676b81f9d52/68747470733a2f2f7472617669732d63692e636f6d2f6f78696e61626f782f4175746f507265616c6c6f636174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxinabox/AutoPreallocation.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/7c36c1138b8ef31248513294318b739ddad4edbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p><strong>Have you ever wanted your code to allocate less?</strong>
<strong>Have you ever felt explictly preallocating everything was just too hard?</strong>
<strong>Have you ever thought: <em>"why not just reuse the allocated memory from last time"</em>?</strong>
<strong>Well look no further, friend.</strong></p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to use:</h2>
<p>The simplest way of using this package is via only one function <a href="@ref"><code>preallocate</code></a>, e.g</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoPreallocation, BenchmarkTools

julia<span class="pl-k">&gt;</span> A, B, C <span class="pl-k">=</span> (<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
Base<span class="pl-k">.</span><span class="pl-c1">Generator</span><span class="pl-c1">{UnitRange{Int64},var"#9#10"}</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">var</span>"</span>#9#10<span class="pl-pds">"</span></span>(), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x, y, z) <span class="pl-k">=</span> x <span class="pl-k">*</span> y <span class="pl-k">*</span> z
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x, preallocated_f <span class="pl-k">=</span> <span class="pl-c1">preallocate</span>(f, A, B, C);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">f</span>(A, B, C);
  <span class="pl-c1">25.684</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">15.26</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">preallocated_f</span>(A, B, C);
  <span class="pl-c1">26.077</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)</pre></div>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h1>
<p>MIT License</p>
</article></div>