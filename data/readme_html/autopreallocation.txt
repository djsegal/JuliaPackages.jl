<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-autopreallocation" class="anchor" aria-hidden="true" href="#autopreallocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AutoPreallocation</h1>
<p><a href="https://travis-ci.com/oxinabox/AutoPreallocation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7dfb607b36d57251ee952dd348f3f676b81f9d52/68747470733a2f2f7472617669732d63692e636f6d2f6f78696e61626f782f4175746f507265616c6c6f636174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxinabox/AutoPreallocation.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/7c36c1138b8ef31248513294318b739ddad4edbb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width:100%;"></a></p>
<p><strong>Have you ever wanted your code to allocate less?</strong>
<strong>Have you ever felt explictly preallocating everything was just too hard?</strong>
<strong>Have you ever thought: <em>"why not just reuse the allocated memory from last time"</em>?</strong>
<strong>Well look no further, friend.</strong></p>
<h2><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to use:</h2>
<p>The process to use AutoPreallocation.jl is two step:</p>
<ol>
<li>Generate a <em>record</em> of all allocations</li>
<li>Use that <em>record</em> to avoid allocations when the function is called</li>
</ol>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Functions;</h2>
<h3><a id="user-content-value-record--record_allocationsf-args-kwargs" class="anchor" aria-hidden="true" href="#value-record--record_allocationsf-args-kwargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>value, record = record_allocations(f, args...; kwargs...)</code></h3>
<p>Record the allocations from computing <code>f(args...; kwargs...)</code>.
The returned <code>record</code> object is what holds these allocations, to be reused.</p>
<h3><a id="user-content-value--avoid_allocationsrecord-f-args-kwargs" class="anchor" aria-hidden="true" href="#value--avoid_allocationsrecord-f-args-kwargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>value = avoid_allocations(record, f, args...; kwargs...)</code></h3>
<p>Compute <code>f(args...; kwargs...)</code>, while making use of the preallocations stored in the <code>record</code>.</p>
<h3><a id="user-content-no_preallocexpr" class="anchor" aria-hidden="true" href="#no_preallocexpr"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>@no_prealloc(expr)</code></h3>
<p>This macro is used within code that one might use AutoPreallocation on.
It is used to mark a section to have all its allocations ignored.
They will neither be recorded, nor avoided.
This is useful if internally to the function its allocations are e.g. not nondetermanistic.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example:</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoPreallocation, BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-en">foo</span>() <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2096</span>) <span class="pl-k">*</span> <span class="pl-c1">ones</span>(<span class="pl-c1">2096</span>, <span class="pl-c1">1024</span>) <span class="pl-k">*</span> <span class="pl-c1">ones</span>(<span class="pl-c1">1024</span>,<span class="pl-c1">1</span>)
foo (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">foo</span>()
  <span class="pl-c1">2.174</span> ms (<span class="pl-c1">7</span> allocations<span class="pl-k">:</span> <span class="pl-c1">16.41</span> MiB)
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2.146304e6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> foo_res, foo_record <span class="pl-k">=</span> <span class="pl-c1">record_allocations</span>(foo)
(value <span class="pl-k">=</span> [<span class="pl-c1">2.146304e6</span>], allocation_record <span class="pl-k">=</span> AutoPreallocation<span class="pl-k">.</span><span class="pl-c1">AllocationRecord</span>(
    [<span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">1</span>, <span class="pl-c1">2096</span>)), <span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">2096</span>, <span class="pl-c1">1024</span>)), <span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">1024</span>, <span class="pl-c1">1</span>)), <span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">1</span>, <span class="pl-c1">1024</span>)), <span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>))],
    [(<span class="pl-c1">1</span>, <span class="pl-c1">2096</span>), (<span class="pl-c1">2096</span>, <span class="pl-c1">1024</span>), (<span class="pl-c1">1024</span>, <span class="pl-c1">1</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">1024</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>)]
))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">avoid_allocations</span>(<span class="pl-k">$</span>foo_record, foo)
  <span class="pl-c1">1.376</span> ms (<span class="pl-c1">29</span> allocations<span class="pl-k">:</span> <span class="pl-c1">672</span> bytes)
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">1</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2.146304e6</span></pre></div>
<h4><a id="user-content-tip" class="anchor" aria-hidden="true" href="#tip"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tip:</h4>
<p>To avoid having to rerun <code>record_allocations</code> every time the program is used, you can use <code>repr</code> on the record object, and then put it in a <code>const</code> in your program.</p>
<h2><a id="user-content-limitations-important" class="anchor" aria-hidden="true" href="#limitations-important"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Limitations (Important)</h2>
<p>Despite the hip introduction, AutoPreallocation is not a tool to use lightly.
It requires you understand the following limitations, which while relatively rare in practice certainly do occur.</p>
<p>AutoPreallocation is also not hugely mature (yet), and if you violate these limitations, it may silently give you the wrong answer.</p>
<h3><a id="user-content-function-must-always-allocate-the-same-way-per-record-object" class="anchor" aria-hidden="true" href="#function-must-always-allocate-the-same-way-per-record-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function must always allocate the same way. (per <em>record</em> object)</h3>
<p>You cannot reuse the same <em>record</em> of allocations across calls to the function with different allocation patterns.
Every call that uses a given <em>record</em>, must allocate <code>Array</code>s of the same type and size, in the same order.</p>
<p>Failure to do so may give errors, or silently incorrect results (<a href="https://github.com/oxinabox/AutoPreallocation.jl/issues/1">#1</a>)</p>
<p>For example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Test

julia<span class="pl-k">&gt;</span> <span class="pl-en">twos</span>(dims) <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(dims)
twos (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> twos_res, twos_record <span class="pl-k">=</span> <span class="pl-c1">record_allocations</span>(twos, (<span class="pl-c1">3</span>,<span class="pl-c1">6</span>))
(value <span class="pl-k">=</span> [<span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span> … <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span> … <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>; <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span> … <span class="pl-c1">2.0</span> <span class="pl-c1">2.0</span>], allocation_record <span class="pl-k">=</span> AutoPreallocation<span class="pl-k">.</span><span class="pl-c1">AllocationRecord</span>(
    [<span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">3</span>, <span class="pl-c1">6</span>)), <span class="pl-c1">Array</span><span class="pl-c1">{Float64,2}</span>(undef, (<span class="pl-c1">3</span>, <span class="pl-c1">6</span>))],
    [(<span class="pl-c1">3</span>, <span class="pl-c1">6</span>), (<span class="pl-c1">3</span>, <span class="pl-c1">6</span>)]
))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@test_throws</span> TypeError <span class="pl-c1">avoid_allocations</span>(twos_record, twos, (<span class="pl-c1">3</span>,<span class="pl-c1">6</span>,<span class="pl-c1">9</span>))
Test Passed
      Thrown<span class="pl-k">:</span> TypeError

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> If the type is the same and only size differs AutoPreallocation right now won't even</span>
       <span class="pl-c"><span class="pl-c">#</span> error, it will just silently return the wrong result</span>
       <span class="pl-c1">avoid_allocations</span>(twos_record, twos, (<span class="pl-c1">30</span>,<span class="pl-c1">60</span>))
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>
 <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span>  <span class="pl-c1">2.0</span></pre></div>
<p>One way to deal with this is to keep track of which parameters change the allocation pattern,
and then declare one <em>record</em> for each of them.</p>
<p>If one part of your function has nondetermanistic internal allocations you can mark that section to be ignored by wrapping it in <code>@no_prealloc</code>.</p>
<h3><a id="user-content-if-a-function-resizes-any-array-that-it-allocates-you-need-to-call-reinitialize" class="anchor" aria-hidden="true" href="#if-a-function-resizes-any-array-that-it-allocates-you-need-to-call-reinitialize"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>If a function resizes any array that it allocates you need to call <code>reinitialize!</code></h3>
<p>The allocated memory is reuses.
Which means if you call an operation like <code>push!</code> or <code>append!</code> that resizes it,
then it will be resized the next time it goes to be used.
<code>reinitialize!(record)</code> resets the memory to its initial state.</p>
<p>If you are not sure if internally this ever happens then to be safe just call <code>reinitialize!</code> everytime before using the <em>record</em>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">bar</span>(x)
           ys <span class="pl-k">=</span> <span class="pl-c1">fill</span>(<span class="pl-c1">10.0</span>, <span class="pl-c1">30</span>)
           <span class="pl-k">for</span> ii <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
               <span class="pl-c1">push!</span>(ys, x)
           <span class="pl-k">end</span>
           <span class="pl-k">return</span> ys
       <span class="pl-k">end</span>
bar (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">bar</span>(<span class="pl-c1">3.14</span>);
  <span class="pl-c1">684.377</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">3.78</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> _, bar_record <span class="pl-k">=</span> <span class="pl-c1">record_allocations</span>(bar, <span class="pl-c1">3.14</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reinitialize!</span>(bar_record);  <span class="pl-c"><span class="pl-c">#</span> Even the first time after recording</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">avoid_allocations</span>(<span class="pl-k">$</span>bar_record, bar, <span class="pl-c1">42.0</span>);
  <span class="pl-c1">595.262</span> μs (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64</span> bytes)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">reinitialize!</span>(bar_record);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">avoid_allocations</span>(<span class="pl-k">$</span>bar_record, bar, <span class="pl-c1">24601</span>);
  <span class="pl-c1">558.079</span> μs (<span class="pl-c1">3</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64</span> bytes)</pre></div>
<h3><a id="user-content-if-you-are-storing-output-which-was-allocated-within-the-function-you-need-to-take-a-copy" class="anchor" aria-hidden="true" href="#if-you-are-storing-output-which-was-allocated-within-the-function-you-need-to-take-a-copy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>If you are storing output which was allocated within the function, you need to take a <code>copy</code></h3>
<p>Due to the memory being reused if the record is used in another function call the output will be over-written.
You should take a <code>copy</code> (don't need a <code>deepcopy</code>, plain <code>copy</code> is fine), to avoid this.</p>
<p>Here is an example of what happens if you don't:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">mat</span>(x)
           out <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)
           out[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>] <span class="pl-k">=</span> x
           out[<span class="pl-c1">2</span>, <span class="pl-c1">2</span>] <span class="pl-k">=</span> x
           <span class="pl-k">return</span> out
       <span class="pl-k">end</span>
mat (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">const</span> mat1, mat_record <span class="pl-k">=</span> <span class="pl-c1">record_allocations</span>(mat, <span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> (mat1,)
([<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>],)

julia<span class="pl-k">&gt;</span> mat2 <span class="pl-k">=</span> <span class="pl-c1">avoid_allocations</span>(mat_record, mat, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> (mat1, mat2)  <span class="pl-c"><span class="pl-c">#</span> Notice mat1 has changed</span>
([<span class="pl-c1">2.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">2.0</span>], [<span class="pl-c1">2.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">2.0</span>])

julia<span class="pl-k">&gt;</span> mat3 <span class="pl-k">=</span> <span class="pl-c1">avoid_allocations</span>(mat_record, mat, <span class="pl-c1">3</span>);

julia<span class="pl-k">&gt;</span> (mat1, mat2, mat3)  <span class="pl-c"><span class="pl-c">#</span> Notice: mat1 and mat2 have changed</span>
([<span class="pl-c1">3.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">3.0</span>], [<span class="pl-c1">3.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">3.0</span>], [<span class="pl-c1">3.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">3.0</span>])</pre></div>
<h3><a id="user-content-autopreallocation-is-not-threadsafe" class="anchor" aria-hidden="true" href="#autopreallocation-is-not-threadsafe"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AutoPreallocation is not threadsafe</h3>
<p>If the function you are recording allocations uses multiple threads, then odds are it will not work with AutoPreallocation.
Recall the requirement that all allocations occur in the same order.
Multithreading disrupts this.</p>
<p>In theory, one could use 1 record per Task.
This is untested.</p>
<h3><a id="user-content-not-appropriate-for-all-uses" class="anchor" aria-hidden="true" href="#not-appropriate-for-all-uses"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Not appropriate for all uses:</h3>
<ul>
<li><code>avoid_allocations</code> makes many small allocations itself <a href="https://github.com/oxinabox/AutoPreallocation.jl/issues/2">#2</a>, so best for if you have large allocations to remove.</li>
<li>the <em>record</em> holds in memory all the allocations, thus preventing garbage collection. If you allocate-and-free a ton of memory to run your algorithm then you may run out of RAM.</li>
<li>Only handled allocation in the form of <code>Array</code> -- which to be fair underlies a great many data structures in Julia.</li>
</ul>
</article></div>