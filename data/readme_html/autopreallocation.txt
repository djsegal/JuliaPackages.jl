<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-autopreallocation" class="anchor" aria-hidden="true" href="#autopreallocation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AutoPreallocation</h1>
<p dir="auto"><a href="https://travis-ci.com/oxinabox/AutoPreallocation.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/05798099966c45f80c1b49ec964b9fd0eadec50bc47c3889d264869d737d7a70/68747470733a2f2f7472617669732d63692e636f6d2f6f78696e61626f782f4175746f507265616c6c6f636174696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxinabox/AutoPreallocation.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Have you ever wanted your code to allocate less?</strong>
<strong>Have you ever felt explictly preallocating everything was just too hard?</strong>
<strong>Have you ever thought: <em>"why not just reuse the allocated memory from last time"</em>?</strong>
<strong>Well look no further, friend.</strong></p>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to use:</h2>
<p dir="auto">The simplest way of using this package is via only one function <a href="@ref"><code>preallocate</code></a>, e.g</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using AutoPreallocation, BenchmarkTools

julia&gt; A, B, C = (rand(1000, 1000) for _ in 1:3)
Base.Generator{UnitRange{Int64},var&quot;#9#10&quot;}(var&quot;#9#10&quot;(), 1:3)

julia&gt; f(x, y, z) = x * y * z
f (generic function with 1 method)

julia&gt; x, preallocated_f = preallocate(f, A, B, C);

julia&gt; @btime f(A, B, C);
  25.684 ms (4 allocations: 15.26 MiB)

julia&gt; @btime preallocated_f(A, B, C);
  26.077 ms (4 allocations: 144 bytes)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> AutoPreallocation, BenchmarkTools

julia<span class="pl-k">&gt;</span> A, B, C <span class="pl-k">=</span> (<span class="pl-c1">rand</span>(<span class="pl-c1">1000</span>, <span class="pl-c1">1000</span>) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)
Base<span class="pl-k">.</span><span class="pl-c1">Generator</span><span class="pl-c1">{UnitRange{Int64},var"#9#10"}</span>(<span class="pl-c1">var"#9#10"</span>(), <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x, y, z) <span class="pl-k">=</span> x <span class="pl-k">*</span> y <span class="pl-k">*</span> z
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> x, preallocated_f <span class="pl-k">=</span> <span class="pl-c1">preallocate</span>(f, A, B, C);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">f</span>(A, B, C);
  <span class="pl-c1">25.684</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">15.26</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">preallocated_f</span>(A, B, C);
  <span class="pl-c1">26.077</span> ms (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">144</span> bytes)</pre></div>
<h1 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h1>
<p dir="auto">MIT License</p>
</article></div>