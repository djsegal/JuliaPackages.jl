<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-namedpositionalsjl" class="anchor" aria-hidden="true" href="#namedpositionalsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NamedPositionals.jl</h1>
<p dir="auto">Allows you to call Julia functions with named positional parameters:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="
function train_model(model, max_iters, k_weight, j_weight) begin
    ...
end

@np train_model(myModel, max_iters=100, k_weight=0.4, j_weight=0.2;)
"><pre><span class="pl-k">function</span> <span class="pl-en">train_model</span>(model, max_iters, k_weight, j_weight) <span class="pl-k">begin</span>
    <span class="pl-k">...</span>
<span class="pl-k">end</span>

<span class="pl-c1">@np</span> <span class="pl-c1">train_model</span>(myModel, max_iters<span class="pl-k">=</span><span class="pl-c1">100</span>, k_weight<span class="pl-k">=</span><span class="pl-c1">0.4</span>, j_weight<span class="pl-k">=</span><span class="pl-c1">0.2</span>;)
</pre></div>
<h2 dir="auto"><a id="user-content-rationale" class="anchor" aria-hidden="true" href="#rationale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Rationale</h2>
<p dir="auto">This feature is in many languages that I enjoy and feel are well-designed (e.g. Python, Swift, C#), and I miss it when coding Julia. I feel that there are certain situations where this makes my code far more easy to read, which is something I think aligns well with Julia's goals.</p>
<p dir="auto">Obviously you can go overboard with this; personally I would advise sprinkling it in your code when you find yourself refering to the docs/your IDE for "what the hell do these five floats at the end of this SomeLibrary.fn do again?"</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Just prefix your call with <code>@np</code>, and remember to add a trailing semicolon.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using NamedPositionals

function myFunc(a::Int, b::Int, mult_by=3; c::Int=0) begin
    return a+b*mult_by
end

@np myFunc(a=2, b=2, mult_by=3;)"><pre><span class="pl-k">using</span> NamedPositionals

<span class="pl-k">function</span> <span class="pl-en">myFunc</span>(a<span class="pl-k">::</span><span class="pl-c1">Int</span>, b<span class="pl-k">::</span><span class="pl-c1">Int</span>, mult_by<span class="pl-k">=</span><span class="pl-c1">3</span>; c<span class="pl-k">::</span><span class="pl-c1">Int</span><span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-k">begin</span>
    <span class="pl-k">return</span> a<span class="pl-k">+</span>b<span class="pl-k">*</span>mult_by
<span class="pl-k">end</span>

<span class="pl-c1">@np</span> <span class="pl-c1">myFunc</span>(a<span class="pl-k">=</span><span class="pl-c1">2</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>, mult_by<span class="pl-k">=</span><span class="pl-c1">3</span>;)</pre></div>
<p dir="auto">Parameter names are optional, you don't need to provide all (or any) of them:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@np myFunc(2, 2, mult_by=3;)"><pre><span class="pl-c1">@np</span> <span class="pl-c1">myFunc</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, mult_by<span class="pl-k">=</span><span class="pl-c1">3</span>;)</pre></div>
<p dir="auto">If you get your argument names wrong, you'll get a warning printed:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@np myFunc(um=2, b=2)
┌ Warning: In your call testFn(um = 2, b = 1; ): `um` should have been `a`
└ @ Main your_file.jl:42"><pre><span class="pl-c1">@np</span> <span class="pl-c1">myFunc</span>(um<span class="pl-k">=</span><span class="pl-c1">2</span>, b<span class="pl-k">=</span><span class="pl-c1">2</span>)
┌ Warning<span class="pl-k">:</span> In your call <span class="pl-c1">testFn</span>(um <span class="pl-k">=</span> <span class="pl-c1">2</span>, b <span class="pl-k">=</span> <span class="pl-c1">1</span>; )<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">`</span>um<span class="pl-pds">`</span></span> should have been <span class="pl-s"><span class="pl-pds">`</span>a<span class="pl-pds">`</span></span>
└ @ Main your_file<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">42</span></pre></div>
<h2 dir="auto"><a id="user-content-non-goals" class="anchor" aria-hidden="true" href="#non-goals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Non-goals</h2>
<ul dir="auto">
<li>
<p dir="auto">Allowing the caller to re-order arguments: nope. Argument order is hugely important in Julia, it shouldn't be hidden or abstracted. Hiding this is potentially a huge footgun, and would yield major WTFs from anybody who ever reads your code.</p>
</li>
<li>
<p dir="auto">Allowing the caller to omit the trailing semi / separating semi between pos and kwargs: nope. This is required for unambiguous call parsing. Requiring it also makes the separation between positional and kwargs visible, which IMO is again useful for code readability, given the distinction between these is so important to be able to use Julia without head-scratching.</p>
</li>
</ul>
<h2 dir="auto"><a id="user-content-known-issues" class="anchor" aria-hidden="true" href="#known-issues"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Known issues</h2>
<ul dir="auto">
<li>None, yet. Probably issues when using with wrapped functions and stuff.</li>
</ul>
</article></div>