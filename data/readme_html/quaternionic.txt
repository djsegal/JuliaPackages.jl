<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-quaternionic" class="anchor" aria-hidden="true" href="#quaternionic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quaternionic</h1>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/375490468" rel="nofollow"><img align="right" hspace="0" alt="Latest DOI" src="https://camo.githubusercontent.com/ee896468854b7073dc840eba7c94061623ef74d41877c3bbd8bfa5da87763e66/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3337353439303436382e737667" data-canonical-src="https://zenodo.org/badge/375490468.svg" style="max-width: 100%;"></a>
<a href="https://moble.github.io/Quaternionic.jl/stable/" rel="nofollow"><img align="right" hspace="0" alt="Stable docs" src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://moble.github.io/Quaternionic.jl/dev" rel="nofollow"><img src="https://github.com/moble/Quaternionic.jl/workflows/docs/badge.svg" alt="Documentation Status" style="max-width: 100%;"></a>
<a href="https://github.com/moble/Quaternionic.jl/actions"><img src="https://github.com/moble/Quaternionic.jl/workflows/tests/badge.svg" alt="Test Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/moble/Quaternionic.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5067bdd7f6be50de9ee3f98e5e5d394c1750474d24e1df93372f150f2a95d970/68747470733a2f2f636f6465636f762e696f2f67682f6d6f626c652f5175617465726e696f6e69632e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Test Coverage" data-canonical-src="https://codecov.io/gh/moble/Quaternionic.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/543162671c37f59f6411675079ba266db288a4dee241047efa30c8256587198f/68747470733a2f2f4a756c696143492e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f512f5175617465726e696f6e69632e737667" alt="PkgEval" data-canonical-src="https://JuliaCI.github.io/NanosoldierReports/pkgeval_badges/Q/Quaternionic.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Quaternions for Julia</em></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Quaternionic&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Quaternionic<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">See <a href="https://moble.github.io/Quaternionic.jl/dev" rel="nofollow">the documentation</a> for details.</p>
<h2 dir="auto"><a id="user-content-motivation" class="anchor" aria-hidden="true" href="#motivation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Motivation</h2>
<p dir="auto">The goal of this project is to build a complete quaternion type in Julia.  There are
several features that I consider to be fairly basic to a good quaternion package, including</p>
<ul dir="auto">
<li>Subtypes for rotors and pure-vector quaternions, with corresponding specialized methods</li>
<li>Numerous conversions to and from other representations of things quaternions can
represent â€” especially rotations</li>
<li>Smooth interpolation, and differentation of the interpolant</li>
<li>Intelligent handling of distance measures</li>
<li>Construction of random quaternions of the various special types</li>
<li>Enabling efficient integration of angular velocity</li>
<li>Construction of a minimal rotation</li>
<li>Documentation</li>
<li>Thorough testing</li>
</ul>
<p dir="auto">While there is a wide variety of <a href="https://juliahub.com/ui/Search?q=quaternion&amp;type=packages" rel="nofollow">implementations of quaternions in
Julia</a>, none of them tick all
these boxes for me, and none seem easy to extend to do so.  In particular, <a href="https://github.com/JuliaGeometry/Quaternions.jl">the most
popular</a> of those has made certain design
choices that conflict with my needs.</p>
<p dir="auto">I have plenty of experience programming quaternions (including <a href="https://github.com/moble/quaternion">this popular python
package</a>, and <a href="https://github.com/moble/quaternionic">this newer and fancier
package</a>), though not much experience with Julia, so
this seems like a good first project.  In particular, I am interested in understanding how
a general geometric algebra would be coded, so I will be experimenting with subtypes and
static arrays, even though I can imagine that hard-coding the four components could be
better in some ways.  Once I'm done experimenting, I may just rewrite that part, though
hopefully in a way that will be invisible to users.</p>
</article></div>