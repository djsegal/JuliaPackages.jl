<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fortranfilesjl" class="anchor" aria-hidden="true" href="#fortranfilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FortranFiles.jl</h1>
<p>A Julia package for reading/writing Fortran unformatted (i.e. binary) files.</p>
<p><a href="https://traktofon.github.io/FortranFiles.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/traktofon/FortranFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d001de65b4e0daffec160da8817521667cc7b2ae/68747470733a2f2f7472617669732d63692e6f72672f7472616b746f666f6e2f466f727472616e46696c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/traktofon/FortranFiles.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/traktofon/FortranFiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7b681d4c0d5f8d8f6364a462cc8344904f114d40/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7472616b746f666f6e2f466f727472616e46696c65732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="coveralls Status" data-canonical-src="https://coveralls.io/repos/traktofon/FortranFiles.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/traktofon/FortranFiles.jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e2f0d9f2ee617a00b5eaabddda0417c5a94631e0/687474703a2f2f636f6465636f762e696f2f6769746875622f7472616b746f666f6e2f466f727472616e46696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io Status" data-canonical-src="http://codecov.io/github/traktofon/FortranFiles.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Julia &gt;= 1.0 is required.</p>
<h2><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickstart</h2>
<p>Full documentation is available at <a href="https://traktofon.github.io/FortranFiles.jl/stable/" rel="nofollow">https://traktofon.github.io/FortranFiles.jl/stable/</a>.</p>
<p>Installation:</p>
<pre><code># type ] to enter package managing mode
pkg&gt; add FortranFiles
</code></pre>
<p>Example usage for reading files:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FortranFiles

<span class="pl-c"><span class="pl-c">#</span> opening a file for reading</span>
f <span class="pl-k">=</span> <span class="pl-c1">FortranFile</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> reading a single scalar from the file</span>
<span class="pl-c"><span class="pl-c">#</span> (if there is more data in the record, it will be skipped -- this is Fortran behavior)</span>
x <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, Float64)

<span class="pl-c"><span class="pl-c">#</span> reading a 1D array (here of length 10)</span>
vector <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, (Float64,<span class="pl-c1">10</span>))

<span class="pl-c"><span class="pl-c">#</span> reading into an already allocated array</span>
vector <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">read</span>(f, vector)

<span class="pl-c"><span class="pl-c">#</span> reading a 2D array -- alternative syntaxes</span>
matrix <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, (Float64,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))
matrix <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, (Float64,(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)))

<span class="pl-c"><span class="pl-c">#</span> reading a CHARACTER*20 string</span>
fstr <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, FString{<span class="pl-c1">20</span>})
<span class="pl-c"><span class="pl-c">#</span> convert this string to a Julia String, discarding trailing spaces</span>
jstr <span class="pl-k">=</span> <span class="pl-c1">trimstring</span>(fstr)

<span class="pl-c"><span class="pl-c">#</span> reading a record with multiple data</span>
i, strings, zmatrix <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, Int32, (FString{<span class="pl-c1">20</span>},<span class="pl-c1">10</span>), (ComplexF64,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))

<span class="pl-c"><span class="pl-c">#</span> macro for reading a record where the size is not known ahead</span>
<span class="pl-c1">@fread</span> f n<span class="pl-k">::</span><span class="pl-c1">Int32</span> vector<span class="pl-k">::</span><span class="pl-c1">(Float64,n)</span>

<span class="pl-c"><span class="pl-c">#</span> skipping over a record</span>
<span class="pl-c1">read</span>(f)

<span class="pl-c"><span class="pl-c">#</span> go back to the beginning of the file</span>
<span class="pl-c1">rewind</span>(f)</pre></div>
<p>Example usage for writing files:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> opening a file for writing</span>
f <span class="pl-k">=</span> <span class="pl-c1">FortranFile</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> take care when defining the Julia data to be written into the file,</span>
<span class="pl-c"><span class="pl-c">#</span> noting the correspondence between Julia and Fortran datatypes</span>
i <span class="pl-k">=</span> <span class="pl-c1">Int32</span>(<span class="pl-c1">1</span>)                 <span class="pl-c"><span class="pl-c">#</span> INTEGER(KIND=4)</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>                      <span class="pl-c"><span class="pl-c">#</span> REAL(KIND=REAL64), usually the same as DOUBLE PRECISION</span>
A <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float32, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>)   <span class="pl-c"><span class="pl-c">#</span> REAL,DIMENSION(10,10)</span>
s <span class="pl-k">=</span> <span class="pl-c1">FString</span>(<span class="pl-c1">20</span>, <span class="pl-s"><span class="pl-pds">"</span>blabla<span class="pl-pds">"</span></span>)    <span class="pl-c"><span class="pl-c">#</span> CHARACTER(LEN=20)</span>

<span class="pl-c"><span class="pl-c">#</span> write all these data into a single record</span>
<span class="pl-c1">write</span>(f, i, x, A, s)

<span class="pl-c"><span class="pl-c">#</span> close the file</span>
<span class="pl-c1">close</span>(f)</pre></div>
</article></div>