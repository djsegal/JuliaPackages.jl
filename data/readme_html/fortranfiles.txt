<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fortranfilesjl" class="anchor" aria-hidden="true" href="#fortranfilesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FortranFiles.jl</h1>
<p dir="auto">A Julia package for reading/writing Fortran unformatted (i.e. binary) files.</p>
<p dir="auto"><a href="https://traktofon.github.io/FortranFiles.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.org/traktofon/FortranFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9d124818c25b3bf0aaba7cbea270287f8445ef8a597fe68d31bfb9fdd6b83858/68747470733a2f2f7472617669732d63692e6f72672f7472616b746f666f6e2f466f727472616e46696c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/traktofon/FortranFiles.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/traktofon/FortranFiles.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/43d7f2b13e544403558b76b62781a26cae52951fbe5e3352b88e432db6d54ced/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7472616b746f666f6e2f466f727472616e46696c65732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="coveralls Status" data-canonical-src="https://coveralls.io/repos/traktofon/FortranFiles.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/traktofon/FortranFiles.jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/636cb2052054c755ee612aa5ff2bf20abba178f90db50f4f390ccdf9db627634/687474703a2f2f636f6465636f762e696f2f6769746875622f7472616b746f666f6e2f466f727472616e46696c65732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io Status" data-canonical-src="http://codecov.io/github/traktofon/FortranFiles.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Julia &gt;= 1.0 is required.</p>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<p dir="auto">Full documentation is available at <a href="https://traktofon.github.io/FortranFiles.jl/stable/" rel="nofollow">https://traktofon.github.io/FortranFiles.jl/stable/</a>.</p>
<p dir="auto">Installation:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="# type ] to enter package managing mode
pkg&gt; add FortranFiles"><pre class="notranslate"><code># type ] to enter package managing mode
pkg&gt; add FortranFiles
</code></pre></div>
<p dir="auto">Example usage for reading files:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FortranFiles

# opening a file for reading
f = FortranFile(&quot;data.bin&quot;)

# reading a single scalar from the file
# (if there is more data in the record, it will be skipped -- this is Fortran behavior)
x = read(f, Float64)

# reading a 1D array (here of length 10)
vector = read(f, (Float64,10))

# reading into an already allocated array
vector = zeros(10)
read(f, vector)

# reading a 2D array -- alternative syntaxes
matrix = read(f, (Float64,10,10))
matrix = read(f, (Float64,(10,10)))

# reading a CHARACTER*20 string
fstr = read(f, FString{20})
# convert this string to a Julia String, discarding trailing spaces
jstr = trimstring(fstr)

# reading a record with multiple data
i, strings, zmatrix = read(f, Int32, (FString{20},10), (ComplexF64,10,10))

# macro for reading a record where the size is not known ahead
@fread f n::Int32 vector::(Float64,n)

# skipping over a record
read(f)

# go back to the beginning of the file
rewind(f)"><pre><span class="pl-k">using</span> FortranFiles

<span class="pl-c"><span class="pl-c">#</span> opening a file for reading</span>
f <span class="pl-k">=</span> <span class="pl-c1">FortranFile</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> reading a single scalar from the file</span>
<span class="pl-c"><span class="pl-c">#</span> (if there is more data in the record, it will be skipped -- this is Fortran behavior)</span>
x <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, Float64)

<span class="pl-c"><span class="pl-c">#</span> reading a 1D array (here of length 10)</span>
vector <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, (Float64,<span class="pl-c1">10</span>))

<span class="pl-c"><span class="pl-c">#</span> reading into an already allocated array</span>
vector <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">10</span>)
<span class="pl-c1">read</span>(f, vector)

<span class="pl-c"><span class="pl-c">#</span> reading a 2D array -- alternative syntaxes</span>
matrix <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, (Float64,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))
matrix <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, (Float64,(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>)))

<span class="pl-c"><span class="pl-c">#</span> reading a CHARACTER*20 string</span>
fstr <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, FString{<span class="pl-c1">20</span>})
<span class="pl-c"><span class="pl-c">#</span> convert this string to a Julia String, discarding trailing spaces</span>
jstr <span class="pl-k">=</span> <span class="pl-c1">trimstring</span>(fstr)

<span class="pl-c"><span class="pl-c">#</span> reading a record with multiple data</span>
i, strings, zmatrix <span class="pl-k">=</span> <span class="pl-c1">read</span>(f, Int32, (FString{<span class="pl-c1">20</span>},<span class="pl-c1">10</span>), (ComplexF64,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))

<span class="pl-c"><span class="pl-c">#</span> macro for reading a record where the size is not known ahead</span>
<span class="pl-c1">@fread</span> f n<span class="pl-k">::</span><span class="pl-c1">Int32</span> vector<span class="pl-k">::</span><span class="pl-c1">(Float64,n)</span>

<span class="pl-c"><span class="pl-c">#</span> skipping over a record</span>
<span class="pl-c1">read</span>(f)

<span class="pl-c"><span class="pl-c">#</span> go back to the beginning of the file</span>
<span class="pl-c1">rewind</span>(f)</pre></div>
<p dir="auto">Example usage for writing files:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# opening a file for writing
f = FortranFile(&quot;data.bin&quot;, &quot;w&quot;)

# take care when defining the Julia data to be written into the file,
# noting the correspondence between Julia and Fortran datatypes
i = Int32(1)                 # INTEGER(KIND=4)
x = 1.0                      # REAL(KIND=REAL64), usually the same as DOUBLE PRECISION
A = zeros(Float32, 10, 10)   # REAL,DIMENSION(10,10)
s = FString(20, &quot;blabla&quot;)    # CHARACTER(LEN=20)

# write all these data into a single record
write(f, i, x, A, s)

# close the file
close(f)"><pre><span class="pl-c"><span class="pl-c">#</span> opening a file for writing</span>
f <span class="pl-k">=</span> <span class="pl-c1">FortranFile</span>(<span class="pl-s"><span class="pl-pds">"</span>data.bin<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> take care when defining the Julia data to be written into the file,</span>
<span class="pl-c"><span class="pl-c">#</span> noting the correspondence between Julia and Fortran datatypes</span>
i <span class="pl-k">=</span> <span class="pl-c1">Int32</span>(<span class="pl-c1">1</span>)                 <span class="pl-c"><span class="pl-c">#</span> INTEGER(KIND=4)</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.0</span>                      <span class="pl-c"><span class="pl-c">#</span> REAL(KIND=REAL64), usually the same as DOUBLE PRECISION</span>
A <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Float32, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>)   <span class="pl-c"><span class="pl-c">#</span> REAL,DIMENSION(10,10)</span>
s <span class="pl-k">=</span> <span class="pl-c1">FString</span>(<span class="pl-c1">20</span>, <span class="pl-s"><span class="pl-pds">"</span>blabla<span class="pl-pds">"</span></span>)    <span class="pl-c"><span class="pl-c">#</span> CHARACTER(LEN=20)</span>

<span class="pl-c"><span class="pl-c">#</span> write all these data into a single record</span>
<span class="pl-c1">write</span>(f, i, x, A, s)

<span class="pl-c"><span class="pl-c">#</span> close the file</span>
<span class="pl-c1">close</span>(f)</pre></div>
</article></div>