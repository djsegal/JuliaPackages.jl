<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-influxdbclientjl" class="anchor" aria-hidden="true" href="#influxdbclientjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>InfluxDBClient.jl</h1>
<p dir="auto"><a href="https://github.com/kafisatz/InfluxDBClient.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/kafisatz/InfluxDBClient.jl/workflows/CI/badge.svg" alt="CI Testing" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/kafisatz/InfluxDBClient.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/34e9cdae0e3c97a61ee18431f85d4791596ad4a2c469ba734b9ca43f0e938c0b/687474703a2f2f636f6465636f762e696f2f6769746875622f6b6166697361747a2f496e666c75784442436c69656e742e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="http://codecov.io/github/kafisatz/InfluxDBClient.jl/coverage.svg?branch=main" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-scope-and-purpose" class="anchor" aria-hidden="true" href="#scope-and-purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Scope and Purpose</h2>
<ul dir="auto">
<li>This was developed for InfluxDB v2 OSS. In my case the InfluxDB is running on a machine in the local area network (docker container)</li>
<li>I wanted a Julia solution to write data (e.g. from a DataFrame) to InfluxDB v2</li>
</ul>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<ul dir="auto">
<li>Below is an example snippet how to use the functions in this package.</li>
<li>Consider <code>names(InfluxDBClient)</code> for a list of methods of this package</li>
<li>You may want to consider the functions in runtests.jl to get an idea of the other functions and their arguments.</li>
</ul>
<h2 dir="auto"><a id="user-content-configuration" class="anchor" aria-hidden="true" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Configuration</h2>
<p dir="auto">There are three optoins to configure the database access (see function <code>get_settings</code>)</p>
<ol dir="auto">
<li>environment variables</li>
</ol>
<ul dir="auto">
<li>ENV["INFLUXDB_ORG"] the organization</li>
<li>ENV["INFLUXDB_TOKEN"] the token to access the InfluxDB</li>
<li>ENV["INFLUXDB_URL"] should include protocol and the port, e.g. "<a href="http://10.14.15.10:8086" rel="nofollow">http://10.14.15.10:8086</a>"
or with https e.g. <code>ENV["INFLUXDB_URL"]="https://us-east-1-1.aws.cloud2.influxdata.com:443"</code></li>
</ul>
<ol start="2" dir="auto">
<li>keyword argumetns to <code>get_settings</code></li>
<li>provide a space delimited file to <code>get_settings</code></li>
</ol>
<h2 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h2>
<ul dir="auto">
<li><strong>Not all functions account for TimeZones in a proper manner</strong>! Notably DateTime in Julia Base/Core (Pkg Dates) cannot handle nanosecond precision. The Pkg NanoDates in contrast cannot handle TimeZones.</li>
<li>Some of the functions may be somewhat slow for large DataFrames. I am open for suggestions on how to improve my string handling in Julia.</li>
<li>Backslashes and special characters in strings may not (yet) be parsed correctly. <a href="https://docs.influxdata.com/influxdb/v2.4/reference/syntax/line-protocol/#integer" rel="nofollow">https://docs.influxdata.com/influxdb/v2.4/reference/syntax/line-protocol/#integer</a></li>
<li>Some bucket management functions (<code>get_buckets</code> etc) assume that you have fewer than 100 buckets. Functions may fail otherwise. See keywords limit and offset.</li>
<li>When data is provided integer valued, InfluxDB will display the result as float, when an aggregation function (such as mean) is selected. Select 'last' or similar to show the data as is.</li>
</ul>
<h2 dir="auto"><a id="user-content-ideas--aspects-not-yet-implemented" class="anchor" aria-hidden="true" href="#ideas--aspects-not-yet-implemented"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Ideas / Aspects not yet implemented</h2>
<ul dir="auto">
<li>A query function (<code>query_flux</code>) has been drafted. But it is rudimentary and output is not fully parsed yet, see <a href="https://docs.influxdata.com/influxdb/cloud/api/#operation/PostQuery" rel="nofollow">https://docs.influxdata.com/influxdb/cloud/api/#operation/PostQuery</a> for API details</li>
<li>Add benchmark suite <a href="https://github.com/JuliaCI/PkgBenchmark.jl">https://github.com/JuliaCI/PkgBenchmark.jl</a></li>
<li>Precision is currently stored as string 'ns', 's', 'us', 'ms'. Possibly performance is increased if we use another type for this</li>
<li>May want to consider performance tips from here: <a href="https://docs.influxdata.com/influxdb/cloud/write-data/best-practices/optimize-writes/" rel="nofollow">https://docs.influxdata.com/influxdb/cloud/write-data/best-practices/optimize-writes/</a></li>
<li>The optimal batch size is 5000 lines of line protocol. -&gt; account for this?</li>
<li>By default, InfluxDB writes data in nanosecond precision. However if your data isnâ€™t collected in nanoseconds, there is no need to write at that precision. For better performance, use the coarsest precision possible for timestamps.</li>
</ul>
<h2 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h2>
<p dir="auto">See <a href="https://docs.influxdata.com/influxdb/v2.4/reference/syntax/line-protocol/" rel="nofollow">https://docs.influxdata.com/influxdb/v2.4/reference/syntax/line-protocol/</a> for details of the line protocol.
See also <a href="https://docs.influxdata.com/influxdb/cloud/api/" rel="nofollow">https://docs.influxdata.com/influxdb/cloud/api/</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using InfluxDBClient
using Dates
using DataFrames

a_random_bucket_name = &quot;test_InfluxDBClient.jl_asdfeafdfasefsIyxdFDYfadsfasdfa____l&quot;

#isettings should return a NamedTuple similar to 
#(INFLUXDB_URL = &quot;http://10.14.15.10:8086&quot;, INFLUXDB_ORG = &quot;bk&quot;, INFLUXDB_TOKEN = &quot;5Ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==&quot;)
isettings = get_settings()

#check if the InfluxDB is reachable
bucket_names, json = get_buckets(isettings);

#bucket_names is a Vector{String} of the buckets in the database

#create or delete a bucket
create_bucket(isettings,a_random_bucket_name)
delete_bucket(isettings,a_random_bucket_name)
create_bucket(isettings,a_random_bucket_name)

#given a DataFrame, we can then write the data to the database
some_dt = DateTime(2022,9,30,15,59,33,0)
df = DataFrame(sensor_id = [&quot;TLM0900&quot;,&quot;TLM0901&quot;,&quot;TLM0901&quot;],other_tag=[&quot;m&quot;,&quot;m&quot;,&quot;x&quot;] ,temperature = [70.1,11.2,99.3], humidity=[14.9,55.2,3], datetime = [some_dt,some_dt-Second(51),some_dt-Second(500)])

#get the line protocol string
lp = lineprotocol(&quot;my_meas&quot;,df,Symbol.([&quot;temperature&quot;,&quot;humidity&quot;]),tags=[&quot;sensor_id&quot;], &quot;datetime&quot;)
#here lp is a string (and thus readable by a human)
rs = write_data(isettings,a_random_bucket_name,lp,&quot;ns&quot;)
#the value of RS must be 204 (HTTP return code after successful write)
@show rs

#Please note that by default the lineprotocol function assumes that your timestamps are in UTC
#if your timestamps are in a different TimeZone, consider the tzstr keyword as follows:
lp = lineprotocol(&quot;my_meas&quot;,df,Symbol.([&quot;temperature&quot;,&quot;humidity&quot;]),tags=[&quot;sensor_id&quot;], &quot;datetime&quot;, tzstr=&quot;Europe/Berlin&quot;)

#for lager dataframes you will want to use compression for the line protocol, using the keyword compress
lp_gzip_compressed = lineprotocol(&quot;my_meas&quot;,df,Symbol.([&quot;temperature&quot;,&quot;humidity&quot;]),tags=[&quot;sensor_id&quot;], &quot;datetime&quot;,compress = true)
#lp_gzip_compressed is now a Unit8 Vector
rs = write_data(isettings,a_random_bucket_name,lp_gzip_compressed,&quot;ns&quot;)
@assert rs == 204

#we also provide a wrapper function to directly write a DataFrame to the database
rs,lp = write_dataframe(settings=isettings,bucket=a_random_bucket_name,measurement=&quot;xxmeasurment&quot;,data=df,fields=[&quot;humidity&quot;,&quot;temperature&quot;],timestamp=:datetime,tags=String[&quot;sensor_id&quot;],tzstr = &quot;Europe/Berlin&quot;,compress=true);

#querying 
#note that the agg keyword is optional
#consider calls in runtests.jl for more exmaples (i.e. search this repository for &quot;query_flux(&quot;)
agg = &quot;&quot;&quot;   aggregateWindow(every: 20m, fn: mean, createEmpty: false)
                |&gt; yield(name: &quot;mean&quot;) &quot;&quot;&quot;    
datetime_str = string(minimum(df.datetime),&quot;+02:00&quot;)
df_result = query_flux(isettings,a_random_bucket_name,&quot;xxmeasurment&quot;;tzstr = &quot;Europe/Berlin&quot;,range=Dict(&quot;start&quot;=&gt;&quot;$datetime_str&quot;),fields=[&quot;temperature&quot;,&quot;humidity&quot;],tags=Dict(&quot;sensor_id&quot;=&gt;&quot;TLM0900&quot;),aggregate=agg);

#deleting measurements
#see delete.jl in the tests folder

#deleting a bucket
delete_bucket(isettings,a_random_bucket_name)"><pre><span class="pl-k">using</span> InfluxDBClient
<span class="pl-k">using</span> Dates
<span class="pl-k">using</span> DataFrames

a_random_bucket_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>test_InfluxDBClient.jl_asdfeafdfasefsIyxdFDYfadsfasdfa____l<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span>isettings should return a NamedTuple similar to </span>
<span class="pl-c"><span class="pl-c">#</span>(INFLUXDB_URL = "http://10.14.15.10:8086", INFLUXDB_ORG = "bk", INFLUXDB_TOKEN = "5Ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==")</span>
isettings <span class="pl-k">=</span> <span class="pl-c1">get_settings</span>()

<span class="pl-c"><span class="pl-c">#</span>check if the InfluxDB is reachable</span>
bucket_names, json <span class="pl-k">=</span> <span class="pl-c1">get_buckets</span>(isettings);

<span class="pl-c"><span class="pl-c">#</span>bucket_names is a Vector{String} of the buckets in the database</span>

<span class="pl-c"><span class="pl-c">#</span>create or delete a bucket</span>
<span class="pl-c1">create_bucket</span>(isettings,a_random_bucket_name)
<span class="pl-c1">delete_bucket</span>(isettings,a_random_bucket_name)
<span class="pl-c1">create_bucket</span>(isettings,a_random_bucket_name)

<span class="pl-c"><span class="pl-c">#</span>given a DataFrame, we can then write the data to the database</span>
some_dt <span class="pl-k">=</span> <span class="pl-c1">DateTime</span>(<span class="pl-c1">2022</span>,<span class="pl-c1">9</span>,<span class="pl-c1">30</span>,<span class="pl-c1">15</span>,<span class="pl-c1">59</span>,<span class="pl-c1">33</span>,<span class="pl-c1">0</span>)
df <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(sensor_id <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>TLM0900<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>TLM0901<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>TLM0901<span class="pl-pds">"</span></span>],other_tag<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>m<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>m<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>x<span class="pl-pds">"</span></span>] ,temperature <span class="pl-k">=</span> [<span class="pl-c1">70.1</span>,<span class="pl-c1">11.2</span>,<span class="pl-c1">99.3</span>], humidity<span class="pl-k">=</span>[<span class="pl-c1">14.9</span>,<span class="pl-c1">55.2</span>,<span class="pl-c1">3</span>], datetime <span class="pl-k">=</span> [some_dt,some_dt<span class="pl-k">-</span><span class="pl-c1">Second</span>(<span class="pl-c1">51</span>),some_dt<span class="pl-k">-</span><span class="pl-c1">Second</span>(<span class="pl-c1">500</span>)])

<span class="pl-c"><span class="pl-c">#</span>get the line protocol string</span>
lp <span class="pl-k">=</span> <span class="pl-c1">lineprotocol</span>(<span class="pl-s"><span class="pl-pds">"</span>my_meas<span class="pl-pds">"</span></span>,df,<span class="pl-c1">Symbol</span>.([<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>humidity<span class="pl-pds">"</span></span>]),tags<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>sensor_id<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>datetime<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>here lp is a string (and thus readable by a human)</span>
rs <span class="pl-k">=</span> <span class="pl-c1">write_data</span>(isettings,a_random_bucket_name,lp,<span class="pl-s"><span class="pl-pds">"</span>ns<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>the value of RS must be 204 (HTTP return code after successful write)</span>
<span class="pl-c1">@show</span> rs

<span class="pl-c"><span class="pl-c">#</span>Please note that by default the lineprotocol function assumes that your timestamps are in UTC</span>
<span class="pl-c"><span class="pl-c">#</span>if your timestamps are in a different TimeZone, consider the tzstr keyword as follows:</span>
lp <span class="pl-k">=</span> <span class="pl-c1">lineprotocol</span>(<span class="pl-s"><span class="pl-pds">"</span>my_meas<span class="pl-pds">"</span></span>,df,<span class="pl-c1">Symbol</span>.([<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>humidity<span class="pl-pds">"</span></span>]),tags<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>sensor_id<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>datetime<span class="pl-pds">"</span></span>, tzstr<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Europe/Berlin<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>for lager dataframes you will want to use compression for the line protocol, using the keyword compress</span>
lp_gzip_compressed <span class="pl-k">=</span> <span class="pl-c1">lineprotocol</span>(<span class="pl-s"><span class="pl-pds">"</span>my_meas<span class="pl-pds">"</span></span>,df,<span class="pl-c1">Symbol</span>.([<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>humidity<span class="pl-pds">"</span></span>]),tags<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>sensor_id<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>datetime<span class="pl-pds">"</span></span>,compress <span class="pl-k">=</span> <span class="pl-c1">true</span>)
<span class="pl-c"><span class="pl-c">#</span>lp_gzip_compressed is now a Unit8 Vector</span>
rs <span class="pl-k">=</span> <span class="pl-c1">write_data</span>(isettings,a_random_bucket_name,lp_gzip_compressed,<span class="pl-s"><span class="pl-pds">"</span>ns<span class="pl-pds">"</span></span>)
<span class="pl-c1">@assert</span> rs <span class="pl-k">==</span> <span class="pl-c1">204</span>

<span class="pl-c"><span class="pl-c">#</span>we also provide a wrapper function to directly write a DataFrame to the database</span>
rs,lp <span class="pl-k">=</span> <span class="pl-c1">write_dataframe</span>(settings<span class="pl-k">=</span>isettings,bucket<span class="pl-k">=</span>a_random_bucket_name,measurement<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>xxmeasurment<span class="pl-pds">"</span></span>,data<span class="pl-k">=</span>df,fields<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>humidity<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>],timestamp<span class="pl-k">=</span><span class="pl-c1">:datetime</span>,tags<span class="pl-k">=</span>String[<span class="pl-s"><span class="pl-pds">"</span>sensor_id<span class="pl-pds">"</span></span>],tzstr <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Europe/Berlin<span class="pl-pds">"</span></span>,compress<span class="pl-k">=</span><span class="pl-c1">true</span>);

<span class="pl-c"><span class="pl-c">#</span>querying </span>
<span class="pl-c"><span class="pl-c">#</span>note that the agg keyword is optional</span>
<span class="pl-c"><span class="pl-c">#</span>consider calls in runtests.jl for more exmaples (i.e. search this repository for "query_flux(")</span>
agg <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span>   aggregateWindow(every: 20m, fn: mean, createEmpty: false)</span>
<span class="pl-s">                |&gt; yield(name: "mean") <span class="pl-pds">"""</span></span>    
datetime_str <span class="pl-k">=</span> <span class="pl-c1">string</span>(<span class="pl-c1">minimum</span>(df<span class="pl-k">.</span>datetime),<span class="pl-s"><span class="pl-pds">"</span>+02:00<span class="pl-pds">"</span></span>)
df_result <span class="pl-k">=</span> <span class="pl-c1">query_flux</span>(isettings,a_random_bucket_name,<span class="pl-s"><span class="pl-pds">"</span>xxmeasurment<span class="pl-pds">"</span></span>;tzstr <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Europe/Berlin<span class="pl-pds">"</span></span>,range<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>start<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$datetime_str</span><span class="pl-pds">"</span></span>),fields<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>temperature<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>humidity<span class="pl-pds">"</span></span>],tags<span class="pl-k">=</span><span class="pl-c1">Dict</span>(<span class="pl-s"><span class="pl-pds">"</span>sensor_id<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>TLM0900<span class="pl-pds">"</span></span>),aggregate<span class="pl-k">=</span>agg);

<span class="pl-c"><span class="pl-c">#</span>deleting measurements</span>
<span class="pl-c"><span class="pl-c">#</span>see delete.jl in the tests folder</span>

<span class="pl-c"><span class="pl-c">#</span>deleting a bucket</span>
<span class="pl-c1">delete_bucket</span>(isettings,a_random_bucket_name)</pre></div>
<h2 dir="auto"><a id="user-content-running-tests" class="anchor" aria-hidden="true" href="#running-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running tests</h2>
<p dir="auto">First make sure you have the following environment variables defined:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ENV[&quot;INFLUXDB_URL&quot;]=&quot;http://localhost:8086&quot;
ENV[&quot;INFLUXDB_ORG&quot;]=&quot;&lt;some org&gt;&quot;
ENV[&quot;INFLUXDB_TOKEN&quot;]=&quot;5Ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==&quot;
ENV[&quot;INFLUXDB_USER&quot;]=&quot;&lt;admin user&gt;&quot;
ENV[&quot;INFLUXDB_PASSWORD&quot;]=&quot;&lt;password&gt;&quot;"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>INFLUXDB_URL<span class="pl-pds">"</span></span>]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>http://localhost:8086<span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>INFLUXDB_ORG<span class="pl-pds">"</span></span>]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;some org&gt;<span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>INFLUXDB_TOKEN<span class="pl-pds">"</span></span>]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>5Ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==<span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>INFLUXDB_USER<span class="pl-pds">"</span></span>]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;admin user&gt;<span class="pl-pds">"</span></span>
<span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>INFLUXDB_PASSWORD<span class="pl-pds">"</span></span>]<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>&lt;password&gt;<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">With newer influx versions, it can be hard to get an admin user that can create and drop buckets
<code>sudo influx auth create --all-access -u &lt;admin user&gt; -o &lt;some org&gt;</code>
For more information, see: <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="975659730" data-permission-text="Title is private" data-url="https://github.com/influxdata/influx-cli/issues/231" data-hovercard-type="issue" data-hovercard-url="/influxdata/influx-cli/issues/231/hovercard" href="https://github.com/influxdata/influx-cli/issues/231">influxdata/influx-cli#231</a></p>
<p dir="auto">The easiest is to run via <code>]test</code> or <code>Pkg.test()</code></p>
<p dir="auto">But in order to run <code>runtests.jl</code> or individual tests manually you need to activate the test dependencies,
and since this is still has Julia 1 compatibility, we need to use the following method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="]activate
using TestEnv
TestEnv.activate(&quot;InfluxDBClient&quot;)"><pre>]activate
<span class="pl-k">using</span> TestEnv
TestEnv<span class="pl-k">.</span><span class="pl-c1">activate</span>(<span class="pl-s"><span class="pl-pds">"</span>InfluxDBClient<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">For more information, see:
<a href="https://discourse.julialang.org/t/activating-test-dependencies/48121/10" rel="nofollow">https://discourse.julialang.org/t/activating-test-dependencies/48121/10</a>
<a href="https://github.com/JuliaTesting/TestEnv.jl">https://github.com/JuliaTesting/TestEnv.jl</a></p>
<p dir="auto">also had to modify runtents.jl line 55 to not add "test/"</p>
</article></div>