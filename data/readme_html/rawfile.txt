<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-rawfile" class="anchor" aria-hidden="true" href="#rawfile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RawFile</h1>
<p>A simple, fast file format for storing numeric arrays. I built this package because I was frustrated with the speed and complexity of other formats.</p>
<p>The basic format (<code>raw</code>) saves bit arrays as flat files with a minimal header. Arrays can be read back and will be formatted into the correct <code>Type</code> and <code>size</code>.</p>
<h2><a id="user-content-saving-arrays" class="anchor" aria-hidden="true" href="#saving-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Saving arrays:</h2>
<p>Save an Array to a file:</p>
<pre><code>saveraw{T&lt;:Number,V}(a::AbstractArray{T,V},fname::String)
</code></pre>
<p>Append a Number or Array to an existing file. If appending an Array, appends along last dimension. This function requires that the two Arrays have the same size (except the last dimension) and <code>Type</code>.</p>
<pre><code>appendraw{T&lt;:Number,V}(a::AbstractArray{T,V},fname::String)
appendraw(a::T,fname::String) where {T&lt;:Number} = appendraw([a],fname)
</code></pre>
<p>The <code>saveraw</code> and <code>readraw</code> functions can also be used on <code>IO</code> objects if you want to pull the data stream
from something other than a file. For example:</p>
<pre lang="julia-repl"><code>julia&gt; using GZip,RawFile

julia&gt; GZip.open("test.raw.gz","w") do f
           saveraw(rand(100,10,50),f)
       end

julia&gt; GZip.open("test.raw.gz") do f
           rawsize(f)
       end
(100, 10, 50)
</code></pre>
<h2><a id="user-content-reading-arrays" class="anchor" aria-hidden="true" href="#reading-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reading arrays:</h2>
<p>Read an Array from a file:</p>
<pre><code>readraw(fname::String)
</code></pre>
<h2><a id="user-content-meta-data" class="anchor" aria-hidden="true" href="#meta-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Meta data:</h2>
<p>Just read the Array size from the header and return a <code>Tuple</code></p>
<pre><code>rawsize(fname::String)
</code></pre>
<h2><a id="user-content-partial-readwrite" class="anchor" aria-hidden="true" href="#partial-readwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Partial read/write</h2>
<p>These functions were made if you are handling large files and want to be able to write them progressively without keeping all of the data in memory at one time.</p>
<h3><a id="user-content-progressive-saving" class="anchor" aria-hidden="true" href="#progressive-saving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Progressive saving</h3>
<p>To save an Array progressively, each piece needs to have the same dimensions (except for the last, where they will be concatenated)</p>
<pre><code>saveraw(func::Function,fname::String)
</code></pre>
<pre lang="julia-repl"><code>julia&gt; saveraw("test.raw") do f
           for i=1:10
               write(f,rand(100,10,5))
           end
       end
julia&gt; rawsize("test.raw")
(100, 10, 50)
</code></pre>
<h3><a id="user-content-progressive-reading" class="anchor" aria-hidden="true" href="#progressive-reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Progressive reading</h3>
<p>The <code>RawFileIter</code> Type is an interator that can be used to read through a file returning chunks of data (based on the parameter <code>num_batch</code>), instead of the entire file at once. The iteration is also encapsulated into the <code>readraw</code> function for convenience.</p>
<pre><code>RawFileIter(fname::String,num_batch::Int)
readraw(func::Function,fname::String,batch::Int)
</code></pre>
<pre lang="julia-repl"><code>julia&gt; for d in RawFileIter("test.raw",20)
                  @info(size(d))
              end
[ Info: (100, 10, 20)
[ Info: (100, 10, 20)
[ Info: (100, 10, 10)
</code></pre>
<pre lang="julia-repl"><code>julia&gt; readraw("test.raw",20) do c
           @info(size(c))
       end
[ Info: (100, 10, 20)
[ Info: (100, 10, 20)
[ Info: (100, 10, 10)
</code></pre>
<p><a href="https://travis-ci.org/azraq27/RawFile.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/060ba8ef2d96572152e7dc80a499c80a2e8f97f4/68747470733a2f2f7472617669732d63692e6f72672f617a72617132372f52617746696c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/azraq27/RawFile.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/azraq27/RawFile.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/479f94d2732ee2933c097ca52d8154a14b99ec1c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f617a72617132372f52617746696c652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/azraq27/RawFile.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/azraq27/RawFile.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e4e18933a7ba2d539e30a7bf0e5b7762f0b2cb83/687474703a2f2f636f6465636f762e696f2f6769746875622f617a72617132372f52617746696c652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/azraq27/RawFile.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
</article></div>