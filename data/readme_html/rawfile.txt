<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rawfile" class="anchor" aria-hidden="true" href="#rawfile"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RawFile</h1>
<p dir="auto">A simple, fast file format for storing numeric arrays. I built this package because I was frustrated with the speed and complexity of other formats.</p>
<p dir="auto">The basic format (<code>raw</code>) saves bit arrays as flat files with a minimal header. Arrays can be read back and will be formatted into the correct <code>Type</code> and <code>size</code>.</p>
<h2 dir="auto"><a id="user-content-saving-arrays" class="anchor" aria-hidden="true" href="#saving-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Saving arrays:</h2>
<p dir="auto">Save an Array to a file:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="saveraw{T&lt;:Number,V}(a::AbstractArray{T,V},fname::String)"><pre class="notranslate"><code>saveraw{T&lt;:Number,V}(a::AbstractArray{T,V},fname::String)
</code></pre></div>
<p dir="auto">Append a Number or Array to an existing file. If appending an Array, appends along last dimension. This function requires that the two Arrays have the same size (except the last dimension) and <code>Type</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="appendraw{T&lt;:Number,V}(a::AbstractArray{T,V},fname::String)
appendraw(a::T,fname::String) where {T&lt;:Number} = appendraw([a],fname)"><pre class="notranslate"><code>appendraw{T&lt;:Number,V}(a::AbstractArray{T,V},fname::String)
appendraw(a::T,fname::String) where {T&lt;:Number} = appendraw([a],fname)
</code></pre></div>
<p dir="auto">The <code>saveraw</code> and <code>readraw</code> functions can also be used on <code>IO</code> objects if you want to pull the data stream
from something other than a file. For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using GZip,RawFile

julia&gt; GZip.open(&quot;test.raw.gz&quot;,&quot;w&quot;) do f
           saveraw(rand(100,10,50),f)
       end

julia&gt; GZip.open(&quot;test.raw.gz&quot;) do f
           rawsize(f)
       end
(100, 10, 50)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using GZip,RawFile

julia&gt; GZip.open("test.raw.gz","w") do f
           saveraw(rand(100,10,50),f)
       end

julia&gt; GZip.open("test.raw.gz") do f
           rawsize(f)
       end
(100, 10, 50)
</code></pre></div>
<h2 dir="auto"><a id="user-content-reading-arrays" class="anchor" aria-hidden="true" href="#reading-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading arrays:</h2>
<p dir="auto">Read an Array from a file:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="readraw(fname::String)"><pre class="notranslate"><code>readraw(fname::String)
</code></pre></div>
<h2 dir="auto"><a id="user-content-meta-data" class="anchor" aria-hidden="true" href="#meta-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Meta data:</h2>
<p dir="auto">Just read the Array size from the header and return a <code>Tuple</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="rawsize(fname::String)"><pre class="notranslate"><code>rawsize(fname::String)
</code></pre></div>
<h2 dir="auto"><a id="user-content-partial-readwrite" class="anchor" aria-hidden="true" href="#partial-readwrite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Partial read/write</h2>
<p dir="auto">These functions were made if you are handling large files and want to be able to write them progressively without keeping all of the data in memory at one time.</p>
<h3 dir="auto"><a id="user-content-progressive-saving" class="anchor" aria-hidden="true" href="#progressive-saving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Progressive saving</h3>
<p dir="auto">To save an Array progressively, each piece needs to have the same dimensions (except for the last, where they will be concatenated)</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="saveraw(func::Function,fname::String)"><pre class="notranslate"><code>saveraw(func::Function,fname::String)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; saveraw(&quot;test.raw&quot;) do f
           for i=1:10
               write(f,rand(100,10,5))
           end
       end
julia&gt; rawsize(&quot;test.raw&quot;)
(100, 10, 50)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; saveraw("test.raw") do f
           for i=1:10
               write(f,rand(100,10,5))
           end
       end
julia&gt; rawsize("test.raw")
(100, 10, 50)
</code></pre></div>
<h3 dir="auto"><a id="user-content-progressive-reading" class="anchor" aria-hidden="true" href="#progressive-reading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Progressive reading</h3>
<p dir="auto">The <code>RawFileIter</code> Type is an interator that can be used to read through a file returning chunks of data (based on the parameter <code>num_batch</code>), instead of the entire file at once. The iteration is also encapsulated into the <code>readraw</code> function for convenience.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="RawFileIter(fname::String,num_batch::Int)
readraw(func::Function,fname::String,batch::Int)"><pre class="notranslate"><code>RawFileIter(fname::String,num_batch::Int)
readraw(func::Function,fname::String,batch::Int)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; for d in RawFileIter(&quot;test.raw&quot;,20)
                  @info(size(d))
              end
[ Info: (100, 10, 20)
[ Info: (100, 10, 20)
[ Info: (100, 10, 10)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; for d in RawFileIter("test.raw",20)
                  @info(size(d))
              end
[ Info: (100, 10, 20)
[ Info: (100, 10, 20)
[ Info: (100, 10, 10)
</code></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; readraw(&quot;test.raw&quot;,20) do c
           @info(size(c))
       end
[ Info: (100, 10, 20)
[ Info: (100, 10, 20)
[ Info: (100, 10, 10)"><pre lang="julia-repl" class="notranslate"><code>julia&gt; readraw("test.raw",20) do c
           @info(size(c))
       end
[ Info: (100, 10, 20)
[ Info: (100, 10, 20)
[ Info: (100, 10, 10)
</code></pre></div>
<p dir="auto"><a href="https://travis-ci.org/azraq27/RawFile.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dfd0e3e890e540484a218cad36a6788d770cd4a818ff9af3e01d8dd53b4cca0b/68747470733a2f2f7472617669732d63692e6f72672f617a72617132372f52617746696c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/azraq27/RawFile.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://coveralls.io/github/azraq27/RawFile.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/abc7ea7b845c93efbd76a9f9b473bc59d803066ae8fed3154787a704a3823e45/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f617a72617132372f52617746696c652e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/azraq27/RawFile.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="http://codecov.io/github/azraq27/RawFile.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/64583aaafb430f7dd646752c8cbbe03eed960c305b0d25cc4fd016cb4cd7e7be/687474703a2f2f636f6465636f762e696f2f6769746875622f617a72617132372f52617746696c652e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/azraq27/RawFile.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
</article></div>