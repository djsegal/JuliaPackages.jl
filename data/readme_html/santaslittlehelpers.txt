<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-santaslittlehelpersjl" class="anchor" aria-hidden="true" href="#santaslittlehelpersjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SantasLittleHelpers.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667"><img src="https://camo.githubusercontent.com/0058ce9713cb93a553c2f23207afbb49b1b852a70a4a24de20e2e816c58b299e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6578706572696d656e74616c2d6f72616e67652e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-experimental-orange.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/tbeason/SantasLittleHelpers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f3145a31734dcfaba2d7cbc1c0e5c8df42eb1f3ea51f466e347595a5de9b2d75/68747470733a2f2f7472617669732d63692e636f6d2f74626561736f6e2f53616e7461734c6974746c6548656c706572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/tbeason/SantasLittleHelpers.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/tbeason/SantasLittleHelpers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/e7f42e9b6eb9ee7124c3bbb0357f381a687f7bcf1c20791bcac5b3f0498d7106/687474703a2f2f636f6465636f762e696f2f6769746875622f74626561736f6e2f53616e7461734c6974746c6548656c706572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/tbeason/SantasLittleHelpers.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>

<p dir="auto"><a href="https://en.wikipedia.org/wiki/Santa%27s_Little_Helper" rel="nofollow"><img src="https://camo.githubusercontent.com/46e9c14a57c5eba946c730ea1e8cee9de2a6c45c1797cc562055c737b17d5ec8/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f656e2f382f38612f53616e7461734c6974746c6548656c7065722e706e67" alt="santaslittlehelper.jpg" data-canonical-src="https://upload.wikimedia.org/wikipedia/en/8/8a/SantasLittleHelper.png" style="max-width: 100%;"></a></p>
<p dir="auto">I factored out pieces of code that I always found myself using so that it would all live in one spot (here).</p>
<p dir="auto">This package has</p>
<ul dir="auto">
<li>Static rolling functions <code>applyrolling</code> and <code>makekernel</code> using StaticKernels.jl. For small window sizes, this is probably the fastest existing way to do rolling means, sums, etc.</li>
<li>Variance ratios <code>varianceratio</code></li>
<li>SIMD <code>skew</code> and <code>kurt</code> functions that are faster and more forgiving than <code>StatsBase.skewness</code> and <code>StatsBase.kurtosis</code></li>
<li>Autocorrelation function <code>autocorrelate</code> because <code>StatsBase.autocor</code> was too annoying when you only want the first one, and this is faster. Plus I allow for transformations like <code>autocorrelate(abs,x)</code> if you want the autocorrelation of absolute <code>x</code>. you can replicate <code>StatsBase.autocor</code> via <code>autocorrelate.(Ref(x),0:L)</code> where <code>L</code> are your desired lags.</li>
<li><code>correlogram(x,y;leadlags::Int=10)</code> for cross-correlations</li>
<li><code>nantomissing!</code> for DataFrames</li>
<li>Conditional correlations <code>conditionalcor(f,x,y)</code> spawning <code>downsidecor</code> and <code>upsidecor</code> (eventually will live in <a href="https://github.com/tbeason/AsymmetricRisk.jl">AsymmetricRisk.jl</a> when I give it more love)</li>
<li><code>loggrowth(x,n)</code> for computing log growth rates over different horizons</li>
<li><code>simiterator</code> and <code>perioditerator</code> for labelling observations in simulations.</li>
<li><code>yrqtrfun</code> and <code>monthtoquarter</code> Date-like helper functions</li>
</ul>
</article></div>