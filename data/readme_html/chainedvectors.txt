<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p>ChainedVectors consist of a bunch of types that:</p>
<ul>
<li>chain multiple Vectors and make it appear like a single Vector</li>
<li>give a window into a portion of the chained vector that appears like a single Vector. The window may straddle across boundaries of multiple elements in the chain.</li>
</ul>
<p><a href="https://travis-ci.org/tanmaykm/ChainedVectors.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5d66b53de605eb6cc9d947e656b292c04c10349/68747470733a2f2f7472617669732d63692e6f72672f74616e6d61796b6d2f436861696e6564566563746f72732e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/tanmaykm/ChainedVectors.jl.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-chainedvector" class="anchor" aria-hidden="true" href="#chainedvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ChainedVector</h2>
<p>Chains multiple vectors. Only index translation is done and the constituent Vectors are not copied. This can be efficient in situations where avoiding allocation and copying of data is important. For example, during sequential file reading, ChainedVectors can be used to store file blocks progressively as the file is read. As it grows beyond a certain size, buffers from the head of the chain can be removed and resued to read further data at the tail.</p>
<pre><code>julia&gt; v1 = [1, 2, 3]
3-element Int64 Array:
 1
 2
 3

julia&gt; v2 = [4, 5, 6]
3-element Int64 Array:
 4
 5
 6

julia&gt; cv = ChainedVector{Int}(v1, v2)
6-element Int64 ChainedVector:
[1, 2, 3, 4, 5, ...]

julia&gt; cv[1]
1

julia&gt; cv[5]
5
</code></pre>
<p>ChainedVector{Uint8} has specialized methods for <strong>search</strong>, <strong>beginswith</strong>, and <strong>beginswithat</strong> that help in working with textual data.</p>
<pre><code>julia&gt; cv = ChainedVector{Uint8}(b"Hello World ", b"Goodbye World ")
26-element Uint8 ChainedVector:
[0x48, 0x65, 0x6c, 0x6c, 0x6f, ...]

julia&gt; search(cv, 'W')
7

julia&gt; search(cv, 'W', 8)
21

julia&gt; search(cv, 'W', 22)
0

julia&gt; beginswith(cv, b"Hello")
true

julia&gt; beginswith(cv, b"ello")
false

julia&gt; beginswithat(cv, 2, b"ello")
true

julia&gt; beginswithat(cv, 7, b"World Goodbye")
true
</code></pre>
<h2><a id="user-content-window-view-of-a-chainedvector" class="anchor" aria-hidden="true" href="#window-view-of-a-chainedvector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Window view of a ChainedVector</h2>
<p>Using the <strong>sub</strong> method, a portion of the data in the ChainedVector can be accessed as a view:</p>
<pre><code>sub(cv::ChainedVector, r::Range1{Int})
</code></pre>
<p>Example:</p>
<pre><code>julia&gt; v1 = [1, 2, 3, 4, 5, 6];

julia&gt; v2 = [7, 8, 9, 10, 11, 12];

julia&gt; cv = ChainedVector{Int}(v1, v2);

julia&gt; sv = sub(cv, 3:10)
8-element Int64 SubVector:
[3, 4, 5, 6, 7, ...]


julia&gt; sv[1]
3

julia&gt; # sv[7] is the same as cv[9] and v2[3]

julia&gt; println("sv[7]=$(sv[7]), v2[3]=$(v2[3]), cv[9]=$(cv[9])")
sv[7]=9, v2[3]=9, cv[9]=9

julia&gt; 

julia&gt; # changing values through sv will be visible at cv and v2

julia&gt; sv[7] = 71
71

julia&gt; println("sv[7]=$(sv[7]), v2[3]=$(v2[3]), cv[9]=$(cv[9])")
sv[7]=71, v2[3]=71, cv[9]=71
</code></pre>
<p>The sub method returns a Vector that indexes into the chained vector at the given range. The returned Vector is not a copy and any modifications affect the Chainedvector and consequently the constituent vectors of the ChainedVector as well. The returned vector can be an instance of either a SubVector or a Vector obtained through the method fast_sub_vec.</p>
<dl>
<dt>SubVector</dt>
<dd>
Provides index translations for abstract vectors. 
Example:
<pre>julia&gt; v1 = [1, 2, 3, 4, 5, 6];
<p>julia&gt; sv = SubVector(v1, 2:5)
4-element Int64 SubVector:
[2, 3, 4, 5, ]</p>
<p>julia&gt; sv[1]
2</p>
<p>julia&gt; sv[1] = 20
20</p>
<p>julia&gt; v1[2]
20
</p></pre><p></p>
</dd>
<dt>fast_sub_vec</dt>
<dd>
Provides an optimized way of creating a Vector that points within another Vector and uses the same underlying data. Since it reuses the same memory locations, it works only on concrete Vectors that give contiguous memory locations. Internally the instance of the view vector is maintained in a WeakKeyDict along with a reference to the larger vector to prevent gc from releasing the parent vector till the view is in use.
Example:
<pre>julia&gt; v1 = [1, 2, 3, 4, 5, 6];
<p>julia&gt; sv = fast_sub_vec(v1, 2:5)
4-element Int64 Array:
2
3
4
5</p>
<p>julia&gt;</p>
<p>julia&gt; println("sv[1]=$(sv[1]), v1[2]=$(v1[2])")
sv[1]=2, v1[2]=2</p>
<p>julia&gt; sv[1] = 20
20</p>
<p>julia&gt; println("sv[1]=$(sv[1]), v1[2]=$(v1[2])")
sv[1]=20, v1[2]=20
</p></pre><p></p>
</dd>
</dl>
<h2><a id="user-content-tests-and-benchmarks" class="anchor" aria-hidden="true" href="#tests-and-benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tests and Benchmarks</h2>
<p>Below is the output of some benchmarks done using time_tests.jl located in the test folder.</p>
<pre><code>Times for getindex across all elements of vectors of 33554432 integers.
Split into two 16777216 buffers for ChainedVectors.

Vector: 0.041909848
ChainedVector: 0.261795721
SubVector: 0.172702399
FastSubVector: 0.041579312
SubArray: 3.848813439
SubVector of ChainedVector: 0.418898455
</code></pre>
</article></div>