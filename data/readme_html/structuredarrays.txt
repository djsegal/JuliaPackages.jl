<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-structured-arrays-for-julia" class="anchor" aria-hidden="true" href="#structured-arrays-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structured arrays for Julia</h1>
<table>
<thead>
<tr>
<th align="left"><strong>License</strong></th>
<th align="left"><strong>Build Status</strong></th>
<th align="left"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><a href="./LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a></td>
<td align="left"><a href="https://travis-ci.org/emmt/StructuredArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1a67c45bd4e486a052338d645c99441542b40b8e31c494f61cc865d059703868/68747470733a2f2f7472617669732d63692e6f72672f656d6d742f537472756374757265644172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/emmt/StructuredArrays.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/emmt/StructuredArrays-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e415d66acda75ccbbeddbdfab0ff513dfa292b22d8a19cac8ee1fc3216fb5650/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656d6d742f537472756374757265644172726179732e6a6c3f6272616e63683d6d6173746572" alt="" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/emmt/StructuredArrays.jl?branch=master" style="max-width:100%;"></a></td>
<td align="left"><a href="https://coveralls.io/github/emmt/StructuredArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/88594986f871ddb6c3f6a472b23515ddd3771ad90bcc698808d247d18138fb96/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f656d6d742f537472756374757265644172726179732e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="" data-canonical-src="https://coveralls.io/repos/emmt/StructuredArrays.jl/badge.svg?branch=master&amp;service=github" style="max-width:100%;"></a> <a href="http://codecov.io/github/emmt/StructuredArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/1f57b9f2d89cb092a50f801c2fb448f4b7af01e56825fd05c660b919487d8a31/687474703a2f2f636f6465636f762e696f2f6769746875622f656d6d742f537472756374757265644172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="http://codecov.io/github/emmt/StructuredArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<p><code>StructuredArrays</code> is a small <a href="https://julialang.org/" rel="nofollow">Julia</a> package which
provides multi-dimensional arrays behaving like regular arrays but whose
elements have the same given value or are computed by applying a given function
to their indices.  The main advantage of such arrays is that they are very
light in terms of memory: their storage requirement is <code>O(1)</code> whatever their
size instead of <code>O(n)</code> for a usual array of <code>n</code> elements.</p>
<p>Note that <code>StructuredArrays</code> has a different purpose than
<a href="https://github.com/JuliaArrays/StructArrays.jl"><code>StructArrays</code></a> which is
designed for arrays whose elements are <code>struct</code>.</p>
<h2><a id="user-content-uniform-arrays" class="anchor" aria-hidden="true" href="#uniform-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Uniform arrays</h2>
<p>All elements of a uniform array have the same value.  To build such an array,
call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = UniformArray(val, siz)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">UniformArray</span>(val, siz)</pre></div>
<p>which yields an array <code>A</code> behaving as a read-only array of size <code>siz</code> whose
values are all <code>val</code>.  The array dimensions may be specified as multiple
arguments.</p>
<p>Uniform arrays implement conventional linear indexing: <code>A[i]</code> yields <code>val</code> for
all linear indices <code>i</code> in the range <code>1:length(A)</code>.</p>
<p>Statements like <code>A[i] = val</code> are however not implemented because uniform arrays
are considered as read-only.  You may call <code>MutableUniformArray(val,siz)</code> to
create a uniform array, say <code>B</code>, whose element value can be changed:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="B = MutableUniformArray(val, siz)
"><pre>B <span class="pl-k">=</span> <span class="pl-c1">MutableUniformArray</span>(val, siz)</pre></div>
<p>A statement like <code>B[i] = val</code> is allowed to change the value of all the
elements of <code>B</code> provided index <code>i</code> represents all possible indices in <code>B</code>.
Typically <code>B[:] = val</code> or <code>B[1:end] = val</code> are accepted but not <code>B[1] = val</code>
unless <code>B</code> has a single element.</p>
<p>Apart from all values being the same, uniform arrays should behaves like
ordinary Julia arrays.</p>
<h2><a id="user-content-structured-arrays" class="anchor" aria-hidden="true" href="#structured-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Structured arrays</h2>
<p>The values of the elements of a structured array are computed on the fly as a
function of their indices.  To build such an array, call:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = StructuredArray(fnc, siz)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">StructuredArray</span>(fnc, siz)</pre></div>
<p>which yields an array <code>A</code> behaving as a read-only array of size <code>siz</code> whose
entries are computed as a given function, here <code>fnc</code>, of its indices: <code>A[i]</code>
yields <code>fnc(i)</code>.  The array dimensions may be specified as multiple arguments.</p>
<p>An optional leading argument <code>S</code> may be used to specify another index style
than the default <code>IndexCartesian</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="A = StructuredArray(S, fnc, siz)
"><pre>A <span class="pl-k">=</span> <span class="pl-c1">StructuredArray</span>(S, fnc, siz)</pre></div>
<p>where <code>S</code> may be a sub-type of <code>IndexStyle</code> or an instance of such a sub-type.
If <code>S</code> is <code>IndexCartesian</code> (the default), the function <code>fnc</code> will be called
with <code>N</code> integer arguments, <code>N</code> being the number of dimensions.  If <code>S</code> is
<code>IndexLinear</code>, the function <code>fnc</code> will be called with a single integer
argument.</p>
<p>A structured array can be used to specify the location of structural non-zeros
in a sparse matrix.  For instance, the structure of a lower triangular matrix
of size <code>m×n</code> would be given by:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="StructuredArray((i,j) -&gt; (i ≥ j), m, n)
"><pre><span class="pl-c1">StructuredArray</span>((i,j) <span class="pl-k">-&gt;</span> (i <span class="pl-k">≥</span> j), m, n)</pre></div>
<p>but with a constant small storage requirement whatever the size of the matrix.</p>
<p>Although the callable object <code>fnc</code> may not be a <em>pure function</em>, its return
type shall be stable and structured arrays are considered as immutable in the
sense that a statement like <code>A[i] = val</code> is not implemented.  The type of the
elements of structured array is guessed by applying <code>fnc</code> to the unit index.
The element type, say <code>T</code>, may also be explicitely specified:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="StructuredArray{T}([S = IndexCartesian,] fnc, siz)
"><pre><span class="pl-c1">StructuredArray</span><span class="pl-c1">{T}</span>([S <span class="pl-k">=</span> IndexCartesian,] fnc, siz)</pre></div>
</article></div>