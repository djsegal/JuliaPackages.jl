<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-grundmann-möller-n-dimensional-simplex-quadrature" class="anchor" aria-hidden="true" href="#grundmann-möller-n-dimensional-simplex-quadrature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Grundmann-Möller n-dimensional Simplex Quadrature</h1>
<p><a href="https://github.com/eschnett/GrundmannMoeller.jl/actions"><img src="https://github.com/eschnett/GrundmannMoeller.jl/workflows/CI/badge.svg" alt="GitHub CI" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/GrundmannMoeller/wPnI6?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/4fb798320217170a4d792c0367b86b9dc40d0978ecfc5d6f28cf304f66e1c260/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4772756e646d616e6e4d6f656c6c65722f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/GrundmannMoeller/deps.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/GrundmannMoeller/wPnI6" rel="nofollow"><img src="https://camo.githubusercontent.com/c399432f32e7748c6a8842e931bbcdb54a03626705ab5993e4cbb8b220cddc6a/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4772756e646d616e6e4d6f656c6c65722f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/GrundmannMoeller/version.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/GrundmannMoeller/wPnI6" rel="nofollow"><img src="https://camo.githubusercontent.com/bcc74cc66d6c4616c1b7960925e70d03bc7a50003c341aaf1722556d7a8e70b4/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f4772756e646d616e6e4d6f656c6c65722f706b676576616c2e737667" alt="pkgeval" data-canonical-src="https://juliahub.com/docs/GrundmannMoeller/pkgeval.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-description" class="anchor" aria-hidden="true" href="#description"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Description</h2>
<p>This package calculates integrations points and weights for numerical
quadrature (i.e. integrating a function) over an <code>n</code>-dimensional
simplex. It supports arbitrary (odd) degrees of accuracy, and supports
arbitrary floating-point types.</p>
<h2><a id="user-content-sample-usage" class="anchor" aria-hidden="true" href="#sample-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample usage</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using GrundmannMoeller

julia&gt; # Obtain quadrature scheme (2 dimensions, degree 5; degree must be odd)

julia&gt; scheme = grundmann_moeller(Float64, Val(2), 5);

julia&gt; length(scheme.weights)
10

julia&gt; # Apply scheme

julia&gt; vertices = [[0,0], [1,0], [0,1]];

julia&gt; f(x) = x[1]*x[2]
f (generic function with 1 method)

julia&gt; q = integrate(f, scheme, vertices)
0.04166666666666668

julia&gt; q ≈ 1/24
true
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> GrundmannMoeller

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Obtain quadrature scheme (2 dimensions, degree 5; degree must be odd)</span>

julia<span class="pl-k">&gt;</span> scheme <span class="pl-k">=</span> <span class="pl-c1">grundmann_moeller</span>(Float64, <span class="pl-c1">Val</span>(<span class="pl-c1">2</span>), <span class="pl-c1">5</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">length</span>(scheme<span class="pl-k">.</span>weights)
<span class="pl-c1">10</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Apply scheme</span>

julia<span class="pl-k">&gt;</span> vertices <span class="pl-k">=</span> [[<span class="pl-c1">0</span>,<span class="pl-c1">0</span>], [<span class="pl-c1">1</span>,<span class="pl-c1">0</span>], [<span class="pl-c1">0</span>,<span class="pl-c1">1</span>]];

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x) <span class="pl-k">=</span> x[<span class="pl-c1">1</span>]<span class="pl-k">*</span>x[<span class="pl-c1">2</span>]
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> <span class="pl-c1">integrate</span>(f, scheme, vertices)
<span class="pl-c1">0.04166666666666668</span>

julia<span class="pl-k">&gt;</span> q <span class="pl-k">≈</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">24</span>
<span class="pl-c1">true</span></pre></div>
<h2><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Reference</h2>
<h3><a id="user-content-create-a-quadrature-scheme" class="anchor" aria-hidden="true" href="#create-a-quadrature-scheme"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create a quadrature scheme</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    grundmann_moeller(::Type{T}, ::Val{D}, degree::Int)
"><pre>    <span class="pl-c1">grundmann_moeller</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>, <span class="pl-k">::</span><span class="pl-c1">Val{D}</span>, degree<span class="pl-k">::</span><span class="pl-c1">Int</span>)</pre></div>
<ul>
<li><code>T</code>: desired floating point type</li>
<li><code>D</code>: dimension</li>
<li><code>degree</code>: desired polynomial degree of accuracy (must be odd)</li>
</ul>
<h3><a id="user-content-evaluate-an-integral-apply-the-scheme" class="anchor" aria-hidden="true" href="#evaluate-an-integral-apply-the-scheme"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Evaluate an integral (apply the scheme)</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    integrate(fun, scheme, vertices::AbstractVector)
    integrate(fun, scheme, vertices::AbstractMatrix)
"><pre>    <span class="pl-c1">integrate</span>(fun, scheme, vertices<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)
    <span class="pl-c1">integrate</span>(fun, scheme, vertices<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>)</pre></div>
<ul>
<li><code>fun</code>: integrand, should accept an
<a href="https://github.com/JuliaArrays/StaticArrays.jl"><code>SVector</code></a> as
argument</li>
<li><code>scheme</code>: quadrature scheme</li>
<li><code>vertices</code>: vertices of the simplex</li>
</ul>
<p>The vertices need to be passed either as a vector-of-vectors or as a
matrix. In the first case, there need to be <code>D+1</code> points with <code>D</code>
coordinates each. In the second case, the matrix needs to have size
<code>D</code>×<code>D+1</code>.</p>
<h2><a id="user-content-provenance-of-this-package" class="anchor" aria-hidden="true" href="#provenance-of-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Provenance of this package</h2>
<p>This package is a Julia translation of one of the algorithms of the
Python <a href="https://github.com/nschloe/quadpy"><code>quadpy</code></a> package by Nico
Schlömer.</p>
<p>The algorithm itself was published by</p>
<ul>
<li>A. Grundmann, H. M. Möller, "Invariant integration formulas for the
<code>n</code>-simplex by combinatorial methods", SIAM J. Numer. Anal. 15,
282-290 (1978), <a href="https://doi.org/10.1137/0715019" rel="nofollow">DOI
10.1137/0715019</a>.</li>
</ul>
<h2><a id="user-content-related-work" class="anchor" aria-hidden="true" href="#related-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related work</h2>
<p>See <a href="https://github.com/eschnett/SimplexQuad.jl"><code>SimplexQuad.jl</code></a> for
a simplex quadrature package that uses a different algorithm.</p>
</article></div>