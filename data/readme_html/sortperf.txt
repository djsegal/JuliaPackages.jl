<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h2><a id="user-content-sortperfjl-module-to-test-the-performance-of-sorting-algorithms" class="anchor" aria-hidden="true" href="#sortperfjl-module-to-test-the-performance-of-sorting-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SortPerf.jl: Module to test the performance of sorting algorithms</h2>
<p>The purpose of this module is to test the performance of the different sort (and related) algorithms in Julia.  See <a href="https://github.com/kmsquire/SortPerf.jl/raw/master/sortperf.pdf">https://github.com/kmsquire/SortPerf.jl/raw/master/sortperf.pdf</a> for an example output from Version 0.3.0-prerelease+125.</p>
<p>Run with:</p>
<pre><code>std_sort_tests(;sort_algs=SortPerf.sort_algs,   # [InsertionSort, HeapSort, MergeSort, 
                                                #     QuickSort, RadixSort, TimSort]
                types=SortPerf.std_types,       # [Int32, Int64, Int128, Float32, Float64, String]
                range=6:20,                     # Array size 2^6 through 2^20, by powers of 2
                replicates=3,                   #
                lt::Function=isless,            # \
                by::Function=identity,          #  | sort(...) options
                rev::Bool=false,                #  |
                order::Ordering=Forward,        # /
                save::Bool=false,               # create and save timing tsv and pdf plot
                prefix="sortperf")              # prefix for saved files
</code></pre>
<p>You can also test individual algorithms with</p>
<pre><code>sortperf(Algorithm(s), data, [size,] [replicates=xxx])
</code></pre>
<p>Some examples:</p>
<pre><code>sortperf(QuickSort, Int, 10_000)               # Test QuickSort on 10,000 random ints
sortperf(MergeSort, [Float32, String], 6:2:10) # Test MergeSort on 2^6, 2^8, and 2^10 float 32s and strings
sortperf([QuickSort, MergeSort, TimSort],      # Test QuickSort, MergeSort, and TimSort on 
         [Int, Float32, Float64, String],      # Arrays of Int, Float32, Float64, and String
         6:20;                                 # ranging from 2^6 elements to 2^20 elements, by 
         replicates=5)                         # powers of 2, and run each test 5 times
</code></pre>
<p>Ordering parameters accepted by sort!(...) will be passed through.</p>
<h2><a id="user-content-sorting-tests" class="anchor" aria-hidden="true" href="#sorting-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sorting Tests</h2>
<p>The actual tests run include sorting arrays with the following characteristics:</p>
<ul>
<li>random</li>
<li>sorted</li>
<li>reversed</li>
<li>sorted, but with 3 random exchanges</li>
<li>sorted, with 10 random values appended</li>
<li>4 unique values</li>
<li>all equal</li>
<li>quicksort median killer: first half descending, second half ascending</li>
</ul>
<p>The tests were inspired by similar tests used by sortperf in Python.  See <a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt" rel="nofollow">http://svn.python.org/projects/python/trunk/Objects/listsort.txt</a> for more details.</p>
<h2><a id="user-content-suggestions-based-on-basic-tests" class="anchor" aria-hidden="true" href="#suggestions-based-on-basic-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Suggestions based on basic tests</h2>
<p>Here is a table and some notes on the Julia implementations of the
various algorithms.  The table indicates the recommended sort
algorithm for the given size (<code>small &lt; ~2^12 (=8,192) items &lt; large</code>)
and type (string, floating point, or integer) of data.</p>
<ul>
<li><em>Random</em> means that the data is permuted randomly.</li>
<li><em>Structured</em> here means that the data contains partially sorted runs
(such as when adding random data to an already sorted array).</li>
<li><em>Few unique</em> indicates that the data only contains a few unique
values.</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th align="center">(Un)stable (small)</th>
<th align="center">Stable (small)</th>
<th align="center">(Un)stable (large)</th>
<th align="center">Stable (large)</th>
<th align="center">In-place (large)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Strings</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>- Random</td>
<td align="center">M</td>
<td align="center">M</td>
<td align="center">M</td>
<td align="center">M</td>
<td align="center">Q</td>
</tr>
<tr>
<td>- Structured</td>
<td align="center">M</td>
<td align="center">M</td>
<td align="center">T</td>
<td align="center">T</td>
<td align="center">Q</td>
</tr>
<tr>
<td>- Few Unique</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">Q</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Float64</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>- Random</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">R</td>
<td align="center">R</td>
<td align="center">Q</td>
</tr>
<tr>
<td>- Structured</td>
<td align="center">M</td>
<td align="center">M</td>
<td align="center">T</td>
<td align="center">T</td>
<td align="center">Q</td>
</tr>
<tr>
<td>- Few Unique</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">Q</td>
<td align="center">R</td>
<td align="center">Q</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td><strong>Int64</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td>- Random</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">R</td>
<td align="center">R</td>
<td align="center">Q</td>
</tr>
<tr>
<td>- Structured</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">uT</td>
<td align="center">R/T</td>
<td align="center">Q</td>
</tr>
<tr>
<td>- Few Unique</td>
<td align="center">Q</td>
<td align="center">M</td>
<td align="center">R</td>
<td align="center">R</td>
<td align="center">Q</td>
</tr>
</tbody>
</table>
<p>Key:</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Algorithm</th>
</tr>
</thead>
<tbody>
<tr>
<td>H</td>
<td><code>HeapSort</code></td>
</tr>
<tr>
<td>I</td>
<td><code>InsertionSort</code></td>
</tr>
<tr>
<td>M</td>
<td><code>MergeSort</code></td>
</tr>
<tr>
<td>Q</td>
<td><code>QuickSort</code></td>
</tr>
<tr>
<td>T</td>
<td><code>TimSort</code></td>
</tr>
<tr>
<td>uT</td>
<td><code>TimSortUnstable</code></td>
</tr>
<tr>
<td>R</td>
<td><code>RadixSort</code></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-current-recommendations" class="anchor" aria-hidden="true" href="#current-recommendations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Current Recommendations</h2>
<ul>
<li>
<p>Except for pathological cases, small arrays are sorted best with
<code>QuickSort</code> (unstable) or `MergeSort`` (stable)</p>
</li>
<li>
<p>When sorting large arrays with sections of already-sorted data, use
<code>TimSort</code>.  The only structured case it does not handle well is
reverse-sorted data with large numbers of repeat elements.  An
unstable version of <code>TimSort</code> (to be contributed to Julia soon) will
handle this case</p>
</li>
<li>
<p>For numerical data (Ints or Floats) without structure, <code>RadixSort</code> is
the best choice, except for 1) 128-bit values, or 2) 64-bit integers
which span the full range of values.</p>
</li>
<li>
<p>When memory is tight, <code>QuickSort</code> is the best in-place algorithm.  If
there is concern about pathological cases, use <code>HeapSort</code>.  All
stable algorithms use additional memory, but <code>TimSort</code> is (probably)
the most frugal.</p>
</li>
<li>
<p><strong>Composite types may behave differently.</strong>  If sorting is
important to your application, you should test the different
algorithms on your own data.  This package facilitates that.</p>
</li>
</ul>
</article></div>