<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-threejs" class="anchor" aria-hidden="true" href="#threejs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreeJS</h1>
<p dir="auto">Linux, OSX: <a href="https://travis-ci.org/rohitvarkey/ThreeJS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/161f0fc9ee47d28ca029df0e1cd41e54afa05a5fac1393db008440f7126d5a5a/68747470733a2f2f7472617669732d63692e6f72672f726f6869747661726b65792f54687265654a532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rohitvarkey/ThreeJS.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">Windows: <a href="https://ci.appveyor.com/project/rohitvarkey/threejs-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/7d67ebc4563ec8fe99e08bd136230d6342d02febca78858885380ebfbed00ae1/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f306c64617535783866787830396b67762f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/0ldau5x8fxx09kgv/branch/master?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto">Code Coverage: <a href="https://coveralls.io/github/rohitvarkey/ThreeJS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/c8e1cf2ad7fd6d5be5b1c533016ca9615a2d0b1c51d3ecdf7ee124e200144317/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f726f6869747661726b65792f54687265654a532e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/rohitvarkey/ThreeJS.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/rohitvarkey/ThreeJS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/2faca68080047f1341f5866e0ce7b11f52deb7652ce52570578a4030bf9c54c5/687474703a2f2f636f6465636f762e696f2f6769746875622f726f6869747661726b65792f54687265654a532e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/rohitvarkey/ThreeJS.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia module to render graphical objects, especially 3-D objects, using
the ThreeJS abstraction over WebGL.
Outputs <a href="https://github.com/shashi/Patchwork.jl">Patchwork</a> Elems of
<a href="https://github.com/rohitvarkey/three-js">three-js</a> custom elements. Meant to be
used to help packages like <a href="https://github.com/rohitvarkey/Compose3D.jl">Compose3D</a>
render 3D output.</p>
<table>
<thead>
<tr>
<th><a href="https://github.com/rohitvarkey/ThreeJS.jl/blob/df78531c88dd2619be73fef74b4b5268cfd89c4d/examples/rotatingcube.jl"><img src="https://camo.githubusercontent.com/171887ec9b737effd8e5a3639c6675aac8702d9b/68747470733a2f2f676973742e6769746875622e636f6d2f726f6869747661726b65792f31643635393235383530313938626332383466352f7261772f623764633431663262336638363963313033646362636237393633326639323339373736376230312f726f746174696e675f637562652e676966" alt="" style="max-width: 100%;"></a></th>
<th><a href="https://github.com/rohitvarkey/ThreeJS.jl/blob/df78531c88dd2619be73fef74b4b5268cfd89c4d/examples/3dpath.jl"><img src="https://camo.githubusercontent.com/a477c26b7441d91f4d5545c397c9ee3b921cf8f4c9f308c3d75c9d98649965c0/68747470733a2f2f676973742e6769746875622e636f6d2f726f6869747661726b65792f31643635393235383530313938626332383466352f7261772f356130356435306665343861646139343633646532363331653632383762343161346537383839392f3364706174682e706e673f7261773d74727565" alt="" data-canonical-src="https://gist.github.com/rohitvarkey/1d65925850198bc284f5/raw/5a05d50fe48ada9463de2631e6287b41a4e78899/3dpath.png?raw=true" style="max-width: 100%;"></a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/rohitvarkey/ThreeJS.jl/blob/df78531c88dd2619be73fef74b4b5268cfd89c4d/examples/mesh.jl"><img src="https://camo.githubusercontent.com/120e5fe651d5f6026955da14c0ad2a83193db591d5a8809290dfdffcb3c40fb7/68747470733a2f2f676973742e6769746875622e636f6d2f726f6869747661726b65792f31643635393235383530313938626332383466352f7261772f356130356435306665343861646139343633646532363331653632383762343161346537383839392f7363616c655f6361742e6769663f7261773d74727565" alt="" data-animated-image="" data-canonical-src="https://gist.github.com/rohitvarkey/1d65925850198bc284f5/raw/5a05d50fe48ada9463de2631e6287b41a4e78899/scale_cat.gif?raw=true" style="max-width: 100%;"></a></td>
<td><a href="https://github.com/rohitvarkey/ThreeJS.jl/blob/df78531c88dd2619be73fef74b4b5268cfd89c4d/examples/surfmesh.jl"><img src="https://camo.githubusercontent.com/0a369de06f3626bcc8ac3786842d50674361626a14e78666f1a401542db3e50f/68747470733a2f2f676973742e6769746875622e636f6d2f726f6869747661726b65792f31643635393235383530313938626332383466352f7261772f356130356435306665343861646139343633646532363331653632383762343161346537383839392f737572666d6573682e6769663f7261773d74727565" alt="" data-animated-image="" data-canonical-src="https://gist.github.com/rohitvarkey/1d65925850198bc284f5/raw/5a05d50fe48ada9463de2631e6287b41a4e78899/surfmesh.gif?raw=true" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Click on any of the above examples to see the code used to draw them.</p>
<h3 dir="auto"><a id="user-content-where-can-these-be-used" class="anchor" aria-hidden="true" href="#where-can-these-be-used"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Where can these be used?</h3>
<p dir="auto">This can be used in <a href="https://github.com/JuliaLang/IJulia.jl/">IJulia</a>
and <a href="https://github.com/shashi/Escher.jl">Escher</a> to embed 3D graphics.</p>
<h3 dir="auto"><a id="user-content-dependencies" class="anchor" aria-hidden="true" href="#dependencies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dependencies</h3>
<p dir="auto">WebGL lets you interact with the GPU in a browser. As long as you have a modern
browser, and it supports WebGL (Check this <a href="https://get.webgl.org/" rel="nofollow">link</a>
to see if it does!), the output of this package will just work.</p>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;ThreeJS&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ThreeJS<span class="pl-pds">"</span></span>)</pre></div>
<h3 dir="auto"><a id="user-content-development" class="anchor" aria-hidden="true" href="#development"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Development</h3>
<p dir="auto">Running <code>Pkg.build("ThreeJS")</code> fetches and installs the <a href="https://github.com/rohitvarkey/three-js">three-js</a>
webcomponents. This will be done automatically if you install ThreeJS.jl using <code>Pkg.add("ThreeJS")</code>.</p>
<p dir="auto">However, if you clone ThreeJS.jl (with <code>Pkg.clone</code> or otherwise), then these webcomponents
must be installed manually into <code>assets/bower_components</code>. This is done to allow simultaneous
development of both repositories.</p>
<h3 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h3>
<p dir="auto">API documentation can be found <a href="https://rohitvarkey.github.io/ThreeJS.jl" rel="nofollow">here</a>.</p>
<h4 dir="auto"><a id="user-content-ijulia" class="anchor" aria-hidden="true" href="#ijulia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>IJulia</h4>
<p dir="auto">For use in IJulia notebooks, <code>using ThreeJS</code> will set up everything including
static files.</p>
<p dir="auto">NOTE: If you are restarting the kernel, and doing <code>using ThreeJS</code> again, please
reload the page, after deleting the cell where you did <code>using ThreeJS</code>.</p>
<h4 dir="auto"><a id="user-content-escher" class="anchor" aria-hidden="true" href="#escher"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Escher</h4>
<p dir="auto">Adding <code>push!(window.assets,("ThreeJS","threejs"))</code> in your Escher code,
will get the static files set up and you can do 3D Graphics in Escher!</p>
<h4 dir="auto"><a id="user-content-general-web-servers" class="anchor" aria-hidden="true" href="#general-web-servers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>General web servers</h4>
<p dir="auto">To use in a web server, you will need to serve the asset files found in the
<code>assets/</code> directory. Then adding a HTML import to the <code>three-js.html</code> file in
the <code>assets/bower_components/three-js</code> will get you all set up! This is done
by adding the following line to your HTML file.</p>
<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;link rel=&quot;import&quot; href=&quot;assets/bower_components/three-js/three-js.html&quot;&gt;"><pre><span class="pl-kos">&lt;</span><span class="pl-ent">link</span> <span class="pl-c1">rel</span>="<span class="pl-s">import</span>" <span class="pl-c1">href</span>="<span class="pl-s">assets/bower_components/three-js/three-js.html</span>"<span class="pl-kos">&gt;</span></pre></div>
<h3 dir="auto"><a id="user-content-how-to-create-a-scene" class="anchor" aria-hidden="true" href="#how-to-create-a-scene"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to create a scene?</h3>
<p dir="auto">For rendering Three-JS elements, all tags should be nested in a <code>three-js</code> tag.
This can be done by using the <code>initscene</code> function. An outer div to put this in
is also required and can be created by using the <code>outerdiv</code> function.</p>
<p dir="auto">The code snippet below should get a scene initialized.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ThreeJS
outerdiv() &lt;&lt; initscene()"><pre><span class="pl-k">using</span> ThreeJS
<span class="pl-c1">outerdiv</span>() <span class="pl-k">&lt;&lt;</span> <span class="pl-c1">initscene</span>()</pre></div>
<p dir="auto">By default, a scene of <code>1000px x 562px</code> is created. Support to change this will
be added soon.</p>
<h3 dir="auto"><a id="user-content-creating-meshes" class="anchor" aria-hidden="true" href="#creating-meshes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Creating meshes</h3>
<p dir="auto">In Three-JS, meshes are objects that can be drawn in the scene. These require a
<code>geometry</code> and a <code>material</code> to be created. Meshes decide the properties as to the
position of where the object is drawn.</p>
<p dir="auto">A mesh can be created using the <code>mesh</code> function taking the coordinates <code>(x,y,z)</code>
as its arguments.</p>
<p dir="auto">A <code>geometry</code> and a <code>material</code> element should be nested inside this <code>mesh</code>.</p>
<h4 dir="auto"><a id="user-content-geometries" class="anchor" aria-hidden="true" href="#geometries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Geometries</h4>
<p dir="auto">Geometries hold all details necessary to describe a 3D model. These can be
thought of as the shapes we want to display.</p>
<p dir="auto">ThreeJS.jl provides support to render the following geometry primitives:</p>
<ul dir="auto">
<li>Boxes - <code>box(width, height, depth)</code></li>
<li>Spheres - <code>sphere(radius)</code></li>
<li>Pyramids - <code>pyramid(base, height)</code></li>
<li>Cylinders - <code>cylinder(topradius, bottomradius, height)</code></li>
<li>Tori - <code>torus(radius, tuberadius)</code></li>
<li>Parametric Surfaces - <code>parametric(slices, stacks, xrange, yrange, function)</code></li>
<li>Dodecahedron - <code>dodecahedron(radius)</code></li>
<li>Icosahedron - <code>icosahedron(radius)</code></li>
<li>Octahedron - <code>octahedron(radius)</code></li>
<li>Tetrahedron - <code>tetrahedron(radius)</code></li>
<li>Planes - <code>plane(width, height)</code></li>
</ul>
<p dir="auto">These functions will return the appropriate <code>geometry</code> tags that are to be nested
inside a <code>mesh</code> along with a <code>material</code> to render.</p>
<h4 dir="auto"><a id="user-content-custom-geometries" class="anchor" aria-hidden="true" href="#custom-geometries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom Geometries</h4>
<p dir="auto">The <code>geometry</code> function is able to render custom geometries, which are specified
by the vertices and the faces.</p>
<h4 dir="auto"><a id="user-content-materials" class="anchor" aria-hidden="true" href="#materials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Materials</h4>
<p dir="auto">Materials are what decides how the model responds to light, color and such
properties of the material.</p>
<p dir="auto">A <code>material</code> tag is created by using the <code>material</code> function. Properties are
to be passed as a <code>Dict</code> to this function.</p>
<p dir="auto">Available properties are:</p>
<ul dir="auto">
<li><code>color</code> - Can be any CSS color value.</li>
<li><code>kind</code> - Can be <a href="http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial" rel="nofollow"><code>lambert</code></a>,
<a href="http://threejs.org/docs/#Reference/Materials/MeshBasicMaterial" rel="nofollow"><code>basic</code></a>,
<a href="http://threejs.org/docs/#Reference/Materials/MeshPhongMaterial" rel="nofollow"><code>phong</code></a>,
<a href="http://threejs.org/docs/#Reference/Materials/MeshNormalMaterial" rel="nofollow"><code>normal</code></a>, or
<code>texture</code>(for texture mapping)</li>
<li><code>texture</code> - URL of image to be mapped as texture. Will be applied only if <code>kind</code> is set to <code>texture</code>.</li>
<li><code>wireframe</code> - <code>true</code> or <code>false</code></li>
<li><code>hidden</code> - <code>true</code> or <code>false</code></li>
<li><code>transparent</code> - <code>true</code> or <code>false</code>. Set to <code>true</code> to get proper rendering for transparent objects.</li>
<li><code>opacity</code> - Number between 0.0 and 1.0 (fully opaque).</li>
</ul>
<p dir="auto">Some helper functions to get these key value pairs is given in <code>src/properties.jl</code>.</p>
<h4 dir="auto"><a id="user-content-putting-them-together" class="anchor" aria-hidden="true" href="#putting-them-together"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Putting them together</h4>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mesh(0.0, 0.0, 0.0) &lt;&lt;
    [box(1.0,1.0,1.0), material(Dict(:kind=&gt;&quot;basic&quot;,:color=&gt;&quot;red&quot;)]"><pre><span class="pl-c1">mesh</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>) <span class="pl-k">&lt;&lt;</span>
    [<span class="pl-c1">box</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>), <span class="pl-c1">material</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:kind</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>basic<span class="pl-pds">"</span></span>,<span class="pl-c1">:color</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>)]</pre></div>
<p dir="auto">will create a cube of size 1.0 of red color and with the basic material.</p>
<h3 dir="auto"><a id="user-content-lines" class="anchor" aria-hidden="true" href="#lines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lines</h3>
<p dir="auto">Lines can be drawn by specifying the vertices of the line in the order to be
joined. Lines can either be of <code>"strip"</code> or <code>"pieces"</code> kinds, which decide how
the vertices should be joined. <code>"strip"</code> lines join all vertices, while "pieces"
only joins the first and second, third and fourth and so on. Colors for the
vertices of the lines can also be specified.</p>
<p dir="auto">Lines are also meshes and has the properties of a mesh too, like position and
rotation. Like meshes, they are a child of the <code>scene</code>.</p>
<h4 dir="auto"><a id="user-content-line-materials" class="anchor" aria-hidden="true" href="#line-materials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Line Materials</h4>
<p dir="auto">Lines also require a material to decide properties of a line.
The <code>linematerial</code> function can be used to do this and specify some properties
for the line. The <code>linematerial</code> should be a child of the <code>line</code> element.</p>
<h4 dir="auto"><a id="user-content-drawing-lines" class="anchor" aria-hidden="true" href="#drawing-lines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Drawing lines</h4>
<p dir="auto">The <code>line</code> function can be used to draw lines.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="line([(0.0, 0.0, 0.0), (1.0, 1.0, 1.0)]) &lt;&lt;
        linematerial(Dict(:color=&gt;&quot;red&quot;))"><pre><span class="pl-c1">line</span>([(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>), (<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>)]) <span class="pl-k">&lt;&lt;</span>
        <span class="pl-c1">linematerial</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:color</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>))</pre></div>
<h4 dir="auto"><a id="user-content-mesh-grids" class="anchor" aria-hidden="true" href="#mesh-grids"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Mesh grids</h4>
<p dir="auto">Drawing mesh grids can be achieved by using the <code>meshlines</code> function. It creates
a set of lines to form the grid and assigns colors to the vertices based on the
z values.</p>
<p dir="auto">If you are looking for a 2D grid, use the <code>grid</code> function. It creates a grid on
the XY plane which can then be rotated as required.</p>
<h3 dir="auto"><a id="user-content-cameras" class="anchor" aria-hidden="true" href="#cameras"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Cameras</h3>
<p dir="auto">No 3D scene can be properly displayed without a camera to view from. ThreeJS.jl
provides support for a Perspective Camera view using the <code>camera</code> function.</p>
<p dir="auto">This sets the position of the camera, along with properties like <code>near</code> plane,
<code>far</code> plane, <code>fov</code> for field of view (in degrees), and <code>aspect</code> ratio.</p>
<p dir="auto">The <code>camera</code> tag should be a child of the <code>scene</code>.</p>
<h3 dir="auto"><a id="user-content-lights" class="anchor" aria-hidden="true" href="#lights"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Lights</h3>
<p dir="auto">ThreeJS.jl provides support for 3 kinds of lighting.</p>
<ul dir="auto">
<li><a href="http://threejs.org/docs/#Reference/Lights/AmbientLight" rel="nofollow">Ambient</a> - <code>ambientlight(color)</code></li>
<li><a href="http://threejs.org/docs/#Reference/Lights/PointLight" rel="nofollow">Point</a> -
<code>pointlight(x, y, z; color, intensity, distance)</code></li>
<li><a href="http://threejs.org/docs/#Reference/Lights/SpotLight" rel="nofollow">Spot</a> -
<code>spotlight(x, y, z; color, intensity, distance, angle, exponent, shadow)</code></li>
</ul>
<p dir="auto">These tags should also be a child of the <code>scene</code>.</p>
<h3 dir="auto"><a id="user-content-controls" class="anchor" aria-hidden="true" href="#controls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Controls</h3>
<p dir="auto">By default, ThreeJS adds <a href="http://threejs.org/examples/misc_controls_trackball.html" rel="nofollow">TrackballControls</a>
to every scene drawn. This lets you interact with the scene by using the
trackpad or mouse to rotate, pan and zoom.</p>
<h3 dir="auto"><a id="user-content-interactivity" class="anchor" aria-hidden="true" href="#interactivity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interactivity</h3>
<p dir="auto">You can use the <a href="https://shashi.github.io/Escher.jl/reactive.html" rel="nofollow">reactive functionality</a>
provided by Escher to create Signals of the 3D graphic elements produced.
These can let you create graphics that can be interacted with using UI elements
like sliders. Try launching <code>escher --serve</code> (if you have Escher installed)
in the <code>examples/</code> directory and heading to <code>localhost:5555/box.jl</code> on the
browser. You can see a box whose width, depth, height and rotation about
each axes can be set and the box will update accordingly!</p>
<p dir="auto">Currently, this functionality does not work in IJulia notebooks. Hopefully,
this will be fixed soon and you can use <code>Interact</code>(<a href="https://github.com/JuliaLang/Interact.jl">https://github.com/JuliaLang/Interact.jl</a>)
to do the same in IJulia notebooks.</p>
<h3 dir="auto"><a id="user-content-animations" class="anchor" aria-hidden="true" href="#animations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Animations</h3>
<p dir="auto">You can also do animations by using Reactive signals. See
<code>examples/rotatingcube.jl</code> as an example. It is implemented in Escher,
so running an Escher server from that directory and heading to
<code>localhost:5555/rotatingcube.jl</code> should give you a cube which is
rotating!</p>
<p dir="auto">NOTE: Adding new objects to a scene will force a redraw of the scene, resetting
the camera.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ThreeJS
outerdiv() &lt;&lt; (initscene() &lt;&lt;
    [
        mesh(0.0, 0.0, 0.0) &lt;&lt;
        [
            box(1.0,1.0,1.0), material(Dict(:kind=&gt;&quot;lambert&quot;,:color=&gt;&quot;red&quot;))
        ],
        pointlight(3.0, 3.0, 3.0),
        camera(0.0, 0.0, 10.0)
    ])"><pre><span class="pl-k">using</span> ThreeJS
<span class="pl-c1">outerdiv</span>() <span class="pl-k">&lt;&lt;</span> (<span class="pl-c1">initscene</span>() <span class="pl-k">&lt;&lt;</span>
    [
        <span class="pl-c1">mesh</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>) <span class="pl-k">&lt;&lt;</span>
        [
            <span class="pl-c1">box</span>(<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">1.0</span>), <span class="pl-c1">material</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:kind</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>lambert<span class="pl-pds">"</span></span>,<span class="pl-c1">:color</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>))
        ],
        <span class="pl-c1">pointlight</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">3.0</span>),
        <span class="pl-c1">camera</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
    ])</pre></div>
<p dir="auto">Running the above in an IJulia notebook should draw a red cube,
which is illuminated by a light from a corner.</p>
<p dir="auto">For Escher, after the script above is run, the following code should give the
same result.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ThreeJS
using Compat

main(window) = begin
    push!(window.assets,(&quot;ThreeJS&quot;,&quot;threejs&quot;))
    vbox(
        title(2,&quot;ThreeJS&quot;),
        outerdiv() &lt;&lt;
        (
        initscene() &lt;&lt;
        [
            mesh(0.0, 0.0, 0.0) &lt;&lt;
                [
                    ThreeJS.box(1.0, 1.0, 1.0),
                    material(Dict(:kind=&gt;&quot;lambert&quot;,:color=&gt;&quot;red&quot;))
                ],
            pointlight(3.0, 3.0, 3.0),
            camera(0.0, 0.0, 10.0)
        ]
        )
    )
end"><pre><span class="pl-k">using</span> ThreeJS
<span class="pl-k">using</span> Compat

<span class="pl-en">main</span>(window) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    <span class="pl-c1">push!</span>(window<span class="pl-k">.</span>assets,(<span class="pl-s"><span class="pl-pds">"</span>ThreeJS<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>threejs<span class="pl-pds">"</span></span>))
    <span class="pl-c1">vbox</span>(
        <span class="pl-c1">title</span>(<span class="pl-c1">2</span>,<span class="pl-s"><span class="pl-pds">"</span>ThreeJS<span class="pl-pds">"</span></span>),
        <span class="pl-c1">outerdiv</span>() <span class="pl-k">&lt;&lt;</span>
        (
        <span class="pl-c1">initscene</span>() <span class="pl-k">&lt;&lt;</span>
        [
            <span class="pl-c1">mesh</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>) <span class="pl-k">&lt;&lt;</span>
                [
                    ThreeJS<span class="pl-k">.</span><span class="pl-c1">box</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>),
                    <span class="pl-c1">material</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:kind</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>lambert<span class="pl-pds">"</span></span>,<span class="pl-c1">:color</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>))
                ],
            <span class="pl-c1">pointlight</span>(<span class="pl-c1">3.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">3.0</span>),
            <span class="pl-c1">camera</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">10.0</span>)
        ]
        )
    )
<span class="pl-k">end</span></pre></div>
</article></div>