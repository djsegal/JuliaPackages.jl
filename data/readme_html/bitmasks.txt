<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bitmasks" class="anchor" aria-hidden="true" href="#bitmasks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BitMasks</h1>
<p dir="auto"><a href="https://serenity4.github.io/BitMasks.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://serenity4.github.io/BitMasks.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/serenity4/BitMasks.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/serenity4/BitMasks.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/serenity4/BitMasks.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/91a653c7bd6b8b5f76422ec71f88d5778dfaab9edbfb50c3040d2a4498284b02/68747470733a2f2f636f6465636f762e696f2f67682f736572656e697479342f4269744d61736b732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/serenity4/BitMasks.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">Lightweight package with zero dependencies aimed at manipulating BitMasks using an <code>@enum</code> like interface. BitMasks are combinations of boolean flags encoded as specific bits of an integer type. For example, 8 flags can be represented with a <code>UInt8</code>, from <code>0b1000000</code> to <code>0b00000001</code>. A bitmask instance could then have a value of <code>0b10101101</code> in this case.</p>
<p dir="auto">This package provides a way to define BitMasks from flag values and mask presets, and operators to manipulate them. First, you can create a bitmask type with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BitMasks

julia&gt; @bitmask Mask::UInt32 begin
  # Flags.
  BIT_A = 1
  BIT_B = 2
  BIT_C = 4

  # Mask presets.
  BIT_AB = 3
  BIT_BC = 6
  BIT_ABC = 7
end
Mask"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BitMasks

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bitmask</span> Mask<span class="pl-k">::</span><span class="pl-c1">UInt32</span> <span class="pl-k">begin</span>
  <span class="pl-c"><span class="pl-c">#</span> Flags.</span>
  BIT_A <span class="pl-k">=</span> <span class="pl-c1">1</span>
  BIT_B <span class="pl-k">=</span> <span class="pl-c1">2</span>
  BIT_C <span class="pl-k">=</span> <span class="pl-c1">4</span>

  <span class="pl-c"><span class="pl-c">#</span> Mask presets.</span>
  BIT_AB <span class="pl-k">=</span> <span class="pl-c1">3</span>
  BIT_BC <span class="pl-k">=</span> <span class="pl-c1">6</span>
  BIT_ABC <span class="pl-k">=</span> <span class="pl-c1">7</span>
<span class="pl-k">end</span>
Mask</pre></div>
<p dir="auto">Mask presets are optional, but can be handy to group parameters especially when specific masks have a strong semantic meaning or when the number of flags is very large. The right-hand sides of the <code>=</code> assignments are required to be integer literals at the moment.</p>
<p dir="auto">It is also possible to combine flags or masks to create new masks, for example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; BIT_A | BIT_C
Mask(BIT_A | BIT_C)

julia&gt; BIT_A | BIT_B
Mask(BIT_AB)

julia&gt; ~BIT_A
Mask(BIT_BC)

julia&gt; BIT_BC ⊻ BIT_AB
Mask(BIT_A | BIT_C)

julia&gt; BIT_BC &amp; BIT_C
Mask(BIT_C)"><pre>julia<span class="pl-k">&gt;</span> BIT_A <span class="pl-k">|</span> BIT_C
<span class="pl-c1">Mask</span>(BIT_A <span class="pl-k">|</span> BIT_C)

julia<span class="pl-k">&gt;</span> BIT_A <span class="pl-k">|</span> BIT_B
<span class="pl-c1">Mask</span>(BIT_AB)

julia<span class="pl-k">&gt;</span> <span class="pl-k">~</span>BIT_A
<span class="pl-c1">Mask</span>(BIT_BC)

julia<span class="pl-k">&gt;</span> BIT_BC <span class="pl-k">⊻</span> BIT_AB
<span class="pl-c1">Mask</span>(BIT_A <span class="pl-k">|</span> BIT_C)

julia<span class="pl-k">&gt;</span> BIT_BC <span class="pl-k">&amp;</span> BIT_C
<span class="pl-c1">Mask</span>(BIT_C)</pre></div>
<p dir="auto">where <code>|</code> performs the union of different flags or masks, <code>&amp;</code> their intersection, <code>~</code> their complement and <code>xor</code> the complement of their intersection. Note that <code>|</code> should be read as <code>and</code> instead of <code>or</code> from a semantic perspective.</p>
<p dir="auto">You will have noticed that a specific printing is defined which will try to compact all combinations based on the provided presets to reduce verbosity.</p>
<p dir="auto">Other utilities are defined, such as the extraction of all flags from a mask, conversion to/from integers and bits of extra type safety to avoid mixing flags coming from different masks:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; enabled_flags(BIT_ABC)
3-element Vector{Mask}:
 Mask(BIT_A)
 Mask(BIT_B)
 Mask(BIT_C)

julia&gt; Int(BIT_A)
1

julia&gt; Mask(1)
Mask(BIT_A)

julia&gt; @bitmask Mask2::UInt32 begin
         BIT_A_2 = 1
         BIT_B_2 = 2
         BIT_AB_2 = 3
       end
Mask2

julia&gt; BIT_A | BIT_B_2
ERROR: Bitwise operation not allowed between incompatible BitMasks 'Mask', 'Mask2'"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">enabled_flags</span>(BIT_ABC)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Vector{Mask}<span class="pl-k">:</span>
 <span class="pl-c1">Mask</span>(BIT_A)
 <span class="pl-c1">Mask</span>(BIT_B)
 <span class="pl-c1">Mask</span>(BIT_C)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int</span>(BIT_A)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Mask</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">Mask</span>(BIT_A)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bitmask</span> Mask2<span class="pl-k">::</span><span class="pl-c1">UInt32</span> <span class="pl-k">begin</span>
         BIT_A_2 <span class="pl-k">=</span> <span class="pl-c1">1</span>
         BIT_B_2 <span class="pl-k">=</span> <span class="pl-c1">2</span>
         BIT_AB_2 <span class="pl-k">=</span> <span class="pl-c1">3</span>
       <span class="pl-k">end</span>
Mask2

julia<span class="pl-k">&gt;</span> BIT_A <span class="pl-k">|</span> BIT_B_2
ERROR<span class="pl-k">:</span> Bitwise operation not allowed between incompatible BitMasks <span class="pl-s"><span class="pl-pds">'</span>Mask<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>Mask2<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">Finally, a few common <code>Base</code> methods were added for convenience:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; zero(Mask)
Mask()

julia&gt; iszero(zero(Mask))
true

julia&gt; typemax(Mask)
Mask(BIT_ABC)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">zero</span>(Mask)
<span class="pl-c1">Mask</span>()

julia<span class="pl-k">&gt;</span> <span class="pl-c1">iszero</span>(<span class="pl-c1">zero</span>(Mask))
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">typemax</span>(Mask)
<span class="pl-c1">Mask</span>(BIT_ABC)</pre></div>
<h3 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related packages</h3>
<p dir="auto">This package aims to be relatively simple and designed to work with integers only. Similar packages with slightly different feature sets include:</p>
<ul dir="auto">
<li><a href="https://github.com/jessymilare/FlagSets.jl">FlagSets.jl</a></li>
<li><a href="https://github.com/jmert/BitFlags.jl">BitFlags.jl</a></li>
</ul>
</article></div>