<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fastnetjl" class="anchor" aria-hidden="true" href="#fastnetjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fastnet.jl</h1>
<p dir="auto"><a href="https://bridgewalker.github.io/Fastnet.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://bridgewalker.github.io/Fastnet.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://zenodo.org/badge/latestdoi/293316116" rel="nofollow"><img src="https://camo.githubusercontent.com/3d70682f184b02388612260b3e8a53e7da2d106142207dd8ac474a634f5e7d17/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3239333331363131362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/293316116.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>Fastnet is a Julia package that allows very fast (linear-time) simulation of discrete-state dynamical processes on networks, such as commonly studied models of epidemics</strong></p>
<p dir="auto">Fastnet achieves linear-time performance by using an innovative data structure. The underlying network is a potentially directed and potentially non-simple graph.
The package provides a convenient syntax that allows to implement common models in a few simple lines of code. The simulations are done using an event-driven (Gillespie) algortithm offering fast performance and excellent agreement with real world continuous-time processes. Using Fastnet models with millions of nodes can be run within minutes on a standard laptop.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">The following file defines and runs an epidemiological SIS model:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Fastnet

const S=1                               # Node state 1: Susceptible node
const I=2                               # Node state 2: Infected node
const SI=1                              # Link state 1: Susceptible-Infected link 

const p=0.05                            # Infection rate (per SI-link)
const r=0.1                             # Recovery rate (per I-node)

SI_link=LinkType(S,I)                   # This describes what we mean by SI-link 

# Let's make a network of 1M nodes and 4M links, 2 node states, that keeps track of SI links
net=FastNet(1000000,4000000,2,[SI_link]; nodealias=[&quot;S&quot;,&quot;I&quot;], linkalias=[&quot;SI&quot;])

randomgraph!(net)                       # Initialize as ER-random graph (all nodes will be in state 1: S)

for i=1:20                              # Infect 20 susceptible nodes at random 
    node=randomnode(net,S)
    nodestate!(net,node,I)
end

function rates!(rates,t)                # This functins computes the rates of processes
    infected=countnodes_f(net,I)                # count the infected nodes
    activelinks=countlinks_f(net,SI)            # count the SI links
    rates[1]=p*activelinks                       # compute total infection rate
    rates[2]=r*infected                          # compute total recovery rate 
    nothing
end

function recovery!()                    # This is what we do when the recovery process is triggered
    inode=randomnode_f(net,I)                   # Find a random infected node
    nodestate_f!(net,inode,S)                   # Set the state of the node to susceptible
end

function infection!()                   # This is what we do when the infection process is triggered
    alink=randomlink_f(net,SI)                   # Find a random SI link
    nodestate_f!(net,linksrc_f(net,alink),I)     # Set both endpoints of the link to infected
    nodestate_f!(net,linkdst_f(net,alink),I)    
end

sim=FastSim(net,rates!,[infection!,recovery!])   # initialize the simulation 

@time runsim!(sim,60.0,5.0)                      # Run for 60 timeunits (reporting every 5)"><pre><span class="pl-k">using</span> Fastnet

<span class="pl-k">const</span> S<span class="pl-k">=</span><span class="pl-c1">1</span>                               <span class="pl-c"><span class="pl-c">#</span> Node state 1: Susceptible node</span>
<span class="pl-k">const</span> I<span class="pl-k">=</span><span class="pl-c1">2</span>                               <span class="pl-c"><span class="pl-c">#</span> Node state 2: Infected node</span>
<span class="pl-k">const</span> SI<span class="pl-k">=</span><span class="pl-c1">1</span>                              <span class="pl-c"><span class="pl-c">#</span> Link state 1: Susceptible-Infected link </span>

<span class="pl-k">const</span> p<span class="pl-k">=</span><span class="pl-c1">0.05</span>                            <span class="pl-c"><span class="pl-c">#</span> Infection rate (per SI-link)</span>
<span class="pl-k">const</span> r<span class="pl-k">=</span><span class="pl-c1">0.1</span>                             <span class="pl-c"><span class="pl-c">#</span> Recovery rate (per I-node)</span>

SI_link<span class="pl-k">=</span><span class="pl-c1">LinkType</span>(S,I)                   <span class="pl-c"><span class="pl-c">#</span> This describes what we mean by SI-link </span>

<span class="pl-c"><span class="pl-c">#</span> Let's make a network of 1M nodes and 4M links, 2 node states, that keeps track of SI links</span>
net<span class="pl-k">=</span><span class="pl-c1">FastNet</span>(<span class="pl-c1">1000000</span>,<span class="pl-c1">4000000</span>,<span class="pl-c1">2</span>,[SI_link]; nodealias<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>S<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>I<span class="pl-pds">"</span></span>], linkalias<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>SI<span class="pl-pds">"</span></span>])

<span class="pl-c1">randomgraph!</span>(net)                       <span class="pl-c"><span class="pl-c">#</span> Initialize as ER-random graph (all nodes will be in state 1: S)</span>

<span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">20</span>                              <span class="pl-c"><span class="pl-c">#</span> Infect 20 susceptible nodes at random </span>
    node<span class="pl-k">=</span><span class="pl-c1">randomnode</span>(net,S)
    <span class="pl-c1">nodestate!</span>(net,node,I)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">rates!</span>(rates,t)                <span class="pl-c"><span class="pl-c">#</span> This functins computes the rates of processes</span>
    infected<span class="pl-k">=</span><span class="pl-c1">countnodes_f</span>(net,I)                <span class="pl-c"><span class="pl-c">#</span> count the infected nodes</span>
    activelinks<span class="pl-k">=</span><span class="pl-c1">countlinks_f</span>(net,SI)            <span class="pl-c"><span class="pl-c">#</span> count the SI links</span>
    rates[<span class="pl-c1">1</span>]<span class="pl-k">=</span>p<span class="pl-k">*</span>activelinks                       <span class="pl-c"><span class="pl-c">#</span> compute total infection rate</span>
    rates[<span class="pl-c1">2</span>]<span class="pl-k">=</span>r<span class="pl-k">*</span>infected                          <span class="pl-c"><span class="pl-c">#</span> compute total recovery rate </span>
    <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">recovery!</span>()                    <span class="pl-c"><span class="pl-c">#</span> This is what we do when the recovery process is triggered</span>
    inode<span class="pl-k">=</span><span class="pl-c1">randomnode_f</span>(net,I)                   <span class="pl-c"><span class="pl-c">#</span> Find a random infected node</span>
    <span class="pl-c1">nodestate_f!</span>(net,inode,S)                   <span class="pl-c"><span class="pl-c">#</span> Set the state of the node to susceptible</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">infection!</span>()                   <span class="pl-c"><span class="pl-c">#</span> This is what we do when the infection process is triggered</span>
    alink<span class="pl-k">=</span><span class="pl-c1">randomlink_f</span>(net,SI)                   <span class="pl-c"><span class="pl-c">#</span> Find a random SI link</span>
    <span class="pl-c1">nodestate_f!</span>(net,<span class="pl-c1">linksrc_f</span>(net,alink),I)     <span class="pl-c"><span class="pl-c">#</span> Set both endpoints of the link to infected</span>
    <span class="pl-c1">nodestate_f!</span>(net,<span class="pl-c1">linkdst_f</span>(net,alink),I)    
<span class="pl-k">end</span>

sim<span class="pl-k">=</span><span class="pl-c1">FastSim</span>(net,rates!,[infection!,recovery!])   <span class="pl-c"><span class="pl-c">#</span> initialize the simulation </span>

<span class="pl-c1">@time</span> <span class="pl-c1">runsim!</span>(sim,<span class="pl-c1">60.0</span>,<span class="pl-c1">5.0</span>)                      <span class="pl-c"><span class="pl-c">#</span> Run for 60 timeunits (reporting every 5)</span></pre></div>
<p dir="auto">This produces the output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Time    S       I       SI     
0.0     999980      20      146
5.0     999927      73      570
10.0    999710     290     2199
15.0    998734    1266     9499
20.0    995152    4848    35743
25.0    982053   17947   130184
30.0    936454   63546   437860
35.0    807731  192269  1133438
40.0    585665  414335  1744756
45.0    402526  597474  1708492
50.0    319610  680390  1550403
55.0    291675  708325  1482735
60.0    281941  718059  1458951
 65.271643 seconds (806.64 M allocations: 12.244 GiB, 3.87% gc time, 0.04% compilation time)"><pre>Time    S       I       SI     
<span class="pl-c1">0.0</span>     <span class="pl-c1">999980</span>      <span class="pl-c1">20</span>      <span class="pl-c1">146</span>
<span class="pl-c1">5.0</span>     <span class="pl-c1">999927</span>      <span class="pl-c1">73</span>      <span class="pl-c1">570</span>
<span class="pl-c1">10.0</span>    <span class="pl-c1">999710</span>     <span class="pl-c1">290</span>     <span class="pl-c1">2199</span>
<span class="pl-c1">15.0</span>    <span class="pl-c1">998734</span>    <span class="pl-c1">1266</span>     <span class="pl-c1">9499</span>
<span class="pl-c1">20.0</span>    <span class="pl-c1">995152</span>    <span class="pl-c1">4848</span>    <span class="pl-c1">35743</span>
<span class="pl-c1">25.0</span>    <span class="pl-c1">982053</span>   <span class="pl-c1">17947</span>   <span class="pl-c1">130184</span>
<span class="pl-c1">30.0</span>    <span class="pl-c1">936454</span>   <span class="pl-c1">63546</span>   <span class="pl-c1">437860</span>
<span class="pl-c1">35.0</span>    <span class="pl-c1">807731</span>  <span class="pl-c1">192269</span>  <span class="pl-c1">1133438</span>
<span class="pl-c1">40.0</span>    <span class="pl-c1">585665</span>  <span class="pl-c1">414335</span>  <span class="pl-c1">1744756</span>
<span class="pl-c1">45.0</span>    <span class="pl-c1">402526</span>  <span class="pl-c1">597474</span>  <span class="pl-c1">1708492</span>
<span class="pl-c1">50.0</span>    <span class="pl-c1">319610</span>  <span class="pl-c1">680390</span>  <span class="pl-c1">1550403</span>
<span class="pl-c1">55.0</span>    <span class="pl-c1">291675</span>  <span class="pl-c1">708325</span>  <span class="pl-c1">1482735</span>
<span class="pl-c1">60.0</span>    <span class="pl-c1">281941</span>  <span class="pl-c1">718059</span>  <span class="pl-c1">1458951</span>
 <span class="pl-c1">65.271643</span> seconds (<span class="pl-c1">806.64</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">12.244</span> GiB, <span class="pl-c1">3.87</span><span class="pl-k">%</span> gc time, <span class="pl-c1">0.04</span><span class="pl-k">%</span> compilation time)</pre></div>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Install with the Julia package manager.
From the Julia REPL, type <code>]</code> to enter the Pkg REPL mode and</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add Fastnet"><pre class="notranslate"><code>pkg&gt; add Fastnet
</code></pre></div>
<p dir="auto">Alternatively from Julia</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg

julia&gt; Pkg.add(&quot;Fastnet&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg

julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Fastnet<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Full documentation can be found here:
<a href="https://bridgewalker.github.io/Fastnet.jl" rel="nofollow">https://bridgewalker.github.io/Fastnet.jl</a>.</p>
<h2 dir="auto"><a id="user-content-project-status" class="anchor" aria-hidden="true" href="#project-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Project Status</h2>
<p dir="auto">This package was tested on Julia 1.6.2 on Windows. This is still in an early version.
More testing is necessary, so use with caution. I am still actively developing this package,
so comments, feature requests etc. are very welcome. You can contact me via <a href="mailto:thilo2gross@gmail.com">thilo2gross@gmail.com</a>!</p>
<h2 dir="auto"><a id="user-content-acknowledgements" class="anchor" aria-hidden="true" href="#acknowledgements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Acknowledgements</h2>
<p dir="auto">Many thanks to Pietro Monticone (<a href="https://github.com/pitmonticone">@pitmonticone</a>) for work on the documentation.</p>
<p dir="auto">The original development of Fastnet was supported by the Volkswagen foundation. The current implementation in Julia was developed at HIFMB, a collaboration between the Alfred-Wegener-Institute, Helmholtz-Center for Polar and Marine Research, and the Carl-von-Ossietzky University Oldenburg, initially funded by the Ministry for Science and Culture of Lower Saxony (MWK) and the Volkswagen Foundation through the “Niedersächsisches Vorab” grant program (grant number ZN3285).</p>
</article></div>