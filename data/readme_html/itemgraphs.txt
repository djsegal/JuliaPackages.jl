<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-itemgraphs" class="anchor" aria-hidden="true" href="#itemgraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ItemGraphs</h1>
<p dir="auto"><em>Shortest paths between items</em></p>
<p dir="auto"><a href="https://travis-ci.org/helgee/ItemGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2d47101054ac771c85328563c86bad8bdce3bb50b32d4c4f25cd0cb3973d08c8/68747470733a2f2f7472617669732d63692e6f72672f68656c6765652f4974656d4772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status Unix" data-canonical-src="https://travis-ci.org/helgee/ItemGraphs.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://ci.appveyor.com/project/helgee/itemgraphs-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/506f953575a2ff5d91a66fe242074b73930c53d4fe0dd0c59f4af87a42f62ef3/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f62366c62336c677478656732667235313f7376673d74727565" alt="Build Status Windows" data-canonical-src="https://ci.appveyor.com/api/projects/status/b6lb3lgtxeg2fr51?svg=true" style="max-width: 100%;"></a> <a href="https://coveralls.io/github/helgee/ItemGraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/bf967b36b09a52e332a7b469f966499248b2c81e190159afb5b1fa61be74f4cf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f68656c6765652f4974656d4772617068732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/helgee/ItemGraphs.jl/badge.svg?branch=master" style="max-width: 100%;"></a> <a href="http://codecov.io/github/helgee/ItemGraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/8e8c0abb42d44e3302f98045ea27bf41c988a07cb3a8304b85a52ea54ce328d6/687474703a2f2f636f6465636f762e696f2f6769746875622f68656c6765652f4974656d4772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov" data-canonical-src="http://codecov.io/github/helgee/ItemGraphs.jl/coverage.svg?branch=master" style="max-width: 100%;"></a> <a href="https://helgee.github.io/ItemGraphs.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Docs Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://helgee.github.io/ItemGraphs.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Docs Latest" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><strong>ItemGraphs</strong> is a simple wrapper around <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs</a> that
enables my most common use case for graph-like data structures:
I have a collection of items that are in relations between each other and I want to get the shortest path
between two items.
That's it!</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package can be installed through Julia's package manager:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;ItemGraphs&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>ItemGraphs<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-quickstart" class="anchor" aria-hidden="true" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quickstart</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Create an ItemGraph that has integers as vertices
g = ItemGraph{Int}()

# Add some vertices
add_vertex!(g, 101)
add_vertex!(g, 202)

# Add some edges. If the vertices do not exists, they will be added as well
add_edge!(g, 101, 202)
add_edge!(g, 202, 303)
add_edge!(g, 202, 404)

# Get the shortest path, returns [101, 202, 404]
items(g, 101, 404)

# Create an ItemGraph that has integers as vertices and floats as edges
g = ItemGraph{Int, Float64}()
add_edge!(g, 101, 202, 1.0)
add_edge!(g, 202, 303, 2.0)
add_edge!(g, 202, 404) # The item assigned to the edge will be zero by default

# Get all items on the edges between 101 and 404, returns [1.0, 0.0]
edgeitems(g, 101, 404)"><pre><span class="pl-c"><span class="pl-c">#</span> Create an ItemGraph that has integers as vertices</span>
g <span class="pl-k">=</span> <span class="pl-c1">ItemGraph</span><span class="pl-c1">{Int}</span>()

<span class="pl-c"><span class="pl-c">#</span> Add some vertices</span>
<span class="pl-c1">add_vertex!</span>(g, <span class="pl-c1">101</span>)
<span class="pl-c1">add_vertex!</span>(g, <span class="pl-c1">202</span>)

<span class="pl-c"><span class="pl-c">#</span> Add some edges. If the vertices do not exists, they will be added as well</span>
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">101</span>, <span class="pl-c1">202</span>)
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">202</span>, <span class="pl-c1">303</span>)
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">202</span>, <span class="pl-c1">404</span>)

<span class="pl-c"><span class="pl-c">#</span> Get the shortest path, returns [101, 202, 404]</span>
<span class="pl-c1">items</span>(g, <span class="pl-c1">101</span>, <span class="pl-c1">404</span>)

<span class="pl-c"><span class="pl-c">#</span> Create an ItemGraph that has integers as vertices and floats as edges</span>
g <span class="pl-k">=</span> <span class="pl-c1">ItemGraph</span><span class="pl-c1">{Int, Float64}</span>()
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">101</span>, <span class="pl-c1">202</span>, <span class="pl-c1">1.0</span>)
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">202</span>, <span class="pl-c1">303</span>, <span class="pl-c1">2.0</span>)
<span class="pl-c1">add_edge!</span>(g, <span class="pl-c1">202</span>, <span class="pl-c1">404</span>) <span class="pl-c"><span class="pl-c">#</span> The item assigned to the edge will be zero by default</span>

<span class="pl-c"><span class="pl-c">#</span> Get all items on the edges between 101 and 404, returns [1.0, 0.0]</span>
<span class="pl-c1">edgeitems</span>(g, <span class="pl-c1">101</span>, <span class="pl-c1">404</span>)</pre></div>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Please refer to the <a href="https://helgee.github.io/ItemGraphs.jl/stable/" rel="nofollow">documentation</a> for additional
information.</p>
</article></div>