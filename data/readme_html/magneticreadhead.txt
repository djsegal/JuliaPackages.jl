<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-magneticreadhead-" class="anchor" aria-hidden="true" href="#magneticreadhead-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MagneticReadHead <a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667"><img src="https://camo.githubusercontent.com/ae2f538d678a8e76c5493d870c59fbf928b14906e41227a07af5bbf3566b5068/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d6d61747572696e672d626c75652e737667" alt="https://www.tidyverse.org/lifecycle/#maturing" data-canonical-src="https://img.shields.io/badge/lifecycle-maturing-blue.svg" style="max-width:100%;"></a></h1>
<p><a href="https://travis-ci.com/oxinabox/MagneticReadHead.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2445865b788d90b278e6387747cfcce0ed1690c21d5cc92357e0c92b2c803583/68747470733a2f2f7472617669732d63692e636f6d2f6f78696e61626f782f4d61676e6574696352656164486561642e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/oxinabox/MagneticReadHead.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/oxinabox/MagneticReadHead-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ab07964e85530441bd645fb2188037384a94a885634549d20110c701c7c26e41/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6f78696e61626f782f4d61676e6574696352656164486561642e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/oxinabox/MagneticReadHead.jl?svg=true" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/oxinabox/MagneticReadHead.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/a3c485dbb0bc2c273655de543ba88929aa40cab85f96cd88ce6fafef3c8c747e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6f78696e61626f782f4d61676e6574696352656164486561642e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/oxinabox/MagneticReadHead.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Commands</h1>
<p><code>@run foo()</code>: run <code>foo()</code> inside the debugger.
When a breakpoint is hit, then you will be given an Iron REPL to work with-in,
allowing you to view/manipulate the arguments.
<code>@enter foo()</code> performs similarly, after immediately breaking on the first line.</p>
<p>Within this you can read (and write) variables,</p>
<ul>
<li>Step-Next: to move to the next IR statement</li>
<li>Step-In: to debug in the next function call (assuming next is a function call)</li>
<li>Step-Out: to debug from the next statement the function that called the current function</li>
<li>Continue: proceed to next breakpoint</li>
<li>Abort: terminate running the debugger.</li>
</ul>
<h2><a id="user-content-breakpoints" class="anchor" aria-hidden="true" href="#breakpoints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Breakpoints</h2>
<ul>
<li><code>set_breakpoint!([function|method])</code>: Set a breakpoint on call to the argument</li>
<li><code>set_breakpoint!(filename, line number)</code>: Set a breakpoint on the given line in the given function</li>
<li><code>set_uninstrumented!([function|module])</code>: Disable debugging in the given function/module
<ul>
<li>Not having debugging enabled for modules/functions you do not need to debug massively speeds up the running of your program.</li>
<li>However, debugging is fully disabled for those modules/functions, so if those functions would then call functions you do want to debug (say by using <code>map</code>) then that will also not be caught by the debugger.</li>
</ul>
</li>
<li><code>list_breakpoints()</code>, <code>list_uninstrumenteds()</code>: list all the breakpoints/uninstrumenteds</li>
<li><code>rm_breakpoint!(arg...)</code>, <code>rm_uninstrumented!(args...)</code>: remove breakpoints/uninstrumenteds. Takes same arguments as <code>set_...</code>.</li>
<li><code>clear_breakpoints!()</code>, <code>clear_uninstrumenteds!()</code>: remove all breakpoints/uninstrumenteds.</li>
</ul>
<p><a href="https://asciinema.org/a/DxgPaaLQQYVV5xXCMuwF5Aa36" rel="nofollow"><img src="https://camo.githubusercontent.com/94129d67cba3197bd856b6039e6acddc62accc188eef8406c86de4de226e8539/68747470733a2f2f61736369696e656d612e6f72672f612f4478675061614c5151595656357858434d75774635416133362e737667" alt="asciicast" data-canonical-src="https://asciinema.org/a/DxgPaaLQQYVV5xXCMuwF5Aa36.svg" style="max-width:100%;"></a></p>
</article></div>