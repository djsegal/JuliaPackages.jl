<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://github.com/matthieugomez/StringDistances.jl/actions"><img src="https://github.com/matthieugomez/StringDistances.jl/workflows/CI/badge.svg" alt="Build status" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add StringDistances</code>.</p>
<h2><a id="user-content-supported-distances" class="anchor" aria-hidden="true" href="#supported-distances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported Distances</h2>
<p>Distances are defined for <code>AbstractStrings</code>, and any iterator that define <code>length()</code> (e.g. <code>graphemes</code>, <code>AbstractVector</code>...)</p>
<p>The available distances are:</p>
<ul>
<li>Edit Distances
<ul>
<li>Hamming Distance <code>Hamming()</code></li>
<li><a href="https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance" rel="nofollow">Jaro and Jaro-Winkler Distance</a> <code>Jaro()</code> <code>JaroWinkler()</code></li>
<li><a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein Distance</a> <code>Levenshtein()</code></li>
<li><a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance" rel="nofollow">Damerau-Levenshtein Distance</a> <code>DamerauLevenshtein()</code></li>
<li><a href="https://xlinux.nist.gov/dads/HTML/ratcliffObershelp.html" rel="nofollow">RatcliffObershelp Distance</a> <code>RatcliffObershelp()</code></li>
</ul>
</li>
<li>Q-gram distances compare the set of all substrings of length <code>q</code> in each string.
<ul>
<li>QGram Distance <code>Qgram(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Cosine_similarity" rel="nofollow">Cosine Distance</a> <code>Cosine(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Jaccard_index" rel="nofollow">Jaccard Distance</a> <code>Jaccard(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Overlap_coefficient" rel="nofollow">Overlap Distance</a> <code>Overlap(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient" rel="nofollow">Sorensen-Dice Distance</a> <code>SorensenDice(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Morisita%27s_overlap_index" rel="nofollow">MorisitaOverlap Distance</a> <code>MorisitaOverlap(q::Int)</code></li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S1047320313001417" rel="nofollow">Normalized Multiset Distance</a> <code>NMD(q::Int)</code></li>
</ul>
</li>
</ul>
<p>The package also defines Distance "modifiers" that can be applied to any distance.</p>
<ul>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">Partial</a> returns the minimum of the distance between the shorter string and substrings of the longer string.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenSort</a> adjusts for differences in word orders by returning the distance of the two strings, after re-ordering words alphabetically.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenSet</a> adjusts for differences in word orders and word numbers by returning the distance between the intersection of two strings with each string.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenMax</a> normalizes the distance, and combine the <code>Partial</code>, <code>TokenSort</code> and <code>TokenSet</code> modifiers, with penalty terms depending on string lengths. This is a good distance to match strings composed of multiple words, like addresses.   <code>TokenMax(Levenshtein())</code> corresponds to the distance defined in <a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">fuzzywuzzy</a></li>
</ul>
<h2><a id="user-content-basic-use" class="anchor" aria-hidden="true" href="#basic-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Use</h2>
<h3><a id="user-content-evaluate" class="anchor" aria-hidden="true" href="#evaluate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>evaluate</h3>
<p>You can always compute a certain distance between two strings using the following syntax:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="evaluate(dist, s1, s2)
dist(s1, s2)
"><pre><span class="pl-c1">evaluate</span>(dist, s1, s2)
<span class="pl-c1">dist</span>(s1, s2)</pre></div>
<p>For instance, with the <code>Levenshtein</code> distance,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="evaluate(Levenshtein(), &quot;martha&quot;, &quot;marhta&quot;)
Levenshtein()(&quot;martha&quot;, &quot;marhta&quot;)
"><pre><span class="pl-c1">evaluate</span>(<span class="pl-c1">Levenshtein</span>(), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">Levenshtein</span>()(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-pairwise" class="anchor" aria-hidden="true" href="#pairwise"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>pairwise</h3>
<p><code>pairwise</code> returns the matrix of distance between two <code>AbstractVectors</code> of AbstractStrings</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pairwise(Jaccard(3), [&quot;martha&quot;, &quot;kitten&quot;], [&quot;marhta&quot;, &quot;sitting&quot;])
"><pre><span class="pl-c1">pairwise</span>(<span class="pl-c1">Jaccard</span>(<span class="pl-c1">3</span>), [<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>kitten<span class="pl-pds">"</span></span>], [<span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sitting<span class="pl-pds">"</span></span>])</pre></div>
<p>It is particularly fast for QGram-distances (each element is processed once).</p>
<h3><a id="user-content-similarly-scores" class="anchor" aria-hidden="true" href="#similarly-scores"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>similarly scores</h3>
<ul>
<li>
<p>The function <code>compare</code> returns the similarity score, defined as 1 minus the normalized distance between two strings. It always returns a Float64. A value of 0.0 means completely different and a value of 1.0 means completely similar.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=" Levenshtein()(&quot;martha&quot;, &quot;martha&quot;)
 #&gt; 0.0
 compare(&quot;martha&quot;, &quot;martha&quot;, Levenshtein())
 #&gt; 1.0
"><pre> <span class="pl-c1">Levenshtein</span>()(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>)
 <span class="pl-c"><span class="pl-c">#</span>&gt; 0.0</span>
 <span class="pl-c1">compare</span>(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-c1">Levenshtein</span>())
 <span class="pl-c"><span class="pl-c">#</span>&gt; 1.0</span></pre></div>
</li>
<li>
<p><code>findnearest</code> returns the value and index of the element in <code>itr</code> with the highest similarity score with <code>s</code>. Its syntax is:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=" findnearest(s, itr, dist::StringDistance)
"><pre> <span class="pl-c1">findnearest</span>(s, itr, dist<span class="pl-k">::</span><span class="pl-c1">StringDistance</span>)</pre></div>
</li>
<li>
<p><code>findall</code> returns the indices of all elements in <code>itr</code> with a similarity score with <code>s</code> higher than a minimum value (default to 0.8). Its syntax is:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content=" findall(s, itr, dist::StringDistance; min_score = 0.8)
"><pre> <span class="pl-c1">findall</span>(s, itr, dist<span class="pl-k">::</span><span class="pl-c1">StringDistance</span>; min_score <span class="pl-k">=</span> <span class="pl-c1">0.8</span>)</pre></div>
</li>
</ul>
<p>The functions <code>findnearest</code> and <code>findall</code> are particularly optimized for <code>Levenshtein</code>, <code>DamerauLevenshtein</code> distances (as well as their modifications via <code>Partial</code>, <code>TokenSort</code>, <code>TokenSet</code>, or <code>TokenMax</code>).</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<ul>
<li><a href="https://journal.r-project.org/archive/2014-1/loo.pdf" rel="nofollow">The stringdist Package for Approximate String Matching</a> Mark P.J. van der Loo</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">fuzzywuzzy</a></li>
</ul>
</article></div>