<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/matthieugomez/StringDistances.jl/actions"><img src="https://github.com/matthieugomez/StringDistances.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add StringDistances</code>.</p>
<h2 dir="auto"><a id="user-content-supported-distances" class="anchor" aria-hidden="true" href="#supported-distances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Supported Distances</h2>
<p dir="auto">String distances act over any pair of iterators that define <code>length</code> (e.g. <code>AbstractStrings</code>, <code>GraphemeIterators</code>, or <code>AbstractVectors</code>)</p>
<p dir="auto">The available distances are:</p>
<ul dir="auto">
<li>Edit Distances
<ul dir="auto">
<li>Hamming Distance <code>Hamming() &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance" rel="nofollow">Jaro and Jaro-Winkler Distance</a> <code>Jaro()</code> <code>JaroWinkler() &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein Distance</a> <code>Levenshtein() &lt;: Metric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance#Optimal_string_alignment_distance" rel="nofollow">Optimal String Alignment Distance</a> (a.k.a. restricted Damerau-Levenshtein) <code>OptimalStringAlignment() &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance#Distance_with_adjacent_transpositions" rel="nofollow">Damerau-Levenshtein Distance</a> <code>DamerauLevenshtein() &lt;: Metric</code></li>
<li><a href="https://xlinux.nist.gov/dads/HTML/ratcliffObershelp.html" rel="nofollow">RatcliffObershelp Distance</a> <code>RatcliffObershelp() &lt;: SemiMetric</code></li>
</ul>
</li>
<li>Q-gram distances (which compare the set of all substrings of length <code>q</code> in each string)
<ul dir="auto">
<li>QGram Distance <code>QGram(q::Int) &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Cosine_similarity" rel="nofollow">Cosine Distance</a> <code>Cosine(q::Int) &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Jaccard_index" rel="nofollow">Jaccard Distance</a> <code>Jaccard(q::Int) &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Overlap_coefficient" rel="nofollow">Overlap Distance</a> <code>Overlap(q::Int) &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient" rel="nofollow">Sorensen-Dice Distance</a> <code>SorensenDice(q::Int) &lt;: SemiMetric</code></li>
<li><a href="https://en.wikipedia.org/wiki/Morisita%27s_overlap_index" rel="nofollow">MorisitaOverlap Distance</a> <code>MorisitaOverlap(q::Int) &lt;: SemiMetric</code></li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S1047320313001417" rel="nofollow">Normalized Multiset Distance</a> <code>NMD(q::Int) &lt;: SemiMetric</code></li>
</ul>
</li>
</ul>
<h2 dir="auto"><a id="user-content-syntax" class="anchor" aria-hidden="true" href="#syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Syntax</h2>
<p dir="auto">Following the <code>Distances.jl</code> package, string distances can inherit from two abstract types: <code>StringSemiMetric &lt;: SemiMetric</code> or <code>StringMetric &lt;: Metric</code>.</p>
<h2 dir="auto"><a id="user-content-computing-the-distance-between-two-strings-or-iterators" class="anchor" aria-hidden="true" href="#computing-the-distance-between-two-strings-or-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computing the distance between two strings (or iterators)</h2>
<p dir="auto">You can always compute a certain distance between two strings  using the following syntax</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r = evaluate(dist, x, y)
r = dist(x, y)"><pre>r <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(dist, x, y)
r <span class="pl-k">=</span> <span class="pl-c1">dist</span>(x, y)</pre></div>
<p dir="auto">Here, <code>dist</code> is an instance of a distance type: for example, the type for the Levenshtein distance is <code>Levenshtein</code>. You can compute the Levenshtein distance between <code>x</code> and <code>y</code> as</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="r = evaluate(Levenshtein(), x, y)
r = Levenshtein()(x, y)"><pre>r <span class="pl-k">=</span> <span class="pl-c1">evaluate</span>(<span class="pl-c1">Levenshtein</span>(), x, y)
r <span class="pl-k">=</span> <span class="pl-c1">Levenshtein</span>()(x, y)</pre></div>
<p dir="auto">The function <code>compare</code> returns the similarity score, defined as 1 minus the normalized distance between two strings. It always returns an element of type <code>Float64</code>. A value of 0.0 means completely different and a value of 1.0 means completely similar.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Levenshtein()(&quot;martha&quot;, &quot;martha&quot;)
#&gt; 0
compare(&quot;martha&quot;, &quot;martha&quot;, Levenshtein())
#&gt; 1.0"><pre><span class="pl-c1">Levenshtein</span>()(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>&gt; 0</span>
<span class="pl-c1">compare</span>(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-c1">Levenshtein</span>())
<span class="pl-c"><span class="pl-c">#</span>&gt; 1.0</span></pre></div>
<h2 dir="auto"><a id="user-content-computing-the-distance-between-two-abstractvectors-of-strings-or-iterators" class="anchor" aria-hidden="true" href="#computing-the-distance-between-two-abstractvectors-of-strings-or-iterators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Computing the distance between two AbstractVectors of strings (or iterators)</h2>
<p dir="auto">Consider <code>X</code> and <code>Y</code> two <code>AbstractVectors</code> of iterators. You can compute the matrix of distances across elements, <code>dist(X[i], Y[j])</code>, as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pairwise(dist, X, Y)"><pre><span class="pl-c1">pairwise</span>(dist, X, Y)</pre></div>
<p dir="auto">For instance,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pairwise(Jaccard(3), [&quot;martha&quot;, &quot;kitten&quot;], [&quot;marhta&quot;, &quot;sitting&quot;])"><pre><span class="pl-c1">pairwise</span>(<span class="pl-c1">Jaccard</span>(<span class="pl-c1">3</span>), [<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>kitten<span class="pl-pds">"</span></span>], [<span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>sitting<span class="pl-pds">"</span></span>])</pre></div>
<p dir="auto"><code>pairwise</code> is optimized in various ways (e.g., for the case of QGram-distances, dictionary of qgrams are pre-computed)</p>
<h2 dir="auto"><a id="user-content-find-closest-string" class="anchor" aria-hidden="true" href="#find-closest-string"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Find closest string</h2>
<p dir="auto">The package also adds convenience functions to find elements in a iterator of strings closest to a given string</p>
<ul dir="auto">
<li>
<p dir="auto"><code>findnearest</code> returns the value and index of the element in <code>itr</code> with the highest similarity score with <code>s</code>. Its syntax is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" findnearest(s, itr, dist)"><pre> <span class="pl-c1">findnearest</span>(s, itr, dist)</pre></div>
</li>
<li>
<p dir="auto"><code>findall</code> returns the indices of all elements in <code>itr</code> with a similarity score with <code>s</code> higher than a minimum score. Its syntax is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=" findall(s, itr, dist; min_score = 0.8)"><pre> <span class="pl-c1">findall</span>(s, itr, dist; min_score <span class="pl-k">=</span> <span class="pl-c1">0.8</span>)</pre></div>
</li>
</ul>
<p dir="auto">The functions <code>findnearest</code> and <code>findall</code> are particularly optimized for the <code>Levenshtein</code> and <code>OptimalStringAlignment</code> distances, as these algorithm can stop early if the distance becomes higher than a certain threshold.</p>
<h3 dir="auto"><a id="user-content-fuzzywuzzy" class="anchor" aria-hidden="true" href="#fuzzywuzzy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>fuzzywuzzy</h3>
<p dir="auto">The package also defines Distance "modifiers" that are inspired by the Python package - <a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">fuzzywuzzy</a>. These modifiers are particularly helpful to match strings composed of multiple words (e.g. addresses, company names).</p>
<ul dir="auto">
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">Partial</a> returns the minimum of the distance between the shorter string and substrings of the longer string.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenSort</a> adjusts for differences in word orders by returning the distance of the two strings, after re-ordering words alphabetically.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenSet</a> adjusts for differences in word orders and word numbers by returning the distance between the intersection of two strings with each string.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenMax</a> normalizes the distance, and combine the <code>Partial</code>, <code>TokenSort</code> and <code>TokenSet</code> modifiers, with penalty terms depending on string.   <code>TokenMax(Levenshtein())</code> corresponds to the distance defined in <a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">fuzzywuzzy</a></li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Levenshtein()(&quot;this string&quot;, &quot;this string is longer&quot;) = 10
Partial(Levenshtein())(&quot;this string&quot;, &quot;this string is longer&quot;) = 0"><pre><span class="pl-en">Levenshtein</span>()(<span class="pl-s"><span class="pl-pds">"</span>this string<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>this string is longer<span class="pl-pds">"</span></span>) <span class="pl-k">=</span> <span class="pl-c1">10</span>
<span class="pl-en">Partial</span>(<span class="pl-en">Levenshtein</span>())(<span class="pl-s"><span class="pl-pds">"</span>this string<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>this string is longer<span class="pl-pds">"</span></span>) <span class="pl-k">=</span> <span class="pl-c1">0</span></pre></div>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<ul dir="auto">
<li>All string distances are case sensitive.</li>
</ul>
</article></div>