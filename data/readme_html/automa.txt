<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-automajl" class="anchor" aria-hidden="true" href="#automajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Automa.jl</h1>
<p dir="auto"><a href="https://biojulia.github.io/Automa.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Docs Latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/BioJulia/Automa.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/4319ec43eacccd6c4379af8054a6e912c4cd2706c034e18487161a195bff8887/687474703a2f2f636f6465636f762e696f2f6769746875622f42696f4a756c69612f4175746f6d612e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/BioJulia/Automa.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia package for text validation, parsing, and tokenizing based on state machine compiler.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/docs/src/figure/Automa.png"><img src="/docs/src/figure/Automa.png" alt="Schema of Automa.jl" style="max-width: 100%;"></a></p>
<p dir="auto">Automa.jl compiles regular expressions into Julia code, which is then compiled
into low-level machine code by the Julia compiler. Automa.jl is designed to
generate very efficient code to scan large text data, which is often much faster
than handcrafted code. Automa.jl can insert arbitrary Julia code that will be
executed in state transitions. This makes it possible, for example, to extract
substrings that match a part of a regular expression.</p>
<p dir="auto">This is a number literal tokenizer using Automa.jl (<a href="example/numbers.jl">numbers.jl</a>):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# A tokenizer of octal, decimal, hexadecimal and floating point numbers
# =====================================================================

import Automa
import Automa.RegExp: @re_str
const re = Automa.RegExp

# Describe patterns in regular expression.
oct      = re&quot;0o[0-7]+&quot;
dec      = re&quot;[-+]?[0-9]+&quot;
hex      = re&quot;0x[0-9A-Fa-f]+&quot;
prefloat = re&quot;[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)&quot;
float    = prefloat | re.cat(prefloat | re&quot;[-+]?[0-9]+&quot;, re&quot;[eE][-+]?[0-9]+&quot;)
number   = oct | dec | hex | float
numbers  = re.cat(re.opt(number), re.rep(re&quot; +&quot; * number), re&quot; *&quot;)

# Register action names to regular expressions.
number.actions[:enter] = [:mark]
oct.actions[:exit]     = [:oct]
dec.actions[:exit]     = [:dec]
hex.actions[:exit]     = [:hex]
float.actions[:exit]   = [:float]

# Compile a finite-state machine.
machine = Automa.compile(numbers)

# This generates a SVG file to visualize the state machine.
# write(&quot;numbers.dot&quot;, Automa.machine2dot(machine))
# run(`dot -Tpng -o numbers.png numbers.dot`)

# Bind an action code for each action name.
actions = Dict(
    :mark  =&gt; :(mark = p),
    :oct   =&gt; :(emit(:oct)),
    :dec   =&gt; :(emit(:dec)),
    :hex   =&gt; :(emit(:hex)),
    :float =&gt; :(emit(:float)),
)

# Generate a tokenizing function from the machine.
context = Automa.CodeGenContext()
@eval function tokenize(data::String)
    tokens = Tuple{Symbol,String}[]
    mark = 0
    $(Automa.generate_init_code(context, machine))
    p_end = p_eof = lastindex(data)
    emit(kind) = push!(tokens, (kind, data[mark:p-1]))
    $(Automa.generate_exec_code(context, machine, actions))
    return tokens, cs == 0 ? :ok : cs &lt; 0 ? :error : :incomplete
end

tokens, status = tokenize(&quot;1 0x0123BEEF 0o754 3.14 -1e4 +6.022045e23&quot;)"><pre><span class="pl-c"><span class="pl-c">#</span> A tokenizer of octal, decimal, hexadecimal and floating point numbers</span>
<span class="pl-c"><span class="pl-c">#</span> =====================================================================</span>

<span class="pl-k">import</span> Automa
<span class="pl-k">import</span> Automa<span class="pl-k">.</span>RegExp<span class="pl-k">:</span> <span class="pl-c1">@re_str</span>
<span class="pl-k">const</span> re <span class="pl-k">=</span> Automa<span class="pl-k">.</span>RegExp

<span class="pl-c"><span class="pl-c">#</span> Describe patterns in regular expression.</span>
oct      <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span>0o[0-7]+<span class="pl-pds">"</span></span>
dec      <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span>[-+]?[0-9]+<span class="pl-pds">"</span></span>
hex      <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span>0x[0-9A-Fa-f]+<span class="pl-pds">"</span></span>
prefloat <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span>[-+]?([0-9]+<span class="pl-cce">\.</span>[0-9]*|[0-9]*<span class="pl-cce">\.</span>[0-9]+)<span class="pl-pds">"</span></span>
float    <span class="pl-k">=</span> prefloat <span class="pl-k">|</span> re<span class="pl-k">.</span><span class="pl-c1">cat</span>(prefloat <span class="pl-k">|</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span>[-+]?[0-9]+<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span>[eE][-+]?[0-9]+<span class="pl-pds">"</span></span>)
number   <span class="pl-k">=</span> oct <span class="pl-k">|</span> dec <span class="pl-k">|</span> hex <span class="pl-k">|</span> float
numbers  <span class="pl-k">=</span> re<span class="pl-k">.</span><span class="pl-c1">cat</span>(re<span class="pl-k">.</span><span class="pl-c1">opt</span>(number), re<span class="pl-k">.</span><span class="pl-c1">rep</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span> +<span class="pl-pds">"</span></span> <span class="pl-k">*</span> number), <span class="pl-s"><span class="pl-pds"><span class="pl-c1">re</span>"</span> *<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Register action names to regular expressions.</span>
number<span class="pl-k">.</span>actions[<span class="pl-c1">:enter</span>] <span class="pl-k">=</span> [<span class="pl-c1">:mark</span>]
oct<span class="pl-k">.</span>actions[<span class="pl-c1">:exit</span>]     <span class="pl-k">=</span> [<span class="pl-c1">:oct</span>]
dec<span class="pl-k">.</span>actions[<span class="pl-c1">:exit</span>]     <span class="pl-k">=</span> [<span class="pl-c1">:dec</span>]
hex<span class="pl-k">.</span>actions[<span class="pl-c1">:exit</span>]     <span class="pl-k">=</span> [<span class="pl-c1">:hex</span>]
float<span class="pl-k">.</span>actions[<span class="pl-c1">:exit</span>]   <span class="pl-k">=</span> [<span class="pl-c1">:float</span>]

<span class="pl-c"><span class="pl-c">#</span> Compile a finite-state machine.</span>
machine <span class="pl-k">=</span> Automa<span class="pl-k">.</span><span class="pl-c1">compile</span>(numbers)

<span class="pl-c"><span class="pl-c">#</span> This generates a SVG file to visualize the state machine.</span>
<span class="pl-c"><span class="pl-c">#</span> write("numbers.dot", Automa.machine2dot(machine))</span>
<span class="pl-c"><span class="pl-c">#</span> run(`dot -Tpng -o numbers.png numbers.dot`)</span>

<span class="pl-c"><span class="pl-c">#</span> Bind an action code for each action name.</span>
actions <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(
    <span class="pl-c1">:mark</span>  <span class="pl-k">=&gt;</span> :(mark <span class="pl-k">=</span> p),
    <span class="pl-c1">:oct</span>   <span class="pl-k">=&gt;</span> :(<span class="pl-c1">emit</span>(<span class="pl-c1">:oct</span>)),
    <span class="pl-c1">:dec</span>   <span class="pl-k">=&gt;</span> :(<span class="pl-c1">emit</span>(<span class="pl-c1">:dec</span>)),
    <span class="pl-c1">:hex</span>   <span class="pl-k">=&gt;</span> :(<span class="pl-c1">emit</span>(<span class="pl-c1">:hex</span>)),
    <span class="pl-c1">:float</span> <span class="pl-k">=&gt;</span> :(<span class="pl-c1">emit</span>(<span class="pl-c1">:float</span>)),
)

<span class="pl-c"><span class="pl-c">#</span> Generate a tokenizing function from the machine.</span>
context <span class="pl-k">=</span> Automa<span class="pl-k">.</span><span class="pl-c1">CodeGenContext</span>()
<span class="pl-c1">@eval</span> <span class="pl-k">function</span> <span class="pl-en">tokenize</span>(data<span class="pl-k">::</span><span class="pl-c1">String</span>)
    tokens <span class="pl-k">=</span> Tuple{Symbol,String}[]
    mark <span class="pl-k">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">$</span>(Automa<span class="pl-k">.</span><span class="pl-c1">generate_init_code</span>(context, machine))
    p_end <span class="pl-k">=</span> p_eof <span class="pl-k">=</span> <span class="pl-c1">lastindex</span>(data)
    <span class="pl-en">emit</span>(kind) <span class="pl-k">=</span> <span class="pl-c1">push!</span>(tokens, (kind, data[mark<span class="pl-k">:</span>p<span class="pl-k">-</span><span class="pl-c1">1</span>]))
    <span class="pl-k">$</span>(Automa<span class="pl-k">.</span><span class="pl-c1">generate_exec_code</span>(context, machine, actions))
    <span class="pl-k">return</span> tokens, cs <span class="pl-k">==</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">:ok</span> <span class="pl-k">:</span> cs <span class="pl-k">&lt;</span> <span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">:error</span> <span class="pl-k">:</span> <span class="pl-c1">:incomplete</span>
<span class="pl-k">end</span>

tokens, status <span class="pl-k">=</span> <span class="pl-c1">tokenize</span>(<span class="pl-s"><span class="pl-pds">"</span>1 0x0123BEEF 0o754 3.14 -1e4 +6.022045e23<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">This emits tokens and the final status:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="~/.j/v/Automa (master) $ julia -qL example/numbers.jl
julia&gt; tokens
6-element Array{Tuple{Symbol,String},1}:
 (:dec,&quot;1&quot;)
 (:hex,&quot;0x0123BEEF&quot;)
 (:oct,&quot;0o754&quot;)
 (:float,&quot;3.14&quot;)
 (:float,&quot;-1e4&quot;)
 (:float,&quot;+6.022045e23&quot;)

julia&gt; status
:ok"><pre class="notranslate"><code>~/.j/v/Automa (master) $ julia -qL example/numbers.jl
julia&gt; tokens
6-element Array{Tuple{Symbol,String},1}:
 (:dec,"1")
 (:hex,"0x0123BEEF")
 (:oct,"0o754")
 (:float,"3.14")
 (:float,"-1e4")
 (:float,"+6.022045e23")

julia&gt; status
:ok
</code></pre></div>
<p dir="auto">The compiled deterministic finite automaton (DFA) looks like this:
<a target="_blank" rel="noopener noreferrer" href="/docs/src/figure/numbers.png"><img src="/docs/src/figure/numbers.png" alt="DFA" style="max-width: 100%;"></a></p>
<p dir="auto">For more details, see <a href="/example/fasta.jl">fasta.jl</a> and read the docs page.</p>
</article></div>