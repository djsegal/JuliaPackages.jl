<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fasttransformsjl" class="anchor" aria-hidden="true" href="#fasttransformsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FastTransforms.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaApproximation/FastTransforms.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaApproximation/FastTransforms.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/gh/JuliaApproximation/FastTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fa8625c7f26cd3bce6c97b54f0c19417e25aa2beb4e19aa6040ab80d9aa1c747/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f466173745472616e73666f726d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d42785476534e676d4c4c" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/FastTransforms.jl/branch/master/graph/badge.svg?token=BxTvSNgmLL" style="max-width: 100%;"></a> <a href="https://JuliaApproximation.github.io/FastTransforms.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://JuliaApproximation.github.io/FastTransforms.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>FastTransforms.jl</code> allows the user to conveniently work with orthogonal polynomials with degrees well into the millions.</p>
<p dir="auto">This package provides a Julia wrapper for the <a href="https://github.com/MikaelSlevinsky/FastTransforms">C library</a> of the same name. Additionally, all three types of nonuniform fast Fourier transforms are available, as well as the Padua transform.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Installation, which uses <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl">BinaryBuilder</a> for all of Julia's supported platforms (in particular Sandybridge Intel processors and beyond), may be as straightforward as:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add FastTransforms

julia&gt; using FastTransforms, LinearAlgebra
"><pre>pkg<span class="pl-k">&gt;</span> add FastTransforms

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastTransforms, LinearAlgebra
</pre></div>
<h2 dir="auto"><a id="user-content-fast-orthogonal-polynomial-transforms" class="anchor" aria-hidden="true" href="#fast-orthogonal-polynomial-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fast orthogonal polynomial transforms</h2>
<p dir="auto">The orthogonal polynomial transforms are listed in <code>FastTransforms.Transforms</code> or <code>FastTransforms.kind2string.(instances(FastTransforms.Transforms))</code>. Univariate transforms may be planned with the standard normalization or with orthonormalization. For multivariate transforms, the standard normalization may be too severe for floating-point computations, so it is omitted. Here are two examples:</p>
<h3 dir="auto"><a id="user-content-the-chebyshev--legendre-transform" class="anchor" aria-hidden="true" href="#the-chebyshev--legendre-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Chebyshev--Legendre transform</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; c = rand(8192);

julia&gt; leg2cheb(c);

julia&gt; cheb2leg(c);

julia&gt; norm(cheb2leg(leg2cheb(c; normcheb=true); normcheb=true)-c)/norm(c)
1.1866591414786334e-14
"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">8192</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">leg2cheb</span>(c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cheb2leg</span>(c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(<span class="pl-c1">cheb2leg</span>(<span class="pl-c1">leg2cheb</span>(c; normcheb<span class="pl-k">=</span><span class="pl-c1">true</span>); normcheb<span class="pl-k">=</span><span class="pl-c1">true</span>)<span class="pl-k">-</span>c)<span class="pl-k">/</span><span class="pl-c1">norm</span>(c)
<span class="pl-c1">1.1866591414786334e-14</span>
</pre></div>
<p dir="auto">The implementation separates pre-computation into an <code>FTPlan</code>. This type is constructed with either <code>plan_leg2cheb</code> or <code>plan_cheb2leg</code>. Let's see how much faster it is if we pre-compute.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; p1 = plan_leg2cheb(c);

julia&gt; p2 = plan_cheb2leg(c);

julia&gt; @time leg2cheb(c);
  0.433938 seconds (9 allocations: 64.641 KiB)

julia&gt; @time p1*c;
  0.005713 seconds (8 allocations: 64.594 KiB)

julia&gt; @time cheb2leg(c);
  0.423865 seconds (9 allocations: 64.641 KiB)

julia&gt; @time p2*c;
  0.005829 seconds (8 allocations: 64.594 KiB)
"><pre>julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">plan_leg2cheb</span>(c);

julia<span class="pl-k">&gt;</span> p2 <span class="pl-k">=</span> <span class="pl-c1">plan_cheb2leg</span>(c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">leg2cheb</span>(c);
  <span class="pl-c1">0.433938</span> seconds (<span class="pl-c1">9</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.641</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p1<span class="pl-k">*</span>c;
  <span class="pl-c1">0.005713</span> seconds (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.594</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">cheb2leg</span>(c);
  <span class="pl-c1">0.423865</span> seconds (<span class="pl-c1">9</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.641</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p2<span class="pl-k">*</span>c;
  <span class="pl-c1">0.005829</span> seconds (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.594</span> KiB)
</pre></div>
<p dir="auto">Furthermore, for orthogonal polynomial connection problems that are degree-preserving, we should expect to be able to apply the transforms in-place:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; lmul!(p1, c);

julia&gt; lmul!(p2, c);

julia&gt; ldiv!(p1, c);

julia&gt; ldiv!(p2, c);
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lmul!</span>(p1, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lmul!</span>(p2, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ldiv!</span>(p1, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ldiv!</span>(p2, c);
</pre></div>
<h3 dir="auto"><a id="user-content-the-spherical-harmonic-transform" class="anchor" aria-hidden="true" href="#the-spherical-harmonic-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The spherical harmonic transform</h3>
<p dir="auto">Let <code>F</code> be an array of spherical harmonic expansion coefficients with columns arranged by increasing order in absolute value, alternating between negative and positive orders. Then <code>sph2fourier</code> converts the representation into a bivariate Fourier series, and <code>fourier2sph</code> converts it back. Once in a bivariate Fourier series on the sphere, <code>plan_sph_synthesis</code> converts the coefficients to function samples on an equiangular grid that does not sample the poles, and <code>plan_sph_analysis</code> converts them back.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; F = sphrandn(Float64, 1024, 2047); # convenience method

julia&gt; P = plan_sph2fourier(F);

julia&gt; PS = plan_sph_synthesis(F);

julia&gt; PA = plan_sph_analysis(F);

julia&gt; @time G = PS*(P*F);
  0.090767 seconds (12 allocations: 31.985 MiB, 1.46% gc time)

julia&gt; @time H = P\(PA*G);
  0.092726 seconds (12 allocations: 31.985 MiB, 1.63% gc time)

julia&gt; norm(F-H)/norm(F)
2.1541073345177038e-15
"><pre>julia<span class="pl-k">&gt;</span> F <span class="pl-k">=</span> <span class="pl-c1">sphrandn</span>(Float64, <span class="pl-c1">1024</span>, <span class="pl-c1">2047</span>); <span class="pl-c"><span class="pl-c">#</span> convenience method</span>

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">plan_sph2fourier</span>(F);

julia<span class="pl-k">&gt;</span> PS <span class="pl-k">=</span> <span class="pl-c1">plan_sph_synthesis</span>(F);

julia<span class="pl-k">&gt;</span> PA <span class="pl-k">=</span> <span class="pl-c1">plan_sph_analysis</span>(F);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> G <span class="pl-k">=</span> PS<span class="pl-k">*</span>(P<span class="pl-k">*</span>F);
  <span class="pl-c1">0.090767</span> seconds (<span class="pl-c1">12</span> allocations<span class="pl-k">:</span> <span class="pl-c1">31.985</span> MiB, <span class="pl-c1">1.46</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> H <span class="pl-k">=</span> P<span class="pl-k">\</span>(PA<span class="pl-k">*</span>G);
  <span class="pl-c1">0.092726</span> seconds (<span class="pl-c1">12</span> allocations<span class="pl-k">:</span> <span class="pl-c1">31.985</span> MiB, <span class="pl-c1">1.63</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(F<span class="pl-k">-</span>H)<span class="pl-k">/</span><span class="pl-c1">norm</span>(F)
<span class="pl-c1">2.1541073345177038e-15</span>
</pre></div>
<p dir="auto">Due to the structure of the spherical harmonic connection problem, these transforms may also be performed in-place with <code>lmul!</code> and <code>ldiv!</code>.</p>
<p dir="auto">See also <a href="https://github.com/eschnett/FastSphericalHarmonics.jl">FastSphericalHarmonics.jl</a> for a simpler interface to the spherical harmonic transforms defined in this package.</p>
<h2 dir="auto"><a id="user-content-nonuniform-fast-fourier-transforms" class="anchor" aria-hidden="true" href="#nonuniform-fast-fourier-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nonuniform fast Fourier transforms</h2>
<p dir="auto">The NUFFTs are implemented thanks to <a href="https://github.com/ajt60gaibb">Alex Townsend</a>:</p>
<ul dir="auto">
<li><code>nufft1</code> assumes uniform samples and noninteger frequencies;</li>
<li><code>nufft2</code> assumes nonuniform samples and integer frequencies;</li>
<li><code>nufft3 ( = nufft)</code> assumes nonuniform samples and noninteger frequencies;</li>
<li><code>inufft1</code> inverts an <code>nufft1</code>; and,</li>
<li><code>inufft2</code> inverts an <code>nufft2</code>.</li>
</ul>
<p dir="auto">Here is an example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n = 10^4;

julia&gt; c = complex(rand(n));

julia&gt; ω = collect(0:n-1) + rand(n);

julia&gt; nufft1(c, ω, eps());

julia&gt; p1 = plan_nufft1(ω, eps());

julia&gt; @time p1*c;
  0.002383 seconds (6 allocations: 156.484 KiB)

julia&gt; x = (collect(0:n-1) + 3rand(n))/n;

julia&gt; nufft2(c, x, eps());

julia&gt; p2 = plan_nufft2(x, eps());

julia&gt; @time p2*c;
  0.001478 seconds (6 allocations: 156.484 KiB)

julia&gt; nufft3(c, x, ω, eps());

julia&gt; p3 = plan_nufft3(x, ω, eps());

julia&gt; @time p3*c;
  0.058999 seconds (6 allocations: 156.484 KiB)
"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>;

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">complex</span>(<span class="pl-c1">rand</span>(n));

julia<span class="pl-k">&gt;</span> ω <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">rand</span>(n);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nufft1</span>(c, ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">plan_nufft1</span>(ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p1<span class="pl-k">*</span>c;
  <span class="pl-c1">0.002383</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">156.484</span> KiB)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> (<span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-c1">rand</span>(n))<span class="pl-k">/</span>n;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nufft2</span>(c, x, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> p2 <span class="pl-k">=</span> <span class="pl-c1">plan_nufft2</span>(x, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p2<span class="pl-k">*</span>c;
  <span class="pl-c1">0.001478</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">156.484</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nufft3</span>(c, x, ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> p3 <span class="pl-k">=</span> <span class="pl-c1">plan_nufft3</span>(x, ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p3<span class="pl-k">*</span>c;
  <span class="pl-c1">0.058999</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">156.484</span> KiB)
</pre></div>
<h2 dir="auto"><a id="user-content-the-padua-transform" class="anchor" aria-hidden="true" href="#the-padua-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>The Padua Transform</h2>
<p dir="auto">The Padua transform and its inverse are implemented thanks to <a href="https://github.com/MikeAClarke">Michael Clarke</a>. These are optimized methods designed for computing the bivariate Chebyshev coefficients by interpolating a bivariate function at the Padua points on <code>[-1,1]^2</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; n = 200;

julia&gt; N = div((n+1)*(n+2), 2);

julia&gt; v = rand(N); # The length of v is the number of Padua points

julia&gt; @time norm(ipaduatransform(paduatransform(v)) - v)/norm(v)
  0.007373 seconds (543 allocations: 1.733 MiB)
3.925164683252905e-16
"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">200</span>;

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">div</span>((n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(n<span class="pl-k">+</span><span class="pl-c1">2</span>), <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N); <span class="pl-c"><span class="pl-c">#</span> The length of v is the number of Padua points</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">norm</span>(<span class="pl-c1">ipaduatransform</span>(<span class="pl-c1">paduatransform</span>(v)) <span class="pl-k">-</span> v)<span class="pl-k">/</span><span class="pl-c1">norm</span>(v)
  <span class="pl-c1">0.007373</span> seconds (<span class="pl-c1">543</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.733</span> MiB)
<span class="pl-c1">3.925164683252905e-16</span>
</pre></div>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References:</h1>
<p dir="auto">[1]  D. Ruiz—Antolín and A. Townsend. <a href="https://doi.org/10.1137/17M1134822" rel="nofollow">A nonuniform fast Fourier transform based on low rank approximation</a>, <em>SIAM J. Sci. Comput.</em>, <strong>40</strong>:A529–A547, 2018.</p>
<p dir="auto">[2] S. Olver, R. M. Slevinsky, and A. Townsend. <a href="https://doi.org/10.1017/S0962492920000045" rel="nofollow">Fast algorithms using orthogonal polynomials</a>, <em>Acta Numerica</em>, <strong>29</strong>:573—699, 2020.</p>
<p dir="auto">[3]  R. M. Slevinsky. <a href="https://doi.org/10.1016/j.acha.2017.11.001" rel="nofollow">Fast and backward stable transforms between spherical harmonic expansions and bivariate Fourier series</a>, <em>Appl. Comput. Harmon. Anal.</em>, <strong>47</strong>:585—606, 2019.</p>
<p dir="auto">[4]  R. M. Slevinsky, <a href="https://arxiv.org/abs/1711.07866" rel="nofollow">Conquering the pre-computation in two-dimensional harmonic polynomial transforms</a>, arXiv:1711.07866, 2017.</p>
</article></div>