<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-fasttransformsjl" class="anchor" aria-hidden="true" href="#fasttransformsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FastTransforms.jl</h1>
<p><a href="https://travis-ci.org/JuliaApproximation/FastTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/83d5833e66e3126621758d1e07986686ae72151a/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961417070726f78696d6174696f6e2f466173745472616e73666f726d732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/JuliaApproximation/FastTransforms.jl.svg?branch=master" style="max-width:100%;"></a> <a href="https://ci.appveyor.com/project/MikaelSlevinsky/fasttransforms-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/f47175aea02fd8d303692f6cd5874c514c79718c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6f6261397175736831357133783870622f6272616e63682f6d61737465723f7376673d74727565" alt="AppVeyor" data-canonical-src="https://ci.appveyor.com/api/projects/status/oba9qush15q3x8pb/branch/master?svg=true" style="max-width:100%;"></a> <a href="https://cirrus-ci.com/github/JuliaApproximation/FastTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9989c3edaf5182b8bda37030521e4a114e73739c/68747470733a2f2f6170692e6369727275732d63692e636f6d2f6769746875622f4a756c6961417070726f78696d6174696f6e2f466173745472616e73666f726d732e6a6c2e737667" alt="Cirrus" data-canonical-src="https://api.cirrus-ci.com/github/JuliaApproximation/FastTransforms.jl.svg" style="max-width:100%;"></a> <a href="https://codecov.io/gh/JuliaApproximation/FastTransforms.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a5fae1cf72f93f7bcf3f3958fcd64adc4105b87b/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f466173745472616e73666f726d732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/FastTransforms.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a> <a href="https://JuliaApproximation.github.io/FastTransforms.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a> <a href="https://JuliaApproximation.github.io/FastTransforms.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p><code>FastTransforms.jl</code> allows the user to conveniently work with orthogonal polynomials with degrees well into the millions.</p>
<p>This package provides a Julia wrapper for the <a href="https://github.com/MikaelSlevinsky/FastTransforms">C library</a> of the same name. Additionally, all three types of nonuniform fast Fourier transforms are available, as well as the Padua transform.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Installation, which uses <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl">BinaryBuilder</a> for Intel processors (Sandybridge and beyond), may be as straightforward as:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add FastTransforms

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastTransforms, LinearAlgebra
</pre></div>
<h2><a id="user-content-fast-orthogonal-polynomial-transforms" class="anchor" aria-hidden="true" href="#fast-orthogonal-polynomial-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fast orthogonal polynomial transforms</h2>
<p>The 26 orthogonal polynomial transforms are listed in <code>FastTransforms.kind2string.(0:25)</code>. Univariate transforms may be planned with the standard normalization or with orthonormalization. For multivariate transforms, the standard normalization may be too severe for floating-point computations, so it is omitted. Here are two examples:</p>
<h3><a id="user-content-the-chebyshev--legendre-transform" class="anchor" aria-hidden="true" href="#the-chebyshev--legendre-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Chebyshev--Legendre transform</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">8192</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">leg2cheb</span>(c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cheb2leg</span>(c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(<span class="pl-c1">cheb2leg</span>(<span class="pl-c1">leg2cheb</span>(c; normcheb<span class="pl-k">=</span><span class="pl-c1">true</span>); normcheb<span class="pl-k">=</span><span class="pl-c1">true</span>)<span class="pl-k">-</span>c)<span class="pl-k">/</span><span class="pl-c1">norm</span>(c)
<span class="pl-c1">1.1866591414786334e-14</span>
</pre></div>
<p>The implementation separates pre-computation into an <code>FTPlan</code>. This type is constructed with either <code>plan_leg2cheb</code> or <code>plan_cheb2leg</code>. Let's see how much faster it is if we pre-compute.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">plan_leg2cheb</span>(c);

julia<span class="pl-k">&gt;</span> p2 <span class="pl-k">=</span> <span class="pl-c1">plan_cheb2leg</span>(c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">leg2cheb</span>(c);
  <span class="pl-c1">0.433938</span> seconds (<span class="pl-c1">9</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.641</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p1<span class="pl-k">*</span>c;
  <span class="pl-c1">0.005713</span> seconds (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.594</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">cheb2leg</span>(c);
  <span class="pl-c1">0.423865</span> seconds (<span class="pl-c1">9</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.641</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p2<span class="pl-k">*</span>c;
  <span class="pl-c1">0.005829</span> seconds (<span class="pl-c1">8</span> allocations<span class="pl-k">:</span> <span class="pl-c1">64.594</span> KiB)
</pre></div>
<p>Furthermore, for orthogonal polynomial connection problems that are degree-preserving, we should expect to be able to apply the transforms in-place:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lmul!</span>(p1, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lmul!</span>(p2, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ldiv!</span>(p1, c);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">ldiv!</span>(p2, c);
</pre></div>
<h3><a id="user-content-the-spherical-harmonic-transform" class="anchor" aria-hidden="true" href="#the-spherical-harmonic-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The spherical harmonic transform</h3>
<p>Let <code>F</code> be an array of spherical harmonic expansion coefficients with columns arranged by increasing order in absolute value, alternating between negative and positive orders. Then <code>sph2fourier</code> converts the representation into a bivariate Fourier series, and <code>fourier2sph</code> converts it back. Once in a bivariate Fourier series on the sphere, <code>plan_sph_synthesis</code> converts the coefficients to function samples on an equiangular grid that does not sample the poles, and <code>plan_sph_analysis</code> converts them back.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> F <span class="pl-k">=</span> <span class="pl-c1">sphrandn</span>(Float64, <span class="pl-c1">1024</span>, <span class="pl-c1">2047</span>); <span class="pl-c"><span class="pl-c">#</span> convenience method</span>

julia<span class="pl-k">&gt;</span> P <span class="pl-k">=</span> <span class="pl-c1">plan_sph2fourier</span>(F);

julia<span class="pl-k">&gt;</span> PS <span class="pl-k">=</span> <span class="pl-c1">plan_sph_synthesis</span>(F);

julia<span class="pl-k">&gt;</span> PA <span class="pl-k">=</span> <span class="pl-c1">plan_sph_analysis</span>(F);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> G <span class="pl-k">=</span> PS<span class="pl-k">*</span>(P<span class="pl-k">*</span>F);
  <span class="pl-c1">0.090767</span> seconds (<span class="pl-c1">12</span> allocations<span class="pl-k">:</span> <span class="pl-c1">31.985</span> MiB, <span class="pl-c1">1.46</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> H <span class="pl-k">=</span> P<span class="pl-k">\</span>(PA<span class="pl-k">*</span>G);
  <span class="pl-c1">0.092726</span> seconds (<span class="pl-c1">12</span> allocations<span class="pl-k">:</span> <span class="pl-c1">31.985</span> MiB, <span class="pl-c1">1.63</span><span class="pl-k">%</span> gc time)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(F<span class="pl-k">-</span>H)<span class="pl-k">/</span><span class="pl-c1">norm</span>(F)
<span class="pl-c1">2.1541073345177038e-15</span>
</pre></div>
<p>Due to the structure of the spherical harmonic connection problem, these transforms may also be performed in-place with <code>lmul!</code> and <code>ldiv!</code>.</p>
<h2><a id="user-content-nonuniform-fast-fourier-transforms" class="anchor" aria-hidden="true" href="#nonuniform-fast-fourier-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nonuniform fast Fourier transforms</h2>
<p>The NUFFTs are implemented thanks to <a href="https://github.com/ajt60gaibb">Alex Townsend</a>:</p>
<ul>
<li><code>nufft1</code> assumes uniform samples and noninteger frequencies;</li>
<li><code>nufft2</code> assumes nonuniform samples and integer frequencies;</li>
<li><code>nufft3 ( = nufft)</code> assumes nonuniform samples and noninteger frequencies;</li>
<li><code>inufft1</code> inverts an <code>nufft1</code>; and,</li>
<li><code>inufft2</code> inverts an <code>nufft2</code>.</li>
</ul>
<p>Here is an example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>;

julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> <span class="pl-c1">complex</span>(<span class="pl-c1">rand</span>(n));

julia<span class="pl-k">&gt;</span> ω <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">rand</span>(n);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nufft1</span>(c, ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> p1 <span class="pl-k">=</span> <span class="pl-c1">plan_nufft1</span>(ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p1<span class="pl-k">*</span>c;
  <span class="pl-c1">0.002383</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">156.484</span> KiB)

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> (<span class="pl-c1">collect</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>n<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">+</span> <span class="pl-c1">3</span><span class="pl-c1">rand</span>(n))<span class="pl-k">/</span>n;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nufft2</span>(c, x, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> p2 <span class="pl-k">=</span> <span class="pl-c1">plan_nufft2</span>(x, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p2<span class="pl-k">*</span>c;
  <span class="pl-c1">0.001478</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">156.484</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">nufft3</span>(c, x, ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> p3 <span class="pl-k">=</span> <span class="pl-c1">plan_nufft3</span>(x, ω, <span class="pl-c1">eps</span>());

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> p3<span class="pl-k">*</span>c;
  <span class="pl-c1">0.058999</span> seconds (<span class="pl-c1">6</span> allocations<span class="pl-k">:</span> <span class="pl-c1">156.484</span> KiB)
</pre></div>
<h2><a id="user-content-the-padua-transform" class="anchor" aria-hidden="true" href="#the-padua-transform"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Padua Transform</h2>
<p>The Padua transform and its inverse are implemented thanks to <a href="https://github.com/MikeAClarke">Michael Clarke</a>. These are optimized methods designed for computing the bivariate Chebyshev coefficients by interpolating a bivariate function at the Padua points on <code>[-1,1]^2</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">200</span>;

julia<span class="pl-k">&gt;</span> N <span class="pl-k">=</span> <span class="pl-c1">div</span>((n<span class="pl-k">+</span><span class="pl-c1">1</span>)<span class="pl-k">*</span>(n<span class="pl-k">+</span><span class="pl-c1">2</span>), <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> v <span class="pl-k">=</span> <span class="pl-c1">rand</span>(N); <span class="pl-c"><span class="pl-c">#</span> The length of v is the number of Padua points</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> <span class="pl-c1">norm</span>(<span class="pl-c1">ipaduatransform</span>(<span class="pl-c1">paduatransform</span>(v)) <span class="pl-k">-</span> v)<span class="pl-k">/</span><span class="pl-c1">norm</span>(v)
  <span class="pl-c1">0.007373</span> seconds (<span class="pl-c1">543</span> allocations<span class="pl-k">:</span> <span class="pl-c1">1.733</span> MiB)
<span class="pl-c1">3.925164683252905e-16</span>
</pre></div>
<h1><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References:</h1>
<p>[1]  B. Alpert and V. Rokhlin. <a href="http://dx.doi.org/10.1137/0912009" rel="nofollow">A fast algorithm for the evaluation of Legendre expansions</a>, <em>SIAM J. Sci. Stat. Comput.</em>, <strong>12</strong>:158—179, 1991.</p>
<p>[2]  N. Hale and A. Townsend. <a href="http://dx.doi.org/10.1137/130932223" rel="nofollow">A fast, simple, and stable Chebyshev—Legendre transform using an asymptotic formula</a>, <em>SIAM J. Sci. Comput.</em>, <strong>36</strong>:A148—A167, 2014.</p>
<p>[3]  J. Keiner. <a href="http://dx.doi.org/10.1137/070703065" rel="nofollow">Computing with expansions in Gegenbauer polynomials</a>, <em>SIAM J. Sci. Comput.</em>, <strong>31</strong>:2151—2171, 2009.</p>
<p>[4]  D. Ruiz—Antolín and A. Townsend. <a href="https://arxiv.org/abs/1701.04492" rel="nofollow">A nonuniform fast Fourier transform based on low rank approximation</a>, arXiv:1701.04492, 2017.</p>
<p>[5]  R. M. Slevinsky. <a href="https://doi.org/10.1093/imanum/drw070" rel="nofollow">On the use of Hahn's asymptotic formula and stabilized recurrence for a fast, simple, and stable Chebyshev—Jacobi transform</a>, <em>IMA J. Numer. Anal.</em>, <strong>38</strong>:102—124, 2018.</p>
<p>[6]  R. M. Slevinsky. <a href="https://doi.org/10.1016/j.acha.2017.11.001" rel="nofollow">Fast and backward stable transforms between spherical harmonic expansions and bivariate Fourier series</a>, <em>Appl. Comput. Harmon. Anal.</em>, <strong>47</strong>:585—606, 2019.</p>
<p>[7]  R. M. Slevinsky, <a href="https://arxiv.org/abs/1711.07866" rel="nofollow">Conquering the pre-computation in two-dimensional harmonic polynomial transforms</a>, arXiv:1711.07866, 2017.</p>
<p>[8]  A. Townsend, M. Webb, and S. Olver. <a href="https://doi.org/10.1090/mcom/3277" rel="nofollow">Fast polynomial transforms based on Toeplitz and Hankel matrices</a>, in press at <em>Math. Comp.</em>, 2017.</p>
</article></div>