<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kryburycompress" class="anchor" aria-hidden="true" href="#kryburycompress"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KryburyCompress</h1>
<p dir="auto"><a href="https://github.com/andrew-saydjari/KryburyCompress.jl/actions"><img src="https://github.com/andrew-saydjari/KryburyCompress.jl/workflows/CI/badge.svg" alt="" style="max-width: 100%;"></a>
<a href="https://codecov.io/github/andrew-saydjari/KryburyCompress.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/b92e9c172e8cd3d8c11ab492d84a9a1d2ce61e38588d6af116af218bacc2176e/68747470733a2f2f636f6465636f762e696f2f6769746875622f616e647265772d736179646a6172692f4b727962757279436f6d70726573732e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="" data-canonical-src="https://codecov.io/github/andrew-saydjari/KryburyCompress.jl/coverage.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto">The purpose of this package is to enable the compression of possibly high dimensional covariance matrices that are well represented by low-rank approximations. In general, when covariances in data are large, one must store either an N x N covariance matrix or, one makes the gross approximation that the covariance matrix is diagonal. This package allows interpolation between those two limits, finding a fast, low rank approximation to the covariance matrix which is exported as a type with fast matrix-vector multiplication. We provide read/write methods to store this object in a FITS file, to allow multilingual compatability.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Currently, installation is directly from the GitHub</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://github.com/andrew-saydjari/KryburyCompress.jl&quot;)"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/andrew-saydjari/KryburyCompress.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-compression" class="anchor" aria-hidden="true" href="#compression"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Compression</h2>
<p dir="auto">Given a matrix <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M$</math-renderer>, we find an approximation <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M \approxeq A + V * V'$</math-renderer> where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$A$</math-renderer> is <code>Diagonal</code> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$V$</math-renderer> is a skinny matrix, containing the largest eigenvectors of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M$</math-renderer>. The largest eigenvectors are found in-practice using Krylov methods from <a href="https://github.com/Jutho/KrylovKit.jl">KrylovKit.jl</a>. Then, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$A$</math-renderer> is simply the residual diagonal between <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$V * V'$</math-renderer>. This compression can be massively accelerated when <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M$</math-renderer> is itself composed of products of low-rank matrices represented via <a href="https://github.com/andrew-saydjari/LowRankOps.jl">LowRankOps.jl</a>.</p>
<h3 dir="auto">
<a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage:</h3>
<p dir="auto">We use a <code>LowRankMultMat</code> and <code>LowRankDiagMat</code> here to speed up the compression. In this example, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M = (U * U') - (U * U') * D * (U * U')$</math-renderer> and we want to find a low-rank approximation to <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="58161bb41fbca6f688cd72e19798f4bd">$M$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KryburyCompress
using LinearAlgebra, KrylovKit, FITSIO, LowRankOps
using Random: seed!

seed!(123)
n_big = 100
n_lit = 2

D = 1e-4*abs.(randn(n_big))
U = randn(n_big,n_lit)

function Cii_precomp_mult(matList)
    return []
end

function Cii_fxn_mult(matList,precompList,x)
    Ctotinv = matList[1]
    Vi = matList[2]
    arg2 = Vi*(Vi'*x)
    return arg2 - Vi*(Vi'*(Ctotinv*arg2))
end

function Cii_precomp_diag(matList)
    Ctotinv = matList[1]
    Vi = matList[2]
    return [Vi'*(Ctotinv*Vi)]
end

function Cii_diag_map(matList,precompList)
    Vi = matList[2]
    arg1 = precompList[1]
    return dropdims(sum(Vi.^2,dims=2),dims=2).-dropdims(sum(Vi'.*(arg1*Vi'),dims=1),dims=1)
end

BMat = LowRankMultMat([Diagonal(D),U],Cii_precomp_mult,Cii_fxn_mult);
BMatDiag = LowRankDiagMat([Diagonal(D),U],Cii_precomp_diag,Cii_diag_map);

W = kryburyCompress(BMat,BMatDiag,n_big)"><pre><span class="pl-k">using</span> KryburyCompress
<span class="pl-k">using</span> LinearAlgebra, KrylovKit, FITSIO, LowRankOps
<span class="pl-k">using</span> Random<span class="pl-k">:</span> seed!

<span class="pl-c1">seed!</span>(<span class="pl-c1">123</span>)
n_big <span class="pl-k">=</span> <span class="pl-c1">100</span>
n_lit <span class="pl-k">=</span> <span class="pl-c1">2</span>

D <span class="pl-k">=</span> <span class="pl-c1">1e-4</span><span class="pl-k">*</span><span class="pl-c1">abs</span>.(<span class="pl-c1">randn</span>(n_big))
U <span class="pl-k">=</span> <span class="pl-c1">randn</span>(n_big,n_lit)

<span class="pl-k">function</span> <span class="pl-en">Cii_precomp_mult</span>(matList)
    <span class="pl-k">return</span> []
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Cii_fxn_mult</span>(matList,precompList,x)
    Ctotinv <span class="pl-k">=</span> matList[<span class="pl-c1">1</span>]
    Vi <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    arg2 <span class="pl-k">=</span> Vi<span class="pl-k">*</span>(Vi<span class="pl-k">'</span><span class="pl-k">*</span>x)
    <span class="pl-k">return</span> arg2 <span class="pl-k">-</span> Vi<span class="pl-k">*</span>(Vi<span class="pl-k">'</span><span class="pl-k">*</span>(Ctotinv<span class="pl-k">*</span>arg2))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Cii_precomp_diag</span>(matList)
    Ctotinv <span class="pl-k">=</span> matList[<span class="pl-c1">1</span>]
    Vi <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    <span class="pl-k">return</span> [Vi<span class="pl-k">'</span><span class="pl-k">*</span>(Ctotinv<span class="pl-k">*</span>Vi)]
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Cii_diag_map</span>(matList,precompList)
    Vi <span class="pl-k">=</span> matList[<span class="pl-c1">2</span>]
    arg1 <span class="pl-k">=</span> precompList[<span class="pl-c1">1</span>]
    <span class="pl-k">return</span> <span class="pl-c1">dropdims</span>(<span class="pl-c1">sum</span>(Vi<span class="pl-k">.^</span><span class="pl-c1">2</span>,dims<span class="pl-k">=</span><span class="pl-c1">2</span>),dims<span class="pl-k">=</span><span class="pl-c1">2</span>)<span class="pl-k">.-</span><span class="pl-c1">dropdims</span>(<span class="pl-c1">sum</span>(Vi<span class="pl-k">'</span><span class="pl-k">.*</span>(arg1<span class="pl-k">*</span>Vi<span class="pl-k">'</span>),dims<span class="pl-k">=</span><span class="pl-c1">1</span>),dims<span class="pl-k">=</span><span class="pl-c1">1</span>)
<span class="pl-k">end</span>

BMat <span class="pl-k">=</span> <span class="pl-c1">LowRankMultMat</span>([<span class="pl-c1">Diagonal</span>(D),U],Cii_precomp_mult,Cii_fxn_mult);
BMatDiag <span class="pl-k">=</span> <span class="pl-c1">LowRankDiagMat</span>([<span class="pl-c1">Diagonal</span>(D),U],Cii_precomp_diag,Cii_diag_map);

W <span class="pl-k">=</span> <span class="pl-c1">kryburyCompress</span>(BMat,BMatDiag,n_big)</pre></div>
<h2 dir="auto">
<a id="user-content-io" class="anchor" aria-hidden="true" href="#io"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>I/O</h2>
<p dir="auto">The <code>DiagWoodbury</code> object resulting from the compression can be written and read to a FITS file using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="fname = &quot;example.fits&quot;
save(W,fname)
W = read_krybury(fname)"><pre>fname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>example.fits<span class="pl-pds">"</span></span>
<span class="pl-c1">save</span>(W,fname)
W <span class="pl-k">=</span> <span class="pl-c1">read_krybury</span>(fname)</pre></div>
<p dir="auto">Each of the fields from the <code>DiagWoodbury</code> object are saved as different extensions in the FITS file.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3efc451a9d88fe68de3f904ce1cd03c43bed447c723b7df894a34ffc3ea99465/68747470733a2f2f76697369746f722d62616467652e676c697463682e6d652f62616467653f706167655f69643d616e647265772d736179646a6172692e4b727962757279436f6d70726573732e6a6c"><img width="0" src="https://camo.githubusercontent.com/3efc451a9d88fe68de3f904ce1cd03c43bed447c723b7df894a34ffc3ea99465/68747470733a2f2f76697369746f722d62616467652e676c697463682e6d652f62616467653f706167655f69643d616e647265772d736179646a6172692e4b727962757279436f6d70726573732e6a6c" data-canonical-src="https://visitor-badge.glitch.me/badge?page_id=andrew-saydjari.KryburyCompress.jl" style="max-width: 100%;"></a></p>

</article></div>