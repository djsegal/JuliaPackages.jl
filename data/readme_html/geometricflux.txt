<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geometricfluxjl" class="anchor" aria-hidden="true" href="#geometricfluxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>GeometricFlux.jl</h1>
<p align="center">
<a target="_blank" rel="noopener noreferrer" href="https://github.com/FluxML/GeometricFlux.jl/raw/master/logos/logo.png"><img width="400px" src="https://github.com/FluxML/GeometricFlux.jl/raw/master/logos/logo.png" style="max-width:100%;"></a>
</p>
<p><a href="https://fluxml.ai/GeometricFlux.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://fluxml.ai/GeometricFlux.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/FluxML/GeometricFlux.jl/actions/workflows/ci.yml/badge.svg"><img src="https://github.com/FluxML/GeometricFlux.jl/actions/workflows/ci.yml/badge.svg" alt="" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/FluxML/GeometricFlux.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6ca452b9a0a17ec38a3cc292018c279ea366aa131ee3e2bbb07269459eb98d01/68747470733a2f2f636f6465636f762e696f2f67682f466c75784d4c2f47656f6d6574726963466c75782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/FluxML/GeometricFlux.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>GeometricFlux is a geometric deep learning library for <a href="https://github.com/FluxML/Flux.jl">Flux</a>. This library aims to be compatible with packages from <a href="https://github.com/JuliaGraphs">JuliaGraphs</a> ecosystem and have support of CUDA GPU acceleration with <a href="https://github.com/JuliaGPU/CUDA.jl">CUDA</a>. Message passing scheme is implemented as a flexbile framework and fused with Graph Network block scheme. GeometricFlux is compatible with other packages that are composable with Flux.</p>
<p>Suggestions, issues and pull requsts are welcome.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="]add GeometricFlux
"><pre>]add GeometricFlux</pre></div>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>Extend Flux deep learning framework in Julia and compatible with Flux layers.</li>
<li>Support of CUDA GPU with CUDA.jl</li>
<li>Integrate with existing JuliaGraphs ecosystem</li>
<li>Support generic graph neural network architectures</li>
<li>Variable graph inputs are supported. You use it when diverse graph structures are prepared as inputs to the same model.</li>
<li>Integrate GNN benchmark datasets (WIP)</li>
</ul>
<h2><a id="user-content-graph-convolutional-layers" class="anchor" aria-hidden="true" href="#graph-convolutional-layers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Graph convolutional layers</h2>
<p>Construct GCN layer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="graph = # can be adj_mat, adj_list, simple_graphs...
GCNConv([graph, ]input_dim=&gt;output_dim, relu)
"><pre>graph <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">#</span> can be adj_mat, adj_list, simple_graphs...</span>
<span class="pl-c1">GCNConv</span>([graph, ]input_dim<span class="pl-k">=&gt;</span>output_dim, relu)</pre></div>
<h2><a id="user-content-use-it-as-you-use-flux" class="anchor" aria-hidden="true" href="#use-it-as-you-use-flux"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use it as you use Flux</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="model = Chain(GCNConv(g, 1024=&gt;512, relu),
              Dropout(0.5),
              GCNConv(g, 512=&gt;128),
              Dense(128, 10),
              softmax)
## Loss
loss(x, y) = logitcrossentropy(model(x), y)
accuracy(x, y) = mean(onecold(model(x)) .== onecold(y))

## Training
ps = Flux.params(model)
train_data = [(train_X, train_y)]
opt = ADAM(0.01)
evalcb() = @show(accuracy(train_X, train_y))

Flux.train!(loss, ps, train_data, opt, cb=throttle(evalcb, 10))
"><pre>model <span class="pl-k">=</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">GCNConv</span>(g, <span class="pl-c1">1024</span><span class="pl-k">=&gt;</span><span class="pl-c1">512</span>, relu),
              <span class="pl-c1">Dropout</span>(<span class="pl-c1">0.5</span>),
              <span class="pl-c1">GCNConv</span>(g, <span class="pl-c1">512</span><span class="pl-k">=&gt;</span><span class="pl-c1">128</span>),
              <span class="pl-c1">Dense</span>(<span class="pl-c1">128</span>, <span class="pl-c1">10</span>),
              softmax)
<span class="pl-c"><span class="pl-c">#</span># Loss</span>
<span class="pl-en">loss</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">logitcrossentropy</span>(<span class="pl-c1">model</span>(x), y)
<span class="pl-en">accuracy</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">onecold</span>(<span class="pl-c1">model</span>(x)) <span class="pl-k">.==</span> <span class="pl-c1">onecold</span>(y))

<span class="pl-c"><span class="pl-c">#</span># Training</span>
ps <span class="pl-k">=</span> Flux<span class="pl-k">.</span><span class="pl-c1">params</span>(model)
train_data <span class="pl-k">=</span> [(train_X, train_y)]
opt <span class="pl-k">=</span> <span class="pl-c1">ADAM</span>(<span class="pl-c1">0.01</span>)
<span class="pl-en">evalcb</span>() <span class="pl-k">=</span> <span class="pl-c1">@show</span>(<span class="pl-c1">accuracy</span>(train_X, train_y))

Flux<span class="pl-k">.</span><span class="pl-c1">train!</span>(loss, ps, train_data, opt, cb<span class="pl-k">=</span><span class="pl-c1">throttle</span>(evalcb, <span class="pl-c1">10</span>))</pre></div>
</article></div>