<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-ringlists" class="anchor" aria-hidden="true" href="#ringlists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RingLists</h1>
<p><a href="https://travis-ci.com/scheinerman/RingLists.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a834212cbac1a931b5c28864e775cae3498e7eb3a61273ec4bcd09131256dfc4/68747470733a2f2f7472617669732d63692e636f6d2f73636865696e65726d616e2f52696e674c697374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/scheinerman/RingLists.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A <code>RingList</code> is a list of <em>distinct</em> values that is
unchanged by rotation. These can be created by giving a list of values
or a one-dimensional array of values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using RingLists

julia&gt; a = RingList(1,2,3,4);

julia&gt; b = RingList([2,3,4,1]);

julia&gt; a==b
true

julia&gt; println(a)
[ 1 → 2 → 3 → 4 → 1 ]
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RingLists

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">RingList</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>);

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">RingList</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">1</span>]);

julia<span class="pl-k">&gt;</span> a<span class="pl-k">==</span>b
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(a)
[ <span class="pl-c1">1</span> → <span class="pl-c1">2</span> → <span class="pl-c1">3</span> → <span class="pl-c1">4</span> → <span class="pl-c1">1</span> ]</pre></div>
<p>Note the repeat of element <code>1</code> in the output showing that the list wraps around.</p>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<p>In this list, <code>a</code> stands for a <code>RingList</code>.</p>
<ul>
<li><code>length(a)</code> gives the number of elements held in the <code>RingList</code>.</li>
<li><code>keys(a)</code> returns an iterator of the elements in <code>a</code>.</li>
<li><code>haskey(a,x)</code> checks if <code>x</code> is an element of the <code>RingList</code>.</li>
<li><code>Vector(a)</code> returns a one-dimensional array of
the elements in <code>a</code>.</li>
<li><code>Set(a)</code> returns the elements of <code>a</code> (as an unordered collection).</li>
<li><code>collect(a)</code> returns the elements of <code>a</code> in an ordered list.</li>
<li><code>copy(a)</code> makes an independent copy of <code>a</code>.</li>
<li><code>shuffle(a)</code> returns a new <code>RingList</code> with the same elements as <code>a</code> but
in randomized order.</li>
<li><code>next(a,x)</code> returns the next element after <code>x</code> in <code>a</code>; also <code>a[x]</code>.</li>
<li><code>previous(a,x)</code> returns the element <code>y</code> with <code>a[y]==x</code>; also <code>a(y)</code>.</li>
<li><code>first(a)</code> returns an element of <code>a</code> that is, if possible, the smallest element of <code>a</code>. Call <code>first(a,false)</code> to ignore trying to start at the smallest element. Fails if <code>a</code> is empty.</li>
<li><code>delete!(a,x)</code> removes <code>x</code> from the collection linking together its
predecessor and successor.</li>
<li><code>insert!(a,x)</code> inserts the element <code>a</code> into the <code>RingList</code>. No guarantee where it will end up.</li>
<li><code>insertbefore!(a,x,y)</code> inserts <code>x</code> into <code>a</code> before <code>y</code>.</li>
<li><code>insertafter!(a,x,y)</code> inserts <code>x</code> into <code>a</code> after <code>y</code>. For example:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = RingList(1,2,3)
[ 1 → 2 → 3 → 1 ]

julia&gt; insertafter!(a,99,2)

julia&gt; a
[ 1 → 2 → 99 → 3 → 1 ]
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">RingList</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)
[ <span class="pl-c1">1</span> → <span class="pl-c1">2</span> → <span class="pl-c1">3</span> → <span class="pl-c1">1</span> ]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">insertafter!</span>(a,<span class="pl-c1">99</span>,<span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> a
[ <span class="pl-c1">1</span> → <span class="pl-c1">2</span> → <span class="pl-c1">99</span> → <span class="pl-c1">3</span> → <span class="pl-c1">1</span> ]</pre></div>
<ul>
<li><code>reverse(a)</code> returns a new <code>RingList</code> with the elements reversed.</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = RingList(1,2,3,4,5)
[ 1 → 2 → 3 → 4 → 5 → 1 ]

julia&gt; b = reverse(a)
[ 1 → 5 → 4 → 3 → 2 → 1 ]
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">RingList</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)
[ <span class="pl-c1">1</span> → <span class="pl-c1">2</span> → <span class="pl-c1">3</span> → <span class="pl-c1">4</span> → <span class="pl-c1">5</span> → <span class="pl-c1">1</span> ]

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">reverse</span>(a)
[ <span class="pl-c1">1</span> → <span class="pl-c1">5</span> → <span class="pl-c1">4</span> → <span class="pl-c1">3</span> → <span class="pl-c1">2</span> → <span class="pl-c1">1</span> ]</pre></div>
<h2><a id="user-content-iteration" class="anchor" aria-hidden="true" href="#iteration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Iteration</h2>
<p><code>RingList</code> elements can be iterated:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; a = RingList(1,2,3,4,5)
[ 1 → 2 → 3 → 4 → 5 → 1 ]

julia&gt; for x in a
       println(x)
       end
1
2
3
4
5
"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">RingList</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>)
[ <span class="pl-c1">1</span> → <span class="pl-c1">2</span> → <span class="pl-c1">3</span> → <span class="pl-c1">4</span> → <span class="pl-c1">5</span> → <span class="pl-c1">1</span> ]

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> x <span class="pl-k">in</span> a
       <span class="pl-c1">println</span>(x)
       <span class="pl-k">end</span>
<span class="pl-c1">1</span>
<span class="pl-c1">2</span>
<span class="pl-c1">3</span>
<span class="pl-c1">4</span>
<span class="pl-c1">5</span></pre></div>
</article></div>