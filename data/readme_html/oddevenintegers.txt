<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-oddevenintegers" class="anchor" aria-hidden="true" href="#oddevenintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>OddEvenIntegers</h1>
<p dir="auto"><a href="https://github.com/jishnub/OddEvenIntegers.jl/actions/workflows/CI.yml"><img src="https://github.com/jishnub/OddEvenIntegers.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jishnub/OddEvenIntegers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4f41d7b15d61b1a8852a999711617d618436057810ae53efb862053de6e2eef6/68747470733a2f2f636f6465636f762e696f2f67682f6a6973686e75622f4f64644576656e496e7465676572732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d6f323774747630757870" alt="codecov" data-canonical-src="https://codecov.io/gh/jishnub/OddEvenIntegers.jl/branch/main/graph/badge.svg?token=o27ttv0uxp" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides the types <code>Odd</code> and <code>Even</code> that may wrap an integer. Using these types, the result of <code>isodd</code> and <code>iseven</code> may be evaluated at compile time.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; Odd(3)
3

julia&gt; Even(4)
4

julia&gt; @code_typed isodd(Odd(3))
CodeInfo(
1 ─     return true
) =&gt; Bool

julia&gt; @code_typed iseven(Even(4))
CodeInfo(
1 ─     return true
) =&gt; Bool"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Odd</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Even</span>(<span class="pl-c1">4</span>)
<span class="pl-c1">4</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">isodd</span>(<span class="pl-c1">Odd</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─     <span class="pl-k">return</span> <span class="pl-c1">true</span>
) <span class="pl-k">=&gt;</span> Bool

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">iseven</span>(<span class="pl-c1">Even</span>(<span class="pl-c1">4</span>))
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─     <span class="pl-k">return</span> <span class="pl-c1">true</span>
) <span class="pl-k">=&gt;</span> Bool</pre></div>
<p dir="auto">This package interfaces with <code>HalfIntegers</code>, so that the half of an <code>Odd</code> or an <code>Even</code> may access the half-integer methods, some of which may be evaluated at compile time. The canonical way to construct and use such a type is:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using OddEvenIntegers, HalfIntegers

julia&gt; x = half(Odd(3))
3/2

julia&gt; @code_typed isinteger(x)
CodeInfo(
1 ─     return false
) =&gt; Bool

julia&gt; x + 1
5/2

julia&gt; @code_typed isinteger(x + 1)
CodeInfo(
1 ─     return false
) =&gt; Bool"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> OddEvenIntegers, HalfIntegers

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">half</span>(<span class="pl-c1">Odd</span>(<span class="pl-c1">3</span>))
<span class="pl-c1">3</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">isinteger</span>(x)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─     <span class="pl-k">return</span> <span class="pl-c1">false</span>
) <span class="pl-k">=&gt;</span> Bool

julia<span class="pl-k">&gt;</span> x <span class="pl-k">+</span> <span class="pl-c1">1</span>
<span class="pl-c1">5</span><span class="pl-k">/</span><span class="pl-c1">2</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_typed</span> <span class="pl-c1">isinteger</span>(x <span class="pl-k">+</span> <span class="pl-c1">1</span>)
<span class="pl-c1">CodeInfo</span>(
<span class="pl-c1">1</span> ─     <span class="pl-k">return</span> <span class="pl-c1">false</span>
) <span class="pl-k">=&gt;</span> Bool</pre></div>
</article></div>