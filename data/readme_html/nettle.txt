<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nettlejl" class="anchor" aria-hidden="true" href="#nettlejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Nettle.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/staticfloat/Nettle.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/69262545338dcb853efe5eab041c4e03b4c1581be265935c285939be19ff6a6f/68747470733a2f2f7472617669732d63692e6f72672f737461746963666c6f61742f4e6574746c652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/staticfloat/Nettle.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://ci.appveyor.com/project/staticfloat/nettle-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b31483a40790a2cf3af5236987d2c461952d0556efe281a1ffb90e57b2b380d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6175686a706735396e7733613361696a3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/auhjpg59nw3a3aij?svg=true" style="max-width: 100%;"></a></p>
<p dir="auto"><code>libnettle</code> supports a wide array of hashing algorithms.  This package interrogates <code>libnettle</code> to determine the available hash types, which are then available from <code>Nettle.get_hash_types()</code>.  Typically these include <code>SHA1</code>, <code>SHA224</code>, <code>SHA256</code>, <code>SHA384</code>, <code>SHA512</code>, <code>MD2</code>, <code>MD5</code> and <code>RIPEMD160</code>.</p>
<p dir="auto">Typical usage of these hash algorithms is to create a <code>Hasher</code>, <code>update!</code> it, and finally get a <code>digest</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="h = Hasher(&quot;sha256&quot;)
update!(h, &quot;this is a test&quot;)
hexdigest!(h)

#or...
hexdigest(&quot;sha256&quot;, &quot;this is a test&quot;)"><pre>h <span class="pl-k">=</span> <span class="pl-c1">Hasher</span>(<span class="pl-s"><span class="pl-pds">"</span>sha256<span class="pl-pds">"</span></span>)
<span class="pl-c1">update!</span>(h, <span class="pl-s"><span class="pl-pds">"</span>this is a test<span class="pl-pds">"</span></span>)
<span class="pl-c1">hexdigest!</span>(h)

<span class="pl-c"><span class="pl-c">#</span>or...</span>
<span class="pl-c1">hexdigest</span>(<span class="pl-s"><span class="pl-pds">"</span>sha256<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>this is a test<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Outputs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="2e99758548972a8e8822ad47fa1017ff72f06f3ff6a016851f45c398732bc50c"><pre class="notranslate"><code>2e99758548972a8e8822ad47fa1017ff72f06f3ff6a016851f45c398732bc50c
</code></pre></div>
<p dir="auto">A <code>digest!</code> function is also available to return the digest as an <code>Array(UInt8,1)</code>.  Note that both the <code>digest!</code> function and the <code>hexdigest!</code> function reset the internal <code>Hasher</code> object to a pristine state, ready for further <code>update!</code> calls.</p>
<h1 dir="auto"><a id="user-content-hmac-functionality" class="anchor" aria-hidden="true" href="#hmac-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>HMAC Functionality</h1>
<p dir="auto"><a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code" rel="nofollow">HMAC</a> functionality revolves around the <code>HMACState</code> type, created by the function of the same name.  Arguments to this constructor are the desired hash type, and the desired key used to authenticate the hashing:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="h = HMACState(&quot;sha256&quot;, &quot;mykey&quot;)
update!(h, &quot;this is a test&quot;)
hexdigest!(h)

#or...
hexdigest(&quot;sha256&quot;, &quot;mykey&quot;, &quot;this is a test&quot;)"><pre>h <span class="pl-k">=</span> <span class="pl-c1">HMACState</span>(<span class="pl-s"><span class="pl-pds">"</span>sha256<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mykey<span class="pl-pds">"</span></span>)
<span class="pl-c1">update!</span>(h, <span class="pl-s"><span class="pl-pds">"</span>this is a test<span class="pl-pds">"</span></span>)
<span class="pl-c1">hexdigest!</span>(h)

<span class="pl-c"><span class="pl-c">#</span>or...</span>
<span class="pl-c1">hexdigest</span>(<span class="pl-s"><span class="pl-pds">"</span>sha256<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mykey<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>this is a test<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">Outputs:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="&quot;ca1dcafe1b5fb329256248196c0f92a95fbe3788db6c5cb0775b4106db437ba2&quot;"><pre class="notranslate"><code>"ca1dcafe1b5fb329256248196c0f92a95fbe3788db6c5cb0775b4106db437ba2"
</code></pre></div>
<p dir="auto">A <code>digest!</code> function is also available to return the digest as an <code>Array(UInt8,1)</code>.  Note that both the <code>digest!</code> function and the <code>hexdigest!</code> function reset the internal <code>HMACState</code> object to a pristine state, ready for further <code>update!</code> calls.</p>
<h1 dir="auto"><a id="user-content-encryptiondecryption-functionality" class="anchor" aria-hidden="true" href="#encryptiondecryption-functionality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Encryption/Decryption Functionality</h1>
<p dir="auto">Nettle also provides encryption and decryption functionality, using the <code>Encryptor</code> and <code>Decryptor</code> objects.  Cipher types are available through <code>get_cipher_types()</code>.  Create a pair of objects with a shared key, and <code>encrypt()</code>/<code>decrypt()</code> to your heart's content:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="key = &quot;this key's exactly 32 bytes long&quot;
enc = Encryptor(&quot;AES256&quot;, key)
plaintext = &quot;this is 16 chars&quot;
ciphertext = encrypt(enc, plaintext)

dec = Decryptor(&quot;AES256&quot;, key)
deciphertext = decrypt(dec, ciphertext)
Vector{UInt8}(plaintext) == deciphertext # no bytestring

# or...
decrypt(&quot;AES256&quot;, key, encrypt(&quot;AES256&quot;, key, plaintext)) == Vector{UInt8}(plaintext)"><pre>key <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>this key's exactly 32 bytes long<span class="pl-pds">"</span></span>
enc <span class="pl-k">=</span> <span class="pl-c1">Encryptor</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, key)
plaintext <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>this is 16 chars<span class="pl-pds">"</span></span>
ciphertext <span class="pl-k">=</span> <span class="pl-c1">encrypt</span>(enc, plaintext)

dec <span class="pl-k">=</span> <span class="pl-c1">Decryptor</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, key)
deciphertext <span class="pl-k">=</span> <span class="pl-c1">decrypt</span>(dec, ciphertext)
<span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(plaintext) <span class="pl-k">==</span> deciphertext <span class="pl-c"><span class="pl-c">#</span> no bytestring</span>

<span class="pl-c"><span class="pl-c">#</span> or...</span>
<span class="pl-c1">decrypt</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, key, <span class="pl-c1">encrypt</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, key, plaintext)) <span class="pl-k">==</span> <span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(plaintext)</pre></div>
<p dir="auto">For AES256CBC encrypt/decrypt, generate a pair of key32 and iv16 with salt.</p>
<p dir="auto">(And add or trim padding yourself.)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="passwd = &quot;Secret Passphrase&quot;
salt = hex2bytes(&quot;a3e550e89e70996c&quot;) # use random 8 bytes
(key32, iv16) = gen_key32_iv16(Vector{UInt8}(passwd), salt)

enc = Encryptor(&quot;AES256&quot;, key32)
plaintext = &quot;Message&quot;
ciphertext = encrypt(enc, :CBC, iv16, add_padding_PKCS5(Vector{UInt8}(plaintext), 16))

dec = Decryptor(&quot;AES256&quot;, key32)
deciphertext = decrypt(dec, :CBC, iv16, ciphertext)
Vector{UInt8}(plaintext) == trim_padding_PKCS5(deciphertext) # no bytestring

# or...
plainbytes = hex2bytes(&quot;414155aa5541416162&quot;)
cipherbytes = encrypt(&quot;AES256&quot;, :CBC, iv16, key32, add_padding_PKCS5(plainbytes, 16))
decipherbytes = decrypt(&quot;AES256&quot;, :CBC, iv16, key32, cipherbytes)
plainbytes == trim_padding_PKCS5(decipherbytes) # no bytestring"><pre>passwd <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Secret Passphrase<span class="pl-pds">"</span></span>
salt <span class="pl-k">=</span> <span class="pl-c1">hex2bytes</span>(<span class="pl-s"><span class="pl-pds">"</span>a3e550e89e70996c<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> use random 8 bytes</span>
(key32, iv16) <span class="pl-k">=</span> <span class="pl-c1">gen_key32_iv16</span>(<span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(passwd), salt)

enc <span class="pl-k">=</span> <span class="pl-c1">Encryptor</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, key32)
plaintext <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Message<span class="pl-pds">"</span></span>
ciphertext <span class="pl-k">=</span> <span class="pl-c1">encrypt</span>(enc, <span class="pl-c1">:CBC</span>, iv16, <span class="pl-c1">add_padding_PKCS5</span>(<span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(plaintext), <span class="pl-c1">16</span>))

dec <span class="pl-k">=</span> <span class="pl-c1">Decryptor</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, key32)
deciphertext <span class="pl-k">=</span> <span class="pl-c1">decrypt</span>(dec, <span class="pl-c1">:CBC</span>, iv16, ciphertext)
<span class="pl-c1">Vector</span><span class="pl-c1">{UInt8}</span>(plaintext) <span class="pl-k">==</span> <span class="pl-c1">trim_padding_PKCS5</span>(deciphertext) <span class="pl-c"><span class="pl-c">#</span> no bytestring</span>

<span class="pl-c"><span class="pl-c">#</span> or...</span>
plainbytes <span class="pl-k">=</span> <span class="pl-c1">hex2bytes</span>(<span class="pl-s"><span class="pl-pds">"</span>414155aa5541416162<span class="pl-pds">"</span></span>)
cipherbytes <span class="pl-k">=</span> <span class="pl-c1">encrypt</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, <span class="pl-c1">:CBC</span>, iv16, key32, <span class="pl-c1">add_padding_PKCS5</span>(plainbytes, <span class="pl-c1">16</span>))
decipherbytes <span class="pl-k">=</span> <span class="pl-c1">decrypt</span>(<span class="pl-s"><span class="pl-pds">"</span>AES256<span class="pl-pds">"</span></span>, <span class="pl-c1">:CBC</span>, iv16, key32, cipherbytes)
plainbytes <span class="pl-k">==</span> <span class="pl-c1">trim_padding_PKCS5</span>(decipherbytes) <span class="pl-c"><span class="pl-c">#</span> no bytestring</span></pre></div>
</article></div>