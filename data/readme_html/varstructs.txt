<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-varstructs" class="anchor" aria-hidden="true" href="#varstructs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>VarStructs</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/aminya/VarStructs.jl/workflows/CI/badge.svg"><img src="https://github.com/aminya/VarStructs.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h1>
<p dir="auto">VarStructs are similar to structs but have extra features:</p>
<ul dir="auto">
<li>You can add fields after their definition.</li>
<li>They can be defined inside a function or a local scope.</li>
<li>They can be redefined.</li>
<li>Fields can be uninitialized, have default values, etc.</li>
</ul>
<p dir="auto">Similar to structs</p>
<ul dir="auto">
<li>They can be used for dispatching (zero-cost)</li>
<li>They can have custom constructors</li>
<li>They have type conversion/checking for the fields that are declared</li>
</ul>
<p dir="auto">VarStructs removes the limitations of structs, and so in addition to all the applications of structs, you can use structures in new applications! For example, it can be used to define a "Schema" for your type, or you can used it for serialization of unknown data.</p>
<p dir="auto">SharedVarStructs also allows having shared instances for one struct.</p>
<h1 dir="auto"><a id="user-content-install-and-usage" class="anchor" aria-hidden="true" href="#install-and-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install and Usage</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;VarStructs&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>VarStructs<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using VarStructs"><pre><span class="pl-k">using</span> VarStructs</pre></div>
<p dir="auto">If you want to see a full example see <a href="https://github.com/aminya/VarStructs.jl/blob/master/example/schema.jl">here</a>.</p>
<h1 dir="auto"><a id="user-content-declaration" class="anchor" aria-hidden="true" href="#declaration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Declaration</h1>
<p dir="auto">There are two ways to declare them:</p>
<h2 dir="auto"><a id="user-content-struct-syntax" class="anchor" aria-hidden="true" href="#struct-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Struct Syntax</h2>
<p dir="auto">In this syntax, providing initial values and types for the fields are optional.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@var struct Animal
    name::String
    number::Int64
end"><pre><span class="pl-c1">@var</span> <span class="pl-k">struct</span> Animal
    name<span class="pl-k">::</span><span class="pl-c1">String</span>
    number<span class="pl-k">::</span><span class="pl-c1">Int64</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">You can redeclare the struct later, but in redeclaration you will not get type checking based on the previous declaration.</p>
<h2 dir="auto"><a id="user-content-call-syntax" class="anchor" aria-hidden="true" href="#call-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Call Syntax</h2>
<p dir="auto">In this syntax, you <strong>should</strong> provide the initial values for the fields. Providing type for the fields are optional (if not provided, it is considered as <code>Any</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@var Person(
        name = &quot;Amin&quot;,
        number::Float64 = 20.0,
    )"><pre><span class="pl-c1">@var</span> <span class="pl-c1">Person</span>(
        name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>,
        number<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">20.0</span>,
    )</pre></div>
<h1 dir="auto"><a id="user-content-getting-an-instance" class="anchor" aria-hidden="true" href="#getting-an-instance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting an Instance</h1>
<p dir="auto">Use the following syntax for getting an instance:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; person = Person(name = &quot;Amin&quot;, number = 20.0)
Person(
    name::Any = Amin,       
    number::Float64 = 20.0,
)

# Type conversion for the fields that were declared
julia&gt; person2 = Person(name = &quot;Amin&quot;, number = 20)  # number is converted to Float64
Person(
    name::Any = Amin,       
    number::Float64 = 20.0,
)

# Type checking for the fields that were declared
julia&gt; person2 = Person(name = &quot;Amin&quot;, number = &quot;20&quot;)
ERROR: MethodError: Cannot `convert` an object of type String to an object of type Float64

# new field added
julia&gt; person2 = Person(name = &quot;Amin&quot;, number = 20.0, initial = &quot;A&quot;)
Person(
    initial::String = A,    
    name::Any = Amin,       
    number::Float64 = 20.0,
)"><pre>julia<span class="pl-k">&gt;</span> person <span class="pl-k">=</span> <span class="pl-c1">Person</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>, number <span class="pl-k">=</span> <span class="pl-c1">20.0</span>)
<span class="pl-c1">Person</span>(
    name<span class="pl-k">::</span><span class="pl-c1">Any</span> <span class="pl-k">=</span> Amin,       
    number<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">20.0</span>,
)

<span class="pl-c"><span class="pl-c">#</span> Type conversion for the fields that were declared</span>
julia<span class="pl-k">&gt;</span> person2 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>, number <span class="pl-k">=</span> <span class="pl-c1">20</span>)  <span class="pl-c"><span class="pl-c">#</span> number is converted to Float64</span>
<span class="pl-c1">Person</span>(
    name<span class="pl-k">::</span><span class="pl-c1">Any</span> <span class="pl-k">=</span> Amin,       
    number<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">20.0</span>,
)

<span class="pl-c"><span class="pl-c">#</span> Type checking for the fields that were declared</span>
julia<span class="pl-k">&gt;</span> person2 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>, number <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>20<span class="pl-pds">"</span></span>)
ERROR<span class="pl-k">:</span> MethodError<span class="pl-k">:</span> Cannot <span class="pl-s"><span class="pl-pds">`</span>convert<span class="pl-pds">`</span></span> an object of type String to an object of type Float64

<span class="pl-c"><span class="pl-c">#</span> new field added</span>
julia<span class="pl-k">&gt;</span> person2 <span class="pl-k">=</span> <span class="pl-c1">Person</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>, number <span class="pl-k">=</span> <span class="pl-c1">20.0</span>, initial <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>A<span class="pl-pds">"</span></span>)
<span class="pl-c1">Person</span>(
    initial<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> A,    
    name<span class="pl-k">::</span><span class="pl-c1">Any</span> <span class="pl-k">=</span> Amin,       
    number<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">20.0</span>,
)</pre></div>
<p dir="auto">The two syntaxes that are used for declaration also return an instance of the VarStruct. So if you need an instance right away, you can use the following.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="animal = @var Animal(
        name = &quot;lion&quot;,
        number::Int64 = 10,
    )

# redefinition of `Animal` returns a new instance:
animal2 = @var Animal(
        name = &quot;dog&quot;,
        number::Int64 = 1,
    )"><pre>animal <span class="pl-k">=</span> <span class="pl-c1">@var</span> <span class="pl-c1">Animal</span>(
        name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>lion<span class="pl-pds">"</span></span>,
        number<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">10</span>,
    )

<span class="pl-c"><span class="pl-c">#</span> redefinition of `Animal` returns a new instance:</span>
animal2 <span class="pl-k">=</span> <span class="pl-c1">@var</span> <span class="pl-c1">Animal</span>(
        name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>,
        number<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>,
    )</pre></div>
<h1 dir="auto"><a id="user-content-accessing-setting-adding-fields" class="anchor" aria-hidden="true" href="#accessing-setting-adding-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Accessing, Setting, Adding Fields</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Accessing
julia&gt; person.name
&quot;Amin&quot;

# Setting
julia&gt; person.name = &quot;Tim&quot;

# Adding Fields
julia&gt; person.initial = &quot;T&quot;
"><pre><span class="pl-c"><span class="pl-c">#</span> Accessing</span>
julia<span class="pl-k">&gt;</span> person<span class="pl-k">.</span>name
<span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Setting</span>
julia<span class="pl-k">&gt;</span> person<span class="pl-k">.</span>name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Tim<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> Adding Fields</span>
julia<span class="pl-k">&gt;</span> person<span class="pl-k">.</span>initial <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>T<span class="pl-pds">"</span></span>
</pre></div>
<h1 dir="auto"><a id="user-content-dispatch" class="anchor" aria-hidden="true" href="#dispatch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dispatch</h1>
<p dir="auto"><code>info</code> function dispatch for <code>Person</code> and <code>Animal</code> type:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function info(x::Person)
    println(&quot;Their home is city&quot;)
    return x.name
end

function info(x::Animal)
    println(&quot;Their home is jungle&quot;)
    return x.name
end"><pre><span class="pl-k">function</span> <span class="pl-en">info</span>(x<span class="pl-k">::</span><span class="pl-c1">Person</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Their home is city<span class="pl-pds">"</span></span>)
    <span class="pl-k">return</span> x<span class="pl-k">.</span>name
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">info</span>(x<span class="pl-k">::</span><span class="pl-c1">Animal</span>)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Their home is jungle<span class="pl-pds">"</span></span>)
    <span class="pl-k">return</span> x<span class="pl-k">.</span>name
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; info(person)
&quot;Their home is city&quot;
&quot;Amin&quot;

julia&gt; info(animal)
&quot;Their home is jungle&quot;
&quot;lion&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(person)
<span class="pl-s"><span class="pl-pds">"</span>Their home is city<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">info</span>(animal)
<span class="pl-s"><span class="pl-pds">"</span>Their home is jungle<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>lion<span class="pl-pds">"</span></span></pre></div>
<h1 dir="auto"><a id="user-content-custom-constructor" class="anchor" aria-hidden="true" href="#custom-constructor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Custom Constructor</h1>
<p dir="auto">To define a custom constructor return an instance using keyword method:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function Person(name, number)
    return Person(
        name = name,
        number = number,
        initial = name[1],
    )
end

Person(&quot;Amin&quot;, 20.0)"><pre><span class="pl-k">function</span> <span class="pl-en">Person</span>(name, number)
    <span class="pl-k">return</span> <span class="pl-c1">Person</span>(
        name <span class="pl-k">=</span> name,
        number <span class="pl-k">=</span> number,
        initial <span class="pl-k">=</span> name[<span class="pl-c1">1</span>],
    )
<span class="pl-k">end</span>

<span class="pl-c1">Person</span>(<span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>, <span class="pl-c1">20.0</span>)</pre></div>
<h1 dir="auto"><a id="user-content-shared-varstruct" class="anchor" aria-hidden="true" href="#shared-varstruct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Shared VarStruct</h1>
<p dir="auto">Using <code>@shared_var</code>, you can define make the struct shared. That means calling the constructor for creating a new instance will use the already defined instance as its declaration.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="person = @shared_var Citizen(
            name::String = &quot;Amin&quot;,
            number::Float64 = 20.0,
        )

person2 = Citizen(name = &quot;Not-Amin&quot;, number = 1) # Will make &quot;person&quot; the same as &quot;person2&quot;"><pre>person <span class="pl-k">=</span> <span class="pl-c1">@shared_var</span> <span class="pl-c1">Citizen</span>(
            name<span class="pl-k">::</span><span class="pl-c1">String</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amin<span class="pl-pds">"</span></span>,
            number<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">20.0</span>,
        )

person2 <span class="pl-k">=</span> <span class="pl-c1">Citizen</span>(name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Not-Amin<span class="pl-pds">"</span></span>, number <span class="pl-k">=</span> <span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> Will make "person" the same as "person2"</span></pre></div>
<p dir="auto">If you are a geek see here too: <a href="https://github.com/aminya/VarStructs.jl/blob/master/ReadmeGeeks.md">ReadmeGeeks</a></p>
</article></div>