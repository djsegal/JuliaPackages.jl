<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-fastpolynomialrootsjl---fast-and-backward-stable-computation-of-roots-of-polynomials" class="anchor" aria-hidden="true" href="#fastpolynomialrootsjl---fast-and-backward-stable-computation-of-roots-of-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FastPolynomialRoots.jl - Fast and backward stable computation of roots of polynomials</h1>
<p><a href="https://travis-ci.org/andreasnoack/FastPolynomialRoots.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb4612f505fd5351f4ec21a5cc15c9f81b358e98/68747470733a2f2f7472617669732d63692e6f72672f616e64726561736e6f61636b2f46617374506f6c796e6f6d69616c526f6f74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Travis" data-canonical-src="https://travis-ci.org/andreasnoack/FastPolynomialRoots.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/andreasnoack/FastPolynomialRoots.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/d668648caf0057802fb8c9eff6658b992328e20d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616e64726561736e6f61636b2f46617374506f6c796e6f6d69616c526f6f74732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/andreasnoack/FastPolynomialRoots.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package is a Julia wrapper of the Fortran programs accompanying <a href="http://epubs.siam.org/doi/abs/10.1137/140983434" rel="nofollow">Fast and Backward Stable Computation of Roots of Polynomials</a> by Jared L. Aurentz, Thomas Mach, Raf Vandebril and David S. Watkins.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>The package provides the unexported function <code>FastPolynomialRoots.rootsFastPolynomialRoots(p::Vector{&lt;:Union{Float64,Complex{Float64}}})</code>
which computes the roots of the polynomial <code>p[1] + p[2]*x + p[3]*x^2 + ... + p[k]*x^(k-1)</code>. The package also overwrites the <code>roots(::Polynomial)</code> methods in the <code>Polynomials</code> package for <code>Float64</code> and <code>Complex{Float64}</code> elements with the fast versions provided by this package. See the examples below.</p>
<h2><a id="user-content-example-1-speed-up-roots" class="anchor" aria-hidden="true" href="#example-1-speed-up-roots"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1: Speed up <code>roots</code></h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polynomials, BenchmarkTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">roots</span>(p) setup<span class="pl-k">=</span>(p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">500</span>)));
  <span class="pl-c1">223.135</span> ms (<span class="pl-c1">23</span> allocations<span class="pl-k">:</span> <span class="pl-c1">3.97</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> FastPolynomialRoots

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">roots</span>(p) setup<span class="pl-k">=</span>(p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">500</span>)));
  <span class="pl-c1">30.786</span> ms (<span class="pl-c1">7</span> allocations<span class="pl-k">:</span> <span class="pl-c1">26.41</span> KiB)</pre></div>
<h2><a id="user-content-example-2-roots-of-a-polynomial-of-degree-10000" class="anchor" aria-hidden="true" href="#example-2-roots-of-a-polynomial-of-degree-10000"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2: Roots of a polynomial of degree 10,000</h2>
<p>A computation of this size would not be feasible on a desktop with the traditional method
but can be handled by FastPolynomialRoots.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Polynomials, BenchmarkTools, FastPolynomialRoots

julia<span class="pl-k">&gt;</span> n <span class="pl-k">=</span> <span class="pl-c1">10000</span>;

julia<span class="pl-k">&gt;</span> r <span class="pl-k">=</span> <span class="pl-c1">@btime</span> <span class="pl-c1">roots</span>(p) setup<span class="pl-k">=</span>(p <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span>(<span class="pl-c1">randn</span>(n <span class="pl-k">+</span> <span class="pl-c1">1</span>)));
  <span class="pl-c1">10.290</span> s (<span class="pl-c1">13</span> allocations<span class="pl-k">:</span> <span class="pl-c1">508.38</span> KiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(isreal, r)
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span><span class="pl-k">/</span>π<span class="pl-k">*</span><span class="pl-c1">log</span>(n) <span class="pl-k">+</span> <span class="pl-c1">0.6257358072</span> <span class="pl-k">+</span> <span class="pl-c1">2</span><span class="pl-k">/</span>(n<span class="pl-k">*</span>π) <span class="pl-c"><span class="pl-c">#</span> Edelman and Kostlan</span>
<span class="pl-c1">6.489284260212659</span></pre></div>
</article></div>