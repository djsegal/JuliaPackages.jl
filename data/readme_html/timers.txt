<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-timers" class="anchor" aria-hidden="true" href="#timers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Timers</h1>
<p dir="auto">The package provides the following functions:</p>
<h2 dir="auto"><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Functions</h2>
<p dir="auto"><code>tic()</code><br>
Starts a timer</p>
<p dir="auto"><code>toc(prn=true)</code><br>
Print the time in seconds since tic() was called. To suppress the printed output
use <code>toc(false)</code>.</p>
<p dir="auto">Returns the time since the timer was started in seconds.</p>
<p dir="auto"><code>sleep_ms(time_ms)</code><br>
Sleeps for the given number of milli-seconds. Accuracy on Linux better than 100 nanoseconds +-0.2%, but only if the system is not fully loaded. On Linux for delays larger than 10ms sleep() is used, on Windows for delays larger than 16 ms.</p>
<p dir="auto"><code>wait_until(finish_ns; always_sleep=false)</code><br>
Sleeps until the given time [ns] is reached. Example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dt = 0.05
start = time_ns()
for i in 1:100
    # do some work
    wait_until(start + i*dt*1e9)
end"><pre>dt <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
start <span class="pl-k">=</span> <span class="pl-c1">time_ns</span>()
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
    <span class="pl-c"><span class="pl-c">#</span> do some work</span>
    <span class="pl-c1">wait_until</span>(start <span class="pl-k">+</span> i<span class="pl-k">*</span>dt<span class="pl-k">*</span><span class="pl-c1">1e9</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">The section "<code># do some work</code>" is executed exactly every 50ms as long as executing this section takes less than 50ms.</p>
<p dir="auto">The additional parameter always_sleep can be set to true if you want to ensure that the sleep function
is always called for at least 1 ms. This is useful if you need to ensure that cooperative multitasking
works even for the price to miss the deadline.</p>
<h2 dir="auto"><a id="user-content-test-results" class="anchor" aria-hidden="true" href="#test-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Test results</h2>
<p dir="auto">Comparison of the desired and actual sleep time for the functions sleep() and sleep_ms():</p>
<p dir="auto">OS: Ubuntu 18.04 with a i7-7700K CPU and the standard kernel version 5.4.0-87-generic.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; include(&quot;test/bench.jl&quot;)
7-element BenchmarkTools.BenchmarkGroup:
  tags: [&quot;sleep_ms&quot;]
  &quot;100µs&quot; =&gt; TrialEstimate(100.152 μs)
  &quot;200µs&quot; =&gt; TrialEstimate(200.108 μs)
  &quot;5ms&quot; =&gt; TrialEstimate(5.000 ms)
  &quot;1ms&quot; =&gt; TrialEstimate(1.000 ms)
  &quot;10ms&quot; =&gt; TrialEstimate(10.001 ms)
  &quot;500µs&quot; =&gt; TrialEstimate(500.093 μs)
  &quot;2ms&quot; =&gt; TrialEstimate(2.000 ms)
4-element BenchmarkTools.BenchmarkGroup:
  tags: [&quot;sleep&quot;]
  &quot;20ms&quot; =&gt; TrialEstimate(21.267 ms)
  &quot;5ms&quot; =&gt; TrialEstimate(6.255 ms)
  &quot;1ms&quot; =&gt; TrialEstimate(2.219 ms)
  &quot;10ms&quot; =&gt; TrialEstimate(11.215 ms)
  &quot;2ms&quot; =&gt; TrialEstimate(3.199 ms)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test/bench.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">7</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
  tags<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">"</span>sleep_ms<span class="pl-pds">"</span></span>]
  <span class="pl-s"><span class="pl-pds">"</span>100µs<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">100.152</span> μs)
  <span class="pl-s"><span class="pl-pds">"</span>200µs<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">200.108</span> μs)
  <span class="pl-s"><span class="pl-pds">"</span>5ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">5.000</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>1ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">1.000</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>10ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">10.001</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>500µs<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">500.093</span> μs)
  <span class="pl-s"><span class="pl-pds">"</span>2ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">2.000</span> ms)
<span class="pl-c1">4</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
  tags<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">"</span>sleep<span class="pl-pds">"</span></span>]
  <span class="pl-s"><span class="pl-pds">"</span>20ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">21.267</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>5ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">6.255</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>1ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">2.219</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>10ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">11.215</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>2ms<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">TrialEstimate</span>(<span class="pl-c1">3.199</span> ms)</pre></div>
<p dir="auto">This are the mean values. The error of the sleep_ms function is below 0.1% +- 100ns. The error of the default sleep() function of Julia on Linux is between 1ms and 2ms, for the set values of 1ms to 10ms this is an error of 13% to 62%.
On Windows the error is between 10ms and 20ms.</p>
</article></div>