<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-baytesmcmc" class="anchor" aria-hidden="true" href="#baytesmcmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BaytesMCMC</h1>

<p dir="auto"><a href="https://paschermayr.github.io/BaytesMCMC.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation, Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/paschermayr/BaytesMCMC.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/paschermayr/BaytesMCMC.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/paschermayr/BaytesMCMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/71dcfc9e8865e7112ca93a428514856f73a3c51f25e13fdb07b446b1636573fd/68747470733a2f2f636f6465636f762e696f2f67682f706173636865726d6179722f4261797465734d434d432e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/paschermayr/BaytesMCMC.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/a6c1efcb19a957860ecb25966a730260b03d6e05380d0c27992ee7f9e3b1feb3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f72277325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor's%20Guide-blueviolet" style="max-width: 100%;"></a></p>
<p dir="auto">BaytesMCMC.jl is a library to perform MCMC proposal steps on <code>ModelWrapper</code> structs, see <a href="https://github.com/paschermayr/ModelWrappers.jl">ModelWrappers.jl</a>.</p>

<h2 dir="auto"><a id="user-content-first-steps" class="anchor" aria-hidden="true" href="#first-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>First steps</h2>
<p dir="auto">Let us use the model initially defined in the <a href="https://github.com/paschermayr/ModelWrappers.jl">ModelWrappers.jl</a> introduction:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ModelWrappers, BaytesMCMC
using Distributions, Random, UnPack
_rng = Random.GLOBAL_RNG
#Create Model and data
myparameter = (μ = Param(Normal(), 0.0, ), σ = Param(Gamma(), 1.0, ))
mymodel = ModelWrapper(myparameter)
data = randn(1000)
#Create objective for both μ and σ and define a target function for it
myobjective = Objective(mymodel, data, (:μ, :σ))
function (objective::Objective{&lt;:ModelWrapper{BaseModel}})(θ::NamedTuple)
	@unpack data = objective
	lprior = Distributions.logpdf(Distributions.Normal(),θ.μ) + Distributions.logpdf(Distributions.Exponential(), θ.σ)
    llik = sum(Distributions.logpdf( Distributions.Normal(θ.μ, θ.σ), data[iter] ) for iter in eachindex(data))
	return lprior + llik
end"><pre><span class="pl-k">using</span> ModelWrappers, BaytesMCMC
<span class="pl-k">using</span> Distributions, Random, UnPack
_rng <span class="pl-k">=</span> Random<span class="pl-k">.</span>GLOBAL_RNG
<span class="pl-c"><span class="pl-c">#</span>Create Model and data</span>
myparameter <span class="pl-k">=</span> (μ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Normal</span>(), <span class="pl-c1">0.0</span>, ), σ <span class="pl-k">=</span> <span class="pl-c1">Param</span>(<span class="pl-c1">Gamma</span>(), <span class="pl-c1">1.0</span>, ))
mymodel <span class="pl-k">=</span> <span class="pl-c1">ModelWrapper</span>(myparameter)
data <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">1000</span>)
<span class="pl-c"><span class="pl-c">#</span>Create objective for both μ and σ and define a target function for it</span>
myobjective <span class="pl-k">=</span> <span class="pl-c1">Objective</span>(mymodel, data, (<span class="pl-c1">:μ</span>, <span class="pl-c1">:σ</span>))
<span class="pl-k">function</span> (objective<span class="pl-k">::</span><span class="pl-c1">Objective{&lt;:ModelWrapper{BaseModel}}</span>)(θ<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>)
	<span class="pl-c1">@unpack</span> data <span class="pl-k">=</span> objective
	lprior <span class="pl-k">=</span> Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">Normal</span>(),θ<span class="pl-k">.</span>μ) <span class="pl-k">+</span> Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">Exponential</span>(), θ<span class="pl-k">.</span>σ)
    llik <span class="pl-k">=</span> <span class="pl-c1">sum</span>(Distributions<span class="pl-k">.</span><span class="pl-c1">logpdf</span>( Distributions<span class="pl-k">.</span><span class="pl-c1">Normal</span>(θ<span class="pl-k">.</span>μ, θ<span class="pl-k">.</span>σ), data[iter] ) <span class="pl-k">for</span> iter <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(data))
	<span class="pl-k">return</span> lprior <span class="pl-k">+</span> llik
<span class="pl-k">end</span></pre></div>
<p dir="auto">We can assign an MCMC Kernel to this model by simply calling</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mcmc_nuts = MCMC(_rng, NUTS, myobjective)
mcmc_hmc = MCMC(_rng, HMC, myobjective)
mcmc_mala = MCMC(_rng, MALA, myobjective)
mcmc_metropolis = MCMC(_rng, Metropolis, myobjective)"><pre>mcmc_nuts <span class="pl-k">=</span> <span class="pl-c1">MCMC</span>(_rng, NUTS, myobjective)
mcmc_hmc <span class="pl-k">=</span> <span class="pl-c1">MCMC</span>(_rng, HMC, myobjective)
mcmc_mala <span class="pl-k">=</span> <span class="pl-c1">MCMC</span>(_rng, MALA, myobjective)
mcmc_metropolis <span class="pl-k">=</span> <span class="pl-c1">MCMC</span>(_rng, Metropolis, myobjective)</pre></div>
<p dir="auto">There are two standard ways to make proposal steps in BaytesMCMC.</p>
<ol dir="auto">
<li>The first step is the standard MCMC proposal step:</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="_val, _diagnostics = propose(_rng, mcmc_nuts, myobjective)"><pre>_val, _diagnostics <span class="pl-k">=</span> <span class="pl-c1">propose</span>(_rng, mcmc_nuts, myobjective)</pre></div>
<p dir="auto">This will return proposed model parameter (if accepted), along with MCMC summary diagnostics.</p>
<ol start="2" dir="auto">
<li>The second way can be used if the MCMC kernel is used alongside other algorithms, or if the data changes between proposal steps.
In this case, the MCMC kernel is updated with the paramter given in <code>mymodel</code> and the new <code>data</code> before a proposal step is performed. This
will take up more time then the first way, but is more flexible and can be used in scenarios where, for instance, you want to use MCMC
in combination with other inference algorithm.</li>
</ol>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="_val, _diagnostics = propose!(_rng, mcmc_nuts, mymodel, data)"><pre>_val, _diagnostics <span class="pl-k">=</span> <span class="pl-c1">propose!</span>(_rng, mcmc_nuts, mymodel, data)</pre></div>
<p dir="auto">This will update <code>mymodel</code> with the proposed parameter (if accepted), and return <code>mymodel</code> parameter along with MCMC summary diagnostics.</p>
<h2 dir="auto"><a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Customization</h2>
<p dir="auto">All MCMC kernels are initialized with sane default tuning parameter, but each field in the config.jl file of each sampler in src/Kernels can be fully customized. For instance, the following settings initializes a HMC kernel with fixed stepsize and a dense mass matrix adaption. Moreover, the ReverseDiff package is used for obtaining derivative information.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mcmcdefault = MCMCDefault(;
	kernel = (; stepnumber = ConfigStepnumber(; steps = 10)),
	stepsize = ConfigStepsize(; ϵ = 1.0, stepsizeadaption = UpdateFalse()),
	proposal = ConfigProposal(; metric = MDense()),
	GradientBackend = :ReverseDiff,
)

mcmc_customized = MCMC(_rng, HMC, myobjective, mcmcdefault)
_val, _diagnostics = propose(_rng, mcmc_customized, myobjective)
_val, _diagnostics = propose!(_rng, mcmc_customized, mymodel, data)"><pre>mcmcdefault <span class="pl-k">=</span> <span class="pl-c1">MCMCDefault</span>(;
	kernel <span class="pl-k">=</span> (; stepnumber <span class="pl-k">=</span> <span class="pl-c1">ConfigStepnumber</span>(; steps <span class="pl-k">=</span> <span class="pl-c1">10</span>)),
	stepsize <span class="pl-k">=</span> <span class="pl-c1">ConfigStepsize</span>(; ϵ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, stepsizeadaption <span class="pl-k">=</span> <span class="pl-c1">UpdateFalse</span>()),
	proposal <span class="pl-k">=</span> <span class="pl-c1">ConfigProposal</span>(; metric <span class="pl-k">=</span> <span class="pl-c1">MDense</span>()),
	GradientBackend <span class="pl-k">=</span> <span class="pl-c1">:ReverseDiff</span>,
)

mcmc_customized <span class="pl-k">=</span> <span class="pl-c1">MCMC</span>(_rng, HMC, myobjective, mcmcdefault)
_val, _diagnostics <span class="pl-k">=</span> <span class="pl-c1">propose</span>(_rng, mcmc_customized, myobjective)
_val, _diagnostics <span class="pl-k">=</span> <span class="pl-c1">propose!</span>(_rng, mcmc_customized, mymodel, data)</pre></div>
<p dir="auto">There are many customization options for each kernel, which can be seen in the corresponding config.jl files.</p>
<h2 dir="auto"><a id="user-content-generated-data-and-prediction" class="anchor" aria-hidden="true" href="#generated-data-and-prediction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Generated data and prediction</h2>
<p dir="auto">You can return generated quantities and predictions of your model for each proposal step. Just like with the objective functor, you need to add methods for your model for the corresponding functions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function ModelWrappers.predict(_rng::Random.AbstractRNG, objective::Objective{&lt;:ModelWrapper{BaseModel}})
    @unpack μ, σ = objective.model.val
    return rand(_rng, Normal(μ, σ))
end
function ModelWrappers.generate(_rng::Random.AbstractRNG, objective::Objective{&lt;:ModelWrapper{BaseModel}})
    @unpack model, data = objective
    # Return some interesting stuff
    return model.val.μ + randn(_rng)
end

predict(_rng, myobjective)
generate(_rng, myobjective)

mcmc_nuts = MCMC(_rng, NUTS, myobjective, MCMCDefault(generated = UpdateTrue()))
_val, _diagnostics = propose(_rng, mcmc_nuts, myobjective)
_diagnostics.base.prediction
_diagnostics.generated"><pre><span class="pl-k">function</span> ModelWrappers<span class="pl-k">.</span><span class="pl-en">predict</span>(_rng<span class="pl-k">::</span><span class="pl-c1">Random.AbstractRNG</span>, objective<span class="pl-k">::</span><span class="pl-c1">Objective{&lt;:ModelWrapper{BaseModel}}</span>)
    <span class="pl-c1">@unpack</span> μ, σ <span class="pl-k">=</span> objective<span class="pl-k">.</span>model<span class="pl-k">.</span>val
    <span class="pl-k">return</span> <span class="pl-c1">rand</span>(_rng, <span class="pl-c1">Normal</span>(μ, σ))
<span class="pl-k">end</span>
<span class="pl-k">function</span> ModelWrappers<span class="pl-k">.</span><span class="pl-en">generate</span>(_rng<span class="pl-k">::</span><span class="pl-c1">Random.AbstractRNG</span>, objective<span class="pl-k">::</span><span class="pl-c1">Objective{&lt;:ModelWrapper{BaseModel}}</span>)
    <span class="pl-c1">@unpack</span> model, data <span class="pl-k">=</span> objective
    <span class="pl-c"><span class="pl-c">#</span> Return some interesting stuff</span>
    <span class="pl-k">return</span> model<span class="pl-k">.</span>val<span class="pl-k">.</span>μ <span class="pl-k">+</span> <span class="pl-c1">randn</span>(_rng)
<span class="pl-k">end</span>

<span class="pl-c1">predict</span>(_rng, myobjective)
<span class="pl-c1">generate</span>(_rng, myobjective)

mcmc_nuts <span class="pl-k">=</span> <span class="pl-c1">MCMC</span>(_rng, NUTS, myobjective, <span class="pl-c1">MCMCDefault</span>(generated <span class="pl-k">=</span> <span class="pl-c1">UpdateTrue</span>()))
_val, _diagnostics <span class="pl-k">=</span> <span class="pl-c1">propose</span>(_rng, mcmc_nuts, myobjective)
_diagnostics<span class="pl-k">.</span>base<span class="pl-k">.</span>prediction
_diagnostics<span class="pl-k">.</span>generated</pre></div>
<h2 dir="auto"><a id="user-content-going-forward" class="anchor" aria-hidden="true" href="#going-forward"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Going Forward</h2>
<p dir="auto">This package is still highly experimental - suggestions and comments are always welcome!</p>

<h2 dir="auto"><a id="user-content-license-notice" class="anchor" aria-hidden="true" href="#license-notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License Notice</h2>
<p dir="auto">Note that this package heavily uses and adapts code from the DynamicHMC.jl package (v3.1.0) licensed under MIT License, see License.md.</p>
</article></div>