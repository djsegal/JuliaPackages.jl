<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-binomialgpu" class="anchor" aria-hidden="true" href="#binomialgpu"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BinomialGPU</h1>
<p dir="auto"><a href="https://buildkite.com/julialang/binomialgpu-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0d7d0ffe2b28d88d0fcb1a3dccef87b630433a1e1181d0f2f06f5dec2691e9b8/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f37306138633131323539363538616436663833366134393831373931656431343462616338306536353330323239316430642e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://badge.buildkite.com/70a8c11259658ad6f836a4981791ed144bac80e65302291d0d.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaGPU/BinomialGPU.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0bea3ebec12895c53724f9b73a1b83b65ea176d6f41097a7bb63f113896005c9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614750552f42696e6f6d69616c4750552e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaGPU/BinomialGPU.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package exports two functions <code>rand_binomial</code> and <code>rand_binomial!</code> that produce <code>CuArrays</code> with binomially distributed elements, analogous to <code>CUDA.rand_poisson</code> and <code>CUDA.rand_poisson!</code> for Poisson-distributed ones.
The sampling occurs natively on the GPU and is implemented using custom GPU kernels.</p>
<p dir="auto">The performance of this implementation seems to be very competitive with other libraries.
Sampling a 1024x1024 matrix on an RTX2070 GPU: BinomialGPU.jl 0.8ms, PyTorch 11ms, CuPy 18ms, tensorflow 400ms. Benchmarking results for other samplers are very welcome; please open an issue if you find one, especially if is faster than this package.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">In a Julia 1.6 or 1.7 REPL, type <code>]</code> to use the built-in package manager and then run:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pkg&gt; add BinomialGPU"><pre>pkg<span class="pl-k">&gt;</span> add BinomialGPU</pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Sample <code>CuArrays</code> with binomial random variates of various dimensions:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using BinomialGPU
julia&gt; rand_binomial(3, count = 10, prob = 0.5)
3-element CuArray{Int64, 1, CUDA.Mem.DeviceBuffer}:
 4
 3
 7
julia&gt; rand_binomial(4, 4, count = 10, prob = 0.5)
4×4 CuArray{Int64, 2, CUDA.Mem.DeviceBuffer}:
 5  5  6  4
 5  7  6  7
 6  4  4  6
 7  2  4  5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BinomialGPU
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial</span>(<span class="pl-c1">3</span>, count <span class="pl-k">=</span> <span class="pl-c1">10</span>, prob <span class="pl-k">=</span> <span class="pl-c1">0.5</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element CuArray{Int64, <span class="pl-c1">1</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">7</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial</span>(<span class="pl-c1">4</span>, <span class="pl-c1">4</span>, count <span class="pl-k">=</span> <span class="pl-c1">10</span>, prob <span class="pl-k">=</span> <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> CuArray{Int64, <span class="pl-c1">2</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">5</span>  <span class="pl-c1">6</span>  <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">7</span>  <span class="pl-c1">6</span>  <span class="pl-c1">7</span>
 <span class="pl-c1">6</span>  <span class="pl-c1">4</span>  <span class="pl-c1">4</span>  <span class="pl-c1">6</span>
 <span class="pl-c1">7</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>  <span class="pl-c1">5</span></pre></div>
<p dir="auto">The function also supports arrays of parameters of suitable (compatible) sizes:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; counts = [5, 10, 20]
julia&gt; probs = [0.3, 0.4, 0.8]
julia&gt; rand_binomial(count = counts, prob = probs)
3-element CuArray{Int64, 1, CUDA.Mem.DeviceBuffer}:
  0
  7
 19
julia&gt; probs = CUDA.rand(3, 2);
julia&gt; rand_binomial(count = counts, prob = probs)
3×2 CuArray{Int64, 2, CUDA.Mem.DeviceBuffer}:
 3   1
 4   0
 3  18"><pre>julia<span class="pl-k">&gt;</span> counts <span class="pl-k">=</span> [<span class="pl-c1">5</span>, <span class="pl-c1">10</span>, <span class="pl-c1">20</span>]
julia<span class="pl-k">&gt;</span> probs <span class="pl-k">=</span> [<span class="pl-c1">0.3</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.8</span>]
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial</span>(count <span class="pl-k">=</span> counts, prob <span class="pl-k">=</span> probs)
<span class="pl-c1">3</span><span class="pl-k">-</span>element CuArray{Int64, <span class="pl-c1">1</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
  <span class="pl-c1">0</span>
  <span class="pl-c1">7</span>
 <span class="pl-c1">19</span>
julia<span class="pl-k">&gt;</span> probs <span class="pl-k">=</span> CUDA<span class="pl-k">.</span><span class="pl-c1">rand</span>(<span class="pl-c1">3</span>, <span class="pl-c1">2</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial</span>(count <span class="pl-k">=</span> counts, prob <span class="pl-k">=</span> probs)
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> CuArray{Int64, <span class="pl-c1">2</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
 <span class="pl-c1">3</span>   <span class="pl-c1">1</span>
 <span class="pl-c1">4</span>   <span class="pl-c1">0</span>
 <span class="pl-c1">3</span>  <span class="pl-c1">18</span></pre></div>
<p dir="auto">The function with exclamation mark samples random numbers in-place:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CUDA
julia&gt; A = CUDA.zeros(Int, 4, 4);
julia&gt; rand_binomial!(A, count = 10, prob = 0.5)
4×4 CuArray{Int64, 2, CUDA.Mem.DeviceBuffer}:
 6  4  1  8
 4  6  6  6
 4  3  2  4
 5  7  3  5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CUDA
julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> CUDA<span class="pl-k">.</span><span class="pl-c1">zeros</span>(Int, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial!</span>(A, count <span class="pl-k">=</span> <span class="pl-c1">10</span>, prob <span class="pl-k">=</span> <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> CuArray{Int64, <span class="pl-c1">2</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
 <span class="pl-c1">6</span>  <span class="pl-c1">4</span>  <span class="pl-c1">1</span>  <span class="pl-c1">8</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">6</span>  <span class="pl-c1">6</span>  <span class="pl-c1">6</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">3</span>  <span class="pl-c1">2</span>  <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>  <span class="pl-c1">7</span>  <span class="pl-c1">3</span>  <span class="pl-c1">5</span></pre></div>
<p dir="auto">This also allows for non-standard types to be preserved:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; A = CUDA.zeros(UInt16, 4, 4);
julia&gt; rand_binomial!(A, count = 10, prob = 0.5)
4×4 CuArray{UInt16, 2, CUDA.Mem.DeviceBuffer}:
 0x0005  0x0004  0x0003  0x0005
 0x0006  0x0006  0x0006  0x0003
 0x0006  0x0005  0x0006  0x0005
 0x0007  0x0005  0x0006  0x0006"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> CUDA<span class="pl-k">.</span><span class="pl-c1">zeros</span>(UInt16, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial!</span>(A, count <span class="pl-k">=</span> <span class="pl-c1">10</span>, prob <span class="pl-k">=</span> <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> CuArray{UInt16, <span class="pl-c1">2</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
 <span class="pl-c1">0x0005</span>  <span class="pl-c1">0x0004</span>  <span class="pl-c1">0x0003</span>  <span class="pl-c1">0x0005</span>
 <span class="pl-c1">0x0006</span>  <span class="pl-c1">0x0006</span>  <span class="pl-c1">0x0006</span>  <span class="pl-c1">0x0003</span>
 <span class="pl-c1">0x0006</span>  <span class="pl-c1">0x0005</span>  <span class="pl-c1">0x0006</span>  <span class="pl-c1">0x0005</span>
 <span class="pl-c1">0x0007</span>  <span class="pl-c1">0x0005</span>  <span class="pl-c1">0x0006</span>  <span class="pl-c1">0x0006</span></pre></div>
<p dir="auto">Alternatively, pass the desired type as the first argument:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; rand_binomial(UInt32, 4, 4, count = 10, prob = 0.5)
4×4 CuArray{UInt32, 2, CUDA.Mem.DeviceBuffer}:
 0x00000004  0x00000005  0x00000008  0x00000005
 0x00000003  0x00000007  0x00000005  0x00000005
 0x00000007  0x00000005  0x00000005  0x00000004
 0x00000001  0x00000005  0x00000005  0x00000003"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">rand_binomial</span>(UInt32, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>, count <span class="pl-k">=</span> <span class="pl-c1">10</span>, prob <span class="pl-k">=</span> <span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> CuArray{UInt32, <span class="pl-c1">2</span>, CUDA<span class="pl-k">.</span>Mem<span class="pl-k">.</span>DeviceBuffer}<span class="pl-k">:</span>
 <span class="pl-c1">0x00000004</span>  <span class="pl-c1">0x00000005</span>  <span class="pl-c1">0x00000008</span>  <span class="pl-c1">0x00000005</span>
 <span class="pl-c1">0x00000003</span>  <span class="pl-c1">0x00000007</span>  <span class="pl-c1">0x00000005</span>  <span class="pl-c1">0x00000005</span>
 <span class="pl-c1">0x00000007</span>  <span class="pl-c1">0x00000005</span>  <span class="pl-c1">0x00000005</span>  <span class="pl-c1">0x00000004</span>
 <span class="pl-c1">0x00000001</span>  <span class="pl-c1">0x00000005</span>  <span class="pl-c1">0x00000005</span>  <span class="pl-c1">0x00000003</span></pre></div>
</article></div>