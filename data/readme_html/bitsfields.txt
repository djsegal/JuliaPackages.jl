<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bitsfieldsjl" class="anchor" aria-hidden="true" href="#bitsfieldsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BitsFields.jl</h1>
<h3><a id="user-content-use-adjacent-bits-as-a-bitfield-and-name-it-use-multiple-bitfields-in-distinct-roles-or-as-primary-elements" class="anchor" aria-hidden="true" href="#use-adjacent-bits-as-a-bitfield-and-name-it-use-multiple-bitfields-in-distinct-roles-or-as-primary-elements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use adjacent bits as a bitfield and name it. Use multiple bitfields in distinct roles or as primary elements.</h3>
<h4><a id="user-content-copyright-2018-by-jeffrey-sarnoff---this-work-has-been-released-under-the-mit-license" class="anchor" aria-hidden="true" href="#copyright-2018-by-jeffrey-sarnoff---this-work-has-been-released-under-the-mit-license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright © 2018 by Jeffrey Sarnoff.     This work has been released under The MIT License.</h4>
<hr>
<p><a href="https://travis-ci.org/JeffreySarnoff/BitsFields.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4ee00d4b6cf6d7e71c6020cf8973b80b598bf0a1fcb4f2c5bc589465463f0622/68747470733a2f2f7472617669732d63692e6f72672f4a6566667265795361726e6f66662f426974734669656c64732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffreySarnoff/BitsFields.jl.svg?branch=master" style="max-width:100%;"></a>
     </p>
<hr>
<h2><a id="user-content-purpose" class="anchor" aria-hidden="true" href="#purpose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Purpose</h2>
<p>This package provides an easy way to describe and use bitfields within Julia.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>We want two bitfields, one that is six bits wide and another that is ten bits wide.
The total span for both bitfields is 6+10 == 16 bits, so a <code>UInt16</code> will hold them.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using BitsFields

field1span  =  6
field1shift =  0
field2span  = 10
field2shift = field1span

field1 = BitField(UInt16, :field1, field1span, field1shift)
field2 = BitField(UInt16, :field2, field2span, field2shift)

bitfields = BitFields(field1, field2)
"><pre><code>using BitsFields

field1span  =  6
field1shift =  0
field2span  = 10
field2shift = field1span

field1 = BitField(UInt16, :field1, field1span, field1shift)
field2 = BitField(UInt16, :field2, field2span, field2shift)

bitfields = BitFields(field1, field2)
</code></pre></div>
<p>To use the <code>bitfields</code>, provide a referenceable, type-matched and zeroed carrier.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="carrier = zero(bitfields)
"><pre><code>carrier = zero(bitfields)
</code></pre></div>
<p>Now we can set the fields and get their values.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="field1value = 0x15
field2value = 0x02f6

set!(bitfields[1], field1value, carrier)
set!(bitfields[2], field2value, carrier)

get(bitfields[2], carrier)  # UInt16(0x02f6)

get(bitfields, carrier)     # [ UInt16(0x15), UInt16(0x02f6) ]
"><pre><code>field1value = 0x15
field2value = 0x02f6

set!(bitfields[1], field1value, carrier)
set!(bitfields[2], field2value, carrier)

get(bitfields[2], carrier)  # UInt16(0x02f6)

get(bitfields, carrier)     # [ UInt16(0x15), UInt16(0x02f6) ]
</code></pre></div>
<p>A bitfield may be changed, just set! it again.</p>
<h2><a id="user-content-demonstration" class="anchor" aria-hidden="true" href="#demonstration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Demonstration</h2>
<p>Each BitField embedded together as a sequence of BitFields share an unsigned integer bitstype.
All fields must specify the same unsigned type, as above where all six bitfields specify <code>UInt64</code>.
Any attempt to use more than one Unsigned type as "the mix UInts of different sizes is rejected.
So are attempts to use anything other than an unsigned bitstype for BitField embedding.</p>
<p>UInt64 is used for this when there is no unsigned type specified.  So you do not need to write it.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using BitsFields



#                    span      shift      name         bits used
bitfield1 = BitField(  8,            0, :field1);   #      8
bitfield2 = BitField(  4,            8, :field2);   #     12
bitfield3 = BitField( 12,          4+8, :field3);   #     24
bitfield4 = BitField( 16,       12+4+8, :field4);   #     40
bitfield5 = BitField( 20,    16+12+4+8, :field5);   #     60
bitfield6 = BitField(  4, 20+16+12+4+8, :field6);   #     64

bitfields = BitFields(bitfield1, bitfield2, bitfield3,
                      bitfield4, bitfield5, bitfield6);

namedfields = NamedTuple(bitfields)

namedfields.field1 === bitfields[1]
namedfields.field2 === bitfields[2]
namedfields.field3 === bitfields[3]
namedfields.field4 === bitfields[4]
namedfields.field5 === bitfields[5]
namedfields.field6 === bitfields[6]

"><pre><span class="pl-k">using</span> BitsFields



<span class="pl-c"><span class="pl-c">#</span>                    span      shift      name         bits used</span>
bitfield1 <span class="pl-k">=</span> <span class="pl-c1">BitField</span>(  <span class="pl-c1">8</span>,            <span class="pl-c1">0</span>, <span class="pl-c1">:field1</span>);   <span class="pl-c"><span class="pl-c">#</span>      8</span>
bitfield2 <span class="pl-k">=</span> <span class="pl-c1">BitField</span>(  <span class="pl-c1">4</span>,            <span class="pl-c1">8</span>, <span class="pl-c1">:field2</span>);   <span class="pl-c"><span class="pl-c">#</span>     12</span>
bitfield3 <span class="pl-k">=</span> <span class="pl-c1">BitField</span>( <span class="pl-c1">12</span>,          <span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">8</span>, <span class="pl-c1">:field3</span>);   <span class="pl-c"><span class="pl-c">#</span>     24</span>
bitfield4 <span class="pl-k">=</span> <span class="pl-c1">BitField</span>( <span class="pl-c1">16</span>,       <span class="pl-c1">12</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">8</span>, <span class="pl-c1">:field4</span>);   <span class="pl-c"><span class="pl-c">#</span>     40</span>
bitfield5 <span class="pl-k">=</span> <span class="pl-c1">BitField</span>( <span class="pl-c1">20</span>,    <span class="pl-c1">16</span><span class="pl-k">+</span><span class="pl-c1">12</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">8</span>, <span class="pl-c1">:field5</span>);   <span class="pl-c"><span class="pl-c">#</span>     60</span>
bitfield6 <span class="pl-k">=</span> <span class="pl-c1">BitField</span>(  <span class="pl-c1">4</span>, <span class="pl-c1">20</span><span class="pl-k">+</span><span class="pl-c1">16</span><span class="pl-k">+</span><span class="pl-c1">12</span><span class="pl-k">+</span><span class="pl-c1">4</span><span class="pl-k">+</span><span class="pl-c1">8</span>, <span class="pl-c1">:field6</span>);   <span class="pl-c"><span class="pl-c">#</span>     64</span>

bitfields <span class="pl-k">=</span> <span class="pl-c1">BitFields</span>(bitfield1, bitfield2, bitfield3,
                      bitfield4, bitfield5, bitfield6);

namedfields <span class="pl-k">=</span> <span class="pl-c1">NamedTuple</span>(bitfields)

namedfields<span class="pl-k">.</span>field1 <span class="pl-k">===</span> bitfields[<span class="pl-c1">1</span>]
namedfields<span class="pl-k">.</span>field2 <span class="pl-k">===</span> bitfields[<span class="pl-c1">2</span>]
namedfields<span class="pl-k">.</span>field3 <span class="pl-k">===</span> bitfields[<span class="pl-c1">3</span>]
namedfields<span class="pl-k">.</span>field4 <span class="pl-k">===</span> bitfields[<span class="pl-c1">4</span>]
namedfields<span class="pl-k">.</span>field5 <span class="pl-k">===</span> bitfields[<span class="pl-c1">5</span>]
namedfields<span class="pl-k">.</span>field6 <span class="pl-k">===</span> bitfields[<span class="pl-c1">6</span>]
</pre></div>
<h2><a id="user-content-use-case" class="anchor" aria-hidden="true" href="#use-case"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Use Case</h2>
<p>This <a href="https://github.com/JeffreySarnoff/BitsFields.jl/blob/master/example/ieeefields.jl">worked example</a> uses bit fields to access parts of floats in accord with the IEEE 754-2008 Floating Point Standard.</p>
</article></div>