<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/iitis/CumulantsUpdates.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e1b43f7047dfcf5de99fcf4257ad28a738127c04/68747470733a2f2f7472617669732d63692e6f72672f69697469732f43756d756c616e7473557064617465732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/iitis/CumulantsUpdates.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/iitis/CumulantsUpdates.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0eaff2bf91843c830427e7cd4df2f0bc05d2d448/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f69697469732f43756d756c616e7473557064617465732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/iitis/CumulantsUpdates.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://doi.org/10.5281/zenodo.3446207" rel="nofollow"><img src="https://camo.githubusercontent.com/7d38dc6efbc2f777ab3242c7c00e079ed1da488a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333434363230372e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.3446207.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-cumulantsupdatesjl" class="anchor" aria-hidden="true" href="#cumulantsupdatesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CumulantsUpdates.jl</h1>
<p>Updates following statistics of <code>n</code>-variate data</p>
<ul>
<li><code>d</code>'th moment tensor,</li>
<li>an array of moment tensors of order <code>1,2,...,d</code>.</li>
</ul>
<p>Given <code>t</code> realisations of <code>n</code>-variate data: <code>X ∈ ℜᵗˣⁿ</code>, and the update <code>X + ∈ ℜᵘˣⁿ</code>
returns array of updated cumulant tensors of order <code>1,2,...,d</code>.</p>
<p>To store symmetric tensors uses a <code>SymmetricTensors</code> type, requires <a href="https://github.com/ZKSI/SymmetricTensors.jl">SymmetricTensors.jl</a>. To convert to array, run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Array</span>(st<span class="pl-k">::</span><span class="pl-c1">SymmetricTensors{T, d}</span>)</pre></div>
<p>to convert back, run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span>  <span class="pl-c1">SymmetricTensor</span>(a<span class="pl-k">::</span><span class="pl-c1">Array{T,d}</span>)</pre></div>
<p>Requires <a href="https://github.com/ZKSI/Cumulants.jl">Cumulants.jl</a>.</p>
<p>As of 01/01/2017 <a href="https://github.com/kdomino">kdomino</a> is the lead maintainer of this package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, run</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add CumulantsUpdates</pre></div>
<p>to install the files. Julia 1.0 or later is required.</p>
<h2><a id="user-content-parallel-computation" class="anchor" aria-hidden="true" href="#parallel-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Parallel computation</h2>
<p>For parallel computation just run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs</span>(n)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> CumulantsUpdates</pre></div>
<h2><a id="user-content-functions" class="anchor" aria-hidden="true" href="#functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Functions</h2>
<h3><a id="user-content-data-update" class="anchor" aria-hidden="true" href="#data-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Data update</h3>
<p>To update data <code>X ∈ ℜᵗˣⁿ</code> by the update <code>X+ ∈ ℜᵘˣⁿ</code> in the observation
window of size <code>t</code> and get <code>ℜᵗˣⁿ ∋ X' = vcat(X,X+)[1+u:end, :]</code> run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">dataupdat</span>(X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, Xplus<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span></pre></div>
<p>the condition <code>u &lt; t</code> must be fulfilled.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> b <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">2</span>,<span class="pl-c1">4</span>)
<span class="pl-c1">2</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dataupdat</span>(a,b)
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">1.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<h3><a id="user-content-moment-update" class="anchor" aria-hidden="true" href="#moment-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Moment update</h3>
<p>To update the moment tensor <code>M::SymmetricTensor{T, d}</code> for  data <code>X ∈ ℜᵗˣⁿ</code>, given the update <code>X+ ∈ ℜᵘˣⁿ</code> where <code>u &lt; t</code> run</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">momentupdat</span>(M<span class="pl-k">::</span><span class="pl-c1">SymmetricTensor{T, d}</span>, X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, Xplus<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span>, d}</pre></div>
<p>Returns a <code>SymmetricTensor{T, d}</code> of the moment tensor of updated multivariate data:
<code>ℜᵗˣⁿ ∈ X' = dataupdat(X,X+)</code>, i.e.: <code>M = moment(X, d)</code>, <code>momentupdat(M, X, X+) = moment(X', d)</code>. If <code>u ≪ t</code> <code>momentupdat()</code> is much faster than a recalculation.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">6</span>, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]

[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">true</span>)


julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">ones</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">momentupdat</span>(m, x, y)
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">3.33333</span> <span class="pl-c1">3.33333</span>; <span class="pl-c1">3.33333</span> <span class="pl-c1">3.33333</span>]

[<span class="pl-c1">3.33333</span> <span class="pl-c1">3.33333</span>; <span class="pl-c1">3.33333</span> <span class="pl-c1">3.33333</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">true</span>)
</pre></div>
<p>Function <code>momentarray(X, d)</code> can be used to compute an array of moments of order <code>1, ..., d</code>
of data <code>X ∈ ℜᵗˣⁿ</code></p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">momentarray</span>(X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, d<span class="pl-k">::</span><span class="pl-c1">Int</span>, b<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span>, d}</pre></div>
<p><code>b</code> - is a <code>SymmetricTensor</code> parameter, a block size.</p>
<p>One can update an array of moments by calling:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">momentupdat</span>(M<span class="pl-k">::</span><span class="pl-c1">Array{SymmetricTensor{T, d}}</span>, X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, Xplus<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span>, d}</pre></div>
<p>Returns an <code>Array{SymmetricTensor{T, d}}</code> of moment tensors of order <code>1, ..., d</code> of updated multivariate data: <code>ℜᵗˣⁿ ∋ X' = dataupdat(X,X+)</code>, i.e. <code>Mₐᵣ = momentarray(X, d)</code>, <code>momentupdat(Mₐᵣ, X, X+) = momentarray(X', d)</code>.</p>
<h3><a id="user-content-cumulants-update" class="anchor" aria-hidden="true" href="#cumulants-update"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cumulants update</h3>
<p>Presented functions are design for sequent update of multivariate cumulant tensors.
Hence it can be applied in a data streaming scheme. Suppose one has data <code>X ∈ ℜᵗˣⁿ</code>
and subsequent coming updates <code>X+ ∈ ℜᵘˣⁿ</code> such that <code>u ≪ t</code>. Suppose one want to compute cumulant tensors in an observation window of size <code>t</code> each time the update comes.
To store data amd moments we use the following structure <code>mutable struct DataMoments{T &lt;: AbstractFloat}</code>
with following fields: <code>X</code> - data, <code>d</code> - maximal order of a moment series, <code>b</code> - a block size, <code>M</code> - moment series. To initialise, we can use the following constructor:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">DataMoments</span>(X<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>, d<span class="pl-k">::</span><span class="pl-c1">Int</span>, b<span class="pl-k">::</span><span class="pl-c1">Int</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<p>here an array of moments will be computed. To update a DataMoments structure and compute updated cumulants run:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">cumulantsupdate!</span>(dm<span class="pl-k">::</span><span class="pl-c1">DataMoments{T}</span>, Xplus<span class="pl-k">::</span><span class="pl-c1">Matrix{T}</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span>
</pre></div>
<p>The function updates a DataMoment structure and returns a series of cumulants of order <code>1, ..., dm.d</code> for updated data. See:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">ones</span>(<span class="pl-c1">10</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> s <span class="pl-k">=</span> <span class="pl-c1">DataMoments</span>(x, <span class="pl-c1">4</span>, <span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> y <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">4</span>,<span class="pl-c1">2</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cumulantsupdate!</span>(s,y)[<span class="pl-c1">4</span>]
<span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,4}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">4</span>}}[[<span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>; <span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>]

[<span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>; <span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>]

[<span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>; <span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>]

[<span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>; <span class="pl-k">-</span><span class="pl-c1">0.1056</span> <span class="pl-k">-</span><span class="pl-c1">0.1056</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">true</span>)
</pre></div>
<p>To save the DataMoments structure use:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">savedm</span>(dm<span class="pl-k">::</span><span class="pl-c1">DataMoments</span>, dir<span class="pl-k">::</span><span class="pl-c1">String</span>)</pre></div>
<p>To load it use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">loaddm</span>(dir<span class="pl-k">::</span><span class="pl-c1">String</span>)</pre></div>
<p>returns a DataMoments structure stored in a given directory.</p>
<h3><a id="user-content-the-p-norm" class="anchor" aria-hidden="true" href="#the-p-norm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The p-norm</h3>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(st<span class="pl-k">::</span><span class="pl-c1">SymmetricTensor{T, d}</span>, p<span class="pl-k">::</span><span class="pl-c1">Union{Float64, Int}</span>) <span class="pl-k">where</span> {T<span class="pl-k">&lt;:</span><span class="pl-c1">AbstractFloat</span>, d}</pre></div>
<p>Returns a <code>p</code>-norm of the tensor stored as <code>SymmetricTensors</code>, supported for <code>k ≠ 0</code>. The output of <code>norm(st, p) = norn(convert(Array, st),p)</code>. However
<code>norm(st::SymmetricTensor, p)</code> uses the block structure implemented in <code>SymmetricTensors</code>, hence is faster and decreases the computer memory requirement.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> te <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">0.112639</span> <span class="pl-c1">0.124715</span> <span class="pl-c1">0.124715</span> <span class="pl-c1">0.268717</span> <span class="pl-c1">0.124715</span> <span class="pl-c1">0.268717</span> <span class="pl-c1">0.268717</span> <span class="pl-c1">0.046154</span>];

julia<span class="pl-k">&gt;</span> st <span class="pl-k">=</span> <span class="pl-c1">SymmetricTensor</span>(<span class="pl-c1">reshape</span>(te, (<span class="pl-c1">2</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(st)
<span class="pl-c1">0.5273572868359742</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(st, <span class="pl-c1">2.5</span>)
<span class="pl-c1">0.4468668679541424</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">norm</span>(st, <span class="pl-c1">1</span>)
<span class="pl-c1">1.339089</span></pre></div>
<h3><a id="user-content-convert-cumulants-to-moments-and-moments-to-cumulants" class="anchor" aria-hidden="true" href="#convert-cumulants-to-moments-and-moments-to-cumulants"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Convert cumulants to moments and moments to cumulants</h3>
<p>Given <code>M</code> a vector of moments of order <code>1, ..., d</code> to change it to a vector
of cumulants of order <code>1, ..., d</code> using</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">moms2cums!</span>(M<span class="pl-k">::</span><span class="pl-c1">Vector{SymmetricTensor{T}}</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<p>One can convert a vector of cumulants <code>c</code> to a vector of moments by running</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">cums2moms</span>(c<span class="pl-k">::</span><span class="pl-c1">Vector{SymmetricTensor{T}}</span>) <span class="pl-k">where</span> T <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractFloat</span></pre></div>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">momentarray</span>(<span class="pl-c1">ones</span>(<span class="pl-c1">20</span>,<span class="pl-c1">3</span>), <span class="pl-c1">3</span>, <span class="pl-c1">2</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{SymmetricTensor{Float64,N} <span class="pl-k">where</span> N,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,1}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">1</span>}}[[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], [<span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)                                                                                                                              
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] [<span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)                                                                                                   
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]
[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] <span class="pl-c1">nothing</span>; <span class="pl-c1">nothing</span> <span class="pl-c1">nothing</span>]
Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] [<span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span>]; <span class="pl-c1">nothing</span> [<span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)


julia<span class="pl-k">&gt;</span> <span class="pl-c1">moms2cums!</span>(m)

julia<span class="pl-k">&gt;</span> m
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{SymmetricTensor{Float64,N} <span class="pl-k">where</span> N,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,1}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">1</span>}}[[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], [<span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)                                                                                                                          
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>] [<span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span>]; <span class="pl-c"><span class="pl-c">#</span>undef [0.0]], 2, 2, 3, false)                                                                                                </span>
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>]
[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>] <span class="pl-c"><span class="pl-c">#</span>undef; #undef #undef]</span>
Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>] [<span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span>]; <span class="pl-c"><span class="pl-c">#</span>undef [0.0]], 2, 2, 3, false)</span>


julia<span class="pl-k">&gt;</span> <span class="pl-c1">cums2moms</span>(m)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{SymmetricTensor{Float64,N} <span class="pl-k">where</span> N,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,1}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">1</span>}}[[<span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>], [<span class="pl-c1">1.0</span>]], <span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">false</span>)                                                                                                                          
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,2}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">2</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] [<span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span>]; <span class="pl-c"><span class="pl-c">#</span>undef [1.0]], 2, 2, 3, false)                                                                                                </span>
 <span class="pl-c1">SymmetricTensor</span><span class="pl-c1">{Float64,3}</span>(Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>]
[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] <span class="pl-c"><span class="pl-c">#</span>undef; #undef #undef]</span>
Union{Nothing, Array{Float64,<span class="pl-c1">3</span>}}[[<span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span> <span class="pl-c1">1.0</span>] [<span class="pl-c1">1.0</span>; <span class="pl-c1">1.0</span>]; <span class="pl-c"><span class="pl-c">#</span>undef [1.0]], 2, 2, 3, false)</span>


</pre></div>
<h1><a id="user-content-performance-tests" class="anchor" aria-hidden="true" href="#performance-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance tests</h1>
<p>To analyse the computational time of cumulants updates vs <code>Cumulants.jl</code> recalculation, we supply the executable script <code>comptimes.jl</code>. The script saves computational times to the <code>res/*.jld</code> file. The scripts accept following parameters:</p>
<ul>
<li><code>-d (Int)</code>: cumulant's maximum order, by default <code>d = 4</code>,</li>
<li><code>-n (vararg Int)</code>: numbers of marginal variables, by default <code>n = 40</code>,</li>
<li><code>-t (Int)</code>: number of realisations of random variable, by default <code>t = 500000</code>,</li>
<li><code>-u (vararg Int)</code>: number of realisations of update, by default <code>u = 10000, 15000, 20000</code>,</li>
<li><code>-b (Int)</code>: blocks size, by default <code>b = 4</code>,</li>
<li><code>-p (Int)</code>: numbers of processes, by default <code>p = 3</code>.</li>
</ul>
<p>To analyse the computational time of cumulants updates for different block sizes <code>1 &lt; b ≤ Int(√n)+2</code>, we supply the executable script <code>comptimesblocks.jl</code>.
The script saves computational times to the <code>res/*.jld</code> file. The scripts accept following parameters:</p>
<ul>
<li><code>-d (Int)</code>: cumulant's order, by default <code>d = 4</code>,</li>
<li><code>-n (Int)</code>: numbers of marginal variables, by default <code>n = 48</code>,</li>
<li><code>-u (vararg Int)</code>: number of realisations of the update, by default <code>u = 10000, 20000</code>.</li>
<li><code>-p (Int)</code>: numbers of processes, by default <code>p = 3</code>.</li>
</ul>
<p>To analyse the computational time of cumulants updates for different number of workers, we supply the executable script <code>comptimesprocs.jl</code>.
The script saves computational times to the <code>res/*.jld</code> file. The scripts accept following parameters:</p>
<ul>
<li><code>-d (Int)</code>: cumulant's order, by default <code>d = 4</code>,</li>
<li><code>-n (Int)</code>: numbers of marginal variables, by default <code>n = 48</code>,</li>
<li><code>-u (vararg Int)</code>: number of realisations of the update, by default <code>u = 10000, 20000</code>,</li>
<li><code>-b (Int)</code>: blocks size, by default <code>b = 4</code>,</li>
<li><code>-p (Int)</code>: maximal numbers of processes, by default <code>p = 6</code>.</li>
</ul>
<p>To plot computational times run executable <code>res/plotcomptimes.jl</code> on chosen <code>*.jld</code> file.</p>
<h1><a id="user-content-citing-this-work" class="anchor" aria-hidden="true" href="#citing-this-work"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citing this work</h1>
<p>Krzysztof Domino, Piotr Gawron, <em>An algorithm for arbitrary–order cumulant tensor calculation in a sliding window of data streams</em>,
International Journal of Applied Mathematics and Computer Science, vol. 29, issue 1, pp. 206, 2019  (<a href="https://doi.org/10.2478/amcs-2019-0015" rel="nofollow">https://doi.org/10.2478/amcs-2019-0015</a> )</p>
<p>This project was partially financed by the National Science Centre, Poland – project number 2014/15/B/ST6/05204.</p>
</article></div>