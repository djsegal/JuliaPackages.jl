<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-codetracking" class="anchor" aria-hidden="true" href="#codetracking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CodeTracking</h1>
<p>CodeTracking is a minimal package designed to work with
<a href="https://github.com/timholy/Revise.jl">Revise.jl</a> (for versions after v1.1.0).
Its main purpose is to support packages that need to interact with code that might move
around as it gets edited.</p>
<p>CodeTracking is a very lightweight dependency.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CodeTracking

julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">@which</span> <span class="pl-c1">sum</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>])
<span class="pl-c1">sum</span>(a<span class="pl-k">::</span><span class="pl-c1">AbstractArray</span>) <span class="pl-k">in</span> Base at reducedim<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">648</span>

julia<span class="pl-k">&gt;</span> file, line <span class="pl-k">=</span> <span class="pl-c1">whereis</span>(m)
(<span class="pl-s"><span class="pl-pds">"</span>/home/tim/src/julia-1/usr/share/julia/base/reducedim.jl<span class="pl-pds">"</span></span>, <span class="pl-c1">642</span>)</pre></div>
<p>In this (ficticious) example, <code>sum</code> moved because I deleted a few lines higher in the file;
these didn't affect the functionality of <code>sum</code> (so we didn't need to redefine and recompile it),
but it does change the starting line number of the file at which this method appears.</p>
<p>Other methods of <code>whereis</code> allow you to obtain the current position corresponding to a single
statement inside a method; see <code>?whereis</code> for details.</p>
<p>CodeTracking can also be used to find out what files define a particular package:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CodeTracking, ColorTypes

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pkgfiles</span>(ColorTypes)
<span class="pl-c1">PkgFiles</span>(ColorTypes [<span class="pl-c1">3</span>da002f7<span class="pl-k">-</span><span class="pl-c1">5984</span><span class="pl-k">-</span><span class="pl-c1">5</span>a60<span class="pl-k">-</span>b8a6<span class="pl-k">-</span>cbb66c0b333f])<span class="pl-k">:</span>
  basedir<span class="pl-k">:</span> <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>ColorTypes<span class="pl-k">/</span>BsAWO
  files<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">"</span>src/ColorTypes.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>src/types.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>src/traits.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>src/conversions.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>src/show.jl<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>src/operations.jl<span class="pl-pds">"</span></span>]</pre></div>
<p>or to extract the expression that defines a method:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> m <span class="pl-k">=</span> <span class="pl-c1">@which</span> <span class="pl-c1">red</span>(<span class="pl-c1">RGB</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>))
<span class="pl-c1">red</span>(c<span class="pl-k">::</span><span class="pl-c1">AbstractRGB</span>) <span class="pl-k">in</span> ColorTypes at <span class="pl-k">/</span>home<span class="pl-k">/</span>tim<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>ColorTypes<span class="pl-k">/</span>BsAWO<span class="pl-k">/</span>src<span class="pl-k">/</span>traits<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">14</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">definition</span>(m)
:(<span class="pl-en">red</span>(c<span class="pl-k">::</span><span class="pl-c1">AbstractRGB</span>) <span class="pl-k">=</span> <span class="pl-k">begin</span>
          <span class="pl-c"><span class="pl-c">#=</span> /home/tim/.julia/packages/ColorTypes/BsAWO/src/traits.jl:14 <span class="pl-c">=#</span></span>
          c<span class="pl-k">.</span>r
      <span class="pl-k">end</span>)

julia<span class="pl-k">&gt;</span> str, line1 <span class="pl-k">=</span> <span class="pl-c1">definition</span>(String, m)
(<span class="pl-s"><span class="pl-pds">"</span>red(c::AbstractRGB   ) = c.r<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>, <span class="pl-c1">14</span>)</pre></div>
<p>or to find the method-signatures at a particular location:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">signatures_at</span>(ColorTypes, <span class="pl-s"><span class="pl-pds">"</span>src/traits.jl<span class="pl-pds">"</span></span>, <span class="pl-c1">14</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Tuple{<span class="pl-c1">typeof</span>(red),AbstractRGB}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">signatures_at</span>(<span class="pl-s"><span class="pl-pds">"</span>/home/tim/.julia/packages/ColorTypes/BsAWO/src/traits.jl<span class="pl-pds">"</span></span>, <span class="pl-c1">14</span>)
<span class="pl-c1">1</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 Tuple{<span class="pl-c1">typeof</span>(red),AbstractRGB}</pre></div>
<p>CodeTracking also helps correcting for <a href="https://github.com/JuliaLang/julia/issues/26314">Julia issue #26314</a>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@which</span> <span class="pl-c1">uuid1</span>()
<span class="pl-c1">uuid1</span>() <span class="pl-k">in</span> UUIDs at C<span class="pl-k">:</span><span class="pl-k">\</span>cygwin<span class="pl-k">\</span>home<span class="pl-k">\</span>Administrator<span class="pl-k">\</span>buildbot<span class="pl-k">\</span>worker<span class="pl-k">\</span>package_win64<span class="pl-k">\</span>build<span class="pl-k">\</span>usr<span class="pl-k">\</span>share<span class="pl-k">\</span>julia<span class="pl-k">\</span>stdlib<span class="pl-k">\</span>v1<span class="pl-c1">.1</span><span class="pl-k">\</span>UUIDs<span class="pl-k">\</span>src<span class="pl-k">\</span>UUIDs<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">50</span>

julia<span class="pl-k">&gt;</span> CodeTracking<span class="pl-k">.</span><span class="pl-c1">whereis</span>(<span class="pl-c1">@which</span> <span class="pl-c1">uuid1</span>())
(<span class="pl-s"><span class="pl-pds">"</span>C:<span class="pl-cce">\\</span>Users<span class="pl-cce">\\</span>SomeOne<span class="pl-cce">\\</span>AppData<span class="pl-cce">\\</span>Local<span class="pl-cce">\\</span>Julia-1.1.0<span class="pl-cce">\\</span>share<span class="pl-cce">\\</span>julia<span class="pl-cce">\\</span>stdlib<span class="pl-cce">\\</span>v1.1<span class="pl-cce">\\</span>UUIDs<span class="pl-cce">\\</span>src<span class="pl-cce">\\</span>UUIDs.jl<span class="pl-pds">"</span></span>, <span class="pl-c1">50</span>)</pre></div>
<h2><a id="user-content-a-few-details" class="anchor" aria-hidden="true" href="#a-few-details"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A few details</h2>
<p>CodeTracking won't do anything <em>useful</em> unless the user is also running Revise,
because Revise will be responsible for updating CodeTracking's internal variables.
(Using <code>whereis</code> as an example, CodeTracking will just return the
file/line info in the method itself if Revise isn't running.)</p>
<p>However, Revise is a fairly large (and fairly complex) package, and currently it's not
easy to discover how to extract particular kinds of information from its internal storage.
CodeTracking is designed to be the new "query" part of Revise.jl.
The aim is to have a very simple API that developers can learn in a few minutes and then
incorporate into their own packages; its lightweight nature means that they potentially gain
a lot of functionality without being forced to take a big hit in startup time.</p>
</article></div>