<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-callgraphs" class="anchor" aria-hidden="true" href="#callgraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CallGraphs</h1>
<p><a href="https://travis-ci.org/timholy/CallGraphs.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/df9f5d11f4b3caccc9f81883817ae3541da8744e/68747470733a2f2f7472617669732d63692e6f72672f74696d686f6c792f43616c6c4772617068732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/timholy/CallGraphs.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>A package for analyzing source-code callgraphs, particularly of Julia's <code>src/</code> directory.
The main motivation for this package was to aid in finding all functions that might
trigger garbage collection by directly or indirectly calling <code>jl_gc_collect</code>; however,
the package has broader uses.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>Add with</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/timholy/CallGraphs.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p>You'll also need to have <code>clang++</code> installed, as well at the corresponding <code>opt</code> tool.
On the author's machine, <code>opt</code> is called <code>opt-3.4</code>.</p>
<h3><a id="user-content-analyzing-a-source-repository" class="anchor" aria-hidden="true" href="#analyzing-a-source-repository"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Analyzing a source repository</h3>
<h4><a id="user-content-extracting-the-callgraph" class="anchor" aria-hidden="true" href="#extracting-the-callgraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extracting the callgraph</h4>
<p>An example script is <code>callgraph_jlsrc.bash</code>, which is set to analyze julia's <code>src</code> directory.
It should be called from  within that directory. You may need to change the <code>OPT</code> variable
to match your system. This script can be modified to analyze other code repositories.</p>
<p>This writes a series of <code>*.ll</code> and <code>*.dot</code> files. These <code>*.dot</code> files are then analyzed by
the julia code in this repository.</p>
<h4><a id="user-content-analyzing-the-callgraph" class="anchor" aria-hidden="true" href="#analyzing-the-callgraph"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Analyzing the callgraph</h4>
<p>The most general approach is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CallGraphs
cgs <span class="pl-k">=</span> <span class="pl-c1">parsedots</span>()   <span class="pl-c"><span class="pl-c">#</span> or supply the dirname</span>
calls, calledby <span class="pl-k">=</span> <span class="pl-c1">combine</span>(cgs<span class="pl-k">...</span>)</pre></div>
<p>This will merge data from all the <code>*.dot</code> files in the directory into a single
callgraph. <code>parsedots</code> and <code>combine</code> are both described in online help.</p>
<h4><a id="user-content-garbage-collection-analysis" class="anchor" aria-hidden="true" href="#garbage-collection-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Garbage-collection analysis</h4>
<p>If your main interest is analyzing the callgraph of julia's garbage collection,
you will likely be more interested in</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CallGraphs
gcnames <span class="pl-k">=</span> <span class="pl-c1">findgc</span>()
<span class="pl-c1">highlight</span>(srcfilename, gcnames)</pre></div>
<p>which produces output that looks like this:</p>
<p><a target="_blank" rel="noopener noreferrer" href="/figures/highlightgc.png"><img src="/figures/highlightgc.png" alt="Source highlighting" style="max-width:100%;"></a></p>
<p>Shown in red are all functions that might trigger a call to <code>jl_gc_collect</code>.
The general principle is to look for cases where one line's allocation is not protected from
a later garbage-collection.</p>
<p>You can save a (crude) emacs highlighting file with</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">emacs_highlighting</span>(filename, gcnames)</pre></div>
<p>which you can <code>M-x load-file</code> after opening a C file.</p>
</article></div>