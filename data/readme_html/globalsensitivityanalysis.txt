<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/lrennels/GlobalSensitivityAnalysis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c1adbca1c1c9f97e862c540e4383525d77e466f211271372bcd0cc20e0288a9c/68747470733a2f2f7472617669732d63692e6f72672f6c72656e6e656c732f476c6f62616c53656e7369746976697479416e616c797369732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/lrennels/GlobalSensitivityAnalysis.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/lrennels/globalsensitivityanalysis-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d16e41d5f502bb74fc6b1309d1c53d9f669cb426833535184085ac2724c735ff/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6c72656e6e656c732f476c6f62616c53656e7369746976697479416e616c797369732e6a6c3f6272616e63683d6d6173746572263f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/lrennels/GlobalSensitivityAnalysis.jl?branch=master&amp;?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/lrennels/GlobalSensitivityAnalysis.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4bab8f3a599111642e85b92487008a2daff3302a1524bfc453f5b38cdbb23007/68747470733a2f2f636f6465636f762e696f2f67682f6c72656e6e656c732f476c6f62616c53656e7369746976697479416e616c797369732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/lrennels/GlobalSensitivityAnalysis.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/lrennels/GlobalSensitivityAnalysis.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/5d8d7a26580369489e7f3f4dc4a5b8045e7aa55aed637e95be4d4f881fe20cf6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c72656e6e656c732f476c6f62616c53656e7369746976697479416e616c797369732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/lrennels/GlobalSensitivityAnalysis.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-global-sensitivity-analysis" class="anchor" aria-hidden="true" href="#global-sensitivity-analysis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Global Sensitivity Analysis</h1>
<p>A Julia package which implements global sensitivity analysis methods.</p>
<p>Much of this package is based on <a href="https://github.com/SALib/SALib">SALib</a> (Herman and Usher, 2017) which implements several global sensitivity analysis measures in Python.  The pacakge seeks to implement several of these same algorithms in Julia along with providing a clear, user-friendly API.</p>
<p>The package currently includes the following methods:</p>
<ul>
<li>
<p>Sobol Sensitivity Analysis (<a href="http://www.sciencedirect.com/science/article/pii/S0378475400002706" rel="nofollow">Sobol 2001</a>, <a href="http://www.sciencedirect.com/science/article/pii/S0010465502002801" rel="nofollow">Saltelli 2002</a>, <a href="http://www.sciencedirect.com/science/article/pii/S0010465509003087" rel="nofollow">Saltelli et al. 2010</a>)</p>
</li>
<li>
<p>Delta Moment-Independent Measure (<a href="http://www.sciencedirect.com/science/article/pii/S0951832006000883" rel="nofollow">Borgonovo 2007</a>, <a href="http://www.sciencedirect.com/science/article/pii/S0377221712008995" rel="nofollow">Plischke et al. 2013</a>)</p>
</li>
</ul>
<h2><a id="user-content-the-api" class="anchor" aria-hidden="true" href="#the-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The API</h2>
<p>The API contains two primary functions: <code>sample</code> and <code>analyze</code>. These two functions call methods based on the type parameterization of their <code>data</code> argument, which is either of type <code>SobolData</code> or <code>DeltaData</code>.</p>
<p><strong>Note:</strong> For now the <code>sample</code> function will call the most used sampling protocol for the particular method, (Sobol sequence for Sobol method and Latin Hypercube sampling for Delta method), but in this future this will be rearranged and generalized since, for example, the Delta method can also just as well use Sobol sequence sampling and other methods.</p>
<h3><a id="user-content-sobol-sensitivity-analyis" class="anchor" aria-hidden="true" href="#sobol-sensitivity-analyis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sobol Sensitivity Analyis</h3>
<p>Sampling with <code>sample</code> is the first of the two main steps in an analysis, generating the model inputs to be run through a model of choice and produce the outputs analyzed in the <code>analyze</code> function.  The signature for this function is as follows.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    sample(data::SobolData)

Generate a matrix containing the model inputs for Sobol sensitivity analysis with 
the information in the `data`. In this function we apply Saltelli's 
extension of the Sobol  sequence. Saltelli's scheme extends the Sobol sequence in 
a way to reduce the error rates in the resulting sensitivity index calculations. 
The resulting matrix has `N` * (`D` + 2) rows, where `D` is the number of parameters 
and `N` is the number of samples.
"><pre>    <span class="pl-c1">sample</span>(data<span class="pl-k">::</span><span class="pl-c1">SobolData</span>)

Generate a matrix containing the model inputs <span class="pl-k">for</span> Sobol sensitivity analysis with 
the information <span class="pl-k">in</span> the <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span>. In this <span class="pl-k">function</span> we apply Saltelli<span class="pl-k">'</span>s 
extension of the Sobol  sequence. Saltelli<span class="pl-k">'</span>s scheme extends the Sobol sequence <span class="pl-k">in</span> 
a way to reduce the error rates <span class="pl-k">in</span> the resulting sensitivity index calculations. 
The resulting matrix has <span class="pl-s"><span class="pl-pds">`</span>N<span class="pl-pds">`</span></span> <span class="pl-k">*</span> (<span class="pl-s"><span class="pl-pds">`</span>D<span class="pl-pds">`</span></span> <span class="pl-k">+</span> <span class="pl-c1">2</span>) rows, <span class="pl-k">where</span> <span class="pl-s"><span class="pl-pds">`</span>D<span class="pl-pds">`</span></span> is the number of parameters 
and <span class="pl-s"><span class="pl-pds">`</span>N<span class="pl-pds">`</span></span> is the number of samples.</pre></div>
<p>The single argument to this function is of type <code>SobolData</code>, a custom type designed to hold all information needed for sampling and analysis. A <code>SobolData</code> struct is parameterized by a <code>params</code> dictionary (NOTE that this must be an <code>OrderedDict</code>, not a <code>Dict</code>) which maps parameter names to their Distributions, <code>calc_second_order</code> determining whether or not to calculate second-order sensitivity indices, and the desired number of runs <code>N</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    SobolData

A struct which holds all information needed for the sampling and analysis of a
specific problem using Sobol Analysis:

`params::Union{OrderedDict{Symbol, &lt;:Any}, Nothing} = nothing`: a dictionary mapping parameter names to their Distribution
`calc_second_order::Bool = true`: whether or not to calculate second order sensitivity indices
`N::Int = 1000`: the number of runs
"><pre>    SobolData

A <span class="pl-k">struct</span> which holds all information needed <span class="pl-k">for</span> the sampling and analysis of a
specific problem <span class="pl-k">using</span> Sobol Analysis<span class="pl-k">:</span>

<span class="pl-s"><span class="pl-pds">`</span>params::Union{OrderedDict{Symbol, &lt;:Any}, Nothing} = nothing<span class="pl-pds">`</span></span>: a dictionary mapping parameter names to their Distribution
<span class="pl-s"><span class="pl-pds">`</span>calc_second_order::Bool = true<span class="pl-pds">`</span></span>: whether or not to calculate second order sensitivity indices
<span class="pl-s"><span class="pl-pds">`</span>N::Int = 1000<span class="pl-pds">`</span></span>: the number of runs</pre></div>
<p>After sampling with <code>sample</code>, use the resulting matrix of parameter combinations to run your model, producing a vector of results.  The next and final step is to analyze the results with your <code>model_output</code> using the <code>analyze</code> function with the signature below. This function takes the same <code>SobolData</code> as <code>sample</code>, as well as the <code>model_output</code> vector and produces a dictionary of results.  This dictionary will include the <code>:firstorder</code>, <code>:totalorder</code> indices and (optionally) confidence intervals for each parameter.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    function analyze(data::SobolData, model_output::AbstractArray{&lt;:Number, S}; num_resamples::Union{Nothing, Int} = 1_000, conf_level::Union{Nothing, Number} = 0.95, progress_meter::Bool = true, N_override::Union{Nothing, Integer}=nothing) 

Performs a Sobol Analysis on the `model_output` produced with the problem defined by the information in `data` and returns the a dictionary of results with the sensitivity indices and respective confidence intervals for each of the
parameters defined using the `num_resamples` and `conf_level` keyword args. If these are Nothing than no confidence intervals will be calculated. The `progress_meter` keyword argument indicates whether a progress meter will be displayed and defaults to true. The `N_override` keyword argument allows users to override the `N` used in a specific `analyze` call to analyze just a subset (useful for convergence graphs).
"><pre>    <span class="pl-k">function</span> <span class="pl-en">analyze</span>(data<span class="pl-k">::</span><span class="pl-c1">SobolData</span>, model_output<span class="pl-k">::</span><span class="pl-c1">AbstractArray{&lt;:Number, S}</span>; num_resamples<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Int}</span> <span class="pl-k">=</span> <span class="pl-c1">1_000</span>, conf_level<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Number}</span> <span class="pl-k">=</span> <span class="pl-c1">0.95</span>, progress_meter<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>, N_override<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Integer}</span><span class="pl-k">=</span><span class="pl-c1">nothing</span>) 

Performs a Sobol Analysis on the <span class="pl-s"><span class="pl-pds">`</span>model_output<span class="pl-pds">`</span></span> produced with the problem defined by the information <span class="pl-k">in</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span> and returns the a dictionary of results with the sensitivity indices and respective confidence intervals <span class="pl-k">for</span> each of the
parameters defined <span class="pl-k">using</span> the <span class="pl-s"><span class="pl-pds">`</span>num_resamples<span class="pl-pds">`</span></span> and <span class="pl-s"><span class="pl-pds">`</span>conf_level<span class="pl-pds">`</span></span> keyword args. If these are Nothing than no confidence intervals will be calculated. The <span class="pl-s"><span class="pl-pds">`</span>progress_meter<span class="pl-pds">`</span></span> keyword argument indicates whether a progress meter will be displayed and defaults to <span class="pl-c1">true</span>. The <span class="pl-s"><span class="pl-pds">`</span>N_override<span class="pl-pds">`</span></span> keyword argument allows users to override the <span class="pl-s"><span class="pl-pds">`</span>N<span class="pl-pds">`</span></span> used <span class="pl-k">in</span> a specific <span class="pl-s"><span class="pl-pds">`</span>analyze<span class="pl-pds">`</span></span> call to analyze just a subset (useful <span class="pl-k">for</span> convergence graphs).</pre></div>
<p>An example of the basic flow can be found in <code>src/main.jl</code> using the Ishigami test function in <code>src/test_functions/ishigami.jl</code>, and is copied and commented below for convenience.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Distributions
using DataStructures

include(&quot;sample_sobol.jl&quot;)
include(&quot;analyze_sobol.jl&quot;)
include(&quot;test_functions/ishigami.jl&quot;)

# define the data
data = SobolData(
    params = OrderedDict(:x1 =&gt; Uniform(-3.14159265359, 3.14159265359),
        :x2 =&gt; Uniform(-3.14159265359, 3.14159265359),
        :x3 =&gt; Uniform(-3.14159265359, 3.14159265359)),
    N = 1000
)

# generate samples using Sobol sequence
samples = sample(data)

# run model (example)
Y = ishigami(samples)

# perform Sobol Analysis
analyze(data, Y)
"><pre><span class="pl-k">using</span> Distributions
<span class="pl-k">using</span> DataStructures

<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>sample_sobol.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>analyze_sobol.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>test_functions/ishigami.jl<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> define the data</span>
data <span class="pl-k">=</span> <span class="pl-c1">SobolData</span>(
    params <span class="pl-k">=</span> <span class="pl-c1">OrderedDict</span>(<span class="pl-c1">:x1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Uniform</span>(<span class="pl-k">-</span><span class="pl-c1">3.14159265359</span>, <span class="pl-c1">3.14159265359</span>),
        <span class="pl-c1">:x2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Uniform</span>(<span class="pl-k">-</span><span class="pl-c1">3.14159265359</span>, <span class="pl-c1">3.14159265359</span>),
        <span class="pl-c1">:x3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Uniform</span>(<span class="pl-k">-</span><span class="pl-c1">3.14159265359</span>, <span class="pl-c1">3.14159265359</span>)),
    N <span class="pl-k">=</span> <span class="pl-c1">1000</span>
)

<span class="pl-c"><span class="pl-c">#</span> generate samples using Sobol sequence</span>
samples <span class="pl-k">=</span> <span class="pl-c1">sample</span>(data)

<span class="pl-c"><span class="pl-c">#</span> run model (example)</span>
Y <span class="pl-k">=</span> <span class="pl-c1">ishigami</span>(samples)

<span class="pl-c"><span class="pl-c">#</span> perform Sobol Analysis</span>
<span class="pl-c1">analyze</span>(data, Y)</pre></div>
<h3><a id="user-content-delta-moment-independent-measure" class="anchor" aria-hidden="true" href="#delta-moment-independent-measure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Delta Moment-Independent Measure</h3>
<p>Sampling with <code>sample</code> is the first of the two main steps in an analysis, generating the model inputs to be run through a model of choice and produce the outputs analyzed in the <code>analyze</code> function.  The signature for this function is as follows.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    sample(data::DeltaData)

Generate a matrix containing the model inputs for Delta Moment-Independent Measure sensitivity analysis with the information in the `data`. In this function we apply Latin Hypercube Sampling. The resulting matrix has `N` columns * `D` rows, where `D` is the number of parameters and `N` is the number of samples.
"><pre>    <span class="pl-c1">sample</span>(data<span class="pl-k">::</span><span class="pl-c1">DeltaData</span>)

Generate a matrix containing the model inputs <span class="pl-k">for</span> Delta Moment<span class="pl-k">-</span>Independent Measure sensitivity analysis with the information <span class="pl-k">in</span> the <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span>. In this <span class="pl-k">function</span> we apply Latin Hypercube Sampling. The resulting matrix has <span class="pl-s"><span class="pl-pds">`</span>N<span class="pl-pds">`</span></span> columns <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">`</span>D<span class="pl-pds">`</span></span> rows, <span class="pl-k">where</span> <span class="pl-s"><span class="pl-pds">`</span>D<span class="pl-pds">`</span></span> is the number of parameters and <span class="pl-s"><span class="pl-pds">`</span>N<span class="pl-pds">`</span></span> is the number of samples.</pre></div>
<p>The single argument to this function is of type <code>DeltaData</code>, a custom type designed to hold all information needed for sampling and analysis. A <code>DeltaData</code> struct is parameterized by a <code>params</code> dictionary (NOTE that this must be an <code>OrderedDict</code>, not a <code>Dict</code>) which maps parameter names to their Distributions and the desired number of runs <code>N</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    DeltaData

A struct which holds all information needed for the sampling and analysis of a
specific problem using Sobol Analysis:

`params::Union{OrderedDict{Symbol, &lt;:Any}, Nothing} = nothing`: a dictionary mapping parameter names to their Distribution
`N::Int = 1000`: the number of runs
"><pre>    DeltaData

A <span class="pl-k">struct</span> which holds all information needed <span class="pl-k">for</span> the sampling and analysis of a
specific problem <span class="pl-k">using</span> Sobol Analysis<span class="pl-k">:</span>

<span class="pl-s"><span class="pl-pds">`</span>params::Union{OrderedDict{Symbol, &lt;:Any}, Nothing} = nothing<span class="pl-pds">`</span></span>: a dictionary mapping parameter names to their Distribution
<span class="pl-s"><span class="pl-pds">`</span>N::Int = 1000<span class="pl-pds">`</span></span>: the number of runs</pre></div>
<p>After sampling with <code>sample</code>, use the resulting matrix of parameter combinations to run your model, producing a vector of results.  The next and final step is to analyze the results with your <code>model_output</code> using the <code>analyze</code> function with the signature below. This function takes the same <code>DeltaData</code> as <code>sample</code>, as well as the <code>model_output</code> vector and produces a dictionary of results.  This dictionary will include the <code>:firstorder</code>, <code>:delta</code> indices and confidence intervals for each parameter.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="    function analyze(data::DeltaData, model_input::AbstractArray{&lt;:Number, S1}, model_output::AbstractArray{&lt;:Number, S2}; num_resamples::Int = 1_000, conf_level::Number = 0.95, progress_meter::Bool = true, N_override::Union{Nothing, Integer}=nothing)

Performs a Delta Moment-Independent Analysis on the `model_output` produced with  the problem defined by the information in `data` and `model_input` and returns a dictionary of results with the sensitivity indices and respective confidence  intervals for each of the parameters defined using the `num_resamples` and  `conf_level` keyword args.  The `progress_meter` keyword argument indicates whether a  progress meter will be displayed and defaults to true. The `N_override` keyword  argument allows users to override the `N` used in a specific `analyze` call to analyze just a subset (useful for convergence graphs).
"><pre>    <span class="pl-k">function</span> <span class="pl-en">analyze</span>(data<span class="pl-k">::</span><span class="pl-c1">DeltaData</span>, model_input<span class="pl-k">::</span><span class="pl-c1">AbstractArray{&lt;:Number, S1}</span>, model_output<span class="pl-k">::</span><span class="pl-c1">AbstractArray{&lt;:Number, S2}</span>; num_resamples<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">1_000</span>, conf_level<span class="pl-k">::</span><span class="pl-c1">Number</span> <span class="pl-k">=</span> <span class="pl-c1">0.95</span>, progress_meter<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>, N_override<span class="pl-k">::</span><span class="pl-c1">Union{Nothing, Integer}</span><span class="pl-k">=</span><span class="pl-c1">nothing</span>)

Performs a Delta Moment<span class="pl-k">-</span>Independent Analysis on the <span class="pl-s"><span class="pl-pds">`</span>model_output<span class="pl-pds">`</span></span> produced with  the problem defined by the information <span class="pl-k">in</span> <span class="pl-s"><span class="pl-pds">`</span>data<span class="pl-pds">`</span></span> and <span class="pl-s"><span class="pl-pds">`</span>model_input<span class="pl-pds">`</span></span> and returns a dictionary of results with the sensitivity indices and respective confidence  intervals <span class="pl-k">for</span> each of the parameters defined <span class="pl-k">using</span> the <span class="pl-s"><span class="pl-pds">`</span>num_resamples<span class="pl-pds">`</span></span> and  <span class="pl-s"><span class="pl-pds">`</span>conf_level<span class="pl-pds">`</span></span> keyword args.  The <span class="pl-s"><span class="pl-pds">`</span>progress_meter<span class="pl-pds">`</span></span> keyword argument indicates whether a  progress meter will be displayed and defaults to <span class="pl-c1">true</span>. The <span class="pl-s"><span class="pl-pds">`</span>N_override<span class="pl-pds">`</span></span> keyword  argument allows users to override the <span class="pl-s"><span class="pl-pds">`</span>N<span class="pl-pds">`</span></span> used <span class="pl-k">in</span> a specific <span class="pl-s"><span class="pl-pds">`</span>analyze<span class="pl-pds">`</span></span> call to analyze just a subset (useful <span class="pl-k">for</span> convergence graphs).</pre></div>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>References</h2>
<p>References from the peer-reviewed literature include:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Borgonovo, E. (2007). A new uncertainty importance measure. Reliability Engineering 
&amp; System Safety, 92(6), 771-784. Chicago.

Herman, J. and Usher, W. (2017) SALib: An open-source Python library for sensitivity 
analysis. Journal of Open Source Software, 2(9).

Plischke, E., Borgonovo, E., &amp; Smith, C. L. (2013). Global sensitivity measures 
from given data. European Journal of Operational Research, 226(3), 536-550.

Saltelli, A. (2002).  &quot;Making best use of model evaluations to compute sensitivity indices.&quot; 
Computer Physics Communications,145(2):280-297, doi:10.1016/S0010-4655(02)00280-1.

Saltelli, A., P. Annoni, I. Azzini, F. Campolongo, M. Ratto, and S. Tarantola (2010).  
&quot;Variance based sensitivity analysis of model output.  Design and estimator 
for the total sensitivity index.&quot; Computer Physics Communications, 181(2):259-270, 
doi:10.1016/j.cpc.2009.09.018.

Sobol, I. M. (2001).  &quot;Global sensitivity indices for nonlinear mathematical 
models and their Monte Carlo estimates.&quot;  Mathematics and Computers in Simulation, 
55(1-3):271-280, doi:10.1016/S0378-4754(00)00270-6.
"><pre><code>Borgonovo, E. (2007). A new uncertainty importance measure. Reliability Engineering 
&amp; System Safety, 92(6), 771-784. Chicago.

Herman, J. and Usher, W. (2017) SALib: An open-source Python library for sensitivity 
analysis. Journal of Open Source Software, 2(9).

Plischke, E., Borgonovo, E., &amp; Smith, C. L. (2013). Global sensitivity measures 
from given data. European Journal of Operational Research, 226(3), 536-550.

Saltelli, A. (2002).  "Making best use of model evaluations to compute sensitivity indices." 
Computer Physics Communications,145(2):280-297, doi:10.1016/S0010-4655(02)00280-1.

Saltelli, A., P. Annoni, I. Azzini, F. Campolongo, M. Ratto, and S. Tarantola (2010).  
"Variance based sensitivity analysis of model output.  Design and estimator 
for the total sensitivity index." Computer Physics Communications, 181(2):259-270, 
doi:10.1016/j.cpc.2009.09.018.

Sobol, I. M. (2001).  "Global sensitivity indices for nonlinear mathematical 
models and their Monte Carlo estimates."  Mathematics and Computers in Simulation, 
55(1-3):271-280, doi:10.1016/S0378-4754(00)00270-6.
</code></pre></div>
<h2><a id="user-content-copyright-information" class="anchor" aria-hidden="true" href="#copyright-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Copyright Information</h2>
<p>Some of the code in this package is derivative code based on the work of John Herman, Will Usher, and others:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="The MIT License (MIT)

Copyright (c) 2013-2017 Jon Herman, Will Usher, and others.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"><pre><code>The MIT License (MIT)

Copyright (c) 2013-2017 Jon Herman, Will Usher, and others.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</code></pre></div>
</article></div>