<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-nameresolution" class="anchor" aria-hidden="true" href="#nameresolution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NameResolution</h1>
<p dir="auto"><a href="https://JuliaStaging.github.io/NameResolution.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaStaging.github.io/NameResolution.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/JuliaStaging/NameResolution.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/fbf137696fc35ca4b8e3d2ff995b7f62cc1f4c950f213d362ed85195be0e03c5/68747470733a2f2f7472617669732d63692e636f6d2f4a756c696153746167696e672f4e616d655265736f6c7574696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaStaging/NameResolution.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaStaging/NameResolution.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/507f52d15000fafea673ae1a40406571bb4c3a65e2ea5cdfecf7b7c3b13e5cf7/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153746167696e672f4e616d655265736f6c7574696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaStaging/NameResolution.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Cross-language name resolutions.</p>
<p dir="auto">To solve the scope of following codes,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function f(x) # enter f, enter x, x is local
    y = 1 + x # enter y, require x
    g -&gt; begin
      y = 2 # enter g, g is local
      y + g # require y, require g
    end
end"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(x) <span class="pl-c"><span class="pl-c">#</span> enter f, enter x, x is local</span>
    y <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> x <span class="pl-c"><span class="pl-c">#</span> enter y, require x</span>
    g <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
      y <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> enter g, g is local</span>
      y <span class="pl-k">+</span> g <span class="pl-c"><span class="pl-c">#</span> require y, require g</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">we can use <code>NameResolution.jl</code> to achieve this,
check <a href="https://github.com/thautwarm/NameResolution.jl/blob/master/test/runtests.jl">test/runtests.jl</a>
for more details.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ana = top_analyzer()
enter!(ana, :f)
is_local!(ana, :x)
enter!(ana, :x)

enter!(ana, :y)
require!(ana, :x)
lambda = child_analyzer!(ana)

is_local!(lambda, :g)
enter!(lambda, :g)

enter!(lambda, :y)
require!(lambda, :y)
require!(lambda, :g)

run_analyzer(ana)
println(&quot;f &quot;, ana.solved)
println(&quot;lambda &quot;, lambda.solved)"><pre>ana <span class="pl-k">=</span> <span class="pl-c1">top_analyzer</span>()
<span class="pl-c1">enter!</span>(ana, <span class="pl-c1">:f</span>)
<span class="pl-c1">is_local!</span>(ana, <span class="pl-c1">:x</span>)
<span class="pl-c1">enter!</span>(ana, <span class="pl-c1">:x</span>)

<span class="pl-c1">enter!</span>(ana, <span class="pl-c1">:y</span>)
<span class="pl-c1">require!</span>(ana, <span class="pl-c1">:x</span>)
lambda <span class="pl-k">=</span> <span class="pl-c1">child_analyzer!</span>(ana)

<span class="pl-c1">is_local!</span>(lambda, <span class="pl-c1">:g</span>)
<span class="pl-c1">enter!</span>(lambda, <span class="pl-c1">:g</span>)

<span class="pl-c1">enter!</span>(lambda, <span class="pl-c1">:y</span>)
<span class="pl-c1">require!</span>(lambda, <span class="pl-c1">:y</span>)
<span class="pl-c1">require!</span>(lambda, <span class="pl-c1">:g</span>)

<span class="pl-c1">run_analyzer</span>(ana)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>f <span class="pl-pds">"</span></span>, ana<span class="pl-k">.</span>solved)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>lambda <span class="pl-pds">"</span></span>, lambda<span class="pl-k">.</span>solved)</pre></div>
<p dir="auto">outputs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; println(&quot;f &quot;, ana.solved.x)
f Scope(
  bounds={
    f=&gt;LocalVar(f, is_mutable=false, is_shared=false),

    y=&gt;LocalVar(y, is_mutable=true, is_shared=true),

    x=&gt;LocalVar(x, is_mutable=false, is_shared=false),
  },
  freevars={},
  parent=nothing,
)



julia&gt; println(&quot;lambda &quot;, lambda.solved.x)
lambda Scope(
  bounds={
    g=&gt;LocalVar(g, is_mutable=false, is_shared=false),
  },
  freevars={
    y=&gt;LocalVar(y, is_mutable=true, is_shared=true),
  },
  parent=Scope(
    bounds={
      f=&gt;LocalVar(f, is_mutable=false, is_shared=false),

      y=&gt;LocalVar(y, is_mutable=true, is_shared=true),

      x=&gt;LocalVar(x, is_mutable=false, is_shared=false),
    },
    freevars={},
    parent=nothing,
  ),
)


"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>f <span class="pl-pds">"</span></span>, ana<span class="pl-k">.</span>solved<span class="pl-k">.</span>x)
f <span class="pl-c1">Scope</span>(
  bounds<span class="pl-k">=</span>{
    f<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(f, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),

    y<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(y, is_mutable<span class="pl-k">=</span><span class="pl-c1">true</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">true</span>),

    x<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(x, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),
  },
  freevars<span class="pl-k">=</span>{},
  parent<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
)



julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>lambda <span class="pl-pds">"</span></span>, lambda<span class="pl-k">.</span>solved<span class="pl-k">.</span>x)
lambda <span class="pl-c1">Scope</span>(
  bounds<span class="pl-k">=</span>{
    g<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(g, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),
  },
  freevars<span class="pl-k">=</span>{
    y<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(y, is_mutable<span class="pl-k">=</span><span class="pl-c1">true</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">true</span>),
  },
  parent<span class="pl-k">=</span><span class="pl-c1">Scope</span>(
    bounds<span class="pl-k">=</span>{
      f<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(f, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),

      y<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(y, is_mutable<span class="pl-k">=</span><span class="pl-c1">true</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">true</span>),

      x<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(x, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),
    },
    freevars<span class="pl-k">=</span>{},
    parent<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
  ),
)


</pre></div>

</article></div>