<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nameresolution" class="anchor" aria-hidden="true" href="#nameresolution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NameResolution</h1>
<p><a href="https://thautwarm.github.io/NameResolution.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/NameResolution.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/thautwarm/NameResolution.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/52cd1f32e695df498ca96363f6ab698134522110/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f4e616d655265736f6c7574696f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/NameResolution.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/NameResolution.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/970fdc7a4f77e89e266acae30204d1d1899c9b44/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f4e616d655265736f6c7574696f6e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/NameResolution.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Cross-language name resolutions.</p>
<p>To solve the scope of following codes,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">f</span>(x) <span class="pl-c"><span class="pl-c">#</span> enter f, enter x, x is local</span>
    y <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> x <span class="pl-c"><span class="pl-c">#</span> enter y, require x</span>
    g <span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
      y <span class="pl-k">=</span> <span class="pl-c1">2</span> <span class="pl-c"><span class="pl-c">#</span> enter g, g is local</span>
      y <span class="pl-k">+</span> g <span class="pl-c"><span class="pl-c">#</span> require y, require g</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>we can use <code>NameResolution.jl</code> to achieve this,
check <a href="https://github.com/thautwarm/NameResolution.jl/blob/master/test/runtests.jl">test/runtests.jl</a>
for more details.</p>
<div class="highlight highlight-source-julia"><pre>ana <span class="pl-k">=</span> <span class="pl-c1">top_analyzer</span>()
<span class="pl-c1">enter!</span>(ana, <span class="pl-c1">:f</span>)
<span class="pl-c1">is_local!</span>(ana, <span class="pl-c1">:x</span>)
<span class="pl-c1">enter!</span>(ana, <span class="pl-c1">:x</span>)

<span class="pl-c1">enter!</span>(ana, <span class="pl-c1">:y</span>)
<span class="pl-c1">require!</span>(ana, <span class="pl-c1">:x</span>)
lambda <span class="pl-k">=</span> <span class="pl-c1">child_analyzer!</span>(ana)

<span class="pl-c1">is_local!</span>(lambda, <span class="pl-c1">:g</span>)
<span class="pl-c1">enter!</span>(lambda, <span class="pl-c1">:g</span>)

<span class="pl-c1">enter!</span>(lambda, <span class="pl-c1">:y</span>)
<span class="pl-c1">require!</span>(lambda, <span class="pl-c1">:y</span>)
<span class="pl-c1">require!</span>(lambda, <span class="pl-c1">:g</span>)

<span class="pl-c1">run_analyzer</span>(ana)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>f <span class="pl-pds">"</span></span>, ana<span class="pl-k">.</span>solved)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>lambda <span class="pl-pds">"</span></span>, lambda<span class="pl-k">.</span>solved)</pre></div>
<p>outputs:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>f <span class="pl-pds">"</span></span>, ana<span class="pl-k">.</span>solved<span class="pl-k">.</span>x)
f <span class="pl-c1">Scope</span>(
  bounds<span class="pl-k">=</span>{
    f<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(f, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),

    y<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(y, is_mutable<span class="pl-k">=</span><span class="pl-c1">true</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">true</span>),

    x<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(x, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),
  },
  freevars<span class="pl-k">=</span>{},
  parent<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
)



julia<span class="pl-k">&gt;</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>lambda <span class="pl-pds">"</span></span>, lambda<span class="pl-k">.</span>solved<span class="pl-k">.</span>x)
lambda <span class="pl-c1">Scope</span>(
  bounds<span class="pl-k">=</span>{
    g<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(g, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),
  },
  freevars<span class="pl-k">=</span>{
    y<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(y, is_mutable<span class="pl-k">=</span><span class="pl-c1">true</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">true</span>),
  },
  parent<span class="pl-k">=</span><span class="pl-c1">Scope</span>(
    bounds<span class="pl-k">=</span>{
      f<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(f, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),

      y<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(y, is_mutable<span class="pl-k">=</span><span class="pl-c1">true</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">true</span>),

      x<span class="pl-k">=&gt;</span><span class="pl-c1">LocalVar</span>(x, is_mutable<span class="pl-k">=</span><span class="pl-c1">false</span>, is_shared<span class="pl-k">=</span><span class="pl-c1">false</span>),
    },
    freevars<span class="pl-k">=</span>{},
    parent<span class="pl-k">=</span><span class="pl-c1">nothing</span>,
  ),
)


</pre></div>

</article></div>