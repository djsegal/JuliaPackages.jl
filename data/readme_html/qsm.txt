<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qsmjl" class="anchor" aria-hidden="true" href="#qsmjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QSM.jl</h1>
<p dir="auto"><a href="https://kamesy.github.io/QSM.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://kamesy.github.io/QSM.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/kamesy/QSM.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/kamesy/QSM.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">Julia toolbox for quantitative susceptibility mapping (QSM).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">QSM.jl requires Julia v1.6 or later.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add QSM"><pre>julia<span class="pl-k">&gt;</span> ]add QSM</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QSM

# constants
γ = 267.52      # gyromagnetic ratio
B0 = 3          # main magnetic field strength

# load 3D single-, or multi-echo data using your favourite
# package, e.g. MAT.jl, NIfTI.jl, ParXRec.jl, ...
mag, phas = ...

bdir = (...,)   # direction of B-field
vsz  = (...,)   # voxel size
TEs  = [...]    # echo times

# extract brain mask from last echo using FSL's bet
mask0 = bet(@view(mag[:,:,:,end]), vsz, &quot;-m -n -f 0.5&quot;)

# erode mask
mask1 = erode_mask(mask0, 5)

# unwrap phase + harmonic background field correction
uphas = unwrap_laplacian(phas, mask1, vsz)

# convert units
@views for t in axes(uphas, 4)
    uphas[:,:,:,t] .*= inv(B0 * γ * TEs[t])
end

# remove non-harmonic background fields
fl, mask2 = vsharp(uphas, mask1, vsz)

# dipole inversion
x = rts(fl, mask2, vsz, bdir=bdir)"><pre><span class="pl-k">using</span> QSM

<span class="pl-c"><span class="pl-c">#</span> constants</span>
γ <span class="pl-k">=</span> <span class="pl-c1">267.52</span>      <span class="pl-c"><span class="pl-c">#</span> gyromagnetic ratio</span>
B0 <span class="pl-k">=</span> <span class="pl-c1">3</span>          <span class="pl-c"><span class="pl-c">#</span> main magnetic field strength</span>

<span class="pl-c"><span class="pl-c">#</span> load 3D single-, or multi-echo data using your favourite</span>
<span class="pl-c"><span class="pl-c">#</span> package, e.g. MAT.jl, NIfTI.jl, ParXRec.jl, ...</span>
mag, phas <span class="pl-k">=</span> <span class="pl-k">...</span>

bdir <span class="pl-k">=</span> (<span class="pl-k">...</span>,)   <span class="pl-c"><span class="pl-c">#</span> direction of B-field</span>
vsz  <span class="pl-k">=</span> (<span class="pl-k">...</span>,)   <span class="pl-c"><span class="pl-c">#</span> voxel size</span>
TEs  <span class="pl-k">=</span> [<span class="pl-k">...</span>]    <span class="pl-c"><span class="pl-c">#</span> echo times</span>

<span class="pl-c"><span class="pl-c">#</span> extract brain mask from last echo using FSL's bet</span>
mask0 <span class="pl-k">=</span> <span class="pl-c1">bet</span>(<span class="pl-c1">@view</span>(mag[:,:,:,<span class="pl-c1">end</span>]), vsz, <span class="pl-s"><span class="pl-pds">"</span>-m -n -f 0.5<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> erode mask</span>
mask1 <span class="pl-k">=</span> <span class="pl-c1">erode_mask</span>(mask0, <span class="pl-c1">5</span>)

<span class="pl-c"><span class="pl-c">#</span> unwrap phase + harmonic background field correction</span>
uphas <span class="pl-k">=</span> <span class="pl-c1">unwrap_laplacian</span>(phas, mask1, vsz)

<span class="pl-c"><span class="pl-c">#</span> convert units</span>
<span class="pl-c1">@views</span> <span class="pl-k">for</span> t <span class="pl-k">in</span> <span class="pl-c1">axes</span>(uphas, <span class="pl-c1">4</span>)
    uphas[:,:,:,t] <span class="pl-k">.*=</span> <span class="pl-c1">inv</span>(B0 <span class="pl-k">*</span> γ <span class="pl-k">*</span> TEs[t])
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> remove non-harmonic background fields</span>
fl, mask2 <span class="pl-k">=</span> <span class="pl-c1">vsharp</span>(uphas, mask1, vsz)

<span class="pl-c"><span class="pl-c">#</span> dipole inversion</span>
x <span class="pl-k">=</span> <span class="pl-c1">rts</span>(fl, mask2, vsz, bdir<span class="pl-k">=</span>bdir)</pre></div>
<p dir="auto">See the <a href="https://kamesy.github.io/QSM.jl" rel="nofollow"><code>documentation</code></a> for more details.</p>
<h2 dir="auto"><a id="user-content-multi-threading" class="anchor" aria-hidden="true" href="#multi-threading"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Multi-Threading</h2>
<p dir="auto">Multi-threading is provided by <a href="https://github.com/JuliaSIMD/Polyester.jl"><code>Polyester.jl</code></a>. To enable threading, <a href="https://docs.julialang.org/en/v1.6/manual/multi-threading/#Starting-Julia-with-multiple-threads" rel="nofollow"><code>start Julia with multiple threads</code></a>:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia --threads N"><pre>julia --threads N</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="export JULIA_NUM_THREADS=N"><pre><span class="pl-k">export</span> JULIA_NUM_THREADS=N</pre></div>
<p dir="auto">After an interrupt of a multi-threaded loop, reset threading via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; QSM.reset_threading()"><pre>julia<span class="pl-k">&gt;</span> QSM<span class="pl-k">.</span><span class="pl-c1">reset_threading</span>()</pre></div>
</article></div>