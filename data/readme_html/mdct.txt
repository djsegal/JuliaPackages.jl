<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mdct-module-for-julia" class="anchor" aria-hidden="true" href="#mdct-module-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MDCT module for Julia</h1>
<p><a href="https://travis-ci.org/stevengj/MDCT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8d942f7951b7dcf2f9cbdb2ff170bff95d0b91cf1a79aeb3f3e3bd246b07ef31/68747470733a2f2f7472617669732d63692e6f72672f73746576656e676a2f4d4443542e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/stevengj/MDCT.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/StevenGJohnson/mdct-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/679e3206fa9fea931988ed3b4f1cd5e4e2adc1f74fa990303c160eb3f8a19c56/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f706c303734696277626c34343574616c3f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/pl074ibwbl445tal?svg=true" style="max-width:100%;"></a></p>
<p>This module computes the modified discrete cosine transform (MDCT) in
the Julia language and the inverse transform (IMDCT), using the fast
type-IV discrete cosine tranform (DCT-IV) functions in the
<a href="https://github.com/JuliaMath/FFTW.jl">FFTW.jl package</a>.</p>
<p>Definitions of the MDCT and IMDCT can be found, for example in the
<a href="http://en.wikipedia.org/wiki/Modified_discrete_cosine_transform" rel="nofollow">Wikipedia MDCT
article</a>.
The MDCT is a linear transformation that takes 2N inputs and produces
N outputs, which is designed to be applied to a sequence of
50%-overlapping blocks of a longer sequence (e.g. audio samples).
Because this is non-square (fewer outputs than inputs), the IMDCT is
not an "inverse" transformation in the usual sense; it only recovers
the original data when IMDCTs of overlapping blocks are added (by
"time-domain aliasing cancellation").</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Within Julia, just use the package manager to run
<code>Pkg.add("MDCT")</code> to install the files.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>To use the MDCT functions, simply do</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using MDCT
Y = mdct(X)
Z = imdct(Y)
"><pre><code>using MDCT
Y = mdct(X)
Z = imdct(Y)
</code></pre></div>
<p>where <code>X</code> is any numeric <code>AbstractVector</code> (1d array).  Currently, the
length of <code>X</code> must be a multiple of 4.</p>
<p>For example, suppose we make a random vector <code>X</code> of length 1000 and
consider 50%-overlapping blocks of length 100 (<code>X[1:100]</code>,
<code>X[51:150]</code>, <code>X[101:200]</code>, and so on).  If we perform the MDCT of two
such blocks, then the IMDCT, and then add the overlapping halves of
the IMDCT outputs, we recover that portion of the original data:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="X = rand(1000)
Y1 = mdct(X[1:100])
Y2 = mdct(X[51:150])
Z1 = imdct(Y1)
Z2 = imdct(Y2)
norm(Z1[51:100] + Z2[1:50] - X[51:100])
"><pre><code>X = rand(1000)
Y1 = mdct(X[1:100])
Y2 = mdct(X[51:150])
Z1 = imdct(Y1)
Z2 = imdct(Y2)
norm(Z1[51:100] + Z2[1:50] - X[51:100])
</code></pre></div>
<p>where the last line computes the difference between the overlapped
IMDCT sum and the original data, and should be around
10<sup>âˆ’15</sup> (floating-point roundoff error).</p>
<h2><a id="user-content-planning" class="anchor" aria-hidden="true" href="#planning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Planning</h2>
<p>To create a pre-planned transforms for a given size of input vector
do:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using MDCT
Mp = plan_mdct(X)
Ip = plan_imdct(Y)
"><pre><code>using MDCT
Mp = plan_mdct(X)
Ip = plan_imdct(Y)
</code></pre></div>
<p>where <code>Ip</code> and <code>Mp</code> are pre-planned transforms optimized to allow much
quicker subsequent transformations. To use them simply:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Xt = Mp*X
Yt = Ip*Y
"><pre><code>Xt = Mp*X
Yt = Ip*Y
</code></pre></div>
<h2><a id="user-content-author" class="anchor" aria-hidden="true" href="#author"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author</h2>
<p>This module was written by <a href="http://math.mit.edu/~stevenj/" rel="nofollow">Steven G. Johnson</a>.</p>
</article></div>