<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-devtools" class="anchor" aria-hidden="true" href="#devtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DevTools</h1>
<p>DevTools.jl provides a couple of useful graphical tools for working with Julia, built on top of <a href="https://github.com/JunoLab/Blink.jl">Blink.jl</a>.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Blink<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">clone</span>(<span class="pl-s"><span class="pl-pds">"</span>https://github.com/JunoLab/DevTools.jl<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> DevTools</pre></div>
<h2><a id="user-content-graphical-display" class="anchor" aria-hidden="true" href="#graphical-display"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Graphical Display</h2>
<p>DevTools hooks into <a href="https://github.com/JunoLab/Media.jl">Media.jl</a> to provide a graphical display for Julia types. Once DevTools, is loaded, plotting with <a href="https://github.com/dcjones/Gadfly.jl">Gadfly</a> will open windows like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DevTools, Gadfly

julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(x<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>, y<span class="pl-k">=</span><span class="pl-c1">cumsum</span>(<span class="pl-c1">randn</span>(<span class="pl-c1">100</span>)))</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="readme/gadfly.png"><img src="readme/gadfly.png" alt="Gadfly Output" style="max-width:100%;"></a></p>
<p>There are a few utility functions that you can use to control this output, e.g. <code>pin()</code> will prevent new windows from being created (new plots will reuse an old window instead), and <code>top()</code> will set the last window to be always on top.</p>
<h2><a id="user-content-the-profiler" class="anchor" aria-hidden="true" href="#the-profiler"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Profiler</h2>
<p>Let's borrow an example from the excellent <a href="https://github.com/timholy/ProfileView.jl">ProfilerView.jl</a>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> profile.jl</span>
<span class="pl-k">function</span> <span class="pl-en">profile_test</span>(n)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n
        A <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">100</span>,<span class="pl-c1">100</span>,<span class="pl-c1">20</span>)
        m <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(A)
        Afft <span class="pl-k">=</span> <span class="pl-c1">fft</span>(A)
        Am <span class="pl-k">=</span> <span class="pl-c1">mapslices</span>(sum, A, <span class="pl-c1">2</span>)
        B <span class="pl-k">=</span> A[:,:,<span class="pl-c1">5</span>]
        Bsort <span class="pl-k">=</span> <span class="pl-c1">mapslices</span>(sort, B, <span class="pl-c1">1</span>)
        b <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>)
        C <span class="pl-k">=</span> B<span class="pl-k">.*</span>b
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-c1">profile_test</span>(<span class="pl-c1">10</span>)  <span class="pl-c"><span class="pl-c">#</span> run once to trigger compilation</span>
Profile<span class="pl-k">.</span><span class="pl-c1">clear</span>()  <span class="pl-c"><span class="pl-c">#</span> in case we have any previous profiling data</span>
<span class="pl-c1">@profile</span> <span class="pl-c1">profile_test</span>(<span class="pl-c1">100</span>)</pre></div>
<p>With this saved in a file, execute:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>profile.jl<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> DevTools

julia<span class="pl-k">&gt;</span> <span class="pl-c1">profiler</span>()</pre></div>
<p>This will result in an open window which looks something like the following:</p>
<p><a target="_blank" rel="noopener noreferrer" href="readme/profiler.png"><img src="readme/profiler.png" alt="Profile View" style="max-width:100%;"></a></p>
<p>This plot represents your program, with each green cell being a line within a given function – hover over to see which. If a line in the program calls some function <code>f</code>, then lines from <code>f</code> will be displayed directly below the original line, scaled by the amount of time that they took. For example, the top line in this plot is part of the profiler itself, and the largest line below it comes from <code>profile.jl:6</code>, followed by <code>abstractarray.jl:1238</code> as shown above – this gives a pretty clear idea of where you should aim optimisations.</p>
<p>If you're interested in looking more deeply into Julia's libraries, you can zoom into the plot by scrolling and pan by dragging.</p>
<p>This is certainly nicer than working with a text dump, but there's actually an even better way. Clicking on the <code>profile.jl:6</code> cell opens up a view on that line:</p>
<p><a target="_blank" rel="noopener noreferrer" href="readme/profiler-lines.png"><img src="readme/profiler-lines.png" alt="Profile Line View" style="max-width:100%;"></a></p>
<p>This view immediately makes it clear where time is being spent in the program, without having to mentally map between profile output and code. This more flat view can also be convenient for the way it aggregates time taken over the entire run of the program.</p>
</article></div>