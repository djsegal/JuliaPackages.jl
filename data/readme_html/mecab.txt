<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mecabjl" class="anchor" aria-hidden="true" href="#mecabjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MeCab.jl</h1>
<p dir="auto"><a href="https://travis-ci.org/chezou/MeCab.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/215e3c38e7b9097f562746e57c247ead217e9096d56c12801b1d5adc4a7f0f6c/68747470733a2f2f7472617669732d63692e6f72672f6368657a6f752f4d654361622e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/chezou/MeCab.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/chezou/MeCab.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/fd90bda452455efbbefb3a83e1bad10aa6197e1b68aaf4c2fdf811742b473c92/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6368657a6f752f4d654361622e6a6c2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/chezou/MeCab.jl/badge.svg?branch=master&amp;service=github" style="max-width: 100%;"></a></p>
<p dir="auto">Julia bindings for Japanese morphological analyzer <a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html" rel="nofollow">MeCab</a></p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MeCab

# Create MeCab tagger
mecab = Mecab()

# You can give MeCab option like &quot;-o wakati&quot;
# mecab = Mecab(&quot;-o wakati&quot;)

# Parse text
# It returns Array of MecabNode type
results = parse(mecab, &quot;すももももももももものうち&quot;)

# Access each result.
# It returns Array of String
for result in results
  println(result.surface, &quot;:&quot;, result.feature)
end

# Parse surface
results = parse_surface(mecab, &quot;すももももももももものうち&quot;)

# Access each result
# It returns Array of Array of MecabNode
for result in results
  println(result)
end

# Parse nbest result
nbest_results = parse_nbest(mecab, 3, &quot;すももももももももものうち&quot;)
for nbest_result in nbest_results
  for result in nbest_result
    println(result.surface, &quot;:&quot;, result.feature)
  end
  println()
end
"><pre><span class="pl-k">using</span> MeCab

<span class="pl-c"><span class="pl-c">#</span> Create MeCab tagger</span>
mecab <span class="pl-k">=</span> <span class="pl-c1">Mecab</span>()

<span class="pl-c"><span class="pl-c">#</span> You can give MeCab option like "-o wakati"</span>
<span class="pl-c"><span class="pl-c">#</span> mecab = Mecab("-o wakati")</span>

<span class="pl-c"><span class="pl-c">#</span> Parse text</span>
<span class="pl-c"><span class="pl-c">#</span> It returns Array of MecabNode type</span>
results <span class="pl-k">=</span> <span class="pl-c1">parse</span>(mecab, <span class="pl-s"><span class="pl-pds">"</span>すももももももももものうち<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Access each result.</span>
<span class="pl-c"><span class="pl-c">#</span> It returns Array of String</span>
<span class="pl-k">for</span> result <span class="pl-k">in</span> results
  <span class="pl-c1">println</span>(result<span class="pl-k">.</span>surface, <span class="pl-s"><span class="pl-pds">"</span>:<span class="pl-pds">"</span></span>, result<span class="pl-k">.</span>feature)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Parse surface</span>
results <span class="pl-k">=</span> <span class="pl-c1">parse_surface</span>(mecab, <span class="pl-s"><span class="pl-pds">"</span>すももももももももものうち<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Access each result</span>
<span class="pl-c"><span class="pl-c">#</span> It returns Array of Array of MecabNode</span>
<span class="pl-k">for</span> result <span class="pl-k">in</span> results
  <span class="pl-c1">println</span>(result)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Parse nbest result</span>
nbest_results <span class="pl-k">=</span> <span class="pl-c1">parse_nbest</span>(mecab, <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>すももももももももものうち<span class="pl-pds">"</span></span>)
<span class="pl-k">for</span> nbest_result <span class="pl-k">in</span> nbest_results
  <span class="pl-k">for</span> result <span class="pl-k">in</span> nbest_result
    <span class="pl-c1">println</span>(result<span class="pl-k">.</span>surface, <span class="pl-s"><span class="pl-pds">"</span>:<span class="pl-pds">"</span></span>, result<span class="pl-k">.</span>feature)
  <span class="pl-k">end</span>
  <span class="pl-c1">println</span>()
<span class="pl-k">end</span>
</pre></div>
<h2 dir="auto"><a id="user-content-requirement" class="anchor" aria-hidden="true" href="#requirement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirement</h2>
<ul dir="auto">
<li>mecab</li>
<li>dictionary for mecab (such as mecab-ipadic, mecab-naist-jdic, and so on)</li>
</ul>
<p dir="auto">If you don't install mecab and libmecab yet, MeCab.jl will install mecab, libmecab and mecab-ipadic that are confirmed to work with MeCab.jl under unix-like environment.</p>
<p dir="auto">Note that by default, MeCab.jl will try to find system-installed libmecab (e.g. /usr/lib/libmecab.dylib). If you have already libmecab installed, this might cause library or dictionary incompatibility that MeCab.jl assumes. If you have any problem with system-installed ones, please try to ignore them and rebuild MeCab.jl by:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ENV[&quot;MECABJL_LIBRARY_IGNORE_PATH&quot;] = &quot;/usr/lib:/usr/local/lib&quot; # depends on your environment
julia&gt; Pkg.build(&quot;MeCab&quot;)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>MECABJL_LIBRARY_IGNORE_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/usr/lib:/usr/local/lib<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> depends on your environment</span>
julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>MeCab<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">The libmecab library path will be stored in <code>MeCab.libmecab</code> after loading MeCab.jl. The library path should look like for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MeCab
julia&gt; MeCab.libmecab
&quot;$your_home_dir_path/.julia/v0.4/MeCab/deps/usr/lib/libmecab.dylib&quot;"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MeCab
julia<span class="pl-k">&gt;</span> MeCab<span class="pl-k">.</span>libmecab
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-v">$your_home_dir_path</span>/.julia/v0.4/MeCab/deps/usr/lib/libmecab.dylib<span class="pl-pds">"</span></span></pre></div>
<h2 dir="auto"><a id="user-content-credits" class="anchor" aria-hidden="true" href="#credits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Credits</h2>
<p dir="auto">MeCab.jl is created by Michiaki Ariga</p>
<p dir="auto">Original <a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html" rel="nofollow">MeCab</a> is created by Taku Kudo</p>
<h3 dir="auto"><a id="user-content-contributors" class="anchor" aria-hidden="true" href="#contributors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributors</h3>
<ul dir="auto">
<li><a href="https://github.com/r9y9">r9y9</a></li>
<li><a href="https://github.com/snthot">snthot</a></li>
<li><a href="https://github.com/tkelman">tkelman</a></li>
</ul>
</article></div>