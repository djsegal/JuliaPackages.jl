<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/MasonProtter/ReplMaker.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/aa6b80975322237396ff68f69d40f38651366865/68747470733a2f2f7472617669732d63692e6f72672f4d61736f6e50726f747465722f5265706c4d616b65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MasonProtter/ReplMaker.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-replmaker" class="anchor" aria-hidden="true" href="#replmaker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>REPLMaker</h1>
<p>The idea behind ReplMaker.jl is to make a tool for building (domain specific) languages in julia.</p>
<p>Suppose you've invented some language called MyLang and you've implemented a parser that turns MyLang code into julia code which is then supposed to be executed by the julia runtime. With ReplMaker.jl, you can simply hook your parser into the package and ReplMaker will then create a repl mode where end users just type MyLang code and have it be executed automatically.</p>
<p>My hope is for this to be useful to someone who implements a full language or DSL in Julia that uses syntax not supported by Julia's parser and doesn't want to deal with the headache of making their own REPL mode.</p>
<p>To download ReplMaker, simply do</p>
<pre><code>pkg&gt; add ReplMaker
</code></pre>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h1>
<h2><a id="user-content-example-1-expr-mode" class="anchor" aria-hidden="true" href="#example-1-expr-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 1: Expr Mode</h2>
<details>
 
<p>
</p><p>Suppose we want to make a very simple REPL mode which just takes whatever input we provide and returns its
quoted <code>Expr</code> form. We first make a parsing function,</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ReplMaker

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">parse_to_expr</span>(s)
           <span class="pl-k">quote</span> Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-k">$</span>s) <span class="pl-k">end</span>
       <span class="pl-k">end</span>
test_parser (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p>Now, we can simply provide that parser to the <code>initrepl</code> function</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(parse_to_expr, 
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr&gt; <span class="pl-pds">"</span></span>,
                prompt_color <span class="pl-k">=</span> <span class="pl-c1">:blue</span>, 
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>, 
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr_mode<span class="pl-pds">"</span></span>)
REPL mode Expr_mode initialized. Press ) to enter and backspace to exit.</pre></div>
<p>As instructed, we simply press the <code>)</code> key and the <code>julia&gt;</code> prompt is replaced</p>
<pre><code>Expr&gt;  
</code></pre>
<p>and as desired, we now can enter Julia code and be shown its quoted version.</p>
<pre><code>Expr&gt; 1 + 1
:(1 + 1)

Expr&gt; x ^ 2 + 5
:(x ^ 2 + 5)
</code></pre>
<p>Next, we might notice that if we try to do a multiline expression, the REPL mode craps out on us:</p>
<div class="highlight highlight-source-julia"><pre>Expr<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
:(<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:incomplete</span>, <span class="pl-s"><span class="pl-pds">"</span>incomplete: premature end of input<span class="pl-pds">"</span></span>)))</pre></div>
<p>This is because we haven't told our REPL mode what constitues a valid, complete line. Since this repl mode is just concerned with julia code, lets first make a function to detect if a string will parse to and <code>incomplete</code> expression.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-en">iscomplete</span>(x) <span class="pl-k">=</span> <span class="pl-c1">true</span>
iscomplete (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">iscomplete</span>(ex<span class="pl-k">::</span><span class="pl-c1">Expr</span>)
           <span class="pl-k">if</span> ex<span class="pl-k">.</span>head <span class="pl-k">==</span> <span class="pl-c1">:incomplete</span>
               <span class="pl-c1">false</span>
           <span class="pl-k">else</span>
               <span class="pl-c1">true</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
iscomplete (generic <span class="pl-k">function</span> with <span class="pl-c1">2</span> methods)</pre></div>
<p>and then we can slurp up the string being stored in the REPL buffer, parse it and check if it is a complete expression:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> REPL<span class="pl-k">:</span> LineEdit

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">valid_julia</span>(s)
           input <span class="pl-k">=</span> <span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(<span class="pl-c1">copy</span>(LineEdit<span class="pl-k">.</span><span class="pl-c1">buffer</span>(s))))
           <span class="pl-c1">iscomplete</span>(Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(input))
       <span class="pl-k">end</span>
valid_julia (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p>Now all we have to do is redefine our repl mode to use this completion checker:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(parse_to_expr,
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr&gt; <span class="pl-pds">"</span></span>,
                prompt_color <span class="pl-k">=</span> <span class="pl-c1">:blue</span>,
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>,
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr_mode<span class="pl-pds">"</span></span>,
                valid_input_checker<span class="pl-k">=</span>valid_julia)
┌ Warning<span class="pl-k">:</span> REPL key <span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span> overwritten.
└ @ ReplMaker <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>ReplMaker<span class="pl-k">/</span>pwo5w<span class="pl-k">/</span>src<span class="pl-k">/</span>ReplMaker<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">86</span>
REPL mode Expr_mode initialized. Press ) to enter and backspace to exit.

Expr<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
          x <span class="pl-k">+</span> <span class="pl-c1">1</span>
      <span class="pl-k">end</span>
:(<span class="pl-k">function</span> <span class="pl-en">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> none:2 <span class="pl-c">=#</span></span>
      x <span class="pl-k">+</span> <span class="pl-c1">1</span>
  <span class="pl-k">end</span>)</pre></div>
<p></p>
</details>
<h2><a id="user-content-example-2-bad-parser-mode" class="anchor" aria-hidden="true" href="#example-2-bad-parser-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 2: Bad Parser Mode</h2>
<details>
 
<p>
</p><p>Lets say we're feeling a bit sneaky and want a version of Julia where any input has multiplication and addition switched.</p>
<p>We first just make a function which takes expressions and if the first argument is <code>:+</code> replaces it with <code>:*</code> and vice versa. On all other inputs, this function is just an identity operation</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">switch_mult_add</span>(expr<span class="pl-k">::</span><span class="pl-c1">Expr</span>)
    <span class="pl-k">if</span> expr<span class="pl-k">.</span>args[<span class="pl-c1">1</span>] <span class="pl-k">==</span> :<span class="pl-k">+</span>
        expr<span class="pl-k">.</span>args[<span class="pl-c1">1</span>] <span class="pl-k">=</span> :<span class="pl-k">*</span>
        <span class="pl-k">return</span> expr
    <span class="pl-k">elseif</span> expr<span class="pl-k">.</span>args[<span class="pl-c1">1</span>] <span class="pl-k">==</span> :<span class="pl-k">*</span>
        expr<span class="pl-k">.</span>args[<span class="pl-c1">1</span>] <span class="pl-k">=</span> :<span class="pl-k">+</span>
        <span class="pl-k">return</span> expr
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> expr
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
<span class="pl-en">switch_mult_add</span>(s) <span class="pl-k">=</span> s</pre></div>
<p>We now just borrow the <code>postwalk</code> function from MacroTools and use it in our parsing function to recursively look through and input expression tree and apply <code>switch_mult_add</code> and use that parser in a new REPL mode.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> MacroTools<span class="pl-k">:</span> postwalk

<span class="pl-k">function</span> <span class="pl-en">bad_julia_parser</span>(s)
    expr <span class="pl-k">=</span> Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(s)
    <span class="pl-c1">postwalk</span>(switch_mult_add, expr)
<span class="pl-k">end</span>

<span class="pl-c1">initrepl</span>(bad_julia_parser, 
         prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bad_parser&gt; <span class="pl-pds">"</span></span>,
         prompt_color <span class="pl-k">=</span> <span class="pl-c1">:red</span>, 
         start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>}<span class="pl-pds">'</span></span>, 
         mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bad_parser_mode<span class="pl-pds">"</span></span>)</pre></div>
<p>now by pressing <code>}</code> we enter <code>bad_parser_mode</code>!</p>
<div class="highlight highlight-source-julia"><pre>bad_parser<span class="pl-k">&gt;</span> <span class="pl-c1">5</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>
<span class="pl-c1">25</span>

bad_parser<span class="pl-k">&gt;</span> (<span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-c1">5</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">100</span></pre></div>
<p></p>
</details>
<h2><a id="user-content-example-3-big-mode" class="anchor" aria-hidden="true" href="#example-3-big-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 3: Big Mode</h2>
<details>
 
<p>
</p><p>For performance reasons, Julia defaults to 64 bit precision but sometimes you don't care about speed and you don't
want to juggle the limitations of 64 bit precision in your head. You could just start wrapping every number in your
code with <code>big</code> but that sounds like something the REPL should be able to do for you. Fortunately, it is!</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ReplMaker 

<span class="pl-k">function</span> <span class="pl-en">Big_parse</span>(str)
    Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-c1">replace</span>(str, <span class="pl-sr"><span class="pl-pds">r"</span>[<span class="pl-cce">\+\-</span>]?<span class="pl-cce">\d</span>+(?:<span class="pl-cce">\.\d</span>+)?(?:[ef][<span class="pl-cce">\+\-</span>]?<span class="pl-cce">\d</span>+)?<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>big<span class="pl-cce">\"</span><span class="pl-v">$x</span><span class="pl-cce">\"</span><span class="pl-pds">"</span></span>))
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(Big_parse, 
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>BigJulia&gt; <span class="pl-pds">"</span></span>,
                prompt_color <span class="pl-k">=</span> <span class="pl-c1">:red</span>, 
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>&gt;<span class="pl-pds">'</span></span>, 
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Big-Mode<span class="pl-pds">"</span></span>)
REPL mode Big<span class="pl-k">-</span>Mode initialized. Press <span class="pl-k">&gt;</span> to enter and backspace to exit.</pre></div>
<p>Now press <code>&gt;</code> at the repl to enter <code>Big-Mode</code></p>
<div class="highlight highlight-source-julia"><pre>BigJulia<span class="pl-k">&gt;</span>  <span class="pl-c1">factorial</span>(<span class="pl-c1">100</span>)
<span class="pl-c1">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span>

BigJulia<span class="pl-k">&gt;</span>  <span class="pl-c1">factorial</span>(<span class="pl-c1">100.0</span>)
<span class="pl-c1">9.332621544394415268169923885626670049071596826438162146859296389521759999323012e+157</span>

BigJulia<span class="pl-k">&gt;</span>  <span class="pl-c1">factorial</span>(<span class="pl-c1">100.0</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">8.709782489089480079416590161944485865569720643940840134215932536243379996346655e+315</span></pre></div>
<p></p>
</details>
<h2><a id="user-content-example-4-lisp-mode" class="anchor" aria-hidden="true" href="#example-4-lisp-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example 4: Lisp Mode</h2>
<details>
 
<p>
</p><p>The package <a href="https://github.com/swadey/LispSyntax.jl">LispSyntax.jl</a> provides a string macro for
parsing lisp-style code into julia code which is then evaluated, essentially creating a lispy langauge
embedded in julia.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">lisp</span>"</span>(defn fib [a] (if (&lt; a 2) a (+ (fib (- a 1)) (fib (- a 2)))))<span class="pl-pds">"</span></span>
fib (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">lisp</span>"</span>(fib 30)<span class="pl-pds">"</span></span>
<span class="pl-c1">832040</span></pre></div>
<p>Awesome! To make this really feel like it's own language, it'd be nice if it had a special REPL mode, so
let's make one. For this, we're going need a helper function <code>valid_sexpr</code> to tell ReplMaker if we pressed
<code>return</code> because we were done writing our input or if we wanted to write a multi-line S-expression</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LispSyntax, ReplMaker
<span class="pl-k">using</span> REPL<span class="pl-k">:</span> REPL, LineEdit; <span class="pl-k">using</span> LispSyntax<span class="pl-k">:</span> ParserCombinator

lisp_parser <span class="pl-k">=</span> LispSyntax<span class="pl-k">.</span>lisp_eval_helper

<span class="pl-k">function</span> <span class="pl-en">valid_sexpr</span>(s)
  <span class="pl-k">try</span>
    LispSyntax<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(<span class="pl-c1">copy</span>(LineEdit<span class="pl-k">.</span><span class="pl-c1">buffer</span>(s)))))
    <span class="pl-c1">true</span>
  <span class="pl-k">catch</span> err
    <span class="pl-c1">isa</span>(err, ParserCombinator<span class="pl-k">.</span>ParserException) <span class="pl-k">||</span> <span class="pl-c1">rethrow</span>(err)
    <span class="pl-c1">false</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Great, now we can create our repl mode using the function <code>LispSyntax.lisp_eval_helper</code>
to parse input text and we'll use <code>valid_sexpr</code> as our <code>valid_input_checker</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(LispSyntax<span class="pl-k">.</span>lisp_eval_helper,
                valid_input_checker<span class="pl-k">=</span>valid_sexpr,
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>λ&gt; <span class="pl-pds">"</span></span>,
                prompt_color<span class="pl-k">=</span><span class="pl-c1">:red</span>,
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>,
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Lisp Mode<span class="pl-pds">"</span></span>)
REPL mode Lisp Mode initialized. Press ) to enter and backspace to exit.

λ<span class="pl-k">&gt;</span> (defn fib [a] 
    (<span class="pl-k">if</span> (<span class="pl-k">&lt;</span> a <span class="pl-c1">2</span>) 
      a 
      (<span class="pl-k">+</span> (fib (<span class="pl-k">-</span> a <span class="pl-c1">1</span>)) (fib (<span class="pl-k">-</span> a <span class="pl-c1">2</span>)))))
fib (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

λ<span class="pl-k">&gt;</span> (fib <span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p>Tada!</p>
<p></p>
</details>
<h1><a id="user-content-packages-using-replmakerjl" class="anchor" aria-hidden="true" href="#packages-using-replmakerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Packages using ReplMaker.jl</h1>
<ul>
<li><a href="https://github.com/EconometricsBySimulation/AbstractLogic.jl">AbstractLogic.jl</a>: A package for logic programming in julia.</li>
<li><a href="https://github.com/thautwarm/JML.jl">JML.jl</a>:  A dialect of the <a href="https://en.wikipedia.org/wiki/ML_(programming_language)" rel="nofollow">ML programming language</a> family embedded in julia.</li>
<li><a href="https://github.com/shashi/APL.jl">APL.jl</a>: A small implementation of <a href="https://en.wikipedia.org/wiki/APL_(programming_language)" rel="nofollow">APL</a> in julia.</li>
<li><a href="https://github.com/bcbi/GitCommand.jl">GitCommand.jl</a>: uses ReplMaker.jl to provide a Git REPL mode</li>
</ul>
</article></div>