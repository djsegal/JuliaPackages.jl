<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a href="https://travis-ci.org/MasonProtter/ReplMaker.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99cd728907fc10b12a969e21bdaa3fd57fc6145b85d20daae4ab90521da5fd8c/68747470733a2f2f7472617669732d63692e6f72672f4d61736f6e50726f747465722f5265706c4d616b65722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MasonProtter/ReplMaker.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-replmaker" class="anchor" aria-hidden="true" href="#replmaker"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>REPLMaker</h1>
<p>The idea behind ReplMaker.jl is to make a tool for building (domain specific) languages in julia.</p>
<p>Suppose you've invented some language called MyLang and you've implemented a parser that turns MyLang code into julia code which is then supposed to be executed by the julia runtime. With ReplMaker.jl, you can simply hook your parser into the package and ReplMaker will then create a REPL mode where end users just type MyLang code and have it be executed automatically.</p>
<p>My hope is for this to be useful to someone who implements a full language or DSL in Julia that uses syntax not supported by Julia's parser and doesn't want to deal with the headache of making their own REPL mode.</p>
<p>To download ReplMaker, simply do</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add ReplMaker
"><pre><code>pkg&gt; add ReplMaker
</code></pre></div>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<h2><a id="user-content-example-1-expr-mode" class="anchor" aria-hidden="true" href="#example-1-expr-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 1: Expr Mode</h2>
<details>
 
<p>
</p><p>Suppose we want to make a very simple REPL mode which just takes whatever input we provide and returns its
quoted <code>Expr</code> form. We first make a parsing function,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using ReplMaker

julia&gt; function parse_to_expr(s)
           quote Meta.parse($s) end
       end
test_parser (generic function with 1 method)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ReplMaker

julia<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">parse_to_expr</span>(s)
           <span class="pl-k">quote</span> Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-k">$</span>s) <span class="pl-k">end</span>
       <span class="pl-k">end</span>
test_parser (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)</pre></div>
<p>Now, we can simply provide that parser to the <code>initrepl</code> function</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; initrepl(parse_to_expr, 
                prompt_text=&quot;Expr&gt; &quot;,
                prompt_color = :blue, 
                start_key=')', 
                mode_name=&quot;Expr_mode&quot;)
REPL mode Expr_mode initialized. Press ) to enter and backspace to exit.
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(parse_to_expr, 
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr&gt; <span class="pl-pds">"</span></span>,
                prompt_color <span class="pl-k">=</span> <span class="pl-c1">:blue</span>, 
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>, 
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr_mode<span class="pl-pds">"</span></span>)
REPL mode Expr_mode initialized. Press ) to enter and backspace to exit.</pre></div>
<p>As instructed, we simply press the <code>)</code> key and the <code>julia&gt;</code> prompt is replaced</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Expr&gt;  
"><pre><code>Expr&gt;  
</code></pre></div>
<p>and as desired, we now can enter Julia code and be shown its quoted version.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Expr&gt; 1 + 1
:(1 + 1)

Expr&gt; x ^ 2 + 5
:(x ^ 2 + 5)
"><pre><code>Expr&gt; 1 + 1
:(1 + 1)

Expr&gt; x ^ 2 + 5
:(x ^ 2 + 5)
</code></pre></div>
<p>Next, we might notice that if we try to do a multiline expression, the REPL mode craps out on us:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Expr&gt; function f(x)
:($(Expr(:incomplete, &quot;incomplete: premature end of input&quot;)))
"><pre>Expr<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
:(<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:incomplete</span>, <span class="pl-s"><span class="pl-pds">"</span>incomplete: premature end of input<span class="pl-pds">"</span></span>)))</pre></div>
<p>This is because we haven't told our REPL mode what constitues a valid, complete line. ReplMaker.jl exports a function <code>complete_julia</code> that will tell you if a given expression is a complete julia-expression. If you are using ReplMaker.jl for a DSL that has different parsing semantics from julia, you may need to roll your own analogous function if you want to have multi-line inputs.</p>
<p>To use <code>complete_julia</code> to check if an expression is complete, we just pass it as a keyword argument to to <code>initrepl</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; initrepl(parse_to_expr,
                prompt_text=&quot;Expr&gt; &quot;,
                prompt_color = :blue,
                start_key=')',
                mode_name=&quot;Expr_mode&quot;,
                valid_input_checker=complete_julia)
┌ Warning: REPL key ')' overwritten.
└ @ ReplMaker ~/.julia/packages/ReplMaker/pwo5w/src/ReplMaker.jl:86
REPL mode Expr_mode initialized. Press ) to enter and backspace to exit.

Expr&gt; function f(x)
          x + 1
      end
:(function f(x)
      #= none:2 =#
      x + 1
  end)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(parse_to_expr,
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr&gt; <span class="pl-pds">"</span></span>,
                prompt_color <span class="pl-k">=</span> <span class="pl-c1">:blue</span>,
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>,
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Expr_mode<span class="pl-pds">"</span></span>,
                valid_input_checker<span class="pl-k">=</span>complete_julia)
┌ Warning<span class="pl-k">:</span> REPL key <span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span> overwritten.
└ @ ReplMaker <span class="pl-k">~</span><span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>ReplMaker<span class="pl-k">/</span>pwo5w<span class="pl-k">/</span>src<span class="pl-k">/</span>ReplMaker<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">86</span>
REPL mode Expr_mode initialized. Press ) to enter and backspace to exit.

Expr<span class="pl-k">&gt;</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
          x <span class="pl-k">+</span> <span class="pl-c1">1</span>
      <span class="pl-k">end</span>
:(<span class="pl-k">function</span> <span class="pl-en">f</span>(x)
      <span class="pl-c"><span class="pl-c">#=</span> none:2 <span class="pl-c">=#</span></span>
      x <span class="pl-k">+</span> <span class="pl-c1">1</span>
  <span class="pl-k">end</span>)</pre></div>
<p></p>
</details>
<h2><a id="user-content-example-2-reverse-mode" class="anchor" aria-hidden="true" href="#example-2-reverse-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 2: Reverse Mode</h2>
<details>
 
<p>
</p><p>This is an example of using a custom REPL mode to not change the meaning of the input code but instead of how results are shown. Suppose we have our own <code>show</code>-like function which is just <code>Base.show</code>, but will print <code>Vector</code>s and <code>Tuple</code>s backwards</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="backwards_show(io, M, x) = (show(io, M, x); println(io))
backwards_show(io, M, v::Union{Vector, Tuple}) = (show(io, M, reverse(v)); println(io))
"><pre><span class="pl-en">backwards_show</span>(io, M, x) <span class="pl-k">=</span> (<span class="pl-c1">show</span>(io, M, x); <span class="pl-c1">println</span>(io))
<span class="pl-en">backwards_show</span>(io, M, v<span class="pl-k">::</span><span class="pl-c1">Union{Vector, Tuple}</span>) <span class="pl-k">=</span> (<span class="pl-c1">show</span>(io, M, <span class="pl-c1">reverse</span>(v)); <span class="pl-c1">println</span>(io))</pre></div>
<p>We can make a quick and dirty REPL mode that uses this rather than <code>Base.show</code> directly:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; initrepl(Meta.parse,
                show_function = backwards_show,
                prompt_text = &quot;reverse_julia&gt; &quot;,
                start_key = ')',
                mode_name = &quot;reverse mode&quot;)
REPL mode reverse mode initialized. Press ) to enter and backspace to exit.

reverse_julia&gt; x = [1, 2, 3, 4]
4-element Array{Int64,1}:
 4
 3
 2
 1
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(Meta<span class="pl-k">.</span>parse,
                show_function <span class="pl-k">=</span> backwards_show,
                prompt_text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>reverse_julia&gt; <span class="pl-pds">"</span></span>,
                start_key <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>,
                mode_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>reverse mode<span class="pl-pds">"</span></span>)
REPL mode reverse mode initialized. Press ) to enter and backspace to exit.

reverse_julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">1</span></pre></div>
<p>The printing was reversed, but we can check to make sure the variable itself was not:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia&gt; x
4-element Array{Int64,1}:
 1
 2
 3
 4
"><pre><code>julia&gt; x
4-element Array{Int64,1}:
 1
 2
 3
 4
</code></pre></div>
<p></p>
</details>
<h2><a id="user-content-example-3-big-mode" class="anchor" aria-hidden="true" href="#example-3-big-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 3: Big Mode</h2>
<details>
 
<p>
</p><p>For performance reasons, Julia defaults to 64 bit precision but sometimes you don't care about speed and you don't
want to juggle the limitations of 64 bit precision in your head. You could just start wrapping every number in your
code with <code>big</code> but that sounds like something the REPL should be able to do for you. Fortunately, it is!</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ReplMaker 

function Big_parse(str)
    Meta.parse(replace(str, r&quot;[\+\-]?\d+(?:\.\d+)?(?:[ef][\+\-]?\d+)?&quot; =&gt; x -&gt; &quot;big\&quot;$x\&quot;&quot;))
end

julia&gt; initrepl(Big_parse, 
                prompt_text=&quot;BigJulia&gt; &quot;,
                prompt_color = :red, 
                start_key='&gt;', 
                mode_name=&quot;Big-Mode&quot;)
REPL mode Big-Mode initialized. Press &gt; to enter and backspace to exit.
"><pre><span class="pl-k">using</span> ReplMaker 

<span class="pl-k">function</span> <span class="pl-en">Big_parse</span>(str)
    Meta<span class="pl-k">.</span><span class="pl-c1">parse</span>(<span class="pl-c1">replace</span>(str, <span class="pl-sr"><span class="pl-pds">r"</span>[<span class="pl-cce">\+\-</span>]?<span class="pl-cce">\d</span>+(?:<span class="pl-cce">\.\d</span>+)?(?:[ef][<span class="pl-cce">\+\-</span>]?<span class="pl-cce">\d</span>+)?<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> x <span class="pl-k">-&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>big<span class="pl-cce">\"</span><span class="pl-v">$x</span><span class="pl-cce">\"</span><span class="pl-pds">"</span></span>))
<span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(Big_parse, 
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>BigJulia&gt; <span class="pl-pds">"</span></span>,
                prompt_color <span class="pl-k">=</span> <span class="pl-c1">:red</span>, 
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>&gt;<span class="pl-pds">'</span></span>, 
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Big-Mode<span class="pl-pds">"</span></span>)
REPL mode Big<span class="pl-k">-</span>Mode initialized. Press <span class="pl-k">&gt;</span> to enter and backspace to exit.</pre></div>
<p>Now press <code>&gt;</code> at the repl to enter <code>Big-Mode</code></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="BigJulia&gt;  factorial(100)
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

BigJulia&gt;  factorial(100.0)
9.332621544394415268169923885626670049071596826438162146859296389521759999323012e+157

BigJulia&gt;  factorial(100.0)^2
8.709782489089480079416590161944485865569720643940840134215932536243379996346655e+315
"><pre>BigJulia<span class="pl-k">&gt;</span>  <span class="pl-c1">factorial</span>(<span class="pl-c1">100</span>)
<span class="pl-c1">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span>

BigJulia<span class="pl-k">&gt;</span>  <span class="pl-c1">factorial</span>(<span class="pl-c1">100.0</span>)
<span class="pl-c1">9.332621544394415268169923885626670049071596826438162146859296389521759999323012e+157</span>

BigJulia<span class="pl-k">&gt;</span>  <span class="pl-c1">factorial</span>(<span class="pl-c1">100.0</span>)<span class="pl-k">^</span><span class="pl-c1">2</span>
<span class="pl-c1">8.709782489089480079416590161944485865569720643940840134215932536243379996346655e+315</span></pre></div>
<p></p>
</details>
<h2><a id="user-content-example-4-lisp-mode" class="anchor" aria-hidden="true" href="#example-4-lisp-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example 4: Lisp Mode</h2>
<details>
 
<p>
</p><p>The package <a href="https://github.com/swadey/LispSyntax.jl">LispSyntax.jl</a> provides a string macro for
parsing lisp-style code into julia code which is then evaluated, essentially creating a lispy language
embedded in julia.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; lisp&quot;(defn fib [a] (if (&lt; a 2) a (+ (fib (- a 1)) (fib (- a 2)))))&quot;
fib (generic function with 1 method)

julia&gt; lisp&quot;(fib 30)&quot;
832040
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">lisp</span>"</span>(defn fib [a] (if (&lt; a 2) a (+ (fib (- a 1)) (fib (- a 2)))))<span class="pl-pds">"</span></span>
fib (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-s"><span class="pl-pds"><span class="pl-c1">lisp</span>"</span>(fib 30)<span class="pl-pds">"</span></span>
<span class="pl-c1">832040</span></pre></div>
<p>Awesome! To make this really feel like its own language, it'd be nice if it had a special REPL mode, so
let's make one. For this, we're going need a helper function <code>valid_sexpr</code> to tell ReplMaker if we pressed
<code>return</code> because we were done writing our input or if we wanted to write a multi-line S-expression.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LispSyntax, ReplMaker
using REPL: REPL, LineEdit; using LispSyntax: ParserCombinator

lisp_parser = LispSyntax.lisp_eval_helper

function valid_sexpr(s)
  try
    LispSyntax.read(String(take!(copy(LineEdit.buffer(s)))))
    true
  catch err
    isa(err, ParserCombinator.ParserException) || rethrow(err)
    false
  end
end
"><pre><span class="pl-k">using</span> LispSyntax, ReplMaker
<span class="pl-k">using</span> REPL<span class="pl-k">:</span> REPL, LineEdit; <span class="pl-k">using</span> LispSyntax<span class="pl-k">:</span> ParserCombinator

lisp_parser <span class="pl-k">=</span> LispSyntax<span class="pl-k">.</span>lisp_eval_helper

<span class="pl-k">function</span> <span class="pl-en">valid_sexpr</span>(s)
  <span class="pl-k">try</span>
    LispSyntax<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-c1">String</span>(<span class="pl-c1">take!</span>(<span class="pl-c1">copy</span>(LineEdit<span class="pl-k">.</span><span class="pl-c1">buffer</span>(s)))))
    <span class="pl-c1">true</span>
  <span class="pl-k">catch</span> err
    <span class="pl-c1">isa</span>(err, ParserCombinator<span class="pl-k">.</span>ParserException) <span class="pl-k">||</span> <span class="pl-c1">rethrow</span>(err)
    <span class="pl-c1">false</span>
  <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Great, now we can create our repl mode using the function <code>LispSyntax.lisp_eval_helper</code>
to parse input text and we'll use <code>valid_sexpr</code> as our <code>valid_input_checker</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
julia&gt; initrepl(LispSyntax.lisp_eval_helper,
                valid_input_checker=valid_sexpr,
                prompt_text=&quot;λ&gt; &quot;,
                prompt_color=:red,
                start_key=&quot;)&quot;,
                mode_name=&quot;Lisp Mode&quot;)
REPL mode Lisp Mode initialized. Press ) to enter and backspace to exit.

λ&gt; (defn fib [a] 
    (if (&lt; a 2) 
      a 
      (+ (fib (- a 1)) (fib (- a 2)))))
fib (generic function with 1 method)

λ&gt; (fib 10)
55
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">initrepl</span>(LispSyntax<span class="pl-k">.</span>lisp_eval_helper,
                valid_input_checker<span class="pl-k">=</span>valid_sexpr,
                prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>λ&gt; <span class="pl-pds">"</span></span>,
                prompt_color<span class="pl-k">=</span><span class="pl-c1">:red</span>,
                start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>,
                mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Lisp Mode<span class="pl-pds">"</span></span>)
REPL mode Lisp Mode initialized. Press ) to enter and backspace to exit.

λ<span class="pl-k">&gt;</span> (defn fib [a] 
    (<span class="pl-k">if</span> (<span class="pl-k">&lt;</span> a <span class="pl-c1">2</span>) 
      a 
      (<span class="pl-k">+</span> (fib (<span class="pl-k">-</span> a <span class="pl-c1">1</span>)) (fib (<span class="pl-k">-</span> a <span class="pl-c1">2</span>)))))
fib (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

λ<span class="pl-k">&gt;</span> (fib <span class="pl-c1">10</span>)
<span class="pl-c1">55</span></pre></div>
<p>Tada!</p>
<p></p>
</details>
<h1><a id="user-content-creating-a-repl-mode-at-startup-time" class="anchor" aria-hidden="true" href="#creating-a-repl-mode-at-startup-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating a REPL mode at startup time</h1>
<p>To add a custom REPL mode whenever Julia starts, add to <code>~/.julia/config/startup.jl</code> code like:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="atreplinit() do repl
    try
        @eval using ReplMaker
        @async initrepl(
            apropos;
            prompt_text=&quot;search&gt; &quot;,
            prompt_color=:magenta,
            start_key=')',
            mode_name=&quot;search_mode&quot;
        )
        catch
        end
    end
end
"><pre><span class="pl-c1">atreplinit</span>() <span class="pl-k">do</span> repl
    <span class="pl-k">try</span>
        <span class="pl-c1">@eval</span> <span class="pl-k">using</span> ReplMaker
        <span class="pl-c1">@async</span> <span class="pl-c1">initrepl</span>(
            apropos;
            prompt_text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>search&gt; <span class="pl-pds">"</span></span>,
            prompt_color<span class="pl-k">=</span><span class="pl-c1">:magenta</span>,
            start_key<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>)<span class="pl-pds">'</span></span>,
            mode_name<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>search_mode<span class="pl-pds">"</span></span>
        )
        <span class="pl-k">catch</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h1><a id="user-content-packages-using-replmakerjl" class="anchor" aria-hidden="true" href="#packages-using-replmakerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Packages using ReplMaker.jl</h1>
<ul>
<li><a href="https://github.com/EconometricsBySimulation/AbstractLogic.jl">AbstractLogic.jl</a>: A package for logic programming in julia.</li>
<li><a href="https://github.com/thautwarm/JML.jl">JML.jl</a>:  A dialect of the <a href="https://en.wikipedia.org/wiki/ML_(programming_language)" rel="nofollow">ML programming language</a> family embedded in julia.</li>
<li><a href="https://github.com/shashi/APL.jl">APL.jl</a>: A small implementation of <a href="https://en.wikipedia.org/wiki/APL_(programming_language)" rel="nofollow">APL</a> in julia.</li>
<li><a href="https://github.com/bcbi/GitCommand.jl">GitCommand.jl</a>: uses ReplMaker.jl to provide a Git REPL mode</li>
<li><a href="https://github.com/c42f/RemoteREPL.jl">RemoteREPL.jl</a>: Remotely share a REPL session with another user.</li>
</ul>
</article></div>