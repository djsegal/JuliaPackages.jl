<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-chemicalformula" class="anchor" aria-hidden="true" href="#chemicalformula"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ChemicalFormula</h1>
<p dir="auto">ChemicalFormula.jl is a package for the simple representation of chemical compounds as
formulas. The package aims to be a lightweight solution for handling various chemical
formulas while providing general information and formatting capabilities. It is strongly
inspired by the Python package <a href="https://github.com/molshape/ChemFormula">ChemFormula</a>.</p>
<p dir="auto">The focus of ChemicalFormula.jl is on the parsing capabilities. These include the handling
of Parantheses and coordinating molecules marked with "*". From these you can generate
generate formatted strings (text, Unicode and LaTeX) in various styles.</p>
<p dir="auto">In addition, ChemicalFormula.jl offers the calculation of formula weights and thus enables
further stochiometric calculations. The atomic weights correspond to the specifications of
the IUPAC Commission for Isotope abundances and atomic weights. The values are taken from
<a href="https://iupac.qmul.ac.uk/AtWt/" rel="nofollow">https://iupac.qmul.ac.uk/AtWt/</a>.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">ChemicalFormula can be installed using the package manager. Enter the Pkg REPL mode by
typing <code>]</code> in the REPL and run</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add ChemicalFormula"><pre class="notranslate"><code>pkg&gt; add ChemicalFormula
</code></pre></div>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using ChemicalFormula
julia&gt; water = Formula(&quot;H2O&quot;, &quot;water&quot;)
Formula(&quot;H2O&quot;, Dict{Symbol, Int32}(:H =&gt; 2, :O =&gt; 1), 0, &quot;water&quot;)
julia&gt; formulaweight(water)
18.015 g mol⁻¹
julia&gt; perfluorotrimesate = Formula(&quot;H3O6C6F3&quot;, -3)
Formula(&quot;H3O6C6F3&quot;, Dict{Symbol, Int32}(:F =&gt; 3, :H =&gt; 3, :O =&gt; 6, :C =&gt; 6), -3, nothing)
julia&gt; unicode(perfluorotrimesate, &quot;hill&quot;)
&quot;C₆H₃F₃O₆³⁻&quot;
julia&gt; ischarged(perfluorotrimesate)
true
julia&gt; cyanide = Formula(&quot;K4Fe(CN)6&quot;)
Formula(&quot;K4Fe(CN)6&quot;, Dict{Symbol, Int32}(:N =&gt; 6, :Fe =&gt; 1, :K =&gt; 4, :C =&gt; 6), 0, nothing)
julia&gt; latex(cyanide, &quot;sum&quot;)
&quot;\\ce{N6FeK4C6}&quot;
julia&gt; ischarged(cyanide)
false
julia&gt; uranyl = Formula(&quot;UO2F2*H2O&quot;)
Formula(&quot;UO2F2*H2O&quot;, Dict{Symbol, Int32}(:U =&gt; 1, :F =&gt; 2, :H =&gt; 2, :O =&gt; 3), 0, nothing)
julia&gt; isradioactive(uranyl)
true"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using ChemicalFormula
julia&gt; water = Formula("H2O", "water")
Formula("H2O", Dict{Symbol, Int32}(:H =&gt; 2, :O =&gt; 1), 0, "water")
julia&gt; formulaweight(water)
18.015 g mol⁻¹
julia&gt; perfluorotrimesate = Formula("H3O6C6F3", -3)
Formula("H3O6C6F3", Dict{Symbol, Int32}(:F =&gt; 3, :H =&gt; 3, :O =&gt; 6, :C =&gt; 6), -3, nothing)
julia&gt; unicode(perfluorotrimesate, "hill")
"C₆H₃F₃O₆³⁻"
julia&gt; ischarged(perfluorotrimesate)
true
julia&gt; cyanide = Formula("K4Fe(CN)6")
Formula("K4Fe(CN)6", Dict{Symbol, Int32}(:N =&gt; 6, :Fe =&gt; 1, :K =&gt; 4, :C =&gt; 6), 0, nothing)
julia&gt; latex(cyanide, "sum")
"\\ce{N6FeK4C6}"
julia&gt; ischarged(cyanide)
false
julia&gt; uranyl = Formula("UO2F2*H2O")
Formula("UO2F2*H2O", Dict{Symbol, Int32}(:U =&gt; 1, :F =&gt; 2, :H =&gt; 2, :O =&gt; 3), 0, nothing)
julia&gt; isradioactive(uranyl)
true
</code></pre></div>
</article></div>