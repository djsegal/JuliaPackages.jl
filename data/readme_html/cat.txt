<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-jl---cartesian-closed-categories" class="anchor" aria-hidden="true" href="#jl---cartesian-closed-categories"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><g-emoji class="g-emoji" alias="cat" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png">üê±</g-emoji>.jl - Cartesian Closed Categories</h1>
<p>Library for building composable DSLs with multiple interpretaions ala <a href="http://conal.net/papers/compiling-to-categories" rel="nofollow">Compiling To Categories</a>.</p>
<h2><a id="user-content-basic-concepts" class="anchor" aria-hidden="true" href="#basic-concepts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic concepts</h2>
<ol>
<li><code>@category</code> defines a new category, which is a collection of arrows - composable building blocks.  An <code>Arrow{A, B}</code> can always be composed with an <code>Arrow{B, C}</code> (in the same category) to form an <code>Arrow{A, C}</code>.</li>
<li><code>@arrow</code> defines a new "primitive" composable arrow with source/target types. <code>@alias</code> binds an arrow to a function for, e.g., re-using standard syntax.</li>
<li><code>@interpretation</code> defines an execution of an arrow, which automatically composes.</li>
<li><code>@functor A =&gt; B</code> defines a mapping between composable arrows of two categories</li>
</ol>
<h2><a id="user-content-mvp-checklist" class="anchor" aria-hidden="true" href="#mvp-checklist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MVP Checklist</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Basic Category definition</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Parametric arrow types</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Cartesian category constructions (products)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Closed category constructions (exponentials / higher-order arrows)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Intepretations (executable functors)</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox" checked=""> Covariant functors</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Contravariant (arrow-reversing) functors/interpretations</li>
<li class="task-list-item"><input type="checkbox" id="" disabled="" class="task-list-item-checkbox"> Compelling example utilizing all of the above :)</li>
</ul>
<h2><a id="user-content-toy-examples" class="anchor" aria-hidden="true" href="#toy-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Toy examples</h2>
<p>See the <code>example</code> folder in the repo.</p>
<p>Example (forward-mode autodiff, <code>example/autodiff.jl</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Cat

# &quot;Real&quot; numbers
const R = Float64

@category Smooth

# Basic algebra
@arrow Smooth Plus :: (R, R) --&gt; R
@arrow Smooth Mult :: (R, R) --&gt; R
@arrow Smooth Neg :: R --&gt; R
# Calc 1
@arrow Smooth Exp :: R --&gt; R
@arrow Smooth Sin :: R --&gt; R
@arrow Smooth Cos :: R --&gt; R

# Just an unbound input is equivalent to the identity morphism
Placeholder = Smooth.Identity{R}

@alias Smooth Plus Base.:+ 2
@alias Smooth Mult Base.:* 2
Base.:-(a::Smooth.Arrow) = Neg(a)

Base.exp(a::Smooth.Arrow) = Exp(a)
Base.sin(a::Smooth.Arrow) = Sin(a)
Base.cos(a::Smooth.Arrow) = Cos(a)

# Evaluate an expression tree
@interpretation Eval (=&gt;) Smooth

@interpret function (e::Eval)(m::Plus, a, b)
    a + b
end

@interpret function (e::Eval)(m::Mult, a, b)
    a * b
end

@interpret function (e::Eval)(m::Neg, a)
    -a
end

@interpret function (e::Eval)(m::Exp, a)
    exp(a)
end

@interpret function (e::Eval)(m::Sin, a)
    sin(a)
end

@interpret function (e::Eval)(m::Cos, a)
    cos(a)
end

# Functor is a map from arrow -&gt; arrow
# @functor defines a function Diff for all of the
# primitive arrows
@functor Diff :: Smooth =&gt; Smooth (T -&gt; Tuple{T, T})

function split_inputs(m::Smooth.Arrow)
    A = Diff(source(m))
    p = A.parameters
    tuple([Smooth.Proj{A, p[k]}(k) for k in 1:length(p)]...)
end

function Diff(m::Plus)
    a, b = split_inputs(m)
    Smooth.Product(a[1] + b[1],
            a[2] + b[2])
end

function Diff(m::Mult)
    a, b = split_inputs(m)
    Smooth.Product(a[1]*b[1],
            a[1]*b[2] + a[2]*b[1])
end

function Diff(m::Smooth.Constant)
    Smooth.Product(Smooth.Constant(m.val),
        Smooth.Constant(0.0))
end

function Diff(m::Exp)
    a, da = split_inputs(m)
    Smooth.Product(exp(a), da*exp(a))
end

function Diff(m::Sin)
    a, da = split_inputs(m)
    Smooth.Product(sin(a), da*cos(a))
end

function Diff(m::Cos)
    a, da = split_inputs(m)
    Smooth.Product(cos(a), -da*sin(a))
end

# Here is the actual &quot;user code&quot;
x = Placeholder()
y = sin(x) + 0.5*cos(x)
y = exp(y*y) + 2.0
dy = Diff(y)

println(Eval()(y, 0.0))
println(Eval()(dy, 0.0, 1.0))
"><pre><span class="pl-k">using</span> Cat

<span class="pl-c"><span class="pl-c">#</span> "Real" numbers</span>
<span class="pl-k">const</span> R <span class="pl-k">=</span> Float64

<span class="pl-c1">@category</span> Smooth

<span class="pl-c"><span class="pl-c">#</span> Basic algebra</span>
<span class="pl-c1">@arrow</span> Smooth Plus <span class="pl-k">::</span> <span class="pl-c1">(R, R)</span> <span class="pl-k">--&gt;</span> R
<span class="pl-c1">@arrow</span> Smooth Mult <span class="pl-k">::</span> <span class="pl-c1">(R, R)</span> <span class="pl-k">--&gt;</span> R
<span class="pl-c1">@arrow</span> Smooth Neg <span class="pl-k">::</span> <span class="pl-c1">R</span> <span class="pl-k">--&gt;</span> R
<span class="pl-c"><span class="pl-c">#</span> Calc 1</span>
<span class="pl-c1">@arrow</span> Smooth Exp <span class="pl-k">::</span> <span class="pl-c1">R</span> <span class="pl-k">--&gt;</span> R
<span class="pl-c1">@arrow</span> Smooth Sin <span class="pl-k">::</span> <span class="pl-c1">R</span> <span class="pl-k">--&gt;</span> R
<span class="pl-c1">@arrow</span> Smooth Cos <span class="pl-k">::</span> <span class="pl-c1">R</span> <span class="pl-k">--&gt;</span> R

<span class="pl-c"><span class="pl-c">#</span> Just an unbound input is equivalent to the identity morphism</span>
Placeholder <span class="pl-k">=</span> Smooth<span class="pl-k">.</span>Identity{R}

<span class="pl-c1">@alias</span> Smooth Plus Base.:<span class="pl-k">+</span> <span class="pl-c1">2</span>
<span class="pl-c1">@alias</span> Smooth Mult Base.:<span class="pl-k">*</span> <span class="pl-c1">2</span>
Base.:<span class="pl-k">-</span>(a<span class="pl-k">::</span><span class="pl-c1">Smooth.Arrow</span>) <span class="pl-k">=</span> <span class="pl-c1">Neg</span>(a)

Base<span class="pl-k">.</span><span class="pl-en">exp</span>(a<span class="pl-k">::</span><span class="pl-c1">Smooth.Arrow</span>) <span class="pl-k">=</span> <span class="pl-c1">Exp</span>(a)
Base<span class="pl-k">.</span><span class="pl-en">sin</span>(a<span class="pl-k">::</span><span class="pl-c1">Smooth.Arrow</span>) <span class="pl-k">=</span> <span class="pl-c1">Sin</span>(a)
Base<span class="pl-k">.</span><span class="pl-en">cos</span>(a<span class="pl-k">::</span><span class="pl-c1">Smooth.Arrow</span>) <span class="pl-k">=</span> <span class="pl-c1">Cos</span>(a)

<span class="pl-c"><span class="pl-c">#</span> Evaluate an expression tree</span>
<span class="pl-c1">@interpretation</span> Eval (<span class="pl-k">=&gt;</span>) Smooth

<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (e<span class="pl-k">::</span><span class="pl-c1">Eval</span>)(m<span class="pl-k">::</span><span class="pl-c1">Plus</span>, a, b)
    a <span class="pl-k">+</span> b
<span class="pl-k">end</span>

<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (e<span class="pl-k">::</span><span class="pl-c1">Eval</span>)(m<span class="pl-k">::</span><span class="pl-c1">Mult</span>, a, b)
    a <span class="pl-k">*</span> b
<span class="pl-k">end</span>

<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (e<span class="pl-k">::</span><span class="pl-c1">Eval</span>)(m<span class="pl-k">::</span><span class="pl-c1">Neg</span>, a)
    <span class="pl-k">-</span>a
<span class="pl-k">end</span>

<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (e<span class="pl-k">::</span><span class="pl-c1">Eval</span>)(m<span class="pl-k">::</span><span class="pl-c1">Exp</span>, a)
    <span class="pl-c1">exp</span>(a)
<span class="pl-k">end</span>

<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (e<span class="pl-k">::</span><span class="pl-c1">Eval</span>)(m<span class="pl-k">::</span><span class="pl-c1">Sin</span>, a)
    <span class="pl-c1">sin</span>(a)
<span class="pl-k">end</span>

<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (e<span class="pl-k">::</span><span class="pl-c1">Eval</span>)(m<span class="pl-k">::</span><span class="pl-c1">Cos</span>, a)
    <span class="pl-c1">cos</span>(a)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Functor is a map from arrow -&gt; arrow</span>
<span class="pl-c"><span class="pl-c">#</span> @functor defines a function Diff for all of the</span>
<span class="pl-c"><span class="pl-c">#</span> primitive arrows</span>
<span class="pl-c1">@functor</span> Diff <span class="pl-k">::</span> <span class="pl-c1">Smooth</span> <span class="pl-k">=&gt;</span> Smooth (T <span class="pl-k">-&gt;</span> Tuple{T, T})

<span class="pl-k">function</span> <span class="pl-en">split_inputs</span>(m<span class="pl-k">::</span><span class="pl-c1">Smooth.Arrow</span>)
    A <span class="pl-k">=</span> <span class="pl-c1">Diff</span>(<span class="pl-c1">source</span>(m))
    p <span class="pl-k">=</span> A<span class="pl-k">.</span>parameters
    <span class="pl-c1">tuple</span>([Smooth<span class="pl-k">.</span><span class="pl-c1">Proj</span><span class="pl-c1">{A, p[k]}</span>(k) <span class="pl-k">for</span> k <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(p)]<span class="pl-k">.</span><span class="pl-k">..</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Diff</span>(m<span class="pl-k">::</span><span class="pl-c1">Plus</span>)
    a, b <span class="pl-k">=</span> <span class="pl-c1">split_inputs</span>(m)
    Smooth<span class="pl-k">.</span><span class="pl-c1">Product</span>(a[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b[<span class="pl-c1">1</span>],
            a[<span class="pl-c1">2</span>] <span class="pl-k">+</span> b[<span class="pl-c1">2</span>])
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Diff</span>(m<span class="pl-k">::</span><span class="pl-c1">Mult</span>)
    a, b <span class="pl-k">=</span> <span class="pl-c1">split_inputs</span>(m)
    Smooth<span class="pl-k">.</span><span class="pl-c1">Product</span>(a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>],
            a[<span class="pl-c1">1</span>]<span class="pl-k">*</span>b[<span class="pl-c1">2</span>] <span class="pl-k">+</span> a[<span class="pl-c1">2</span>]<span class="pl-k">*</span>b[<span class="pl-c1">1</span>])
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Diff</span>(m<span class="pl-k">::</span><span class="pl-c1">Smooth.Constant</span>)
    Smooth<span class="pl-k">.</span><span class="pl-c1">Product</span>(Smooth<span class="pl-k">.</span><span class="pl-c1">Constant</span>(m<span class="pl-k">.</span>val),
        Smooth<span class="pl-k">.</span><span class="pl-c1">Constant</span>(<span class="pl-c1">0.0</span>))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Diff</span>(m<span class="pl-k">::</span><span class="pl-c1">Exp</span>)
    a, da <span class="pl-k">=</span> <span class="pl-c1">split_inputs</span>(m)
    Smooth<span class="pl-k">.</span><span class="pl-c1">Product</span>(<span class="pl-c1">exp</span>(a), da<span class="pl-k">*</span><span class="pl-c1">exp</span>(a))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Diff</span>(m<span class="pl-k">::</span><span class="pl-c1">Sin</span>)
    a, da <span class="pl-k">=</span> <span class="pl-c1">split_inputs</span>(m)
    Smooth<span class="pl-k">.</span><span class="pl-c1">Product</span>(<span class="pl-c1">sin</span>(a), da<span class="pl-k">*</span><span class="pl-c1">cos</span>(a))
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">Diff</span>(m<span class="pl-k">::</span><span class="pl-c1">Cos</span>)
    a, da <span class="pl-k">=</span> <span class="pl-c1">split_inputs</span>(m)
    Smooth<span class="pl-k">.</span><span class="pl-c1">Product</span>(<span class="pl-c1">cos</span>(a), <span class="pl-k">-</span>da<span class="pl-k">*</span><span class="pl-c1">sin</span>(a))
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Here is the actual "user code"</span>
x <span class="pl-k">=</span> <span class="pl-c1">Placeholder</span>()
y <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x) <span class="pl-k">+</span> <span class="pl-c1">0.5</span><span class="pl-k">*</span><span class="pl-c1">cos</span>(x)
y <span class="pl-k">=</span> <span class="pl-c1">exp</span>(y<span class="pl-k">*</span>y) <span class="pl-k">+</span> <span class="pl-c1">2.0</span>
dy <span class="pl-k">=</span> <span class="pl-c1">Diff</span>(y)

<span class="pl-c1">println</span>(<span class="pl-c1">Eval</span>()(y, <span class="pl-c1">0.0</span>))
<span class="pl-c1">println</span>(<span class="pl-c1">Eval</span>()(dy, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>))</pre></div>
<p>Example (probabilistic modeling, <code>example/microppl.jl</code>):</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Cat
using Random

# New category of probabilistic models
@category Model

# Model types are arrows in the category; the types dictate how they compose
@arrow Model Normal :: (Float64, Float64) --&gt; Float64
@arrow Model Uniform :: Nothing --&gt; Float64

&quot;Builds a simple heirarchical model&quot;
function build_model()
    z = Normal(1.0, Uniform())
    y = Normal(z, 2.0)
    x = Normal(z, y)
    x # x is a Model arrow from Nothing --&gt; Float64
end

# An interpretation (aka &quot;representable functor&quot;) is specified
# with @interpretation and can optionally include internal state
# definitions
@interpretation Sample (=&gt;) Model begin
    rng::AbstractRNG
    N::Int64
    samples::Dict{Model.Arrow, Any}
    Sample(N) = new(Random.GLOBAL_RNG, N, Dict())
end

# Hook for common state update rules; called when @interpret is used.
# In this case, we need to memoize samples to achieve correct semantics.
function interp_state_hook(s::Sample, m::Model.Arrow, value_expr)
  if !haskey(s.samples, m)
      s.samples[m] = value_expr()
  end
  s.samples[m]
end

&quot;Sample from a normal&quot;
@interpret function (s::Sample)(m::Normal, Œº, œÉ)
    Œº .+ œÉ.*randn(s.rng, s.N)
end

&quot;Sample from a uniform&quot;
@interpret function (s::Sample)(m::Uniform, _)
    rand(s.rng, s.N)
end

test_model = build_model()

samples = Sample(5000)(test_model, nothing)

# summarize the samples
Œº = sum(samples)/length(samples)
œÉ = sqrt( sum( (samples .- Œº).^2 ) / length(samples) )

println(&quot;Sample stats [Œº/œÉ]: $Œº, $œÉ&quot;)
"><pre><span class="pl-k">using</span> Cat
<span class="pl-k">using</span> Random

<span class="pl-c"><span class="pl-c">#</span> New category of probabilistic models</span>
<span class="pl-c1">@category</span> Model

<span class="pl-c"><span class="pl-c">#</span> Model types are arrows in the category; the types dictate how they compose</span>
<span class="pl-c1">@arrow</span> Model Normal <span class="pl-k">::</span> <span class="pl-c1">(Float64, Float64)</span> <span class="pl-k">--&gt;</span> Float64
<span class="pl-c1">@arrow</span> Model Uniform <span class="pl-k">::</span> <span class="pl-c1">Nothing</span> <span class="pl-k">--&gt;</span> Float64

<span class="pl-s"><span class="pl-pds">"</span>Builds a simple heirarchical model<span class="pl-pds">"</span></span>
<span class="pl-k">function</span> <span class="pl-en">build_model</span>()
    z <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">Uniform</span>())
    y <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(z, <span class="pl-c1">2.0</span>)
    x <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(z, y)
    x <span class="pl-c"><span class="pl-c">#</span> x is a Model arrow from Nothing --&gt; Float64</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> An interpretation (aka "representable functor") is specified</span>
<span class="pl-c"><span class="pl-c">#</span> with @interpretation and can optionally include internal state</span>
<span class="pl-c"><span class="pl-c">#</span> definitions</span>
<span class="pl-c1">@interpretation</span> Sample (<span class="pl-k">=&gt;</span>) Model <span class="pl-k">begin</span>
    rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>
    N<span class="pl-k">::</span><span class="pl-c1">Int64</span>
    samples<span class="pl-k">::</span><span class="pl-c1">Dict{Model.Arrow, Any}</span>
    <span class="pl-en">Sample</span>(N) <span class="pl-k">=</span> <span class="pl-c1">new</span>(Random<span class="pl-k">.</span>GLOBAL_RNG, N, <span class="pl-c1">Dict</span>())
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Hook for common state update rules; called when @interpret is used.</span>
<span class="pl-c"><span class="pl-c">#</span> In this case, we need to memoize samples to achieve correct semantics.</span>
<span class="pl-k">function</span> <span class="pl-en">interp_state_hook</span>(s<span class="pl-k">::</span><span class="pl-c1">Sample</span>, m<span class="pl-k">::</span><span class="pl-c1">Model.Arrow</span>, value_expr)
  <span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">haskey</span>(s<span class="pl-k">.</span>samples, m)
      s<span class="pl-k">.</span>samples[m] <span class="pl-k">=</span> <span class="pl-c1">value_expr</span>()
  <span class="pl-k">end</span>
  s<span class="pl-k">.</span>samples[m]
<span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"</span>Sample from a normal<span class="pl-pds">"</span></span>
<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (s<span class="pl-k">::</span><span class="pl-c1">Sample</span>)(m<span class="pl-k">::</span><span class="pl-c1">Normal</span>, Œº, œÉ)
    Œº <span class="pl-k">.+</span> œÉ<span class="pl-k">.*</span><span class="pl-c1">randn</span>(s<span class="pl-k">.</span>rng, s<span class="pl-k">.</span>N)
<span class="pl-k">end</span>

<span class="pl-s"><span class="pl-pds">"</span>Sample from a uniform<span class="pl-pds">"</span></span>
<span class="pl-c1">@interpret</span> <span class="pl-k">function</span> (s<span class="pl-k">::</span><span class="pl-c1">Sample</span>)(m<span class="pl-k">::</span><span class="pl-c1">Uniform</span>, _)
    <span class="pl-c1">rand</span>(s<span class="pl-k">.</span>rng, s<span class="pl-k">.</span>N)
<span class="pl-k">end</span>

test_model <span class="pl-k">=</span> <span class="pl-c1">build_model</span>()

samples <span class="pl-k">=</span> <span class="pl-c1">Sample</span>(<span class="pl-c1">5000</span>)(test_model, <span class="pl-c1">nothing</span>)

<span class="pl-c"><span class="pl-c">#</span> summarize the samples</span>
Œº <span class="pl-k">=</span> <span class="pl-c1">sum</span>(samples)<span class="pl-k">/</span><span class="pl-c1">length</span>(samples)
œÉ <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>( <span class="pl-c1">sum</span>( (samples <span class="pl-k">.-</span> Œº)<span class="pl-k">.^</span><span class="pl-c1">2</span> ) <span class="pl-k">/</span> <span class="pl-c1">length</span>(samples) )

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Sample stats [Œº/œÉ]: <span class="pl-v">$Œº</span>, <span class="pl-v">$œÉ</span><span class="pl-pds">"</span></span>)</pre></div>
</article></div>