<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-smoothingjl" class="anchor" aria-hidden="true" href="#smoothingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Smoothing.jl</h1>
<p dir="auto">A package to smooth time series data in Julia. <br>
Currently v1.0 only includes binomial smoothing.</p>
<p dir="auto">Takes a 1d data array and smooths the data with a 2Nₚ+1 binomial filter.
This is computed using the method outlined in :<br></p>
<p dir="auto"><em>Binomial smoothing filter: A way to avoid some pitfalls of least‐squares
polynomial smoothing</em> <br>
in Review of Scientific Instruments 54, 1034 (1983);
<a href="https://doi.org/10.1063/1.1137498" rel="nofollow">https://doi.org/10.1063/1.1137498</a> <br></p>
<p dir="auto">The filter preserves the values starting
and ending values of the initial data set.</p>
<h3 dir="auto"><a id="user-content-example-you-can-easily-manually-verify-my_datas-smoothing-is-correct" class="anchor" aria-hidden="true" href="#example-you-can-easily-manually-verify-my_datas-smoothing-is-correct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example (you can easily manually verify my_data's smoothing is correct.)</h3>
<p dir="auto">Usage:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Smoothing
julia&gt; my_data = [1.0, 2.0, 3.0, 4.0, 5.0]
julia&gt; Smoothing.binomial(my_data, 1)

5-element Vector{Float64}:
 1.0
 2.0
 3.0
 4.0
 5.0"><pre lang="julia-repl" class="notranslate"><code>julia&gt; using Smoothing
julia&gt; my_data = [1.0, 2.0, 3.0, 4.0, 5.0]
julia&gt; Smoothing.binomial(my_data, 1)

5-element Vector{Float64}:
 1.0
 2.0
 3.0
 4.0
 5.0
</code></pre></div>
</article></div>