<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-codecostsjl" class="anchor" aria-hidden="true" href="#codecostsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CodeCosts.jl</h1>
<p dir="auto"><a href="https://travis-ci.com/kimikage/CodeCosts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4e4f81a81c84274e2cf66596cd68317b6d6d86f62b8aa3ad29723774012cc210/68747470733a2f2f7472617669732d63692e636f6d2f6b696d696b6167652f436f6465436f7374732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/kimikage/CodeCosts.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/6c78a194c26d8978f95672f035046e78dd3ca0f4ff53d6f107097f58085e7494/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f432f436f6465436f7374732e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/C/CodeCosts.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/kimikage/CodeCosts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/795bf774e09b7f5485ea0cc1d81d760771c4df76eb46812701d0dd5b5d3be832/68747470733a2f2f636f6465636f762e696f2f67682f6b696d696b6167652f436f6465436f7374732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/kimikage/CodeCosts.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package provides a variant of <code>@code_typed</code> with <a href="https://docs.julialang.org/en/v1/devdocs/inference/#The-inlining-algorithm-(inline_worthy)-1" rel="nofollow">estimated costs for the
inlining</a>.
This helps find the factors which are preventing the SIMD vectorization.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using CodeCosts

julia&gt; f(x::T) where T = convert(T, max(x * 10.0, x / 3))
f (generic function with 1 method)

julia&gt; @code_costs f(1.0f0)
CodeCostsInfo(
     CodeInfo(
   1 1 ─ %1  = Base.fpext(Base.Float64, x)::Float64
   4 │   %2  = Base.mul_float(%1, 10.0)::Float64
  20 │   %3  = Base.div_float(x, 3.0f0)::Float32
   1 │   %4  = Base.fpext(Base.Float64, %3)::Float64
   2 │   %5  = Base.lt_float(%2, %4)::Bool
   1 │   %6  = Base.bitcast(Base.Int64, %4)::Int64
   1 │   %7  = Base.slt_int(%6, 0)::Bool
   1 │   %8  = Base.bitcast(Base.Int64, %2)::Int64
   1 │   %9  = Base.slt_int(%8, 0)::Bool
   0 │   %10 = Base.not_int(%7)::Bool
   1 │   %11 = Base.and_int(%9, %10)::Bool
   1 │   %12 = Base.or_int(%5, %11)::Bool
   2 │   %13 = Base.ne_float(%2, %2)::Bool
   1 │   %14 = Base.Math.ifelse(%13, %2, %4)::Float64
   2 │   %15 = Base.ne_float(%4, %4)::Bool
   1 │   %16 = Base.Math.ifelse(%15, %4, %2)::Float64
   1 │   %17 = Base.Math.ifelse(%12, %14, %16)::Float64
   1 │   %18 = Base.fptrunc(Base.Float32, %17)::Float32
   0 └──       return %18
     )
, CodeCostsSummary(
     zero:  2|
    cheap: 12| 111111111111
   middle: 10| 4===2=2=2=
expensive: 20| 20==================
    total: 42| 100 (default threshold)
))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CodeCosts

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">convert</span>(T, <span class="pl-c1">max</span>(x <span class="pl-k">*</span> <span class="pl-c1">10.0</span>, x <span class="pl-k">/</span> <span class="pl-c1">3</span>))
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_costs</span> <span class="pl-c1">f</span>(<span class="pl-c1">1.0f0</span>)
<span class="pl-c1">CodeCostsInfo</span>(
     <span class="pl-c1">CodeInfo</span>(
   <span class="pl-c1">1</span> <span class="pl-c1">1</span> ─ <span class="pl-k">%</span><span class="pl-c1">1</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">fpext</span>(Base<span class="pl-k">.</span>Float64, x)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">4</span> │   <span class="pl-k">%</span><span class="pl-c1">2</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">mul_float</span>(<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">10.0</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
  <span class="pl-c1">20</span> │   <span class="pl-k">%</span><span class="pl-c1">3</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">div_float</span>(x, <span class="pl-c1">3.0f0</span>)<span class="pl-k">::</span><span class="pl-c1">Float32</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">4</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">fpext</span>(Base<span class="pl-k">.</span>Float64, <span class="pl-k">%</span><span class="pl-c1">3</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">2</span> │   <span class="pl-k">%</span><span class="pl-c1">5</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">lt_float</span>(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">6</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">bitcast</span>(Base<span class="pl-k">.</span>Int64, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Int64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">7</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">slt_int</span>(<span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-c1">0</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">8</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">bitcast</span>(Base<span class="pl-k">.</span>Int64, <span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Int64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">9</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">slt_int</span>(<span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-c1">0</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">0</span> │   <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">not_int</span>(<span class="pl-k">%</span><span class="pl-c1">7</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">11</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">and_int</span>(<span class="pl-k">%</span><span class="pl-c1">9</span>, <span class="pl-k">%</span><span class="pl-c1">10</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">12</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">or_int</span>(<span class="pl-k">%</span><span class="pl-c1">5</span>, <span class="pl-k">%</span><span class="pl-c1">11</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">2</span> │   <span class="pl-k">%</span><span class="pl-c1">13</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">ne_float</span>(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">14</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span>Math<span class="pl-k">.</span><span class="pl-c1">ifelse</span>(<span class="pl-k">%</span><span class="pl-c1">13</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">2</span> │   <span class="pl-k">%</span><span class="pl-c1">15</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">ne_float</span>(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">16</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span>Math<span class="pl-k">.</span><span class="pl-c1">ifelse</span>(<span class="pl-k">%</span><span class="pl-c1">15</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">17</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span>Math<span class="pl-k">.</span><span class="pl-c1">ifelse</span>(<span class="pl-k">%</span><span class="pl-c1">12</span>, <span class="pl-k">%</span><span class="pl-c1">14</span>, <span class="pl-k">%</span><span class="pl-c1">16</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">18</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">fptrunc</span>(Base<span class="pl-k">.</span>Float32, <span class="pl-k">%</span><span class="pl-c1">17</span>)<span class="pl-k">::</span><span class="pl-c1">Float32</span>
   <span class="pl-c1">0</span> └──       <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">18</span>
     )
, <span class="pl-c1">CodeCostsSummary</span>(
     zero<span class="pl-k">:</span>  <span class="pl-c1">2</span><span class="pl-k">|</span>
    cheap<span class="pl-k">:</span> <span class="pl-c1">12</span><span class="pl-k">|</span> <span class="pl-c1">111111111111</span>
   middle<span class="pl-k">:</span> <span class="pl-c1">10</span><span class="pl-k">|</span> <span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-c1">2</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">=</span>
expensive<span class="pl-k">:</span> <span class="pl-c1">20</span><span class="pl-k">|</span> <span class="pl-c1">20</span><span class="pl-k">==================</span>
    total<span class="pl-k">:</span> <span class="pl-c1">42</span><span class="pl-k">|</span> <span class="pl-c1">100</span> (default threshold)
))</pre></div>
</article></div>