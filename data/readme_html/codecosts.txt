<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-codecostsjl" class="anchor" aria-hidden="true" href="#codecostsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CodeCosts.jl</h1>
<p>This package provides a variant of <code>@code_typed</code> with <a href="https://docs.julialang.org/en/v1/devdocs/inference/#The-inlining-algorithm-(inline_worthy)-1" rel="nofollow">estimated costs for the
inlining</a>.
This helps find the factors which are preventing the SIMD vectorization.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CodeCosts

julia<span class="pl-k">&gt;</span> <span class="pl-en">f</span>(x<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">where</span> T <span class="pl-k">=</span> <span class="pl-c1">convert</span>(T, <span class="pl-c1">max</span>(x <span class="pl-k">*</span> <span class="pl-c1">10.0</span>, x <span class="pl-k">/</span> <span class="pl-c1">3</span>))
f (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@code_costs</span> <span class="pl-c1">f</span>(<span class="pl-c1">1.0</span>f0)
<span class="pl-c1">CodeCostsInfo</span>(
     <span class="pl-c1">CodeInfo</span>(
   <span class="pl-c1">1</span> <span class="pl-c1">1</span> ─ <span class="pl-k">%</span><span class="pl-c1">1</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">fpext</span>(Base<span class="pl-k">.</span>Float64, x)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">4</span> │   <span class="pl-k">%</span><span class="pl-c1">2</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">mul_float</span>(<span class="pl-k">%</span><span class="pl-c1">1</span>, <span class="pl-c1">10.0</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
  <span class="pl-c1">20</span> │   <span class="pl-k">%</span><span class="pl-c1">3</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">div_float</span>(x, <span class="pl-c1">3.0</span>f0)<span class="pl-k">::</span><span class="pl-c1">Float32</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">4</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">fpext</span>(Base<span class="pl-k">.</span>Float64, <span class="pl-k">%</span><span class="pl-c1">3</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">2</span> │   <span class="pl-k">%</span><span class="pl-c1">5</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">lt_float</span>(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">6</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">bitcast</span>(Base<span class="pl-k">.</span>Int64, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Int64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">7</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">slt_int</span>(<span class="pl-k">%</span><span class="pl-c1">6</span>, <span class="pl-c1">0</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">8</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">bitcast</span>(Base<span class="pl-k">.</span>Int64, <span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Int64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">9</span>  <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">slt_int</span>(<span class="pl-k">%</span><span class="pl-c1">8</span>, <span class="pl-c1">0</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">10</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">not_int</span>(<span class="pl-k">%</span><span class="pl-c1">7</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">11</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">and_int</span>(<span class="pl-k">%</span><span class="pl-c1">9</span>, <span class="pl-k">%</span><span class="pl-c1">10</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">12</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">or_int</span>(<span class="pl-k">%</span><span class="pl-c1">5</span>, <span class="pl-k">%</span><span class="pl-c1">11</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">2</span> │   <span class="pl-k">%</span><span class="pl-c1">13</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">ne_float</span>(<span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">14</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span>Math<span class="pl-k">.</span><span class="pl-c1">ifelse</span>(<span class="pl-k">%</span><span class="pl-c1">13</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">2</span> │   <span class="pl-k">%</span><span class="pl-c1">15</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">ne_float</span>(<span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>)<span class="pl-k">::</span><span class="pl-c1">Bool</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">16</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span>Math<span class="pl-k">.</span><span class="pl-c1">ifelse</span>(<span class="pl-k">%</span><span class="pl-c1">15</span>, <span class="pl-k">%</span><span class="pl-c1">4</span>, <span class="pl-k">%</span><span class="pl-c1">2</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">17</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span>Math<span class="pl-k">.</span><span class="pl-c1">ifelse</span>(<span class="pl-k">%</span><span class="pl-c1">12</span>, <span class="pl-k">%</span><span class="pl-c1">14</span>, <span class="pl-k">%</span><span class="pl-c1">16</span>)<span class="pl-k">::</span><span class="pl-c1">Float64</span>
   <span class="pl-c1">1</span> │   <span class="pl-k">%</span><span class="pl-c1">18</span> <span class="pl-k">=</span> Base<span class="pl-k">.</span><span class="pl-c1">fptrunc</span>(Base<span class="pl-k">.</span>Float32, <span class="pl-k">%</span><span class="pl-c1">17</span>)<span class="pl-k">::</span><span class="pl-c1">Float32</span>
   <span class="pl-c1">0</span> └──       <span class="pl-k">return</span> <span class="pl-k">%</span><span class="pl-c1">18</span>
     )
, <span class="pl-c1">CodeCostsSummary</span>(
     zero<span class="pl-k">:</span>  <span class="pl-c1">1</span><span class="pl-k">|</span>
    cheap<span class="pl-k">:</span> <span class="pl-c1">13</span><span class="pl-k">|</span> <span class="pl-c1">1111111111111</span>
   middle<span class="pl-k">:</span> <span class="pl-c1">10</span><span class="pl-k">|</span> <span class="pl-c1">4</span><span class="pl-k">===</span><span class="pl-c1">2</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">=</span><span class="pl-c1">2</span><span class="pl-k">=</span>
expensive<span class="pl-k">:</span> <span class="pl-c1">20</span><span class="pl-k">|</span> <span class="pl-c1">20</span><span class="pl-k">==================</span>
    total<span class="pl-k">:</span> <span class="pl-c1">43</span><span class="pl-k">|</span> <span class="pl-c1">100</span> (default threshold)
))</pre></div>
</article></div>