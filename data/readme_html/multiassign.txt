<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-multiassignjl" class="anchor" aria-hidden="true" href="#multiassignjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MultiAssign.jl</h1>
<p dir="auto"><a href="https://github.com/markmbaum/MultiAssign.jl/actions"><img src="https://github.com/markmbaum/MultiAssign.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/markmbaum/MultiAssign.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7b00d58f6fdb51a436c9416b53697fc8788163b388d98b9a57b3967a09d7387e/68747470733a2f2f636f6465636f762e696f2f67682f6d61726b6d6261756d2f4d756c746941737369676e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/markmbaum/MultiAssign.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>MultiAssign</code> exports a macro for assigning a value/expression to multiple variables in a single terse and clear line. For example, you can write</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@multiassign x, y, z = zeros(n)"><pre><span class="pl-c1">@multiassign</span> x, y, z <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n)</pre></div>
<p dir="auto">instead of</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = zeros(n)
y = zeros(n)
z = zeros(n)"><pre>x <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n)
y <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n)
z <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(n)</pre></div>
<p dir="auto">or</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x, y, z = (zeros(n) for _ in 1:3)"><pre>x, y, z <span class="pl-k">=</span> (<span class="pl-c1">zeros</span>(n) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>)</pre></div>
<p dir="auto">Importantly, each of the variables is assigned with a distinct call to <code>zeros</code> in the example above. The resulting <code>x</code>, <code>y</code>, and <code>z</code> vectors are not copies of each other.</p>
<p dir="auto">The macro should work wherever multiple variables should be assigned the same value. It simply generates identical assignments for each variable.</p>
<p dir="auto">Type annotations will also work if you need them, except in global scope. For example</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@multiassign a::Float64, b::Float32, c::Int64 = 0"><pre><span class="pl-c1">@multiassign</span> a<span class="pl-k">::</span><span class="pl-c1">Float64</span>, b<span class="pl-k">::</span><span class="pl-c1">Float32</span>, c<span class="pl-k">::</span><span class="pl-c1">Int64</span> <span class="pl-k">=</span> <span class="pl-c1">0</span></pre></div>
<p dir="auto">will work inside a function, but not at the global scope of the REPL.</p>
</article></div>