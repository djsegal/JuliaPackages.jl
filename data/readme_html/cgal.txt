<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cgaljl---cgal-meets-julia" class="anchor" aria-hidden="true" href="#cgaljl---cgal-meets-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CGAL.jl - <a href="https://www.cgal.org" rel="nofollow">CGAL</a> meets <a href="https://julialang.org" rel="nofollow">Julia</a></h1>
<p><a href="https://github.com/rgcv/CGAL.jl/actions"><img src="https://github.com/rgcv/CGAL.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a></p>
<p>A package exposing a series of types, constructs, functions, predicates, and
algorithms from <a href="https://www.cgal.org" rel="nofollow">CGAL</a> (Computational Geometry Algorithms Library), a
powerful, reliable, and efficient C++ library</p>
<p>This package is supported by a C++ wrapper around CGAL in the form of
<a href="https://github.com/rgcv/libcgal-julia">libcgal-julia</a>, itself powered by
<a href="https://github.com/JuliaInterop/libcxxwrap-julia">JlCxx</a>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>Since the kernel is being fixed on the C++ side, the usual <code>typedefs</code> you see
in CGAL's examples aren't as common.  Here's <a href="https://doc.cgal.org/latest/Kernel_23/Kernel_23_2points_and_segment_8cpp-example.html" rel="nofollow">one of CGAL's
examples</a>
in a side-by-side comparison with a Julia translation using this package:</p>
<table>
<tbody><tr>
<th>C++</th>
<th>Julia</th>
</tr>
<tr>
<td>
<div class="highlight highlight-source-c++ position-relative" data-snippet-clipboard-copy-content="// points_and_segment.cpp
#include &lt;iostream&gt;
#include &lt;CGAL/Simple_cartesian.h&gt;

typedef CGAL::Simple_cartesian&lt;double&gt; Kernel;
typedef Kernel::Point_2 Point_2;
typedef Kernel::Segment_2 Segment_2;

int main()
{
  Point_2 p(1,1), q(10,10);

  std::cout &lt;&lt; &quot;p = &quot; &lt;&lt; p &lt;&lt; std::endl;
  std::cout &lt;&lt; &quot;q = &quot; &lt;&lt; q.x() &lt;&lt; &quot; &quot; &lt;&lt; q.y() &lt;&lt; std::endl;

  std::cout &lt;&lt; &quot;sqdist(p,q) = &quot;
            &lt;&lt; CGAL::squared_distance(p,q) &lt;&lt; std::endl;

  Segment_2 s(p,q);
  Point_2 m(5, 9);

  std::cout &lt;&lt; &quot;m = &quot; &lt;&lt; m &lt;&lt; std::endl;
  std::cout &lt;&lt; &quot;sqdist(Segment_2(p,q), m) = &quot;
            &lt;&lt; CGAL::squared_distance(s,m) &lt;&lt; std::endl;

  std::cout &lt;&lt; &quot;p, q, and m &quot;;
  switch (CGAL::orientation(p,q,m)){
  case CGAL::COLLINEAR:
    std::cout &lt;&lt; &quot;are collinear\n&quot;;
    break;
  case CGAL::LEFT_TURN:
    std::cout &lt;&lt; &quot;make a left turn\n&quot;;
    break;
  case CGAL::RIGHT_TURN:
    std::cout &lt;&lt; &quot;make a right turn\n&quot;;
    break;
  }

  std::cout &lt;&lt; &quot; midpoint(p,q) = &quot; &lt;&lt; CGAL::midpoint(p,q) &lt;&lt; std::endl;
  return 0;
}
"><pre><span class="pl-c"><span class="pl-c">//</span> points_and_segment.cpp</span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span>
#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>CGAL/Simple_cartesian.h<span class="pl-pds">&gt;</span></span>

<span class="pl-k">typedef</span> CGAL::Simple_cartesian&lt;<span class="pl-k">double</span>&gt; Kernel;
<span class="pl-k">typedef</span> Kernel::Point_2 Point_2;
<span class="pl-k">typedef</span> Kernel::Segment_2 Segment_2;

<span class="pl-k">int</span> <span class="pl-en">main</span>()
{
  Point_2 <span class="pl-smi">p</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>), <span class="pl-c1">q</span>(<span class="pl-c1">10</span>,<span class="pl-c1">10</span>);

  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>p = <span class="pl-pds">"</span></span> &lt;&lt; p &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>q = <span class="pl-pds">"</span></span> &lt;&lt; q.<span class="pl-c1">x</span>() &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span> &lt;&lt; q.<span class="pl-c1">y</span>() &lt;&lt; std::endl;

  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>sqdist(p,q) = <span class="pl-pds">"</span></span>
            &lt;&lt; <span class="pl-c1">CGAL::squared_distance</span>(p,q) &lt;&lt; std::endl;

  Segment_2 <span class="pl-smi">s</span>(p,q);
  Point_2 <span class="pl-smi">m</span>(<span class="pl-c1">5</span>, <span class="pl-c1">9</span>);

  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>m = <span class="pl-pds">"</span></span> &lt;&lt; m &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>sqdist(Segment_2(p,q), m) = <span class="pl-pds">"</span></span>
            &lt;&lt; <span class="pl-c1">CGAL::squared_distance</span>(s,m) &lt;&lt; std::endl;

  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>p, q, and m <span class="pl-pds">"</span></span>;
  <span class="pl-k">switch</span> (<span class="pl-c1">CGAL::orientation</span>(p,q,m)){
  <span class="pl-k">case</span> CGAL::COLLINEAR:
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>are collinear<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    <span class="pl-k">break</span>;
  <span class="pl-k">case</span> CGAL::LEFT_TURN:
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>make a left turn<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    <span class="pl-k">break</span>;
  <span class="pl-k">case</span> CGAL::RIGHT_TURN:
    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span>make a right turn<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>;
    <span class="pl-k">break</span>;
  }

  std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">"</span> midpoint(p,q) = <span class="pl-pds">"</span></span> &lt;&lt; <span class="pl-c1">CGAL::midpoint</span>(p,q) &lt;&lt; std::endl;
  <span class="pl-k">return</span> <span class="pl-c1">0</span>;
}</pre></div>
</td>
<td>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# points_and_segment.jl
using CGAL

p, q = Point2(1, 1), Point2(10, 10)

println(&quot;p = $p&quot;)
println(&quot;q = $(x(q)) $(y(q))&quot;)

println(&quot;sqdist(p,q) = $(squared_distance(p, q))&quot;)

s = Segment2(p, q)
m = Point2(5, 9)

println(&quot;m = $m&quot;)
println(&quot;sqdist(Segment2(p,q), m) = $(squared_distance(s, m))&quot;)

print(&quot;p, q, and m &quot;)
let o = orientation(p, q, m)
    if     o == COLLINEAR  println(&quot;are collinear&quot;)
    elseif o == LEFT_TURN  println(&quot;make a left turn&quot;)
    elseif o == RIGHT_TURN println(&quot;make a right turn&quot;)
    end
end

println(&quot; midpoint(p,q) = $(midpoint(p, q))&quot;)
"><pre><span class="pl-c"><span class="pl-c">#</span> points_and_segment.jl</span>
<span class="pl-k">using</span> CGAL

p, q <span class="pl-k">=</span> <span class="pl-c1">Point2</span>(<span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">Point2</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>p = <span class="pl-v">$p</span><span class="pl-pds">"</span></span>)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>q = <span class="pl-v">$(<span class="pl-c1">x</span>(q))</span> <span class="pl-v">$(<span class="pl-c1">y</span>(q))</span><span class="pl-pds">"</span></span>)

<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>sqdist(p,q) = <span class="pl-v">$(<span class="pl-c1">squared_distance</span>(p, q))</span><span class="pl-pds">"</span></span>)

s <span class="pl-k">=</span> <span class="pl-c1">Segment2</span>(p, q)
m <span class="pl-k">=</span> <span class="pl-c1">Point2</span>(<span class="pl-c1">5</span>, <span class="pl-c1">9</span>)

<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>m = <span class="pl-v">$m</span><span class="pl-pds">"</span></span>)
<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span>sqdist(Segment2(p,q), m) = <span class="pl-v">$(<span class="pl-c1">squared_distance</span>(s, m))</span><span class="pl-pds">"</span></span>)

<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>p, q, and m <span class="pl-pds">"</span></span>)
<span class="pl-k">let</span> o <span class="pl-k">=</span> <span class="pl-c1">orientation</span>(p, q, m)
    <span class="pl-k">if</span>     o <span class="pl-k">==</span> COLLINEAR  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>are collinear<span class="pl-pds">"</span></span>)
    <span class="pl-k">elseif</span> o <span class="pl-k">==</span> LEFT_TURN  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>make a left turn<span class="pl-pds">"</span></span>)
    <span class="pl-k">elseif</span> o <span class="pl-k">==</span> RIGHT_TURN <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>make a right turn<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>

<span class="pl-en">println</span>(<span class="pl-s"><span class="pl-pds">"</span> midpoint(p,q) = <span class="pl-v">$(<span class="pl-c1">midpoint</span>(p, q))</span><span class="pl-pds">"</span></span>)</pre></div>
</td>
</tr>
</tbody></table>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Drop into a REPL and type the following:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; import Pkg; Pkg.add(&quot;CGAL&quot;)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>CGAL<span class="pl-pds">"</span></span>)</pre></div>
<p>Alternatively, in a blank REPL, after hitting <code>]</code>,</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add CGAL
"><pre>pkg<span class="pl-k">&gt;</span> add CGAL</pre></div>
<h2><a id="user-content-using-a-different-kernel" class="anchor" aria-hidden="true" href="#using-a-different-kernel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using a different kernel</h2>
<p>Currently, two different binary libraries are made available in
<a href="https://github.com/rgcv/libcgal-julia">libcgal-julia</a>: one compiled with the
<code>Exact_predicates_inexact_constructions_kernel</code>, and another one with
<code>Exact_predicates_exact_constructions_kernel_with_sqrt</code> (i.e. using <code>doubles</code>
=&gt; <code>Float64</code>, and <code>CORE::Expr</code> =&gt; <code>FieldType</code>).  By default, this package uses
the inexact variant, trading better performance for minor, even sometimes
negligible, dare I say, inexact results.</p>
<p>There are two different ways of loading a custom library, both of which come
in the form of defining environment variables.  One of the glaring downsides
of this approach is the package must be rebuilt in order to pick up the
change before loading the module due to precompilation.</p>
<p>On the julia side of things, this distinction is made based on the existence
of a <code>FieldType</code> type mapped from the C++ side.  Take a look inside
<code>kernel.jl</code> to see how this is handled.</p>
<h3><a id="user-content-switching-between-inexactexact-kernels" class="anchor" aria-hidden="true" href="#switching-between-inexactexact-kernels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Switching between inexact/exact kernels</h3>
<p>In order to use a kernel with exact constructions, one must define the
<code>JLCGAL_EXACT_CONSTRUCTIONS</code> environment variable.  The variable's value is
ignored. It only needs to exist. For example,</p>
<div class="highlight highlight-source-shell position-relative" data-snippet-clipboard-copy-content="$ export JLCGAL_EXACT_CONSTRUCTIONS=&quot;I'm willing to pay for some performance penalties&quot;
$ julia
julia&gt; build CGAL
...
julia&gt; using CGAL
...
julia&gt; FT
FieldType # numeric type from CGAL. when using inexact constructions =&gt; Float64
"><pre>$ <span class="pl-k">export</span> JLCGAL_EXACT_CONSTRUCTIONS=<span class="pl-s"><span class="pl-pds">"</span>I'm willing to pay for some performance penalties<span class="pl-pds">"</span></span>
$ julia
julia<span class="pl-k">&gt;</span> build CGAL
...
julia<span class="pl-k">&gt;</span> using CGAL
...
julia<span class="pl-k">&gt;</span> FT
FieldType <span class="pl-c"><span class="pl-c">#</span> numeric type from CGAL. when using inexact constructions =&gt; Float64</span></pre></div>
<h3><a id="user-content-loading-a-custom-wrapper-library" class="anchor" aria-hidden="true" href="#loading-a-custom-wrapper-library"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Loading a custom wrapper library</h3>
<p>The full path to an alternative version of the wrapper library can be
specified by defining the <code>JLCGAL_LIBPATH</code> environment variable.  This will
override the <code>JLCGAL_EXACT_CONSTRUCTIONS</code> definition since the former is more
specific than the latter.</p>
</article></div>