<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-symbolicutilsjl" class="anchor" aria-hidden="true" href="#symbolicutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SymbolicUtils.jl</h1>
<p dir="auto"><a href="https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged" rel="nofollow"><img src="https://camo.githubusercontent.com/667867fc71b8b3c9ed350ce154a04d38adca002ecfa38edf519284e0365ee553/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5a756c6970266d6573736167653d6368617426636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="Join the chat at https://julialang.zulipchat.com #sciml-bridged" data-canonical-src="https://img.shields.io/static/v1?label=Zulip&amp;message=chat&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a>
<a href="https://docs.sciml.ai/SymbolicUtils/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/88037a523f970520933771e764f5abff55de9382efc91cd89dd43ef0bb49a85f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d5363694d4c2d626c75652e737667" alt="Global Docs" data-canonical-src="https://img.shields.io/badge/docs-SciML-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://app.codecov.io/gh/JuliaSymbolics/SymbolicUtils.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3e344b7b78ce1ac0d8e21af3f0cc9407119fb1493c7feed0e7c013eb6a0e08bc/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153796d626f6c6963732f53796d626f6c69635574696c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaSymbolics/SymbolicUtils.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSymbolics/SymbolicUtils.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaSymbolics/SymbolicUtils.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://buildkite.com/julialang/symbolicutils-dot-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/46ead5d3664ab046af514211364ce8b823f86ffbde81fd749bd606fa81c4d015/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f33646232323265343639373834623336356534623435663262303135356432353263663061653730666566373038626661312e7376673f6272616e63683d6d6173746572" alt="Build status" data-canonical-src="https://badge.buildkite.com/3db222e469784b365e4b45f2b0155d252cf0ae70fef708bfa1.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/SciML/ColPrac"><img src="https://camo.githubusercontent.com/2496bdc13cbc9c458dfa19a108b1f333353f62917355a4cdee582bbdf8be43cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6c507261632d436f6e7472696275746f722532377325323047756964652d626c756576696f6c6574" alt="ColPrac: Contributor's Guide on Collaborative Practices for Community Packages" data-canonical-src="https://img.shields.io/badge/ColPrac-Contributor%27s%20Guide-blueviolet" style="max-width: 100%;"></a>
<a href="https://github.com/SciML/SciMLStyle"><img src="https://camo.githubusercontent.com/3e16f03bad047817fbc07f49307817ed7919ef79c339dc75ad4ce813012c3e0b/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d636f64652532307374796c65266d6573736167653d5363694d4c26636f6c6f723d393535386232266c6162656c436f6c6f723d333839383236" alt="SciML Code Style" data-canonical-src="https://img.shields.io/static/v1?label=code%20style&amp;message=SciML&amp;color=9558b2&amp;labelColor=389826" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-tutorials-and-documentation" class="anchor" aria-hidden="true" href="#tutorials-and-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Tutorials and Documentation</h2>
<p dir="auto">For information on using the package,
<a href="https://symbolicutils.juliasymbolics.org/stable/" rel="nofollow">see the stable documentation</a>. Use the
<a href="https://symbolicutils.juliasymbolics.org/dev/" rel="nofollow">in-development documentation</a> for the version of
the documentation, which contains the unreleased features.</p>
<p dir="auto">SymbolicUtils.jl provides various utilities for symbolic computing. SymbolicUtils.jl is what one would use to build
a Computer Algebra System (CAS). If you're looking for a complete CAS, similar to SymPy or Mathematica, see
<a href="https://github.com/JuliaSymbolics/Symbolics.jl">Symbolics.jl</a>. If you want to build a crazy CAS for your weird
Octonian algebras, you've come to the right place.</p>
<p dir="auto"><a href="https://symbolicutils.juliasymbolics.org/#creating_symbolic_expressions" rel="nofollow">Symbols in SymbolicUtils</a> carry type information. Operations on them propagate this information. <a href="https://symbolicutils.juliasymbolics.org/rewrite/#rule-based_rewriting" rel="nofollow">A rule-based rewriting language</a> can be used to find subexpressions that satisfy arbitrary conditions and apply arbitrary transformations on the matches. The library also contains a set of useful <a href="https://juliasymbolics.github.io/SymbolicUtils.jl/#simplification" rel="nofollow">simplification</a> rules for expressions of numeric symbols and numbers. These can be remixed and extended for special purposes.</p>
<p dir="auto">If you are a Julia package develper in need of a rule rewriting system for your own types, have a look at the <a href="https://symbolicutils.juliasymbolics.org/interface/" rel="nofollow">interfacing guide</a>.</p>
<h3 dir="auto"><a id="user-content-i-dont-want-to-read-your-manual-just-show-me-some-cool-code" class="anchor" aria-hidden="true" href="#i-dont-want-to-read-your-manual-just-show-me-some-cool-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>"I don't want to read your manual, just show me some cool code"</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using SymbolicUtils

julia&gt; SymbolicUtils.show_simplified[] = true

julia&gt; @syms x::Real y::Real z::Complex f(::Number)::Real
(x, y, z, f(::Number)::Real)

julia&gt; 2x^2 - y + x^2
(3 * (x ^ 2)) + (-1 * y)

julia&gt; f(sin(x)^2 + cos(x)^2) + z
f(1) + z

julia&gt; r = @rule sinh(im * ~x) =&gt; sin(~x)
sinh(im * ~x) =&gt; sin(~x)

julia&gt; r(sinh(im * y))
sin(y)

julia&gt; simplify(cos(y)^2 + sinh(im*y)^2, RuleSet([r]))
1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> SymbolicUtils

julia<span class="pl-k">&gt;</span> SymbolicUtils<span class="pl-k">.</span>show_simplified[] <span class="pl-k">=</span> <span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@syms</span> x<span class="pl-k">::</span><span class="pl-c1">Real</span> y<span class="pl-k">::</span><span class="pl-c1">Real</span> z<span class="pl-k">::</span><span class="pl-c1">Complex</span> <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Number</span>)<span class="pl-k">::</span><span class="pl-c1">Real</span>
(x, y, z, <span class="pl-c1">f</span>(<span class="pl-k">::</span><span class="pl-c1">Number</span>)<span class="pl-k">::</span><span class="pl-c1">Real</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">2</span>x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">-</span> y <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
(<span class="pl-c1">3</span> <span class="pl-k">*</span> (x <span class="pl-k">^</span> <span class="pl-c1">2</span>)) <span class="pl-k">+</span> (<span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">*</span> y)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(<span class="pl-c1">sin</span>(x)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">cos</span>(x)<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> z
<span class="pl-c1">f</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> z

julia<span class="pl-k">&gt;</span> r <span class="pl-k">=</span> <span class="pl-c1">@rule</span> <span class="pl-c1">sinh</span>(im <span class="pl-k">*</span> <span class="pl-k">~</span>x) <span class="pl-k">=&gt;</span> <span class="pl-c1">sin</span>(<span class="pl-k">~</span>x)
<span class="pl-c1">sinh</span>(im <span class="pl-k">*</span> <span class="pl-k">~</span>x) <span class="pl-k">=&gt;</span> <span class="pl-c1">sin</span>(<span class="pl-k">~</span>x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">r</span>(<span class="pl-c1">sinh</span>(im <span class="pl-k">*</span> y))
<span class="pl-c1">sin</span>(y)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">simplify</span>(<span class="pl-c1">cos</span>(y)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">sinh</span>(im<span class="pl-k">*</span>y)<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">RuleSet</span>([r]))
<span class="pl-c1">1</span></pre></div>
<h1 dir="auto"><a id="user-content-citations" class="anchor" aria-hidden="true" href="#citations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citations</h1>
<ul dir="auto">
<li>The pattern matcher is an adaption of the one by Gerald Jay Sussman (as seen in <a href="https://groups.csail.mit.edu/mac/users/gjs/6.945/" rel="nofollow">6.945</a> at MIT), his use of symbolic programming in the book <a href="https://groups.csail.mit.edu/mac/users/gjs/6946/sicm-html/book.html" rel="nofollow">SICM</a> inspired this package.</li>
<li><a href="https://github.com/HarrisonGrodin/Rewrite.jl">Rewrite.jl</a> and <a href="https://github.com/HarrisonGrodin/Simplify.jl">Simplify.jl</a> by <a href="https://github.com/HarrisonGrodin">Harrison Grodin</a> also inspired this package.</li>
</ul>
</article></div>