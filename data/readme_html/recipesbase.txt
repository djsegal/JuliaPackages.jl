<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-recipesbase" class="anchor" aria-hidden="true" href="#recipesbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RecipesBase</h1>
<p><a href="https://JuliaPlots.github.io/RecipesBase.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaPlots.github.io/RecipesBase.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.org/JuliaPlots/RecipesBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/38d05ef45e373ec2c923ca2ef5cfd7eaed397ac7e9f21bc79d4c2402903adbdd/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961506c6f74732f52656369706573426173652e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaPlots/RecipesBase.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://julialang.zulipchat.com/#narrow/stream/236493-plots" rel="nofollow"><img src="https://camo.githubusercontent.com/11e6556bfe778e7cf7331cac9c44bd0616062722036cc0d9bb0b7909aaae8779/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7a756c69702d6a6f696e5f636861742d627269676874677265656e2e737667" alt="project chat" data-canonical-src="https://img.shields.io/badge/zulip-join_chat-brightgreen.svg" style="max-width:100%;"></a>
<a href="https://juliahub.com/ui/Packages/RecipesBase/8e2Mm?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/4a2407b83d38fa19a16437caeba4712fc33d5ad4ac9f78bca276b3a2272b11be/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f52656369706573426173652f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/RecipesBase/deps.svg" style="max-width:100%;"></a></p>
<h3><a id="user-content-author-thomas-breloff-tbreloff" class="anchor" aria-hidden="true" href="#author-thomas-breloff-tbreloff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Author: Thomas Breloff (@tbreloff)</h3>
<p>This package implements handy macros <code>@recipe</code> and <code>@series</code> which will define a custom transformation
and attach attributes for user types.  Its design is an attempt to simplify and generalize
the summary and display of types and data from external packages.  With no extra dependencies
and minimal code, package authors can describe visualization routines that can be used
as components in more complex visualizations.</p>
<p>This functionality is primarily geared to turning user types and settings into the
data and attributes that describe a <a href="https://github.com/tbreloff/Plots.jl">Plots</a> visualization,
though it could be used for other purposes as well.
Plots has extensive machinery to uniquely take advantage of the simplified recipe description you define.  See the <a href="http://docs.juliaplots.org/latest/recipes/" rel="nofollow">Plots documentation on recipes</a> for more information.</p>
<p>The <code>@recipe</code> macro will process a function definition, use <code>--&gt;</code> commands to define attributes, and
pass the return value through for further processing (likely by Plots.jl).</p>
<h2><a id="user-content-why-should-i-care-about-this-package" class="anchor" aria-hidden="true" href="#why-should-i-care-about-this-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Why should I care about this package?</h2>
<p>Many packages have custom types and custom data.  There is usually specialized structure, and useful
methods of visualizing that structure and data.  This package solves the difficult problem of how to
build generic visualizations of user-defined data types, without adding bulky dependencies on complex
graphics packages.</p>
<p>This package is as lightweight as possible.  It exports two macros, and defines only a few internal methods.
It has <strong>zero dependencies</strong>.</p>
<p>However, although it is lightweight, it enables a lot.  The entirety of the Plots framework becomes available
to any package implementing a recipe.  This means that complex plots and subplots can be built with uber-flexibility
using custom combinations of data types.  Some examples of applications:</p>
<ul>
<li>Distributions: overlayed density plots for non-normal fitted distributions.</li>
<li>DataFrames: "Grammar of Graphics"-style inputs using symbols.</li>
<li>Deep Learning: frameworks for visualization of neural network states and tracking of internal calculations.</li>
<li>Graphs: flexible, interactive graphs with easily customizable colors, etc.</li>
<li>Symbolic frameworks: sample from complex symbolic distributions.</li>
</ul>
<p>Really there's very little that <em>couldn't</em> be mapped to a useful visualization.
I challenge you to create the pictures that are worth a thousand words.</p>
<p>For more information about Plots, see <a href="http://juliaplots.github.io/" rel="nofollow">the docs</a>, and be sure to reference
the <a href="http://docs.juliaplots.org/latest/supported/#keyword-arguments" rel="nofollow">supported keywords</a>.
For additional examples of recipes in the wild, see <a href="https://github.com/JuliaPlots/PlotRecipes.jl">PlotRecipes</a>.
Ask questions on <a href="https://gitter.im/tbreloff/Plots.jl" rel="nofollow">gitter</a> or in the issues.</p>
<h2><a id="user-content-hello-world" class="anchor" aria-hidden="true" href="#hello-world"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hello world</h2>
<p>This will build a spiky surface:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Plots; gr()
struct T end
@recipe f(::T) = rand(100,100)
surface(T())
"><pre><span class="pl-k">using</span> Plots; <span class="pl-c1">gr</span>()
<span class="pl-k">struct</span> T <span class="pl-k">end</span>
<span class="pl-c1">@recipe</span> <span class="pl-en">f</span>(<span class="pl-k">::</span><span class="pl-c1">T</span>) <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">100</span>,<span class="pl-c1">100</span>)
<span class="pl-c1">surface</span>(<span class="pl-c1">T</span>())</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/933338/15089193/7a453ec6-13cc-11e6-9ae8-959e98b615dc.png"><img src="https://cloud.githubusercontent.com/assets/933338/15089193/7a453ec6-13cc-11e6-9ae8-959e98b615dc.png" alt="" style="max-width:100%;"></a></p>
<h2><a id="user-content-a-real-example" class="anchor" aria-hidden="true" href="#a-real-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A real example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using RecipesBase

# Our user-defined data type
struct T end

# This is all we define.  It uses a familiar signature, but strips it apart
# in order to add a custom definition to the internal method `RecipesBase.apply_recipe`
@recipe function plot(::T, n = 1; customcolor = :green)
    markershape --&gt; :auto        # if markershape is unset, make it :auto
    markercolor :=  customcolor  # force markercolor to be customcolor
    xrotation   --&gt; 45           # if xrotation is unset, make it 45
    zrotation   --&gt; 90           # if zrotation is unset, make it 90
    rand(10,n)                   # return the arguments (input data) for the next recipe
end

# ----------------------------

# Plots will be the ultimate consumer of our recipe in this example
using Plots
gr()

# This call will implicitly call `RecipesBase.apply_recipe` as part of the Plots
# processing pipeline (see the Pipeline section of the Plots documentation).
#   It will plot 5 line plots (a 5-column matrix is returned from the recipe).
#   All will have black circles:
#       - user override for markershape: :c == :circle
#       - customcolor overridden to :black, and markercolor is forced to be customcolor
#   If markershape is an unsupported keyword, the call will error.
#   By default, a warning will be shown for an unsupported keyword.
#   This will be suppressed for zrotation (:quiet flag).
plot(T(), 5; customcolor = :black, shape=:c)
"><pre><span class="pl-k">using</span> RecipesBase

<span class="pl-c"><span class="pl-c">#</span> Our user-defined data type</span>
<span class="pl-k">struct</span> T <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> This is all we define.  It uses a familiar signature, but strips it apart</span>
<span class="pl-c"><span class="pl-c">#</span> in order to add a custom definition to the internal method `RecipesBase.apply_recipe`</span>
<span class="pl-c1">@recipe</span> <span class="pl-k">function</span> <span class="pl-en">plot</span>(<span class="pl-k">::</span><span class="pl-c1">T</span>, n <span class="pl-k">=</span> <span class="pl-c1">1</span>; customcolor <span class="pl-k">=</span> <span class="pl-c1">:green</span>)
    markershape <span class="pl-k">--&gt;</span> <span class="pl-c1">:auto</span>        <span class="pl-c"><span class="pl-c">#</span> if markershape is unset, make it :auto</span>
    markercolor <span class="pl-k">:=</span>  customcolor  <span class="pl-c"><span class="pl-c">#</span> force markercolor to be customcolor</span>
    xrotation   <span class="pl-k">--&gt;</span> <span class="pl-c1">45</span>           <span class="pl-c"><span class="pl-c">#</span> if xrotation is unset, make it 45</span>
    zrotation   <span class="pl-k">--&gt;</span> <span class="pl-c1">90</span>           <span class="pl-c"><span class="pl-c">#</span> if zrotation is unset, make it 90</span>
    <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,n)                   <span class="pl-c"><span class="pl-c">#</span> return the arguments (input data) for the next recipe</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> ----------------------------</span>

<span class="pl-c"><span class="pl-c">#</span> Plots will be the ultimate consumer of our recipe in this example</span>
<span class="pl-k">using</span> Plots
<span class="pl-c1">gr</span>()

<span class="pl-c"><span class="pl-c">#</span> This call will implicitly call `RecipesBase.apply_recipe` as part of the Plots</span>
<span class="pl-c"><span class="pl-c">#</span> processing pipeline (see the Pipeline section of the Plots documentation).</span>
<span class="pl-c"><span class="pl-c">#</span>   It will plot 5 line plots (a 5-column matrix is returned from the recipe).</span>
<span class="pl-c"><span class="pl-c">#</span>   All will have black circles:</span>
<span class="pl-c"><span class="pl-c">#</span>       - user override for markershape: :c == :circle</span>
<span class="pl-c"><span class="pl-c">#</span>       - customcolor overridden to :black, and markercolor is forced to be customcolor</span>
<span class="pl-c"><span class="pl-c">#</span>   If markershape is an unsupported keyword, the call will error.</span>
<span class="pl-c"><span class="pl-c">#</span>   By default, a warning will be shown for an unsupported keyword.</span>
<span class="pl-c"><span class="pl-c">#</span>   This will be suppressed for zrotation (:quiet flag).</span>
<span class="pl-c1">plot</span>(<span class="pl-c1">T</span>(), <span class="pl-c1">5</span>; customcolor <span class="pl-k">=</span> <span class="pl-c1">:black</span>, shape<span class="pl-k">=</span><span class="pl-c1">:c</span>)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/933338/15083906/02a06810-139e-11e6-98a0-dd81c3fb1ad8.png"><img src="https://cloud.githubusercontent.com/assets/933338/15083906/02a06810-139e-11e6-98a0-dd81c3fb1ad8.png" alt="" style="max-width:100%;"></a></p>
<p>In this example, we see a lot of the machinery in action.  We create a new type <code>T</code>, which
we will use for dispatch, and an optional argument <code>n</code>, which will be used to determine the
number of series to display.  User-defined keyword arguments are passed through, and the
<code>--&gt;</code> command can be trailed by flags:</p>
<ul>
<li><code>quiet</code>:   Suppress unsupported keyword warnings</li>
<li><code>require</code>: Error if keyword is unsupported</li>
<li><code>force</code>:   Don't allow user override for this keyword</li>
</ul>
<h3><a id="user-content-series" class="anchor" aria-hidden="true" href="#series"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Series</h3>
<p>For complex visualizations, it can be beneficial to create many series inside a single recipe.  The <code>@series</code> macro will make a copy of the attribute dictionary <code>d</code>, and add a new RecipeData object to the returned list.  See the <a href="http://docs.juliaplots.org/latest/recipes/#case-studies" rel="nofollow">case studies</a> for more details.</p>
<h3><a id="user-content-generated-code" class="anchor" aria-hidden="true" href="#generated-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Generated code</h3>
<p>For the example above, the following code is generated.  In it, you can see the managing of the scope of the keyword args, creation of a definition for <code>RecipesBase.apply_recipe</code>, setting attributes, and creating the list of <code>RecipeData</code> objects:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function RecipesBase.apply_recipe(d::Dict{Symbol,Any},::T,n=1)
    if RecipesBase._debug_recipes[1]
        println(&quot;apply_recipe args: &quot;,Any[:(::T),:(n=1)])
    end
    begin
        customcolor = get!(d,:customcolor,:green)
    end
    series_list = RecipesBase.RecipeData[]
    func_return = begin
            get!(d,:markershape,:auto)
            d[:markercolor] = customcolor
            get!(d,:xrotation,45)
            get!(d,:zrotation,90)
            rand(10,n)
        end
    if func_return != nothing
        push!(series_list,RecipesBase.RecipeData(d,RecipesBase.wrap_tuple(func_return)))
    end
    begin
        RecipesBase.is_key_supported(:customcolor) || delete!(d,:customcolor)
    end
    series_list
end
"><pre><span class="pl-k">function</span> RecipesBase<span class="pl-k">.</span><span class="pl-en">apply_recipe</span>(d<span class="pl-k">::</span><span class="pl-c1">Dict{Symbol,Any}</span>,<span class="pl-k">::</span><span class="pl-c1">T</span>,n<span class="pl-k">=</span><span class="pl-c1">1</span>)
    <span class="pl-k">if</span> RecipesBase<span class="pl-k">.</span>_debug_recipes[<span class="pl-c1">1</span>]
        <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>apply_recipe args: <span class="pl-pds">"</span></span>,Any[:(<span class="pl-k">::</span><span class="pl-c1">T</span>),:(n<span class="pl-k">=</span><span class="pl-c1">1</span>)])
    <span class="pl-k">end</span>
    <span class="pl-k">begin</span>
        customcolor <span class="pl-k">=</span> <span class="pl-c1">get!</span>(d,<span class="pl-c1">:customcolor</span>,<span class="pl-c1">:green</span>)
    <span class="pl-k">end</span>
    series_list <span class="pl-k">=</span> RecipesBase<span class="pl-k">.</span>RecipeData[]
    func_return <span class="pl-k">=</span> <span class="pl-k">begin</span>
            <span class="pl-c1">get!</span>(d,<span class="pl-c1">:markershape</span>,<span class="pl-c1">:auto</span>)
            d[<span class="pl-c1">:markercolor</span>] <span class="pl-k">=</span> customcolor
            <span class="pl-c1">get!</span>(d,<span class="pl-c1">:xrotation</span>,<span class="pl-c1">45</span>)
            <span class="pl-c1">get!</span>(d,<span class="pl-c1">:zrotation</span>,<span class="pl-c1">90</span>)
            <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,n)
        <span class="pl-k">end</span>
    <span class="pl-k">if</span> func_return <span class="pl-k">!=</span> <span class="pl-c1">nothing</span>
        <span class="pl-c1">push!</span>(series_list,RecipesBase<span class="pl-k">.</span><span class="pl-c1">RecipeData</span>(d,RecipesBase<span class="pl-k">.</span><span class="pl-c1">wrap_tuple</span>(func_return)))
    <span class="pl-k">end</span>
    <span class="pl-k">begin</span>
        RecipesBase<span class="pl-k">.</span><span class="pl-c1">is_key_supported</span>(<span class="pl-c1">:customcolor</span>) <span class="pl-k">||</span> <span class="pl-c1">delete!</span>(d,<span class="pl-c1">:customcolor</span>)
    <span class="pl-k">end</span>
    series_list
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-a-humble-request" class="anchor" aria-hidden="true" href="#a-humble-request"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A humble request</h3>
<p>If you build a recipe for your package, please let me know!  I'd love to compile both a gallery and
a listing of user-defined recipes, as well as the packages that are available for Plots visualizations.</p>
</article></div>