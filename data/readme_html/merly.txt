<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-merlyjl" class="anchor" aria-hidden="true" href="#merlyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Merly.jl</h1>
<p align="center"><a target="_blank" rel="noopener noreferrer" href="merly.png"><img src="merly.png" width="25%" style="max-width:100%;"></a></p>
<p align="center">
<strong>Micro framework for web programming in Julia.</strong>
<br><br>
<a href="https://travis-ci.org/github/neomatrixcode/Merly.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ca728122e0e67cbebaa1f0eba10600a7e93fedc7d4386948c105d695299cff3c/68747470733a2f2f7472617669732d63692e6f72672f6e656f6d6174726978636f64652f4d65726c792e6a6c2e7376673f6272616e63683d6d6173746572" data-canonical-src="https://travis-ci.org/neomatrixcode/Merly.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/neomatrixcode/Merly.jl" rel="nofollow">
  <img src="https://camo.githubusercontent.com/257a19feb8c79cec8e9e0e89088401b9bf456ff373191edf5b85268a18ad8e4f/68747470733a2f2f636f6465636f762e696f2f67682f6e656f6d6174726978636f64652f4d65726c792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" data-canonical-src="https://codecov.io/gh/neomatrixcode/Merly.jl/branch/master/graph/badge.svg" style="max-width:100%;">
</a>
<a href="https://neomatrixcode.gitbook.io/merly/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://raw.githubusercontent.com/neomatrixcode/Merly.jl/master/LICENSE.md" rel="nofollow"><img src="https://camo.githubusercontent.com/5fab2edf3816ef9fb3ebcaf6e613fa7b40ff7652ec69e5f6e7f695aa24bf5ce6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg" style="max-width:100%;"></a>
</p>
<h2><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>About</h2>
<p>Merly is a micro framework for declaring routes and handling requests.
Quickly creating web applications in Julia with minimal effort.</p>
<h3><a id="user-content-all-contributions-and-suggestions-are-welcome-" class="anchor" aria-hidden="true" href="#all-contributions-and-suggestions-are-welcome-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>All contributions and suggestions are welcome !!!!</h3>
<h2><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(@v1.5) pkg&gt; add Merly
"><pre>(<span class="pl-c1">@v1</span>.<span class="pl-c1">5</span>) pkg<span class="pl-k">&gt;</span> add Merly</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Merly
using JSON

u = 1

function tojson(data::String)
   return JSON.parse(data)
end

formats[&quot;application/json&quot;] = tojson

@page &quot;/&quot; HTTP.Response(200,&quot;Hello World!&quot;)
@page &quot;/hola/:usr&quot; (;u=u) HTTP.Response(200,string(&quot;&lt;b&gt;Hello &quot;,request.params[&quot;usr&quot;],u,&quot;!&lt;/b&gt;&quot;))

@route GET &quot;/get/:data1&quot; (;u=u) begin
  u = u +1
  HTTP.Response(200, string(u ,request.params[&quot;data1&quot;]))
end

@route POST &quot;/post&quot; begin
  HTTP.Response(200,&quot;I did something!&quot;)
end

@route POST|PUT|DELETE &quot;/&quot; begin
  println(&quot;query: &quot;,request.query)
  println(&quot;body: &quot;,request.body)

  HTTP.Response(200
          , HTTP.mkheaders([&quot;Content-Type&quot; =&gt; &quot;text/plain&quot;])
          , body=&quot;I did something2!&quot;)
end

Get(&quot;/data&quot;, (request,HTTP)-&gt;begin

  println(&quot;params: &quot;,request.params)
  println(&quot;query: &quot;,request.query)

  HTTP.Response(200
          , HTTP.mkheaders([&quot;Content-Type&quot; =&gt; &quot;text/plain&quot;])
          , body=string(u,&quot;data &quot;, get(request.query,&quot;hola&quot;,&quot;&quot;)))

end)


Post(&quot;/data&quot;, (request,HTTP)-&gt; begin
  println(&quot;params: &quot;,request.params)
  println(&quot;query: &quot;,request.query)
  println(&quot;body: &quot;,request.body)

  global u=&quot;bye&quot;

  HTTP.Response(200
          , HTTP.mkheaders([&quot;Content-Type&quot; =&gt; &quot;text/plain&quot;])
          , body=string(&quot;I did something! &quot;, request.body[&quot;query&quot;]))

end)


start(host = &quot;127.0.0.1&quot;, port = 8086, verbose = true)

"><pre><span class="pl-k">using</span> Merly
<span class="pl-k">using</span> JSON

u <span class="pl-k">=</span> <span class="pl-c1">1</span>

<span class="pl-k">function</span> <span class="pl-en">tojson</span>(data<span class="pl-k">::</span><span class="pl-c1">String</span>)
   <span class="pl-k">return</span> JSON<span class="pl-k">.</span><span class="pl-c1">parse</span>(data)
<span class="pl-k">end</span>

formats[<span class="pl-s"><span class="pl-pds">"</span>application/json<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> tojson

<span class="pl-c1">@page</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span> HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>,<span class="pl-s"><span class="pl-pds">"</span>Hello World!<span class="pl-pds">"</span></span>)
<span class="pl-c1">@page</span> <span class="pl-s"><span class="pl-pds">"</span>/hola/:usr<span class="pl-pds">"</span></span> (;u<span class="pl-k">=</span>u) HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>,<span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">"</span>&lt;b&gt;Hello <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>params[<span class="pl-s"><span class="pl-pds">"</span>usr<span class="pl-pds">"</span></span>],u,<span class="pl-s"><span class="pl-pds">"</span>!&lt;/b&gt;<span class="pl-pds">"</span></span>))

<span class="pl-c1">@route</span> GET <span class="pl-s"><span class="pl-pds">"</span>/get/:data1<span class="pl-pds">"</span></span> (;u<span class="pl-k">=</span>u) <span class="pl-k">begin</span>
  u <span class="pl-k">=</span> u <span class="pl-k">+</span><span class="pl-c1">1</span>
  HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>, <span class="pl-c1">string</span>(u ,request<span class="pl-k">.</span>params[<span class="pl-s"><span class="pl-pds">"</span>data1<span class="pl-pds">"</span></span>]))
<span class="pl-k">end</span>

<span class="pl-c1">@route</span> POST <span class="pl-s"><span class="pl-pds">"</span>/post<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
  HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>,<span class="pl-s"><span class="pl-pds">"</span>I did something!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">@route</span> POST<span class="pl-k">|</span>PUT<span class="pl-k">|</span>DELETE <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>query: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>query)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>body: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>body)

  HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>
          , HTTP<span class="pl-k">.</span><span class="pl-c1">mkheaders</span>([<span class="pl-s"><span class="pl-pds">"</span>Content-Type<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>])
          , body<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>I did something2!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

<span class="pl-c1">Get</span>(<span class="pl-s"><span class="pl-pds">"</span>/data<span class="pl-pds">"</span></span>, (request,HTTP)<span class="pl-k">-&gt;</span><span class="pl-k">begin</span>

  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>params: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>params)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>query: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>query)

  HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>
          , HTTP<span class="pl-k">.</span><span class="pl-c1">mkheaders</span>([<span class="pl-s"><span class="pl-pds">"</span>Content-Type<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>])
          , body<span class="pl-k">=</span><span class="pl-c1">string</span>(u,<span class="pl-s"><span class="pl-pds">"</span>data <span class="pl-pds">"</span></span>, <span class="pl-c1">get</span>(request<span class="pl-k">.</span>query,<span class="pl-s"><span class="pl-pds">"</span>hola<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)))

<span class="pl-k">end</span>)


<span class="pl-c1">Post</span>(<span class="pl-s"><span class="pl-pds">"</span>/data<span class="pl-pds">"</span></span>, (request,HTTP)<span class="pl-k">-&gt;</span> <span class="pl-k">begin</span>
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>params: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>params)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>query: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>query)
  <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>body: <span class="pl-pds">"</span></span>,request<span class="pl-k">.</span>body)

  <span class="pl-k">global</span> u<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>bye<span class="pl-pds">"</span></span>

  HTTP<span class="pl-k">.</span><span class="pl-c1">Response</span>(<span class="pl-c1">200</span>
          , HTTP<span class="pl-k">.</span><span class="pl-c1">mkheaders</span>([<span class="pl-s"><span class="pl-pds">"</span>Content-Type<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>text/plain<span class="pl-pds">"</span></span>])
          , body<span class="pl-k">=</span><span class="pl-c1">string</span>(<span class="pl-s"><span class="pl-pds">"</span>I did something! <span class="pl-pds">"</span></span>, request<span class="pl-k">.</span>body[<span class="pl-s"><span class="pl-pds">"</span>query<span class="pl-pds">"</span></span>]))

<span class="pl-k">end</span>)


<span class="pl-c1">start</span>(host <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>127.0.0.1<span class="pl-pds">"</span></span>, port <span class="pl-k">=</span> <span class="pl-c1">8086</span>, verbose <span class="pl-k">=</span> <span class="pl-c1">true</span>)
</pre></div>
</article></div>