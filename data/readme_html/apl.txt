<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-apl" class="anchor" aria-hidden="true" href="#apl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>APL</h1>
<p><strong><a href="http://nbviewer.jupyter.org/gist/shashi/9ad9de91d1aa12f006c4" rel="nofollow">Demo notebook</a></strong></p>
<p>Video: <a href="https://www.youtube.com/watch?v=XVv1GipR5yU" rel="nofollow">APL at Julia's Speed</a> (JuliaCon 2016)</p>
<h2><a id="user-content-implementation-notes" class="anchor" aria-hidden="true" href="#implementation-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation notes</h2>
<p>Here's the implementation explained in brief.</p>
<p>The <code>apl""</code> string macro parses and evals an APL expression.
The parser works on the reverse of the string, and consists of a bunch of <a href="https://github.com/shashi/APL.jl/blob/06570f535862f934e3da12d238501f67b210aec6/src/parser.jl#L4-L41">concatenation rules</a> defined as a generic <code>cons</code> function.</p>
<p>APL strings are parsed and executed to produce either a result or an object representing the APL expression.
Primitve functions are of the type <code>PrimFn{c}</code> where <code>c</code> is the character; similarly, operators are of type <code>Op1{c, F}</code> and <code>Op2{c, F1, F2}</code>, where <code>F</code>, <code>F1</code> and <code>F2</code> are types of the operand functions â€” these type parameters let you specialize how these objects are handled all over the place.
An optimization is simply a method defined on an expression of a specific type.</p>
<p>The <code>call</code> generic function can be used to make these objects callable!
The <a href="https://github.com/shashi/APL.jl/blob/master/src/eval.jl">eval-apply is really simple</a> and quite elegant.</p>
</article></div>