<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-continuumarraysjl" class="anchor" aria-hidden="true" href="#continuumarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ContinuumArrays.jl</h1>
<p dir="auto">A package for representing quasi arrays with continuous dimensions</p>
<p dir="auto"><a href="https://github.com/JuliaApproximation/ContinuumArrays.jl/actions"><img src="https://github.com/JuliaApproximation/ContinuumArrays.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaApproximation/ContinuumArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d7a8301a5779f30a9c1d132f4b5c306bce6eaa6bc23f4084f9313f754cdcc400/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961417070726f78696d6174696f6e2f436f6e74696e75756d4172726179732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaApproximation/ContinuumArrays.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">A quasi array as implemented in <a href="https://github.com/JuliaApproximation/QuasiArrays.jl">QuasiArrays.jl</a> is a
generalization of an array that allows non-integer indexing via general axes. This package adds support for
infinite-dimensional axes, including continuous intervals. Thus it plays the same role as <a href="https://github.com/JuliaArrays/InfiniteArrays.jl">InfiniteArrays.jl</a> does for standard arrays but now for quasi arrays.</p>
<p dir="auto">A simple example is the identity function on the interval <code>0..1</code>. This can be created using <code>Inclusion(d)</code>,
which returns <code>x</code> if <code>x in d</code> is true, otherwise throws an error:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ContinuumArrays, IntervalSets

julia&gt; x = Inclusion(0..1.0)
Inclusion(0.0..1.0)

julia&gt; size(x) # uncountable (aleph-1)
(ℵ₁,)

julia&gt; axes(x) # axis is itself
(Inclusion(0.0..1.0),)

julia&gt; x[0.1] # returns the input
0.1

julia&gt; x[1.1] # throws an error
ERROR: BoundsError: attempt to access Inclusion(0.0..1.0)
  at index [1.1]
Stacktrace:
 [1] throw_boundserror(::Inclusion{Float64,Interval{:closed,:closed,Float64}}, ::Tuple{Float64}) at ./abstractarray.jl:538
 [2] checkbounds at /Users/solver/Projects/QuasiArrays.jl/src/abstractquasiarray.jl:287 [inlined]
 [3] getindex(::Inclusion{Float64,Interval{:closed,:closed,Float64}}, ::Float64) at /Users/solver/Projects/QuasiArrays.jl/src/indices.jl:158
 [4] top-level scope at REPL[14]:1"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ContinuumArrays, IntervalSets

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">Inclusion</span>(<span class="pl-c1">0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>)
<span class="pl-c1">Inclusion</span>(<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(x) <span class="pl-c"><span class="pl-c">#</span> uncountable (aleph-1)</span>
(ℵ₁,)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(x) <span class="pl-c"><span class="pl-c">#</span> axis is itself</span>
(<span class="pl-c1">Inclusion</span>(<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>),)

julia<span class="pl-k">&gt;</span> x[<span class="pl-c1">0.1</span>] <span class="pl-c"><span class="pl-c">#</span> returns the input</span>
<span class="pl-c1">0.1</span>

julia<span class="pl-k">&gt;</span> x[<span class="pl-c1">1.1</span>] <span class="pl-c"><span class="pl-c">#</span> throws an error</span>
ERROR<span class="pl-k">:</span> BoundsError<span class="pl-k">:</span> attempt to access <span class="pl-c1">Inclusion</span>(<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>)
  at index [<span class="pl-c1">1.1</span>]
Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] <span class="pl-c1">throw_boundserror</span>(<span class="pl-k">::</span><span class="pl-c1">Inclusion{Float64,Interval{:closed,:closed,Float64}}</span>, <span class="pl-k">::</span><span class="pl-c1">Tuple{Float64}</span>) at <span class="pl-k">./</span>abstractarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">538</span>
 [<span class="pl-c1">2</span>] checkbounds at <span class="pl-k">/</span>Users<span class="pl-k">/</span>solver<span class="pl-k">/</span>Projects<span class="pl-k">/</span>QuasiArrays<span class="pl-k">.</span>jl<span class="pl-k">/</span>src<span class="pl-k">/</span>abstractquasiarray<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">287</span> [inlined]
 [<span class="pl-c1">3</span>] <span class="pl-c1">getindex</span>(<span class="pl-k">::</span><span class="pl-c1">Inclusion{Float64,Interval{:closed,:closed,Float64}}</span>, <span class="pl-k">::</span><span class="pl-c1">Float64</span>) at <span class="pl-k">/</span>Users<span class="pl-k">/</span>solver<span class="pl-k">/</span>Projects<span class="pl-k">/</span>QuasiArrays<span class="pl-k">.</span>jl<span class="pl-k">/</span>src<span class="pl-k">/</span>indices<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">158</span>
 [<span class="pl-c1">4</span>] top<span class="pl-k">-</span>level scope at REPL[<span class="pl-c1">14</span>]<span class="pl-k">:</span><span class="pl-c1">1</span></pre></div>
<p dir="auto">An important usage is representing bases and function approximation, and this package contains
a basic implementation of linear splines and heaviside functions. For example, we can construct splines
with evenly spaced nodes via:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; L = LinearSpline(0:0.2:1);

julia&gt; size(L) # uncountable (alepha-1) by 11
(ℵ₁, 6)

julia&gt; axes(L) # The interval 0.0..1.0 by 1:6. 
(Inclusion(0.0..1.0), Base.OneTo(6))

julia&gt; L[[0.15,0.25,0.45],1:6] # can index like an array
3×6 Array{Float64,2}:
 0.25  0.75  0.0   0.0   0.0  0.0
 0.0   0.75  0.25  0.0   0.0  0.0
 0.0   0.0   0.75  0.25  0.0  0.0"><pre>julia<span class="pl-k">&gt;</span> L <span class="pl-k">=</span> <span class="pl-c1">LinearSpline</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.2</span><span class="pl-k">:</span><span class="pl-c1">1</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">size</span>(L) <span class="pl-c"><span class="pl-c">#</span> uncountable (alepha-1) by 11</span>
(ℵ₁, <span class="pl-c1">6</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(L) <span class="pl-c"><span class="pl-c">#</span> The interval 0.0..1.0 by 1:6. </span>
(<span class="pl-c1">Inclusion</span>(<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>), Base<span class="pl-k">.</span><span class="pl-c1">OneTo</span>(<span class="pl-c1">6</span>))

julia<span class="pl-k">&gt;</span> L[[<span class="pl-c1">0.15</span>,<span class="pl-c1">0.25</span>,<span class="pl-c1">0.45</span>],<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">6</span>] <span class="pl-c"><span class="pl-c">#</span> can index like an array</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">6</span> Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.25</span>  <span class="pl-c1">0.75</span>  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>   <span class="pl-c1">0.75</span>  <span class="pl-c1">0.25</span>  <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>   <span class="pl-c1">0.0</span>   <span class="pl-c1">0.75</span>  <span class="pl-c1">0.25</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">Functions in this basis are represented by a lazy multiplication by a basis
and a vector of coefficients:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f = L*[1,2,3,4,5,6]
QuasiArrays.ApplyQuasiArray{Float64,1,typeof(*),Tuple{Spline{1,Float64},Array{Int64,1}}}(*, (Spline{1,Float64}([0.0, 0.2, 0.4, 0.6, 0.8, 1.0]), [1, 2, 3, 4, 5, 6]))

julia&gt; axes(f)
(Inclusion(0.0..1.0),)

julia&gt; f[0.1]
1.5"><pre>julia<span class="pl-k">&gt;</span> f <span class="pl-k">=</span> L<span class="pl-k">*</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>]
QuasiArrays<span class="pl-k">.</span><span class="pl-c1">ApplyQuasiArray</span><span class="pl-c1">{Float64,1,typeof(*),Tuple{Spline{1,Float64},Array{Int64,1}}}</span>(<span class="pl-k">*</span>, (<span class="pl-c1">Spline</span><span class="pl-c1">{1,Float64}</span>([<span class="pl-c1">0.0</span>, <span class="pl-c1">0.2</span>, <span class="pl-c1">0.4</span>, <span class="pl-c1">0.6</span>, <span class="pl-c1">0.8</span>, <span class="pl-c1">1.0</span>]), [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>]))

julia<span class="pl-k">&gt;</span> <span class="pl-c1">axes</span>(f)
(<span class="pl-c1">Inclusion</span>(<span class="pl-c1">0.0</span><span class="pl-k">..</span><span class="pl-c1">1.0</span>),)

julia<span class="pl-k">&gt;</span> f[<span class="pl-c1">0.1</span>]
<span class="pl-c1">1.5</span></pre></div>
<p dir="auto">Creating a finite element method is possible using standard array terminology.
We always take the Lebesgue inner product associated with an axes, so in this
case the mass matrix is just <code>L'L</code>. Combined with a differentiation operator allows
us to form the weak Laplacian.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; B = L[:,2:end-1]; # drop boundary terms to impose zero Dirichlet

julia&gt; D = Derivative(L); # Differentiation operator

julia&gt; Δ = (D*B)'D*B # weak Laplacian
4×4 BandedMatrices.BandedMatrix{Float64,Array{Float64,2},Base.OneTo{Int64}}:
 10.0  -5.0    ⋅     ⋅ 
 -5.0  10.0  -5.0    ⋅ 
   ⋅   -5.0  10.0  -5.0
   ⋅     ⋅   -5.0  10.0

julia&gt; B'f # right-hand side
4-element Array{Float64,1}:
 0.4
 0.6
 0.8
 1.0

 julia&gt; c = Δ \ B'f # coefficients of Poisson
4-element Array{Float64,1}:
 0.24               
 0.4                
 0.43999999999999995
 0.3199999999999999 

julia&gt; u = B*c; # expand in basis

julia&gt; u[0.1] # evaluate at 0.1
0.12"><pre>julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> L[:,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span><span class="pl-k">-</span><span class="pl-c1">1</span>]; <span class="pl-c"><span class="pl-c">#</span> drop boundary terms to impose zero Dirichlet</span>

julia<span class="pl-k">&gt;</span> D <span class="pl-k">=</span> <span class="pl-c1">Derivative</span>(L); <span class="pl-c"><span class="pl-c">#</span> Differentiation operator</span>

julia<span class="pl-k">&gt;</span> Δ <span class="pl-k">=</span> (D<span class="pl-k">*</span>B)<span class="pl-k">'</span>D<span class="pl-k">*</span>B <span class="pl-c"><span class="pl-c">#</span> weak Laplacian</span>
<span class="pl-c1">4</span><span class="pl-k">×</span><span class="pl-c1">4</span> BandedMatrices<span class="pl-k">.</span>BandedMatrix{Float64,Array{Float64,<span class="pl-c1">2</span>},Base<span class="pl-k">.</span>OneTo{Int64}}<span class="pl-k">:</span>
 <span class="pl-c1">10.0</span>  <span class="pl-k">-</span><span class="pl-c1">5.0</span>    <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span> 
 <span class="pl-k">-</span><span class="pl-c1">5.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-k">-</span><span class="pl-c1">5.0</span>    <span class="pl-k">⋅</span> 
   <span class="pl-k">⋅</span>   <span class="pl-k">-</span><span class="pl-c1">5.0</span>  <span class="pl-c1">10.0</span>  <span class="pl-k">-</span><span class="pl-c1">5.0</span>
   <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>   <span class="pl-k">-</span><span class="pl-c1">5.0</span>  <span class="pl-c1">10.0</span>

julia<span class="pl-k">&gt;</span> B<span class="pl-k">'</span>f <span class="pl-c"><span class="pl-c">#</span> right-hand side</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.4</span>
 <span class="pl-c1">0.6</span>
 <span class="pl-c1">0.8</span>
 <span class="pl-c1">1.0</span>

 julia<span class="pl-k">&gt;</span> c <span class="pl-k">=</span> Δ <span class="pl-k">\</span> B<span class="pl-k">'</span>f <span class="pl-c"><span class="pl-c">#</span> coefficients of Poisson</span>
<span class="pl-c1">4</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.24</span>               
 <span class="pl-c1">0.4</span>                
 <span class="pl-c1">0.43999999999999995</span>
 <span class="pl-c1">0.3199999999999999</span> 

julia<span class="pl-k">&gt;</span> u <span class="pl-k">=</span> B<span class="pl-k">*</span>c; <span class="pl-c"><span class="pl-c">#</span> expand in basis</span>

julia<span class="pl-k">&gt;</span> u[<span class="pl-c1">0.1</span>] <span class="pl-c"><span class="pl-c">#</span> evaluate at 0.1</span>
<span class="pl-c1">0.12</span></pre></div>
</article></div>