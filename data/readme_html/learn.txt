<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-learnjl" class="anchor" aria-hidden="true" href="#learnjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Learn.jl</h1>
<p><a href="https://gitter.im/Rory-Finnegan/Learn.jl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" rel="nofollow"><img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Gitter" data-canonical-src="https://badges.gitter.im/Join%20Chat.svg" style="max-width:100%;"></a></p>
<p>Base framework library for machine learning packages. Attempting to consolidate MLBase.jl and MachineLearning.jl into one common package.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Learn&quot;)
"><pre><code>Pkg.add("Learn")
</code></pre></div>
<p>installing latest development version:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.clone(&quot;https://github.com/Rory-Finnegan/Learn.jl&quot;)
"><pre><code>Pkg.clone("https://github.com/Rory-Finnegan/Learn.jl")
</code></pre></div>
<h2><a id="user-content-concept-overview--bikeshedding" class="anchor" aria-hidden="true" href="#concept-overview--bikeshedding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Concept Overview / Bikeshedding</h2>
<h3><a id="user-content-interfaces" class="anchor" aria-hidden="true" href="#interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interfaces</h3>
<p>I think the cleaner approach rather than an abstract type hierarchy which
doesn't entirely fit all the different types of learners and how they relate
to each other is to use something like Interfaces.jl or Traits.jl.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="&quot;&quot;&quot;
Requires Interfaces.jl
&quot;&quot;&quot;

@interface Learner begin
    fit(model::Learner, data...)
    fit!(model::Learner, data...)
    transform(model::Learner, data...)
end

@interface Supervised begin
    fit(model::Supervised, data, labels)
    tranform(model::Supervised, data)
    tranform!(model::Supervised, data, output)
    predict(model::Supervised, data) [usually just an alias to transform for readability]
    predict!(model::Supervised, data, output)
end

@interface Unsupervised begin
    fit(model::Unsupervised, data)
    fit!(model::Unsupervised, data)
    tranform(model::Unsupervised, data)
    tranform!(model::Unsupervised, data, output)
end

&quot;&quot;&quot;
Could continue for even more specific interfaces,
but I'm not sure that is necessary right away.
Classifier
Regressor
Cluster
&quot;&quot;&quot;

# Usage
using Learn
import MyLib: MyMethod

mymethod = MyMethod()
unsupervised = Unsupervised(mymethod)

# If MyMethod supports the Unsupervised api, we return a wrapper and
# proceed to use the unsupervised type in various common libraries. Otherwise
# an exception will be thrown. 
...
"><pre><code>"""
Requires Interfaces.jl
"""

@interface Learner begin
    fit(model::Learner, data...)
    fit!(model::Learner, data...)
    transform(model::Learner, data...)
end

@interface Supervised begin
    fit(model::Supervised, data, labels)
    tranform(model::Supervised, data)
    tranform!(model::Supervised, data, output)
    predict(model::Supervised, data) [usually just an alias to transform for readability]
    predict!(model::Supervised, data, output)
end

@interface Unsupervised begin
    fit(model::Unsupervised, data)
    fit!(model::Unsupervised, data)
    tranform(model::Unsupervised, data)
    tranform!(model::Unsupervised, data, output)
end

"""
Could continue for even more specific interfaces,
but I'm not sure that is necessary right away.
Classifier
Regressor
Cluster
"""

# Usage
using Learn
import MyLib: MyMethod

mymethod = MyMethod()
unsupervised = Unsupervised(mymethod)

# If MyMethod supports the Unsupervised api, we return a wrapper and
# proceed to use the unsupervised type in various common libraries. Otherwise
# an exception will be thrown. 
...
</code></pre></div>
<p>This decouples the implementation like <code>MyMethod</code> from the Learn.jl API, since an implementation could be
supported by Learn.jl without having to actively use it. Similarly, in order to get libraries
to comply with our API we won't need to restructure any of their internal type hierarchy (if they have one),
instead most of the time we'll just need to add a method or an alias to an existing method.</p>
<h3><a id="user-content-implementations" class="anchor" aria-hidden="true" href="#implementations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementations</h3>
<p>I think it makes more sense for maintainability if most of the ML algorithm implementations are in their own repos and just use Learn.jl if they support the required methods. Down the road we could choose to register implementations
into a meta packages.</p>
<h3><a id="user-content-utilities" class="anchor" aria-hidden="true" href="#utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Utilities</h3>
<p>Pipelines:
allow pipelining multiple models so long as all models are valid LearningModels with a transform method. SupervisedPipeline could be a special case that requires the output model to be a supervised model. [Update: this should be handled by Orchestra.jl]</p>
<p>Multiclass:
Utility classifier for converting binary classifiers into multiclassifiers (supporting both one-to-one and one-to-rest methods)</p>
<p>Evaluation:
A test harness framework consisting of set of common steps (ie: performance measures, test/train dataset initialization, etc) for evaluating a learning method.</p>
<p>HyperOpt (could maybe be its own repo):
Hyperparameter optimization framework with maybe a few common implementations like gridsearch and bayesian optimization.</p>
</article></div>