<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://JuliaIO.github.io/LibSerialPort.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a> <a href="https://JuliaIO.github.io/LibSerialPort.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a> <a href="https://travis-ci.com/JuliaIO/LibSerialPort.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4b004ca778ce3f257a04f9bd7783778a439fc53a16de791ccece15c29e4dadb0/68747470733a2f2f7472617669732d63692e636f6d2f4a756c6961494f2f4c696253657269616c506f72742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaIO/LibSerialPort.jl.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-libserialportjl" class="anchor" aria-hidden="true" href="#libserialportjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LibSerialPort.jl</h1>
<p dir="auto"><a href="http://sigrok.org/wiki/Libserialport" rel="nofollow">libserialport</a> is a small, well-documented C library for general-purpose serial port communication. This is a julia wrapper for the library.</p>
<p dir="auto">Apart from a very few non-essential functions, the entire library API (about 75 functions) is wrapped using <code>ccall</code>. In addition, a higher-level interface is also provided that follows Julia's IO stream interface.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add LibSerialPort"><pre class="notranslate"><code>pkg&gt; add LibSerialPort
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Try</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using LibSerialPort
julia&gt; list_ports()  # or get_port_list() for an array of names"><pre class="notranslate"><code>julia&gt; using LibSerialPort
julia&gt; list_ports()  # or get_port_list() for an array of names
</code></pre></div>
<p dir="auto">The examples/ directory contains a simple serial console for the command line. This may serve as a useful starting point for your application. The serial_example.ino sketch can be flashed to a microcontroller supported by the Arduino environment.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LibSerialPort

# Modify these as needed
portname = &quot;/dev/ttyS0&quot;
baudrate = 115200

# Snippet from examples/mwe.jl
LibSerialPort.open(portname, baudrate) do sp
	sleep(2)

	if bytesavailable(sp) &gt; 0
    	println(String(read(sp)))
	end

    write(sp, &quot;hello\n&quot;)
    sleep(0.1)
    println(readline(sp))
end"><pre><span class="pl-k">using</span> LibSerialPort

<span class="pl-c"><span class="pl-c">#</span> Modify these as needed</span>
portname <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/dev/ttyS0<span class="pl-pds">"</span></span>
baudrate <span class="pl-k">=</span> <span class="pl-c1">115200</span>

<span class="pl-c"><span class="pl-c">#</span> Snippet from examples/mwe.jl</span>
LibSerialPort<span class="pl-k">.</span><span class="pl-c1">open</span>(portname, baudrate) <span class="pl-k">do</span> sp
	<span class="pl-c1">sleep</span>(<span class="pl-c1">2</span>)

	<span class="pl-k">if</span> <span class="pl-c1">bytesavailable</span>(sp) <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>
    	<span class="pl-c1">println</span>(<span class="pl-c1">String</span>(<span class="pl-c1">read</span>(sp)))
	<span class="pl-k">end</span>

    <span class="pl-c1">write</span>(sp, <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-cce">\n</span><span class="pl-pds">"</span></span>)
    <span class="pl-c1">sleep</span>(<span class="pl-c1">0.1</span>)
    <span class="pl-c1">println</span>(<span class="pl-c1">readline</span>(sp))
<span class="pl-k">end</span></pre></div>
<p dir="auto">The tests are also worth looking at for demonstration of i/o and configuration. They can be run via <code>julia test/runtests.jl &lt;address&gt; &lt;baudrate&gt;</code>. Unless the address of your device matches that in runtests.jl, doing <code>pkg&gt; test LibSerialPort</code> will fail. This problem would be addressed by <a href="https://github.com/JuliaLang/Pkg.jl/issues/518" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/Pkg.jl/issues/518/hovercard">support for args</a> in the Pkg REPL.</p>
<p dir="auto">Note that on Windows, returning an OS-level port handle is not yet supported.</p>
</article></div>