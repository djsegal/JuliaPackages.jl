<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-teafiles" class="anchor" aria-hidden="true" href="#teafiles"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TeaFiles</h1>
<p dir="auto"><a href="https://tpgillam.github.io/TeaFiles.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://tpgillam.github.io/TeaFiles.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/tpgillam/TeaFiles.jl/actions"><img src="https://github.com/tpgillam/TeaFiles.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/tpgillam/TeaFiles.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/284ef7ab539f4b2dca47d2f6b06e476ddec76b61cc61a1622f41f0ac9e769990/68747470733a2f2f636f6465636f762e696f2f67682f747067696c6c616d2f54656146696c65732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/tpgillam/TeaFiles.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Implement the <a href="http://discretelogics.com/resources/teafilespec/" rel="nofollow">TeaFile</a> format.
It is row-oriented, binary, and primarily intended for time-series data.</p>
<p dir="auto">The primary API is compatible with the <a href="https://github.com/JuliaData/Tables.jl">Tables.jl</a> interface.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">We create the following toy dataset:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dates
using DataFrames
x = DataFrame(t=[DateTime(2000), DateTime(2001), DateTime(2002)], a=[1, 2, 3], b=[10.0, 20.0, 30.0])"><pre><span class="pl-k">using</span> Dates
<span class="pl-k">using</span> DataFrames
x <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>(t<span class="pl-k">=</span>[<span class="pl-c1">DateTime</span>(<span class="pl-c1">2000</span>), <span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>), <span class="pl-c1">DateTime</span>(<span class="pl-c1">2002</span>)], a<span class="pl-k">=</span>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>], b<span class="pl-k">=</span>[<span class="pl-c1">10.0</span>, <span class="pl-c1">20.0</span>, <span class="pl-c1">30.0</span>])</pre></div>
<p dir="auto">This produces the following table:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="3×3 DataFrame
 Row │ t                    a      b       
     │ DateTime             Int64  Float64 
─────┼─────────────────────────────────────
   1 │ 2000-01-01T00:00:00      1     10.0
   2 │ 2001-01-01T00:00:00      2     20.0
   3 │ 2002-01-01T00:00:00      3     30.0"><pre class="notranslate"><code>3×3 DataFrame
 Row │ t                    a      b       
     │ DateTime             Int64  Float64 
─────┼─────────────────────────────────────
   1 │ 2000-01-01T00:00:00      1     10.0
   2 │ 2001-01-01T00:00:00      2     20.0
   3 │ 2002-01-01T00:00:00      3     30.0
</code></pre></div>
<p dir="auto">To write this to disk, we use <code>TeaFiles.write</code>.
A tea file contains a header with various metadata, including column names and types which are automatically inferred from the table's schema.
Other supported metadata can be specified with optional arguments to <code>TeaFiles.write</code>.</p>
<p dir="auto">Note that the first column of <code>DateTime</code> type, if present, is used as the primary index for the tea file.
As such the values therein <em>must</em> be non-decreasing in order to comply with the specification.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TeaFiles
TeaFiles.write(&quot;moo.tea&quot;, x)"><pre><span class="pl-k">using</span> TeaFiles
TeaFiles<span class="pl-k">.</span><span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">"</span>moo.tea<span class="pl-pds">"</span></span>, x)</pre></div>
<p dir="auto">The data can be read back with <code>TeaFiles.read</code>, which returns a <code>Tables</code>-compatible object.
We can pipe this into the <code>DataFrame</code> constructor to get an object that is equal to the origianl.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="TeaFiles.read(&quot;moo.tea&quot;) |&gt; DataFrame"><pre>TeaFiles<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>moo.tea<span class="pl-pds">"</span></span>) <span class="pl-k">|&gt;</span> DataFrame</pre></div>
<h3 dir="auto"><a id="user-content-reading-a-sub-interval" class="anchor" aria-hidden="true" href="#reading-a-sub-interval"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reading a sub-interval</h3>
<p dir="auto">If there is a time column, it is guaranteed that its values will be non-decreasing.
We can therefore efficiently read a small time interval in a large file by performing a binary search to find the start point.
One can specify this interval as an argument to <code>TeaFiles.read</code>, for example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="y = TeaFiles.read(&quot;moo.tea&quot;; lower=DateTime(2001)) |&gt; DataFrame
println(y)"><pre>y <span class="pl-k">=</span> TeaFiles<span class="pl-k">.</span><span class="pl-c1">read</span>(<span class="pl-s"><span class="pl-pds">"</span>moo.tea<span class="pl-pds">"</span></span>; lower<span class="pl-k">=</span><span class="pl-c1">DateTime</span>(<span class="pl-c1">2001</span>)) <span class="pl-k">|&gt;</span> DataFrame
<span class="pl-c1">println</span>(y)</pre></div>
<p dir="auto">gives:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="2×3 DataFrame
 Row │ t                    a      b       
     │ DateTime             Int64  Float64 
─────┼─────────────────────────────────────
   1 │ 2001-01-01T00:00:00      2     20.0
   2 │ 2002-01-01T00:00:00      3     30.0"><pre class="notranslate"><code>2×3 DataFrame
 Row │ t                    a      b       
     │ DateTime             Int64  Float64 
─────┼─────────────────────────────────────
   1 │ 2001-01-01T00:00:00      2     20.0
   2 │ 2002-01-01T00:00:00      3     30.0
</code></pre></div>
<h2 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h2>
<ul dir="auto">
<li>
<p dir="auto">We define the epoch relative to 0001-01-01.
The specification states that the reference is 0000-01-01, however this seems to be an error.
The example given within the specification, and Python &amp; .NET implementations by DiscreteLogics, are consistent with a reference of 0001-01-01.</p>
</li>
<li>
<p dir="auto">The specification makes no mention of time zones, and therefore we work with time-zone naive <code>DateTime</code> objects in Julia.
Users are recommended to store times in UTC to avoid ambiguities around DST changepoints.</p>
</li>
<li>
<p dir="auto">We do not plan to support the .NET decimal type (type code <code>0x200</code> in the standard).</p>
</li>
</ul>
</article></div>