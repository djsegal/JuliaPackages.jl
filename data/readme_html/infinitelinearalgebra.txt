<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-infinitelinearalgebrajl" class="anchor" aria-hidden="true" href="#infinitelinearalgebrajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InfiniteLinearAlgebra.jl</h1>
<p>A Julia repository for linear algebra with infinite banded and block-banded matrices</p>
<p><a href="https://travis-ci.org/JuliaMatrices/InfiniteLinearAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7cabd9ba88130de3056b44ef3d067bf1a553b14e/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d617472696365732f496e66696e6974654c696e656172416c67656272612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMatrices/InfiniteLinearAlgebra.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://codecov.io/gh/JuliaMatrices/InfiniteLinearAlgebra.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4238d001beeed74b979b085f790f3d964b1cbbb8/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614d617472696365732f496e66696e6974654c696e656172416c67656272612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaMatrices/InfiniteLinearAlgebra.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-infinite-dimensional-qr-factorization" class="anchor" aria-hidden="true" href="#infinite-dimensional-qr-factorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Infinite-dimensional QR factorization</h2>
<p>This currently supports the infinite-dimensional QR factorization for banded matrices, also known as the adaptive QR decomposition as the entries of the QR decomposition are determined lazily.</p>
<p>As a simple example, consider the Bessel recurrence relationship:
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0e1dd03dead6c2024a5dc2cab202fcbcac622dd9/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f4a5f7b6e2d317d287a292d7b326e5c6f7665722532307a7d4a5f6e287a292b4a5f7b6e2b317d287a293d30"><img src="https://camo.githubusercontent.com/0e1dd03dead6c2024a5dc2cab202fcbcac622dd9/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f4a5f7b6e2d317d287a292d7b326e5c6f7665722532307a7d4a5f6e287a292b4a5f7b6e2b317d287a293d30" data-canonical-src="https://latex.codecogs.com/svg.latex?J_{n-1}(z)-{2n\over%20z}J_n(z)+J_{n+1}(z)=0" style="max-width:100%;"></a>
This can be recast as an infinite linear system:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> InfiniteLinearAlgebra, InfiniteArrays, BandedMatrices, FillArrays, SpecialFunctions

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">10_000</span>; <span class="pl-c"><span class="pl-c">#</span> the bigger z the longer before we see convergence</span>

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">BandedMatrix</span>(<span class="pl-c1">0</span> <span class="pl-k">=&gt;</span> <span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">*</span>(<span class="pl-c1">0</span><span class="pl-k">:</span>∞)<span class="pl-k">/</span>z, <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Ones</span>(∞), <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Ones</span>(∞))
∞<span class="pl-k">×</span>∞ BandedMatrix{Float64,ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(<span class="pl-k">*</span>),Tuple{Array{Float64,<span class="pl-c1">2</span>},ApplyArray{Float64,<span class="pl-c1">2</span>,<span class="pl-c1">typeof</span>(vcat),Tuple{Transpose{Float64,InfiniteArrays<span class="pl-k">.</span>InfStepRange{Float64,Float64}},Ones{Float64,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}}},Ones{Float64,<span class="pl-c1">2</span>,Tuple{Base<span class="pl-k">.</span>OneTo{Int64},InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}}}}}}},InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">×</span><span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      …  
 <span class="pl-c1">1.0</span>  <span class="pl-k">-</span><span class="pl-c1">0.0002</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>    <span class="pl-c1">1.0</span>     <span class="pl-k">-</span><span class="pl-c1">0.0004</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>       <span class="pl-c1">1.0</span>     <span class="pl-k">-</span><span class="pl-c1">0.0006</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-c1">1.0</span>     <span class="pl-k">-</span><span class="pl-c1">0.0008</span>   <span class="pl-c1">1.0</span>      <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-c1">1.0</span>     <span class="pl-k">-</span><span class="pl-c1">0.001</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      …  
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-c1">1.0</span>    <span class="pl-k">-</span><span class="pl-c1">0.0012</span>   <span class="pl-c1">1.0</span>       <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      <span class="pl-c1">1.0</span>     <span class="pl-k">-</span><span class="pl-c1">0.0014</span>   <span class="pl-c1">1.0</span>        
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>       <span class="pl-c1">1.0</span>     <span class="pl-k">-</span><span class="pl-c1">0.0016</span>     
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-c1">1.0</span>        
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>      …  
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
  <span class="pl-k">⋅</span>     <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>       <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>        <span class="pl-k">⋅</span>         
 ⋮                                         ⋮                                 ⋱  </pre></div>
<p>The first row corresponds to specifying an initial condition. Thus we can determine the Bessel functions via solving the recurrence:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">\</span> [<span class="pl-c1">besselj</span>(<span class="pl-c1">1</span>,z); <span class="pl-c1">Zeros</span>(∞)] 
∞<span class="pl-k">-</span>element LazyArrays<span class="pl-k">.</span>CachedArray{Float64,<span class="pl-c1">1</span>,Array{Float64,<span class="pl-c1">1</span>},Zeros{Float64,<span class="pl-c1">1</span>,Tuple{InfiniteArrays<span class="pl-k">.</span>OneToInf{Int64}}}} with indices <span class="pl-c1">OneToInf</span>()<span class="pl-k">:</span>
 <span class="pl-k">-</span><span class="pl-c1">0.007096160353406478</span> 
  <span class="pl-c1">0.0036474507555295833</span>
  <span class="pl-c1">0.007096889843557584</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.0036446119995921654</span>
 <span class="pl-k">-</span><span class="pl-c1">0.007099076610757337</span> 
  <span class="pl-c1">0.0036389327383035616</span>
  <span class="pl-c1">0.00710271554349564</span>  
 <span class="pl-k">-</span><span class="pl-c1">0.003630409479651369</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.007107798116767152</span> 
  <span class="pl-c1">0.0036190370026645442</span>
  <span class="pl-c1">0.007114312383371949</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.0036048083778978026</span>
 <span class="pl-k">-</span><span class="pl-c1">0.0071222429618033245</span>
  <span class="pl-c1">0.0035877149947894766</span>
  <span class="pl-c1">0.007131571020789777</span> 
  ⋮                    

julia<span class="pl-k">&gt;</span> J[<span class="pl-c1">1000</span>] <span class="pl-k">-</span> <span class="pl-c1">besselj</span>(<span class="pl-c1">999</span>,z) <span class="pl-c"><span class="pl-c">#</span> matches besselj to high (relative) accuracy</span>
<span class="pl-k">-</span><span class="pl-c1">6.8252695162307475e-15</span>

julia<span class="pl-k">&gt;</span> J[<span class="pl-c1">11_000</span>] <span class="pl-k">-</span> <span class="pl-c1">besselj</span>(<span class="pl-c1">11_000</span><span class="pl-k">-</span><span class="pl-c1">1</span>, z)
<span class="pl-c1">3.3730094946097293e-143</span></pre></div>
<p>We're even faster than SpecialFunctions.jl for constructing a range of Bessel functions:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> [<span class="pl-c1">besselj</span>(k<span class="pl-k">-</span><span class="pl-c1">1</span>, z) <span class="pl-k">for</span> k<span class="pl-k">=</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">11_000</span><span class="pl-k">-</span><span class="pl-c1">1</span>];
  <span class="pl-c1">0.188690</span> seconds (<span class="pl-c1">77.20</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">3.295</span> MiB)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> J <span class="pl-k">=</span> A <span class="pl-k">\</span> <span class="pl-c1">Vcat</span>([<span class="pl-c1">besselj</span>(<span class="pl-c1">1</span>,z)], <span class="pl-c1">Zeros</span>(∞));
  <span class="pl-c1">0.006354</span> seconds (<span class="pl-c1">90.93</span> k allocations<span class="pl-k">:</span> <span class="pl-c1">6.791</span> MiB)</pre></div>
<h2><a id="user-content-infinite-dimensional-ql-factorization" class="anchor" aria-hidden="true" href="#infinite-dimensional-ql-factorization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Infinite-dimensional QL factorization</h2>
<p>This currently supports the infinite-dimensional QL factorization for perturbations of Toeplitz operators. Here is an example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> Bull head matrix</span>
A <span class="pl-k">=</span> <span class="pl-c1">BandedMatrix</span>(<span class="pl-k">-</span><span class="pl-c1">3</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">7</span><span class="pl-k">/</span><span class="pl-c1">10</span>,∞), <span class="pl-k">-</span><span class="pl-c1">2</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">1</span>,∞), <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Fill</span>(<span class="pl-c1">2im</span>,∞))
<span class="pl-c1">ql</span>(A <span class="pl-k">-</span> <span class="pl-c1">5</span><span class="pl-k">*</span>I)</pre></div>
<p>The infinite-dimensional QL factorization is a subtly thing: its defined when the operator has non-positive Fredholm index, and if the Fredholm index is not zero, it may not be unique. For the Bull head matrix <code>A</code>, here are plots of <code>ql(A-λ*I).L[1,1]</code> alongside the image of the symbol <code>A</code>, which depicts the essential spectrum of <code>A</code> and where the Fredholm index changes. Note we have two plots as the regions with negative Fredholm index  have multiple QL factorizations. Where the Fredholm index is positive, the QL factorization doesn't exist and is depected in black.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMatrices/InfiniteLinearAlgebra.jl/raw/master/images/ql1.png"><img src="https://github.com/JuliaMatrices/InfiniteLinearAlgebra.jl/raw/master/images/ql1.png" width="500" height="400" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/JuliaMatrices/InfiniteLinearAlgebra.jl/raw/master/images/ql2.png"><img src="https://github.com/JuliaMatrices/InfiniteLinearAlgebra.jl/raw/master/images/ql2.png" width="500" height="400" style="max-width:100%;"></a></p>
</article></div>