<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-roundingintegers" class="anchor" aria-hidden="true" href="#roundingintegers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RoundingIntegers</h1>
<p><a href="https://travis-ci.org/JuliaMath/RoundingIntegers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/985bfe90826022584ed93e31b19dca4e2e5f717a/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614d6174682f526f756e64696e67496e7465676572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaMath/RoundingIntegers.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaMath/RoundingIntegers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ec8ea658fc5f6c1dd7fe1a54e144503176f6815a/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614d6174682f526f756e64696e67496e7465676572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaMath/RoundingIntegers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>RoundingIntegers defines new integer types for the Julia programming
language. Rounding integers act very much like regular integers,
except that you can safely assign floating-point values to them. As the name
suggests, such assignments cause rounding to the nearest integer.</p>
<p>Demonstration:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RoundingIntegers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int</span>(<span class="pl-c1">7.2</span>)     <span class="pl-c"><span class="pl-c">#</span> fails with "regular" integers</span>
ERROR<span class="pl-k">:</span> <span class="pl-c1">InexactError</span>()
 <span class="pl-k">in</span> <span class="pl-c1">Int64</span>(<span class="pl-k">::</span><span class="pl-c1">Float64</span>) at <span class="pl-k">./</span>sysimg<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">53</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">RInt</span>(<span class="pl-c1">7.2</span>)    <span class="pl-c"><span class="pl-c">#</span> but not with a rounding integer</span>
<span class="pl-c1">7</span>

julia<span class="pl-k">&gt;</span> (<span class="pl-c1">map</span>(RInt, <span class="pl-c1">1.5</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4.5</span>)<span class="pl-k">...</span>,)  <span class="pl-c"><span class="pl-c">#</span> rounds half integers to nearest even </span>
(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> a <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{RUInt8}</span>(undef, <span class="pl-c1">2</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{RoundingIntegers<span class="pl-k">.</span>RUInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x42</span>
 <span class="pl-c1">0x61</span>

julia<span class="pl-k">&gt;</span> a[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1.7</span>
<span class="pl-c1">1.7</span>

julia<span class="pl-k">&gt;</span> a[<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">128.1</span>
<span class="pl-c1">128.1</span>

julia<span class="pl-k">&gt;</span> a
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{RoundingIntegers<span class="pl-k">.</span>RUInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x02</span>
 <span class="pl-c1">0x80</span></pre></div>
<p>The following types are available:</p>
<ul>
<li><code>RInteger</code> (<code>RInteger(i)</code> converts <code>i</code> to the corresponding <code>RInteger</code> type)</li>
<li><code>RSigned</code>, <code>RUnsigned</code></li>
<li><code>RInt8</code>, <code>RUInt8</code></li>
<li><code>RInt16</code>, <code>RUInt16</code></li>
<li><code>RInt32</code>, <code>RUInt32</code></li>
<li><code>RInt64</code>, <code>RUInt64</code></li>
<li><code>RInt128</code>, <code>RUInt128</code></li>
<li><code>RInt</code>, <code>RUInt</code> (defaults to the platform's WORD_SIZE representation)</li>
</ul>
<p>Most operations involving rounding integers promote to regular
integers. Only a small subset of operations (e.g., bit-shift operations,
negation, and certain arithmetic involving numbers of all the same
type) preserve the type of <code>RInteger</code>s.</p>
</article></div>