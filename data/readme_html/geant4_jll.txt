<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-geant4_jlljl" class="anchor" aria-hidden="true" href="#geant4_jlljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Geant4_jll.jl</h1>
<p>This is an autogenerated package constructed using <a href="https://github.com/JuliaPackaging/BinaryBuilder.jl"><code>BinaryBuilder.jl</code></a>.</p>
<h2><a id="user-content-products" class="anchor" aria-hidden="true" href="#products"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Products</h2>
<p>The code bindings within this package are autogenerated from the following <code>Products</code> defined within the <code>build_tarballs.jl</code> file that generated this package:</p>
<div class="highlight highlight-source-julia"><pre>products <span class="pl-k">=</span> [
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4Tree<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Tree</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4tracking<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Tracking</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4digits_hits<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Digits</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4analysis<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Analysis</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4geometry<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Geometry</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4particles<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Particles</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4modeling<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Modeling</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4persistency<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Persistency</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4FR<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4FR</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4visXXX<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4VisXXX</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4interfaces<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Interfaces</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4GMocren<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Mocren</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4RayTracer<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4RayTracer</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4global<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Global</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4parmodels<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4ParModels</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4VRML<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4VRML</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4run<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Run</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4readout<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Readout</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4processes<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Processes</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4intercoms<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Intercoms</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4event<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Event</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4materials<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Material</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4zlib<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Zlib</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4error_propagation<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4ErrorPropagation</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4physicslists<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4PhysicsLists</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4vis_management<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4visManagement</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4visHepRep<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4VisHepRep</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4graphics_reps<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Graphics</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4track<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4Track</span>),
    <span class="pl-c1">LibraryProduct</span>([<span class="pl-s"><span class="pl-pds">"</span>libG4clhep<span class="pl-pds">"</span></span>], <span class="pl-c1">:libG4CLHEP</span>)
]</pre></div>
<h2><a id="user-content-usage-example" class="anchor" aria-hidden="true" href="#usage-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage example</h2>
<p>For example purposes, we will assume that the following products were defined in the imaginary package <code>Example_jll</code>:</p>
<div class="highlight highlight-source-julia"><pre>products <span class="pl-k">=</span> [
    <span class="pl-c1">FileProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>src/data.txt<span class="pl-pds">"</span></span>, <span class="pl-c1">:data_txt</span>),
    <span class="pl-c1">LibraryProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>libdataproc<span class="pl-pds">"</span></span>, <span class="pl-c1">:libdataproc</span>),
    <span class="pl-c1">ExecutableProduct</span>(<span class="pl-s"><span class="pl-pds">"</span>mungify<span class="pl-pds">"</span></span>, <span class="pl-c1">:mungify_exe</span>)
]</pre></div>
<p>With such products defined, <code>Example_jll</code> would contain <code>data_txt</code>, <code>libdataproc</code> and <code>mungify_exe</code> symbols exported. For <code>FileProduct</code> variables, the exported value is a string pointing to the location of the file on-disk.  For <code>LibraryProduct</code> variables, it is a string corresponding to the <code>SONAME</code> of the desired library (it will have already been <code>dlopen()</code>'ed, so typical <code>ccall()</code> usage applies), and for <code>ExecutableProduct</code> variables, the exported value is a function that can be called to set appropriate environment variables.  Example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Example_jll

<span class="pl-c"><span class="pl-c">#</span> For file products, you can access its file location directly:</span>
data_lines <span class="pl-k">=</span> <span class="pl-c1">open</span>(data_txt, <span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> io
    <span class="pl-c1">readlines</span>(io)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> For library products, you can use the exported variable name in `ccall()` invocations directly</span>
num_chars <span class="pl-k">=</span> <span class="pl-c1">ccall</span>((<span class="pl-c1">:count_characters</span>, libdataproc), Cint, (Cstring, Cint), data_lines[<span class="pl-c1">1</span>], <span class="pl-c1">length</span>(data_lines[<span class="pl-c1">1</span>]))

<span class="pl-c"><span class="pl-c">#</span> For executable products, you can use the exported variable name as a function that you can call</span>
<span class="pl-c1">mungify_exe</span>() <span class="pl-k">do</span> mungify_exe_path
    <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span><span class="pl-v">$mungify_exe_path</span> <span class="pl-v">$num_chars</span><span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
</article></div>