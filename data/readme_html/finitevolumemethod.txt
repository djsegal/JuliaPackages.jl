<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-finitevolumemethod" class="anchor" aria-hidden="true" href="#finitevolumemethod"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FiniteVolumeMethod</h1>
<p dir="auto"><a href="https://zenodo.org/badge/latestdoi/561533716" rel="nofollow"><img src="https://camo.githubusercontent.com/950242fb47c2d5db42cc9f60930e567f89e78c5d03b458b9a34fe31c8d2a3c82/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3536313533333731362e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/561533716.svg" style="max-width: 100%;"></a>
<a href="https://DanielVandH.github.io/FiniteVolumeMethod.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://DanielVandH.github.io/FiniteVolumeMethod.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/DanielVandH/FiniteVolumeMethod.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c49cfc9311fd464abf3c8b95ee6b3473941b54af99c2ca206026e7374de099db/68747470733a2f2f636f6465636f762e696f2f67682f44616e69656c56616e64482f46696e697465566f6c756d654d6574686f642e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d58504d354b4e38395236" alt="Coverage" data-canonical-src="https://codecov.io/gh/DanielVandH/FiniteVolumeMethod.jl/branch/main/graph/badge.svg?token=XPM5KN89R6" style="max-width: 100%;"></a></p>
<p dir="auto">This is a package for solving partial differential equations (PDEs) of the form</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$$
\dfrac{\partial u(x, y, t)}{\partial t} + \boldsymbol{\nabla} \boldsymbol{\cdot} \boldsymbol{q}(x, y, t, u) = R(x, y, t, u), \quad (x, y)^{\mathsf T} \in \Omega \subset \mathbb R^2,t&gt;0,
$$</math-renderer></p>
<p dir="auto">or</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$$
\boldsymbol{\nabla} \boldsymbol{\cdot} \boldsymbol{q}(x, y, u) = R(x, y, u), \quad (x, y)^{\mathsf T} \in \Omega \subset \mathbb R^2,
$$</math-renderer></p>
<p dir="auto">with flux and reaction functions <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\boldsymbol{q}$</math-renderer> and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$R$</math-renderer>, respectively, using the finite volume method. The boundary conditions are assumed to take on any of the three forms:</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$$
\begin{array}{rcl}
\boldsymbol{q}(x, y, t, u) \boldsymbol{\cdot} \hat{\boldsymbol{n}}(x, y) = 0, \\
\mathrm du(x, y, t)/\mathrm dt = a(x, y, t, u), \\
u(x, y, t) = a(x, y, t, u),
\end{array} \quad (x, y)^{\mathsf T} \in \partial\Omega.
$$</math-renderer></p>
<p dir="auto">This first condition is a <em>homogeneous Neumann</em> boundary condition, letting <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\hat{\boldsymbol{n}}(x, y)$</math-renderer> be the unit outward normal vector field on <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\partial\Omega$</math-renderer> (the boundary of <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\Omega$</math-renderer>); it is possible to extend this to the inhomogeneous case, it just has not been done yet. The second condition is a <em>time-dependent Dirichlet</em> condition, and the last condition is a <em>Dirichlet</em> condition.</p>
<p dir="auto">An interface is also provided for solving equations of the form</p>
<p dir="auto"><math-renderer class="js-display-math" style="display: block" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$$
\frac{\partial u(x, y, t)}{\partial t} = \boldsymbol{\nabla} \boldsymbol{\cdot} \left[T(x, y, t, u)D(x, y, t, u)\boldsymbol{\nabla} u(x, y, t)\right] + T(x, y, t, u)R(x, y, t, u),
$$</math-renderer></p>
<p dir="auto">and similarly if <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\partial u/\partial t = 0$</math-renderer>, where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$T$</math-renderer> is called the <em>delay function</em>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$D$</math-renderer> the <em>diffusion function</em>, and <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$R$</math-renderer> the <em>reaction function</em>; the same delay is assumed to scale both diffusion and reaction. The conversion is done by noting that the corresponding flux function <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\boldsymbol{q} = (q_1, q_2)^{\mathsf T}$</math-renderer> is simply <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$q_i(x, y, t, u) = -T(x, y, t, u)D(x, y, t, u)g_i$</math-renderer>, <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$i=1,2$</math-renderer>, where <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$(g_1, g_2)^{\mathsf T} \equiv \boldsymbol{\nabla}u(x, y, t)$</math-renderer> (gradients are approximated using linear interpolants; more on this in the Mathematical Details section of the docs). Similarly, the reaction function is modified so that <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="26430dfc402398a5a68b8b7c1f8a81d9">$\tilde{R}(x, y, t, u) = T(x, y, t, u)R(x, y, t, u)$</math-renderer>.</p>
<p dir="auto">If this package doesn't suit what you need, you may like to review some of the other PDE packages shown <a href="https://github.com/JuliaPDE/SurveyofPDEPackages">here</a>.</p>
<p dir="auto">Please see the docs for more information.</p>
</article></div>