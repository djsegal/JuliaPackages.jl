<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-uaparser" class="anchor" aria-hidden="true" href="#uaparser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UAParser</h1>
<p><a href="https://travis-ci.org/JuliaWeb/UAParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/95a321c56932f819495ad999e636b9d75e670ebb/68747470733a2f2f7472617669732d63692e6f72672f4a756c69615765622f55415061727365722e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaWeb/UAParser.jl.svg?branch=master" style="max-width:100%;"></a> <br>
<a href="https://coveralls.io/r/JuliaWeb/UAParser.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e28981888a491d3153a5e552128d062e350aa762/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c69615765622f55415061727365722e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaWeb/UAParser.jl/badge.svg" style="max-width:100%;"></a></p>
<p>UAParser is a Julia port of <a href="https://github.com/ua-parser/uap-python">ua-parser</a>, which itself is a multi-language port of <a href="http://www.browserscope.org" rel="nofollow">BrowserScope's</a> <a href="http://code.google.com/p/ua-parser/" rel="nofollow">user agent string parser</a>. Per the <a href="https://github.com/ua-parser/uap-core/blob/master/README.md">README file</a> of the main project:</p>
<blockquote>
<p>"The crux of the original parser--the data collected by <a href="http://stevesouders.com/" rel="nofollow">Steve Souders</a> over the years--has been extracted into a separate <a href="https://github.com/tobie/ua-parser/blob/master/regexes.yaml">YAML file</a> so as to be reusable <em>as is</em> by implementations in other programming languages."</p>
</blockquote>
<p>UAParser is a limited Julia implementation heavily influenced by the <a href="https://github.com/ua-parser/uap-python">Python code</a> from the ua-parser library.</p>
<p>New regexes have were retrieved from <a href="https://github.com/ua-parser/uap-core/blob/master/regexes.yaml">here</a> on 2018-12-19.</p>
<h2><a id="user-content-uaparser-api" class="anchor" aria-hidden="true" href="#uaparser-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UAParser API</h2>
<p>The API for UAParser revolves around three functions: <code>parsedevice</code>, <code>parseos</code> and <code>parseuseragent</code>. Each function takes one argument, <code>user_agent_string::AbstractString</code> and returns a custom Julia type: <code>DeviceResult</code>, <code>OSResult</code>, or <code>UAResult</code>. The structure of each type is as follows:</p>
<pre><code>  DeviceResult: family, brand, model

  UAResult: family, major, minor, patch

  OSResult: family, major, minor, patch, patch_minor
</code></pre>
<h2><a id="user-content-code-examples" class="anchor" aria-hidden="true" href="#code-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Code examples</h2>
<div class="highlight highlight-source-julia"><pre>  <span class="pl-k">using</span> UAParser

  <span class="pl-c"><span class="pl-c">#</span>Example user-agent string</span>
  user_agent_string <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B179 Safari/7534.48.3<span class="pl-pds">"</span></span>

  <span class="pl-c"><span class="pl-c">#</span>Get device from user-agent string</span>
  <span class="pl-c1">parsedevice</span>(user_agent_string) <span class="pl-c"><span class="pl-c">#</span>&gt; DeviceResult("iPhone", "Apple", "iPhone")</span>

  <span class="pl-c"><span class="pl-c">#</span>Get browser information from user-agent string</span>
  <span class="pl-c1">parseuseragent</span>(user_agent_string) <span class="pl-c"><span class="pl-c">#</span>&gt; UAResult("Mobile Safari","5","1",missing)</span>

  <span class="pl-c"><span class="pl-c">#</span>Get os information</span>
  <span class="pl-c1">parseos</span>(user_agent_string) <span class="pl-c"><span class="pl-c">#</span>&gt; OSResult("iOS","5","1",missing,missing)</span>
</pre></div>
<p>You can index into the results of these functions like any other Julia composite type.</p>
<div class="highlight highlight-source-julia"><pre>  <span class="pl-c"><span class="pl-c">#</span>Get just browser information, no version information</span>
  x1 <span class="pl-k">=</span> <span class="pl-c1">parseuseragent</span>(user_agent_string)
  x1<span class="pl-k">.</span>family <span class="pl-c"><span class="pl-c">#</span>&gt; "Mobile Safari"</span>

  <span class="pl-c"><span class="pl-c">#</span>Get the os, no version information</span>
  x2 <span class="pl-k">=</span> <span class="pl-c1">parseos</span>(user_agent_string)
  x2<span class="pl-k">.</span>family <span class="pl-c"><span class="pl-c">#</span>&gt; "iOS"</span></pre></div>
<h2><a id="user-content-a-note-on-parser-accuracy" class="anchor" aria-hidden="true" href="#a-note-on-parser-accuracy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A Note On Parser Accuracy</h2>
<p>When this library was created, it became very obvious that it would be hard to replicate the Python parser code with 100% accuracy. The authors decided that a <em>reasonably accurate</em> implementation was more useful than spending the time to achieve 100% accuracy.</p>
<p>The tests in this library test against the accuracy of the parser. As of v0.6 of this package, here are the accuracy statistics against the files provided by the main ua-core project:</p>
<pre><code>parse_device: 15144/16017 (94.6%)
parse_os: 1517/1528 (99.3%)
parse_ua: 204/205 (99.5%)
</code></pre>
<p>Of course, if someone would like to achieve 100% accuracy, PRs will absolutely be reviewed.</p>
<h2><a id="user-content-licensing" class="anchor" aria-hidden="true" href="#licensing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Licensing</h2>
<p>The licensing of the UAParser Julia module is under the <a href="https://github.com/JuliaWeb/UAParser.jl/blob/master/LICENSE.md">default MIT Expat license</a>. The data
contained in regexes.yaml is Copyright 2009 Google Inc. and available under the Apache License, Version 2.0.</p>
</article></div>