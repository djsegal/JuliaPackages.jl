<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-functiontabulations" class="anchor" aria-hidden="true" href="#functiontabulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FunctionTabulations</h1>
<p dir="auto"><a href="https://github.com/aurelio-amerio/FunctionTabulations.jl/actions/workflows/CI.yml"><img src="https://github.com/aurelio-amerio/FunctionTabulations.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/aurelio-amerio/FunctionTabulations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/db525178904321e9b11362f80ab38859b091b33ab3df66d4b2b23208c20a96be/68747470733a2f2f636f6465636f762e696f2f67682f617572656c696f2d616d6572696f2f46756e6374696f6e546162756c6174696f6e732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/aurelio-amerio/FunctionTabulations.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://aurelio-amerio.github.io/FunctionTabulations.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This package is a wrapper around <a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a> to compute interpolation tables (FunctionTabulations) for functions of up to three variables with support for Unitful.</p>
<p dir="auto">This package stems from the common need in physics research projects to tabulate slow functions. With this package, it becomes possible to easily compute the values of a function and tabulate its values for up to three variables.</p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;FunctionTabulations&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>FunctionTabulations<span class="pl-pds">"</span></span>)</pre></div>
<h1 dir="auto"><a id="user-content-usage-1d-functiontabulations" class="anchor" aria-hidden="true" href="#usage-1d-functiontabulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage: 1D FunctionTabulations</h1>
<h2 dir="auto"><a id="user-content-simple-usage" class="anchor" aria-hidden="true" href="#simple-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simple usage</h2>
<p dir="auto">To compute and load the tabulation of a function with one variable, it is necessary to use <code>create_tabulation_1D</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FunctionTabulations

func_1D(x) = sin(x)

sin_tabulation = create_tabulation_1D(func_1D, xmin = 0.0, xmax = 3.0, npoints = 100) # produces a file called `func_1D_data.jld2`

isapprox(sin(3.0), sin_tabulation(3.0), rtol=1e-3)"><pre><span class="pl-k">using</span> FunctionTabulations

<span class="pl-en">func_1D</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)

sin_tabulation <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(func_1D, xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>, npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> produces a file called `func_1D_data.jld2`</span>

<span class="pl-c1">isapprox</span>(<span class="pl-c1">sin</span>(<span class="pl-c1">3.0</span>), <span class="pl-c1">sin_tabulation</span>(<span class="pl-c1">3.0</span>), rtol<span class="pl-k">=</span><span class="pl-c1">1e-3</span>)</pre></div>
<p dir="auto">It is always necessary to specify the function to be tabulated, the interval and the number of points of the tabulation grid.
The routine will compute <code>npoints</code> values of the function in the range <code>xmin:xmax</code>, save the table in a <code>.jld2</code> file, and return the interpolating function of the tabulated data. If a proper <code>.jld2</code> file already exists for that function, and it was computed in the same <code>x</code> range with the same number of points <code>npoints</code>, it will automatically be loaded on subsequent calls of <code>compute_tabulation_1D</code>.</p>
<h2 dir="auto"><a id="user-content-logarithmic-scale" class="anchor" aria-hidden="true" href="#logarithmic-scale"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Logarithmic scale</h2>
<p dir="auto">Sometimes, it is more advantageous to tabulate a function using a logarithmic scale. For example, a function <code>y=f(x)</code> might display a more linear trend when the <code>x</code> or <code>f(x)</code> axis is expressed in logarithmic (<code>log10</code>) scale. In this case, it is possible to ask the routine to tabulate or interpolate that axis in logarithmic scale. For example, given the function <code>f(x)=10^x</code>, it is more advantageous to consider the <code>f(x)</code> axis in logarithmic scale for the interpolation:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_1D(x) = 10^x

func_1D_tabulation = create_tabulation_1D(func_1D, xmin = 0.0, xmax = 3.0, npoints = 100, f_scale=:log10)

isapprox(func_1D(3.0), func_1D_tabulation(3.0), rtol=1e-3)"><pre><span class="pl-en">func_1D</span>(x) <span class="pl-k">=</span> <span class="pl-c1">10</span><span class="pl-k">^</span>x

func_1D_tabulation <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(func_1D, xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>, npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>, f_scale<span class="pl-k">=</span><span class="pl-c1">:log10</span>)

<span class="pl-c1">isapprox</span>(<span class="pl-c1">func_1D</span>(<span class="pl-c1">3.0</span>), <span class="pl-c1">func_1D_tabulation</span>(<span class="pl-c1">3.0</span>), rtol<span class="pl-k">=</span><span class="pl-c1">1e-3</span>)</pre></div>
<p dir="auto">On the other hand, a function which needs to be interpolated in a wide range of <code>x</code> and does not vary harshly with <code>x</code> may benefit from the option <code>x_scale=:log10</code>.</p>
<h2 dir="auto"><a id="user-content-unitful-support" class="anchor" aria-hidden="true" href="#unitful-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Unitful support</h2>
<p dir="auto">FunctionTabulations.jl supports <a href="https://github.com/PainterQubits/Unitful.jl">Unitful.jl</a>. It is possible to tabulate functions which have variables of the <code>Quantity</code> type, and/or return quantities. This means that units of measurement are fully supported.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Unitful

func_1d(x) = x^2

itp_1d_1 = create_tabulation_1D(
    func_1d,
    custom_name = &quot;1d_1&quot;,
    xmin = 0.0u&quot;m&quot;,
    xmax = 3.0u&quot;m&quot;,
    npoints = 100,
    x_scale = :linear,
    f_scale = :linear
)

isapprox(itp_1d_1(2.0u&quot;m&quot;), func_1d(2.0u&quot;m&quot;), rtol = 1e-3)
    "><pre><span class="pl-k">using</span> Unitful

<span class="pl-en">func_1d</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

itp_1d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    custom_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1d_1<span class="pl-pds">"</span></span>,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>
)

<span class="pl-c1">isapprox</span>(<span class="pl-c1">itp_1d_1</span>(<span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">func_1d</span>(<span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), rtol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)
    </pre></div>
<p dir="auto">In the case of a tabulation with units of measurement, the unit of the result of the tabulated function is the one returned by <code>f(xmin)</code>. Nontheless, it supports automatic unit conversion for the input variables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_1d(x) = x^2

itp_1d_1 = create_tabulation_1D(
    func_1d,
    custom_name = &quot;1d_1&quot;,
    xmin = 0.0u&quot;m&quot;,
    xmax = 3.0u&quot;m&quot;,
    npoints = 100,
    x_scale = :linear,
    f_scale = :linear
)

isapprox(itp_1d_1(2.0u&quot;m&quot;), itp_1d_1(200.0u&quot;cm&quot;), rtol = 1e-3)
    "><pre><span class="pl-en">func_1d</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>

itp_1d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    custom_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1d_1<span class="pl-pds">"</span></span>,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>
)

<span class="pl-c1">isapprox</span>(<span class="pl-c1">itp_1d_1</span>(<span class="pl-c1">2.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>m<span class="pl-pds">"</span></span>), <span class="pl-c1">itp_1d_1</span>(<span class="pl-c1">200.0</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">u</span>"</span>cm<span class="pl-pds">"</span></span>), rtol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)
    </pre></div>
<h2 dir="auto"><a id="user-content-save-location" class="anchor" aria-hidden="true" href="#save-location"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Save location</h2>
<p dir="auto">It is possible to specify the folder where to save/load the interpolation using the option <code>jld_base_path</code>. Furthermore it is possible to specify the name of the file in which the interpolation will be stored using the option <code>custom_name</code>. Please note that the suffix <code>_data.jld2</code> will always be appended to the filename when the tabulation is stored.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_1d(x) = sin(x)

itp_1d_2 = create_tabulation_1D(
    func_1d,
    jld_base_path = &quot;interpolations&quot;,
    custom_name = &quot;1d_2&quot;,
    xmin = 0.0,
    xmax = 3.0,
    npoints = 100,
) 
# will generate a file called &quot;1d_2_data.jld2&quot; in the folder &quot;interpolations&quot;. 
# If the folder doesn't exist, the routine will create it."><pre><span class="pl-en">func_1d</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)

itp_1d_2 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    jld_base_path <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>interpolations<span class="pl-pds">"</span></span>,
    custom_name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1d_2<span class="pl-pds">"</span></span>,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
) 
<span class="pl-c"><span class="pl-c">#</span> will generate a file called "1d_2_data.jld2" in the folder "interpolations". </span>
<span class="pl-c"><span class="pl-c">#</span> If the folder doesn't exist, the routine will create it.</span></pre></div>
<h2 dir="auto"><a id="user-content-interpolation-options" class="anchor" aria-hidden="true" href="#interpolation-options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interpolation options</h2>
<p dir="auto">It is possible to customize the behaviour of the interpolation of the tabulated grid using <code>interpolation_type</code> and <code>extrapolation_bc</code>. The default interpolation method is a linear interpolation (<code>:linear</code>), but it is also possible to use a cubic spline (<code>:cubic</code>). Furthermore, it is possible to specify the behaviour outside of the tabulation domain <code>(xmin, xmax)</code> using <code>extrapolation_bc</code>. The default behaviour is to throw an exception, but it is also possible for to extrapolate linearly:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Interpolations: Line

func_1d(x) = sin(x)

itp_1d_1 = create_tabulation_1D(
    func_1d,
    xmin = 0.0,
    xmax = 3.0,
    npoints = 100,
    x_scale = :linear,
    f_scale = :linear,
    interpolation_type = :linear,
    extrapolation_bc = Line,
)"><pre><span class="pl-k">using</span> Interpolations<span class="pl-k">:</span> Line

<span class="pl-en">func_1d</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)

itp_1d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    interpolation_type <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    extrapolation_bc <span class="pl-k">=</span> Line,
)</pre></div>
<p dir="auto">For more information about the extrapolation conditions, see the <a href="https://juliamath.github.io/Interpolations.jl/latest/extrapolation/" rel="nofollow">Interpolations.jl</a> documentation and pass the extrapolation function as the <code>extrapolation_bc</code> argument.</p>
<h2 dir="auto"><a id="user-content-extra-args-and-kwargs" class="anchor" aria-hidden="true" href="#extra-args-and-kwargs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extra <code>args</code> and <code>kwargs</code></h2>
<p dir="auto">In case it is necessary to pass further fixed positional arguments or keyword arguments to the tabulated function, <code>create_tabulation_1D</code> will pass the extra <code>args</code> and <code>kwargs</code> to the function to be tabulated:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_1d(x, a; b) = x^2 + a*b

itp_1d_1 = create_tabulation_1D(
    func_1d,
    2, # the `a` positional argument 
    xmin = 0.0,
    xmax = 3.0,
    npoints = 100,
    b=1, # the `b` positional argument
)

isapprox(itp_1d_1(2.0), func_1d(2.0, 2; b=1), rtol = 1e-3)"><pre><span class="pl-en">func_1d</span>(x, a; b) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> a<span class="pl-k">*</span>b

itp_1d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    <span class="pl-c1">2</span>, <span class="pl-c"><span class="pl-c">#</span> the `a` positional argument </span>
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    b<span class="pl-k">=</span><span class="pl-c1">1</span>, <span class="pl-c"><span class="pl-c">#</span> the `b` positional argument</span>
)

<span class="pl-c1">isapprox</span>(<span class="pl-c1">itp_1d_1</span>(<span class="pl-c1">2.0</span>), <span class="pl-c1">func_1d</span>(<span class="pl-c1">2.0</span>, <span class="pl-c1">2</span>; b<span class="pl-k">=</span><span class="pl-c1">1</span>), rtol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
<h2 dir="auto"><a id="user-content-storing-metadata" class="anchor" aria-hidden="true" href="#storing-metadata"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Storing metadata</h2>
<p dir="auto">It is possible to store some metadata in the tabulation archive, by specifying the <code>metadata</code> keyword argument. <code>metadata</code> has to be provided in the form of a <code>Dict{String, Any}</code>. By default, when loading a tabulation, if some metadata is provided it will be compared against the stored metadata through the equality <code>metadata == stored_metadata</code>. In case more articulated metadata validation is required, it is possible to pass a <code>validate_metadata_fn</code> function, which will be responsible of metadata validation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_1d(x) = sin(x)

function metadata_validation_fn(metadata, loaded_metadata)
    return metadata[&quot;a&quot;] == loaded_metadata[&quot;a&quot;]
end

itp_1d_1 = create_tabulation_1D(
    func_1d,
    xmin = 0.0,
    xmax = 3.0,
    npoints = 100,
    x_scale = :linear,
    f_scale = :linear,
    metadata = Dict{String, Any}(&quot;a&quot;=&gt;1),
    metadata_validation_fn = metadata_validation_fn
) # create the tabulation

itp_1d_1_loaded = create_tabulation_1D(
    func_1d,
    xmin = 0.0,
    xmax = 3.0,
    npoints = 100,
    x_scale = :linear,
    f_scale = :linear,
    metadata = Dict{String, Any}(&quot;a&quot;=&gt;1),
    metadata_validation_fn = metadata_validation_fn
) # reload the tabulation"><pre><span class="pl-en">func_1d</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x)

<span class="pl-k">function</span> <span class="pl-en">metadata_validation_fn</span>(metadata, loaded_metadata)
    <span class="pl-k">return</span> metadata[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> loaded_metadata[<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>]
<span class="pl-k">end</span>

itp_1d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    metadata <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>),
    metadata_validation_fn <span class="pl-k">=</span> metadata_validation_fn
) <span class="pl-c"><span class="pl-c">#</span> create the tabulation</span>

itp_1d_1_loaded <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_1D</span>(
    func_1d,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>,
    npoints <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    metadata <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String, Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>),
    metadata_validation_fn <span class="pl-k">=</span> metadata_validation_fn
) <span class="pl-c"><span class="pl-c">#</span> reload the tabulation</span></pre></div>
<p dir="auto">While the library used for storing the tabulations (JLD2) should be able to serialise any dictionary passed as metadata, it is up to the user to properly create and validate the metadata.</p>
<h1 dir="auto"><a id="user-content-usage-2d-functiontabulations--3d-functiontabulations" class="anchor" aria-hidden="true" href="#usage-2d-functiontabulations--3d-functiontabulations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage: 2D FunctionTabulations &amp; 3D FunctionTabulations</h1>
<p dir="auto">2D FunctionTabulations and 3D FunctionTabulations have a similar syntax, with extra parameters for the <code>y</code> and <code>z</code> variables:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_2d(x, y) = sin(x) * sin(y)

itp_2d_1 = create_tabulation_2D(
    func_2d,
    xmin = 0.0,
    xmax = 1.0,
    ymin = 0.0,
    ymax = 2.0,
    npoints_x = 100,
    npoints_y = 200,
    x_scale = :linear,
    y_scale = :linear,
    f_scale = :linear
)
isapprox(itp_2d_1(1.0, 1.3), func_2d(1.0, 1.3), rtol = 1e-3)"><pre><span class="pl-en">func_2d</span>(x, y) <span class="pl-k">=</span> <span class="pl-c1">sin</span>(x) <span class="pl-k">*</span> <span class="pl-c1">sin</span>(y)

itp_2d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_2D</span>(
    func_2d,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    ymin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    ymax <span class="pl-k">=</span> <span class="pl-c1">2.0</span>,
    npoints_x <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    npoints_y <span class="pl-k">=</span> <span class="pl-c1">200</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    y_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>
)
<span class="pl-c1">isapprox</span>(<span class="pl-c1">itp_2d_1</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.3</span>), <span class="pl-c1">func_2d</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.3</span>), rtol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="func_3d(x, y, z) = x * y + z

itp_3d_1 = create_tabulation_3D(
    func_3d,
    xmin = 0.0,
    xmax = 1.0,
    ymin = 0.0,
    ymax = 2.0,
    zmin = 0.0,
    zmax = 3.0,
    npoints_x = 100,
    npoints_y = 200,
    npoints_z = 200,
    x_scale = :linear,
    y_scale = :linear,
    z_scale = :linear,
    f_scale = :linear
)

isapprox(itp_3d_1(1.0, 1.3, 2.5), func_3d(1.0, 1.3, 2.5), rtol = 1e-3)"><pre><span class="pl-en">func_3d</span>(x, y, z) <span class="pl-k">=</span> x <span class="pl-k">*</span> y <span class="pl-k">+</span> z

itp_3d_1 <span class="pl-k">=</span> <span class="pl-c1">create_tabulation_3D</span>(
    func_3d,
    xmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    xmax <span class="pl-k">=</span> <span class="pl-c1">1.0</span>,
    ymin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    ymax <span class="pl-k">=</span> <span class="pl-c1">2.0</span>,
    zmin <span class="pl-k">=</span> <span class="pl-c1">0.0</span>,
    zmax <span class="pl-k">=</span> <span class="pl-c1">3.0</span>,
    npoints_x <span class="pl-k">=</span> <span class="pl-c1">100</span>,
    npoints_y <span class="pl-k">=</span> <span class="pl-c1">200</span>,
    npoints_z <span class="pl-k">=</span> <span class="pl-c1">200</span>,
    x_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    y_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    z_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>,
    f_scale <span class="pl-k">=</span> <span class="pl-c1">:linear</span>
)

<span class="pl-c1">isapprox</span>(<span class="pl-c1">itp_3d_1</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.3</span>, <span class="pl-c1">2.5</span>), <span class="pl-c1">func_3d</span>(<span class="pl-c1">1.0</span>, <span class="pl-c1">1.3</span>, <span class="pl-c1">2.5</span>), rtol <span class="pl-k">=</span> <span class="pl-c1">1e-3</span>)</pre></div>
</article></div>