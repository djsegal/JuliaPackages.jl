<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-click" class="anchor" aria-hidden="true" href="#click"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Click!</h1>
<p>Julia package to allow simpler interaction with graphics</p>
<h2><a id="user-content-warning" class="anchor" aria-hidden="true" href="#warning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Warning</h2>
<p>Large portions of this package still need testing so not everything is
guaranteed to work.</p>
<h2><a id="user-content-image-maps" class="anchor" aria-hidden="true" href="#image-maps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Image Maps</h2>
<p>The simplest application of this library is to create a click map for a static
image that is loaded into a GUI. Create the image map and connect it to the
underlying GUI using this package as seen below for Gtk.</p>
<p>This code (example/gtk_ex2.jl) creates a window with a square in the center
of the window that opens an info dialog when clicked.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/env julia</span>
<span class="pl-k">using</span> Click, Click<span class="pl-k">.</span>Primitives, Gtk, Graphics

<span class="pl-c"><span class="pl-c">#</span> create a 200x200 canvas in a window</span>
canvas <span class="pl-k">=</span> <span class="pl-c1">@GtkCanvas</span>(<span class="pl-c1">200</span>, <span class="pl-c1">200</span>)
win <span class="pl-k">=</span> <span class="pl-c1">@GtkWindow</span>(canvas, <span class="pl-s"><span class="pl-pds">"</span>Gtk Example<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Setup drawing the rectangle</span>
<span class="pl-c1">@guarded</span> <span class="pl-c1">draw</span>(canvas) <span class="pl-k">do</span> c
  ctx <span class="pl-k">=</span> <span class="pl-c1">getgc</span>(c)
  <span class="pl-c1">set_source_rgb</span>(ctx, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
  <span class="pl-c1">rectangle</span>(ctx, <span class="pl-c1">50</span>, <span class="pl-c1">50</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
  <span class="pl-c1">fill</span>(ctx)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> create a 100x100 clickable rectangle</span>
rect <span class="pl-k">=</span> <span class="pl-c1">Rectangle</span>(<span class="pl-c1">50</span>, <span class="pl-c1">50</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
clickRect <span class="pl-k">=</span> <span class="pl-c1">ClickableRectangle</span>(rect)

<span class="pl-c"><span class="pl-c">#</span> Attach a callback to a click event</span>
<span class="pl-c1">attend</span>(clickRect, <span class="pl-c1">:click</span>) <span class="pl-k">do</span> widget
  <span class="pl-k">global</span> win
  <span class="pl-c1">info_dialog</span>(<span class="pl-s"><span class="pl-pds">"</span>Clicked the rectangle<span class="pl-pds">"</span></span>, win)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> create a ClickMap containing the clickable rectangle</span>
m <span class="pl-k">=</span> <span class="pl-c1">SimpleClickMap</span>(clickRect)

<span class="pl-c"><span class="pl-c">#</span> link the click map to the canvas</span>
<span class="pl-c1">link_click_map</span>(canvas, m)

<span class="pl-c"><span class="pl-c">#</span> Display the result</span>
<span class="pl-c1">show</span>(canvas)

<span class="pl-c"><span class="pl-c">#</span> Pause main thread execution in non-interactive mode</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">isinteractive</span>()
  <span class="pl-c1">signal_connect</span>(win, <span class="pl-c1">:destroy</span>) <span class="pl-k">do</span> widget
    Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_quit</span>()
  <span class="pl-k">end</span>
  Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_main</span>()
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-using-gtk-and-compose" class="anchor" aria-hidden="true" href="#using-gtk-and-compose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using GTK and Compose</h2>
<p>A very useful case is to make objects from a library, such as Compose*, which
abstracts the drawing process, clickable. This example
(example/gtk_compose_ex.jl) demonstrates this by allowing essentially the
same square to be clicked at both locations at which it is drawn. It also
hides certain implementation details such as Gtk's drawing loop.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/env julia</span>

<span class="pl-k">using</span> Gtk, Compose, Click

<span class="pl-c"><span class="pl-c">#</span> Create a 400x400 canvas</span>
canvas <span class="pl-k">=</span> <span class="pl-c1">@GtkCanvas</span>(<span class="pl-c1">400</span>, <span class="pl-c1">400</span>)
win <span class="pl-k">=</span> <span class="pl-c1">@GtkWindow</span>(canvas, <span class="pl-s"><span class="pl-pds">"</span>GTK-Compose Example<span class="pl-pds">"</span></span>)

rect <span class="pl-k">=</span> <span class="pl-c1">rectangle</span>(<span class="pl-c1">0.25</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>)
vect <span class="pl-k">=</span> <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(<span class="pl-c1">0</span>mm, <span class="pl-c1">0</span>mm, <span class="pl-c1">300</span>mm, <span class="pl-c1">300</span>mm),
         <span class="pl-c1">rectangle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>),
         <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>),
         <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>),
           rect,
           <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>)),
         <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>),
           rect,
           <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>)))

cl <span class="pl-k">=</span> <span class="pl-c1">create_clickable</span>(rect, vect)

<span class="pl-c1">attend</span>(cl, <span class="pl-c1">:click</span>) <span class="pl-k">do</span> frm, x, y
  <span class="pl-c1">info_dialog</span>(<span class="pl-s"><span class="pl-pds">"</span>Clicked Square<span class="pl-pds">"</span></span>, win)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Use the fuse function to stitch things together</span>

<span class="pl-c"><span class="pl-c">#</span> ComposeClickMap needs to wrap SimpleClickMap to account for pixel density</span>
<span class="pl-c"><span class="pl-c">#</span> which that object is updated with internal to fuse</span>
<span class="pl-c1">fuse</span>(<span class="pl-c1">SimpleClickMap</span>(cl), canvas, vect)

<span class="pl-c1">show</span>(canvas)

<span class="pl-c"><span class="pl-c">#</span> block the main thread of execution if not interactive</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">isinteractive</span>()
  <span class="pl-c1">signal_connect</span>(win, <span class="pl-c1">:destroy</span>) <span class="pl-k">do</span> widget
    Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_quit</span>()
  <span class="pl-k">end</span>
  Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_main</span>()
<span class="pl-k">end</span></pre></div>
<p>* Be careful with this at the moment as Compose support is a work in progress.</p>
</article></div>