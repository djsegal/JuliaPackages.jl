<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-click" class="anchor" aria-hidden="true" href="#click"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Click!</h1>
<p dir="auto">Julia package to allow simpler interaction with graphics</p>
<h2 dir="auto"><a id="user-content-warning" class="anchor" aria-hidden="true" href="#warning"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Warning</h2>
<p dir="auto">Large portions of this package still need testing so not everything is
guaranteed to work.</p>
<h2 dir="auto"><a id="user-content-image-maps" class="anchor" aria-hidden="true" href="#image-maps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Image Maps</h2>
<p dir="auto">The simplest application of this library is to create a click map for a static
image that is loaded into a GUI. Create the image map and connect it to the
underlying GUI using this package as seen below for Gtk.</p>
<p dir="auto">This code (example/gtk_ex2.jl) creates a window with a square in the center
of the window that opens an info dialog when clicked.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/usr/bin/env julia
using Click, Click.Primitives, Gtk, Graphics

# create a 200x200 canvas in a window
canvas = @GtkCanvas(200, 200)
win = @GtkWindow(canvas, &quot;Gtk Example&quot;)

# Setup drawing the rectangle
@guarded draw(canvas) do c
  ctx = getgc(c)
  set_source_rgb(ctx, 1.0, 0.0, 0.0)
  rectangle(ctx, 50, 50, 100, 100)
  fill(ctx)
end

# create a 100x100 clickable rectangle
rect = Rectangle(50, 50, 100, 100)
clickRect = ClickableRectangle(rect)

# Attach a callback to a click event
attend(clickRect, :click) do widget
  global win
  info_dialog(&quot;Clicked the rectangle&quot;, win)
end

# create a ClickMap containing the clickable rectangle
m = SimpleClickMap(clickRect)

# link the click map to the canvas
link_click_map(canvas, m)

# Display the result
show(canvas)

# Pause main thread execution in non-interactive mode
if !isinteractive()
  signal_connect(win, :destroy) do widget
    Gtk.gtk_quit()
  end
  Gtk.gtk_main()
end"><pre><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/env julia</span>
<span class="pl-k">using</span> Click, Click<span class="pl-k">.</span>Primitives, Gtk, Graphics

<span class="pl-c"><span class="pl-c">#</span> create a 200x200 canvas in a window</span>
canvas <span class="pl-k">=</span> <span class="pl-c1">@GtkCanvas</span>(<span class="pl-c1">200</span>, <span class="pl-c1">200</span>)
win <span class="pl-k">=</span> <span class="pl-c1">@GtkWindow</span>(canvas, <span class="pl-s"><span class="pl-pds">"</span>Gtk Example<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> Setup drawing the rectangle</span>
<span class="pl-c1">@guarded</span> <span class="pl-c1">draw</span>(canvas) <span class="pl-k">do</span> c
  ctx <span class="pl-k">=</span> <span class="pl-c1">getgc</span>(c)
  <span class="pl-c1">set_source_rgb</span>(ctx, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>)
  <span class="pl-c1">rectangle</span>(ctx, <span class="pl-c1">50</span>, <span class="pl-c1">50</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
  <span class="pl-c1">fill</span>(ctx)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> create a 100x100 clickable rectangle</span>
rect <span class="pl-k">=</span> <span class="pl-c1">Rectangle</span>(<span class="pl-c1">50</span>, <span class="pl-c1">50</span>, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
clickRect <span class="pl-k">=</span> <span class="pl-c1">ClickableRectangle</span>(rect)

<span class="pl-c"><span class="pl-c">#</span> Attach a callback to a click event</span>
<span class="pl-c1">attend</span>(clickRect, <span class="pl-c1">:click</span>) <span class="pl-k">do</span> widget
  <span class="pl-k">global</span> win
  <span class="pl-c1">info_dialog</span>(<span class="pl-s"><span class="pl-pds">"</span>Clicked the rectangle<span class="pl-pds">"</span></span>, win)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> create a ClickMap containing the clickable rectangle</span>
m <span class="pl-k">=</span> <span class="pl-c1">SimpleClickMap</span>(clickRect)

<span class="pl-c"><span class="pl-c">#</span> link the click map to the canvas</span>
<span class="pl-c1">link_click_map</span>(canvas, m)

<span class="pl-c"><span class="pl-c">#</span> Display the result</span>
<span class="pl-c1">show</span>(canvas)

<span class="pl-c"><span class="pl-c">#</span> Pause main thread execution in non-interactive mode</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">isinteractive</span>()
  <span class="pl-c1">signal_connect</span>(win, <span class="pl-c1">:destroy</span>) <span class="pl-k">do</span> widget
    Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_quit</span>()
  <span class="pl-k">end</span>
  Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_main</span>()
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-using-gtk-and-compose" class="anchor" aria-hidden="true" href="#using-gtk-and-compose"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using GTK and Compose</h2>
<p dir="auto">A very useful case is to make objects from a library, such as Compose*, which
abstracts the drawing process, clickable. This example
(example/gtk_compose_ex.jl) demonstrates this by allowing essentially the
same square to be clicked at both locations at which it is drawn. It also
hides certain implementation details such as Gtk's drawing loop.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/usr/bin/env julia

using Gtk, Compose, Click

# Create a 400x400 canvas
canvas = @GtkCanvas(400, 400)
win = @GtkWindow(canvas, &quot;GTK-Compose Example&quot;)

rect = rectangle(0.25, 0.25, 0.5, 0.5)
vect = compose(context(0mm, 0mm, 300mm, 300mm),
         rectangle(0.0, 0.0, 1.0, 1.0),
         fill(&quot;green&quot;),
         compose(context(0.0, 0.0, 0.5, 0.5),
           rect,
           fill(&quot;black&quot;)),
         compose(context(0.5, 0.5, 0.5, 0.5),
           rect,
           fill(&quot;blue&quot;)))

cl = create_clickable(rect, vect)

attend(cl, :click) do frm, x, y
  info_dialog(&quot;Clicked Square&quot;, win)
end

# Use the fuse function to stitch things together

# ComposeClickMap needs to wrap SimpleClickMap to account for pixel density
# which that object is updated with internal to fuse
fuse(SimpleClickMap(cl), canvas, vect)

show(canvas)

# block the main thread of execution if not interactive
if !isinteractive()
  signal_connect(win, :destroy) do widget
    Gtk.gtk_quit()
  end
  Gtk.gtk_main()
end"><pre><span class="pl-c"><span class="pl-c">#</span>!/usr/bin/env julia</span>

<span class="pl-k">using</span> Gtk, Compose, Click

<span class="pl-c"><span class="pl-c">#</span> Create a 400x400 canvas</span>
canvas <span class="pl-k">=</span> <span class="pl-c1">@GtkCanvas</span>(<span class="pl-c1">400</span>, <span class="pl-c1">400</span>)
win <span class="pl-k">=</span> <span class="pl-c1">@GtkWindow</span>(canvas, <span class="pl-s"><span class="pl-pds">"</span>GTK-Compose Example<span class="pl-pds">"</span></span>)

rect <span class="pl-k">=</span> <span class="pl-c1">rectangle</span>(<span class="pl-c1">0.25</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>)
vect <span class="pl-k">=</span> <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(<span class="pl-c1">0</span>mm, <span class="pl-c1">0</span>mm, <span class="pl-c1">300</span>mm, <span class="pl-c1">300</span>mm),
         <span class="pl-c1">rectangle</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.0</span>),
         <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span>),
         <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>),
           rect,
           <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>black<span class="pl-pds">"</span></span>)),
         <span class="pl-c1">compose</span>(<span class="pl-c1">context</span>(<span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>, <span class="pl-c1">0.5</span>),
           rect,
           <span class="pl-c1">fill</span>(<span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>)))

cl <span class="pl-k">=</span> <span class="pl-c1">create_clickable</span>(rect, vect)

<span class="pl-c1">attend</span>(cl, <span class="pl-c1">:click</span>) <span class="pl-k">do</span> frm, x, y
  <span class="pl-c1">info_dialog</span>(<span class="pl-s"><span class="pl-pds">"</span>Clicked Square<span class="pl-pds">"</span></span>, win)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Use the fuse function to stitch things together</span>

<span class="pl-c"><span class="pl-c">#</span> ComposeClickMap needs to wrap SimpleClickMap to account for pixel density</span>
<span class="pl-c"><span class="pl-c">#</span> which that object is updated with internal to fuse</span>
<span class="pl-c1">fuse</span>(<span class="pl-c1">SimpleClickMap</span>(cl), canvas, vect)

<span class="pl-c1">show</span>(canvas)

<span class="pl-c"><span class="pl-c">#</span> block the main thread of execution if not interactive</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-c1">isinteractive</span>()
  <span class="pl-c1">signal_connect</span>(win, <span class="pl-c1">:destroy</span>) <span class="pl-k">do</span> widget
    Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_quit</span>()
  <span class="pl-k">end</span>
  Gtk<span class="pl-k">.</span><span class="pl-c1">gtk_main</span>()
<span class="pl-k">end</span></pre></div>
<p dir="auto">* Be careful with this at the moment as Compose support is a work in progress.</p>
</article></div>