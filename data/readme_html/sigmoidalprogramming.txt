<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-sigmoidalprograming" class="anchor" aria-hidden="true" href="#sigmoidalprograming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SigmoidalPrograming</h1>

<p dir="auto">SigmoidalProgramming is a Julia package for solving <a href="http://www.stanford.edu/~udell/doc/max_sum_sigmoids.pdf" rel="nofollow">sigmoidal programming problems</a>.
It solves problems using a branch and bound method described <a href="http://www.stanford.edu/~udell/doc/max_sum_sigmoids.pdf" rel="nofollow">here</a>,
and solves the convex subproblems using a cutting plane method.</p>
<p dir="auto">Usage examples can be found in the examples directory.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You can install the package from the Julia prompt</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;SigmoidalProgramming&quot;)"><pre class="notranslate"><code>Pkg.add("SigmoidalProgramming")
</code></pre></div>
<h2 dir="auto"><a id="user-content-linear-sigmoidal-programs" class="anchor" aria-hidden="true" href="#linear-sigmoidal-programs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Linear Sigmoidal Programs</h2>
<p dir="auto">The <code>LinearSP</code> problem class can be used to solve any sigmoidal programming problem
with linear equality and inequality constraints, of the form</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    minimize       sum_i f_i(x_i)
    subject to     A x &lt;= b
                   C x == d
                   l &lt;= x &lt;= u"><pre class="notranslate"><code>    minimize       sum_i f_i(x_i)
    subject to     A x &lt;= b
                   C x == d
                   l &lt;= x &lt;= u
</code></pre></div>
<p dir="auto">with variable x, where <code>f_i</code> is a sigmoidal function for every <code>i</code>.
A <em>sigmoidal</em> function is a function <code>f(x)</code> that, for some number <code>z</code>, is convex
in <code>x</code> for <code>x &lt;= z</code> and is concave in <code>x</code> for <code>x &gt;= z</code>.
(Convex functions are sigmoidal with <code>z = float("inf")</code>, and concave functions are sigmoidal with <code>z = -float("inf")</code>.)</p>
<p dir="auto">The functions <code>f</code> are specified with three lists:</p>
<ol dir="auto">
<li><code>fs</code>, a list of functions such that <code>fs[i](x)</code> computes the value of <code>f_i</code> at <code>x</code>.</li>
<li><code>dfs</code>, a list of functions such that <code>dfs[i](x)</code> computes the derivative of <code>f_i</code> at <code>x</code>.</li>
<li><code>z</code>, a list of numbers such that <code>f_i</code> is convex
in its argument <code>x</code> for <code>x &lt;= z</code> and is concave in <code>x</code> for <code>x &gt;= z</code>.</li>
</ol>
<p dir="auto">Let's see how to use it to solve a random sigmoidal program with only inequality constraints.
We'll let <code>f_i = x -&gt; 1/(1 + exp(-x))</code> be the <code>logistic</code> function for every <code>i</code>.
The logistic function and its derivative <code>logistic_prime</code> are defined in the file <code>functions.jl</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using SigmoidalProgramming

# generate problem data
srand(4)
nvar = 200
nineqconstr = 20
l = -rand(nvar)
u = rand(nvar)
A = rand(nineqconstr, nvar)
b = rand(nineqconstr)
z = zeros(nvar)
fs = fill(logistic, nvar)
dfs = fill(logistic_prime, nvar)
problem = LinearSP(fs, dfs, z, A, b)

# branch and bound to solve the problem
# pq is a priority queue of the branch and bound nodes at the leaves of the tree
# bestnodes is a list of the best branch and bound nodes found, in the order they were found
pq, bestnodes, lbs, ubs = solve_sp(l, u, problem)

# the best node found yet is the top node on the priority queue
node = dequeue!(pq)
# println(&quot;best node has node.ub = $(node.ub) and solution $(node.x)&quot;)

# lbs and ubs record the upper and lower bounds on the optimal value
# found at each iteration
println(&quot;lbs: &quot;,lbs)
println(&quot;ubs: &quot;,ubs)"><pre class="notranslate"><code>using SigmoidalProgramming

# generate problem data
srand(4)
nvar = 200
nineqconstr = 20
l = -rand(nvar)
u = rand(nvar)
A = rand(nineqconstr, nvar)
b = rand(nineqconstr)
z = zeros(nvar)
fs = fill(logistic, nvar)
dfs = fill(logistic_prime, nvar)
problem = LinearSP(fs, dfs, z, A, b)

# branch and bound to solve the problem
# pq is a priority queue of the branch and bound nodes at the leaves of the tree
# bestnodes is a list of the best branch and bound nodes found, in the order they were found
pq, bestnodes, lbs, ubs = solve_sp(l, u, problem)

# the best node found yet is the top node on the priority queue
node = dequeue!(pq)
# println("best node has node.ub = $(node.ub) and solution $(node.x)")

# lbs and ubs record the upper and lower bounds on the optimal value
# found at each iteration
println("lbs: ",lbs)
println("ubs: ",ubs)
</code></pre></div>
<p dir="auto">A problem with equality constraints <code>C x = d</code> as well can be solved using <code>problem = LinearSP(fs, dfs, z, A, b, C, d) </code></p>
<p dir="auto">A few simple examples of usage can be found in the examples directory.</p>
<h2 dir="auto"><a id="user-content-solver-parameters" class="anchor" aria-hidden="true" href="#solver-parameters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Solver parameters</h2>
<p dir="auto">The accuracy of the solution can be controlled with the parameters</p>
<ul dir="auto">
<li><code>maxiters</code>, the maximum number of branch and bound iterations (default: <code>100</code>)</li>
<li><code>TOL</code>, the desired gap between the upper and lower bound on the optimal value (default: <code>1e-2</code>)</li>
</ul>
<p dir="auto">The solver terminates as soon as either <code>maxiters</code> branch and bound nodes have been split,
or the gap between the upper and lower bound on the optimal value has been proved to be less
than <code>TOL</code>.</p>
<p dir="auto">The call signature for <code>solve_sp</code> is as follows:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="solve_sp(l, u, problem::SigmoidalProgram; 
                  TOL = 1e-2, maxiters = 100, verbose = false)"><pre class="notranslate"><code>solve_sp(l, u, problem::SigmoidalProgram; 
                  TOL = 1e-2, maxiters = 100, verbose = false)
</code></pre></div>
</article></div>