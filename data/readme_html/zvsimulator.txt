<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-zvsimulator" class="anchor" aria-hidden="true" href="#zvsimulator"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ZVSimulator</h1>
<p dir="auto"><a href="https://travis-ci.org/scidom/ZVSimulator.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/110c126aebb58d963868cb9c52f802b976a97d184c88672475d6c2c48326dee7/68747470733a2f2f7472617669732d63692e6f72672f736369646f6d2f5a5653696d756c61746f722e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/scidom/ZVSimulator.jl.png" style="max-width: 100%;"></a></p>
<p dir="auto">The <code>ZVSimulator</code> package provides a framework for assessing the zero variance (ZV) principle for Monte Carlo or
random sampling via simulation.</p>
<h4 dir="auto"><a id="user-content-package-overview" class="anchor" aria-hidden="true" href="#package-overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Package Overview</h4>
<p dir="auto">The <code>ZVSimulator</code> is used for assessing the effectiveness of the zero variance principle on arbitrary MCMC samplers
or on arbitrary univariate or multivariate distributions. The simulation-based evaluation of ZV's effectiveness is
made by estimating the variance reduction factor (VRF), which is the ratio of the variance of the original estimator
over the variance of the ZV estimator.</p>
<p dir="auto">To compute the variance of the original estimator of a summary statistic, several Monte Carlo chains are simulated from
a given MCMC sampler or several sets of independently and identically distributed (i.i.d.) samples are randomly drawn
from a given distribution. Then the summary statistic (typically the mean) is computed for each chain or for each sample
set and the sample variance of these summary statistics (typically the sample variance of these means) is computed. This
way the variance of the original estimator for a given summary statistic is computed. The value of the score function,
that is the value of the gradient of the log-likelihood, along the chain iterations or along the i.i.d. samples is
stored and is employed in order to calculate the corresponding ZV estimator.</p>
<h4 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h4>
<p dir="auto">The main features of the <code>ZVSimulator</code> from the user's perspective are the following:</p>
<ul dir="auto">
<li>Integrated usage with the <code>Distributions</code> and <code>MCMC</code> packages. The user can define distributions or MCMC tasks by
using the standard interface of <code>Distributions</code> or <code>MCMC</code>, so as to pass them to the <code>ZVSimulator</code>.</li>
<li>Minimal effort to set up a ZV simulation due to the high level interface with <code>Distributions</code> and <code>MCMC</code>. This
facilitates shifting the user's focus from programming towards the statistical issue of ZV's effectiveness. For
example, the gradient computation is done by using the relevant score functions defined in <code>Distributions</code> and the
ZV coefficients are calculated using the relevant ZV functions in <code>MCMC</code>.</li>
<li>Assessment of ZV for any summary statistic by passing a function that transforms the simulated samples.</li>
<li>Lower level functionality, which allows assessing ZV for any user-defined random process leaving room for future
developments of ZV on more stochastic models.</li>
<li>Parallel implementation of the <code>ZVSimulator</code>, which provides faster computations on several workers.</li>
</ul>
<h4 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h4>
<h5 dir="auto"><a id="user-content-zv-for-a-univariate-distribution" class="anchor" aria-hidden="true" href="#zv-for-a-univariate-distribution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ZV for a univariate distribution</h5>
<p dir="auto">As an example of how one can compute the VRFs for a univariate distribution, consider a t-distribution with 5 degrees
of freedom. The distribution is defined by calling <code>TDist(5.)</code> using the relevant constructor from <code>Distributions</code>.
Then the <code>psim_rand_vrf()</code> function is invoked on the t-density, from which 100 sample sets are drawn, each of size
1000. Note that if julia is started by <code>julia -p 4</code> for instance, then the simulation will run on 4 workers on the
local machine. The code for this example is the following and can also be found in <code>examples/rand_tdist.jl</code>:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Distributions, ZVSimulator

d = TDist(5.)

results = psim_rand_vrf(d, nsets=100, nsamples=1000)"><pre class="notranslate"><code>using Distributions, ZVSimulator

d = TDist(5.)

results = psim_rand_vrf(d, nsets=100, nsamples=1000)
</code></pre></div>
<h5 dir="auto"><a id="user-content-zv-for-mcmc" class="anchor" aria-hidden="true" href="#zv-for-mcmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ZV for MCMC</h5>
<p dir="auto"><code>examples/mcmc_mvtdist.jl</code> provides an example of computing the VRFs for a Monte Carlo simulation from a multivariate
Student target distribution. The MCMC tasks are defined by using the (model, sampler, runner) triplet-interface of
the <code>MCMC</code> package. Then <code>psim_serialmc_vrf()</code> is invoked on these tasks to calculate the VRFs by simulating 100 chains,
each consisting of 10000 iterations of which the first 1000 are discarded as burnin.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Distributions, MCMC, ZVSimulator

function C(n::Int, c::Float64)
  X = eye(n)
  [(j &lt;= n-i) ? X[i+j, i] = X[i, i+j] = c^j : nothing for i = 1:(n-1), j = 1:(n-1)]
  X
end

df, npars, a = 5., 4, 0.25
c = ((df-2)/df)*C(npars, a)

mcmodel = model(MvTDist(df, zeros(npars), c), init=zeros(npars))
samplers = [HMCDA() for i in 1:100]
tasks = mcmodel * samplers * SerialMC(steps=10000, burnin=1000)

results = psim_serialmc_vrf(tasks)"><pre class="notranslate"><code>using Distributions, MCMC, ZVSimulator

function C(n::Int, c::Float64)
  X = eye(n)
  [(j &lt;= n-i) ? X[i+j, i] = X[i, i+j] = c^j : nothing for i = 1:(n-1), j = 1:(n-1)]
  X
end

df, npars, a = 5., 4, 0.25
c = ((df-2)/df)*C(npars, a)

mcmodel = model(MvTDist(df, zeros(npars), c), init=zeros(npars))
samplers = [HMCDA() for i in 1:100]
tasks = mcmodel * samplers * SerialMC(steps=10000, burnin=1000)

results = psim_serialmc_vrf(tasks)
</code></pre></div>
</article></div>