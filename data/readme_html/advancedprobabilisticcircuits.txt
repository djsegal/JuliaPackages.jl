<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-advancedprobabilisticcircuitsjl" class="anchor" aria-hidden="true" href="#advancedprobabilisticcircuitsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AdvancedProbabilisticCircuits.jl</h1>
<p><a href="https://travis-ci.org/trappmartin/AdvancedProbabilisticCircuits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/571be03cf018c145095f00ace824f88ea46d25940d4979cd153b7680be1a028a/68747470733a2f2f7472617669732d63692e6f72672f74726170706d617274696e2f416476616e63656450726f626162696c697374696343697263756974732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/trappmartin/AdvancedProbabilisticCircuits.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/trappmartin/AdvancedProbabilisticCircuits.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dce61cf32728321715235dadf0bd22e8d6d83f2a5a87813d252d21c3f3ab125d/68747470733a2f2f636f6465636f762e696f2f67682f74726170706d617274696e2f416476616e63656450726f626162696c697374696343697263756974732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/trappmartin/AdvancedProbabilisticCircuits.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>AdvancedProbabilisticCircuits.jl</code> is a package for probabilistic modelling and inference using probabilistic circuits.</p>
<p>Warning: This package is under heavy development and things might easily change!</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package is currently not registered. To install <code>AdvancedProbabilisticCircuits.jl</code> either clone the package manually or add it using the Julia package manage using: <code>Pkg.add(url="https://github.com/trappmartin/AdvancedProbabilisticCircuits.jl")</code>.</p>
<h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
<p>The following example illustrates the construction of a probabilistic circuit and its use for density estimation.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AdvancedProbabilisticCircuits, MLDatasets

# download Iris dataset if necessary
# Iris.download()

X = Iris.features()

# we can create a leaf node by passing the required scope as an argument
l = Normal(1) # Normal with scope = 1

# we can create a product node with a specific partition using
p = Prod(TruncatedNormal(1, min=eps()), TruncatedNormal(2, min=eps()))

# or with the following shorthands 
partition = [1,2]
p = Prod(Normal, partition)
p = Prod((s)-&gt;TruncatedNormal(s, min=eps()), partition)

# we can create a sum nodes the same way as a product node, i.e.
s = Sum(TruncatedNormal(1, min=eps()), TruncatedNormal(1, min=eps()))

# or using
K, scope = 2, 1
p = Sum(Normal, scope, K)
s = Sum((k)-&gt;Prod((s)-&gt;TruncatedNormal(s, min=eps()), partition), K)

# now lets construct a simple circuit

pc = Sum( 
        Prod( 
            Sum(Prod((s)-&gt;TruncatedNormal(s, min=eps()), [1,2]), 
                Prod((s)-&gt;TruncatedNormal(s, max=0), [1,2])), 
            Prod(Normal, [3,4])), 
        Prod(Normal, [1,2,3,4]))
"><pre><span class="pl-k">using</span> AdvancedProbabilisticCircuits, MLDatasets

<span class="pl-c"><span class="pl-c">#</span> download Iris dataset if necessary</span>
<span class="pl-c"><span class="pl-c">#</span> Iris.download()</span>

X <span class="pl-k">=</span> Iris<span class="pl-k">.</span><span class="pl-c1">features</span>()

<span class="pl-c"><span class="pl-c">#</span> we can create a leaf node by passing the required scope as an argument</span>
l <span class="pl-k">=</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> Normal with scope = 1</span>

<span class="pl-c"><span class="pl-c">#</span> we can create a product node with a specific partition using</span>
p <span class="pl-k">=</span> <span class="pl-c1">Prod</span>(<span class="pl-c1">TruncatedNormal</span>(<span class="pl-c1">1</span>, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()), <span class="pl-c1">TruncatedNormal</span>(<span class="pl-c1">2</span>, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()))

<span class="pl-c"><span class="pl-c">#</span> or with the following shorthands </span>
partition <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]
p <span class="pl-k">=</span> <span class="pl-c1">Prod</span>(Normal, partition)
p <span class="pl-k">=</span> <span class="pl-c1">Prod</span>((s)<span class="pl-k">-&gt;</span><span class="pl-c1">TruncatedNormal</span>(s, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()), partition)

<span class="pl-c"><span class="pl-c">#</span> we can create a sum nodes the same way as a product node, i.e.</span>
s <span class="pl-k">=</span> <span class="pl-c1">Sum</span>(<span class="pl-c1">TruncatedNormal</span>(<span class="pl-c1">1</span>, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()), <span class="pl-c1">TruncatedNormal</span>(<span class="pl-c1">1</span>, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()))

<span class="pl-c"><span class="pl-c">#</span> or using</span>
K, scope <span class="pl-k">=</span> <span class="pl-c1">2</span>, <span class="pl-c1">1</span>
p <span class="pl-k">=</span> <span class="pl-c1">Sum</span>(Normal, scope, K)
s <span class="pl-k">=</span> <span class="pl-c1">Sum</span>((k)<span class="pl-k">-&gt;</span><span class="pl-c1">Prod</span>((s)<span class="pl-k">-&gt;</span><span class="pl-c1">TruncatedNormal</span>(s, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()), partition), K)

<span class="pl-c"><span class="pl-c">#</span> now lets construct a simple circuit</span>

pc <span class="pl-k">=</span> <span class="pl-c1">Sum</span>( 
        <span class="pl-c1">Prod</span>( 
            <span class="pl-c1">Sum</span>(<span class="pl-c1">Prod</span>((s)<span class="pl-k">-&gt;</span><span class="pl-c1">TruncatedNormal</span>(s, min<span class="pl-k">=</span><span class="pl-c1">eps</span>()), [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>]), 
                <span class="pl-c1">Prod</span>((s)<span class="pl-k">-&gt;</span><span class="pl-c1">TruncatedNormal</span>(s, max<span class="pl-k">=</span><span class="pl-c1">0</span>), [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>])), 
            <span class="pl-c1">Prod</span>(Normal, [<span class="pl-c1">3</span>,<span class="pl-c1">4</span>])), 
        <span class="pl-c1">Prod</span>(Normal, [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]))</pre></div>
<p>Once the probabilistic circuit is defined, you should see the circuit in a more amendable form displayed in the REPL, e.g.:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(+) (
0.761 × (×) (
        (+) (
        0.41 ×  (×) (
                TruncatedNormal[(μ = 0.0, σ = 1.0, min = 2.220446049250313e-16, max = Inf)] - scope: 1, 
                TruncatedNormal[(μ = 0.0, σ = 1.0, min = 2.220446049250313e-16, max = Inf)] - scope: 2  ), 
        0.254 ×         (×) (
                TruncatedNormal[(μ = 0.0, σ = 1.0, min = -Inf, max = 0)] - scope: 1, 
                TruncatedNormal[(μ = 0.0, σ = 1.0, min = -Inf, max = 0)] - scope: 2     )       ), 
        Normal[(μ = 0.0, σ = 1.0)] - scope: 3, 
        Normal[(μ = 0.0, σ = 1.0)] - scope: 4), 
0.33 × (×) (
        Normal[(μ = 0.0, σ = 1.0)] - scope: 1, 
        Normal[(μ = 0.0, σ = 1.0)] - scope: 2, 
        Normal[(μ = 0.0, σ = 1.0)] - scope: 3, 
        Normal[(μ = 0.0, σ = 1.0)] - scope: 4))
"><pre>(<span class="pl-k">+</span>) (
<span class="pl-c1">0.761</span> <span class="pl-k">×</span> (<span class="pl-k">×</span>) (
        (<span class="pl-k">+</span>) (
        <span class="pl-c1">0.41</span> <span class="pl-k">×</span>  (<span class="pl-k">×</span>) (
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, min <span class="pl-k">=</span> <span class="pl-c1">2.220446049250313e-16</span>, max <span class="pl-k">=</span> <span class="pl-c1">Inf</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">1</span>, 
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, min <span class="pl-k">=</span> <span class="pl-c1">2.220446049250313e-16</span>, max <span class="pl-k">=</span> <span class="pl-c1">Inf</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">2</span>  ), 
        <span class="pl-c1">0.254</span> <span class="pl-k">×</span>         (<span class="pl-k">×</span>) (
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>, max <span class="pl-k">=</span> <span class="pl-c1">0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">1</span>, 
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>, max <span class="pl-k">=</span> <span class="pl-c1">0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">2</span>     )       ), 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">3</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">4</span>), 
<span class="pl-c1">0.33</span> <span class="pl-k">×</span> (<span class="pl-k">×</span>) (
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">1</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">2</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">3</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">4</span>))</pre></div>
<p>Note that the colour coding of the nodes indicate the nodes properties.
We can evaluate the (unnormalize) log density of the dataset by calling the <code>logpdf</code> of the circuit and compute the normalized log likelihood using <code>loglikelihood</code>, i.e.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Statistics

lp = logpdf(pc, X)

llh(model, x) = mean(loglikelihood(model, x))
@show llh(pc, X)
"><pre><span class="pl-k">using</span> Statistics

lp <span class="pl-k">=</span> <span class="pl-c1">logpdf</span>(pc, X)

<span class="pl-en">llh</span>(model, x) <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">loglikelihood</span>(model, x))
<span class="pl-c1">@show</span> <span class="pl-c1">llh</span>(pc, X)</pre></div>
<p>We can optimise the paramters using Zygote as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Zygote # used for AD 
using ProgressMeter, Plots # visualisation of progress &amp; results

iters = 20 # number of iterations
η = 0.1 # learning rate

# results
values = zeros(iters)

@showprogress for i in 1:iters
    grads = Zygote.gradient(m -&gt; llh(m, X), pc)[1]
    update!(pc, grads; η = η)
    values[i] = llh(pc, X)
end

plot(values)
"><pre><span class="pl-k">using</span> Zygote <span class="pl-c"><span class="pl-c">#</span> used for AD </span>
<span class="pl-k">using</span> ProgressMeter, Plots <span class="pl-c"><span class="pl-c">#</span> visualisation of progress &amp; results</span>

iters <span class="pl-k">=</span> <span class="pl-c1">20</span> <span class="pl-c"><span class="pl-c">#</span> number of iterations</span>
η <span class="pl-k">=</span> <span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> learning rate</span>

<span class="pl-c"><span class="pl-c">#</span> results</span>
values <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(iters)

<span class="pl-c1">@showprogress</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>iters
    grads <span class="pl-k">=</span> Zygote<span class="pl-k">.</span><span class="pl-c1">gradient</span>(m <span class="pl-k">-&gt;</span> <span class="pl-c1">llh</span>(m, X), pc)[<span class="pl-c1">1</span>]
    <span class="pl-c1">update!</span>(pc, grads; η <span class="pl-k">=</span> η)
    values[i] <span class="pl-k">=</span> <span class="pl-c1">llh</span>(pc, X)
<span class="pl-k">end</span>

<span class="pl-c1">plot</span>(values)</pre></div>
<p>After optimization, the resulting circuit should look similar to:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="(+) (
0.43 × (×) (
        (+) (
        0.339 ×         (×) (
                TruncatedNormal[(μ = 0.2632989915560352, σ = 2.382310506673276, min = 2.220446049250313e-16, max = Inf)] - scope: 1, 
                TruncatedNormal[(μ = 0.18073477432822802, σ = 1.4408260826173522, min = 2.220446049250313e-16, max = Inf)] - scope: 2), 
        0.333 ×         (×) (
                TruncatedNormal[(μ = 0.0, σ = 1.0, min = -Inf, max = 0)] - scope: 1, 
                TruncatedNormal[(μ = 0.0, σ = 1.0, min = -Inf, max = 0)] - scope: 2     )       ), 
        Normal[(μ = 0.1738561801760675, σ = 1.654385423083228)] - scope: 3, 
        Normal[(μ = 0.06158775377035022, σ = 1.0158713531454664)] - scope: 4), 
1.106 × (×) (
        Normal[(μ = 1.1542622026997085, σ = 3.747453345484773)] - scope: 1, 
        Normal[(μ = 1.3191340405400875, σ = 2.0246776684705585)] - scope: 2, 
        Normal[(μ = 1.146697247351322, σ = 2.802238408757326)] - scope: 3, 
        Normal[(μ = 1.0225365827958446, σ = 0.848282907572307)] - scope: 4))
"><pre>(<span class="pl-k">+</span>) (
<span class="pl-c1">0.43</span> <span class="pl-k">×</span> (<span class="pl-k">×</span>) (
        (<span class="pl-k">+</span>) (
        <span class="pl-c1">0.339</span> <span class="pl-k">×</span>         (<span class="pl-k">×</span>) (
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.2632989915560352</span>, σ <span class="pl-k">=</span> <span class="pl-c1">2.382310506673276</span>, min <span class="pl-k">=</span> <span class="pl-c1">2.220446049250313e-16</span>, max <span class="pl-k">=</span> <span class="pl-c1">Inf</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">1</span>, 
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.18073477432822802</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.4408260826173522</span>, min <span class="pl-k">=</span> <span class="pl-c1">2.220446049250313e-16</span>, max <span class="pl-k">=</span> <span class="pl-c1">Inf</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">2</span>), 
        <span class="pl-c1">0.333</span> <span class="pl-k">×</span>         (<span class="pl-k">×</span>) (
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>, max <span class="pl-k">=</span> <span class="pl-c1">0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">1</span>, 
                TruncatedNormal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, min <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">Inf</span>, max <span class="pl-k">=</span> <span class="pl-c1">0</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">2</span>     )       ), 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.1738561801760675</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.654385423083228</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">3</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">0.06158775377035022</span>, σ <span class="pl-k">=</span> <span class="pl-c1">1.0158713531454664</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">4</span>), 
<span class="pl-c1">1.106</span> <span class="pl-k">×</span> (<span class="pl-k">×</span>) (
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">1.1542622026997085</span>, σ <span class="pl-k">=</span> <span class="pl-c1">3.747453345484773</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">1</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">1.3191340405400875</span>, σ <span class="pl-k">=</span> <span class="pl-c1">2.0246776684705585</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">2</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">1.146697247351322</span>, σ <span class="pl-k">=</span> <span class="pl-c1">2.802238408757326</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">3</span>, 
        Normal[(μ <span class="pl-k">=</span> <span class="pl-c1">1.0225365827958446</span>, σ <span class="pl-k">=</span> <span class="pl-c1">0.848282907572307</span>)] <span class="pl-k">-</span> scope<span class="pl-k">:</span> <span class="pl-c1">4</span>))</pre></div>
<h2><a id="user-content-adding-additional-leaf-nodes" class="anchor" aria-hidden="true" href="#adding-additional-leaf-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding additional leaf nodes</h2>
<p>This package provides a few standard leaf nodes, i.e.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Normal # univariate Gaussian
TruncatedNormal # truncated univariate Gaussian
Indicator # indicator function
"><pre>Normal <span class="pl-c"><span class="pl-c">#</span> univariate Gaussian</span>
TruncatedNormal <span class="pl-c"><span class="pl-c">#</span> truncated univariate Gaussian</span>
Indicator <span class="pl-c"><span class="pl-c">#</span> indicator function</span></pre></div>
<p>and we can easily extend the set of leaf nodes using the <code>@leaf</code> macro:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import AdvancedProbabilisticCircuits.support 
using SpecialFunctions # required for logbeta

# define a Beta distribution with default values
@leaf Beta(α = 1.0, β = 1.0) RealInterval(0.0, 1.0)

# define the log density function
function logpdf(n::Beta{P}, x::Real) where {P&lt;:NamedTuple{(:α, :β)}}
    return (n.params.α - 1) * log(x) + (n.params.β - 1) * log1p(-x) - logbeta(n.params.α, n.params.β)
end
"><pre><span class="pl-k">import</span> AdvancedProbabilisticCircuits<span class="pl-k">.</span>support 
<span class="pl-k">using</span> SpecialFunctions <span class="pl-c"><span class="pl-c">#</span> required for logbeta</span>

<span class="pl-c"><span class="pl-c">#</span> define a Beta distribution with default values</span>
<span class="pl-c1">@leaf</span> <span class="pl-c1">Beta</span>(α <span class="pl-k">=</span> <span class="pl-c1">1.0</span>, β <span class="pl-k">=</span> <span class="pl-c1">1.0</span>) <span class="pl-c1">RealInterval</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>)

<span class="pl-c"><span class="pl-c">#</span> define the log density function</span>
<span class="pl-k">function</span> <span class="pl-en">logpdf</span>(n<span class="pl-k">::</span><span class="pl-c1">Beta{P}</span>, x<span class="pl-k">::</span><span class="pl-c1">Real</span>) <span class="pl-k">where</span> {P<span class="pl-k">&lt;:</span><span class="pl-c1">NamedTuple{(:α, :β)}</span>}
    <span class="pl-k">return</span> (n<span class="pl-k">.</span>params<span class="pl-k">.</span>α <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">log</span>(x) <span class="pl-k">+</span> (n<span class="pl-k">.</span>params<span class="pl-k">.</span>β <span class="pl-k">-</span> <span class="pl-c1">1</span>) <span class="pl-k">*</span> <span class="pl-c1">log1p</span>(<span class="pl-k">-</span>x) <span class="pl-k">-</span> <span class="pl-c1">logbeta</span>(n<span class="pl-k">.</span>params<span class="pl-k">.</span>α, n<span class="pl-k">.</span>params<span class="pl-k">.</span>β)
<span class="pl-k">end</span></pre></div>
<p>If necessary, we can also call <code>@leaf Beta(α = 1.0, β = 1.0)</code> instead and define the support manually. See <code>? @leaf</code> for an example. Note that this package currently only supports univariate leaves.</p>
<p>Now we can use a Beta distribution as a leaf node in a probabilistic circuit, e.g.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pc = Sum(Beta(1), Beta(1, α = 0.5), Beta(1, α = 0.5, β = 0.5), Normal(1));
"><pre>pc <span class="pl-k">=</span> <span class="pl-c1">Sum</span>(<span class="pl-c1">Beta</span>(<span class="pl-c1">1</span>), <span class="pl-c1">Beta</span>(<span class="pl-c1">1</span>, α <span class="pl-k">=</span> <span class="pl-c1">0.5</span>), <span class="pl-c1">Beta</span>(<span class="pl-c1">1</span>, α <span class="pl-k">=</span> <span class="pl-c1">0.5</span>, β <span class="pl-k">=</span> <span class="pl-c1">0.5</span>), <span class="pl-c1">Normal</span>(<span class="pl-c1">1</span>));</pre></div>
<p>Note that we may additionally want to define the adjoint for Zygote, if necessary. We refer to the Zygote documentation on this.</p>
<h2><a id="user-content-adding-additional-internal-nodes" class="anchor" aria-hidden="true" href="#adding-additional-internal-nodes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding additional internal nodes</h2>
<p>The package proved sum and product nodes as internal nodes, but can easily be extended.
For example, one can implement a custom internal node as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# sub-type NodeTypes to define a new node type
struct CustomProdNode &lt;: NodeType end

# define custom node type constructor
function CPNode(::Type{T}, ns::AbstractNode...) where T&lt;:Real
    parameters = rand(T, length(ns)) # every internal node has parameters (optional)
    return AdvancedProbabilisticCircuits._build_node(CustomProdNode, parameters, ns...)
end

# define custom log density function
logpdf(n::Node{T,V,S,P,CustomProdNode}, x) where {T,V,S,P} = sum(logpdf(children(n),Ref(x)))
"><pre><span class="pl-c"><span class="pl-c">#</span> sub-type NodeTypes to define a new node type</span>
<span class="pl-k">struct</span> CustomProdNode <span class="pl-k">&lt;:</span> <span class="pl-c1">NodeType</span> <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> define custom node type constructor</span>
<span class="pl-k">function</span> <span class="pl-en">CPNode</span>(<span class="pl-k">::</span><span class="pl-c1">Type{T}</span>, ns<span class="pl-k">::</span><span class="pl-c1">AbstractNode...</span>) <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Real</span>
    parameters <span class="pl-k">=</span> <span class="pl-c1">rand</span>(T, <span class="pl-c1">length</span>(ns)) <span class="pl-c"><span class="pl-c">#</span> every internal node has parameters (optional)</span>
    <span class="pl-k">return</span> AdvancedProbabilisticCircuits<span class="pl-k">.</span><span class="pl-c1">_build_node</span>(CustomProdNode, parameters, ns<span class="pl-k">...</span>)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> define custom log density function</span>
<span class="pl-en">logpdf</span>(n<span class="pl-k">::</span><span class="pl-c1">Node{T,V,S,P,CustomProdNode}</span>, x) <span class="pl-k">where</span> {T,V,S,P} <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">logpdf</span>(<span class="pl-c1">children</span>(n),<span class="pl-c1">Ref</span>(x)))</pre></div>
</article></div>