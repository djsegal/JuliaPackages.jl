<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-miniqhull" class="anchor" aria-hidden="true" href="#miniqhull"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MiniQhull</h1>
<p dir="auto"><a href="https://github.com/gridap/MiniQhull.jl/actions"><img src="https://github.com/gridap/MiniQhull.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/gridap/MiniQhull.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4622cad36da73e9343ee634cc416010e0935808508f3ab233e8c631c43344f93/68747470733a2f2f636f6465636f762e696f2f67682f6772696461702f4d696e695168756c6c2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/gridap/MiniQhull.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/gridap/MiniQhull.jl">MiniQhull</a> (<a href="http://www.qhull.org/" rel="nofollow">Qhull</a>-based Delaunay triangulation).</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">The <code>MiniQhull</code> julia package provides a single function <code>delaunay</code> overloaded with 3 methods:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delaunay(dim::Integer, numpoints::Integer, points::AbstractVector) -&gt; Matrix{Int32}"><pre><span class="pl-c1">delaunay</span>(dim<span class="pl-k">::</span><span class="pl-c1">Integer</span>, numpoints<span class="pl-k">::</span><span class="pl-c1">Integer</span>, points<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>) <span class="pl-k">-&gt;</span> Matrix{Int32}</pre></div>
<p dir="auto">Compute the Delaunay triangulation of a cloud of points in an arbitrary dimension <code>dim</code>. The length of vector <code>points</code> must be <code>dim*numpoints</code>. Vector <code>points</code> holds data in "component major order", i.e., components are consequitive within the vector. The returned matrix has shape <code>(dim+1, nsimplices)</code>, where <code>nsimplices</code> is the number of
simplices in the computed Delaunay triangulation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delaunay(points::AbstractMatrix) -&gt; Matrix{Int32}"><pre><span class="pl-c1">delaunay</span>(points<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>) <span class="pl-k">-&gt;</span> Matrix{Int32}</pre></div>
<p dir="auto">In this variant, the cloud of points is specified by a matrix with <code>size(matrix) == (dim, numpoints)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delaunay(points::AbstractVector) -&gt; Matrix{Int32}"><pre><span class="pl-c1">delaunay</span>(points<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>) <span class="pl-k">-&gt;</span> Matrix{Int32}</pre></div>
<p dir="auto">In this variant, the cloud of points is specified with a vector of <code>dim</code>-element vectors or
tuples. It is also possible to use a vector of other tuple-like types, like <code>SVector</code> from
<a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a>.</p>
<h3 dir="auto"><a id="user-content-adjusting-qhull-flags" class="anchor" aria-hidden="true" href="#adjusting-qhull-flags"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Adjusting Qhull flags</h3>
<p dir="auto">You can override the default set of flags that Qhull uses by passing
an additional <code>flags</code> argument:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="delaunay(dim::Integer, numpoints::Integer, points::AbstractVector, flags::AbstractString) -&gt; Matrix{Int32}
delaunay(points::AbstractMatrix, flags::AbstractString) -&gt; Matrix{Int32}
delaunay(points::AbstractVector, flags::AbstractString) -&gt; Matrix{Int32}"><pre><span class="pl-c1">delaunay</span>(dim<span class="pl-k">::</span><span class="pl-c1">Integer</span>, numpoints<span class="pl-k">::</span><span class="pl-c1">Integer</span>, points<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, flags<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">-&gt;</span> Matrix{Int32}
<span class="pl-c1">delaunay</span>(points<span class="pl-k">::</span><span class="pl-c1">AbstractMatrix</span>, flags<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">-&gt;</span> Matrix{Int32}
<span class="pl-c1">delaunay</span>(points<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>, flags<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">-&gt;</span> Matrix{Int32}</pre></div>
<p dir="auto">The default set of flags is <code>qhull d Qt Qbb Qc Qz</code> for up to 3 dimensions, and <code>qhull d Qt Qbb Qc Qx</code> for higher dimensions. The flags you pass override the default flags, i.e. you have to pass all the flags that Qhull should use.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MiniQhull
dim          = 2
numpoints    = 4
coordinates  = [0,0,0,1,1,0,1,1]
connectivity = delaunay(dim, numpoints, coordinates)
# output
3×2 Array{Int32,2}:
 4  4
 2  3
 1  1"><pre><span class="pl-k">using</span> MiniQhull
dim          <span class="pl-k">=</span> <span class="pl-c1">2</span>
numpoints    <span class="pl-k">=</span> <span class="pl-c1">4</span>
coordinates  <span class="pl-k">=</span> [<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>,<span class="pl-c1">0</span>,<span class="pl-c1">1</span>,<span class="pl-c1">1</span>]
connectivity <span class="pl-k">=</span> <span class="pl-c1">delaunay</span>(dim, numpoints, coordinates)
<span class="pl-c"><span class="pl-c">#</span> output</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int32,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">4</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MiniQhull
coordinates  = [0 0 1 1; 0 1 0 1]
connectivity = delaunay(coordinates)
# output
3×2 Array{Int32,2}:
 4  4
 2  3
 1  1"><pre><span class="pl-k">using</span> MiniQhull
coordinates  <span class="pl-k">=</span> [<span class="pl-c1">0</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">0</span> <span class="pl-c1">1</span>]
connectivity <span class="pl-k">=</span> <span class="pl-c1">delaunay</span>(coordinates)
<span class="pl-c"><span class="pl-c">#</span> output</span>
<span class="pl-c1">3</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{Int32,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">4</span>  <span class="pl-c1">4</span>
 <span class="pl-c1">2</span>  <span class="pl-c1">3</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">1</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MiniQhull, StaticArrays
dim = 5
npts = 500
pts = [SVector{dim, Float64}(rand(dim)) for i = 1:npts];
flags = &quot;qhull d Qbb Qc QJ Pp&quot; # custom flags
connectivity = delaunay(pts, flags)"><pre><span class="pl-k">using</span> MiniQhull, StaticArrays
dim <span class="pl-k">=</span> <span class="pl-c1">5</span>
npts <span class="pl-k">=</span> <span class="pl-c1">500</span>
pts <span class="pl-k">=</span> [<span class="pl-c1">SVector</span><span class="pl-c1">{dim, Float64}</span>(<span class="pl-c1">rand</span>(dim)) <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>npts];
flags <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>qhull d Qbb Qc QJ Pp<span class="pl-pds">"</span></span> <span class="pl-c"><span class="pl-c">#</span> custom flags</span>
connectivity <span class="pl-k">=</span> <span class="pl-c1">delaunay</span>(pts, flags)</pre></div>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>MiniQhull</code> is a registered Julia package. <code>MiniQhull</code> can be installed using the command:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pkg&gt; add MiniQhull"><pre class="notranslate"><code>pkg&gt; add MiniQhull
</code></pre></div>
<p dir="auto"><code>MiniQhull</code> depends two binary dependencies which are build for all Platforms by <a href="https://binarybuilder.org/" rel="nofollow">BinaryBuilder</a>:</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaBinaryWrappers/Qhull_jll.jl">Qhull_jll</a></li>
<li><a href="https://github.com/JuliaBinaryWrappers/QhullMiniWrapper_jll.jl">QhullMiniWrapper_jll</a></li>
</ul>
</article></div>