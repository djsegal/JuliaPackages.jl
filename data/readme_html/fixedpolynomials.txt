<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fixedpolynomials" class="anchor" aria-hidden="true" href="#fixedpolynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FixedPolynomials</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://juliaalgebra.github.io/FixedPolynomials.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaAlgebra/FixedPolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e20790b2d04abb3610194027db8c610e3ecab6db3a20e2f5bb3eb397a25eb2b2/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961416c67656272612f4669786564506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaAlgebra/FixedPolynomials.jl.svg?branch=master" style="max-width: 100%;"></a> <a href="https://ci.appveyor.com/project/juliaalgebra/fixedpolynomials-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/8af515cf6f289f5a18e3ed77ad9435af37626f0008b163c86bb97b5ecc6d49da/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6832797736616f7134383065316574642f6272616e63682f6d61737465723f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/h2yw6aoq480e1etd/branch/master?svg=true" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://juliaalgebra.github.io/FixedPolynomials.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/juliaalgebra/FixedPolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5cbc524e2f62b7e46f56e8fa520d08d5092c76812124b1511f169d47486834f9/68747470733a2f2f636f6465636f762e696f2f67682f6a756c6961616c67656272612f4669786564506f6c796e6f6d69616c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov branch" data-canonical-src="https://codecov.io/gh/juliaalgebra/FixedPolynomials.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><a href="https://github.com/juliaalgebra/FixedPolynomials.jl">FixedPolynomials.jl</a> is a library for
<em>really fast</em> evaluation of multivariate polynomials.
<a href="https://github.com/juliaalgebra/FixedPolynomials.jl/pull/3" data-hovercard-type="pull_request" data-hovercard-url="/JuliaAlgebra/FixedPolynomials.jl/pull/3/hovercard">Here</a> are the latest benchmark results.</p>
<p dir="auto">Since <code>FixedPolynomials</code> polynomials are optimised for fast evaluation they are not suited
for construction of polynomials.
It is recommended to construct a polynomial with an implementation of
<a href="https://github.com/juliaalgebra/MultivariatePolynomials.jl">MultivariatePolynomials.jl</a>, e.g.
<a href="https://github.com/juliaalgebra/DynamicPolynomials.jl">DynamicPolynomials.jl</a>, and to
convert it then into a <code>FixedPolynomials.Polynomial</code> for further computations.</p>
<h2 dir="auto"><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Getting started</h2>
<p dir="auto">Here is an example on how to create a <code>Polynomial</code> with <code>Float64</code> coefficients:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using FixedPolynomials
import DynamicPolynomials: @polyvar

@polyvar x y z

f = Polynomial{Float64}(x^2+y^3*z-2x*y)"><pre><span class="pl-k">using</span> FixedPolynomials
<span class="pl-k">import</span> DynamicPolynomials<span class="pl-k">:</span> <span class="pl-c1">@polyvar</span>

<span class="pl-c1">@polyvar</span> x y z

f <span class="pl-k">=</span> <span class="pl-c1">Polynomial</span><span class="pl-c1">{Float64}</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">+</span>y<span class="pl-k">^</span><span class="pl-c1">3</span><span class="pl-k">*</span>z<span class="pl-k">-</span><span class="pl-c1">2</span>x<span class="pl-k">*</span>y)</pre></div>
<p dir="auto">To evaluate <code>f</code> you simply have to pass in a <code>Vector{Float64}</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="x = rand(3)
f(x) # alternatively evaluate(f, x)"><pre>x <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">f</span>(x) <span class="pl-c"><span class="pl-c">#</span> alternatively evaluate(f, x)</span></pre></div>
<p dir="auto">But this is not the fastest way possible. In order to achieve the best performance we need to precompute some things and also preallocate
intermediate storage. For this we have <a href="@ref"><code>GradientConfig</code></a> and <a href="@ref"><code>JacobianConfig</code></a>.
For single polynomial the API is as follows</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cfg = GradientConfig(f) # this can be reused!
f(x) == evaluate(f, x, cfg)
# We can also compute the gradient of f at x
map(g -&gt; g(x), ∇f) == gradient(f, x, cfg)"><pre>cfg <span class="pl-k">=</span> <span class="pl-c1">GradientConfig</span>(f) <span class="pl-c"><span class="pl-c">#</span> this can be reused!</span>
<span class="pl-c1">f</span>(x) <span class="pl-k">==</span> <span class="pl-c1">evaluate</span>(f, x, cfg)
<span class="pl-c"><span class="pl-c">#</span> We can also compute the gradient of f at x</span>
<span class="pl-c1">map</span>(g <span class="pl-k">-&gt;</span> <span class="pl-c1">g</span>(x), ∇f) <span class="pl-k">==</span> <span class="pl-c1">gradient</span>(f, x, cfg)</pre></div>
<p dir="auto">We also have support for systems of polynomials:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cfg = JacobianConfig([f, f]) # this can be reused!
[f(x), f(x)] == evaluate([f, f] x, cfg)
# We can also compute the jacobian of [f, f] at x
jacobian(f, x, cfg)"><pre>cfg <span class="pl-k">=</span> <span class="pl-c1">JacobianConfig</span>([f, f]) <span class="pl-c"><span class="pl-c">#</span> this can be reused!</span>
[<span class="pl-c1">f</span>(x), <span class="pl-c1">f</span>(x)] <span class="pl-k">==</span> <span class="pl-c1">evaluate</span>([f, f] x, cfg)
<span class="pl-c"><span class="pl-c">#</span> We can also compute the jacobian of [f, f] at x</span>
<span class="pl-c1">jacobian</span>(f, x, cfg)</pre></div>
</article></div>