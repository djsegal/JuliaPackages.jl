<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mimiciamjl" class="anchor" aria-hidden="true" href="#mimiciamjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MimiCIAM.jl</h1>
<p dir="auto">This is a work-in-progress respository for a Julia-Mimi implementation the CIAM model adapted from Diaz, 2016.</p>
<h2 dir="auto"><a id="user-content-preparing-the-software-environment" class="anchor" aria-hidden="true" href="#preparing-the-software-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Preparing the Software Environment</h2>
<p dir="auto">Your first step is to install MimiCIAM.jl itself, which you can do as follows in Julia:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;MimiCIAM&quot;)"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MimiCIAM<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">You probably also want to install the Mimi package into your julia environment, so that you can use some of the tools in there:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Pkg.add(&quot;Mimi&quot;)"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Mimi<span class="pl-pds">"</span></span>)</pre></div>
<h2 dir="auto"><a id="user-content-running-the-model" class="anchor" aria-hidden="true" href="#running-the-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Running the Model</h2>
<p dir="auto">The model uses the Mimi framework and it is highly recommended to read the Mimi  documentation first to understand the code structure. The basic way to access a copy of the default MimiFAIRv2 model and explore the resuts is the following:</p>
<p dir="auto">The basic way to access a copy of the default MimiCIAM model is the following:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using MimiCIAM
m = MimiCIAM.get_model()
run(m)"><pre><span class="pl-k">using</span> MimiCIAM
m <span class="pl-k">=</span> MimiCIAM<span class="pl-k">.</span><span class="pl-c1">get_model</span>()
<span class="pl-c1">run</span>(m)</pre></div>
<h3 dir="auto"><a id="user-content-keyword-arguments" class="anchor" aria-hidden="true" href="#keyword-arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Keyword Arguments</h3>
<p dir="auto">The get_model() function has the following signature:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="get_model(;
    initfile = nothing,
    fixed::Bool = true,
    t::Int = 20,
    noRetreat::Bool = false,
    allowMaintain::Bool = false,
    popinput::Int = 0)"><pre><span class="pl-c1">get_model</span>(;
    initfile <span class="pl-k">=</span> <span class="pl-c1">nothing</span>,
    fixed<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">true</span>,
    t<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">20</span>,
    noRetreat<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>,
    allowMaintain<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-k">=</span> <span class="pl-c1">false</span>,
    popinput<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>)</pre></div>
<p dir="auto">which includes several optional keyword arguments to customize the CIAM model you wish to run:</p>
<ul dir="auto">
<li><code>initfile</code> (default = "data/batch/init.csv") : takes a path to a initilization file used to set several parameters (described below) and defaulting to</li>
<li><code>t</code> (default = 20): the number of timesteps to run</li>
</ul>
<p dir="auto"><em>we do not recommend altering the following without consultation with the authors as changes from the default are experimental</em></p>
<ul dir="auto">
<li><code>popinput</code> (default = 0): a socioeconomic parameter that specifies the population data source such with the following options, noting that as of now 1 and 2 are temporarily disabled so 0 is the only option: 0 (default), 1 (Jones &amp; O'Neill, 2016), or 2 (Merkens et al, 2016)</li>
<li><code>noRetreat</code> (default = false): a model parameter that specifies if retreat is allowed, such that if the parameter is true, segments will either protect or not adapt, but never retreat.</li>
<li><code>fixed</code> (default = true): a model parameter that specifies if you want to run the model as fixed (true) or flexible (false) with respect to adaptation</li>
<li><code>allowMaintain</code> (default = false): a model parameter that specifies if maintaining defenses is an option, such that if the parameter is true segments will have the option to maintain current defenses</li>
</ul>
<h3 dir="auto"><a id="user-content-initialization-file" class="anchor" aria-hidden="true" href="#initialization-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Initialization File</h3>
<p dir="auto">The <code>initfile</code> parameter above takes a path to a file that must be specially formatted as the <code>init.txt</code> file at "data/batch/init.csv":</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="run_name,lslr,subset,ssp,ssp_simplified
base,lsl_rcp85_p50.csv,false,IIASAGDP_SSP5_v9_130219,5"><pre class="notranslate"><code>run_name,lslr,subset,ssp,ssp_simplified
base,lsl_rcp85_p50.csv,false,IIASAGDP_SSP5_v9_130219,5
</code></pre></div>
<p dir="auto">This file will indicate the data to import for a given run, the bulk of this work being done in <code>MimiCIAM.import_model_data</code>. The file contains several parameters:</p>
<ul dir="auto">
<li><code>run_name</code> (default = base): the name of the run, can be used in labeling and results file production</li>
<li><code>lslr</code> (default = "lsl_rcp85_p50.csv"): the filename of the file used for lslr settings, which must be available in "data/lslr"</li>
<li><code>subset</code> (default = false): the list of of segment IDs to run the model for, where false indicates running all segments</li>
<li><code>ssp</code> (default = "IIASAGDP_SSP5_v9_130219"): the full SSP name that will provide several socioconomic parameters, see the names after "pop" and "ypcc" in "data/ssp" for options</li>
<li><code>ssp_simplified</code> (default = 5): the integer representing the SSP (1-5)</li>
</ul>
<p dir="auto">In order to make creation of such a file easier, we provide an (unexported) file creation function <code>MimiCIAM.write_init_file(run_name::String, outputdir::String, init_settings::Dict)</code> which writes the initialization file for a specificied <code>run_name</code> into <code>outputdir</code> using init_settings
found in <code>init_settings</code>.</p>
<p dir="auto">Note that <code>init_settings</code> is a Dictionary with one entry per parameter, best shown through the following example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="run_name = &quot;ctrl+SSP5&quot;

init_settings = Dict(
        :init_filename   =&gt; string(&quot;$run_name&quot;, &quot;_init.csv&quot;),
        :lslrfile        =&gt; &quot;lsl_rcp85_p50.csv&quot;,
        :subset          =&gt; false,
        :ssp             =&gt; &quot;IIASAGDP_SSP5_v9_130219&quot;,
        :ssp_simplified  =&gt; 5
    )

MimiCIAM.write_init_file(run_name, outputdir, init_settings)"><pre class="notranslate"><code>run_name = "ctrl+SSP5"

init_settings = Dict(
        :init_filename   =&gt; string("$run_name", "_init.csv"),
        :lslrfile        =&gt; "lsl_rcp85_p50.csv",
        :subset          =&gt; false,
        :ssp             =&gt; "IIASAGDP_SSP5_v9_130219",
        :ssp_simplified  =&gt; 5
    )

MimiCIAM.write_init_file(run_name, outputdir, init_settings)
</code></pre></div>
<h2 dir="auto"><a id="user-content-exploring-model-results" class="anchor" aria-hidden="true" href="#exploring-model-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Exploring Model Results</h2>
<p dir="auto">There are several options for exploring the results of a run model, many of which are described in the <code>Mimi.jl</code> documentation <a href="https://www.mimiframework.org/Mimi.jl/stable/howto/howto_2/" rel="nofollow">here</a>.  In addition, we offer some custom (unexported) functions including the following for a model <code>m</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="MimiCIAM.write_ciam(m; runname::String = &quot;base&quot;, sumsegs::String = &quot;seg&quot;, varnames::Bool = false, tag::Bool = false)"><pre class="notranslate"><code>MimiCIAM.write_ciam(m; runname::String = "base", sumsegs::String = "seg", varnames::Bool = false, tag::Bool = false)
</code></pre></div>
<p dir="auto">Write out model results to CSV file using arguments:</p>
<ul dir="auto">
<li><code>m</code>: output from <code>get_model</code> function</li>
<li><code>runname</code> (defaults to "base")</li>
<li><code>sumsegs</code> (defaults to "seg"): whether to sum across all segments ("global"), to region level ("rgn"), or no sums ("seg")</li>
<li><code>varnames</code> (defaults to false): if not false, write the passed variable names; if false get defaults from file</li>
<li><code>tag</code> (defaults to false): if not false, a string to add to the end of the filename, which is written out as "runname_sumsegs_rcp_tag.csv"</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="MimiCIAM.write_optimal_costs(m; outputdir::String = joinpath(@__DIR__,&quot;..&quot;,&quot;output&quot;), runname=&quot;base&quot;)"><pre class="notranslate"><code>MimiCIAM.write_optimal_costs(m; outputdir::String = joinpath(@__DIR__,"..","output"), runname="base")
</code></pre></div>
<p dir="auto">Write out optimal adaptation costs for model <code>m</code> with runname <code>runname</code> into outputdirectory <code>outputdir</code>.</p>
</article></div>