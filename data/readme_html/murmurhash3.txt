<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-murmurhash3-a-pure-julia-implementation-of-the-murmurhash3-functions" class="anchor" aria-hidden="true" href="#murmurhash3-a-pure-julia-implementation-of-the-murmurhash3-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MurmurHash3: a pure Julia implementation of the MurmurHash3 functions</h1>
<p dir="auto"><a href="https://github.com/JuliaString/MurmurHash3.jl.git"><img src="https://camo.githubusercontent.com/7a666dc4cd65df79ea90a381b55de2da4e8a42ee0479e8f6f22809ef9b1cc7fc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961537472696e672f4d75726d757248617368332e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaString/MurmurHash3.jl.svg" style="max-width: 100%;"></a> <a href="https://github.com/JuliaString/MurmurHash3.jl.git"><img src="https://camo.githubusercontent.com/44a6dafef1d8aea80ee654940bca89242cb5417cc0f6a16b5f0fa43f9693ddee/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f4a756c6961537472696e672f4d75726d757248617368332e6a6c2e737667" alt="" data-canonical-src="https://img.shields.io/github/release-date/JuliaString/MurmurHash3.jl.svg" style="max-width: 100%;"></a> <a href="LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a> <a href="https://github.com/JuliaString/MurmurHash3.jl/issues"><img src="https://camo.githubusercontent.com/f5054ffcd4245c10d3ec85ef059e07aacf787b560f83ad4aec2236364437d097/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174" alt="contributions welcome" data-canonical-src="https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat" style="max-width: 100%;"></a></p>
<table>
<thead>
<tr>
<th align="center"><strong>Julia Version</strong></th>
<th align="center"><strong>Unit Tests</strong></th>
<th align="center"><strong>Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://github.com/JuliaLang/Julia"><img src="https://camo.githubusercontent.com/514feca078cec1d0f876174356358ac616bed330b2a880fa65daca3148ead714/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c69614c616e672f6a756c69612e737667" alt="" data-canonical-src="https://img.shields.io/github/release/JuliaLang/julia.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/JuliaString/MurmurHash3.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a85ea44055a3f8355b7f23985255c5c4c53ef67e96f3d81fba7e00c830d87913/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f4d75726d757248617368332e6a6c2e737667" alt="" data-canonical-src="https://travis-ci.org/JuliaString/MurmurHash3.jl.svg" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/MurmurHash3.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/663d418c610723a6ca8f399376b55796066061b83d7e3ba0d97bd1f873b1397f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f4d75726d757248617368332e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/MurmurHash3.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
<tr>
<td align="center">Julia Latest</td>
<td align="center"><a href="https://travis-ci.org/JuliaString/MurmurHash3.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1974d506d4b474c2d3fbc147291dd03182b3cfea3b6fc4b9fc6d58b44c6a0ca7/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f4d75726d757248617368332e6a6c2e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://travis-ci.org/JuliaString/MurmurHash3.jl.svg?branch=master" style="max-width: 100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/JuliaString/MurmurHash3.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/663d418c610723a6ca8f399376b55796066061b83d7e3ba0d97bd1f873b1397f/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961537472696e672f4d75726d757248617368332e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/JuliaString/MurmurHash3.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></td>
</tr>
</tbody>
</table>
<p dir="auto">Note: this can be used to replace the C MurmurHash library used by base Julia,
to implement a <code>hash</code> function that gives compatible results.</p>
<p dir="auto">This provides the following functions (written in pure Julia):
<code>mmhash128</code> which hashes a UTF-8 (or ASCII, which is compatible) string
<code>mmhash128_c</code> which can be used to hash an generic abstract string (by converting to UTF-8 on the fly, without having to allocate the string, working a few characters at a time)
Note that the hashes on 64-bit systems are <em>not</em> the same as on 32-bit systems
(this is true for base Julia <code>hash</code> as well)</p>
<p dir="auto"><code>mmhash32</code> which creates a 32 bit hash from a UTF-8/ASCII string
(this works for <code>String</code>, as well as some of the <code>Str</code> types, such as <code>ASCIIStr</code>, <code>UTF8Str</code>, <code>Binary</code>, <code>Text1Str</code> can all be hashed directly)
(note, there is no mmhash32_c yet, so other strings have to be converted to <code>String</code> type before hashing)</p>
<p dir="auto">Julia uses the following code to create a hash using the C MurmurHash library:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="const memhash = UInt === UInt64 ? :memhash_seed : :memhash32_seed
const memhash_seed = UInt === UInt64 ? 0x71e729fd56419c81 : 0x56419c81

function hash(s::String, h::UInt)
    h += memhash_seed
    ccall(memhash, UInt, (Ptr{UInt8}, Csize_t, UInt32), s, sizeof(s), h % UInt32) + h
end"><pre class="notranslate"><code>const memhash = UInt === UInt64 ? :memhash_seed : :memhash32_seed
const memhash_seed = UInt === UInt64 ? 0x71e729fd56419c81 : 0x56419c81

function hash(s::String, h::UInt)
    h += memhash_seed
    ccall(memhash, UInt, (Ptr{UInt8}, Csize_t, UInt32), s, sizeof(s), h % UInt32) + h
end
</code></pre></div>
<p dir="auto">similar code, such as that in <code>JuliaString/StrBase.jl/src/hash.jl</code>, implements the
<code>hash</code> function for all of the <code>Str</code> types, but is specialized for performance based on the type of the string and whether or not it is aligned in memory.</p>
</article></div>