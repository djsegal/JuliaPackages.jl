<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-mvnormalcdf" class="anchor" aria-hidden="true" href="#mvnormalcdf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MvNormalCDF</h1>
<p dir="auto">Quasi-Monte-Carlo numerical computation of multivariate normal probabilities.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PharmCat/MvNormalCDF.jl/workflows/Tier%201/badge.svg"><img src="https://github.com/PharmCat/MvNormalCDF.jl/workflows/Tier%201/badge.svg" alt="Tier 1" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://codecov.io/gh/PharmCat/MvNormalCDF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1c6467ac29a75456a9df7d1ae01da8f8de00e311430c5f152591230005e5e31c/68747470733a2f2f636f6465636f762e696f2f67682f506861726d4361742f4d764e6f726d616c4344462e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/PharmCat/MvNormalCDF.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">This function uses an algorithm given in the paper
"Numerical Computation of Multivariate Normal Probabilities", in
J. of Computational and Graphical Stat., 1(1992), pp. 141-149, by
Alan Genz, WSU Math, PO Box 643113, Pullman, WA 99164-3113
Email : <a href="mailto:alangenz@wsu.edu">alangenz@wsu.edu</a></p>
<p dir="auto">The primary references for the numerical integration are
"On a Number-Theoretical Integration Method"
H. Niederreiter, Aequationes Mathematicae, 8(1972), pp. 304-11, and
"Randomization of Number Theoretic Methods for Multiple Integration"
R. Cranley and T.N.L. Patterson, SIAM J Numer Anal, 13(1976), pp. 904-14.</p>
<p dir="auto">Re-coded in Julia from the MATLAB function qsimvnv(m,r,a,b)
Alan Genz is the author the MATLAB qsimvnv() function.</p>
<p dir="auto">Alan Genz software website: <a href="http://archive.is/jdeRh" rel="nofollow">http://archive.is/jdeRh</a>
Source code to MATLAB qsimvnv() function: <a href="http://archive.is/h5L37" rel="nofollow">http://archive.is/h5L37</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/PharmCat/MvNormalCDF.jl/main/.github/images/mvnpi.png"><img src="https://raw.githubusercontent.com/PharmCat/MvNormalCDF.jl/main/.github/images/mvnpi.png" alt="MVNCDFFORMULA" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="import Pkg; Pkg.add(&quot;MvNormalCDF&quot;)"><pre class="notranslate"><code>import Pkg; Pkg.add("MvNormalCDF")
</code></pre></div>
<h1 dir="auto"><a id="user-content-methods" class="anchor" aria-hidden="true" href="#methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Methods</h1>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    mvnormcdf(dist::MvNormal, a, b; m::Integer = 1000*size(dist.Σ,1), rng = RandomDevice())"><pre class="notranslate"><code>    mvnormcdf(dist::MvNormal, a, b; m::Integer = 1000*size(dist.Σ,1), rng = RandomDevice())
</code></pre></div>
<p dir="auto">Computes the Multivariate Normal probability integral using a quasi-Monte-Carlo
algorithm with m points for multivariate normal distributions (<a href="https://juliastats.org/Distributions.jl/stable/multivariate/#Distributions.MvNormal" rel="nofollow">MvNormal</a>)</p>
<p dir="auto">Results will vary slightly from run-to-run due to the quasi-Monte-Carlo
algorithm.</p>
<p dir="auto">There is no covariance matrix Σ positive definite check.</p>
<p dir="auto">Probability p is output with error estimate e.</p>
<blockquote>
<p dir="auto"><g-emoji class="g-emoji" alias="warning" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png">⚠️</g-emoji> <strong>Check estimate e after integration.</strong>: Be very careful here! If <code>e == 0</code> - results could be unstable or could be wrong (one of the reasons can be an ill-conditioned Σ matrix).</p>
</blockquote>
<h2 dir="auto"><a id="user-content-arguments" class="anchor" aria-hidden="true" href="#arguments"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arguments</h2>
<ul dir="auto">
<li><code>dist::MvNormal</code>: multivariate normal distributions from Distributions.jl</li>
<li><code>a::AbstractVector</code>: lower integration limit column vector</li>
<li><code>b::AbstractVector</code>: upper integration limit column vector</li>
<li><code>m::Integer</code>:        number of integration points (default 1000*dimension)</li>
<li><code>rng</code>: random number generator</li>
</ul>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="    mvnormcdf(μ::AbstractVector{&lt;:Real}, Σ::AbstractMatrix{&lt;:Real}, a::AbstractVector{&lt;:Real}, b::AbstractVector{&lt;:Real}; m::Integer = 1000*size(Σ,1), rng = RandomDevice())"><pre class="notranslate"><code>    mvnormcdf(μ::AbstractVector{&lt;:Real}, Σ::AbstractMatrix{&lt;:Real}, a::AbstractVector{&lt;:Real}, b::AbstractVector{&lt;:Real}; m::Integer = 1000*size(Σ,1), rng = RandomDevice())
</code></pre></div>
<p dir="auto">Computes the Non-central Multivariate Normal probability integral with covariance matrix Σ and mean vector μ [x,...].</p>
<h2 dir="auto"><a id="user-content-arguments-1" class="anchor" aria-hidden="true" href="#arguments-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Arguments</h2>
<ul dir="auto">
<li><code>μ::AbstractVector</code>: vector of means</li>
<li><code>Σ::AbstractMatrix</code>: positive-definite covariance matrix of MVN distribution</li>
<li><code>a::AbstractVector</code>: lower integration limit column vector</li>
<li><code>b::AbstractVector</code>: upper integration limit column vector</li>
<li><code>m::Integer</code>:        number of integration points (default 1000*dimension)</li>
<li><code>rng</code>: random number generator</li>
</ul>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Σ = [4 3 2 1; 3 5 -1 1; 2 -1 4 2; 1 1 2 5]
μ = zeros(4)
a = [-Inf; -Inf; -Inf; -Inf]
b = [1; 2; 3; 4]
m = 5000
(p,e) = mvnormcdf(μ, Σ, a, b; m=m)
#(0.605219554009911, 0.0015718064928452481)"><pre>Σ <span class="pl-k">=</span> [<span class="pl-c1">4</span> <span class="pl-c1">3</span> <span class="pl-c1">2</span> <span class="pl-c1">1</span>; <span class="pl-c1">3</span> <span class="pl-c1">5</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">1</span>; <span class="pl-c1">2</span> <span class="pl-k">-</span><span class="pl-c1">1</span> <span class="pl-c1">4</span> <span class="pl-c1">2</span>; <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">5</span>]
μ <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">4</span>)
a <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">Inf</span>; <span class="pl-k">-</span><span class="pl-c1">Inf</span>; <span class="pl-k">-</span><span class="pl-c1">Inf</span>; <span class="pl-k">-</span><span class="pl-c1">Inf</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">1</span>; <span class="pl-c1">2</span>; <span class="pl-c1">3</span>; <span class="pl-c1">4</span>]
m <span class="pl-k">=</span> <span class="pl-c1">5000</span>
(p,e) <span class="pl-k">=</span> <span class="pl-c1">mvnormcdf</span>(μ, Σ, a, b; m<span class="pl-k">=</span>m)
<span class="pl-c"><span class="pl-c">#</span>(0.605219554009911, 0.0015718064928452481)</span></pre></div>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="     mvnormcdf(Σ::AbstractMatrix{&lt;:Real}, a::AbstractVector{&lt;:Real}, b::AbstractVector{&lt;:Real}; m::Integer = 1000*size(Σ,1), rng = RandomDevice())"><pre class="notranslate"><code>     mvnormcdf(Σ::AbstractMatrix{&lt;:Real}, a::AbstractVector{&lt;:Real}, b::AbstractVector{&lt;:Real}; m::Integer = 1000*size(Σ,1), rng = RandomDevice())
</code></pre></div>
<p dir="auto">Computes the Multivariate Normal probability integral with covariance matrix Σ, mean [0,...].</p>
<h2 dir="auto"><a id="user-content-example-1" class="anchor" aria-hidden="true" href="#example-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Σ = [4 2; 2 3]
μ = [1; 2]
a = [-Inf; -Inf]
b = [2; 2]
(p,e) = mvnormcdf(Σ, a-μ, b-μ)
#(0.4306346895870772, 0.00015776288569406053)"><pre>Σ <span class="pl-k">=</span> [<span class="pl-c1">4</span> <span class="pl-c1">2</span>; <span class="pl-c1">2</span> <span class="pl-c1">3</span>]
μ <span class="pl-k">=</span> [<span class="pl-c1">1</span>; <span class="pl-c1">2</span>]
a <span class="pl-k">=</span> [<span class="pl-k">-</span><span class="pl-c1">Inf</span>; <span class="pl-k">-</span><span class="pl-c1">Inf</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">2</span>; <span class="pl-c1">2</span>]
(p,e) <span class="pl-k">=</span> <span class="pl-c1">mvnormcdf</span>(Σ, a<span class="pl-k">-</span>μ, b<span class="pl-k">-</span>μ)
<span class="pl-c"><span class="pl-c">#</span>(0.4306346895870772, 0.00015776288569406053)</span></pre></div>
<h1 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference</h1>
<ul dir="auto">
<li>Genz, A. (1992). Numerical computation of multivariate normal probabilities. Journal of Computational and Graphical Statistics, 1, 141--150</li>
<li>Genz, A. (1993). Comparison of methods for the computation of multivariate normal probabilities. Computing Science and Statistics, 25, 400--405</li>
</ul>
<h1 dir="auto"><a id="user-content-ps" class="anchor" aria-hidden="true" href="#ps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>P.S.</h1>
<p dir="auto">Idea was taken from this <a href="https://github.com/JuliaStats/StatsFuns.jl/pull/114" data-hovercard-type="pull_request" data-hovercard-url="/JuliaStats/StatsFuns.jl/pull/114/hovercard">PR</a> to StatsFuns.jl.</p>
<p dir="auto">See discourse discussion <a href="https://discourse.julialang.org/t/mvn-cdf-have-it-coded-need-help-getting-integrating-into-distributions-jl/38631" rel="nofollow">here</a>.</p>
<p dir="auto">Thanks to @blackeneth.</p>
<h1 dir="auto"><a id="user-content-pps" class="anchor" aria-hidden="true" href="#pps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>P.P.S</h1>
<blockquote>
<p dir="auto">QSIMVNV(m,r,a,b) and _chlrdr(r,a,b)</p>
<p dir="auto">Copyright (C) 2013, Alan Genz,  All rights reserved.</p>
<p dir="auto">Redistribution and use in source and binary forms, with or without
modification, are permitted provided the following conditions are met:</p>
<ol dir="auto">
<li>Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.</li>
<li>Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the
distribution.</li>
<li>The contributor name(s) may not be used to endorse or promote
products derived from this software without specific prior
written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</li>
</ol>
</blockquote>
</article></div>