<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><div align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ChifiSource/image_dump/blob/main/toolips/toolips.svg"><img src="https://github.com/ChifiSource/image_dump/raw/main/toolips/toolips.svg" width="200" height="300/img" style="max-width: 100%;"></a>
<p dir="auto">( the toolips website is going to be down for a bit, pending a new version release. sorry for the inconvenience )</p>
<p dir="auto"><a href="https://juliahub.com/ui/Packages/Toolips/TrAr4?t=2" rel="nofollow"><img src="https://camo.githubusercontent.com/31519ff6b4b4235f0525960b114a3499adde97a1cd8f68e3a67540d9339f8603/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f546f6f6c6970732f646570732e737667" alt="deps" data-canonical-src="https://juliahub.com/docs/Toolips/deps.svg" style="max-width: 100%;"></a>
<a href="https://juliahub.com/ui/Packages/Toolips/TrAr4" rel="nofollow"><img src="https://camo.githubusercontent.com/68f8aa224259aca697ebb61f3639744899781924dc2c0a1e8884f19ae80fbc1c/68747470733a2f2f6a756c69616875622e636f6d2f646f63732f546f6f6c6970732f76657273696f6e2e737667" alt="version" data-canonical-src="https://juliahub.com/docs/Toolips/version.svg" style="max-width: 100%;"></a>
<br></p>
<p dir="auto"><strong>|</strong>    <a href="https://toolips.app/" rel="nofollow">toolips app</a>   <strong>|</strong>  <a href="https://doc.toolips.app" rel="nofollow">documentation</a> <strong>|</strong>   <a href="https://toolips.app/?page=examples" rel="nofollow">examples</a>    <strong>|</strong>    <a href="https://toolips.app/?page=extensions" rel="nofollow">extensions</a>    <strong>|</strong></p>
</div>
<p dir="auto"><strong>Toolips.jl</strong> is a <strong>fast</strong>, <strong>asynchronous</strong>, <strong>low-memory</strong>, <strong>full-stack</strong>, and <strong>reactive</strong> web-development framework <strong>always</strong> written in <strong>pure</strong> Julia. Here is Toolips.jl in a nutshell:</p>
<ul dir="auto">
<li><strong>Fast and secure</strong>. All routes are served through Julia, and anything that can be written must be written using a method that can only write very specific types.</li>
<li><strong>HTTPS capable</strong>, load balancer friendly. Can easily be deployed with SSL.</li>
<li><strong>Extensible</strong> servers, components, and methods, they are all extendable!</li>
<li><strong>Modular</strong> applications. Toolips applications are regular Julia modules.</li>
<li><strong>Regular Julia</strong> projects.</li>
<li><strong>Declarative</strong>, high-level syntax.</li>
<li>Extremely <strong>low memory usage</strong>.</li>
<li><strong>Asynchronous</strong>. Run multiple functions at the same time as you serve to each incoming request.</li>
<li><strong>Versatile</strong>. Toolips.jl can be used for all scenarios, from full-stack web-development to APIs.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg; Pkg.add(&quot;Toolips&quot;)"><pre><span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Toolips<span class="pl-pds">"</span></span>)</pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; # Press ] to enter your Pkg REPL
julia&gt; ]
pkg&gt; add Toolips"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c"><span class="pl-c">#</span> Press ] to enter your Pkg REPL</span>
julia<span class="pl-k">&gt;</span> ]
pkg<span class="pl-k">&gt;</span> add Toolips</pre></div>
<h5 dir="auto"><a id="user-content-projects" class="anchor" aria-hidden="true" href="#projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>projects</h5>
<p dir="auto">Here are some projects created using Toolips to both inspire and demonstrate!</p>
<div align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ChifiSource/image_dump/blob/main/toolips/olive/olivelogo.png"><img src="https://github.com/ChifiSource/image_dump/raw/main/toolips/olive/olivelogo.png" width="200" style="max-width: 100%;"></a>
  </div>
<p dir="auto"><a href="https://github.com/ChifiSource/Olive.jl">Olive</a> is a mission to create a cell-based IDE, rather tthan cell-based notebook environment, inside of Julia using only Julia. This is somewhat similar to Pluto.jl, however is also a lot more feature-rich, extensible, and built differently.</p>
<div align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ChifiSource/image_dump/blob/main/toolips/toolipsapp.png"><img src="https://github.com/ChifiSource/image_dump/raw/main/toolips/toolipsapp.png" width="200" style="max-width: 100%;"></a>
  </div>
<p dir="auto"><a href="https://github.com/ChifiSource/ToolipsApp.jl">ToolipsApp</a> was originally conceived in order to demonstrate the first version of toolips, and has continued to see development throughout the development of toolips itself.</p>
<div align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/emmettgb/EmsComputer.jl/blob/main/public/images/animated.gif"><img src="https://github.com/emmettgb/EmsComputer.jl/raw/main/public/images/animated.gif" width="200" data-animated-image="" style="max-width: 100%;"></a>
  </div>
<p dir="auto"><a href="https://github.com/emmettgb/EmsComputer.jl">EmsComputer</a> is a blog and project website.</p>
<div align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ChifiSource/image_dump/blob/main/toolips/jlchat.png"><img src="https://github.com/ChifiSource/image_dump/raw/main/toolips/jlchat.png" width="200" style="max-width: 100%;"></a>
  </div>
<p dir="auto"><a href="https://github.com/emmettgb/JLChat.jl">JLChat</a> is a simple chat application that demonstrates the <code>ToolipsSession</code> RPC feature.</p>
<h5 dir="auto"><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>basics</h5>
<p dir="auto">Toolips is pretty easy to grasp, especially for those who have worked with similar web-frameworks in the past. If you prefer video, <a href="https://www.youtube.com/playlist?list=PLCXbkShHt01s3kd2ZA62KoKhWBFfKXNTd" rel="nofollow">here is a toolips tutorial playlist</a>. To get started, you may create a new project with <code>Toolips.new_app</code> or <code>Toolips.new_webapp</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content=""><pre></pre></div>
<ul dir="auto">
<li><strong>Here are the different types you might encounter while using toolips</strong>:</li>
<li>Connections</li>
<li>ServerExtensions</li>
<li>Routes</li>
<li>ToolipsServers</li>
<li>Modifiers</li>
<li>Servables</li>
</ul>
<p dir="auto"><code>Connections</code> are passed through our route functions. ServerExtensions are loaded by the server on startup and extend the capabilities of the framework. Routes are where the functions that write our pages go and tell the browser what to do with our client. <code>ToolipsServers</code> hold routes and extensions and create a server to serve said routes. While Connections facilitate incoming clients, client callbacks are left to <code>Modifiers</code>. These can be used for anything from changing properties of elements to changing incoming GET requests. Finally, there is the Servable; which is essentially anything with a <code>name</code> field which can be written to a <code>Connection</code> with <code>write!</code>. Let's write our first route! We will do so with the <code>route</code> method.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Toolips

newroute = route(&quot;/&quot;) do c::Connection

end"><pre><span class="pl-k">using</span> Toolips

newroute <span class="pl-k">=</span> <span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> c<span class="pl-k">::</span><span class="pl-c1">Connection</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">We will use <code>write!</code> to write a <code>String</code> to our <code>Connection</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Toolips

newroute = route(&quot;/&quot;) do c::Connection
    write!(c, &quot;Hello world!&quot;)
end"><pre><span class="pl-k">using</span> Toolips

newroute <span class="pl-k">=</span> <span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> c<span class="pl-k">::</span><span class="pl-c1">Connection</span>
    <span class="pl-c1">write!</span>(c, <span class="pl-s"><span class="pl-pds">"</span>Hello world!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">Next, we need to make our server. For this we just provide our route in a <code>Vector</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Toolips

newroute = route(&quot;/&quot;) do c::Connection
    write!(c, &quot;Hello world!&quot;)
end

server = WebServer(routes = [newroute])
server.start()"><pre><span class="pl-k">using</span> Toolips

newroute <span class="pl-k">=</span> <span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> c<span class="pl-k">::</span><span class="pl-c1">Connection</span>
    <span class="pl-c1">write!</span>(c, <span class="pl-s"><span class="pl-pds">"</span>Hello world!<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span>

server <span class="pl-k">=</span> <span class="pl-c1">WebServer</span>(routes <span class="pl-k">=</span> [newroute])
server<span class="pl-k">.</span><span class="pl-c1">start</span>()</pre></div>
<p dir="auto">It really is <strong>that easy!</strong>. As a final introduction, we will briefly review Components. Components can be constructed with basically whatever <code>String</code> Pairs or key-word arguments we want. These are HTML properties given to our elements. That being said, Component functions are simply HTML element names.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Toolips

newroute = route(&quot;/&quot;) do c::Connection
    mydiv = div(&quot;mydiv&quot;)
    myb = b(&quot;label&quot;, text = &quot;hello world!&quot;)
    push!(mydiv, myb)
    write!(c, mydiv)
end

server = WebServer(routes = [newroute])
server.start()"><pre><span class="pl-k">using</span> Toolips

newroute <span class="pl-k">=</span> <span class="pl-c1">route</span>(<span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> c<span class="pl-k">::</span><span class="pl-c1">Connection</span>
    mydiv <span class="pl-k">=</span> <span class="pl-c1">div</span>(<span class="pl-s"><span class="pl-pds">"</span>mydiv<span class="pl-pds">"</span></span>)
    myb <span class="pl-k">=</span> <span class="pl-c1">b</span>(<span class="pl-s"><span class="pl-pds">"</span>label<span class="pl-pds">"</span></span>, text <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>hello world!<span class="pl-pds">"</span></span>)
    <span class="pl-c1">push!</span>(mydiv, myb)
    <span class="pl-c1">write!</span>(c, mydiv)
<span class="pl-k">end</span>

server <span class="pl-k">=</span> <span class="pl-c1">WebServer</span>(routes <span class="pl-k">=</span> [newroute])
server<span class="pl-k">.</span><span class="pl-c1">start</span>()</pre></div>
<h5 dir="auto"><a id="user-content-new-in-023" class="anchor" aria-hidden="true" href="#new-in-023"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>new in 0.2.3</h5>
<ul dir="auto">
<li>new get binding for getting children from Components (get(::Component{&lt;:Any}, s::String))</li>
<li>new <code>getarg</code> bindings that parse types or have a default, (<code>get_arg(::Connection, ::Symbol, ::Any)</code>, <code>get_arg(::Connection, ::Symbol, ::Type)</code>)</li>
<li>Some improvements to <code>style!</code></li>
<li>Updated server display</li>
<li><code>Modifier</code> abstract type (brought here from <code>ToolipsSession</code>)</li>
</ul>
</article></div>