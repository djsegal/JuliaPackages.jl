<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-stringliterals" class="anchor" aria-hidden="true" href="#stringliterals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>StringLiterals</h1>
<p><a href="https://travis-ci.org/JuliaString/StringLiterals.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bd0742a16d42dea6fe74484793b9bd31cb644a2ec93e8fbbb498b2412066a1eb/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961537472696e672f537472696e674c69746572616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaString/StringLiterals.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="https://coveralls.io/github/JuliaString/StringLiterals.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/449c013a1bcb1016d109c3bfd2acc103d10e73953b6a1d6fde468b8bbe76e74d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4a756c6961537472696e672f537472696e674c69746572616c732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/JuliaString/StringLiterals.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/JuliaString/StringLiterals.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/214157129cdb3914864173ec73b3e252d37dcbe78e9f0b641551c7d4588f3030/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c6961537472696e672f537472696e674c69746572616c732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaString/StringLiterals.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>The StringLiterals package is an attempt to bring a cleaner string literal syntax to Julia, as well as having an easier way of producing formatted strings, borrowing from both Python and C formatted printing syntax.  It also adds support for using LaTex, Emoji, HTML, or Unicode entity names that are looked up at compile-time.</p>
<p>Currently, it adds a Swift style string macro, <code>f"..."</code>, which uses the Swift syntax for
interpolation, i.e. <code>\(expression)</code>.  This means that you never have to worry about strings with
the $ character in them, which is rather frequent in some applications.
Also, Unicode sequences are represented as in Swift, i.e. as <code>\u{hexdigits}</code>, where there
can be from 1 to 6 hex digits. This syntax eliminates having to worry about always outputting
4 or 8 hex digits, to prevent problems with 0-9,A-F,a-f characters immediately following.
Finally, I have added four ways of representing characters in the literal string,
<code>\:emojiname:</code>, <code>\&lt;latexname&gt;</code>, <code>\&amp;htmlname;</code> and <code>\N{UnicodeName}</code>.
This makes life a lot easier when you want to keep the text of a program in ASCII, and
also to be able to write programs using those characters that might not even display
correctly in their editor.</p>
<p>It also adds a string macro that instead of building a string, can print the strings and interpolated values directly, without having to create a string out of all the parts.
Finally, there are uppercase versions of the macros, which also supports the legacy sequences, $ for string interpolation, <code>\x</code> followed by 1 or 2 hex digits, <code>\u</code> followed by 1 to 4 hex digits, and <code>\U</code> followed by 1 to 8 hex digits.</p>
<p>This uses a fork of the <a href="https://github.com/JuliaIO/Formatting.jl">https://github.com/JuliaIO/Formatting.jl</a> package to provide formatting capability, as well as Tom Breloff's PR <a href="https://github.com/JuliaIO/Formatting.jl/pull/10">https://github.com/JuliaIO/Formatting.jl/pull/10</a>, which provides the capability of using settable printing defaults based on the types of the argument.
The formatting code has been extensively modified, see <a href="https://github.com/JuliaString/Format.jl">https://github.com/JuliaString/Format.jl</a>.</p>
<ul>
<li>
<p><code>\</code> can be followed by: 0, $, ", ', , a, b, e, f, n, r, t, u, v, N, %, (, &lt;, {, : or &amp;.
In the legacy modes, x and U are also allowed after the <code>\</code>.
Unlike standard Julia string literals, unsupported characters give an error (as in Swift).</p>
</li>
<li>
<p><code>\0</code> outputs a nul byte (0x00) (note: as in Swift, octal sequences are not supported, just the nul byte)</p>
</li>
<li>
<p><code>\a</code> outputs the "alarm" or "bell" control code (0x07)</p>
</li>
<li>
<p><code>\b</code> outputs the "backspace" control code (0x08)</p>
</li>
<li>
<p><code>\e</code> outputs the "escape" control code (0x1b)</p>
</li>
<li>
<p><code>\f</code> outputs the "formfeed" control code (0x0c)</p>
</li>
<li>
<p><code>\n</code> outputs the "newline" or "linefeed" control code (0x0a)</p>
</li>
<li>
<p><code>\r</code> outputs the "return" (carriage return) control code (0x0d)</p>
</li>
<li>
<p><code>\t</code> outputs the "tab" control code (0x09)</p>
</li>
<li>
<p><code>\v</code> outputs the "vertical tab" control code (0x0b)</p>
</li>
<li>
<p><code>\u{&lt;hexdigits&gt;}</code> is used to represent a Unicode character, with 1-6 hex digits.</p>
</li>
<li>
<p><code>\&lt;</code> followed by a LaTeX entity name followed by <code>&gt;</code> outputs that character or sequence if the name is valid.</p>
</li>
<li>
<p><code>\:</code> followed by an Emoji name followed by <code>:</code> outputs that character or sequence (if a valid name)</p>
</li>
<li>
<p><code>\&amp;</code> followed by an HTML entity name followed by <code>;</code> outputs that character or sequence (if a valid name)</p>
</li>
<li>
<p><code>\N{</code> followed by a Unicode entity name (case-insensitive!) followed by a <code>}</code> outputs that Unicode character (if a valid name)</p>
</li>
<li>
<p><code>\(expression)</code> simply interpolates the value of the expression, the same as <code>$(expression)</code> in standard Julia string literals.</p>
</li>
<li>
<p><code>\%&lt;ccc&gt;&lt;formatcode&gt;(arguments)</code> is interpolated as a call to <code>cfmt("&lt;cccc&gt;&lt;formatcode&gt;",arguments)</code>, where <code>&lt;ccc&gt;&lt;formatcode&gt;</code> is a C-style format string.</p>
</li>
<li>
<p><code>\%(arguments)</code> is interpolated as a call to <code>fmt(arguments)</code>.
This is especially useful when defaults have been set for the type of the first argument.</p>
</li>
<li>
<p><code>fmt_default!{T}(::Type{T}, syms::Symbol...; kwargs...)</code> sets the defaults for a particular type.</p>
</li>
<li>
<p><code>fmt_default!(syms::Symbol...; kwargs...)</code> sets the defaults for all types.</p>
</li>
</ul>
<p>Symbols that can currently be used are: <code>:ljust</code> or <code>:left</code>, <code>:rjust</code> or <code>:right</code>, <code>:commas</code>, <code>:zpad</code> or <code>:zeropad</code>, and <code>:ipre</code> or <code>:prefix</code>.</p>
<ul>
<li><code>reset!{T}(::Type{T})</code> resets the defaults for a particular type.</li>
<li><code>defaultSpec(x)</code> will return the defaults for the type of x, and</li>
<li><code>defaultSpec{T}(::Type{T})</code> will return the defaults for the given type.</li>
</ul>
<p>There is currently support for Python style formatting, although that is a work-in-progress,
and I am intending to improve the syntax to make it as close as possible to Python's 3.6 format strings.
Currently, the syntax is <code>\{&lt;formatstring&gt;}(expression)</code>, however I plan on changing it shortly to <code>\{expression}</code> (equivalent to <code>pyfmt("", expression)</code>, and <code>\{expression;formatstring}</code> (equivalent to <code>pyfmt("formatstring", expression)</code>.</p>
</article></div>