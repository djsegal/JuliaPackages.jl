<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-rbfinterpolationtools" class="anchor" aria-hidden="true" href="#rbfinterpolationtools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>RbfInterpolationTools</h1>
<p dir="auto"><a href="https://munozariasjm.github.io/RbfInterpolationTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documents" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/munozariasjm/RbfInterpolationTools.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/munozariasjm/RbfInterpolationTools.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/munozariasjm/RbfInterpolationTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bfa32aac404bdbbc2356fd0bda085bdf41710dcef846710497b44b40dd816b46/68747470733a2f2f636f6465636f762e696f2f67682f6d756e6f7a61726961736a6d2f526266496e746572706f6c6174696f6e546f6f6c732e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/munozariasjm/RbfInterpolationTools.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>A simple package to perform interpolations using RadialBasisFunctions (RBF).</em></p>
<p dir="auto">Note that the package was developed to teach basic computational methods and palying around with Julia.</p>
<h2 dir="auto"><a id="user-content-context" class="anchor" aria-hidden="true" href="#context"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Context</h2>
<p dir="auto">There are several ways to use mathematical propieties of functions to estimate value of functions without actually having to compute the function, but actually using few observed points.</p>
<p dir="auto">The RBF apporach uses real functions such as Gussian, Multiquadratic, Inverse Multiquadratic and Quadratic to construct a basis to estimate escalar valued functions.</p>
<h1 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h1>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ]add RbfInterpolationTools"><pre>julia<span class="pl-k">&gt;</span> ]add RbfInterpolationTools</pre></div>
<p dir="auto">The closing square bracket switches to the package manager interface and the <code>add</code> command installs the package and any missing dependencies. To return to the Julia REPL hit the <code>delete</code> key.</p>
<p dir="auto">To load the package run</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RbfInterpolationTools"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RbfInterpolationTools</pre></div>
<h2 dir="auto"><a id="user-content-quick-start" class="anchor" aria-hidden="true" href="#quick-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Quick-start</h2>
<p dir="auto">Suppose we have observed some points at random times:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; t=hcat(rand(30) .* 6.28)"><pre>julia<span class="pl-k">&gt;</span> t<span class="pl-k">=</span><span class="pl-c1">hcat</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">30</span>) <span class="pl-k">.*</span> <span class="pl-c1">6.28</span>)</pre></div>
<p dir="auto">And the observables (for example, of speed) are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; v_observed = vec(map(x -&gt; sin(x), X))"><pre>julia<span class="pl-k">&gt;</span> v_observed <span class="pl-k">=</span> <span class="pl-c1">vec</span>(<span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> <span class="pl-c1">sin</span>(x), X))</pre></div>
<p dir="auto">To estimate the values at those points we are going to create a interpolation environment with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using RbfInterpolationTools
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> RbfInterpolationTools
</pre></div>
<p dir="auto">The sintax for the interpolation environment is simple:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; inter = RbfInterpolationTools.Interpolator(X = t, y = y)
"><pre>julia<span class="pl-k">&gt;</span> inter <span class="pl-k">=</span> RbfInterpolationTools<span class="pl-k">.</span><span class="pl-c1">Interpolator</span>(X <span class="pl-k">=</span> t, y <span class="pl-k">=</span> y)
</pre></div>
<p dir="auto">Now, we just have to get a Matrix with the points where we want to know the values</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; new_ts = hcat(0:6.28/(999):6.28)
"><pre>julia<span class="pl-k">&gt;</span> new_ts <span class="pl-k">=</span> <span class="pl-c1">hcat</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">6.28</span><span class="pl-k">/</span>(<span class="pl-c1">999</span>)<span class="pl-k">:</span><span class="pl-c1">6.28</span>)
</pre></div>
<p dir="auto">And simply we get the desired values with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; new_vs = RbfInterpolationTools.interpolateMesh(inter, new_ts)
"><pre>julia<span class="pl-k">&gt;</span> new_vs <span class="pl-k">=</span> RbfInterpolationTools<span class="pl-k">.</span><span class="pl-c1">interpolateMesh</span>(inter, new_ts)
</pre></div>
<h2 dir="auto"><a id="user-content-available-methods" class="anchor" aria-hidden="true" href="#available-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Available methods:</h2>
<p dir="auto">For all of the methods, it is necesary to create an environment using:
<code>Interpolator(X::Matrix, y::vector::, ϵ::Float64 (Default to 1), basis_name::String (Default to "MQ"))</code></p>
<p dir="auto">And then, some functionalities implemened are:</p>
<ul dir="auto">
<li><code>interpolatePoint(inter::Interpolator,p::Vector)</code>: It returns the interpolated values of the functions at the coordinated vector p.</li>
<li><code>interpolateMesh(inter::Interpolator,M::Matrix)</code>:
It retuns N scalars of interpolated values of points with d dimensions given the matrix M of dimensions (N,d).</li>
<li><code>gradientPoint(inter::Interpolator,p::Vector)</code>: Gradient at the vector point p from Forwad differentiation.</li>
</ul>
<h2 dir="auto"><a id="user-content-other-packages" class="anchor" aria-hidden="true" href="#other-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other packages</h2>
<p dir="auto">For more complex and usefull Modules, please check:</p>
<ul dir="auto">
<li><a href="https://github.com/JuliaMath/Interpolations.jl">Interpolations.jl</a></li>
<li><a href="https://github.com/kbarbary/Dierckx.jl">Dierckx.jl</a></li>
<li><a href="https://github.com/baggepinnen/BasisFunctionExpansions.jl">BasisFunctionExpansions.jl</a></li>
</ul>
</article></div>