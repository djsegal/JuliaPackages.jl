<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-neftinterface" class="anchor" aria-hidden="true" href="#neftinterface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NEFTInterface</h1>
<p dir="auto"><a href="https://numericaleft.github.io/NEFTInterface.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://numericaleft.github.io/NEFTInterface.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/numericaleft/NEFTInterface.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/numericaleft/NEFTInterface.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/numericaleft/NEFTInterface.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5bd6c13284602a1f8075616842cb94239d77762fba2d803cc4a8494b448efbb4/68747470733a2f2f636f6465636f762e696f2f67682f6e756d65726963616c6566742f4e454654496e746572666163652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/numericaleft/NEFTInterface.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">NEFTInterface.jl bridges Numerical Effective Field Theory pacakages with TRIQS and many other external packages.</p>
<h2 dir="auto"><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Features</h2>
<ul dir="auto">
<li>Interface to the <a href="https://triqs.github.io/" rel="nofollow"><code>TRIQS</code></a> library.</li>
</ul>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">This package has been registered. So, simply type <code>import Pkg; Pkg.add("NEFTInterface")</code> in the Julia REPL to install.</p>
<h2 dir="auto"><a id="user-content-interface-with-triqs" class="anchor" aria-hidden="true" href="#interface-with-triqs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Interface with TRIQS</h2>
<p dir="auto">TRIQS (Toolbox for Research on Interacting Quantum Systems) is a scientific project providing a set of C++ and Python libraries for the study of interacting quantum systems. We provide a direct interface to convert TRIQS objects, such as the temporal meshes, the Brillouin zone meshes, and the  multi-dimensional (blocked) Green's functions, to the equivalent objects in our package. It would help TRIQS users to make use of our package without worrying about the different internal data structures.</p>
<p dir="auto">We rely on the package <a href="https://github.com/cjdoris/PythonCall.jl"><code>PythonCall.jl</code></a> to interface with TRIQS' python API. You need to install TRIQS package from the python environment that <code>PythonCall</code> calls. We recommand you to check the sections <a href="https://cjdoris.github.io/PythonCall.jl/stable/pythoncall/#pythoncall-config" rel="nofollow"><code>Configuration</code></a> and <a href="https://cjdoris.github.io/PythonCall.jl/stable/pythoncall/#python-deps" rel="nofollow"><code>Installing Python Package</code></a> in the <code>PythonCall</code> documentation.</p>
<h3 dir="auto"><a id="user-content-example-1-load-triqs-temporal-mesh" class="anchor" aria-hidden="true" href="#example-1-load-triqs-temporal-mesh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 1: Load Triqs Temporal Mesh</h3>
<p dir="auto">First we show how to import an imaginary-time mesh from TRIQS.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using PythonCall, NEFTInterface
    gf = pyimport(&quot;triqs.gf&quot;)
    np = pyimport(&quot;numpy&quot;)

    mt = gf.MeshImTime(beta=1.0, S=&quot;Fermion&quot;, n_max=3)
    mjt = from_triqs(mt)
    for (i, x) in enumerate([p for p in mt.values()])
        @assert mjt[i] ≈ pyconvert(Float64, x) # make sure mjt is what we want
    end
    "><pre>    <span class="pl-k">using</span> PythonCall, NEFTInterface
    gf <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>triqs.gf<span class="pl-pds">"</span></span>)
    np <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>numpy<span class="pl-pds">"</span></span>)

    mt <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">MeshImTime</span>(beta<span class="pl-k">=</span><span class="pl-c1">1.0</span>, S<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Fermion<span class="pl-pds">"</span></span>, n_max<span class="pl-k">=</span><span class="pl-c1">3</span>)
    mjt <span class="pl-k">=</span> <span class="pl-c1">from_triqs</span>(mt)
    <span class="pl-k">for</span> (i, x) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>([p <span class="pl-k">for</span> p <span class="pl-k">in</span> mt<span class="pl-k">.</span><span class="pl-c1">values</span>()])
        <span class="pl-c1">@assert</span> mjt[i] <span class="pl-k">≈</span> <span class="pl-c1">pyconvert</span>(Float64, x) <span class="pl-c"><span class="pl-c">#</span> make sure mjt is what we want</span>
    <span class="pl-k">end</span>
    </pre></div>
<ul dir="auto">
<li>
<p dir="auto">With the <code>PythonCall</code> package, one can import python packages with <code>pyimport</code> and directly exert python code in Julia. Here we import the Green's function module <code>triqs.gf</code> and generate a uniform imaginary-time mesh with <code>MeshImTime</code>. The user has to specify the inverse temperature,  whether the particle is fermion or boson, and the number of grid points.</p>
</li>
<li>
<p dir="auto">Once a TRIQS object is prepared, one can simply convert it to an equivalent object in our package with <code>from_triqs</code>. The object can be a mesh, a Green's function, or a block Green's function. In this example, the TRIQS imaginary time grid is converted to an identical <code>ImTime</code> grid.</p>
</li>
</ul>
<h3 dir="auto"><a id="user-content-example-2-load-triqs-brillouinzone" class="anchor" aria-hidden="true" href="#example-2-load-triqs-brillouinzone"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 2: Load Triqs BrillouinZone</h3>
<p dir="auto">In this example, we show how the Brillouin zone mesh from TRIQS can be converted to a UniformMesh from the <code>BrillouinZoneMeshes.jl</code> package and clarify the convention we adopted to convert a Python data structure to its Julia counterpart.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using PythonCall, NEFTInterface

    # construct triqs Brillouin zone mesh
    lat = pyimport(&quot;triqs.lattice&quot;)
    gf = pyimport(&quot;triqs.gf&quot;)
    BL = lat.BravaisLattice(units=((2, 0, 0), (1, sqrt(3), 0))) 
    BZ = lat.BrillouinZone(BL)
    nk = 4
    mk = gf.MeshBrillouinZone(BZ, nk)

    # load Triqs mesh and construct 
    mkj = from_triqs(mk)

    for p in mk
        pval = pyconvert(Array, p.value)
        # notice that TRIQS always return a 3D point, even for 2D case(where z is always 0)
        # notice also that Julia index starts from 1 while Python from 0
        # points of the same linear index has the same value
        ilin = pyconvert(Int, p.linear_index) + 1
        @assert pval[1:2] ≈ mkj[ilin]
        # points with the same linear index corresponds to REVERSED cartesian index
        inds = pyconvert(Array, p.index)[1:2] .+ 1
        @assert pval[1:2] ≈ mkj[reverse(inds)...]
    end"><pre>    <span class="pl-k">using</span> PythonCall, NEFTInterface

    <span class="pl-c"><span class="pl-c">#</span> construct triqs Brillouin zone mesh</span>
    lat <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>triqs.lattice<span class="pl-pds">"</span></span>)
    gf <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>triqs.gf<span class="pl-pds">"</span></span>)
    BL <span class="pl-k">=</span> lat<span class="pl-k">.</span><span class="pl-c1">BravaisLattice</span>(units<span class="pl-k">=</span>((<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>), <span class="pl-c1">0</span>))) 
    BZ <span class="pl-k">=</span> lat<span class="pl-k">.</span><span class="pl-c1">BrillouinZone</span>(BL)
    nk <span class="pl-k">=</span> <span class="pl-c1">4</span>
    mk <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">MeshBrillouinZone</span>(BZ, nk)

    <span class="pl-c"><span class="pl-c">#</span> load Triqs mesh and construct </span>
    mkj <span class="pl-k">=</span> <span class="pl-c1">from_triqs</span>(mk)

    <span class="pl-k">for</span> p <span class="pl-k">in</span> mk
        pval <span class="pl-k">=</span> <span class="pl-c1">pyconvert</span>(Array, p<span class="pl-k">.</span>value)
        <span class="pl-c"><span class="pl-c">#</span> notice that TRIQS always return a 3D point, even for 2D case(where z is always 0)</span>
        <span class="pl-c"><span class="pl-c">#</span> notice also that Julia index starts from 1 while Python from 0</span>
        <span class="pl-c"><span class="pl-c">#</span> points of the same linear index has the same value</span>
        ilin <span class="pl-k">=</span> <span class="pl-c1">pyconvert</span>(Int, p<span class="pl-k">.</span>linear_index) <span class="pl-k">+</span> <span class="pl-c1">1</span>
        <span class="pl-c1">@assert</span> pval[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">≈</span> mkj[ilin]
        <span class="pl-c"><span class="pl-c">#</span> points with the same linear index corresponds to REVERSED cartesian index</span>
        inds <span class="pl-k">=</span> <span class="pl-c1">pyconvert</span>(Array, p<span class="pl-k">.</span>index)[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">.+</span> <span class="pl-c1">1</span>
        <span class="pl-c1">@assert</span> pval[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>] <span class="pl-k">≈</span> mkj[<span class="pl-c1">reverse</span>(inds)<span class="pl-k">...</span>]
    <span class="pl-k">end</span></pre></div>
<ul dir="auto">
<li>Julia uses column-major layout for multi-dimensional array similar as Fortran and matlab, whereas python uses row-major layout. The converted Julias Brillouin zone mesh wll be indexed differently from that in TRIQS.</li>
<li>We adopted the convention so that the grid point and linear index are consistent with TRIQS counterparts, while the orders of Cartesian index
and lattice vector are reversed.</li>
<li>Here's a table of 2D converted mesh v.s. the Triqs counterpart:</li>
</ul>
<table>
<thead>
<tr>
<th>Object</th>
<th>TRIQS</th>
<th>Julia</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linear index</td>
<td>mk[i]=(x, y, 0)</td>
<td>mkj[i]= (x, y)</td>
</tr>
<tr>
<td>Cartesian index</td>
<td>mk[i,j]=(x, y, 0)</td>
<td>mkj[j,i]=(x,y)</td>
</tr>
<tr>
<td>Lattice vector</td>
<td>(a1, a2)</td>
<td>(a2, a1)</td>
</tr>
</tbody>
</table>
<h3 dir="auto"><a id="user-content-example-3-load-triqs-greens-function-of-a-hubbard-lattice" class="anchor" aria-hidden="true" href="#example-3-load-triqs-greens-function-of-a-hubbard-lattice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 3: Load Triqs Greens function of a Hubbard Lattice</h3>
<p dir="auto">A TRIQS Green's function is defined on a set of meshes of continuous variables, together with the discrete inner states specified by the <code>target_shape</code>. The structure casted into a <code>MeshArray</code> object provided by the package <a href="https://github.com/numericalEFT/GreenFunc.jl"><code>GreenFunc.jl</code></a>. In the following example, we reimplement the example 3 in <a href="https://github.com/numericalEFT/GreenFunc.jl"><code>GreenFunc.jl</code> README</a> to first show how to generate a TRIQS Green's function of a Hubbard lattice within Julia, then convert the TRIQS Green's function to a julia <code>MeshArray</code> object. The Green's function is given by <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a71ef9d4612fba40de72da3c28c36ad9">$G(q, \omega_n) = \frac{1}{i\omega_n - \epsilon_q}$</math-renderer> with <math-renderer class="js-inline-math" style="display: inline" data-static-url="https://github.githubassets.com/static" data-run-id="a71ef9d4612fba40de72da3c28c36ad9">$\epsilon_q = -2t(\cos(q_x)+\cos(q_y))$</math-renderer>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using PythonCall, NEFTInterface, GreenFunc
    
    np = pyimport(&quot;numpy&quot;)
    lat = pyimport(&quot;triqs.lattice&quot;)
    gf = pyimport(&quot;triqs.gf&quot;)
    
    BL = lat.BravaisLattice(units=((2, 0, 0), (1, sqrt(3), 0))) # testing with a triangular lattice so that exchanged index makes a difference
    BZ = lat.BrillouinZone(BL)
    nk = 20
    mk = gf.MeshBrillouinZone(BZ, nk)
    miw = gf.MeshImFreq(beta=1.0, S=&quot;Fermion&quot;, n_max=100)
    mprod = gf.MeshProduct(mk, miw)

    G_w = gf.GfImFreq(mesh=miw, target_shape=[1, 1]) #G_w.data.shape will be [201, 1, 1]
    G_k_w = gf.GfImFreq(mesh=mprod, target_shape = [2, 3] ) #target_shape = [2, 3] --&gt; innerstate = [3, 2]

    # Due to different cartesian index convention in Julia and Python, the data g_k_w[n, m, iw, ik] corresponds to G_k_w.data[ik-1, iw-1, m-1, n-1])

    t = 1.0
    for (ik, k) in enumerate(G_k_w.mesh[0])
        G_w &lt;&lt; gf.inverse(gf.iOmega_n - 2 * t * (np.cos(k[0]) + np.cos(k[1])))
        G_k_w.data[ik-1, pyslice(0, nk^2), pyslice(0, G_k_w.target_shape[0]) , pyslice(0,G_k_w.target_shape[1])] = G_w.data[pyslice(0, nk^2), pyslice(0, G_w.target_shape[0]) , pyslice(0,G_w.target_shape[1])] #pyslice = :      
    end

    g_k_w = from_triqs(G_k_w)
    
    #alternatively, you can use the MeshArray constructor to convert TRIQS Green's function to a MeshArray
    g_k_w2 = MeshArray(G_k_w) 
    @assert g_k_w2 ≈ g_k_w

    #Use the &lt;&lt; operator to import python data into an existing MeshArray 
    g_k_w2 &lt;&lt; G_k_w
    @assert g_k_w2 ≈ g_k_w
    "><pre>    <span class="pl-k">using</span> PythonCall, NEFTInterface, GreenFunc
    
    np <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>numpy<span class="pl-pds">"</span></span>)
    lat <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>triqs.lattice<span class="pl-pds">"</span></span>)
    gf <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>triqs.gf<span class="pl-pds">"</span></span>)
    
    BL <span class="pl-k">=</span> lat<span class="pl-k">.</span><span class="pl-c1">BravaisLattice</span>(units<span class="pl-k">=</span>((<span class="pl-c1">2</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>), (<span class="pl-c1">1</span>, <span class="pl-c1">sqrt</span>(<span class="pl-c1">3</span>), <span class="pl-c1">0</span>))) <span class="pl-c"><span class="pl-c">#</span> testing with a triangular lattice so that exchanged index makes a difference</span>
    BZ <span class="pl-k">=</span> lat<span class="pl-k">.</span><span class="pl-c1">BrillouinZone</span>(BL)
    nk <span class="pl-k">=</span> <span class="pl-c1">20</span>
    mk <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">MeshBrillouinZone</span>(BZ, nk)
    miw <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">MeshImFreq</span>(beta<span class="pl-k">=</span><span class="pl-c1">1.0</span>, S<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Fermion<span class="pl-pds">"</span></span>, n_max<span class="pl-k">=</span><span class="pl-c1">100</span>)
    mprod <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">MeshProduct</span>(mk, miw)

    G_w <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">GfImFreq</span>(mesh<span class="pl-k">=</span>miw, target_shape<span class="pl-k">=</span>[<span class="pl-c1">1</span>, <span class="pl-c1">1</span>]) <span class="pl-c"><span class="pl-c">#</span>G_w.data.shape will be [201, 1, 1]</span>
    G_k_w <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">GfImFreq</span>(mesh<span class="pl-k">=</span>mprod, target_shape <span class="pl-k">=</span> [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>] ) <span class="pl-c"><span class="pl-c">#</span>target_shape = [2, 3] --&gt; innerstate = [3, 2]</span>

    <span class="pl-c"><span class="pl-c">#</span> Due to different cartesian index convention in Julia and Python, the data g_k_w[n, m, iw, ik] corresponds to G_k_w.data[ik-1, iw-1, m-1, n-1])</span>

    t <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
    <span class="pl-k">for</span> (ik, k) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(G_k_w<span class="pl-k">.</span>mesh[<span class="pl-c1">0</span>])
        G_w <span class="pl-k">&lt;&lt;</span> gf<span class="pl-k">.</span><span class="pl-c1">inverse</span>(gf<span class="pl-k">.</span>iOmega_n <span class="pl-k">-</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> t <span class="pl-k">*</span> (np<span class="pl-k">.</span><span class="pl-c1">cos</span>(k[<span class="pl-c1">0</span>]) <span class="pl-k">+</span> np<span class="pl-k">.</span><span class="pl-c1">cos</span>(k[<span class="pl-c1">1</span>])))
        G_k_w<span class="pl-k">.</span>data[ik<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">pyslice</span>(<span class="pl-c1">0</span>, nk<span class="pl-k">^</span><span class="pl-c1">2</span>), <span class="pl-c1">pyslice</span>(<span class="pl-c1">0</span>, G_k_w<span class="pl-k">.</span>target_shape[<span class="pl-c1">0</span>]) , <span class="pl-c1">pyslice</span>(<span class="pl-c1">0</span>,G_k_w<span class="pl-k">.</span>target_shape[<span class="pl-c1">1</span>])] <span class="pl-k">=</span> G_w<span class="pl-k">.</span>data[<span class="pl-c1">pyslice</span>(<span class="pl-c1">0</span>, nk<span class="pl-k">^</span><span class="pl-c1">2</span>), <span class="pl-c1">pyslice</span>(<span class="pl-c1">0</span>, G_w<span class="pl-k">.</span>target_shape[<span class="pl-c1">0</span>]) , <span class="pl-c1">pyslice</span>(<span class="pl-c1">0</span>,G_w<span class="pl-k">.</span>target_shape[<span class="pl-c1">1</span>])] <span class="pl-c"><span class="pl-c">#</span>pyslice = :      </span>
    <span class="pl-k">end</span>

    g_k_w <span class="pl-k">=</span> <span class="pl-c1">from_triqs</span>(G_k_w)
    
    <span class="pl-c"><span class="pl-c">#</span>alternatively, you can use the MeshArray constructor to convert TRIQS Green's function to a MeshArray</span>
    g_k_w2 <span class="pl-k">=</span> <span class="pl-c1">MeshArray</span>(G_k_w) 
    <span class="pl-c1">@assert</span> g_k_w2 <span class="pl-k">≈</span> g_k_w

    <span class="pl-c"><span class="pl-c">#</span>Use the &lt;&lt; operator to import python data into an existing MeshArray </span>
    g_k_w2 <span class="pl-k">&lt;&lt;</span> G_k_w
    <span class="pl-c1">@assert</span> g_k_w2 <span class="pl-k">≈</span> g_k_w
    </pre></div>
<ul dir="auto">
<li>When converting a TRIQS Green's function into a <code>MeshArray</code> julia object, the <code>MeshProduct</code> from TRIQS is decomposed into separate meshes and converted to the corresponding Julia meshes. The <code>MeshArray</code> stores the meshes as a tuple object, not as a <code>MeshProduct</code>.</li>
<li>The <code>target_shape</code> in TRIQS Green's function is converted to a tuple of <code>UnitRange{Int64}</code> objects that represents the discrete degrees of freedom. Data slicing with <code>:</code> is not available in <code>PythonCall</code>. One needs to use <code>pyslice</code> instead.</li>
<li>As explained in Example 6, the cartesian index order of data has to be inversed during the conversion.</li>
<li>We support three different interfaces for the conversion of TRIQS Green's function. One can construct a new MeshArray with <code>from_triqs</code> or <code>MeshArray</code> constructor. One can also load TRIQS Green's function into an existing <code>MeshArray</code> with the <code>&lt;&lt;</code> operator.</li>
</ul>
<h3 dir="auto">
<a id="user-content-example-4-load-triqs-block-greens-function" class="anchor" aria-hidden="true" href="#example-4-load-triqs-block-greens-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example 4: Load Triqs block Greens function</h3>
<p dir="auto">The block Greens function in TRIQS can be converted to a dictionary of <code>MeshArray</code> objects in julia.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    using PythonCall, NEFTInterface, GreenFunc

    gf = pyimport(&quot;triqs.gf&quot;)
    np = pyimport(&quot;numpy&quot;)
    mt = gf.MeshImTime(beta=1.0, S=&quot;Fermion&quot;, n_max=3)
    lj = pyconvert(Int, @py len(mt))
    G_t = gf.GfImTime(mesh=mt, target_shape=[2,3]) #target_shape = [2, 3] --&gt; innerstate = [3, 2]
    G_w = gf.GfImTime(mesh=mt, target_shape=[2,3]) #target_shape = [2, 3] --&gt; innerstate = [3, 2]

    blockG = gf.BlockGf(name_list=[&quot;1&quot;, &quot;2&quot;], block_list=[G_t, G_w], make_copies=false)

    jblockG = from_triqs(blockG) 
    #The converted block Green's function is a dictionary of MeshArray corresponding to TRIQS block Green's function. The mapping between them is: jblockG[&quot;name&quot;][i1, i2, t] = blockG[&quot;name&quot;].data[t-1, i2-1, i1-1]
"><pre>    <span class="pl-k">using</span> PythonCall, NEFTInterface, GreenFunc

    gf <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>triqs.gf<span class="pl-pds">"</span></span>)
    np <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>numpy<span class="pl-pds">"</span></span>)
    mt <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">MeshImTime</span>(beta<span class="pl-k">=</span><span class="pl-c1">1.0</span>, S<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Fermion<span class="pl-pds">"</span></span>, n_max<span class="pl-k">=</span><span class="pl-c1">3</span>)
    lj <span class="pl-k">=</span> <span class="pl-c1">pyconvert</span>(Int, <span class="pl-c1">@py</span> <span class="pl-c1">len</span>(mt))
    G_t <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">GfImTime</span>(mesh<span class="pl-k">=</span>mt, target_shape<span class="pl-k">=</span>[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span>target_shape = [2, 3] --&gt; innerstate = [3, 2]</span>
    G_w <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">GfImTime</span>(mesh<span class="pl-k">=</span>mt, target_shape<span class="pl-k">=</span>[<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">#</span>target_shape = [2, 3] --&gt; innerstate = [3, 2]</span>

    blockG <span class="pl-k">=</span> gf<span class="pl-k">.</span><span class="pl-c1">BlockGf</span>(name_list<span class="pl-k">=</span>[<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>], block_list<span class="pl-k">=</span>[G_t, G_w], make_copies<span class="pl-k">=</span><span class="pl-c1">false</span>)

    jblockG <span class="pl-k">=</span> <span class="pl-c1">from_triqs</span>(blockG) 
    <span class="pl-c"><span class="pl-c">#</span>The converted block Green's function is a dictionary of MeshArray corresponding to TRIQS block Green's function. The mapping between them is: jblockG["name"][i1, i2, t] = blockG["name"].data[t-1, i2-1, i1-1]</span>
</pre></div>
</article></div>