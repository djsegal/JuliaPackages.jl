<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-sparse-multivariate-polynomials" class="anchor" aria-hidden="true" href="#sparse-multivariate-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sparse multivariate polynomials</h1>
<p>This package provides support for working with sparse multivariate polynomials in Julia.</p>
<p>This package is superseded by <a href="https://github.com/blegat/MultivariatePolynomials.jl">MultivariatePolynomials.jl</a> and is no longer maintained.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>In the Julia REPL run</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>MultiPoly<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-the-mpoly-type" class="anchor" aria-hidden="true" href="#the-mpoly-type"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The MPoly type</h2>
<p>Multivariate polynomials are stored in the type</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> MPoly{T}
    terms<span class="pl-k">::</span><span class="pl-c1">OrderedDict{Vector{Int},T}</span>
    vars<span class="pl-k">::</span><span class="pl-c1">Vector{Symbol}</span>
<span class="pl-k">end</span></pre></div>
<p>Here each item in the dictionary <code>terms</code> corresponds to a term in the polynomial, where the key represents the monomial powers and the value the coefficient of the monomial. Each of the keys in <code>terms</code> should be a vector of integers whose length equals <code>length(vars)</code>.</p>
<h2><a id="user-content-constructing-polynomials" class="anchor" aria-hidden="true" href="#constructing-polynomials"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Constructing polynomials</h2>
<p>For constructing polynomials you can use the generators of the polynomial ring:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MultiPoly

julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">generators</span>(MPoly{Float64}, <span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>);

julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> (x<span class="pl-k">+</span>y)<span class="pl-k">^</span><span class="pl-c1">3</span>
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(x<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">3.0</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y <span class="pl-k">+</span> <span class="pl-c1">3.0</span>x<span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p>For the zero and constant one polynomials use</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">zero</span>(MPoly{Float64})
<span class="pl-c1">one</span>(MPoly{Float64})</pre></div>
<p>where you can optionally supply the variables of the polynomials with <code>vars = [:x, :y]</code>.</p>
<p>Alternatively you can construct a polynomial using a dictionary for the terms:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(terms, vars)</pre></div>
<p>For example, to construct the polynomial <code>1 + x^2 + 2x*y^3</code> use</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MultiPoly, DataStructures

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">OrderedDict</span>([<span class="pl-c1">0</span>,<span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>, [<span class="pl-c1">2</span>,<span class="pl-c1">0</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">1.0</span>, [<span class="pl-c1">1</span>,<span class="pl-c1">3</span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">2.0</span>), [<span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>])
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">1.0</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span>x<span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">3</span>)</pre></div>
<p>Laurent polynomials may be constructed too:</p>
<div class="highlight highlight-source-julia"><pre>x<span class="pl-k">^</span><span class="pl-c1">1</span> <span class="pl-k">*</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">1</span> <span class="pl-k">*</span> y<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>) <span class="pl-k">+</span> x<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> y<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> x<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>) <span class="pl-k">*</span> y<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>)</pre></div>
<h2><a id="user-content-polynomial-arithmetic" class="anchor" aria-hidden="true" href="#polynomial-arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Polynomial arithmetic</h2>
<p>The usual ring arithmetic is supported and MutliPoly will
automatically deal with polynomials in different variables or having a
different coefficient type. Examples:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MultiPoly

julia<span class="pl-k">&gt;</span> x, y <span class="pl-k">=</span> <span class="pl-c1">generators</span>(MPoly{Float64}, <span class="pl-c1">:x</span>, <span class="pl-c1">:y</span>);

julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">generator</span>(MPoly{Int}, <span class="pl-c1">:z</span>)
<span class="pl-c1">MPoly</span><span class="pl-c1">{Int64}</span>(z)

julia<span class="pl-k">&gt;</span> x<span class="pl-k">+</span>z
<span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(x <span class="pl-k">+</span> z)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">vars</span>(x<span class="pl-k">+</span>z)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Symbol,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">:x</span>
 <span class="pl-c1">:y</span>
 <span class="pl-c1">:z</span></pre></div>
<h2><a id="user-content-evaluating-a-polynomial" class="anchor" aria-hidden="true" href="#evaluating-a-polynomial"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Evaluating a polynomial</h2>
<p>To evaluate a polynomial <em>P(x,y, ...)</em> at a point <em>(x0, y0, ...)</em> the <code>evaluate</code> function is used. Example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> (x<span class="pl-k">+</span>x<span class="pl-k">*</span>y)<span class="pl-k">^</span><span class="pl-c1">2</span>
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">2.0</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y <span class="pl-k">+</span> x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">2</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">evaluate</span>(p, <span class="pl-c1">3.0</span>, <span class="pl-c1">2.0</span>)
<span class="pl-c1">81.0</span></pre></div>
<h2><a id="user-content-calculus" class="anchor" aria-hidden="true" href="#calculus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Calculus</h2>
<p>MultiPoly supports integration and differentiation. Currently the integrating constant is set to 0. Examples:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> p <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">4</span>
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(x<span class="pl-k">^</span><span class="pl-c1">4</span> <span class="pl-k">+</span> y<span class="pl-k">^</span><span class="pl-c1">4</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">diff</span>(p, <span class="pl-c1">:x</span>)
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">4.0</span>x<span class="pl-k">^</span><span class="pl-c1">3</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">diff</span>(p, <span class="pl-c1">:y</span>, <span class="pl-c1">3</span>)
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">24.0</span>y)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>(p, <span class="pl-c1">:x</span>, <span class="pl-c1">2</span>)
MultiPoly<span class="pl-k">.</span><span class="pl-c1">MPoly</span><span class="pl-c1">{Float64}</span>(<span class="pl-c1">0.03333333333333333</span>x<span class="pl-k">^</span><span class="pl-c1">6</span> <span class="pl-k">+</span> <span class="pl-c1">0.5</span>x<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span>y<span class="pl-k">^</span><span class="pl-c1">4</span>)
</pre></div>
<p>Integrations which would involve integrating a term with a -1 power
raise an error. This example can be intergrated once, but not twice, in
<code>:x</code> and can't be integrated in <code>:y</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> q <span class="pl-k">=</span> x<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">2</span>) <span class="pl-k">*</span> y<span class="pl-k">^</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>);
julia<span class="pl-k">&gt;</span> <span class="pl-c1">integrate</span>(q, <span class="pl-c1">:y</span>)  
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> can<span class="pl-k">'</span>t integrate <span class="pl-c1">1</span> times <span class="pl-k">in</span> y as it would involve a <span class="pl-k">-</span><span class="pl-c1">1</span> power requiring a log term</pre></div>
</article></div>