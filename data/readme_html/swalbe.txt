<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-swalbejl" class="anchor" aria-hidden="true" href="#swalbejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Swalbe.jl</h1>
<p dir="auto"><a href="https://zitzeronion.github.io/Swalbe.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/Zitzeronion/Swalbe.jl/actions"><img src="https://github.com/Zitzeronion/Swalbe.jl/workflows/CI/badge.svg?branch=master&amp;event=push" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/Zitzeronion/Swalbe.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e90dafeadac6d152734e9d03e70a9d1172f89d525b9942f795296f2eb085a8e8/68747470733a2f2f636f6465636f762e696f2f67682f5a69747a65726f6e696f6e2f5377616c62652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4a31414d4b3759573639" alt="codecov" data-canonical-src="https://codecov.io/gh/Zitzeronion/Swalbe.jl/branch/master/graph/badge.svg?token=J1AMK7YW69" style="max-width: 100%;"></a>
<a href="https://joss.theoj.org/papers/414a5b53a41e05a250a352360a7da337" rel="nofollow"><img src="https://camo.githubusercontent.com/8bbbe51af7bef8e7f5c8e3a3742aed0abb8ca2aa330ae5e2e478524ece921229/68747470733a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f34313461356235336134316530356132353061333532333630613764613333372f7374617475732e737667" alt="status" data-canonical-src="https://joss.theoj.org/papers/414a5b53a41e05a250a352360a7da337/status.svg" style="max-width: 100%;"></a>
<a href="https://doi.org/10.5281/zenodo.7030890" rel="nofollow"><img src="https://camo.githubusercontent.com/cbd21820dd8e7aef48dc25e12323de38ffac509c3beaf1e9adf8e522557298b6/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e373033303839302e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/DOI/10.5281/zenodo.7030890.svg" style="max-width: 100%;"></a>
<a href="https://pkgs.genieframework.com?packages=Swalbe" rel="nofollow"><img src="https://camo.githubusercontent.com/62c59bc88f24ac6dda8e8f6d89742bc25f6af1e35c1b8463496d6dadbe324fad/68747470733a2f2f736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f706b67732e67656e69656672616d65776f726b2e636f6d2f6170692f76312f62616467652f5377616c6265" alt="Swalbe.jl Downloads" data-canonical-src="https://shields.io/endpoint?url=https://pkgs.genieframework.com/api/v1/badge/Swalbe" style="max-width: 100%;"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://gist.githubusercontent.com/Zitzeronion/807b9a7b2226e65643288df9a8cc1f46/raw/3a561e2a2b09eb42bf688f1d304f658b93fba8ed/logo_animation.gif"><img src="https://gist.githubusercontent.com/Zitzeronion/807b9a7b2226e65643288df9a8cc1f46/raw/3a561e2a2b09eb42bf688f1d304f658b93fba8ed/logo_animation.gif" alt="Dewetting_logo" data-animated-image="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-thin-film-simulations-using-lattice-boltzmann-rainbow-ocean" class="anchor" aria-hidden="true" href="#thin-film-simulations-using-lattice-boltzmann-rainbow-ocean"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Thin film simulations using lattice Boltzmann <g-emoji class="g-emoji" alias="rainbow" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png">üåà</g-emoji> <g-emoji class="g-emoji" alias="ocean" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png">üåä</g-emoji></h2>
<p dir="auto">Why is a thin film solver called <strong>Swalbe.jl</strong> you may ask?</p>
<p dir="auto">The idea is to use the
<a href="https://en.wikipedia.org/wiki/Lattice_Boltzmann_methods" rel="nofollow"><em>lattice Boltzmann method (LBM)</em></a>
and all its benefits (easy to code, vast amount of literature and scalability)
to simulate thin liquid film flows. Instead of reinventing the wheel we make use
of a class of lattice Boltzmann models that were build to simulate shallow water
problems, see
<a href="http://pordlabs.ucsd.edu/rsalmon/salmon.1999a.pdf" rel="nofollow">Salmon</a> (not the fish <g-emoji class="g-emoji" alias="fish" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png">üêü</g-emoji>),
<a href="https://people.maths.ox.ac.uk/dellar/papers/LBshallow.pdf" rel="nofollow">Dellar</a> and
<a href="https://hal.archives-ouvertes.fr/hal-01625073/document" rel="nofollow">van Thang et al.</a> (<em>all free to read</em>).
Thus the name of the package <strong>S</strong>hallow <strong>WA</strong>ter <strong>L</strong>attice <strong>B</strong>oltzmann slov<strong>E</strong>r or <strong>Swalbe</strong>.</p>
<p dir="auto">Of course using a plain shallow water model will not work to simulate thin film
dynamics, that is the reason we build our own model <img class="emoji" title=":neckbeard:" alt=":neckbeard:" src="https://github.githubassets.com/images/icons/emoji/neckbeard.png" height="20" width="20" align="absmiddle">.  Now the main
difference is that we throw away most of the shallow water parts by assuming
they are small as compared to thin film relevant things, e.g. the substrate
fluid interaction.  The full explanation of the model with some benchmarks can
be found in our paper
<a href="http://pub.hi-ern.de/publications/2019/ZSMDH19/2019-ThinFilm-PRE.pdf" rel="nofollow">Zitz et al.</a>
(the C/C++ OpenACC codebase has not been further developed since the project
moved to <em>Julia</em>)</p>
<h2 dir="auto"><a id="user-content-how-to-get" class="anchor" aria-hidden="true" href="#how-to-get"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to <strong>get</strong></h2>
<h3 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h3>
<p dir="auto">First of all you need a <em>Julia</em> (&gt;= 1.6) installation.  <em>Julia</em> is a high level
open source programming language and it is as easy to use as python <g-emoji class="g-emoji" alias="snake" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png">üêç</g-emoji> (my
opinion).</p>
<p dir="auto"><em>Julia</em> can be downloaded at the projects homepage
<a href="https://julialang.org/" rel="nofollow">julialang.org</a>.</p>
<h3 dir="auto"><a id="user-content-install-using-the-julia-package-manager" class="anchor" aria-hidden="true" href="#install-using-the-julia-package-manager"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install using the Julia package manager</h3>
<p dir="auto"><strong>Swalbe.jl</strong> is a registered package of the <em>Julia</em> package manager.  The only
thing you have to do is to add the package to your <em>Julia</em> environment with:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] add Swalbe"><pre>julia<span class="pl-k">&gt;</span> ] add Swalbe</pre></div>
<h3 dir="auto"><a id="user-content-install-from-source" class="anchor" aria-hidden="true" href="#install-from-source"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Install from source</h3>
<p dir="auto">Of course you can also clone or fork the repo and activate the package inside
the julia <strong>REPL</strong> (Read Evaluate Print Loop). First you need to go the Swalbe
directory and open a <strong>REPL</strong></p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="git clone &lt;swalbe git url&gt;
cd swalbe.jl
julia"><pre>git clone <span class="pl-k">&lt;</span>swalbe git url<span class="pl-k">&gt;</span>
<span class="pl-c1">cd</span> swalbe.jl
julia</pre></div>
<p dir="auto">now you can activate the package with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] activate ."><pre>julia<span class="pl-k">&gt;</span> ] activate .</pre></div>
<p dir="auto">To check if the package works you can run the test suite with</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; ] test Swalbe"><pre>julia<span class="pl-k">&gt;</span> ] test Swalbe</pre></div>
<p dir="auto">All tests can be found in
<a href="https://github.com/Zitzeronion/Swalbe.jl/tree/master/test">test folder</a>, but do not
expect too many comments. Still especially the
<a href="https://github.com/Zitzeronion/Swalbe.jl/blob/master/test/simulate.jl">simulate.jl</a>
file is worth a look.</p>
<h2 dir="auto"><a id="user-content-how-to-use" class="anchor" aria-hidden="true" href="#how-to-use"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to <strong>use</strong></h2>
<p dir="auto">The idea of <strong>Swalbe.jl</strong> is to script your thin film simulation, based on a lattice Boltzmann iteration.<br>
That is why most core functions can be easily extended, or used out of the box. Find some examples in the <a href="https://github.com/Zitzeronion/Swalbe.jl/tree/master/scripts">scripts</a> folder.</p>
<p dir="auto">Some initial conditions are handily pre-programmed.
E.g. simulating the Rayleigh-Taylor instability:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Swalbe

# set the constants of the system
sys = Swalbe.SysConst(Lx=100, Ly=100, g=-0.001, Œ≥=0.0005, Tmax=1000)

# run with given parameters for Tmax timesteps ...
# return Lx√óLy array with the final configuration
h = Swalbe.run_rayleightaylor(sys, &quot;CPU&quot;; h‚ÇÄ=1.0, œµ=0.01, verbos=true)"><pre><span class="pl-k">using</span> Swalbe

<span class="pl-c"><span class="pl-c">#</span> set the constants of the system</span>
sys <span class="pl-k">=</span> Swalbe<span class="pl-k">.</span><span class="pl-c1">SysConst</span>(Lx<span class="pl-k">=</span><span class="pl-c1">100</span>, Ly<span class="pl-k">=</span><span class="pl-c1">100</span>, g<span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">0.001</span>, Œ≥<span class="pl-k">=</span><span class="pl-c1">0.0005</span>, Tmax<span class="pl-k">=</span><span class="pl-c1">1000</span>)

<span class="pl-c"><span class="pl-c">#</span> run with given parameters for Tmax timesteps ...</span>
<span class="pl-c"><span class="pl-c">#</span> return Lx√óLy array with the final configuration</span>
h <span class="pl-k">=</span> Swalbe<span class="pl-k">.</span><span class="pl-c1">run_rayleightaylor</span>(sys, <span class="pl-s"><span class="pl-pds">"</span>CPU<span class="pl-pds">"</span></span>; h‚ÇÄ<span class="pl-k">=</span><span class="pl-c1">1.0</span>, œµ<span class="pl-k">=</span><span class="pl-c1">0.01</span>, verbos<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<p dir="auto">Further examples can be found in the tutorials section of the documentation: <a href="https://zitzeronion.github.io/Swalbe.jl/dev/tutorials/" rel="nofollow">Tutorials</a></p>
<p dir="auto">Some development for this solver was performed under the priority program <strong><a href="https://www.uni-muenster.de/SPP2171/index.html" rel="nofollow">SPP2171-Dynamic Wetting of Flexible, Adaptive, and Switchable Surfaces</a></strong>.
On the homepage of the SPP in the resources' section we supply a simple tutorial for the <a href="https://www.uni-muenster.de/imperia/md/content/SPP2171/droplet_coalescence_tutorial.html" rel="nofollow">coalescence of droplets</a> using a <a href="https://github.com/fonsp/Pluto.jl"><strong>Pluto</strong></a> notebook.</p>
<h2 dir="auto"><a id="user-content-how-to-support-and-contribute" class="anchor" aria-hidden="true" href="#how-to-support-and-contribute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to <strong>support and contribute</strong></h2>
<p dir="auto">Leave a star if you like the idea of the project and/or the content of the
package.  You can support the project by actively using it and raising
<a href="https://github.com/Zitzeronion/Swalbe.jl/issues">issues</a>.
Help is always very welcome, if you want to contribute open a
<a href="https://github.com/Zitzeronion/Swalbe.jl/pulls">PR</a> or raise an
<a href="https://github.com/Zitzeronion/Swalbe.jl/issues">issue</a> with a feature request
(and if possible with a way how to include it).  Feel free to DM me on
<a href="https://twitter.com/Zitzero" rel="nofollow">Twitter</a> if you have questions, I will try to
answer them all timely.</p>
<h2 dir="auto"><a id="user-content-status-of-the-package" class="anchor" aria-hidden="true" href="#status-of-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Status</strong> of the Package</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/f92308582c303fb4e899bc59dd8e3aff6305da887902492fe8590be27121963a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d677265656e2e737667"><img src="https://camo.githubusercontent.com/f92308582c303fb4e899bc59dd8e3aff6305da887902492fe8590be27121963a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6966656379636c652d737461626c652d677265656e2e737667" alt="Lifecycle" data-canonical-src="https://img.shields.io/badge/lifecycle-stable-green.svg" style="max-width: 100%;"></a></p>

<p dir="auto">The package has reached a stable release with version 0.1.
All tools needed for running a numerical experiment are tested and usable.
I am currently writing a paper for which all experiments were done with this package <g-emoji class="g-emoji" alias="blush" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png">üòä</g-emoji>.</p>
<h2 dir="auto"><a id="user-content-credit" class="anchor" aria-hidden="true" href="#credit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><strong>Credit</strong></h2>
<ul dir="auto">
<li><a href="https://forskning.ruc.dk/en/persons/zitz" rel="nofollow">Stefan Zitz (main developer)</a></li>
<li><a href="https://www.hi-ern.de/hi-ern/CompFlu/Team/Zellhoefer/zellhoefer.html" rel="nofollow">Manuel Zellh√∂fer</a></li>
<li><a href="https://www.iac.rm.cnr.it/iacsite/index.php?page=people&amp;id=140" rel="nofollow">Andrea Scagliarini</a></li>
<li><a href="https://www.hi-ern.de/de/forschung/dynamik-komplexer-fluide-und-grenzflaechen" rel="nofollow">Jens Harting</a></li>
</ul>
</article></div>