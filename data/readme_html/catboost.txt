<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-catboostjl" class="anchor" aria-hidden="true" href="#catboostjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CatBoost.jl</h1>
<p dir="auto"><a href="https://github.com/JuliaAI/CatBoost.jl/actions"><img src="https://github.com/JuliaAI/CatBoost.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a> <a href="https://codecov.io/github/JuliaAI/CatBoost.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f3be850356b47b3b6160587159a55849636d1b884de6e6723b73e2b26d9066f9/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696141492f436174426f6f73742e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/JuliaAI/CatBoost.jl/branch/main/graph/badge.svg" style="max-width: 100%;"></a> <a href="https://JuliaAI.github.io/CatBoost.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Julia interface to <a href="https://catboost.ai/" rel="nofollow">CatBoost</a>.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module Regression

using CatBoost
using PythonCall

train_data = PyList([[1, 4, 5, 6], [4, 5, 6, 7], [30, 40, 50, 60]])
eval_data = PyList([[2, 4, 6, 8], [1, 4, 50, 60]])
train_labels = PyList([10, 20, 30])

# Initialize CatBoostRegressor
model = CatBoostRegressor(iterations = 2, learning_rate = 1, depth = 2)

# Fit model
fit!(model, train_data, train_labels)

# Get predictions
preds = predict(model, eval_data)

end # module"><pre><span class="pl-k">module</span> Regression

<span class="pl-k">using</span> CatBoost
<span class="pl-k">using</span> PythonCall

train_data <span class="pl-k">=</span> <span class="pl-c1">PyList</span>([[<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>], [<span class="pl-c1">4</span>, <span class="pl-c1">5</span>, <span class="pl-c1">6</span>, <span class="pl-c1">7</span>], [<span class="pl-c1">30</span>, <span class="pl-c1">40</span>, <span class="pl-c1">50</span>, <span class="pl-c1">60</span>]])
eval_data <span class="pl-k">=</span> <span class="pl-c1">PyList</span>([[<span class="pl-c1">2</span>, <span class="pl-c1">4</span>, <span class="pl-c1">6</span>, <span class="pl-c1">8</span>], [<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">50</span>, <span class="pl-c1">60</span>]])
train_labels <span class="pl-k">=</span> <span class="pl-c1">PyList</span>([<span class="pl-c1">10</span>, <span class="pl-c1">20</span>, <span class="pl-c1">30</span>])

<span class="pl-c"><span class="pl-c">#</span> Initialize CatBoostRegressor</span>
model <span class="pl-k">=</span> <span class="pl-c1">CatBoostRegressor</span>(iterations <span class="pl-k">=</span> <span class="pl-c1">2</span>, learning_rate <span class="pl-k">=</span> <span class="pl-c1">1</span>, depth <span class="pl-k">=</span> <span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Fit model</span>
<span class="pl-c1">fit!</span>(model, train_data, train_labels)

<span class="pl-c"><span class="pl-c">#</span> Get predictions</span>
preds <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, eval_data)

<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> module</span></pre></div>
<h2 dir="auto"><a id="user-content-mlj-example" class="anchor" aria-hidden="true" href="#mlj-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MLJ Example</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module Regression

using CatBoost
using DataFrames
using MLJBase

train_data = DataFrame([[1,4,30], [4,5,40], [5,6,50], [6,7,60]], :auto)
eval_data = DataFrame([[2,1], [4,4], [6,50], [8,60]], :auto)
train_labels = [10.0, 20.0, 30.0] 

# Initialize MLJ Machine
model = CatBoostRegressor(iterations = 2, learning_rate = 1, depth = 2)
mach = machine(model, train_data, train_labels)

# Fit model
MLJBase.fit!(mach)

# Get predictions
preds = predict(model, eval_data)

end # module"><pre><span class="pl-k">module</span> Regression

<span class="pl-k">using</span> CatBoost
<span class="pl-k">using</span> DataFrames
<span class="pl-k">using</span> MLJBase

train_data <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>([[<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">30</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">40</span>], [<span class="pl-c1">5</span>,<span class="pl-c1">6</span>,<span class="pl-c1">50</span>], [<span class="pl-c1">6</span>,<span class="pl-c1">7</span>,<span class="pl-c1">60</span>]], <span class="pl-c1">:auto</span>)
eval_data <span class="pl-k">=</span> <span class="pl-c1">DataFrame</span>([[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>], [<span class="pl-c1">4</span>,<span class="pl-c1">4</span>], [<span class="pl-c1">6</span>,<span class="pl-c1">50</span>], [<span class="pl-c1">8</span>,<span class="pl-c1">60</span>]], <span class="pl-c1">:auto</span>)
train_labels <span class="pl-k">=</span> [<span class="pl-c1">10.0</span>, <span class="pl-c1">20.0</span>, <span class="pl-c1">30.0</span>] 

<span class="pl-c"><span class="pl-c">#</span> Initialize MLJ Machine</span>
model <span class="pl-k">=</span> <span class="pl-c1">CatBoostRegressor</span>(iterations <span class="pl-k">=</span> <span class="pl-c1">2</span>, learning_rate <span class="pl-k">=</span> <span class="pl-c1">1</span>, depth <span class="pl-k">=</span> <span class="pl-c1">2</span>)
mach <span class="pl-k">=</span> <span class="pl-c1">machine</span>(model, train_data, train_labels)

<span class="pl-c"><span class="pl-c">#</span> Fit model</span>
MLJBase<span class="pl-k">.</span><span class="pl-c1">fit!</span>(mach)

<span class="pl-c"><span class="pl-c">#</span> Get predictions</span>
preds <span class="pl-k">=</span> <span class="pl-c1">predict</span>(model, eval_data)

<span class="pl-k">end</span> <span class="pl-c"><span class="pl-c">#</span> module</span></pre></div>
</article></div>