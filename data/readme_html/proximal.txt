<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h2 dir="auto"><a id="user-content-proximaljl" class="anchor" aria-hidden="true" href="#proximaljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proximal.jl</h2>
<h1 dir="auto"><a id="user-content-notice" class="anchor" aria-hidden="true" href="#notice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>NOTICE</h1>
<p dir="auto"><strong>This package is unmaintained. Its reliability is not guaranteed.</strong></p>
<h1 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h1>
<p dir="auto">This is a translation to Julia of the <code>proximal</code> code by Parikh and Boyd. See
the documentation below for more details.</p>
<h1 dir="auto"><a id="user-content-proximal-operators" class="anchor" aria-hidden="true" href="#proximal-operators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proximal operators</h1>
<p dir="auto">This "library" contains sample implementations of various proximal operators in
Matlab. These implementations are intended to be pedagogical, not the most
performant.</p>
<p dir="auto">This code is associated with the paper
<em><a href="http://www.stanford.edu/~boyd/papers/prox_algs.html" rel="nofollow">Proximal Algorithms</a></em>
by Neal Parikh and Stephen Boyd.</p>
<h2 dir="auto"><a id="user-content-requirements" class="anchor" aria-hidden="true" href="#requirements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Requirements</h2>
<p dir="auto">The C functions rely on the GNU Scientific Library (GSL). Some of these
functions also contain OpenMP directives to parallelize some <code>for</code> loops, so
compiling with OpenMP is optional, but some of the functions will be
substantially faster if it is used.</p>
<p dir="auto">The Matlab function <code>prox_cvx.m</code> requires <a href="http://cvxr.com/cvx" rel="nofollow">CVX</a>.</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">Evaluating the proximal operator of the <em>l1</em> norm via CVX and the function here:</p>
<div class="highlight highlight-source-matlab notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt; n = 100;
&gt;&gt; lambda = 1;
&gt;&gt; 
&gt;&gt; v = randn(n,1);
&gt;&gt; 
&gt;&gt; % CVX baseline
&gt;&gt; cvx_begin quiet
&gt;&gt;   variable x(n)
&gt;&gt;   minimize(norm(x,1) + (1/(2*lambda))*sum_square(x - v))
&gt;&gt; cvx_end
&gt;&gt; 
&gt;&gt; % Custom method
&gt;&gt; x2 = prox_l1(v, lambda);
&gt;&gt; 
&gt;&gt; % Comparison
&gt;&gt; norm(x - x2)
ans =
7.7871e-05"><pre>&gt;&gt; <span class="pl-smi">n</span> <span class="pl-k">=</span> <span class="pl-c1">100</span>;
&gt;&gt; <span class="pl-smi">lambda</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;
&gt;&gt; 
&gt;&gt; <span class="pl-smi">v</span> <span class="pl-k">=</span> <span class="pl-en">randn</span>(<span class="pl-smi">n</span>,<span class="pl-c1">1</span>);
&gt;&gt; 
&gt;&gt; <span class="pl-c"><span class="pl-c">%</span> CVX baseline</span>
&gt;&gt; <span class="pl-smi">cvx_begin</span> <span class="pl-smi">quiet</span>
&gt;&gt;   <span class="pl-smi">variable</span> <span class="pl-en">x</span>(<span class="pl-smi">n</span>)
&gt;&gt;   <span class="pl-en">minimize</span>(<span class="pl-en">norm</span>(<span class="pl-smi">x</span>,<span class="pl-c1">1</span>) <span class="pl-k">+</span> (<span class="pl-c1">1</span>/(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">lambda</span>))*<span class="pl-en">sum_square</span>(<span class="pl-smi">x</span> <span class="pl-k">-</span> <span class="pl-smi">v</span>))
&gt;&gt; <span class="pl-smi">cvx_end</span>
&gt;&gt; 
&gt;&gt; <span class="pl-c"><span class="pl-c">%</span> Custom method</span>
&gt;&gt; <span class="pl-smi">x2</span> <span class="pl-k">=</span> <span class="pl-en">prox_l1</span>(<span class="pl-smi">v</span>, <span class="pl-smi">lambda</span>);
&gt;&gt; 
&gt;&gt; <span class="pl-c"><span class="pl-c">%</span> Comparison</span>
&gt;&gt; <span class="pl-en">norm</span>(<span class="pl-smi">x</span> <span class="pl-k">-</span> <span class="pl-smi">x2</span>)
ans <span class="pl-k">=</span>
<span class="pl-c1">7</span>.7871e<span class="pl-k">-</span><span class="pl-c1">05</span></pre></div>
<p dir="auto">Evaluating the proximal operator of the nuclear norm:</p>
<div class="highlight highlight-source-matlab notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&gt;&gt; m = 10;
&gt;&gt; n = 30;
&gt;&gt; lambda = 1;
&gt;&gt; 
&gt;&gt; V = randn(m,n);
&gt;&gt; 
&gt;&gt; % CVX baseline
&gt;&gt; cvx_begin quiet
&gt;&gt;   variable X(m,n)
&gt;&gt;   minimize(norm_nuc(X) + (1/(2*lambda))*square_pos(norm(X - V,'fro')))
&gt;&gt; cvx_end
&gt;&gt; 
&gt;&gt; % Custom method
&gt;&gt; X2 = prox_matrix(V, lambda, @prox_l1);
&gt;&gt; 
&gt;&gt; % Comparison
&gt;&gt; norm(X - X2)
ans =
1.9174e-05"><pre>&gt;&gt; <span class="pl-smi">m</span> <span class="pl-k">=</span> <span class="pl-c1">10</span>;
&gt;&gt; <span class="pl-smi">n</span> <span class="pl-k">=</span> <span class="pl-c1">30</span>;
&gt;&gt; <span class="pl-smi">lambda</span> <span class="pl-k">=</span> <span class="pl-c1">1</span>;
&gt;&gt; 
&gt;&gt; <span class="pl-smi">V</span> <span class="pl-k">=</span> <span class="pl-en">randn</span>(<span class="pl-smi">m</span>,<span class="pl-smi">n</span>);
&gt;&gt; 
&gt;&gt; <span class="pl-c"><span class="pl-c">%</span> CVX baseline</span>
&gt;&gt; <span class="pl-smi">cvx_begin</span> <span class="pl-smi">quiet</span>
&gt;&gt;   <span class="pl-smi">variable</span> <span class="pl-en">X</span>(<span class="pl-smi">m</span>,<span class="pl-smi">n</span>)
&gt;&gt;   <span class="pl-en">minimize</span>(<span class="pl-en">norm_nuc</span>(<span class="pl-smi">X</span>) <span class="pl-k">+</span> (<span class="pl-c1">1</span>/(<span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-smi">lambda</span>))*<span class="pl-en">square_pos</span>(<span class="pl-en">norm</span>(<span class="pl-smi">X</span> <span class="pl-k">-</span> <span class="pl-smi">V</span>,<span class="pl-s"><span class="pl-pds">'</span>fro<span class="pl-pds">'</span></span>)))
&gt;&gt; <span class="pl-smi">cvx_end</span>
&gt;&gt; 
&gt;&gt; <span class="pl-c"><span class="pl-c">%</span> Custom method</span>
&gt;&gt; <span class="pl-smi">X2</span> <span class="pl-k">=</span> <span class="pl-en">prox_matrix</span>(<span class="pl-smi">V</span>, <span class="pl-smi">lambda</span>, @<span class="pl-smi">prox_l1</span>);
&gt;&gt; 
&gt;&gt; <span class="pl-c"><span class="pl-c">%</span> Comparison</span>
&gt;&gt; <span class="pl-en">norm</span>(<span class="pl-smi">X</span> <span class="pl-k">-</span> <span class="pl-smi">X2</span>)
ans <span class="pl-k">=</span>
<span class="pl-c1">1</span>.9174e<span class="pl-k">-</span><span class="pl-c1">05</span></pre></div>
<p dir="auto">This second example shows a case where one of the arguments is a function
handle to another proximal operator.</p>
<p dir="auto">The other Matlab functions work similarly; just use <code>help</code> in Matlab.</p>
<p dir="auto">For a C example, see the file <code>example.c</code> in the C source directory.</p>
<h2 dir="auto"><a id="user-content-proximal-operators-1" class="anchor" aria-hidden="true" href="#proximal-operators-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Proximal operators</h2>
<p dir="auto">The Matlab functions include the following examples:</p>
<ul dir="auto">
<li>Projection onto an affine set</li>
<li>Projection onto a box</li>
<li>Projection onto the consensus set (averaging)</li>
<li>Projection onto the exponential cone</li>
<li>Projection onto the nonnegative orthant</li>
<li>Projection onto the second-order cone</li>
<li>Projection onto the semidefinite cone</li>
<li>Proximal operator of a generic function (via CVX)</li>
<li>Proximal operator of the <em>l1</em> norm</li>
<li>Proximal operator of the max function</li>
<li>Proximal operator of a quadratic function</li>
<li>Proximal operator of a generic scalar function (vectorized)</li>
<li>Proximal operator of an orthogonally invariant matrix function</li>
<li>Precomposition of a proximal operator</li>
</ul>
<h2 dir="auto"><a id="user-content-authors" class="anchor" aria-hidden="true" href="#authors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Authors</h2>
<ul dir="auto">
<li><a href="http://cs.stanford.edu/~npparikh" rel="nofollow">Neal Parikh</a></li>
<li><a href="http://www.stanford.edu/~echu508" rel="nofollow">Eric Chu</a></li>
<li><a href="http://www.stanford.edu/~boyd" rel="nofollow">Stephen Boyd</a></li>
</ul>
<h2 dir="auto"><a id="user-content-other-libraries" class="anchor" aria-hidden="true" href="#other-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other libraries</h2>
<p dir="auto">There are other libraries with implementations of proximal or projection
operators that may be preferable or contain more examples:</p>
<ul dir="auto">
<li><a href="http://cvxr.com/tfocs/functions/" rel="nofollow">TFOCS</a> (see prox/proj sections)
by S. Becker, E. Candès, and M. Grant</li>
<li><a href="https://github.com/svaiter/pyprox">Python proximal operators</a> by S. Vaiter</li>
</ul>
<h2 dir="auto"><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>License</h2>
<p dir="auto">This code is released under a BSD license; see the "LICENSE" file.</p>
</article></div>