<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-arrayfirejl" class="anchor" aria-hidden="true" href="#arrayfirejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ArrayFire.jl</h1>
<p><a href="https://travis-ci.org/JuliaGPU/ArrayFire.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e4b1b58084f5096be50f79fa02bfa970a86f79a7/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614750552f4172726179466972652e6a6c2e737667" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaGPU/ArrayFire.jl.svg" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaGPU/ArrayFire.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f858151267b0b1fdfa1be0eeb7ee0e6eb8f7ad30/68747470733a2f2f636f6465636f762e696f2f67682f4a756c69614750552f4172726179466972652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaGPU/ArrayFire.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="http://ArrayFire.com" rel="nofollow">ArrayFire</a> is a library for GPU and accelerated computing. ArrayFire.jl wraps the ArrayFire library for <a href="https://JuliaLang.org" rel="nofollow">Julia</a>, and provides a Julia interface.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Install ArrayFire library: either <a href="http://arrayfire.com/download" rel="nofollow">download a binary</a> from the official site, or you can <a href="https://github.com/arrayfire/arrayfire">build from source</a>.</p>
<p>In Julia 1.0 and up:</p>
<div class="highlight highlight-source-julia"><pre>] add ArrayFire</pre></div>
<h2><a id="user-content-simple-usage" class="anchor" aria-hidden="true" href="#simple-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple Usage</h2>
<p>Congratulations, you've now installed <code>ArrayFire.jl</code>! Now what can you do?</p>
<p>Let's say you have a simple Julia array on the CPU:</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">10</span>)</pre></div>
<p>You can transfer this array to the device by calling the <code>AFArray</code> constructor on it.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ArrayFire  <span class="pl-c"><span class="pl-c">#</span> Don't forget to load the library</span>
ad <span class="pl-k">=</span> <span class="pl-c1">AFArray</span>(a)</pre></div>
<p>Now let us perform some simple arithmetic on it:</p>
<div class="highlight highlight-source-julia"><pre>bd <span class="pl-k">=</span> (ad <span class="pl-k">+</span> <span class="pl-c1">1</span>) <span class="pl-k">/</span> <span class="pl-c1">5</span></pre></div>
<p>Of course, you can do much more than just add and divide numbers. Check the supported functions section for more information.</p>
<p>Now that you're done with all your device computation, you can bring your array back to the CPU (or host):</p>
<div class="highlight highlight-source-julia"><pre>b <span class="pl-k">=</span> <span class="pl-c1">Array</span>(bd)</pre></div>
<p>Here are other examples of simple usage:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ArrayFire, LinearAlgebra

<span class="pl-c"><span class="pl-c">#</span> Random number generation</span>
a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(AFArray{Float64}, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)
b <span class="pl-k">=</span> <span class="pl-c1">randn</span>(AFArray{Float64}, <span class="pl-c1">100</span>, <span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> Transfer to device from the CPU</span>
host_to_device <span class="pl-k">=</span> <span class="pl-c1">AFArray</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">100</span>,<span class="pl-c1">100</span>))

<span class="pl-c"><span class="pl-c">#</span> Transfer back to CPU</span>
device_to_host <span class="pl-k">=</span> <span class="pl-c1">Array</span>(host_to_device)

<span class="pl-c"><span class="pl-c">#</span> Basic arithmetic operations</span>
c <span class="pl-k">=</span> <span class="pl-c1">sin</span>(a) <span class="pl-k">+</span> <span class="pl-c1">0.5</span>
d <span class="pl-k">=</span> a <span class="pl-k">*</span> <span class="pl-c1">5</span>

<span class="pl-c"><span class="pl-c">#</span> Logical operations</span>
c <span class="pl-k">=</span> a <span class="pl-k">.&gt;</span> b
any_trues <span class="pl-k">=</span> <span class="pl-c1">any</span>(c)

<span class="pl-c"><span class="pl-c">#</span> Reduction operations</span>
total_max <span class="pl-k">=</span> <span class="pl-c1">maximum</span>(a)
colwise_min <span class="pl-k">=</span> <span class="pl-c1">min</span>(a,<span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Matrix operations</span>
determinant <span class="pl-k">=</span> <span class="pl-c1">det</span>(a)
b_positive <span class="pl-k">=</span> <span class="pl-c1">abs</span>(b)
product <span class="pl-k">=</span> a <span class="pl-k">*</span> b
dot_product <span class="pl-k">=</span> a <span class="pl-k">.*</span> b
transposer <span class="pl-k">=</span> a<span class="pl-k">'</span>

<span class="pl-c"><span class="pl-c">#</span> Linear Algebra</span>
lu_fact <span class="pl-k">=</span> <span class="pl-c1">lu</span>(a)
cholesky_fact <span class="pl-k">=</span> <span class="pl-c1">cholesky</span>(a<span class="pl-k">*</span>a<span class="pl-k">'</span>)  <span class="pl-c"><span class="pl-c">#</span> Multiplied to create a positive definite matrix</span>
qr_fact <span class="pl-k">=</span> <span class="pl-c1">qr</span>(a)
svd_fact <span class="pl-k">=</span> <span class="pl-c1">svd</span>(a)

<span class="pl-c"><span class="pl-c">#</span> FFT</span>
fast_fourier <span class="pl-k">=</span> <span class="pl-c1">fft</span>(a)</pre></div>
<h2><a id="user-content-the-execution-model" class="anchor" aria-hidden="true" href="#the-execution-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>The Execution Model</h2>
<p><code>ArrayFire.jl</code> introduces an <code>AFArray</code> type that is a subtype of <code>AbstractArray</code>. Operations on <code>AFArrays</code> create other <code>AFArrays</code>, so data always remains on the device unless it is specifically transferred back. This wrapper provides a simple Julian interface that aims to mimic Base Julia's versatility and ease of use.</p>
<p><strong>REPL Behaviour</strong>: On the REPL, whenever you create an <code>AFArray</code>, the REPL displays the values, just like in Base Julia. This happens because the <code>showarray</code> method is overloaded to ensure that every time it is needed to display on the REPL, values are transferred from device to host. This means that every single operation on the REPL involves an implicit memory transfer. This may lead to some slowdown while working interactively depending on the size of the data and memory bandwidth available. You can use a semicolon (<code>;</code>) at the end of each statement to disable displaying and avoid that memory transfer. Also, note that in a script, there would be no memory transfer unless a display function is explicitly called (or if you use the <code>Array</code> constructor like in the above example).</p>
<p><strong>Async Behaviour</strong>: <code>arrayfire</code> is an asynchronous library. This essentially means that whenever you call a particular function in <code>ArrayFire.jl</code>, it would return control to the host almost immediately (which in this case in Julia) and continue executing on the device. This is pretty useful because it would mean that host code that's independent of the device can simply execute while the device computes, resulting in better real world performance.</p>
<p>The library also performs some kernel fusions on elementary arithmetic operations (see the arithmetic section of the Supported Functions). <code>arrayfire</code> has an intelligent runtime JIT compliation engine which converts array expressions into the smallest number of OpenCL/CUDA kernels. Kernel fusion not only decreases the number of kernel calls, but also avoids extraneous global memory operations. This asynchronous behaviour ends only when a non-JIT operation is called or an explicit synchronization barrier <code>sync(array)</code> is called.</p>
<p><strong>A note on benchmarking</strong>: In Julia, one would use the <code>@time</code> macro to time execution times of functions. However, in this particular case, <code>@time</code> would simply time the function call, and the library would execute asynchronously in the background. This would often lead to misleading timings. Therefore, the right way to time individual operations is to run them multiple times, place an explicit synchronization barrier at the end, and take the average of multiple runs.</p>
<p>Also, note that this does not affect how the user writes code. Users can simply write normal Julia code using <code>ArrayFire.jl</code> and this asynchronous behaviour is abstracted out. Whenever the data is needed back onto the CPU, an implicit barrier ensures that the computatation is complete, and the values are transferred back.</p>
<p><strong>Operations between CPU and device arrays</strong>:  Consider the following code. It will return an error:</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>)
b <span class="pl-k">=</span> <span class="pl-c1">AFArray</span>(a)
a <span class="pl-k">-</span> b <span class="pl-c"><span class="pl-c">#</span> Throws Error</span></pre></div>
<p>This is because the two arrays reside in different regions of memory (host and device), and for any coherent operation to be performed, one array would have to be transferred to other region in memory. <code>ArrayFire.jl</code> does <em>not</em> do this automatically for performance considerations. Therefore, to make this work, you would have to manually transfer one of the arrays to the other memory. The following operations would work:</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">-</span> <span class="pl-c1">Array</span>(b) <span class="pl-c"><span class="pl-c">#</span> Works!</span>
<span class="pl-c1">AFArray</span>(a) <span class="pl-k">-</span> b <span class="pl-c"><span class="pl-c">#</span> This works too!</span></pre></div>
<p><strong>A note on correctness</strong>: Sometimes, <code>ArrayFire.jl</code> and Base Julia might return marginally different values from their computation. This is because Julia and <code>ArrayFire.jl</code> sometimes use different lower level libraries for BLAS, FFT, etc. For example, Julia uses OpenBLAS for BLAS operations, but <code>ArrayFire.jl</code> would use clBLAS for the OpenCL backend and CuBLAS for the CUDA backend, and these libraries might not always the exact same values as OpenBLAS after a certain decimal point. In light of this, users are encouraged to keep testing their codes for correctness.</p>
<p><strong>A note on performance</strong>: Some operations can be slow due to <code>Base</code>'s generic implementations. This is intentional, to enable a "make it work, then make it fast" workflow. When you're ready you can disable slow fallback methods:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">allowslow</span>(AFArray, <span class="pl-c1">false</span>)
julia<span class="pl-k">&gt;</span> xs[<span class="pl-c1">5</span>]
ERROR<span class="pl-k">:</span> getindex is disabled</pre></div>
<h2><a id="user-content-supported-functions" class="anchor" aria-hidden="true" href="#supported-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Supported Functions</h2>
<h3><a id="user-content-creating-afarrays" class="anchor" aria-hidden="true" href="#creating-afarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating AFArrays</h3>
<ul>
<li><code>rand</code>, <code>randn</code>, <code>convert</code>, <code>diagm</code>, <code>eye</code>, <code>range</code>, <code>zeros</code>, <code>ones</code>, <code>trues</code>, <code>falses</code></li>
<li><code>constant</code>, <code>getSeed</code>, <code>setSeed</code>, <code>iota</code></li>
</ul>
<h3><a id="user-content-arithmetic" class="anchor" aria-hidden="true" href="#arithmetic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Arithmetic</h3>
<ul>
<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code>, <code>&amp;</code>, <code>$</code>, <code>|</code></li>
<li><code>.+</code>, <code>.-</code>, <code>.*</code>, <code>./</code>, <code>.&gt;</code>, <code>.&gt;=</code>, <code>.&lt;</code>, <code>.&lt;=</code>, <code>.==</code>, <code>.!=, </code></li>
<li><code>complex</code>, <code>conj</code>, <code>real</code>, <code>imag</code>, <code>max</code>, <code>min</code>, <code>abs</code>, <code>round</code>, <code>floor</code>, <code>hypot</code></li>
<li><code>sigmoid</code></li>
<li><code>signbit</code> (works only in vectorized form on Julia v0.5 - Ref issue #109)</li>
</ul>
<h3><a id="user-content-linear-algebra" class="anchor" aria-hidden="true" href="#linear-algebra"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Linear Algebra</h3>
<ul>
<li><code>cholesky</code>, <code>svd</code>, <code>lu</code>, <code>qr</code>, <code>svdfact!</code>, <code>lufact!</code>, <code>qrfact!</code></li>
<li><code>*(matmul)</code>, <code>A_mul_Bt</code>, <code>At_mul_B</code>, <code>At_mul_Bt</code>, <code>Ac_mul_B</code>, <code>A_mul_Bc</code>, <code>Ac_mul_Bc</code></li>
<li><code>transpose</code>, <code>transpose!</code>, <code>ctranspose</code>, <code>ctranspose!</code></li>
<li><code>det</code>, <code>inv</code>, <code>rank</code>, <code>norm</code>, <code>dot</code>, <code>diag</code>, <code>\</code></li>
<li><code>isLAPACKAvailable</code>, <code>chol!</code>, <code>solveLU</code>, <code>upper</code>, <code>lower</code></li>
</ul>
<h3><a id="user-content-signal-processing" class="anchor" aria-hidden="true" href="#signal-processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Signal Processing</h3>
<ul>
<li><code>fft</code>, <code>ifft</code>, <code>fft!</code>, <code>ifft!</code></li>
<li><code>conv</code>, <code>conv2</code></li>
<li><code>fftC2R</code>, <code>fftR2C</code>, <code>conv3</code>, <code>convolve</code>, <code>fir</code>, <code>iir</code>, <code>approx1</code>, <code>approx2</code></li>
</ul>
<h3><a id="user-content-statistics" class="anchor" aria-hidden="true" href="#statistics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Statistics</h3>
<ul>
<li><code>mean</code>, <code>median</code>, <code>std</code>, <code>var</code>, <code>cov</code></li>
<li><code>meanWeighted</code>, <code>varWeighted</code>, <code>corrcoef</code></li>
</ul>
<h3><a id="user-content-vector-algorithms" class="anchor" aria-hidden="true" href="#vector-algorithms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vector Algorithms</h3>
<ul>
<li><code>sum</code>, <code>min</code>, <code>max</code>, <code>minimum</code>, <code>maximum</code>, <code>findmax</code>, <code>findmin</code></li>
<li><code>countnz</code>, <code>any</code>, <code>all</code>, <code>sort</code>, <code>union</code>, <code>find</code>, <code>cumsum</code>, <code>diff</code></li>
<li><code>sortIndex</code>, <code>sortByKey</code>, <code>diff2</code>, <code>minidx</code>, <code>maxidx</code></li>
</ul>
<h3><a id="user-content-backend-functions" class="anchor" aria-hidden="true" href="#backend-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Backend Functions</h3>
<ul>
<li><code>getActiveBackend</code>, <code>getBackendCount</code>, <code>getAvailableBackends</code>, <code>setBackend</code>, <code>getBackendId</code>, <code>sync</code>, <code>getActiveBackendId</code></li>
</ul>
<h3><a id="user-content-device-functions" class="anchor" aria-hidden="true" href="#device-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Device Functions</h3>
<ul>
<li><code>getDevice</code>, <code>setDevice</code>, <code>getNumDevices</code></li>
</ul>
<h3><a id="user-content-image-processing" class="anchor" aria-hidden="true" href="#image-processing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Image Processing</h3>
<ul>
<li><code>scale</code>, <code>hist</code></li>
<li><code>loadImage</code>, <code>saveImage</code></li>
<li><code>isImageIOAvailable</code></li>
<li><code>colorspace</code>, <code>gray2rgb</code>, <code>rgb2gray</code>, <code>rgb2hsv</code>, <code>rgb2ycbcr</code>, <code>ycbcr2rgb</code>, <code>hsv2rgb</code></li>
<li><code>regions</code>, <code>SAT</code></li>
<li><code>bilateral</code>, <code>maxfilt</code>, <code>meanshift</code>, <code>medfilt</code>, <code>minfilt</code>, <code>sobel</code>, <code>histequal</code></li>
<li><code>resize</code>, <code>rotate</code>, <code>skew</code>, <code>transform</code>, <code>transformCoordinates</code>, <code>translate</code></li>
<li><code>dilate</code>, <code>erode</code>, <code>dilate3d</code>, <code>erode3d</code>, <code>gaussiankernel</code></li>
</ul>
<h3><a id="user-content-computer-vision" class="anchor" aria-hidden="true" href="#computer-vision"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Computer Vision</h3>
<ul>
<li><code>orb</code>, <code>sift</code>, <code>gloh</code>, <code>diffOfGaussians</code>, <code>fast</code>, <code>harris</code>, <code>susan</code>, <code>hammingMatcher</code>, <code>nearestNeighbour</code>, <code>matchTemplate</code></li>
</ul>
<h2><a id="user-content-performance" class="anchor" aria-hidden="true" href="#performance"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Performance</h2>
<p>ArrayFire was benchmarked on commonly used operations.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/9101377/15921168/36b4f1fc-2e3d-11e6-871a-c8989c5bd279.png"><img width="537" alt="general" src="https://cloud.githubusercontent.com/assets/9101377/15921168/36b4f1fc-2e3d-11e6-871a-c8989c5bd279.png" style="max-width:100%;"></a></p>
<p>Another interesting benchmark is <a href="https://www.wikiwand.com/en/Non-negative_matrix_factorization" rel="nofollow"><strong>Non-negative Matrix Factorization</strong></a>:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/9101377/15921185/62ad8198-2e3d-11e6-911e-469375a99ecb.png"><img src="https://cloud.githubusercontent.com/assets/9101377/15921185/62ad8198-2e3d-11e6-911e-469375a99ecb.png" alt="NMF Benchmark" style="max-width:100%;"></a></p>
<p>CPU: Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz.</p>
<p>GPU: GRID K520, 4096 MB, CUDA Compute 3.0.</p>
<p>ArrayFire v3.4.0</p>
<p>The benchmark scripts are in the benchmark folder, and be run from there by doing by doing:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>benchmark.jl<span class="pl-pds">"</span></span>)
<span class="pl-c1">include</span>(<span class="pl-s"><span class="pl-pds">"</span>nmf_benchmark.jl<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-backends" class="anchor" aria-hidden="true" href="#backends"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Backends</h2>
<p>There are three backends in <code>ArrayFire.jl</code>:</p>
<ul>
<li>CUDA Backend</li>
<li>OpenCL Backend</li>
<li>CPU Backend</li>
</ul>
<p>There is yet another backend which essentially allows the user to switch backends at runtime. This is called the unified
backend. <code>ArrayFire.jl</code> starts up with the unified backend.</p>
<p>If the backend selected by ArrayFire by default (depends on the available drivers) is not the desired one (depending on the available hardware), you can override the default by setting the environment variable <code>$JULIA_ARRAYFIRE_BACKEND</code> before starting Julia (more specifically, before loading the <code>ArrayFire</code> module). Possible values for <code>$JULIA_ARRAYFIRE_BACKEND</code> are <code>cpu</code>, <code>cuda</code> and <code>opencl</code>.</p>
<p>You may also change the backend at runtime via, e.g., <code>set_backend(AF_BACKEND_CPU)</code> (resp. <code>AF_BACKEND_CUDA</code> or <code>AF_BACKEND_OPENCL</code>).
The unified backend isn't a computational backend by itself but represents an interface to switch
between different backends at runtime. <code>ArrayFire.jl</code> starts up with the unified backend, but <code>get_active_backend()</code>
will return either a particular default backend, depending on how you have installed the library. For example, if you have
built <code>ArrayFire.jl</code> with the CUDA backend, <code>get_active_backend()</code> will return <code>AF_BACKEND_CUDA</code> backend.</p>
<h2><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Troubleshooting</h2>
<p><code>ArrayFire.jl</code> isn't working! What do I do?</p>
<blockquote>
<p>Error loading <code>libaf</code></p>
</blockquote>
<p>Try adding the path to <code>libaf</code> to your <code>LD_LIBRARY_PATH</code>.</p>
<blockquote>
<p><code>ArrayFire Error (998): Internal Error</code> whenever you call <code>rand</code></p>
</blockquote>
<p>If you're using the CUDA backend, try checking if <code>libcudart</code> and <code>libnvvm</code> are both in your <code>LD_LIBRARY_PATH</code>. This is because <code>libafcuda</code> will try to link to these libraries when it loads into Julia. If they're not in your system, install CUDA for your platform.</p>
<blockquote>
<p><code>ArrayFire.jl</code> loads, but <code>a = rand(AFArray{Float32}, 10)</code> is stuck.</p>
</blockquote>
<p>If you want to use the CUDA backend, check if you have installed CUDA for your platform. If you've installed CUDA, simply downloaded a binary and it still doens't work, try adding <code>libnvvm</code>, <code>libcudart</code> to your path.</p>
<blockquote>
<p><code>ArrayFire.jl</code> does not work with Atom.</p>
</blockquote>
<p>Create a file in your home directory called <code>.juliarc.jl</code> and write <code>ENV["LD_LIBRARY_PATH"] = "/usr/local/lib/"</code> (or the path to <code>libaf</code>) in it. Atom should now be able to load it.</p>
<blockquote>
<p><code>ERROR: ArrayFire Error (401) : Double precision not supported for this device</code></p>
</blockquote>
<p>This error message pops up on devices that do not support double precision: a good example would be the Iris Pro on Macbooks. If you get this message, you should work with single precision. For example, if you're generating random numbers directly on the device, the correct usage in this scenario would be <code>rand(AFArray{Float32}, 10)</code> instead of <code>rand(AFArray{Float64}, 10)</code>.</p>
</article></div>