<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-abstractnumbers" class="anchor" aria-hidden="true" href="#abstractnumbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>AbstractNumbers</h1>
<p><a href="https://travis-ci.org/SimonDanisch/AbstractNumbers.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ece8457f2900aae8864c8a37565a3b3c9807c5f3c59fd9a5eba59a6421d9f103/68747470733a2f2f7472617669732d63692e6f72672f53696d6f6e44616e697363682f41627374726163744e756d626572732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/SimonDanisch/AbstractNumbers.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/SimonDanisch/AbstractNumbers.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ed956497f13966e5bd81ed75a58e6244909c1ef395b3670861edc062074e3a7b/687474703a2f2f636f6465636f762e696f2f6769746875622f53696d6f6e44616e697363682f41627374726163744e756d626572732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/SimonDanisch/AbstractNumbers.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>There are a lot of functions one needs to define on a custom number type to make it work just like a julia Base number.
Namely, around 160 functions, with quite a few methods.</p>
<p>With AbstractNumbers, this is all you need to start the life of a new, wonderful Number type:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using AbstractNumbers, SpecialFunctions
using Base.Test

struct MyNumber{T} &lt;: AbstractNumbers.AbstractNumber{T}
    number::T
end

Base.convert(::Type{Number}, x::MyNumber) = x.number
AbstractNumbers.basetype(::Type{&lt;: MyNumber}) = MyNumber

"><pre><span class="pl-k">using</span> AbstractNumbers, SpecialFunctions
<span class="pl-k">using</span> Base<span class="pl-k">.</span>Test

<span class="pl-k">struct</span> MyNumber{T} <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractNumbers.AbstractNumber{T}</span>
    number<span class="pl-k">::</span><span class="pl-c1">T</span>
<span class="pl-k">end</span>

Base<span class="pl-k">.</span><span class="pl-en">convert</span>(<span class="pl-k">::</span><span class="pl-c1">Type{Number}</span>, x<span class="pl-k">::</span><span class="pl-c1">MyNumber</span>) <span class="pl-k">=</span> x<span class="pl-k">.</span>number
AbstractNumbers<span class="pl-k">.</span><span class="pl-en">basetype</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;: MyNumber}</span>) <span class="pl-k">=</span> MyNumber
</pre></div>
<p>Now, <code>MyNumber</code> will have all functions defined for it. :)
If you need some functions to behave differently, just overload those functions with your concrete type!</p>
<h1><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Implementation</h1>
<p>Right now, the overloads of the AbstractNumber types are generated with a script that prints out the expressions as string.
I purposefully decided against the usage of a macro for two reasons:</p>
<ol>
<li>
<p>I got quickly annoyed by the stack traces and not being able to immediately see what's going on - which is much easier when having all functions written out</p>
</li>
<li>
<p>I need to dynamically extract some attributes from the functions before emitting methods for it. This needs some supervision and should just be done everytime Julia Base changes - so it shouldn't be part of a macro, hence I'm stuck with some kind of generator script anyways. Instead of mixing the macro approach with a generator approach, I just went full generator!</p>
</li>
</ol>
</article></div>