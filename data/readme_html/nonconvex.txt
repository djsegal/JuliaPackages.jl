<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-nonconvex" class="anchor" aria-hidden="true" href="#nonconvex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Nonconvex</h1>
<p><a href="https://github.com/mohamed82008/Nonconvex.jl/actions"><img src="https://github.com/mohamed82008/Nonconvex.jl/workflows/CI/badge.svg" alt="Actions Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/mohamed82008/Nonconvex.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5236d6c71482be695dfd8653dd7d9836314c0c489ff24b704cbb9cb6a7fefd57/68747470733a2f2f636f6465636f762e696f2f67682f6d6f68616d656438323030382f4e6f6e636f6e7665782e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mohamed82008/Nonconvex.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package implements and wraps a number of nonconvex constrained optimization algorithms and packages making use of automatic differentiation. The following algorithms are implemented:</p>
<ul>
<li><code>MMA87</code>: the original method of moving asymptotes</li>
<li><code>MMA02</code>: the globally convergent method of moving asymptotes</li>
</ul>
<p>The following packages are wrapped:</p>
<ul>
<li><code>IpoptAlg</code>: a wrapper around Ipopt.jl</li>
<li><code>NLoptAlg</code>: a wrapper around NLopt.jl</li>
<li><code>AugLag</code>: a wrapper around Percival.jl which implements the augmented Lagrangian algorithm</li>
</ul>
<p>The method of moving asymptotes algorithms' were generalized to handle infinite variable bounds. In the augmented Lagrangian algorithm, a block constraint can be handled efficiently by defining a custom adjoint rule for the block constraint using <code>ChainRulesCore.jl</code>. This custom adjoint will be picked up by <code>Nonconvex.jl</code> when calculating the gradient of the augmented Lagrangian.</p>
<h1><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h1>
<h2><a id="user-content-load-the-package" class="anchor" aria-hidden="true" href="#load-the-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Load the package</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Nonconvex
"><pre><span class="pl-k">using</span> Nonconvex</pre></div>
<h2><a id="user-content-problem-definition" class="anchor" aria-hidden="true" href="#problem-definition"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Problem definition</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(x) = sqrt(x[2])
g(x, a, b) = (a*x[1] + b)^3 - x[2]

m = Model(f)
addvar!(m, [0.0, 0.0], [10.0, 10.0])
add_ineq_constraint!(m, x -&gt; g(x, 2, 0))
add_ineq_constraint!(m, x -&gt; g(x, -1, 1))
"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(x[<span class="pl-c1">2</span>])
<span class="pl-en">g</span>(x, a, b) <span class="pl-k">=</span> (a<span class="pl-k">*</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b)<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> x[<span class="pl-c1">2</span>]

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(f)
<span class="pl-c1">addvar!</span>(m, [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>])
<span class="pl-c1">add_ineq_constraint!</span>(m, x <span class="pl-k">-&gt;</span> <span class="pl-c1">g</span>(x, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>))
<span class="pl-c1">add_ineq_constraint!</span>(m, x <span class="pl-k">-&gt;</span> <span class="pl-c1">g</span>(x, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>))</pre></div>
<h2><a id="user-content-block-constraints" class="anchor" aria-hidden="true" href="#block-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Block constraints</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="m = Model(f)
addvar!(m, [0.0, 0.0], [10.0, 10.0])
block_constr = FunctionWrapper(x -&gt; [g(x, 2, 0), g(x, -1, 1)], 2)
add_ineq_constraint!(m, block_constr)
"><pre>m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(f)
<span class="pl-c1">addvar!</span>(m, [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>])
block_constr <span class="pl-k">=</span> <span class="pl-c1">FunctionWrapper</span>(x <span class="pl-k">-&gt;</span> [<span class="pl-c1">g</span>(x, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>), <span class="pl-c1">g</span>(x, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>)], <span class="pl-c1">2</span>)
<span class="pl-c1">add_ineq_constraint!</span>(m, block_constr)</pre></div>
<h2><a id="user-content-mma" class="anchor" aria-hidden="true" href="#mma"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MMA</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="alg = MMA87() # or MMA02()
options = Nonconvex.MMAOptions(
    tol = Nonconvex.Tolerance(kkt = 1e-6, f = 0.0), s_init = 0.1,
)
convcriteria = KKTCriteria()
r = Nonconvex.optimize(
    m, alg, [1.234, 2.345], options = options,
    convcriteria = convcriteria,
)
r.minimum
r.minimizer
"><pre>alg <span class="pl-k">=</span> <span class="pl-c1">MMA87</span>() <span class="pl-c"><span class="pl-c">#</span> or MMA02()</span>
options <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">MMAOptions</span>(
    tol <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">Tolerance</span>(kkt <span class="pl-k">=</span> <span class="pl-c1">1e-6</span>, f <span class="pl-k">=</span> <span class="pl-c1">0.0</span>), s_init <span class="pl-k">=</span> <span class="pl-c1">0.1</span>,
)
convcriteria <span class="pl-k">=</span> <span class="pl-c1">KKTCriteria</span>()
r <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">optimize</span>(
    m, alg, [<span class="pl-c1">1.234</span>, <span class="pl-c1">2.345</span>], options <span class="pl-k">=</span> options,
    convcriteria <span class="pl-k">=</span> convcriteria,
)
r<span class="pl-k">.</span>minimum
r<span class="pl-k">.</span>minimizer</pre></div>
<h2><a id="user-content-nlopt" class="anchor" aria-hidden="true" href="#nlopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>NLopt</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="alg = NLoptAlg(:LD_MMA)
options = Nonconvex.NLoptOptions()
r = optimize(m, alg, [1.234, 2.345], options = options)
r.minimum
r.minimizer
"><pre>alg <span class="pl-k">=</span> <span class="pl-c1">NLoptAlg</span>(<span class="pl-c1">:LD_MMA</span>)
options <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">NLoptOptions</span>()
r <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(m, alg, [<span class="pl-c1">1.234</span>, <span class="pl-c1">2.345</span>], options <span class="pl-k">=</span> options)
r<span class="pl-k">.</span>minimum
r<span class="pl-k">.</span>minimizer</pre></div>
<h2><a id="user-content-augmented-lagrangian--percival" class="anchor" aria-hidden="true" href="#augmented-lagrangian--percival"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Augmented Lagrangian / Percival</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="alg = AugLag()
options = Nonconvex.AugLagOptions()
r = optimize(m, alg, [1.234, 2.345], options = options)
r.minimum
r.minimizer
"><pre>alg <span class="pl-k">=</span> <span class="pl-c1">AugLag</span>()
options <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">AugLagOptions</span>()
r <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(m, alg, [<span class="pl-c1">1.234</span>, <span class="pl-c1">2.345</span>], options <span class="pl-k">=</span> options)
r<span class="pl-k">.</span>minimum
r<span class="pl-k">.</span>minimizer</pre></div>
<h2><a id="user-content-mixed-equality-and-inequality-constraints" class="anchor" aria-hidden="true" href="#mixed-equality-and-inequality-constraints"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mixed equality and inequality constraints</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(x) = sqrt(x[2])
g(x, a, b) = (a*x[1] + b)^3 - x[2]

m = Model(f)
addvar!(m, [0.0, 0.0], [10.0, 10.0])
add_eq_constraint!(m, x -&gt; g(x, 2, 0))
add_ineq_constraint!(m, x -&gt; g(x, -1, 1))
"><pre><span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(x[<span class="pl-c1">2</span>])
<span class="pl-en">g</span>(x, a, b) <span class="pl-k">=</span> (a<span class="pl-k">*</span>x[<span class="pl-c1">1</span>] <span class="pl-k">+</span> b)<span class="pl-k">^</span><span class="pl-c1">3</span> <span class="pl-k">-</span> x[<span class="pl-c1">2</span>]

m <span class="pl-k">=</span> <span class="pl-c1">Model</span>(f)
<span class="pl-c1">addvar!</span>(m, [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>], [<span class="pl-c1">10.0</span>, <span class="pl-c1">10.0</span>])
<span class="pl-c1">add_eq_constraint!</span>(m, x <span class="pl-k">-&gt;</span> <span class="pl-c1">g</span>(x, <span class="pl-c1">2</span>, <span class="pl-c1">0</span>))
<span class="pl-c1">add_ineq_constraint!</span>(m, x <span class="pl-k">-&gt;</span> <span class="pl-c1">g</span>(x, <span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>))</pre></div>
<h2><a id="user-content-ipopt" class="anchor" aria-hidden="true" href="#ipopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Ipopt</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="alg = IpoptAlg()
options = Nonconvex.IpoptOptions()
r = optimize(m, alg, [1.234, 2.345], options = options)
r.minimum
r.minimizer
"><pre>alg <span class="pl-k">=</span> <span class="pl-c1">IpoptAlg</span>()
options <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">IpoptOptions</span>()
r <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(m, alg, [<span class="pl-c1">1.234</span>, <span class="pl-c1">2.345</span>], options <span class="pl-k">=</span> options)
r<span class="pl-k">.</span>minimum
r<span class="pl-k">.</span>minimizer</pre></div>
<h2><a id="user-content-mixed-integer-optimization-with-juniper-and-ipopt" class="anchor" aria-hidden="true" href="#mixed-integer-optimization-with-juniper-and-ipopt"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mixed integer optimization with Juniper and Ipopt</h2>
<p>To do mixed integer optimization using Juniper and Ipopt, you can use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="alg = JuniperIpoptAlg()
options = Nonconvex.JuniperIpoptOptions()
r = optimize(m, alg, [1.234, 2.345], options = options, integers = [false, true])
r.minimum
r.minimizer # [0.3327, 1]
"><pre>alg <span class="pl-k">=</span> <span class="pl-c1">JuniperIpoptAlg</span>()
options <span class="pl-k">=</span> Nonconvex<span class="pl-k">.</span><span class="pl-c1">JuniperIpoptOptions</span>()
r <span class="pl-k">=</span> <span class="pl-c1">optimize</span>(m, alg, [<span class="pl-c1">1.234</span>, <span class="pl-c1">2.345</span>], options <span class="pl-k">=</span> options, integers <span class="pl-k">=</span> [<span class="pl-c1">false</span>, <span class="pl-c1">true</span>])
r<span class="pl-k">.</span>minimum
r<span class="pl-k">.</span>minimizer <span class="pl-c"><span class="pl-c">#</span> [0.3327, 1]</span></pre></div>
<h2><a id="user-content-custom-gradient--adjoint" class="anchor" aria-hidden="true" href="#custom-gradient--adjoint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom gradient / adjoint</h2>
<p>A custom gradient rule for a function should be defined using ChainRulesCore's <code>rrule</code>.
For example the following can be used for the function <code>f</code> defined above.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ChainRulesCore

function ChainRulesCore.rrule(::typeof(f), x::AbstractVector)
    val = f(x)
    grad = [0.0, 1 / (2 * sqrt(x[2]))]
    val, Δ -&gt; (NO_FIELDS, Δ * grad)
end
"><pre><span class="pl-k">using</span> ChainRulesCore

<span class="pl-k">function</span> ChainRulesCore<span class="pl-k">.</span><span class="pl-en">rrule</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(f), x<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)
    val <span class="pl-k">=</span> <span class="pl-c1">f</span>(x)
    grad <span class="pl-k">=</span> [<span class="pl-c1">0.0</span>, <span class="pl-c1">1</span> <span class="pl-k">/</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">sqrt</span>(x[<span class="pl-c1">2</span>]))]
    val, Δ <span class="pl-k">-&gt;</span> (NO_FIELDS, Δ <span class="pl-k">*</span> grad)
<span class="pl-k">end</span></pre></div>
<p>You can check it is correct in your tests using <a href="https://github.com/JuliaDiff/ChainRulesTestUtils.jl/">ChainRulesTestUtils.jl</a>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ChainRulesTestUtils
test_rrule(f, [1.2, 3.6])
"><pre><span class="pl-k">using</span> ChainRulesTestUtils
<span class="pl-c1">test_rrule</span>(f, [<span class="pl-c1">1.2</span>, <span class="pl-c1">3.6</span>])</pre></div>
<p>For full details on <code>rrules</code> etc see the <a href="https://juliadiff.org/ChainRulesCore.jl/stable/" rel="nofollow">ChainRules documentation</a>.</p>
<h2><a id="user-content-hack-to-use-other-automatic-differentiation-backends" class="anchor" aria-hidden="true" href="#hack-to-use-other-automatic-differentiation-backends"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Hack to use other automatic differentiation backends</h2>
<p>For specific functions, if you want to use <code>ForwardDiff</code> instead of <code>Zygote</code>, one way to do this is to define an <code>rrule</code> using <code>ForwardDiff</code> to compute the gradient or jacobian, e.g:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using ChainRulesCore, ForwardDiff

function ChainRulesCore.rrule(::typeof(f), x::AbstractVector)
    val = f(x)
    grad = ForwardDiff.gradient(f, x)
    val, Δ -&gt; (NO_FIELDS, Δ * grad)
end
"><pre><span class="pl-k">using</span> ChainRulesCore, ForwardDiff

<span class="pl-k">function</span> ChainRulesCore<span class="pl-k">.</span><span class="pl-en">rrule</span>(<span class="pl-k">::</span><span class="pl-c1">typeof</span>(f), x<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>)
    val <span class="pl-k">=</span> <span class="pl-c1">f</span>(x)
    grad <span class="pl-k">=</span> ForwardDiff<span class="pl-k">.</span><span class="pl-c1">gradient</span>(f, x)
    val, Δ <span class="pl-k">-&gt;</span> (NO_FIELDS, Δ <span class="pl-k">*</span> grad)
<span class="pl-k">end</span></pre></div>
</article></div>