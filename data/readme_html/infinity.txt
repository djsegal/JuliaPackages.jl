<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-infinityjl" class="anchor" aria-hidden="true" href="#infinityjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Infinity.jl</h1>
<p>Provides <code>∞ :: Infinite &lt;: Real</code> representing positive infinity and <code>-∞</code> is negative infinity.</p>
<p>Promotion between <code>Infinite</code> and some <code>T &lt;: Real</code> will yield either:</p>
<ul>
<li><code>T</code> itself if it can natively represent infinity (e.g. <code>Float64</code>, <code>Rational</code>); or</li>
<li><code>InfExtended{T} &lt;: Real</code> otherwise, which represents the union of <code>T</code> and <code>Infinite</code>. (See the examples.)</li>
</ul>
<p>The following <code>Base</code> functions are extended for these types:</p>
<ul>
<li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
<li>Comparison: <code>==</code>, <code>&lt;</code>, <code>≤</code>, <code>hash</code>, <code>signbit</code>, <code>sign</code>, <code>isfinite</code>, <code>isinf</code>, <code>isapprox</code></li>
<li>Conversion: <code>promote</code>, <code>convert</code>, <code>float</code>, <code>widen</code>, <code>big</code></li>
<li>Random: <code>rand(Infinite)</code></li>
</ul>
<p>Additionally there is a submodule <code>Utils</code> exporting infinity-related functions:</p>
<ul>
<li><code>posinf(T)</code>, <code>neginf(T)</code>: positive or negative infinity as a <code>T</code> if possible, or else <code>nothing</code></li>
<li><code>hasposinf(T)</code>, <code>hasneginf(T)</code>: true if <code>T</code> contains positive or negative infinity</li>
<li><code>hasinf(T)</code>: true if <code>T</code> contains both positive and negative infinity (this is used to decide to promote to <code>InfExtended</code> or not)</li>
<li><code>isposinf(x)</code>, <code>isneginf(x)</code>: true if <code>x</code> is positive or negative infinity</li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>In Julia, type <code>]</code> then run</p>
<pre><code>pkg&gt; install https://github.com/cjdoris/Infinity.jl
</code></pre>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<pre><code>julia&gt; using Infinity

julia&gt; x = [1,2,3,∞,-1,-∞]
6-element Array{InfExtended{Int64},1}:
  1
  2
  3
  ∞
 -1
 -∞

julia&gt; sort(x)
6-element Array{InfExtended{Int64},1}:
 -∞
 -1
  1
  2
  3
  ∞

julia&gt; float(x)
6-element Array{Float64,1}:
   1.0
   2.0
   3.0
 Inf
  -1.0
 Inf
</code></pre>
</article></div>