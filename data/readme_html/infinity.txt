<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-infinityjl" class="anchor" aria-hidden="true" href="#infinityjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Infinity.jl</h1>
<p><a href="https://juliahub.com/docs/Infinity/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/cjdoris/Infinity.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cb3678974146b9d98c22b6ffd4c652cb3fcf00af/68747470733a2f2f7472617669732d63692e636f6d2f636a646f7269732f496e66696e6974792e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/cjdoris/Infinity.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cjdoris/Infinity.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc10651c8b34e7875b41e130c0f9727bdf619063/68747470733a2f2f636f6465636f762e696f2f67682f636a646f7269732f496e66696e6974792e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="CodeCov" data-canonical-src="https://codecov.io/gh/cjdoris/Infinity.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Provides <code>∞ :: Infinite &lt;: Real</code> representing positive infinity and <code>-∞</code> is negative infinity.</p>
<h2><a id="user-content-extended-types" class="anchor" aria-hidden="true" href="#extended-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extended Types</h2>
<h3><a id="user-content-infextendedreal" class="anchor" aria-hidden="true" href="#infextendedreal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InfExtendedReal</h3>
<p>Promotion between <code>Infinite</code> and some <code>T &lt;: Real</code> will yield either:</p>
<ul>
<li><code>T</code> itself if it can natively represent infinity (e.g. <code>Float64</code>, <code>Rational</code>); or</li>
<li><code>InfExtendedReal{T} &lt;: Real</code> otherwise, which represents positive/negative infinity, or a finite value of type <code>T</code>. (See the examples.)</li>
</ul>
<p>The following <code>Base</code> functions are extended for these types:</p>
<ul>
<li>Arithmetic: <code>typemin</code>, <code>typemax</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
<li>Comparison: <code>==</code>, <code>&lt;</code>, <code>≤</code>, <code>hash</code>, <code>signbit</code>, <code>sign</code>, <code>isfinite</code>, <code>isinf</code>, <code>isapprox</code></li>
<li>Conversion: <code>promote</code>, <code>convert</code>, <code>float</code>, <code>widen</code>, <code>big</code></li>
<li>Random: <code>rand(Infinite)</code></li>
</ul>
<p>Additionally there is a submodule <code>Utils</code> exporting infinity-related functions:</p>
<ul>
<li><code>posinf(T)</code>, <code>neginf(T)</code>: positive or negative infinity as a <code>T</code> if possible, or else <code>nothing</code></li>
<li><code>hasposinf(T)</code>, <code>hasneginf(T)</code>: true if <code>T</code> contains positive or negative infinity</li>
<li><code>hasinf(T)</code>: true if <code>T</code> contains both positive and negative infinity (this is used to decide to promote to <code>InfExtendedReal</code> or not)</li>
<li><code>isposinf(x)</code>, <code>isneginf(x)</code>: true if <code>x</code> is positive or negative infinity</li>
</ul>
<h3><a id="user-content-infextendedtime" class="anchor" aria-hidden="true" href="#infextendedtime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>InfExtendedTime</h3>
<p>Promotion between <code>Infinite</code> and some <code>T &lt;: Dates.TimeType</code> will yield:</p>
<ul>
<li><code>InfExtendedTime{T} &lt;: Dates.TimeType</code>, which represents positive/negative infinity, or a finite value of type <code>T</code>. (See the examples.)</li>
</ul>
<p>The following <code>Base</code> functions are extended for these types:</p>
<ul>
<li>Arithmetic: <code>typemin</code>, <code>typemax</code>, <code>T+Period</code>, <code>T-Period</code></li>
<li>Comparison: <code>==</code>. <code>&lt;</code>, <code>≤</code>, <code>hash</code>, <code>isfinite</code>, <code>isinf</code></li>
<li>Conversion: <code>promote</code>, <code>convert</code></li>
</ul>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>In Julia, type <code>]</code> then run</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add Infinity</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Infinity

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,∞,<span class="pl-k">-</span><span class="pl-c1">1</span>,<span class="pl-k">-</span>∞]
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{InfExtendedReal{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">2</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">3</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(∞)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span>∞)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort</span>(x)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{InfExtendedReal{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span>∞)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-k">-</span><span class="pl-c1">1</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">1</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">2</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(<span class="pl-c1">3</span>)
 <span class="pl-c1">InfExtendedReal</span><span class="pl-c1">{Int64}</span>(∞)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">float</span>(x)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
    <span class="pl-c1">1.0</span>
    <span class="pl-c1">2.0</span>
    <span class="pl-c1">3.0</span>
  <span class="pl-c1">Inf</span>
   <span class="pl-k">-</span><span class="pl-c1">1.0</span>
 <span class="pl-k">-</span><span class="pl-c1">Inf</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Dates

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">Date</span>(<span class="pl-c1">2012</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">Date</span>(<span class="pl-c1">2013</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-c1">Date</span>(<span class="pl-c1">2013</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>), ∞, <span class="pl-c1">Date</span>(<span class="pl-c1">1987</span>, <span class="pl-c1">1</span>, <span class="pl-c1">1</span>), <span class="pl-k">-</span>∞]
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{InfExtendedTime{Date},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2012</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2013</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2013</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">02</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(∞)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">1987</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-k">-</span>∞)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sort</span>(x)
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{InfExtendedTime{Date},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-k">-</span>∞)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">1987</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2012</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2013</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">01</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2013</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">02</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(∞)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Day</span>(<span class="pl-c1">1</span>) <span class="pl-k">+</span> x
<span class="pl-c1">6</span><span class="pl-k">-</span>element Array{InfExtendedTime{Date},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2012</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">02</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2013</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">02</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">2013</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">03</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(∞)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-c1">1987</span><span class="pl-k">-</span><span class="pl-c1">01</span><span class="pl-k">-</span><span class="pl-c1">02</span>)
 <span class="pl-c1">InfExtendedTime</span><span class="pl-c1">{Date}</span>(<span class="pl-k">-</span>∞)</pre></div>
</article></div>