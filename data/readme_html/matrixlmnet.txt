<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-matrixlmnet" class="anchor" aria-hidden="true" href="#matrixlmnet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MatrixLMnet</h1>
<p><a href="https://travis-ci.com/senresearch/MatrixLMnet.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5614a58ed6220044462ce6b1f64968c0b72aee3e6a5d0dbb9bcd59657207b475/68747470733a2f2f7472617669732d63692e636f6d2f73656e72657365617263682f4d61747269784c4d6e65742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/senresearch/MatrixLMnet.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Core functions to obtain L<sub>1</sub>-penalized estimates for matrix linear models. See the associated paper, <a href="https://arxiv.org/abs/1712.05767" rel="nofollow">"Sparse matrix linear models for structured high-throughput data"</a>, and its <a href="https://github.com/senresearch/mlm_l1_supplement">reproducible code</a> for more details.</p>
<p><code>MatrixLMnet</code> is related to the <a href="https://github.com/senresearch/MatrixLM.jl"><code>MatrixLM</code></a> package, which provides core functions for closed-form least squares estimates for matrix linear models.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The <code>MatrixLMnet</code> package can be installed by running:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;MatrixLMnet&quot;)
"><pre><code>using Pkg
Pkg.add("MatrixLMnet")
</code></pre></div>
<p>For the most recent version, use:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url = &quot;https://github.com/senresearch/MatrixLMnet.jl&quot;, rev=&quot;master&quot;)
"><pre><code>using Pkg
Pkg.add(url = "https://github.com/senresearch/MatrixLMnet.jl", rev="master")
</code></pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using MatrixLMnet
"><pre><code>using MatrixLMnet
</code></pre></div>
<p>First, construct a <code>RawData</code> object consisting of the response variable <code>Y</code> and row/column covariates <code>X</code> and <code>Z</code>. All three matrices must be passed in as 2-dimensional arrays. Note that the <code>contr</code> function can be used to set up treatment and/or sum contrasts for categorical variables stored in a DataFrame. By default, <code>contr</code> generates treatment contrasts for all specified categorical variables (<code>"treat"</code>). Other options include <code>"sum"</code> for sum contrasts, <code>"noint"</code> for treatment contrasts with no intercept, and <code>"sumnoint"</code> for sum contrasts with no intercept.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using DataFrames
using Random

# Dimensions of matrices 
n = 100
m = 250
# Number of column covariates
q = 20

# Randomly generate an X matrix of row covariates with 2 categorical variables
# and 4 continuous variables
Random.seed!(1)
X_df = hcat(DataFrame(catvar1=rand(1:5, n), catvar2=rand([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;], n)), 
            DataFrame(rand(n,4)))
# Use the contr function to get contrasts for the two categorical variables 
# (treatment contrasts for catvar1 and sum contrasts for catvar2).
# contr returns a DataFrame, so X needs to be converted into a 2d array.
X = convert(Array{Float64,2}, contr(X_df, [:catvar1, :catvar2], 
                                    [&quot;treat&quot;, &quot;sum&quot;]))
# Number of row covariates
p = size(X)[2]

# Randomly generate some data for column covariates Z and response variable Y
Z = rand(m,q)
B = rand(vcat(-5:5, zeros(19)),p,q)
E = randn(n,m)
Y = X*B*transpose(Z)+E

# Construct a RawData object
dat = RawData(Response(Y), Predictors(X, Z))
"><pre><code>using DataFrames
using Random

# Dimensions of matrices 
n = 100
m = 250
# Number of column covariates
q = 20

# Randomly generate an X matrix of row covariates with 2 categorical variables
# and 4 continuous variables
Random.seed!(1)
X_df = hcat(DataFrame(catvar1=rand(1:5, n), catvar2=rand(["A", "B", "C"], n)), 
            DataFrame(rand(n,4)))
# Use the contr function to get contrasts for the two categorical variables 
# (treatment contrasts for catvar1 and sum contrasts for catvar2).
# contr returns a DataFrame, so X needs to be converted into a 2d array.
X = convert(Array{Float64,2}, contr(X_df, [:catvar1, :catvar2], 
                                    ["treat", "sum"]))
# Number of row covariates
p = size(X)[2]

# Randomly generate some data for column covariates Z and response variable Y
Z = rand(m,q)
B = rand(vcat(-5:5, zeros(19)),p,q)
E = randn(n,m)
Y = X*B*transpose(Z)+E

# Construct a RawData object
dat = RawData(Response(Y), Predictors(X, Z))
</code></pre></div>
<p>Create a 1d array of lambda penalty values to fit the estimates. If the lambdas are not in descending order, they will be automatically sorted by <code>mlmnet</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="lambdas = reverse(1.8.^(1:10))
"><pre><code>lambdas = reverse(1.8.^(1:10))
</code></pre></div>
<p>L<sub>1</sub>-penalized estimates for matrix linear models can be obtained by running <code>mlmnet</code>. In addition to the <code>RawData</code> object and <code>lambdas</code>, <code>mlmnet</code> requires as an argument the function name for an algorithm used to fit L<sub>1</sub>-penalized estimates. Current options are:<code>cd!</code> (coordinate descent), <code>cd_active!</code> (active coordinate descent), <code>ista!</code> (ISTA with fixed step size), <code>fista!</code> (FISTA with fixed step size), <code>fista_bt!</code> (FISTA with backtracking), and <code>admm!</code> (ADMM).</p>
<p>An object of type <code>Mlmnet</code> will be returned, with variables for the penalized coefficient estimates (<code>B</code>) and the lambda penalty values used (<code>lambdas</code>). By default, <code>mlmnet</code> estimates both row and column main effects (X and Z intercepts), but this behavior can be suppressed by setting <code>isXIntercept=false</code> and/or <code>isZntercept=false</code>; the intercepts will be regularized unless <code>isXInterceptReg=false</code> and/or <code>isZInterceptReg=false</code>. Individual <code>X</code> (row) and <code>Z</code> (column) effects can be left unregularized by manually passing in 1d boolean arrays of length <code>p</code> and <code>q</code> to indicate which effects should be regularized (<code>true</code>) or not (<code>false</code>) into <code>isXReg</code> and <code>isZreg</code>. By default, <code>mlmnet</code> standardizes the columns of <code>X</code> and <code>Z</code> to have mean 0 and standard deviation 1 (<code>isStandardize=true</code>). Additional keyword arguments include <code>isVerbose</code>, which controls message printing; <code>thresh</code>, the threshold at which the coefficients are considered to have converged; and <code>maxiter</code>, the maximum number of iterations.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="est = mlmnet(fista_bt!, dat, lambdas)
"><pre><code>est = mlmnet(fista_bt!, dat, lambdas)
</code></pre></div>
<p>The functions for the algorithms used to fit the L<sub>1</sub>-penalized estimates have keyword arguments that can be passed into <code>mlmnet</code> when non-default behavior is desired. Irrelevant keyword arguments will be ignored.</p>
<p><code>cd!</code> (coordinate descent)</p>
<ul>
<li><code>isRandom= true</code>: Bool; whether to use random or cyclic updates</li>
</ul>
<p><code>cd_active!</code> (active coordinate descent)</p>
<ul>
<li><code>isRandom = true</code>: Bool; whether to use random or cyclic updates</li>
</ul>
<p><code>ista!</code> (ISTA with fixed step size)</p>
<ul>
<li><code>stepsize = 0.01</code>: Float64; fixed step size for updates</li>
<li><code>setStepsize = true</code>: Bool; whether the fixed step size should be calculated, overriding <code>stepsize</code></li>
</ul>
<p><code>fista!</code> (FISTA with fixed step size)</p>
<ul>
<li><code>stepsize = 0.01</code>: Float64; fixed step size for updates</li>
<li><code>setStepsize = true</code>: Bool; whether the fixed step size should be calculated, overriding <code>stepsize</code></li>
</ul>
<p><code>fista_bt!</code> (FISTA with backtracking)</p>
<ul>
<li><code>stepsize = 0.01</code>: Float64; initial step size for updates</li>
<li><code>gamma = 0.5</code>: Float64; multiplying factor for step size backtracking/line search</li>
</ul>
<p><code>admm!</code> (ADMM)</p>
<ul>
<li><code>rho = 1.0</code>: Float64; parameter that controls ADMM tuning</li>
<li><code>setRho = true</code>: Float64; whether the ADMM tuning parameter should be calculated, overriding <code>rho</code></li>
<li><code>tau_incr = 2.0</code>: Float64; parameter that controls the factor at which the ADMM tuning parameter increases</li>
<li><code>tau_decr = 2.0</code>: Float64; parameter that controls the factor at which the ADMM tuning parameter decreases</li>
<li><code>mu = 10.0</code>: Float64; parameter that controls the factor at which the primal and dual residuals should be within each other</li>
</ul>
<p>The 3d array of coefficient estimates can be accessed using <code>coef(est)</code>. Predicted values and residuals can be obtained by calling <code>predict</code> and <code>resid</code>. By default, both of these functions use the same data used to fit the model. However, a new <code>Predictors</code> object can be passed into <code>predict</code> as the <code>newPredictors</code> argument and a new <code>RawData</code> object can be passed into <code>resid</code> as the <code>newData</code> argument. For convenience, <code>fitted(est)</code> will return the fitted values by calling <code>predict</code> with the default arguments.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="preds = predict(est)
resids = resid(est)
"><pre><code>preds = predict(est)
resids = resid(est)
</code></pre></div>
<p>All four of these functions take an optional <code>lambda</code> argument, in which case only the 2d array corresponding to that value of lambda will be returned, e.g. <code>coef(est, lambdas[1])</code>. (If a lambda value that was not used in the fitting of the <code>Mlmnet</code> object is passed in, an error will be rasied.) One can also extract coefficients as a flattened 2d array by calling <code>coef_2d(est)</code>, for convenience when writing the results to flat files.</p>
<p><code>mlmnet_perms</code> permutes the response matrix <code>Y</code> in a <code>RawData</code> object and then calls <code>mlmnet</code>. By default, the function used to permute <code>Y</code> is <code>shuffle_rows</code>, which shuffles the rows for <code>Y</code>. Alternative functions for permuting <code>Y</code>, such as <code>shuffle_cols</code>, can be passed into the argument <code>permFun</code>. Non-default behavior for <code>mlmnet</code> can be specified by passing its keyword arguments into <code>mlmnet_perms</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="estPerms = mlmnet_perms(fista_bt!, dat, lambdas)
"><pre><code>estPerms = mlmnet_perms(fista_bt!, dat, lambdas)
</code></pre></div>
<p>Cross-validation for <code>mlmnet</code> is implemented by <code>mlmnet_cv</code>. The user can either manually specify the row/column folds of <code>Y</code> as a 1d array of 1d arrays of row/column indices, or specify the number of folds that should be used. If the number of folds is specified, disjoint folds of approximately equal size will be generated from a call to <code>make_folds</code>. Passing in <code>1</code> for the number of row (or column) folds indicates that all of the rows (or columns) of <code>Y</code> should be used in each fold. The advantage of manually passing in the row and/or column folds is that it allows the user to stratify or otherwise control the nature of the folds. For example, <code>make_folds_conds</code> will generate folds for a set of categorical conditions and ensure that each condition is represented in each fold. Cross validation is computed in parallel when possible. Non-default behavior for <code>mlmnet</code> can be specified by passing its keyword arguments into <code>mlmnet_cv</code>.</p>
<p>In the call below, <code>mlmnet_cv</code> generates 10 disjoint row folds but uses all columns of <code>Y</code> in each fold (indicated by the <code>1</code>). The function returns an <code>Mlmnet_cv</code> object, which contains an array of the Mlmnet objects for each fold (<code>MLMNets</code>); the lambda penalty values used (<code>lambdas</code>); the row and column folds (<code>rowFolds</code> and <code>colFolds</code>); an array of the mean-squared error for each fold (<code>mse</code>); and an array of the proportion of zero interaction effects for each fold (<code>propZero</code>). The keyword argument <code>dig</code> in <code>mlmnet_cv</code> adjusts the level of precision when calculating the percent of zero coefficients. It defaults to <code>12</code>.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Random.seed!(120)
estCVObjs = mlmnet_cv(fista_bt!, dat, lambdas, 10, 1)
"><pre><code>Random.seed!(120)
estCVObjs = mlmnet_cv(fista_bt!, dat, lambdas, 10, 1)
</code></pre></div>
<p><code>mlmnet_cv_summary</code> displays a table of the average mean-squared error and proportion of zero coefficients across the folds for each value of lambda. The optimal lambda might be the one that minimizes the mean-squared error (MSE), or can be chosen based on a pre-determined proportion of zeros that is desired in the coefficient estimates.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="println(mlmnet_cv_summary(estCVObjs))
"><pre><code>println(mlmnet_cv_summary(estCVObjs))
</code></pre></div>
<p>The <code>lambda_min</code> function returns the summary information for the lambdas that correspond to the minimum average test MSE across folds and the MSE that is one standard error greater.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="lambda_min(estCVObjs)
"><pre><code>lambda_min(estCVObjs)
</code></pre></div>
<p>Additional details can be found in the documentation for specific functions.</p>
</article></div>