<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/kzahedi/Shannon.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7334292417b3cd3748780f6fbac2f5c9e46f8702/68747470733a2f2f7472617669732d63692e6f72672f6b7a61686564692f5368616e6e6f6e2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/kzahedi/Shannon.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h1><a id="user-content-shannonjl" class="anchor" aria-hidden="true" href="#shannonjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Shannon.jl</h1>
<p>A collection of quantifications related to Shannon's information theory and methods to discretise data.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<pre><code>using Shannon
xy = hcat([sin(x) + randn() * .1 for x=0:0.01:2pi], [cos(x) + randn() * .1 for x=0:0.01:2pi])
bxy = bin_matrix(xy, -1.0, 1.0, 10)
c=combine_binned_matrix(bxy)
c=relabel(c)
H = entropy(c)
I = MI(bxy)
</code></pre>
<p>A faster way is to call</p>
<pre><code>unary_of_matrix(xy, -1.0, 1.0, 10)
</code></pre>
<p>which is a short cut for the lines below</p>
<pre><code>bxy = bin_matrix(xy, -1.0, 1.0, 10)
c=combine_binned_matrix(bxy)
c=relabel(c)
</code></pre>
<h2><a id="user-content-entropy-estimators" class="anchor" aria-hidden="true" href="#entropy-estimators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Entropy estimators</h2>
<p>The estimators are implemented from the following list of publications:</p>
<p>[1] A. Chao and T.-J. Shen. Nonparametric estimation of shannon’s index of diversity when there are unseen species in sample. Environmental and Ecological Statistics, 10(4):429–443, 2003.</p>
<p>and the function call is</p>
<pre><code>entropy(data, base=2, mode="ML")
</code></pre>
<p>where</p>
<table>
<tbody><tr> <td> **data** </td> <td> is the discrete data (*Vector{Int64}*)</td></tr>
<tr> <td valign="top"> **mode** </td> <td> determines which estimator should be used (see below). It is *not* case-sensitive </td> </tr>
<tr> <td> **base** </td>  <td> determines the base of the logarithm </td> </tr>
 </tbody></table>
<p>###Maximum Likelihood Estimator
This is the default estimator.</p>
<pre><code>entropy(data)
entropy(data, mode="ML")
entropy(data, mode="Maximum Likelihood")
</code></pre>
<p>###Maximum Likelihood Estimator with Bias Correction (implemented from [1])</p>
<pre><code>entropy(data, mode="MLBC")
entropy(data, mode="Maximum Likelihood with Bias Compensation")
</code></pre>
<p>###Horovitz-Thompson Estimator (implemented from [1])</p>
<pre><code>entropy(data, mode="HT")
entropy(data, mode="Horovitz-Thompson")
</code></pre>
<p>###Chao-Shen Estimator (implemented from [1])</p>
<pre><code>entropy(data, mode="CS")
entropy(data, mode="Chao-Shen")
entropy(data, mode="ChaoShen")
</code></pre>
<h4><a id="user-content-setting-the-base" class="anchor" aria-hidden="true" href="#setting-the-base"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setting the base</h4>
<pre><code>entropy(data, base=2) [ this is the default ]
entropy(data, mode="HT", base=10)
</code></pre>
<h2><a id="user-content-mutual-information-estimators" class="anchor" aria-hidden="true" href="#mutual-information-estimators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutual Information estimators</h2>
<p>Currently, only the <em>maximum likelihood estimator</em> is implemented. It can be used with different bases:</p>
<pre><code>MI(xy, base=2) [ this is the default ]
MI(xy, base=10)
</code></pre>
<p><strong>xy</strong> is a two-dimensional matrix with <strong>n</strong> rows and two columns.</p>
<h2><a id="user-content-predictive-information" class="anchor" aria-hidden="true" href="#predictive-information"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Predictive Information</h2>
<p>This in an implementation of the one-step predictive information, which is given by the mutual information of consecutive data points. If x is the data vector, then:</p>
<pre><code>PI(x) = MI(hcat(x[1:end-1], x[2:end]))
PI(x,[base],[mode]) = MI(x[1:end-1], x[2:end], base, mode)
</code></pre>
<h2><a id="user-content-kullback-leibler-divergence" class="anchor" aria-hidden="true" href="#kullback-leibler-divergence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Kullback-Leibler Divergence</h2>
<p>This function calculates the KL-Divergence on two probability distributions, and is essentially given by:</p>
<pre><code>KL(p,q)=  sum([(p[i] != 0 &amp;&amp; q[i] != 0)? p[i] * log(base, p[i]/q[i]) : 0 for i=1:length(p)])
</code></pre>
<p><strong>p</strong>,<strong>q</strong> must be valid probability distributions, i.e.</p>
<pre><code>x &gt;= 0 for x in p
y &gt;= 0 for y in q
sum(p) == sum(q) == 1.0
</code></pre>
<h2><a id="user-content-quantifying-morphological-computation" class="anchor" aria-hidden="true" href="#quantifying-morphological-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quantifying Morphological Computation</h2>
<p>Implementation of measures from</p>
<p>Quantifying Morphological Computation, Zahedi &amp; Ay, Entropy, 2013: [<a href="http://www.mdpi.com/1099-4300/15/5/1887" rel="nofollow">pdf</a>]</p>
<p>and</p>
<p>Quantifying Morphological Computation based on an Information Decomposition of the Sensorimotor Loop, Ghazi-Zahedi &amp; Rauh, ECAL 2015: [<a href="https://mitpress.mit.edu/sites/default/files/titles/content/ecal2015/ch017.html" rel="nofollow">pdf</a>]</p>
</article></div>