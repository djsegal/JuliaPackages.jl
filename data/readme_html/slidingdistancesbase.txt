<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-slidingdistancesbase" class="anchor" aria-hidden="true" href="#slidingdistancesbase"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>SlidingDistancesBase</h1>
<p><a href="https://github.com/baggepinnen/SlidingDistancesBase.jl/actions"><img src="https://github.com/baggepinnen/SlidingDistancesBase.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/SlidingDistancesBase.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3abcbe54c6d4fe062ff761be3a39cd24f723395885a2c49d6b408629d16050bd/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f536c6964696e6744697374616e636573426173652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/baggepinnen/SlidingDistancesBase.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>This package defines some common functionality used to calculate a distance between windows sliding over vectors.</p>
<ul>
<li><code>distance_profile(dist, query, timeseries)</code></li>
<li><code>distance_profile!(D, dist, query, timeseries)</code></li>
<li><code>ZEuclidean &lt;: Distances.Metric</code> a Z-normalized Euclidean distance</li>
<li><code>ZNormalizer</code> makes an array behave like each window into it is Z-normalized</li>
<li><code>DiagonalZNormalizer</code> same as above, but for matrices and with a diagonal covariance matrix.</li>
<li><code>NormNormalizer</code> makes an array behave like each window into it has unit norm</li>
<li><code>SqNormNormalizer</code> same as above, but normalizes with the norm squared</li>
<li><code>sliding_mean!</code></li>
<li><code>sliding_mean_std</code></li>
<li><code>sliding_entropy / sliding_entropy_normalized</code></li>
</ul>
<p>This package is used by</p>
<ul>
<li><a href="https://github.com/baggepinnen/DynamicAxisWarping.jl">DynamicAxisWarping.jl</a></li>
<li><a href="https://github.com/baggepinnen/MatrixProfile.jl">MatrixProfile.jl</a></li>
<li><a href="https://github.com/baggepinnen/SpectralDistances.jl">SpectralDistances.jl</a></li>
</ul>
<p>And makes heavy use of</p>
<ul>
<li><a href="https://github.com/chriselrod/LoopVectorization.jl">LoopVectorization.jl</a></li>
</ul>
</article></div>