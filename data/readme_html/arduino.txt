<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-this-was-a-fork-of-a-repository-which-no-longer-exists-archived" class="anchor" aria-hidden="true" href="#this-was-a-fork-of-a-repository-which-no-longer-exists-archived"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>This was a fork of a repository which no longer exists. Archived.</h1>
<p>At the moment, this is a set of basic functions to communicate with the Arduino
(<a href="http://www.arduino.cc" rel="nofollow">http://www.arduino.cc</a>). It should probably cover 98% of use cases. It uses the
MIT licensed Arduino-serial library, made by Tod E. Kurt,
(<a href="https://github.com/todbot/arduino-serial">https://github.com/todbot/arduino-serial</a>) and the
GetC macro of Jasper den Ouden (<a href="https://github.com/o-jasper">https://github.com/o-jasper</a>).</p>
<p>#Installation</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Arduino<span class="pl-pds">"</span></span>)</pre></div>
<p>#Usage</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Arduino

fd <span class="pl-k">=</span> <span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>/dev/tty.usbserial<span class="pl-pds">"</span></span>,<span class="pl-c1">9600</span>) <span class="pl-c"><span class="pl-c">#</span> open usb port with 9600 baud rate and get back FD to communicate with Arduino on</span>

<span class="pl-c1">writebyte</span>(fd,<span class="pl-c1">uint8</span>(<span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> send a byte to the Arduino</span>

<span class="pl-c1">write</span>(fd,<span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> send a string to the Arduino</span>

buf <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Char, <span class="pl-c1">256</span>)
<span class="pl-c1">read_until</span>(fd, buf, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>, , ) <span class="pl-c"><span class="pl-c">#</span> read Arduino data into buf until a newline char is reached</span>

<span class="pl-c1">flush</span>(fd) <span class="pl-c"><span class="pl-c">#</span> clear all contents of the receiving buffer</span></pre></div>
<p>#Credit</p>
<p>Thanks to the Julia team (<a href="http://julialang.org" rel="nofollow">http://julialang.org</a>) for making Julia, a programming
language that many have been longing for, whether they knew about it or not.
The "Octave-for-C-programmers," as I like to think of it, is an incredibly fast
and powerful programming language that is a welcome breath of fresh air in the
technical and numerical programming communities.</p>
<p>--rennis250</p>
</article></div>