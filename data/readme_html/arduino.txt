<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-this-was-a-fork-of-a-repository-which-no-longer-exists-archived" class="anchor" aria-hidden="true" href="#this-was-a-fork-of-a-repository-which-no-longer-exists-archived"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>This was a fork of a repository which no longer exists. Archived.</h1>
<p>At the moment, this is a set of basic functions to communicate with the Arduino
(<a href="http://www.arduino.cc" rel="nofollow">http://www.arduino.cc</a>). It should probably cover 98% of use cases. It uses the
MIT licensed Arduino-serial library, made by Tod E. Kurt,
(<a href="https://github.com/todbot/arduino-serial">https://github.com/todbot/arduino-serial</a>) and the
GetC macro of Jasper den Ouden (<a href="https://github.com/o-jasper">https://github.com/o-jasper</a>).</p>
<p>#Installation</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Arduino&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Arduino<span class="pl-pds">"</span></span>)</pre></div>
<p>#Usage</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Arduino

fd = init(&quot;/dev/tty.usbserial&quot;,9600) # open usb port with 9600 baud rate and get back FD to communicate with Arduino on

writebyte(fd,uint8(1)) # send a byte to the Arduino

write(fd,&quot;string&quot;) # send a string to the Arduino

buf = Array(Char, 256)
read_until(fd, buf, '\n', , ) # read Arduino data into buf until a newline char is reached

flush(fd) # clear all contents of the receiving buffer
"><pre><span class="pl-k">using</span> Arduino

fd <span class="pl-k">=</span> <span class="pl-c1">init</span>(<span class="pl-s"><span class="pl-pds">"</span>/dev/tty.usbserial<span class="pl-pds">"</span></span>,<span class="pl-c1">9600</span>) <span class="pl-c"><span class="pl-c">#</span> open usb port with 9600 baud rate and get back FD to communicate with Arduino on</span>

<span class="pl-c1">writebyte</span>(fd,<span class="pl-c1">uint8</span>(<span class="pl-c1">1</span>)) <span class="pl-c"><span class="pl-c">#</span> send a byte to the Arduino</span>

<span class="pl-c1">write</span>(fd,<span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> send a string to the Arduino</span>

buf <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Char, <span class="pl-c1">256</span>)
<span class="pl-c1">read_until</span>(fd, buf, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-cce">\n</span><span class="pl-pds">'</span></span>, , ) <span class="pl-c"><span class="pl-c">#</span> read Arduino data into buf until a newline char is reached</span>

<span class="pl-c1">flush</span>(fd) <span class="pl-c"><span class="pl-c">#</span> clear all contents of the receiving buffer</span></pre></div>
<p>#Credit</p>
<p>Thanks to the Julia team (<a href="http://julialang.org" rel="nofollow">http://julialang.org</a>) for making Julia, a programming
language that many have been longing for, whether they knew about it or not.
The "Octave-for-C-programmers," as I like to think of it, is an incredibly fast
and powerful programming language that is a welcome breath of fresh air in the
technical and numerical programming communities.</p>
<p>--rennis250</p>
</article></div>