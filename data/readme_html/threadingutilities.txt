<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-threadingutilities" class="anchor" aria-hidden="true" href="#threadingutilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreadingUtilities</h1>
<p dir="auto"><a href="https://JuliaSIMD.github.io/ThreadingUtilities.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaSIMD.github.io/ThreadingUtilities.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/ThreadingUtilities.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaSIMD/ThreadingUtilities.jl/workflows/CI/badge.svg" alt="Continuous Integration" style="max-width: 100%;"></a>
<a href="https://github.com/JuliaSIMD/ThreadingUtilities.jl/actions?query=workflow%3A%22CI+%28Julia+nightly%29%22"><img src="https://github.com/JuliaSIMD/ThreadingUtilities.jl/workflows/CI%20(Julia%20nightly)/badge.svg" alt="Continuous Integration (Julia nightly)" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/JuliaSIMD/ThreadingUtilities.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/67167651a035fffad0b51b0b59664ecfeb6ccdfd02cba8fb42e062bf1affc51e/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153494d442f546872656164696e675574696c69746965732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaSIMD/ThreadingUtilities.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Utilities for low overhead threading in Julia.</p>
<p dir="auto">Please see the <a href="https://JuliaSIMD.github.io/ThreadingUtilities.jl/stable" rel="nofollow">documentation</a>.</p>
<p dir="auto">If you're using Windows, please note that Windows often allocates memory when neither Mac or Linux do. I do not know why. If you can help diagnose/fix the problem, please take a look at <code>count_allocated()</code> in <code>/test/staticarrays.jl</code>.</p>
<p dir="auto">If you are trying to mix code relying on <code>ThreadingUtitlies.jl</code> (e.g. <code>LoopVectorization.jl</code>'s threaded code, <code>Polyester.jl</code>, or <code>Octavian.jl</code>) with other threaded code, you can use <code>ThreadingUtilities.sleep_all_tasks()</code> to put <code>ThreadingUtilities</code>'s tasks to sleep before switching from <code>ThreadingUtilities</code> to the other threaded code. Manually putting <code>ThreadingUtilities</code>'s tasks to sleep in this way should stop them from interfearing.</p>
</article></div>