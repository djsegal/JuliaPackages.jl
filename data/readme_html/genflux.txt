<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-genfluxjl" class="anchor" aria-hidden="true" href="#genfluxjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GenFlux.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/probcomp/GenFlux.jl/actions/workflows/CI.yml/badge.svg"><img src="https://github.com/probcomp/GenFlux.jl/actions/workflows/CI.yml/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://probcomp.github.io/GenFlux.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Link to Documentation" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>GenFlux.jl</code> is Gen DSL which implements <a href="https://www.gen.dev/dev/ref/gfi/#Generative-function-interface-1" rel="nofollow">the generative function interface</a> to allow the usage of <a href="https://github.com/FluxML/Flux.jl">Flux.jl models</a> as Gen generative functions.</p>
<hr>
<p dir="auto">(<a href="https://github.com/femtomc/GenFlux.jl/blob/master/examples/mnist.jl">full example available here</a>)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="g = @genflux Chain(Conv((5, 5), 1 =&gt; 10; init = glorot_uniform64),
                   MaxPool((2, 2)),
                   x -&gt; relu.(x),
                   Conv((5, 5), 10 =&gt; 20; init = glorot_uniform64),
                   x -&gt; relu.(x),
                   MaxPool((2, 2)),
                   x -&gt; flatten(x),
                   Dense(320, 50; initW = glorot_uniform64),
                   Dense(50, 10; initW = glorot_uniform64),
                   softmax)"><pre>g <span class="pl-k">=</span> <span class="pl-c1">@genflux</span> <span class="pl-c1">Chain</span>(<span class="pl-c1">Conv</span>((<span class="pl-c1">5</span>, <span class="pl-c1">5</span>), <span class="pl-c1">1</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">10</span>; init <span class="pl-k">=</span> glorot_uniform64),
                   <span class="pl-c1">MaxPool</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)),
                   x <span class="pl-k">-&gt;</span> <span class="pl-c1">relu</span>.(x),
                   <span class="pl-c1">Conv</span>((<span class="pl-c1">5</span>, <span class="pl-c1">5</span>), <span class="pl-c1">10</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">20</span>; init <span class="pl-k">=</span> glorot_uniform64),
                   x <span class="pl-k">-&gt;</span> <span class="pl-c1">relu</span>.(x),
                   <span class="pl-c1">MaxPool</span>((<span class="pl-c1">2</span>, <span class="pl-c1">2</span>)),
                   x <span class="pl-k">-&gt;</span> <span class="pl-c1">flatten</span>(x),
                   <span class="pl-c1">Dense</span>(<span class="pl-c1">320</span>, <span class="pl-c1">50</span>; initW <span class="pl-k">=</span> glorot_uniform64),
                   <span class="pl-c1">Dense</span>(<span class="pl-c1">50</span>, <span class="pl-c1">10</span>; initW <span class="pl-k">=</span> glorot_uniform64),
                   softmax)</pre></div>
<p dir="auto">Now you can use <code>g</code> as a modelling component in your probabilistic programs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@gen function f(xs::Vector{Float64})
    probs ~ g(xs)
    [{:y =&gt; i} ~ categorical(p |&gt; collect) for (i, p) in enumerate(eachcol(probs))]
end"><pre><span class="pl-c1">@gen</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(xs<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>)
    probs <span class="pl-k">~</span> <span class="pl-c1">g</span>(xs)
    [{<span class="pl-c1">:y</span> <span class="pl-k">=&gt;</span> i} <span class="pl-k">~</span> <span class="pl-c1">categorical</span>(p <span class="pl-k">|&gt;</span> collect) <span class="pl-k">for</span> (i, p) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(<span class="pl-c1">eachcol</span>(probs))]
<span class="pl-k">end</span></pre></div>
<p dir="auto">Allowing you to train the parameters of <code>g</code> via gradient descent <a href="https://www.gen.dev/dev/ref/gfi/#Gen.accumulate_param_gradients!" rel="nofollow">on the objective</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="update = ParamUpdate(Flux.ADAM(5e-5, (0.9, 0.999)), g)
for i = 1 : 1500
    # Create trace from data
    (xs, ys) = next_batch(loader, 100)
    constraints = choicemap([(:y =&gt; i) =&gt; y for (i, y) in enumerate(ys)]...)
    (trace, weight) = generate(f, (xs,), constraints)

    # Increment gradient accumulators
    accumulate_param_gradients!(trace)

    # Perform ADAM update and then resets gradient accumulators
    apply!(update)
    println(&quot;i: $i, weight: $weight&quot;)
end"><pre>update <span class="pl-k">=</span> <span class="pl-c1">ParamUpdate</span>(Flux<span class="pl-k">.</span><span class="pl-c1">ADAM</span>(<span class="pl-c1">5e-5</span>, (<span class="pl-c1">0.9</span>, <span class="pl-c1">0.999</span>)), g)
<span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> <span class="pl-c1">1500</span>
    <span class="pl-c"><span class="pl-c">#</span> Create trace from data</span>
    (xs, ys) <span class="pl-k">=</span> <span class="pl-c1">next_batch</span>(loader, <span class="pl-c1">100</span>)
    constraints <span class="pl-k">=</span> <span class="pl-c1">choicemap</span>([(<span class="pl-c1">:y</span> <span class="pl-k">=&gt;</span> i) <span class="pl-k">=&gt;</span> y <span class="pl-k">for</span> (i, y) <span class="pl-k">in</span> <span class="pl-c1">enumerate</span>(ys)]<span class="pl-k">.</span><span class="pl-k">..</span>)
    (trace, weight) <span class="pl-k">=</span> <span class="pl-c1">generate</span>(f, (xs,), constraints)

    <span class="pl-c"><span class="pl-c">#</span> Increment gradient accumulators</span>
    <span class="pl-c1">accumulate_param_gradients!</span>(trace)

    <span class="pl-c"><span class="pl-c">#</span> Perform ADAM update and then resets gradient accumulators</span>
    <span class="pl-c1">apply!</span>(update)
    <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>i: <span class="pl-v">$i</span>, weight: <span class="pl-v">$weight</span><span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="test_accuracy = mean(f(test_x) .== test_y)
println(&quot;Test set accuracy: $test_accuracy&quot;)
# Test set accuracy: 0.9392"><pre>test_accuracy <span class="pl-k">=</span> <span class="pl-c1">mean</span>(<span class="pl-c1">f</span>(test_x) <span class="pl-k">.==</span> test_y)
<span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Test set accuracy: <span class="pl-v">$test_accuracy</span><span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span> Test set accuracy: 0.9392</span></pre></div>
</article></div>