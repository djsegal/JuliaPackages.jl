<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-juliavariables" class="anchor" aria-hidden="true" href="#juliavariables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaVariables</h1>
<p dir="auto"><a href="https://JuliaStaging.github.io/JuliaVariables.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://JuliaStaging.github.io/JuliaVariables.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://travis-ci.com/thautwarm/JuliaVariables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/36456ea1e5b863ba9ead63a4c0565c94ad31dd906664c95ef63645b6d088a9b9/68747470733a2f2f7472617669732d63692e636f6d2f4a756c696153746167696e672f4a756c69615661726961626c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/JuliaStaging/JuliaVariables.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/thautwarm/JuliaVariables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4e00d57fbab4eeacf2d4da02668283610eba02055706a42f7637e57940d9f6bf/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696153746167696e672f4a756c69615661726961626c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/JuliaStaging/JuliaVariables.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>About</h1>
<p dir="auto">The <code>solve</code> function will solve the scopes of a <strong>simplified</strong> Julia expression.</p>
<ul dir="auto">
<li>The variables(<code>Symbol</code>) are transformed to <code>Var</code>:
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Var
    name       :: Symbol
    is_mutable :: Bool
    is_shared  :: Bool
    is_global  :: Bool
end"><pre><span class="pl-k">struct</span> Var
    name       <span class="pl-k">::</span> <span class="pl-c1">Symbol</span>
    is_mutable <span class="pl-k">::</span> <span class="pl-c1">Bool</span>
    is_shared  <span class="pl-k">::</span> <span class="pl-c1">Bool</span>
    is_global  <span class="pl-k">::</span> <span class="pl-c1">Bool</span>
<span class="pl-k">end</span></pre></div>
</li>
<li>Some expressions will be wrapped within <code>Expr(:scoped, (bounds=..., freevars=..., bound_inits=...), inner_expression)</code>.</li>
</ul>
<h1 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h1>
<h2 dir="auto"><a id="user-content-solve--solve_from_local" class="anchor" aria-hidden="true" href="#solve--solve_from_local"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>solve</code> &amp; <code>solve_from_local</code></h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using MLStyle

julia&gt; unwrap_scoped(ex) =
           @match ex begin
               Expr(:scoped, _, a) =&gt; unwrap_scoped(a)
               Expr(head, args...) =&gt; Expr(head, map(unwrap_scoped, args)...)
               a =&gt; a
           end
unwrap_scoped (generic function with 1 method)

julia&gt; quote
           x = 1
           function (a)
               x = 1
           end
       end |&gt;  solve_from_local |&gt; rmlines |&gt; unwrap_scoped
quote
    mut @shared x = 1
    function (a,)
        mut @shared x = 1
    end
end


julia&gt; quote
           x = 1
           function ()
               x = 1
           end
       end |&gt;  solve |&gt; rmlines
:($(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), quote
    @global x = 1
    function ()
        $(Expr(:scoped, (bounds = Var[@local x], freevars = Var[], bound_inits = Symbol[]), quote
    @local x = 1
end))
    end
end)))


julia&gt; quote
           x = 1
           function ()
               x = 1
           end
       end |&gt;  solve_from_local |&gt; rmlines
:($(Expr(:scoped, (bounds = Var[mut @shared x], freevars = Var[], bound_inits = Symbol[]), quote
    mut @shared x = 1
    function ()
        $(Expr(:scoped, (bounds = Var[], freevars = Var[mut @shared x], bound_inits = Symbol[]), quote
    mut @shared x = 1
end))
    end
end)))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MLStyle

julia<span class="pl-k">&gt;</span> <span class="pl-en">unwrap_scoped</span>(ex) <span class="pl-k">=</span>
           <span class="pl-c1">@match</span> ex <span class="pl-k">begin</span>
               <span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, _, a) <span class="pl-k">=&gt;</span> <span class="pl-c1">unwrap_scoped</span>(a)
               <span class="pl-c1">Expr</span>(head, args<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">Expr</span>(head, <span class="pl-c1">map</span>(unwrap_scoped, args)<span class="pl-k">...</span>)
               a <span class="pl-k">=&gt;</span> a
           <span class="pl-k">end</span>
unwrap_scoped (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">function</span> (a)
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span>  solve_from_local <span class="pl-k">|&gt;</span> rmlines <span class="pl-k">|&gt;</span> unwrap_scoped
<span class="pl-k">quote</span>
    mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">function</span> (a,)
        mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>


julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">function</span> ()
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span>  solve <span class="pl-k">|&gt;</span> rmlines
:(<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[], freevars <span class="pl-k">=</span> Var[], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    <span class="pl-c1">@global</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">function</span> ()
        <span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[<span class="pl-c1">@local</span> x], freevars <span class="pl-k">=</span> Var[], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    <span class="pl-c1">@local</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>)))


julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">function</span> ()
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span>  solve_from_local <span class="pl-k">|&gt;</span> rmlines
:(<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[mut <span class="pl-c1">@shared</span> x], freevars <span class="pl-k">=</span> Var[], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">function</span> ()
        <span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[], freevars <span class="pl-k">=</span> Var[mut <span class="pl-c1">@shared</span> x], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>)))</pre></div>
<h2 dir="auto"><a id="user-content-simplify_ex" class="anchor" aria-hidden="true" href="#simplify_ex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>simplify_ex</code></h2>
<p dir="auto">Not all expressions can be accepted as the input of <code>solve</code> or <code>solve_from_local</code>, thus we provide such a
handy API to apply conversions from almost arbitrary
expressions to the <em>simplified</em> expressions.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; quote
          function f(x)
               for i in I, j in J
                   let x = 1, y
                       () -&gt; 2
                   end
               end
               f(x) = 2
          end
       end |&gt; rmlines |&gt; simplify_ex
quote
    function f(x)
        for i = I
            for j = J
                let x = 1
                    let y
                        function ()
                            2
                        end
                    end
                end
            end
        end
        function f(x)
            2
        end
    end
end"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
          <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
               <span class="pl-k">for</span> i <span class="pl-k">in</span> I, j <span class="pl-k">in</span> J
                   <span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y
                       () <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>
                   <span class="pl-k">end</span>
               <span class="pl-k">end</span>
               <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">2</span>
          <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span> rmlines <span class="pl-k">|&gt;</span> simplify_ex
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
        <span class="pl-k">for</span> i <span class="pl-k">=</span> I
            <span class="pl-k">for</span> j <span class="pl-k">=</span> J
                <span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
                    <span class="pl-k">let</span> y
                        <span class="pl-k">function</span> ()
                            <span class="pl-c1">2</span>
                        <span class="pl-k">end</span>
                    <span class="pl-k">end</span>
                <span class="pl-k">end</span>
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
        <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
            <span class="pl-c1">2</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">The reason why we don't couple this API with <code>solve</code> is, we need to let user aware that there exists destructive operations for expressing the scope information, for instance, it's impossible to inject
scope information to <code>for i in I, j in J; body end</code>, because
the AST shape of it is</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Expr(:for,
    Expr(:block,
        :(i = I),
        :(j = J),
    ),
    Expr(:block, body)
)"><pre><span class="pl-c1">Expr</span>(<span class="pl-c1">:for</span>,
    <span class="pl-c1">Expr</span>(<span class="pl-c1">:block</span>,
        :(i <span class="pl-k">=</span> I),
        :(j <span class="pl-k">=</span> J),
    ),
    <span class="pl-c1">Expr</span>(<span class="pl-c1">:block</span>, body)
)</pre></div>
<p dir="auto"><code>Expr(:block, body)</code> is actually in the sub-scope of
that of <code>:(j = J)</code>, and <code>:(j=J)</code>'s scope in inherited from that of <code>:(i=I)</code>, which ruins the handy use(especially the top-down tree visiting) of scoped expressions.</p>
<p dir="auto">Not only due to the uselessness of scoping the messy ASTs like <code>for i in I, j in J; body end</code>, the analyses for them are also much more ugly to implement than those of the <em>simplified</em> expressions. Finally, I give up doing this.</p>
<p dir="auto">If you have understood the above concerns and made
sure it's safe to return a restructured expression after injecting scope information, you can compose
<code>simplify_ex</code> and <code>solve</code> to gain a more handy API:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="mysolve! = solve! ∘ simplify_ex
mysolve_from_local! = solve_from_local! ∘ simplify_ex"><pre>mysolve! <span class="pl-k">=</span> solve! <span class="pl-k">∘</span> simplify_ex
mysolve_from_local! <span class="pl-k">=</span> solve_from_local! <span class="pl-k">∘</span> simplify_ex</pre></div>
</article></div>