<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-juliavariables" class="anchor" aria-hidden="true" href="#juliavariables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JuliaVariables</h1>
<p><a href="https://thautwarm.github.io/JuliaVariables.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://thautwarm.github.io/JuliaVariables.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/thautwarm/JuliaVariables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a96a0c35660675dfcdb640ac7fa4c164d1784004/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f4a756c69615661726961626c65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/thautwarm/JuliaVariables.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/thautwarm/JuliaVariables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/914a4cd3269892bde1c1756e7e18ac494d30f033/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f4a756c69615661726961626c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/thautwarm/JuliaVariables.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-about" class="anchor" aria-hidden="true" href="#about"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>About</h1>
<p>The <code>solve</code> function will solve the scopes of a <strong>simplified</strong> Julia expression.</p>
<ul>
<li>The variables(<code>Symbol</code>) are transformed to <code>Var</code>:
<div class="highlight highlight-source-julia"><pre><span class="pl-k">struct</span> Var
    name       <span class="pl-k">::</span> <span class="pl-c1">Symbol</span>
    is_mutable <span class="pl-k">::</span> <span class="pl-c1">Bool</span>
    is_shared  <span class="pl-k">::</span> <span class="pl-c1">Bool</span>
    is_global  <span class="pl-k">::</span> <span class="pl-c1">Bool</span>
<span class="pl-k">end</span></pre></div>
</li>
<li>Some expressions will be wrapped within <code>Expr(:scoped, (bounds=..., freevars=..., bound_inits=...), inner_expression)</code>.</li>
</ul>
<h1><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h1>
<h2><a id="user-content-solve--solve_from_local" class="anchor" aria-hidden="true" href="#solve--solve_from_local"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>solve</code> &amp; <code>solve_from_local</code></h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MLStyle

julia<span class="pl-k">&gt;</span> <span class="pl-en">unwrap_scoped</span>(ex) <span class="pl-k">=</span>
           <span class="pl-c1">@match</span> ex <span class="pl-k">begin</span>
               <span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, _, a) <span class="pl-k">=&gt;</span> <span class="pl-c1">unwrap_scoped</span>(a)
               <span class="pl-c1">Expr</span>(head, args<span class="pl-k">...</span>) <span class="pl-k">=&gt;</span> <span class="pl-c1">Expr</span>(head, <span class="pl-c1">map</span>(unwrap_scoped, args)<span class="pl-k">...</span>)
               a <span class="pl-k">=&gt;</span> a
           <span class="pl-k">end</span>
unwrap_scoped (generic <span class="pl-k">function</span> with <span class="pl-c1">1</span> method)

julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">function</span> (a)
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span>  solve_from_local <span class="pl-k">|&gt;</span> rmlines <span class="pl-k">|&gt;</span> unwrap_scoped
<span class="pl-k">quote</span>
    mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">function</span> (a,)
        mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>


julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">function</span> ()
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span>  solve <span class="pl-k">|&gt;</span> rmlines
:(<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[], freevars <span class="pl-k">=</span> Var[], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    <span class="pl-c1">@global</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">function</span> ()
        <span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[<span class="pl-c1">@local</span> x], freevars <span class="pl-k">=</span> Var[], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    <span class="pl-c1">@local</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>)))


julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
           x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">function</span> ()
               x <span class="pl-k">=</span> <span class="pl-c1">1</span>
           <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span>  solve_from_local <span class="pl-k">|&gt;</span> rmlines
:(<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[mut <span class="pl-c1">@shared</span> x], freevars <span class="pl-k">=</span> Var[], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">function</span> ()
        <span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:scoped</span>, (bounds <span class="pl-k">=</span> Var[], freevars <span class="pl-k">=</span> Var[mut <span class="pl-c1">@shared</span> x], bound_inits <span class="pl-k">=</span> Symbol[]), <span class="pl-k">quote</span>
    mut <span class="pl-c1">@shared</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
<span class="pl-k">end</span>))
    <span class="pl-k">end</span>
<span class="pl-k">end</span>)))</pre></div>
<h2><a id="user-content-simplify_ex" class="anchor" aria-hidden="true" href="#simplify_ex"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>simplify_ex</code></h2>
<p>Not all expressions can be accepted as the input of <code>solve</code> or <code>solve_from_local</code>, thus we provide such a
handy API to apply conversions from almost arbitrary
expressions to the <em>simplified</em> expressions.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">quote</span>
          <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
               <span class="pl-k">for</span> i <span class="pl-k">in</span> I, j <span class="pl-k">in</span> J
                   <span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>, y
                       () <span class="pl-k">-&gt;</span> <span class="pl-c1">2</span>
                   <span class="pl-k">end</span>
               <span class="pl-k">end</span>
               <span class="pl-en">f</span>(x) <span class="pl-k">=</span> <span class="pl-c1">2</span>
          <span class="pl-k">end</span>
       <span class="pl-k">end</span> <span class="pl-k">|&gt;</span> rmlines <span class="pl-k">|&gt;</span> simplify_ex
<span class="pl-k">quote</span>
    <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
        <span class="pl-k">for</span> i <span class="pl-k">=</span> I
            <span class="pl-k">for</span> j <span class="pl-k">=</span> J
                <span class="pl-k">let</span> x <span class="pl-k">=</span> <span class="pl-c1">1</span>
                    <span class="pl-k">let</span> y
                        <span class="pl-k">function</span> ()
                            <span class="pl-c1">2</span>
                        <span class="pl-k">end</span>
                    <span class="pl-k">end</span>
                <span class="pl-k">end</span>
            <span class="pl-k">end</span>
        <span class="pl-k">end</span>
        <span class="pl-k">function</span> <span class="pl-en">f</span>(x)
            <span class="pl-c1">2</span>
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>The reason why we don't couple this API with <code>solve</code> is, we need to let user aware that there exists destructive operations for expressing the scope information, for instance, it's impossible to inject
scope information to <code>for i in I, j in J; body end</code>, because
the AST shape of it is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Expr</span>(<span class="pl-c1">:for</span>,
    <span class="pl-c1">Expr</span>(<span class="pl-c1">:block</span>,
        :(i <span class="pl-k">=</span> I),
        :(j <span class="pl-k">=</span> J),
    ),
    <span class="pl-c1">Expr</span>(<span class="pl-c1">:block</span>, body)
)</pre></div>
<p><code>Expr(:block, body)</code> is actually in the sub-scope of
that of <code>:(j = J)</code>, and <code>:(j=J)</code>'s scope in inherited from that of <code>:(i=I)</code>, which ruins the handy use(especially the top-down tree visiting) of scoped expressions.</p>
<p>Not only due to the uselessness of scoping the messy ASTs like <code>for i in I, j in J; body end</code>, the analyses for them are also much more ugly to implement than those of the <em>simplified</em> expressions. Finally, I give up doing this.</p>
<p>If you have understand the above concerns and made
sure it's safe to return a restructured expression after injecting scope information, you can compose
<code>simplify_ex</code> and <code>solve</code> to gain a more handy API:</p>
<div class="highlight highlight-source-julia"><pre>mysolve <span class="pl-k">=</span> solve <span class="pl-k">∘</span> simplify_ex
mysolve_from_local <span class="pl-k">=</span> solve_from_local <span class="pl-k">∘</span> simplify_ex</pre></div>
</article></div>