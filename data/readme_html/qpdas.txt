<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qpdas" class="anchor" aria-hidden="true" href="#qpdas"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QPDAS</h1>
<p dir="auto">Quadratic Programming Dual Active Set solver using iterative refinement.</p>
<p dir="auto"><a href="https://travis-ci.com/mfalt/QPDAS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9db644d19f78d1d79452bbe7ce901cedb1e854aeae1a064baeb5c8b92bd1c779/68747470733a2f2f7472617669732d63692e636f6d2f6d66616c742f51504441532e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/mfalt/QPDAS.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/mfalt/QPDAS.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/85908958f3808855715a504212c4b930578106ad758ca1d9e9d71803d96f271e/68747470733a2f2f636f6465636f762e696f2f67682f6d66616c742f51504441532e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/mfalt/QPDAS.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">The solver is written completely in Julia, and should be able to handle types of any precision.</p>
<p dir="auto">The algorithm is based on a paper that is submitted to the Control and Decision Conference 2019.</p>
<p dir="auto">Solves the mixed constraint <em><strong>positive-definite</strong></em> quadratic programming problem</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="min 1/2 xᵀPx + zᵀx
s.t Ax=b,
    Cx≤d"><pre class="notranslate"><code>min 1/2 xᵀPx + zᵀx
s.t Ax=b,
    Cx≤d
</code></pre></div>
<p dir="auto">using a dual-active set method. Since the algorithm is solving the dual, it is very efficient when the number of inequalities is small.</p>
<p dir="auto">At the moment, it is not possible to manually warm-start the problem.</p>
<p dir="auto">Usage:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="qp = QuadraticProgram(A, b, C, d, z=zeros(..), P=I; semidefinite=true, ϵ = sqrt(eps(T)), smartstart=true)
sol, val = solve!(qp)"><pre>qp <span class="pl-k">=</span> <span class="pl-c1">QuadraticProgram</span>(A, b, C, d, z<span class="pl-k">=</span><span class="pl-c1">zeros</span>(<span class="pl-k">..</span>), P<span class="pl-k">=</span>I; semidefinite<span class="pl-k">=</span><span class="pl-c1">true</span>, ϵ <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">eps</span>(T)), smartstart<span class="pl-k">=</span><span class="pl-c1">true</span>)
sol, val <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(qp)</pre></div>
<p dir="auto">Keyword arguments:</p>
<ul dir="auto">
<li><code>semidefinite</code>: Refers to the dual problem. If <code>true</code> then iterative refinement is used to solve the linear systems in the dual. Must be <code>true</code> if the constraints of the primal are not linearly independent.</li>
<li><code>ϵ</code>: The relaxation used for iterative refinement</li>
<li><code>smartstart</code>: if <code>true</code> then the initial active set is guessed from the linear term in the dual. If <code>false</code>, then the initial active set is empty in the dual.</li>
</ul>
<h3 dir="auto"><a id="user-content-updating" class="anchor" aria-hidden="true" href="#updating"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Updating</h3>
<p dir="auto">The vectors <code>b,d,z</code> can be updated without re-factorizing the problem using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="update!(QP::QuadraticProgram; b=QP.b, d=QP.d, z=QP.z)"><pre><span class="pl-c1">update!</span>(QP<span class="pl-k">::</span><span class="pl-c1">QuadraticProgram</span>; b<span class="pl-k">=</span>QP<span class="pl-k">.</span>b, d<span class="pl-k">=</span>QP<span class="pl-k">.</span>d, z<span class="pl-k">=</span>QP<span class="pl-k">.</span>z)</pre></div>
<p dir="auto">The next solve will use the previous solution as an initial guess.</p>
<h3 dir="auto"><a id="user-content-dual-problem" class="anchor" aria-hidden="true" href="#dual-problem"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Dual problem</h3>
<p dir="auto">It is also possible to directly formulate and solve the dual box-constrained problem</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="min 1/2 xᵀGx + cᵀx,
s.t dᵢ ≤ xᵢ ∀ i&gt;n-m
where m=size(d,1), n=size(c,1)."><pre class="notranslate"><code>min 1/2 xᵀGx + cᵀx,
s.t dᵢ ≤ xᵢ ∀ i&gt;n-m
where m=size(d,1), n=size(c,1).
</code></pre></div>
<p dir="auto">At the moment, only <code>d .== 0</code> is supported.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="boxQP = BoxConstrainedQP(G, c, d; semidefinite=true, ϵ = sqrt(eps(T)))
run_smartstart(boxQP) # Run to set initial active ste guess
sol = solve!(boxQP)"><pre>boxQP <span class="pl-k">=</span> <span class="pl-c1">BoxConstrainedQP</span>(G, c, d; semidefinite<span class="pl-k">=</span><span class="pl-c1">true</span>, ϵ <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">eps</span>(T)))
<span class="pl-c1">run_smartstart</span>(boxQP) <span class="pl-c"><span class="pl-c">#</span> Run to set initial active ste guess</span>
sol <span class="pl-k">=</span> <span class="pl-c1">solve!</span>(boxQP)</pre></div>
<p dir="auto">The vector <code>c</code> can be efficiently updated using</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="boxQP.c = c"><pre>boxQP<span class="pl-k">.</span>c <span class="pl-k">=</span> c</pre></div>
<h3 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h3>
<p dir="auto">A MPC example in reduced form is located in <code>examples/mpc.jl</code>, and an example of projection onto a polytope at <code>examples/polytope_projection.jl</code>.</p>
</article></div>