<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/rveltz/LSODA.jl/actions/workflows/CI.yml"><img src="https://github.com/rveltz/LSODA.jl/actions/workflows/CI.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/rveltz/LSODA.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/24aa0a2823939fe2ab02a90cd97998db943649f3e37da469bf223541e2e7f333/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7276656c747a2f4c534f44412e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/rveltz/LSODA.jl/badge.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://rveltz.github.io/LSODA.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://rveltz.github.io/LSODA.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-lsodajl" class="anchor" aria-hidden="true" href="#lsodajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LSODA.jl</h1>
<h2 dir="auto"><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Introduction</h2>
<p dir="auto"><strong>LSODA.jl</strong> is a Julia package that interfaces to the <a href="https://github.com/sdwfrost/liblsoda">liblsoda</a> library, developed by <a href="http://www.vet.cam.ac.uk/directory/sdf22@cam.ac.uk" rel="nofollow">Simon Frost</a> (<a href="http://github.com/sdwfrost">@sdwfrost</a>), thereby providing a way to use the LSODA algorithm from Linda Petzold and Alan Hindmarsh from <a href="http://julialang.org/" rel="nofollow">Julia</a>. <strong><a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a></strong> has been used to write the library and <strong><a href="https://github.com/JuliaDiffEq/Sundials.jl">Sundials.jl</a></strong> was a inspiring source.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">To install this package, run the command <code>add LSODA</code>.</p>
<h2 dir="auto"><a id="user-content-simplified-functions" class="anchor" aria-hidden="true" href="#simplified-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Simplified Functions</h2>
<p dir="auto">To solve an ODE, one can call the simplified solver:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function rhs!(t, x, ydot, data)
	ydot[1]=1.0E4 * x[2] * x[3] - .04E0 * x[1]
	ydot[3]=3.0E7 * x[2] * x[2]
	ydot[2]=-ydot[1] - ydot[3]
  nothing
end

y0 = [1.,0.,0.]
tspan = [0., 0.4]
res =  lsoda(rhs!, y0, tspan, reltol= 1e-4, abstol = Vector([1.e-6,1.e-10,1.e-6]))"><pre><span class="pl-k">function</span> <span class="pl-en">rhs!</span>(t, x, ydot, data)
	ydot[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1.0E4</span> <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">3</span>] <span class="pl-k">-</span> .<span class="pl-c1">04E0</span> <span class="pl-k">*</span> x[<span class="pl-c1">1</span>]
	ydot[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">3.0E7</span> <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>]
	ydot[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>ydot[<span class="pl-c1">1</span>] <span class="pl-k">-</span> ydot[<span class="pl-c1">3</span>]
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

y0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>,<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>]
tspan <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">0.4</span>]
res <span class="pl-k">=</span>  <span class="pl-c1">lsoda</span>(rhs!, y0, tspan, reltol<span class="pl-k">=</span> <span class="pl-c1">1e-4</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">Vector</span>([<span class="pl-c1">1.e-6</span>,<span class="pl-c1">1.e-10</span>,<span class="pl-c1">1.e-6</span>]))</pre></div>
<p dir="auto">To reproduce the test example from liblsoda, on can use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="lsoda_0(rhs!, y0, tspan, reltol= 1e-4, abstol = Vector([1.e-6,1.e-10,1.e-6]))"><pre><span class="pl-c1">lsoda_0</span>(rhs!, y0, tspan, reltol<span class="pl-k">=</span> <span class="pl-c1">1e-4</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">Vector</span>([<span class="pl-c1">1.e-6</span>,<span class="pl-c1">1.e-10</span>,<span class="pl-c1">1.e-6</span>]))</pre></div>
<p dir="auto">This should give the following.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="at t =   4.0000e-01 y=   9.851712e-01   3.386380e-05   1.479493e-02
at t =   4.0000e+00 y=   9.055333e-01   2.240655e-05   9.444430e-02
at t =   4.0000e+01 y=   7.158403e-01   9.186334e-06   2.841505e-01
at t =   4.0000e+02 y=   4.505250e-01   3.222964e-06   5.494717e-01
at t =   4.0000e+03 y=   1.831976e-01   8.941774e-07   8.168016e-01
at t =   4.0000e+04 y=   3.898729e-02   1.621940e-07   9.610125e-01
at t =   4.0000e+05 y=   4.936362e-03   1.984221e-08   9.950636e-01
at t =   4.0000e+06 y=   5.161832e-04   2.065786e-09   9.994838e-01
at t =   4.0000e+07 y=   5.179811e-05   2.072030e-10   9.999482e-01
at t =   4.0000e+08 y=   5.283524e-06   2.113420e-11   9.999947e-01
at t =   4.0000e+09 y=   4.658945e-07   1.863579e-12   9.999995e-01
at t =   4.0000e+10 y=   1.423392e-08   5.693574e-14   1.000000e+00"><pre class="notranslate"><code>at t =   4.0000e-01 y=   9.851712e-01   3.386380e-05   1.479493e-02
at t =   4.0000e+00 y=   9.055333e-01   2.240655e-05   9.444430e-02
at t =   4.0000e+01 y=   7.158403e-01   9.186334e-06   2.841505e-01
at t =   4.0000e+02 y=   4.505250e-01   3.222964e-06   5.494717e-01
at t =   4.0000e+03 y=   1.831976e-01   8.941774e-07   8.168016e-01
at t =   4.0000e+04 y=   3.898729e-02   1.621940e-07   9.610125e-01
at t =   4.0000e+05 y=   4.936362e-03   1.984221e-08   9.950636e-01
at t =   4.0000e+06 y=   5.161832e-04   2.065786e-09   9.994838e-01
at t =   4.0000e+07 y=   5.179811e-05   2.072030e-10   9.999482e-01
at t =   4.0000e+08 y=   5.283524e-06   2.113420e-11   9.999947e-01
at t =   4.0000e+09 y=   4.658945e-07   1.863579e-12   9.999995e-01
at t =   4.0000e+10 y=   1.423392e-08   5.693574e-14   1.000000e+00
</code></pre></div>
<h2 dir="auto"><a id="user-content-juliadiffeq-common-interface" class="anchor" aria-hidden="true" href="#juliadiffeq-common-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>JuliaDiffEq Common Interface</h2>
<p dir="auto">The functionality of LSODA.jl can be accessed through the JuliaDiffEq common interface. To do this, you build a problem object for like:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LSODA, DiffEqBase
function rhs!(du, u, p, t)
    du[1]=1.0E4 * u[2] * u[3] - .04E0 * u[1]
    du[3]=3.0E7 * u[2] * u[2]
    du[2]=-du[1] - du[3]
  nothing
end

y0 = [1.,0.,0.]
tspan = (0., 0.4)
prob = ODEProblem(rhs!,y0,tspan)"><pre><span class="pl-k">using</span> LSODA, DiffEqBase
<span class="pl-k">function</span> <span class="pl-en">rhs!</span>(du, u, p, t)
    du[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1.0E4</span> <span class="pl-k">*</span> u[<span class="pl-c1">2</span>] <span class="pl-k">*</span> u[<span class="pl-c1">3</span>] <span class="pl-k">-</span> .<span class="pl-c1">04E0</span> <span class="pl-k">*</span> u[<span class="pl-c1">1</span>]
    du[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">3.0E7</span> <span class="pl-k">*</span> u[<span class="pl-c1">2</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]
    du[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>du[<span class="pl-c1">1</span>] <span class="pl-k">-</span> du[<span class="pl-c1">3</span>]
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

y0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>,<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.</span>, <span class="pl-c1">0.4</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rhs!,y0,tspan)</pre></div>
<p dir="auto">This problem is solved by LSODA by using the lsoda() algorithm in the common <code>solve</code> command as follows:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sol = solve(prob,lsoda())"><pre>sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">lsoda</span>())</pre></div>
<p dir="auto">Many keyword arguments can be used to control the solver, its tolerances, and its output formats. For more information, please see the <a href="https://juliadiffeq.github.io/DiffEqDocs.jl/latest/" rel="nofollow">DifferentialEquations.jl documentation</a>.</p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">If using the algorithm through the DifferentialEquations.jl common interface,
please cite:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@article{rackauckas2017differentialequations,
  title={Differentialequations. jl--a performant and feature-rich ecosystem for solving differential equations in julia},
  author={Rackauckas, Christopher and Nie, Qing},
  journal={Journal of Open Research Software},
  volume={5},
  number={1},
  year={2017},
  publisher={Ubiquity Press}
}"><pre class="notranslate"><code>@article{rackauckas2017differentialequations,
  title={Differentialequations. jl--a performant and feature-rich ecosystem for solving differential equations in julia},
  author={Rackauckas, Christopher and Nie, Qing},
  journal={Journal of Open Research Software},
  volume={5},
  number={1},
  year={2017},
  publisher={Ubiquity Press}
}
</code></pre></div>
<p dir="auto">For the original algorithm, please cite:</p>
<ul dir="auto">
<li>
<p dir="auto">Alan Hindmarsh, ODEPACK, a Systematized Collection of ODE Solvers,
in Scientific Computing, edited by Robert Stepleman, Elsevier, 1983,
ISBN13: 978-0444866073, LC: Q172.S35.</p>
</li>
<li>
<p dir="auto">K Radhakrishnan, Alan Hindmarsh, Description and Use of LSODE, the Livermore
Solver for Ordinary Differential Equations, Technical report UCRL-ID-113855,
Lawrence Livermore National Laboratory, December 1993.</p>
</li>
<li>
<p dir="auto">Linda Petzold, Automatic Selection of Methods for Solving Stiff and Nonstiff
Systems of  Ordinary Differential Equations, SIAM J. Sci. and Stat. Comput.,
4(1), 136–148.</p>
</li>
</ul>
</article></div>