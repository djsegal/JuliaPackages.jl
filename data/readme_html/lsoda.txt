<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><p><a href="https://travis-ci.org/rveltz/LSODA.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9378d937445e161a9b539b361668c23cd33431c1/68747470733a2f2f7472617669732d63692e6f72672f7276656c747a2f4c534f44412e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/rveltz/LSODA.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/rveltz/LSODA.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/f94264b867ccad7a76fc6aa6bfa9a28ba09e90f3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7276656c747a2f4c534f44412e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/rveltz/LSODA.jl/badge.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/rveltz/lsoda-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/be68e2e174ce3aec1462cdbf1e8821f88e74653f/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f703837397161636873346335327934752f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/p879qachs4c52y4u/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://rveltz.github.io/LSODA.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://rveltz.github.io/LSODA.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<h1><a id="user-content-lsodajl" class="anchor" aria-hidden="true" href="#lsodajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LSODA.jl</h1>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p><strong>LSODA.jl</strong> is a Julia package that interfaces to the <a href="https://github.com/sdwfrost/liblsoda">liblsoda</a> library, developed by <a href="http://www.vet.cam.ac.uk/directory/sdf22@cam.ac.uk" rel="nofollow">Simon Frost</a> (<a href="http://github.com/sdwfrost">@sdwfrost</a>), thereby providing a way to use the LSODA algorithm from Linda Petzold and Alan Hindmarsh from <a href="http://julialang.org/" rel="nofollow">Julia</a>. <strong><a href="https://github.com/ihnorton/Clang.jl">Clang.jl</a></strong> has been used to write the library and <strong><a href="https://github.com/JuliaDiffEq/Sundials.jl">Sundials.jl</a></strong> was a inspiring source.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>To install this package, run the command <code>add LSODA</code>.</p>
<h2><a id="user-content-simplified-functions" class="anchor" aria-hidden="true" href="#simplified-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Simplified Functions</h2>
<p>To solve an ODE, one can call the simplified solver:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">rhs!</span>(t, x, ydot, data)
	ydot[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1.0E4</span> <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">3</span>] <span class="pl-k">-</span> <span class="pl-c1">.04E0</span> <span class="pl-k">*</span> x[<span class="pl-c1">1</span>]
	ydot[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">3.0E7</span> <span class="pl-k">*</span> x[<span class="pl-c1">2</span>] <span class="pl-k">*</span> x[<span class="pl-c1">2</span>]
	ydot[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>ydot[<span class="pl-c1">1</span>] <span class="pl-k">-</span> ydot[<span class="pl-c1">3</span>]
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

y0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>,<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>]
tspan <span class="pl-k">=</span> [<span class="pl-c1">0.</span>, <span class="pl-c1">0.4</span>]
res <span class="pl-k">=</span>  <span class="pl-c1">lsoda</span>(rhs!, y0, tspan, reltol<span class="pl-k">=</span> <span class="pl-c1">1e-4</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">Vector</span>([<span class="pl-c1">1.e-6</span>,<span class="pl-c1">1.e-10</span>,<span class="pl-c1">1.e-6</span>]))</pre></div>
<p>To reproduce the test example from liblsoda, on can use:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">lsoda_0</span>(rhs!, y0, tspan, reltol<span class="pl-k">=</span> <span class="pl-c1">1e-4</span>, abstol <span class="pl-k">=</span> <span class="pl-c1">Vector</span>([<span class="pl-c1">1.e-6</span>,<span class="pl-c1">1.e-10</span>,<span class="pl-c1">1.e-6</span>]))</pre></div>
<p>This should give the following.</p>
<pre><code>at t =   4.0000e-01 y=   9.851712e-01   3.386380e-05   1.479493e-02
at t =   4.0000e+00 y=   9.055333e-01   2.240655e-05   9.444430e-02
at t =   4.0000e+01 y=   7.158403e-01   9.186334e-06   2.841505e-01
at t =   4.0000e+02 y=   4.505250e-01   3.222964e-06   5.494717e-01
at t =   4.0000e+03 y=   1.831976e-01   8.941774e-07   8.168016e-01
at t =   4.0000e+04 y=   3.898729e-02   1.621940e-07   9.610125e-01
at t =   4.0000e+05 y=   4.936362e-03   1.984221e-08   9.950636e-01
at t =   4.0000e+06 y=   5.161832e-04   2.065786e-09   9.994838e-01
at t =   4.0000e+07 y=   5.179811e-05   2.072030e-10   9.999482e-01
at t =   4.0000e+08 y=   5.283524e-06   2.113420e-11   9.999947e-01
at t =   4.0000e+09 y=   4.658945e-07   1.863579e-12   9.999995e-01
at t =   4.0000e+10 y=   1.423392e-08   5.693574e-14   1.000000e+00
</code></pre>
<h2><a id="user-content-juliadiffeq-common-interface" class="anchor" aria-hidden="true" href="#juliadiffeq-common-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JuliaDiffEq Common Interface</h2>
<p>The functionality of LSODA.jl can be accessed through the JuliaDiffEq common interface. To do this, you build a problem object for like:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> LSODA, DiffEqBase
<span class="pl-k">function</span> <span class="pl-en">rhs!</span>(du, u, p, t)
    du[<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">1.0E4</span> <span class="pl-k">*</span> u[<span class="pl-c1">2</span>] <span class="pl-k">*</span> u[<span class="pl-c1">3</span>] <span class="pl-k">-</span> <span class="pl-c1">.04E0</span> <span class="pl-k">*</span> u[<span class="pl-c1">1</span>]
    du[<span class="pl-c1">3</span>]<span class="pl-k">=</span><span class="pl-c1">3.0E7</span> <span class="pl-k">*</span> u[<span class="pl-c1">2</span>] <span class="pl-k">*</span> u[<span class="pl-c1">2</span>]
    du[<span class="pl-c1">2</span>]<span class="pl-k">=</span><span class="pl-k">-</span>du[<span class="pl-c1">1</span>] <span class="pl-k">-</span> du[<span class="pl-c1">3</span>]
  <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>

y0 <span class="pl-k">=</span> [<span class="pl-c1">1.</span>,<span class="pl-c1">0.</span>,<span class="pl-c1">0.</span>]
tspan <span class="pl-k">=</span> (<span class="pl-c1">0.</span>, <span class="pl-c1">0.4</span>)
prob <span class="pl-k">=</span> <span class="pl-c1">ODEProblem</span>(rhs!,y0,tspan)</pre></div>
<p>This problem is solved by LSODA by using the lsoda() algorithm in the common <code>solve</code> command as follows:</p>
<div class="highlight highlight-source-julia"><pre>sol <span class="pl-k">=</span> <span class="pl-c1">solve</span>(prob,<span class="pl-c1">lsoda</span>())</pre></div>
<p>Many keyword arguments can be used to control the solver, its tolerances, and its output formats. For more information, please see the <a href="https://juliadiffeq.github.io/DiffEqDocs.jl/latest/" rel="nofollow">DifferentialEquations.jl documentation</a>.</p>
</article></div>