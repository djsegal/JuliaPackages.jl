<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-constantarraysjl" class="anchor" aria-hidden="true" href="#constantarraysjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ConstantArrays.jl</h1>
<p><a href="https://travis-ci.org/JeffFessler/ConstantArrays.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/da700b06ce719d2eaf212b4002294478d7cd90b347f5c8dfd086f20bec810a32/68747470733a2f2f7472617669732d63692e6f72672f4a656666466573736c65722f436f6e7374616e744172726179732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JeffFessler/ConstantArrays.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/github/JeffFessler/ConstantArrays.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/7c5c3c1035fe6852c99964b1729ae41e4369d219fe07036fa8c6d74f2663f150/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a656666466573736c65722f436f6e7374616e744172726179732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov.io" data-canonical-src="https://codecov.io/github/JeffFessler/ConstantArrays.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>

<p><a href="https://github.com/JeffFessler/ConstantArrays.jl">https://github.com/JeffFessler/ConstantArrays.jl</a></p>
<p>A Julia data type that is a subtype of <code>AbstractArray</code>
where every element is the same constant.</p>
<p>The "constant" in the name has two meaning:
every element of the array has the same constant value,
and the array is immutable
(<code>setindex!</code> is unsupported).</p>
<h1><a id="user-content-caution-this-package-no-longer-maintained" class="anchor" aria-hidden="true" href="#caution-this-package-no-longer-maintained"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caution: This Package No Longer Maintained!</h1>
<p>This package is now a subset of the existing
<a href="https://github.com/JuliaArrays/FillArrays.jl">FillArrays.jl</a>
package
(that I did not know about when I wrote it).
My original version had a extra couple features
but I contributed those to <code>FillArrays</code>.
So now I will no longer maintain this package
and I strongly recommend you use <code>FillArrays</code> instead.</p>
<h3><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h3>
<p>At the Julia REPL run:
<code>using Pkg; Pkg.add("ConstantArrays")</code>.</p>
<h3><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Documentation</h3>
<p>At the Julia REPL execute:
<code>using ConstantArrays</code>,
then type <code>?ConstantArray</code> and press enter to get help.</p>
<p>Primary usage example:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="x = ConstantArray(42, (5,7))
"><pre><code>x = ConstantArray(42, (5,7))
</code></pre></div>
<p>makes a "lazy" constant "array"
functionally equivalent to <code>fill(42, (5,7))</code>
but essentially requires only
the memory need to store a struct
with the value <code>42</code> and the dimensions <code>(5,7)</code>.</p>
<p>The motivating use of this type
is for the "masks" used in tomographic image reconstruction
that are often uniform
but also often patient conforming.
The default one-argument usage
<code>mask = ConstantArray((4,6))</code> uses <code>true</code> (i.e., <code>one(Bool)</code>)
as the constant value
for this purpose.</p>
<p>The idea here is somewhat analogous
to the <code>UniformScaling</code> type (<code>I</code>)
in the <code>LinearAlgebra</code> package.
Arguably that <code>I</code> is non-essential
because one could accomplish something similar
using <code>Diagonal(ones(N))</code>
but <code>I</code> requires much less memory.
Likewise,
arguably <code>ConstantArray</code> is non-essential, but
<code>ConstantArray(true, (100,100,100))</code> uses about a million times
less memory than <code>trues(100,100,100)</code>.</p>
<p>A better analogy might be a sparse array,
where only the nonzero values are stored
to save memory.
A <code>ConstantArray</code> needs only to store only a single value.</p>
<p>The most useful operations are probably
<code>x .* y</code>
and <code>y[x]</code>,
both of which are faster
with a <code>ConstantArray</code>
than with <code>trues(dim)</code>.</p>
<p>Developed by Jeff Fessler at the University of Michigan,
with some inspiration from
<a href="https://github.com/bkamins/ReadOnlyArrays.jl">ReadOnlyArrays.jl</a>.</p>

</article></div>