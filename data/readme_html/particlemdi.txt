<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-particlemdijl" class="anchor" aria-hidden="true" href="#particlemdijl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ParticleMDI.jl</h1>
<p><a href="https://travis-ci.org/nathancunn/ParticleMDI.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e57cd9b9dd2067fde7b5e63b1806f4f9920946c9/68747470733a2f2f7472617669732d63692e6f72672f6e617468616e63756e6e2f5061727469636c654d44492e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/nathancunn/ParticleMDI.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>This package provides an implementation of ParticleMDI, a particle Gibbs version of MDI, allowing for the integrative cluster analysis of multiple datasets. ParticleMDI is built within the framework of <a href="https://academic.oup.com/bioinformatics/article/28/24/3290/244641" rel="nofollow">MDI (multiple data integration)</a>.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>] add ParticleMDI</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The function <code>pmdi()</code> provides the primary functionality for <code>ParticleMDI</code>. It requires the specification of:</p>
<ul>
<li><code>dataFiles::Vector</code> a vector of K data matrices to be analysed</li>
<li><code>dataTypes::Vector</code> a vector of K datatypes. Independent multivariate normals can be
specified with <code>ParticleMDI.GaussianCluster</code>, categorical data with <code>ParticleMDI.CategoricalCluster</code> and negative binomial data with <code>ParticleMDI.NegBinomCluster</code>.</li>
<li><code>N::Int64</code> the maximum number of clusters to fit</li>
<li><code>particles::Int64</code> the number of particles</li>
<li><code>ρ::Float64</code> proportion of allocations assumed known in each MCMC iteration, a value in (0, 1).</li>
<li><code>iter::Int64</code> number of iterations to run</li>
<li><code>outputFile::String</code> specification of a CSV file to store output</li>
<li><code>featureSelect::Union{String, Nothing}</code> defaults to <code>nothing</code>, setting a string value means feature selection will be performed and output will be stored in the CSV file specified.</li>
<li><code>thin::Int</code> an integer, thinning the resulting MCMC samples to every <code>thin</code>th sample.</li>
</ul>
<h2><a id="user-content-output" class="anchor" aria-hidden="true" href="#output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Output</h2>
<p>Outputs a .csv file, each row containing:</p>
<ul>
<li>Mass parameter for datasets <code>1:K</code></li>
<li>Φ value for <code>binomial(K, 2)</code> pairs of datasets</li>
<li>c cluster allocations for observations <code>1:n</code> in datasets <code>1:k</code></li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ParticleMDI
<span class="pl-k">using</span> RDatasets

data <span class="pl-k">=</span> [<span class="pl-c1">Matrix</span>(<span class="pl-c1">dataset</span>(<span class="pl-s"><span class="pl-pds">"</span>datasets<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>iris<span class="pl-pds">"</span></span>)[:, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>])]
<span class="pl-c1">gaussian_normalise!</span>(data[<span class="pl-c1">1</span>])
dataTypes <span class="pl-k">=</span> [ParticleMDI<span class="pl-k">.</span>GaussianCluster]
<span class="pl-c"><span class="pl-c">#</span> Run a simple run first to allow for compilation</span>
<span class="pl-c1">pmdi</span>(data, dataTypes, <span class="pl-c1">10</span>, <span class="pl-c1">2</span>, <span class="pl-c1">0.99</span>, <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>output/file.csv<span class="pl-pds">"</span></span>)
<span class="pl-c1">pmdi</span>(data, dataTypes, <span class="pl-c1">10</span>, <span class="pl-c1">32</span>, <span class="pl-c1">0.25</span>, <span class="pl-c1">1000</span>, <span class="pl-s"><span class="pl-pds">"</span>output/file.csv<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span> View output; first generate a posterior similarity matrix</span>
psm <span class="pl-k">=</span> <span class="pl-c1">generate_psm</span>(<span class="pl-s"><span class="pl-pds">"</span>output/file.csv<span class="pl-pds">"</span></span>, burnin <span class="pl-k">=</span> <span class="pl-c1">500</span>, thin <span class="pl-k">=</span> <span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> Can be plotted as a heatmap</span>
<span class="pl-c1">consensus_map</span>(psm, k <span class="pl-k">=</span> <span class="pl-c1">3</span>)</pre></div>
<h2><a id="user-content-extending-particlemdi-for-user-defined-data-types" class="anchor" aria-hidden="true" href="#extending-particlemdi-for-user-defined-data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extending ParticleMDI for user-defined data types</h2>
<p><code>ParticleMDI</code> includes functionality for clustering Gaussian and categorical data, however this can easily be extended to other data types. Consider a trivial case where we wish to cluster data according to their sign.
The first step is to define a struct containing each cluster. Typically this will contain information on the number of observations in the cluster as well sufficient statistics for calculating the posterior predictive of assigning new observations to this cluster.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> SignCluster
  n<span class="pl-k">::</span><span class="pl-c1">Int64</span>    <span class="pl-c"><span class="pl-c">#</span> No. of observations in cluster</span>
  isneg<span class="pl-k">::</span><span class="pl-c1">Bool</span> <span class="pl-c"><span class="pl-c">#</span> Positive/negative flag</span>
  <span class="pl-en">SignCluster</span>(dataFile) <span class="pl-k">=</span> <span class="pl-c1">new</span>(<span class="pl-c1">0</span>, <span class="pl-c1">false</span>)
<span class="pl-k">end</span></pre></div>
<p>Given this, we then need to define a function which returns the log posterior predictive of an observation belonging to this cluster, given the allocations already assigned to it. In this case, all we need to know is does the cluster contain positive or negative numbers.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> ParticleMDI<span class="pl-k">.</span><span class="pl-en">calc_logprob</span>(obs, cl<span class="pl-k">::</span><span class="pl-c1">SignCluster</span>)
    <span class="pl-k">if</span> cl<span class="pl-k">.</span>n <span class="pl-k">==</span> <span class="pl-c1">0</span>
        <span class="pl-k">return</span> <span class="pl-c1">log</span>(<span class="pl-c1">0.5</span>)
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> ((obs[<span class="pl-c1">1</span>] <span class="pl-k">&lt;=</span> <span class="pl-c1">0</span>) <span class="pl-k">==</span> cl<span class="pl-k">.</span>isneg) ? <span class="pl-c1">0</span> : <span class="pl-k">-</span> <span class="pl-c1">10</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>And finally, a function needs to be specified explaining how to update a cluster when new observations are added to it.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> ParticleMDI<span class="pl-k">.</span><span class="pl-en">cluster_add!</span>(cl<span class="pl-k">::</span><span class="pl-c1">SignCluster</span>, obs)
    cl<span class="pl-k">.</span>n <span class="pl-k">+=</span> <span class="pl-c1">1</span>
    cl<span class="pl-k">.</span>isneg <span class="pl-k">=</span> (obs[<span class="pl-c1">1</span>] <span class="pl-k">&lt;</span> <span class="pl-c1">0</span>)
<span class="pl-k">end</span></pre></div>
<p>Optionally a function which returns the log marginal likelihood of each feature in a cluster. This is used to perform feature selection by comparison between the inferred allocations and the situation where all observations within a feature are assigned to a single cluster. This need not be specified if <code>featureSelect = false</code>, however if you want to do feature selection for <em>any</em> dataType you'll need to have this specified. In such a case, you can specify this to return a large number (<strong>not</strong> <code>Inf</code>) and features should always be selected. The assumption of independence across features underlies this step and so should not be used if this assumption does not hold.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> ParticleMDI<span class="pl-k">.</span><span class="pl-en">calc_logmarginal!</span>(cl<span class="pl-k">::</span><span class="pl-c1">SignCluster</span>)
    <span class="pl-c"><span class="pl-c">#</span> return a vector of log-marginal likelihoods</span>
<span class="pl-k">end</span></pre></div>
<p>This can then be run by specifying <code>SignCluster</code> as a data type in <code>pmdi()</code>.</p>
</article></div>