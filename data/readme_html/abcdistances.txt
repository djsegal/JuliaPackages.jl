<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-abcdistances" class="anchor" aria-hidden="true" href="#abcdistances"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ABCDistances</h1>
<p>This pacakge contains several <a href="https://en.wikipedia.org/wiki/Approximate_Bayesian_computation" rel="nofollow">Approximate Bayesian Computation</a> (ABC) algorithms.</p>
<p>It is created for the paper <a href="http://arxiv.org/abs/1507.00874" rel="nofollow">"Adapting the ABC distance function"</a>
with the aim of comparing various approaches to distance selection.
Code in the <code>examples</code> directory performs the analyses in the paper.</p>
<p>Version 0.0.1 matches the v1 and v2 arXiv submissions and is written for Julia v0.3.
Version 0.1.0 matches the published paper (v3 on arXiv) and is written for Julia v0.4.
Version 0.1.1 updates v0.1.0 for Julia v0.5.
Version 0.2.0 is an update for Julia v0.6.</p>
<p>This document gives a quick usage example then documents the commands.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p>First code for the model and summary statistics of interest must be set up. Here the model is the <a href="http://link.springer.com/article/10.1023%2FA%3A1013120305780?LI=true" rel="nofollow">g-and-k distribution</a> and the summary statistics are order statistics. Code for simulating from this distribution is included in the package.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ABCDistances;
quantiles <span class="pl-k">=</span> [<span class="pl-c1">1250</span><span class="pl-k">*</span>i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span>];
ndataset <span class="pl-k">=</span> <span class="pl-c1">10000</span>;
<span class="pl-c"><span class="pl-c">#</span>#Simulate from the model and return summary statistics</span>
<span class="pl-k">function</span> <span class="pl-en">sample_sumstats</span>(pars<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>)
    success <span class="pl-k">=</span> <span class="pl-c1">true</span>
    stats <span class="pl-k">=</span> <span class="pl-c1">rgk_os</span>(pars, quantiles, ndataset)
    (success, stats)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span>#Generate the observed summary statistics</span>
theta0 <span class="pl-k">=</span> [<span class="pl-c1">3.0</span>,<span class="pl-c1">1.0</span>,<span class="pl-c1">1.5</span>,<span class="pl-c1">0.5</span>];
<span class="pl-c1">srand</span>(<span class="pl-c1">1</span>);
(success, sobs) <span class="pl-k">=</span> <span class="pl-c1">sample_sumstats</span>(theta0)</pre></div>
<p>Next the prior distribution is specified. This is simply 4 independent Uniform(0,10) random variables.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Distributions
<span class="pl-k">import</span> Distributions<span class="pl-k">.</span>length, Distributions<span class="pl-k">.</span>_rand!, Distributions<span class="pl-k">.</span>_pdf <span class="pl-c"><span class="pl-c">#</span>#So that these can be extended</span>

type GKPrior <span class="pl-k">&lt;:</span> <span class="pl-c1">ContinuousMultivariateDistribution</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">length</span>(d<span class="pl-k">::</span><span class="pl-c1">GKPrior</span>)
    <span class="pl-c1">4</span>
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">_rand!</span><span class="pl-c1">{T&lt;:Real}</span>(d<span class="pl-k">::</span><span class="pl-c1">GKPrior</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>)
    x <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(<span class="pl-c1">4</span>)
<span class="pl-k">end</span>

<span class="pl-k">function</span> <span class="pl-en">_pdf</span><span class="pl-c1">{T&lt;:Real}</span>(d<span class="pl-k">::</span><span class="pl-c1">GKPrior</span>, x<span class="pl-k">::</span><span class="pl-c1">AbstractVector{T}</span>)
    <span class="pl-k">if</span> (<span class="pl-c1">all</span>(<span class="pl-c1">0.0</span> <span class="pl-k">.&lt;=</span> x <span class="pl-k">.&lt;=</span> <span class="pl-c1">10.0</span>))
        <span class="pl-k">return</span> <span class="pl-c1">0.0001</span>
    <span class="pl-k">else</span>
        <span class="pl-k">return</span> <span class="pl-c1">0.0</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>Next an <code>ABCInput</code> type is created and populated using the above.
Note <code>abcdist</code> must be a subtype of <code>ABCDistance</code>. Several options are defined in <code>distances.jl</code>.</p>
<div class="highlight highlight-source-julia"><pre>abcinput <span class="pl-k">=</span> <span class="pl-c1">ABCInput</span>();
abcinput<span class="pl-k">.</span>prior <span class="pl-k">=</span> <span class="pl-c1">GKPrior</span>();
abcinput<span class="pl-k">.</span>sample_sumstats <span class="pl-k">=</span> sample_sumstats;
abcinput<span class="pl-k">.</span>abcdist <span class="pl-k">=</span> <span class="pl-c1">WeightedEuclidean</span>(sobs);
abcinput<span class="pl-k">.</span>nsumstats <span class="pl-k">=</span> <span class="pl-c1">7</span>;</pre></div>
<p>Now an ABC algorithm can be run. The following commands run an ABC-rejection algorithm.</p>
<p>The first command (3rd argument is an integer) returns the 200 best fitting simulations from 10000 total.</p>
<p>The second command (3rd argument is floating point) returns any simulations from 10000 total with distance below the threshold specified.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">abcRejection</span>(abcinput, <span class="pl-c1">10000</span>, <span class="pl-c1">200</span>)
<span class="pl-c1">abcRejection</span>(abcinput, <span class="pl-c1">10000</span>, <span class="pl-c1">0.3</span>)</pre></div>
<p>The next command runs an ABC PMC algorithm.
See documentation for details of the arguments.</p>
<div class="highlight highlight-source-julia"><pre>out <span class="pl-k">=</span> <span class="pl-c1">abcPMC3</span>(abcinput, <span class="pl-c1">200</span>, <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">2</span>, <span class="pl-c1">10000</span>);</pre></div>
<p>Marginal estimates of parameter mean and variances can be calculated from ABC PMC output as follows.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">parameter_means</span>(out)
<span class="pl-c1">parameter_vars</span>(out)</pre></div>
</article></div>