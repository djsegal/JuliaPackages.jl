<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cubajl" class="anchor" aria-hidden="true" href="#cubajl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cuba.jl</h1>
<table>
<thead>
<tr>
<th align="center"><strong>Documentation</strong></th>
<th align="center"><strong>Build Status</strong></th>
<th align="center"><strong>Code Coverage</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><a href="https://giordano.github.io/Cuba.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://travis-ci.org/giordano/Cuba.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8185c3883918ab13f4bb29f884f8fd7bdec6adf9/68747470733a2f2f7472617669732d63692e6f72672f67696f7264616e6f2f437562612e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/giordano/Cuba.jl.svg?branch=master" style="max-width:100%;"></a></td>
<td align="center"><a href="https://coveralls.io/github/giordano/Cuba.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b9979dbd4e508b3b4e31d26588c50d80ed27cc0f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f67696f7264616e6f2f437562612e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="" data-canonical-src="https://coveralls.io/repos/github/giordano/Cuba.jl/badge.svg?branch=master" style="max-width:100%;"></a></td>
</tr>
<tr>
<td align="center"><a href="https://giordano.github.io/Cuba.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></td>
<td align="center"><a href="https://ci.appveyor.com/project/giordano/cuba-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bab0ecd73fd3cb34514cfb4f1dc137adfdd8b541/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6976717937327570666a78706c62636e2f6272616e63682f6d61737465723f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/ivqy72upfjxplbcn/branch/master?svg=true" style="max-width:100%;"></a></td>
<td align="center"><a href="https://codecov.io/gh/giordano/Cuba.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6d44d7b906cf67f4fb7cce4488eb7edb62ba3bdc/68747470733a2f2f636f6465636f762e696f2f67682f67696f7264616e6f2f437562612e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="" data-canonical-src="https://codecov.io/gh/giordano/Cuba.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></td>
</tr>
</tbody>
</table>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p><code>Cuba.jl</code> is a library for multidimensional numerical integration with different
algorithms in <a href="http://julialang.org/" rel="nofollow">Julia</a>.</p>
<p>This is just a Julia wrapper around the C
<a href="http://www.feynarts.de/cuba/" rel="nofollow">Cuba library</a>, version 4.2, by <strong>Thomas Hahn</strong>.
All the credits goes to him for the underlying functions, blame me for any
problem with the Julia interface.  Feel free to report bugs and make suggestions
at <a href="https://github.com/giordano/Cuba.jl/issues">https://github.com/giordano/Cuba.jl/issues</a>.</p>
<p>All algorithms provided by Cuba library are supported in <code>Cuba.jl</code>:</p>
<ul>
<li><code>vegas</code> (type: Monte Carlo; variance reduction with importance sampling)</li>
<li><code>suave</code> (type: Monte Carlo; variance reduction with globally adaptive
subdivision + importance sampling)</li>
<li><code>divonne</code> (type: Monte Carlo or deterministic; variance reduction with
stratified sampling, aided by methods from numerical optimization)</li>
<li><code>cuhre</code> (type: deterministic; variance reduction with globally adaptive
subdivision)</li>
</ul>
<p>Integration is performed on the n-dimensional unit hypercube [0, 1]^n.  For more
details on the algorithms see the manual included in Cuba library and available
in <code>deps/usr/share/cuba.pdf</code> after successful installation of <code>Cuba.jl</code>.</p>
<p><code>Cuba.jl</code> is available for GNU/Linux, FreeBSD, Mac OS, and Windows (<code>i686</code> and
<code>x86_64</code> architectures).</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The latest version of <code>Cuba.jl</code> is available for Julia 1.0 and later versions,
and can be installed with <a href="https://julialang.github.io/Pkg.jl/stable/" rel="nofollow">Julia built-in package
manager</a>.  In a Julia session, after
entering the package manager mode with <code>]</code>, run the command</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> update
pkg<span class="pl-k">&gt;</span> add Cuba</pre></div>
<p>By default, on all systems a pre-built version of the Cuba library will be
installed.  On UNIX systems, you can optionally compile Cuba locally by setting
the <code>JULIA_CUBA_BUILD_SOURCE</code> environment variable to <code>"true"</code>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CUBA_BUILD_SOURCE<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>

pkg<span class="pl-k">&gt;</span> build Cuba</pre></div>
<p>Older versions are also available for Julia 0.4-0.7.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>After installing the package, run</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Cuba</pre></div>
<p>or put this command into your Julia script.</p>
<p><code>Cuba.jl</code> provides the following functions to integrate:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">vegas</span>(integrand, ndim, ncomp[; keywords<span class="pl-k">...</span>])
<span class="pl-c1">suave</span>(integrand, ndim, ncomp[; keywords<span class="pl-k">...</span>])
<span class="pl-c1">divonne</span>(integrand, ndim, ncomp[; keywords<span class="pl-k">...</span>])
<span class="pl-c1">cuhre</span>(integrand, ndim, ncomp[; keywords<span class="pl-k">...</span>])</pre></div>
<p>These functions wrap the 64-bit integers functions provided by the Cuba library.</p>
<p>The only mandatory argument is:</p>
<ul>
<li><code>function</code>: the name of the function to be integrated</li>
</ul>
<p>Optional positional arguments are:</p>
<ul>
<li><code>ndim</code>: the number of dimensions of the integration domain.  Defaults to 1 in
<code>vegas</code> and <code>suave</code>, to 2 in <code>divonne</code> and <code>cuhre</code>.  Note: <code>ndim</code> must be
at least 2 with the latest two methods.</li>
<li><code>ncomp</code>: the number of components of the integrand.  Defaults to 1</li>
</ul>
<p><code>ndim</code> and <code>ncomp</code> arguments must appear in this order, so you cannot omit
<code>ndim</code> but not <code>ncomp</code>.  <code>integrand</code> should be a function <code>integrand(x, f)</code>
taking two arguments:</p>
<ul>
<li>the input vector <code>x</code> of length <code>ndim</code></li>
<li>the output vector <code>f</code> of length <code>ncomp</code>, used to set the value of each
component of the integrand at point <code>x</code></li>
</ul>
<p>Also
<a href="https://docs.julialang.org/en/v1/manual/functions/#man-anonymous-functions-1" rel="nofollow">anonymous functions</a>
are allowed as <code>integrand</code>.  For those familiar with
<a href="https://github.com/stevengj/Cubature.jl"><code>Cubature.jl</code></a> package, this is the
same syntax used for integrating vector-valued functions.</p>
<p>For example, the integral</p>
<pre><code>∫_0^1 cos(x) dx = sin(1) = 0.8414709848078965
</code></pre>
<p>can be computed with one of the following commands</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">vegas</span>((x, f) <span class="pl-k">-&gt;</span> f[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">1</span>]))
Component<span class="pl-k">:</span>
 <span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">0.8414910005259609</span> ± <span class="pl-c1">5.2708169787733e-5</span> (prob.: <span class="pl-c1">0.028607201257039333</span>)
Integrand evaluations<span class="pl-k">:</span> <span class="pl-c1">13500</span>
Number of subregions<span class="pl-k">:</span>  <span class="pl-c1">0</span>
Note<span class="pl-k">:</span> The desired accuracy was reached

julia<span class="pl-k">&gt;</span> <span class="pl-c1">suave</span>((x, f) <span class="pl-k">-&gt;</span> f[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">1</span>]))
Component<span class="pl-k">:</span>
 <span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">0.8411523690658836</span> ± <span class="pl-c1">8.357995611133613e-5</span> (prob.: <span class="pl-c1">1.0</span>)
Integrand evaluations<span class="pl-k">:</span> <span class="pl-c1">22000</span>
Number of subregions<span class="pl-k">:</span>  <span class="pl-c1">22</span>
Note<span class="pl-k">:</span> The desired accuracy was reached

julia<span class="pl-k">&gt;</span> <span class="pl-c1">divonne</span>((x, f) <span class="pl-k">-&gt;</span> f[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">1</span>]))
Component<span class="pl-k">:</span>
 <span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">0.841468071955942</span> ± <span class="pl-c1">5.3955070531551656e-5</span> (prob.: <span class="pl-c1">0.0</span>)
Integrand evaluations<span class="pl-k">:</span> <span class="pl-c1">1686</span>
Number of subregions<span class="pl-k">:</span>  <span class="pl-c1">14</span>
Note<span class="pl-k">:</span> The desired accuracy was reached

julia<span class="pl-k">&gt;</span> <span class="pl-c1">cuhre</span>((x, f) <span class="pl-k">-&gt;</span> f[<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">cos</span>(x[<span class="pl-c1">1</span>]))
Component<span class="pl-k">:</span>
 <span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-c1">0.8414709848078966</span> ± <span class="pl-c1">2.2204460420128823e-16</span> (prob.: <span class="pl-c1">3.443539937576958e-5</span>)
Integrand evaluations<span class="pl-k">:</span> <span class="pl-c1">195</span>
Number of subregions<span class="pl-k">:</span>  <span class="pl-c1">2</span>
Note<span class="pl-k">:</span> The desired accuracy was reached</pre></div>
<p>The integrating functions <code>vegas</code>, <code>suave</code>, <code>divonne</code>, and <code>cuhre</code> return an
<code>Integral</code> object whose fields are</p>
<div class="highlight highlight-source-julia"><pre>integral <span class="pl-k">::</span> <span class="pl-c1">Vector{Float64}</span>
error    <span class="pl-k">::</span> <span class="pl-c1">Vector{Float64}</span>
probl    <span class="pl-k">::</span> <span class="pl-c1">Vector{Float64}</span>
neval    <span class="pl-k">::</span> <span class="pl-c1">Int64</span>
fail     <span class="pl-k">::</span> <span class="pl-c1">Int32</span>
nregions <span class="pl-k">::</span> <span class="pl-c1">Int32</span></pre></div>
<p>The first three fields are vectors with length <code>ncomp</code>, the last three ones are
scalars.  The <code>Integral</code> object can also be iterated over like a tuple.  In
particular, if you assign the output of integration functions to the variable
named <code>result</code>, you can access the value of the <code>i</code>-th component of the integral
with <code>result[1][i]</code> or <code>result.integral[i]</code> and the associated error with
<code>result[2][i]</code> or <code>result.error[i]</code>.  The details of other quantities can be
found in Cuba manual.</p>
<p>All other arguments listed in Cuba documentation can be passed as optional
keywords.</p>
<h3><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h3>
<p>A more detailed manual of <code>Cuba.jl</code>, with many complete examples, is available
at <a href="https://giordano.github.io/Cuba.jl/stable/" rel="nofollow">https://giordano.github.io/Cuba.jl/stable/</a>.</p>
<h2><a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related projects</h2>
<p>There are other Julia packages for multidimenensional numerical integration:</p>
<ul>
<li><a href="https://github.com/stevengj/Cubature.jl"><code>Cubature.jl</code></a></li>
<li><a href="https://github.com/stevengj/HCubature.jl"><code>HCubature.jl</code></a></li>
<li><a href="https://github.com/pabloferz/NIntegration.jl"><code>NIntegration.jl</code></a></li>
</ul>
<h2><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>License</h2>
<p>The Cuba.jl package is licensed under the GNU Lesser General Public License, the
same as <a href="http://www.feynarts.de/cuba/" rel="nofollow">Cuba library</a>.  The original author is
Mosè Giordano.  If you use this library for your work, please credit Thomas Hahn
(citable papers about Cuba library:
<a href="http://adsabs.harvard.edu/abs/2005CoPhC.168...78H" rel="nofollow">http://adsabs.harvard.edu/abs/2005CoPhC.168...78H</a> and
<a href="http://adsabs.harvard.edu/abs/2015JPhCS.608a2066H" rel="nofollow">http://adsabs.harvard.edu/abs/2015JPhCS.608a2066H</a>).</p>
</article></div>