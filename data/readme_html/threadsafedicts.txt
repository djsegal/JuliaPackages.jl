<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://github.com/wherrera10/ThreadSafeDicts.jl/actions/workflows/ci.yml"><img src="https://github.com/wherrera10/ThreadSafeDicts.jl/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://coveralls.io/github/wherrera10/ThreadSafeDicts.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/20bfcc59c7b5b0f600a3aa22eec1e078133bbbb8a1685860be12a4e7bc388485/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f776865727265726131302f5468726561645361666544696374732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/github/wherrera10/ThreadSafeDicts.jl/badge.svg?branch=master" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-threadsafedictsjl" class="anchor" aria-hidden="true" href="#threadsafedictsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ThreadSafeDicts.jl</h1>
<p dir="auto">A thread-safe Dict type for Julia programming
<br>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/wherrera10/ThreadSafeDicts.jl/blob/master/docs/src/spool.png"><img src="https://github.com/wherrera10/ThreadSafeDicts.jl/raw/master/docs/src/spool.png" style="max-width: 100%;"></a>
<br><br></p>
<h2 dir="auto"><a id="user-content-structs-and-functions" class="anchor" aria-hidden="true" href="#structs-and-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Structs and Functions</h2>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="struct ThreadSafeDict{K, V} &lt;: AbstractDict{K, V}
    dlock::Threads.SpinLock
    d::Dict
    ThreadSafeDict{K, V}() where V where K = new(Threads.SpinLock(), Dict{K, V}())
    ThreadSafeDict{K, V}(itr) where V where K = new(Threads.SpinLock(), Dict{K, V}(itr))
end
ThreadSafeDict() = ThreadSafeDict{Any,Any}()
ThreadSafeDict(pairs::Vector{Pair{K,V}})   "><pre class="notranslate"><code>struct ThreadSafeDict{K, V} &lt;: AbstractDict{K, V}
    dlock::Threads.SpinLock
    d::Dict
    ThreadSafeDict{K, V}() where V where K = new(Threads.SpinLock(), Dict{K, V}())
    ThreadSafeDict{K, V}(itr) where V where K = new(Threads.SpinLock(), Dict{K, V}(itr))
end
ThreadSafeDict() = ThreadSafeDict{Any,Any}()
ThreadSafeDict(pairs::Vector{Pair{K,V}})   
</code></pre></div>
<br>
<p dir="auto">Struct and constructor for ThreadSafeDict. There is one lock per Dict struct. All functions lock this lock, pass
arguments to the d member Dict, unlock the spinlock, and then return what is returned by the Dict.</p>
<p dir="auto">If there are going to be a large number of threads competing to update the <code>Dict</code>, causing most of the threads to
be blocked at any given time, you may be better off keeping a <code>Dict</code> in a separate thread which accepts updates
via a <code>Channel</code> of <code>Pair</code>s.  YMMMV.
<br><br></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="getindex(dic::ThreadSafeDict, k)"><pre class="notranslate"><code>getindex(dic::ThreadSafeDict, k)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="setindex!(dic::ThreadSafeDict, k, v)"><pre class="notranslate"><code>setindex!(dic::ThreadSafeDict, k, v)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="haskey(dic::ThreadSafeDict, k)"><pre class="notranslate"><code>haskey(dic::ThreadSafeDict, k)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get(dic::ThreadSafeDict, k, v)"><pre class="notranslate"><code>get(dic::ThreadSafeDict, k, v)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="get!(dic::ThreadSafeDict, k, v)"><pre class="notranslate"><code>get!(dic::ThreadSafeDict, k, v)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="pop!(dic::ThreadSafeDict)"><pre class="notranslate"><code>pop!(dic::ThreadSafeDict)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="empty!(dic::ThreadSafeDict)"><pre class="notranslate"><code>empty!(dic::ThreadSafeDict)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="delete!(dic::ThreadSafeDict, k)"><pre class="notranslate"><code>delete!(dic::ThreadSafeDict, k)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="length(dic::ThreadSafeDict)"><pre class="notranslate"><code>length(dic::ThreadSafeDict)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="iterate(dic::ThreadSafeDict)"><pre class="notranslate"><code>iterate(dic::ThreadSafeDict)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="iterate(dic::ThreadSafeDict, i)"><pre class="notranslate"><code>iterate(dic::ThreadSafeDict, i)
</code></pre></div>
<br>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="print(io::IO, dic::ThreadSafeDict)"><pre class="notranslate"><code>print(io::IO, dic::ThreadSafeDict)
</code></pre></div>
<p dir="auto"><br><br></p>
<p dir="auto">All of the above methods work as in those of the base Dict type. However, they all
lock a spinlock prior to passing the arguments to a base Dict within the struct, then
unlock the base Dict prior to returning the function call results. Thus, with a single
thread the functions are equivalent to those of a base Dict, but with multiple threads
thread access to the underlying Dict is serialized per ThreadSafeDict.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<h2 dir="auto"><a id="user-content-installation-1" class="anchor" aria-hidden="true" href="#installation-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">You may install the package from Github in the usual way, or to install the current master copy:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;http://github.com/wherrera10/ThreadSafeDicts.jl&quot;)"><pre class="notranslate"><code>using Pkg
Pkg.add("http://github.com/wherrera10/ThreadSafeDicts.jl")
</code></pre></div>
</article></div>