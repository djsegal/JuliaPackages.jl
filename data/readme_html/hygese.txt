<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-hygesejl" class="anchor" aria-hidden="true" href="#hygesejl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hygese.jl</h1>
<p dir="auto"><a href="https://github.com/chkwon/Hygese.jl/actions?query=workflow%3ACI"><img src="https://github.com/chkwon/Hygese.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/chkwon/Hygese.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/628a48f51424cf338d9ad664e0ae80969ae82eb5c17255d929a58278cd342c54/68747470733a2f2f636f6465636f762e696f2f67682f63686b776f6e2f4879676573652e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/chkwon/Hygese.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><em>This package is under active development. It can introduce breaking changes anytime. Please use it at your own risk.</em></p>
<p dir="auto"><strong>A solver for the Capacitated Vehicle Routing Problem (CVRP)</strong></p>
<p dir="auto">This package provides a simple Julia wrapper for the Hybrid Genetic Search solver for Capacitated Vehicle Routing Problems <a href="https://github.com/vidalt/HGS-CVRP">(HGS-CVRP)</a>.</p>
<p dir="auto">Install:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add Hygese"><pre>] add Hygese</pre></div>
<p dir="auto">Use:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Hygese, CVRPLIB
ap = AlgorithmParameters(timeLimit=1.3, seed=3) # `timeLimit` in seconds, `seed` is the seed for random values.
cvrp = CVRPLIB.readCVRP(&lt;path to .vrp file&gt;)
result = solve_cvrp(cvrp, ap; verbose=true) # verbose=false to turn off all outputs"><pre><span class="pl-k">using</span> Hygese, CVRPLIB
ap <span class="pl-k">=</span> <span class="pl-c1">AlgorithmParameters</span>(timeLimit<span class="pl-k">=</span><span class="pl-c1">1.3</span>, seed<span class="pl-k">=</span><span class="pl-c1">3</span>) <span class="pl-c"><span class="pl-c">#</span> `timeLimit` in seconds, `seed` is the seed for random values.</span>
cvrp <span class="pl-k">=</span> CVRPLIB<span class="pl-k">.</span><span class="pl-c1">readCVRP</span>(<span class="pl-k">&lt;</span>path to <span class="pl-k">.</span>vrp file<span class="pl-k">&gt;</span>)
result <span class="pl-k">=</span> <span class="pl-c1">solve_cvrp</span>(cvrp, ap; verbose<span class="pl-k">=</span><span class="pl-c1">true</span>) <span class="pl-c"><span class="pl-c">#</span> verbose=false to turn off all outputs</span></pre></div>
<ul dir="auto">
<li><code>result.cost</code> = the total cost of routes</li>
<li><code>result.time</code> = the computational time taken by HGS</li>
<li><code>results.routes</code> = the list of visited customers by each route, not including the depot (index 1).
In the <a href="http://vrp.atd-lab.inf.puc-rio.br/index.php/en/" rel="nofollow">CVRPLIB</a> instances, the node numbering starts from <code>1</code>, and the depot is typically node <code>1</code>.  However, the solution reported in CVRPLIB uses numbering starts from <code>0</code>.</li>
</ul>
<p dir="auto">For example, <a href="http://vrp.atd-lab.inf.puc-rio.br/media/com_vrp/instances/P/P-n19-k2.vrp" rel="nofollow"><code>P-n19-k2</code></a> instance has the following nodes:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="1 30 40
2 37 52
3 49 43
4 52 64
5 31 62
6 52 33
7 42 41
8 52 41
9 57 58
10 62 42
11 42 57
12 27 68
13 43 67
14 58 27
15 37 69
16 61 33
17 62 63
18 63 69
19 45 35"><pre class="notranslate"><code>1 30 40
2 37 52
3 49 43
4 52 64
5 31 62
6 52 33
7 42 41
8 52 41
9 57 58
10 62 42
11 42 57
12 27 68
13 43 67
14 58 27
15 37 69
16 61 33
17 62 63
18 63 69
19 45 35
</code></pre></div>
<p dir="auto">and the depot is node <code>1</code>.  But the <a href="http://vrp.atd-lab.inf.puc-rio.br/media/com_vrp/instances/P/P-n19-k2.sol" rel="nofollow">solution reported</a> is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="Route #1: 4 11 14 12 3 17 16 8 6 
Route #2: 18 5 13 15 9 7 2 10 1 
Cost 212"><pre class="notranslate"><code>Route #1: 4 11 14 12 3 17 16 8 6 
Route #2: 18 5 13 15 9 7 2 10 1 
Cost 212
</code></pre></div>
<p dir="auto">The last element <code>1</code> in Route #2 above represents the node number <code>2</code> with coordinate <code>(37, 52)</code>.</p>
<p dir="auto">This package returns <code>visited_customers</code> with the original node numbering.
For the above example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Hygese, CVRPLIB
cvrp, cvrp_file, cvrp_sol_file = CVRPLIB.readCVRPLIB(&quot;P-n19-k2&quot;)
result = solve_cvrp(cvrp)"><pre><span class="pl-k">using</span> Hygese, CVRPLIB
cvrp, cvrp_file, cvrp_sol_file <span class="pl-k">=</span> CVRPLIB<span class="pl-k">.</span><span class="pl-c1">readCVRPLIB</span>(<span class="pl-s"><span class="pl-pds">"</span>P-n19-k2<span class="pl-pds">"</span></span>)
result <span class="pl-k">=</span> <span class="pl-c1">solve_cvrp</span>(cvrp)</pre></div>
<p dir="auto">returns</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; result.routes
2-element Vector{Vector{Int64}}:
 [19, 6, 14, 16, 10, 8, 3, 11, 2]
 [7, 9, 17, 18, 4, 13, 15, 12, 5]"><pre>julia<span class="pl-k">&gt;</span> result<span class="pl-k">.</span>routes
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{Int64}}<span class="pl-k">:</span>
 [<span class="pl-c1">19</span>, <span class="pl-c1">6</span>, <span class="pl-c1">14</span>, <span class="pl-c1">16</span>, <span class="pl-c1">10</span>, <span class="pl-c1">8</span>, <span class="pl-c1">3</span>, <span class="pl-c1">11</span>, <span class="pl-c1">2</span>]
 [<span class="pl-c1">7</span>, <span class="pl-c1">9</span>, <span class="pl-c1">17</span>, <span class="pl-c1">18</span>, <span class="pl-c1">4</span>, <span class="pl-c1">13</span>, <span class="pl-c1">15</span>, <span class="pl-c1">12</span>, <span class="pl-c1">5</span>]</pre></div>
<p dir="auto">To retrieve the CVRPLIB solution reporting format:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; reporting(result.routes)
2-element Vector{Vector{Int64}}:
 [18, 5, 13, 15, 9, 7, 2, 10, 1]
 [6, 8, 16, 17, 3, 12, 14, 11, 4]"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">reporting</span>(result<span class="pl-k">.</span>routes)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Vector{Vector{Int64}}<span class="pl-k">:</span>
 [<span class="pl-c1">18</span>, <span class="pl-c1">5</span>, <span class="pl-c1">13</span>, <span class="pl-c1">15</span>, <span class="pl-c1">9</span>, <span class="pl-c1">7</span>, <span class="pl-c1">2</span>, <span class="pl-c1">10</span>, <span class="pl-c1">1</span>]
 [<span class="pl-c1">6</span>, <span class="pl-c1">8</span>, <span class="pl-c1">16</span>, <span class="pl-c1">17</span>, <span class="pl-c1">3</span>, <span class="pl-c1">12</span>, <span class="pl-c1">14</span>, <span class="pl-c1">11</span>, <span class="pl-c1">4</span>]</pre></div>
<h2 dir="auto"><a id="user-content-cvrp-interfaces" class="anchor" aria-hidden="true" href="#cvrp-interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CVRP interfaces</h2>
<p dir="auto">In all data the first element is for the depot.</p>
<ul dir="auto">
<li><code>x</code> = x coordinates of nodes, size of <code>n</code></li>
<li><code>y</code> = x coordinates of nodes, size of <code>n</code></li>
<li><code>dist_mtx</code> = the distance matrix, size of <code>n</code> by <code>n</code>.</li>
<li><code>service_times</code> = service time in each node</li>
<li><code>demands</code> = the demand in each node</li>
<li><code>vehicle_capacity</code> = the capacity of the vehicles</li>
<li><code>duration_limit</code> = the duration limit for each vehicle</li>
<li><code>n_vehicles</code> = the maximum number of available vehicles</li>
</ul>
<p dir="auto">Three possibilities:</p>
<ul dir="auto">
<li>Only by the x, y coordinates. The Euclidean distances are used.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ap = AlgorithmParameters(timeLimit=3.2) # seconds
result = solve_cvrp(x, y, demands, vehicle_capacity, n_vehicles, ap; service_times=service_times, duration_limit=duration_limit, verbose=true)"><pre>ap <span class="pl-k">=</span> <span class="pl-c1">AlgorithmParameters</span>(timeLimit<span class="pl-k">=</span><span class="pl-c1">3.2</span>) <span class="pl-c"><span class="pl-c">#</span> seconds</span>
result <span class="pl-k">=</span> <span class="pl-c1">solve_cvrp</span>(x, y, demands, vehicle_capacity, n_vehicles, ap; service_times<span class="pl-k">=</span>service_times, duration_limit<span class="pl-k">=</span>duration_limit, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<ul dir="auto">
<li>Only by the distance matrix.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ap = AlgorithmParameters(timeLimit=3.2) # seconds
result = solve_cvrp(dist_mtx, demand, vehicle_capacity, n_vehicles, ap; service_times=service_times, duration_limit=duration_limit, verbose=true)"><pre>ap <span class="pl-k">=</span> <span class="pl-c1">AlgorithmParameters</span>(timeLimit<span class="pl-k">=</span><span class="pl-c1">3.2</span>) <span class="pl-c"><span class="pl-c">#</span> seconds</span>
result <span class="pl-k">=</span> <span class="pl-c1">solve_cvrp</span>(dist_mtx, demand, vehicle_capacity, n_vehicles, ap; service_times<span class="pl-k">=</span>service_times, duration_limit<span class="pl-k">=</span>duration_limit, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<ul dir="auto">
<li>Using the distance matrix, with optional x, y coordinate information. The objective function is calculated based on the distance matrix, but the x, y coordinates just provide some helpful information. The distance matrix may not be consistent with the coordinates.</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ap = AlgorithmParameters(timeLimit=3.2) # seconds
result = solve_cvrp(dist_mtx, demand, vehicle_capacity, n_vehicles, ap; x_coordinates=x, y_coordinates=y, service_times=service_times, duration_limit=duration_limit, verbose=true)"><pre>ap <span class="pl-k">=</span> <span class="pl-c1">AlgorithmParameters</span>(timeLimit<span class="pl-k">=</span><span class="pl-c1">3.2</span>) <span class="pl-c"><span class="pl-c">#</span> seconds</span>
result <span class="pl-k">=</span> <span class="pl-c1">solve_cvrp</span>(dist_mtx, demand, vehicle_capacity, n_vehicles, ap; x_coordinates<span class="pl-k">=</span>x, y_coordinates<span class="pl-k">=</span>y, service_times<span class="pl-k">=</span>service_times, duration_limit<span class="pl-k">=</span>duration_limit, verbose<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h2 dir="auto"><a id="user-content-tsp-interfaces" class="anchor" aria-hidden="true" href="#tsp-interfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TSP interfaces</h2>
<p dir="auto">As TSP is a special case of CVRP, the same solver can be used for solving TSP.</p>
<p dir="auto">The following interfaces are provided:</p>
<ul dir="auto">
<li>Reading <code>.tsp</code> or <code>.atsp</code> files via <code>TSPLIB.jl</code>:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="tsp = TSPLIB.readTSP(&quot;br17.atsp&quot;)
ap = AlgorithmParameters(timeLimit=1.2)
result = solve_tsp(tsp, ap; use_dist_mtx=true)"><pre>tsp <span class="pl-k">=</span> TSPLIB<span class="pl-k">.</span><span class="pl-c1">readTSP</span>(<span class="pl-s"><span class="pl-pds">"</span>br17.atsp<span class="pl-pds">"</span></span>)
ap <span class="pl-k">=</span> <span class="pl-c1">AlgorithmParameters</span>(timeLimit<span class="pl-k">=</span><span class="pl-c1">1.2</span>)
result <span class="pl-k">=</span> <span class="pl-c1">solve_tsp</span>(tsp, ap; use_dist_mtx<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<ul dir="auto">
<li>By the coordinates, by the distance matrix, or by both:</li>
</ul>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="result1 = solve_tsp(x, y, ap)
result2 = solve_tsp(dist_mtx, ap)
result3 = solve_tsp(dist_mtx, ap; x_coordinates=x, y_coordinates=y)"><pre>result1 <span class="pl-k">=</span> <span class="pl-c1">solve_tsp</span>(x, y, ap)
result2 <span class="pl-k">=</span> <span class="pl-c1">solve_tsp</span>(dist_mtx, ap)
result3 <span class="pl-k">=</span> <span class="pl-c1">solve_tsp</span>(dist_mtx, ap; x_coordinates<span class="pl-k">=</span>x, y_coordinates<span class="pl-k">=</span>y)</pre></div>
<h2 dir="auto"><a id="user-content-algorithmparamters" class="anchor" aria-hidden="true" href="#algorithmparamters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>AlgorithmParamters</h2>
<p dir="auto">The paramters for the HGS algorithm with default values are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Base.@kwdef mutable struct AlgorithmParameters
    nbGranular :: Int32 = 20
    mu :: Int32 = 25
    lambda :: Int32 = 40
    nbElite :: Int32 = 4
    nbClose :: Int32 = 5
    targetFeasible :: Float64 = 0.2
    seed :: Int32 = 0
    nbIter :: Int32 = 20000
    timeLimit :: Float64 = 0.0
    useSwapStar :: Int32 = 1 # 1 = true, 0 = false
end"><pre>Base<span class="pl-k">.</span><span class="pl-c1">@kwdef</span> <span class="pl-k">mutable struct</span> AlgorithmParameters
    nbGranular <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">20</span>
    mu <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">25</span>
    lambda <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">40</span>
    nbElite <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>
    nbClose <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">5</span>
    targetFeasible <span class="pl-k">::</span> <span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">0.2</span>
    seed <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>
    nbIter <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">20000</span>
    timeLimit <span class="pl-k">::</span> <span class="pl-c1">Float64</span> <span class="pl-k">=</span> <span class="pl-c1">0.0</span>
    useSwapStar <span class="pl-k">::</span> <span class="pl-c1">Int32</span> <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">#</span> 1 = true, 0 = false</span>
<span class="pl-k">end</span></pre></div>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/chkwon/CVRPLIB.jl">CVRPLIB.jl</a></p>
</li>
<li>
<p dir="auto"><a href="https://github.com/matago/TSPLIB.jl">TSPLIB.jl</a></p>
</li>
<li>
<p dir="auto"><a href="https://github.com/chkwon/LKH.jl">LKH.jl</a></p>
</li>
<li>
<p dir="auto"><a href="https://github.com/chkwon/Concorde.jl">Concorde.jl</a></p>
</li>
<li>
<p dir="auto"><a href="https://github.com/chkwon/PyHygese">PyHygese</a>: A Python wrapper for HGS-CVRP</p>
</li>
</ul>
</article></div>