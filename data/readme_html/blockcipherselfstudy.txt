<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-blockcipherselfstudy" class="anchor" aria-hidden="true" href="#blockcipherselfstudy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BlockCipherSelfStudy</h1>
<h2><a id="user-content-introduction--apology" class="anchor" aria-hidden="true" href="#introduction--apology"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction / Apology</h2>
<p>Modern cryptography has moved on from block ciphers.  It's now all about
formal proofs of more complex systems.  So this is just me pootling around in
my free time, following <a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/doc/schneier-self-study.pdf">Bruce Schneier's self-study
course</a>.</p>
<h2><a id="user-content-rc5-without-rotation" class="anchor" aria-hidden="true" href="#rc5-without-rotation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RC5 Without Rotation</h2>
<p><a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/doc/rivest-rc5.pdf">Defined
here</a>,
RC5 is a block cipher that uses addition, xor, and plaintext-dependent
rotations (although the amount of rotation cannot be determined from the
plaintext alone).</p>
<p>It is very configurable - the size of half-blocks, the number of rounds, and
the key size can all be varied.  Here, in addition, to reduce strength, we
disable rotations.</p>
<h3><a id="user-content-state---0-rounds" class="anchor" aria-hidden="true" href="#state---0-rounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State - 0 Rounds</h3>
<p>Well,
<a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L142">this</a>
is very easy.  A plaintext of 0 gives you the state.</p>
<h3><a id="user-content-state---1-round" class="anchor" aria-hidden="true" href="#state---1-round"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State - 1 Round</h3>
<p>An adaptive, chosen plaintext
<a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L164">attack</a>
that reverses the maths, step-by-step, to retrieve the internal state.
Getting the value of "the xor state" was tricky - I eventually realised that
comparing the results from encypting two values, differing only in one bit,
would (often) given the necessary information.</p>
<h3><a id="user-content-plaintext---any-rounds-lowest-bits" class="anchor" aria-hidden="true" href="#plaintext---any-rounds-lowest-bits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plaintext - Any Rounds, Lowest Bits</h3>
<p>The lowest bits in each half-block can be
<a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L242">tabulated</a>
independently of the rest of the bits (taking the two halves as a single
pair).  A single byte is very easy, giving rapid decryption of two bytes per
block.</p>
<h3><a id="user-content-plaintext---any-rounds" class="anchor" aria-hidden="true" href="#plaintext---any-rounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plaintext - Any Rounds</h3>
<p>Extending the above, an adaptive attack (requiring about two blocks per bit)
can
<a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L295">search</a>
for the plaintext, bit by bit.  This works because the only mixing between
bits (without rotation) is via carry in additions.  So there are only 4
combinations of lowest bit (for the two half-blocks) that affect the lowest
bit.  Then four more for the next, and so on.</p>
<h3><a id="user-content-state---8-bits-2-rounds--32-bits-1-round" class="anchor" aria-hidden="true" href="#state---8-bits-2-rounds--32-bits-1-round"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State - 8 bits 2 Rounds / 32 bits 1 Round</h3>
<p>A <a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L32">GA
search</a>
that finds the state.  This weights scoring of successfully translated
half-blocks to build the state from the lsb and targets mutations at the least
significant incomplete bit.  So, for example, if all half-blocks have the
first 3 bits of a plaintext encrypted correctly, scoring and mutation target
the fourth bit, with some mutation at lower bits for carry.</p>
<h3><a id="user-content-state---32-bits-4-rounds" class="anchor" aria-hidden="true" href="#state---32-bits-4-rounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State - 32 bits 4 Rounds</h3>
<p>A
<a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L438">DFS</a>
that finds the state.  This searches from least to most significant bit.</p>
<p>Back-tracking for the first 2-4 bits dominates processing time.  Once those
bits are OK, typically, no further backtracking at that level is necessary and
more significant bits are found rapidly and (relatively) independently.  I do
not understand why - perhaps it is a bug, or perhaps it is simply that those
bits cascade more (so there is some kind of geometric of exponential
dependency on their values).  Adding a "beamwidth" limit to the search, or
inverting or reversing the bits tried, does not help.</p>
<h3><a id="user-content-state---32-bits-5-rounds" class="anchor" aria-hidden="true" href="#state---32-bits-5-rounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>State - 32 bits 5 Rounds</h3>
<p>As above, but using
<a href="https://github.com/andrewcooke/BlockCipherSelfStudy.jl/blob/master/src/RC5.jl#L561">tabulated</a>
results.</p>
<p>Efficient pruning of the search is critical.  This is why so much time is
spent on the first few bits (see above) - because it is difficult to
discriminate good and bad answers at this level.  The approach here uses an
adaptive set of filters, updated every few seconds.</p>
<p>A solution for the 16-byte zero key, found after 1/4 of the state space is
explored, takes ~100 minutes.</p>
<h3><a id="user-content-linearity" class="anchor" aria-hidden="true" href="#linearity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Linearity</h3>
<p>RC5 without rotation is <em>not</em> linear.  In other words, whether <code>.</code> is addition
or xor,</p>
<pre><code>p, q = encrypt(a.c, b.d)
r1, s1 = encrypt(a, b)
r2, s2 = encrypt(c, d)
p != r1.r2 &amp;&amp; q != s1.s2
</code></pre>
<p>The source of the non-linearity is the combination of addition (with carry)
and xor.  If you describe a round as addition over words then the xor is
non-linear; if you describe it as addition over bits (ie xor) then the carry
operations are non-linear.</p>
<p>Yet various places assert that RC5 without rotation "is linear".</p>
<p>If linearity is taken to mean, loosely, that a solution can be composed from
smaller parts, then the only way that RC5 without rotation is linear, as far
as I can tell, is that the lowest bit is independent of other bits.  This
leads to attacks which progressively solve "upwards" from the least
significant bit, as described above.</p>
<p>The diagram below shows how carries ripple out when the least significant bit
of one half-block is changed (only half the encryption process is shown):</p>
<pre><code>b a+s axb a+s axb a+s axb a+s a
    0       2       4       6  
                               
0 0+0 0x0 0+1 0x0 0+0 0x1 1+0 1
0 0 1 1 0 1 1 0 0 0 0 1 1 0 0 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1
0 0 1 1 1 0 1 0 0 0 1 0 0 0 1 0
0 0 1 1 0 1 0 0 1 1 1 0 0 0 1 0
0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0
0 0 0 0 0 0 0 0 1 1 1 0 1 1 1 0
0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0

                              0
                        0 1    
                        1 1   0
                        1 1   1
                      1   1   1
                1 1   0 1      
              1 0              
  1   1   1   0 0       1 1   1
</code></pre>
<p>At the same time, my limited understanding of linear and differential
attacks suggests that RC5 without rotation is, in a sense, "too
linear".  I can't find a way to relate "distant" bits without also
considering key expansion.  But this may be my inexperience, or simply
laziness (perhaps key expansion must be included).</p>
<h2><a id="user-content-rc5-with-rotation-by-round" class="anchor" aria-hidden="true" href="#rc5-with-rotation-by-round"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>RC5 With Rotation By Round</h2>
<p>As above, but the first round rotation is 1 bit; the second round 2 bits; etc.</p>
<h3><a id="user-content-plaintext---5-rounds" class="anchor" aria-hidden="true" href="#plaintext---5-rounds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Plaintext - 5 Rounds</h3>
<p>An adaptive attacck, searching for the plaintext.</p>
<p>The influence of the first 4 bits on a randomly chosen key, with 5 rounds, is
shown below:</p>
<pre><code> 0 444433211111000&gt;^&lt;8766667666665665
 1 5444332211100000&gt;^&lt;866666667766565
 2 55545543322210010&gt;^&lt;87666666667666
 3 665654433332111000&gt;^&lt;8666766667666
</code></pre>
<p>The output bit marked with <code>&gt; &lt;</code> is at <code>r(r+1)/2</code> - the cumulative shift
position - and most influenced (<code>^</code>; digits are 10% units relative to the
peak) by changing the input.</p>
<p>Clearly the influence of each bit is restricted to a a range of output bits at
and "above" the rotation.  So for each ciphertext character we can try using a
search over a limited number of bits.</p>
<p>In practice many character / key combinations can be found at 5 rounds, but
not at 6.</p>
<p><a href="https://travis-ci.org/andrewcooke/BlockCipherSelfStudy.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/51e655812a19cc9ac7a0c7447f2e568982aa26fa/68747470733a2f2f7472617669732d63692e6f72672f616e64726577636f6f6b652f426c6f636b43697068657253656c6653747564792e6a6c2e706e67" alt="Build Status" data-canonical-src="https://travis-ci.org/andrewcooke/BlockCipherSelfStudy.jl.png" style="max-width:100%;"></a></p>
</article></div>