<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-richardson-package-for-julia" class="anchor" aria-hidden="true" href="#richardson-package-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Richardson package for Julia</h1>
<p dir="auto">The <code>Richardson</code> package provides a function <code>extrapolate</code> that
extrapolates a given function <code>f(x)</code> to <code>f(x0)</code>, evaluating
<code>f</code> only  at a geometric sequence of points <code>&gt; x0</code>
(or optionally <code>&lt; x0</code>).</p>
<p dir="auto">The key algorithm is <a href="https://en.wikipedia.org/wiki/Richardson_extrapolation" rel="nofollow">Richardson extrapolation</a> using a Neville–Aitken
tableau, which adaptively increases the degree of an extrapolation
polynomial until convergence is achieved to a desired tolerance
(or convergence stalls due to e.g. floating-point errors).  This
allows one to obtain <code>f(x0)</code> to high-order accuracy, assuming
that <code>f(x0+h)</code> has a Taylor series or some other power
series in <code>h</code>.   (See e.g. <a href="http://www.cs.rpi.edu/~flaherje/pdf/ode4.pdf" rel="nofollow">these course notes by Prof. Flaherty at RPI</a>.)</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate(f, h; contract=0.125, x0=zero(h), power=1,
                  atol=0, rtol=atol&gt;0 ? 0 : sqrt(ε), maxeval=typemax(Int), breaktol=2)"><pre><span class="pl-c1">extrapolate</span>(f, h; contract<span class="pl-k">=</span><span class="pl-c1">0.125</span>, x0<span class="pl-k">=</span><span class="pl-c1">zero</span>(h), power<span class="pl-k">=</span><span class="pl-c1">1</span>,
                  atol<span class="pl-k">=</span><span class="pl-c1">0</span>, rtol<span class="pl-k">=</span>atol<span class="pl-k">&gt;</span><span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">0</span> <span class="pl-k">:</span> <span class="pl-c1">sqrt</span>(ε), maxeval<span class="pl-k">=</span><span class="pl-c1">typemax</span>(Int), breaktol<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto">Extrapolate <code>f(x)</code> to <code>f₀ ≈ f(x0)</code>, evaluating <code>f</code> only at <code>x &gt; x0</code> points
(or <code>x &lt; x0</code> if <code>h &lt; 0</code>) using Richardson extrapolation starting at
<code>x=x₀+h</code>.  It returns a tuple <code>(f₀, err)</code> of the estimated <code>f(x0)</code>
and an error estimate.</p>
<p dir="auto">The return value of <code>f</code> can be any type supporting <code>±</code> and <code>norm</code>
operations (i.e. a normed vector space).
Similarly, <code>h</code> and <code>x0</code> can be in any normed vector space,
in which case <code>extrapolate</code> performs Richardson extrapolation
of <code>f(x0+s*h)</code> to <code>s=0⁺</code> (i.e. it takes the limit as <code>x</code> goes
to <code>x0</code> along the <code>h</code> direction).</p>
<p dir="auto">On each step of Richardson extrapolation, it shrinks <code>x-x0</code> by
a factor of <code>contract</code>, stopping when the estimated error is
<code>&lt; max(rtol*norm(f₀), atol)</code>, when the estimated error
increases by more than <code>breaktol</code> (e.g. due to numerical errors in the
computation of <code>f</code>), when <code>f</code> returns a non-finite value (<code>NaN</code> or <code>Inf</code>),
or when <code>f</code> has been evaluated <code>maxeval</code> times.   Note that
if the function may converge to zero, you may want
specify a nonzero <code>atol</code> (which cannot be set by default
because it depends on the scale/units of <code>f</code>); alternatively,
in such cases <code>extrapolate</code> will halt when it becomes
limited by the floating-point precision.   (Passing <code>breaktol=Inf</code>
can be useful to force <code>extrapolate</code> to continue shrinking <code>h</code> even
if polynomial extrapolation is initially failing to converge,
possibly at the cost of extraneous function evaluations.)</p>
<p dir="auto">If <code>x0 = ±∞</code> (<code>±Inf</code>), then <code>extrapolate</code> computes the limit of
<code>f(x)</code> as <code>x ⟶ ±∞</code> using geometrically <em>increasing</em> values
of <code>h</code> (by factors of <code>1/contract</code>).</p>
<p dir="auto">In general, the starting <code>h</code> should be large enough that <code>f(x0+h)</code>
can be computed accurately and efficiently (e.g. without
severe cancellation errors), but small enough that <code>f</code> does not
oscillate much between <code>x0</code> and <code>x0+h</code>.  i.e. <code>h</code> should be a typical
scale over which the function <code>f</code> varies significantly.</p>
<p dir="auto">Technically, Richardson extrapolation assumes that <code>f(x0+h)</code> can
be expanded in a power series in <code>h^power</code>, where the default
<code>power=1</code> corresponds to an ordinary Taylor series (i.e. assuming
<code>f</code> is analytic at <code>x0</code>).  If this is not true, you may obtain
slow convergence from <code>extrapolate</code>, but you can pass a different
value of <code>power</code> (e.g. <code>power=0.5</code>) if your <code>f</code> has some different
(Puiseux) power-series expansion.   Conversely, if <code>f</code> is
an <em>even</em> function around <code>x0</code>, i.e. <code>f(x0+h) == f(x0-h)</code>,
so that its Taylor series contains only <em>even</em> powers of <code>h</code>,
you can accelerate convergence by passing <code>power=2</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate(fh_itr; power=1, atol=0, rtol=0, maxeval=typemax(Int), breaktol=Inf)"><pre><span class="pl-c1">extrapolate</span>(fh_itr; power<span class="pl-k">=</span><span class="pl-c1">1</span>, atol<span class="pl-k">=</span><span class="pl-c1">0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0</span>, maxeval<span class="pl-k">=</span><span class="pl-c1">typemax</span>(Int), breaktol<span class="pl-k">=</span><span class="pl-c1">Inf</span>)</pre></div>
<p dir="auto">Similar to <code>extrapolate(f, h)</code>, performs Richardson extrapolation of a sequence of
values <code>f(h)</code> to <code>h → 0</code>, but takes an iterable collection <code>fh_itr</code> of a
sequence of <code>(f(h), h)</code> tuples (in order of decreasing <code>|h|</code>).</p>
<p dir="auto">There is no <code>contract</code> keyword argument since the contraction factors are determined
by the sequence of <code>h</code> values (which need not contract by the same amount).  The
tolerances <code>atol</code> and <code>rtol</code> both default to <code>0</code> so that by default it examines
<em>all</em> of the values in the <code>fh_itr</code> collection.   Otherwise, the keyword arguments
have the same meanings as in <code>extrapolate(f, h)</code>.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate!(fh::AbstractVector; power=1, atol=0, rtol=0, maxeval=typemax(Int), breaktol=Inf)"><pre><span class="pl-c1">extrapolate!</span>(fh<span class="pl-k">::</span><span class="pl-c1">AbstractVector</span>; power<span class="pl-k">=</span><span class="pl-c1">1</span>, atol<span class="pl-k">=</span><span class="pl-c1">0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0</span>, maxeval<span class="pl-k">=</span><span class="pl-c1">typemax</span>(Int), breaktol<span class="pl-k">=</span><span class="pl-c1">Inf</span>)</pre></div>
<p dir="auto">Similar to <code>extrapolate(fh_itr)</code>, performs Richardson extrapolation on an array <code>fh</code>
of <code>(f(h), h)</code> tuples (in order of decreasing <code>|h|</code>), but overwrites the array
<code>fh</code> in-place with intermediate calculations.</p>
<p dir="auto">(Thus, the array <code>fh</code> must be a vector of <code>Tuple{T,H}</code> values, where <code>H&lt;:Number</code> is
the type of <code>h</code> and <code>T</code> is the type of the extrapolated <code>f(0)</code> <strong>result</strong>.  This <code>T</code>
should be a floating-point type, i.e. <code>fh</code> should contain <code>float(f(h))</code> if the
function you are extrapolating is not already floating-point-valued.)</p>
<h2 dir="auto"><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Examples</h2>
<p dir="auto">For example, let's extrapolate <code>sin(x)/x</code> to <code>x=0</code> (where the correct answer is <code>1</code>) starting at <code>x=1</code>, printing out the <code>x</code> value at each step so that we can see what the algorithm is doing.</p>
<p dir="auto">(Since <code>f</code> is passed as the first argument to <code>extrapolate</code>, we
can use Julia's <code>do</code> syntax to conveniently define a multi-line
anonymous function to pass.)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate(1.0, rtol=1e-10) do x
    @show x
    sin(x)/x
end"><pre><span class="pl-c1">extrapolate</span>(<span class="pl-c1">1.0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">1e-10</span>) <span class="pl-k">do</span> x
    <span class="pl-c1">@show</span> x
    <span class="pl-c1">sin</span>(x)<span class="pl-k">/</span>x
<span class="pl-k">end</span></pre></div>
<p dir="auto">giving the output:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = 1.0
x = 0.125
x = 0.015625
x = 0.001953125
x = 0.000244140625
x = 3.0517578125e-5
(1.0000000000000002, 2.0838886172214188e-13)"><pre class="notranslate"><code>x = 1.0
x = 0.125
x = 0.015625
x = 0.001953125
x = 0.000244140625
x = 3.0517578125e-5
(1.0000000000000002, 2.0838886172214188e-13)
</code></pre></div>
<p dir="auto">That is, it evaluates our function <code>sin(x)/x</code> for 6 different values of <code>x</code> and returns <code>1.0000000000000002</code>, which is accurate to machine precision (the error is <code>≈ 2.2e-16</code>).  The returned error estimate of <code>2e-13</code> is conservative, which is typical for extrapolating well-behaved functions.</p>
<p dir="auto">Since <code>sin(x)/x</code> is an <em>even</em> (symmetric) function around <code>x=0</code>,
its Taylor series contains only even powers of <code>x</code>.  We can
exploit this fact to <em>accelerate convergence for even functions</em> by
passing <code>power=2</code> to <code>extrapolate</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate(1.0, rtol=1e-10, power=2) do x
    @show x
    sin(x)/x
end"><pre><span class="pl-c1">extrapolate</span>(<span class="pl-c1">1.0</span>, rtol<span class="pl-k">=</span><span class="pl-c1">1e-10</span>, power<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">do</span> x
    <span class="pl-c1">@show</span> x
    <span class="pl-c1">sin</span>(x)<span class="pl-k">/</span>x
<span class="pl-k">end</span></pre></div>
<p dir="auto">gives</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = 1.0
x = 0.125
x = 0.015625
x = 0.001953125
x = 0.000244140625
(1.0, 0.0)"><pre class="notranslate"><code>x = 1.0
x = 0.125
x = 0.015625
x = 0.001953125
x = 0.000244140625
(1.0, 0.0)
</code></pre></div>
<p dir="auto">which converged to machine precision (in fact, the exact result) in only 5 function evaluations (1 fewer than above).</p>
<h3 dir="auto"><a id="user-content-infinite-limits" class="anchor" aria-hidden="true" href="#infinite-limits"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Infinite limits</h3>
<p dir="auto">Using the <code>x0</code> keyword argument, we can compute the limit of <code>f(x)</code>
as <code>x ⟶ x0</code>.  In fact, you can pass <code>x0 = Inf</code> to compute a limit as
<code>x ⟶ ∞</code> (which is accomplished internally by a change of variables <code>x = 1/u</code> and performing Richardson extrapolation to <code>u=0</code>). For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate(1.0, x0=Inf) do x
    @show x
    (x^2 + 3x - 2) / (x^2 + 5)
end"><pre><span class="pl-c1">extrapolate</span>(<span class="pl-c1">1.0</span>, x0<span class="pl-k">=</span><span class="pl-c1">Inf</span>) <span class="pl-k">do</span> x
    <span class="pl-c1">@show</span> x
    (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">3</span>x <span class="pl-k">-</span> <span class="pl-c1">2</span>) <span class="pl-k">/</span> (x<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">5</span>)
<span class="pl-k">end</span></pre></div>
<p dir="auto">gives</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="x = 1.0
x = 8.0
x = 64.0
x = 512.0
x = 4096.0
x = 32768.0
x = 262144.0
(1.0000000000000002, 1.2938539128981574e-12)"><pre class="notranslate"><code>x = 1.0
x = 8.0
x = 64.0
x = 512.0
x = 4096.0
x = 32768.0
x = 262144.0
(1.0000000000000002, 1.2938539128981574e-12)
</code></pre></div>
<p dir="auto">which is the correct result (<code>1.0</code>) to machine precision.</p>
<h4 dir="auto"><a id="user-content-extrapolating-series" class="anchor" aria-hidden="true" href="#extrapolating-series"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Extrapolating series</h4>
<p dir="auto">One nice application of infinite limits is extrapolating infinite series.   If we start with an integer <code>x</code>, then the default <code>contract=0.125</code> will increase <code>x</code> by a factor of <code>8.0</code> on each iteration, so <code>x</code> will always be an exact integer and we can use it as the number of terms in a series.</p>
<p dir="auto">For example, suppose we are computing the infinite series <code>1/1² + 1/2² + 1/3² + ⋯</code>.  This is the famous <a href="https://en.wikipedia.org/wiki/Basel_problem" rel="nofollow">Basel problem</a>, and it converges to <code>π²/6 ≈ 1.644934066848226…</code>.   If we compute it by brute force, however, we need quite a few terms to get high accuracy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; sum(n -&gt; 1/n^2, 1:100) - π^2/6
-0.009950166663333482

julia&gt; sum(n -&gt; 1/n^2, 1:10^4) - π^2/6
-9.99950001654426e-5

julia&gt; sum(n -&gt; 1/n^2, 1:10^9) - π^2/6
-9.999985284281365e-10"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(n <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">/</span>n<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>) <span class="pl-k">-</span> π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">6</span>
<span class="pl-k">-</span><span class="pl-c1">0.009950166663333482</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(n <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">/</span>n<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">4</span>) <span class="pl-k">-</span> π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">6</span>
<span class="pl-k">-</span><span class="pl-c1">9.99950001654426e-5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">sum</span>(n <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">/</span>n<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span><span class="pl-k">^</span><span class="pl-c1">9</span>) <span class="pl-k">-</span> π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">6</span>
<span class="pl-k">-</span><span class="pl-c1">9.999985284281365e-10</span></pre></div>
<p dir="auto">Even with 10⁹ terms we get only about 9 digits.   Instead, we can use <code>extrapolate</code> (starting at 1 term):</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; val, err = extrapolate(1, x0=Inf) do N
           @show N
           sum(n -&gt; 1/n^2, 1:Int(N))
       end
N = 1.0
N = 8.0
N = 64.0
N = 512.0
N = 4096.0
N = 32768.0
(1.6449340668482288, 4.384936858059518e-12)

julia&gt; (val - π^2/6)/(π^2/6)
1.4848562646983628e-15"><pre>julia<span class="pl-k">&gt;</span> val, err <span class="pl-k">=</span> <span class="pl-c1">extrapolate</span>(<span class="pl-c1">1</span>, x0<span class="pl-k">=</span><span class="pl-c1">Inf</span>) <span class="pl-k">do</span> N
           <span class="pl-c1">@show</span> N
           <span class="pl-c1">sum</span>(n <span class="pl-k">-&gt;</span> <span class="pl-c1">1</span><span class="pl-k">/</span>n<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">Int</span>(N))
       <span class="pl-k">end</span>
N <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
N <span class="pl-k">=</span> <span class="pl-c1">8.0</span>
N <span class="pl-k">=</span> <span class="pl-c1">64.0</span>
N <span class="pl-k">=</span> <span class="pl-c1">512.0</span>
N <span class="pl-k">=</span> <span class="pl-c1">4096.0</span>
N <span class="pl-k">=</span> <span class="pl-c1">32768.0</span>
(<span class="pl-c1">1.6449340668482288</span>, <span class="pl-c1">4.384936858059518e-12</span>)

julia<span class="pl-k">&gt;</span> (val <span class="pl-k">-</span> π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">6</span>)<span class="pl-k">/</span>(π<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">/</span><span class="pl-c1">6</span>)
<span class="pl-c1">1.4848562646983628e-15</span></pre></div>
<p dir="auto">By <code>32768</code> terms, the extrapolated value is accurate to about 15 digits.</p>
<h3 dir="auto"><a id="user-content-numerical-derivatives" class="anchor" aria-hidden="true" href="#numerical-derivatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Numerical derivatives</h3>
<p dir="auto">A classic application of Richardson extrapolation is the accurate evaluation of derivatives via <a href="https://en.wikipedia.org/wiki/Finite_difference" rel="nofollow">finite-difference approximations</a> (although analytical derivatives, e.g. by automatic differentiation, are typically vastly more efficient when they are available).  In this example, we use Richardson extrapolation on the forward-difference approximation <code>f'(x) ≈ (f(x+h)-f(x))/h</code>, for which the error decreases as <code>O(h)</code> but a naive application to a very small <code>h</code> will yield a huge <a href="https://en.wikipedia.org/wiki/Loss_of_significance" rel="nofollow">cancellation error</a> from floating-point roundoff effects.   We differentiate <code>f(x)=sin(x)</code> at <code>x=1</code>, for which the correct answer is <code>cos(1) ≈ 0.5403023058681397174009366...</code>, starting with <code>h=0.1</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="extrapolate(0.1, rtol=0) do h
    @show h
    (sin(1+h) - sin(1)) / h
end"><pre><span class="pl-c1">extrapolate</span>(<span class="pl-c1">0.1</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-k">do</span> h
    <span class="pl-c1">@show</span> h
    (<span class="pl-c1">sin</span>(<span class="pl-c1">1</span><span class="pl-k">+</span>h) <span class="pl-k">-</span> <span class="pl-c1">sin</span>(<span class="pl-c1">1</span>)) <span class="pl-k">/</span> h
<span class="pl-k">end</span></pre></div>
<p dir="auto">Although we gave an <code>rtol</code> of <code>0</code>, the <code>extrapolate</code> function will terminate after a finite number of steps when it detects that improvements are limited by floating-point error:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="h = 0.1
h = 0.0125
h = 0.0015625
h = 0.0001953125
h = 2.44140625e-5
h = 3.0517578125e-6
(0.5403023058683176, 1.7075230118734908e-12)"><pre class="notranslate"><code>h = 0.1
h = 0.0125
h = 0.0015625
h = 0.0001953125
h = 2.44140625e-5
h = 3.0517578125e-6
(0.5403023058683176, 1.7075230118734908e-12)
</code></pre></div>
<p dir="auto">The output <code>0.5403023058683176</code> differs from <code>cos(1)</code> by <code>≈ 1.779e-13</code>, so in this case the returned error estimate is only a little conservative.   Unlike the <code>sin(x)/x</code> example, <code>extrapolate</code> is not able
to attain machine precision (the floating-point cancellation error in this function is quite severe for small <code>h</code>!), but it is able to get surprisingly close.</p>
<p dir="auto">Another possibility for a finite-difference/Richardson combination was suggested by <a href="https://www.sciencedirect.com/science/article/abs/pii/S0141119582800570" rel="nofollow">Ridders (1982)</a>, who computed both <code>f'(x)</code> and <code>f''(x)</code> (the first and second derivatives) simultaneously using a center-difference approximation, which requires two new <code>f(x)</code> evaluations for each <code>h</code>.  In particular, the center-difference approximations are <code>f'(x) ≈ (f(x+h)-f(x-h))/2h</code> and <code>f''(x) ≈ (f(x+h)-2f(x)+f(x-h))/h²</code>, both of which have errors that go as <code>O(h²)</code>.   We can plug both of these functions <em>simultaneously</em> into <code>extrapolate</code> (so that they share <code>f(x±h)</code> evaluations) by using a vector-valued function returning <code>[f', f'']</code>.   Moreover, since these center-difference approximations are even functions of <code>h</code> (identical for <code>±h</code>), we can pass <code>power=2</code> to <code>extrapolate</code> in order to exploit the even-power Taylor expansion.  Here is a function implementing both of these ideas:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# returns (f'(x), f''(x))
function riddersderiv2(f, x, h; atol=0, rtol=atol&gt;0 ? 0 : sqrt(eps(typeof(float(real(x+h))))), contract=0.5)
    f₀ = f(x)
    val, err = extrapolate(h, atol=atol, rtol=rtol, contract=contract, power=2) do h
        f₊, f₋ = f(x+h), f(x-h)
        [(f₊-f₋)/2h, (f₊-2f₀+f₋)/h^2]
    end
    return val[1], val[2]
end"><pre><span class="pl-c"><span class="pl-c">#</span> returns (f'(x), f''(x))</span>
<span class="pl-k">function</span> <span class="pl-en">riddersderiv2</span>(f, x, h; atol<span class="pl-k">=</span><span class="pl-c1">0</span>, rtol<span class="pl-k">=</span>atol<span class="pl-k">&gt;</span><span class="pl-c1">0</span> <span class="pl-k">?</span> <span class="pl-c1">0</span> <span class="pl-k">:</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">eps</span>(<span class="pl-c1">typeof</span>(<span class="pl-c1">float</span>(<span class="pl-c1">real</span>(x<span class="pl-k">+</span>h))))), contract<span class="pl-k">=</span><span class="pl-c1">0.5</span>)
    f₀ <span class="pl-k">=</span> <span class="pl-c1">f</span>(x)
    val, err <span class="pl-k">=</span> <span class="pl-c1">extrapolate</span>(h, atol<span class="pl-k">=</span>atol, rtol<span class="pl-k">=</span>rtol, contract<span class="pl-k">=</span>contract, power<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-k">do</span> h
        f₊, f₋ <span class="pl-k">=</span> <span class="pl-c1">f</span>(x<span class="pl-k">+</span>h), <span class="pl-c1">f</span>(x<span class="pl-k">-</span>h)
        [(f₊<span class="pl-k">-</span>f₋)<span class="pl-k">/</span><span class="pl-c1">2</span>h, (f₊<span class="pl-k">-</span><span class="pl-c1">2</span>f₀<span class="pl-k">+</span>f₋)<span class="pl-k">/</span>h<span class="pl-k">^</span><span class="pl-c1">2</span>]
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> val[<span class="pl-c1">1</span>], val[<span class="pl-c1">2</span>]
<span class="pl-k">end</span></pre></div>
<p dir="auto">(This code could be made even more efficient by using <a href="https://github.com/JuliaArrays/StaticArrays.jl">StaticArrays.jl</a> for the <code>[f', f'']</code> vector.)   The original paper by Ridders accomplishes something similar in <code>&lt; 20</code> lines of <a href="https://en.wikipedia.org/wiki/TI-59_/_TI-58" rel="nofollow">TI-59 calculator</a> code, by the way; so much for high-level languages!</p>
<p dir="auto">For example,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; riddersderiv2(1, 0.1, rtol=0) do x
           @show x
           sin(x)
       end
x = 1
x = 1.1
x = 0.9
x = 1.05
x = 0.95
x = 1.025
x = 0.975
x = 1.0125
x = 0.9875
x = 1.00625
x = 0.99375
(0.5403023058681394, -0.841470984807975)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">riddersderiv2</span>(<span class="pl-c1">1</span>, <span class="pl-c1">0.1</span>, rtol<span class="pl-k">=</span><span class="pl-c1">0</span>) <span class="pl-k">do</span> x
           <span class="pl-c1">@show</span> x
           <span class="pl-c1">sin</span>(x)
       <span class="pl-k">end</span>
x <span class="pl-k">=</span> <span class="pl-c1">1</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.1</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.9</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.05</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.95</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.025</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.975</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.0125</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.9875</span>
x <span class="pl-k">=</span> <span class="pl-c1">1.00625</span>
x <span class="pl-k">=</span> <span class="pl-c1">0.99375</span>
(<span class="pl-c1">0.5403023058681394</span>, <span class="pl-k">-</span><span class="pl-c1">0.841470984807975</span>)</pre></div>
<p dir="auto">evaluates the first and second derivatives of <code>sin(x)</code> at <code>x=1</code> and obtains the correct answer <code>(cos(1), -sin(1))</code> to about 15 and 13 decimal digits, respectively, using 11 function evaluations.</p>
<h3 dir="auto"><a id="user-content-handling-problematic-convergence" class="anchor" aria-hidden="true" href="#handling-problematic-convergence"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Handling problematic convergence</h3>
<p dir="auto">It is useful to consider a finite-difference approximation for the derivative of
the function <code>1/x</code> at some <code>x ≠ 0</code>: i.e. computing the limit of <code>f(h) = (1/(x+h) - 1/x) / h</code>
as <code>h</code> goes to zero similar to above.</p>
<p dir="auto">This function <code>f(h)</code> has a <a href="https://en.wikipedia.org/wiki/Zeros_and_poles" rel="nofollow">pole</a> at <code>h=-x</code>, i.e. <code>f(-x)</code> blows up.   This means
that the Taylor series of <code>f(h)</code> <a href="https://en.wikipedia.org/wiki/Radius_of_convergence" rel="nofollow">only converges</a> for <code>h</code> values small enough to avoid this pole, and in
fact for <code>|h| &lt; |x|</code>.   Since Richardson extrapolation is essentially
approximating the Taylor series, this means that the extrapolation process doesn't
converge if the starting <code>h</code> is too large, and <code>extrapolation</code> will give up and
halt with the wrong answer.</p>
<p dir="auto">This lack of convergence is easily observed: set <code>x=0.01</code> (where the correct derivative of <code>1/x</code> is <code>-10000</code>) and consider what happens for a starting <code>h</code>
that is too large compared to <code>|x|</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate(1.0) do h
           @show h
           x = 0.01
           (1/(x+h) - 1/x) / h
       end
h = 1.0
h = 0.125
h = 0.015625
(-832.4165749908325, 733.4066740007335)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate</span>(<span class="pl-c1">1.0</span>) <span class="pl-k">do</span> h
           <span class="pl-c1">@show</span> h
           x <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
           (<span class="pl-c1">1</span><span class="pl-k">/</span>(x<span class="pl-k">+</span>h) <span class="pl-k">-</span> <span class="pl-c1">1</span><span class="pl-k">/</span>x) <span class="pl-k">/</span> h
       <span class="pl-k">end</span>
h <span class="pl-k">=</span> <span class="pl-c1">1.0</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.125</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.015625</span>
(<span class="pl-k">-</span><span class="pl-c1">832.4165749908325</span>, <span class="pl-c1">733.4066740007335</span>)</pre></div>
<p dir="auto">Before reaching an <code>|h| &lt; 0.01</code> where the power series could begin to converge, <code>extrapolate</code> gave up and returned a wrong answer (with a large error estimate to let you know that the result is garbage)!   In contrast, if we start with a small enough <code>h</code> then it converges just fine and returns the correct answer (<code>-10000</code>) to nearly machine precision:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate(0.01) do h
           @show h
           x = 0.01
           (1/(x+h) - 1/x) / h
       end
h = 0.01
h = 0.00125
h = 0.00015625
h = 1.953125e-5
h = 2.44140625e-6
h = 3.0517578125e-7
(-10000.000000000211, 4.066770998178981e-6)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate</span>(<span class="pl-c1">0.01</span>) <span class="pl-k">do</span> h
           <span class="pl-c1">@show</span> h
           x <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
           (<span class="pl-c1">1</span><span class="pl-k">/</span>(x<span class="pl-k">+</span>h) <span class="pl-k">-</span> <span class="pl-c1">1</span><span class="pl-k">/</span>x) <span class="pl-k">/</span> h
       <span class="pl-k">end</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.00125</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.00015625</span>
h <span class="pl-k">=</span> <span class="pl-c1">1.953125e-5</span>
h <span class="pl-k">=</span> <span class="pl-c1">2.44140625e-6</span>
h <span class="pl-k">=</span> <span class="pl-c1">3.0517578125e-7</span>
(<span class="pl-k">-</span><span class="pl-c1">10000.000000000211</span>, <span class="pl-c1">4.066770998178981e-6</span>)</pre></div>
<p dir="auto">Of course, if you know that your function blows up like this, it is easy to choose good initial <code>h</code>, but how can we persuade <code>extrapolate</code> to do a better job automatically?</p>
<p dir="auto">The trick is to use the <code>breaktol</code> keyword argument.  <code>breaktol</code> defaults to <code>2</code>,
which means that <code>extrapolate</code> gives up if the best error estimate increases by
more than a factor of 2 from one iteration to the next.  Ordinarily, this
kind of breakdown in convergence arises because you hit the limits of floating-point precision, and halting extrapolation is the right thing to do.  Here, however, it would converge if we just continued shrinking <code>h</code>.   So, we simply set <code>breaktol=Inf</code> to force extrapolation to continue, which works even for a large initial <code>h=1000.0</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; extrapolate(1000.0, breaktol=Inf) do h
           @show h
           x = 0.01
           (1/(x+h) - 1/x) / h
       end
h = 1000.0
h = 125.0
h = 15.625
h = 1.953125
h = 0.244140625
h = 0.030517578125
h = 0.003814697265625
h = 0.000476837158203125
h = 5.9604644775390625e-5
h = 7.450580596923828e-6
h = 9.313225746154785e-7
h = 1.1641532182693481e-7
(-10000.000000029328, 5.8616933529265225e-8)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">extrapolate</span>(<span class="pl-c1">1000.0</span>, breaktol<span class="pl-k">=</span><span class="pl-c1">Inf</span>) <span class="pl-k">do</span> h
           <span class="pl-c1">@show</span> h
           x <span class="pl-k">=</span> <span class="pl-c1">0.01</span>
           (<span class="pl-c1">1</span><span class="pl-k">/</span>(x<span class="pl-k">+</span>h) <span class="pl-k">-</span> <span class="pl-c1">1</span><span class="pl-k">/</span>x) <span class="pl-k">/</span> h
       <span class="pl-k">end</span>
h <span class="pl-k">=</span> <span class="pl-c1">1000.0</span>
h <span class="pl-k">=</span> <span class="pl-c1">125.0</span>
h <span class="pl-k">=</span> <span class="pl-c1">15.625</span>
h <span class="pl-k">=</span> <span class="pl-c1">1.953125</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.244140625</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.030517578125</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.003814697265625</span>
h <span class="pl-k">=</span> <span class="pl-c1">0.000476837158203125</span>
h <span class="pl-k">=</span> <span class="pl-c1">5.9604644775390625e-5</span>
h <span class="pl-k">=</span> <span class="pl-c1">7.450580596923828e-6</span>
h <span class="pl-k">=</span> <span class="pl-c1">9.313225746154785e-7</span>
h <span class="pl-k">=</span> <span class="pl-c1">1.1641532182693481e-7</span>
(<span class="pl-k">-</span><span class="pl-c1">10000.000000029328</span>, <span class="pl-c1">5.8616933529265225e-8</span>)</pre></div>
<p dir="auto">Not that it continues extrapolating until it reaches small <code>h</code> values where the power-series converges, and in the end it again returns the correct answer to nearly machine precision (and would reach machine precision if we set a smaller <code>rtol</code>).  (The <code>extrapolate</code> function <em>automatically</em> discards the initial points where the polynomial extrapolation fails.)</p>
</article></div>