<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-finufftjl" class="anchor" aria-hidden="true" href="#finufftjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>FINUFFT.jl</h1>
<p><a href="https://github.com/ludvigak/FINUFFT.jl/actions?query=workflow%3ACI+branch%3Amaster"><img src="https://github.com/ludvigak/FINUFFT.jl/workflows/CI/badge.svg?branch=master" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/ludvigak/FINUFFT.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d303031004cc1c5fbd3782441758dffe550baf26ec64acc7deebaf57f46df65d/68747470733a2f2f636f6465636f762e696f2f67682f6c7564766967616b2f46494e554646542e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d546b78376b6d6131384a" alt="codecov" data-canonical-src="https://codecov.io/gh/ludvigak/FINUFFT.jl/branch/master/graph/badge.svg?token=Tkx7kma18J" style="max-width:100%;"></a>
<a href="https://ludvigak.github.io/FINUFFT.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>This is a Julia interface to <a href="https://github.com/flatironinstitute/finufft">FINUFFT</a>, a lightweight and fast nonuniform FFT (nufft) library released by the Flatiron Institute.
Both 64-bit and 32-bit precisions calls are supported.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The latest version of FINUFFT.jl requires Julia v1.3 or later. From the Pkg REPL mode (hit <code>]</code> in REPL to enter), run</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="add FINUFFT
"><pre>add FINUFFT</pre></div>
<p>Older versions of the package are available also for Julia v1.0-v1.2, but the user need to have a recent version of GCC installed.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>This module provides functions <code>nufft1d1</code>, <code>nufft1d2</code>, ..., <code>nufft3d3</code>, <code>nufft1d1!</code>, <code>nufft1d2!</code>, ..., <code>nufft3d3!</code>, <code>nufftf1d1!</code>, ..., <code>nufftf3d3!</code>, and <code>finufft_default_opts</code> that call the interface defined in <a href="https://finufft.readthedocs.io/en/latest/usage.html" rel="nofollow">https://finufft.readthedocs.io/en/latest/usage.html</a></p>
<p>A reference of the provided functions is available at <a href="https://ludvigak.github.io/FINUFFT.jl/latest/" rel="nofollow">https://ludvigak.github.io/FINUFFT.jl/latest/</a></p>
<ul>
<li>Function calls mimic the C/C++ interface, with the exception that you don't need to pass the dimensions of any arrays in the argument (they are inferred using <code>size()</code>).</li>
<li>The functions named <code>nufftDdN</code> return the output array.</li>
<li>The functions named <code>nufftDdN!</code> take the output array as an argument. This needs to be preallocated.</li>
<li>The functions named <code>nufftfDdN!</code> are them same as above, but operate on 32-bit arguments.</li>
<li>The last argument of the nufft routines is the options struct, which is optional. Default values are used if it is omitted.</li>
<li><code>finufft_default_opts()</code> returns an options struct with default values.</li>
<li>The advanced interfaces <code>finufft2d1many</code> and <code>finufft2d2many</code> have not been implemented yet.</li>
</ul>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using FINUFFT

# nonuniform data
nj = 100
x = pi*(1.0 .- 2.0*rand(nj))
c = rand(nj) + 1im*rand(nj)

# Parameters
ms = 20 # Output size
tol = 1e-10 # Tolerance

# Output as return value
fk = nufft1d1(x, c, 1, tol, ms)

# Preallocate output and pass as argument
out = Array{ComplexF64}(undef, ms)
nufft1d1!(x, c, 1, tol, out)

# Call using modified opts 
opts = finufft_default_opts()
opts.debug = 1
fk2 = nufft1d1(x, c, 1, tol, ms, opts)
"><pre><span class="pl-k">using</span> FINUFFT

<span class="pl-c"><span class="pl-c">#</span> nonuniform data</span>
nj <span class="pl-k">=</span> <span class="pl-c1">100</span>
x <span class="pl-k">=</span> <span class="pl-c1">pi</span><span class="pl-k">*</span>(<span class="pl-c1">1.0</span> <span class="pl-k">.-</span> <span class="pl-c1">2.0</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(nj))
c <span class="pl-k">=</span> <span class="pl-c1">rand</span>(nj) <span class="pl-k">+</span> <span class="pl-c1">1im</span><span class="pl-k">*</span><span class="pl-c1">rand</span>(nj)

<span class="pl-c"><span class="pl-c">#</span> Parameters</span>
ms <span class="pl-k">=</span> <span class="pl-c1">20</span> <span class="pl-c"><span class="pl-c">#</span> Output size</span>
tol <span class="pl-k">=</span> <span class="pl-c1">1e-10</span> <span class="pl-c"><span class="pl-c">#</span> Tolerance</span>

<span class="pl-c"><span class="pl-c">#</span> Output as return value</span>
fk <span class="pl-k">=</span> <span class="pl-c1">nufft1d1</span>(x, c, <span class="pl-c1">1</span>, tol, ms)

<span class="pl-c"><span class="pl-c">#</span> Preallocate output and pass as argument</span>
out <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{ComplexF64}</span>(undef, ms)
<span class="pl-c1">nufft1d1!</span>(x, c, <span class="pl-c1">1</span>, tol, out)

<span class="pl-c"><span class="pl-c">#</span> Call using modified opts </span>
opts <span class="pl-k">=</span> <span class="pl-c1">finufft_default_opts</span>()
opts<span class="pl-k">.</span>debug <span class="pl-k">=</span> <span class="pl-c1">1</span>
fk2 <span class="pl-k">=</span> <span class="pl-c1">nufft1d1</span>(x, c, <span class="pl-c1">1</span>, tol, ms, opts)</pre></div>
<h3><a id="user-content-more-examples" class="anchor" aria-hidden="true" href="#more-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>More examples</h3>
<p>See <a href="test/test_nufft.jl">test/test_nufft.jl</a></p>
<h2><a id="user-content-todo" class="anchor" aria-hidden="true" href="#todo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TODO</h2>
<ul>
<li>Implement advanced interface</li>
</ul>
</article></div>