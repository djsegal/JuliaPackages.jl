<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-aurora-averages-of-units-by-regressing-on-ordered-replicates-adaptively" class="anchor" aria-hidden="true" href="#aurora-averages-of-units-by-regressing-on-ordered-replicates-adaptively"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Aurora: Averages of Units by Regressing on Ordered Replicates Adaptively.</h1>
<p><a href="https://github.com/nignatiadis/Aurora.jl/actions"><img src="https://github.com/nignatiadis/Aurora.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/nignatiadis/Aurora.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/be27401c7b9234a8dbab505302db7fd16b61acae3aeab2533bcc82c53cd1da70/68747470733a2f2f636f6465636f762e696f2f67682f6e69676e617469616469732f4175726f72612e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/nignatiadis/Aurora.jl/branch/main/graph/badge.svg" style="max-width:100%;"></a></p>
<p>Julia implementation of</p>
<blockquote>
<p>Ignatiadis, N., Saha, S., Sun D. L., &amp; Muralidharan, O. (2019).  <strong>Empirical Bayes mean estimation with nonparametric errors via order statistic regression.</strong> <a href="https://arxiv.org/abs/1911.05970" rel="nofollow">[arXiv]</a></p>
</blockquote>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package is available on the Julia registry, and may be installed as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(&quot;Aurora&quot;)
"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Aurora<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h2>
<p>Example code for Auroral (Aurora with linear regression) and AuroraKNN (Aurora with k-Nearest Neighbor regression)</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Aurora
julia&gt; using Distributions
julia&gt; using Random
julia&gt; Random.seed!(100)

# generate true means
julia&gt; μs = rand(DiscreteNonParametric([-1, 1, 2], [1/3,1/3,1/3]), 20_000); 
# 10 noisy observations for each mean
julia&gt; zs = sqrt(5) .* rand(Laplace(), 20_000, 10) .+ μs; 
# Aurora.jl wrapper of replicates
julia&gt; Zs = ReplicatedSample.(zs);

# Fitting
julia&gt; auroral_fit = fit(Auroral(), Zs);
julia&gt; auroraknn_fit = fit(AuroraKNN(), Zs);

# Mean squared error (against ground truth) 
julia&gt; mean(abs2, μs .- predict(auroral_fit)) # MSE of Auroral
0.4837658847631636

julia&gt; mean(abs2, μs .- predict(auroraknn_fit)) # MSE of AuroraKNN
0.41354273158179894

julia&gt; mean(abs2, μs .- mean.(Zs)) # Compare to MSE of row-wise mean
0.9779579821238457
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Aurora
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributions
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Random
julia<span class="pl-k">&gt;</span> Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">100</span>)

<span class="pl-c"><span class="pl-c">#</span> generate true means</span>
julia<span class="pl-k">&gt;</span> μs <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">DiscreteNonParametric</span>([<span class="pl-k">-</span><span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>], [<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>,<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>,<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>]), <span class="pl-c1">20_000</span>); 
<span class="pl-c"><span class="pl-c">#</span> 10 noisy observations for each mean</span>
julia<span class="pl-k">&gt;</span> zs <span class="pl-k">=</span> <span class="pl-c1">sqrt</span>(<span class="pl-c1">5</span>) <span class="pl-k">.*</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Laplace</span>(), <span class="pl-c1">20_000</span>, <span class="pl-c1">10</span>) <span class="pl-k">.+</span> μs; 
<span class="pl-c"><span class="pl-c">#</span> Aurora.jl wrapper of replicates</span>
julia<span class="pl-k">&gt;</span> Zs <span class="pl-k">=</span> <span class="pl-c1">ReplicatedSample</span>.(zs);

<span class="pl-c"><span class="pl-c">#</span> Fitting</span>
julia<span class="pl-k">&gt;</span> auroral_fit <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">Auroral</span>(), Zs);
julia<span class="pl-k">&gt;</span> auroraknn_fit <span class="pl-k">=</span> <span class="pl-c1">fit</span>(<span class="pl-c1">AuroraKNN</span>(), Zs);

<span class="pl-c"><span class="pl-c">#</span> Mean squared error (against ground truth) </span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">mean</span>(abs2, μs <span class="pl-k">.-</span> <span class="pl-c1">predict</span>(auroral_fit)) <span class="pl-c"><span class="pl-c">#</span> MSE of Auroral</span>
<span class="pl-c1">0.4837658847631636</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mean</span>(abs2, μs <span class="pl-k">.-</span> <span class="pl-c1">predict</span>(auroraknn_fit)) <span class="pl-c"><span class="pl-c">#</span> MSE of AuroraKNN</span>
<span class="pl-c1">0.41354273158179894</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">mean</span>(abs2, μs <span class="pl-k">.-</span> <span class="pl-c1">mean</span>.(Zs)) <span class="pl-c"><span class="pl-c">#</span> Compare to MSE of row-wise mean</span>
<span class="pl-c1">0.9779579821238457</span></pre></div>
<p>Plot learned coefficients of Auroral:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Plots
julia&gt; plot(auroral_fit)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Plots
julia<span class="pl-k">&gt;</span> <span class="pl-c1">plot</span>(auroral_fit)</pre></div>
<p><a target="_blank" rel="noopener noreferrer" href="auroral_coefs.png"><img src="auroral_coefs.png" alt="Auroral coefficients" style="max-width:100%;"></a></p>
</article></div>