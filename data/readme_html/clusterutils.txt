<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-clusterutilsjl" class="anchor" aria-hidden="true" href="#clusterutilsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>ClusterUtils.jl</h1>
<p>Message passing, control and display utilities for distributed and parallel computing. The primary use case is convenience in:</p>
<ul>
<li>assigning variables on remote processes.</li>
<li>computing on remote variables many times.</li>
<li>retrieving some facts about variables on remote processes.</li>
</ul>
<p>If you were hoping for parallel behaviour that looks something like:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">reap</span>(<span class="pl-c1">2</span>, :(x <span class="pl-k">=</span> <span class="pl-c1">myid</span>()))
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 1 entry:</span>
<span class="pl-c"><span class="pl-c">#</span>  2 =&gt; 2</span>

<span class="pl-c1">reap</span>(<span class="pl-c1">2</span>, :(<span class="pl-c1">sqrt</span>(x)))
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 1 entry:</span>
<span class="pl-c"><span class="pl-c">#</span>  2 =&gt; 1.41421</span>

<span class="pl-c1">sow</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:y</span>, <span class="pl-c1">myid</span>())
<span class="pl-c"><span class="pl-c">#</span>Future(2,1,16,Nullable{Any}())</span>

<span class="pl-c1">reap</span>(<span class="pl-c1">2</span>, <span class="pl-c1">:y</span>)
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 1 entry:</span>
<span class="pl-c"><span class="pl-c">#</span>  2 =&gt; 1</span></pre></div>
<p>Then this package may be of interest.</p>
<h2><a id="user-content-compatibility" class="anchor" aria-hidden="true" href="#compatibility"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compatibility</h2>
<p>Current version of this repository requires Julia 0.5.</p>
<h2><a id="user-content-map-and-reduce-type-operations" class="anchor" aria-hidden="true" href="#map-and-reduce-type-operations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Map and reduce type operations.</h2>
<p>Traditional map-reduce can be effected by use of <code>reap</code>.</p>
<p>Suppose we want to add together 3 vectors of 5 squared uniform random variables:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> ClusterUtils

pids <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]
<span class="pl-c1">reduce</span>(<span class="pl-k">+</span>, <span class="pl-c1">values</span>(<span class="pl-c1">reap</span>(pids, :(<span class="pl-c1">rand</span>(<span class="pl-c1">5</span>)<span class="pl-k">.^</span><span class="pl-c1">2</span>)))) 
<span class="pl-c"><span class="pl-c">#</span>5-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> 1.61008 </span>
<span class="pl-c"><span class="pl-c">#</span> 2.43127 </span>
<span class="pl-c"><span class="pl-c">#</span> 2.10954 </span>
<span class="pl-c"><span class="pl-c">#</span> 0.696425</span>
<span class="pl-c"><span class="pl-c">#</span> 3.06037 </span></pre></div>
<p>We can map the results of an evaluation to a symbol on remote processes using <code>sow</code>. This makes the symbol's value available for future operations.
The default is that the symbol has global scope (keyword arg <code>mod=Main</code>).
We can retrieve the value of a symbol on remote processes using <code>reap</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">sow</span>(<span class="pl-c1">3</span>, <span class="pl-c1">:bob</span>, pi<span class="pl-k">^</span><span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span>RemoteRef{Channel{Any}}(3,1,877)</span>

<span class="pl-c1">@fetchfrom</span> <span class="pl-c1">3</span> bob
<span class="pl-c"><span class="pl-c">#</span>9.869604401089358</span>

<span class="pl-c1">sow</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>], <span class="pl-c1">:morebob</span>, :(<span class="pl-c1">100</span> <span class="pl-k">+</span> <span class="pl-c1">myid</span>()))
<span class="pl-c"><span class="pl-c">#</span>3-element Array{Any,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> RemoteRef{Channel{Any}}(2,1,879)</span>
<span class="pl-c"><span class="pl-c">#</span> RemoteRef{Channel{Any}}(3,1,880)</span>
<span class="pl-c"><span class="pl-c">#</span> RemoteRef{Channel{Any}}(4,1,881)</span>

<span class="pl-c1">reap</span>([<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>], <span class="pl-c1">:morebob</span>)
<span class="pl-c"><span class="pl-c">#</span>Dict{Any,Any} with 3 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  4 =&gt; 104</span>
<span class="pl-c"><span class="pl-c">#</span>  2 =&gt; 102</span>
<span class="pl-c"><span class="pl-c">#</span>  3 =&gt; 103</span>

<span class="pl-c1">sow</span>(<span class="pl-c1">4</span>, <span class="pl-c1">:specificbob</span>, :(<span class="pl-c1">sqrt</span>(<span class="pl-c1">myid</span>())); mod<span class="pl-k">=</span>ClusterUtils)
<span class="pl-c"><span class="pl-c">#</span>RemoteRef{Channel{Any}}(4,1,933)</span>

<span class="pl-c1">@fetchfrom</span> <span class="pl-c1">4</span> ClusterUtils<span class="pl-k">.</span>specificbob
<span class="pl-c"><span class="pl-c">#</span>2.0</span></pre></div>
<p>We can also map to slices, keys, etc. like so:</p>
<div class="highlight highlight-source-julia"><pre>pids <span class="pl-k">=</span> [<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>]
<span class="pl-c1">sow</span>(pids, <span class="pl-c1">:bar</span>, :(<span class="pl-c1">randn</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>)))

<span class="pl-c1">sow</span>(pids, :(bar[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,:]), <span class="pl-c1">0</span>)

<span class="pl-c1">reap</span>(pids, <span class="pl-c1">:bar</span>)[pids[<span class="pl-c1">1</span>]]
<span class="pl-c"><span class="pl-c">#</span>4x4 Array{Float64,2}:</span>
<span class="pl-c"><span class="pl-c">#</span>  0.0        0.0      0.0        0.0     </span>
<span class="pl-c"><span class="pl-c">#</span>  0.0        0.0      0.0        0.0     </span>
<span class="pl-c"><span class="pl-c">#</span> -1.15992   -1.45188  0.282003  -0.135126</span>
<span class="pl-c"><span class="pl-c">#</span>  0.652393  -1.14758  0.648452   1.17555 </span>


<span class="pl-c1">sow</span>(pids, <span class="pl-c1">:somedict</span>, :(<span class="pl-c1">Dict</span>(<span class="pl-c1">:buzz</span><span class="pl-k">=&gt;</span><span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>), <span class="pl-c1">:badger</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>)));
<span class="pl-c1">sow</span>(pids, :(somedict[<span class="pl-c1">:buzz</span>][:,:]), pi);

<span class="pl-c1">reap</span>(pids, :(somedict[<span class="pl-c1">:buzz</span>]))[pids[<span class="pl-c1">1</span>]]
<span class="pl-c"><span class="pl-c">#</span>2x2 Array{Float64,2}:</span>
<span class="pl-c"><span class="pl-c">#</span> 3.14159  3.14159</span>
<span class="pl-c"><span class="pl-c">#</span> 3.14159  3.14159</span></pre></div>
<h2><a id="user-content-network-topology" class="anchor" aria-hidden="true" href="#network-topology"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Network topology</h2>
<p>The next example is of a utility to describe which processes are on which hosts as this is useful for SharedArray creation.
<code>describepids</code> returns a dict where the keys are processes on unique hosts, the keyed value represents all processes on that host.
With no arguments only remote processes are described.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ClusterUtils

topo <span class="pl-k">=</span> <span class="pl-c1">describepids</span>() <span class="pl-c"><span class="pl-c">#</span> only procs on remote machines</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Any,Any} with 2 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  13 =&gt; [2,3,4,5,6,7,8,9,10,11,12,13]</span>
<span class="pl-c"><span class="pl-c">#</span>  25 =&gt; [14,15,16,17,18,19,20,21,22,23,24,25]</span>

topo <span class="pl-k">=</span> <span class="pl-c1">describepids</span>(remote<span class="pl-k">=</span><span class="pl-c1">1</span>) <span class="pl-c"><span class="pl-c">#</span> only procs on local machine</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Any,Any} with 1 entry:</span>
<span class="pl-c"><span class="pl-c">#</span>  1 =&gt; [1]</span>

topo <span class="pl-k">=</span> <span class="pl-c1">describepids</span>(remote<span class="pl-k">=</span><span class="pl-c1">2</span>) <span class="pl-c"><span class="pl-c">#</span> procs on all machines</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Any,Any} with 3 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  13 =&gt; [2,3,4,5,6,7,8,9,10,11,12,13]</span>
<span class="pl-c"><span class="pl-c">#</span>  25 =&gt; [14,15,16,17,18,19,20,21,22,23,24,25]</span>
<span class="pl-c"><span class="pl-c">#</span>  1  =&gt; [1]</span>

topo <span class="pl-k">=</span> <span class="pl-c1">describepids</span>(<span class="pl-c1">procs</span>(); filterfn<span class="pl-k">=</span>(x)<span class="pl-k">-&gt;</span><span class="pl-c1">ismatch</span>(<span class="pl-sr"><span class="pl-pds">r"</span>tesla<span class="pl-pds">"</span></span>, x)) <span class="pl-c"><span class="pl-c">#</span> custom filter based on `hostname`</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Any,Any} with 2 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  13 =&gt; [2,3,4,5,6,7,8,9,10,11,12,13]</span>
<span class="pl-c"><span class="pl-c">#</span>  25 =&gt; [14,15,16,17,18,19,20,21,22,23,24,25]</span></pre></div>
<h2><a id="user-content-broadcasting-sharedarray-objects" class="anchor" aria-hidden="true" href="#broadcasting-sharedarray-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Broadcasting <code>SharedArray</code> objects</h2>
<p>Using the network topology information we can setup <code>SharedArray</code> objects such that memory is shared between processes on the same machines
This is currently not recommended for heavy use (OK to setup at the beggining of an algorithm, but not multiple calls per second).</p>
<div class="highlight highlight-source-julia"><pre>topo <span class="pl-k">=</span> <span class="pl-c1">describepids</span>();
reps <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">keys</span>(topo)) <span class="pl-c"><span class="pl-c">#</span>a representative process from each machine</span>
<span class="pl-c"><span class="pl-c">#</span>5-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  86</span>
<span class="pl-c"><span class="pl-c">#</span>  98</span>
<span class="pl-c"><span class="pl-c">#</span>  74</span>
<span class="pl-c"><span class="pl-c">#</span>  62</span>
<span class="pl-c"><span class="pl-c">#</span> 110</span>


<span class="pl-c"><span class="pl-c">#</span> initialise a SharedArray using the same random matrix on each machine:</span>
<span class="pl-c1">broadcast_shared</span>(topo, Float32, <span class="pl-c1">rand</span>(<span class="pl-c1">4</span>,<span class="pl-c1">4</span>), <span class="pl-c1">:foo</span>); 

<span class="pl-c1">sow</span>(reps, :(foo[<span class="pl-c1">1</span>,:]), :(<span class="pl-c1">map</span>(Float32, pi)))

someworkers <span class="pl-k">=</span> reps<span class="pl-k">+</span><span class="pl-c1">1</span>
<span class="pl-c"><span class="pl-c">#</span>5-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  87</span>
<span class="pl-c"><span class="pl-c">#</span>  99</span>
<span class="pl-c"><span class="pl-c">#</span>  75</span>
<span class="pl-c"><span class="pl-c">#</span>  63</span>
<span class="pl-c"><span class="pl-c">#</span> 111</span>

workerslices <span class="pl-k">=</span> <span class="pl-c1">reap</span>(someworkers, :(foo[<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,:]));

workerslices[someworkers[<span class="pl-c1">1</span>]]
<span class="pl-c"><span class="pl-c">#</span>2x4 Array{Float32,2}:</span>
<span class="pl-c"><span class="pl-c">#</span> 3.14159   3.14159   3.14159   3.14159 </span>
<span class="pl-c"><span class="pl-c">#</span> 0.317024  0.381314  0.726252  0.709073</span></pre></div>
<h2><a id="user-content-concatentation-with-stitch" class="anchor" aria-hidden="true" href="#concatentation-with-stitch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Concatentation with <code>stitch</code></h2>
<p>The <code>stitch</code> function concatenates objects stored on remotes in the ascending order of their process numbers</p>
<div class="highlight highlight-source-julia"><pre>pids
<span class="pl-c"><span class="pl-c">#</span>5-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  86</span>
<span class="pl-c"><span class="pl-c">#</span>  98</span>
<span class="pl-c"><span class="pl-c">#</span>  74</span>
<span class="pl-c"><span class="pl-c">#</span>  62</span>
<span class="pl-c"><span class="pl-c">#</span> 110</span>

<span class="pl-c1">sow</span>(pids, <span class="pl-c1">:x</span>, :(<span class="pl-c1">myid</span>()<span class="pl-k">^</span><span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">randn</span>(<span class="pl-c1">3</span>)))

<span class="pl-c1">stitch</span>(pids, <span class="pl-c1">:x</span>)
<span class="pl-c"><span class="pl-c">#</span>15-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>   -724.409</span>
<span class="pl-c"><span class="pl-c">#</span>   4207.66 </span>
<span class="pl-c"><span class="pl-c">#</span>   2020.86 </span>
<span class="pl-c"><span class="pl-c">#</span>  -8955.88 </span>
<span class="pl-c"><span class="pl-c">#</span>  -8417.0  </span>
<span class="pl-c"><span class="pl-c">#</span>   5453.98 </span>
<span class="pl-c"><span class="pl-c">#</span>  -3782.38 </span>
<span class="pl-c"><span class="pl-c">#</span>   2769.99 </span>
<span class="pl-c"><span class="pl-c">#</span>   7397.81 </span>
<span class="pl-c"><span class="pl-c">#</span> -12128.3  </span>
<span class="pl-c"><span class="pl-c">#</span>  -2169.37 </span>
<span class="pl-c"><span class="pl-c">#</span>   -772.394</span>
<span class="pl-c"><span class="pl-c">#</span> -10736.4  </span>
<span class="pl-c"><span class="pl-c">#</span>  -8078.21 </span>
<span class="pl-c"><span class="pl-c">#</span> -31016.8 </span></pre></div>
<h2><a id="user-content-message-passing-experimental" class="anchor" aria-hidden="true" href="#message-passing-experimental"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Message passing (experimental)</h2>
<p>Here we use some remote <code>MessageDict</code>s to swap messages between different processes.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> ClusterUtils

remotes <span class="pl-k">=</span> <span class="pl-c1">workers</span>()

<span class="pl-c"><span class="pl-c">#</span>24-element Array{Int64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span>  2</span>
<span class="pl-c"><span class="pl-c">#</span>  3</span>
<span class="pl-c"><span class="pl-c">#</span>  4</span>
<span class="pl-c"><span class="pl-c">#</span>  [...]</span>

msgmaster <span class="pl-k">=</span> <span class="pl-c1">Dict</span>(k<span class="pl-k">=&gt;</span><span class="pl-c1">0</span> <span class="pl-k">for</span> k <span class="pl-k">in</span> remotes);
<span class="pl-c1">sow</span>(remotes, <span class="pl-c1">:somemsg</span>, msgmaster );

<span class="pl-c1">isdefined</span>(<span class="pl-c1">:somemsg</span>)
<span class="pl-c"><span class="pl-c">#</span>false</span>

<span class="pl-c1">@fetchfrom</span> remotes[<span class="pl-c1">1</span>] somemsg
<span class="pl-c"><span class="pl-c">#</span>ClusterUtils.MessageDict</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 24 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  2  =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span>  11 =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span>  7  =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span> [...]</span>

[<span class="pl-c1">@spawnat</span> k somemsg[k] <span class="pl-k">=</span> <span class="pl-c1">2</span>k <span class="pl-k">for</span> k <span class="pl-k">in</span> remotes];

<span class="pl-c1">@fetchfrom</span> remotes[<span class="pl-c1">1</span>] somemsg
<span class="pl-c"><span class="pl-c">#</span>ClusterUtils.MessageDict</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 24 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  2  =&gt; 4</span>
<span class="pl-c"><span class="pl-c">#</span>  11 =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span>  7  =&gt; 0</span>
<span class="pl-c"><span class="pl-c">#</span>  [...]</span>

<span class="pl-c1">swapmsgs</span>(remotes, <span class="pl-c1">:somemsg</span>)

<span class="pl-c1">@fetchfrom</span> remotes[<span class="pl-c1">1</span>] somemsg
<span class="pl-c"><span class="pl-c">#</span>ClusterUtils.MessageDict</span>
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 24 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  2  =&gt; 4</span>
<span class="pl-c"><span class="pl-c">#</span>  11 =&gt; 22</span>
<span class="pl-c"><span class="pl-c">#</span>  7  =&gt; 14</span>
<span class="pl-c"><span class="pl-c">#</span>  [...]</span>

ClusterUtils<span class="pl-k">.</span><span class="pl-c1">@timeit</span> <span class="pl-c1">100</span> <span class="pl-c1">swapmsgs</span>( <span class="pl-c1">workers</span>(), <span class="pl-c1">:somemsg</span> )
<span class="pl-c"><span class="pl-c">#</span>0.016565912109999994</span></pre></div>
<p>Carrying on from the previous example. Suppose we did not need to <code>swapmsgs</code> between workers, but instead only to aggregate the results on a single process.
Here we use a Dict held on process 1 to aggregate work done on remote servers.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">collectmsgs</span>(<span class="pl-c1">:somemsg</span>, remotes)
<span class="pl-c"><span class="pl-c">#</span>Dict{Int64,Any} with 24 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  2  =&gt; 4</span>
<span class="pl-c"><span class="pl-c">#</span>  16 =&gt; 32</span>
<span class="pl-c"><span class="pl-c">#</span>  11 =&gt; 22</span>
<span class="pl-c"><span class="pl-c">#</span> [...]</span></pre></div>
<h2><a id="user-content-storing-and-recovering-data" class="anchor" aria-hidden="true" href="#storing-and-recovering-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Storing and recovering data</h2>
<p>Two functions <code>save</code> and <code>load</code> are provided for conveniently storing and recovering data, built on top of <code>Base.serialize</code>. First usage is for objects of <code>Any</code> type:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>temp.jlf<span class="pl-pds">"</span></span>, <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>))

<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>temp.jlf<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>5-element Array{Float64,1}:</span>
<span class="pl-c"><span class="pl-c">#</span> -1.41679  </span>
<span class="pl-c"><span class="pl-c">#</span> -1.2292   </span>
<span class="pl-c"><span class="pl-c">#</span>  0.103825 </span>
<span class="pl-c"><span class="pl-c">#</span>  0.0804196</span>
<span class="pl-c"><span class="pl-c">#</span>  1.4737   </span></pre></div>
<p>Second usage takes a list of symbols for variables defined in Main (default kwarg <code>mod=Main</code>), turns them into a <code>Dict</code> and <code>save</code>s that.</p>
<div class="highlight highlight-source-julia"><pre>R <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>];

X <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Fnordic<span class="pl-pds">"</span></span>;

<span class="pl-c1">save</span>(<span class="pl-s"><span class="pl-pds">"</span>temp.jlf<span class="pl-pds">"</span></span>, <span class="pl-c1">:X</span>, <span class="pl-c1">:R</span>)

<span class="pl-c1">load</span>(<span class="pl-s"><span class="pl-pds">"</span>temp.jlf<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>Dict{Symbol,Any} with 2 entries:</span>
<span class="pl-c"><span class="pl-c">#</span>  :R =&gt; [1,2,3]</span>
<span class="pl-c"><span class="pl-c">#</span>  :X =&gt; "Fnordic"</span></pre></div>
<h2><a id="user-content-patch-displaying-sharedarrays" class="anchor" aria-hidden="true" href="#patch-displaying-sharedarrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Patch: Displaying SharedArrays</h2>
<p>Display of <code>SharedArray</code>s is not well behaved when all processes with access to the underlying shared memory are on a remote host.</p>
<h2><a id="user-content-patch-garbage-collection-error" class="anchor" aria-hidden="true" href="#patch-garbage-collection-error"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Patch: garbage collection error</h2>
<p>The module also includes a workaround for issue #14445, which is related to garbage collection interrupts from remotecall operations.</p>
</article></div>