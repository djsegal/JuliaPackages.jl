<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-clustermanagers" class="anchor" aria-hidden="true" href="#clustermanagers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ClusterManagers</h1>
<p dir="auto">Support for different job queue systems commonly used on compute clusters.</p>
<h2 dir="auto"><a id="user-content-currently-supported-job-queue-systems" class="anchor" aria-hidden="true" href="#currently-supported-job-queue-systems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Currently supported job queue systems</h2>
<table>
<thead>
<tr>
<th>Job queue system</th>
<th>Command to add processors</th>
</tr>
</thead>
<tbody>
<tr>
<td>Load Sharing Facility (LSF)</td>
<td><code>addprocs_lsf(np::Integer; bsub_flags=``, ssh_cmd=``)</code> or <code>addprocs(LSFManager(np, bsub_flags, ssh_cmd, retry_delays, throttle))</code></td>
</tr>
<tr>
<td>Sun Grid Engine</td>
<td><code>addprocs_sge(np::Integer; qsub_flags=``)</code> or <code>addprocs(SGEManager(np, qsub_flags))</code></td>
</tr>
<tr>
<td>SGE via qrsh</td>
<td><code>addprocs_qrsh(np::Integer; qsub_flags=``)</code> or <code>addprocs(QRSHManager(np, qsub_flags))</code></td>
</tr>
<tr>
<td>PBS</td>
<td><code>addprocs_pbs(np::Integer; qsub_flags=``)</code> or <code>addprocs(PBSManager(np, qsub_flags))</code></td>
</tr>
<tr>
<td>Scyld</td>
<td><code>addprocs_scyld(np::Integer)</code> or <code>addprocs(ScyldManager(np))</code></td>
</tr>
<tr>
<td>HTCondor</td>
<td><code>addprocs_htc(np::Integer)</code> or <code>addprocs(HTCManager(np))</code></td>
</tr>
<tr>
<td>Slurm</td>
<td><code>addprocs_slurm(np::Integer; kwargs...)</code> or <code>addprocs(SlurmManager(np); kwargs...)</code></td>
</tr>
<tr>
<td>Local manager with CPU affinity setting</td>
<td><code>addprocs(LocalAffinityManager(;np=CPU_CORES, mode::AffinityMode=BALANCED, affinities=[]); kwargs...)</code></td>
</tr>
<tr>
<td>Kubernetes (K8s) via <a href="https://github.com/beacon-biosignals/K8sClusterManagers.jl">K8sClusterManagers.jl</a></td>
<td><code>addprocs(K8sClusterManagers(np; kwargs...))</code></td>
</tr>
</tbody>
</table>
<p dir="auto">You can also write your own custom cluster manager; see the instructions in the <a href="https://docs.julialang.org/en/v1/manual/distributed-computing/#ClusterManagers" rel="nofollow">Julia manual</a></p>
<h3 dir="auto"><a id="user-content-slurm-a-simple-example" class="anchor" aria-hidden="true" href="#slurm-a-simple-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Slurm: a simple example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Distributed, ClusterManagers

# Arguments to the Slurm srun(1) command can be given as keyword
# arguments to addprocs.  The argument name and value is translated to
# a srun(1) command line argument as follows:
# 1) If the length of the argument is 1 =&gt; &quot;-arg value&quot;,
#    e.g. t=&quot;0:1:0&quot; =&gt; &quot;-t 0:1:0&quot;
# 2) If the length of the argument is &gt; 1 =&gt; &quot;--arg=value&quot;
#    e.g. time=&quot;0:1:0&quot; =&gt; &quot;--time=0:1:0&quot;
# 3) If the value is the empty string, it becomes a flag value,
#    e.g. exclusive=&quot;&quot; =&gt; &quot;--exclusive&quot;
# 4) If the argument contains &quot;_&quot;, they are replaced with &quot;-&quot;,
#    e.g. mem_per_cpu=100 =&gt; &quot;--mem-per-cpu=100&quot;
addprocs(SlurmManager(2), partition=&quot;debug&quot;, t=&quot;00:5:00&quot;)

hosts = []
pids = []
for i in workers()
	host, pid = fetch(@spawnat i (gethostname(), getpid()))
	push!(hosts, host)
	push!(pids, pid)
end

# The Slurm resource allocation is released when all the workers have
# exited
for i in workers()
	rmprocs(i)
end"><pre><span class="pl-k">using</span> Distributed, ClusterManagers

<span class="pl-c"><span class="pl-c">#</span> Arguments to the Slurm srun(1) command can be given as keyword</span>
<span class="pl-c"><span class="pl-c">#</span> arguments to addprocs.  The argument name and value is translated to</span>
<span class="pl-c"><span class="pl-c">#</span> a srun(1) command line argument as follows:</span>
<span class="pl-c"><span class="pl-c">#</span> 1) If the length of the argument is 1 =&gt; "-arg value",</span>
<span class="pl-c"><span class="pl-c">#</span>    e.g. t="0:1:0" =&gt; "-t 0:1:0"</span>
<span class="pl-c"><span class="pl-c">#</span> 2) If the length of the argument is &gt; 1 =&gt; "--arg=value"</span>
<span class="pl-c"><span class="pl-c">#</span>    e.g. time="0:1:0" =&gt; "--time=0:1:0"</span>
<span class="pl-c"><span class="pl-c">#</span> 3) If the value is the empty string, it becomes a flag value,</span>
<span class="pl-c"><span class="pl-c">#</span>    e.g. exclusive="" =&gt; "--exclusive"</span>
<span class="pl-c"><span class="pl-c">#</span> 4) If the argument contains "_", they are replaced with "-",</span>
<span class="pl-c"><span class="pl-c">#</span>    e.g. mem_per_cpu=100 =&gt; "--mem-per-cpu=100"</span>
<span class="pl-c1">addprocs</span>(<span class="pl-c1">SlurmManager</span>(<span class="pl-c1">2</span>), partition<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>debug<span class="pl-pds">"</span></span>, t<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>00:5:00<span class="pl-pds">"</span></span>)

hosts <span class="pl-k">=</span> []
pids <span class="pl-k">=</span> []
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">workers</span>()
	host, pid <span class="pl-k">=</span> <span class="pl-c1">fetch</span>(<span class="pl-c1">@spawnat</span> i (<span class="pl-c1">gethostname</span>(), <span class="pl-c1">getpid</span>()))
	<span class="pl-c1">push!</span>(hosts, host)
	<span class="pl-c1">push!</span>(pids, pid)
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> The Slurm resource allocation is released when all the workers have</span>
<span class="pl-c"><span class="pl-c">#</span> exited</span>
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">workers</span>()
	<span class="pl-c1">rmprocs</span>(i)
<span class="pl-k">end</span></pre></div>
<h3 dir="auto"><a id="user-content-sge---a-simple-interactive-example" class="anchor" aria-hidden="true" href="#sge---a-simple-interactive-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SGE - a simple interactive example</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using ClusterManagers

julia&gt; ClusterManagers.addprocs_sge(5; qsub_flags=`-q queue_name`)
job id is 961, waiting for job to start .
5-element Array{Any,1}:
2
3
4
5
6

julia&gt; @parallel for i=1:5
       run(`hostname`)
       end

julia&gt;  From worker 2:  compute-6
        From worker 4:  compute-6
        From worker 5:  compute-6
        From worker 6:  compute-6
        From worker 3:  compute-6"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ClusterManagers

julia<span class="pl-k">&gt;</span> ClusterManagers<span class="pl-k">.</span><span class="pl-c1">addprocs_sge</span>(<span class="pl-c1">5</span>; qsub_flags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">`</span>-q queue_name<span class="pl-pds">`</span></span>)
job id is <span class="pl-c1">961</span>, waiting <span class="pl-k">for</span> job to start .
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
<span class="pl-c1">2</span>
<span class="pl-c1">3</span>
<span class="pl-c1">4</span>
<span class="pl-c1">5</span>
<span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@parallel</span> <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">5</span>
       <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>hostname<span class="pl-pds">`</span></span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span>  From worker <span class="pl-c1">2</span><span class="pl-k">:</span>  compute<span class="pl-k">-</span><span class="pl-c1">6</span>
        From worker <span class="pl-c1">4</span><span class="pl-k">:</span>  compute<span class="pl-k">-</span><span class="pl-c1">6</span>
        From worker <span class="pl-c1">5</span><span class="pl-k">:</span>  compute<span class="pl-k">-</span><span class="pl-c1">6</span>
        From worker <span class="pl-c1">6</span><span class="pl-k">:</span>  compute<span class="pl-k">-</span><span class="pl-c1">6</span>
        From worker <span class="pl-c1">3</span><span class="pl-k">:</span>  compute<span class="pl-k">-</span><span class="pl-c1">6</span></pre></div>
<p dir="auto">Some clusters require the user to specify a list of required resources.
For example, it may be necessary to specify how much memory will be needed by the job - see this <a href="https://github.com/JuliaLang/julia/issues/10390" data-hovercard-type="issue" data-hovercard-url="/JuliaLang/julia/issues/10390/hovercard">issue</a>.
The keyword <code>qsub_flags</code> can be used to specify these and other options.
Additionally the keyword <code>wd</code> can be used to specify the working directory (which defaults to <code>ENV["HOME"]</code>).</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Distributed, ClusterManagers

julia&gt; addprocs_sge(5; qsub_flags=`-q queue_name -l h_vmem=4G,tmem=4G`, wd=mktempdir())
Job 5672349 in queue.
Running.
5-element Array{Int64,1}:
 2
 3
 4
 5
 6

julia&gt; pmap(x-&gt;run(`hostname`),workers());

julia&gt;  From worker 26: lum-7-2.local
        From worker 23: pace-6-10.local
        From worker 22: chong-207-10.local
        From worker 24: pace-6-11.local
        From worker 25: cheech-207-16.local

julia&gt; rmprocs(workers())
Task (done)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Distributed, ClusterManagers

julia<span class="pl-k">&gt;</span> <span class="pl-c1">addprocs_sge</span>(<span class="pl-c1">5</span>; qsub_flags<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">`</span>-q queue_name -l h_vmem=4G,tmem=4G<span class="pl-pds">`</span></span>, wd<span class="pl-k">=</span><span class="pl-c1">mktempdir</span>())
Job <span class="pl-c1">5672349</span> <span class="pl-k">in</span> queue.
Running.
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>
 <span class="pl-c1">4</span>
 <span class="pl-c1">5</span>
 <span class="pl-c1">6</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pmap</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>hostname<span class="pl-pds">`</span></span>),<span class="pl-c1">workers</span>());

julia<span class="pl-k">&gt;</span>  From worker <span class="pl-c1">26</span><span class="pl-k">:</span> lum<span class="pl-k">-</span><span class="pl-c1">7</span><span class="pl-k">-</span><span class="pl-c1">2.</span><span class="pl-k">local</span>
        From worker <span class="pl-c1">23</span><span class="pl-k">:</span> pace<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">-</span><span class="pl-c1">10.</span><span class="pl-k">local</span>
        From worker <span class="pl-c1">22</span><span class="pl-k">:</span> chong<span class="pl-k">-</span><span class="pl-c1">207</span><span class="pl-k">-</span><span class="pl-c1">10.</span><span class="pl-k">local</span>
        From worker <span class="pl-c1">24</span><span class="pl-k">:</span> pace<span class="pl-k">-</span><span class="pl-c1">6</span><span class="pl-k">-</span><span class="pl-c1">11.</span><span class="pl-k">local</span>
        From worker <span class="pl-c1">25</span><span class="pl-k">:</span> cheech<span class="pl-k">-</span><span class="pl-c1">207</span><span class="pl-k">-</span><span class="pl-c1">16.</span><span class="pl-k">local</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">rmprocs</span>(<span class="pl-c1">workers</span>())
Task (done)</pre></div>
<h3 dir="auto"><a id="user-content-sge-via-qrsh" class="anchor" aria-hidden="true" href="#sge-via-qrsh"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SGE via qrsh</h3>
<p dir="auto"><code>SGEManager</code> uses SGE's <code>qsub</code> command to launch workers, which communicate the
TCP/IP host:port info back to the master via the filesystem.  On filesystems
that are tuned to make heavy use of caching to increase throughput, launching
Julia workers can frequently timeout waiting for the standard output files to appear.
In this case, it's better to use the <code>QRSHManager</code>, which uses SGE's <code>qrsh</code>
command to bypass the filesystem and captures STDOUT directly.</p>
<h3 dir="auto"><a id="user-content-load-sharing-facility-lsf" class="anchor" aria-hidden="true" href="#load-sharing-facility-lsf"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Load Sharing Facility (LSF)</h3>
<p dir="auto"><code>LSFManager</code> supports IBM's scheduler.  See the <code>addprocs_lsf</code> docstring
for more information.</p>
<h3 dir="auto"><a id="user-content-using-localaffinitymanager-for-pinning-local-workers-to-specific-cores" class="anchor" aria-hidden="true" href="#using-localaffinitymanager-for-pinning-local-workers-to-specific-cores"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>LocalAffinityManager</code> (for pinning local workers to specific cores)</h3>
<ul dir="auto">
<li>Linux only feature.</li>
<li>Requires the Linux <code>taskset</code> command to be installed.</li>
<li>Usage : <code>addprocs(LocalAffinityManager(;np=CPU_CORES, mode::AffinityMode=BALANCED, affinities=[]); kwargs...)</code>.</li>
</ul>
<p dir="auto">where</p>
<ul dir="auto">
<li><code>np</code> is the number of workers to be started.</li>
<li><code>affinities</code>, if specified, is a list of CPU IDs. As many workers as entries in <code>affinities</code> are launched. Each worker is pinned
to the specified CPU ID.</li>
<li><code>mode</code> (used only when <code>affinities</code> is not specified, can be either <code>COMPACT</code> or <code>BALANCED</code>) - <code>COMPACT</code> results in the requested number
of workers pinned to cores in increasing order, For example, worker1 =&gt; CPU0, worker2 =&gt; CPU1 and so on. <code>BALANCED</code> tries to spread
the workers. Useful when we have multiple CPU sockets, with each socket having multiple cores. A <code>BALANCED</code> mode results in workers
spread across CPU sockets. Default is <code>BALANCED</code>.</li>
</ul>
<h3 dir="auto"><a id="user-content-using-elasticmanager-dynamically-adding-workers-to-a-cluster" class="anchor" aria-hidden="true" href="#using-elasticmanager-dynamically-adding-workers-to-a-cluster"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Using <code>ElasticManager</code> (dynamically adding workers to a cluster)</h3>
<p dir="auto">The <code>ElasticManager</code> is useful in scenarios where we want to dynamically add workers to a cluster.
It achieves this by listening on a known port on the master. The launched workers connect to this
port and publish their own host/port information for other workers to connect to.</p>
<p dir="auto">On the master, you need to instantiate an instance of <code>ElasticManager</code>. The constructors defined are:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ElasticManager(;addr=IPv4(&quot;127.0.0.1&quot;), port=9009, cookie=nothing, topology=:all_to_all, printing_kwargs=())
ElasticManager(port) = ElasticManager(;port=port)
ElasticManager(addr, port) = ElasticManager(;addr=addr, port=port)
ElasticManager(addr, port, cookie) = ElasticManager(;addr=addr, port=port, cookie=cookie)"><pre><span class="pl-c1">ElasticManager</span>(;addr<span class="pl-k">=</span><span class="pl-c1">IPv4</span>(<span class="pl-s"><span class="pl-pds">"</span>127.0.0.1<span class="pl-pds">"</span></span>), port<span class="pl-k">=</span><span class="pl-c1">9009</span>, cookie<span class="pl-k">=</span><span class="pl-c1">nothing</span>, topology<span class="pl-k">=</span><span class="pl-c1">:all_to_all</span>, printing_kwargs<span class="pl-k">=</span>())
<span class="pl-en">ElasticManager</span>(port) <span class="pl-k">=</span> <span class="pl-c1">ElasticManager</span>(;port<span class="pl-k">=</span>port)
<span class="pl-en">ElasticManager</span>(addr, port) <span class="pl-k">=</span> <span class="pl-c1">ElasticManager</span>(;addr<span class="pl-k">=</span>addr, port<span class="pl-k">=</span>port)
<span class="pl-en">ElasticManager</span>(addr, port, cookie) <span class="pl-k">=</span> <span class="pl-c1">ElasticManager</span>(;addr<span class="pl-k">=</span>addr, port<span class="pl-k">=</span>port, cookie<span class="pl-k">=</span>cookie)</pre></div>
<p dir="auto">On Linux and Mac, you can set <code>addr=:auto</code> to automatically use the host's private IP address on the local network, which will allow other workers on this network to connect. You can also use <code>port=0</code> to let the OS choose a random free port for you (some systems may not support this). Once created, printing the <code>ElasticManager</code> object prints the command which you can run on workers to connect them to the master, e.g.:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; em = ElasticManager(addr=:auto, port=0)
ElasticManager:
  Active workers : []
  Number of workers to be added  : 0
  Terminated workers : []
  Worker connect command : 
    /home/user/bin/julia --project=/home/user/myproject/Project.toml -e 'using ClusterManagers; ClusterManagers.elastic_worker(&quot;4cOSyaYpgSl6BC0C&quot;,&quot;127.0.1.1&quot;,36275)'"><pre>julia<span class="pl-k">&gt;</span> em <span class="pl-k">=</span> <span class="pl-c1">ElasticManager</span>(addr<span class="pl-k">=</span><span class="pl-c1">:auto</span>, port<span class="pl-k">=</span><span class="pl-c1">0</span>)
ElasticManager<span class="pl-k">:</span>
  Active workers <span class="pl-k">:</span> []
  Number of workers to be added  <span class="pl-k">:</span> <span class="pl-c1">0</span>
  Terminated workers <span class="pl-k">:</span> []
  Worker connect command <span class="pl-k">:</span> 
    <span class="pl-k">/</span>home<span class="pl-k">/</span>user<span class="pl-k">/</span>bin<span class="pl-k">/</span>julia <span class="pl-k">--</span>project<span class="pl-k">=</span><span class="pl-k">/</span>home<span class="pl-k">/</span>user<span class="pl-k">/</span>myproject<span class="pl-k">/</span>Project<span class="pl-k">.</span>toml <span class="pl-k">-</span>e <span class="pl-s"><span class="pl-pds">'</span>using ClusterManagers; ClusterManagers.elastic_worker("4cOSyaYpgSl6BC0C","127.0.1.1",36275)<span class="pl-pds">'</span></span></pre></div>
<p dir="auto">By default, the printed command uses the absolute path to the current Julia executable and activates the same project as the current session. You can change either of these defaults by passing <code>printing_kwargs=(absolute_exename=false, same_project=false))</code> to the first form of the <code>ElasticManager</code> constructor.</p>
<p dir="auto">Once workers are connected, you can print the <code>em</code> object again to see them added to the list of active workers.</p>
</article></div>