<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-easy-readingwriting-of-fits-files-in-julia" class="anchor" aria-hidden="true" href="#easy-readingwriting-of-fits-files-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Easy reading/writing of FITS files in Julia</h1>
<p dir="auto"><a href="https://emmt.github.io/EasyFITS.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Doc" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="./LICENSE.md"><img src="https://camo.githubusercontent.com/bbf49a2eb96e6f718803f2493bd7aa3baae61abb09b7f8fc185a94e08c504dc6/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width: 100%;"></a>
<a href="https://github.com/emmt/EasyFITS.jl/actions/workflows/CI.yml?query=branch%3Amaster"><img src="https://github.com/emmt/EasyFITS.jl/actions/workflows/CI.yml/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://ci.appveyor.com/project/emmt/EasyFITS-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/e2782e10c7f16c666c3b80fa40045f0e6d85c4828b720cfacf948cbd00462311/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656d6d742f45617379464954532e6a6c3f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/emmt/EasyFITS.jl?branch=master" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/emmt/EasyFITS.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/cad0a7bf7589496483682e8fa85d479827c850961a0167cc99ff9e87042aa035/687474703a2f2f636f6465636f762e696f2f6769746875622f656d6d742f45617379464954532e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Coverage" data-canonical-src="http://codecov.io/github/emmt/EasyFITS.jl/coverage.svg?branch=master" style="max-width: 100%;"></a></p>
<p dir="auto"><code>EasyFITS</code> is a <a href="https://julialang.org/" rel="nofollow">Julia</a> package designed to make it easier to read
and write data in <a href="https://fits.gsfc.nasa.gov/fits_standard.html" rel="nofollow">FITS</a> format without
sacrificing performances, flexibility, or readability.</p>
<h2 dir="auto"><a id="user-content-a-few-examples" class="anchor" aria-hidden="true" href="#a-few-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>A few examples</h2>
<p dir="auto">The full documentation is available <a href="https://emmt.github.io/EasyFITS.jl/dev" rel="nofollow">on-line</a>.</p>
<p dir="auto">The <em>Flexible Image Transport System</em> (or
<a href="https://fits.gsfc.nasa.gov/fits_standard.html" rel="nofollow">FITS</a> for short) is a file
format widely used in Astronomy to store many kinds of data (images, tables,
etc.) and metadata. FITS files consist in a concatenation of Header Data Units
(HDUs) which each have a header part followed by a data part.</p>
<p dir="auto">The following example demonstrates how to write a FITS file with 2 HDUs, an
<em>Image Extension</em> and a <em>Table Extension</em>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Dates, EasyFITS
arr = rand(Float32, (3,4,5));
nrows = 20;
inds = 1:nrows;
speed = rand(Float64, nrows);
mass = rand(Float32, nrows);
position = rand(Float32, 3, nrows);
phase = (1:7) .// 3;
amplitude = exp.(-1:-1:-7);
x = amplitude.*cos.(phase);
y = amplitude.*sin.(phase);
writefits(filename,
          #-----------------------------------------------------------------
          # First HDU must be a FITS &quot;image&quot;, but data may be empty.
          #
          # Header part as a vector of `key=&gt;val` or `key=&gt;(val,com)` pairs:
          [&quot;DATE&quot;    =&gt; (now(), &quot;date of creation&quot;),
           &quot;HISTORY&quot; =&gt; &quot;This file has been produced by EasyFITS&quot;,
           &quot;USER&quot;    =&gt; ENV[&quot;USER&quot;]],
          # Data part as an array:
          arr,
          #-----------------------------------------------------------------
          # Second HDU, here a FITS &quot;table&quot;.
          #
          # Header part of 2nd HDU as a tuple of pairs:
          (&quot;EXTNAME&quot; =&gt; (&quot;MY-EXTENSION&quot;, &quot;Name of this extension&quot;),
           &quot;EXTVER&quot;  =&gt; (1, &quot;Version of this extension&quot;)),
          # Data part is a table in the form of a named tuple:
          (Speed    = (speed, &quot;km/s&quot;),  # this column has units
           Indices  = inds,             # not this one
           Mass     = (mass, &quot;kg&quot;),
           Position = (position, &quot;cm&quot;)),
          #-----------------------------------------------------------------
          # Third HDU, another FITS &quot;table&quot;.
          #
          # Header part of 3rd HDU as a named tuple (note that keywords must
          # be in uppercase letters):
          (EXTNAME = (&quot;MY-OTHER-EXTENSION&quot;, &quot;Name of this other extension&quot;),
           EXTVER  = (1, &quot;Version of this other extension&quot;),
           COMMENT = &quot;This is an interesting comment&quot;),
          # Data part is a table in the form of a vector of pairs (colum names
          # can be strings or symbols but not a mixture):
          [:phase =&gt; ((180/Ï€).*phase, &quot;deg&quot;),
           :amplitude =&gt; (amplitude, &quot;V&quot;),
           :xy =&gt; (hcat(x,y)', &quot;V&quot;)])"><pre><span class="pl-k">using</span> Dates, EasyFITS
arr <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, (<span class="pl-c1">3</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span>));
nrows <span class="pl-k">=</span> <span class="pl-c1">20</span>;
inds <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nrows;
speed <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float64, nrows);
mass <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, nrows);
position <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Float32, <span class="pl-c1">3</span>, nrows);
phase <span class="pl-k">=</span> (<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">7</span>) <span class="pl-k">.//</span> <span class="pl-c1">3</span>;
amplitude <span class="pl-k">=</span> <span class="pl-c1">exp</span>.(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">7</span>);
x <span class="pl-k">=</span> amplitude<span class="pl-k">.*</span><span class="pl-c1">cos</span>.(phase);
y <span class="pl-k">=</span> amplitude<span class="pl-k">.*</span><span class="pl-c1">sin</span>.(phase);
<span class="pl-c1">writefits</span>(filename,
          <span class="pl-c"><span class="pl-c">#</span>-----------------------------------------------------------------</span>
          <span class="pl-c"><span class="pl-c">#</span> First HDU must be a FITS "image", but data may be empty.</span>
          <span class="pl-c"><span class="pl-c">#</span></span>
          <span class="pl-c"><span class="pl-c">#</span> Header part as a vector of `key=&gt;val` or `key=&gt;(val,com)` pairs:</span>
          [<span class="pl-s"><span class="pl-pds">"</span>DATE<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> (<span class="pl-c1">now</span>(), <span class="pl-s"><span class="pl-pds">"</span>date of creation<span class="pl-pds">"</span></span>),
           <span class="pl-s"><span class="pl-pds">"</span>HISTORY<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>This file has been produced by EasyFITS<span class="pl-pds">"</span></span>,
           <span class="pl-s"><span class="pl-pds">"</span>USER<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>USER<span class="pl-pds">"</span></span>]],
          <span class="pl-c"><span class="pl-c">#</span> Data part as an array:</span>
          arr,
          <span class="pl-c"><span class="pl-c">#</span>-----------------------------------------------------------------</span>
          <span class="pl-c"><span class="pl-c">#</span> Second HDU, here a FITS "table".</span>
          <span class="pl-c"><span class="pl-c">#</span></span>
          <span class="pl-c"><span class="pl-c">#</span> Header part of 2nd HDU as a tuple of pairs:</span>
          (<span class="pl-s"><span class="pl-pds">"</span>EXTNAME<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> (<span class="pl-s"><span class="pl-pds">"</span>MY-EXTENSION<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Name of this extension<span class="pl-pds">"</span></span>),
           <span class="pl-s"><span class="pl-pds">"</span>EXTVER<span class="pl-pds">"</span></span>  <span class="pl-k">=&gt;</span> (<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>Version of this extension<span class="pl-pds">"</span></span>)),
          <span class="pl-c"><span class="pl-c">#</span> Data part is a table in the form of a named tuple:</span>
          (Speed    <span class="pl-k">=</span> (speed, <span class="pl-s"><span class="pl-pds">"</span>km/s<span class="pl-pds">"</span></span>),  <span class="pl-c"><span class="pl-c">#</span> this column has units</span>
           Indices  <span class="pl-k">=</span> inds,             <span class="pl-c"><span class="pl-c">#</span> not this one</span>
           Mass     <span class="pl-k">=</span> (mass, <span class="pl-s"><span class="pl-pds">"</span>kg<span class="pl-pds">"</span></span>),
           Position <span class="pl-k">=</span> (position, <span class="pl-s"><span class="pl-pds">"</span>cm<span class="pl-pds">"</span></span>)),
          <span class="pl-c"><span class="pl-c">#</span>-----------------------------------------------------------------</span>
          <span class="pl-c"><span class="pl-c">#</span> Third HDU, another FITS "table".</span>
          <span class="pl-c"><span class="pl-c">#</span></span>
          <span class="pl-c"><span class="pl-c">#</span> Header part of 3rd HDU as a named tuple (note that keywords must</span>
          <span class="pl-c"><span class="pl-c">#</span> be in uppercase letters):</span>
          (EXTNAME <span class="pl-k">=</span> (<span class="pl-s"><span class="pl-pds">"</span>MY-OTHER-EXTENSION<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Name of this other extension<span class="pl-pds">"</span></span>),
           EXTVER  <span class="pl-k">=</span> (<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>Version of this other extension<span class="pl-pds">"</span></span>),
           COMMENT <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>This is an interesting comment<span class="pl-pds">"</span></span>),
          <span class="pl-c"><span class="pl-c">#</span> Data part is a table in the form of a vector of pairs (colum names</span>
          <span class="pl-c"><span class="pl-c">#</span> can be strings or symbols but not a mixture):</span>
          [<span class="pl-c1">:phase</span> <span class="pl-k">=&gt;</span> ((<span class="pl-c1">180</span><span class="pl-k">/</span>Ï€)<span class="pl-k">.</span><span class="pl-k">*</span>phase, <span class="pl-s"><span class="pl-pds">"</span>deg<span class="pl-pds">"</span></span>),
           <span class="pl-c1">:amplitude</span> <span class="pl-k">=&gt;</span> (amplitude, <span class="pl-s"><span class="pl-pds">"</span>V<span class="pl-pds">"</span></span>),
           <span class="pl-c1">:xy</span> <span class="pl-k">=&gt;</span> (<span class="pl-c1">hcat</span>(x,y)<span class="pl-k">'</span>, <span class="pl-s"><span class="pl-pds">"</span>V<span class="pl-pds">"</span></span>)])</pre></div>
<p dir="auto">Each HDU has a the header part (the metadata) and a data part which is
reflected by the pairs of arguments after the name of the file <code>filename</code> in
the above call to <code>writefits</code>. The headers are provided by collections (a
vector for the 1st one, a tuple for the 2nd) of pairs associating a keyword
with a value and a comment (both optional). The data in a FITS <em>Image
Extension</em> is any real-valued Julia array. The data part in a FITS <em>Table
Extension</em> is provided by a collection of column names associated with columns
values and optional units. The columns in a FITS table must have the same
trailing dimension (interpreted as the rows of the table) but may have
different leading dimensions corresponding to the sizes of the column cells. In
the above example, the <code>"Position"</code> column has 3 values per cell (presumably
the 3D coordinates), while other columns have a single value per cell.</p>
<p dir="auto">To read the headers of the 1st and 2nd HDU of the file:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="hdr1 = read(FitsHeader, filename)
hdr2 = read(FitsHeader, filename, ext=2)"><pre>hdr1 <span class="pl-k">=</span> <span class="pl-c1">read</span>(FitsHeader, filename)
hdr2 <span class="pl-k">=</span> <span class="pl-c1">read</span>(FitsHeader, filename, ext<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto">yield two instance of <code>FitsHeader</code>. Reading the data parts is very easy:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dat1 = readfits(filename)
dat2 = readfits(filename, ext=2)"><pre>dat1 <span class="pl-k">=</span> <span class="pl-c1">readfits</span>(filename)
dat2 <span class="pl-k">=</span> <span class="pl-c1">readfits</span>(filename, ext<span class="pl-k">=</span><span class="pl-c1">2</span>)</pre></div>
<p dir="auto">will yield an array <code>dat1</code> equal to <code>arr</code> and a dictionary <code>dat2</code> indexed by the
column names (in uppercase letters by default).  For example:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dat2[&quot;SPEED&quot;] == speed"><pre>dat2[<span class="pl-s"><span class="pl-pds">"</span>SPEED<span class="pl-pds">"</span></span>] <span class="pl-k">==</span> speed</pre></div>
<p dir="auto">should hold.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">The easiest way to install <code>EasyFITS</code> is via Julia registry
<a href="https://github.com/emmt/EmmtRegistry"><code>EmmtRegistry</code></a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;registry add General&quot;
pkg&quot;registry add https://github.com/emmt/EmmtRegistry&quot;
pkg&quot;add EasyFITS&quot;"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>registry add General<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>registry add https://github.com/emmt/EmmtRegistry<span class="pl-pds">"</span></span>
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add EasyFITS<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Adding the <code>General</code> registry (2nd line of the above example) is mandatory to
have access to the official Julia packages if you never have used the package
manager before.</p>
<h2 dir="auto"><a id="user-content-related-projects" class="anchor" aria-hidden="true" href="#related-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related projects</h2>
<p dir="auto">The <a href="https://github.com/JuliaAstro/FITSIO.jl">FITSIO</a> package is another
alternative to read/write FITS files. <code>EasyFITS</code> is no longer based on <code>FITSIO</code>
and now exploits <a href="https://github.com/JuliaInterop/Clang.jl">Clang.jl</a> to directly call the functions of the
<a href="https://github.com/JuliaAstro/CFITSIO.jl">CFITSIO</a> library and
<a href="https://github.com/emmt/BaseFITS.jl"><code>BaseFITS</code></a> to parse metadata (FITS
header cards).</p>
</article></div>