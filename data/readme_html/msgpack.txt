<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-msgpackjl" class="anchor" aria-hidden="true" href="#msgpackjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MsgPack.jl</h1>
<p><a href="https://travis-ci.org/JuliaIO/MsgPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c5b85dac4c466d73253bab04ef46d3bfb0525b0d/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961494f2f4d73675061636b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaIO/MsgPack.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/kmsquire/msgpack-jl/branch/master" rel="nofollow"><img src="https://camo.githubusercontent.com/dc922b44a62668ae18df1940278ba4b14b80d086/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f393371626b626e716830666e397172342f6272616e63682f6d61737465723f7376673d74727565" alt="Build status" data-canonical-src="https://ci.appveyor.com/api/projects/status/93qbkbnqh0fn9qr4/branch/master?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaIO/MsgPack.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9e57640a5181f653a77498e491fdffcf46dc0802/68747470733a2f2f636f6465636f762e696f2f67682f4a756c6961494f2f4d73675061636b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d44306263493052747377" alt="codecov" data-canonical-src="https://codecov.io/gh/JuliaIO/MsgPack.jl/branch/master/graph/badge.svg?token=D0bcI0Rtsw" style="max-width:100%;"></a></p>
<p><a href="https://JuliaIO.github.io/MsgPack.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaIO.github.io/MsgPack.jl/latest/" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>MsgPack.jl is a MessagePack implementation in pure Julia, inspired by <a href="https://github.com/quinnj/JSON3.jl">JSON3.jl</a>. This package supports:</p>
<ul>
<li>(de)serialization of Julia values to/from MessagePack (see <code>pack</code> and <code>unpack</code>)</li>
<li>overloadable pre-(de)serialization transformations (see <code>from_msgpack</code> and <code>to_msgpack</code>)</li>
<li>automatic type construction/destruction (see <code>msgpack_type</code>, <code>construct</code>, and <code>StructType</code>)</li>
<li>some basic immutable "views" over MsgPack-formatted byte buffers (see <code>ArrayView</code> and <code>MapView</code>).</li>
<li>native <code>Serialization.serialize</code> support via MessagePack Extensions (see <code>Extension</code>, <code>extserialize</code>, and <code>extdeserialize</code>)</li>
</ul>
<h2><a id="user-content-packunpack" class="anchor" aria-hidden="true" href="#packunpack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>pack</code>/<code>unpack</code></h2>
<p>Use <code>pack</code> to serialize Julia values to MessagePack bytes, and <code>unpack</code> to deserialize MessagePack bytes to Julia values:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">pack</span>([<span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>, <span class="pl-c1">Dict</span>(<span class="pl-c1">:this</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, [<span class="pl-s"><span class="pl-pds">'</span>i<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>s<span class="pl-pds">'</span></span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14</span>, <span class="pl-s"><span class="pl-pds">"</span>messagepack!<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>)])
<span class="pl-c1">42</span><span class="pl-k">-</span>element Array{UInt8,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0x92</span>
 <span class="pl-c1">0xa5</span>
 <span class="pl-c1">0x68</span>
 â‹®

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unpack</span>(bytes)
 <span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Any,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>hello<span class="pl-pds">"</span></span>
  <span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>messagepack!<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>,<span class="pl-s"><span class="pl-pds">"</span>this<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">0x01</span>,Any[<span class="pl-s"><span class="pl-pds">"</span>i<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>s<span class="pl-pds">"</span></span>] <span class="pl-k">=&gt;</span> <span class="pl-c1">3.14</span>)</pre></div>
<p><code>pack</code> and <code>unpack</code> also accept IO streams as arguments:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">pack</span>(io, <span class="pl-s"><span class="pl-pds">"</span>see it really does take an IO stream<span class="pl-pds">"</span></span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unpack</span>(<span class="pl-c1">seekstart</span>(io))
<span class="pl-s"><span class="pl-pds">"</span>see it really does take an IO stream<span class="pl-pds">"</span></span></pre></div>
<h2><a id="user-content-translating-between-julia-and-messagepack-types" class="anchor" aria-hidden="true" href="#translating-between-julia-and-messagepack-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Translating between Julia and MessagePack types</h2>
<p>By default, MsgPack defines (de)serialization between the following Julia and MessagePack types:</p>
<table>
<thead>
<tr>
<th>MessagePack Type</th>
<th><code>AbstractMsgPackType</code> Subtype</th>
<th>Julia Types</th>
</tr>
</thead>
<tbody>
<tr>
<td>Integer</td>
<td><code>IntegerType</code></td>
<td><code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, <code>UInt64</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code></td>
</tr>
<tr>
<td>Nil</td>
<td><code>NilType</code></td>
<td><code>Nothing</code>, <code>Missing</code></td>
</tr>
<tr>
<td>Boolean</td>
<td><code>BooleanType</code></td>
<td><code>Bool</code></td>
</tr>
<tr>
<td>Float</td>
<td><code>FloatType</code></td>
<td><code>Float32</code>, <code>Float64</code></td>
</tr>
<tr>
<td>String</td>
<td><code>StringType</code></td>
<td><code>AbstractString</code>, <code>Char</code>, <code>Symbol</code></td>
</tr>
<tr>
<td>Array</td>
<td><code>ArrayType</code></td>
<td><code>AbstractArray</code>, <code>AbstractSet</code>, <code>Tuple</code></td>
</tr>
<tr>
<td>Map</td>
<td><code>MapType</code></td>
<td><code>AbstractDict</code>, <code>NamedTuple</code></td>
</tr>
<tr>
<td>Binary</td>
<td><code>BinaryType</code></td>
<td>(no defaults)</td>
</tr>
<tr>
<td>Extension</td>
<td><code>ExtensionType</code></td>
<td>(no defaults)</td>
</tr>
</tbody>
</table>
<p>To support additional Julia types, we can define that type's "translation" to its corresponding <code>AbstractMsgPackType</code> via the following methods:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MsgPack, UUIDs

<span class="pl-c"><span class="pl-c">#</span> declare `UUID`'s correspondence to the MessagePack String type</span>
julia<span class="pl-k">&gt;</span> MsgPack<span class="pl-k">.</span><span class="pl-en">msgpack_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type{UUID}</span>) <span class="pl-k">=</span> MsgPack<span class="pl-k">.</span><span class="pl-c1">StringType</span>()

<span class="pl-c"><span class="pl-c">#</span> convert UUIDs to a MessagePack String-compatible representation for serialization</span>
julia<span class="pl-k">&gt;</span> MsgPack<span class="pl-k">.</span><span class="pl-en">to_msgpack</span>(<span class="pl-k">::</span><span class="pl-c1">MsgPack.StringType</span>, uuid<span class="pl-k">::</span><span class="pl-c1">UUID</span>) <span class="pl-k">=</span> <span class="pl-c1">string</span>(uuid)

<span class="pl-c"><span class="pl-c">#</span> convert values deserialized as MessagePack Strings to UUIDs</span>
julia<span class="pl-k">&gt;</span> MsgPack<span class="pl-k">.</span><span class="pl-en">from_msgpack</span>(<span class="pl-k">::</span><span class="pl-c1">Type{UUID}</span>, uuid<span class="pl-k">::</span><span class="pl-c1">AbstractString</span>) <span class="pl-k">=</span> <span class="pl-c1">UUID</span>(uuid)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unpack</span>(<span class="pl-c1">pack</span>(<span class="pl-c1">uuid4</span>()))
<span class="pl-s"><span class="pl-pds">"</span>df416048-e513-41c5-aa49-32623d5d7e1f<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">unpack</span>(<span class="pl-c1">pack</span>(<span class="pl-c1">uuid4</span>()), UUID)
<span class="pl-c1">UUID</span>(<span class="pl-s"><span class="pl-pds">"</span>4812d96f-bc7b-434b-ac54-1985a1263882<span class="pl-pds">"</span></span>)</pre></div>
<p>Note that each subtype of <code>AbstractMsgPackType</code> makes its own assumptions about the return values of <code>to_msgpack</code> and <code>from_msgpack</code>; these assumptions are documented in the subtype's docstring. For additional details, see the docstrings for <code>AbstractMsgPackType</code>, <code>msgpack_type</code>, <code>to_msgpack</code>, and <code>from_msgpack</code>.</p>
<h2><a id="user-content-automatic-struct-deserialization" class="anchor" aria-hidden="true" href="#automatic-struct-deserialization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Automatic <code>struct</code> (de)serialization</h2>
<p>MsgPack provides an interface that facilitates automatic, performant (de)serialization of MessagePack Maps to/from Julia <code>struct</code>s. Like <a href="https://github.com/quinnj/JSON3.jl">JSON3.jl</a>, MsgPack's interface supports two different possibilities: a slower approach that doesn't depend on field ordering during deserialization, and a faster approach that does:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> MsgPack

julia<span class="pl-k">&gt;</span> <span class="pl-k">struct</span> MyMessage
           a<span class="pl-k">::</span><span class="pl-c1">Int</span>
           b<span class="pl-k">::</span><span class="pl-c1">String</span>
           c<span class="pl-k">::</span><span class="pl-c1">Bool</span>
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> MsgPack<span class="pl-k">.</span><span class="pl-en">msgpack_type</span>(<span class="pl-k">::</span><span class="pl-c1">Type{MyMessage}</span>) <span class="pl-k">=</span> MsgPack<span class="pl-k">.</span><span class="pl-c1">StructType</span>()

julia<span class="pl-k">&gt;</span> messages <span class="pl-k">=</span> [<span class="pl-c1">MyMessage</span>(<span class="pl-c1">rand</span>(Int), <span class="pl-c1">join</span>(<span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>z<span class="pl-pds">'</span></span>, <span class="pl-c1">10</span>)), <span class="pl-c1">rand</span>(Bool)) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{MyMessage,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">MyMessage</span>(<span class="pl-c1">4625239811981161650</span>, <span class="pl-s"><span class="pl-pds">"</span>whosayfsvb<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)
 <span class="pl-c1">MyMessage</span>(<span class="pl-c1">4988660392033153177</span>, <span class="pl-s"><span class="pl-pds">"</span>mazsmrsawu<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>)
 <span class="pl-c1">MyMessage</span>(<span class="pl-c1">7955638288702558596</span>, <span class="pl-s"><span class="pl-pds">"</span>gueytzhjvy<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)

julia<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">pack</span>(messages);

<span class="pl-c"><span class="pl-c">#</span> slower, but does not assume struct field ordering</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">unpack</span>(bytes, Vector{MyMessage})
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{MyMessage,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">MyMessage</span>(<span class="pl-c1">4625239811981161650</span>, <span class="pl-s"><span class="pl-pds">"</span>whosayfsvb<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)
 <span class="pl-c1">MyMessage</span>(<span class="pl-c1">4988660392033153177</span>, <span class="pl-s"><span class="pl-pds">"</span>mazsmrsawu<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>)
 <span class="pl-c1">MyMessage</span>(<span class="pl-c1">7955638288702558596</span>, <span class="pl-s"><span class="pl-pds">"</span>gueytzhjvy<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> faster, but assumes incoming struct fields are ordered</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">unpack</span>(bytes, Vector{MyMessage}; strict<span class="pl-k">=</span>(MyMessage,))
 <span class="pl-c1">3</span><span class="pl-k">-</span>element Array{MyMessage,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
  <span class="pl-c1">MyMessage</span>(<span class="pl-c1">4625239811981161650</span>, <span class="pl-s"><span class="pl-pds">"</span>whosayfsvb<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)
  <span class="pl-c1">MyMessage</span>(<span class="pl-c1">4988660392033153177</span>, <span class="pl-s"><span class="pl-pds">"</span>mazsmrsawu<span class="pl-pds">"</span></span>, <span class="pl-c1">false</span>)
  <span class="pl-c1">MyMessage</span>(<span class="pl-c1">7955638288702558596</span>, <span class="pl-s"><span class="pl-pds">"</span>gueytzhjvy<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)</pre></div>
<p><strong>Do not use <code>strict=(T,)</code> unless you can ensure that all MessagePack Maps corresponding to <code>T</code> maintain the exact key-value pairs corresponding to <code>T</code>'s fields in the exact same order as specified by <code>T</code>'s Julia definition.</strong> This property generally cannot be assumed unless you, yourself, were the original serializer of the message.</p>
<p>For additional details, see the docstrings for <code>StructType</code>, <code>unpack</code>, and <code>construct</code>.</p>
<h2><a id="user-content-immutable-lazy-julia-views-over-messagepack-bytes" class="anchor" aria-hidden="true" href="#immutable-lazy-julia-views-over-messagepack-bytes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Immutable, lazy Julia views over MessagePack bytes</h2>
<p>Often, one will want to delay full deserialization of a MessagePack collection, and instead only deserialize elements upon access. To facilitate this approach, MsgPack provides the <code>ArrayView</code> and <code>MapView</code> types. Reusing the toy <code>MyMessage</code> from the earlier example:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BenchmarkTools

julia<span class="pl-k">&gt;</span> bytes <span class="pl-k">=</span> <span class="pl-c1">pack</span>([<span class="pl-c1">MyMessage</span>(<span class="pl-c1">rand</span>(Int), <span class="pl-c1">join</span>(<span class="pl-c1">rand</span>(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>z<span class="pl-pds">'</span></span>, <span class="pl-c1">10</span>)), <span class="pl-c1">rand</span>(Bool)) <span class="pl-k">for</span> _ <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10_000_000</span>]);

<span class="pl-c"><span class="pl-c">#</span> deserialize the whole thing in one go</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> x <span class="pl-k">=</span> <span class="pl-c1">unpack</span>(bytes, Vector{MyMessage});
  <span class="pl-c1">3.547294</span> seconds (<span class="pl-c1">20.00</span> M allocations<span class="pl-k">:</span> <span class="pl-c1">686.646</span> MiB, <span class="pl-c1">13.42</span><span class="pl-k">%</span> gc time)

<span class="pl-c"><span class="pl-c">#</span> scan bytes to tag object positions, but don't fully deserialize</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time</span> v <span class="pl-k">=</span> <span class="pl-c1">unpack</span>(bytes, MsgPack<span class="pl-k">.</span>ArrayView{MyMessage});
  <span class="pl-c1">0.462374</span> seconds (<span class="pl-c1">14</span> allocations<span class="pl-k">:</span> <span class="pl-c1">76.295</span> MiB)

<span class="pl-c"><span class="pl-c">#</span> has normal `Vector` access performance, since it's a normal `Vector`</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>x[<span class="pl-c1">1</span>]
  <span class="pl-c1">1.824</span> ns (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">MyMessage</span>(<span class="pl-k">-</span><span class="pl-c1">5988715016767300083</span>, <span class="pl-s"><span class="pl-pds">"</span>anrcvpbqge<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> access time is much slower, since element is deserialized upon access</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-k">$</span>v[<span class="pl-c1">1</span>]
  <span class="pl-c1">274.990</span> ns (<span class="pl-c1">4</span> allocations<span class="pl-k">:</span> <span class="pl-c1">176</span> bytes)
<span class="pl-c1">MyMessage</span>(<span class="pl-k">-</span><span class="pl-c1">5988715016767300083</span>, <span class="pl-s"><span class="pl-pds">"</span>anrcvpbqge<span class="pl-pds">"</span></span>, <span class="pl-c1">true</span>)</pre></div>
<p>For additional details, see the docstrings for <code>ArrayView</code> and <code>MapView</code>.</p>
<h2><a id="user-content-should-i-use-json-or-messagepack" class="anchor" aria-hidden="true" href="#should-i-use-json-or-messagepack"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Should I use JSON or MessagePack?</h2>
<p>Use JSON by default (with the lovely JSON3 package!), and only switch to MessagePack if you actually measure a significant performance benefit from doing so. In my experience, the main potential advantage of MessagePack is improved (de)serialization performance for certain kinds of structures. If you merely seek to reduce message size, MessagePack has little advantage over JSON, as general-purpose compression seems to achieve similar sizes when applied to either format.</p>
</article></div>