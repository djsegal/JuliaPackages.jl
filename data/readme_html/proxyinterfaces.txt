<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-proxyinterfaces" class="anchor" aria-hidden="true" href="#proxyinterfaces"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>ProxyInterfaces</h1>
<p dir="auto"><a href="https://github.com/schlichtanders/ProxyInterfaces.jl/actions"><img src="https://github.com/schlichtanders/ProxyInterfaces.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/schlichtanders/ProxyInterfaces.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f3f2fb2d654dbe8cd7296c7a2b80023c4123dd9d69ad668ad71a9a928cfd409f/68747470733a2f2f636f6465636f762e696f2f67682f7363686c69636874616e646572732f50726f7879496e74657266616365732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/schlichtanders/ProxyInterfaces.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Install it like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
pkg&quot;add ProxyInterfaces&quot;"><pre><span class="pl-k">using</span> Pkg
<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pkg</span>"</span>add ProxyInterfaces<span class="pl-pds">"</span></span></pre></div>
<p dir="auto">Load it like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using ProxyInterfaces"><pre><span class="pl-k">using</span> ProxyInterfaces</pre></div>
<p dir="auto">It gives you access to macros which define standard interfaces for your custom proxy type. Currently, the following interfaces are supported:</p>
<ul dir="auto">
<li>iterator (<a href="src/iterator.jl">implementation</a>, <a href="test/iterator.jl">tests</a>)</li>
<li>indexing (<a href="src/indexing.jl">implementation</a>, <a href="test/indexing.jl">tests</a>)</li>
<li>indexing_mutable (<a href="src/indexing.jl">implementation</a>, <a href="test/indexing.jl">tests</a>)</li>
<li>array (<a href="src/array.jl">implementation</a>, <a href="test/array.jl">tests</a>)</li>
<li>array_mutable (<a href="src/array.jl">implementation</a>, <a href="test/array.jl">tests</a>)</li>
<li>dict (<a href="src/dict.jl">implementation</a>, <a href="test/dict.jl">tests</a>)</li>
<li>dict_mutable (<a href="src/dict.jl">implementation</a>, <a href="test/dict.jl">tests</a>)</li>
</ul>
<p dir="auto">In addition it also exports the famous <code>@forward MyWrapper.myfield func1, func2, func3</code> helper, for quick method
forwarding to a struct field.</p>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">Let's take an example proxy type. A proxy type is understood as a type which wraps another type.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct DictProxy{K, V}
  dict::Dict{K, V}
end"><pre><span class="pl-k">struct</span> DictProxy{K, V}
  dict<span class="pl-k">::</span><span class="pl-c1">Dict{K, V}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">In this case it only wraps the standard dict with an additional Tag, namely the Type <code>DictProxy</code> itself.</p>
<p dir="auto">You can now define standard dict functionality for your proxy with the following three lines</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ProxyInterfaces.dict(::Type{DictProxy{K,V}}) where {K, V} = Dict{K, V}
ProxyInterfaces.dict(p::DictProxy) = p.dict
ProxyInterfaces.@dict DictProxy"><pre>ProxyInterfaces<span class="pl-k">.</span><span class="pl-en">dict</span>(<span class="pl-k">::</span><span class="pl-c1">Type{DictProxy{K,V}}</span>) <span class="pl-k">where</span> {K, V} <span class="pl-k">=</span> Dict{K, V}
ProxyInterfaces<span class="pl-k">.</span><span class="pl-en">dict</span>(p<span class="pl-k">::</span><span class="pl-c1">DictProxy</span>) <span class="pl-k">=</span> p<span class="pl-k">.</span>dict
ProxyInterfaces<span class="pl-k">.</span><span class="pl-c1">@dict</span> DictProxy</pre></div>
<p dir="auto">With this you can now use standard dict syntax for your DictProxy</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="d = DictProxy(Dict(:a =&gt; 1, :b =&gt; c))
d[:a]  # 1
keys(d) # [:a, :b]
values(d) # [1, 2]
haskey(d, :b) # true
# d[:c] = 5  # WONT'T WORK because this is the immutable interface. use `ProxyInterfaces.dict_mutable` and it will work"><pre>d <span class="pl-k">=</span> <span class="pl-c1">DictProxy</span>(<span class="pl-c1">Dict</span>(<span class="pl-c1">:a</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">:b</span> <span class="pl-k">=&gt;</span> c))
d[<span class="pl-c1">:a</span>]  <span class="pl-c"><span class="pl-c">#</span> 1</span>
<span class="pl-c1">keys</span>(d) <span class="pl-c"><span class="pl-c">#</span> [:a, :b]</span>
<span class="pl-c1">values</span>(d) <span class="pl-c"><span class="pl-c">#</span> [1, 2]</span>
<span class="pl-c1">haskey</span>(d, <span class="pl-c1">:b</span>) <span class="pl-c"><span class="pl-c">#</span> true</span>
<span class="pl-c"><span class="pl-c">#</span> d[:c] = 5  # WONT'T WORK because this is the immutable interface. use `ProxyInterfaces.dict_mutable` and it will work</span></pre></div>
<p dir="auto">Only these three steps are needed for every ProxyInterfaces <code>respectivename</code>:</p>
<ul dir="auto">
<li>overwrite <code>ProxyInterfaces.respectivename(::Type{YourProxyType})</code> to define how the proxy TYPE maps to the original type</li>
<li>overwrite <code>ProxyInterfaces.respectivename(p::YourProxyType)</code> to extract the underlying original out of the given proxy instance</li>
<li>call <code>ProxyInterfaces.@respectivename</code></li>
</ul>
<h2 dir="auto"><a id="user-content-contributing" class="anchor" aria-hidden="true" href="#contributing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Contributing</h2>
<p dir="auto">Help is highly appreciated. There are many interfaces in Julia which are defined by documentation rather than code. This package <code>ProxyInterfaces</code> can work as a code reference.</p>
<p dir="auto">In case you are missing a standard interface or a concrete function for an already supported interface, please open an issue. Pull request are also highly welcome.</p>
</article></div>