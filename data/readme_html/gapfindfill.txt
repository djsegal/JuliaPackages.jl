<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-gapfindfilljl-documentation" class="anchor" aria-hidden="true" href="#gapfindfilljl-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>GapFindFill.jl Documentation</h1>
<ul dir="auto">
<li><a href="https://github.com/varnerlab/GapFindFill.jl/blob/master/README.md#statement-of-need">Statement of need</a></li>
<li><a href="https://github.com/varnerlab/GapFindFill.jl/blob/master/README.md#installation-instruction">Installation instruction</a></li>
<li><a href="https://github.com/varnerlab/GapFindFill.jl/blob/master/README.md#example">Example</a></li>
<li><a href="https://github.com/varnerlab/GapFindFill.jl/blob/master/README.md#api-documentation">API documentation</a></li>
<li><a href="https://github.com/varnerlab/GapFindFill.jl/blob/master/README.md#reference">Reference</a></li>
<li><a href="https://github.com/varnerlab/GapFindFill.jl/blob/master/README.md#support-or-contact">Support or Contact</a></li>
</ul>
<h2 dir="auto"><a id="user-content-statement-of-need" class="anchor" aria-hidden="true" href="#statement-of-need"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Statement of need</h2>
<p dir="auto">The current implementation of <em>GapFind</em> and <em>GapFill</em> is in GAMS, which charges a significant amount of license fee from each single user, even though many solvers are free for academic purpose.
To promote the usage of this computational tool, we developed this open-source Julia package, <code>GapFindFill.jl</code>, to enable researchers to use <em>GapFind</em> and <em>GapFill</em> for free by harnessing the power of academic free solvers provided by <a href="https://www.gurobi.com/" rel="nofollow">Gurobi</a> and <a href="https://www.ibm.com/analytics/cplex-optimizer" rel="nofollow">IBM</a>.
<code>GapFindFill.jl</code> is implemented in Julia and makes use of the high-level interface <a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a>.
JuMP is a domain-specific modeling language for mathematical optimization embedded in Julia.
With JuMP, it is easier for users to specify and call different optimizers to solve optimization problems in <code>GapFindFill.jl</code> than using interfaces provided by solvers directly.
Built upon the generic high-level programming language Julia, users can embed <code>GapFindFill.jl</code> in their complex work flows to simplify task processing. While GAMS, as a specific optimization tool, does not provide support for processing other tasks, nor being able to be integrated with other programming languages.</p>
<h2 dir="auto"><a id="user-content-installation-instruction" class="anchor" aria-hidden="true" href="#installation-instruction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation instruction</h2>
<p dir="auto"><strong>Requirement</strong>.
In order to use SEML, the user needs to <a href="https://julialang.org/downloads/platform.html" rel="nofollow">install Julia</a> first. This version is built on <a href="https://julialang.org/downloads/oldreleases.html" rel="nofollow">Julia v1.1</a>.
<a href="https://github.com/JuliaOpt/Gurobi.jl">Gurobi.jl</a> is used in GapFindFill.jl as the default solver for both gap finding and filling. <a href="http://www.gurobi.com/" rel="nofollow">Gurobi</a> provides free academic license for non-commercial use.
Users can also choose to use <a href="https://github.com/JuliaOpt/GLPK.jl">GLPK.jl</a> or <a href="https://github.com/JuliaOpt/CPLEX.jl">CPLEX.jl</a> for gap finding. GLPK is free for all users, while CPLEX provides free academic license. But note that comparing to Gurobi and CPLEX, it takes GLPK much more time and memory to solve the same problem.
For gap filling, Gurobi is set as the only solver since it worked way better than the other two in our tests.</p>
<p dir="auto">For <a href="https://julialang.org/downloads/" rel="nofollow">Julia v1.0</a> users, any package compatibility issues while testing GapFindFill.jl can be resolved through pinning CPLEX.jl and Gurobi.jl to a specific version by running following commands in <code>pkg&gt;</code> mode:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="pin Gurobi@0.6.0
pin CPLEX@0.5.0"><pre>pin Gurobi@<span class="pl-c1">0.6</span>.<span class="pl-c1">0</span>
pin CPLEX@<span class="pl-c1">0.5</span>.<span class="pl-c1">0</span></pre></div>
<p dir="auto">For <a href="https://julialang.org/downloads/" rel="nofollow">Julia v1.2</a> users, GapFindFill.jl will be compatible with Julia v1.2 once <a href="https://github.com/JuliaOpt/CPLEX.jl">CPLEX.jl</a> is updated for Julia v1.2.</p>
<p dir="auto"><strong>Installation</strong>.
Within Julia, press <code>]</code> to enter <code>pkg&gt;</code> mode.
To install GapFindFill.jl, issue</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add GapFindFill"><pre>add GapFindFill</pre></div>
<p dir="auto">or issue</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add https://github.com/varnerlab/GapFindFill.jl.git"><pre>add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>varnerlab<span class="pl-k">/</span>GapFindFill<span class="pl-k">.</span>jl<span class="pl-k">.</span>git</pre></div>
<p dir="auto">To use GapFindFill in your project simply issue the command:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using GapFindFill"><pre><span class="pl-k">using</span> GapFindFill</pre></div>
<p dir="auto"><strong>Test</strong>.
To test GapFindFill installation, use the following command in <code>pkg&gt;</code> mode:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="test GapFindFill"><pre>test GapFindFill</pre></div>
<p dir="auto">which runs two examples under <a href="https://github.com/varnerlab/GapFindFill/tree/master/test">test</a> directory.
The expected outcomes from this test set are illustrated in <a href="https://github.com/varnerlab/GapFindFill/blob/master/README.md#example">Example</a> section.</p>
<p dir="auto"><strong>Uninstallation</strong>.
To delete GapFindFill package use the following command in <code>pkg&gt;</code> mode:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="rm GapFindFill"><pre>rm GapFindFill</pre></div>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Two examples are provided under <a href="https://github.com/varnerlab/GapFindFill/tree/master/test">test</a> showing how to use GapFindFill.jl to solve two problems in Manaras paper.
<a href="https://github.com/varnerlab/GapFindFill/blob/master/test/testGapFind.jl">testGapFind.jl</a> and
<a href="https://github.com/varnerlab/GapFindFill/blob/master/test/testGapFill.jl">testGapFill.jl</a> demonstrate how to set up <em>GapFind</em> and <em>GapFill</em> models, respectively.
We reported our experimental results here for users' reference. All experiments were run on an Intel Core i7-6700 CPU with Ubuntu 18.04.3 LTS.</p>
<p dir="auto">For <em>find_gaps</em>, the testing example contains 1668 compounds and 2383 reactions, which is of size of real problems.
The expected outcome is to find 115 blocked metabollites in the network, namely, 1553 non-blocked metabolites. The following table shows running time comparison between GAMS and GapFindFill.jl on gap finding.</p>
<table>
<thead>
<tr>
<th align="left">Software</th>
<th align="left">Solver</th>
<th align="left">Running time (s)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">GAMS</td>
<td align="left">CPLEX</td>
<td align="left">3.3</td>
</tr>
<tr>
<td align="left">GAMS</td>
<td align="left">Gurobi</td>
<td align="left">0.6</td>
</tr>
<tr>
<td align="left">GapFindFill.jl</td>
<td align="left">CPLEX</td>
<td align="left">68.4</td>
</tr>
<tr>
<td align="left">GapFindFill.jl</td>
<td align="left">Gurobi</td>
<td align="left">64.5</td>
</tr>
</tbody>
</table>
<p dir="auto">GAMS is pretty fast in solving large size problems like the testing example, but GapFindFill.jl finished the job in less than 2 mins, which is also acceptable for real problems as large as this example.
Using either Gurobi or CPLEX in GapFindFill.jl did not make much difference in running time, while GLPK was unable to solve the testing example within 1 hr.
Thus, although <em>find_gaps</em> allows users to specify GLPK as the solver, it is recommended only for small-scale problems.</p>
<p dir="auto">For <em>fill_gaps_min</em>, the testing example contains 1822 compounds and 2888 reactions, which is also of size of real problems. Five no-production-metabolites were chosen as testing cases. The expected outcomes are summarized in the following table.</p>
<table>
<thead>
<tr>
<th align="left">No-production-metabolite</th>
<th align="left">Solution 1</th>
<th align="left">Solution 2</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">2doxg6p[c]</td>
<td align="left">EX_2DOXG6P(e) &amp; 2DOXG6P_t</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2dglc[c]</td>
<td align="left">EX_2DGLC(e) &amp; 2DGLC_t</td>
<td align="left">EX_2DOXG6P(e) &amp; 2DOXG6P_t</td>
</tr>
<tr>
<td align="left">alatrna[c]</td>
<td align="left">TRNAALA_t &amp; EX_TRNAALA(e)</td>
<td align="left">ALATRNA_t &amp; EX_ALATRNA(e)</td>
</tr>
<tr>
<td align="left">2dr5p[c]</td>
<td align="left">DRIB_t &amp; EX_DRIB(e)</td>
<td align="left">2DR5P_t &amp; EX_2DR5P(e)</td>
</tr>
<tr>
<td align="left">4gudbutn[c]</td>
<td align="left">4GUDBD_t &amp; EX_4GUDBD(e)</td>
<td align="left">4GUDBUTN_t &amp; EX_4GUDBUTN(e)</td>
</tr>
</tbody>
</table>
<p dir="auto">The following table shows running time comparison between GAMS and GapFindFill.jl on gap filling.</p>
<table>
<thead>
<tr>
<th align="left">Software</th>
<th align="left">Solver</th>
<th align="left">Running time (s)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">GAMS</td>
<td align="left">Gurobi</td>
<td align="left">6.2</td>
</tr>
<tr>
<td align="left">GapFindFill.jl</td>
<td align="left">Gurobi</td>
<td align="left">28.7</td>
</tr>
</tbody>
</table>
<p dir="auto">The difference between GAMS and GapFindFill.jl is smaller than solving gap finding tasks.
This is largely because GapFindFill.jl got a speed-up from just-in-time feature of Julia as similar problems were solved repeatedly.</p>
<h2 dir="auto"><a id="user-content-api-documentation" class="anchor" aria-hidden="true" href="#api-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API documentation</h2>
<p dir="auto">Two interfaces are provided, <code>find_gaps()</code> and <code>fill_gaps_min()</code> for gap finding and filling respectively.</p>
<p dir="auto">The <code>find_gaps()</code> interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function find_gaps(isRev::Array{Bool}, isCyt::Array{Bool}, isExt::Array{Bool},
    stoiMatrix::Array{Float64}, fluxLB::Array{Float64}, fluxUB::Array{Float64};
    epsilon::Float64 =0.001, bigM::Float64 =1000.0, nonZero::Float64 =1e-8,
    solver::Module=Gurobi)"><pre><span class="pl-k">function</span> <span class="pl-en">find_gaps</span>(isRev<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>, isCyt<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>, isExt<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>,
    stoiMatrix<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>, fluxLB<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>, fluxUB<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>;
    epsilon<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span><span class="pl-c1">0.001</span>, bigM<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span><span class="pl-c1">1000.0</span>, nonZero<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span><span class="pl-c1">1e-8</span>,
    solver<span class="pl-k">::</span><span class="pl-c1">Module</span><span class="pl-k">=</span>Gurobi)</pre></div>
<p dir="auto">Inputs description:</p>
<table>
<thead>
<tr>
<th align="left">Argument</th>
<th align="left">Required</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">isRev</td>
<td align="left">yes</td>
<td align="left">true if corresponding reaction is reversible</td>
</tr>
<tr>
<td align="left">isCyt</td>
<td align="left">yes</td>
<td align="left">true if corresponding metabolite is in cytosol</td>
</tr>
<tr>
<td align="left">isExt</td>
<td align="left">yes</td>
<td align="left">true if corresponding metabolite is in extracellular compartment;</td>
</tr>
<tr>
<td align="left">stoiMatrix</td>
<td align="left">yes</td>
<td align="left">stoichiometric matrix, |compounds| * |reactions|</td>
</tr>
<tr>
<td align="left">fluxLB</td>
<td align="left">yes</td>
<td align="left">flux lower bound;</td>
</tr>
<tr>
<td align="left">fluxUB</td>
<td align="left">yes</td>
<td align="left">flux upper bound;</td>
</tr>
<tr>
<td align="left">epsilon</td>
<td align="left">optional</td>
<td align="left">minimum amount to be considered active;</td>
</tr>
<tr>
<td align="left">bigM</td>
<td align="left">optional</td>
<td align="left">constant used in MILP model;</td>
</tr>
<tr>
<td align="left">nonZero</td>
<td align="left">optional</td>
<td align="left">minimum stoichiometric coefficient to be considered non-zero;</td>
</tr>
<tr>
<td align="left">solver</td>
<td align="left">optional</td>
<td align="left">CPLEX, Gurobi or GLPK.</td>
</tr>
</tbody>
</table>
<p dir="auto">Outputs description:</p>
<table>
<thead>
<tr>
<th align="left">Argument</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">m</td>
<td align="left">the JuMP model;</td>
</tr>
<tr>
<td align="left">objVal</td>
<td align="left">objective value, i.e. number of non-blocked compounds;</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">termination status;</td>
</tr>
<tr>
<td align="left">binX</td>
<td align="left">1 if corresponding compound is non-blocked;</td>
</tr>
</tbody>
</table>
<p dir="auto">The <code>fill_gaps_min()</code> interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function fill_gaps_min(isMd::Array{Bool}, isDb::Array{Bool}, isRev::Array{Bool},
    isCyt::Array{Bool}, isExt::Array{Bool}, noProdID::Array{Integer},
    stoiMatrix::Array{Float64}, fluxLB::Array{Float64}, fluxUB::Array{Float64};
    epsilon::Float64 =0.001, bigM::Float64 =1000.0, nonZero::Float64 =1e-9)"><pre><span class="pl-k">function</span> <span class="pl-en">fill_gaps_min</span>(isMd<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>, isDb<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>, isRev<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>,
    isCyt<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>, isExt<span class="pl-k">::</span><span class="pl-c1">Array{Bool}</span>, noProdID<span class="pl-k">::</span><span class="pl-c1">Array{Integer}</span>,
    stoiMatrix<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>, fluxLB<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>, fluxUB<span class="pl-k">::</span><span class="pl-c1">Array{Float64}</span>;
    epsilon<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span><span class="pl-c1">0.001</span>, bigM<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span><span class="pl-c1">1000.0</span>, nonZero<span class="pl-k">::</span><span class="pl-c1">Float64</span> <span class="pl-k">=</span><span class="pl-c1">1e-9</span>)</pre></div>
<p dir="auto">Inputs description:</p>
<table>
<thead>
<tr>
<th align="left">Argument</th>
<th align="left">Required</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">isMd</td>
<td align="left">yes</td>
<td align="left">true if corresponding reaction is in the model;</td>
</tr>
<tr>
<td align="left">isDb</td>
<td align="left">yes</td>
<td align="left">true if corresponding reaction is in the database, i.e., not in the model;</td>
</tr>
<tr>
<td align="left">isRev</td>
<td align="left">yes</td>
<td align="left">true if corresponding reaction is reversible</td>
</tr>
<tr>
<td align="left">isCyt</td>
<td align="left">yes</td>
<td align="left">true if corresponding metabolite is in cytosol</td>
</tr>
<tr>
<td align="left">isExt</td>
<td align="left">yes</td>
<td align="left">true if corresponding metabolite is in extracellular compartment;</td>
</tr>
<tr>
<td align="left">noProdID</td>
<td align="left">yes</td>
<td align="left">indices of no-production-metabolites;</td>
</tr>
<tr>
<td align="left">stoiMatrix</td>
<td align="left">yes</td>
<td align="left">stoichiometric matrix, |compounds| * |reactions|</td>
</tr>
<tr>
<td align="left">fluxLB</td>
<td align="left">yes</td>
<td align="left">flux lower bound;</td>
</tr>
<tr>
<td align="left">fluxUB</td>
<td align="left">yes</td>
<td align="left">flux upper bound;</td>
</tr>
<tr>
<td align="left">epsilon</td>
<td align="left">optional</td>
<td align="left">minimum amount to be considered active;</td>
</tr>
<tr>
<td align="left">bigM</td>
<td align="left">optional</td>
<td align="left">constant used in MILP model;</td>
</tr>
<tr>
<td align="left">nonZero</td>
<td align="left">optional</td>
<td align="left">minimum stoichiometric coefficient to be considered non-zero.</td>
</tr>
</tbody>
</table>
<p dir="auto">Outputs description:</p>
<table>
<thead>
<tr>
<th align="left">Argument</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">results</td>
<td align="left">a dictionary, each key is an index of no-production-mebanolites, each value is a Set containing all possible gap filling ways with minimum number of added reactions.</td>
</tr>
</tbody>
</table>
<h2 dir="auto"><a id="user-content-reference" class="anchor" aria-hidden="true" href="#reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Reference:</h2>
<ul dir="auto">
<li>Maranas, Costas D., and Ali R. Zomorrodi. Optimization methods in metabolic networks. John Wiley &amp; Sons, 2016.</li>
<li>Kumar, Vinay Satish, Madhukar S. Dasika, and Costas D. Maranas. "Optimization based automated curation of metabolic reconstructions." BMC bioinformatics 8.1 (2007): 212.</li>
<li><a href="http://www.maranasgroup.com/software.htm" rel="nofollow">GapFind/GapFill</a> in <a href="https://www.gams.com/" rel="nofollow">GAMS</a></li>
</ul>
<h2 dir="auto"><a id="user-content-support-or-contact" class="anchor" aria-hidden="true" href="#support-or-contact"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Support or Contact</h2>
<p dir="auto">Having trouble at installation or function? Feel free to contact <a href="https://github.com/varnerlab">VarnerLab</a> or <a href="https://www.cheme.cornell.edu/faculty-directory/jeffrey-d-varner" rel="nofollow">authors</a>.</p>
</article></div>