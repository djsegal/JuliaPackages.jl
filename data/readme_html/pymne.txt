<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pymne" class="anchor" aria-hidden="true" href="#pymne"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PyMNE</h1>
<p>Julia interface to MNE-Python via PyCall</p>
<p><a href="https://github.com/beacon-biosignals/PyMNE.jl/actions"><img src="https://github.com/beacon-biosignals/PyMNE.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://codecov.io/github/beacon-biosignals/PyMNE.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/ac2ff733256ddfac6566e0df337baa143d4c3143b778401e44c5ac0cc91c7756/68747470733a2f2f636f6465636f762e696f2f6769746875622f626561636f6e2d62696f7369676e616c732f50794d4e452e6a6c2f62616467652e7376673f6272616e63683d6d61696e" alt="CodeCov" data-canonical-src="https://codecov.io/github/beacon-biosignals/PyMNE.jl/badge.svg?branch=main" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>This package uses <a href="https://github.com/JuliaPy/PyCall.jl/"><code>PyCall</code></a> to make
<a href="https://mne.tools" rel="nofollow">MNE-Python</a> available from within Julia. Unsurprisingly,
MNE-Python and its dependencies need to be installed in order for this to work
and PyMNE will attempt to install when the package is built.</p>
<p>By default, this installation happens in the "global" path for the Python used
by PyCall. If you're using PyCall via its hidden Miniconda install, your own
Anaconda environment, or a Python virtual environment, this is what you want.
(The "global" path is sandboxed to the Conda/virtual environment.) If you are
however using system Python, then you should set <code>ENV["PIPFLAGS"] = "--user"</code>
before <code>add</code>ing / <code>build</code>ing the package. By default, PyMNE will use the latest
MNE release available on <a href="https://pypi.org/project/mne/" rel="nofollow">PyPI</a>, but this can also
be changed via the <code>ENV["MNEVERSION"] = version_number</code> for your preferred
<code>version_number</code>. Note that PyMNE explicitly does not try to abstract out
the rather rapid API changes and deprecation cycle in MNE and as such, it is
incumbent upon the user to manage these versions accordingly.</p>
<p>Note that MNE-Python uses <a href="https://scikit-learn.org/stable/" rel="nofollow">scikit-learn</a> for certain functionality (e.g. ICA and the <code>decoding</code> module), but does not install it automatically as a dependency.
If you wish to take advantage of this functionality, the non-exported <code>install_sklearn</code> function will install <code>sklearn</code>, using the same environment variables as the main installation.</p>
<p>MNE-Python can also be installed them manually ahead of time.
From the shell, use <code>python -m pip install mne</code> for the latest stable release
or <code>python -m pip install mne==version_number</code> for a given <code>version_number</code>,
ensuring  that <code>python</code> is the same one that PyCall is using. Alternatively,
you can run this from within Julia:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyCall
pip = pyimport(&quot;pip&quot;)
pip.main([&quot;install&quot;, &quot;mne==version_number&quot;]) # specific version
"><pre><span class="pl-k">using</span> PyCall
pip <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>pip<span class="pl-pds">"</span></span>)
pip<span class="pl-k">.</span><span class="pl-c1">main</span>([<span class="pl-s"><span class="pl-pds">"</span>install<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mne==version_number<span class="pl-pds">"</span></span>]) <span class="pl-c"><span class="pl-c">#</span> specific version</span></pre></div>
<p>If you do not specify a version via <code>==version</code>, then the latest versions will be
installed. If you wish to upgrade versions, you can use
<code>python -m pip install --upgrade mne</code> or</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyCall
pip = pyimport(&quot;pip&quot;)
pip.main([&quot;install&quot;, &quot;--upgrade&quot;, &quot;mne&quot;])
"><pre><span class="pl-k">using</span> PyCall
pip <span class="pl-k">=</span> <span class="pl-c1">pyimport</span>(<span class="pl-s"><span class="pl-pds">"</span>pip<span class="pl-pds">"</span></span>)
pip<span class="pl-k">.</span><span class="pl-c1">main</span>([<span class="pl-s"><span class="pl-pds">"</span>install<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>--upgrade<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>mne<span class="pl-pds">"</span></span>])</pre></div>
<p>You can test your setup with <code>using PyCall; pyimport("mne")</code>.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>In the same philosophy as PyCall, this allows for the transparent use of
MNE-Python from within Julia.
The major things the package does are wrap the installation of MNE in the
package <code>build</code> step, load all the MNE functionality into the module namespace,
and provide a few accessors.</p>
<h3><a id="user-content-exposing-mne-python-in-julia" class="anchor" aria-hidden="true" href="#exposing-mne-python-in-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Exposing MNE-Python in Julia</h3>
<p>For example, in Python you can access the MNE docs like this:</p>
<div class="highlight highlight-source-python position-relative" data-snippet-clipboard-copy-content="import mne

mne.open_docs()
"><pre><span class="pl-k">import</span> <span class="pl-s1">mne</span>

<span class="pl-s1">mne</span>.<span class="pl-en">open_docs</span>()</pre></div>
<p>With PyMNE, you can do this from within Julia.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using PyMNE

PyMNE.open_docs()
"><pre><span class="pl-k">using</span> PyMNE

PyMNE<span class="pl-k">.</span><span class="pl-c1">open_docs</span>()</pre></div>
<p>The PyCall infrastructure also means that Python docstrings are available
in Julia:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="help?&gt; PyMNE.open_docs
Launch a new web browser tab with the MNE documentation.

    Parameters
    ----------
    kind : str | None
        Can be &quot;api&quot; (default), &quot;tutorials&quot;, or &quot;examples&quot;.
        The default can be changed by setting the configuration value
        MNE_DOCS_KIND.
    version : str | None
        Can be &quot;stable&quot; (default) or &quot;dev&quot;.
        The default can be changed by setting the configuration value
        MNE_DOCS_VERSION.
"><pre>help?<span class="pl-k">&gt;</span> PyMNE<span class="pl-k">.</span>open_docs
Launch a new web browser tab with the MNE documentation.

    Parameters
    <span class="pl-k">----------</span>
    kind <span class="pl-k">:</span> str <span class="pl-k">|</span> None
        Can be <span class="pl-s"><span class="pl-pds">"</span>api<span class="pl-pds">"</span></span> (default), <span class="pl-s"><span class="pl-pds">"</span>tutorials<span class="pl-pds">"</span></span>, or <span class="pl-s"><span class="pl-pds">"</span>examples<span class="pl-pds">"</span></span>.
        The default can be changed by setting the configuration value
        MNE_DOCS_KIND.
    version <span class="pl-k">:</span> str <span class="pl-k">|</span> None
        Can be <span class="pl-s"><span class="pl-pds">"</span>stable<span class="pl-pds">"</span></span> (default) or <span class="pl-s"><span class="pl-pds">"</span>dev<span class="pl-pds">"</span></span>.
        The default can be changed by setting the configuration value
        MNE_DOCS_VERSION.</pre></div>
<h3><a id="user-content-helping-with-type-conversions" class="anchor" aria-hidden="true" href="#helping-with-type-conversions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Helping with type conversions</h3>
<p>PyCall can be rather aggressive in converting standard types, such as
dictionaries, to their native Julia equivalents, but this can create problems
due to differences in the way inheritance is traditionally used between
languages.
As a concrete example, MNE-Python defines an <code>Info</code> type that extends the
Python dictionary.
If an <code>Info</code> object is accessed naively from Julia, then it is converted to a
dictionary and the subtyping is lost when passed back to Python, which can
result in type/method errors.
(There is <a href="https://github.com/JuliaPy/PyCall.jl/issues/629">some discussion</a>
about not automatically converting derived types in PyCall 2.0, exactly
because of this.)
To avoid this problem, PyMNE wraps a few methods to avoid this conversion,
namely Python's <code>mne.create_info</code> and the <code>info</code> property of many MNE types.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using PyMNE
julia&gt; dat = zeros(1, 100); # fake data
julia&gt; PyMNE.mne # direct access to the mne Python module without any wrapping
PyObject &lt;module 'mne' from '/home/ubuntu/.julia/conda/3/lib/python3.8/site-packages/mne/__init__.py'&gt;
julia&gt; naive_info = PyMNE.mne.create_info([:a], 100) # gets converted to a Julia dictionary
Dict{Any,Any} with 36 entries:
  &quot;projs&quot;           =&gt; Any[]
  &quot;utc_offset&quot;      =&gt; nothing
  &quot;dev_head_t&quot;      =&gt; Dict{Any,Any}(&quot;trans&quot;=&gt;[1.0 0.0 0.0 0.0; 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0; 0.0 0.0 0.0 1.0],&quot;to&quot;=&gt;4,&quot;from&quot;=&gt;1)
  &quot;experimenter&quot;    =&gt; nothing
  &quot;proj_name&quot;       =&gt; nothing
  &quot;nchan&quot;           =&gt; 1
  &quot;ctf_head_t&quot;      =&gt; nothing
  &quot;acq_stim&quot;        =&gt; nothing
  &quot;events&quot;          =&gt; Any[]
  &quot;lowpass&quot;         =&gt; 50.0
  &quot;helium_info&quot;     =&gt; nothing
  &quot;proc_history&quot;    =&gt; Any[]
  &quot;xplotter_layout&quot; =&gt; nothing
  &quot;dig&quot;             =&gt; nothing
  &quot;kit_system_id&quot;   =&gt; nothing
  &quot;file_id&quot;         =&gt; nothing
  ⋮                 =&gt; ⋮
julia&gt; PyMNE.io.RawArray(dat, naive_info) # RawArray requires an Info object and not a 'simple' dictionary
ERROR: PyError ($(Expr(:escape, :(ccall(#= /home/ubuntu/.julia/packages/PyCall/BcTLp/src/pyfncall.jl:43 =# @pysym(:PyObject_Call), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) &lt;class 'TypeError'&gt;
TypeError(&quot;info must be an instance of Info, got &lt;class 'dict'&gt; instead&quot;)
  File &quot;&lt;decorator-gen-158&gt;&quot;, line 21, in __init__
  File &quot;/home/ubuntu/.julia/conda/3/lib/python3.8/site-packages/mne/io/array/array.py&quot;, line 56, in __init__
    _validate_type(info, 'info', 'info')
  File &quot;/home/ubuntu/.julia/conda/3/lib/python3.8/site-packages/mne/utils/check.py&quot;, line 379, in _validate_type
    raise TypeError('%s must be an instance of %s, got %s instead'

Stacktrace:
 [1] pyerr_check at /home/ubuntu/.julia/packages/PyCall/BcTLp/src/exception.jl:62 [inlined]
. . .

julia&gt; wrapped_info = PyMNE.create_info([:a], 100) # preserves Python type and show method
PyObject &lt;Info | 7 non-empty values
 bads: []
 ch_names: a
 chs: 1 MISC
 custom_ref_applied: False
 highpass: 0.0 Hz
 lowpass: 50.0 Hz
 meas_date: unspecified
 nchan: 1
 projs: []
 sfreq: 100.0 Hz
&gt;

julia&gt; raw = PyMNE.io.RawArray(dat, wrapped_info) # now has right type
Creating RawArray with float64 data, n_channels=1, n_times=100
    Range : 0 ... 99 =      0.000 ...     0.990 secs
Ready.
PyObject &lt;RawArray | 1 x 100 (1.0 s), ~8 kB, data loaded&gt;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> PyMNE
julia<span class="pl-k">&gt;</span> dat <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(<span class="pl-c1">1</span>, <span class="pl-c1">100</span>); <span class="pl-c"><span class="pl-c">#</span> fake data</span>
julia<span class="pl-k">&gt;</span> PyMNE<span class="pl-k">.</span>mne <span class="pl-c"><span class="pl-c">#</span> direct access to the mne Python module without any wrapping</span>
PyObject <span class="pl-k">&lt;</span><span class="pl-k">module</span> <span class="pl-s"><span class="pl-pds">'</span>mne<span class="pl-pds">'</span></span> from <span class="pl-s"><span class="pl-pds">'</span>/home/ubuntu/.julia/conda/3/lib/python3.8/site-packages/mne/__init__.py<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>
julia<span class="pl-k">&gt;</span> naive_info <span class="pl-k">=</span> PyMNE<span class="pl-k">.</span>mne<span class="pl-k">.</span><span class="pl-c1">create_info</span>([<span class="pl-c1">:a</span>], <span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> gets converted to a Julia dictionary</span>
Dict{Any,Any} with <span class="pl-c1">36</span> entries<span class="pl-k">:</span>
  <span class="pl-s"><span class="pl-pds">"</span>projs<span class="pl-pds">"</span></span>           <span class="pl-k">=&gt;</span> Any[]
  <span class="pl-s"><span class="pl-pds">"</span>utc_offset<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>dev_head_t<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">Dict</span><span class="pl-c1">{Any,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>trans<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span>[<span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span> <span class="pl-c1">0.0</span>; <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">0.0</span> <span class="pl-c1">1.0</span>],<span class="pl-s"><span class="pl-pds">"</span>to<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">4</span>,<span class="pl-s"><span class="pl-pds">"</span>from<span class="pl-pds">"</span></span><span class="pl-k">=&gt;</span><span class="pl-c1">1</span>)
  <span class="pl-s"><span class="pl-pds">"</span>experimenter<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>proj_name<span class="pl-pds">"</span></span>       <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>nchan<span class="pl-pds">"</span></span>           <span class="pl-k">=&gt;</span> <span class="pl-c1">1</span>
  <span class="pl-s"><span class="pl-pds">"</span>ctf_head_t<span class="pl-pds">"</span></span>      <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>acq_stim<span class="pl-pds">"</span></span>        <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>events<span class="pl-pds">"</span></span>          <span class="pl-k">=&gt;</span> Any[]
  <span class="pl-s"><span class="pl-pds">"</span>lowpass<span class="pl-pds">"</span></span>         <span class="pl-k">=&gt;</span> <span class="pl-c1">50.0</span>
  <span class="pl-s"><span class="pl-pds">"</span>helium_info<span class="pl-pds">"</span></span>     <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>proc_history<span class="pl-pds">"</span></span>    <span class="pl-k">=&gt;</span> Any[]
  <span class="pl-s"><span class="pl-pds">"</span>xplotter_layout<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>dig<span class="pl-pds">"</span></span>             <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>kit_system_id<span class="pl-pds">"</span></span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  <span class="pl-s"><span class="pl-pds">"</span>file_id<span class="pl-pds">"</span></span>         <span class="pl-k">=&gt;</span> <span class="pl-c1">nothing</span>
  ⋮                 <span class="pl-k">=&gt;</span> ⋮
julia<span class="pl-k">&gt;</span> PyMNE<span class="pl-k">.</span>io<span class="pl-k">.</span><span class="pl-c1">RawArray</span>(dat, naive_info) <span class="pl-c"><span class="pl-c">#</span> RawArray requires an Info object and not a 'simple' dictionary</span>
ERROR<span class="pl-k">:</span> PyError (<span class="pl-k">$</span>(<span class="pl-c1">Expr</span>(<span class="pl-c1">:escape</span>, :(<span class="pl-c1">ccall</span>(<span class="pl-c"><span class="pl-c">#=</span> /home/ubuntu/.julia/packages/PyCall/BcTLp/src/pyfncall.jl:43 <span class="pl-c">=#</span></span> <span class="pl-c1">@pysym</span>(<span class="pl-c1">:PyObject_Call</span>), PyPtr, (PyPtr, PyPtr, PyPtr), o, pyargsptr, kw))))) <span class="pl-k">&lt;</span>class <span class="pl-s"><span class="pl-pds">'</span>TypeError<span class="pl-pds">'</span></span><span class="pl-k">&gt;</span>
<span class="pl-c1">TypeError</span>(<span class="pl-s"><span class="pl-pds">"</span>info must be an instance of Info, got &lt;class 'dict'&gt; instead<span class="pl-pds">"</span></span>)
  File <span class="pl-s"><span class="pl-pds">"</span>&lt;decorator-gen-158&gt;<span class="pl-pds">"</span></span>, line <span class="pl-c1">21</span>, <span class="pl-k">in</span> __init__
  File <span class="pl-s"><span class="pl-pds">"</span>/home/ubuntu/.julia/conda/3/lib/python3.8/site-packages/mne/io/array/array.py<span class="pl-pds">"</span></span>, line <span class="pl-c1">56</span>, <span class="pl-k">in</span> __init__
    <span class="pl-c1">_validate_type</span>(info, <span class="pl-s"><span class="pl-pds">'</span>info<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>info<span class="pl-pds">'</span></span>)
  File <span class="pl-s"><span class="pl-pds">"</span>/home/ubuntu/.julia/conda/3/lib/python3.8/site-packages/mne/utils/check.py<span class="pl-pds">"</span></span>, line <span class="pl-c1">379</span>, <span class="pl-k">in</span> _validate_type
    raise <span class="pl-c1">TypeError</span>(<span class="pl-s"><span class="pl-pds">'</span>%s must be an instance of %s, got %s instead<span class="pl-pds">'</span></span>

Stacktrace<span class="pl-k">:</span>
 [<span class="pl-c1">1</span>] pyerr_check at <span class="pl-k">/</span>home<span class="pl-k">/</span>ubuntu<span class="pl-k">/</span><span class="pl-k">.</span>julia<span class="pl-k">/</span>packages<span class="pl-k">/</span>PyCall<span class="pl-k">/</span>BcTLp<span class="pl-k">/</span>src<span class="pl-k">/</span>exception<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">62</span> [inlined]
. . .

julia<span class="pl-k">&gt;</span> wrapped_info <span class="pl-k">=</span> PyMNE<span class="pl-k">.</span><span class="pl-c1">create_info</span>([<span class="pl-c1">:a</span>], <span class="pl-c1">100</span>) <span class="pl-c"><span class="pl-c">#</span> preserves Python type and show method</span>
PyObject <span class="pl-k">&lt;</span>Info <span class="pl-k">|</span> <span class="pl-c1">7</span> non<span class="pl-k">-</span>empty values
 bads<span class="pl-k">:</span> []
 ch_names<span class="pl-k">:</span> a
 chs<span class="pl-k">:</span> <span class="pl-c1">1</span> MISC
 custom_ref_applied<span class="pl-k">:</span> False
 highpass<span class="pl-k">:</span> <span class="pl-c1">0.0</span> Hz
 lowpass<span class="pl-k">:</span> <span class="pl-c1">50.0</span> Hz
 meas_date<span class="pl-k">:</span> unspecified
 nchan<span class="pl-k">:</span> <span class="pl-c1">1</span>
 projs<span class="pl-k">:</span> []
 sfreq<span class="pl-k">:</span> <span class="pl-c1">100.0</span> Hz
<span class="pl-k">&gt;</span>

julia<span class="pl-k">&gt;</span> raw <span class="pl-k">=</span> PyMNE<span class="pl-k">.</span>io<span class="pl-k">.</span><span class="pl-c1">RawArray</span>(dat, wrapped_info) <span class="pl-c"><span class="pl-c">#</span> now has right type</span>
Creating RawArray with float64 data, n_channels<span class="pl-k">=</span><span class="pl-c1">1</span>, n_times<span class="pl-k">=</span><span class="pl-c1">100</span>
    Range <span class="pl-k">:</span> <span class="pl-c1">0</span> <span class="pl-k">...</span> <span class="pl-c1">99</span> <span class="pl-k">=</span>      <span class="pl-c1">0.000</span> <span class="pl-k">...</span>     <span class="pl-c1">0.990</span> secs
Ready.
PyObject <span class="pl-k">&lt;</span>RawArray <span class="pl-k">|</span> <span class="pl-c1">1</span> x <span class="pl-c1">100</span> (<span class="pl-c1">1.0</span> s), <span class="pl-k">~</span><span class="pl-c1">8</span> kB, data loaded<span class="pl-k">&gt;</span></pre></div>
<p>This also leads to the only exported function <code>get_info</code>, which is just a
type-preserving accessor the <code>info</code> property of many MNE types:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; get_info(raw)
PyObject &lt;Info | 7 non-empty values
 bads: []
 ch_names: a
 chs: 1 MISC
 custom_ref_applied: False
 highpass: 0.0 Hz
 lowpass: 50.0 Hz
 meas_date: unspecified
 nchan: 1
 projs: []
 sfreq: 100.0 Hz
&gt;
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_info</span>(raw)
PyObject <span class="pl-k">&lt;</span>Info <span class="pl-k">|</span> <span class="pl-c1">7</span> non<span class="pl-k">-</span>empty values
 bads<span class="pl-k">:</span> []
 ch_names<span class="pl-k">:</span> a
 chs<span class="pl-k">:</span> <span class="pl-c1">1</span> MISC
 custom_ref_applied<span class="pl-k">:</span> False
 highpass<span class="pl-k">:</span> <span class="pl-c1">0.0</span> Hz
 lowpass<span class="pl-k">:</span> <span class="pl-c1">50.0</span> Hz
 meas_date<span class="pl-k">:</span> unspecified
 nchan<span class="pl-k">:</span> <span class="pl-c1">1</span>
 projs<span class="pl-k">:</span> []
 sfreq<span class="pl-k">:</span> <span class="pl-c1">100.0</span> Hz
<span class="pl-k">&gt;</span></pre></div>
<p>If other automatic type conversions are found to be problematic or there are
particular MNE functions that don't play nice via the default PyCall mechanisms,
then issues and pull requests are welcome.</p>
</article></div>