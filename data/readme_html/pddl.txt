<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-pddljl" class="anchor" aria-hidden="true" href="#pddljl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>PDDL.jl</h1>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/8a5d4fa3134cdb3d9642f24254027aab4f310dbd1378c1a5fe3102dd1e839bd0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4a756c6961506c616e6e6572732f5044444c2e6a6c2f4349"><img src="https://camo.githubusercontent.com/8a5d4fa3134cdb3d9642f24254027aab4f310dbd1378c1a5fe3102dd1e839bd0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4a756c6961506c616e6e6572732f5044444c2e6a6c2f4349" alt="GitHub Workflow Status" data-canonical-src="https://img.shields.io/github/workflow/status/JuliaPlanners/PDDL.jl/CI" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/b2b0f2982c001932c6b33621daeba5c2794718ec582c46fac673f1edeb1f585b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4a756c6961506c616e6e6572732f5044444c2e6a6c"><img src="https://camo.githubusercontent.com/b2b0f2982c001932c6b33621daeba5c2794718ec582c46fac673f1edeb1f585b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4a756c6961506c616e6e6572732f5044444c2e6a6c" alt="GitHub release (latest SemVer)" data-canonical-src="https://img.shields.io/github/v/release/JuliaPlanners/PDDL.jl" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/171388c9b7a55b32e67ab601edd0b58983f2f98d5ba2ce880fa6b1748e8e68dc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4a756c6961506c616e6e6572732f5044444c2e6a6c3f636f6c6f723d6c6967687467726579"><img src="https://camo.githubusercontent.com/171388c9b7a55b32e67ab601edd0b58983f2f98d5ba2ce880fa6b1748e8e68dc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4a756c6961506c616e6e6572732f5044444c2e6a6c3f636f6c6f723d6c6967687467726579" alt="GitHub" data-canonical-src="https://img.shields.io/github/license/JuliaPlanners/PDDL.jl?color=lightgrey" style="max-width:100%;"></a></p>
<p>A Julia parser and interpreter for the Planning Domain Definition Language (PDDL). Planners not included.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>Press <code>]</code> at the Julia REPL to enter the package manager, then run:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="add https://github.com/JuliaPlanners/PDDL.jl.git
"><pre><code>add https://github.com/JuliaPlanners/PDDL.jl.git
</code></pre></div>
<h2><a id="user-content-features" class="anchor" aria-hidden="true" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Features</h2>
<ul>
<li>Parsing of PDDL domain and problem files</li>
<li>Execution of PDDL actions and plans</li>
<li>Support for the following PDDL requirements:
<ul>
<li><code>:strips</code> - the most restricted functionality</li>
<li><code>:typing</code> - (hierarchically) typed objects</li>
<li><code>:equality</code> - comparing equality <code>=</code> of objects</li>
<li><code>:quantified-preconditions</code> - <code>forall</code> and <code>exists</code></li>
<li><code>:disjunctive-preconditions</code> - <code>or</code> predicates</li>
<li><code>:conditional-effects</code> - <code>when</code> and <code>forall</code> effects</li>
<li><code>:adl</code> - shorthand for the above 6 requirements</li>
<li><code>:fluents</code> - numeric fluents</li>
<li><code>:derived-predicates</code> - a.k.a. domain axioms / Horn clauses</li>
</ul>
</li>
</ul>
<p><code>PDDL.jl</code> does not include any planning algorithms. Rather, it aims to provide an
interface so that planners for PDDL domains can easily be written in Julia, as
in <a href="https://github.com/JuliaPlanners/SymbolicPlanners.jl"><code>SymbolicPlanners.jl</code></a>.</p>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example</h2>
<p><code>PDDL.jl</code> can be used to parse domains and planning problems written in PDDL.
For example, the following file describes a world of square tiles which are either
white or black, arranged in a grid. To change the color of the tiles one can flip
either a row of tiles or a column of tiles.</p>
<div class="highlight highlight-source-clojure position-relative" data-snippet-clipboard-copy-content=";; Grid flipping domain with conditional effects and universal quantifiers
(define (domain flip)
  (:requirements :adl :typing)
  (:types row column)
  (:predicates (white ?r - row ?c - column))
  (:action flip_row
    :parameters (?r - row)
    :effect (forall (?c - column)
                    (and (when (white ?r ?c) (not (white ?r ?c)))
                         (when (not (white ?r ?c)) (white ?r ?c))))
  )
  (:action flip_column
    :parameters (?c - column)
    :effect (forall (?r - row)
                    (and (when (white ?r ?c) (not (white ?r ?c)))
                         (when (not (white ?r ?c)) (white ?r ?c))))
  )
)
"><pre><span class="pl-c"><span class="pl-c">;</span>; Grid flipping domain with conditional effects and universal quantifiers</span>
(<span class="pl-k">define</span> (<span class="pl-en">domain</span> flip)
  (<span class="pl-c1">:requirements</span> <span class="pl-c1">:adl</span> <span class="pl-c1">:typing</span>)
  (<span class="pl-c1">:types</span> row column)
  (<span class="pl-c1">:predicates</span> (<span class="pl-en">white</span> ?r - row ?c - column))
  (<span class="pl-c1">:action</span> flip_row
    <span class="pl-c1">:parameters</span> (<span class="pl-en">?r</span> - row)
    <span class="pl-c1">:effect</span> (<span class="pl-en">forall</span> (<span class="pl-en">?c</span> - column)
                    (<span class="pl-en">and</span> (<span class="pl-k">when</span> (<span class="pl-en">white</span> ?r ?c) (<span class="pl-en">not</span> (<span class="pl-en">white</span> ?r ?c)))
                         (<span class="pl-k">when</span> (<span class="pl-en">not</span> (<span class="pl-en">white</span> ?r ?c)) (<span class="pl-en">white</span> ?r ?c))))
  )
  (<span class="pl-c1">:action</span> flip_column
    <span class="pl-c1">:parameters</span> (<span class="pl-en">?c</span> - column)
    <span class="pl-c1">:effect</span> (<span class="pl-en">forall</span> (<span class="pl-en">?r</span> - row)
                    (<span class="pl-en">and</span> (<span class="pl-k">when</span> (<span class="pl-en">white</span> ?r ?c) (<span class="pl-en">not</span> (<span class="pl-en">white</span> ?r ?c)))
                         (<span class="pl-k">when</span> (<span class="pl-en">not</span> (<span class="pl-en">white</span> ?r ?c)) (<span class="pl-en">white</span> ?r ?c))))
  )
)</pre></div>
<p>A corresponding problem in this domain might be to make all the tiles white,
when the initial state is an alternating pattern of black and white tiles in a 3x3 grid:</p>
<div class="highlight highlight-source-clojure position-relative" data-snippet-clipboard-copy-content=";; Grid flipping problem
(define (problem flip-problem)
  (:domain flip)
  (:objects r1 r2 r3 - row c1 c2 c3 - column)
  (:init (white r1 c2)
         (white r2 c1)
         (white r2 c3)
         (white r3 c2))
  (:goal (forall (?r - row ?c - column) (white ?r ?c)))
)
"><pre><span class="pl-c"><span class="pl-c">;</span>; Grid flipping problem</span>
(<span class="pl-k">define</span> (<span class="pl-en">problem</span> flip-problem)
  (<span class="pl-c1">:domain</span> flip)
  (<span class="pl-c1">:objects</span> r1 r2 r3 - row c1 c2 c3 - column)
  (<span class="pl-c1">:init</span> (<span class="pl-en">white</span> r1 c2)
         (<span class="pl-en">white</span> r2 c1)
         (<span class="pl-en">white</span> r2 c3)
         (<span class="pl-en">white</span> r3 c2))
  (<span class="pl-c1">:goal</span> (<span class="pl-en">forall</span> (<span class="pl-en">?r</span> - row ?c - column) (<span class="pl-en">white</span> ?r ?c)))
)</pre></div>
<p>With <code>PDDL.jl</code>, we can parse each of these files into Julia constructs:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="domain = load_domain(&quot;flip-domain.pddl&quot;))
problem = load_problem(&quot;flip-problem.pddl&quot;))
"><pre>domain <span class="pl-k">=</span> <span class="pl-c1">load_domain</span>(<span class="pl-s"><span class="pl-pds">"</span>flip-domain.pddl<span class="pl-pds">"</span></span>))
problem <span class="pl-k">=</span> <span class="pl-c1">load_problem</span>(<span class="pl-s"><span class="pl-pds">"</span>flip-problem.pddl<span class="pl-pds">"</span></span>))</pre></div>
<p>Actions defined by the domain can be executed to solve the problem:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="state = initialize(problem)
state = execute(pddl&quot;(flip_column c1)&quot;, state, domain)
state = execute(pddl&quot;(flip_column c3)&quot;, state, domain)
state = execute(pddl&quot;(flip_row r2)&quot;, state, domain)
"><pre>state <span class="pl-k">=</span> <span class="pl-c1">initialize</span>(problem)
state <span class="pl-k">=</span> <span class="pl-c1">execute</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pddl</span>"</span>(flip_column c1)<span class="pl-pds">"</span></span>, state, domain)
state <span class="pl-k">=</span> <span class="pl-c1">execute</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pddl</span>"</span>(flip_column c3)<span class="pl-pds">"</span></span>, state, domain)
state <span class="pl-k">=</span> <span class="pl-c1">execute</span>(<span class="pl-s"><span class="pl-pds"><span class="pl-c1">pddl</span>"</span>(flip_row r2)<span class="pl-pds">"</span></span>, state, domain)</pre></div>
<p>We can then check that the problem is successfully solved in the final state:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@assert satisfy(problem.goal, state, domain)[1] == true
"><pre><span class="pl-c1">@assert</span> <span class="pl-c1">satisfy</span>(problem<span class="pl-k">.</span>goal, state, domain)[<span class="pl-c1">1</span>] <span class="pl-k">==</span> <span class="pl-c1">true</span></pre></div>
<p>More examples can be found in the <a href="test"><code>test</code></a> directory.</p>
</article></div>