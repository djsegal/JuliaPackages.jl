<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-kwlinalg" class="anchor" aria-hidden="true" href="#kwlinalg"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KWLinalg</h1>
<p dir="auto"><a href="https://algopaul.github.io/KWLinalg.jl/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/KWLinalg.jl/actions?query=workflow%3ACI+branch%3Amain"><img src="https://github.com/Algopaul/KWLinalg.jl/workflows/CI/badge.svg" alt="Build status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/Algopaul/KWLinalg.jl?branch=main" rel="nofollow"><img src="https://camo.githubusercontent.com/fef1e273e72e8672e3640c735a2063eabe9bd9413bf21e525b39029e376b6927/687474703a2f2f636f6465636f762e696f2f6769746875622f416c676f7061756c2f4b574c696e616c672e6a6c2f636f7665726167652e7376673f6272616e63683d6d61696e" alt="Coverage Status" data-canonical-src="http://codecov.io/github/Algopaul/KWLinalg.jl/coverage.svg?branch=main" style="max-width: 100%;"></a></p>
<p dir="auto">We provide wrappers for linear algebra routines that allow to pre-allocate memory for repeated executions of the same operations. For convenience, we also provide functors, that contain the necessary memory and can be called with no further allocations.</p>
<h2 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h2>
<p dir="auto">Running the code</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using KWLinalg
using BenchmarkTools

m, n = 5, 3
dtype = Float64
A = rand(dtype, m, n)
AC = deepcopy(A)
f = svd_functor_divconquer(m, n, Float64)
function copy_and_svd_inplace!(A, AC, f)
    AC .= A
    f(AC)
    return nothing
end
@benchmark $copy_and_svd_inplace!($A, $AC, $f)"><pre><span class="pl-k">using</span> KWLinalg
<span class="pl-k">using</span> BenchmarkTools

m, n <span class="pl-k">=</span> <span class="pl-c1">5</span>, <span class="pl-c1">3</span>
dtype <span class="pl-k">=</span> Float64
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dtype, m, n)
AC <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(A)
f <span class="pl-k">=</span> <span class="pl-c1">svd_functor_divconquer</span>(m, n, Float64)
<span class="pl-k">function</span> <span class="pl-en">copy_and_svd_inplace!</span>(A, AC, f)
    AC <span class="pl-k">.=</span> A
    <span class="pl-c1">f</span>(AC)
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>
<span class="pl-c1">@benchmark</span> <span class="pl-k">$</span><span class="pl-c1">copy_and_svd_inplace!</span>(<span class="pl-k">$</span>A, <span class="pl-k">$</span>AC, <span class="pl-k">$</span>f)</pre></div>
<p dir="auto">leads to following result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 9 evaluations.
 Range (min … max):  2.612 μs …   8.526 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     2.659 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   2.672 μs ± 193.544 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

              ▄▇█▆▁                                            
  ▂▂▂▂▂▂▂▂▃▄▅██████▆▃▂▂▂▂▂▁▂▂▁▁▁▁▁▂▁▁▁▂▂▁▁▂▂▂▂▂▁▂▂▂▁▁▁▁▂▂▁▂▂▂ ▃
  2.61 μs         Histogram: frequency by time        2.81 μs &lt;

 Memory estimate: 0 bytes, allocs estimate: 0."><pre>BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">9</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">2.612</span> μs …   <span class="pl-c1">8.526</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">2.659</span> μs               ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">2.672</span> μs ± <span class="pl-c1">193.544</span> ns  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.00</span><span class="pl-k">%</span> ± <span class="pl-c1">0.00</span><span class="pl-k">%</span>

              ▄▇█▆▁                                            
  ▂▂▂▂▂▂▂▂▃▄▅██████▆▃▂▂▂▂▂▁▂▂▁▁▁▁▁▂▁▁▁▂▂▁▁▂▂▂▂▂▁▂▂▂▁▁▁▁▂▂▁▂▂▂ ▃
  <span class="pl-c1">2.61</span> μs         Histogram<span class="pl-k">:</span> frequency by time        <span class="pl-c1">2.81</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">0.</span></pre></div>
<p dir="auto">In contrast, using the <code>LinearAlgebra</code> function <code>svd!</code> as in</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LinearAlgebra
using BenchmarkTools

m, n = 5, 3
dtype = Float64
A = rand(dtype, m, n)
AC = deepcopy(A)
function copy_and_svd!(A, AC)
    AC .= A
    svd!(AC)
    return nothing
end
@benchmark $copy_and_svd!($A, $AC)"><pre><span class="pl-k">using</span> LinearAlgebra
<span class="pl-k">using</span> BenchmarkTools

m, n <span class="pl-k">=</span> <span class="pl-c1">5</span>, <span class="pl-c1">3</span>
dtype <span class="pl-k">=</span> Float64
A <span class="pl-k">=</span> <span class="pl-c1">rand</span>(dtype, m, n)
AC <span class="pl-k">=</span> <span class="pl-c1">deepcopy</span>(A)
<span class="pl-k">function</span> <span class="pl-en">copy_and_svd!</span>(A, AC)
    AC <span class="pl-k">.=</span> A
    <span class="pl-c1">svd!</span>(AC)
    <span class="pl-k">return</span> <span class="pl-c1">nothing</span>
<span class="pl-k">end</span>
<span class="pl-c1">@benchmark</span> <span class="pl-k">$</span><span class="pl-c1">copy_and_svd!</span>(<span class="pl-k">$</span>A, <span class="pl-k">$</span>AC)</pre></div>
<p dir="auto">leads to following result:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="BenchmarkTools.Trial: 10000 samples with 8 evaluations.
 Range (min … max):  3.101 μs … 96.520 μs  ┊ GC (min … max): 0.00% … 94.23%
 Time  (median):     3.154 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   3.297 μs ±  1.473 μs  ┊ GC (mean ± σ):  0.75% ±  1.64%

  ▃▇█▇▅▃▁           ▁▁▁▁▁▂▃▂▂▂▂▃▃▂▁▂▂▂▁▁                     ▂
  ███████▄▄▄▁▅▁▅▇▇▅▇████████████████████████▇▆▅▆▅▅▆▅▄▅▆▆▆▆▆▆ █
  3.1 μs       Histogram: log(frequency) by time     4.14 μs &lt;

 Memory estimate: 2.45 KiB, allocs estimate: 6."><pre>BenchmarkTools<span class="pl-k">.</span>Trial<span class="pl-k">:</span> <span class="pl-c1">10000</span> samples with <span class="pl-c1">8</span> evaluations.
 Range (min … max)<span class="pl-k">:</span>  <span class="pl-c1">3.101</span> μs … <span class="pl-c1">96.520</span> μs  ┊ GC (min … max)<span class="pl-k">:</span> <span class="pl-c1">0.00</span><span class="pl-k">%</span> … <span class="pl-c1">94.23</span><span class="pl-k">%</span>
 Time  (median)<span class="pl-k">:</span>     <span class="pl-c1">3.154</span> μs              ┊ GC (median)<span class="pl-k">:</span>    <span class="pl-c1">0.00</span><span class="pl-k">%</span>
 Time  (mean ± σ)<span class="pl-k">:</span>   <span class="pl-c1">3.297</span> μs ±  <span class="pl-c1">1.473</span> μs  ┊ GC (mean ± σ)<span class="pl-k">:</span>  <span class="pl-c1">0.75</span><span class="pl-k">%</span> ±  <span class="pl-c1">1.64</span><span class="pl-k">%</span>

  ▃▇█▇▅▃▁           ▁▁▁▁▁▂▃▂▂▂▂▃▃▂▁▂▂▂▁▁                     ▂
  ███████▄▄▄▁▅▁▅▇▇▅▇████████████████████████▇▆▅▆▅▅▆▅▄▅▆▆▆▆▆▆ █
  <span class="pl-c1">3.1</span> μs       Histogram<span class="pl-k">:</span> <span class="pl-c1">log</span>(frequency) by time     <span class="pl-c1">4.14</span> μs <span class="pl-k">&lt;</span>

 Memory estimate<span class="pl-k">:</span> <span class="pl-c1">2.45</span> KiB, allocs estimate<span class="pl-k">:</span> <span class="pl-c1">6.</span></pre></div>
<p dir="auto">The time-difference is mostly due to the overhead of garbage collection. <code>KWLinalg</code> provides a benefit, when linear algebra operations are performed on dense matrices of the same size for potentially millions of times (e.g. within an optimization loop).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto"><code>KWLinalg</code> can be installed via <code>Pkg</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Pkg
Pkg.add(url=&quot;https://github.com/Algopaul/KWLinalg.jl.git&quot;)"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/Algopaul/KWLinalg.jl.git<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">For a detailed description of the package and its functionality, we refer to the <a href="https://algopaul.github.io/KWLinalg/" rel="nofollow">documentation</a>.</p>
</article></div>