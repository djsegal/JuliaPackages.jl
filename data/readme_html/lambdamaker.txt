<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-lambdamakerjl" class="anchor" aria-hidden="true" href="#lambdamakerjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>LambdaMaker.jl</h1>
<p dir="auto">This package is intended to generate all the boilerplate code required to deploy an AWS Lambda function via AWS SAM.</p>
<h2 dir="auto"><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prerequisites</h2>
<p dir="auto">You will need to download and install the following:</p>
<ul dir="auto">
<li><a href="https://aws.amazon.com/serverless/sam/" rel="nofollow">AWS SAM</a></li>
<li><a href="https://www.docker.com/" rel="nofollow">Docker</a></li>
</ul>
<h2 dir="auto"><a id="user-content-how-to-generate-the-boilerplate-code" class="anchor" aria-hidden="true" href="#how-to-generate-the-boilerplate-code"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>How to generate the boilerplate code</h2>
<p dir="auto">You will need to generate a new project by running,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using LambdaMaker

create_lambda_package(&quot;project_name&quot;)"><pre><span class="pl-k">using</span> LambdaMaker

<span class="pl-c1">create_lambda_package</span>(<span class="pl-s"><span class="pl-pds">"</span>project_name<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto">If a directory already exists with the <code>project_name</code>, an error is thrown and the directory is left untouched.
You can pass <code>force=true</code> as a <code>kwarg</code> to overwrite it.</p>
<p dir="auto">This will create a new directory in your working directory with the following files:</p>
<ul dir="auto">
<li><code>bootstrap</code>: This is the file which Lambda will use when it first runs</li>
<li><code>Dockerfile</code>: Defines the Docker image that will run in the Lambda environment</li>
<li><code>handle_requests.jl</code>: Reads the Lambda invocations, calls your code, and writes the responses</li>
<li><code>Project.toml</code>: Basic TOML for defining your package to be deployed on Lambda</li>
<li><code>template.yml</code>: The CloudFormation stack which will be created when deploying via AWS SAM</li>
<li><code>src/{project_name}.jl</code>: A module with the boilerplate <code>handle_event(event_data, headers)</code> function</li>
</ul>
<h2 dir="auto"><a id="user-content-what-you-need-to-modify" class="anchor" aria-hidden="true" href="#what-you-need-to-modify"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>What you need to modify</h2>
<p dir="auto">You will need to modify the <code>src/{project_name}.jl</code> file to include whatever code you wish to run in the Lambda function.
The entrypoint for Lambda will be the <code>handle_event(event_data, headers)</code> function, you will need to modify this to call the functions you wish to invoke.</p>
<p dir="auto"><strong>Note:</strong> If you want to specify an <code>ENTRYPOINT</code> script in the Dockerfile (e.g. to set some environment variables), you must explicitly run the bootstrap file in that script.</p>
<p dir="auto">Dockerfile:</p>
<div class="highlight highlight-source-dockerfile notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="WORKDIR /var/task
ENTRYPOINT [ &quot;script.sh&quot; ]
CMD [ &quot;Module.function&quot; ]"><pre><span class="pl-k">WORKDIR</span> /var/task
<span class="pl-k">ENTRYPOINT</span> [ <span class="pl-s">"script.sh"</span> ]
<span class="pl-k">CMD</span> [ <span class="pl-s">"Module.function"</span> ]</pre></div>
<p dir="auto">script.sh:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash
export FOO=1
./bootstrap"><pre><span class="pl-c"><span class="pl-c">#!</span>/bin/bash</span>
<span class="pl-k">export</span> FOO=1
./bootstrap</pre></div>
<h2 dir="auto"><a id="user-content-workflow-for-building-testing-and-deploying-a-lambda-function" class="anchor" aria-hidden="true" href="#workflow-for-building-testing-and-deploying-a-lambda-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Workflow for building, testing, and deploying a Lambda function</h2>
<p dir="auto">AWS SAM documentation can be found <a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html" rel="nofollow">here</a>.
The short-handed version is,</p>
<p dir="auto">Build your Docker image as:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sam build"><pre>sam build</pre></div>
<p dir="auto">Test locally by running:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sam local invoke JuliaFunction"><pre>sam <span class="pl-k">local</span> invoke JuliaFunction</pre></div>
<p dir="auto">If your function requires some form of input see the appendix for more information.</p>
<p dir="auto">When you are satisfied and want to deploy your function,</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sam deploy --guided"><pre>sam deploy --guided</pre></div>
<p dir="auto">If you want to update your function, you can use <a href="https://aws.amazon.com/blogs/compute/accelerating-serverless-development-with-aws-sam-accelerate/" rel="nofollow">SAM sync</a>.</p>
<h2 dir="auto"><a id="user-content-appendix" class="anchor" aria-hidden="true" href="#appendix"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Appendix</h2>
<h3 dir="auto"><a id="user-content-other-resources" class="anchor" aria-hidden="true" href="#other-resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Other resources</h3>
<ul dir="auto">
<li><a href="https://github.com/tk3369/aws-lambda-container-julia">tk3369/aws-lambda-container-julia</a></li>
</ul>
<h3 dir="auto"><a id="user-content-passing-input-to-your-function" class="anchor" aria-hidden="true" href="#passing-input-to-your-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Passing input to your function</h3>
<p dir="auto">Passing inputs is usually done in the JSON format.
You will need to add a package to parse this information, such as <a href="https://github.com/quinnj/JSON3.jl">JSON3.jl</a>.</p>
<p dir="auto">After generating the boilerplate code and adding in your JSON parsing functionality you will need to modify the <code>src/project_name.jl</code>.
Modify the <code>handle_event()</code> function as,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="module MyPackage

using JSON3

function handle_event(event_data, headers)
    input = JSON3.read(event_data)[:input_variable]
    return your_function(input)
end

end"><pre><span class="pl-k">module</span> MyPackage

<span class="pl-k">using</span> JSON3

<span class="pl-k">function</span> <span class="pl-en">handle_event</span>(event_data, headers)
    input <span class="pl-k">=</span> JSON3<span class="pl-k">.</span><span class="pl-c1">read</span>(event_data)[<span class="pl-c1">:input_variable</span>]
    <span class="pl-k">return</span> <span class="pl-c1">your_function</span>(input)
<span class="pl-k">end</span>

<span class="pl-k">end</span></pre></div>
<p dir="auto">You will then need to define a JSON file to pass into your function as,</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{
    &quot;input_variable&quot;: 10
}"><pre>{
    <span class="pl-ent">"input_variable"</span>: <span class="pl-c1">10</span>
}</pre></div>
<p dir="auto">To pass this event JSON file when localy testing as,</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sam local invoke -e event.json JuliaFunction"><pre>sam <span class="pl-k">local</span> invoke -e event.json JuliaFunction</pre></div>
</article></div>