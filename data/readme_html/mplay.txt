<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-mplayjl" class="anchor" aria-hidden="true" href="#mplayjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mplay.jl</h1>
<p><em>Mplay</em> is a full functional MIDI player written in pure <em>Julia</em>.
It reads Standard MIDI Files (SMF) and sends them to MIDI devices
(or software synthesizers) while giving visual feedback.</p>
<p>This is a pre-release which runs on <em>macOS X</em> and <em>Windows</em>.
<em>Mplay</em> has been tested with <em>Julia</em> 1.0 (or later) and <em>GLFW</em> 1.5.</p>
<p><em>macOS X</em> and <em>Windows</em> systems come with a builtin software
synthesizer (<em>Apple</em> DLS SoftSynth, <em>Microsoft</em> GS Wavetable SW
Synth). On those systems <em>Mplay</em> runs out of the box. However,
best results can be achieved with the Roland Sound Canvas VA
software synthesizer:</p>
<p><a target="_blank" rel="noopener noreferrer" href="Mplay+SC.png"><img src="Mplay+SC.png" alt="Mplay" style="max-width:100%;"></a></p>
<p><strong>Hightlights:</strong></p>
<ul>
<li>Full functional MIDI player</li>
<li>Mixer with mute and solo options</li>
<li>Ability to change channel parameters (delay, chorus, reverb, pan)</li>
<li>Volume sliders</li>
<li>Pulldown menus for GM instrument sounds</li>
<li>MIDI VU meter</li>
<li>Show note, chord and lyrics information</li>
<li>Change key, tempo</li>
<li>Transport controls</li>
<li>Keyboard shortcuts</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">a</td>
<td align="center">un-mute all channels</td>
</tr>
<tr>
<td align="center">b/B</td>
<td align="center">toggle/solo bass</td>
</tr>
<tr>
<td align="center">d/D</td>
<td align="center">toggle/solo drums</td>
</tr>
<tr>
<td align="center">g/G</td>
<td align="center">toggle/solo guitar(s)</td>
</tr>
<tr>
<td align="center">k/K</td>
<td align="center">toggle/solo keyboard(s)</td>
</tr>
<tr>
<td align="center">1234567890!@#$%^</td>
<td align="center">toggle channel 1-16</td>
</tr>
<tr>
<td align="center">-/+</td>
<td align="center">decrease/increase tempo</td>
</tr>
<tr>
<td align="center">SPACE</td>
<td align="center">stop/resume song</td>
</tr>
<tr>
<td align="center">&gt; &lt;</td>
<td align="center">transpose up/down</td>
</tr>
<tr>
<td align="center">TAB</td>
<td align="center">select next channel</td>
</tr>
<tr>
<td align="center">ESC</td>
<td align="center">quit Mplay</td>
</tr>
</tbody>
</table>
<p><strong>Installation:</strong></p>
<pre><code>Pkg.clone("https://github.com/JuliaMusic/Mplay.jl")
</code></pre>
<p>On macOS X and Windows systems <em>Mplay</em> comes as a self-contained
package with its own wrappers for <em>GLFW</em> and <em>OpenGL</em> as well as
the required run-time libraries for the GUI and Midi subsystems.</p>
<p><strong>Usage:</strong></p>
<pre><code>using Mplay
mplay(&lt;path to midi file&gt;)
</code></pre>
<p>You can also create your own wrapper script to use <em>Mplay</em> from the
command line (<code>main.jl</code> is contained in the package), e.g.:</p>
<pre><code>julia main.jl &lt;path to midi file&gt;
</code></pre>
<p><strong>Internals</strong></p>
<p><em>Mplay</em> has no innovative features - the main focus is on
simplicity and ease of use. It uses texture blitting to guarantee
highest refresh rates. That's why it responds in real-time in the
order of milliseconds, both to user interactions and MIDI events.</p>
<p>If, for any reason, the contained MIDI run-time doesn't work, you can
build your own binaries:</p>
<p><em>macOS X</em></p>
<pre><code>cc -shared -o libmidi.dylib libmidi.c \
   -framework CoreMIDI -framework CoreAudio -framework AudioUnit \
   -framework AudioToolbox -framework Cocoa
</code></pre>
<p><em>Windows</em></p>
<pre><code>cl /c libmidi.c
link /out:libmidi.dll libmidi.obj -dll winmm.lib
</code></pre>
</article></div>