<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-mplayjl" class="anchor" aria-hidden="true" href="#mplayjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Mplay.jl</h1>
<p><em>Mplay</em> is a full functional MIDI player written in pure <em>Julia</em>.
It reads Standard MIDI Files (SMF) and sends them to MIDI devices
(or software synthesizers) while giving visual feedback.</p>
<p>This current version runs on <em>macOS</em> and <em>Windows</em>.
<em>Mplay</em> has been tested with <em>Julia</em> 1.5 (or later) and <em>GLFW</em> 3.3.</p>
<p><em>macOS</em> and <em>Windows</em> systems come with a builtin software
synthesizer (<em>Apple</em> DLS SoftSynth, <em>Microsoft</em> GS Wavetable SW
Synth). On those systems <em>Mplay</em> runs out of the box. However,
best results can be achieved with the Roland Sound Canvas VA
software synthesizer:</p>
<p><a target="_blank" rel="noopener noreferrer" href="Mplay+SC.png"><img src="Mplay+SC.png" alt="Mplay" style="max-width:100%;"></a></p>
<p><strong>Hightlights:</strong></p>
<ul>
<li>Full functional MIDI player</li>
<li>Mixer with mute and solo options</li>
<li>Ability to change channel parameters (delay, chorus, reverb, pan)</li>
<li>Volume sliders</li>
<li>Change GM instrument sounds</li>
<li>MIDI VU meter</li>
<li>Show note, chord and lyrics information</li>
<li>Change key, tempo</li>
<li>Transport controls</li>
<li>Keyboard shortcuts</li>
<li>Support for Roland sound maps (SC-88 Pro, SC-88, and SC-55)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">a</td>
<td align="center">un-mute all channels</td>
</tr>
<tr>
<td align="center">b/B</td>
<td align="center">toggle/solo bass</td>
</tr>
<tr>
<td align="center">d/D</td>
<td align="center">toggle/solo drums</td>
</tr>
<tr>
<td align="center">g/G</td>
<td align="center">toggle/solo guitar(s)</td>
</tr>
<tr>
<td align="center">k/K</td>
<td align="center">toggle/solo keyboard(s)</td>
</tr>
<tr>
<td align="center">1234567890!@#$%^</td>
<td align="center">toggle channel 1-16</td>
</tr>
<tr>
<td align="center">-/+</td>
<td align="center">decrease/increase tempo</td>
</tr>
<tr>
<td align="center">SPACE</td>
<td align="center">stop/resume song</td>
</tr>
<tr>
<td align="center">TAB</td>
<td align="center">select next channel</td>
</tr>
<tr>
<td align="center">&gt; &lt;</td>
<td align="center">transpose up/down, or</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">next/previous GM instrument</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">(if a channel is selected)</td>
</tr>
<tr>
<td align="center">ESC</td>
<td align="center">quit Mplay</td>
</tr>
</tbody>
</table>
<p><strong>Installation:</strong></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="Pkg.add(url=&quot;https://github.com/JuliaMusic/Mplay.jl&quot;)
"><pre><code>Pkg.add(url="https://github.com/JuliaMusic/Mplay.jl")
</code></pre></div>
<p>On macOS and Windows systems <em>Mplay</em> comes as a self-contained
package with its own wrappers for <em>GLFW</em> and <em>OpenGL</em> as well as
the required run-time libraries for the GUI and Midi subsystems.</p>
<p><strong>Usage:</strong></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="using Mplay
mplay(&lt;path to midi file&gt;)
"><pre><code>using Mplay
mplay(&lt;path to midi file&gt;)
</code></pre></div>
<p>Of course, you can also use <em>Mplay</em> from the command line, e.g.:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia Mplay.jl &lt;path to midi file&gt;
"><pre><code>julia Mplay.jl &lt;path to midi file&gt;
</code></pre></div>
<p><strong>Internals</strong></p>
<p><em>Mplay</em> has no innovative features - the main focus is on
simplicity and ease of use. It uses texture blitting to guarantee
highest refresh rates. That's why it responds in real-time in the
order of milliseconds, both to user interactions and MIDI events.</p>
<p>If, for any reason, the contained MIDI run-time doesn't work, you can
build your own binaries:</p>
<p><em>macOS</em></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cc -shared -arch arm64 -arch x86_64 -o libmidi.dylib libmidi.c \
   -framework CoreMIDI -framework CoreAudio -framework AudioUnit \
   -framework AudioToolbox -framework Cocoa
cc -shared -arch arm64 -arch x86_64 -o libconsole.dylib libconsole.c
"><pre><code>cc -shared -arch arm64 -arch x86_64 -o libmidi.dylib libmidi.c \
   -framework CoreMIDI -framework CoreAudio -framework AudioUnit \
   -framework AudioToolbox -framework Cocoa
cc -shared -arch arm64 -arch x86_64 -o libconsole.dylib libconsole.c
</code></pre></div>
<p><em>Windows</em></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cl /c libmidi.c
link /out:libmidi.dll -dll libmidi.obj winmm.lib
cl /c libconsole.c
link /out:libconsole.dll -dll libconsole.obj
"><pre><code>cl /c libmidi.c
link /out:libmidi.dll -dll libmidi.obj winmm.lib
cl /c libconsole.c
link /out:libconsole.dll -dll libconsole.obj
</code></pre></div>
<p><em>Linux</em></p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="cc -shared -fPIC -o libmidi.so libmidi.c -lasound
cc -shared -fPIC -o libconsole.so libconsole.c
"><pre><code>cc -shared -fPIC -o libmidi.so libmidi.c -lasound
cc -shared -fPIC -o libconsole.so libconsole.c
</code></pre></div>
<p>There is also a startup script in the <code>src</code> directory which you can symlink to simplify the use of Mplay, e.g.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="ln -s ${HOME}/Mplay.jl/src/Mplay.sh /opt/bin/Mplay
"><pre><code>ln -s ${HOME}/Mplay.jl/src/Mplay.sh /opt/bin/Mplay
</code></pre></div>
<p>With the <em>Mplay</em> command you can not only select the desired user interface, but also specify the MIDI device. For example, under <em>macOS</em> the current version offers the possibility to redirect the MIDI output to the Roland Sound Canvas VA plugin (<code>--device=scva</code>) - if installed - as an alternative to the default Apple DLS Music Device.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="% Mplay -h
Mplay [-h|--help] [--device=midi-device] [--gui] midi-file
"><pre><code>% Mplay -h
Mplay [-h|--help] [--device=midi-device] [--gui] midi-file
</code></pre></div>
<p>The text user interface is now enabled by default.</p>
<p><a target="_blank" rel="noopener noreferrer" href="Mplay-tui.png"><img src="Mplay-tui.png" alt="Mplay-tui" style="max-width:100%;"></a></p>
<p><strong>How to use Mplay with Timidity++ (on Linux)</strong></p>
<p>Before you start Timidity++, you have to create a virtual MIDI device:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="% sudo modprobe snd-virmidi
% timidity -iA
TiMidity starting in ALSA server mode
Opening sequencer port: 128:0 128:1 128:2 128:3
"><pre><code>% sudo modprobe snd-virmidi
% timidity -iA
TiMidity starting in ALSA server mode
Opening sequencer port: 128:0 128:1 128:2 128:3
</code></pre></div>
<p>Then, in a second console window, you can setup the MIDI connections and use <em>Mplay</em> with the proper device specification, e.g.:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="% aconnect 20:0 128:0
% aconnect -l
...
client 20: 'Virtual Raw MIDI 1-0' [type=kernel,card=1]
    0 'VirMIDI 1-0     '
	Connecting To: 128:0
...
client 128: 'TiMidity' [type=user,pid=...]
    0 'TiMidity port 0 '
	Connected From: 20:0
...
% Mplay --device=hw:1,0 &lt;midi-file&gt;
"><pre><code>% aconnect 20:0 128:0
% aconnect -l
...
client 20: 'Virtual Raw MIDI 1-0' [type=kernel,card=1]
    0 'VirMIDI 1-0     '
	Connecting To: 128:0
...
client 128: 'TiMidity' [type=user,pid=...]
    0 'TiMidity port 0 '
	Connected From: 20:0
...
% Mplay --device=hw:1,0 &lt;midi-file&gt;
</code></pre></div>
<p>Please keep in mind: The client/device IDs on your system may differ from those shown here depending on the configuration of your Audio/MIDI interface(s).</p>
</article></div>