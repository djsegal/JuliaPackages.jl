<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-affineinvariantmcmc" class="anchor" aria-hidden="true" href="#affineinvariantmcmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AffineInvariantMCMC</h1>
<p>AffineInvariantMCMC performs Bayesian sampling using Goodman &amp; Weare's Affine Invariant Markov Chain Monte Carlo (MCMC) Ensemble sampler.
AffineInvariantMCMC is a module of <a href="http://madsjulia.github.io/Mads.jl" rel="nofollow">MADS</a>.
Goodman &amp; Weare's algorithm implementation in Python is called <a href="http://dan.iel.fm/emcee" rel="nofollow">Emcee</a>.</p>
<p><a href="https://travis-ci.org/madsjulia/AffineInvariantMCMC.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a3708fa34f32010385e5a5aaec2566bd4ea2f84e/68747470733a2f2f7472617669732d63692e6f72672f6d6164736a756c69612f416666696e65496e76617269616e744d434d432e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/madsjulia/AffineInvariantMCMC.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/madsjulia/AffineInvariantMCMC.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/26489199359921d0c319b862c72666d40a02336b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d6164736a756c69612f416666696e65496e76617269616e744d434d432e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/madsjulia/AffineInvariantMCMC.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<p>Reference:</p>
<p>Goodman, Jonathan, and Jonathan Weare. "Ensemble samplers with affine invariance." Communications in applied mathematics and computational science 5.1 (2010): 65-80. <a href="http://msp.org/camcos/2010/5-1/p04.xhtml" rel="nofollow">Link</a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>AffineInvariantMCMC<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> AffineInvariantMCMC

numdims <span class="pl-k">=</span> <span class="pl-c1">5</span>
numwalkers <span class="pl-k">=</span> <span class="pl-c1">100</span>
thinning <span class="pl-k">=</span> <span class="pl-c1">10</span>
numsamples_perwalker <span class="pl-k">=</span> <span class="pl-c1">1000</span>
burnin <span class="pl-k">=</span> <span class="pl-c1">100</span>

<span class="pl-k">const</span> stds <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-c1">randn</span>(numdims))
<span class="pl-k">const</span> means <span class="pl-k">=</span> <span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-c1">rand</span>(numdims)
llhood <span class="pl-k">=</span> x<span class="pl-k">-&gt;</span><span class="pl-k">begin</span>
	retval <span class="pl-k">=</span> <span class="pl-c1">0.</span>
	<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)
		retval <span class="pl-k">-=</span> <span class="pl-c1">.5</span> <span class="pl-k">*</span> ((x[i] <span class="pl-k">-</span> means[i]) <span class="pl-k">/</span> stds[i]) <span class="pl-k">^</span> <span class="pl-c1">2</span>
	<span class="pl-k">end</span>
	<span class="pl-k">return</span> retval
<span class="pl-k">end</span>
x0 <span class="pl-k">=</span> <span class="pl-c1">rand</span>(numdims, numwalkers) <span class="pl-k">*</span> <span class="pl-c1">10</span> <span class="pl-k">-</span> <span class="pl-c1">5</span>
chain, llhoodvals <span class="pl-k">=</span> AffineInvariantMCMC<span class="pl-k">.</span><span class="pl-c1">sample</span>(llhood, numwalkers, x0, burnin, <span class="pl-c1">1</span>)
chain, llhoodvals <span class="pl-k">=</span> AffineInvariantMCMC<span class="pl-k">.</span><span class="pl-c1">sample</span>(llhood, numwalkers, chain[:, :, <span class="pl-c1">end</span>], numsamples_perwalker, thinning)
flatchain, flatllhoodvals <span class="pl-k">=</span> AffineInvariantMCMC<span class="pl-k">.</span><span class="pl-c1">flattenmcmcarray</span>(chain, llhoodvals)</pre></div>
<h2><a id="user-content-comparison" class="anchor" aria-hidden="true" href="#comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comparison</h2>
<p>The figures below compare predicted marginal and joint posterior PDF's (probability density functions) using Classical vs. Affine Invariant MCMC for the same number of functional evaluations (in this case 1,000,000).</p>
<p>The synthetic problem tested below is designed to have a very complex structure.
The Classical MCMC clearly fails to characterize sufficiently well the  posterior PDF's.</p>
<ul>
<li>Classical MCMC <a target="_blank" rel="noopener noreferrer" href="/examples/ClassicalMCMC_w1000000.png"><img src="/examples/ClassicalMCMC_w1000000.png" alt="ClassicalMCMC" style="max-width:100%;"></a></li>
<li>Affine Invariant MCMC <a target="_blank" rel="noopener noreferrer" href="/examples/AffineInvariantMCMC_w1000000.png"><img src="/examples/AffineInvariantMCMC_w1000000.png" alt="AffineInvariantMCMC" style="max-width:100%;"></a></li>
</ul>
<p>The codes applied to perform these analyses are available here:</p>
<ul>
<li><a href="https://github.com/madsjulia/Mads.jl/blob/master/examples/model_analysis/bayes_weight_analsis.jl">Classical MCMC</a></li>
<li><a href="https://github.com/madsjulia/Mads.jl/blob/master/examples/model_analysis/emcee_weight_analsis.jl">Affine Invariant MCMC</a></li>
</ul>
<h2><a id="user-content-parallelization" class="anchor" aria-hidden="true" href="#parallelization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Parallelization</h2>
<p>AffineInvariantMCMC can be executed efficiently in parallel using existing distributed network capabilities.</p>
<p>For more information, check out our Julia module <a href="https://github.com/madsjulia/RobustPmap.jl">RobustPmap</a>.</p>
<h2><a id="user-content-restarts" class="anchor" aria-hidden="true" href="#restarts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Restarts</h2>
<p>AffineInvariantMCMC analyses can be performed utilizing extremely efficient restarts.</p>
<p>Typically, the AffineInvariantMCMC runs require large number of functional (model) evaluations which may take substantial computational time.
Occasionally, the AffineInvariantMCMC runs may crash due to external issues (e.g., network/computer/disk failures).
Furthermore, AffineInvariantMCMC runs may require more time than the allowed allocation time on existing HPC cluster queues.
In all these cases, the AffineInvariantMCMC runs needs to be restarted.
Our codes allow are very efficient restarts with very minimal overhead and without re-execution of completed functional (model) evaluations.</p>
<p>For more information, check out our Julia module <a href="https://github.com/madsjulia/ReusableFunctions.jl">ReusableFunctions</a>.</p>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>All the available MADS modules and functions are described at <a href="http://madsjulia.github.io/Mads.jl" rel="nofollow">madsjulia.github.io</a></p>
<p>AffineInvariantMCMC functions are documented at <a href="https://madsjulia.github.io/Mads.jl/Modules/AffineInvariantMCMC" rel="nofollow">https://madsjulia.github.io/Mads.jl/Modules/AffineInvariantMCMC</a></p>
<h2><a id="user-content-projects-using-affineinvariantmcmc" class="anchor" aria-hidden="true" href="#projects-using-affineinvariantmcmc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Projects using AffineInvariantMCMC</h2>
<ul>
<li><a href="https://github.com/madsjulia">MADS</a></li>
<li><a href="https://github.com/TensorDecompositions">TensorDecompositions</a></li>
</ul>
<h2><a id="user-content-publications-presentations-projects" class="anchor" aria-hidden="true" href="#publications-presentations-projects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Publications, Presentations, Projects</h2>
<ul>
<li><a href="http://mads.gitlab.io" rel="nofollow">mads.gitlab.io</a></li>
<li><a href="https://tensordecompositions.github.io" rel="nofollow">TensorDecompositions</a></li>
<li><a href="http://monty.gitlab.io" rel="nofollow">monty.gitlab.io</a></li>
<li><a href="https://www.lanl.gov/orgs/ees/staff/monty" rel="nofollow">ees.lanl.gov/monty</a></li>
</ul>
</article></div>