<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-keywordcalls" class="anchor" aria-hidden="true" href="#keywordcalls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KeywordCalls</h1>
<p dir="auto"><a href="https://cscherrer.github.io/KeywordCalls.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://cscherrer.github.io/KeywordCalls.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/cscherrer/KeywordCalls.jl/actions"><img src="https://github.com/cscherrer/KeywordCalls.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/cscherrer/KeywordCalls.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81404c7b912ebc4c2b6260f552edccc789aa8e0e0fcca3f68172ba85efc3c682/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f4b6579776f726443616c6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/KeywordCalls.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">In Julia, the named tuples <code>(a=1, b=2)</code> and <code>(b=2, a=1)</code> are distinct. In some cases, it's convenient to define a method for each <em>set</em> of names, rather than each particular ordering.</p>
<p dir="auto">KeywordCalls.jl lets us do this, and allows specification of a "preferred ordering" for each set of arguments.</p>
<p dir="auto"><strong>On Julia 1.6, this can be done with no allocation!</strong> This is included in the unit tests. Unfortunately, the current implementation leads to allcoation in Julia 1.4 and 1.5. We hope this can be improved for better backward-compatibility, but for now we recommend using 1.6 if possible.</p>
<p dir="auto">KeywordCalls is very light weight:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @time_imports using KeywordCalls
[ Info: Precompiling KeywordCalls [4d827475-d3e4-43d6-abe3-9688362ede9f]
      0.3 ms  Compat
      0.3 ms  Tricks
      0.2 ms  KeywordCalls"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@time_imports</span> <span class="pl-k">using</span> KeywordCalls
[ Info<span class="pl-k">:</span> Precompiling KeywordCalls [<span class="pl-c1">4</span>d827475<span class="pl-k">-</span>d3e4<span class="pl-k">-</span><span class="pl-c1">43</span>d6<span class="pl-k">-</span>abe3<span class="pl-k">-</span><span class="pl-c1">9688362</span>ede9f]
      <span class="pl-c1">0.3</span> ms  Compat
      <span class="pl-c1">0.3</span> ms  Tricks
      <span class="pl-c1">0.2</span> ms  KeywordCalls</pre></div>
<h2 dir="auto"><a id="user-content-kwcall" class="anchor" aria-hidden="true" href="#kwcall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@kwcall</code></h2>
<p dir="auto">If we define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(nt::NamedTuple{(:b, :a)}) = println(&quot;Calling f(b = &quot;, nt.b,&quot;,a = &quot;, nt.a, &quot;)&quot;)

@kwcall f(b,a)"><pre><span class="pl-en">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:b, :a)}</span>) <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Calling f(b = <span class="pl-pds">"</span></span>, nt<span class="pl-k">.</span>b,<span class="pl-s"><span class="pl-pds">"</span>,a = <span class="pl-pds">"</span></span>, nt<span class="pl-k">.</span>a, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>)

<span class="pl-c1">@kwcall</span> <span class="pl-c1">f</span>(b,a)</pre></div>
<p dir="auto">Then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(a=1,b=2)
Calling f(b = 2,a = 1)

julia&gt; f(b=2,a=1)
Calling f(b = 2,a = 1)"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">2</span>)
Calling <span class="pl-c1">f</span>(b <span class="pl-k">=</span> <span class="pl-c1">2</span>,a <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(b<span class="pl-k">=</span><span class="pl-c1">2</span>,a<span class="pl-k">=</span><span class="pl-c1">1</span>)
Calling <span class="pl-c1">f</span>(b <span class="pl-k">=</span> <span class="pl-c1">2</span>,a <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<p dir="auto">We can define a new method for any set of arguments we like, including default values. If (after the above) we also define</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f(nt::NamedTuple{(:c, :a, :b)}) = println(&quot;The sum is &quot;, sum(values(nt)))

@kwcall f(c=0,a,b)"><pre><span class="pl-en">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:c, :a, :b)}</span>) <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>The sum is <span class="pl-pds">"</span></span>, <span class="pl-c1">sum</span>(<span class="pl-c1">values</span>(nt)))

<span class="pl-c1">@kwcall</span> <span class="pl-c1">f</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>,a,b)</pre></div>
<p dir="auto">then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; f(a=1,b=2)
The sum is 3

julia&gt; f(a=1,b=2,c=3)
The sum is 6"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">2</span>)
The sum is <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">2</span>,c<span class="pl-k">=</span><span class="pl-c1">3</span>)
The sum is <span class="pl-c1">6</span></pre></div>
<h2 dir="auto"><a id="user-content-kwalias" class="anchor" aria-hidden="true" href="#kwalias"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@kwalias</code></h2>
<p dir="auto">It's often useful to allow multiple names to be mapped to the same interpretation. For that, we have <code>@kwalias</code>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using KeywordCalls

julia&gt; @kwcall f(c=0,a,b)
f (generic function with 3 methods)

julia&gt; @kwalias f [
       α     =&gt; a
       alpha =&gt; a
       β     =&gt; b
       beta  =&gt; b
       ]

julia&gt; f(α=2,β=3)
The sum is 5

julia&gt; f(α=2,beta=3)
The sum is 5"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> KeywordCalls

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@kwcall</span> <span class="pl-c1">f</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>,a,b)
f (generic <span class="pl-k">function</span> with <span class="pl-c1">3</span> methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@kwalias</span> f [
       α     <span class="pl-k">=&gt;</span> a
       alpha <span class="pl-k">=&gt;</span> a
       β     <span class="pl-k">=&gt;</span> b
       beta  <span class="pl-k">=&gt;</span> b
       ]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(α<span class="pl-k">=</span><span class="pl-c1">2</span>,β<span class="pl-k">=</span><span class="pl-c1">3</span>)
The sum is <span class="pl-c1">5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(α<span class="pl-k">=</span><span class="pl-c1">2</span>,beta<span class="pl-k">=</span><span class="pl-c1">3</span>)
The sum is <span class="pl-c1">5</span></pre></div>
<h2 dir="auto"><a id="user-content-kwstruct" class="anchor" aria-hidden="true" href="#kwstruct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a><code>@kwstruct</code></h2>
<p dir="auto">KeywordCalls is especially powerful when used for structs. If you have</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="struct Foo{N,T} [&lt;: SomeAbstractTypeIfYouLike]
    someFieldName :: NamedTuple{N,T}
end"><pre><span class="pl-k">struct</span> Foo{N,T} [<span class="pl-k">&lt;:</span> <span class="pl-c1">SomeAbstractTypeIfYouLike</span>]
    someFieldName <span class="pl-k">::</span> <span class="pl-c1">NamedTuple{N,T}</span>
<span class="pl-k">end</span></pre></div>
<p dir="auto">then</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; @kwstruct Foo(μ,σ=1)
Foo

julia&gt; Foo(σ=2,μ=4)
Foo{(:μ, :σ), Tuple{Int64, Int64}}((μ = 4, σ = 2))"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@kwstruct</span> <span class="pl-c1">Foo</span>(μ,σ<span class="pl-k">=</span><span class="pl-c1">1</span>)
Foo

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Foo</span>(σ<span class="pl-k">=</span><span class="pl-c1">2</span>,μ<span class="pl-k">=</span><span class="pl-c1">4</span>)
<span class="pl-c1">Foo</span><span class="pl-c1">{(:μ, :σ), Tuple{Int64, Int64}}</span>((μ <span class="pl-k">=</span> <span class="pl-c1">4</span>, σ <span class="pl-k">=</span> <span class="pl-c1">2</span>))</pre></div>
<p dir="auto">In <a href="https://github.com/cscherrer/MeasureTheory.jl">MeasureTheory.jl</a>, we use this approach to allow multiple parameterizations of a given distribution.</p>
<h2 dir="auto"><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Related Packages</h2>
<p dir="auto"><a href="https://github.com/simonbyrne/KeywordDispatch.jl">KeywordDispatch.jl</a> is very similar. When we started KeywordCalls, it seemed we would need lots of extra dependencies to make the idea work. This motivated creating a new package instead of making a PR for KeywordDispatch. @simeonschaub helped us get away from this and simplify the implementation; it's now very light-weight, and very fast.</p>
</article></div>