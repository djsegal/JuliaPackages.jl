<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-keywordcalls" class="anchor" aria-hidden="true" href="#keywordcalls"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>KeywordCalls</h1>
<p><a href="https://cscherrer.github.io/KeywordCalls.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://cscherrer.github.io/KeywordCalls.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/cscherrer/KeywordCalls.jl/actions"><img src="https://github.com/cscherrer/KeywordCalls.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/cscherrer/KeywordCalls.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/81404c7b912ebc4c2b6260f552edccc789aa8e0e0fcca3f68172ba85efc3c682/68747470733a2f2f636f6465636f762e696f2f67682f6373636865727265722f4b6579776f726443616c6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/cscherrer/KeywordCalls.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>In Julia, the named tuples <code>(a=1, b=2)</code> and <code>(b=2, a=1)</code> are distinct. In some cases, it's convenient to define a method for each <em>set</em> of names, rather than each particular ordering.</p>
<p>KeywordCalls.jl lets us do this, and allows specification of a "preferred ordering" for each set of arguments.</p>
<h2><a id="user-content-kwcall" class="anchor" aria-hidden="true" href="#kwcall"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>@kwcall</code></h2>
<p>If we define</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(nt::NamedTuple{(:b, :a)}) = println(&quot;Calling f(b = &quot;, nt.b,&quot;,a = &quot;, nt.a, &quot;)&quot;)

@kwcall f(b,a)
"><pre><span class="pl-en">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:b, :a)}</span>) <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>Calling f(b = <span class="pl-pds">"</span></span>, nt<span class="pl-k">.</span>b,<span class="pl-s"><span class="pl-pds">"</span>,a = <span class="pl-pds">"</span></span>, nt<span class="pl-k">.</span>a, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>)

<span class="pl-c1">@kwcall</span> <span class="pl-c1">f</span>(b,a)</pre></div>
<p>Then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f(a=1,b=2)
Calling f(b = 2,a = 1)

julia&gt; f(b=2,a=1)
Calling f(b = 2,a = 1)
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">2</span>)
Calling <span class="pl-c1">f</span>(b <span class="pl-k">=</span> <span class="pl-c1">2</span>,a <span class="pl-k">=</span> <span class="pl-c1">1</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(b<span class="pl-k">=</span><span class="pl-c1">2</span>,a<span class="pl-k">=</span><span class="pl-c1">1</span>)
Calling <span class="pl-c1">f</span>(b <span class="pl-k">=</span> <span class="pl-c1">2</span>,a <span class="pl-k">=</span> <span class="pl-c1">1</span>)</pre></div>
<p>We can define a new method for any set of arguments we like, including default values. If (after the above) we also define</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="f(nt::NamedTuple{(:c, :a, :b)}) = println(&quot;The sum is &quot;, sum(values(nt)))

@kwcall f(c=0,a,b)
"><pre><span class="pl-en">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:c, :a, :b)}</span>) <span class="pl-k">=</span> <span class="pl-c1">println</span>(<span class="pl-s"><span class="pl-pds">"</span>The sum is <span class="pl-pds">"</span></span>, <span class="pl-c1">sum</span>(<span class="pl-c1">values</span>(nt)))

<span class="pl-c1">@kwcall</span> <span class="pl-c1">f</span>(c<span class="pl-k">=</span><span class="pl-c1">0</span>,a,b)</pre></div>
<p>then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; f(a=1,b=2)
The sum is 3

julia&gt; f(a=1,b=2,c=3)
The sum is 6
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">2</span>)
The sum is <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">f</span>(a<span class="pl-k">=</span><span class="pl-c1">1</span>,b<span class="pl-k">=</span><span class="pl-c1">2</span>,c<span class="pl-k">=</span><span class="pl-c1">3</span>)
The sum is <span class="pl-c1">6</span></pre></div>
<h2><a id="user-content-kwstruct" class="anchor" aria-hidden="true" href="#kwstruct"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><code>kwstruct</code></h2>
<p>KeywordCalls is especially powerful when used for structs. If you have</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Foo{N,T} [&lt;: SomeAbstractTypeIfYouLike]
    someFieldName :: NamedTuple{N,T}
end
"><pre>Foo{N,T} [<span class="pl-k">&lt;:</span> <span class="pl-c1">SomeAbstractTypeIfYouLike</span>]
    someFieldName <span class="pl-k">::</span> <span class="pl-c1">NamedTuple{N,T}</span>
<span class="pl-k">end</span></pre></div>
<p>then</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @kwstruct Foo(μ,σ=1)
Foo

julia&gt; Foo(σ=2,μ=4)
Foo{(:μ, :σ), Tuple{Int64, Int64}}((μ = 4, σ = 2))
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@kwstruct</span> <span class="pl-c1">Foo</span>(μ,σ<span class="pl-k">=</span><span class="pl-c1">1</span>)
Foo

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Foo</span>(σ<span class="pl-k">=</span><span class="pl-c1">2</span>,μ<span class="pl-k">=</span><span class="pl-c1">4</span>)
<span class="pl-c1">Foo</span><span class="pl-c1">{(:μ, :σ), Tuple{Int64, Int64}}</span>((μ <span class="pl-k">=</span> <span class="pl-c1">4</span>, σ <span class="pl-k">=</span> <span class="pl-c1">2</span>))</pre></div>
<p>In <a href="https://github.com/cscherrer/MeasureTheory.jl">MeasureTheory.jl</a>, we use this approach to allow multiple parameterizations of a given distribution.</p>
<h2><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Limitations</h2>
<p>KeywordCalls tries to push as much of the work as possible to the compiler, to make repeated run-time calls fast. But there's no free lunch, you either pay now or pay later.</p>
<p>If you'd rather avoid the compilation time (at the cost of some runtime overhead), you might try <a href="https://github.com/simonbyrne/KeywordDispatch.jl">KeywordDispatch.jl</a>.</p>
<h2><a id="user-content-benchmarks" class="anchor" aria-hidden="true" href="#benchmarks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Benchmarks</h2>
<p>Let's define a method for each "alphabet prefix":</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="letters = Symbol.('a':'z')

for n in 1:26
    fkeys = Tuple(letters[1:n])

    @eval begin
        f(nt::NamedTuple{$fkeys}) = sum(values(nt))
        $(KeywordCalls._kwcall(:(f($(fkeys...)))))
    end
end
"><pre>letters <span class="pl-k">=</span> <span class="pl-c1">Symbol</span>.(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>:<span class="pl-s"><span class="pl-pds">'</span>z<span class="pl-pds">'</span></span>)

<span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">26</span>
    fkeys <span class="pl-k">=</span> <span class="pl-c1">Tuple</span>(letters[<span class="pl-c1">1</span><span class="pl-k">:</span>n])

    <span class="pl-c1">@eval</span> <span class="pl-k">begin</span>
        <span class="pl-en">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{$fkeys}</span>) <span class="pl-k">=</span> <span class="pl-c1">sum</span>(<span class="pl-c1">values</span>(nt))
        <span class="pl-k">$</span>(KeywordCalls<span class="pl-k">.</span><span class="pl-c1">_kwcall</span>(:(<span class="pl-c1">f</span>(<span class="pl-k">$</span>(fkeys<span class="pl-k">...</span>)))))
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>So now <code>f</code>'s methods look like this:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; methods(f)
# 28 methods for generic function &quot;f&quot;:
[1] f(; kwargs...) in Main at /home/chad/git/KeywordCalls/src/KeywordCalls.jl:52
[2] f(nt::NamedTuple{(:a, :b, :c, :d, :e, :f, :g), T} where T&lt;:Tuple) in Main at REPL[3]:5
[3] f(nt::NamedTuple{(:a, :b, :c, :d, :e, :f), T} where T&lt;:Tuple) in Main at REPL[3]:5
[4] f(nt::NamedTuple{(:a, :b, :c, :d, :e), T} where T&lt;:Tuple) in Main at REPL[3]:5
[5] f(nt::NamedTuple{(:a, :b, :c, :d), T} where T&lt;:Tuple) in Main at REPL[3]:5
[6] f(nt::NamedTuple{(:a, :b, :c), T} where T&lt;:Tuple) in Main at REPL[3]:5
[7] f(nt::NamedTuple{(:a, :b), T} where T&lt;:Tuple) in Main at REPL[3]:5
[8] f(nt::NamedTuple{(:a,), T} where T&lt;:Tuple) in Main at REPL[3]:5
[9] f(nt::NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h), T} where T&lt;:Tuple) in Main at REPL[3]:5
[10] f(nt::NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h, :i), T} where T&lt;:Tuple) in Main at REPL[3]:5
⋮
[26] f(nt::NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p, :q, :r, :s, :t, :u, :v, :w, :x, :y), T} where T&lt;:Tuple) in Main at REPL[3]:5
[27] f(nt::NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p, :q, :r, :s, :t, :u, :v, :w, :x, :y, :z), T} where T&lt;:Tuple) in Main at REPL[3]:5
[28] f(nt::NamedTuple) in Main at /home/chad/git/KeywordCalls/src/KeywordCalls.jl:50
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">methods</span>(f)
<span class="pl-c"><span class="pl-c">#</span> 28 methods for generic function "f":</span>
[<span class="pl-c1">1</span>] <span class="pl-c1">f</span>(; kwargs<span class="pl-k">...</span>) <span class="pl-k">in</span> Main at <span class="pl-k">/</span>home<span class="pl-k">/</span>chad<span class="pl-k">/</span>git<span class="pl-k">/</span>KeywordCalls<span class="pl-k">/</span>src<span class="pl-k">/</span>KeywordCalls<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">52</span>
[<span class="pl-c1">2</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e, :f, :g), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">3</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e, :f), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">4</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">5</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">6</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">7</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">8</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a,), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">9</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">10</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h, :i), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
⋮
[<span class="pl-c1">26</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p, :q, :r, :s, :t, :u, :v, :w, :x, :y), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">27</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple{(:a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p, :q, :r, :s, :t, :u, :v, :w, :x, :y, :z), T}</span> <span class="pl-k">where</span> T<span class="pl-k">&lt;:</span><span class="pl-c1">Tuple</span>) <span class="pl-k">in</span> Main at REPL[<span class="pl-c1">3</span>]<span class="pl-k">:</span><span class="pl-c1">5</span>
[<span class="pl-c1">28</span>] <span class="pl-c1">f</span>(nt<span class="pl-k">::</span><span class="pl-c1">NamedTuple</span>) <span class="pl-k">in</span> Main at <span class="pl-k">/</span>home<span class="pl-k">/</span>chad<span class="pl-k">/</span>git<span class="pl-k">/</span>KeywordCalls<span class="pl-k">/</span>src<span class="pl-k">/</span>KeywordCalls<span class="pl-k">.</span>jl<span class="pl-k">:</span><span class="pl-c1">50</span></pre></div>
<p>That method 28 is the dispatch that requires permutation; it's called for any named tuple without an explicit method.</p>
<p>Now we can benchmark:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function runbenchmark()
    times = Matrix{Float64}(undef, 26,2)
    for n in 1:26
        fkeys = Tuple(letters[1:n])
        rkeys = reverse(fkeys)
        
        nt = NamedTuple{fkeys}(1:n)
        rnt = NamedTuple{rkeys}(n:-1:1)

        times[n,1] = @belapsed($f($nt))
        times[n,2] = @belapsed($f($rnt))
    end
    return times
end

times = runbenchmark()
"><pre><span class="pl-k">function</span> <span class="pl-en">runbenchmark</span>()
    times <span class="pl-k">=</span> <span class="pl-c1">Matrix</span><span class="pl-c1">{Float64}</span>(undef, <span class="pl-c1">26</span>,<span class="pl-c1">2</span>)
    <span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">26</span>
        fkeys <span class="pl-k">=</span> <span class="pl-c1">Tuple</span>(letters[<span class="pl-c1">1</span><span class="pl-k">:</span>n])
        rkeys <span class="pl-k">=</span> <span class="pl-c1">reverse</span>(fkeys)
        
        nt <span class="pl-k">=</span> <span class="pl-c1">NamedTuple</span><span class="pl-c1">{fkeys}</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n)
        rnt <span class="pl-k">=</span> <span class="pl-c1">NamedTuple</span><span class="pl-c1">{rkeys}</span>(n<span class="pl-k">:</span><span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">1</span>)

        times[n,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span>(<span class="pl-k">$</span><span class="pl-c1">f</span>(<span class="pl-k">$</span>nt))
        times[n,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">@belapsed</span>(<span class="pl-k">$</span><span class="pl-c1">f</span>(<span class="pl-k">$</span>rnt))
    <span class="pl-k">end</span>
    <span class="pl-k">return</span> times
<span class="pl-k">end</span>

times <span class="pl-k">=</span> <span class="pl-c1">runbenchmark</span>()</pre></div>
<p>Here's the result:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1184449/116616679-d2abef00-a8f1-11eb-9507-0af267fa37cb.png"><img src="https://user-images.githubusercontent.com/1184449/116616679-d2abef00-a8f1-11eb-9507-0af267fa37cb.png" alt="benchmarks" style="max-width:100%;"></a></p>
</article></div>