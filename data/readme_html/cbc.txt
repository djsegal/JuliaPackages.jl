<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-coin-or-branch-and-cut-interface-cbcjl" class="anchor" aria-hidden="true" href="#coin-or-branch-and-cut-interface-cbcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>COIN-OR Branch and Cut Interface (Cbc.jl)</h1>
<p><a href="https://www.coin-or.org" rel="nofollow"><img src="https://camo.githubusercontent.com/62ac669cf0f611beeb2b73b264772b8455bc471586e911447b413270e20c22f2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width:100%;"></a></p>
<p><code>Cbc.jl</code> is an interface to the <strong><a href="https://projects.coin-or.org/Cbc" rel="nofollow">COIN-OR Branch and Cut</a></strong>
solver. It provides a complete interface to the low-level C API, as well as an
implementation of the solver-independent <code>MathOptInterface</code>
API's</p>
<p><em>Note: This wrapper is maintained by the JuMP community and is not a COIN-OR
project.</em></p>
<p><a href="https://github.com/jump-dev/Cbc.jl/actions?query=workflow%3ACI"><img src="https://github.com/jump-dev/Cbc.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jump-dev/Cbc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/f503ded86f65e35523f403cb4b918b929e3bbd839da2185a4fb43b31093891bb/68747470733a2f2f636f6465636f762e696f2f67682f6a756d702d6465762f4362632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/jump-dev/Cbc.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h2>
<p>The package can be installed with <code>Pkg.add</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;Cbc&quot;)
"><pre><span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Cbc<span class="pl-pds">"</span></span>)</pre></div>
<p>In addition to installing the Cbc.jl package, this will also download and
install the Cbc binaries. (You do not need to install Cbc separately.) If you
require a custom build of Cbc, see the <strong>Custom Installation</strong> instructions
below.</p>
<h2><a id="user-content-using-with-jump" class="anchor" aria-hidden="true" href="#using-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using with JuMP</h2>
<p>Use <code>Cbc.Optimizer</code> to use Cbc with <a href="https://github.com/jump-dev/JuMP.jl">JuMP</a>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Cbc
using JuMP
model = Model(Cbc.Optimizer)
set_optimizer_attribute(model, &quot;logLevel&quot;, 1)
"><pre><span class="pl-k">using</span> Cbc
<span class="pl-k">using</span> JuMP
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(Cbc<span class="pl-k">.</span>Optimizer)
<span class="pl-c1">set_optimizer_attribute</span>(model, <span class="pl-s"><span class="pl-pds">"</span>logLevel<span class="pl-pds">"</span></span>, <span class="pl-c1">1</span>)</pre></div>
<h2><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Options</h2>
<p>Options are, unfortunately, not well documented.</p>
<p>The following options are likely to be the most useful:</p>
<ul>
<li>
<p><code>seconds</code> -- Solution timeout limit.</p>
<p>For example, <code>set_optimizer_attribute(model, "seconds", 60.0)</code>.</p>
</li>
<li>
<p><code>logLevel</code> -- Set to 1 to enable solution output.</p>
<p>For example, <code>set_optimizer_attribute(model, "logLevel", 1)</code>.</p>
</li>
<li>
<p><code>maxSolutions</code> -- Terminate after this many feasible solutions have been found.</p>
<p>For example, <code>set_optimizer_attribute(model, "maxSolutions", 1)</code>.</p>
</li>
<li>
<p><code>maxNodes</code> -- Terminate after this many branch-and-bound nodes have been evaluated.</p>
<p>For example, <code>set_optimizer_attribute(model, "maxNodes", 1)</code>.</p>
</li>
<li>
<p><code>allowableGap</code> -- Terminate after optimality gap is less than this value (on an absolute scale).</p>
<p>For example, <code>set_optimizer_attribute(model, "allowableGap", 0.05)</code>.</p>
</li>
<li>
<p><code>ratioGap</code> -- Terminate after optimality gap is smaller than this relative fraction.</p>
<p>For example, <code>set_optimizer_attribute(model, "allowableGap", 0.05)</code>.</p>
</li>
<li>
<p><code>threads</code> -- Set the number of threads to use for parallel branch &amp; bound.</p>
<p>For example, <code>set_optimizer_attribute(model, "threads", 2)</code>.</p>
</li>
</ul>
<p>The complete list of parameters can be found by running the <code>cbc</code> executable and
typing <code>?</code> at the prompt.</p>
<p>On Julia 1.3 and above, you can start the <code>cbc</code> executable from Julia as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Cbc_jll
Cbc_jll.cbc() do exe
    run(`$(exe)`)
end
"><pre><span class="pl-k">using</span> Cbc_jll
Cbc_jll<span class="pl-k">.</span><span class="pl-c1">cbc</span>() <span class="pl-k">do</span> exe
    <span class="pl-c1">run</span>(<span class="pl-s"><span class="pl-pds">`</span>$(exe)<span class="pl-pds">`</span></span>)
<span class="pl-k">end</span></pre></div>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom Installation</h2>
<p>To install custom built Cbc binaries, use the environmental variable
<code>JULIA_CBC_LIBRARY_PATH</code> to point to the path at which you installed Cbc (the
folder containing <code>libCbcSolver</code>). For example, on Mac, after installing Cbc
with <code>brew install cbc</code>, use:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="ENV[&quot;JULIA_CBC_LIBRARY_PATH&quot;] = &quot;/usr/local/Cellar/cbc/2.10.5/lib&quot;
import Pkg
Pkg.add(&quot;Cbc&quot;)
Pkg.build(&quot;Cbc&quot;)
"><pre><span class="pl-c1">ENV</span>[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CBC_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/usr/local/Cellar/cbc/2.10.5/lib<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Cbc<span class="pl-pds">"</span></span>)
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Cbc<span class="pl-pds">"</span></span>)</pre></div>
<p>Replace <code>"/usr/local/Cellar/cbc/2.10.5/lib"</code> with a different path as
appropriate.</p>
<p><strong>You must have <code>JULIA_CBC_LIBRARY_PATH</code> set <em>every</em> time you run <code>using Cbc</code>,
not just when you install it.</strong></p>
<p>Switch back to the default binaries as follows:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="delete!(ENV, &quot;JULIA_CBC_LIBRARY_PATH&quot;)
import Pkg
Pkg.build(&quot;Cbc&quot;)
"><pre><span class="pl-c1">delete!</span>(<span class="pl-c1">ENV</span>, <span class="pl-s"><span class="pl-pds">"</span>JULIA_CBC_LIBRARY_PATH<span class="pl-pds">"</span></span>)
<span class="pl-k">import</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Cbc<span class="pl-pds">"</span></span>)</pre></div>
</article></div>