<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-coin-or-branch-and-cut-interface-cbcjl" class="anchor" aria-hidden="true" href="#coin-or-branch-and-cut-interface-cbcjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>COIN-OR Branch and Cut Interface (Cbc.jl)</h1>
<p><a href="https://www.coin-or.org" rel="nofollow"><img src="https://camo.githubusercontent.com/cd8e4605c574a186f0227b09e654d1b12c1d4fb2/68747470733a2f2f7777772e636f696e2d6f722e6f72672f776f726470726573732f77702d636f6e74656e742f75706c6f6164732f323031342f30382f434f494e4f522e706e67" alt="" data-canonical-src="https://www.coin-or.org/wordpress/wp-content/uploads/2014/08/COINOR.png" style="max-width:100%;"></a></p>
<p><code>Cbc.jl</code> is an interface to the <strong><a href="https://projects.coin-or.org/Cbc" rel="nofollow">COIN-OR Branch and Cut</a></strong>
solver. It provides a complete interface to the low-level C API, as well as an
implementation of the solver-independent <code>MathProgBase</code> and <code>MathOptInterface</code>
API's.</p>
<p><em>Note: This wrapper is maintained by the JuliaOpt community and is not a COIN-OR
project.</em></p>
<p><a href="https://travis-ci.org/JuliaOpt/Cbc.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c2622975734dc09d12901402fb4cf92ba371175f/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614f70742f4362632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaOpt/Cbc.jl.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is registered in <code>METADATA.jl</code> and so can be installed with <code>Pkg.add</code>.</p>
<pre><code>julia&gt; import Pkg; Pkg.add("Cbc")
</code></pre>
<p>Cbc.jl will use <a href="https://github.com/JuliaPackaging/BinaryProvider.jl">BinaryProvider.jl</a> to automatically install the Cbc binaries. This should work for both the official Julia binaries from <code>https://julialang.org/downloads/</code> and source-builds.</p>
<h2><a id="user-content-custom-installation" class="anchor" aria-hidden="true" href="#custom-installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Custom Installation</h2>
<p>To install custom built Clp binaries set the environmental variable <code>JULIA_CBC_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("Cbc")</code>. For instance, if the libraries are installed in <code>/opt/lib</code> just call</p>
<div class="highlight highlight-source-julia"><pre>ENV[<span class="pl-s"><span class="pl-pds">"</span>JULIA_CBC_LIBRARY_PATH<span class="pl-pds">"</span></span>] <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>/opt/lib<span class="pl-pds">"</span></span>
<span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">build</span>(<span class="pl-s"><span class="pl-pds">"</span>Cbc<span class="pl-pds">"</span></span>)</pre></div>
<p>If you do not want BinaryProvider to download the default binaries on install set  <code>JULIA_CBC_LIBRARY_PATH</code>  before calling <code>import Pkg; Pkg.add("Cbc")</code>.</p>
<p>To switch back to the default binaries clear <code>JULIA_CBC_LIBRARY_PATH</code> and call <code>import Pkg; Pkg.build("Cbc")</code>.</p>
<h3><a id="user-content-using-with-jump" class="anchor" aria-hidden="true" href="#using-with-jump"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using with <strong><a href="https://github.com/JuliaOpt/JuMP.jl">JuMP</a></strong></h3>
<p>Use <code>Cbc.Optimizer</code> to use Cbc with JuMP:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Cbc
<span class="pl-k">using</span> JuMP
model <span class="pl-k">=</span> <span class="pl-c1">Model</span>(<span class="pl-c1">with_optimizer</span>(Cbc<span class="pl-k">.</span>Optimizer, logLevel<span class="pl-k">=</span><span class="pl-c1">1</span>))</pre></div>
<p>Options are solver-dependent, and unfortunately not well documented.</p>
<p>The following options are likely to be the most useful:</p>
<ul>
<li><code>seconds</code> -- Solution timeout limit. (Must be a <code>Float64</code>)</li>
<li><code>logLevel</code> -- Set to 1 to enable solution output.</li>
<li><code>maxSolutions</code> -- Terminate after this many feasible solutions have been found.</li>
<li><code>maxNodes</code> -- Terminate after this many branch-and-bound nodes have been evaluated.</li>
<li><code>allowableGap</code> -- Terminate after optimality gap is less than this value (on an absolute scale).</li>
<li><code>ratioGap</code> -- Terminate after optimality gap is smaller than this relative fraction.</li>
<li><code>threads</code> -- Set the number of threads to use for parallel branch &amp; bound</li>
</ul>
<p>The complete list of parameters can be found by running the <code>cbc</code> executable and typing <code>?</code> at the prompt.</p>
<h3><a id="user-content-using-the-c-interface" class="anchor" aria-hidden="true" href="#using-the-c-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Using the C interface</h3>
<p>The low-level C interface is available in the <code>CbcCInterface</code> submodule:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Cbc<span class="pl-k">.</span>CbcCInterface</pre></div>
<p>Using this interface is not recommended.</p>
</article></div>