<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-qxcontexts" class="anchor" aria-hidden="true" href="#qxcontexts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>QXContexts</h1>
<p><a href="https://JuliaQX.github.io/QXContexts.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://JuliaQX.github.io/QXContexts.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://github.com/JuliaQX/QXContexts.jl/actions"><img src="https://github.com/JuliaQX/QXContexts.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/JuliaQX/QXContexts.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/e0e5a0f65c676be905b892fac16c3650b8b68b8bf7b24fe40f5dc35ee41739e1/68747470733a2f2f636f6465636f762e696f2f67682f4a756c696151582f5158436f6e74657874732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/JuliaQX/QXContexts.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>QXContexts is a Julia package for simulating quantum circuits using tensor networking approaches targeting large distributed memory clusters with hardware
accelerators. It was developed as part of the QuantEx project, one of the individual software projects of WP8 of PRACE 6IP.</p>
<p>QXContexts is one of a family of packages each with a different aim. QXContexts is the package that is designed to the do the bulk of the computations and makes use of
distributed compute resources via <a href="https://github.com/JuliaParallel/MPI.jl">MPI.jl</a> as well as hardware accelerators. <a href="https://github.com/under-Peter/OMEinsum.jl">OMEinsum.jl</a> and <a href="https://github.com/Jutho/TensorOperations.jl">TensorOperations.jl</a> are currently used to carry out the tensor contraction operations.</p>
<h1><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installation</h1>
<p>QXContexts is a Julia package and can be installed using Julia's inbuilt package manager from the Julia REPL using.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(&quot;QXContexts&quot;)
"><pre><code>import Pkg
Pkg.add("QXContexts")
</code></pre></div>
<p>or directly from the github repository with</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="import Pkg
Pkg.add(url=&quot;https://github.com/JuliaQX/QXContexts.jl&quot;)
"><pre><code>import Pkg
Pkg.add(url="https://github.com/JuliaQX/QXContexts.jl")
</code></pre></div>
<h2><a id="user-content-custom-system-image" class="anchor" aria-hidden="true" href="#custom-system-image"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Custom system image</h2>
<p>Using a custom system image with required objects compiled in can greatly reduce the latency when starting computations.
To build a custom system image one can run the following commands from the Julia REPL</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="import QXContexts
QXContexts.compile()
"><pre><code>import QXContexts
QXContexts.compile()
</code></pre></div>
<p>This can take up to a half hour to compile and will produce a shared object system image file in the root folder of the project.
This will have a different suffix depending on the platform (<code>.so</code> for Linux systems, <code>.dylib</code> for macOS and <code>.dll</code> for windows systems).
To use the system image the <code>--sysimage</code> (<code>-J</code> for short) can be used providing the path to the system image. For example</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julis --project --sysimage=JuliaSysimage.so
"><pre><code>julis --project --sysimage=JuliaSysimage.so
</code></pre></div>
<h1><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example usage</h1>
<p>QXContexts uses input files generated by QXSim which describe the computation to be performed. An example of the input files for a five qubit GHZ circuit are provided
in the <code>examples/ghz</code> folder.
This example can be run directly using the <code>examples/ghz_example.jl</code> script or this can be run using the CLI <code>bin/qxrun.jl</code> script with the following command</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -i examples/ghz/ghz_5.jld2 -p examples/ghz/ghz_5.yml -o examples/ghz/out.jld2
"><pre><code>julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -i examples/ghz/ghz_5.jld2 -p examples/ghz/ghz_5.yml -o examples/ghz/out.jld2
</code></pre></div>
<p>where the <code>-d</code>, <code>-i</code> and <code>-p</code> switches describe the DSL file, input data file and parameter file to use respectively. The <code>-o</code> switch refers to the output file. If all three files have the same prefix, then it is only necessary to provide the name of the dsl file so the example could also be run with the command</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
"><pre><code>julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
</code></pre></div>
<p>The output is written to a <a href="https://github.com/JuliaIO/JLD2.jl">JLD2</a> file. A small utility
script called <code>examine_output.jl</code> is provided that allows examination of this output which
can be used as</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="julia --project bin/examing_output.jl examples/ghz/out.jld2
"><pre><code>julia --project bin/examing_output.jl examples/ghz/out.jld2
</code></pre></div>
<h2><a id="user-content-enable-timing" class="anchor" aria-hidden="true" href="#enable-timing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Enable timing</h2>
<p>To get timing information on the different sections of the code the code has been instrumented with <a href="https://github.com/KristofferC/TimerOutputs.jl">TimerOutputs.jl</a>. To enable this one can set the <code>QXRUN_TIMER</code> variable to <code>1</code>. For example</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="QXRUN_TIMER=1 julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
"><pre><code>QXRUN_TIMER=1 julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
</code></pre></div>
<h2><a id="user-content-enable-debugging" class="anchor" aria-hidden="true" href="#enable-debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Enable debugging</h2>
<p>To get detailed debugging information one can include the package name in the <code>JULIA_DEBUG</code> environment variable. For example</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="JULIA_DEBUG=QXContexts julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
"><pre><code>JULIA_DEBUG=QXContexts julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
</code></pre></div>
<p>This generates very verbose output so care should be taking when using this for large runs.</p>
<h2><a id="user-content-enable-logging" class="anchor" aria-hidden="true" href="#enable-logging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Enable logging</h2>
<p>To log debug and and performance information to files QXContexts has 3 logger-models:</p>
<ul>
<li>QXLogger: the default stdout logger: useful for single node, single process logging (interactive)</li>
<li>QXLoggerMPIShared: an MPI-IO shared-file logger: all MPI ranks share a single file for writing their respective logs; blocking.</li>
<li>QXLoggerMPIPerRank: MPI-enabled file per rank logger: non-blocking debug files created per MPI rank.</li>
</ul>
<p>The loggers can be (individually) instantiated by selecting the global logger to use with one of the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="global_logger(QXContexts.Logger.QXLogger())
global_logger(QXContexts.Logger.QXLoggerMPIShared())
global_logger(QXContexts.Logger.QXLoggerMPIPerRank())
"><pre><code>global_logger(QXContexts.Logger.QXLogger())
global_logger(QXContexts.Logger.QXLoggerMPIShared())
global_logger(QXContexts.Logger.QXLoggerMPIPerRank())
</code></pre></div>
<h1><a id="user-content-running-with-mpi" class="anchor" aria-hidden="true" href="#running-with-mpi"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Running with MPI</h1>
<p>MPI is used to use multiple processes for computation. The <code>mpiexecjl</code> script can be used to launch Julia on multiple processes. See <a href="https://juliaparallel.github.io/MPI.jl/latest/configuration/#Julia-wrapper-for-mpiexec" rel="nofollow">MPI.jl documentation</a> for details on how to set this up. For example to run the above example with 4 processes one would use the following:</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="mpiexecjl --project -n 4 julia bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
"><pre><code>mpiexecjl --project -n 4 julia bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2
</code></pre></div>
<p>In this case the amplitudes that are to be calculated are split between the processes. For
larger cases where many partitions are used for each amplitude it can be useful to split
this calculation over many processes also. The <code>--sub-communicator-size</code> (or <code>-m</code>) option
can be used to specify the size of sub-communicators to use for each amplitude. For example</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="mpiexecjl --project -n 4 julia bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2 -m 2
"><pre><code>mpiexecjl --project -n 4 julia bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2 -m 2
</code></pre></div>
<p>Here the four processes are split between two communicators, each with two processes.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
# Contributing
Contributions from users are welcome and we encourage users to open issues and submit merge/pull requests for any problems or feature requests they have. The
[CONTRIBUTING.md](CONTRIBUTION.md) has further details of the contribution guidelines.


# Building documentation

QXSim.jl using [Documenter.jl](https://juliadocs.github.io/Documenter.jl/stable/) to generate documentation. To build
the documentation locally run the following from the top-level folder.

The first time it is will be necessary to instantiate the environment to install dependencies

"><pre><code>
# Contributing
Contributions from users are welcome and we encourage users to open issues and submit merge/pull requests for any problems or feature requests they have. The
[CONTRIBUTING.md](CONTRIBUTION.md) has further details of the contribution guidelines.


# Building documentation

QXSim.jl using [Documenter.jl](https://juliadocs.github.io/Documenter.jl/stable/) to generate documentation. To build
the documentation locally run the following from the top-level folder.

The first time it is will be necessary to instantiate the environment to install dependencies

</code></pre></div>
<p>julia --project=docs 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
and then to build the documentation

"><pre><code>
and then to build the documentation

</code></pre></div>
<p>julia --project=docs docs/make.jl</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
To serve the generated documentation locally use

"><pre><code>
To serve the generated documentation locally use

</code></pre></div>
<p>julia --project=docs -e 'using Pkg; Pkg.add("LiveServer"); using LiveServer; serve(dir="docs/build")'</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
Or with python3 using from the `docs/build` folder using

"><pre><code>
Or with python3 using from the `docs/build` folder using

</code></pre></div>
<p>python3 -m http.server</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="
The generated documentation should now be viewable locally in a browser at `http://localhost:8000`.
"><pre><code>
The generated documentation should now be viewable locally in a browser at `http://localhost:8000`.
</code></pre></div>
</article></div>