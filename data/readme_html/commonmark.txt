<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-commonmark" class="anchor" aria-hidden="true" href="#commonmark"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CommonMark</h1>
<p><em>A <a href="https://spec.commonmark.org/current/" rel="nofollow">CommonMark</a>-compliant parser for Julia.</em></p>
<p><a href="https://travis-ci.org/MichaelHatherly/CommonMark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/209e8cf0cebe87645f793a4e0e30bbf207a1601a/68747470733a2f2f7472617669732d63692e6f72672f4d69636861656c4861746865726c792f436f6d6d6f6e4d61726b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MichaelHatherly/CommonMark.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/MichaelHatherly/CommonMark.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/1740837cc72b953ff9dbaccfa4ce7d0928834fcc/68747470733a2f2f636f6465636f762e696f2f67682f4d69636861656c4861746865726c792f436f6d6d6f6e4d61726b2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/MichaelHatherly/CommonMark.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-interface" class="anchor" aria-hidden="true" href="#interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Interface</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CommonMark</pre></div>
<p>Create a markdown parser with the default CommonMark settings and then add
footnote syntax to our parser.</p>
<div class="highlight highlight-source-julia"><pre>parser <span class="pl-k">=</span> <span class="pl-c1">Parser</span>()
<span class="pl-c1">enable!</span>(parser, <span class="pl-c1">FootnoteRule</span>())</pre></div>
<p>Parse some text to an abstract syntax tree.</p>
<div class="highlight highlight-source-julia"><pre>ast <span class="pl-k">=</span> <span class="pl-c1">parser</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello *world*<span class="pl-pds">"</span></span>)</pre></div>
<p>Write <code>ast</code> to a string.</p>
<div class="highlight highlight-source-julia"><pre>body <span class="pl-k">=</span> <span class="pl-c1">html</span>(ast)
content <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>&lt;head&gt;&lt;/head&gt;&lt;body&gt;<span class="pl-v">$body</span>&lt;/body&gt;<span class="pl-pds">"</span></span></pre></div>
<p>Write to a file.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">open</span>(<span class="pl-s"><span class="pl-pds">"</span>file.tex<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>w<span class="pl-pds">"</span></span>) <span class="pl-k">do</span> file
    <span class="pl-c1">latex</span>(file, ast)
    <span class="pl-c1">println</span>(file, <span class="pl-s"><span class="pl-pds">"</span>rest of document...<span class="pl-pds">"</span></span>)
<span class="pl-k">end</span></pre></div>
<p>Or write to a buffer, such as <code>stdout</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">term</span>(stdout, ast)</pre></div>
<h3><a id="user-content-output-formats" class="anchor" aria-hidden="true" href="#output-formats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Output Formats</h3>
<p>Supported output formats are currently:</p>
<ul>
<li><code>html</code></li>
<li><code>latex</code></li>
<li><code>term</code>: colourised and Unicode-formatted for display in a terminal.</li>
<li><code>markdown</code></li>
<li><code>notebook</code>: <a href="https://jupyter.org/" rel="nofollow">Jupyter</a> notebooks.</li>
</ul>
<h2><a id="user-content-extensions" class="anchor" aria-hidden="true" href="#extensions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Extensions</h2>
<p>Extensions can be enabled using the <code>enable!</code> function and disabled using <code>disable!</code>.</p>
<h3><a id="user-content-typography" class="anchor" aria-hidden="true" href="#typography"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Typography</h3>
<p>Convert ASCII dashes, ellipses, and quotes to their Unicode equivalents.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(parser, <span class="pl-c1">TypographyRule</span>())</pre></div>
<p>Keyword arguments available for <code>TypographyRule</code> are</p>
<ul>
<li><code>double_quotes</code></li>
<li><code>single_quotes</code></li>
<li><code>ellipses</code></li>
<li><code>dashes</code></li>
</ul>
<p>which all default to <code>true</code>.</p>
<h3><a id="user-content-admonitions" class="anchor" aria-hidden="true" href="#admonitions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Admonitions</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(parser, <span class="pl-c1">AdmonitionRule</span>())</pre></div>
<h3><a id="user-content-front-matter" class="anchor" aria-hidden="true" href="#front-matter"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Front matter</h3>
<p>Fenced blocks at the start of a file containing structured data.</p>
<pre><code>+++
[heading]
content = "..."
+++

The rest of the file...
</code></pre>
<p>The block <strong>must</strong> start on the first line of the file. Supported blocks are:</p>
<ul>
<li><code>;;;</code> for JSON</li>
<li><code>+++</code> for TOML</li>
<li><code>---</code> for YAML</li>
</ul>
<p>To enable provide the <code>FrontMatterRule</code> with your choice of parsers for the formats:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> JSON
<span class="pl-c1">enable!</span>(parser, <span class="pl-c1">FrontMatterRule</span>(json<span class="pl-k">=</span>JSON<span class="pl-k">.</span>Parser<span class="pl-k">.</span>parse))</pre></div>
<h3><a id="user-content-footnotes" class="anchor" aria-hidden="true" href="#footnotes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Footnotes</h3>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(parser, <span class="pl-c1">FootnoteRule</span>())</pre></div>
<h3><a id="user-content-math" class="anchor" aria-hidden="true" href="#math"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Math</h3>
<p>Julia-style inline and display maths:</p>
<div class="highlight highlight-source-gfm"><pre>Some <span class="pl-c1">``\LaTeX``</span> math:

<span class="pl-c1">```math</span><span class="pl-s1"></span>
<span class="pl-s1">f(a) = \frac{1}{2\pi}\int_{0}^{2\pi} (\alpha+R\cos(\theta))d\theta</span>
<span class="pl-s1"></span><span class="pl-c1">```</span></pre></div>
<p>Enabled with:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(parser, <span class="pl-c1">MathRule</span>())</pre></div>
<h3><a id="user-content-tables" class="anchor" aria-hidden="true" href="#tables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Tables</h3>
<p>Pipe-style tables, similar to GitHub's using <code>|</code>. <strong>Strict alignment</strong> required for pipes.</p>
<div class="highlight highlight-source-gfm"><pre>| Column One | Column Two | Column Three |
|:---------- | ---------- |:------------:|
| Row `1`    | Column `2` |              |
| *Row* 2    | **Row** 2  | Column ``3`` |</pre></div>
<p>Enabled with:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(parser, <span class="pl-c1">TableRule</span>())</pre></div>
<h3><a id="user-content-raw-content" class="anchor" aria-hidden="true" href="#raw-content"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Raw Content</h3>
<p>Overload literal syntax to support passing through any type of raw content.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(parser, <span class="pl-c1">RawContentRule</span>())</pre></div>
<p>By default <code>RawContentRule</code> will handle inline and block content in HTML and
LaTeX formats.</p>
<div class="highlight highlight-source-gfm"><pre>This is raw HTML: <span class="pl-c1">`&lt;img src="myimage.jpg"&gt;`</span>{=html}.

And here's an HTML block:

<span class="pl-c1"><span class="pl-c1">```{=html}</span></span>
<span class="pl-c1">&lt;div id="main"&gt;</span>
<span class="pl-c1"> &lt;div class="article"&gt;</span>
<span class="pl-c1"><span class="pl-c1">```</span></span></pre></div>
<div class="highlight highlight-source-gfm"><pre><span class="pl-c1"><span class="pl-c1">```{=latex}</span></span>
<span class="pl-c1">\begin{tikzpicture}</span>
<span class="pl-c1">\draw[gray, thick] (-1,2) -- (2,-4);</span>
<span class="pl-c1">\draw[gray, thick] (-1,-1) -- (2,2);</span>
<span class="pl-c1">\filldraw[black] (0,0) circle (2pt) node[anchor=west] {Intersection point};</span>
<span class="pl-c1">\end{tikzpicture}</span>
<span class="pl-c1"><span class="pl-c1">```</span></span></pre></div>
<p>This can be used to pass through different complex content that can't be easily
handled by CommonMark natively without any loss of expressiveness.</p>
<p>Custom raw content handlers can also be passed through when enabling the rule.
The naming scheme is <code>&lt;format&gt;_inline</code> or <code>&lt;format&gt;_block</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(p, <span class="pl-c1">RawContentRule</span>(rst_inline<span class="pl-k">=</span>RstInline))</pre></div>
<p>The last example would require the definition of a custom <code>RstInline</code> struct
and associated display methods for all supported output types, namely: <code>html</code>,
<code>latex</code>, and <code>term</code>. When passing your own keywords to <code>RawContentRule</code> the
defaults are not included and must be enabled individually.</p>
<h3><a id="user-content-attributes" class="anchor" aria-hidden="true" href="#attributes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Attributes</h3>
<p>Block and inline nodes can be tagged with arbitrary metadata in the form of
key/value pairs using the <code>AttributeRule</code> extension.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(p, <span class="pl-c1">AttributeRule</span>())</pre></div>
<p>Block attributes appear directly <em>above</em> the node that they target:</p>
<div class="highlight highlight-source-gfm"><pre>{#my_id color="red"}
<span class="pl-mh"><span class="pl-mh">#</span><span class="pl-mh"> </span>Heading</span></pre></div>
<p>This will attach the metadata <code>id="my_id"</code> and <code>color="red"</code> to <code># Heading</code>.</p>
<p>Inline attributes appear directly <em>after</em> the node that they target:</p>
<div class="highlight highlight-source-gfm"><pre><span class="pl-mi">*Some styled text*</span>{background="green"}.</pre></div>
<p>Which will attach metadata <code>background="green"</code> to the emphasised text
<code>Some styled text</code>.</p>
<p>CSS-style shorthand syntax <code>#&lt;name&gt;</code> and <code>.&lt;name&gt;</code> are available to use in
place of <code>id="&lt;name&gt;"</code> and <code>class="name"</code>. Multiple classes may be specified
sequentially.</p>
<p><code>AttributeRule</code> does not handle writing metadata to particular formats such as
HTML or LaTeX. It is up to the implementation of a particular writer format to
make use of available metadata itself. The built-in <code>html</code> and <code>latex</code> outputs
make use of included attributes. <code>html</code> will include <em>all</em> provided attributes
in the output, while <code>latex</code> makes use of <em>only</em> the <code>#&lt;id&gt;</code> attribute.</p>
<h3><a id="user-content-citations" class="anchor" aria-hidden="true" href="#citations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Citations</h3>
<p>Use the following to enable in-text citations and reference list generation:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">enable!</span>(p, <span class="pl-c1">CitationRule</span>())</pre></div>
<p>Syntax for citations is similar to what is offered by
<a href="https://pandoc.org/MANUAL.html#citations" rel="nofollow">Pandoc</a>. Citations start with <code>@</code>.</p>
<div class="highlight highlight-source-gfm"><pre>Citations can either appear in square brackets [<span class="pl-v">@</span><span class="pl-s">id</span>], or they can be written as
part of the text like <span class="pl-v">@</span><span class="pl-s">id</span>. Bracketed citations can contain more than one
citation; separated by semi-colons [<span class="pl-v">@</span><span class="pl-s">one</span>; <span class="pl-v">@</span><span class="pl-s">two</span>; and <span class="pl-v">@</span><span class="pl-s">three</span>].

{#refs}
<span class="pl-mh"><span class="pl-mh">#</span><span class="pl-mh"> </span>References</span></pre></div>
<p>A reference section that will be populated with a list of all references can be
marked using a <code>{#refs}</code> attribute from <code>AttributeRule</code> at the <em>toplevel</em> of
the document. The list will be inserted after the node, in this case <code># References</code>.</p>
<p>Citations and reference lists are formatted following the
<a href="https://www.chicagomanualofstyle.org/home.html" rel="nofollow">Chicago Manual of Style</a>.
Styling will, in future versions, be customisable using
<a href="https://citationstyles.org/" rel="nofollow">Citation Style Language</a> styles.</p>
<p>The reference data used for citations must be provided in a format matching
<a href="https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html" rel="nofollow">CSL JSON</a>.
Pass this data to <code>CommonMark.jl</code> when writing an AST to a output format.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">html</span>(ast, <span class="pl-c1">Dict</span><span class="pl-c1">{String,Any}</span>(<span class="pl-s"><span class="pl-pds">"</span>references<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> JSON<span class="pl-k">.</span><span class="pl-c1">parsefile</span>(<span class="pl-s"><span class="pl-pds">"</span>references.json<span class="pl-pds">"</span></span>)))</pre></div>
<p>CSL JSON can be exported easily from reference management software such as
<a href="https://www.zotero.org/" rel="nofollow">Zotero</a> or generated via <code>pandoc-citeproc --bib2json</code>
or similar. The <code>references</code> data can be provided by the front matter section
of a document so long as the <code>FrontMatterRule</code> has been enabled, though this does
require writing your CSL data manually.</p>
<p>Note that the text format of the reference list is not important, and does not
<em>have</em> to be JSON data. So long as the <em>shape</em> of the data matches CSL JSON it
is valid. Below we use YAML <code>references</code> embedded in the document's front
matter:</p>
<div class="highlight highlight-source-gfm"><pre><span class="pl-c">---</span>
<span class="pl-ent">references</span>:
- <span class="pl-ent">id</span>: <span class="pl-s">abelson1996</span>
  <span class="pl-ent">author</span>:
    - <span class="pl-ent">family</span>: <span class="pl-s">Abelson</span>
      <span class="pl-ent">given</span>: <span class="pl-s">Harold</span>
    - <span class="pl-ent">family</span>: <span class="pl-s">Sussman</span>
      <span class="pl-ent">given</span>: <span class="pl-s">Gerald Jay</span>
  <span class="pl-ent">edition</span>: <span class="pl-s">2nd Editon</span>
  <span class="pl-ent">event-place</span>: <span class="pl-s">Cambridge</span>
  <span class="pl-ent">ISBN</span>: <span class="pl-s">0-262-01153-0</span>
  <span class="pl-ent">issued</span>:
    <span class="pl-ent">date-parts</span>:
      - <span class="pl-c1">- 1996</span>
  <span class="pl-ent">publisher</span>: <span class="pl-s">MIT Press/McGraw-Hill</span>
  <span class="pl-ent">publisher-place</span>: <span class="pl-s">Cambridge</span>
  <span class="pl-ent">title</span>: <span class="pl-s">Structure and interpretation of computer programs</span>
  <span class="pl-ent">type</span>: <span class="pl-s">book</span>
<span class="pl-c">---</span>

Here's a citation [<span class="pl-v">@</span><span class="pl-s">abelson1996</span>].

{#refs}
<span class="pl-mh"><span class="pl-mh">#</span><span class="pl-mh"> </span>References</span></pre></div>
<h3><a id="user-content-commonmark-defaults" class="anchor" aria-hidden="true" href="#commonmark-defaults"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CommonMark Defaults</h3>
<p>Block rules enabled by default in <code>Parser</code> objects:</p>
<ul>
<li><code>AtxHeadingRule()</code></li>
<li><code>BlockQuoteRule()</code></li>
<li><code>FencedCodeBlockRule()</code></li>
<li><code>HtmlBlockRule()</code></li>
<li><code>IndentedCodeBlockRule()</code></li>
<li><code>ListItemRule()</code></li>
<li><code>SetextHeadingRule()</code></li>
<li><code>ThematicBreakRule()</code></li>
</ul>
<p>Inline rules enabled by default in <code>Parser</code> objects:</p>
<ul>
<li><code>AsteriskEmphasisRule()</code></li>
<li><code>AutolinkRule()</code></li>
<li><code>HtmlEntityRule()</code></li>
<li><code>HtmlInlineRule()</code></li>
<li><code>ImageRule()</code></li>
<li><code>InlineCodeRule()</code></li>
<li><code>LinkRule()</code></li>
<li><code>UnderscoreEmphasisRule()</code></li>
</ul>
<p>These can all be disabled using <code>disable!</code>. Note that disabling some parser
rules may result in unexpected results. It is recommended to be conservative in
what is disabled.</p>
<p><strong>Note</strong></p>
<p>Until version <code>1.0.0</code> the rules listed above are subject to change and should
be considered unstable regardless of whether they are exported or not.</p>
<h2><a id="user-content-writer-configuration" class="anchor" aria-hidden="true" href="#writer-configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Writer Configuration</h2>
<p>When writing to an output format configuration data can be provided by:</p>
<ul>
<li>passing a <code>Dict{String,Any}</code> to the writer method,</li>
<li>front matter in the source document using the <code>FrontMatterRule</code> extension.</li>
</ul>
<p>Front matter takes precedence over the passed <code>Dict</code>.</p>
<h3><a id="user-content-notable-variables" class="anchor" aria-hidden="true" href="#notable-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Notable Variables</h3>
<p>Values used to determine template behaviour:</p>
<ul>
<li>
<p><code>template-engine::Function</code> Used to render standalone document templates.</p>
<p>No default is provided by this package. The <code>template-engine</code> function
should follow the interface provided by <code>Mustache.render</code>. It is
recommended to use <a href="https://github.com/jverzani/Mustache.jl">Mustache.jl</a>
to provide this functionalilty.</p>
<p>Syntax for opening and closing tags used by <code>CommonMark.jl</code> is <code>${...}</code>.
See the templates in <code>src/writers/templates</code> for usage examples.</p>
</li>
<li>
<p><code>&lt;format&gt;.template.file::String</code> Custom template file to use for standalone <code>&lt;format&gt;</code>.</p>
</li>
<li>
<p><code>&lt;format&gt;.template.string::String</code> Custom template string to use for standalone <code>&lt;format&gt;</code>.</p>
</li>
</ul>
<p>Generic variables that can be included in templates to customise documents:</p>
<ul>
<li>
<p><code>abstract::String</code> Summary of the document.</p>
</li>
<li>
<p><code>authors::Vector{String}</code> Vector of author names.</p>
</li>
<li>
<p><code>date::String</code> Date of file generation.</p>
</li>
<li>
<p><code>keywords::Vector{String}</code> Vector of keywords to be included in the document metadata.</p>
</li>
<li>
<p><code>lang::String</code> Language of the document.</p>
</li>
<li>
<p><code>title::String</code> Title of the document.</p>
</li>
<li>
<p><code>subtitle::String</code> Subtitle of the document.</p>
</li>
</ul>
<p>Format-specific variables that should be used only in a particular format's
template. They are namespaced to avoid collision with other variables.</p>
<ul>
<li>
<p><code>html</code></p>
<ul>
<li>
<p><code>html.css::Vector{String}</code> Vector of CSS files to include in document.</p>
</li>
<li>
<p><code>html.js::Vector{String}</code> Vector of JavaScript files to include in document.</p>
</li>
</ul>
</li>
<li>
<p><code>latex</code></p>
<ul>
<li><code>latex.documentclass::String</code> Class file to use for document. Default is <code>article</code>.</li>
</ul>
</li>
</ul>
<p>The following are automatically available in document templates.</p>
<ul>
<li>
<p><code>body::String</code> Main content of the page.</p>
</li>
<li>
<p><code>curdir::String</code> Current directory.</p>
</li>
<li>
<p><code>outputfile::String</code> Name of file that is being written to. When writing to an in-memory
buffer this variable is not defined.</p>
</li>
</ul>
</article></div>