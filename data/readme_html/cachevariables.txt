<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cachevariablesjl" class="anchor" aria-hidden="true" href="#cachevariablesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CacheVariables.jl</h1>
<p><a href="https://github.com/dahong67/CacheVariables.jl/actions"><img src="https://github.com/dahong67/CacheVariables.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/dahong67/CacheVariables.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/3320a349f393f9dd49629a9d8bb1d99b87e5bc8d5f30b4365a51ccbf1dec11a8/68747470733a2f2f636f6465636f762e696f2f67682f6461686f6e6736372f43616368655661726961626c65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/dahong67/CacheVariables.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p>A lightweight way to save outputs from (expensive) computations.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@cache &quot;test.bson&quot; begin
  a = &quot;a very time-consuming quantity to compute&quot;
  b = &quot;a very long simulation to run&quot;
  100
end
"><pre><span class="pl-c1">@cache</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
  a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very time-consuming quantity to compute<span class="pl-pds">"</span></span>
  b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very long simulation to run<span class="pl-pds">"</span></span>
  <span class="pl-c1">100</span>
<span class="pl-k">end</span></pre></div>
<p>The first time this block runs,
it identifies the variables <code>a</code> and <code>b</code> and saves them
(in addition to the final output <code>100</code> that is saved as <code>ans</code>)
in a BSON file called <code>test.bson</code>.
Subsequent runs load the saved values from the file <code>test.bson</code>
rather than re-running the potentially time-consuming computations!
Especially handy for long simulations.</p>
<p>An example of the output:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using CacheVariables

julia&gt; @cache &quot;test.bson&quot; begin
         a = &quot;a very time-consuming quantity to compute&quot;
         b = &quot;a very long simulation to run&quot;
         100
       end
┌ Info: Saving to test.bson
│ a
└ b
100

julia&gt; @cache &quot;test.bson&quot; begin
         a = &quot;a very time-consuming quantity to compute&quot;
         b = &quot;a very long simulation to run&quot;
         100
       end
┌ Info: Loading from test.bson
│ a
└ b
100
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> CacheVariables

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cache</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
         a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very time-consuming quantity to compute<span class="pl-pds">"</span></span>
         b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very long simulation to run<span class="pl-pds">"</span></span>
         <span class="pl-c1">100</span>
       <span class="pl-k">end</span>
┌ Info<span class="pl-k">:</span> Saving to test<span class="pl-k">.</span>bson
│ a
└ b
<span class="pl-c1">100</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cache</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
         a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very time-consuming quantity to compute<span class="pl-pds">"</span></span>
         b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very long simulation to run<span class="pl-pds">"</span></span>
         <span class="pl-c1">100</span>
       <span class="pl-k">end</span>
┌ Info<span class="pl-k">:</span> Loading from test<span class="pl-k">.</span>bson
│ a
└ b
<span class="pl-c1">100</span></pre></div>
<p>An optional <code>overwrite</code> flag (default is false) at the end
tells the macro to always save,
even when a file with the given name already exists.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @cache &quot;test.bson&quot; begin
         a = &quot;a very time-consuming quantity to compute&quot;
         b = &quot;a very long simulation to run&quot;
         100
       end false
┌ Info: Loading from test.bson
│ a
└ b
100

julia&gt; @cache &quot;test.bson&quot; begin
         a = &quot;a very time-consuming quantity to compute&quot;
         b = &quot;a very long simulation to run&quot;
         100
       end true
┌ Info: Overwriting test.bson
│ a
└ b
100
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cache</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
         a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very time-consuming quantity to compute<span class="pl-pds">"</span></span>
         b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very long simulation to run<span class="pl-pds">"</span></span>
         <span class="pl-c1">100</span>
       <span class="pl-k">end</span> <span class="pl-c1">false</span>
┌ Info<span class="pl-k">:</span> Loading from test<span class="pl-k">.</span>bson
│ a
└ b
<span class="pl-c1">100</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@cache</span> <span class="pl-s"><span class="pl-pds">"</span>test.bson<span class="pl-pds">"</span></span> <span class="pl-k">begin</span>
         a <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very time-consuming quantity to compute<span class="pl-pds">"</span></span>
         b <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>a very long simulation to run<span class="pl-pds">"</span></span>
         <span class="pl-c1">100</span>
       <span class="pl-k">end</span> <span class="pl-c1">true</span>
┌ Info<span class="pl-k">:</span> Overwriting test<span class="pl-k">.</span>bson
│ a
└ b
<span class="pl-c1">100</span></pre></div>
<p>See also a similar package: <a href="https://github.com/marius311/Memoization.jl">Memoization.jl</a></p>
<h2><a id="user-content-caveats" class="anchor" aria-hidden="true" href="#caveats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Caveats</h2>
<ul>
<li>The variable name <code>ans</code> is used for storing the final output
(<code>100</code> in the above examples),
so it is best to avoid using this as a variable name.</li>
</ul>
</article></div>