<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-tensorkitmanifolds--" class="anchor" aria-hidden="true" href="#tensorkitmanifolds--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>TensorKitManifolds <a href="https://github.com/Jutho/TensorKitManifolds.jl/actions"><img src="https://github.com/Jutho/TensorKitManifolds.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a> <a href="https://codecov.io/gh/Jutho/TensorKitManifolds.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8fa9b0f54ae61ca924f20243ce19e49ed6b51a47f5a5cd92c3aaff65b967042c/68747470733a2f2f636f6465636f762e696f2f67682f4a7574686f2f54656e736f724b69744d616e69666f6c64732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/Jutho/TensorKitManifolds.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></h1>
<p>There are three manifolds: Grassmann, Stiefel and Unitary, corresponding to submodules of TensorKitManifolds, whose names are exported.</p>
<p>They all have a function <code>Δ = project(!)(X,W)</code> (e.g. <code>Grassmann.project(!)</code> etc) to project an arbitrary tensor <code>X</code> onto the tangent space of <code>W</code>, which is assumed to be isometric/unitary (not checked). The exclamation mark denotes that <code>X</code> is destroyed in the process. The result <code>Δ</code> is of a specific type, the corresponding <code>TensorMap</code> object can be obtained via an argumentless <code>getindex</code>, i.e. <code>Δ[]</code> returns the corresponding <code>TensorMap</code>. However, you typically don't need those. The base point <code>W</code> is also stored in <code>Δ</code> and can be returned using <code>W = base(Δ)</code>. Hence, <code>Δ</code> should be assumed to be a point <code>(W, Δ[])</code> on the tangent bundle of the manifold.</p>
<p>The objects <code>Δ</code> returned by <code>project(!)</code> also satisfy the behaviour of vector: they have scalar multiplication, addition, left and right in-place multiplication with scalars using <code>lmul!</code> and <code>rmul!</code>, <code>axpy!</code> and <code>axpby!</code> as well as complex euclidean inner product <code>dot</code> and corresponding <code>norm</code>. When combining two tangent vectors using addition or inner product, they need to have the same <code>base</code>.</p>
<p>Furthermore, there are the routines required for OptimKit.jl, which also directly work with the objects returned by <code>project(!)</code>:</p>
<ul>
<li><code>W′, Δ′ = retract(W, Δ, α)</code>: retract <code>W</code> in the direction of <code>Δ</code> with step length <code>α</code>, return both the retracted isometry <code>W′</code> as well as the local tangent <code>Δ′</code></li>
<li><code>inner(W, Δ₁, Δ₂)</code>: inner product between tangent vectors at the point <code>W</code>. Note that <code>W</code> is already encoded in <code>base(Δ₁)</code> and <code>base(Δ₂)</code>, but this is the required interface for the inner product of OptimKit.jl. <code>inner(W, Δ₁, Δ₂; metric = :euclidean) = real(dot(Δ₁,Δ₂))</code> but other metrics might also be available.</li>
<li><code>Θ′ = transport(!)(Θ, W, Δ, α, W′)</code>: transport tangent vector <code>Θ</code> along the retraction of <code>W</code> in the direction of <code>Δ</code> with step length <code>α</code>, which ends at <code>W′</code>. The result is a the transported vector <code>Θ′</code> with <code>base(Θ′) == W′</code>. The method with exclamation mark destroys <code>Θ</code> in the process.</li>
</ul>
<p>When multiple methods are avaible, they are specified using a keyword argument to the above methods, or explicitly as
<code>Stiefel.inner_euclidean</code>, <code>Stiefel.inner_canonical</code>, <code>Stiefel.project_euclidean(!)</code>, <code>Stiefel.project_canonical(!)</code>, <code>Stiefel.retract_exp</code>, <code>Stiefel.transport_exp(!)</code>, <code>Stiefel.retract_cayley</code>, <code>Stiefel.transport_cayley(!)</code>, <code>Unitary.transport_parallel(!)</code>, <code>Unitary.transport_stiefel(!)</code>.</p>
</article></div>