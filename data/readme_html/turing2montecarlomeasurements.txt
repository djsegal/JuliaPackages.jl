<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-turing2montecarlomeasurements" class="anchor" aria-hidden="true" href="#turing2montecarlomeasurements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Turing2MonteCarloMeasurements</h1>
<p dir="auto"><a href="https://travis-ci.org/baggepinnen/Turing2MonteCarloMeasurements.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/4a3f57d686a212343e43a1c88353fe0ce4abccb43466888770af5867134a08af/68747470733a2f2f7472617669732d63692e6f72672f626167676570696e6e656e2f547572696e67324d6f6e74654361726c6f4d6561737572656d656e74732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/baggepinnen/Turing2MonteCarloMeasurements.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/baggepinnen/Turing2MonteCarloMeasurements.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c0b26bfb4f6d94f8b26bdd0e7aac6dacb5410e5836c97e3e733e675057f047ec/68747470733a2f2f636f6465636f762e696f2f67682f626167676570696e6e656e2f547572696e67324d6f6e74654361726c6f4d6561737572656d656e74732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/baggepinnen/Turing2MonteCarloMeasurements.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/2001.07625" rel="nofollow"><img src="https://camo.githubusercontent.com/389529c57a659265eecce7da4dcc53329112a96ba0a355536a292df9c42b909b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61727469636c652d6172586976253341323030312e30373632352d423331423142" alt="arXiv article" data-canonical-src="https://img.shields.io/badge/article-arXiv%3A2001.07625-B31B1B" style="max-width: 100%;"></a></p>
<p dir="auto">This package serves as an interface between <a href="https://github.com/TuringLang/Turing.jl">Turing.jl</a> and <a href="https://github.com/baggepinnen/MonteCarloMeasurements.jl">MonteCarloMeasurements.jl</a>. Turing, as a probabilistic programming language and MCMC inference engine, produces results in the form of a <code>Chain</code>, a type that internally contains all the samples produced during inference. This chain is a bit awkward to work with in its natural form, why this package exists and allows for the conversion of a chain to a named tuple of <code>Particles</code> from MonteCarloMeasurements.jl.</p>
<h1 dir="auto"><a id="user-content-visualization" class="anchor" aria-hidden="true" href="#visualization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Visualization</h1>
<p dir="auto">In this example, we simulate a review process where a number of reviewers are assigning scores to a number of articles. The generation of the data and the model specification are hidden under the collapsed section below.</p>
<details>
<summary>Generate fake data and specify a model</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Turing, Distributions, Plots, Turing2MonteCarloMeasurements

nr = 5 # Number of reviewers
na = 10 # Number of articles
reviewer_bias = rand(Normal(0,1), nr)
article_score = rand(Normal(0,2), na)
R = clamp.([rand(Normal(r+a, 0.1)) for r in reviewer_bias, a in article_score], -5, 5)

Rmask = rand(Bool, size(R))
R = Rmask .* R
R = replace(Rmask, 0=&gt;missing) .* R


m = @model reviewscore(R,nr,na) = begin
    reviewer_bias = Array{Real}(undef, nr)
    reviewer_gain = Array{Real}(undef, nr)
    true_article_score = Array{Real}(undef, na)
    reviewer_pop_bias ~ Normal(0,1)
    reviewer_pop_gain ~ Normal(1,1)
    for i = 1:nr
        reviewer_bias[i] ~ Normal(reviewer_pop_bias,1)
        reviewer_gain[i] ~ Normal(reviewer_pop_gain,1)
    end
    for j = 1:na
        true_article_score[j] ~ Normal(0,2.5)
    end
    rσ ~ TruncatedNormal(1,10,0,100)
    for j = 1:na
        for i = 1:nr
            R[i,j] ~ Normal(reviewer_bias[i] + true_article_score[j] + reviewer_gain[i]*true_article_score[j], rσ)
        end
    end
end"><pre><span class="pl-k">using</span> Turing, Distributions, Plots, Turing2MonteCarloMeasurements

nr <span class="pl-k">=</span> <span class="pl-c1">5</span> <span class="pl-c"><span class="pl-c">#</span> Number of reviewers</span>
na <span class="pl-k">=</span> <span class="pl-c1">10</span> <span class="pl-c"><span class="pl-c">#</span> Number of articles</span>
reviewer_bias <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>), nr)
article_score <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2</span>), na)
R <span class="pl-k">=</span> <span class="pl-c1">clamp</span>.([<span class="pl-c1">rand</span>(<span class="pl-c1">Normal</span>(r<span class="pl-k">+</span>a, <span class="pl-c1">0.1</span>)) <span class="pl-k">for</span> r <span class="pl-k">in</span> reviewer_bias, a <span class="pl-k">in</span> article_score], <span class="pl-k">-</span><span class="pl-c1">5</span>, <span class="pl-c1">5</span>)

Rmask <span class="pl-k">=</span> <span class="pl-c1">rand</span>(Bool, <span class="pl-c1">size</span>(R))
R <span class="pl-k">=</span> Rmask <span class="pl-k">.*</span> R
R <span class="pl-k">=</span> <span class="pl-c1">replace</span>(Rmask, <span class="pl-c1">0</span><span class="pl-k">=&gt;</span><span class="pl-c1">missing</span>) <span class="pl-k">.*</span> R


m <span class="pl-k">=</span> <span class="pl-c1">@model</span> <span class="pl-en">reviewscore</span>(R,nr,na) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    reviewer_bias <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Real}</span>(undef, nr)
    reviewer_gain <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Real}</span>(undef, nr)
    true_article_score <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Real}</span>(undef, na)
    reviewer_pop_bias <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">1</span>)
    reviewer_pop_gain <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">1</span>,<span class="pl-c1">1</span>)
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nr
        reviewer_bias[i] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(reviewer_pop_bias,<span class="pl-c1">1</span>)
        reviewer_gain[i] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(reviewer_pop_gain,<span class="pl-c1">1</span>)
    <span class="pl-k">end</span>
    <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>na
        true_article_score[j] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">2.5</span>)
    <span class="pl-k">end</span>
    rσ <span class="pl-k">~</span> <span class="pl-c1">TruncatedNormal</span>(<span class="pl-c1">1</span>,<span class="pl-c1">10</span>,<span class="pl-c1">0</span>,<span class="pl-c1">100</span>)
    <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>na
        <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>nr
            R[i,j] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(reviewer_bias[i] <span class="pl-k">+</span> true_article_score[j] <span class="pl-k">+</span> reviewer_gain[i]<span class="pl-k">*</span>true_article_score[j], rσ)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
</details>
<p dir="auto">We now focus on how to analyze the inference result. The chain is easily converted using the function <code>Particles</code></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; chain = sample(reviewscore(R,nr,na), HMC(0.05, 10), 1500);

julia&gt; cp = Particles(chain, crop=500); # crop discards the first 500 samples

julia&gt; cp.reviewer_pop_bias
Part1000(0.2605 ± 0.72)

julia&gt; cp.reviewer_pop_gain
Part1000(0.1831 ± 0.62)"><pre>julia<span class="pl-k">&gt;</span> chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(<span class="pl-c1">reviewscore</span>(R,nr,na), <span class="pl-c1">HMC</span>(<span class="pl-c1">0.05</span>, <span class="pl-c1">10</span>), <span class="pl-c1">1500</span>);

julia<span class="pl-k">&gt;</span> cp <span class="pl-k">=</span> <span class="pl-c1">Particles</span>(chain, crop<span class="pl-k">=</span><span class="pl-c1">500</span>); <span class="pl-c"><span class="pl-c">#</span> crop discards the first 500 samples</span>

julia<span class="pl-k">&gt;</span> cp<span class="pl-k">.</span>reviewer_pop_bias
<span class="pl-c1">Part1000</span>(<span class="pl-c1">0.2605</span> ± <span class="pl-c1">0.72</span>)

julia<span class="pl-k">&gt;</span> cp<span class="pl-k">.</span>reviewer_pop_gain
<span class="pl-c1">Part1000</span>(<span class="pl-c1">0.1831</span> ± <span class="pl-c1">0.62</span>)</pre></div>
<p dir="auto">Particles can be plotted</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(cp.reviewer_pop_bias, title=&quot;Reviewer population bias&quot;)"><pre><span class="pl-c1">plot</span>(cp<span class="pl-k">.</span>reviewer_pop_bias, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reviewer population bias<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/rev_bias.svg"><img src="figs/rev_bias.svg" alt="window" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="f1 = bar(article_score, lab=&quot;Data&quot;, xlabel=&quot;Article number&quot;, ylabel=&quot;Article score&quot;, xticks=1:na)
errorbarplot!(1:na, cp.true_article_score, 0.8, seriestype=:scatter)
f2 = bar(reviewer_bias, lab=&quot;Data&quot;, xlabel=&quot;Reviewer number&quot;, ylabel=&quot;Reviewer bias&quot;)
errorbarplot!(1:nr, cp.reviewer_bias, seriestype=:scatter, xticks=1:nr)
plot(f1,f2)"><pre>f1 <span class="pl-k">=</span> <span class="pl-c1">bar</span>(article_score, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Data<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Article number<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Article score<span class="pl-pds">"</span></span>, xticks<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>na)
<span class="pl-c1">errorbarplot!</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>na, cp<span class="pl-k">.</span>true_article_score, <span class="pl-c1">0.8</span>, seriestype<span class="pl-k">=</span><span class="pl-c1">:scatter</span>)
f2 <span class="pl-k">=</span> <span class="pl-c1">bar</span>(reviewer_bias, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Data<span class="pl-pds">"</span></span>, xlabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reviewer number<span class="pl-pds">"</span></span>, ylabel<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Reviewer bias<span class="pl-pds">"</span></span>)
<span class="pl-c1">errorbarplot!</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>nr, cp<span class="pl-k">.</span>reviewer_bias, seriestype<span class="pl-k">=</span><span class="pl-c1">:scatter</span>, xticks<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span>nr)
<span class="pl-c1">plot</span>(f1,f2)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/articles.svg"><img src="figs/articles.svg" alt="window" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-prediction" class="anchor" aria-hidden="true" href="#prediction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Prediction</h1>
<p dir="auto">The <a href="https://turing.ml/dev/tutorials/5-linearregression/" rel="nofollow">linear-regression tutorial</a> for Turing contains instructions on how to do prediction using the inference result. In the tutorial, the posterior mean of the parameters is used to form the prediction. Using <code>Particles</code>, we can instead form the prediction using the entire posterior distribution.</p>
<p dir="auto">Like above, we hide the data generation under a collapsable section.</p>
<details>
<summary>Generate fake data</summary>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Turing, Turing2MonteCarloMeasurements, Distributions, MonteCarloMeasurements
coefficients = randn(5)
x = randn(30, 5)
y = x * coefficients .+ 1 .+ 0.4 .* randn.()
sI = sortperm(y)
y = y[sI]
x = x[sI,:]"><pre><span class="pl-k">using</span> Turing, Turing2MonteCarloMeasurements, Distributions, MonteCarloMeasurements
coefficients <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">5</span>)
x <span class="pl-k">=</span> <span class="pl-c1">randn</span>(<span class="pl-c1">30</span>, <span class="pl-c1">5</span>)
y <span class="pl-k">=</span> x <span class="pl-k">*</span> coefficients <span class="pl-k">.+</span> <span class="pl-c1">1</span> <span class="pl-k">.+</span> <span class="pl-c1">0.4</span> <span class="pl-k">.*</span> <span class="pl-c1">randn</span>.()
sI <span class="pl-k">=</span> <span class="pl-c1">sortperm</span>(y)
y <span class="pl-k">=</span> y[sI]
x <span class="pl-k">=</span> x[sI,:]</pre></div>
</details>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@model linear_regression(x, y, n_obs, n_vars) = begin
    # Set variance prior.
    σ₂ ~ TruncatedNormal(0,100, 0, Inf)

    # Set intercept prior.
    intercept ~ Normal(0, 3)

    # Set the priors on our coefficients.
    coefficients = Array{Real}(undef, n_vars)
    for i in 1:n_vars
        coefficients[i] ~ Normal(0, 10)
    end

    # Calculate all the mu terms.
    mu = intercept .+ x * coefficients
    for i = 1:n_obs
        y[i] ~ Normal(mu[i], σ₂)
    end
end;
n_obs, n_vars = size(x)
model = linear_regression(x, y, n_obs, n_vars)
chain = sample(model, NUTS(0.65), 2500);"><pre><span class="pl-c1">@model</span> <span class="pl-en">linear_regression</span>(x, y, n_obs, n_vars) <span class="pl-k">=</span> <span class="pl-k">begin</span>
    <span class="pl-c"><span class="pl-c">#</span> Set variance prior.</span>
    σ₂ <span class="pl-k">~</span> <span class="pl-c1">TruncatedNormal</span>(<span class="pl-c1">0</span>,<span class="pl-c1">100</span>, <span class="pl-c1">0</span>, <span class="pl-c1">Inf</span>)

    <span class="pl-c"><span class="pl-c">#</span> Set intercept prior.</span>
    intercept <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">3</span>)

    <span class="pl-c"><span class="pl-c">#</span> Set the priors on our coefficients.</span>
    coefficients <span class="pl-k">=</span> <span class="pl-c1">Array</span><span class="pl-c1">{Real}</span>(undef, n_vars)
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_vars
        coefficients[i] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(<span class="pl-c1">0</span>, <span class="pl-c1">10</span>)
    <span class="pl-k">end</span>

    <span class="pl-c"><span class="pl-c">#</span> Calculate all the mu terms.</span>
    mu <span class="pl-k">=</span> intercept <span class="pl-k">.+</span> x <span class="pl-k">*</span> coefficients
    <span class="pl-k">for</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span>n_obs
        y[i] <span class="pl-k">~</span> <span class="pl-c1">Normal</span>(mu[i], σ₂)
    <span class="pl-k">end</span>
<span class="pl-k">end</span>;
n_obs, n_vars <span class="pl-k">=</span> <span class="pl-c1">size</span>(x)
model <span class="pl-k">=</span> <span class="pl-c1">linear_regression</span>(x, y, n_obs, n_vars)
chain <span class="pl-k">=</span> <span class="pl-c1">sample</span>(model, <span class="pl-c1">NUTS</span>(<span class="pl-c1">0.65</span>), <span class="pl-c1">2500</span>);</pre></div>
<p dir="auto">In order to form the prediction, the original tutorial did</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function prediction(chain, x)
    p = get_params(chain[200:end, :, :])
    α = mean(p.intercept)
    β = collect(mean.(p.coefficients))
    return  α .+ x * β
end"><pre><span class="pl-k">function</span> <span class="pl-en">prediction</span>(chain, x)
    p <span class="pl-k">=</span> <span class="pl-c1">get_params</span>(chain[<span class="pl-c1">200</span><span class="pl-k">:</span><span class="pl-c1">end</span>, :, :])
    α <span class="pl-k">=</span> <span class="pl-c1">mean</span>(p<span class="pl-k">.</span>intercept)
    β <span class="pl-k">=</span> <span class="pl-c1">collect</span>(<span class="pl-c1">mean</span>.(p<span class="pl-k">.</span>coefficients))
    <span class="pl-k">return</span>  α <span class="pl-k">.+</span> x <span class="pl-k">*</span> β
<span class="pl-k">end</span></pre></div>
<p dir="auto">we will instead do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="cp = Particles(chain, crop=500)
ŷ = x*cp.coefficients .+ cp.intercept
plot(y, lab=&quot;data&quot;); plot!(ŷ)"><pre>cp <span class="pl-k">=</span> <span class="pl-c1">Particles</span>(chain, crop<span class="pl-k">=</span><span class="pl-c1">500</span>)
ŷ <span class="pl-k">=</span> x<span class="pl-k">*</span>cp<span class="pl-k">.</span>coefficients <span class="pl-k">.+</span> cp<span class="pl-k">.</span>intercept
<span class="pl-c1">plot</span>(y, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>data<span class="pl-pds">"</span></span>); <span class="pl-c1">plot!</span>(ŷ)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/pred.svg"><img src="figs/pred.svg" alt="window" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="bar(coefficients, lab=&quot;True coeffs&quot;, title=&quot;Coefficients&quot;)
errorbarplot!(1:n_vars, cp.coefficients, seriestype=:bar, alpha=0.5)"><pre><span class="pl-c1">bar</span>(coefficients, lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>True coeffs<span class="pl-pds">"</span></span>, title<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>Coefficients<span class="pl-pds">"</span></span>)
<span class="pl-c1">errorbarplot!</span>(<span class="pl-c1">1</span><span class="pl-k">:</span>n_vars, cp<span class="pl-k">.</span>coefficients, seriestype<span class="pl-k">=</span><span class="pl-c1">:bar</span>, alpha<span class="pl-k">=</span><span class="pl-c1">0.5</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/coeffs.svg"><img src="figs/coeffs.svg" alt="window" style="max-width: 100%;"></a></p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="plot(plot.(cp.coefficients)..., legend=false)
vline!(coefficients', l=(3,), lab=&quot;True value&quot;)"><pre><span class="pl-c1">plot</span>(<span class="pl-c1">plot</span>.(cp<span class="pl-k">.</span>coefficients)<span class="pl-k">...</span>, legend<span class="pl-k">=</span><span class="pl-c1">false</span>)
<span class="pl-c1">vline!</span>(coefficients<span class="pl-k">'</span>, l<span class="pl-k">=</span>(<span class="pl-c1">3</span>,), lab<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>True value<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="figs/coeffs_hist.svg"><img src="figs/coeffs_hist.svg" alt="window" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-further-documentation" class="anchor" aria-hidden="true" href="#further-documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Further documentation</h1>
<h3 dir="auto"><a id="user-content-montecarlomeasurements" class="anchor" aria-hidden="true" href="#montecarlomeasurements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MonteCarloMeasurements</h3>
<p dir="auto"><a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://baggepinnen.github.io/MonteCarloMeasurements.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="latest" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a>
<a href="https://arxiv.org/abs/2001.07625" rel="nofollow"><img src="https://camo.githubusercontent.com/389529c57a659265eecce7da4dcc53329112a96ba0a355536a292df9c42b909b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61727469636c652d6172586976253341323030312e30373632352d423331423142" alt="arXiv article" data-canonical-src="https://img.shields.io/badge/article-arXiv%3A2001.07625-B31B1B" style="max-width: 100%;"></a></p>
<h3 dir="auto"><a id="user-content-turing" class="anchor" aria-hidden="true" href="#turing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Turing</h3>
<p dir="auto"><a href="https://turing.ml/dev/docs/using-turing/" rel="nofollow"><img src="https://camo.githubusercontent.com/2728af10eb6b63d2fed3d889bd865d94784473757158be870148868fe29c6fc7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f632d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/doc-latest-blue.svg" style="max-width: 100%;"></a></p>
</article></div>