<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-spectools" class="anchor" aria-hidden="true" href="#spectools"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>SpecTools</h1>
<p dir="auto"><a href="https://github.com/laserkelvin/SpecTools.jl/actions"><img src="https://github.com/laserkelvin/SpecTools.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/laserkelvin/SpecTools.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/99b3eea959d4bd2b4856b96f6c9486ad5f9e9ccf7dc8ec62a2662a37bb1db011/68747470733a2f2f636f6465636f762e696f2f67682f6c617365726b656c76696e2f53706563546f6f6c732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/laserkelvin/SpecTools.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a>
<a href="https://github.com/invenia/BlueStyle"><img src="https://camo.githubusercontent.com/c18fbaa52d94d16b90b19701fc90d289b8a5bb920c74c79bab200b14e75420a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c75652d3434393564312e737667" alt="Code Style: Blue" data-canonical-src="https://img.shields.io/badge/code%20style-blue-4495d1.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><code>SpecTools</code> is a Julia package written to provide base abstractions for concepts in molecular spectroscopy. While rotational spectroscopy is the main usage, in principle the implementations should be general to spectroscopy at all wavelengths.</p>
<h2 dir="auto"><a id="user-content-implementation" class="anchor" aria-hidden="true" href="#implementation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Implementation</h2>
<p dir="auto">There are two types of representations currently implemented, which may be useful in different circumstances:</p>
<ol dir="auto">
<li>Concrete <code>Level</code> and <code>Transition</code> types, representing energy levels and transitions with arbitrary quantum number encoding,</li>
<li>Graph representations of levels and transitions, based on the above types.</li>
</ol>
<p dir="auto">The former is better suited for performing spectral simulations, with performant routines thanks to great packages like <code>Tullio.jl</code>, while the latter is designed specifically for doing large scale analyses and machine learning on spectroscopic graphs:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# create a bipartite graph based on a set of levels and transitions
julia&gt; sg = BipartiteSG(levels, transitions);
# make a contiguous matrix of features for machine learning
julia&gt; features(sg.transitions)

6×49 Matrix{Float64}:
 443.015  1148.16  2387.61  2008.85  3313.11  …  3023.19  1156.43  3436.3  2851.82
   1.0       1.0      1.0      1.0      1.0         1.0      1.0      1.0     1.0
   0.0       1.0      2.0      3.0      4.0        45.0     46.0     47.0    48.0
   0.0       0.0      0.0      0.0      0.0         0.0      0.0      0.0     0.0
   1.0       2.0      3.0      4.0      5.0        46.0     47.0     48.0    49.0
   0.0       0.0      0.0      0.0      0.0   …     0.0      0.0      0.0     0.0"><pre><span class="pl-c"><span class="pl-c">#</span> create a bipartite graph based on a set of levels and transitions</span>
julia<span class="pl-k">&gt;</span> sg <span class="pl-k">=</span> <span class="pl-c1">BipartiteSG</span>(levels, transitions);
<span class="pl-c"><span class="pl-c">#</span> make a contiguous matrix of features for machine learning</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">features</span>(sg<span class="pl-k">.</span>transitions)

<span class="pl-c1">6</span><span class="pl-k">×</span><span class="pl-c1">49</span> Matrix{Float64}<span class="pl-k">:</span>
 <span class="pl-c1">443.015</span>  <span class="pl-c1">1148.16</span>  <span class="pl-c1">2387.61</span>  <span class="pl-c1">2008.85</span>  <span class="pl-c1">3313.11</span>  …  <span class="pl-c1">3023.19</span>  <span class="pl-c1">1156.43</span>  <span class="pl-c1">3436.3</span>  <span class="pl-c1">2851.82</span>
   <span class="pl-c1">1.0</span>       <span class="pl-c1">1.0</span>      <span class="pl-c1">1.0</span>      <span class="pl-c1">1.0</span>      <span class="pl-c1">1.0</span>         <span class="pl-c1">1.0</span>      <span class="pl-c1">1.0</span>      <span class="pl-c1">1.0</span>     <span class="pl-c1">1.0</span>
   <span class="pl-c1">0.0</span>       <span class="pl-c1">1.0</span>      <span class="pl-c1">2.0</span>      <span class="pl-c1">3.0</span>      <span class="pl-c1">4.0</span>        <span class="pl-c1">45.0</span>     <span class="pl-c1">46.0</span>     <span class="pl-c1">47.0</span>    <span class="pl-c1">48.0</span>
   <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>         <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span>
   <span class="pl-c1">1.0</span>       <span class="pl-c1">2.0</span>      <span class="pl-c1">3.0</span>      <span class="pl-c1">4.0</span>      <span class="pl-c1">5.0</span>        <span class="pl-c1">46.0</span>     <span class="pl-c1">47.0</span>     <span class="pl-c1">48.0</span>    <span class="pl-c1">49.0</span>
   <span class="pl-c1">0.0</span>       <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>   …     <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>      <span class="pl-c1">0.0</span>     <span class="pl-c1">0.0</span></pre></div>
<p dir="auto">The graph representations use <code>MetaGraphs.jl</code> to support weighted edges and vertices/nodes. For that reason, it is recommended to use <code>graphplot</code> from <code>GraphMakie.jl</code> to do visualizations of spectroscopic graphs. Similarly, we gain access to all of the graph/network analysis tools in the <code>JuliaGraphs</code> ecosystem:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; adjacency_matrix(bisg.graph)

99×99 SparseArrays.SparseMatrixCSC{Int64, Int64} with 192 stored entries:
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦
⠲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">adjacency_matrix</span>(bisg<span class="pl-k">.</span>graph)

<span class="pl-c1">99</span><span class="pl-k">×</span><span class="pl-c1">99</span> SparseArrays<span class="pl-k">.</span>SparseMatrixCSC{Int64, Int64} with <span class="pl-c1">192</span> stored entries<span class="pl-k">:</span>
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦
⠲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀</pre></div>
</article></div>