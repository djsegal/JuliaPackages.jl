<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-dobotmagician" class="anchor" aria-hidden="true" href="#dobotmagician"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DobotMagician</h1>
<p><a href="https://github.com/dawbarton/DobotMagician.jl/actions"><img src="https://github.com/dawbarton/DobotMagician.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/dawbarton/DobotMagician.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/cdc4903b40d41735fb838b1ff6adfa958579996add91f033e05a0ee0f938af4f/68747470733a2f2f636f6465636f762e696f2f67682f646177626172746f6e2f446f626f744d6167696369616e2e6a6c2f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d396b4473584852514d71" alt="codecov" data-canonical-src="https://codecov.io/gh/dawbarton/DobotMagician.jl/branch/main/graph/badge.svg?token=9kDsXHRQMq" style="max-width:100%;"></a></p>
<p>An interface to the <a href="https://dobot.cc/" rel="nofollow">Dobot Magician</a> robotic arm. This package uses <a href="https://github.com/JuliaIO/LibSerialPort.jl">LibSerialPort.jl</a> to interface directly with the Dobot and so only the <a href="https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers" rel="nofollow">USB serial port driver</a> is required. (If Dobot Studio is installed, the driver is automatically installed.)</p>
<p>The interface follows the Dobot communication protocol v1.1.5.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>There are two interfaces implemented for the Dobot: a direct, low-level interface and a simpler, high-level interface. The direct interface simply calls Dobot functions directly whereas the high-level interface simplifies some of the function calls but only exposes a small amount of the functionality.</p>
<h3><a id="user-content-direct-interface" class="anchor" aria-hidden="true" href="#direct-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Direct interface</h3>
<p>To use the direct interface, import the package and the <code>Direct</code> submodule. All the functions specified in the Dobot communication protocol will be available. A list of all the available functions can be obtained using <code>names(DobotMagician.Direct)</code>.</p>
<p>Each of the available functions provides a short description and details of the payload. To see the details simply call <code>show</code> on the function (or just type the function name into the REPL). Due to the way these functions are implemented, the docstrings are not used.</p>
<p><em>Note: not all functions have been tested.</em></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DobotMagician
using DobotMagician.Direct

# Connect to the Dobot (automatically detect the port)
dobot = DobotMagician.Magician()

# Get the Dobot version
ver = get_device_version(dobot)

# Move the arm (mode 2=MOVL_XYZ: linear motion, cartesian end point)
set_ptp_cmd(dobot, (2, (200, 0, 0, 0)))
sleep(2)

# Turn on the suction cup
set_end_effector_suction_cup(dobot, (1, 1))

# Move the arm (mode 7=MOVL_INC: relative linear motion, cartesian end point)
# Queue the commands so they happen sequentially
set_ptp_cmd(dobot, (7, (20, 0, 0, 0)); queue=true)
set_ptp_cmd(dobot, (7, (0, 20, 0, 0)); queue=true)
set_ptp_cmd(dobot, (7, (0, 0, 20, 0)); queue=true)

# Turn off the suction cup
set_end_effector_suction_cup(dobot, (1, 0); queue=true)
"><pre><span class="pl-k">using</span> DobotMagician
<span class="pl-k">using</span> DobotMagician<span class="pl-k">.</span>Direct

<span class="pl-c"><span class="pl-c">#</span> Connect to the Dobot (automatically detect the port)</span>
dobot <span class="pl-k">=</span> DobotMagician<span class="pl-k">.</span><span class="pl-c1">Magician</span>()

<span class="pl-c"><span class="pl-c">#</span> Get the Dobot version</span>
ver <span class="pl-k">=</span> <span class="pl-c1">get_device_version</span>(dobot)

<span class="pl-c"><span class="pl-c">#</span> Move the arm (mode 2=MOVL_XYZ: linear motion, cartesian end point)</span>
<span class="pl-c1">set_ptp_cmd</span>(dobot, (<span class="pl-c1">2</span>, (<span class="pl-c1">200</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)))
<span class="pl-c1">sleep</span>(<span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Turn on the suction cup</span>
<span class="pl-c1">set_end_effector_suction_cup</span>(dobot, (<span class="pl-c1">1</span>, <span class="pl-c1">1</span>))

<span class="pl-c"><span class="pl-c">#</span> Move the arm (mode 7=MOVL_INC: relative linear motion, cartesian end point)</span>
<span class="pl-c"><span class="pl-c">#</span> Queue the commands so they happen sequentially</span>
<span class="pl-c1">set_ptp_cmd</span>(dobot, (<span class="pl-c1">7</span>, (<span class="pl-c1">20</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">set_ptp_cmd</span>(dobot, (<span class="pl-c1">7</span>, (<span class="pl-c1">0</span>, <span class="pl-c1">20</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>)); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">set_ptp_cmd</span>(dobot, (<span class="pl-c1">7</span>, (<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">20</span>, <span class="pl-c1">0</span>)); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Turn off the suction cup</span>
<span class="pl-c1">set_end_effector_suction_cup</span>(dobot, (<span class="pl-c1">1</span>, <span class="pl-c1">0</span>); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
<h3><a id="user-content-simple-interface" class="anchor" aria-hidden="true" href="#simple-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Simple interface</h3>
<p>To use the simple interface, import the package and the <code>Simple</code> submodule. Currently provided functions are</p>
<ul>
<li><code>move_to</code></li>
<li><code>rmove_to</code></li>
<li><code>pose</code></li>
<li><code>end_effector</code></li>
<li><code>laser</code></li>
<li><code>gripper</code></li>
<li><code>suction_cup</code></li>
<li><code>wait_for</code></li>
</ul>
<p>Each has a docstring.</p>
<p><em>Note: not all functions have been tested.</em></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using DobotMagician
using DobotMagician.Simple

# Connect to the Dobot (automatically detect the port)
dobot = DobotMagician.Magician()

# Move the arm (linear motion, cartesian end point)
move_to(dobot, XYZR(200, 0, 0, 0))
sleep(2)

# Turn on the suction cup
suction_cup(dobot, true)

# Move the arm
# Queue the commands so they happen sequentially
rmove_to(dobot, XYZR(20, 0, 0, 0); queue=true)
rmove_to(dobot, XYZR(0, 20, 0, 0); queue=true)
rmove_to(dobot, XYZR(0, 0, 20, 0); queue=true)

# Turn off the suction cup
suction_cup(dobot, false; queue=true)
"><pre><span class="pl-k">using</span> DobotMagician
<span class="pl-k">using</span> DobotMagician<span class="pl-k">.</span>Simple

<span class="pl-c"><span class="pl-c">#</span> Connect to the Dobot (automatically detect the port)</span>
dobot <span class="pl-k">=</span> DobotMagician<span class="pl-k">.</span><span class="pl-c1">Magician</span>()

<span class="pl-c"><span class="pl-c">#</span> Move the arm (linear motion, cartesian end point)</span>
<span class="pl-c1">move_to</span>(dobot, <span class="pl-c1">XYZR</span>(<span class="pl-c1">200</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>))
<span class="pl-c1">sleep</span>(<span class="pl-c1">2</span>)

<span class="pl-c"><span class="pl-c">#</span> Turn on the suction cup</span>
<span class="pl-c1">suction_cup</span>(dobot, <span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Move the arm</span>
<span class="pl-c"><span class="pl-c">#</span> Queue the commands so they happen sequentially</span>
<span class="pl-c1">rmove_to</span>(dobot, <span class="pl-c1">XYZR</span>(<span class="pl-c1">20</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">rmove_to</span>(dobot, <span class="pl-c1">XYZR</span>(<span class="pl-c1">0</span>, <span class="pl-c1">20</span>, <span class="pl-c1">0</span>, <span class="pl-c1">0</span>); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">rmove_to</span>(dobot, <span class="pl-c1">XYZR</span>(<span class="pl-c1">0</span>, <span class="pl-c1">0</span>, <span class="pl-c1">20</span>, <span class="pl-c1">0</span>); queue<span class="pl-k">=</span><span class="pl-c1">true</span>)

<span class="pl-c"><span class="pl-c">#</span> Turn off the suction cup</span>
<span class="pl-c1">suction_cup</span>(dobot, <span class="pl-c1">false</span>; queue<span class="pl-k">=</span><span class="pl-c1">true</span>)</pre></div>
</article></div>