<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-metagraphs" class="anchor" aria-hidden="true" href="#metagraphs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>MetaGraphs</h1>
<p dir="auto"><a href="https://github.com/JuliaGraphs/Metagraphs.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaGraphs/Metagraphs.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a>
<a href="http://codecov.io/github/JuliaGraphs/Metagraphs.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/b6c8bbc499ba4fb41ff21f07375421033c1ebca7d879a8abcdd01ae201f369f6/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614772617068732f4d6574616772617068732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="Codecov branch" data-canonical-src="http://codecov.io/github/JuliaGraphs/Metagraphs.jl/coverage.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://juliagraphs.org/MetaGraphs.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width: 100%;"></a></p>
<p dir="auto"><a href="https://github.com/JuliaGraphs/MetaGraphs.jl">MetaGraphs.jl</a> graphs with arbitrary metadata.</p>
<h2 dir="auto"><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Documentation</h2>
<p dir="auto">Full documentation is available on the <a href="https://juliagraphs.org/MetaGraphs.jl/dev/" rel="nofollow">JuliaGraphs site</a>.
Documentation for methods is also available via the Julia REPL help system.</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<p dir="auto">Installation is straightforward: from the Julia <code>pkg</code> prompt,</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="add MetaGraphs"><pre>add MetaGraphs</pre></div>
<h2 dir="auto"><a id="user-content-example-usage" class="anchor" aria-hidden="true" href="#example-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example Usage</h2>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Graphs, MetaGraphs

# create a standard simplegraph
julia&gt; g = path_graph(5)
{5, 4} undirected simple Int64 graph

# create a metagraph based on the simplegraph, with optional default edgeweight
julia&gt; mg = MetaGraph(g, 3.0)
{5, 4} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 3.0)

# create a directed metagraph based on the simplegraph, with optional default edgeweight
julia&gt; mdg = MetaDiGraph(g, 3.0)
{5, 8} directed Int64 metagraph with Float64 weights defined by :weight (default weight 3.0)

# set some properties for the graph itself
julia&gt; set_prop!(mg, :description, &quot;This is a metagraph.&quot;)
Dict{Symbol,Any} with 1 entry:
  :description =&gt; &quot;This is a metagraph.&quot;

# set properties on a vertex in bulk
julia&gt; set_props!(mg, 1, Dict(:name=&gt;&quot;Susan&quot;, :id =&gt; 123))
true

# set individual properties
julia&gt; set_prop!(mg, 2, :name, &quot;John&quot;)
true

# set a property on an edge
julia&gt; set_prop!(mg, Edge(1, 2), :action, &quot;knows&quot;)
true

julia&gt; using Dates: Date

# set another property on an edge by specifying source and destination
julia&gt; set_prop!(mg, 1, 2, :since, Date(&quot;20170501&quot;, &quot;yyyymmdd&quot;))
Dict{Symbol,Any} with 2 entries:
  :since   =&gt; 2017-05-01
  :action =&gt; &quot;knows&quot;

# get all the properties for an element
julia&gt; props(mg, 1)
Dict{Symbol,Any} with 2 entries:
  :id   =&gt; 123
  :name =&gt; &quot;Susan&quot;

# get a specific property by name
julia&gt; get_prop(mg, 2, :name)
&quot;John&quot;

# delete a specific property
julia&gt; rem_prop!(mg, 1, :name)
Dict{Symbol,Any} with 1 entry:
  :id =&gt; 123

# clear all properties for vertex 2
julia&gt; clear_props!(mg, 2)
Dict{Symbol,Any} with 0 entries

# confirm there are no properties set for vertex 2
julia&gt; props(mg, 2)
Dict{Symbol,Any} with 0 entries

# all Graphs.jl analytics work
julia&gt; betweenness_centrality(mg)
5-element Array{Float64,1}:
 0.0
 0.5
 0.666667
 0.5
 0.0

# using weights
julia&gt; mg = MetaGraph(complete_graph(3))
{3, 3} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)

julia&gt; enumerate_paths(dijkstra_shortest_paths(mg, 1), 3)
2-element Array{Int64,1}:
 1
 3

julia&gt; set_prop!(mg, 1, 2, :weight, 0.2)
true

julia&gt; set_prop!(mg, 2, 3, :weight, 0.6)
true

julia&gt; enumerate_paths(dijkstra_shortest_paths(mg, 1), 3)
3-element Array{Int64,1}:
 1
 2
 3

# use vertex values as indices
julia&gt; G = MetaGraph(100)
{100, 0} undirected Int64 metagraph with Float64 weights defined by :weight (default weight 1.0)

julia&gt; for i in 1:100
           set_prop!(G, i, :name, &quot;node$i&quot;)
       end

julia&gt; set_indexing_prop!(G, :name)
Set(Symbol[:name])

# nodes can now be found by the value in the index
julia&gt; G[&quot;node4&quot;, :name]
4

# You can also find the value of an index by the vertex number (note, this behavior will dominate if index values are also integers)
julia&gt; G[4, :name]
&quot;node4&quot;

julia&gt; set_prop!(G, 3, :name, &quot;name3&quot;) # or set_indexing_prop!(G, 3, :name, &quot;name3&quot;)
Set(Symbol[:name])"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Graphs, MetaGraphs

<span class="pl-c"><span class="pl-c">#</span> create a standard simplegraph</span>
julia<span class="pl-k">&gt;</span> g <span class="pl-k">=</span> <span class="pl-c1">path_graph</span>(<span class="pl-c1">5</span>)
{<span class="pl-c1">5</span>, <span class="pl-c1">4</span>} undirected simple Int64 graph

<span class="pl-c"><span class="pl-c">#</span> create a metagraph based on the simplegraph, with optional default edgeweight</span>
julia<span class="pl-k">&gt;</span> mg <span class="pl-k">=</span> <span class="pl-c1">MetaGraph</span>(g, <span class="pl-c1">3.0</span>)
{<span class="pl-c1">5</span>, <span class="pl-c1">4</span>} undirected Int64 metagraph with Float64 weights defined by <span class="pl-c1">:weight</span> (default weight <span class="pl-c1">3.0</span>)

<span class="pl-c"><span class="pl-c">#</span> create a directed metagraph based on the simplegraph, with optional default edgeweight</span>
julia<span class="pl-k">&gt;</span> mdg <span class="pl-k">=</span> <span class="pl-c1">MetaDiGraph</span>(g, <span class="pl-c1">3.0</span>)
{<span class="pl-c1">5</span>, <span class="pl-c1">8</span>} directed Int64 metagraph with Float64 weights defined by <span class="pl-c1">:weight</span> (default weight <span class="pl-c1">3.0</span>)

<span class="pl-c"><span class="pl-c">#</span> set some properties for the graph itself</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(mg, <span class="pl-c1">:description</span>, <span class="pl-s"><span class="pl-pds">"</span>This is a metagraph.<span class="pl-pds">"</span></span>)
Dict{Symbol,Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-c1">:description</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>This is a metagraph.<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> set properties on a vertex in bulk</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_props!</span>(mg, <span class="pl-c1">1</span>, <span class="pl-c1">Dict</span>(<span class="pl-c1">:name</span><span class="pl-k">=&gt;</span><span class="pl-s"><span class="pl-pds">"</span>Susan<span class="pl-pds">"</span></span>, <span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">123</span>))
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> set individual properties</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(mg, <span class="pl-c1">2</span>, <span class="pl-c1">:name</span>, <span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> set a property on an edge</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(mg, <span class="pl-c1">Edge</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>), <span class="pl-c1">:action</span>, <span class="pl-s"><span class="pl-pds">"</span>knows<span class="pl-pds">"</span></span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Dates<span class="pl-k">:</span> Date

<span class="pl-c"><span class="pl-c">#</span> set another property on an edge by specifying source and destination</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(mg, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">:since</span>, <span class="pl-c1">Date</span>(<span class="pl-s"><span class="pl-pds">"</span>20170501<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>yyyymmdd<span class="pl-pds">"</span></span>))
Dict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:since</span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">2017</span><span class="pl-k">-</span><span class="pl-c1">05</span><span class="pl-k">-</span><span class="pl-c1">01</span>
  <span class="pl-c1">:action</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>knows<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> get all the properties for an element</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">props</span>(mg, <span class="pl-c1">1</span>)
Dict{Symbol,Any} with <span class="pl-c1">2</span> entries<span class="pl-k">:</span>
  <span class="pl-c1">:id</span>   <span class="pl-k">=&gt;</span> <span class="pl-c1">123</span>
  <span class="pl-c1">:name</span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Susan<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> get a specific property by name</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">get_prop</span>(mg, <span class="pl-c1">2</span>, <span class="pl-c1">:name</span>)
<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">#</span> delete a specific property</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">rem_prop!</span>(mg, <span class="pl-c1">1</span>, <span class="pl-c1">:name</span>)
Dict{Symbol,Any} with <span class="pl-c1">1</span> entry<span class="pl-k">:</span>
  <span class="pl-c1">:id</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">123</span>

<span class="pl-c"><span class="pl-c">#</span> clear all properties for vertex 2</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">clear_props!</span>(mg, <span class="pl-c1">2</span>)
Dict{Symbol,Any} with <span class="pl-c1">0</span> entries

<span class="pl-c"><span class="pl-c">#</span> confirm there are no properties set for vertex 2</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">props</span>(mg, <span class="pl-c1">2</span>)
Dict{Symbol,Any} with <span class="pl-c1">0</span> entries

<span class="pl-c"><span class="pl-c">#</span> all Graphs.jl analytics work</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">betweenness_centrality</span>(mg)
<span class="pl-c1">5</span><span class="pl-k">-</span>element Array{Float64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.5</span>
 <span class="pl-c1">0.666667</span>
 <span class="pl-c1">0.5</span>
 <span class="pl-c1">0.0</span>

<span class="pl-c"><span class="pl-c">#</span> using weights</span>
julia<span class="pl-k">&gt;</span> mg <span class="pl-k">=</span> <span class="pl-c1">MetaGraph</span>(<span class="pl-c1">complete_graph</span>(<span class="pl-c1">3</span>))
{<span class="pl-c1">3</span>, <span class="pl-c1">3</span>} undirected Int64 metagraph with Float64 weights defined by <span class="pl-c1">:weight</span> (default weight <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">enumerate_paths</span>(<span class="pl-c1">dijkstra_shortest_paths</span>(mg, <span class="pl-c1">1</span>), <span class="pl-c1">3</span>)
<span class="pl-c1">2</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(mg, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">:weight</span>, <span class="pl-c1">0.2</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(mg, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">:weight</span>, <span class="pl-c1">0.6</span>)
<span class="pl-c1">true</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">enumerate_paths</span>(<span class="pl-c1">dijkstra_shortest_paths</span>(mg, <span class="pl-c1">1</span>), <span class="pl-c1">3</span>)
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

<span class="pl-c"><span class="pl-c">#</span> use vertex values as indices</span>
julia<span class="pl-k">&gt;</span> G <span class="pl-k">=</span> <span class="pl-c1">MetaGraph</span>(<span class="pl-c1">100</span>)
{<span class="pl-c1">100</span>, <span class="pl-c1">0</span>} undirected Int64 metagraph with Float64 weights defined by <span class="pl-c1">:weight</span> (default weight <span class="pl-c1">1.0</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">100</span>
           <span class="pl-c1">set_prop!</span>(G, i, <span class="pl-c1">:name</span>, <span class="pl-s"><span class="pl-pds">"</span>node<span class="pl-v">$i</span><span class="pl-pds">"</span></span>)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_indexing_prop!</span>(G, <span class="pl-c1">:name</span>)
<span class="pl-c1">Set</span>(Symbol[<span class="pl-c1">:name</span>])

<span class="pl-c"><span class="pl-c">#</span> nodes can now be found by the value in the index</span>
julia<span class="pl-k">&gt;</span> G[<span class="pl-s"><span class="pl-pds">"</span>node4<span class="pl-pds">"</span></span>, <span class="pl-c1">:name</span>]
<span class="pl-c1">4</span>

<span class="pl-c"><span class="pl-c">#</span> You can also find the value of an index by the vertex number (note, this behavior will dominate if index values are also integers)</span>
julia<span class="pl-k">&gt;</span> G[<span class="pl-c1">4</span>, <span class="pl-c1">:name</span>]
<span class="pl-s"><span class="pl-pds">"</span>node4<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_prop!</span>(G, <span class="pl-c1">3</span>, <span class="pl-c1">:name</span>, <span class="pl-s"><span class="pl-pds">"</span>name3<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> or set_indexing_prop!(G, 3, :name, "name3")</span>
<span class="pl-c1">Set</span>(Symbol[<span class="pl-c1">:name</span>])</pre></div>
</article></div>