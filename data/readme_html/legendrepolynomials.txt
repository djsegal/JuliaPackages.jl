<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-legendrepolynomialsjl" class="anchor" aria-hidden="true" href="#legendrepolynomialsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LegendrePolynomials.jl</h1>
<p><a href="https://travis-ci.com/jishnub/LegendrePolynomials.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0bb95625b1e83a3facab743d9f6746854d6d1e1f/68747470733a2f2f7472617669732d63692e636f6d2f6a6973686e75622f4c6567656e647265506f6c796e6f6d69616c732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/jishnub/LegendrePolynomials.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p>Legendre polynomials and their derivatives using automatic differentiation</p>
<h1><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h1>
<h2><a id="user-content-prerequisites" class="anchor" aria-hidden="true" href="#prerequisites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prerequisites</h2>
<p>The package depends on <code>HyperDualNumbers</code> and <code>OffsetArrays</code>.</p>
<h2><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h2>
<p>To install the package, run</p>
<div class="highlight highlight-source-julia"><pre>] add LegendrePolynomials</pre></div>
<h2><a id="user-content-using" class="anchor" aria-hidden="true" href="#using"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Using</h2>
<p>This package computes Legendre polynomials and their first and second derivatives in one pass using hyperdual numbers. All the functions require an argument <code>x</code> that satisfies <code>-1&lt;=x&lt;=1</code>, and either an integer <code>l</code> that indicates the degree of the polynomial, or  a possibly optional keyword argument <code>lmax</code> that indicates the maximum degree of the Legendre polynomials that will be computed. The polynomials are computed iteratively using a three-term recurrence relation, so all the values in the range will have to be computed.</p>
<p>There are two classes of functions, one that returns the value of the Legendre polynomial and its derivatives for a single <code>l</code>, and one that returns the values for all <code>l</code> in <code>0:lmax</code> for a specified <code>lmax</code> as an array. The arrays returned will have the Legendre polynomials and their derivatives stored along columns.</p>
<p>There are three quantities that can be computed: <code>Pl</code>, <code>dPl</code> and <code>d2Pl</code>. It's possible to compute them individually or as combinations of two or three at once. There are allocating as well as non-allocating methods that do the same.</p>
<h3><a id="user-content-individual-degrees" class="anchor" aria-hidden="true" href="#individual-degrees"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Individual degrees</h3>
<p>The way to compute Legendre polynomials of degree <code>l</code> and argument <code>x</code> is through the function <code>Pl(x,l)</code>. This is the general signature followed by the other functions as well that compute the derivatives for a single degree. The functions are relatively accurate and performant till degrees of millions, although a thorough test of accuracy has not been carried out (verified roughly with results from Mathematica for some degrees).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">10</span>)
<span class="pl-k">-</span><span class="pl-c1">0.18822860717773438</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">Pl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">1_000_000</span>)
  <span class="pl-c1">13.022</span> ms (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-k">-</span><span class="pl-c1">0.0006062610545162491</span></pre></div>
<p>The accuracy can be increased by using Arbitrary Precision Arithmetic, through the use of
<code>BigInt</code> and <code>BigFloat</code>. This comes at the expense of performance though.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">Pl</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">3</span>,<span class="pl-c1">1_000</span>)
  <span class="pl-c1">11.135</span> Î¼s (<span class="pl-c1">0</span> allocations<span class="pl-k">:</span> <span class="pl-c1">0</span> bytes)
<span class="pl-c1">0.01961873093750127</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@btime</span> <span class="pl-c1">Pl</span>(<span class="pl-c1">big</span>(<span class="pl-c1">1</span>)<span class="pl-k">/</span><span class="pl-c1">3</span>,<span class="pl-c1">1_000</span>)
  <span class="pl-c1">1.751</span> ms (<span class="pl-c1">58965</span> allocations<span class="pl-k">:</span> <span class="pl-c1">3.13</span> MiB)
<span class="pl-c1">0.01961873093750094969323575593064773353450010511010742490834078609343359408691498</span></pre></div>
<p>The way to compute the derivatives is through <code>dPl(x,l)</code> and <code>d2Pl(x,l)</code>, for example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">dPl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">5</span>)
<span class="pl-k">-</span><span class="pl-c1">2.2265625000000004</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">d2Pl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">5</span>)
<span class="pl-k">-</span><span class="pl-c1">6.5625</span></pre></div>
<p>Combinations of these three can be computed as well, for example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl_dPl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">5</span>)
(<span class="pl-c1">0.08984375</span>, <span class="pl-k">-</span><span class="pl-c1">2.2265625000000004</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl_d2Pl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">5</span>)
(<span class="pl-c1">0.08984375</span>, <span class="pl-k">-</span><span class="pl-c1">6.5625</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dPl_d2Pl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">5</span>)
(<span class="pl-k">-</span><span class="pl-c1">2.2265625000000004</span>, <span class="pl-k">-</span><span class="pl-c1">6.5625</span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl_dPl_d2Pl</span>(<span class="pl-c1">0.5</span>,<span class="pl-c1">5</span>)
(<span class="pl-c1">0.08984375</span>, <span class="pl-k">-</span><span class="pl-c1">2.2265625000000004</span>, <span class="pl-k">-</span><span class="pl-c1">6.5625</span>)</pre></div>
<h3><a id="user-content-all-degrees-up-to-a-cutoff" class="anchor" aria-hidden="true" href="#all-degrees-up-to-a-cutoff"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>All degrees up to a cutoff</h3>
<p>The second class of methods return all the polynomials up to a cutoff degree <code>lmax</code>. They are returned as <code>OffsetArrays</code> that have 0-based indexing, keeping in mind that the polynomials start from <code>l=0</code>.</p>
<p>The polynomials and their derivatives can be computed in general by calling the function <code>P(x;lmax)</code>, where <code>P</code> has to be chosen appropriately as necessary. The keyword argument has to be specified in the allocating functions, whereas it may be inferred from the array in the non-allocating versions.</p>
<p>An example of the allocating functions are</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl</span>(<span class="pl-c1">0.5</span>,lmax<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>   
  <span class="pl-c1">0.5</span>   
 <span class="pl-k">-</span><span class="pl-c1">0.125</span> 
 <span class="pl-k">-</span><span class="pl-c1">0.4375</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dPl</span>(<span class="pl-c1">0.5</span>,lmax<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>               
 <span class="pl-c1">1.0</span>               
 <span class="pl-c1">1.5</span>               
 <span class="pl-c1">0.3750000000000001</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">d2Pl</span>(<span class="pl-c1">0.5</span>,lmax<span class="pl-k">=</span><span class="pl-c1">3</span>)
<span class="pl-c1">4</span><span class="pl-k">-</span>element <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,1}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>
 <span class="pl-c1">3.0</span>
 <span class="pl-c1">7.5</span></pre></div>
<p>It's possible to compute combinations analogous to the ones seen earlier, for example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl_dPl_d2Pl</span>(<span class="pl-c1">0.5</span>,lmax<span class="pl-k">=</span><span class="pl-c1">3</span>)
([<span class="pl-c1">1.0</span>, <span class="pl-c1">0.5</span>, <span class="pl-k">-</span><span class="pl-c1">0.125</span>, <span class="pl-k">-</span><span class="pl-c1">0.4375</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.3750000000000001</span>], [<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">7.5</span>])</pre></div>
<p>This returns a 3-tuple of <code>OffsetArrays</code> <code>Pl</code>, <code>dPl</code> and <code>d2Pl</code>.</p>
<p>There are non-allocating functions as well that can be called using a pre-allocated array. As an example</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> P<span class="pl-k">=</span><span class="pl-c1">zeros</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>,<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>)
<span class="pl-c1">4</span><span class="pl-k">Ã</span><span class="pl-c1">3</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">Ã</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Pl_dPl_d2Pl!</span>(P,<span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">Ã</span><span class="pl-c1">3</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">Ã</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
  <span class="pl-c1">1.0</span>     <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>
  <span class="pl-c1">0.5</span>     <span class="pl-c1">1.0</span>    <span class="pl-c1">0.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.125</span>   <span class="pl-c1">1.5</span>    <span class="pl-c1">3.0</span>
 <span class="pl-k">-</span><span class="pl-c1">0.4375</span>  <span class="pl-c1">0.375</span>  <span class="pl-c1">7.5</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">fill!</span>(P,<span class="pl-c1">0</span>);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">dPl!</span>(P,<span class="pl-c1">0.5</span>)
<span class="pl-c1">4</span><span class="pl-k">Ã</span><span class="pl-c1">3</span> <span class="pl-c1">OffsetArray</span>(<span class="pl-k">::</span><span class="pl-c1">Array{Float64,2}</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span>) with eltype Float64 with indices <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">3</span><span class="pl-k">Ã</span><span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">2</span><span class="pl-k">:</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>    <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>    <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.5</span>    <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.375</span>  <span class="pl-c1">0.0</span></pre></div>
<p>Note that the column number that will be populated depends on the order of the derivative, assuming 0-based indexing. Therefore <code>Pl!</code> will fill column 0, <code>dPl!</code> will fill column 1 and <code>d2Pl!</code> will fill column 2. Combinations of these will fill multiple columns as expected.</p>
<h1><a id="user-content-license" class="anchor" aria-hidden="true" href="#license"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>License</h1>
<p>This project is licensed under the MIT License - see the <a href="https://github.com/jishnub/LegendrePolynomials.jl/blob/master/LICENSE">LICENSE</a> file for details.</p>
</article></div>