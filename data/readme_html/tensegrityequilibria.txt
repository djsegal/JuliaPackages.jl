<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-stable-equilibria-of-tensegrity-frameworks" class="anchor" aria-hidden="true" href="#stable-equilibria-of-tensegrity-frameworks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stable Equilibria of Tensegrity Frameworks</h1>
<p dir="auto">Assume we are given a tensegrity framework given by nodes <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=V=[n]"><img src="https://render.githubusercontent.com/render/math?math=V=[n]" style="max-width: 100%;"></a>
and edges <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=E=\{ij:i,j\in[n]\}"><img src="https://render.githubusercontent.com/render/math?math=E=\{ij:i,j\in[n]\}" style="max-width: 100%;"></a> together with an embedding <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p:V\rightarrow \mathbb{R}^d"><img src="https://render.githubusercontent.com/render/math?math=p:V\rightarrow \mathbb{R}^d" style="max-width: 100%;"></a>. The edges are partitioned into rigid bars <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=b_{ij}"><img src="https://render.githubusercontent.com/render/math?math=b_{ij}" style="max-width: 100%;"></a> with lengths <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=\ell_{ij}"><img src="https://render.githubusercontent.com/render/math?math=\ell_{ij}" style="max-width: 100%;"></a> and elastic cables <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=c_{ij}"><img src="https://render.githubusercontent.com/render/math?math=c_{ij}" style="max-width: 100%;"></a> with corresponding elasticity coefficients <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=e_{ij}"><img src="https://render.githubusercontent.com/render/math?math=e_{ij}" style="max-width: 100%;"></a> and restings lenngths <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=r_{ij}"><img src="https://render.githubusercontent.com/render/math?math=r_{ij}" style="max-width: 100%;"></a>. With Hooke's Law and the introduction of slack variables <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=\delta_{ij}"><img src="https://render.githubusercontent.com/render/math?math=\delta_{ij}" style="max-width: 100%;"></a> for the elastic cables, a polynomial system <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=G=g_{ij}"><img src="https://render.githubusercontent.com/render/math?math=G=g_{ij}" style="max-width: 100%;"></a> consisting of the polynomials</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=b_{ij}=||p(i)-p(j)||^2-\ell_{ij}^2"><img src="https://render.githubusercontent.com/render/math?math=b_{ij}=||p(i)-p(j)||^2-\ell_{ij}^2" style="max-width: 100%;"></a>,<br>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=c_{ij}=||p(i)-p(j)||^2-\delta_{ij}^2"><img src="https://render.githubusercontent.com/render/math?math=c_{ij}=||p(i)-p(j)||^2-\delta_{ij}^2" style="max-width: 100%;"></a></p>
<p dir="auto">arises. Using the corresponding potential energy function <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=Q=\sum e_{ij}\frac{1}{2} (r_{ij}-\delta_{ij})^2"><img src="https://render.githubusercontent.com/render/math?math=Q=\sum e_{ij}\frac{1}{2} (r_{ij}-\delta_{ij})^2" style="max-width: 100%;"></a> enables us to create the Lagrange multiplier <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=\mathcal{L}=Q-\sum\lambda_{ij} g_{ij}"><img src="https://render.githubusercontent.com/render/math?math=\mathcal{L}=Q-\sum\lambda_{ij} g_{ij}" style="max-width: 100%;"></a>. Its derivative contains the critical points of the energy function subject to the variety generated by the polynomial system <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=G"><img src="https://render.githubusercontent.com/render/math?math=G" style="max-width: 100%;"></a>. We are interested in its real, local minima. The sufficient condition of local minima is verified by looking at the Lagrange multiplier <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=\mathcal{L}"><img src="https://render.githubusercontent.com/render/math?math=\mathcal{L}" style="max-width: 100%;"></a>'s Hessian and checking whether it is positive definite. This process is more thoroughly described in the underlying paper Catastrophe in Elastic Tensegrity Frameworks (<a href="https://arxiv.org/pdf/2009.13408.pdf" title="Tensegrity Catastrophe" rel="nofollow">Heaton and Timme, 2020</a>).</p>
<h2 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h2>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg
julia&gt; Pkg.add(url=&quot;https://github.com/matthiashimmelmann/TensegrityEquilibria.jl.git&quot;)"><pre class="notranslate"><code>julia&gt; using Pkg
julia&gt; Pkg.add(url="https://github.com/matthiashimmelmann/TensegrityEquilibria.jl.git")
</code></pre></div>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">The main method of this program is <code>stableEquilibria</code>. It is exported in the module <code>functionsForStableEquilibria</code> and can be used from the main module <code>TensegrityEquilibria</code>. The former also exports a test suite <code>start_demo()</code> that is automatically executed when importing the main module. The main method of this package <code>stableEquilibria</code> has the following inputs with corresponding expected format:</p>
<ul dir="auto">
<li><code>vertices</code>: This array consists of the embedded nodes of the tensegrity framework, given by arrays. If the nodes either contain internal variables or control parameters, they are included here as <code>@var</code> types from the numerical algebraic geometry package <code>HomotopyContinuation</code>. The expected input format in this case is <code>[[p_11, ..., p_1d], ..., [p_m1, ..., p_md]]</code></li>
<li><code>unknownBars</code>: This array consists of the rigid bars of the framework that are not yet determined by the choice of vertices. The expected input format is <code>[[i, j, l_ij], ...]</code> for a bar between the embedded vertices <code>p(i)</code> and <code>p(j)</code>.</li>
<li><code>unknownCables</code>: This array consists of the elastic cables of the framework that are not yet determined by the choice of vertices. The expected input format is <code>[[i, j, r_ij, e_ij], ...]</code>  for a cable between the embedded vertices <code>p(i)</code> and <code>p(j)</code>.</li>
<li><code>listOfInternalVariables</code> is a flat list of all the internal parameters of the framework (<code>X</code> in the paper).</li>
<li><code>listOfControlParameters</code> is a flat list of all the control parameters of the framework (<code>\Omega</code> in the paper).</li>
<li><code>targetParams</code> is a flat initial configuration of the variables in <code>listOfControlParameters</code> of the same length. It contains entries of type <code>Float64</code>.</li>
<li><code>knownBars</code> is a list of the already determined bars for plotting purposes. The expected input format is <code>[[i,j], ...]</code> for a bar between the embedded vertices <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p(i)"><img src="https://render.githubusercontent.com/render/math?math=p(i)" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p(j)"><img src="https://render.githubusercontent.com/render/math?math=p(j)" style="max-width: 100%;"></a>.</li>
<li><code>knownCables</code> is a list of the already determined cables for plotting purposes. The expected input format is <code>[[i,j], ...]</code> for a cable between the embedded vertices <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p(i)"><img src="https://render.githubusercontent.com/render/math?math=p(i)" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p(j)"><img src="https://render.githubusercontent.com/render/math?math=p(j)" style="max-width: 100%;"></a>.</li>
<li>(optional) <code>timestamps</code>: If an animation of parameters moving on a curve is desired, samples from a curve can be entered as points in a list: <code>[[q_11, q_12, ...], ...]</code></li>
</ul>
<p dir="auto">The output of this functions is primarily an interactive plot created using <code>Makie.jl</code> and a configuration of the involved in stable equilibrium. Interacting with the plot window is possible by moving a slider corresponding to each control parameter that was given as an argument to the method via <code>listOfControlParameters</code>. When changing the position of one of the sliders, a parameter homotopy of the underlying polynomial system is solved in real time. Depending on the system's size, this might take up to a few seconds. Nevertheless, this method is significantly faster than recalculating the solutions from scratch each time a slider is moved. Solving the polynomial system is made possible by the library <a href="https://www.juliahomotopycontinuation.org/" title="HomotopyContinuation.jl" rel="nofollow"><code>HomotopyContinuation.jl</code></a>.</p>
<p dir="auto">As an example, consider a triangular bipyramid framework with an equilateral triangel as base two unknown nodes and a rigid bar of unknown length between them. This tensegrity framework can be realized by the input</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@var p[1:6] ell
stableEquilibria([p[1:3], p[4:6], [0,1,0], [sin(2*pi/3),cos(2*pi/3),0], [sin(4*pi/3),cos(4*pi/3),0]],
    [[1,2,ell]],
    [[1,3,1,1], [1,4,1,1], [1,5,1,1], [2,3,1,1], [2,4,1,1], [2,5,1,1]],
    p, [ell], [1.0],
    [[3,4], [3,5], [4,5]], 
    []
)"><pre class="notranslate"><code>@var p[1:6] ell
stableEquilibria([p[1:3], p[4:6], [0,1,0], [sin(2*pi/3),cos(2*pi/3),0], [sin(4*pi/3),cos(4*pi/3),0]],
    [[1,2,ell]],
    [[1,3,1,1], [1,4,1,1], [1,5,1,1], [2,3,1,1], [2,4,1,1], [2,5,1,1]],
    p, [ell], [1.0],
    [[3,4], [3,5], [4,5]], 
    []
)
</code></pre></div>
<p dir="auto">The input let's us deduce that
<a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=e_{ij}=1,r_{ij}=1"><img src="https://render.githubusercontent.com/render/math?math=e_{ij}=1,r_{ij}=1" style="max-width: 100%;"></a> and that the target value of
<a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=b_{ij}=\ell_{ij}"><img src="https://render.githubusercontent.com/render/math?math=b_{ij}=\ell_{ij}" style="max-width: 100%;"></a> is also <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=1"><img src="https://render.githubusercontent.com/render/math?math=1" style="max-width: 100%;"></a>. The output of the plotting routine would then be the following image:</p>
<p align="center" dir="auto">
  <a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/65544132/111198673-1ce64480-85c0-11eb-814b-724268b61fa6.jpg"><img src="https://user-images.githubusercontent.com/65544132/111198673-1ce64480-85c0-11eb-814b-724268b61fa6.jpg" style="max-width: 100%;"></a>
</p>
<p dir="auto">The vertices of this framework are displayed in red, the rigid bars are black and the elastic cables are portrayed in blue. If there were any visibly different solutions to the polynomial system, in this case obtained by mirroring the unknown vertices <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p(1)"><img src="https://render.githubusercontent.com/render/math?math=p(1)" style="max-width: 100%;"></a> and <a target="_blank" rel="noopener noreferrer nofollow" href="https://render.githubusercontent.com/render/math?math=p(2)"><img src="https://render.githubusercontent.com/render/math?math=p(2)" style="max-width: 100%;"></a> in the top and bottom of the image respectively, they would be transparently plotted in grey as "shadow vertices".</p>
<p dir="auto">Finally, the catastrophe set corresponding to our choice of control parameters is samples and plotted. This hypersurface depicts the region, where discontinuous changes of the framework might happen. However, this does not yet work for larger or 3D frameworks.</p>
</article></div>