<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-little-man-computer" class="anchor" aria-hidden="true" href="#little-man-computer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Little Man Computer</h1>
<p>The <a href="https://en.wikipedia.org/wiki/Little_man_computer" rel="nofollow">Little Man Computer </a>(LMC) is a very simply microprocessor and computer system designed for teaching beginners assembly programming. To make things simpler it is not presented as a binary computer but a decimal one. It contains 100 memory cells, numbered from 0-99. You can place program instructions and data here.</p>
<p>Each cell can hold a 3-digit decimal number. Here we can store instructions for the computer to perform or data to operate on. The CPU has a single accumulator which is used when performing arithmetic. There is also an input and ouput where you can read user input and write outputs to the user.</p>
<p>Here is a simple overview of the instructionset. Each instruction is really just a 3-digit number. But usually when programming one deals with letter abbreviations which are easier to remember. Here is a tip on how to read the description below. E.g. the <code>Add</code> instruction is described as having the number <code>1xx</code>. What this really means is that the <code>xx</code> are where you put your operand (argument). So <code>142</code> is the instruction for adding the contents of memory cell 42 to the contents of the accumulator.</p>
<ul>
<li><code>ADD</code> 1xx add content at address <code>xx</code> in memory to accumulator.</li>
<li><code>SUB</code> 2xx subtract contents of address <code>xx</code> from what is stored in the accumulator. Store result in accumulator.</li>
<li><code>STA</code> 3xx store accumulator at address <code>xx</code> in memory.</li>
<li><code>LDA</code> 5xx load accumulator with contents at address <code>xx</code> in memory.</li>
<li><code>BRA</code> 6xx jump to location <code>xx</code> in program.</li>
<li><code>BRZ</code> 7xx jump if accumulator is zero</li>
<li><code>BRP</code> 8xx jump if accumulator is zero or higher (positive).</li>
<li><code>INP</code> 901 fill accumulator with number from input.</li>
<li><code>OUT</code> 902 push value in accumulator into output queue.</li>
<li><code>HLT</code> 000 stop program</li>
</ul>
<h2><a id="user-content-example-of-lmc-programs" class="anchor" aria-hidden="true" href="#example-of-lmc-programs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Example of LMC Programs</h2>
<p>In the example folder you can find more examples of programs. Here is an example of a program which reads a number from the input and then counts down. So if it reads a 4 on input, then it will write out 4, 3, 2, 1 and 0 on the output.</p>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="     INP
     OUT
LOOP BRZ QUIT // Jump to QUIT if accumulator is 0
     SUB ONE  // Subtract from accumulator what is stored in ONE
     OUT
     BRA LOOP // Jump (unconditionally) to the memory address labeled LOOP
QUIT HLT      // Label this memory address as QUIT
ONE  DAT 1    // Store 1 in this memory address.
"><pre><code>     INP
     OUT
LOOP BRZ QUIT // Jump to QUIT if accumulator is 0
     SUB ONE  // Subtract from accumulator what is stored in ONE
     OUT
     BRA LOOP // Jump (unconditionally) to the memory address labeled LOOP
QUIT HLT      // Label this memory address as QUIT
ONE  DAT 1    // Store 1 in this memory address.
</code></pre></div>
<h2><a id="user-content-how-to-use-julia-package" class="anchor" aria-hidden="true" href="#how-to-use-julia-package"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to Use Julia Package</h2>
<p>You can take a program written as the example store it in a file and give that filename to the <code>assemble(file)</code> function which will produce a list of 3-digit integers representing your program and data. You can feed this to the <code>simulate!(program, inputs)</code> function to run your program. It will dump output.</p>
<p>Alternatively you can copy paste this and put the code into one of the web based LMC simulators described below.</p>
<h2><a id="user-content-lmc-simulators-on-the-web" class="anchor" aria-hidden="true" href="#lmc-simulators-on-the-web"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LMC Simulators on the Web</h2>
<p>You can  find several browser based simulators for the LMC CPU online. Where you can step through programs and watch live how the virtual computer operates.</p>
<ul>
<li><a href="https://www.101computing.net/LMC/" rel="nofollow">101 Computing Simulator</a>. Looks fancy in terms of appearance.</li>
<li><a href="http://robowriter.info/little-man-computer/" rel="nofollow">Robo Writer Simulator</a>. More plain and primitive looking, but I actually prefer this version.</li>
</ul>
<h2><a id="user-content-lmc-based-games" class="anchor" aria-hidden="true" href="#lmc-based-games"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LMC Based Games</h2>
<p>There are several games you can play based on slight variations of the LMC idea. This is potentially a nice way of getting children involved in learning programming.</p>
<ul>
<li><a href="https://tomorrowcorporation.com/humanresourcemachine" rel="nofollow">Human Resource Machine</a></li>
<li><a href="http://www.zachtronics.com/tis-100/" rel="nofollow">TIS-100</a> a game by Zachtronics where you basically deal with multiple LMC computers which you got to program to communicate with each other.</li>
<li><a href="http://www.zachtronics.com/shenzhen-io/" rel="nofollow">Shenzhen IO</a> also by Zachtronics where you program small electronic gizmos that communicate with each other. Very similar to LMC but with the element of timing, which matters a lot in electronics.</li>
</ul>
</article></div>