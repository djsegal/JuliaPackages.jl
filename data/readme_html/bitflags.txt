<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-bitflagsjl" class="anchor" aria-hidden="true" href="#bitflagsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>BitFlags.jl</h1>
<p><a href="https://github.com/jmert/BitFlags.jl/actions"><img src="https://github.com/jmert/BitFlags.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/jmert/BitFlags.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/82bd664c6ca27b68e50ff40cbd9fdb4a106997ef5a869c2469c13ea394b65c8f/68747470733a2f2f636f6465636f762e696f2f67682f6a6d6572742f426974466c6167732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/jmert/BitFlags.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><code>BitFlag.jl</code> provides an <code>Enum</code>-like type for bit flag option values. The main
motivations are:</p>
<ol>
<li>Members have implicit numbering with incrementing powers of 2.</li>
<li>Binary OR (<code>|</code>) and AND (<code>&amp;</code>) operations are supported among members.</li>
<li>Values are pretty-printed by name, with OR chains when multiple bits are
set.</li>
</ol>
<p>This implementation is a relatively minor modification of
<a href="https://julialang.org/" rel="nofollow">Julia</a>'s <code>Enum</code> type implementation.</p>
<h2><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic usage</h2>
<p>To create a new <code>BitFlag</code> type, use the <code>@bitflag</code> macro, provide a name, an
optional integer type, and a list of the member options (and optional values).
A new definition can be given in inline form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@bitflag BitFlagName[::BaseType] value1[=x] value2[=y]
"><pre><span class="pl-c1">@bitflag</span> BitFlagName[<span class="pl-k">::</span><span class="pl-c1">BaseType</span>] value1[<span class="pl-k">=</span>x] value2[<span class="pl-k">=</span>y]</pre></div>
<p>or as a block definition:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@bitflag BitFlagName[::BaseType] begin
    value1[=x]
    value2[=y]
end
"><pre><span class="pl-c1">@bitflag</span> BitFlagName[<span class="pl-k">::</span><span class="pl-c1">BaseType</span>] <span class="pl-k">begin</span>
    value1[<span class="pl-k">=</span>x]
    value2[<span class="pl-k">=</span>y]
<span class="pl-k">end</span></pre></div>
<p>Automatic numbering starts at 1, but an initial flag value may be explicitly
set to the value of zero. If no explicit zero-valued member is given, then 0 is
not a valid value for the <code>BitFlag</code>. In the following example, we build an
8-bit <code>BitFlag</code> with no value for bit 3 (value of 4).</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; @bitflag MyStyle::UInt8 S_NONE=0 S_BOLD S_ITALIC S_LARGE=8
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">@bitflag</span> MyStyle<span class="pl-k">::</span><span class="pl-c1">UInt8</span> S_NONE<span class="pl-k">=</span><span class="pl-c1">0</span> S_BOLD S_ITALIC S_LARGE<span class="pl-k">=</span><span class="pl-c1">8</span></pre></div>
<p>Combinations can be made using standard binary operations:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; S_BOLD | S_LARGE
(S_LARGE | S_BOLD)::MyStyle = 0x09

julia&gt; ans &amp; S_ITALIC
S_NONE::MyStyle = 0x00
"><pre>julia<span class="pl-k">&gt;</span> S_BOLD <span class="pl-k">|</span> S_LARGE
(S_LARGE <span class="pl-k">|</span> S_BOLD)<span class="pl-k">::</span><span class="pl-c1">MyStyle</span> <span class="pl-k">=</span> <span class="pl-c1">0x09</span>

julia<span class="pl-k">&gt;</span> ans <span class="pl-k">&amp;</span> S_ITALIC
S_NONE<span class="pl-k">::</span><span class="pl-c1">MyStyle</span> <span class="pl-k">=</span> <span class="pl-c1">0x00</span></pre></div>
<p>Conversion to and from integers is permitted, but only for valid combinations
of values:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; Int(S_BOLD)
1

julia&gt; Integer(S_ITALIC)    # Abstract Integer uses native UInt8 type
0x02

julia&gt; MyStyle(9)
(S_LARGE | S_BOLD)::MyStyle = 0x09

julia&gt; MyStyle(4)    # MyStyle does not have a flag at 4
ERROR: ArgumentError: invalid value for BitFlag MyStyle: 4
Stacktrace:
...
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">Int</span>(S_BOLD)
<span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">Integer</span>(S_ITALIC)    <span class="pl-c"><span class="pl-c">#</span> Abstract Integer uses native UInt8 type</span>
<span class="pl-c1">0x02</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyStyle</span>(<span class="pl-c1">9</span>)
(S_LARGE <span class="pl-k">|</span> S_BOLD)<span class="pl-k">::</span><span class="pl-c1">MyStyle</span> <span class="pl-k">=</span> <span class="pl-c1">0x09</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">MyStyle</span>(<span class="pl-c1">4</span>)    <span class="pl-c"><span class="pl-c">#</span> MyStyle does not have a flag at 4</span>
ERROR<span class="pl-k">:</span> ArgumentError<span class="pl-k">:</span> invalid value <span class="pl-k">for</span> BitFlag MyStyle<span class="pl-k">:</span> <span class="pl-c1">4</span>
Stacktrace<span class="pl-k">:</span>
<span class="pl-k">...</span></pre></div>
<h2><a id="user-content-printing" class="anchor" aria-hidden="true" href="#printing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Printing</h2>
<p>Each flag value is then printed with contextual information which is more
user-friendly than a raw integer:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; S_BOLD
S_BOLD::MyStyle = 0x00000001

julia&gt; S_BOLD | S_LARGE
(S_LARGE | S_BOLD)::MyStyle = 0x00000005
"><pre>julia<span class="pl-k">&gt;</span> S_BOLD
S_BOLD<span class="pl-k">::</span><span class="pl-c1">MyStyle</span> <span class="pl-k">=</span> <span class="pl-c1">0x00000001</span>

julia<span class="pl-k">&gt;</span> S_BOLD <span class="pl-k">|</span> S_LARGE
(S_LARGE <span class="pl-k">|</span> S_BOLD)<span class="pl-k">::</span><span class="pl-c1">MyStyle</span> <span class="pl-k">=</span> <span class="pl-c1">0x00000005</span></pre></div>
<p>In a compact context (such as in multi-dimensional arrays), the pretty-printing
takes on a shorter form:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; [S_NONE (S_BOLD | S_LARGE)]
1×2 Array{MyStyle,2}:
 S_NONE  S_LARGE|S_BOLD

julia&gt; show(IOContext(stdout, :compact =&gt; true), S_BOLD | S_LARGE)
S_LARGE|S_BOLD
"><pre>julia<span class="pl-k">&gt;</span> [S_NONE (S_BOLD <span class="pl-k">|</span> S_LARGE)]
<span class="pl-c1">1</span><span class="pl-k">×</span><span class="pl-c1">2</span> Array{MyStyle,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 S_NONE  S_LARGE<span class="pl-k">|</span>S_BOLD

julia<span class="pl-k">&gt;</span> <span class="pl-c1">show</span>(<span class="pl-c1">IOContext</span>(<span class="pl-c1">stdout</span>, <span class="pl-c1">:compact</span> <span class="pl-k">=&gt;</span> <span class="pl-c1">true</span>), S_BOLD <span class="pl-k">|</span> S_LARGE)
S_LARGE<span class="pl-k">|</span>S_BOLD</pre></div>
<h2><a id="user-content-inputoutput" class="anchor" aria-hidden="true" href="#inputoutput"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Input/Output</h2>
<p><code>BitFlag</code>s support writing to and reading from streams as integers:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; io = IOBuffer();

julia&gt; write(io, UInt8(9));

julia&gt; seekstart(io);

julia&gt; read(io, MyStyle)
(S_LARGE | S_BOLD)::MyStyle = 0x09
"><pre>julia<span class="pl-k">&gt;</span> io <span class="pl-k">=</span> <span class="pl-c1">IOBuffer</span>();

julia<span class="pl-k">&gt;</span> <span class="pl-c1">write</span>(io, <span class="pl-c1">UInt8</span>(<span class="pl-c1">9</span>));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">seekstart</span>(io);

julia<span class="pl-k">&gt;</span> <span class="pl-c1">read</span>(io, MyStyle)
(S_LARGE <span class="pl-k">|</span> S_BOLD)<span class="pl-k">::</span><span class="pl-c1">MyStyle</span> <span class="pl-k">=</span> <span class="pl-c1">0x09</span></pre></div>
</article></div>