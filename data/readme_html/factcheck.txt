<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-factcheckjl" class="anchor" aria-hidden="true" href="#factcheckjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FactCheck.jl</h1>
<h3><a id="user-content-a-test-framework-for-julia" class="anchor" aria-hidden="true" href="#a-test-framework-for-julia"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A test framework for <a href="http://julialang.org" rel="nofollow">Julia</a></h3>
<p><a href="https://travis-ci.org/JuliaLang/FactCheck.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/dbdeae007185ec274093a572625a1b79a275ce7d/68747470733a2f2f7472617669732d63692e6f72672f4a756c69614c616e672f46616374436865636b2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaLang/FactCheck.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/JuliaLang/FactCheck.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/dd2b9d401697fc52e00ae0014801600ee6116d40/687474703a2f2f636f6465636f762e696f2f6769746875622f4a756c69614c616e672f46616374436865636b2e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/JuliaLang/FactCheck.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://pkg.julialang.org/?pkg=FactCheck&amp;ver=0.3" rel="nofollow"><img src="https://camo.githubusercontent.com/9c11991d2fd99b60e4571eb831aba15d136e61f2/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46616374436865636b5f302e332e737667" alt="FactCheck" data-canonical-src="http://pkg.julialang.org/badges/FactCheck_0.3.svg" style="max-width:100%;"></a>
<a href="http://pkg.julialang.org/?pkg=FactCheck&amp;ver=0.4" rel="nofollow"><img src="https://camo.githubusercontent.com/a4aebc7d9f2bf8a735db0f1a748dcf3dce69447a/687474703a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f46616374436865636b5f302e342e737667" alt="FactCheck" data-canonical-src="http://pkg.julialang.org/badges/FactCheck_0.4.svg" style="max-width:100%;"></a></p>
<p><code>FactCheck.jl</code> is a <a href="http://julialang.org" rel="nofollow">Julia</a> testing framework inspired by the <a href="https://github.com/marick/Midje">Midje</a> library for Clojure. It aims to add more functionality over the basic <a href="http://docs.julialang.org/en/latest/stdlib/test/" rel="nofollow">Base.Test</a>.</p>
<p>MIT Licensed - see LICENSE.md</p>
<p><strong>Installation</strong>: <code>julia&gt; Pkg.add("FactCheck")</code></p>
<blockquote>
<p><em>Note</em>: The <code>=&gt;</code> syntax has been deprecated in v0.3, use <code>--&gt;</code> going forward.</p>
</blockquote>
<blockquote>
<p>Note: <code>FactCheck</code> produces colored output, but only if you run Julia with the <code>--color=yes</code> option, e.g. <code>julia --color=yes test/runtests.jl</code></p>
</blockquote>
<h3><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basics</h3>
<p>Tests in <code>FactCheck</code> should be placed inside a <code>facts</code> block. It can be called with or without a description:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> FactCheck

<span class="pl-c1">facts</span>(<span class="pl-s"><span class="pl-pds">"</span>With a description<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c"><span class="pl-c">#</span> Your tests here</span>
<span class="pl-k">end</span>

<span class="pl-c1">facts</span>() <span class="pl-k">do</span>
    <span class="pl-c"><span class="pl-c">#</span> Your tests here</span>
<span class="pl-k">end</span></pre></div>
<p>Related facts can also be grouped as a <code>context</code> inside a <code>facts</code> block:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">facts</span>(<span class="pl-s"><span class="pl-pds">"</span>Lots of tests<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c1">context</span>(<span class="pl-s"><span class="pl-pds">"</span>First group<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
        <span class="pl-c"><span class="pl-c">#</span> ...</span>
    <span class="pl-k">end</span>
    <span class="pl-c1">context</span>(<span class="pl-s"><span class="pl-pds">"</span>Second group<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
        <span class="pl-c"><span class="pl-c">#</span> ...</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>As for the tests themselves, you can use <code>FactCheck</code> to do basic assertions like you would with <code>Base.Test</code> using <code>@fact</code> and <code>@fact_throws</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">facts</span>(<span class="pl-s"><span class="pl-pds">"</span>Testing basics<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">1</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">1</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">2</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">4</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">uppercase</span>(<span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>) <span class="pl-k">--&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>FOO<span class="pl-pds">"</span></span>
    <span class="pl-c1">@fact_throws</span> <span class="pl-c1">2</span><span class="pl-k">^-</span><span class="pl-c1">1</span>
    <span class="pl-c1">@fact_throws</span> DomainError <span class="pl-c1">2</span><span class="pl-k">^-</span><span class="pl-c1">1</span>
    <span class="pl-c1">@fact_throws</span> DomainError <span class="pl-c1">2</span><span class="pl-k">^-</span><span class="pl-c1">1</span> <span class="pl-s"><span class="pl-pds">"</span>a nifty message<span class="pl-pds">"</span></span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">2</span><span class="pl-k">*</span>[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>] <span class="pl-k">--&gt;</span> [<span class="pl-c1">2</span>,<span class="pl-c1">4</span>,<span class="pl-c1">6</span>]
<span class="pl-k">end</span></pre></div>
<p>You can provide custom error messages as a second argument, e.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">facts</span>(<span class="pl-s"><span class="pl-pds">"</span>Messages<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    x <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
    y <span class="pl-k">=</span> [<span class="pl-c1">4</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">1</span>]
    <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">4</span>
        <span class="pl-c1">@fact</span> x[i] <span class="pl-k">--&gt;</span> y[i] <span class="pl-s"><span class="pl-pds">"</span>mismatch at i=<span class="pl-v">$i</span><span class="pl-pds">"</span></span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>produces</p>
<pre><code>Messages
  Failure :: (line:505) :: mismatch at i=1 :: fact was false
    Expression: x[i] --&gt; y[i]
      Expected: 1
      Occurred: 4
  Failure :: (line:505) :: mismatch at i=4 :: fact was false
    Expression: x[i] --&gt; y[i]
      Expected: 4
      Occurred: 1
# ...
</code></pre>
<p>Finally, if you have an idea for a test you want to implement but haven't yet, you can using <code>@pending</code>. <code>@pending</code> doesn't attempt to check its assertion, or even evaluate the expression, it simply records that a pending test exists.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">facts</span>(<span class="pl-s"><span class="pl-pds">"</span>Some pending<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">2</span><span class="pl-k">*</span><span class="pl-c1">3</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">6</span>
    <span class="pl-c1">@pending</span> <span class="pl-c1">divide</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">:something</span>
<span class="pl-k">end</span></pre></div>
<p>produces</p>
<pre><code>Some pending
Out of 2 total facts:
  Verified: 1
  Pending:  1
</code></pre>
<h3><a id="user-content-assertions" class="anchor" aria-hidden="true" href="#assertions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Assertions</h3>
<p>A <code>FactCheck</code> <code>--&gt;</code> is more general than the <code>==</code> of <code>Base.Test.@test</code>.
We refer to the value to the left of the <code>--&gt;</code> as the <em>expression</em>, and the value to the right of as the <em>assertion</em>.
If the assertion is a literal value, like <code>1</code>, <code>"FOO"</code>, or <code>[2,4,6]</code>, then <code>@fact</code> checks if the expression is equal to the assertion.
However if the assertion is a <em>function</em>, then function will be applied to the expression, e.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@fact</span> <span class="pl-c1">2</span> <span class="pl-k">--&gt;</span> iseven
<span class="pl-c"><span class="pl-c">#</span>...is equivalent to...</span>
<span class="pl-c1">@fact</span> <span class="pl-c1">iseven</span>(<span class="pl-c1">2</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">true</span>

<span class="pl-c1">@fact</span> Int[] <span class="pl-k">--&gt;</span> isempty
<span class="pl-c"><span class="pl-c">#</span>..is equivalent to...</span>
<span class="pl-c1">@fact</span> <span class="pl-c1">isempty</span>(Int[]) <span class="pl-k">--&gt;</span> <span class="pl-c1">true</span></pre></div>
<p><code>FactCheck</code> provides several helper functions to make more complicated assertions:</p>
<h4><a id="user-content-not" class="anchor" aria-hidden="true" href="#not"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>not</code></h4>
<p>Logical not for literal values and functions.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@fact</span> <span class="pl-c1">1</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">not</span>(<span class="pl-c1">2</span>)
<span class="pl-c"><span class="pl-c">#</span> is equivalent to</span>
<span class="pl-c1">@fact</span> (<span class="pl-c1">1</span> <span class="pl-k">!=</span> <span class="pl-c1">2</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">true</span>

<span class="pl-c1">@fact</span> <span class="pl-c1">1</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">not</span>(iseven)
<span class="pl-c"><span class="pl-c">#</span> is equivalent to</span>
<span class="pl-c1">@fact</span> <span class="pl-k">!</span><span class="pl-c1">iseven</span>(<span class="pl-c1">1</span>) <span class="pl-k">--&gt;</span> <span class="pl-c1">true</span></pre></div>
<h4><a id="user-content-exactly" class="anchor" aria-hidden="true" href="#exactly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>exactly</code></h4>
<p>Test equality in the same way that <code>Base.is</code>/<code>Base.===</code> do. For example, two distinct objects with the same values are not <code>exactly</code> the same e.g.</p>
<div class="highlight highlight-source-julia"><pre>a <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
b <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
<span class="pl-c1">@fact</span> a <span class="pl-k">--&gt;</span> b
<span class="pl-c1">@fact</span> a <span class="pl-k">--&gt;</span> <span class="pl-c1">not</span>(<span class="pl-c1">exactly</span>(b))</pre></div>
<h4><a id="user-content-roughly" class="anchor" aria-hidden="true" href="#roughly"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>roughly</code></h4>
<p>Test approximate equality of numbers and arrays of numbers using <code>Base.isapprox</code>, and accepts same keyword arguments as that function. If a second argument is provided, but no keyword, it is treated as <code>atol</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@fact</span> <span class="pl-c1">2</span> <span class="pl-k">+</span> <span class="pl-c1">1e-5</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">roughly</span>(<span class="pl-c1">2.0</span>)
<span class="pl-c1">@fact</span> <span class="pl-c1">9.5</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">roughly</span>(<span class="pl-c1">10</span>; atol<span class="pl-k">=</span><span class="pl-c1">1.0</span>)
A <span class="pl-k">=</span> [<span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>]
B <span class="pl-k">=</span> (<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1e-6</span>)<span class="pl-k">*</span>A
<span class="pl-c1">@fact</span> A <span class="pl-k">--&gt;</span> <span class="pl-c1">roughly</span>(B)</pre></div>
<h4><a id="user-content-less_than" class="anchor" aria-hidden="true" href="#less_than"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>less_than</code>/</h4>
<h4><a id="user-content-less_than_or_equal" class="anchor" aria-hidden="true" href="#less_than_or_equal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>less_than_or_equal</code>/</h4>
<h4><a id="user-content-less_than_or_equal-1" class="anchor" aria-hidden="true" href="#less_than_or_equal-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>less_than_or_equal</code>/</h4>
<h4><a id="user-content-greater_than_or_equal" class="anchor" aria-hidden="true" href="#greater_than_or_equal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>greater_than_or_equal</code></h4>
<p>Test inequality relationships between numbers.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@fact</span> <span class="pl-c1">1</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">less_than</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">@fact</span> <span class="pl-c1">1</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">less_than_or_equal</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">@fact</span> <span class="pl-c1">2</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">greater_than</span>(<span class="pl-c1">1</span>)
<span class="pl-c1">@fact</span> <span class="pl-c1">2</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">greater_than_or_equal</span>(<span class="pl-c1">2</span>)</pre></div>
<h4><a id="user-content-anyof" class="anchor" aria-hidden="true" href="#anyof"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>anyof</code></h4>
<p>Test equality with any of the arguments to <code>anyof</code></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">@fact</span> <span class="pl-c1">2</span><span class="pl-k">+</span><span class="pl-c1">2</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">anyof</span>(<span class="pl-c1">4</span>, <span class="pl-c1">:four</span>, <span class="pl-s"><span class="pl-pds">"</span>four<span class="pl-pds">"</span></span>)
<span class="pl-c1">@fact</span> <span class="pl-c1">5</span>   <span class="pl-k">--&gt;</span> <span class="pl-c1">not</span>(<span class="pl-c1">anyof</span>(<span class="pl-c1">:five</span>, <span class="pl-s"><span class="pl-pds">"</span>five<span class="pl-pds">"</span></span>))</pre></div>
<h3><a id="user-content-exit-status" class="anchor" aria-hidden="true" href="#exit-status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exit status</h3>
<p>When a program ends it returns an <a href="http://en.wikipedia.org/wiki/Exit_status" rel="nofollow">exit status</a>. This is used by other programs to figure out how a program ended. For example, <a href="https://travis-ci.org/" rel="nofollow">Travis CI</a> looks at Julia exit code to determine if your tests passed or failed. Because <code>FactCheck</code> catches all the test errors, it will return <code>0</code> even if a test fails. To address this you can use <code>exitstatus()</code> at the end of your tests. This will throw a error, so Julia terminates in an error state.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">module</span> MyPkgTests
    <span class="pl-k">using</span> FactCheck
    <span class="pl-c"><span class="pl-c">#</span> Your tests...</span>
    FactCheck<span class="pl-k">.</span><span class="pl-c1">exitstatus</span>()
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-options" class="anchor" aria-hidden="true" href="#options"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Options</h3>
<p><code>FactCheck</code> currently has one configuration option, for the output style. This can be set with <code>FactCheck.setstyle(style)</code>. The default
is <code>:default</code>, and the other option currently is <code>:compact</code>. To see the difference, consider the following code:</p>
<div class="highlight highlight-source-julia"><pre>FactCheck<span class="pl-k">.</span><span class="pl-c1">setstyle</span>(<span class="pl-c1">:compact</span>)
<span class="pl-c1">facts</span>(<span class="pl-s"><span class="pl-pds">"</span>Compact vs default<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">1</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">1</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">2</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">3</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">3</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">3</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">4</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">4</span>
    <span class="pl-c1">@fact</span> <span class="pl-c1">5</span> <span class="pl-k">--&gt;</span> <span class="pl-c1">5</span>
<span class="pl-k">end</span></pre></div>
<p>which produces the output</p>
<pre><code>Compact vs default: .F...
  Failure :: (line:505) :: fact was false
    Expression: 2 --&gt; 3
      Expected: 2
      Occurred: 3
</code></pre>
<p>The main difference is that single characters only are emitted as the tests run, with all errors only being displayed at the end.</p>
<h4><a id="user-content-low-memory-situations" class="anchor" aria-hidden="true" href="#low-memory-situations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Low memory situations</h4>
<p>If you run into problems using <code>FactCheck</code> in low memory situations like <code>Travis</code> consider to activate the option <code>only_stats</code>. This will not store results during the testing and provides only statistics in the end. This can be set with <code>FactCheck.onlystats(true)</code>.</p>
<h3><a id="user-content-workflow" class="anchor" aria-hidden="true" href="#workflow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Workflow</h3>
<p>You can run your tests simply by calling them from the command line, e.g. <code>julia --color=yes test/runtests.jl</code>, but another option is to place your tests in a module, e.g.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">module</span> MyPkgTests
    <span class="pl-c"><span class="pl-c">#</span> Your tests...</span>
<span class="pl-k">end</span></pre></div>
<p>then repeatedly reload your tests using <code>reload</code>, e.g. <code>julia&gt; reload("test/runtests")</code></p>
</article></div>