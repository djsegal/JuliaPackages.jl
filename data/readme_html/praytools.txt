<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-praytoolsjl" class="anchor" aria-hidden="true" href="#praytoolsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrayTools.jl</h1>
<p dir="auto"><strong>PrayTools.jl</strong> are former <strong>TrainTools</strong>, that I had to rename because someone has created an internal package of the same name and I was developing a split personality.</p>
<p dir="auto"><strong>PrayTools.jl</strong> is a collection of routines to simplify boring stuff and my messing around of training NNs, mainly about various versions of distributed training.</p>
<h3 dir="auto"><a id="user-content-parallel-training" class="anchor" aria-hidden="true" href="#parallel-training"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>parallel training</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="ptrain!(loss, ps, preparesamples, opt, iterations; cb = () -&gt; (), cby = (y) -&gt;(), bs = Threads.nthreads())
ttrain!(loss, ps, preparesamples, opt, iterations; cb = () -&gt; (), cby = (y) -&gt;())"><pre><span class="pl-c1">ptrain!</span>(loss, ps, preparesamples, opt, iterations; cb <span class="pl-k">=</span> () <span class="pl-k">-&gt;</span> (), cby <span class="pl-k">=</span> (y) <span class="pl-k">-&gt;</span>(), bs <span class="pl-k">=</span> Threads<span class="pl-k">.</span><span class="pl-c1">nthreads</span>())
<span class="pl-c1">ttrain!</span>(loss, ps, preparesamples, opt, iterations; cb <span class="pl-k">=</span> () <span class="pl-k">-&gt;</span> (), cby <span class="pl-k">=</span> (y) <span class="pl-k">-&gt;</span>())</pre></div>
<p dir="auto">performs parallel training assuming that the loss function is additive differing in <em>where</em> <code>preparesamples</code> is called. In <code>ptrain!</code>, a single thread calls <code>preparesamples</code> to prepare minibatch, then <code>dividebatch(bs::Int, xs...)</code> divides it to <code>bs</code> sub-batches, which are then dispatched to a separated thread to calculate gradient. In <code>ttrain!</code>, each thread calls <code>preparesamples</code> and calculate the gradient immediately. This means that in <code>ptrain!</code>, <code>preparesamples</code> should return the full minibatch, in <code>ttrain!</code> it should return just the sub-batch that would be used by one thread. Both functions use tree-reduction algorithm, such that the complexity of reducing gradients is log(bs). The <code>iterations</code> is the number of iterations, after which the loop stops, <code>cb</code> is the callback function similar to that of <code>Flux.train!</code> and <code>cby</code> is a callback taking the output of the loss function as an argument, which is convenient for floating averages.</p>
<h3 dir="auto"><a id="user-content-loading-data-on-background" class="anchor" aria-hidden="true" href="#loading-data-on-background"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Loading data on Background</h3>
<p dir="auto"><code>BackgroundDataLoader(loadfun, n)</code> executes function <code>loadfun()</code> <code>n</code>-times in background. Loaded items can be retrieved by <code>take!</code>, which is blocking, i.e. if there is no minibatch loaded, it will wait till one is available. If a minibatch is retrieved, a new call to <code>loadfun()</code> is issued. At the moment, there is no way to stop, may-be if the structure is destroyed.</p>
<p dir="auto">To add loading samples on background, we can do</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="preparesamples() = (randn(2,100), rand(1:2,100))
bdl = BackgroundDataLoader(preparesamples, 10)
train!(loss, ps, bdl, opt, iterations)"><pre><span class="pl-en">preparesamples</span>() <span class="pl-k">=</span> (<span class="pl-c1">randn</span>(<span class="pl-c1">2</span>,<span class="pl-c1">100</span>), <span class="pl-c1">rand</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">2</span>,<span class="pl-c1">100</span>))
bdl <span class="pl-k">=</span> <span class="pl-c1">BackgroundDataLoader</span>(preparesamples, <span class="pl-c1">10</span>)
<span class="pl-c1">train!</span>(loss, ps, bdl, opt, iterations)</pre></div>
<p dir="auto">Just do not forget to run julia with more then single threads.</p>
<h3 dir="auto"><a id="user-content-praytoolsinitevalcby" class="anchor" aria-hidden="true" href="#praytoolsinitevalcby"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>PrayTools.initevalcby</h3>
<p dir="auto">initializes a very simple callback function</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="cby, history = PrayTools.initevalcby(;accuracy = () -&gt; accuracy(model))"><pre class="notranslate"><code>cby, history = PrayTools.initevalcby(;accuracy = () -&gt; accuracy(model))
</code></pre></div>
</article></div>