<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lambdafn" class="anchor" aria-hidden="true" href="#lambdafn"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>LambdaFn</h1>
<p><a href="https://www.repostatus.org/#active" rel="nofollow"><img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed." data-canonical-src="https://www.repostatus.org/badges/latest/active.svg" style="max-width:100%;"></a>
<a href="https://github.com/haberdashPI/LambdaFn.jl/actions/workflows/ci.yml"><img src="https://github.com/haberdashPI/LambdaFn.jl/workflows/CI/badge.svg" alt="GitHub Actions" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/haberdashPI/LambdaFn.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ce4e2e8ddd6b869bfd63864f0950e03e182e27c5fd1e92e6629ce0512369fd9f/68747470733a2f2f636f6465636f762e696f2f67682f68616265726461736850492f4c616d626461466e2e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/haberdashPI/LambdaFn.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/report.html" rel="nofollow"><img src="https://camo.githubusercontent.com/d6a690b7bb2e13eebbe25329b99f3b89d3814b90fdd88d5e042cf6430667654c/68747470733a2f2f6a756c696163692e6769746875622e696f2f4e616e6f736f6c646965725265706f7274732f706b676576616c5f6261646765732f4c2f4c616d626461466e2e737667" alt="PkgEval" data-canonical-src="https://juliaci.github.io/NanosoldierReports/pkgeval_badges/L/LambdaFn.svg" style="max-width:100%;"></a></p>
<p>This small package provides an alternative syntax for writing anonymous functions. It allows the use of three types of function arguments within the body of a call to <code>@λ</code> or <code>@lf</code>:</p>
<ol>
<li>Implicit - each <code>_</code> is replaced with a new function argument</li>
<li>Numbered - each <code>_[n]</code> is replaced with the nth argument to the function</li>
<li>Named - each <code>_[name]</code> is replaced with an argument named <code>name</code>, and they occur in the function argument list in the same order they appear in the function body.</li>
</ol>
<p>Note that the three types of arguments cannot be mixed: <code>@λ(_1 + _)</code> throws an error.</p>
<h2><a id="user-content-how-to-type-λ" class="anchor" aria-hidden="true" href="#how-to-type-λ"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to type λ</h2>
<p>Where supported (e.g. VSCode, Vim, Julia REPL, or Juno), you can type <code>λ</code> starting with a backward slash followed by the word <em>lambda</em> i.e. <code>\lambda</code>.</p>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using LambdaFn

@λ(_ + _) # == (x,y) -&gt; x+y
@λ(_a*_b + _a) # == (a,b) -&gt; a*b + a
@λ(_2 - _1) # == (_1,_2) -&gt; _2 - _1
@λ(_1 - _3) # == (_1,_2,_3) -&gt; _1 - _3
filter(@λ(_.value &gt; 10),data) # == filter(x -&gt; x.value &gt; 10,data)
1:10 |&gt; @λ(filter(@λ(_ &gt; 3),_)) == 4:10
"><pre><span class="pl-k">using</span> LambdaFn

<span class="pl-c1">@λ</span>(_ <span class="pl-k">+</span> _) <span class="pl-c"><span class="pl-c">#</span> == (x,y) -&gt; x+y</span>
<span class="pl-c1">@λ</span>(_a<span class="pl-k">*</span>_b <span class="pl-k">+</span> _a) <span class="pl-c"><span class="pl-c">#</span> == (a,b) -&gt; a*b + a</span>
<span class="pl-c1">@λ</span>(_2 <span class="pl-k">-</span> _1) <span class="pl-c"><span class="pl-c">#</span> == (_1,_2) -&gt; _2 - _1</span>
<span class="pl-c1">@λ</span>(_1 <span class="pl-k">-</span> _3) <span class="pl-c"><span class="pl-c">#</span> == (_1,_2,_3) -&gt; _1 - _3</span>
<span class="pl-c1">filter</span>(<span class="pl-c1">@λ</span>(_<span class="pl-k">.</span>value <span class="pl-k">&gt;</span> <span class="pl-c1">10</span>),data) <span class="pl-c"><span class="pl-c">#</span> == filter(x -&gt; x.value &gt; 10,data)</span>
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span> <span class="pl-k">|&gt;</span> <span class="pl-c1">@λ</span>(<span class="pl-c1">filter</span>(<span class="pl-c1">@λ</span>(_ <span class="pl-k">&gt;</span> <span class="pl-c1">3</span>),_)) <span class="pl-k">==</span> <span class="pl-c1">4</span><span class="pl-k">:</span><span class="pl-c1">10</span></pre></div>
<p>This macro resembles the syntax in <a href="https://github.com/JuliaLang/julia/pull/24990">this proposal</a>, and I basically made this package because I got tired of waiting for that feature. The macro is a little more verbose than the proposed syntax change to julia, but I've grown to like the extra options it allows. I also like that it still has an explicit boundary around the body of the anonymous function, an issue that really complicates use of a bare <code>_</code> as an anonymous function argument.</p>
<h2><a id="user-content-alternatives" class="anchor" aria-hidden="true" href="#alternatives"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Alternatives</h2>
<ul>
<li><a href="https://github.com/c42f/Underscore.jl">Underscore.jl</a> lets you use a single macro applied over multiple functions and use the <code>_</code> (or <code>_1</code>) syntax for anonymous functions. I think I like it better than this package.</li>
<li><a href="https://github.com/bramtayl/LightQuery.jl">LightQuery.jl</a> has the <code>@_</code> macro, which I know less about.</li>
<li><a href="https://github.com/MikeInnes/Lazy.jl">Lazy.jl</a> has <code>@&gt;</code>, <code>@&gt;&gt;</code> and <code>@as</code>.</li>
</ul>
</article></div>