<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-qhull" class="anchor" aria-hidden="true" href="#qhull"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>QHull</h1>
<p dir="auto"><a href="https://github.com/JuliaPolyhedra/QHull.jl/actions?query=workflow%3ACI"><img src="https://github.com/JuliaPolyhedra/QHull.jl/workflows/CI/badge.svg?branch=master" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">A Julia wrapper around a PyCall wrapper around <code>scipy.spatial.ConvexHull</code>, which uses the qhull Convex Hull library.
It implements the Polyhedral Computation library interface of <a href="https://github.com/JuliaPolyhedra/Polyhedra.jl">Polyhedra.jl</a>.</p>
<p dir="auto">The qhull library for computing the convex hull of data points seems to be the standard and very widely used.</p>
<p dir="auto">This module is a quick wrapper around a Python wrapper around the library, as suggested by <a href="https://groups.google.com/d/topic/julia-users/e9m8t5W3TVs/discussion" rel="nofollow">Miles Lubin</a>.</p>
<h2 dir="auto"><a id="user-content-synopsis" class="anchor" aria-hidden="true" href="#synopsis"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Synopsis</h2>
<p dir="auto">Low-level interface:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using QHull

p = rand(10,2)
ch = chull(p)
ch.points         # original points
ch.vertices       # indices to line segments forming the convex hull
ch.simplices      # the simplexes forming the convex hull
show(ch)"><pre><span class="pl-k">using</span> QHull

p <span class="pl-k">=</span> <span class="pl-c1">rand</span>(<span class="pl-c1">10</span>,<span class="pl-c1">2</span>)
ch <span class="pl-k">=</span> <span class="pl-c1">chull</span>(p)
ch<span class="pl-k">.</span>points         <span class="pl-c"><span class="pl-c">#</span> original points</span>
ch<span class="pl-k">.</span>vertices       <span class="pl-c"><span class="pl-c">#</span> indices to line segments forming the convex hull</span>
ch<span class="pl-k">.</span>simplices      <span class="pl-c"><span class="pl-c">#</span> the simplexes forming the convex hull</span>
<span class="pl-c1">show</span>(ch)</pre></div>
<p dir="auto">Using <a href="https://github.com/JuliaPolyhedra/Polyhedra.jl">Polyhedra.jl</a>:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Polyhedra
# Constructs a V-representation of 10 random points in 2 dimension
v = vrep(rand(10, 2))

using QHull
# Constructs a polyhedon from this V-representation with the QHull library
p = polyhedron(v, QHull.Library())
# Removing redundant points, i.e. points which are in the interior of the convex hull
removevredundancy!(p)
# Show remaining points, i.e. the non-redundant ones
@show vrep(p)
# Show the H-representation, the facets describing the polytope
@show hrep(p)"><pre><span class="pl-k">using</span> Polyhedra
<span class="pl-c"><span class="pl-c">#</span> Constructs a V-representation of 10 random points in 2 dimension</span>
v <span class="pl-k">=</span> <span class="pl-c1">vrep</span>(<span class="pl-c1">rand</span>(<span class="pl-c1">10</span>, <span class="pl-c1">2</span>))

<span class="pl-k">using</span> QHull
<span class="pl-c"><span class="pl-c">#</span> Constructs a polyhedon from this V-representation with the QHull library</span>
p <span class="pl-k">=</span> <span class="pl-c1">polyhedron</span>(v, QHull<span class="pl-k">.</span><span class="pl-c1">Library</span>())
<span class="pl-c"><span class="pl-c">#</span> Removing redundant points, i.e. points which are in the interior of the convex hull</span>
<span class="pl-c1">removevredundancy!</span>(p)
<span class="pl-c"><span class="pl-c">#</span> Show remaining points, i.e. the non-redundant ones</span>
<span class="pl-c1">@show</span> <span class="pl-c1">vrep</span>(p)
<span class="pl-c"><span class="pl-c">#</span> Show the H-representation, the facets describing the polytope</span>
<span class="pl-c1">@show</span> <span class="pl-c1">hrep</span>(p)</pre></div>
</article></div>