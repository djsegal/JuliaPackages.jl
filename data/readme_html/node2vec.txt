<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p dir="auto"><a href="https://travis-ci.com/ollin18/Node2Vec.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/5f727e85397bc0b78a042086bd297449c3edf7208686d35dea214598bcdb4496/68747470733a2f2f7472617669732d63692e636f6d2f6f6c6c696e31382f4e6f6465325665632e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/ollin18/Node2Vec.jl.svg?branch=master" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/ollin18/Node2Vec.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/0a0b1ee7fac7cd931005b843056901e0c43103e6eb7277cdb1073beb69f162c1/68747470733a2f2f636f6465636f762e696f2f67682f6f6c6c696e31382f4e6f6465325665632e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov" data-canonical-src="https://codecov.io/gh/ollin18/Node2Vec.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-node2vecjl" class="anchor" aria-hidden="true" href="#node2vecjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Node2Vec.jl</h1>
<h3 dir="auto"><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Installation</h3>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="] add https://github.com/ollin18/Node2Vec.jl"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>ollin18<span class="pl-k">/</span>Node2Vec<span class="pl-k">.</span>jl</pre></div>
<p dir="auto">This is a Julia implementation of <a href="https://cs.stanford.edu/people/jure/pubs/node2vec-kdd16.pdf" rel="nofollow">Node2Vec</a> with <a href="https://github.com/JuliaGraphs/SimpleWeightedGraphs.jl">SimpleWeightedGraphs</a> which is built upon <a href="https://github.com/JuliaGraphs/LightGraphs.jl">LightGraphs</a>.</p>
<p dir="auto">Node2Vec is an algorithm for network feature learning via biased random walks which we could describe as phrases with each visited node being a word. With that analogy we can easily see that the following step is to perform a Word2Vec Skip-gram approach to embed our nodes in a vector space. Is also to be noted that Node2Vec is a generalization of <a href="https://arxiv.org/pdf/1403.6652.pdf" rel="nofollow">DeepWalk</a> setting <code>p=q=1</code>.</p>
<p dir="auto">The implementation is stable but I'm still refactoring and writing documentation. It needs the LightGraphs and SimpleWeightedGraphs packages to get the weighted network structure and it is  very simple as we only have three functions, <code>node2vec_walk, simulate_walks, learn_embeddings</code>.</p>
<h3 dir="auto"><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Example</h3>
<p dir="auto">First we read the data</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using TSne, Plots, Colors, GraphPlot, LightGraphs, SimpleWeightedGraphs,DelimitedFiles, StatsBase, Node2Vec

tred = readdlm(&quot;data/networks/adyacencias.csv&quot;,'|')
Nodes = readdlm(&quot;data/networks/los_nombres.csv&quot;,',')
sen = readdlm(&quot;data/networks/senators.csv&quot;,'|')
partidos = readdlm(&quot;data/networks/los_partidos.csv&quot;,'|')"><pre><span class="pl-k">using</span> TSne, Plots, Colors, GraphPlot, LightGraphs, SimpleWeightedGraphs,DelimitedFiles, StatsBase, Node2Vec

tred <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>data/networks/adyacencias.csv<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>)
Nodes <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>data/networks/los_nombres.csv<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">'</span>,<span class="pl-pds">'</span></span>)
sen <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>data/networks/senators.csv<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>)
partidos <span class="pl-k">=</span> <span class="pl-c1">readdlm</span>(<span class="pl-s"><span class="pl-pds">"</span>data/networks/los_partidos.csv<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">'</span>|<span class="pl-pds">'</span></span>)</pre></div>
<p dir="auto">Then we can create our network; build a dictionary with the node names and add the edges.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="dic_nodes = Dict{String,Int64}(Dict(Nodes[i]=&gt;i for i in eachindex(Nodes)))
g = SimpleWeightedGraph()
G = Graph()
last_node = lastindex(Nodes)
add_vertices!(g, last_node)
add_vertices!(G, last_node)
for n in 1:Int64(size(tred)[1])
    add_edge!(g,dic_nodes[tred[n,1]],
              dic_nodes[tred[n,2]],
              tred[n,3])
    add_edge!(G,dic_nodes[tred[n,1]],
              dic_nodes[tred[n,2]])
end"><pre>dic_nodes <span class="pl-k">=</span> <span class="pl-c1">Dict</span><span class="pl-c1">{String,Int64}</span>(<span class="pl-c1">Dict</span>(Nodes[i]<span class="pl-k">=&gt;</span>i <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(Nodes)))
g <span class="pl-k">=</span> <span class="pl-c1">SimpleWeightedGraph</span>()
G <span class="pl-k">=</span> <span class="pl-c1">Graph</span>()
last_node <span class="pl-k">=</span> <span class="pl-c1">lastindex</span>(Nodes)
<span class="pl-c1">add_vertices!</span>(g, last_node)
<span class="pl-c1">add_vertices!</span>(G, last_node)
<span class="pl-k">for</span> n <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">Int64</span>(<span class="pl-c1">size</span>(tred)[<span class="pl-c1">1</span>])
    <span class="pl-c1">add_edge!</span>(g,dic_nodes[tred[n,<span class="pl-c1">1</span>]],
              dic_nodes[tred[n,<span class="pl-c1">2</span>]],
              tred[n,<span class="pl-c1">3</span>])
    <span class="pl-c1">add_edge!</span>(G,dic_nodes[tred[n,<span class="pl-c1">1</span>]],
              dic_nodes[tred[n,<span class="pl-c1">2</span>]])
<span class="pl-k">end</span></pre></div>
<p dir="auto">Now the Node2Vec algorithm. First the walks</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# simulate_walks(network,num,length,p,q)
walks = simulate_walks(g,5,80,2,2)"><pre><span class="pl-c"><span class="pl-c">#</span> simulate_walks(network,num,length,p,q)</span>
walks <span class="pl-k">=</span> <span class="pl-c1">simulate_walks</span>(g,<span class="pl-c1">5</span>,<span class="pl-c1">80</span>,<span class="pl-c1">2</span>,<span class="pl-c1">2</span>)</pre></div>
<p dir="auto">It is possible to create your own simulated walks with <code>node2vec_walk(network,node,length,p,q)</code>, the function <code>simulate_walks</code> randomly shuffles the initial node to avoid the <a href="https://journals.aps.org/pre/abstract/10.1103/PhysRevE.95.052301" rel="nofollow">first-mover advantage</a>.</p>
<p dir="auto">Then we do the Word2Vec step through <a href="https://github.com/JuliaText/Word2Vec.jl">Word2Vec.jl</a>. It strangely takes the character "" as a word so we cut it.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="model = learn_embeddings(walks)
vectors = model.vectors"><pre>model <span class="pl-k">=</span> <span class="pl-c1">learn_embeddings</span>(walks)
vectors <span class="pl-k">=</span> model<span class="pl-k">.</span>vectors</pre></div>
<p dir="auto">You can specify embedding vector length with <code>size</code> keyword argument in the <code>learn_embeddings</code> function.</p>
<p dir="auto">In order to plot the embedded network we need to perform a dimensionality reduction (working on the parameters)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="vectors = model.vectors
senators = vectors[:,2:size(vectors)[2]]
dv = tsne(senators')"><pre>vectors <span class="pl-k">=</span> model<span class="pl-k">.</span>vectors
senators <span class="pl-k">=</span> vectors[:,<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">size</span>(vectors)[<span class="pl-c1">2</span>]]
dv <span class="pl-k">=</span> <span class="pl-c1">tsne</span>(senators<span class="pl-k">'</span>)</pre></div>
<p dir="auto">The current network is a representation of the Mexican Senate so we want to color each node projection by their party affiliation.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="get_order=Array{String}(undef,128)
for j in 1:128
   for i in 1:128
       if sen[i,2]==Nodes[j]
           get_order[j]=sen[i,3]
       end
   end
end

the_nodes = model.vocab[2:end]
nodes_num = map(x-&gt;parse(Int64,x),the_nodes)
ord_party = Vector{Any}(undef,128)
for i in eachindex(nodes_num)
    ord_party[i]=get_order[nodes_num[i]]
end

for i in eachindex(ord_party)
    if ord_party[i] == &quot;PRI&quot;
        ord_party[i] = 1
    elseif ord_party[i] == &quot;PAN&quot;
        ord_party[i] = 2
    elseif ord_party[i] == &quot;PRD&quot;
        ord_party[i] = 3
    elseif ord_party[i] == &quot;PVEM&quot;
        ord_party[i] = 4
    elseif ord_party[i] == &quot;PT&quot;
        ord_party[i] = 5
    elseif ord_party[i] == &quot;Independiente&quot;
        ord_party[i] = 6
    end
end
nodecolor = [colorant&quot;red&quot;,colorant&quot;blue&quot;,colorant&quot;yellow&quot;,colorant&quot;green&quot;,colorant&quot;orange&quot;,colorant&quot;violet&quot;]
nodefillc =  nodecolor[ord_party]"><pre>get_order<span class="pl-k">=</span><span class="pl-c1">Array</span><span class="pl-c1">{String}</span>(undef,<span class="pl-c1">128</span>)
<span class="pl-k">for</span> j <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">128</span>
   <span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">128</span>
       <span class="pl-k">if</span> sen[i,<span class="pl-c1">2</span>]<span class="pl-k">==</span>Nodes[j]
           get_order[j]<span class="pl-k">=</span>sen[i,<span class="pl-c1">3</span>]
       <span class="pl-k">end</span>
   <span class="pl-k">end</span>
<span class="pl-k">end</span>

the_nodes <span class="pl-k">=</span> model<span class="pl-k">.</span>vocab[<span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">end</span>]
nodes_num <span class="pl-k">=</span> <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span><span class="pl-c1">parse</span>(Int64,x),the_nodes)
ord_party <span class="pl-k">=</span> <span class="pl-c1">Vector</span><span class="pl-c1">{Any}</span>(undef,<span class="pl-c1">128</span>)
<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(nodes_num)
    ord_party[i]<span class="pl-k">=</span>get_order[nodes_num[i]]
<span class="pl-k">end</span>

<span class="pl-k">for</span> i <span class="pl-k">in</span> <span class="pl-c1">eachindex</span>(ord_party)
    <span class="pl-k">if</span> ord_party[i] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>PRI<span class="pl-pds">"</span></span>
        ord_party[i] <span class="pl-k">=</span> <span class="pl-c1">1</span>
    <span class="pl-k">elseif</span> ord_party[i] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>PAN<span class="pl-pds">"</span></span>
        ord_party[i] <span class="pl-k">=</span> <span class="pl-c1">2</span>
    <span class="pl-k">elseif</span> ord_party[i] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>PRD<span class="pl-pds">"</span></span>
        ord_party[i] <span class="pl-k">=</span> <span class="pl-c1">3</span>
    <span class="pl-k">elseif</span> ord_party[i] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>PVEM<span class="pl-pds">"</span></span>
        ord_party[i] <span class="pl-k">=</span> <span class="pl-c1">4</span>
    <span class="pl-k">elseif</span> ord_party[i] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>PT<span class="pl-pds">"</span></span>
        ord_party[i] <span class="pl-k">=</span> <span class="pl-c1">5</span>
    <span class="pl-k">elseif</span> ord_party[i] <span class="pl-k">==</span> <span class="pl-s"><span class="pl-pds">"</span>Independiente<span class="pl-pds">"</span></span>
        ord_party[i] <span class="pl-k">=</span> <span class="pl-c1">6</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span>
nodecolor <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>red<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>blue<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>yellow<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>green<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>orange<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>violet<span class="pl-pds">"</span></span>]
nodefillc <span class="pl-k">=</span>  nodecolor[ord_party]</pre></div>
<p dir="auto">Now we can finally plot the projection</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="scatter(dv[:,1],dv[:,2],legend=false,color=nodefillc,markersize=4,
        markerstrokewidth=0.3,alpha=0.6,show=true)
title!(&quot;Mexican Senate - Node2Vec proj with p=2 q=2&quot;)"><pre><span class="pl-c1">scatter</span>(dv[:,<span class="pl-c1">1</span>],dv[:,<span class="pl-c1">2</span>],legend<span class="pl-k">=</span><span class="pl-c1">false</span>,color<span class="pl-k">=</span>nodefillc,markersize<span class="pl-k">=</span><span class="pl-c1">4</span>,
        markerstrokewidth<span class="pl-k">=</span><span class="pl-c1">0.3</span>,alpha<span class="pl-k">=</span><span class="pl-c1">0.6</span>,show<span class="pl-k">=</span><span class="pl-c1">true</span>)
<span class="pl-c1">title!</span>(<span class="pl-s"><span class="pl-pds">"</span>Mexican Senate - Node2Vec proj with p=2 q=2<span class="pl-pds">"</span></span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="data/figs/node2vecp2q2.png"><img src="data/figs/node2vecp2q2.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">And compare to the original network (with an unweighted LightGraphs network)</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="gplot(G,nodefillc=nodefillc,layout=spring_layout)"><pre><span class="pl-c1">gplot</span>(G,nodefillc<span class="pl-k">=</span>nodefillc,layout<span class="pl-k">=</span>spring_layout)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="data/figs/network.png"><img src="data/figs/network.png" alt="" style="max-width: 100%;"></a></p>
<h2 dir="auto"><a id="user-content-citing" class="anchor" aria-hidden="true" href="#citing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Citing</h2>
<p dir="auto">If you find node2vec useful in your research, we ask that you cite the original paper:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="@inproceedings{Grover:2016:NSF:2939672.2939754,
    author = {Grover, Aditya and Leskovec, Jure},
    title = {Node2Vec: Scalable Feature Learning for Networks},
    booktitle = {Proceedings of the 22Nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},
    series = {KDD '16},
    year = {2016},
    isbn = {978-1-4503-4232-2},
    location = {San Francisco, California, USA},
    pages = {855--864},
    numpages = {10},
    url = {http://doi.acm.org/10.1145/2939672.2939754},
    doi = {10.1145/2939672.2939754},
    acmid = {2939754},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {feature learning, graph representations, information networks, node embeddings},
}"><pre class="notranslate"><code>@inproceedings{Grover:2016:NSF:2939672.2939754,
    author = {Grover, Aditya and Leskovec, Jure},
    title = {Node2Vec: Scalable Feature Learning for Networks},
    booktitle = {Proceedings of the 22Nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},
    series = {KDD '16},
    year = {2016},
    isbn = {978-1-4503-4232-2},
    location = {San Francisco, California, USA},
    pages = {855--864},
    numpages = {10},
    url = {http://doi.acm.org/10.1145/2939672.2939754},
    doi = {10.1145/2939672.2939754},
    acmid = {2939754},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {feature learning, graph representations, information networks, node embeddings},
}
</code></pre></div>
</article></div>