<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-vimes" class="anchor" aria-hidden="true" href="#vimes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Vimes</h1>
<p><a href="https://travis-ci.org/MikeInnes/Vimes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d6c26782e5d78b6d175137ab4d6d581cc914f6cedaa1fc59101f16e1d149383b/68747470733a2f2f7472617669732d63692e6f72672f4d696b65496e6e65732f56696d65732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/MikeInnes/Vimes.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/MikeInnes/Vimes.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a88700e8df287c33095d50f3e6b68ed9c0720e5c111684301531e349bb8b4ce4/68747470733a2f2f636f6465636f762e696f2f67682f4d696b65496e6e65732f56696d65732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/MikeInnes/Vimes.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<blockquote>
<p>‘Quis custodiet ipsos custodies? Your grace.’ <br>
‘I know that one,’ said Vimes. 'Who watches the watchmen? Me, Mr Pessimal.’ <br>
‘Ah, but who watches you, your grace?’ said the inspector, with a brief smile. <br>
‘I do that, too.'</p>
</blockquote>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="] add https://github.com/MikeInnes/Vimes.jl
] add https://github.com/MikeInnes/CSTParser.jl#location
"><pre>] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>Vimes<span class="pl-k">.</span>jl
] add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>MikeInnes<span class="pl-k">/</span>CSTParser<span class="pl-k">.</span>jl<span class="pl-c"><span class="pl-c">#</span>location</span></pre></div>
<p>Simulating a good programmer may be AI-complete, but simulating a bad one is much easier. That's what Vimes does; it makes random, but plausible-looking, changes to your code. Then it runs your test suite. If your tests fail, you're good; if they don't, then the tests are probably missing something important.</p>
<p>Usage:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using Vimes; Vimes.go(&quot;../JSON.jl&quot;, procs=4) # run 4 tests in parallel
[ Info: (4) Ran 1 tests, precision 100.00%
[ Info: (1) Ran 2 tests, precision 100.00%
...
[ Info: (2) Ran 35 tests, precision 97.14%
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Vimes; Vimes<span class="pl-k">.</span><span class="pl-c1">go</span>(<span class="pl-s"><span class="pl-pds">"</span>../JSON.jl<span class="pl-pds">"</span></span>, procs<span class="pl-k">=</span><span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">#</span> run 4 tests in parallel</span>
[ Info<span class="pl-k">:</span> (<span class="pl-c1">4</span>) Ran <span class="pl-c1">1</span> tests, precision <span class="pl-c1">100.00</span><span class="pl-k">%</span>
[ Info<span class="pl-k">:</span> (<span class="pl-c1">1</span>) Ran <span class="pl-c1">2</span> tests, precision <span class="pl-c1">100.00</span><span class="pl-k">%</span>
<span class="pl-k">...</span>
[ Info<span class="pl-k">:</span> (<span class="pl-c1">2</span>) Ran <span class="pl-c1">35</span> tests, precision <span class="pl-c1">97.14</span><span class="pl-k">%</span></pre></div>
<p>Vimes reports the percentage of runs where the tests failed as the precision of the test suite (i.e. 100% is the best possible precision).</p>
<p>In the project folder (here <code>../JSON.jl</code>), a <code>.vimes</code> folder will appear with a <code>.diff</code> file for every patch found, like this:</p>
<div class="highlight highlight-source-diff position-relative" data-snippet-clipboard-copy-content="@@ -19,7 +19,7 @@ end
 function Base.push!(v::PushVector, i)
     v.l += 1
-    if v.l &gt; length(v.v)
+    if !(v.l &gt; length(v.v))
         resize!(v.v, v.l * 2)
     end
     v.v[v.l] = i
"><pre><span class="pl-mdr">@@ -19,7 +19,7 @@</span> end
 function Base.push!(v::PushVector, i)
     v.l += 1
<span class="pl-md"><span class="pl-md">-</span>    if v.l &gt; length(v.v)</span>
<span class="pl-mi1"><span class="pl-mi1">+</span>    if !(v.l &gt; length(v.v))</span>
         resize!(v.v, v.l * 2)
     end
     v.v[v.l] = i</pre></div>
<h2><a id="user-content-patches" class="anchor" aria-hidden="true" href="#patches"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Patches</h2>
<p>Vimes is powered by the library of patches in <code>src/library.jl</code>. It's easy to make a new patch; it's just a function which takes an expression and returns either a new expression or <code>nothing</code>. For example, replacing numeric constants can be done by</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function numbers(x)
  x isa Number || return
  return rand(typeof(x))
end
"><pre><span class="pl-k">function</span> <span class="pl-en">numbers</span>(x)
  x <span class="pl-k">isa</span> Number <span class="pl-k">||</span> <span class="pl-k">return</span>
  <span class="pl-k">return</span> <span class="pl-c1">rand</span>(<span class="pl-c1">typeof</span>(x))
<span class="pl-k">end</span></pre></div>
<p>Note that you do not need to search for numbers inside expressions, since Vimes will automatically apply this function to the whole source tree.</p>
<p>Vimes comes with a set of default patches, <code>Vimes.defaults</code>. You can supply your own set of patches entirely, or extend the defaults with</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Vimes.go(&quot;.&quot;, [Vimes.defaults..., numbers])
"><pre>Vimes<span class="pl-k">.</span><span class="pl-c1">go</span>(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>, [Vimes<span class="pl-k">.</span>defaults<span class="pl-k">...</span>, numbers])</pre></div>
</article></div>