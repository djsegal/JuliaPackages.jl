<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fcfv_geodynamicsjl" class="anchor" aria-hidden="true" href="#fcfv_geodynamicsjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>FCFV_Geodynamics.jl</h1>
<p dir="auto">This repository contains an implementation of the Face-Centered Finite Volume (FCFV) Poisson solver presented in Sevilla et al. (2018). The code heavily relies on the <a href="https://github.com/JuliaSIMD/LoopVectorization.jl">LoopVectorization package</a>. The code supports quadrangular and triangular elements. Triangular mesh generation relies on the <a href="https://github.com/konsim83/TriangleMesh.jl">TriangleMesh package</a>, which is a Julia wrapper to <a href="https://www.cs.cmu.edu/~quake/triangle.html" rel="nofollow">Triangle</a> (Shewchuk, 2002).</p>
<h1 dir="auto"><a id="user-content-stokes-solver" class="anchor" aria-hidden="true" href="#stokes-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Stokes solver</h1>
<p dir="auto">Convergence to manufactured solution using <a href="./MainFCFV_Stokes_Convergence.jl">MainFCFV_Stokes_Convergence.jl</a> (see Sevilla et al., 2018):<br></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/2_conv_Stokes_cst.png"><img src="/images/2_conv_Stokes_cst.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Total execution time of Julia code, as function of the total number of dofs (excluding visualisation) - Cholesky factorisation is the "bottleneck":<br></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/2_time_Stokes_cst.png"><img src="/images/2_time_Stokes_cst.png" alt="" style="max-width: 100%;"></a></p>
<h1 dir="auto"><a id="user-content-poisson-solver" class="anchor" aria-hidden="true" href="#poisson-solver"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Poisson solver</h1>
<p dir="auto">Convergence to manufactured solution using <a href="./MainFCFV_diffusion_Convergence.jl">MainFCFV_diffusion_Convergence.jl</a> (see Sevilla et al., 2018):<br></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/1_conv_diff_cst.png"><img src="/images/1_conv_diff_cst.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">Total execution time of Julia code, as function of the total number of dofs (excluding visualisation):<br></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/1_time_diff_cst.png"><img src="/images/1_time_diff_cst.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">An example of computation on quads using <a href="MainFCFV_diffusion_v2.jl">MainFCFV_diffusion_v2.jl</a> (512^2 - 262144 elements):</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/1_quad_diff_cst.png"><img src="/images/1_quad_diff_cst.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">An example of computation on triangles (450219 elements):</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/images/1_tri_diff_cst.png"><img src="/images/1_tri_diff_cst.png" alt="" style="max-width: 100%;"></a></p>
<p dir="auto">The "grainy" pattern is due to the white outlines around elements which I did not manage to remove when plotting with Makie.</p>
<h1 dir="auto"><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>References</h1>
<p dir="auto">Sevilla, R, Giacomini, M, Huerta, A. A face-centred finite volume method for second-order elliptic problems. Int J Numer Methods Eng. 2018; 115: 986â€“ 1014. <a href="https://doi.org/10.1002/nme.5833" rel="nofollow">https://doi.org/10.1002/nme.5833</a></p>
<p dir="auto">Jonathan Richard Shewchuk, Delaunay Refinement Algorithms for Triangular Mesh Generation, Computational Geometry: Theory and Applications 22(1-3):21-74, May 2002</p>
</article></div>