<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-fredholm" class="anchor" aria-hidden="true" href="#fredholm"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Fredholm</h1>
<h2 dir="auto"><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Usage</h2>
<p dir="auto">As an example, consider input data of the following form</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using Fredholm, QuadGK, Random
Random.seed!(1234);

F(t) = exp(-(t - 2)^2 / (2 * 0.3^2)) + exp(-(t - 3)^2 / (2 * 0.3^2))
y(s) =  quadgk(t -&gt; F(t) * exp(-t * s), 0, Inf, rtol=1e-6)[1] 

s = 10.0.^(-2:0.05:1)  # generate discrete example data
ys = map(y, s)         # from this we want to approximate F(t)
noise = (randn(length(ys))) * 0.001 

ti = 0:0.01:5|&gt; collect #define the t-domain for the solution
α = 1.2e-4
t, yt, ss, yss= invert(s, ys .+ noise, ti, (t, s) -&gt; exp(-t * s), Tikhonov(α))"><pre><span class="pl-k">using</span> Fredholm, QuadGK, Random
Random<span class="pl-k">.</span><span class="pl-c1">seed!</span>(<span class="pl-c1">1234</span>);

<span class="pl-en">F</span>(t) <span class="pl-k">=</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>(t <span class="pl-k">-</span> <span class="pl-c1">2</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">0.3</span><span class="pl-k">^</span><span class="pl-c1">2</span>)) <span class="pl-k">+</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>(t <span class="pl-k">-</span> <span class="pl-c1">3</span>)<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> (<span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">0.3</span><span class="pl-k">^</span><span class="pl-c1">2</span>))
<span class="pl-en">y</span>(s) <span class="pl-k">=</span>  <span class="pl-c1">quadgk</span>(t <span class="pl-k">-&gt;</span> <span class="pl-c1">F</span>(t) <span class="pl-k">*</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>t <span class="pl-k">*</span> s), <span class="pl-c1">0</span>, <span class="pl-c1">Inf</span>, rtol<span class="pl-k">=</span><span class="pl-c1">1e-6</span>)[<span class="pl-c1">1</span>] 

s <span class="pl-k">=</span> <span class="pl-c1">10.0</span><span class="pl-k">.^</span>(<span class="pl-k">-</span><span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">0.05</span><span class="pl-k">:</span><span class="pl-c1">1</span>)  <span class="pl-c"><span class="pl-c">#</span> generate discrete example data</span>
ys <span class="pl-k">=</span> <span class="pl-c1">map</span>(y, s)         <span class="pl-c"><span class="pl-c">#</span> from this we want to approximate F(t)</span>
noise <span class="pl-k">=</span> (<span class="pl-c1">randn</span>(<span class="pl-c1">length</span>(ys))) <span class="pl-k">*</span> <span class="pl-c1">0.001</span> 

ti <span class="pl-k">=</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">0.01</span><span class="pl-k">:</span><span class="pl-c1">5</span><span class="pl-k">|&gt;</span> collect <span class="pl-c"><span class="pl-c">#</span>define the t-domain for the solution</span>
α <span class="pl-k">=</span> <span class="pl-c1">1.2e-4</span>
t, yt, ss, yss<span class="pl-k">=</span> <span class="pl-c1">invert</span>(s, ys <span class="pl-k">.+</span> noise, ti, (t, s) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>t <span class="pl-k">*</span> s), <span class="pl-c1">Tikhonov</span>(α))</pre></div>
<p dir="auto">The solution <code>yt</code> at discrete <code>t</code> will very much depend on the choice of the regularization parameter <code>α</code>. If more noise is present in the data a higher <code>α</code> should be picked and vice versa. The variables <code>ss</code> and <code>yss</code> contain the regularized form of <code>s</code> and <code>ys</code>, where <code>ss[end]</code> contians the <code>y-offset</code>. If <code>invert</code> is called with the keyword <code>yoffset=false</code> <code>ss</code> and <code>s</code> will be equal.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="example.png"><img src="example.png" alt="example" style="max-width: 100%;"></a></p>
<p dir="auto">To allow the solution to take also negative amplitudes use the <code>tdomain = :real</code> keyword</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t, yt = invert(s, ys .+ noise, ti, (t, s) -&gt; exp(-t * s), Tikhonov(α), tdomain=:real)"><pre>t, yt <span class="pl-k">=</span> <span class="pl-c1">invert</span>(s, ys <span class="pl-k">.+</span> noise, ti, (t, s) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>t <span class="pl-k">*</span> s), <span class="pl-c1">Tikhonov</span>(α), tdomain<span class="pl-k">=</span><span class="pl-c1">:real</span>)</pre></div>
<p dir="auto">In cases that the regularization parameter <code>α</code> is not known beforehand one can estimate it via the L-Curve method by calling</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="t, yt = invert(s, ys .+ noise, ti, (t, s) -&gt; exp(-t * s), LCurve(Tikhonov(α)), tdomain=:real)"><pre>t, yt <span class="pl-k">=</span> <span class="pl-c1">invert</span>(s, ys <span class="pl-k">.+</span> noise, ti, (t, s) <span class="pl-k">-&gt;</span> <span class="pl-c1">exp</span>(<span class="pl-k">-</span>t <span class="pl-k">*</span> s), <span class="pl-c1">LCurve</span>(<span class="pl-c1">Tikhonov</span>(α)), tdomain<span class="pl-k">=</span><span class="pl-c1">:real</span>)</pre></div>
</article></div>