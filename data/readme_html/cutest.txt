<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-cutestjl-julias-cutest-interface" class="anchor" aria-hidden="true" href="#cutestjl-julias-cutest-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>CUTEst.jl: <a href="http://julialang.org" rel="nofollow">Julia</a>'s <a href="https://github.com/ralna/CUTEst/wiki">CUTEst</a> Interface</h1>
<p>This package provides an interface to CUTEst, a repository of
constrained and unconstrained nonlinear programming problems for testing and
comparing optimization algorithms, derived from the abstract model on
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels</a>.</p>
<h3><a id="user-content-stable-release--" class="anchor" aria-hidden="true" href="#stable-release--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Stable release <a href="https://github.com/JuliaSmoothOptimizers/CUTEst.jl/releases/latest"><img src="https://camo.githubusercontent.com/31c870ff6dbcac8536634bfe7f3ea69c0a75f6bf8c912e6a4db2acd79ca71e72/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961536d6f6f74684f7074696d697a6572732f4355544573742e6a6c2e737667" alt="Github release" data-canonical-src="https://img.shields.io/github/release/JuliaSmoothOptimizers/CUTEst.jl.svg" style="max-width:100%;"></a> <a href="https://zenodo.org/badge/latestdoi/30661559" rel="nofollow"><img src="https://camo.githubusercontent.com/587bc1e5215d61e29ef6ce75e63a400c10c957a30b345214f85d52ef2575ab0a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f33303636313535392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/30661559.svg" style="max-width:100%;"></a></h3>
<ul>
<li>Documentation: <a href="https://JuliaSmoothOptimizers.github.io/CUTEst.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></li>
<li>Chat: <a href="https://gitter.im/JuliaSmoothOptimizers/JuliaSmoothOptimizers" rel="nofollow"><img src="https://camo.githubusercontent.com/29ba97b04b5427b6d9c9c0b6861dc47ab27222ab93eb814268ef1b54740b2385/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f4a756c6961536d6f6f74684f7074696d697a6572732f4a756c6961536d6f6f74684f7074696d697a6572732e737667" alt="Gitter" data-canonical-src="https://img.shields.io/gitter/room/JuliaSmoothOptimizers/JuliaSmoothOptimizers.svg" style="max-width:100%;"></a></li>
</ul>
<h3><a id="user-content-development-version" class="anchor" aria-hidden="true" href="#development-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Development version</h3>
<ul>
<li>Documentation: <a href="https://JuliaSmoothOptimizers.github.io/CUTEst.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/56f8252ba8e9d3f0b810769543f77823d2fe031ce560d4c2d69fb1fcad800383/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></li>
<li>Tests:
<a href="https://travis-ci.org/JuliaSmoothOptimizers/CUTEst.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c098a8817afc4e2631bb0b449b958a4f1e60002c8fa6ce240f0c69363104d468/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f4355544573742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/CUTEst.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaSmoothOptimizers/CUTEst.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/0b67205c4e2f189d6bd7770c0df4f5344030450f3d0b75b05fb2910808929ddc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961536d6f6f74684f7074696d697a6572732f4355544573742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaSmoothOptimizers/CUTEst.jl/badge.svg?branch=master" style="max-width:100%;"></a></li>
</ul>
<h2><a id="user-content-how-to-cite" class="anchor" aria-hidden="true" href="#how-to-cite"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>How to Cite</h2>
<p>If you use CUTEst.jl in your work, please cite using the format given in <a href="https://github.com/JuliaSmoothOptimizers/CUTEst.jl/blob/master/CITATION.bib">CITATION.bib</a>.</p>
<h2><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Installing</h2>
<p>This package will install CUTEst binaries for your platform automatically.
The gfortran compiler is still required to compile decoded SIF problems.
No other Fortran compiler is supported.</p>
<p>The following command installs the CUTEst binaries and Julia interface:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="pkg&gt; add CUTEst
"><pre>pkg<span class="pl-k">&gt;</span> add CUTEst</pre></div>
<p>If you already have a collection of SIF problems that you wish to use, you can simply set the <code>MASTSIF</code> environment variable to point to their location.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p>After installing, you can create instances of
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels</a> models, with
the name <code>CUTEstModel</code>:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using CUTEst

nlp = CUTEstModel(&quot;BYRDSPHR&quot;);
print(nlp);
"><pre><span class="pl-k">using</span> CUTEst

nlp <span class="pl-k">=</span> <span class="pl-c1">CUTEstModel</span>(<span class="pl-s"><span class="pl-pds">"</span>BYRDSPHR<span class="pl-pds">"</span></span>);
<span class="pl-c1">print</span>(nlp);</pre></div>
<p>This model accepts the same functions as the other NLPModels, for instance</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="fx = obj(nlp, nlp.meta.x0)
gx = grad(nlp, nlp.meta.x0)
Hx = hess(nlp, nlp.meta.x0)
"><pre>fx <span class="pl-k">=</span> <span class="pl-c1">obj</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)
gx <span class="pl-k">=</span> <span class="pl-c1">grad</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)
Hx <span class="pl-k">=</span> <span class="pl-c1">hess</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)</pre></div>
<h3><a id="user-content-run-multiple-models-in-parallel" class="anchor" aria-hidden="true" href="#run-multiple-models-in-parallel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Run multiple models in parallel</h3>
<p>First, decode each of the problems in serial.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="function decodemodel(name)
    finalize(CUTEstModel(name))
end

probs = [&quot;AKIVA&quot;, &quot;ALLINITU&quot;, &quot;ARGLINA&quot;, &quot;ARGLINB&quot;, &quot;ARGLINC&quot;,&quot;ARGTRIGLS&quot;, &quot;ARWHEAD&quot;]
broadcast(decodemodel, probs)
"><pre><span class="pl-k">function</span> <span class="pl-en">decodemodel</span>(name)
    <span class="pl-c1">finalize</span>(<span class="pl-c1">CUTEstModel</span>(name))
<span class="pl-k">end</span>

probs <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>AKIVA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ALLINITU<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARGLINA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARGLINB<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARGLINC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ARGTRIGLS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARWHEAD<span class="pl-pds">"</span></span>]
<span class="pl-c1">broadcast</span>(decodemodel, probs)</pre></div>
<p>Then, call functions handling models in parallel. It is important to pass <code>decode=false</code> to <code>CUTEstModel</code>.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="addprocs(2)
@everywhere using CUTEst
@everywhere function evalmodel(name)
   nlp = CUTEstModel(name; decode=false)
   retval = obj(nlp, nlp.meta.x0)
   finalize(nlp)
   retval
end

fvals = pmap(evalmodel, probs)
"><pre><span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> CUTEst
<span class="pl-c1">@everywhere</span> <span class="pl-k">function</span> <span class="pl-en">evalmodel</span>(name)
   nlp <span class="pl-k">=</span> <span class="pl-c1">CUTEstModel</span>(name; decode<span class="pl-k">=</span><span class="pl-c1">false</span>)
   retval <span class="pl-k">=</span> <span class="pl-c1">obj</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)
   <span class="pl-c1">finalize</span>(nlp)
   retval
<span class="pl-k">end</span>

fvals <span class="pl-k">=</span> <span class="pl-c1">pmap</span>(evalmodel, probs)</pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Related Packages</h2>
<ul>
<li><a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a> provides an
AbstractModel from which CUTEstModel derives.</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/AmplNLReader.jl">AmplNLReader.jl</a>
provides an interface to <a href="http://www.ampl.com" rel="nofollow">AMPL</a> models based on
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a>.</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/NLPModelsJuMP.jl.git">NLPModelsJuMP.jl</a>
provides conversion from <a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a> / <a href="https://github.com/jump-dev/MathOptInterface.jl">MathOptInterface.jl</a> models to NLPModels.</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/OptimizationProblems.jl">OptimizationProblems.jl</a>
provides a collection of optimization problems in
<a href="https://github.com/jump-dev/JuMP.jl">JuMP.jl</a> syntax.</li>
</ul>
<p><a href="http://www.gnu.org/licenses/lgpl.html" title="LGPLv3" rel="nofollow"><img src="https://camo.githubusercontent.com/44002d8b2f35476d89809548d1ad3dc776f3134e2458f06919ad321d34d5bc47/687474703a2f2f7777772e676e752e6f72672f67726170686963732f6c67706c76332d38387833312e706e67" alt="GPLv3" data-canonical-src="http://www.gnu.org/graphics/lgplv3-88x31.png" style="max-width:100%;"></a></p>
</article></div>