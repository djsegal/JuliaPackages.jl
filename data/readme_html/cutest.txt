<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-cutestjl-julias-cutest-interface" class="anchor" aria-hidden="true" href="#cutestjl-julias-cutest-interface"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CUTEst.jl: <a href="http://julialang.org" rel="nofollow">Julia</a>'s <a href="https://github.com/ralna/CUTEst/wiki">CUTEst</a> Interface</h1>
<p>This package provides an interface to CUTEst, a repository of
constrained and unconstrained nonlinear programming problems for testing and
comparing optimization algorithms, derived from the abstract model on
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels</a>.</p>
<h3><a id="user-content-stable-release--" class="anchor" aria-hidden="true" href="#stable-release--"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Stable release <a href="https://github.com/JuliaSmoothOptimizers/CUTEst.jl/releases/latest"><img src="https://camo.githubusercontent.com/9186b6e35898d9bd2ae734ce0598642120cd630a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f4a756c6961536d6f6f74684f7074696d697a6572732f4355544573742e6a6c2e737667" alt="Github release" data-canonical-src="https://img.shields.io/github/release/JuliaSmoothOptimizers/CUTEst.jl.svg" style="max-width:100%;"></a> <a href="https://zenodo.org/badge/latestdoi/30661559" rel="nofollow"><img src="https://camo.githubusercontent.com/b23c87bb8f91229dec790c9d58026351b489811f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f33303636313535392e737667" alt="DOI" data-canonical-src="https://zenodo.org/badge/30661559.svg" style="max-width:100%;"></a></h3>
<ul>
<li>Documentation: <a href="https://JuliaSmoothOptimizers.github.io/CUTEst.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></li>
<li>Package Evaluator: <a href="https://pkg.julialang.org/?pkg=CUTEst" rel="nofollow"><img src="https://camo.githubusercontent.com/853c67f9d6f4fc49c71bcf89508f41100851ae7f/68747470733a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4355544573745f302e352e737667" alt="CUTEst.jl" data-canonical-src="https://pkg.julialang.org/badges/CUTEst_0.5.svg" style="max-width:100%;"></a>
<a href="https://pkg.julialang.org/?pkg=CUTEst" rel="nofollow"><img src="https://camo.githubusercontent.com/74bbce719a6d39b58e1ff875798e3953b6338d33/68747470733a2f2f706b672e6a756c69616c616e672e6f72672f6261646765732f4355544573745f302e362e737667" alt="CUTEst.jl" data-canonical-src="https://pkg.julialang.org/badges/CUTEst_0.6.svg" style="max-width:100%;"></a></li>
<li>Chat: <a href="https://gitter.im/JuliaSmoothOptimizers/JuliaSmoothOptimizers" rel="nofollow"><img src="https://camo.githubusercontent.com/5f38140ce09ee9f58a759dd39f0dcd8f03b88cb0/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f4a756c6961536d6f6f74684f7074696d697a6572732f4a756c6961536d6f6f74684f7074696d697a6572732e737667" alt="Gitter" data-canonical-src="https://img.shields.io/gitter/room/JuliaSmoothOptimizers/JuliaSmoothOptimizers.svg" style="max-width:100%;"></a></li>
</ul>
<h3><a id="user-content-development-version" class="anchor" aria-hidden="true" href="#development-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Development version</h3>
<ul>
<li>Documentation: <a href="https://JuliaSmoothOptimizers.github.io/CUTEst.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="Documentation" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></li>
<li>Tests:
<a href="https://travis-ci.org/JuliaSmoothOptimizers/CUTEst.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/2f9fcfdf31696b4684d37b12c421cd432045bb78/68747470733a2f2f7472617669732d63692e6f72672f4a756c6961536d6f6f74684f7074696d697a6572732f4355544573742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/JuliaSmoothOptimizers/CUTEst.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/JuliaSmoothOptimizers/CUTEst.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/efa8b1c7e562979cdc75e7c72d2604eec0318ba0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f4a756c6961536d6f6f74684f7074696d697a6572732f4355544573742e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/JuliaSmoothOptimizers/CUTEst.jl/badge.svg?branch=master" style="max-width:100%;"></a></li>
</ul>
<h2><a id="user-content-installing" class="anchor" aria-hidden="true" href="#installing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installing</h2>
<p>This package will install CUTEst binaries for your platform automatically.
The gfortran compiler is still required to compile decoded SIF problems.
No other Fortran compiler is supported.</p>
<p>The following command installs the CUTEst binaries and Julia interface:</p>
<div class="highlight highlight-source-julia"><pre>pkg<span class="pl-k">&gt;</span> add CUTEst</pre></div>
<p>If you already have a collection of SIF problems that you wish to use, you can simply set the <code>MASTSIF</code> environment variable to point to their location.
If not, the command</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">fetch_sif_problems</span>()</pre></div>
<p>will download the most recent version of the standard SIF collection and set <code>MASTSIF</code> appropriately.
Subsequent calls to the same function will pull any updates to the SIF problems.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>After installing, you can create instances of
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels</a> models, with
the name <code>CUTEstModel</code>:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> CUTEst

nlp <span class="pl-k">=</span> <span class="pl-c1">CUTEstModel</span>(<span class="pl-s"><span class="pl-pds">"</span>BYRDSPHR<span class="pl-pds">"</span></span>);
<span class="pl-c1">print</span>(nlp);</pre></div>
<p>This model accepts the same functions as the other NLPModels, for instance</p>
<div class="highlight highlight-source-julia"><pre>fx <span class="pl-k">=</span> <span class="pl-c1">obj</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)
gx <span class="pl-k">=</span> <span class="pl-c1">grad</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)
Hx <span class="pl-k">=</span> <span class="pl-c1">hess</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)</pre></div>
<h3><a id="user-content-run-multiple-models-in-parallel" class="anchor" aria-hidden="true" href="#run-multiple-models-in-parallel"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Run multiple models in parallel</h3>
<p>First, decode each of the problems in serial.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">function</span> <span class="pl-en">decodemodel</span>(name)
    <span class="pl-c1">finalize</span>(<span class="pl-c1">CUTEstModel</span>(name))
<span class="pl-k">end</span>

probs <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>AKIVA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ALLINITU<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARGLINA<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARGLINB<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARGLINC<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>ARGTRIGLS<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>ARWHEAD<span class="pl-pds">"</span></span>]
<span class="pl-c1">broadcast</span>(decodemodel, probs)</pre></div>
<p>Then, call functions handling models in parallel. It is important to pass <code>decode=false</code> to <code>CUTEstModel</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">addprocs</span>(<span class="pl-c1">2</span>)
<span class="pl-c1">@everywhere</span> <span class="pl-k">using</span> CUTEst
<span class="pl-c1">@everywhere</span> <span class="pl-k">function</span> <span class="pl-en">evalmodel</span>(name)
   nlp <span class="pl-k">=</span> <span class="pl-c1">CUTEstModel</span>(name; decode<span class="pl-k">=</span><span class="pl-c1">false</span>)
   retval <span class="pl-k">=</span> <span class="pl-c1">obj</span>(nlp, nlp<span class="pl-k">.</span>meta<span class="pl-k">.</span>x0)
   <span class="pl-c1">finalize</span>(nlp)
   retval
<span class="pl-k">end</span>

fvals <span class="pl-k">=</span> <span class="pl-c1">pmap</span>(evalmodel, probs)</pre></div>
<h2><a id="user-content-related-packages" class="anchor" aria-hidden="true" href="#related-packages"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Related Packages</h2>
<ul>
<li><a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a> provides an
AbstractModel from which CUTEst.jl derives, and other models deriving from it,
such as MathProgNLPModel, which uses
<a href="https://github.com/JuliaOpt/MathProgBase.jl">MathProgBase.jl</a>,
SimpleNLPModel, for user created functions, ADNLPModel with automatic
differentiation, and SlackModel, which creates an
equality constrained model with bounds on the variables from a given
AbstractModel.</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/AmplNLReader.jl">AmplNLReader.jl</a>
provides an interface to <a href="http://www.ampl.com" rel="nofollow">AMPL</a> models based on
<a href="https://github.com/JuliaSmoothOptimizers/NLPModels.jl">NLPModels.jl</a>.</li>
<li><a href="https://github.com/JuliaSmoothOptimizers/OptimizationProblems.jl">OptimizationProblems.jl</a>
provides a collection of optimization problems in
<a href="https://github.com/JuliaOpt/JuMP.jl">JuMP.jl</a> syntax.</li>
</ul>
<p><a href="http://www.gnu.org/licenses/lgpl.html" title="LGPLv3" rel="nofollow"><img src="https://camo.githubusercontent.com/166e728afb14dbf4308f223ece7c6ec0d4e51773/687474703a2f2f7777772e676e752e6f72672f67726170686963732f6c67706c76332d38387833312e706e67" alt="GPLv3" data-canonical-src="http://www.gnu.org/graphics/lgplv3-88x31.png" style="max-width:100%;"></a></p>
</article></div>