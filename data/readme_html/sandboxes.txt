<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-sandboxes" class="anchor" aria-hidden="true" href="#sandboxes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sandboxes</h1>
<p><a href="https://cmcaine.github.io/Sandboxes.jl/dev/" rel="nofollow">Docs</a></p>
<p>A simple sandboxing mechanism for evaluating Julia code in a restricted environment.
You might want to use this if:</p>
<ul>
<li>You want to evaluate untrusted code and restrict what it can do</li>
<li>You want to define a simpler version of Julia for teaching something or as a DSL</li>
</ul>
<h2><a id="user-content-method" class="anchor" aria-hidden="true" href="#method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Method</h2>
<ol>
<li>Make a bare module, M</li>
<li>Eval the desired interface into M</li>
<li>Check an expr E to eval in M
<ul>
<li>White or blacklist certain Expr heads and types</li>
<li>Rewrite symbols that are equal to symbols in Core and <code>:ccall</code> (so the only available symbols are those that have been eval'd in)
<ul>
<li>This step unnecessary if Julia later supports more bare baremodules (<a href="https://discourse.julialang.org/t/even-more-bare-baremodule/56156/" rel="nofollow">https://discourse.julialang.org/t/even-more-bare-baremodule/56156/</a>)</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>A valid alternative method might be to use a compiler pass like Cassette, but I don't think we need to.</p>
<h2><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>API</h2>
<p><strong>This isn't implemented yet, I'm still deciding.</strong> For now, check the tests to see how to use it.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="@sandboxed module M
    # Your safe interfaces here
end

sandboxed_eval(M, expr)
sandboxed_include(M, file)

# Evaluate code without sandboxing, if you need to
@eval M unsandboxed_expr
"><pre><span class="pl-c1">@sandboxed</span> <span class="pl-k">module</span> M
    <span class="pl-c"><span class="pl-c">#</span> Your safe interfaces here</span>
<span class="pl-k">end</span>

<span class="pl-c1">sandboxed_eval</span>(M, expr)
<span class="pl-c1">sandboxed_include</span>(M, file)

<span class="pl-c"><span class="pl-c">#</span> Evaluate code without sandboxing, if you need to</span>
<span class="pl-c1">@eval</span> M unsandboxed_expr</pre></div>
<p>It might be appropriate for us to warn if the user imports any code with anything other than <code>using X: something_safe</code>.
Users will need to be cautious of <code>eval</code> available on most module objects, for example.</p>
<p>If you need many sandboxes:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="sandbox() = eval(:(@sandboxed module M ... end))
"><pre><span class="pl-en">sandbox</span>() <span class="pl-k">=</span> <span class="pl-c1">eval</span>(:(<span class="pl-c1">@sandboxed</span> <span class="pl-k">module</span> M <span class="pl-k">...</span> <span class="pl-k">end</span>))</pre></div>
<p>Probably want to provide a string interface for REPLs and an easy interface for disabling bits of Julia, seeing as I've done that work and it might be useful for others.
Or maybe I should just provide an example and suggest they copy it to start them off, idk.</p>
<h2><a id="user-content-safe-part-of-base" class="anchor" aria-hidden="true" href="#safe-part-of-base"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Safe part of Base</h2>
<p>It would be useful if users could easily use the safe parts of <code>Base</code>.
<code>map</code>, <code>filter</code>, arithmetic, etc, are probably safe :)</p>
<h2><a id="user-content-outside-of-threat-model" class="anchor" aria-hidden="true" href="#outside-of-threat-model"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Outside of threat model</h2>
<ul>
<li>eval'ing extra properties onto <code>Core</code> after a sandbox has started</li>
</ul>
</article></div>