<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="docs/src/asset/logo3.png"><img src="docs/src/asset/logo3.png" width="500px/" style="max-width:100%;"></a></p>
<p>NiLang.jl (逆lang), is a reversible domain-specific language (DSL) that allow a program to go back to the past.</p>
<ul>
<li>Requires Julia version &gt;= 1.3,</li>
</ul>
<p>NiLang features:</p>
<ul>
<li>any program written in NiLang is differentiable,</li>
<li>a reversible language with abstraction and arrays,</li>
<li>complex values</li>
<li>reversible logarithmic number system</li>
</ul>
<p><a href="https://giggleliu.github.io/NiLang.jl/stable/" rel="nofollow"><img src="https://github.com/GiggleLiu/NiLang.jl/workflows/Documentation/badge.svg" alt="Documentation" style="max-width:100%;"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/GiggleLiu/NiLang.jl/workflows/CI/badge.svg"><img src="https://github.com/GiggleLiu/NiLang.jl/workflows/CI/badge.svg" alt="CI" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/GiggleLiu/NiLang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/8052e2d1732958a7ca6020a4a8261e558f8e9aa875fc3c89c85228e1873db8d4/68747470733a2f2f636f6465636f762e696f2f67682f476967676c654c69752f4e694c616e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d74683836443455535358" alt="codecov" data-canonical-src="https://codecov.io/gh/GiggleLiu/NiLang.jl/branch/master/graph/badge.svg?token=th86D4USSX" style="max-width:100%;"></a></p>
<p>A collection of Pluto notebooks</p>
<ul>
<li><a href="https://giggleliu.github.io/NiLang.jl/dev/notebooks/basic.html" rel="nofollow">tutorial</a></li>
<li><a href="https://giggleliu.github.io/NiLang.jl/dev/notebooks/documentation.html" rel="nofollow">documentation</a></li>
<li><a href="https://giggleliu.github.io/NiLang.jl/dev/notebooks/margolus.html" rel="nofollow">Billiard ball model cellular automata</a></li>
</ul>
<blockquote>
<p>The strangeness of reversible computing is mainly due to
our lack of experience with it.—Henry Baker, 1992</p>
</blockquote>
<h2><a id="user-content-to-start" class="anchor" aria-hidden="true" href="#to-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Start</h2>
<div class="snippet-clipboard-content position-relative" data-snippet-clipboard-copy-content="pkg&gt; add NiLang
"><pre><code>pkg&gt; add NiLang
</code></pre></div>
<h2><a id="user-content-an-example-compute-the-norm-of-a-vector" class="anchor" aria-hidden="true" href="#an-example-compute-the-norm-of-a-vector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>An example: Compute the norm of a vector</h2>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="julia&gt; using NiLang

julia&gt; @i function f(res, y, x)
           for i=1:length(x)
               y += x[i] ^ 2
           end
           res += sqrt(y)
       end

julia&gt; res_out, y_out, x_out = f(0.0, 0.0, [1, 2, 3.0])
(3.7416573867739413, 14.0, [1.0, 2.0, 3.0])

julia&gt; (~f)(res_out, y_out, x_out)  # automatically generated inverse program.
(0.0, 0.0, [1.0, 2.0, 3.0])
        
julia&gt; ∂res, ∂y, ∂x = NiLang.AD.gradient(Val(1), f, (0.0, 0.0, [1, 2, 3.0])) 
    # automatic differentiation, `Val(1)` means the first argument of `f` is the loss.
(1.0, 0.1336306209562122, [0.2672612419124244, 0.5345224838248488, 0.8017837257372732])
"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> NiLang

julia<span class="pl-k">&gt;</span> <span class="pl-c1">@i</span> <span class="pl-k">function</span> <span class="pl-en">f</span>(res, y, x)
           <span class="pl-k">for</span> i<span class="pl-k">=</span><span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">length</span>(x)
               y <span class="pl-k">+=</span> x[i] <span class="pl-k">^</span> <span class="pl-c1">2</span>
           <span class="pl-k">end</span>
           res <span class="pl-k">+=</span> <span class="pl-c1">sqrt</span>(y)
       <span class="pl-k">end</span>

julia<span class="pl-k">&gt;</span> res_out, y_out, x_out <span class="pl-k">=</span> <span class="pl-c1">f</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>])
(<span class="pl-c1">3.7416573867739413</span>, <span class="pl-c1">14.0</span>, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])

julia<span class="pl-k">&gt;</span> (<span class="pl-k">~</span>f)(res_out, y_out, x_out)  <span class="pl-c"><span class="pl-c">#</span> automatically generated inverse program.</span>
(<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, [<span class="pl-c1">1.0</span>, <span class="pl-c1">2.0</span>, <span class="pl-c1">3.0</span>])
        
julia<span class="pl-k">&gt;</span> ∂res, ∂y, ∂x <span class="pl-k">=</span> NiLang<span class="pl-k">.</span>AD<span class="pl-k">.</span><span class="pl-c1">gradient</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">1</span>), f, (<span class="pl-c1">0.0</span>, <span class="pl-c1">0.0</span>, [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3.0</span>])) 
    <span class="pl-c"><span class="pl-c">#</span> automatic differentiation, `Val(1)` means the first argument of `f` is the loss.</span>
(<span class="pl-c1">1.0</span>, <span class="pl-c1">0.1336306209562122</span>, [<span class="pl-c1">0.2672612419124244</span>, <span class="pl-c1">0.5345224838248488</span>, <span class="pl-c1">0.8017837257372732</span>])</pre></div>
<p>The performance of reversible programming automatic differentiation is much better than most traditional frameworks. Here is why, and how it works,</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/asset/adprog.png"><img src="docs/src/asset/adprog.png" alt="how it works" style="max-width:100%;"></a></p>
<h2><a id="user-content-check-our-paper" class="anchor" aria-hidden="true" href="#check-our-paper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Check our <a href="https://arxiv.org/abs/2003.04617" rel="nofollow">paper</a></h2>
<div class="highlight highlight-text-bibtex position-relative" data-snippet-clipboard-copy-content="@misc{Liu2020,
    title={Differentiate Everything with a Reversible Programming Language},
    author={Jin-Guo Liu and Taine Zhao},
    year={2020},
    eprint={2003.04617},
    archivePrefix={arXiv},
    primaryClass={cs.PL}
}
"><pre><span class="pl-k">@misc</span>{<span class="pl-en">Liu2020</span>,
    <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>Differentiate Everything with a Reversible Programming Language<span class="pl-pds">}</span></span>,
    <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Jin-Guo Liu and Taine Zhao<span class="pl-pds">}</span></span>,
    <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2020<span class="pl-pds">}</span></span>,
    <span class="pl-s">eprint</span>=<span class="pl-s"><span class="pl-pds">{</span>2003.04617<span class="pl-pds">}</span></span>,
    <span class="pl-s">archivePrefix</span>=<span class="pl-s"><span class="pl-pds">{</span>arXiv<span class="pl-pds">}</span></span>,
    <span class="pl-s">primaryClass</span>=<span class="pl-s"><span class="pl-pds">{</span>cs.PL<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>