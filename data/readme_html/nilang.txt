<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-nilang" class="anchor" aria-hidden="true" href="#nilang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>NiLang</h1>
<ul>
<li>Requires Julia version &gt;= 1.3.</li>
<li>If test breaks, try using the master branch of <code>NiLangCore</code>.</li>
</ul>
<p>NiLang.jl (逆lang), is a reversible domain sepecific language (DSL) in Julia.
It features:</p>
<ul>
<li>an instruction level (i.e. only backward rules of <code>+</code>, <code>-</code>, <code>*</code> and <code>/</code> are required) automatic differentiation engine,</li>
<li>a reversible language with abstraction and arrays,</li>
</ul>
<p><a href="https://GiggleLiu.github.io/NiLang.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://GiggleLiu.github.io/NiLang.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/GiggleLiu/NiLang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6066c2491499e77780807c6d6afaf48d7632ba5e/68747470733a2f2f7472617669732d63692e636f6d2f476967676c654c69752f4e694c616e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/GiggleLiu/NiLang.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/GiggleLiu/NiLang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc3a62e0ecce1fc801ba48ec40ff1fb7bcb4aa2f/68747470733a2f2f636f6465636f762e696f2f67682f476967676c654c69752f4e694c616e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/GiggleLiu/NiLang.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<blockquote>
<p>The strangeness of reversible computing is mainly due to
our lack of experience with it.—Henry Baker, 1992</p>
</blockquote>
<h2><a id="user-content-to-start" class="anchor" aria-hidden="true" href="#to-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>To Start</h2>
<pre><code>pkg&gt; add NiLangCore
pkg&gt; add NiLang
</code></pre>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h2>
<ol>
<li>Compute exp function from Taylor expansion</li>
</ol>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NiLang, NiLang<span class="pl-k">.</span>AD

<span class="pl-c1">@i</span> <span class="pl-k">function</span> <span class="pl-en">iexp</span>(out!, x<span class="pl-k">::</span><span class="pl-c1">T</span>; atol<span class="pl-k">::</span><span class="pl-c1">Real</span><span class="pl-k">=</span><span class="pl-c1">1e-14</span>) <span class="pl-k">where</span> T
    anc1 ← <span class="pl-c1">zero</span>(T)
    anc2 ← <span class="pl-c1">zero</span>(T)
    anc3 ← <span class="pl-c1">zero</span>(T)
    iplus ← <span class="pl-c1">0</span>
    expout ← <span class="pl-c1">zero</span>(T)

    out! <span class="pl-k">+=</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>)
    <span class="pl-c1">@routine</span> <span class="pl-k">begin</span>
        anc1 <span class="pl-k">+=</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>)
        <span class="pl-k">while</span> (<span class="pl-c1">value</span>(anc1) <span class="pl-k">&gt;</span> atol, iplus <span class="pl-k">!=</span> <span class="pl-c1">0</span>)
            iplus <span class="pl-k">+=</span> <span class="pl-c1">identity</span>(<span class="pl-c1">1</span>)
            anc2 <span class="pl-k">+=</span> anc1 <span class="pl-k">*</span> x
            anc3 <span class="pl-k">+=</span> anc2 <span class="pl-k">/</span> iplus
            expout <span class="pl-k">+=</span> <span class="pl-c1">identity</span>(anc3)
            <span class="pl-c"><span class="pl-c">#</span> speudo inverse</span>
            anc1 <span class="pl-k">-=</span> anc2 <span class="pl-k">/</span> x
            anc2 <span class="pl-k">-=</span> anc3 <span class="pl-k">*</span> iplus
            <span class="pl-c1">SWAP</span>(anc1, anc3)
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>

    out! <span class="pl-k">+=</span> <span class="pl-c1">identity</span>(expout)

    <span class="pl-k">~</span><span class="pl-c1">@routine</span>
<span class="pl-k">end</span></pre></div>
<p>To understand the grammar, see the <a href="https://github.com/GiggleLiu/NiLangCore.jl">README</a> of NiLangCore.</p>
<ol start="2">
<li>The autodiff engine</li>
</ol>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> y!, x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>
(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>)

<span class="pl-c"><span class="pl-c">#</span> first order gradients</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@instr</span> iexp<span class="pl-k">'</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">1</span>), y!, x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grad</span>(x)
<span class="pl-c1">4.9530324244260555</span>

julia<span class="pl-k">&gt;</span> y!, x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>
(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>)

<span class="pl-c"><span class="pl-c">#</span> second order gradient by differentiate first order gradients</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ForwardDiff<span class="pl-k">:</span> Dual

julia<span class="pl-k">&gt;</span> _, hxy, hxx <span class="pl-k">=</span> iexp<span class="pl-k">'</span>(<span class="pl-c1">Val</span>(<span class="pl-c1">1</span>), 
        <span class="pl-c1">Dual</span>(y!, <span class="pl-c1">zero</span>(y!)), <span class="pl-c1">Dual</span>(x, <span class="pl-c1">one</span>(x)));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grad</span>(hxx)<span class="pl-k">.</span>partials[<span class="pl-c1">1</span>]
<span class="pl-c1">4.953032423978584</span></pre></div>
<p>See <a href="examples/">more examples</a></p>
<h2><a id="user-content-cite-our-paper" class="anchor" aria-hidden="true" href="#cite-our-paper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cite our <a href="https://arxiv.org/abs/2003.04617" rel="nofollow">paper</a>!</h2>
<div class="highlight highlight-text-bibtex"><pre><span class="pl-k">@misc</span>{<span class="pl-en">Liu2020</span>,
    <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>Differentiate Everything with a Reversible Programming Language<span class="pl-pds">}</span></span>,
    <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Jin-Guo Liu and Taine Zhao<span class="pl-pds">}</span></span>,
    <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2020<span class="pl-pds">}</span></span>,
    <span class="pl-s">eprint</span>=<span class="pl-s"><span class="pl-pds">{</span>2003.04617<span class="pl-pds">}</span></span>,
    <span class="pl-s">archivePrefix</span>=<span class="pl-s"><span class="pl-pds">{</span>arXiv<span class="pl-pds">}</span></span>,
    <span class="pl-s">primaryClass</span>=<span class="pl-s"><span class="pl-pds">{</span>cs.PL<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>