<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><p><a target="_blank" rel="noopener noreferrer" href="docs/src/asset/logo3.png"><img src="docs/src/asset/logo3.png" width="500px/" style="max-width:100%;"></a></p>
<p>NiLang.jl (逆lang), is a reversible domain-specific language (DSL) that allow a program to go back to the past.</p>
<ul>
<li>Requires Julia version &gt;= 1.3.</li>
<li>If test breaks, try using the master branch of <code>NiLangCore</code>.</li>
<li><strong>The <code>'</code> notation has been removed recently!</strong></li>
</ul>
<p>NiLang features:</p>
<ul>
<li>any program written in NiLang is differentiable,</li>
<li>a reversible language with abstraction and arrays,</li>
<li>complex values</li>
</ul>
<p><a href="https://GiggleLiu.github.io/NiLang.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a>
<a href="https://GiggleLiu.github.io/NiLang.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/3e353c26ddfe819150acbc732248f4f2a37f5175/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/GiggleLiu/NiLang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/6066c2491499e77780807c6d6afaf48d7632ba5e/68747470733a2f2f7472617669732d63692e636f6d2f476967676c654c69752f4e694c616e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/GiggleLiu/NiLang.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/GiggleLiu/NiLang.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/bc3a62e0ecce1fc801ba48ec40ff1fb7bcb4aa2f/68747470733a2f2f636f6465636f762e696f2f67682f476967676c654c69752f4e694c616e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/GiggleLiu/NiLang.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<blockquote>
<p>The strangeness of reversible computing is mainly due to
our lack of experience with it.—Henry Baker, 1992</p>
</blockquote>
<p>Please check <a href="https://giggleliu.github.io/NiLang.jl/dev/why/" rel="nofollow">why reversible computing is the future of computing</a>.</p>
<h2><a id="user-content-to-start" class="anchor" aria-hidden="true" href="#to-start"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>To Start</h2>
<pre><code>pkg&gt; add NiLangCore
pkg&gt; add NiLang
</code></pre>
<h2><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<ol>
<li>Compute sparse matrix multiplication</li>
</ol>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> NiLang
<span class="pl-k">using</span> SparseArrays<span class="pl-k">:</span> SparseMatrixCSC, AbstractSparseMatrix, nonzeros, rowvals, getcolptr

<span class="pl-c1">@i</span> <span class="pl-k">function</span> <span class="pl-en">mul!</span>(C<span class="pl-k">::</span><span class="pl-c1">StridedVecOrMat</span>, A<span class="pl-k">::</span><span class="pl-c1">AbstractSparseMatrix</span>, B<span class="pl-k">::</span><span class="pl-c1">StridedVector{T}</span>, α<span class="pl-k">::</span><span class="pl-c1">Number</span>, β<span class="pl-k">::</span><span class="pl-c1">Number</span>) <span class="pl-k">where</span> T
    <span class="pl-c1">@safe</span> <span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">size</span>(B, <span class="pl-c1">1</span>) <span class="pl-k">||</span> <span class="pl-c1">throw</span>(<span class="pl-c1">DimensionMismatch</span>())
    <span class="pl-c1">@safe</span> <span class="pl-c1">size</span>(A, <span class="pl-c1">1</span>) <span class="pl-k">==</span> <span class="pl-c1">size</span>(C, <span class="pl-c1">1</span>) <span class="pl-k">||</span> <span class="pl-c1">throw</span>(<span class="pl-c1">DimensionMismatch</span>())
    <span class="pl-c1">@safe</span> <span class="pl-c1">size</span>(B, <span class="pl-c1">2</span>) <span class="pl-k">==</span> <span class="pl-c1">size</span>(C, <span class="pl-c1">2</span>) <span class="pl-k">||</span> <span class="pl-c1">throw</span>(<span class="pl-c1">DimensionMismatch</span>())
    nzv ← <span class="pl-c1">nonzeros</span>(A)
    rv ← <span class="pl-c1">rowvals</span>(A)
    <span class="pl-k">if</span> (β <span class="pl-k">!=</span> <span class="pl-c1">1</span>, <span class="pl-k">~</span>)
        <span class="pl-c1">@safe</span> <span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">"</span>only β = 1 is supported, got β = <span class="pl-v">$(β)</span>.<span class="pl-pds">"</span></span>)
    <span class="pl-k">end</span>
    <span class="pl-c"><span class="pl-c">#</span> Here, we close the reversibility check inside the loop to increase performance</span>
    <span class="pl-c1">@invcheckoff</span> <span class="pl-k">for</span> k <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(C, <span class="pl-c1">2</span>)
        <span class="pl-c1">@inbounds</span> <span class="pl-k">for</span> col <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(A, <span class="pl-c1">2</span>)
            αxj ← <span class="pl-c1">zero</span>(T)
            αxj <span class="pl-k">+=</span> B[col,k] <span class="pl-k">*</span> α
            <span class="pl-k">for</span> j <span class="pl-k">=</span> <span class="pl-c1">getcolptr</span>(A)[col]<span class="pl-k">:</span>(<span class="pl-c1">getcolptr</span>(A)[col <span class="pl-k">+</span> <span class="pl-c1">1</span>] <span class="pl-k">-</span> <span class="pl-c1">1</span>)
                C[rv[j], k] <span class="pl-k">+=</span> nzv[j]<span class="pl-k">*</span>αxj
            <span class="pl-k">end</span>
            αxj <span class="pl-k">-=</span> B[col,k] <span class="pl-k">*</span> α
        <span class="pl-k">end</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<p>To back propagate the gradient</p>
<pre><code>julia&gt; using SparseArrays: sprand

julia&gt; import SparseArrays

julia&gt; using BenchmarkTools

julia&gt; n = 1000;

julia&gt; sp1 = sprand(ComplexF64, n, n,0.1);

julia&gt; v = randn(ComplexF64, n);

julia&gt; out = zero(v);

julia&gt; @benchmark SparseArrays.mul!($(copy(out)), $sp1, $v, 0.5+0im, 1)
BenchmarkTools.Trial: 
  memory estimate:  0 bytes
  allocs estimate:  0
  --------------
  minimum time:     226.005 μs (0.00% GC)
  median time:      235.590 μs (0.00% GC)
  mean time:        244.868 μs (0.00% GC)
  maximum time:     2.750 ms (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     1

julia&gt; @benchmark mul!($(copy(out)), $(sp1), $v, 0.5+0im, 1)
BenchmarkTools.Trial: 
  memory estimate:  64 bytes
  allocs estimate:  1
  --------------
  minimum time:     194.011 μs (0.00% GC)
  median time:      207.218 μs (0.00% GC)
  mean time:        257.364 μs (0.00% GC)
  maximum time:     2.324 ms (0.00% GC)
  --------------
  samples:          10000
  evals/sample:     1

julia&gt; using NiLang.AD

julia&gt; @benchmark (~mul!)($(GVar(copy(out))), $(GVar(sp1)), $(GVar(v)), $(GVar(0.5)), 1)
BenchmarkTools.Trial: 
  memory estimate:  64 bytes
  allocs estimate:  1
  --------------
  minimum time:     719.223 μs (0.00% GC)
  median time:      767.744 μs (0.00% GC)
  mean time:        790.198 μs (0.00% GC)
  maximum time:     7.231 ms (0.00% GC)
  --------------
  samples:          6291
  evals/sample:     1
</code></pre>
<p>To understand the grammar, see the <a href="https://github.com/GiggleLiu/NiLangCore.jl">README</a> of NiLangCore.</p>
<ol start="2">
<li>The autodiff engine</li>
</ol>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> y!, x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>
(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>)

<span class="pl-c"><span class="pl-c">#</span> first order gradients</span>
julia<span class="pl-k">&gt;</span> <span class="pl-c1">@instr</span> <span class="pl-c1">Grad</span>(iexp)(<span class="pl-c1">Val</span>(<span class="pl-c1">1</span>), y!, x)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grad</span>(x)
<span class="pl-c1">4.9530324244260555</span>

julia<span class="pl-k">&gt;</span> y!, x <span class="pl-k">=</span> <span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>
(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.6</span>)

<span class="pl-c"><span class="pl-c">#</span> second order gradient by differentiate first order gradients</span>
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> ForwardDiff<span class="pl-k">:</span> Dual

julia<span class="pl-k">&gt;</span> _, hxy, hxx <span class="pl-k">=</span> <span class="pl-c1">Grad</span>(iexp)(<span class="pl-c1">Val</span>(<span class="pl-c1">1</span>), 
        <span class="pl-c1">Dual</span>(y!, <span class="pl-c1">zero</span>(y!)), <span class="pl-c1">Dual</span>(x, <span class="pl-c1">one</span>(x)));

julia<span class="pl-k">&gt;</span> <span class="pl-c1">grad</span>(hxx)<span class="pl-k">.</span>partials[<span class="pl-c1">1</span>]
<span class="pl-c1">4.953032423978584</span></pre></div>
<p>See <a href="examples/">more examples</a></p>
<h2><a id="user-content-cite-our-paper" class="anchor" aria-hidden="true" href="#cite-our-paper"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cite our <a href="https://arxiv.org/abs/2003.04617" rel="nofollow">paper</a>!</h2>
<div class="highlight highlight-text-bibtex"><pre><span class="pl-k">@misc</span>{<span class="pl-en">Liu2020</span>,
    <span class="pl-s">title</span>=<span class="pl-s"><span class="pl-pds">{</span>Differentiate Everything with a Reversible Programming Language<span class="pl-pds">}</span></span>,
    <span class="pl-s">author</span>=<span class="pl-s"><span class="pl-pds">{</span>Jin-Guo Liu and Taine Zhao<span class="pl-pds">}</span></span>,
    <span class="pl-s">year</span>=<span class="pl-s"><span class="pl-pds">{</span>2020<span class="pl-pds">}</span></span>,
    <span class="pl-s">eprint</span>=<span class="pl-s"><span class="pl-pds">{</span>2003.04617<span class="pl-pds">}</span></span>,
    <span class="pl-s">archivePrefix</span>=<span class="pl-s"><span class="pl-pds">{</span>arXiv<span class="pl-pds">}</span></span>,
    <span class="pl-s">primaryClass</span>=<span class="pl-s"><span class="pl-pds">{</span>cs.PL<span class="pl-pds">}</span></span>
}</pre></div>
</article></div>