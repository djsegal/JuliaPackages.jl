<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-simpledifferentialoperators" class="anchor" aria-hidden="true" href="#simpledifferentialoperators"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SimpleDifferentialOperators</h1>
<p><a href="https://travis-ci.com/QuantEcon/SimpleDifferentialOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/d3bfa4a4f52af5fb4a181d0aee19c7a7d5139816/68747470733a2f2f7472617669732d63692e636f6d2f5175616e7445636f6e2f53696d706c65446966666572656e7469616c4f70657261746f72732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/QuantEcon/SimpleDifferentialOperators.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/QuantEcon/SimpleDifferentialOperators.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ff2ea6285a79e894b1eeb2785eb3ff7257c4cf0e/68747470733a2f2f636f6465636f762e696f2f67682f5175616e7445636f6e2f53696d706c65446966666572656e7469616c4f70657261746f72732e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/QuantEcon/SimpleDifferentialOperators.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a></p>
<p><a href="https://QuantEcon.github.io/SimpleDifferentialOperators.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/f7b92a177c912c1cc007fc9b40f17ff3ee3bb414/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>This is a package to return discretized differential operators subject to various boundary conditions.  It is intended to be a "simple" stopgap as more advanced implementations (e.g. <a href="https://github.com/JuliaDiffEq/DiffEqOperators.jl/">DiffEqOperators.jl</a> ) mature.  This package is also not intended to provide a "higher-level" interface for constructing the equations.  See <a href="https://github.com/matthieugomez/EconPDEs.jl/">EconPDEs.jl</a> for a package intended to make translation of the sorts of equations used in economics more direct.</p>
<h3><a id="user-content-example" class="anchor" aria-hidden="true" href="#example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h3>
<h4><a id="user-content-bellman-equation" class="anchor" aria-hidden="true" href="#bellman-equation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bellman equation</h4>
<p>Consider constructing the corresponding infinitesimal generator for the following stochastic differential equation:</p>

<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=%24dx_t%20%3D%20%5Cmu%20dt%20%2B%20%5Csigma%20dWt%24"><img src="https://render.githubusercontent.com/render/math?math=%24dx_t%20%3D%20%5Cmu%20dt%20%2B%20%5Csigma%20dWt%24" alt="SDE" style="max-width:100%;"></a></p>
<p>with some constant <code>μ</code> and <code>σ &gt;= 0</code>, and <code>W_t</code> Brownian Motion subject, with reflecting barriers at <code>x=0</code> and <code>x=1</code>, i.e., <code>v'(0) = v'(1) = 0</code>.</p>
<p>If the payoff is in state <code>x</code> is <code>f(x)</code> and <code>ρ</code> is the discount rate, then the bellman equation for the expected present discounted value of payoffs fulfills</p>

<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=%24%5Crho%20v(x)%20%3D%20f(x)%20%2B%20%5Cpartial_x%20v(x)%20%2B%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%5Cpartial_%7Bxx%7Dv(x)%24"><img src="https://render.githubusercontent.com/render/math?math=%24%5Crho%20v(x)%20%3D%20f(x)%20%2B%20%5Cpartial_x%20v(x)%20%2B%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%5Cpartial_%7Bxx%7Dv(x)%24" alt="Bellman" style="max-width:100%;"></a></p>

<p>subject to <a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=%24%5Cpartial_x%20v(0)%20%3D%200%2C%5C%2C%20%5Cpartial_x%20v(1)%20%3D%200%20%24"><img src="https://render.githubusercontent.com/render/math?math=%24%5Cpartial_x%20v(0)%20%3D%200%2C%5C%2C%20%5Cpartial_x%20v(1)%20%3D%200%20%24" alt="BC" style="max-width:100%;"></a></p>
<p>Written in operator form, define the differential operators</p>

<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=%5Cmathcal%7BL%7D%20%5Cequiv%20%5Crho%20-%20%5Cmu%20%5Cpartial_x%20-%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%5Cpartial_%7Bxx%7D"><img src="https://render.githubusercontent.com/render/math?math=%5Cmathcal%7BL%7D%20%5Cequiv%20%5Crho%20-%20%5Cmu%20%5Cpartial_x%20-%20%5Cfrac%7B%5Csigma%5E2%7D%7B2%7D%5Cpartial_%7Bxx%7D" alt="Operator" style="max-width:100%;"></a></p>
<p>then the Bellman equation can be written as</p>

<p><a target="_blank" rel="noopener noreferrer" href="https://render.githubusercontent.com/render/math?math=%24%5Cmathcal%7BL%7D%20v(x)%20%3D%20f(x)%24"><img src="https://render.githubusercontent.com/render/math?math=%24%5Cmathcal%7BL%7D%20v(x)%20%3D%20f(x)%24" alt="Bellman with Operator" style="max-width:100%;"></a></p>
<p>This package provides components to discretize differential operators.  To implement directly,</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> SimpleDifferentialOperators, LinearAlgebra
<span class="pl-en">f</span>(x) <span class="pl-k">=</span> x<span class="pl-k">^</span><span class="pl-c1">2</span>
μ <span class="pl-k">=</span> <span class="pl-k">-</span><span class="pl-c1">0.1</span> <span class="pl-c"><span class="pl-c">#</span> constant negative drift</span>
σ <span class="pl-k">=</span> <span class="pl-c1">0.1</span>
ρ <span class="pl-k">=</span> <span class="pl-c1">0.05</span>
M <span class="pl-k">=</span> <span class="pl-c1">100</span> <span class="pl-c"><span class="pl-c">#</span> size of interior nodes</span>
x̄ <span class="pl-k">=</span> <span class="pl-c1">range</span>(<span class="pl-c1">0.0</span>, <span class="pl-c1">1.0</span>, length <span class="pl-k">=</span> (M<span class="pl-k">+</span><span class="pl-c1">2</span>)) <span class="pl-c"><span class="pl-c">#</span> extended grid</span>
x <span class="pl-k">=</span> <span class="pl-c1">interiornodes</span>(x̄) <span class="pl-c"><span class="pl-c">#</span> interior grid</span>

<span class="pl-c"><span class="pl-c">#</span> discretize L = ρ - μ D_x - σ^2 / 2 D_xx on the interior</span>
<span class="pl-c"><span class="pl-c">#</span> subject to reflecting barriers at 0 and 1</span>
bc <span class="pl-k">=</span> (<span class="pl-c1">Reflecting</span>(), <span class="pl-c1">Reflecting</span>())
L_x <span class="pl-k">=</span> μ<span class="pl-k">*</span><span class="pl-c1">L₁₋bc</span>(x̄, bc) <span class="pl-k">-</span> σ<span class="pl-k">^</span><span class="pl-c1">2</span> <span class="pl-k">/</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">L₂bc</span>(x̄, bc)
L <span class="pl-k">=</span> I <span class="pl-k">*</span> ρ <span class="pl-k">-</span> L_x
<span class="pl-c"><span class="pl-c">#</span># solve the value function on the interior</span>
v <span class="pl-k">=</span> L <span class="pl-k">\</span> <span class="pl-c1">f</span>.(x)</pre></div>
<p>To extrapolate the interior solution to the boundary, one can call <code>extrapolatetoboundary</code> as follows:</p>
<div class="highlight highlight-source-julia"><pre>v̄ <span class="pl-k">=</span> <span class="pl-c1">extrapolatetoboundary</span>(x̄, v, bc) </pre></div>
<h2><a id="user-content-documentation" class="anchor" aria-hidden="true" href="#documentation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation</h2>
<p>To install, run <code>] add SimpleDifferentialOperators</code> on Julia 1.1+.</p>
<p>For more usage information, see the docs badge above.</p>
<p>If you want to build the docs locally (say, for contributions), you can just cd to the <code>docs/</code> directory and run <code>julia --project=Project.toml make.jl</code> (make sure <code>Documenter.jl</code> is installed). This will create/populate the <code>docs/build</code> directory.</p>
<p>Detailed derivations and more applications can be found <a href="https://github.com/QuantEcon/SimpleDifferentialOperators.jl/releases/download/dev/discretized-differential-operator-derivation.pdf">here</a>.</p>
<h2><a id="user-content-troubleshooting" class="anchor" aria-hidden="true" href="#troubleshooting"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Troubleshooting</h2>
<ul>
<li>
<p>As a reminder, the package requires <strong>Julia 1.1 or later.</strong></p>
</li>
<li>
<p>If you discover a bug in the code or math, please file an issue in this repo with the label "bug."</p>
</li>
<li>
<p>The same holds for feature requests, with the appropriate label.</p>
</li>
</ul>
</article></div>