<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-doubleended" class="anchor" aria-hidden="true" href="#doubleended"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DoubleEnded</h1>
<p><strong>A Double ended mutable list for Julia</strong></p>
<p>This package provides a DoubleEnded mutable list.
It is provided to be used in conjunction with the singly linked immutable list,
provided in ImmutableList.jl.</p>
<p>This package contains the defintion
along with various utility methods to get the head and the tail in constant time.</p>
<h2><a id="user-content-mutablelist" class="anchor" aria-hidden="true" href="#mutablelist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>MutableList</h2>
<p><code>MutableList</code> is a single linked and double ended list.</p>
<ul>
<li>Usage:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="  lst1::List = nil
  dLst1::DoubleEnded.MutableList = DoubleEnded.fromList(lst1) #Creates an empty double ended list
  dLst2::DoubleEnded.MutableList = DoubleEnded.empty #Same as above
  #Creates a double ended list from the immutable list (1,2,3)
  dLst2::DoubleEnded.MutableList = DoubleEnded.fromList(ImmutableList.list(1,2,3))
"><pre>  lst1<span class="pl-k">::</span><span class="pl-c1">List</span> <span class="pl-k">=</span> nil
  dLst1<span class="pl-k">::</span><span class="pl-c1">DoubleEnded.MutableList</span> <span class="pl-k">=</span> DoubleEnded<span class="pl-k">.</span><span class="pl-c1">fromList</span>(lst1) <span class="pl-c"><span class="pl-c">#</span>Creates an empty double ended list</span>
  dLst2<span class="pl-k">::</span><span class="pl-c1">DoubleEnded.MutableList</span> <span class="pl-k">=</span> DoubleEnded<span class="pl-k">.</span>empty <span class="pl-c"><span class="pl-c">#</span>Same as above</span>
  <span class="pl-c"><span class="pl-c">#</span>Creates a double ended list from the immutable list (1,2,3)</span>
  dLst2<span class="pl-k">::</span><span class="pl-c1">DoubleEnded.MutableList</span> <span class="pl-k">=</span> DoubleEnded<span class="pl-k">.</span><span class="pl-c1">fromList</span>(ImmutableList<span class="pl-k">.</span><span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))</pre></div>
<ul>
<li>Utility functions:</li>
</ul>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="
&quot;&quot;&quot;
  Creates a new Mutable list with one element, first of type T.
&quot;&quot;&quot;
new

&quot;&quot;&quot;
  Converts an Immutable list, lst into an MutableList.
&quot;&quot;&quot;
fromList

&quot;&quot;&quot;
  Creates a new empty MutableList
&quot;&quot;&quot;
empty

&quot;&quot;&quot;
  Returns the length of the MutableList, delst
&quot;&quot;&quot;
length

&quot;&quot;&quot;
  Pops and returns the first element of the MutableList, delst.
&quot;&quot;&quot;
pop_front
&quot;&quot;&quot;
  Returns the current back cell of the MutableList, delst.
&quot;&quot;&quot;
currentBackCell

&quot;&quot;&quot;
  Prepends an element elt at the front of the MutableList delst.
&quot;&quot;&quot;
push_front

&quot;&quot;&quot;
  Prepends the immutable list lst at the front of the MutableList, delst.
&quot;&quot;&quot;
push_list_front

&quot;&quot;&quot;
  Pushes an element elt at the back of the mutable list delst.
&quot;&quot;&quot;
push_back

&quot;&quot;&quot;
  Appends the ImmutableList lst at the back of the MutableList delst.
&quot;&quot;&quot;
push_list_back

&quot;&quot;&quot;
  Returns an immutable List and clears the MutableList
&quot;&quot;&quot;
toListAndClear

&quot;&quot;&quot;
  Returns an Immutable list without changing the MutableList.
&quot;&quot;&quot;
toListNoCopyNoClear

&quot;&quot;&quot;
  Resets the MutableList.
&quot;&quot;&quot;
clear

&quot;&quot;&quot;
  This function takes a higher order function(inMapFunc) and one argument(ArgT1).
  It applies these function to each element in the list mutating it and by doing so updating
  the list.
&quot;&quot;&quot;
mapNoCopy_1

&quot;&quot;&quot;
  This functions folds a MutableList, delst using inMapFunc together with the extra argument arg.
&quot;&quot;&quot;
mapFoldNoCopy
"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Creates a new Mutable list with one element, first of type T.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
new

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Converts an Immutable list, lst into an MutableList.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
fromList

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Creates a new empty MutableList</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
empty

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns the length of the MutableList, delst</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
length

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Pops and returns the first element of the MutableList, delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
pop_front
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns the current back cell of the MutableList, delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
currentBackCell

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Prepends an element elt at the front of the MutableList delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_front

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Prepends the immutable list lst at the front of the MutableList, delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_list_front

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Pushes an element elt at the back of the mutable list delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_back

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Appends the ImmutableList lst at the back of the MutableList delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_list_back

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns an immutable List and clears the MutableList</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
toListAndClear

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns an Immutable list without changing the MutableList.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
toListNoCopyNoClear

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Resets the MutableList.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
clear

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  This function takes a higher order function(inMapFunc) and one argument(ArgT1).</span>
<span class="pl-s">  It applies these function to each element in the list mutating it and by doing so updating</span>
<span class="pl-s">  the list.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
mapNoCopy_1

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  This functions folds a MutableList, delst using inMapFunc together with the extra argument arg.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
mapFoldNoCopy</pre></div>
</article></div>