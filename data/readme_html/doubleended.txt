<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-doubleended" class="anchor" aria-hidden="true" href="#doubleended"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DoubleEnded</h1>
<p><strong>A Double ended mutable list for Julia</strong></p>
<p>This package provides a DoubleEnded mutable list.
It is provided to be used in conjunction with the singly linked immutable list,
provided in ImmutableList.jl.</p>
<p>This package contains the defintion
along with various utility methods to get the head and the tail in constant time.</p>
<h2><a id="user-content-mutablelist" class="anchor" aria-hidden="true" href="#mutablelist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MutableList</h2>
<p><code>MutableList</code> is a single linked and double ended list.</p>
<ul>
<li>Usage:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>  lst1<span class="pl-k">::</span><span class="pl-c1">List</span> <span class="pl-k">=</span> nil
  dLst1<span class="pl-k">::</span><span class="pl-c1">DoubleEnded.MutableList</span> <span class="pl-k">=</span> DoubleEnded<span class="pl-k">.</span><span class="pl-c1">fromList</span>(lst1) <span class="pl-c"><span class="pl-c">#</span>Creates an empty double ended list</span>
  dLst2<span class="pl-k">::</span><span class="pl-c1">DoubleEnded.MutableList</span> <span class="pl-k">=</span> DoubleEnded<span class="pl-k">.</span>empty <span class="pl-c"><span class="pl-c">#</span>Same as above</span>
  <span class="pl-c"><span class="pl-c">#</span>Creates a double ended list from the immutable list (1,2,3)</span>
  dLst2<span class="pl-k">::</span><span class="pl-c1">DoubleEnded.MutableList</span> <span class="pl-k">=</span> DoubleEnded<span class="pl-k">.</span><span class="pl-c1">fromList</span>(ImmutableList<span class="pl-k">.</span><span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>))</pre></div>
<ul>
<li>Utility functions:</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Creates a new Mutable list with one element, first of type T.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
new

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Converts an Immutable list, lst into an MutableList.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
fromList

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Creates a new empty MutableList</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
empty

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns the length of the MutableList, delst</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
length

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Pops and returns the first element of the MutableList, delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
pop_front
<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns the current back cell of the MutableList, delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
currentBackCell

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Prepends an element elt at the front of the MutableList delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_front

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Prepends the immutable list lst at the front of the MutableList, delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_list_front

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Pushes an element elt at the back of the mutable list delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_back

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Appends the ImmutableList lst at the back of the MutableList delst.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
push_list_back

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns an immutable List and clears the MutableList</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
toListAndClear

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Returns an Immutable list without changing the MutableList.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
toListNoCopyNoClear

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  Resets the MutableList.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
clear

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  This function takes a higher order function(inMapFunc) and one argument(ArgT1).</span>
<span class="pl-s">  It applies these function to each element in the list mutating it and by doing so updating</span>
<span class="pl-s">  the list.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
mapNoCopy_1

<span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">  This functions folds a MutableList, delst using inMapFunc together with the extra argument arg.</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>
mapFoldNoCopy</pre></div>
</article></div>