<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-bijectivehilbert" class="anchor" aria-hidden="true" href="#bijectivehilbert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>BijectiveHilbert</h1>
<p dir="auto"><a href="https://adolgert.github.io/BijectiveHilbert.jl/stable" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://adolgert.github.io/BijectiveHilbert.jl/dev" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/adolgert/BijectiveHilbert.jl/actions"><img src="https://github.com/adolgert/BijectiveHilbert.jl/workflows/CI/badge.svg" alt="Build Status" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/adolgert/BijectiveHilbert.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/a2f4504430f356e4772166497a85fcb1d6fb50e07a92ef00862232c8cc8bb036/68747470733a2f2f636f6465636f762e696f2f67682f61646f6c676572742f42696a65637469766548696c626572742e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Coverage" data-canonical-src="https://codecov.io/gh/adolgert/BijectiveHilbert.jl/branch/master/graph/badge.svg" style="max-width: 100%;"></a></p>
<p dir="auto">Data in two or more dimensions is stored linearly, so places nearby in the data can be far in memory or on disk. This package offers functions that make multi-dimensional data storage and retrieval more efficient by sorting them so that nearby data is nearby in memory.</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="julia&gt; using Pkg; Pkg.add(&quot;BijectiveHilbert&quot;)
julia&gt; using BijectiveHilbert
julia&gt; xy = zeros(Int, 8, 8)
julia&gt; for y in 1:size(xy, 2)
           for x in 1:size(xy, 1)
               z = encode_hilbert(Simple2D(Int), [x, y])
               xy[x, y] = z
           end
       end
julia&gt; X = zeros(Int, 2)
julia&gt; decode_hilbert!(Simple2D(Int), X, xy[5, 7])
julia&gt; X == [5, 7]
julia&gt; xy
8×8 Array{Int64,2}:
  1   2  15  16  17  20  21  22
  4   3  14  13  18  19  24  23
  5   8   9  12  31  30  25  26
  6   7  10  11  32  29  28  27
 59  58  55  54  33  36  37  38
 60  57  56  53  34  35  40  39
 61  62  51  52  47  46  41  42
 64  63  50  49  48  45  44  43"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>BijectiveHilbert<span class="pl-pds">"</span></span>)
julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> BijectiveHilbert
julia<span class="pl-k">&gt;</span> xy <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">8</span>, <span class="pl-c1">8</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-k">for</span> y <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(xy, <span class="pl-c1">2</span>)
           <span class="pl-k">for</span> x <span class="pl-k">in</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">size</span>(xy, <span class="pl-c1">1</span>)
               z <span class="pl-k">=</span> <span class="pl-c1">encode_hilbert</span>(<span class="pl-c1">Simple2D</span>(Int), [x, y])
               xy[x, y] <span class="pl-k">=</span> z
           <span class="pl-k">end</span>
       <span class="pl-k">end</span>
julia<span class="pl-k">&gt;</span> X <span class="pl-k">=</span> <span class="pl-c1">zeros</span>(Int, <span class="pl-c1">2</span>)
julia<span class="pl-k">&gt;</span> <span class="pl-c1">decode_hilbert!</span>(<span class="pl-c1">Simple2D</span>(Int), X, xy[<span class="pl-c1">5</span>, <span class="pl-c1">7</span>])
julia<span class="pl-k">&gt;</span> X <span class="pl-k">==</span> [<span class="pl-c1">5</span>, <span class="pl-c1">7</span>]
julia<span class="pl-k">&gt;</span> xy
<span class="pl-c1">8</span><span class="pl-k">×</span><span class="pl-c1">8</span> Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
  <span class="pl-c1">1</span>   <span class="pl-c1">2</span>  <span class="pl-c1">15</span>  <span class="pl-c1">16</span>  <span class="pl-c1">17</span>  <span class="pl-c1">20</span>  <span class="pl-c1">21</span>  <span class="pl-c1">22</span>
  <span class="pl-c1">4</span>   <span class="pl-c1">3</span>  <span class="pl-c1">14</span>  <span class="pl-c1">13</span>  <span class="pl-c1">18</span>  <span class="pl-c1">19</span>  <span class="pl-c1">24</span>  <span class="pl-c1">23</span>
  <span class="pl-c1">5</span>   <span class="pl-c1">8</span>   <span class="pl-c1">9</span>  <span class="pl-c1">12</span>  <span class="pl-c1">31</span>  <span class="pl-c1">30</span>  <span class="pl-c1">25</span>  <span class="pl-c1">26</span>
  <span class="pl-c1">6</span>   <span class="pl-c1">7</span>  <span class="pl-c1">10</span>  <span class="pl-c1">11</span>  <span class="pl-c1">32</span>  <span class="pl-c1">29</span>  <span class="pl-c1">28</span>  <span class="pl-c1">27</span>
 <span class="pl-c1">59</span>  <span class="pl-c1">58</span>  <span class="pl-c1">55</span>  <span class="pl-c1">54</span>  <span class="pl-c1">33</span>  <span class="pl-c1">36</span>  <span class="pl-c1">37</span>  <span class="pl-c1">38</span>
 <span class="pl-c1">60</span>  <span class="pl-c1">57</span>  <span class="pl-c1">56</span>  <span class="pl-c1">53</span>  <span class="pl-c1">34</span>  <span class="pl-c1">35</span>  <span class="pl-c1">40</span>  <span class="pl-c1">39</span>
 <span class="pl-c1">61</span>  <span class="pl-c1">62</span>  <span class="pl-c1">51</span>  <span class="pl-c1">52</span>  <span class="pl-c1">47</span>  <span class="pl-c1">46</span>  <span class="pl-c1">41</span>  <span class="pl-c1">42</span>
 <span class="pl-c1">64</span>  <span class="pl-c1">63</span>  <span class="pl-c1">50</span>  <span class="pl-c1">49</span>  <span class="pl-c1">48</span>  <span class="pl-c1">45</span>  <span class="pl-c1">44</span>  <span class="pl-c1">43</span></pre></div>
<p dir="auto">This function, called a <a href="https://en.wikipedia.org/wiki/Hilbert_curve" rel="nofollow">Hilbert curve</a>, is used most often for geospatial work or database implementation but is equally appropriate for dealing with large TIFF files. It belongs to the class of space-filling, self-avoiding, simple, and self-similar (FASS) curves, which includes Peano curves, and Morton z-curves.</p>
<p dir="auto">Included are several variations of the Hilbert curve. They are type-stable and thoroughly tested, including bug fixes on three of the implementations.</p>
<ul dir="auto">
<li><a href="https://computingkitchen.com/BijectiveHilbert.jl/stable/simple2d/" rel="nofollow"><code>Simple2D</code></a>, shown above, two-dimensional. Doesn't need to know axis dimensions, from Chen, Wang, and Shi.</li>
<li><a href="https://computingkitchen.com/BijectiveHilbert.jl/stable/globalgray/" rel="nofollow"><code>GlobalGray</code></a>, an n-dimensional curve where all axis dimensions must be equal, from Skilling.</li>
<li><a href="https://computingkitchen.com/BijectiveHilbert.jl/stable/compact/" rel="nofollow"><code>SpaceGray</code></a>, an n-dimensional curve with a different path. All axis dimensions must be equal, from Hamilton and Rau-Chaplin.</li>
<li><a href="https://computingkitchen.com/BijectiveHilbert.jl/stable/compact/" rel="nofollow"><code>Compact</code></a>, an n-dimensional curve the permits each axis to be a different size, from Hamilton and Rau-Chaplin.</li>
<li><a href="https://computingkitchen.com/BijectiveHilbert.jl/stable/facecontinuous/" rel="nofollow"><code>FaceContinuous</code></a>, an n-dimensional curve, the oldest version from Butz and Lawder.</li>
</ul>
<h2 dir="auto"><a id="user-content-hilbert-curves-for-computation" class="anchor" aria-hidden="true" href="#hilbert-curves-for-computation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Hilbert curves for computation</h2>
<p dir="auto">A video about using Hilbert curves:</p>
<p dir="auto"><a href="https://youtu.be/MlfS7xo2L7w" rel="nofollow"><img src="docs/src/hilbert_thumb.jpg" alt="Hilbert curves for computation" style="max-width: 100%;"></a></p>
</article></div>