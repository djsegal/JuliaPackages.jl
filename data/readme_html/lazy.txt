<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1><a id="user-content-lazyjl" class="anchor" aria-hidden="true" href="#lazyjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Lazy.jl</h1>
<p><a href="https://gitter.im/one-more-minute/Lazy.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c7c9e6e01df371e7525c155e172b66810d22d15b79c54a2744abe2d521dc7807/68747470733a2f2f6261646765732e6769747465722e696d2f6f6e652d6d6f72652d6d696e7574652f4c617a792e6a6c2e706e67" alt="Gitter chat" data-canonical-src="https://badges.gitter.im/one-more-minute/Lazy.jl.png" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="Pkg.add(&quot;Lazy&quot;)
"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Lazy<span class="pl-pds">"</span></span>)</pre></div>
<p>Lazy.jl provides Julia with the cornerstones of functional programming - lazily-evaluated lists and a large library of functions for working with them. It's also a repository for some neat macros, which might be useful to you even if you don't want lazy lists (see below).</p>
<p>Firstly, the canonical examples, in Julia:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="using Lazy

# Note : prepends. Don't forget the semicolon!
#   -- When running interactively, the semi-colon prevents the environment 
#      from trying to display an infinite list.

# Fibonacci sequence defined in terms of itself:
fibs = @lazy 0:1:(fibs + drop(1, fibs));

take(20, fibs)
#&gt; (0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181)

# isprime defined in terms of the prime numbers:
isprime(n) =
  @&gt;&gt; primes begin
    takewhile(x -&gt; x&lt;=sqrt(n))
    map(x -&gt; n % x == 0)
    any; !
  end

# the prime numbers defined in terms of isprime:
primes = filter(isprime, Lazy.range(2));

take(20, primes)
#&gt; (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71)
"><pre><span class="pl-k">using</span> Lazy

<span class="pl-c"><span class="pl-c">#</span> Note : prepends. Don't forget the semicolon!</span>
<span class="pl-c"><span class="pl-c">#</span>   -- When running interactively, the semi-colon prevents the environment </span>
<span class="pl-c"><span class="pl-c">#</span>      from trying to display an infinite list.</span>

<span class="pl-c"><span class="pl-c">#</span> Fibonacci sequence defined in terms of itself:</span>
fibs <span class="pl-k">=</span> <span class="pl-c1">@lazy</span> <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span><span class="pl-k">:</span>(fibs <span class="pl-k">+</span> <span class="pl-c1">drop</span>(<span class="pl-c1">1</span>, fibs));

<span class="pl-c1">take</span>(<span class="pl-c1">20</span>, fibs)
<span class="pl-c"><span class="pl-c">#</span>&gt; (0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181)</span>

<span class="pl-c"><span class="pl-c">#</span> isprime defined in terms of the prime numbers:</span>
<span class="pl-en">isprime</span>(n) <span class="pl-k">=</span>
  @<span class="pl-k">&gt;&gt;</span> primes <span class="pl-k">begin</span>
    <span class="pl-c1">takewhile</span>(x <span class="pl-k">-&gt;</span> x<span class="pl-k">&lt;=</span><span class="pl-c1">sqrt</span>(n))
    <span class="pl-c1">map</span>(x <span class="pl-k">-&gt;</span> n <span class="pl-k">%</span> x <span class="pl-k">==</span> <span class="pl-c1">0</span>)
    any; <span class="pl-k">!</span>
  <span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> the prime numbers defined in terms of isprime:</span>
primes <span class="pl-k">=</span> <span class="pl-c1">filter</span>(isprime, Lazy<span class="pl-k">.</span><span class="pl-c1">range</span>(<span class="pl-c1">2</span>));

<span class="pl-c1">take</span>(<span class="pl-c1">20</span>, primes)
<span class="pl-c"><span class="pl-c">#</span>&gt; (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71)</span></pre></div>
<p>If you've done any functional programming, you already know how to use Lazy.jl; just head down to the reference below to see what functions are available.</p>
<h3><a id="user-content-intro-to-laziness" class="anchor" aria-hidden="true" href="#intro-to-laziness"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Intro to Laziness</h3>
<p>For the unfamiliar, laziness just means that the elements of the list aren't actually calculated until you use them. This allows you to perform all sorts of magic, like working with infinite lists or lists of items from the future.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Even square numbers:
&gt; esquares = @&gt;&gt; Lazy.range() map(x-&gt;x^2) filter(iseven);
# first 5
&gt; take(5, esquares)
List:
  4
  16
  36
  64
  100
# 99th
&gt; esquares[99]
39204
"><pre><span class="pl-c"><span class="pl-c">#</span> Even square numbers:</span>
<span class="pl-k">&gt;</span> esquares <span class="pl-k">=</span> @<span class="pl-k">&gt;&gt;</span> Lazy<span class="pl-k">.</span><span class="pl-c1">range</span>() <span class="pl-c1">map</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>) <span class="pl-c1">filter</span>(iseven);
<span class="pl-c"><span class="pl-c">#</span> first 5</span>
<span class="pl-k">&gt;</span> <span class="pl-c1">take</span>(<span class="pl-c1">5</span>, esquares)
List<span class="pl-k">:</span>
  <span class="pl-c1">4</span>
  <span class="pl-c1">16</span>
  <span class="pl-c1">36</span>
  <span class="pl-c1">64</span>
  <span class="pl-c1">100</span>
<span class="pl-c"><span class="pl-c">#</span> 99th</span>
<span class="pl-k">&gt;</span> esquares[<span class="pl-c1">99</span>]
<span class="pl-c1">39204</span></pre></div>
<p>But lazy lists aren't just for mathematical tricks; you can use them very practically for things like file IO. For example, you might represent the lines of a terabyte-large file with a lazy list; you can process the lines as any other list, letting the IO happen in the background.</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# TODO: lineseq example
@&gt;&gt; &quot;file.txt&quot; lineseq foreach(println) # Will work no matter many lines file.txt has
"><pre><span class="pl-c"><span class="pl-c">#</span> TODO: lineseq example</span>
@<span class="pl-k">&gt;&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>file.txt<span class="pl-pds">"</span></span> lineseq <span class="pl-c1">foreach</span>(println) <span class="pl-c"><span class="pl-c">#</span> Will work no matter many lines file.txt has</span></pre></div>
<p>The other thing that separates lists from arrays is the huge amount of functionality that comes with most functional programming libraries, including Lazy.jl - if you know your way around them, most data manipulation becomes a simple case of chaining a few functions together. Even if you do ultimately need arrays for speed, you could do worse than to prototype with lists.</p>
<h3><a id="user-content-macros" class="anchor" aria-hidden="true" href="#macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Macros</h3>
<p>The threading macros will pipe values through functions, a bit like the <code>|&gt;</code> operator but far more flexible. They can make code a <em>lot</em> cleaner by putting function calls in the order they are applied. The best way to understand them is by example:</p>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="# Just like x |&gt; f etc.
@&gt; x f == f(x)
@&gt; x g f == f(g(x))
@&gt; x a b c d e == e(d(c(b(a(x)))))

# Unlike |&gt;, functions can have arguments - the value
# preceding a function will be treated as its first argument
@&gt; x g(y, z) f == f(g(x, y, z))

@&gt; x g f(y, z) == f(g(x), y, z)

# @&gt;&gt; does the exact same thing, but with value treated as the *last* argument.

@&gt;&gt; x g(y, z) f == f(g(y, z, x))

@&gt;&gt; x g f(y, z) == f(y, z, g(x))

# @as lets you name the threaded argument
@as x start_value f(x, y) g(z, x) == g(z, f(start_value, y))

# All threading macros work over begin blocks

@as x 2 begin
 x^2
 x+2
end == 6
"><pre><span class="pl-c"><span class="pl-c">#</span> Just like x |&gt; f etc.</span>
@<span class="pl-k">&gt;</span> x f <span class="pl-k">==</span> <span class="pl-c1">f</span>(x)
@<span class="pl-k">&gt;</span> x g f <span class="pl-k">==</span> <span class="pl-c1">f</span>(<span class="pl-c1">g</span>(x))
@<span class="pl-k">&gt;</span> x a b c d e <span class="pl-k">==</span> <span class="pl-c1">e</span>(<span class="pl-c1">d</span>(<span class="pl-c1">c</span>(<span class="pl-c1">b</span>(<span class="pl-c1">a</span>(x)))))

<span class="pl-c"><span class="pl-c">#</span> Unlike |&gt;, functions can have arguments - the value</span>
<span class="pl-c"><span class="pl-c">#</span> preceding a function will be treated as its first argument</span>
@<span class="pl-k">&gt;</span> x <span class="pl-c1">g</span>(y, z) f <span class="pl-k">==</span> <span class="pl-c1">f</span>(<span class="pl-c1">g</span>(x, y, z))

@<span class="pl-k">&gt;</span> x g <span class="pl-c1">f</span>(y, z) <span class="pl-k">==</span> <span class="pl-c1">f</span>(<span class="pl-c1">g</span>(x), y, z)

<span class="pl-c"><span class="pl-c">#</span> @&gt;&gt; does the exact same thing, but with value treated as the *last* argument.</span>

@<span class="pl-k">&gt;&gt;</span> x <span class="pl-c1">g</span>(y, z) f <span class="pl-k">==</span> <span class="pl-c1">f</span>(<span class="pl-c1">g</span>(y, z, x))

@<span class="pl-k">&gt;&gt;</span> x g <span class="pl-c1">f</span>(y, z) <span class="pl-k">==</span> <span class="pl-c1">f</span>(y, z, <span class="pl-c1">g</span>(x))

<span class="pl-c"><span class="pl-c">#</span> @as lets you name the threaded argument</span>
<span class="pl-c1">@as</span> x start_value <span class="pl-c1">f</span>(x, y) <span class="pl-c1">g</span>(z, x) <span class="pl-k">==</span> <span class="pl-c1">g</span>(z, <span class="pl-c1">f</span>(start_value, y))

<span class="pl-c"><span class="pl-c">#</span> All threading macros work over begin blocks</span>

<span class="pl-c1">@as</span> x <span class="pl-c1">2</span> <span class="pl-k">begin</span>
 x<span class="pl-k">^</span><span class="pl-c1">2</span>
 x<span class="pl-k">+</span><span class="pl-c1">2</span>
<span class="pl-k">end</span> <span class="pl-k">==</span> <span class="pl-c1">6</span></pre></div>
<h3><a id="user-content-function-reference" class="anchor" aria-hidden="true" href="#function-reference"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Function Reference</h3>
<div class="highlight highlight-source-julia position-relative" data-snippet-clipboard-copy-content="List # The abstract type that represents lazy lists

list(1,2,3) == (1 2 3)

prepend(1, list(2,3,4)) == 1:list(2,3,4) == (1 2 3 4)

# Most list handling functions have similar names
# to those in Clojure.

# Create a seq from any iterator or array
seq([1,2,3]) == seq(1:3) == (1 2 3)

# Infinite list of an element
constantly(x) == (x x x ...)
constantly(1) == (1 1 1 ...)

# Infinite list of function calls
repeatedly(f) == (f() f() f() ...)
repeatedly(rand) == (0.634 0.478 0.776 ...)

# Infinitely repeat list
cycle(a) == (a... a... a... ...)
cycle([1,2,3]) == (1 2 3 1 2 3 1 2 3 1 ...)

# Repeatedly nest function calls
iterated(f, x) == (x f(x) f(f(x)) ...)
iterated(x-&gt;x^2, 2) == (2 4 16 256 65536 ...)

range(2) == (2 3 4 5 ...)
range(1, 5) == (1 2 3 4 5)
range(1, 5, 2) == (1 3 5)

list(1,2,3) * list(4,5,6) == (1 2 3 4 5 6)

first(list(1,2,3)) == 1
tail(list(1,2,3)) == (2 3)

flatten(list(1,2,list(3,4))) == (1 2 3 4)

takeuntil(x -&gt; x &gt; 1, 0:1) == (0 1)
takeuntil(x -&gt; x &gt; 1, 0:5) == (0 1 2)
takeuntil(x -&gt; x &gt; 1, 2:5) == (2)
takeuntil(x -&gt; x &gt; 1, []) == ()

riffle
interpose
take
drop
takelast
droplast
takenth
takewhile
dropwhile
# These work as for arrays, but are
# lazy where appropriate.
map, reduce, filter, reverse
lazymap
reductions
remove
dorun
foreach
distinct
groupby
partition
partitionby
splitat
splitby

# @lazy is the secret sauce that makes infinite definitions
# work; usually you can just wrap your list definition in it:
@lazy [1,2,3] == (1 2 3)
# Define a lazy recursive function
constantly(x) = @lazy x:constantly(x)

# Make a function map itself over lists
@listable exp
exp(range()) == (2.71 7.38 20.08 54.59 148.41 ...)

# Threading macros, see above
@&gt;, @&gt;&gt;
"><pre>List <span class="pl-c"><span class="pl-c">#</span> The abstract type that represents lazy lists</span>

<span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>)

<span class="pl-c1">prepend</span>(<span class="pl-c1">1</span>, <span class="pl-c1">list</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>)) <span class="pl-k">==</span> <span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">list</span>(<span class="pl-c1">2</span>,<span class="pl-c1">3</span>,<span class="pl-c1">4</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>)

<span class="pl-c"><span class="pl-c">#</span> Most list handling functions have similar names</span>
<span class="pl-c"><span class="pl-c">#</span> to those in Clojure.</span>

<span class="pl-c"><span class="pl-c">#</span> Create a seq from any iterator or array</span>
<span class="pl-c1">seq</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">==</span> <span class="pl-c1">seq</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">3</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>)

<span class="pl-c"><span class="pl-c">#</span> Infinite list of an element</span>
<span class="pl-c1">constantly</span>(x) <span class="pl-k">==</span> (x x x <span class="pl-k">...</span>)
<span class="pl-c1">constantly</span>(<span class="pl-c1">1</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-c1">1</span> <span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> Infinite list of function calls</span>
<span class="pl-c1">repeatedly</span>(f) <span class="pl-k">==</span> (<span class="pl-c1">f</span>() <span class="pl-c1">f</span>() <span class="pl-c1">f</span>() <span class="pl-k">...</span>)
<span class="pl-c1">repeatedly</span>(rand) <span class="pl-k">==</span> (<span class="pl-c1">0.634</span> <span class="pl-c1">0.478</span> <span class="pl-c1">0.776</span> <span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> Infinitely repeat list</span>
<span class="pl-c1">cycle</span>(a) <span class="pl-k">==</span> (a<span class="pl-k">...</span> a<span class="pl-k">...</span> a<span class="pl-k">...</span> <span class="pl-k">...</span>)
<span class="pl-c1">cycle</span>([<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">1</span> <span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> Repeatedly nest function calls</span>
<span class="pl-c1">iterated</span>(f, x) <span class="pl-k">==</span> (x <span class="pl-c1">f</span>(x) <span class="pl-c1">f</span>(<span class="pl-c1">f</span>(x)) <span class="pl-k">...</span>)
<span class="pl-c1">iterated</span>(x<span class="pl-k">-&gt;</span>x<span class="pl-k">^</span><span class="pl-c1">2</span>, <span class="pl-c1">2</span>) <span class="pl-k">==</span> (<span class="pl-c1">2</span> <span class="pl-c1">4</span> <span class="pl-c1">16</span> <span class="pl-c1">256</span> <span class="pl-c1">65536</span> <span class="pl-k">...</span>)

<span class="pl-c1">range</span>(<span class="pl-c1">2</span>) <span class="pl-k">==</span> (<span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-k">...</span>)
<span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span>)
<span class="pl-c1">range</span>(<span class="pl-c1">1</span>, <span class="pl-c1">5</span>, <span class="pl-c1">2</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">3</span> <span class="pl-c1">5</span>)

<span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>) <span class="pl-k">*</span> <span class="pl-c1">list</span>(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">6</span>) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span> <span class="pl-c1">5</span> <span class="pl-c1">6</span>)

<span class="pl-c1">first</span>(<span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)) <span class="pl-k">==</span> <span class="pl-c1">1</span>
<span class="pl-c1">tail</span>(<span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>)) <span class="pl-k">==</span> (<span class="pl-c1">2</span> <span class="pl-c1">3</span>)

<span class="pl-c1">flatten</span>(<span class="pl-c1">list</span>(<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">list</span>(<span class="pl-c1">3</span>,<span class="pl-c1">4</span>))) <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span> <span class="pl-c1">4</span>)

<span class="pl-c1">takeuntil</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1</span>) <span class="pl-k">==</span> (<span class="pl-c1">0</span> <span class="pl-c1">1</span>)
<span class="pl-c1">takeuntil</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">==</span> (<span class="pl-c1">0</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span>)
<span class="pl-c1">takeuntil</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>, <span class="pl-c1">2</span><span class="pl-k">:</span><span class="pl-c1">5</span>) <span class="pl-k">==</span> (<span class="pl-c1">2</span>)
<span class="pl-c1">takeuntil</span>(x <span class="pl-k">-&gt;</span> x <span class="pl-k">&gt;</span> <span class="pl-c1">1</span>, []) <span class="pl-k">==</span> ()

riffle
interpose
take
drop
takelast
droplast
takenth
takewhile
dropwhile
<span class="pl-c"><span class="pl-c">#</span> These work as for arrays, but are</span>
<span class="pl-c"><span class="pl-c">#</span> lazy where appropriate.</span>
map, reduce, filter, reverse
lazymap
reductions
remove
dorun
foreach
distinct
groupby
partition
partitionby
splitat
splitby

<span class="pl-c"><span class="pl-c">#</span> @lazy is the secret sauce that makes infinite definitions</span>
<span class="pl-c"><span class="pl-c">#</span> work; usually you can just wrap your list definition in it:</span>
<span class="pl-c1">@lazy</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>] <span class="pl-k">==</span> (<span class="pl-c1">1</span> <span class="pl-c1">2</span> <span class="pl-c1">3</span>)
<span class="pl-c"><span class="pl-c">#</span> Define a lazy recursive function</span>
<span class="pl-en">constantly</span>(x) <span class="pl-k">=</span> <span class="pl-c1">@lazy</span> x<span class="pl-k">:</span><span class="pl-c1">constantly</span>(x)

<span class="pl-c"><span class="pl-c">#</span> Make a function map itself over lists</span>
<span class="pl-c1">@listable</span> exp
<span class="pl-c1">exp</span>(<span class="pl-c1">range</span>()) <span class="pl-k">==</span> (<span class="pl-c1">2.71</span> <span class="pl-c1">7.38</span> <span class="pl-c1">20.08</span> <span class="pl-c1">54.59</span> <span class="pl-c1">148.41</span> <span class="pl-k">...</span>)

<span class="pl-c"><span class="pl-c">#</span> Threading macros, see above</span>
@<span class="pl-k">&gt;</span>, @<span class="pl-k">&gt;&gt;</span></pre></div>
</article></div>