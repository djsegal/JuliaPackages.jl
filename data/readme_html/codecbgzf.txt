<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-codecbgzfjl" class="anchor" aria-hidden="true" href="#codecbgzfjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>CodecBGZF.jl</h1>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jakobnissen/CodecBGZF.jl/workflows/CI/badge.svg"><img src="https://github.com/jakobnissen/CodecBGZF.jl/workflows/CI/badge.svg" alt="CI" style="max-width: 100%;"></a>
<a href="https://codecov.io/gh/jakobnissen/CodecBGZF.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/422d848d8084e8aba8337ce35d708c175f8fb8118ddef8712736c60da457c371/68747470733a2f2f636f6465636f762e696f2f67682f6a616b6f626e697373656e2f436f64656342475a462e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d564b46433139595a5547" alt="codecov" data-canonical-src="https://codecov.io/gh/jakobnissen/CodecBGZF.jl/branch/master/graph/badge.svg?token=VKFC19YZUG" style="max-width: 100%;"></a></p>
<p dir="auto"><em>Codec for BGZF files</em></p>
<p dir="auto">This package implements an efficient codec for <a href="https://samtools.github.io/hts-specs/SAMv1.pdf" rel="nofollow">BGZF files</a>. The BGZF format consists of the concatenation of small gzip blocks. Because the format is blocked, it allows for random access and siginificantly faster de/compression.</p>
<p dir="auto">The package has the following notable features:</p>
<ul dir="auto">
<li>Correctness above all: The BGZF format is well specified, and the package must write and read spec-compliantly. This includes validating the given checksums, decompression lengths, and the trailing EOF block.</li>
<li>Integration with the Julia ecosystem. This is achieved by this package being a codec for the <code>TranscodingStreams.jl</code> package.</li>
<li>Speed: This package should be the fastest Julia implementation of a BGZF parser. It is achieved by leveraging LibDeflate.jl, and by doing de/compression in a multithreaded and asynchronous manner.</li>
<li>Convenient random access with <em>virtual file offsets</em>.</li>
<li>Creation of <a href="http://www.htslib.org/doc/bgzip.html" rel="nofollow">GZI</a> index files directly from compressed bgzipped files.</li>
</ul>
<h2 dir="auto"><a id="user-content-api" class="anchor" aria-hidden="true" href="#api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>API</h2>
<p dir="auto"><strong>High level API</strong></p>
<ul dir="auto">
<li><code>BGZFDecompressorStream(io::IO; nthreads=Threads.nthreads())</code> - create a decompressing <code>TranscodingStream</code>.</li>
<li><code>BGZFCompressorStream(io::IO; nthreads=Threads.nthreads(), compresslevel=6)</code> - create a compressing <code>TranscodingStream</code> compressing to level <code>compresslevel</code>.</li>
<li><code>gzi(io::IO)</code> - return a <code>Vector{UInt8}</code> representing the GZI index for a BGZF file <code>io</code>. To be used like this: <code>gzi(open("/path/to/file.bgz"))</code></li>
<li><code>VirtualOffset(s::BGZFDecompressorStream)</code> - Get an object representing the current offset of the stream. You can obtain the block offset and inblock offsets with <code>offsets(v)</code></li>
<li><code>seek(s::BGZFDecompressorStream, v::VirtualOffset)</code> - seek the stream to the given offset.</li>
<li>Being <code>TranscodingStreams</code>, you can expect the usual IO-related functions to work on the streams.</li>
</ul>
</article></div>