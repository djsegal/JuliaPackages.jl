<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-keywordstrings" class="anchor" aria-hidden="true" href="#keywordstrings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>KeywordStrings</h1>
<p dir="auto"><a href="https://github.com/adienes/KeywordStrings.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/adienes/KeywordStrings.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">The goal is to provide a maximally-convenient API for string interpolation. This package exports essentially only one piece of machinery which is the macro <code>@kw_str</code> accessed either via a non-standard string literal (preferred) or a direct macro call.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; kw&quot;Hello, $User!&quot;
...
julia&gt; @kw_str(raw&quot;Hello, $User!&quot;)"><pre class="notranslate"><code>julia&gt; kw"Hello, $User!"
...
julia&gt; @kw_str(raw"Hello, $User!")
</code></pre></div>
<p dir="auto">Once a <code>KeywordString</code> has been created, it can be formatted with the <code>%</code> operator using any Julia object that has either keys or properties with the same names as the interpolated symbols in the input. Crucially, the symbols to interpolate do <strong>not</strong> have to be defined anywhere at the time of creating the string. Formatters can be called incrementally and composed arbitrarily; once all values have been concretely interpolated the <code>KeywordString</code> will become just a regular Julia <code>String</code></p>
<h3 dir="auto"><a id="user-content-basic-usage" class="anchor" aria-hidden="true" href="#basic-usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Basic Usage</h3>
<p dir="auto">Basic usage with a <code>NamedTuple</code>, also showcasing the incremental formatting.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; s = kw&quot;Hello, $(name)! Your value is $value&quot;;
# a KeywordStrings object

julia&gt; s %= (; name=&quot;Andy&quot;);
# still a KeywordStrings object

julia&gt; s %= (; value=14)
&quot;Hello, Andy! Your value is 14&quot;"><pre class="notranslate"><code>julia&gt; s = kw"Hello, $(name)! Your value is $value";
# a KeywordStrings object

julia&gt; s %= (; name="Andy");
# still a KeywordStrings object

julia&gt; s %= (; value=14)
"Hello, Andy! Your value is 14"
</code></pre></div>
<p dir="auto">It will also work with <code>structs</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; struct User
           name
           value
       end

julia&gt; me = User(&quot;Andy&quot;, 14)
User(&quot;Andy&quot;, 14)

julia&gt; s = kw&quot;Hello, $(name)! Your value is $value&quot; % me
&quot;Hello, Andy! Your value is 14&quot;"><pre class="notranslate"><code>julia&gt; struct User
           name
           value
       end

julia&gt; me = User("Andy", 14)
User("Andy", 14)

julia&gt; s = kw"Hello, $(name)! Your value is $value" % me
"Hello, Andy! Your value is 14"
</code></pre></div>
<p dir="auto">We can join a <code>KeywordString</code> with another using <code>*</code>, so just as for <code>String</code> composition works</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; kw&quot;x=$x;&quot; * kw&quot;y=$y&quot; % (; x=5, y=6)
&quot;x=5;y=6&quot;"><pre class="notranslate"><code>julia&gt; kw"x=$x;" * kw"y=$y" % (; x=5, y=6)
"x=5;y=6"
</code></pre></div>
<p dir="auto">And so does broadcasting</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; users = [User(name, rand()) for name in (&quot;Alice&quot;, &quot;Bob&quot;, &quot;Eve&quot;)];

julia&gt; kw&quot;$name is present&quot; .% users
3-element Vector{String}:
 &quot;Alice is present&quot;
 &quot;Bob is present&quot;
 &quot;Eve is present&quot;"><pre class="notranslate"><code>julia&gt; users = [User(name, rand()) for name in ("Alice", "Bob", "Eve")];

julia&gt; kw"$name is present" .% users
3-element Vector{String}:
 "Alice is present"
 "Bob is present"
 "Eve is present"
</code></pre></div>
<h3 dir="auto"><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Notes</h3>
<p dir="auto">Since any object with a <code>getproperty</code> or <code>getkey</code> method is supported, we can even do things like</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; s % Base.@locals();
#or
julia&gt; s % @__MODULE__;"><pre class="notranslate"><code>julia&gt; s % Base.@locals();
#or
julia&gt; s % @__MODULE__;
</code></pre></div>
<p dir="auto">And these get special syntax for creation, namely if the string literal ends in <code>$!</code>, <code>$ยก</code>, or <code>$:</code></p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; kw&quot;...$!&quot; #alias for kw&quot;...&quot; % Base.@locals()
julia&gt; kw&quot;...$ยก&quot; #alias for kw&quot;...&quot; % @__MODULE__
julia&gt; kw&quot;...$:&quot; #alias for kw&quot;...&quot; % Base.@locals() % @__MODULE__"><pre class="notranslate"><code>julia&gt; kw"...$!" #alias for kw"..." % Base.@locals()
julia&gt; kw"...$ยก" #alias for kw"..." % @__MODULE__
julia&gt; kw"...$:" #alias for kw"..." % Base.@locals() % @__MODULE__
</code></pre></div>
<p dir="auto">Where in particular appending <code>$:</code> should recover standard interpolation behavior</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="julia&gt; name = &quot;Andy&quot;
&quot;Andy&quot;

julia&gt; let value = 14
           kw&quot;Hello, $(name)! Your value is $value$:&quot;
       end
&quot;Hello, Andy! Your value is 14&quot;"><pre class="notranslate"><code>julia&gt; name = "Andy"
"Andy"

julia&gt; let value = 14
           kw"Hello, $(name)! Your value is $value$:"
       end
"Hello, Andy! Your value is 14"
</code></pre></div>
<h3 dir="auto"><a id="user-content-limitations" class="anchor" aria-hidden="true" href="#limitations"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>Limitations</h3>
<ul dir="auto">
<li>This package was not written with speed as a priority. If you use these as a drop-in replacement for <code>Strings</code>, and your <code>String</code> operations are the bottleneck for performance, you will likely see reduced performance and larger allocations with <code>KeywordStrings</code>. That being said, the majority of the time <code>String</code> operations are not the bottleneck.</li>
<li>Syntax highlighting does not seem to work for non-standard string literals. This often is probably a good thing, like for the <code>Regex</code> strings, but when interpolation is the goal the absence of highlighting can make the strings (as written in code) harder to read.</li>
</ul>
</article></div>