<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content container-lg" itemprop="text"><h1 dir="auto"><a id="user-content-turingbenchmarkingjl" class="anchor" aria-hidden="true" href="#turingbenchmarkingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a>TuringBenchmarking.jl</h1>
<p dir="auto"><a href="https://torfjelde.github.io/TuringBenchmarking.jl/stable/" rel="nofollow"><img src="https://camo.githubusercontent.com/c97f0a5f2ae95755f64a27f1aa8d9a17462941fd3d6c907c7630abd5d3e60acf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d737461626c652d626c75652e737667" alt="Stable" data-canonical-src="https://img.shields.io/badge/docs-stable-blue.svg" style="max-width: 100%;"></a>
<a href="https://torfjelde.github.io/TuringBenchmarking.jl/dev/" rel="nofollow"><img src="https://camo.githubusercontent.com/7fcec4b2d3ab291529fce8ef6a4fcd4129a0683b2f5d5fe2f5c648f02db8b616/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6465762d626c75652e737667" alt="Dev" data-canonical-src="https://img.shields.io/badge/docs-dev-blue.svg" style="max-width: 100%;"></a>
<a href="https://github.com/torfjelde/TuringBenchmarking.jl/actions/workflows/CI.yml?query=branch%3Amain"><img src="https://github.com/torfjelde/TuringBenchmarking.jl/actions/workflows/CI.yml/badge.svg?branch=main" alt="Build Status" style="max-width: 100%;"></a></p>
<p dir="auto">A quick and dirty way to compare different automatic-differentiation backends in Turing.jl.</p>
<p dir="auto">A typical workflow will look something like</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="using BenchmarkTools
using Turing
using TuringBenchmarking

# Define your model.
@model function your_model(...)
    # ...
end

# Create and run the benchmarking suite for Turing.jl.
turing_suite = make_turing_suite(model; kwargs...)
run(turing_suite)"><pre><span class="pl-k">using</span> BenchmarkTools
<span class="pl-k">using</span> Turing
<span class="pl-k">using</span> TuringBenchmarking

<span class="pl-c"><span class="pl-c">#</span> Define your model.</span>
<span class="pl-c1">@model</span> <span class="pl-k">function</span> <span class="pl-en">your_model</span>(<span class="pl-k">...</span>)
    <span class="pl-c"><span class="pl-c">#</span> ...</span>
<span class="pl-k">end</span>

<span class="pl-c"><span class="pl-c">#</span> Create and run the benchmarking suite for Turing.jl.</span>
turing_suite <span class="pl-k">=</span> <span class="pl-c1">make_turing_suite</span>(model; kwargs<span class="pl-k">...</span>)
<span class="pl-c1">run</span>(turing_suite)</pre></div>
<p dir="auto">Example output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Running `examples/item-response-model.jl` on my laptop.
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  &quot;linked&quot; =&gt; 2-element BenchmarkTools.BenchmarkGroup:
          tags: []
          &quot;evaluation&quot; =&gt; Trial(1.132 ms)
          &quot;Turing.Essential.ReverseDiffAD{true}()&quot; =&gt; Trial(1.598 ms)
          &quot;Turing.Essential.ForwardDiffAD{40, true}()&quot; =&gt; Trial(184.703 ms)
  &quot;not_linked&quot; =&gt; 2-element BenchmarkTools.BenchmarkGroup:
          tags: []
          &quot;evaluation&quot; =&gt; Trial(1.131 ms)
          &quot;Turing.Essential.ReverseDiffAD{true}()&quot; =&gt; Trial(1.596 ms)
          &quot;Turing.Essential.ForwardDiffAD{40, true}()&quot; =&gt; Trial(182.864 ms)"><pre><span class="pl-c"><span class="pl-c">#</span> Running `examples/item-response-model.jl` on my laptop.</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
  tags<span class="pl-k">:</span> []
  <span class="pl-s"><span class="pl-pds">"</span>linked<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
          tags<span class="pl-k">:</span> []
          <span class="pl-s"><span class="pl-pds">"</span>evaluation<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.132</span> ms)
          <span class="pl-s"><span class="pl-pds">"</span>Turing.Essential.ReverseDiffAD{true}()<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.598</span> ms)
          <span class="pl-s"><span class="pl-pds">"</span>Turing.Essential.ForwardDiffAD{40, true}()<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">184.703</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>not_linked<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
          tags<span class="pl-k">:</span> []
          <span class="pl-s"><span class="pl-pds">"</span>evaluation<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.131</span> ms)
          <span class="pl-s"><span class="pl-pds">"</span>Turing.Essential.ReverseDiffAD{true}()<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.596</span> ms)
          <span class="pl-s"><span class="pl-pds">"</span>Turing.Essential.ForwardDiffAD{40, true}()<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">182.864</span> ms)</pre></div>
<p dir="auto"><code>"linked"</code>/<code>"not_linked"</code> here refers to whether or not we're working in unconstrained space.</p>
<p dir="auto">And if you want to compare the result to Stan:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Tell `TuringBenchmarking` how to convert `model` into Stan data &amp; model.
function TuringBenchmaring.extract_stan_data(model::Turing.Model{typeof(your_model)})
    # In the case where the Turing.jl and Stan models are identical in what they expect we can just do:
    return Dict(zip(string.(keys(model.args)), values(model.args)))
end

TuringBenchmarking.stan_model_string(model::Turing.Model{typeof(your_model)}) = &quot;&quot;&quot;
[HERE GOES YOUR STAN MODEL DEFINITION]
&quot;&quot;&quot;

# Create and run the benchmarking suite for Stan.
stan_suite = make_stan_suite(model; kwargs...)
run(stan_suite)"><pre><span class="pl-c"><span class="pl-c">#</span> Tell `TuringBenchmarking` how to convert `model` into Stan data &amp; model.</span>
<span class="pl-k">function</span> TuringBenchmaring<span class="pl-k">.</span><span class="pl-en">extract_stan_data</span>(model<span class="pl-k">::</span><span class="pl-c1">Turing.Model{typeof(your_model)}</span>)
    <span class="pl-c"><span class="pl-c">#</span> In the case where the Turing.jl and Stan models are identical in what they expect we can just do:</span>
    <span class="pl-k">return</span> <span class="pl-c1">Dict</span>(<span class="pl-c1">zip</span>(<span class="pl-c1">string</span>.(<span class="pl-c1">keys</span>(model<span class="pl-k">.</span>args)), <span class="pl-c1">values</span>(model<span class="pl-k">.</span>args)))
<span class="pl-k">end</span>

TuringBenchmarking<span class="pl-k">.</span><span class="pl-en">stan_model_string</span>(model<span class="pl-k">::</span><span class="pl-c1">Turing.Model{typeof(your_model)}</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"""</span></span>
<span class="pl-s">[HERE GOES YOUR STAN MODEL DEFINITION]</span>
<span class="pl-s"><span class="pl-pds">"""</span></span>

<span class="pl-c"><span class="pl-c">#</span> Create and run the benchmarking suite for Stan.</span>
stan_suite <span class="pl-k">=</span> <span class="pl-c1">make_stan_suite</span>(model; kwargs<span class="pl-k">...</span>)
<span class="pl-c1">run</span>(stan_suite)</pre></div>
<p dir="auto">Example output:</p>
<div class="highlight highlight-source-julia notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# Running `examples/item-response-model.jl` on my laptop.
2-element BenchmarkTools.BenchmarkGroup:
  tags: []
  &quot;evaluation&quot; =&gt; Trial(1.102 ms)
  &quot;gradient&quot; =&gt; Trial(1.256 ms)"><pre><span class="pl-c"><span class="pl-c">#</span> Running `examples/item-response-model.jl` on my laptop.</span>
<span class="pl-c1">2</span><span class="pl-k">-</span>element BenchmarkTools<span class="pl-k">.</span>BenchmarkGroup<span class="pl-k">:</span>
  tags<span class="pl-k">:</span> []
  <span class="pl-s"><span class="pl-pds">"</span>evaluation<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.102</span> ms)
  <span class="pl-s"><span class="pl-pds">"</span>gradient<span class="pl-pds">"</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Trial</span>(<span class="pl-c1">1.256</span> ms)</pre></div>
<p dir="auto">Note that the benchmarks for Stan are only in unconstrained space.</p>
</article></div>